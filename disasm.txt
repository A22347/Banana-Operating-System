
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 f0 7a 00 00       	call   c0007b10 <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 84 42 02 c0       	mov    eax,0xc0024284
c0000025:	3d 84 42 02 c0       	cmp    eax,0xc0024284
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 84 42 02 c0       	push   0xc0024284
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 84 42 02 c0       	mov    eax,0xc0024284
c0000051:	2d 84 42 02 c0       	sub    eax,0xc0024284
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 84 42 02 c0       	push   0xc0024284
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d c0 60 02 c0 00 	cmp    BYTE PTR ds:0xc00260c0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb 5c 04 02 c0       	mov    ebx,0xc002045c
c0000097:	81 eb 58 04 02 c0    	sub    ebx,0xc0020458
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be 58 04 02 c0       	mov    esi,0xc0020458
c00000a6:	a1 c4 60 02 c0       	mov    eax,ds:0xc00260c4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 c4 60 02 c0       	mov    ds:0xc00260c4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 c4 60 02 c0       	mov    eax,ds:0xc00260c4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 84 42 02 c0       	push   0xc0024284
c00000d8:	e8 23 ff ff 3f       	call   0 <SIG_STATE_STRUCT>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 c0 60 02 c0 01 	mov    BYTE PTR ds:0xc00260c0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 c8 60 02 c0       	push   0xc00260c8
c0000108:	68 84 42 02 c0       	push   0xc0024284
c000010d:	e8 ee fe ff 3f       	call   0 <SIG_STATE_STRUCT>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000297:	0f 20 d9             	mov    ecx,cr3
c000029a:	39 c8                	cmp    eax,ecx
c000029c:	74 03                	je     c00002a1 <commonThreadSwitch.doneVAS>
c000029e:	0f 22 d8             	mov    cr3,eax

c00002a1 <commonThreadSwitch.doneVAS>:
c00002a1:	85 d2                	test   edx,edx
c00002a3:	75 11                	jne    c00002b6 <commonThreadSwitch.firstTime>
c00002a5:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a8:	e8 9f 56 01 00       	call   c001594c <changeTSS>
c00002ad:	5d                   	pop    ebp
c00002ae:	5f                   	pop    edi
c00002af:	5e                   	pop    esi
c00002b0:	5a                   	pop    edx
c00002b1:	59                   	pop    ecx
c00002b2:	5b                   	pop    ebx
c00002b3:	58                   	pop    eax
c00002b4:	9d                   	popf   
c00002b5:	c3                   	ret    

c00002b6 <commonThreadSwitch.firstTime>:
c00002b6:	fa                   	cli    
c00002b7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002ba:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002bf:	60                   	pusha  
c00002c0:	e8 08 a4 00 00       	call   c000a6cd <mapVASFirstTime>
c00002c5:	61                   	popa   
c00002c6:	89 c4                	mov    esp,eax
c00002c8:	56                   	push   esi
c00002c9:	52                   	push   edx
c00002ca:	e8 7d 56 01 00       	call   c001594c <changeTSS>
c00002cf:	5a                   	pop    edx
c00002d0:	5e                   	pop    esi
c00002d1:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	59                   	pop    ecx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	81 c4 04 00 00 00    	add    esp,0x4
c00002e5:	6a 02                	push   0x2
c00002e7:	9d                   	popf   
c00002e8:	52                   	push   edx
c00002e9:	e8 8a 5b 01 00       	call   c0015e78 <taskStartupFunction>
c00002ee:	5a                   	pop    edx
c00002ef:	50                   	push   eax
c00002f0:	ff d2                	call   edx
c00002f2:	e8 49 62 01 00       	call   c0016540 <taskReturned>
c00002f7:	e9 fb ff ff ff       	jmp    c00002f7 <commonThreadSwitch.firstTime+0x41>

c00002fc <asmQuickAcquireLock>:
c00002fc:	55                   	push   ebp
c00002fd:	89 e5                	mov    ebp,esp
c00002ff:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000302 <asmQuickAcquireLock.retry>:
c0000302:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000307:	72 02                	jb     c000030b <asmQuickAcquireLock.spin_with_pause>
c0000309:	fa                   	cli    
c000030a:	c3                   	ret    

c000030b <asmQuickAcquireLock.spin_with_pause>:
c000030b:	f3 90                	pause  
c000030d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000313:	75 f6                	jne    c000030b <asmQuickAcquireLock.spin_with_pause>
c0000315:	e9 e8 ff ff ff       	jmp    c0000302 <asmQuickAcquireLock.retry>

c000031a <asmQuickReleaseLock>:
c000031a:	55                   	push   ebp
c000031b:	89 e5                	mov    ebp,esp
c000031d:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000324:	5d                   	pop    ebp
c0000325:	c3                   	ret    

c0000326 <asmAcquireLock>:
c0000326:	55                   	push   ebp
c0000327:	89 e5                	mov    ebp,esp
c0000329:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032c <asmAcquireLock.retry>:
c000032c:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000331:	72 05                	jb     c0000338 <asmAcquireLock.spin_with_pause>
c0000333:	9c                   	pushf  
c0000334:	58                   	pop    eax
c0000335:	fa                   	cli    
c0000336:	5d                   	pop    ebp
c0000337:	c3                   	ret    

c0000338 <asmAcquireLock.spin_with_pause>:
c0000338:	f3 90                	pause  
c000033a:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000340:	75 f6                	jne    c0000338 <asmAcquireLock.spin_with_pause>
c0000342:	e9 e5 ff ff ff       	jmp    c000032c <asmAcquireLock.retry>

c0000347 <asmReleaseLock>:
c0000347:	55                   	push   ebp
c0000348:	89 e5                	mov    ebp,esp
c000034a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000034d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000350:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000356:	52                   	push   edx
c0000357:	9d                   	popf   
c0000358:	5d                   	pop    ebp
c0000359:	c3                   	ret    

c000035a <loadGDT>:
c000035a:	0f 01 15 c0 6e 02 c0 	lgdtd  ds:0xc0026ec0
c0000361:	66 b8 10 00          	mov    ax,0x10
c0000365:	66 8e d8             	mov    ds,ax
c0000368:	66 8e c0             	mov    es,ax
c000036b:	66 8e e0             	mov    fs,ax
c000036e:	66 8e e8             	mov    gs,ax
c0000371:	66 8e d0             	mov    ss,ax
c0000374:	e9 00 00 00 00       	jmp    c0000379 <flush2>

c0000379 <flush2>:
c0000379:	c3                   	ret    

c000037a <memcpy>:
c000037a:	e9 ff 12 01 00       	jmp    c001167e <__not_memcpy>
c000037f:	90                   	nop

c0000380 <memcmp>:
c0000380:	56                   	push   esi
c0000381:	53                   	push   ebx
c0000382:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000386:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000038a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000038e:	85 f6                	test   esi,esi
c0000390:	74 21                	je     c00003b3 <memcmp+0x33>
c0000392:	8a 08                	mov    cl,BYTE PTR [eax]
c0000394:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000397:	38 d9                	cmp    cl,bl
c0000399:	75 25                	jne    c00003c0 <memcmp+0x40>
c000039b:	01 c6                	add    esi,eax
c000039d:	eb 0a                	jmp    c00003a9 <memcmp+0x29>
c000039f:	90                   	nop
c00003a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00003a5:	38 cb                	cmp    bl,cl
c00003a7:	75 17                	jne    c00003c0 <memcmp+0x40>
c00003a9:	83 c0 01             	add    eax,0x1
c00003ac:	83 c2 01             	add    edx,0x1
c00003af:	39 f0                	cmp    eax,esi
c00003b1:	75 ed                	jne    c00003a0 <memcmp+0x20>
c00003b3:	31 c0                	xor    eax,eax
c00003b5:	5b                   	pop    ebx
c00003b6:	5e                   	pop    esi
c00003b7:	c3                   	ret    
c00003b8:	90                   	nop
c00003b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00003c0:	0f b6 c1             	movzx  eax,cl
c00003c3:	29 d8                	sub    eax,ebx
c00003c5:	5b                   	pop    ebx
c00003c6:	5e                   	pop    esi
c00003c7:	c3                   	ret    
c00003c8:	90                   	nop
c00003c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]

c00003d0 <memmove>:
c00003d0:	55                   	push   ebp
c00003d1:	57                   	push   edi
c00003d2:	56                   	push   esi
c00003d3:	53                   	push   ebx
c00003d4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003d8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003e0:	39 dd                	cmp    ebp,ebx
c00003e2:	0f 83 a8 00 00 00    	jae    c0000490 <memmove+0xc0>
c00003e8:	85 d2                	test   edx,edx
c00003ea:	0f 84 8c 00 00 00    	je     c000047c <memmove+0xac>
c00003f0:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00003f3:	8d 75 04             	lea    esi,[ebp+0x4]
c00003f6:	39 cd                	cmp    ebp,ecx
c00003f8:	0f 93 c1             	setae  cl
c00003fb:	39 f3                	cmp    ebx,esi
c00003fd:	0f 93 c0             	setae  al
c0000400:	89 c6                	mov    esi,eax
c0000402:	31 c0                	xor    eax,eax
c0000404:	09 f1                	or     ecx,esi
c0000406:	8d 72 ff             	lea    esi,[edx-0x1]
c0000409:	83 fe 0c             	cmp    esi,0xc
c000040c:	0f 97 c0             	seta   al
c000040f:	89 c6                	mov    esi,eax
c0000411:	85 ce                	test   esi,ecx
c0000413:	0f 84 a7 00 00 00    	je     c00004c0 <memmove+0xf0>
c0000419:	89 e9                	mov    ecx,ebp
c000041b:	09 d9                	or     ecx,ebx
c000041d:	80 e1 03             	and    cl,0x3
c0000420:	0f 85 9a 00 00 00    	jne    c00004c0 <memmove+0xf0>
c0000426:	89 d7                	mov    edi,edx
c0000428:	89 d9                	mov    ecx,ebx
c000042a:	83 e7 fc             	and    edi,0xfffffffc
c000042d:	89 ee                	mov    esi,ebp
c000042f:	01 df                	add    edi,ebx
c0000431:	eb 0d                	jmp    c0000440 <memmove+0x70>
c0000433:	90                   	nop
c0000434:	90                   	nop
c0000435:	90                   	nop
c0000436:	90                   	nop
c0000437:	90                   	nop
c0000438:	90                   	nop
c0000439:	90                   	nop
c000043a:	90                   	nop
c000043b:	90                   	nop
c000043c:	90                   	nop
c000043d:	90                   	nop
c000043e:	90                   	nop
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c6 04             	add    esi,0x4
c0000445:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000448:	83 c1 04             	add    ecx,0x4
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x70>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0xac>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0xac>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0xac>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0xac>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0xac>
c0000496:	83 eb 01             	sub    ebx,0x1
c0000499:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000049c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	83 ea 01             	sub    edx,0x1
c00004a9:	75 f5                	jne    c00004a0 <memmove+0xd0>
c00004ab:	5b                   	pop    ebx
c00004ac:	89 e8                	mov    eax,ebp
c00004ae:	5e                   	pop    esi
c00004af:	5f                   	pop    edi
c00004b0:	5d                   	pop    ebp
c00004b1:	c3                   	ret    
c00004b2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00004b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00004c0:	01 ea                	add    edx,ebp
c00004c2:	89 e9                	mov    ecx,ebp
c00004c4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ca:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004d0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004d2:	83 c1 01             	add    ecx,0x1
c00004d5:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004d8:	83 c3 01             	add    ebx,0x1
c00004db:	39 d1                	cmp    ecx,edx
c00004dd:	75 f1                	jne    c00004d0 <memmove+0x100>
c00004df:	eb 9b                	jmp    c000047c <memmove+0xac>
c00004e1:	eb 0d                	jmp    c00004f0 <memset>
c00004e3:	90                   	nop
c00004e4:	90                   	nop
c00004e5:	90                   	nop
c00004e6:	90                   	nop
c00004e7:	90                   	nop
c00004e8:	90                   	nop
c00004e9:	90                   	nop
c00004ea:	90                   	nop
c00004eb:	90                   	nop
c00004ec:	90                   	nop
c00004ed:	90                   	nop
c00004ee:	90                   	nop
c00004ef:	90                   	nop

c00004f0 <memset>:
c00004f0:	57                   	push   edi
c00004f1:	56                   	push   esi
c00004f2:	53                   	push   ebx
c00004f3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00004f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00004fb:	85 d2                	test   edx,edx
c00004fd:	74 1d                	je     c000051c <memset+0x2c>
c00004ff:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0000504:	89 f7                	mov    edi,esi
c0000506:	83 fa 04             	cmp    edx,0x4
c0000509:	73 25                	jae    c0000530 <memset+0x40>
c000050b:	83 e2 03             	and    edx,0x3
c000050e:	74 0c                	je     c000051c <memset+0x2c>
c0000510:	31 c0                	xor    eax,eax
c0000512:	88 1c 07             	mov    BYTE PTR [edi+eax*1],bl
c0000515:	83 c0 01             	add    eax,0x1
c0000518:	39 d0                	cmp    eax,edx
c000051a:	72 f6                	jb     c0000512 <memset+0x22>
c000051c:	89 f0                	mov    eax,esi
c000051e:	5b                   	pop    ebx
c000051f:	5e                   	pop    esi
c0000520:	5f                   	pop    edi
c0000521:	c3                   	ret    
c0000522:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000529:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000530:	0f b6 c3             	movzx  eax,bl
c0000533:	88 c4                	mov    ah,al
c0000535:	89 c1                	mov    ecx,eax
c0000537:	c1 e1 10             	shl    ecx,0x10
c000053a:	09 c8                	or     eax,ecx
c000053c:	f7 c6 01 00 00 00    	test   esi,0x1
c0000542:	75 12                	jne    c0000556 <memset+0x66>
c0000544:	f7 c7 02 00 00 00    	test   edi,0x2
c000054a:	75 14                	jne    c0000560 <memset+0x70>
c000054c:	89 d1                	mov    ecx,edx
c000054e:	c1 e9 02             	shr    ecx,0x2
c0000551:	fc                   	cld    
c0000552:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000554:	eb b5                	jmp    c000050b <memset+0x1b>
c0000556:	88 06                	mov    BYTE PTR [esi],al
c0000558:	8d 7e 01             	lea    edi,[esi+0x1]
c000055b:	83 ea 01             	sub    edx,0x1
c000055e:	eb e4                	jmp    c0000544 <memset+0x54>
c0000560:	66 89 07             	mov    WORD PTR [edi],ax
c0000563:	83 ea 02             	sub    edx,0x2
c0000566:	83 c7 02             	add    edi,0x2
c0000569:	eb e1                	jmp    c000054c <memset+0x5c>
c000056b:	90                   	nop
c000056c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]

c0000570 <strlen>:
c0000570:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000574:	31 c0                	xor    eax,eax
c0000576:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000579:	74 15                	je     c0000590 <strlen+0x20>
c000057b:	90                   	nop
c000057c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000580:	83 c0 01             	add    eax,0x1
c0000583:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000587:	75 f7                	jne    c0000580 <strlen+0x10>
c0000589:	c3                   	ret    
c000058a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000590:	c3                   	ret    
c0000591:	eb 0d                	jmp    c00005a0 <strpbrk>
c0000593:	90                   	nop
c0000594:	90                   	nop
c0000595:	90                   	nop
c0000596:	90                   	nop
c0000597:	90                   	nop
c0000598:	90                   	nop
c0000599:	90                   	nop
c000059a:	90                   	nop
c000059b:	90                   	nop
c000059c:	90                   	nop
c000059d:	90                   	nop
c000059e:	90                   	nop
c000059f:	90                   	nop

c00005a0 <strpbrk>:
c00005a0:	57                   	push   edi
c00005a1:	56                   	push   esi
c00005a2:	53                   	push   ebx
c00005a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00005a7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00005ab:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005ae:	85 db                	test   ebx,ebx
c00005b0:	74 36                	je     c00005e8 <strpbrk+0x48>
c00005b2:	0f be 37             	movsx  esi,BYTE PTR [edi]
c00005b5:	85 f6                	test   esi,esi
c00005b7:	74 25                	je     c00005de <strpbrk+0x3e>
c00005b9:	39 de                	cmp    esi,ebx
c00005bb:	74 2d                	je     c00005ea <strpbrk+0x4a>
c00005bd:	89 fa                	mov    edx,edi
c00005bf:	eb 13                	jmp    c00005d4 <strpbrk+0x34>
c00005c1:	eb 0d                	jmp    c00005d0 <strpbrk+0x30>
c00005c3:	90                   	nop
c00005c4:	90                   	nop
c00005c5:	90                   	nop
c00005c6:	90                   	nop
c00005c7:	90                   	nop
c00005c8:	90                   	nop
c00005c9:	90                   	nop
c00005ca:	90                   	nop
c00005cb:	90                   	nop
c00005cc:	90                   	nop
c00005cd:	90                   	nop
c00005ce:	90                   	nop
c00005cf:	90                   	nop
c00005d0:	39 d9                	cmp    ecx,ebx
c00005d2:	74 16                	je     c00005ea <strpbrk+0x4a>
c00005d4:	83 c2 01             	add    edx,0x1
c00005d7:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c00005da:	85 c9                	test   ecx,ecx
c00005dc:	75 f2                	jne    c00005d0 <strpbrk+0x30>
c00005de:	83 c0 01             	add    eax,0x1
c00005e1:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005e4:	85 db                	test   ebx,ebx
c00005e6:	75 cd                	jne    c00005b5 <strpbrk+0x15>
c00005e8:	31 c0                	xor    eax,eax
c00005ea:	5b                   	pop    ebx
c00005eb:	5e                   	pop    esi
c00005ec:	5f                   	pop    edi
c00005ed:	c3                   	ret    
c00005ee:	66 90                	xchg   ax,ax

c00005f0 <strtok>:
c00005f0:	56                   	push   esi
c00005f1:	53                   	push   ebx
c00005f2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00005f6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00005fa:	85 db                	test   ebx,ebx
c00005fc:	75 09                	jne    c0000607 <strtok+0x17>
c00005fe:	eb 30                	jmp    c0000630 <strtok+0x40>
c0000600:	83 c3 01             	add    ebx,0x1
c0000603:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000607:	56                   	push   esi
c0000608:	53                   	push   ebx
c0000609:	e8 92 ff ff ff       	call   c00005a0 <strpbrk>
c000060e:	5a                   	pop    edx
c000060f:	a3 e0 60 02 c0       	mov    ds:0xc00260e0,eax
c0000614:	59                   	pop    ecx
c0000615:	39 d8                	cmp    eax,ebx
c0000617:	74 e7                	je     c0000600 <strtok+0x10>
c0000619:	85 c0                	test   eax,eax
c000061b:	74 1d                	je     c000063a <strtok+0x4a>
c000061d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000620:	8d 50 01             	lea    edx,[eax+0x1]
c0000623:	89 d8                	mov    eax,ebx
c0000625:	89 15 e0 60 02 c0    	mov    DWORD PTR ds:0xc00260e0,edx
c000062b:	5b                   	pop    ebx
c000062c:	5e                   	pop    esi
c000062d:	c3                   	ret    
c000062e:	66 90                	xchg   ax,ax
c0000630:	8b 1d e0 60 02 c0    	mov    ebx,DWORD PTR ds:0xc00260e0
c0000636:	85 db                	test   ebx,ebx
c0000638:	75 cd                	jne    c0000607 <strtok+0x17>
c000063a:	31 c0                	xor    eax,eax
c000063c:	5b                   	pop    ebx
c000063d:	5e                   	pop    esi
c000063e:	c3                   	ret    
c000063f:	90                   	nop

c0000640 <strcpy>:
c0000640:	53                   	push   ebx
c0000641:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000645:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000649:	89 c3                	mov    ebx,eax
c000064b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000064d:	84 d2                	test   dl,dl
c000064f:	74 1d                	je     c000066e <strcpy+0x2e>
c0000651:	eb 0d                	jmp    c0000660 <strcpy+0x20>
c0000653:	90                   	nop
c0000654:	90                   	nop
c0000655:	90                   	nop
c0000656:	90                   	nop
c0000657:	90                   	nop
c0000658:	90                   	nop
c0000659:	90                   	nop
c000065a:	90                   	nop
c000065b:	90                   	nop
c000065c:	90                   	nop
c000065d:	90                   	nop
c000065e:	90                   	nop
c000065f:	90                   	nop
c0000660:	88 13                	mov    BYTE PTR [ebx],dl
c0000662:	83 c1 01             	add    ecx,0x1
c0000665:	83 c3 01             	add    ebx,0x1
c0000668:	8a 11                	mov    dl,BYTE PTR [ecx]
c000066a:	84 d2                	test   dl,dl
c000066c:	75 f2                	jne    c0000660 <strcpy+0x20>
c000066e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000671:	5b                   	pop    ebx
c0000672:	c3                   	ret    
c0000673:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000679:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000680 <strncpy>:
c0000680:	57                   	push   edi
c0000681:	56                   	push   esi
c0000682:	53                   	push   ebx
c0000683:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000687:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000068b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000068f:	85 f6                	test   esi,esi
c0000691:	74 44                	je     c00006d7 <strncpy+0x57>
c0000693:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000695:	8d 46 ff             	lea    eax,[esi-0x1]
c0000698:	8d 7a 01             	lea    edi,[edx+0x1]
c000069b:	88 0a                	mov    BYTE PTR [edx],cl
c000069d:	84 c9                	test   cl,cl
c000069f:	74 3f                	je     c00006e0 <strncpy+0x60>
c00006a1:	85 c0                	test   eax,eax
c00006a3:	74 32                	je     c00006d7 <strncpy+0x57>
c00006a5:	8d 4b 02             	lea    ecx,[ebx+0x2]
c00006a8:	8d 46 fe             	lea    eax,[esi-0x2]
c00006ab:	8a 5b 01             	mov    bl,BYTE PTR [ebx+0x1]
c00006ae:	8d 7a 02             	lea    edi,[edx+0x2]
c00006b1:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c00006b4:	84 db                	test   bl,bl
c00006b6:	75 1b                	jne    c00006d3 <strncpy+0x53>
c00006b8:	eb 26                	jmp    c00006e0 <strncpy+0x60>
c00006ba:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00006c0:	83 c1 01             	add    ecx,0x1
c00006c3:	83 c7 01             	add    edi,0x1
c00006c6:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00006c9:	83 e8 01             	sub    eax,0x1
c00006cc:	88 5f ff             	mov    BYTE PTR [edi-0x1],bl
c00006cf:	84 db                	test   bl,bl
c00006d1:	74 0d                	je     c00006e0 <strncpy+0x60>
c00006d3:	85 c0                	test   eax,eax
c00006d5:	75 e9                	jne    c00006c0 <strncpy+0x40>
c00006d7:	5b                   	pop    ebx
c00006d8:	89 d0                	mov    eax,edx
c00006da:	5e                   	pop    esi
c00006db:	5f                   	pop    edi
c00006dc:	c3                   	ret    
c00006dd:	8d 76 00             	lea    esi,[esi+0x0]
c00006e0:	85 c0                	test   eax,eax
c00006e2:	74 f3                	je     c00006d7 <strncpy+0x57>
c00006e4:	89 c3                	mov    ebx,eax
c00006e6:	83 f8 04             	cmp    eax,0x4
c00006e9:	73 25                	jae    c0000710 <strncpy+0x90>
c00006eb:	f6 c3 02             	test   bl,0x2
c00006ee:	74 08                	je     c00006f8 <strncpy+0x78>
c00006f0:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c00006f5:	83 c7 02             	add    edi,0x2
c00006f8:	80 e3 01             	and    bl,0x1
c00006fb:	74 da                	je     c00006d7 <strncpy+0x57>
c00006fd:	c6 07 00             	mov    BYTE PTR [edi],0x0
c0000700:	89 d0                	mov    eax,edx
c0000702:	5b                   	pop    ebx
c0000703:	5e                   	pop    esi
c0000704:	5f                   	pop    edi
c0000705:	c3                   	ret    
c0000706:	8d 76 00             	lea    esi,[esi+0x0]
c0000709:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000710:	f7 c7 01 00 00 00    	test   edi,0x1
c0000716:	75 14                	jne    c000072c <strncpy+0xac>
c0000718:	f7 c7 02 00 00 00    	test   edi,0x2
c000071e:	75 17                	jne    c0000737 <strncpy+0xb7>
c0000720:	89 d9                	mov    ecx,ebx
c0000722:	c1 e9 02             	shr    ecx,0x2
c0000725:	fc                   	cld    
c0000726:	31 c0                	xor    eax,eax
c0000728:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c000072a:	eb bf                	jmp    c00006eb <strncpy+0x6b>
c000072c:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000072f:	83 eb 01             	sub    ebx,0x1
c0000732:	83 c7 01             	add    edi,0x1
c0000735:	eb e1                	jmp    c0000718 <strncpy+0x98>
c0000737:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c000073c:	83 eb 02             	sub    ebx,0x2
c000073f:	83 c7 02             	add    edi,0x2
c0000742:	eb dc                	jmp    c0000720 <strncpy+0xa0>
c0000744:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000074a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000750 <strcmp>:
c0000750:	57                   	push   edi
c0000751:	56                   	push   esi
c0000752:	53                   	push   ebx
c0000753:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0000757:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000075b:	8a 17                	mov    dl,BYTE PTR [edi]
c000075d:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0000760:	38 c2                	cmp    dl,al
c0000762:	75 32                	jne    c0000796 <strcmp+0x46>
c0000764:	85 c0                	test   eax,eax
c0000766:	74 28                	je     c0000790 <strcmp+0x40>
c0000768:	b8 01 00 00 00       	mov    eax,0x1
c000076d:	eb 08                	jmp    c0000777 <strcmp+0x27>
c000076f:	90                   	nop
c0000770:	83 c0 01             	add    eax,0x1
c0000773:	85 db                	test   ebx,ebx
c0000775:	74 19                	je     c0000790 <strcmp+0x40>
c0000777:	0f be 1c 07          	movsx  ebx,BYTE PTR [edi+eax*1]
c000077b:	8a 0c 06             	mov    cl,BYTE PTR [esi+eax*1]
c000077e:	89 da                	mov    edx,ebx
c0000780:	38 d9                	cmp    cl,bl
c0000782:	74 ec                	je     c0000770 <strcmp+0x20>
c0000784:	5b                   	pop    ebx
c0000785:	0f b6 c2             	movzx  eax,dl
c0000788:	0f b6 c9             	movzx  ecx,cl
c000078b:	5e                   	pop    esi
c000078c:	29 c8                	sub    eax,ecx
c000078e:	5f                   	pop    edi
c000078f:	c3                   	ret    
c0000790:	5b                   	pop    ebx
c0000791:	31 c0                	xor    eax,eax
c0000793:	5e                   	pop    esi
c0000794:	5f                   	pop    edi
c0000795:	c3                   	ret    
c0000796:	89 c1                	mov    ecx,eax
c0000798:	eb ea                	jmp    c0000784 <strcmp+0x34>
c000079a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00007a0 <strchr>:
c00007a0:	53                   	push   ebx
c00007a1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00007a5:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00007a8:	85 db                	test   ebx,ebx
c00007aa:	74 22                	je     c00007ce <strchr+0x2e>
c00007ac:	0f be 54 24 0c       	movsx  edx,BYTE PTR [esp+0xc]
c00007b1:	39 d3                	cmp    ebx,edx
c00007b3:	74 1b                	je     c00007d0 <strchr+0x30>
c00007b5:	89 d1                	mov    ecx,edx
c00007b7:	eb 0b                	jmp    c00007c4 <strchr+0x24>
c00007b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007c0:	39 ca                	cmp    edx,ecx
c00007c2:	74 0c                	je     c00007d0 <strchr+0x30>
c00007c4:	83 c0 01             	add    eax,0x1
c00007c7:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00007ca:	85 d2                	test   edx,edx
c00007cc:	75 f2                	jne    c00007c0 <strchr+0x20>
c00007ce:	31 c0                	xor    eax,eax
c00007d0:	5b                   	pop    ebx
c00007d1:	c3                   	ret    
c00007d2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007d9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00007e0 <strncmp>:
c00007e0:	55                   	push   ebp
c00007e1:	57                   	push   edi
c00007e2:	56                   	push   esi
c00007e3:	53                   	push   ebx
c00007e4:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00007e8:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00007ec:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00007f0:	85 f6                	test   esi,esi
c00007f2:	74 35                	je     c0000829 <strncmp+0x49>
c00007f4:	8a 17                	mov    dl,BYTE PTR [edi]
c00007f6:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c00007f9:	89 e9                	mov    ecx,ebp
c00007fb:	38 ca                	cmp    dl,cl
c00007fd:	75 31                	jne    c0000830 <strncmp+0x50>
c00007ff:	8d 47 01             	lea    eax,[edi+0x1]
c0000802:	85 ed                	test   ebp,ebp
c0000804:	74 23                	je     c0000829 <strncmp+0x49>
c0000806:	01 f7                	add    edi,esi
c0000808:	eb 18                	jmp    c0000822 <strncmp+0x42>
c000080a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000810:	0f be 30             	movsx  esi,BYTE PTR [eax]
c0000813:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000815:	89 f2                	mov    edx,esi
c0000817:	38 d1                	cmp    cl,dl
c0000819:	75 15                	jne    c0000830 <strncmp+0x50>
c000081b:	83 c0 01             	add    eax,0x1
c000081e:	85 f6                	test   esi,esi
c0000820:	74 07                	je     c0000829 <strncmp+0x49>
c0000822:	83 c3 01             	add    ebx,0x1
c0000825:	39 c7                	cmp    edi,eax
c0000827:	75 e7                	jne    c0000810 <strncmp+0x30>
c0000829:	5b                   	pop    ebx
c000082a:	31 c0                	xor    eax,eax
c000082c:	5e                   	pop    esi
c000082d:	5f                   	pop    edi
c000082e:	5d                   	pop    ebp
c000082f:	c3                   	ret    
c0000830:	5b                   	pop    ebx
c0000831:	0f b6 c2             	movzx  eax,dl
c0000834:	5e                   	pop    esi
c0000835:	0f b6 c9             	movzx  ecx,cl
c0000838:	5f                   	pop    edi
c0000839:	29 c8                	sub    eax,ecx
c000083b:	5d                   	pop    ebp
c000083c:	c3                   	ret    
c000083d:	8d 76 00             	lea    esi,[esi+0x0]

c0000840 <strcat>:
c0000840:	56                   	push   esi
c0000841:	53                   	push   ebx
c0000842:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000846:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000084a:	89 c3                	mov    ebx,eax
c000084c:	eb 04                	jmp    c0000852 <strcat+0x12>
c000084e:	66 90                	xchg   ax,ax
c0000850:	89 d3                	mov    ebx,edx
c0000852:	8d 53 01             	lea    edx,[ebx+0x1]
c0000855:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000859:	75 f5                	jne    c0000850 <strcat+0x10>
c000085b:	31 d2                	xor    edx,edx
c000085d:	8d 76 00             	lea    esi,[esi+0x0]
c0000860:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000863:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000866:	83 c2 01             	add    edx,0x1
c0000869:	84 c9                	test   cl,cl
c000086b:	75 f3                	jne    c0000860 <strcat+0x20>
c000086d:	5b                   	pop    ebx
c000086e:	5e                   	pop    esi
c000086f:	c3                   	ret    

c0000870 <strncat>:
c0000870:	56                   	push   esi
c0000871:	53                   	push   ebx
c0000872:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000876:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000087a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000087e:	85 f6                	test   esi,esi
c0000880:	74 32                	je     c00008b4 <strncat+0x44>
c0000882:	89 c2                	mov    edx,eax
c0000884:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000088a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000890:	83 c2 01             	add    edx,0x1
c0000893:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000897:	75 f7                	jne    c0000890 <strncat+0x20>
c0000899:	01 ce                	add    esi,ecx
c000089b:	eb 0a                	jmp    c00008a7 <strncat+0x37>
c000089d:	8d 76 00             	lea    esi,[esi+0x0]
c00008a0:	39 f1                	cmp    ecx,esi
c00008a2:	74 1c                	je     c00008c0 <strncat+0x50>
c00008a4:	83 c2 01             	add    edx,0x1
c00008a7:	83 c1 01             	add    ecx,0x1
c00008aa:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008ad:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008b0:	84 db                	test   bl,bl
c00008b2:	75 ec                	jne    c00008a0 <strncat+0x30>
c00008b4:	5b                   	pop    ebx
c00008b5:	5e                   	pop    esi
c00008b6:	c3                   	ret    
c00008b7:	89 f6                	mov    esi,esi
c00008b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00008c0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008c3:	5b                   	pop    ebx
c00008c4:	5e                   	pop    esi
c00008c5:	c3                   	ret    
c00008c6:	8d 76 00             	lea    esi,[esi+0x0]
c00008c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008d0 <strstr>:
c00008d0:	57                   	push   edi
c00008d1:	56                   	push   esi
c00008d2:	53                   	push   ebx
c00008d3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008d7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00008db:	57                   	push   edi
c00008dc:	e8 8f fc ff ff       	call   c0000570 <strlen>
c00008e1:	59                   	pop    ecx
c00008e2:	85 c0                	test   eax,eax
c00008e4:	74 3a                	je     c0000920 <strstr+0x50>
c00008e6:	89 c6                	mov    esi,eax
c00008e8:	eb 18                	jmp    c0000902 <strstr+0x32>
c00008ea:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00008f0:	56                   	push   esi
c00008f1:	57                   	push   edi
c00008f2:	53                   	push   ebx
c00008f3:	e8 88 fa ff ff       	call   c0000380 <memcmp>
c00008f8:	83 c4 0c             	add    esp,0xc
c00008fb:	85 c0                	test   eax,eax
c00008fd:	74 21                	je     c0000920 <strstr+0x50>
c00008ff:	83 c3 01             	add    ebx,0x1
c0000902:	53                   	push   ebx
c0000903:	e8 68 fc ff ff       	call   c0000570 <strlen>
c0000908:	5a                   	pop    edx
c0000909:	39 f0                	cmp    eax,esi
c000090b:	73 e3                	jae    c00008f0 <strstr+0x20>
c000090d:	5b                   	pop    ebx
c000090e:	31 c0                	xor    eax,eax
c0000910:	5e                   	pop    esi
c0000911:	5f                   	pop    edi
c0000912:	c3                   	ret    
c0000913:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000919:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000920:	89 d8                	mov    eax,ebx
c0000922:	5b                   	pop    ebx
c0000923:	5e                   	pop    esi
c0000924:	5f                   	pop    edi
c0000925:	c3                   	ret    
c0000926:	8d 76 00             	lea    esi,[esi+0x0]
c0000929:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000930 <toupper>:
c0000930:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000934:	0f b6 d0             	movzx  edx,al
c0000937:	f6 82 60 04 02 c0 02 	test   BYTE PTR [edx-0x3ffdfba0],0x2
c000093e:	74 03                	je     c0000943 <toupper+0x13>
c0000940:	83 e8 20             	sub    eax,0x20
c0000943:	c3                   	ret    
c0000944:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000094a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000950 <tolower>:
c0000950:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000954:	0f b6 d0             	movzx  edx,al
c0000957:	f6 82 60 04 02 c0 01 	test   BYTE PTR [edx-0x3ffdfba0],0x1
c000095e:	74 03                	je     c0000963 <tolower+0x13>
c0000960:	83 c0 20             	add    eax,0x20
c0000963:	c3                   	ret    
c0000964:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000096a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000970 <simple_strtoul>:
c0000970:	55                   	push   ebp
c0000971:	57                   	push   edi
c0000972:	56                   	push   esi
c0000973:	53                   	push   ebx
c0000974:	83 ec 08             	sub    esp,0x8
c0000977:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000097b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000097f:	eb 12                	jmp    c0000993 <simple_strtoul+0x23>
c0000981:	eb 0d                	jmp    c0000990 <simple_strtoul+0x20>
c0000983:	90                   	nop
c0000984:	90                   	nop
c0000985:	90                   	nop
c0000986:	90                   	nop
c0000987:	90                   	nop
c0000988:	90                   	nop
c0000989:	90                   	nop
c000098a:	90                   	nop
c000098b:	90                   	nop
c000098c:	90                   	nop
c000098d:	90                   	nop
c000098e:	90                   	nop
c000098f:	90                   	nop
c0000990:	83 c3 01             	add    ebx,0x1
c0000993:	0f b6 13             	movzx  edx,BYTE PTR [ebx]
c0000996:	f6 82 60 04 02 c0 08 	test   BYTE PTR [edx-0x3ffdfba0],0x8
c000099d:	75 f1                	jne    c0000990 <simple_strtoul+0x20>
c000099f:	0f be c2             	movsx  eax,dl
c00009a2:	83 f8 09             	cmp    eax,0x9
c00009a5:	74 e9                	je     c0000990 <simple_strtoul+0x20>
c00009a7:	83 f8 2d             	cmp    eax,0x2d
c00009aa:	0f 84 60 01 00 00    	je     c0000b10 <simple_strtoul+0x1a0>
c00009b0:	83 f8 2b             	cmp    eax,0x2b
c00009b3:	0f 84 e7 00 00 00    	je     c0000aa0 <simple_strtoul+0x130>
c00009b9:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00009c1:	85 f6                	test   esi,esi
c00009c3:	0f 85 ea 00 00 00    	jne    c0000ab3 <simple_strtoul+0x143>
c00009c9:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c00009cc:	89 d1                	mov    ecx,edx
c00009ce:	83 fa 30             	cmp    edx,0x30
c00009d1:	0f 84 90 01 00 00    	je     c0000b67 <simple_strtoul+0x1f7>
c00009d7:	be 0a 00 00 00       	mov    esi,0xa
c00009dc:	85 d2                	test   edx,edx
c00009de:	0f 84 c5 01 00 00    	je     c0000ba9 <simple_strtoul+0x239>
c00009e4:	31 ed                	xor    ebp,ebp
c00009e6:	31 ff                	xor    edi,edi
c00009e8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00009ef:	eb 3e                	jmp    c0000a2f <simple_strtoul+0xbf>
c00009f1:	eb 0d                	jmp    c0000a00 <simple_strtoul+0x90>
c00009f3:	90                   	nop
c00009f4:	90                   	nop
c00009f5:	90                   	nop
c00009f6:	90                   	nop
c00009f7:	90                   	nop
c00009f8:	90                   	nop
c00009f9:	90                   	nop
c00009fa:	90                   	nop
c00009fb:	90                   	nop
c00009fc:	90                   	nop
c00009fd:	90                   	nop
c00009fe:	90                   	nop
c00009ff:	90                   	nop
c0000a00:	83 e9 30             	sub    ecx,0x30
c0000a03:	39 f1                	cmp    ecx,esi
c0000a05:	73 59                	jae    c0000a60 <simple_strtoul+0xf0>
c0000a07:	31 d2                	xor    edx,edx
c0000a09:	89 c8                	mov    eax,ecx
c0000a0b:	f7 d0                	not    eax
c0000a0d:	f7 f6                	div    esi
c0000a0f:	39 f8                	cmp    eax,edi
c0000a11:	0f 82 d9 00 00 00    	jb     c0000af0 <simple_strtoul+0x180>
c0000a17:	0f af fe             	imul   edi,esi
c0000a1a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000a21:	01 cf                	add    edi,ecx
c0000a23:	83 c3 01             	add    ebx,0x1
c0000a26:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a29:	89 d1                	mov    ecx,edx
c0000a2b:	85 d2                	test   edx,edx
c0000a2d:	74 31                	je     c0000a60 <simple_strtoul+0xf0>
c0000a2f:	0f b6 c9             	movzx  ecx,cl
c0000a32:	f6 81 60 04 02 c0 04 	test   BYTE PTR [ecx-0x3ffdfba0],0x4
c0000a39:	75 c5                	jne    c0000a00 <simple_strtoul+0x90>
c0000a3b:	52                   	push   edx
c0000a3c:	e8 ef fe ff ff       	call   c0000930 <toupper>
c0000a41:	59                   	pop    ecx
c0000a42:	0f b6 d0             	movzx  edx,al
c0000a45:	f6 82 60 04 02 c0 01 	test   BYTE PTR [edx-0x3ffdfba0],0x1
c0000a4c:	74 12                	je     c0000a60 <simple_strtoul+0xf0>
c0000a4e:	8d 48 c9             	lea    ecx,[eax-0x37]
c0000a51:	39 f1                	cmp    ecx,esi
c0000a53:	72 b2                	jb     c0000a07 <simple_strtoul+0x97>
c0000a55:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a59:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000a60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a64:	85 c0                	test   eax,eax
c0000a66:	74 18                	je     c0000a80 <simple_strtoul+0x110>
c0000a68:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000a6b:	09 f8                	or     eax,edi
c0000a6d:	0f 85 8d 00 00 00    	jne    c0000b00 <simple_strtoul+0x190>
c0000a73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a77:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000a7b:	31 ff                	xor    edi,edi
c0000a7d:	89 30                	mov    DWORD PTR [eax],esi
c0000a7f:	90                   	nop
c0000a80:	83 fd 01             	cmp    ebp,0x1
c0000a83:	75 05                	jne    c0000a8a <simple_strtoul+0x11a>
c0000a85:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000a8a:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a8f:	75 02                	jne    c0000a93 <simple_strtoul+0x123>
c0000a91:	f7 df                	neg    edi
c0000a93:	83 c4 08             	add    esp,0x8
c0000a96:	89 f8                	mov    eax,edi
c0000a98:	5b                   	pop    ebx
c0000a99:	5e                   	pop    esi
c0000a9a:	5f                   	pop    edi
c0000a9b:	5d                   	pop    ebp
c0000a9c:	c3                   	ret    
c0000a9d:	8d 76 00             	lea    esi,[esi+0x0]
c0000aa0:	83 c3 01             	add    ebx,0x1
c0000aa3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000aab:	85 f6                	test   esi,esi
c0000aad:	0f 84 16 ff ff ff    	je     c00009c9 <simple_strtoul+0x59>
c0000ab3:	8d 46 fe             	lea    eax,[esi-0x2]
c0000ab6:	83 f8 22             	cmp    eax,0x22
c0000ab9:	0f 87 8b 00 00 00    	ja     c0000b4a <simple_strtoul+0x1da>
c0000abf:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000ac1:	83 fe 08             	cmp    esi,0x8
c0000ac4:	0f 84 c8 00 00 00    	je     c0000b92 <simple_strtoul+0x222>
c0000aca:	83 fe 10             	cmp    esi,0x10
c0000acd:	0f 85 0d 01 00 00    	jne    c0000be0 <simple_strtoul+0x270>
c0000ad3:	0f be d1             	movsx  edx,cl
c0000ad6:	83 fa 30             	cmp    edx,0x30
c0000ad9:	74 45                	je     c0000b20 <simple_strtoul+0x1b0>
c0000adb:	be 10 00 00 00       	mov    esi,0x10
c0000ae0:	e9 f7 fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000ae5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000ae9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000af0:	bd 01 00 00 00       	mov    ebp,0x1
c0000af5:	31 ff                	xor    edi,edi
c0000af7:	e9 27 ff ff ff       	jmp    c0000a23 <simple_strtoul+0xb3>
c0000afc:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b04:	89 18                	mov    DWORD PTR [eax],ebx
c0000b06:	e9 75 ff ff ff       	jmp    c0000a80 <simple_strtoul+0x110>
c0000b0b:	90                   	nop
c0000b0c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b10:	83 c3 01             	add    ebx,0x1
c0000b13:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b1b:	e9 a1 fe ff ff       	jmp    c00009c1 <simple_strtoul+0x51>
c0000b20:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b24:	52                   	push   edx
c0000b25:	89 d1                	mov    ecx,edx
c0000b27:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b2b:	e8 20 fe ff ff       	call   c0000950 <tolower>
c0000b30:	5e                   	pop    esi
c0000b31:	83 f8 78             	cmp    eax,0x78
c0000b34:	0f 84 93 00 00 00    	je     c0000bcd <simple_strtoul+0x25d>
c0000b3a:	83 c3 01             	add    ebx,0x1
c0000b3d:	be 10 00 00 00       	mov    esi,0x10
c0000b42:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b45:	e9 92 fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000b4a:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000b4e:	85 ff                	test   edi,edi
c0000b50:	74 69                	je     c0000bbb <simple_strtoul+0x24b>
c0000b52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b56:	85 db                	test   ebx,ebx
c0000b58:	75 5b                	jne    c0000bb5 <simple_strtoul+0x245>
c0000b5a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000b60:	31 ff                	xor    edi,edi
c0000b62:	e9 23 ff ff ff       	jmp    c0000a8a <simple_strtoul+0x11a>
c0000b67:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b6b:	52                   	push   edx
c0000b6c:	89 d1                	mov    ecx,edx
c0000b6e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b72:	e8 d9 fd ff ff       	call   c0000950 <tolower>
c0000b77:	5d                   	pop    ebp
c0000b78:	83 f8 78             	cmp    eax,0x78
c0000b7b:	74 45                	je     c0000bc2 <simple_strtoul+0x252>
c0000b7d:	83 c3 01             	add    ebx,0x1
c0000b80:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b83:	83 fa 30             	cmp    edx,0x30
c0000b86:	74 16                	je     c0000b9e <simple_strtoul+0x22e>
c0000b88:	be 08 00 00 00       	mov    esi,0x8
c0000b8d:	e9 4a fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000b92:	0f be d1             	movsx  edx,cl
c0000b95:	83 fa 30             	cmp    edx,0x30
c0000b98:	0f 85 3e fe ff ff    	jne    c00009dc <simple_strtoul+0x6c>
c0000b9e:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000ba2:	83 c3 01             	add    ebx,0x1
c0000ba5:	89 d1                	mov    ecx,edx
c0000ba7:	eb df                	jmp    c0000b88 <simple_strtoul+0x218>
c0000ba9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000bad:	85 d2                	test   edx,edx
c0000baf:	74 0a                	je     c0000bbb <simple_strtoul+0x24b>
c0000bb1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000bb5:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000bb9:	89 30                	mov    DWORD PTR [eax],esi
c0000bbb:	31 ff                	xor    edi,edi
c0000bbd:	e9 c8 fe ff ff       	jmp    c0000a8a <simple_strtoul+0x11a>
c0000bc2:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0000bc5:	83 c3 02             	add    ebx,0x2
c0000bc8:	e9 06 ff ff ff       	jmp    c0000ad3 <simple_strtoul+0x163>
c0000bcd:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0000bd1:	be 10 00 00 00       	mov    esi,0x10
c0000bd6:	89 d1                	mov    ecx,edx
c0000bd8:	83 c3 02             	add    ebx,0x2
c0000bdb:	e9 fc fd ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000be0:	0f be d1             	movsx  edx,cl
c0000be3:	e9 f4 fd ff ff       	jmp    c00009dc <simple_strtoul+0x6c>

c0000be8 <largebin_index>:
c0000be8:	89 c2                	mov    edx,eax
c0000bea:	c1 ea 08             	shr    edx,0x8
c0000bed:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000bf3:	77 10                	ja     c0000c05 <largebin_index+0x1d>
c0000bf5:	0f bd d2             	bsr    edx,edx
c0000bf8:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000bfb:	d3 e8                	shr    eax,cl
c0000bfd:	83 e0 03             	and    eax,0x3
c0000c00:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c04:	c3                   	ret    
c0000c05:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c0a:	c3                   	ret    

c0000c0b <malloc_init_state>:
c0000c0b:	53                   	push   ebx
c0000c0c:	8d 50 34             	lea    edx,[eax+0x34]
c0000c0f:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c15:	89 d1                	mov    ecx,edx
c0000c17:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c1a:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c1d:	83 c2 08             	add    edx,0x8
c0000c20:	39 da                	cmp    edx,ebx
c0000c22:	75 f3                	jne    c0000c17 <malloc_init_state+0xc>
c0000c24:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c26:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c30:	83 e2 03             	and    edx,0x3
c0000c33:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000c3d:	83 ca 48             	or     edx,0x48
c0000c40:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c4a:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c54:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c5b:	89 10                	mov    DWORD PTR [eax],edx
c0000c5d:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000c60:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000c6a:	5b                   	pop    ebx
c0000c6b:	c3                   	ret    

c0000c6c <malloc_consolidate>:
c0000c6c:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c6e:	85 d2                	test   edx,edx
c0000c70:	0f 84 d8 00 00 00    	je     c0000d4e <malloc_consolidate+0xe2>
c0000c76:	55                   	push   ebp
c0000c77:	83 e2 fd             	and    edx,0xfffffffd
c0000c7a:	57                   	push   edi
c0000c7b:	89 c5                	mov    ebp,eax
c0000c7d:	56                   	push   esi
c0000c7e:	8d 78 34             	lea    edi,[eax+0x34]
c0000c81:	53                   	push   ebx
c0000c82:	83 ec 10             	sub    esp,0x10
c0000c85:	89 10                	mov    DWORD PTR [eax],edx
c0000c87:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000c8b:	c1 ea 03             	shr    edx,0x3
c0000c8e:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000c92:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000c96:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000c99:	85 d2                	test   edx,edx
c0000c9b:	0f 84 98 00 00 00    	je     c0000d39 <malloc_consolidate+0xcd>
c0000ca1:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000ca8:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cab:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000cae:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000cb2:	89 f9                	mov    ecx,edi
c0000cb4:	83 e1 fe             	and    ecx,0xfffffffe
c0000cb7:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000cba:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cbd:	83 e3 fc             	and    ebx,0xfffffffc
c0000cc0:	83 e7 01             	and    edi,0x1
c0000cc3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000cc6:	75 14                	jne    c0000cdc <malloc_consolidate+0x70>
c0000cc8:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000cca:	29 fa                	sub    edx,edi
c0000ccc:	01 f9                	add    ecx,edi
c0000cce:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000cd1:	89 fb                	mov    ebx,edi
c0000cd3:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000cd6:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000cd9:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000cdc:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000cdf:	74 40                	je     c0000d21 <malloc_consolidate+0xb5>
c0000ce1:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000ce4:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000ce7:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000ceb:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000cee:	83 e7 01             	and    edi,0x1
c0000cf1:	75 0e                	jne    c0000d01 <malloc_consolidate+0x95>
c0000cf3:	01 d9                	add    ecx,ebx
c0000cf5:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000cf8:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000cfb:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000cfe:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d01:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d04:	89 ce                	mov    esi,ecx
c0000d06:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d09:	83 ce 01             	or     esi,0x1
c0000d0c:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d0f:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d12:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d15:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d19:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d1c:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d1f:	eb 0c                	jmp    c0000d2d <malloc_consolidate+0xc1>
c0000d21:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d24:	83 c9 01             	or     ecx,0x1
c0000d27:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d2a:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d2d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d31:	85 d2                	test   edx,edx
c0000d33:	0f 85 6f ff ff ff    	jne    c0000ca8 <malloc_consolidate+0x3c>
c0000d39:	83 c5 04             	add    ebp,0x4
c0000d3c:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d40:	0f 85 50 ff ff ff    	jne    c0000c96 <malloc_consolidate+0x2a>
c0000d46:	83 c4 10             	add    esp,0x10
c0000d49:	5b                   	pop    ebx
c0000d4a:	5e                   	pop    esi
c0000d4b:	5f                   	pop    edi
c0000d4c:	5d                   	pop    ebp
c0000d4d:	c3                   	ret    
c0000d4e:	e9 b8 fe ff ff       	jmp    c0000c0b <malloc_init_state>

c0000d53 <dlfree>:
c0000d53:	57                   	push   edi
c0000d54:	56                   	push   esi
c0000d55:	53                   	push   ebx
c0000d56:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000d5a:	85 db                	test   ebx,ebx
c0000d5c:	0f 84 e2 00 00 00    	je     c0000e44 <dlfree+0xf1>
c0000d62:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000d65:	8b 0d 00 61 02 c0    	mov    ecx,DWORD PTR ds:0xc0026100
c0000d6b:	89 f0                	mov    eax,esi
c0000d6d:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000d70:	83 e0 fc             	and    eax,0xfffffffc
c0000d73:	39 c1                	cmp    ecx,eax
c0000d75:	72 24                	jb     c0000d9b <dlfree+0x48>
c0000d77:	83 c9 03             	or     ecx,0x3
c0000d7a:	c1 e8 03             	shr    eax,0x3
c0000d7d:	89 0d 00 61 02 c0    	mov    DWORD PTR ds:0xc0026100,ecx
c0000d83:	83 e8 02             	sub    eax,0x2
c0000d86:	8b 0c 85 04 61 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd9efc]
c0000d8d:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000d8f:	89 14 85 04 61 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9efc],edx
c0000d96:	e9 a9 00 00 00       	jmp    c0000e44 <dlfree+0xf1>
c0000d9b:	83 e6 02             	and    esi,0x2
c0000d9e:	0f 85 a0 00 00 00    	jne    c0000e44 <dlfree+0xf1>
c0000da4:	83 c9 01             	or     ecx,0x1
c0000da7:	8d 34 02             	lea    esi,[edx+eax*1]
c0000daa:	89 0d 00 61 02 c0    	mov    DWORD PTR ds:0xc0026100,ecx
c0000db0:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000db3:	83 e1 fc             	and    ecx,0xfffffffc
c0000db6:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000dba:	75 13                	jne    c0000dcf <dlfree+0x7c>
c0000dbc:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000dbf:	29 da                	sub    edx,ebx
c0000dc1:	01 d8                	add    eax,ebx
c0000dc3:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000dc6:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000dc9:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000dcc:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000dcf:	39 35 2c 61 02 c0    	cmp    DWORD PTR ds:0xc002612c,esi
c0000dd5:	74 40                	je     c0000e17 <dlfree+0xc4>
c0000dd7:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000ddb:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000dde:	80 e3 01             	and    bl,0x1
c0000de1:	75 0e                	jne    c0000df1 <dlfree+0x9e>
c0000de3:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000de6:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000de9:	01 c8                	add    eax,ecx
c0000deb:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000dee:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000df1:	8b 0d 3c 61 02 c0    	mov    ecx,DWORD PTR ds:0xc002613c
c0000df7:	c7 42 0c 34 61 02 c0 	mov    DWORD PTR [edx+0xc],0xc0026134
c0000dfe:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e01:	89 15 3c 61 02 c0    	mov    DWORD PTR ds:0xc002613c,edx
c0000e07:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e0a:	89 c1                	mov    ecx,eax
c0000e0c:	83 c9 01             	or     ecx,0x1
c0000e0f:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e12:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e15:	eb 10                	jmp    c0000e27 <dlfree+0xd4>
c0000e17:	01 c8                	add    eax,ecx
c0000e19:	89 c1                	mov    ecx,eax
c0000e1b:	83 c9 01             	or     ecx,0x1
c0000e1e:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e21:	89 15 2c 61 02 c0    	mov    DWORD PTR ds:0xc002612c,edx
c0000e27:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e2c:	76 16                	jbe    c0000e44 <dlfree+0xf1>
c0000e2e:	f6 05 00 61 02 c0 02 	test   BYTE PTR ds:0xc0026100,0x2
c0000e35:	74 0d                	je     c0000e44 <dlfree+0xf1>
c0000e37:	5b                   	pop    ebx
c0000e38:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0000e3d:	5e                   	pop    esi
c0000e3e:	5f                   	pop    edi
c0000e3f:	e9 28 fe ff ff       	jmp    c0000c6c <malloc_consolidate>
c0000e44:	5b                   	pop    ebx
c0000e45:	5e                   	pop    esi
c0000e46:	5f                   	pop    edi
c0000e47:	c3                   	ret    

c0000e48 <sYSMALLOc>:
c0000e48:	55                   	push   ebp
c0000e49:	57                   	push   edi
c0000e4a:	56                   	push   esi
c0000e4b:	53                   	push   ebx
c0000e4c:	89 d3                	mov    ebx,edx
c0000e4e:	83 ec 2c             	sub    esp,0x2c
c0000e51:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000e55:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000e5b:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000e5e:	8d 42 ff             	lea    eax,[edx-0x1]
c0000e61:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0000e65:	74 1f                	je     c0000e86 <sYSMALLOc+0x3e>
c0000e67:	89 d8                	mov    eax,ebx
c0000e69:	e8 fe fd ff ff       	call   c0000c6c <malloc_consolidate>
c0000e6e:	83 ec 0c             	sub    esp,0xc
c0000e71:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000e75:	83 e8 07             	sub    eax,0x7
c0000e78:	50                   	push   eax
c0000e79:	e8 2d 02 00 00       	call   c00010ab <dlmalloc>
c0000e7e:	83 c4 10             	add    esp,0x10
c0000e81:	e9 1d 02 00 00       	jmp    c00010a3 <sYSMALLOc+0x25b>
c0000e86:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000e89:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000e8f:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000e92:	83 e0 fc             	and    eax,0xfffffffc
c0000e95:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000e99:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000e9d:	83 c0 10             	add    eax,0x10
c0000ea0:	01 c1                	add    ecx,eax
c0000ea2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0000ea6:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000ead:	74 04                	je     c0000eb3 <sYSMALLOc+0x6b>
c0000eaf:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000eb3:	f7 da                	neg    edx
c0000eb5:	03 4c 24 14          	add    ecx,DWORD PTR [esp+0x14]
c0000eb9:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0000ebd:	21 d1                	and    ecx,edx
c0000ebf:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000ec3:	7f 07                	jg     c0000ecc <sYSMALLOc+0x84>
c0000ec5:	31 c0                	xor    eax,eax
c0000ec7:	e9 d7 01 00 00       	jmp    c00010a3 <sYSMALLOc+0x25b>
c0000ecc:	83 ec 0c             	sub    esp,0xc
c0000ecf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000ed3:	e8 b0 6a 00 00       	call   c0007988 <sbrk>
c0000ed8:	83 c4 10             	add    esp,0x10
c0000edb:	89 c6                	mov    esi,eax
c0000edd:	83 f8 ff             	cmp    eax,0xffffffff
c0000ee0:	74 e3                	je     c0000ec5 <sYSMALLOc+0x7d>
c0000ee2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000ee6:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000ee9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000eed:	03 83 68 03 00 00    	add    eax,DWORD PTR [ebx+0x368]
c0000ef3:	39 f1                	cmp    ecx,esi
c0000ef5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000ef9:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000eff:	75 13                	jne    c0000f14 <sYSMALLOc+0xcc>
c0000f01:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f05:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f09:	83 c8 01             	or     eax,0x1
c0000f0c:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f0f:	e9 37 01 00 00       	jmp    c000104b <sYSMALLOc+0x203>
c0000f14:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000f1a:	89 d5                	mov    ebp,edx
c0000f1c:	83 e5 01             	and    ebp,0x1
c0000f1f:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f24:	0f 95 c0             	setne  al
c0000f27:	21 e8                	and    eax,ebp
c0000f29:	39 f1                	cmp    ecx,esi
c0000f2b:	76 12                	jbe    c0000f3f <sYSMALLOc+0xf7>
c0000f2d:	85 c0                	test   eax,eax
c0000f2f:	74 0e                	je     c0000f3f <sYSMALLOc+0xf7>
c0000f31:	83 e2 fe             	and    edx,0xfffffffe
c0000f34:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000f3a:	e9 82 00 00 00       	jmp    c0000fc1 <sYSMALLOc+0x179>
c0000f3f:	85 ed                	test   ebp,ebp
c0000f41:	74 7e                	je     c0000fc1 <sYSMALLOc+0x179>
c0000f43:	85 c0                	test   eax,eax
c0000f45:	74 0e                	je     c0000f55 <sYSMALLOc+0x10d>
c0000f47:	89 f0                	mov    eax,esi
c0000f49:	29 c8                	sub    eax,ecx
c0000f4b:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0000f4f:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000f55:	89 f2                	mov    edx,esi
c0000f57:	83 e2 07             	and    edx,0x7
c0000f5a:	74 0c                	je     c0000f68 <sYSMALLOc+0x120>
c0000f5c:	b8 08 00 00 00       	mov    eax,0x8
c0000f61:	29 d0                	sub    eax,edx
c0000f63:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000f66:	eb 04                	jmp    c0000f6c <sYSMALLOc+0x124>
c0000f68:	89 f5                	mov    ebp,esi
c0000f6a:	31 c0                	xor    eax,eax
c0000f6c:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f70:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000f74:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0000f78:	01 c1                	add    ecx,eax
c0000f7a:	83 ec 0c             	sub    esp,0xc
c0000f7d:	01 f1                	add    ecx,esi
c0000f7f:	01 ca                	add    edx,ecx
c0000f81:	29 c8                	sub    eax,ecx
c0000f83:	23 54 24 24          	and    edx,DWORD PTR [esp+0x24]
c0000f87:	01 c2                	add    edx,eax
c0000f89:	52                   	push   edx
c0000f8a:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000f8e:	e8 f5 69 00 00       	call   c0007988 <sbrk>
c0000f93:	83 c4 10             	add    esp,0x10
c0000f96:	83 f8 ff             	cmp    eax,0xffffffff
c0000f99:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000f9d:	75 0f                	jne    c0000fae <sYSMALLOc+0x166>
c0000f9f:	83 ec 0c             	sub    esp,0xc
c0000fa2:	6a 00                	push   0x0
c0000fa4:	e8 df 69 00 00       	call   c0007988 <sbrk>
c0000fa9:	83 c4 10             	add    esp,0x10
c0000fac:	eb 30                	jmp    c0000fde <sYSMALLOc+0x196>
c0000fae:	39 c6                	cmp    esi,eax
c0000fb0:	76 33                	jbe    c0000fe5 <sYSMALLOc+0x19d>
c0000fb2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000fb6:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000fbd:	01 f0                	add    eax,esi
c0000fbf:	eb 1d                	jmp    c0000fde <sYSMALLOc+0x196>
c0000fc1:	83 ec 0c             	sub    esp,0xc
c0000fc4:	89 f5                	mov    ebp,esi
c0000fc6:	6a 00                	push   0x0
c0000fc8:	e8 bb 69 00 00       	call   c0007988 <sbrk>
c0000fcd:	89 c2                	mov    edx,eax
c0000fcf:	29 f2                	sub    edx,esi
c0000fd1:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000fd5:	83 c4 10             	add    esp,0x10
c0000fd8:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000fde:	31 d2                	xor    edx,edx
c0000fe0:	83 f8 ff             	cmp    eax,0xffffffff
c0000fe3:	74 66                	je     c000104b <sYSMALLOc+0x203>
c0000fe5:	29 e8                	sub    eax,ebp
c0000fe7:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000fea:	01 d0                	add    eax,edx
c0000fec:	83 c8 01             	or     eax,0x1
c0000fef:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000ff2:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000ff8:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000ffd:	74 4c                	je     c000104b <sYSMALLOc+0x203>
c0000fff:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001003:	83 e8 0c             	sub    eax,0xc
c0001006:	83 e0 f8             	and    eax,0xfffffff8
c0001009:	89 c2                	mov    edx,eax
c000100b:	83 ca 01             	or     edx,0x1
c000100e:	83 f8 0f             	cmp    eax,0xf
c0001011:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001014:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c000101c:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001024:	76 25                	jbe    c000104b <sYSMALLOc+0x203>
c0001026:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c000102c:	83 ec 0c             	sub    esp,0xc
c000102f:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0001039:	83 c7 08             	add    edi,0x8
c000103c:	57                   	push   edi
c000103d:	e8 11 fd ff ff       	call   c0000d53 <dlfree>
c0001042:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0001048:	83 c4 10             	add    esp,0x10
c000104b:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0001051:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0001057:	73 06                	jae    c000105f <sYSMALLOc+0x217>
c0001059:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c000105f:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0001065:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c000106b:	73 06                	jae    c0001073 <sYSMALLOc+0x22b>
c000106d:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0001073:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0001076:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001079:	83 e2 fc             	and    edx,0xfffffffc
c000107c:	3b 54 24 1c          	cmp    edx,DWORD PTR [esp+0x1c]
c0001080:	0f 82 3f fe ff ff    	jb     c0000ec5 <sYSMALLOc+0x7d>
c0001086:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000108a:	8d 0c 38             	lea    ecx,[eax+edi*1]
c000108d:	29 fa                	sub    edx,edi
c000108f:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0001092:	83 ca 01             	or     edx,0x1
c0001095:	89 fb                	mov    ebx,edi
c0001097:	83 c0 08             	add    eax,0x8
c000109a:	83 cb 01             	or     ebx,0x1
c000109d:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c00010a0:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00010a3:	83 c4 2c             	add    esp,0x2c
c00010a6:	5b                   	pop    ebx
c00010a7:	5e                   	pop    esi
c00010a8:	5f                   	pop    edi
c00010a9:	5d                   	pop    ebp
c00010aa:	c3                   	ret    

c00010ab <dlmalloc>:
c00010ab:	55                   	push   ebp
c00010ac:	57                   	push   edi
c00010ad:	56                   	push   esi
c00010ae:	53                   	push   ebx
c00010af:	83 ec 1c             	sub    esp,0x1c
c00010b2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00010b6:	83 f8 df             	cmp    eax,0xffffffdf
c00010b9:	0f 87 70 03 00 00    	ja     c000142f <dlmalloc+0x384>
c00010bf:	83 c0 0b             	add    eax,0xb
c00010c2:	be 10 00 00 00       	mov    esi,0x10
c00010c7:	83 f8 0f             	cmp    eax,0xf
c00010ca:	76 05                	jbe    c00010d1 <dlmalloc+0x26>
c00010cc:	83 e0 f8             	and    eax,0xfffffff8
c00010cf:	89 c6                	mov    esi,eax
c00010d1:	8b 3d 00 61 02 c0    	mov    edi,DWORD PTR ds:0xc0026100
c00010d7:	f7 c7 01 00 00 00    	test   edi,0x1
c00010dd:	75 17                	jne    c00010f6 <dlmalloc+0x4b>
c00010df:	85 ff                	test   edi,edi
c00010e1:	0f 85 05 03 00 00    	jne    c00013ec <dlmalloc+0x341>
c00010e7:	b8 00 61 02 c0       	mov    eax,0xc0026100
c00010ec:	e8 7b fb ff ff       	call   c0000c6c <malloc_consolidate>
c00010f1:	e9 f6 02 00 00       	jmp    c00013ec <dlmalloc+0x341>
c00010f6:	39 f7                	cmp    edi,esi
c00010f8:	72 1f                	jb     c0001119 <dlmalloc+0x6e>
c00010fa:	89 f2                	mov    edx,esi
c00010fc:	c1 ea 03             	shr    edx,0x3
c00010ff:	83 ea 02             	sub    edx,0x2
c0001102:	8b 04 95 04 61 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd9efc]
c0001109:	85 c0                	test   eax,eax
c000110b:	74 0c                	je     c0001119 <dlmalloc+0x6e>
c000110d:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001110:	89 0c 95 04 61 02 c0 	mov    DWORD PTR [edx*4-0x3ffd9efc],ecx
c0001117:	eb 30                	jmp    c0001149 <dlmalloc+0x9e>
c0001119:	89 f0                	mov    eax,esi
c000111b:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001121:	77 2e                	ja     c0001151 <dlmalloc+0xa6>
c0001123:	c1 e8 03             	shr    eax,0x3
c0001126:	8d 14 c5 34 61 02 c0 	lea    edx,[eax*8-0x3ffd9ecc]
c000112d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001131:	8d 5a f8             	lea    ebx,[edx-0x8]
c0001134:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0001137:	39 c3                	cmp    ebx,eax
c0001139:	74 2e                	je     c0001169 <dlmalloc+0xbe>
c000113b:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c000113e:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0001143:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0001146:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0001149:	83 c0 08             	add    eax,0x8
c000114c:	e9 e0 02 00 00       	jmp    c0001431 <dlmalloc+0x386>
c0001151:	e8 92 fa ff ff       	call   c0000be8 <largebin_index>
c0001156:	83 e7 02             	and    edi,0x2
c0001159:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000115d:	74 0a                	je     c0001169 <dlmalloc+0xbe>
c000115f:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001164:	e8 03 fb ff ff       	call   c0000c6c <malloc_consolidate>
c0001169:	8d 46 10             	lea    eax,[esi+0x10]
c000116c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001170:	8b 1d 40 61 02 c0    	mov    ebx,DWORD PTR ds:0xc0026140
c0001176:	81 fb 34 61 02 c0    	cmp    ebx,0xc0026134
c000117c:	0f 84 13 01 00 00    	je     c0001295 <dlmalloc+0x1ea>
c0001182:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0001185:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0001188:	83 e7 fc             	and    edi,0xfffffffc
c000118b:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001191:	77 4c                	ja     c00011df <dlmalloc+0x134>
c0001193:	3d 34 61 02 c0       	cmp    eax,0xc0026134
c0001198:	75 45                	jne    c00011df <dlmalloc+0x134>
c000119a:	39 1d 30 61 02 c0    	cmp    DWORD PTR ds:0xc0026130,ebx
c00011a0:	75 3d                	jne    c00011df <dlmalloc+0x134>
c00011a2:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00011a6:	73 37                	jae    c00011df <dlmalloc+0x134>
c00011a8:	8d 04 33             	lea    eax,[ebx+esi*1]
c00011ab:	89 fa                	mov    edx,edi
c00011ad:	a3 3c 61 02 c0       	mov    ds:0xc002613c,eax
c00011b2:	a3 40 61 02 c0       	mov    ds:0xc0026140,eax
c00011b7:	a3 30 61 02 c0       	mov    ds:0xc0026130,eax
c00011bc:	29 f2                	sub    edx,esi
c00011be:	c7 40 08 34 61 02 c0 	mov    DWORD PTR [eax+0x8],0xc0026134
c00011c5:	c7 40 0c 34 61 02 c0 	mov    DWORD PTR [eax+0xc],0xc0026134
c00011cc:	83 ce 01             	or     esi,0x1
c00011cf:	89 d1                	mov    ecx,edx
c00011d1:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c00011d4:	83 c9 01             	or     ecx,0x1
c00011d7:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c00011da:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c00011dd:	eb 15                	jmp    c00011f4 <dlmalloc+0x149>
c00011df:	a3 40 61 02 c0       	mov    ds:0xc0026140,eax
c00011e4:	39 fe                	cmp    esi,edi
c00011e6:	c7 40 08 34 61 02 c0 	mov    DWORD PTR [eax+0x8],0xc0026134
c00011ed:	75 0d                	jne    c00011fc <dlmalloc+0x151>
c00011ef:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c00011f4:	8d 43 08             	lea    eax,[ebx+0x8]
c00011f7:	e9 35 02 00 00       	jmp    c0001431 <dlmalloc+0x386>
c00011fc:	89 f8                	mov    eax,edi
c00011fe:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001204:	77 19                	ja     c000121f <dlmalloc+0x174>
c0001206:	c1 e8 03             	shr    eax,0x3
c0001209:	8d 14 00             	lea    edx,[eax+eax*1]
c000120c:	83 c2 0d             	add    edx,0xd
c000120f:	8d 2c 95 f8 60 02 c0 	lea    ebp,[edx*4-0x3ffd9f08]
c0001216:	8b 14 95 00 61 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9f00]
c000121d:	eb 46                	jmp    c0001265 <dlmalloc+0x1ba>
c000121f:	e8 c4 f9 ff ff       	call   c0000be8 <largebin_index>
c0001224:	8d 14 00             	lea    edx,[eax+eax*1]
c0001227:	83 c2 0d             	add    edx,0xd
c000122a:	8d 0c 95 00 61 02 c0 	lea    ecx,[edx*4-0x3ffd9f00]
c0001231:	8b 14 95 00 61 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9f00]
c0001238:	8d 69 f8             	lea    ebp,[ecx-0x8]
c000123b:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c000123f:	89 d5                	mov    ebp,edx
c0001241:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0001245:	74 1e                	je     c0001265 <dlmalloc+0x1ba>
c0001247:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c000124a:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c000124d:	77 12                	ja     c0001261 <dlmalloc+0x1b6>
c000124f:	83 cf 01             	or     edi,0x1
c0001252:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c0001255:	76 05                	jbe    c000125c <dlmalloc+0x1b1>
c0001257:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000125a:	eb f6                	jmp    c0001252 <dlmalloc+0x1a7>
c000125c:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c000125f:	eb 04                	jmp    c0001265 <dlmalloc+0x1ba>
c0001261:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001265:	89 c7                	mov    edi,eax
c0001267:	88 c1                	mov    cl,al
c0001269:	c1 ff 05             	sar    edi,0x5
c000126c:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0001270:	bf 01 00 00 00       	mov    edi,0x1
c0001275:	d3 e7                	shl    edi,cl
c0001277:	89 f8                	mov    eax,edi
c0001279:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000127d:	09 04 bd 34 64 02 c0 	or     DWORD PTR [edi*4-0x3ffd9bcc],eax
c0001284:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c0001287:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000128a:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c000128d:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c0001290:	e9 db fe ff ff       	jmp    c0001170 <dlmalloc+0xc5>
c0001295:	81 fe ff 00 00 00    	cmp    esi,0xff
c000129b:	76 78                	jbe    c0001315 <dlmalloc+0x26a>
c000129d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00012a1:	8d 04 c5 34 61 02 c0 	lea    eax,[eax*8-0x3ffd9ecc]
c00012a8:	8d 48 f8             	lea    ecx,[eax-0x8]
c00012ab:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00012ae:	39 ca                	cmp    edx,ecx
c00012b0:	74 63                	je     c0001315 <dlmalloc+0x26a>
c00012b2:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00012b5:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00012b8:	83 e3 fc             	and    ebx,0xfffffffc
c00012bb:	39 de                	cmp    esi,ebx
c00012bd:	77 52                	ja     c0001311 <dlmalloc+0x266>
c00012bf:	89 df                	mov    edi,ebx
c00012c1:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c00012c4:	29 f7                	sub    edi,esi
c00012c6:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c00012c9:	01 d3                	add    ebx,edx
c00012cb:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c00012ce:	83 ff 0f             	cmp    edi,0xf
c00012d1:	8d 42 08             	lea    eax,[edx+0x8]
c00012d4:	77 09                	ja     c00012df <dlmalloc+0x234>
c00012d6:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c00012da:	e9 52 01 00 00       	jmp    c0001431 <dlmalloc+0x386>
c00012df:	8d 0c 32             	lea    ecx,[edx+esi*1]
c00012e2:	83 ce 01             	or     esi,0x1
c00012e5:	89 0d 3c 61 02 c0    	mov    DWORD PTR ds:0xc002613c,ecx
c00012eb:	89 0d 40 61 02 c0    	mov    DWORD PTR ds:0xc0026140,ecx
c00012f1:	c7 41 08 34 61 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0026134
c00012f8:	c7 41 0c 34 61 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0026134
c00012ff:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001302:	89 fa                	mov    edx,edi
c0001304:	83 ca 01             	or     edx,0x1
c0001307:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000130a:	89 3b                	mov    DWORD PTR [ebx],edi
c000130c:	e9 20 01 00 00       	jmp    c0001431 <dlmalloc+0x386>
c0001311:	89 c2                	mov    edx,eax
c0001313:	eb 99                	jmp    c00012ae <dlmalloc+0x203>
c0001315:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001319:	b8 01 00 00 00       	mov    eax,0x1
c000131e:	41                   	inc    ecx
c000131f:	89 cb                	mov    ebx,ecx
c0001321:	8d 14 cd 2c 61 02 c0 	lea    edx,[ecx*8-0x3ffd9ed4]
c0001328:	c1 eb 05             	shr    ebx,0x5
c000132b:	d3 e0                	shl    eax,cl
c000132d:	8b 3c 9d 34 64 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd9bcc]
c0001334:	39 f8                	cmp    eax,edi
c0001336:	77 04                	ja     c000133c <dlmalloc+0x291>
c0001338:	85 c0                	test   eax,eax
c000133a:	75 26                	jne    c0001362 <dlmalloc+0x2b7>
c000133c:	43                   	inc    ebx
c000133d:	83 fb 02             	cmp    ebx,0x2
c0001340:	0f 87 a6 00 00 00    	ja     c00013ec <dlmalloc+0x341>
c0001346:	8b 3c 9d 34 64 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd9bcc]
c000134d:	85 ff                	test   edi,edi
c000134f:	74 eb                	je     c000133c <dlmalloc+0x291>
c0001351:	89 d8                	mov    eax,ebx
c0001353:	c1 e0 06             	shl    eax,0x6
c0001356:	8d 14 85 2c 61 02 c0 	lea    edx,[eax*4-0x3ffd9ed4]
c000135d:	b8 01 00 00 00       	mov    eax,0x1
c0001362:	85 f8                	test   eax,edi
c0001364:	75 07                	jne    c000136d <dlmalloc+0x2c2>
c0001366:	83 c2 08             	add    edx,0x8
c0001369:	01 c0                	add    eax,eax
c000136b:	eb f5                	jmp    c0001362 <dlmalloc+0x2b7>
c000136d:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0001370:	39 ca                	cmp    edx,ecx
c0001372:	75 14                	jne    c0001388 <dlmalloc+0x2dd>
c0001374:	89 c1                	mov    ecx,eax
c0001376:	83 c2 08             	add    edx,0x8
c0001379:	f7 d1                	not    ecx
c000137b:	01 c0                	add    eax,eax
c000137d:	21 cf                	and    edi,ecx
c000137f:	89 3c 9d 34 64 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd9bcc],edi
c0001386:	eb ac                	jmp    c0001334 <dlmalloc+0x289>
c0001388:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c000138b:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c000138e:	83 e0 fc             	and    eax,0xfffffffc
c0001391:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001394:	89 c3                	mov    ebx,eax
c0001396:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001399:	29 f3                	sub    ebx,esi
c000139b:	8d 14 01             	lea    edx,[ecx+eax*1]
c000139e:	83 fb 0f             	cmp    ebx,0xf
c00013a1:	8d 41 08             	lea    eax,[ecx+0x8]
c00013a4:	77 09                	ja     c00013af <dlmalloc+0x304>
c00013a6:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00013aa:	e9 82 00 00 00       	jmp    c0001431 <dlmalloc+0x386>
c00013af:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00013b2:	81 fe ff 00 00 00    	cmp    esi,0xff
c00013b8:	89 3d 3c 61 02 c0    	mov    DWORD PTR ds:0xc002613c,edi
c00013be:	89 3d 40 61 02 c0    	mov    DWORD PTR ds:0xc0026140,edi
c00013c4:	c7 47 08 34 61 02 c0 	mov    DWORD PTR [edi+0x8],0xc0026134
c00013cb:	c7 47 0c 34 61 02 c0 	mov    DWORD PTR [edi+0xc],0xc0026134
c00013d2:	77 06                	ja     c00013da <dlmalloc+0x32f>
c00013d4:	89 3d 30 61 02 c0    	mov    DWORD PTR ds:0xc0026130,edi
c00013da:	83 ce 01             	or     esi,0x1
c00013dd:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c00013e0:	89 d9                	mov    ecx,ebx
c00013e2:	83 c9 01             	or     ecx,0x1
c00013e5:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c00013e8:	89 1a                	mov    DWORD PTR [edx],ebx
c00013ea:	eb 45                	jmp    c0001431 <dlmalloc+0x386>
c00013ec:	a1 2c 61 02 c0       	mov    eax,ds:0xc002612c
c00013f1:	8d 4e 10             	lea    ecx,[esi+0x10]
c00013f4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00013f7:	83 e2 fc             	and    edx,0xfffffffc
c00013fa:	39 d1                	cmp    ecx,edx
c00013fc:	77 1e                	ja     c000141c <dlmalloc+0x371>
c00013fe:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001401:	89 f3                	mov    ebx,esi
c0001403:	89 0d 2c 61 02 c0    	mov    DWORD PTR ds:0xc002612c,ecx
c0001409:	83 cb 01             	or     ebx,0x1
c000140c:	29 f2                	sub    edx,esi
c000140e:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001411:	83 ca 01             	or     edx,0x1
c0001414:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001417:	e9 2d fd ff ff       	jmp    c0001149 <dlmalloc+0x9e>
c000141c:	83 c4 1c             	add    esp,0x1c
c000141f:	89 f0                	mov    eax,esi
c0001421:	5b                   	pop    ebx
c0001422:	ba 00 61 02 c0       	mov    edx,0xc0026100
c0001427:	5e                   	pop    esi
c0001428:	5f                   	pop    edi
c0001429:	5d                   	pop    ebp
c000142a:	e9 19 fa ff ff       	jmp    c0000e48 <sYSMALLOc>
c000142f:	31 c0                	xor    eax,eax
c0001431:	83 c4 1c             	add    esp,0x1c
c0001434:	5b                   	pop    ebx
c0001435:	5e                   	pop    esi
c0001436:	5f                   	pop    edi
c0001437:	5d                   	pop    ebp
c0001438:	c3                   	ret    

c0001439 <iALLOc>:
c0001439:	55                   	push   ebp
c000143a:	89 c5                	mov    ebp,eax
c000143c:	57                   	push   edi
c000143d:	56                   	push   esi
c000143e:	53                   	push   ebx
c000143f:	83 ec 2c             	sub    esp,0x2c
c0001442:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0001446:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000144a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000144e:	83 3d 00 61 02 c0 00 	cmp    DWORD PTR ds:0xc0026100,0x0
c0001455:	75 12                	jne    c0001469 <iALLOc+0x30>
c0001457:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000145b:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001460:	e8 07 f8 ff ff       	call   c0000c6c <malloc_consolidate>
c0001465:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001469:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000146e:	74 12                	je     c0001482 <iALLOc+0x49>
c0001470:	85 ed                	test   ebp,ebp
c0001472:	0f 84 64 01 00 00    	je     c00015dc <iALLOc+0x1a3>
c0001478:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0001480:	eb 33                	jmp    c00014b5 <iALLOc+0x7c>
c0001482:	85 ed                	test   ebp,ebp
c0001484:	75 14                	jne    c000149a <iALLOc+0x61>
c0001486:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c000148e:	83 c4 2c             	add    esp,0x2c
c0001491:	5b                   	pop    ebx
c0001492:	5e                   	pop    esi
c0001493:	5f                   	pop    edi
c0001494:	5d                   	pop    ebp
c0001495:	e9 11 fc ff ff       	jmp    c00010ab <dlmalloc>
c000149a:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00014a1:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00014a9:	83 f8 0f             	cmp    eax,0xf
c00014ac:	76 07                	jbe    c00014b5 <iALLOc+0x7c>
c00014ae:	83 e0 f8             	and    eax,0xfffffff8
c00014b1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00014b5:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c00014ba:	75 09                	jne    c00014c5 <iALLOc+0x8c>
c00014bc:	89 d0                	mov    eax,edx
c00014be:	8d 3c aa             	lea    edi,[edx+ebp*4]
c00014c1:	31 f6                	xor    esi,esi
c00014c3:	eb 3b                	jmp    c0001500 <iALLOc+0xc7>
c00014c5:	8b 02                	mov    eax,DWORD PTR [edx]
c00014c7:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c00014cf:	83 c0 0b             	add    eax,0xb
c00014d2:	83 f8 0f             	cmp    eax,0xf
c00014d5:	76 07                	jbe    c00014de <iALLOc+0xa5>
c00014d7:	83 e0 f8             	and    eax,0xfffffff8
c00014da:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00014de:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00014e2:	0f af f5             	imul   esi,ebp
c00014e5:	eb 25                	jmp    c000150c <iALLOc+0xd3>
c00014e7:	8b 18                	mov    ebx,DWORD PTR [eax]
c00014e9:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c00014ec:	bb 10 00 00 00       	mov    ebx,0x10
c00014f1:	83 f9 0f             	cmp    ecx,0xf
c00014f4:	76 05                	jbe    c00014fb <iALLOc+0xc2>
c00014f6:	83 e1 f8             	and    ecx,0xfffffff8
c00014f9:	89 cb                	mov    ebx,ecx
c00014fb:	01 de                	add    esi,ebx
c00014fd:	83 c0 04             	add    eax,0x4
c0001500:	39 c7                	cmp    edi,eax
c0001502:	75 e3                	jne    c00014e7 <iALLOc+0xae>
c0001504:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000150c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001510:	8b 1d 54 64 02 c0    	mov    ebx,DWORD PTR ds:0xc0026454
c0001516:	83 ec 0c             	sub    esp,0xc
c0001519:	c7 05 54 64 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026454,0x0
c0001523:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001527:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c000152b:	50                   	push   eax
c000152c:	e8 7a fb ff ff       	call   c00010ab <dlmalloc>
c0001531:	83 c4 10             	add    esp,0x10
c0001534:	89 1d 54 64 02 c0    	mov    DWORD PTR ds:0xc0026454,ebx
c000153a:	85 c0                	test   eax,eax
c000153c:	0f 84 92 00 00 00    	je     c00015d4 <iALLOc+0x19b>
c0001542:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c0001545:	8d 78 f8             	lea    edi,[eax-0x8]
c0001548:	83 e3 fc             	and    ebx,0xfffffffc
c000154b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000154f:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0001554:	74 1e                	je     c0001574 <iALLOc+0x13b>
c0001556:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000155a:	89 d9                	mov    ecx,ebx
c000155c:	52                   	push   edx
c000155d:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0001561:	83 e9 04             	sub    ecx,0x4
c0001564:	51                   	push   ecx
c0001565:	6a 00                	push   0x0
c0001567:	50                   	push   eax
c0001568:	e8 83 ef ff ff       	call   c00004f0 <memset>
c000156d:	83 c4 10             	add    esp,0x10
c0001570:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001574:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0001579:	75 14                	jne    c000158f <iALLOc+0x156>
c000157b:	8d 04 37             	lea    eax,[edi+esi*1]
c000157e:	29 f3                	sub    ebx,esi
c0001580:	8d 48 08             	lea    ecx,[eax+0x8]
c0001583:	83 cb 01             	or     ebx,0x1
c0001586:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000158a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000158d:	89 f3                	mov    ebx,esi
c000158f:	31 c0                	xor    eax,eax
c0001591:	4d                   	dec    ebp
c0001592:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001595:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001599:	39 c5                	cmp    ebp,eax
c000159b:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c000159e:	74 2c                	je     c00015cc <iALLOc+0x193>
c00015a0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00015a4:	85 c9                	test   ecx,ecx
c00015a6:	75 15                	jne    c00015bd <iALLOc+0x184>
c00015a8:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00015ab:	8d 71 0b             	lea    esi,[ecx+0xb]
c00015ae:	b9 10 00 00 00       	mov    ecx,0x10
c00015b3:	83 fe 0f             	cmp    esi,0xf
c00015b6:	76 05                	jbe    c00015bd <iALLOc+0x184>
c00015b8:	83 e6 f8             	and    esi,0xfffffff8
c00015bb:	89 f1                	mov    ecx,esi
c00015bd:	89 ce                	mov    esi,ecx
c00015bf:	29 cb                	sub    ebx,ecx
c00015c1:	83 ce 01             	or     esi,0x1
c00015c4:	40                   	inc    eax
c00015c5:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c00015c8:	01 cf                	add    edi,ecx
c00015ca:	eb c6                	jmp    c0001592 <iALLOc+0x159>
c00015cc:	83 cb 01             	or     ebx,0x1
c00015cf:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c00015d2:	eb 08                	jmp    c00015dc <iALLOc+0x1a3>
c00015d4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00015dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00015e0:	83 c4 2c             	add    esp,0x2c
c00015e3:	5b                   	pop    ebx
c00015e4:	5e                   	pop    esi
c00015e5:	5f                   	pop    edi
c00015e6:	5d                   	pop    ebp
c00015e7:	c3                   	ret    

c00015e8 <dlrealloc>:
c00015e8:	55                   	push   ebp
c00015e9:	57                   	push   edi
c00015ea:	56                   	push   esi
c00015eb:	53                   	push   ebx
c00015ec:	83 ec 1c             	sub    esp,0x1c
c00015ef:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00015f3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00015f7:	85 db                	test   ebx,ebx
c00015f9:	75 10                	jne    c000160b <dlrealloc+0x23>
c00015fb:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00015ff:	83 c4 1c             	add    esp,0x1c
c0001602:	5b                   	pop    ebx
c0001603:	5e                   	pop    esi
c0001604:	5f                   	pop    edi
c0001605:	5d                   	pop    ebp
c0001606:	e9 a0 fa ff ff       	jmp    c00010ab <dlmalloc>
c000160b:	83 f8 df             	cmp    eax,0xffffffdf
c000160e:	76 07                	jbe    c0001617 <dlrealloc+0x2f>
c0001610:	31 db                	xor    ebx,ebx
c0001612:	e9 6a 01 00 00       	jmp    c0001781 <dlrealloc+0x199>
c0001617:	83 c0 0b             	add    eax,0xb
c000161a:	bd 10 00 00 00       	mov    ebp,0x10
c000161f:	83 f8 0f             	cmp    eax,0xf
c0001622:	76 05                	jbe    c0001629 <dlrealloc+0x41>
c0001624:	83 e0 f8             	and    eax,0xfffffff8
c0001627:	89 c5                	mov    ebp,eax
c0001629:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c000162c:	8d 7b f8             	lea    edi,[ebx-0x8]
c000162f:	89 c6                	mov    esi,eax
c0001631:	83 e6 fc             	and    esi,0xfffffffc
c0001634:	a8 02                	test   al,0x2
c0001636:	75 d8                	jne    c0001610 <dlrealloc+0x28>
c0001638:	39 f5                	cmp    ebp,esi
c000163a:	0f 86 04 01 00 00    	jbe    c0001744 <dlrealloc+0x15c>
c0001640:	8d 14 37             	lea    edx,[edi+esi*1]
c0001643:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0001646:	39 15 2c 61 02 c0    	cmp    DWORD PTR ds:0xc002612c,edx
c000164c:	75 33                	jne    c0001681 <dlrealloc+0x99>
c000164e:	83 e1 fc             	and    ecx,0xfffffffc
c0001651:	01 f1                	add    ecx,esi
c0001653:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001657:	8d 4d 10             	lea    ecx,[ebp+0x10]
c000165a:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c000165e:	77 49                	ja     c00016a9 <dlrealloc+0xc1>
c0001660:	01 ef                	add    edi,ebp
c0001662:	83 e0 01             	and    eax,0x1
c0001665:	09 e8                	or     eax,ebp
c0001667:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c000166a:	89 3d 2c 61 02 c0    	mov    DWORD PTR ds:0xc002612c,edi
c0001670:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001674:	29 e8                	sub    eax,ebp
c0001676:	83 c8 01             	or     eax,0x1
c0001679:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c000167c:	e9 00 01 00 00       	jmp    c0001781 <dlrealloc+0x199>
c0001681:	89 c8                	mov    eax,ecx
c0001683:	83 e0 fe             	and    eax,0xfffffffe
c0001686:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c000168b:	75 1c                	jne    c00016a9 <dlrealloc+0xc1>
c000168d:	83 e1 fc             	and    ecx,0xfffffffc
c0001690:	01 f1                	add    ecx,esi
c0001692:	39 cd                	cmp    ebp,ecx
c0001694:	77 13                	ja     c00016a9 <dlrealloc+0xc1>
c0001696:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001699:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000169c:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c000169f:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00016a2:	89 ce                	mov    esi,ecx
c00016a4:	e9 9b 00 00 00       	jmp    c0001744 <dlrealloc+0x15c>
c00016a9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00016ad:	8d 45 f9             	lea    eax,[ebp-0x7]
c00016b0:	83 ec 0c             	sub    esp,0xc
c00016b3:	50                   	push   eax
c00016b4:	e8 f2 f9 ff ff       	call   c00010ab <dlmalloc>
c00016b9:	83 c4 10             	add    esp,0x10
c00016bc:	85 c0                	test   eax,eax
c00016be:	0f 84 4c ff ff ff    	je     c0001610 <dlrealloc+0x28>
c00016c4:	8d 48 f8             	lea    ecx,[eax-0x8]
c00016c7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00016cb:	39 ca                	cmp    edx,ecx
c00016cd:	75 0a                	jne    c00016d9 <dlrealloc+0xf1>
c00016cf:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c00016d2:	83 e0 fc             	and    eax,0xfffffffc
c00016d5:	01 c6                	add    esi,eax
c00016d7:	eb 6b                	jmp    c0001744 <dlrealloc+0x15c>
c00016d9:	8d 4e fc             	lea    ecx,[esi-0x4]
c00016dc:	83 f9 27             	cmp    ecx,0x27
c00016df:	76 08                	jbe    c00016e9 <dlrealloc+0x101>
c00016e1:	89 de                	mov    esi,ebx
c00016e3:	89 c7                	mov    edi,eax
c00016e5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00016e7:	eb 43                	jmp    c000172c <dlrealloc+0x144>
c00016e9:	8b 13                	mov    edx,DWORD PTR [ebx]
c00016eb:	83 f9 13             	cmp    ecx,0x13
c00016ee:	89 10                	mov    DWORD PTR [eax],edx
c00016f0:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00016f3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00016f6:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00016f9:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00016fc:	76 2e                	jbe    c000172c <dlrealloc+0x144>
c00016fe:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001701:	83 f9 1b             	cmp    ecx,0x1b
c0001704:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001707:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000170a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000170d:	76 1d                	jbe    c000172c <dlrealloc+0x144>
c000170f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0001712:	83 f9 23             	cmp    ecx,0x23
c0001715:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001718:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000171b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000171e:	76 0c                	jbe    c000172c <dlrealloc+0x144>
c0001720:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0001723:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0001726:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001729:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000172c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001730:	83 ec 0c             	sub    esp,0xc
c0001733:	53                   	push   ebx
c0001734:	e8 1a f6 ff ff       	call   c0000d53 <dlfree>
c0001739:	83 c4 10             	add    esp,0x10
c000173c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001740:	89 c3                	mov    ebx,eax
c0001742:	eb 3d                	jmp    c0001781 <dlrealloc+0x199>
c0001744:	89 f2                	mov    edx,esi
c0001746:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001749:	29 ea                	sub    edx,ebp
c000174b:	83 e1 01             	and    ecx,0x1
c000174e:	8d 04 37             	lea    eax,[edi+esi*1]
c0001751:	83 fa 0f             	cmp    edx,0xf
c0001754:	77 0b                	ja     c0001761 <dlrealloc+0x179>
c0001756:	09 ce                	or     esi,ecx
c0001758:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c000175b:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c000175f:	eb 20                	jmp    c0001781 <dlrealloc+0x199>
c0001761:	01 ef                	add    edi,ebp
c0001763:	83 ec 0c             	sub    esp,0xc
c0001766:	09 cd                	or     ebp,ecx
c0001768:	83 ca 01             	or     edx,0x1
c000176b:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c000176e:	83 c7 08             	add    edi,0x8
c0001771:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c0001774:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001778:	57                   	push   edi
c0001779:	e8 d5 f5 ff ff       	call   c0000d53 <dlfree>
c000177e:	83 c4 10             	add    esp,0x10
c0001781:	83 c4 1c             	add    esp,0x1c
c0001784:	89 d8                	mov    eax,ebx
c0001786:	5b                   	pop    ebx
c0001787:	5e                   	pop    esi
c0001788:	5f                   	pop    edi
c0001789:	5d                   	pop    ebp
c000178a:	c3                   	ret    

c000178b <dlmemalign>:
c000178b:	55                   	push   ebp
c000178c:	57                   	push   edi
c000178d:	56                   	push   esi
c000178e:	53                   	push   ebx
c000178f:	83 ec 0c             	sub    esp,0xc
c0001792:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0001796:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000179a:	83 fa 08             	cmp    edx,0x8
c000179d:	77 10                	ja     c00017af <dlmemalign+0x24>
c000179f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00017a3:	83 c4 0c             	add    esp,0xc
c00017a6:	5b                   	pop    ebx
c00017a7:	5e                   	pop    esi
c00017a8:	5f                   	pop    edi
c00017a9:	5d                   	pop    ebp
c00017aa:	e9 fc f8 ff ff       	jmp    c00010ab <dlmalloc>
c00017af:	bf 10 00 00 00       	mov    edi,0x10
c00017b4:	83 fa 0f             	cmp    edx,0xf
c00017b7:	76 13                	jbe    c00017cc <dlmemalign+0x41>
c00017b9:	8d 4a ff             	lea    ecx,[edx-0x1]
c00017bc:	85 d1                	test   ecx,edx
c00017be:	75 04                	jne    c00017c4 <dlmemalign+0x39>
c00017c0:	89 d7                	mov    edi,edx
c00017c2:	eb 08                	jmp    c00017cc <dlmemalign+0x41>
c00017c4:	39 d7                	cmp    edi,edx
c00017c6:	73 04                	jae    c00017cc <dlmemalign+0x41>
c00017c8:	01 ff                	add    edi,edi
c00017ca:	eb f8                	jmp    c00017c4 <dlmemalign+0x39>
c00017cc:	83 f8 df             	cmp    eax,0xffffffdf
c00017cf:	76 07                	jbe    c00017d8 <dlmemalign+0x4d>
c00017d1:	31 c0                	xor    eax,eax
c00017d3:	e9 ce 00 00 00       	jmp    c00018a6 <dlmemalign+0x11b>
c00017d8:	83 c0 0b             	add    eax,0xb
c00017db:	bd 10 00 00 00       	mov    ebp,0x10
c00017e0:	83 f8 0f             	cmp    eax,0xf
c00017e3:	76 05                	jbe    c00017ea <dlmemalign+0x5f>
c00017e5:	83 e0 f8             	and    eax,0xfffffff8
c00017e8:	89 c5                	mov    ebp,eax
c00017ea:	83 ec 0c             	sub    esp,0xc
c00017ed:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c00017f1:	50                   	push   eax
c00017f2:	e8 b4 f8 ff ff       	call   c00010ab <dlmalloc>
c00017f7:	83 c4 10             	add    esp,0x10
c00017fa:	89 c1                	mov    ecx,eax
c00017fc:	85 c0                	test   eax,eax
c00017fe:	74 d1                	je     c00017d1 <dlmemalign+0x46>
c0001800:	31 d2                	xor    edx,edx
c0001802:	8d 70 f8             	lea    esi,[eax-0x8]
c0001805:	f7 f7                	div    edi
c0001807:	85 d2                	test   edx,edx
c0001809:	74 62                	je     c000186d <dlmemalign+0xe2>
c000180b:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c000180f:	89 f8                	mov    eax,edi
c0001811:	f7 d8                	neg    eax
c0001813:	21 c3                	and    ebx,eax
c0001815:	83 eb 08             	sub    ebx,0x8
c0001818:	89 d8                	mov    eax,ebx
c000181a:	29 f0                	sub    eax,esi
c000181c:	83 f8 0f             	cmp    eax,0xf
c000181f:	77 02                	ja     c0001823 <dlmemalign+0x98>
c0001821:	01 fb                	add    ebx,edi
c0001823:	89 d8                	mov    eax,ebx
c0001825:	29 f0                	sub    eax,esi
c0001827:	89 c6                	mov    esi,eax
c0001829:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000182c:	89 c2                	mov    edx,eax
c000182e:	83 e2 fc             	and    edx,0xfffffffc
c0001831:	29 f2                	sub    edx,esi
c0001833:	a8 02                	test   al,0x2
c0001835:	74 10                	je     c0001847 <dlmemalign+0xbc>
c0001837:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c000183a:	83 ca 02             	or     edx,0x2
c000183d:	8d 43 08             	lea    eax,[ebx+0x8]
c0001840:	89 33                	mov    DWORD PTR [ebx],esi
c0001842:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001845:	eb 5f                	jmp    c00018a6 <dlmemalign+0x11b>
c0001847:	83 ec 0c             	sub    esp,0xc
c000184a:	89 d0                	mov    eax,edx
c000184c:	83 c8 01             	or     eax,0x1
c000184f:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0001852:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001857:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000185a:	83 e0 01             	and    eax,0x1
c000185d:	09 f0                	or     eax,esi
c000185f:	89 de                	mov    esi,ebx
c0001861:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c0001864:	51                   	push   ecx
c0001865:	e8 e9 f4 ff ff       	call   c0000d53 <dlfree>
c000186a:	83 c4 10             	add    esp,0x10
c000186d:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001870:	a8 02                	test   al,0x2
c0001872:	75 2f                	jne    c00018a3 <dlmemalign+0x118>
c0001874:	83 e0 fc             	and    eax,0xfffffffc
c0001877:	8d 55 10             	lea    edx,[ebp+0x10]
c000187a:	39 c2                	cmp    edx,eax
c000187c:	73 25                	jae    c00018a3 <dlmemalign+0x118>
c000187e:	8d 14 2e             	lea    edx,[esi+ebp*1]
c0001881:	83 ec 0c             	sub    esp,0xc
c0001884:	29 e8                	sub    eax,ebp
c0001886:	83 c2 08             	add    edx,0x8
c0001889:	83 c8 01             	or     eax,0x1
c000188c:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c000188f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001892:	83 e0 01             	and    eax,0x1
c0001895:	09 c5                	or     ebp,eax
c0001897:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c000189a:	52                   	push   edx
c000189b:	e8 b3 f4 ff ff       	call   c0000d53 <dlfree>
c00018a0:	83 c4 10             	add    esp,0x10
c00018a3:	8d 46 08             	lea    eax,[esi+0x8]
c00018a6:	83 c4 0c             	add    esp,0xc
c00018a9:	5b                   	pop    ebx
c00018aa:	5e                   	pop    esi
c00018ab:	5f                   	pop    edi
c00018ac:	5d                   	pop    ebp
c00018ad:	c3                   	ret    

c00018ae <dlcalloc>:
c00018ae:	53                   	push   ebx
c00018af:	83 ec 14             	sub    esp,0x14
c00018b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00018b6:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c00018bb:	50                   	push   eax
c00018bc:	e8 ea f7 ff ff       	call   c00010ab <dlmalloc>
c00018c1:	83 c4 10             	add    esp,0x10
c00018c4:	89 c3                	mov    ebx,eax
c00018c6:	85 c0                	test   eax,eax
c00018c8:	74 77                	je     c0001941 <dlcalloc+0x93>
c00018ca:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c00018cd:	89 d0                	mov    eax,edx
c00018cf:	83 e0 fc             	and    eax,0xfffffffc
c00018d2:	80 e2 02             	and    dl,0x2
c00018d5:	75 5a                	jne    c0001931 <dlcalloc+0x83>
c00018d7:	83 e8 04             	sub    eax,0x4
c00018da:	83 f8 27             	cmp    eax,0x27
c00018dd:	76 03                	jbe    c00018e2 <dlcalloc+0x34>
c00018df:	51                   	push   ecx
c00018e0:	eb 53                	jmp    c0001935 <dlcalloc+0x87>
c00018e2:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00018e8:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00018ef:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00018f6:	83 f8 13             	cmp    eax,0x13
c00018f9:	76 46                	jbe    c0001941 <dlcalloc+0x93>
c00018fb:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001902:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001909:	83 f8 1b             	cmp    eax,0x1b
c000190c:	76 33                	jbe    c0001941 <dlcalloc+0x93>
c000190e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001915:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000191c:	83 f8 23             	cmp    eax,0x23
c000191f:	76 20                	jbe    c0001941 <dlcalloc+0x93>
c0001921:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001928:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000192f:	eb 10                	jmp    c0001941 <dlcalloc+0x93>
c0001931:	83 e8 08             	sub    eax,0x8
c0001934:	52                   	push   edx
c0001935:	50                   	push   eax
c0001936:	6a 00                	push   0x0
c0001938:	53                   	push   ebx
c0001939:	e8 b2 eb ff ff       	call   c00004f0 <memset>
c000193e:	83 c4 10             	add    esp,0x10
c0001941:	89 d8                	mov    eax,ebx
c0001943:	83 c4 08             	add    esp,0x8
c0001946:	5b                   	pop    ebx
c0001947:	c3                   	ret    

c0001948 <dlcfree>:
c0001948:	e9 06 f4 ff ff       	jmp    c0000d53 <dlfree>

c000194d <dlindependent_calloc>:
c000194d:	83 ec 28             	sub    esp,0x28
c0001950:	b9 03 00 00 00       	mov    ecx,0x3
c0001955:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001959:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000195d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0001961:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0001965:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001969:	e8 cb fa ff ff       	call   c0001439 <iALLOc>
c000196e:	83 c4 2c             	add    esp,0x2c
c0001971:	c3                   	ret    

c0001972 <dlindependent_comalloc>:
c0001972:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001976:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000197a:	31 c9                	xor    ecx,ecx
c000197c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001980:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001984:	e9 b0 fa ff ff       	jmp    c0001439 <iALLOc>

c0001989 <dlvalloc>:
c0001989:	83 ec 0c             	sub    esp,0xc
c000198c:	83 3d 00 61 02 c0 00 	cmp    DWORD PTR ds:0xc0026100,0x0
c0001993:	75 0a                	jne    c000199f <dlvalloc+0x16>
c0001995:	b8 00 61 02 c0       	mov    eax,0xc0026100
c000199a:	e8 cd f2 ff ff       	call   c0000c6c <malloc_consolidate>
c000199f:	50                   	push   eax
c00019a0:	50                   	push   eax
c00019a1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00019a5:	ff 35 5c 64 02 c0    	push   DWORD PTR ds:0xc002645c
c00019ab:	e8 db fd ff ff       	call   c000178b <dlmemalign>
c00019b0:	83 c4 1c             	add    esp,0x1c
c00019b3:	c3                   	ret    

c00019b4 <dlpvalloc>:
c00019b4:	83 ec 0c             	sub    esp,0xc
c00019b7:	83 3d 00 61 02 c0 00 	cmp    DWORD PTR ds:0xc0026100,0x0
c00019be:	75 0a                	jne    c00019ca <dlpvalloc+0x16>
c00019c0:	b8 00 61 02 c0       	mov    eax,0xc0026100
c00019c5:	e8 a2 f2 ff ff       	call   c0000c6c <malloc_consolidate>
c00019ca:	a1 5c 64 02 c0       	mov    eax,ds:0xc002645c
c00019cf:	89 c1                	mov    ecx,eax
c00019d1:	52                   	push   edx
c00019d2:	f7 d9                	neg    ecx
c00019d4:	52                   	push   edx
c00019d5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00019d9:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c00019dd:	21 ca                	and    edx,ecx
c00019df:	52                   	push   edx
c00019e0:	50                   	push   eax
c00019e1:	e8 a5 fd ff ff       	call   c000178b <dlmemalign>
c00019e6:	83 c4 1c             	add    esp,0x1c
c00019e9:	c3                   	ret    

c00019ea <dlmalloc_trim>:
c00019ea:	b8 00 61 02 c0       	mov    eax,0xc0026100
c00019ef:	e8 78 f2 ff ff       	call   c0000c6c <malloc_consolidate>
c00019f4:	31 c0                	xor    eax,eax
c00019f6:	c3                   	ret    

c00019f7 <dlmalloc_usable_size>:
c00019f7:	53                   	push   ebx
c00019f8:	31 c0                	xor    eax,eax
c00019fa:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00019fe:	85 c9                	test   ecx,ecx
c0001a00:	74 24                	je     c0001a26 <dlmalloc_usable_size+0x2f>
c0001a02:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a05:	f6 c2 02             	test   dl,0x2
c0001a08:	74 08                	je     c0001a12 <dlmalloc_usable_size+0x1b>
c0001a0a:	83 e2 fc             	and    edx,0xfffffffc
c0001a0d:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a10:	eb 14                	jmp    c0001a26 <dlmalloc_usable_size+0x2f>
c0001a12:	89 d3                	mov    ebx,edx
c0001a14:	31 c0                	xor    eax,eax
c0001a16:	83 e3 fe             	and    ebx,0xfffffffe
c0001a19:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a1e:	74 06                	je     c0001a26 <dlmalloc_usable_size+0x2f>
c0001a20:	83 e2 fc             	and    edx,0xfffffffc
c0001a23:	8d 42 fc             	lea    eax,[edx-0x4]
c0001a26:	5b                   	pop    ebx
c0001a27:	c3                   	ret    

c0001a28 <dlmallinfo>:
c0001a28:	55                   	push   ebp
c0001a29:	57                   	push   edi
c0001a2a:	56                   	push   esi
c0001a2b:	53                   	push   ebx
c0001a2c:	83 ec 08             	sub    esp,0x8
c0001a2f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001a33:	83 3d 2c 61 02 c0 00 	cmp    DWORD PTR ds:0xc002612c,0x0
c0001a3a:	75 0a                	jne    c0001a46 <dlmallinfo+0x1e>
c0001a3c:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001a41:	e8 26 f2 ff ff       	call   c0000c6c <malloc_consolidate>
c0001a46:	a1 2c 61 02 c0       	mov    eax,ds:0xc002612c
c0001a4b:	31 ed                	xor    ebp,ebp
c0001a4d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001a50:	31 c9                	xor    ecx,ecx
c0001a52:	83 e0 fc             	and    eax,0xfffffffc
c0001a55:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a59:	31 c0                	xor    eax,eax
c0001a5b:	8b 14 85 04 61 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9efc]
c0001a62:	85 d2                	test   edx,edx
c0001a64:	74 0e                	je     c0001a74 <dlmallinfo+0x4c>
c0001a66:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001a69:	45                   	inc    ebp
c0001a6a:	83 e6 fc             	and    esi,0xfffffffc
c0001a6d:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001a70:	01 f1                	add    ecx,esi
c0001a72:	eb ee                	jmp    c0001a62 <dlmallinfo+0x3a>
c0001a74:	40                   	inc    eax
c0001a75:	83 f8 0a             	cmp    eax,0xa
c0001a78:	75 e1                	jne    c0001a5b <dlmallinfo+0x33>
c0001a7a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a7e:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001a85:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001a88:	b8 34 61 02 c0       	mov    eax,0xc0026134
c0001a8d:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001a90:	39 f0                	cmp    eax,esi
c0001a92:	74 10                	je     c0001aa4 <dlmallinfo+0x7c>
c0001a94:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001a97:	ff 04 24             	inc    DWORD PTR [esp]
c0001a9a:	83 e7 fc             	and    edi,0xfffffffc
c0001a9d:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001aa0:	01 fa                	add    edx,edi
c0001aa2:	eb ec                	jmp    c0001a90 <dlmallinfo+0x68>
c0001aa4:	83 c0 08             	add    eax,0x8
c0001aa7:	3d 2c 64 02 c0       	cmp    eax,0xc002642c
c0001aac:	75 df                	jne    c0001a8d <dlmallinfo+0x65>
c0001aae:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001ab1:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001ab4:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001ab7:	a1 68 64 02 c0       	mov    eax,ds:0xc0026468
c0001abc:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001abf:	89 03                	mov    DWORD PTR [ebx],eax
c0001ac1:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001ac4:	8b 35 50 64 02 c0    	mov    esi,DWORD PTR ds:0xc0026450
c0001aca:	29 d0                	sub    eax,edx
c0001acc:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001acf:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001ad2:	8b 35 64 64 02 c0    	mov    esi,DWORD PTR ds:0xc0026464
c0001ad8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001adc:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001adf:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001ae2:	8b 35 74 64 02 c0    	mov    esi,DWORD PTR ds:0xc0026474
c0001ae8:	89 d8                	mov    eax,ebx
c0001aea:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001aed:	83 c4 08             	add    esp,0x8
c0001af0:	5b                   	pop    ebx
c0001af1:	5e                   	pop    esi
c0001af2:	5f                   	pop    edi
c0001af3:	5d                   	pop    ebp
c0001af4:	c2 04 00             	ret    0x4

c0001af7 <dlmalloc_stats>:
c0001af7:	83 ec 30             	sub    esp,0x30
c0001afa:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001afe:	50                   	push   eax
c0001aff:	e8 24 ff ff ff       	call   c0001a28 <dlmallinfo>
c0001b04:	83 c4 30             	add    esp,0x30
c0001b07:	c3                   	ret    

c0001b08 <dlmallopt>:
c0001b08:	56                   	push   esi
c0001b09:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001b0e:	53                   	push   ebx
c0001b0f:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b13:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b17:	e8 50 f1 ff ff       	call   c0000c6c <malloc_consolidate>
c0001b1c:	8d 46 04             	lea    eax,[esi+0x4]
c0001b1f:	83 f8 05             	cmp    eax,0x5
c0001b22:	77 67                	ja     c0001b8b <dlmallopt+0x83>
c0001b24:	ff 24 85 64 05 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdfa9c]
c0001b2b:	83 fb 50             	cmp    ebx,0x50
c0001b2e:	77 5b                	ja     c0001b8b <dlmallopt+0x83>
c0001b30:	ba 08 00 00 00       	mov    edx,0x8
c0001b35:	85 db                	test   ebx,ebx
c0001b37:	74 12                	je     c0001b4b <dlmallopt+0x43>
c0001b39:	83 c3 0b             	add    ebx,0xb
c0001b3c:	ba 10 00 00 00       	mov    edx,0x10
c0001b41:	83 fb 0f             	cmp    ebx,0xf
c0001b44:	76 05                	jbe    c0001b4b <dlmallopt+0x43>
c0001b46:	89 da                	mov    edx,ebx
c0001b48:	83 e2 f8             	and    edx,0xfffffff8
c0001b4b:	a1 00 61 02 c0       	mov    eax,ds:0xc0026100
c0001b50:	83 e0 03             	and    eax,0x3
c0001b53:	09 d0                	or     eax,edx
c0001b55:	a3 00 61 02 c0       	mov    ds:0xc0026100,eax
c0001b5a:	eb 31                	jmp    c0001b8d <dlmallopt+0x85>
c0001b5c:	89 1d 44 64 02 c0    	mov    DWORD PTR ds:0xc0026444,ebx
c0001b62:	eb 06                	jmp    c0001b6a <dlmallopt+0x62>
c0001b64:	89 1d 48 64 02 c0    	mov    DWORD PTR ds:0xc0026448,ebx
c0001b6a:	be 01 00 00 00       	mov    esi,0x1
c0001b6f:	eb 1c                	jmp    c0001b8d <dlmallopt+0x85>
c0001b71:	89 1d 4c 64 02 c0    	mov    DWORD PTR ds:0xc002644c,ebx
c0001b77:	eb f1                	jmp    c0001b6a <dlmallopt+0x62>
c0001b79:	31 f6                	xor    esi,esi
c0001b7b:	85 db                	test   ebx,ebx
c0001b7d:	75 0e                	jne    c0001b8d <dlmallopt+0x85>
c0001b7f:	c7 05 54 64 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026454,0x0
c0001b89:	eb df                	jmp    c0001b6a <dlmallopt+0x62>
c0001b8b:	31 f6                	xor    esi,esi
c0001b8d:	89 f0                	mov    eax,esi
c0001b8f:	5b                   	pop    ebx
c0001b90:	5e                   	pop    esi
c0001b91:	c3                   	ret    
c0001b92:	66 90                	xchg   ax,ax

c0001b94 <isblank>:
c0001b94:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001b99:	74 09                	je     c0001ba4 <isblank+0x10>
c0001b9b:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001ba0:	75 0a                	jne    c0001bac <isblank+0x18>
c0001ba2:	66 90                	xchg   ax,ax
c0001ba4:	b8 01 00 00 00       	mov    eax,0x1
c0001ba9:	c3                   	ret    
c0001baa:	66 90                	xchg   ax,ax
c0001bac:	b8 00 00 00 00       	mov    eax,0x0
c0001bb1:	c3                   	ret    
c0001bb2:	66 90                	xchg   ax,ax

c0001bb4 <iscntrl>:
c0001bb4:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001bb9:	7e 09                	jle    c0001bc4 <iscntrl+0x10>
c0001bbb:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001bc0:	75 0a                	jne    c0001bcc <iscntrl+0x18>
c0001bc2:	66 90                	xchg   ax,ax
c0001bc4:	b8 01 00 00 00       	mov    eax,0x1
c0001bc9:	c3                   	ret    
c0001bca:	66 90                	xchg   ax,ax
c0001bcc:	b8 00 00 00 00       	mov    eax,0x0
c0001bd1:	c3                   	ret    
c0001bd2:	66 90                	xchg   ax,ax

c0001bd4 <isdigit>:
c0001bd4:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001bd9:	7e 0d                	jle    c0001be8 <isdigit+0x14>
c0001bdb:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001be0:	7f 06                	jg     c0001be8 <isdigit+0x14>
c0001be2:	b8 01 00 00 00       	mov    eax,0x1
c0001be7:	c3                   	ret    
c0001be8:	b8 00 00 00 00       	mov    eax,0x0
c0001bed:	c3                   	ret    
c0001bee:	66 90                	xchg   ax,ax

c0001bf0 <islower>:
c0001bf0:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001bf5:	7e 0d                	jle    c0001c04 <islower+0x14>
c0001bf7:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001bfc:	7f 06                	jg     c0001c04 <islower+0x14>
c0001bfe:	b8 01 00 00 00       	mov    eax,0x1
c0001c03:	c3                   	ret    
c0001c04:	b8 00 00 00 00       	mov    eax,0x0
c0001c09:	c3                   	ret    
c0001c0a:	66 90                	xchg   ax,ax

c0001c0c <isspace>:
c0001c0c:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001c11:	7c 19                	jl     c0001c2c <isspace+0x20>
c0001c13:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001c18:	7e 0a                	jle    c0001c24 <isspace+0x18>
c0001c1a:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001c1f:	75 0b                	jne    c0001c2c <isspace+0x20>
c0001c21:	8d 76 00             	lea    esi,[esi+0x0]
c0001c24:	b8 01 00 00 00       	mov    eax,0x1
c0001c29:	c3                   	ret    
c0001c2a:	66 90                	xchg   ax,ax
c0001c2c:	b8 00 00 00 00       	mov    eax,0x0
c0001c31:	c3                   	ret    
c0001c32:	66 90                	xchg   ax,ax

c0001c34 <isupper>:
c0001c34:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001c39:	7e 0d                	jle    c0001c48 <isupper+0x14>
c0001c3b:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001c40:	7f 06                	jg     c0001c48 <isupper+0x14>
c0001c42:	b8 01 00 00 00       	mov    eax,0x1
c0001c47:	c3                   	ret    
c0001c48:	b8 00 00 00 00       	mov    eax,0x0
c0001c4d:	c3                   	ret    
c0001c4e:	66 90                	xchg   ax,ax

c0001c50 <isalpha>:
c0001c50:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c54:	e8 db ff ff ff       	call   c0001c34 <isupper>
c0001c59:	83 c4 04             	add    esp,0x4
c0001c5c:	85 c0                	test   eax,eax
c0001c5e:	75 10                	jne    c0001c70 <isalpha+0x20>
c0001c60:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c64:	e8 87 ff ff ff       	call   c0001bf0 <islower>
c0001c69:	83 c4 04             	add    esp,0x4
c0001c6c:	85 c0                	test   eax,eax
c0001c6e:	74 08                	je     c0001c78 <isalpha+0x28>
c0001c70:	b8 01 00 00 00       	mov    eax,0x1
c0001c75:	c3                   	ret    
c0001c76:	66 90                	xchg   ax,ax
c0001c78:	b8 00 00 00 00       	mov    eax,0x0
c0001c7d:	c3                   	ret    
c0001c7e:	66 90                	xchg   ax,ax

c0001c80 <isalnum>:
c0001c80:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c84:	e8 c7 ff ff ff       	call   c0001c50 <isalpha>
c0001c89:	83 c4 04             	add    esp,0x4
c0001c8c:	85 c0                	test   eax,eax
c0001c8e:	75 10                	jne    c0001ca0 <isalnum+0x20>
c0001c90:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c94:	e8 3b ff ff ff       	call   c0001bd4 <isdigit>
c0001c99:	83 c4 04             	add    esp,0x4
c0001c9c:	85 c0                	test   eax,eax
c0001c9e:	74 08                	je     c0001ca8 <isalnum+0x28>
c0001ca0:	b8 01 00 00 00       	mov    eax,0x1
c0001ca5:	c3                   	ret    
c0001ca6:	66 90                	xchg   ax,ax
c0001ca8:	b8 00 00 00 00       	mov    eax,0x0
c0001cad:	c3                   	ret    
c0001cae:	66 90                	xchg   ax,ax

c0001cb0 <ispunct>:
c0001cb0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cb4:	e8 c7 ff ff ff       	call   c0001c80 <isalnum>
c0001cb9:	83 c4 04             	add    esp,0x4
c0001cbc:	85 c0                	test   eax,eax
c0001cbe:	75 28                	jne    c0001ce8 <ispunct+0x38>
c0001cc0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cc4:	e8 43 ff ff ff       	call   c0001c0c <isspace>
c0001cc9:	83 c4 04             	add    esp,0x4
c0001ccc:	85 c0                	test   eax,eax
c0001cce:	75 18                	jne    c0001ce8 <ispunct+0x38>
c0001cd0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cd4:	e8 db fe ff ff       	call   c0001bb4 <iscntrl>
c0001cd9:	83 c4 04             	add    esp,0x4
c0001cdc:	85 c0                	test   eax,eax
c0001cde:	75 08                	jne    c0001ce8 <ispunct+0x38>
c0001ce0:	b8 01 00 00 00       	mov    eax,0x1
c0001ce5:	c3                   	ret    
c0001ce6:	66 90                	xchg   ax,ax
c0001ce8:	b8 00 00 00 00       	mov    eax,0x0
c0001ced:	c3                   	ret    
c0001cee:	66 90                	xchg   ax,ax

c0001cf0 <isgraph>:
c0001cf0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cf4:	e8 87 ff ff ff       	call   c0001c80 <isalnum>
c0001cf9:	83 c4 04             	add    esp,0x4
c0001cfc:	85 c0                	test   eax,eax
c0001cfe:	75 10                	jne    c0001d10 <isgraph+0x20>
c0001d00:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d04:	e8 a7 ff ff ff       	call   c0001cb0 <ispunct>
c0001d09:	83 c4 04             	add    esp,0x4
c0001d0c:	85 c0                	test   eax,eax
c0001d0e:	74 08                	je     c0001d18 <isgraph+0x28>
c0001d10:	b8 01 00 00 00       	mov    eax,0x1
c0001d15:	c3                   	ret    
c0001d16:	66 90                	xchg   ax,ax
c0001d18:	b8 00 00 00 00       	mov    eax,0x0
c0001d1d:	c3                   	ret    
c0001d1e:	66 90                	xchg   ax,ax

c0001d20 <isprint>:
c0001d20:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d24:	e8 c7 ff ff ff       	call   c0001cf0 <isgraph>
c0001d29:	83 c4 04             	add    esp,0x4
c0001d2c:	85 c0                	test   eax,eax
c0001d2e:	75 08                	jne    c0001d38 <isprint+0x18>
c0001d30:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001d35:	75 09                	jne    c0001d40 <isprint+0x20>
c0001d37:	90                   	nop
c0001d38:	b8 01 00 00 00       	mov    eax,0x1
c0001d3d:	c3                   	ret    
c0001d3e:	66 90                	xchg   ax,ax
c0001d40:	b8 00 00 00 00       	mov    eax,0x0
c0001d45:	c3                   	ret    
c0001d46:	66 90                	xchg   ax,ax

c0001d48 <isxdigit>:
c0001d48:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d4c:	e8 83 fe ff ff       	call   c0001bd4 <isdigit>
c0001d51:	83 c4 04             	add    esp,0x4
c0001d54:	85 c0                	test   eax,eax
c0001d56:	75 20                	jne    c0001d78 <isxdigit+0x30>
c0001d58:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001d5d:	7e 09                	jle    c0001d68 <isxdigit+0x20>
c0001d5f:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001d64:	7e 12                	jle    c0001d78 <isxdigit+0x30>
c0001d66:	66 90                	xchg   ax,ax
c0001d68:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001d6d:	7e 11                	jle    c0001d80 <isxdigit+0x38>
c0001d6f:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001d74:	7f 0a                	jg     c0001d80 <isxdigit+0x38>
c0001d76:	66 90                	xchg   ax,ax
c0001d78:	b8 01 00 00 00       	mov    eax,0x1
c0001d7d:	c3                   	ret    
c0001d7e:	66 90                	xchg   ax,ax
c0001d80:	b8 00 00 00 00       	mov    eax,0x0
c0001d85:	c3                   	ret    

c0001d86 <disk_status>:
c0001d86:	31 c0                	xor    eax,eax
c0001d88:	c3                   	ret    

c0001d89 <disk_initialize>:
c0001d89:	31 c0                	xor    eax,eax
c0001d8b:	c3                   	ret    

c0001d8c <disk_read>:
c0001d8c:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001d91:	0f b6 04 85 20 c8 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd37e0]
c0001d99:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001d9d:	e9 46 7d 01 00       	jmp    c0019ae8 <fatWrapperReadDisk>

c0001da2 <disk_write>:
c0001da2:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001da7:	0f b6 04 85 20 c8 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd37e0]
c0001daf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001db3:	e9 70 7d 01 00       	jmp    c0019b28 <fatWrapperWriteDisk>

c0001db8 <disk_ioctl>:
c0001db8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001dbd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001dc1:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001dc6:	0f b6 04 85 20 c8 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd37e0]
c0001dce:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001dd2:	e9 91 7d 01 00       	jmp    c0019b68 <fatWrapperIoctl>

c0001dd7 <ld_word>:
c0001dd7:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001ddb:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001dde:	c1 e2 08             	shl    edx,0x8
c0001de1:	09 d0                	or     eax,edx
c0001de3:	c3                   	ret    

c0001de4 <ld_dword>:
c0001de4:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001de8:	89 d1                	mov    ecx,edx
c0001dea:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001dee:	c1 e1 08             	shl    ecx,0x8
c0001df1:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001df4:	09 ca                	or     edx,ecx
c0001df6:	c1 e2 08             	shl    edx,0x8
c0001df9:	09 d0                	or     eax,edx
c0001dfb:	c3                   	ret    

c0001dfc <st_word>:
c0001dfc:	66 89 10             	mov    WORD PTR [eax],dx
c0001dff:	c3                   	ret    

c0001e00 <st_dword>:
c0001e00:	89 10                	mov    DWORD PTR [eax],edx
c0001e02:	c3                   	ret    

c0001e03 <mem_cpy>:
c0001e03:	85 c9                	test   ecx,ecx
c0001e05:	74 10                	je     c0001e17 <mem_cpy+0x14>
c0001e07:	57                   	push   edi
c0001e08:	01 c1                	add    ecx,eax
c0001e0a:	56                   	push   esi
c0001e0b:	89 c7                	mov    edi,eax
c0001e0d:	89 d6                	mov    esi,edx
c0001e0f:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001e10:	39 f9                	cmp    ecx,edi
c0001e12:	75 fb                	jne    c0001e0f <mem_cpy+0xc>
c0001e14:	5e                   	pop    esi
c0001e15:	5f                   	pop    edi
c0001e16:	c3                   	ret    
c0001e17:	c3                   	ret    

c0001e18 <mem_set>:
c0001e18:	01 c1                	add    ecx,eax
c0001e1a:	40                   	inc    eax
c0001e1b:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001e1e:	39 c8                	cmp    eax,ecx
c0001e20:	75 f8                	jne    c0001e1a <mem_set+0x2>
c0001e22:	c3                   	ret    

c0001e23 <mem_cmp>:
c0001e23:	57                   	push   edi
c0001e24:	56                   	push   esi
c0001e25:	89 c6                	mov    esi,eax
c0001e27:	53                   	push   ebx
c0001e28:	46                   	inc    esi
c0001e29:	42                   	inc    edx
c0001e2a:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001e2e:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001e32:	29 fb                	sub    ebx,edi
c0001e34:	89 cf                	mov    edi,ecx
c0001e36:	29 f7                	sub    edi,esi
c0001e38:	01 c7                	add    edi,eax
c0001e3a:	74 04                	je     c0001e40 <mem_cmp+0x1d>
c0001e3c:	85 db                	test   ebx,ebx
c0001e3e:	74 e8                	je     c0001e28 <mem_cmp+0x5>
c0001e40:	89 d8                	mov    eax,ebx
c0001e42:	5b                   	pop    ebx
c0001e43:	5e                   	pop    esi
c0001e44:	5f                   	pop    edi
c0001e45:	c3                   	ret    

c0001e46 <chk_chr>:
c0001e46:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001e49:	85 c9                	test   ecx,ecx
c0001e4b:	74 07                	je     c0001e54 <chk_chr+0xe>
c0001e4d:	39 d1                	cmp    ecx,edx
c0001e4f:	74 03                	je     c0001e54 <chk_chr+0xe>
c0001e51:	40                   	inc    eax
c0001e52:	eb f2                	jmp    c0001e46 <chk_chr>
c0001e54:	89 c8                	mov    eax,ecx
c0001e56:	c3                   	ret    

c0001e57 <dbc_1st>:
c0001e57:	31 c0                	xor    eax,eax
c0001e59:	c3                   	ret    

c0001e5a <dbc_2nd>:
c0001e5a:	31 c0                	xor    eax,eax
c0001e5c:	c3                   	ret    

c0001e5d <tchar2uni>:
c0001e5d:	57                   	push   edi
c0001e5e:	56                   	push   esi
c0001e5f:	53                   	push   ebx
c0001e60:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001e62:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001e64:	8d 73 01             	lea    esi,[ebx+0x1]
c0001e67:	f6 c1 80             	test   cl,0x80
c0001e6a:	75 0a                	jne    c0001e76 <tchar2uni+0x19>
c0001e6c:	0f b6 d1             	movzx  edx,cl
c0001e6f:	89 f3                	mov    ebx,esi
c0001e71:	e9 b2 00 00 00       	jmp    c0001f28 <tchar2uni+0xcb>
c0001e76:	89 ca                	mov    edx,ecx
c0001e78:	81 e2 e0 00 00 00    	and    edx,0xe0
c0001e7e:	81 fa c0 00 00 00    	cmp    edx,0xc0
c0001e84:	89 ca                	mov    edx,ecx
c0001e86:	75 0a                	jne    c0001e92 <tchar2uni+0x35>
c0001e88:	83 e2 1f             	and    edx,0x1f
c0001e8b:	b9 01 00 00 00       	mov    ecx,0x1
c0001e90:	eb 37                	jmp    c0001ec9 <tchar2uni+0x6c>
c0001e92:	81 e2 f0 00 00 00    	and    edx,0xf0
c0001e98:	81 fa e0 00 00 00    	cmp    edx,0xe0
c0001e9e:	75 0c                	jne    c0001eac <tchar2uni+0x4f>
c0001ea0:	89 ca                	mov    edx,ecx
c0001ea2:	b9 02 00 00 00       	mov    ecx,0x2
c0001ea7:	83 e2 0f             	and    edx,0xf
c0001eaa:	eb 1d                	jmp    c0001ec9 <tchar2uni+0x6c>
c0001eac:	89 cf                	mov    edi,ecx
c0001eae:	83 ca ff             	or     edx,0xffffffff
c0001eb1:	81 e7 f8 00 00 00    	and    edi,0xf8
c0001eb7:	81 ff f0 00 00 00    	cmp    edi,0xf0
c0001ebd:	75 70                	jne    c0001f2f <tchar2uni+0xd2>
c0001ebf:	89 ca                	mov    edx,ecx
c0001ec1:	b9 03 00 00 00       	mov    ecx,0x3
c0001ec6:	83 e2 07             	and    edx,0x7
c0001ec9:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001ecd:	46                   	inc    esi
c0001ece:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001ed1:	89 cf                	mov    edi,ecx
c0001ed3:	81 e7 c0 00 00 00    	and    edi,0xc0
c0001ed9:	83 c7 80             	add    edi,0xffffff80
c0001edc:	75 4e                	jne    c0001f2c <tchar2uni+0xcf>
c0001ede:	c1 e2 06             	shl    edx,0x6
c0001ee1:	83 e1 3f             	and    ecx,0x3f
c0001ee4:	09 ca                	or     edx,ecx
c0001ee6:	39 de                	cmp    esi,ebx
c0001ee8:	75 e3                	jne    c0001ecd <tchar2uni+0x70>
c0001eea:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001eed:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001ef3:	77 37                	ja     c0001f2c <tchar2uni+0xcf>
c0001ef5:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001efb:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001f01:	76 29                	jbe    c0001f2c <tchar2uni+0xcf>
c0001f03:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001f09:	76 1d                	jbe    c0001f28 <tchar2uni+0xcb>
c0001f0b:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001f11:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001f17:	c1 e1 06             	shl    ecx,0x6
c0001f1a:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001f20:	09 ca                	or     edx,ecx
c0001f22:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001f28:	89 18                	mov    DWORD PTR [eax],ebx
c0001f2a:	eb 03                	jmp    c0001f2f <tchar2uni+0xd2>
c0001f2c:	83 ca ff             	or     edx,0xffffffff
c0001f2f:	5b                   	pop    ebx
c0001f30:	89 d0                	mov    eax,edx
c0001f32:	5e                   	pop    esi
c0001f33:	5f                   	pop    edi
c0001f34:	c3                   	ret    

c0001f35 <put_utf>:
c0001f35:	53                   	push   ebx
c0001f36:	83 f8 7f             	cmp    eax,0x7f
c0001f39:	89 c3                	mov    ebx,eax
c0001f3b:	b0 00                	mov    al,0x0
c0001f3d:	77 11                	ja     c0001f50 <put_utf+0x1b>
c0001f3f:	85 c9                	test   ecx,ecx
c0001f41:	0f 84 e5 00 00 00    	je     c000202c <put_utf+0xf7>
c0001f47:	88 1a                	mov    BYTE PTR [edx],bl
c0001f49:	b0 01                	mov    al,0x1
c0001f4b:	e9 dc 00 00 00       	jmp    c000202c <put_utf+0xf7>
c0001f50:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001f56:	77 23                	ja     c0001f7b <put_utf+0x46>
c0001f58:	83 f9 01             	cmp    ecx,0x1
c0001f5b:	0f 86 cb 00 00 00    	jbe    c000202c <put_utf+0xf7>
c0001f61:	89 d8                	mov    eax,ebx
c0001f63:	83 e3 3f             	and    ebx,0x3f
c0001f66:	c1 e8 06             	shr    eax,0x6
c0001f69:	83 cb 80             	or     ebx,0xffffff80
c0001f6c:	83 c8 c0             	or     eax,0xffffffc0
c0001f6f:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001f72:	88 02                	mov    BYTE PTR [edx],al
c0001f74:	b0 02                	mov    al,0x2
c0001f76:	e9 b1 00 00 00       	jmp    c000202c <put_utf+0xf7>
c0001f7b:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001f81:	77 40                	ja     c0001fc3 <put_utf+0x8e>
c0001f83:	83 f9 02             	cmp    ecx,0x2
c0001f86:	0f 86 a0 00 00 00    	jbe    c000202c <put_utf+0xf7>
c0001f8c:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001f92:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001f98:	0f 86 8e 00 00 00    	jbe    c000202c <put_utf+0xf7>
c0001f9e:	89 d8                	mov    eax,ebx
c0001fa0:	c1 e8 0c             	shr    eax,0xc
c0001fa3:	83 c8 e0             	or     eax,0xffffffe0
c0001fa6:	88 02                	mov    BYTE PTR [edx],al
c0001fa8:	89 d8                	mov    eax,ebx
c0001faa:	83 e3 3f             	and    ebx,0x3f
c0001fad:	c1 e8 06             	shr    eax,0x6
c0001fb0:	83 cb 80             	or     ebx,0xffffff80
c0001fb3:	83 e0 3f             	and    eax,0x3f
c0001fb6:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001fb9:	83 c8 80             	or     eax,0xffffff80
c0001fbc:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001fbf:	b0 03                	mov    al,0x3
c0001fc1:	eb 69                	jmp    c000202c <put_utf+0xf7>
c0001fc3:	83 f9 03             	cmp    ecx,0x3
c0001fc6:	76 64                	jbe    c000202c <put_utf+0xf7>
c0001fc8:	89 d9                	mov    ecx,ebx
c0001fca:	0f b7 c3             	movzx  eax,bx
c0001fcd:	66 31 c9             	xor    cx,cx
c0001fd0:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001fd6:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001fdc:	c1 e9 06             	shr    ecx,0x6
c0001fdf:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001fe5:	77 43                	ja     c000202a <put_utf+0xf5>
c0001fe7:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001fed:	77 3b                	ja     c000202a <put_utf+0xf5>
c0001fef:	09 cb                	or     ebx,ecx
c0001ff1:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001ff7:	89 d8                	mov    eax,ebx
c0001ff9:	c1 e8 12             	shr    eax,0x12
c0001ffc:	83 c8 f0             	or     eax,0xfffffff0
c0001fff:	88 02                	mov    BYTE PTR [edx],al
c0002001:	89 d8                	mov    eax,ebx
c0002003:	c1 e8 0c             	shr    eax,0xc
c0002006:	83 e0 3f             	and    eax,0x3f
c0002009:	83 c8 80             	or     eax,0xffffff80
c000200c:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c000200f:	89 d8                	mov    eax,ebx
c0002011:	83 e3 3f             	and    ebx,0x3f
c0002014:	c1 e8 06             	shr    eax,0x6
c0002017:	83 cb 80             	or     ebx,0xffffff80
c000201a:	83 e0 3f             	and    eax,0x3f
c000201d:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0002020:	83 c8 80             	or     eax,0xffffff80
c0002023:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0002026:	b0 04                	mov    al,0x4
c0002028:	eb 02                	jmp    c000202c <put_utf+0xf7>
c000202a:	31 c0                	xor    eax,eax
c000202c:	5b                   	pop    ebx
c000202d:	c3                   	ret    

c000202e <clst2sect>:
c000202e:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002031:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0002034:	83 ea 02             	sub    edx,0x2
c0002037:	39 ca                	cmp    edx,ecx
c0002039:	76 0d                	jbe    c0002048 <clst2sect+0x1a>
c000203b:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c000203f:	0f af d1             	imul   edx,ecx
c0002042:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c0002045:	89 d0                	mov    eax,edx
c0002047:	c3                   	ret    
c0002048:	31 c0                	xor    eax,eax
c000204a:	c3                   	ret    

c000204b <pick_lfn>:
c000204b:	55                   	push   ebp
c000204c:	57                   	push   edi
c000204d:	89 c7                	mov    edi,eax
c000204f:	56                   	push   esi
c0002050:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002053:	53                   	push   ebx
c0002054:	89 d3                	mov    ebx,edx
c0002056:	e8 7c fd ff ff       	call   c0001dd7 <ld_word>
c000205b:	66 85 c0             	test   ax,ax
c000205e:	74 04                	je     c0002064 <pick_lfn+0x19>
c0002060:	31 c0                	xor    eax,eax
c0002062:	eb 62                	jmp    c00020c6 <pick_lfn+0x7b>
c0002064:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0002067:	bd 01 00 00 00       	mov    ebp,0x1
c000206c:	83 e1 bf             	and    ecx,0xffffffbf
c000206f:	31 f6                	xor    esi,esi
c0002071:	49                   	dec    ecx
c0002072:	6b c9 0d             	imul   ecx,ecx,0xd
c0002075:	0f b6 86 c0 06 02 c0 	movzx  eax,BYTE PTR [esi-0x3ffdf940]
c000207c:	01 d8                	add    eax,ebx
c000207e:	e8 54 fd ff ff       	call   c0001dd7 <ld_word>
c0002083:	66 85 ed             	test   bp,bp
c0002086:	74 11                	je     c0002099 <pick_lfn+0x4e>
c0002088:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c000208e:	77 d0                	ja     c0002060 <pick_lfn+0x15>
c0002090:	66 89 04 4f          	mov    WORD PTR [edi+ecx*2],ax
c0002094:	89 c5                	mov    ebp,eax
c0002096:	41                   	inc    ecx
c0002097:	eb 0a                	jmp    c00020a3 <pick_lfn+0x58>
c0002099:	0f b7 c0             	movzx  eax,ax
c000209c:	3d ff ff 00 00       	cmp    eax,0xffff
c00020a1:	75 bd                	jne    c0002060 <pick_lfn+0x15>
c00020a3:	46                   	inc    esi
c00020a4:	83 fe 0d             	cmp    esi,0xd
c00020a7:	75 cc                	jne    c0002075 <pick_lfn+0x2a>
c00020a9:	f6 03 40             	test   BYTE PTR [ebx],0x40
c00020ac:	74 13                	je     c00020c1 <pick_lfn+0x76>
c00020ae:	66 85 ed             	test   bp,bp
c00020b1:	74 0e                	je     c00020c1 <pick_lfn+0x76>
c00020b3:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00020b9:	77 a5                	ja     c0002060 <pick_lfn+0x15>
c00020bb:	66 c7 04 4f 00 00    	mov    WORD PTR [edi+ecx*2],0x0
c00020c1:	b8 01 00 00 00       	mov    eax,0x1
c00020c6:	5b                   	pop    ebx
c00020c7:	5e                   	pop    esi
c00020c8:	5f                   	pop    edi
c00020c9:	5d                   	pop    ebp
c00020ca:	c3                   	ret    

c00020cb <put_lfn>:
c00020cb:	55                   	push   ebp
c00020cc:	57                   	push   edi
c00020cd:	89 d7                	mov    edi,edx
c00020cf:	56                   	push   esi
c00020d0:	31 f6                	xor    esi,esi
c00020d2:	53                   	push   ebx
c00020d3:	83 ec 0c             	sub    esp,0xc
c00020d6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00020da:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00020de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00020e2:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c00020e8:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c00020eb:	8d 42 1a             	lea    eax,[edx+0x1a]
c00020ee:	31 d2                	xor    edx,edx
c00020f0:	e8 07 fd ff ff       	call   c0001dfc <st_word>
c00020f5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00020fc:	0f b6 d9             	movzx  ebx,cl
c00020ff:	4b                   	dec    ebx
c0002100:	6b db 0d             	imul   ebx,ebx,0xd
c0002103:	0f b7 c6             	movzx  eax,si
c0002106:	3d ff ff 00 00       	cmp    eax,0xffff
c000210b:	74 09                	je     c0002116 <put_lfn+0x4b>
c000210d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002111:	0f b7 34 58          	movzx  esi,WORD PTR [eax+ebx*2]
c0002115:	43                   	inc    ebx
c0002116:	0f b7 ee             	movzx  ebp,si
c0002119:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000211c:	89 ea                	mov    edx,ebp
c000211e:	0f b6 80 c0 06 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdf940]
c0002125:	01 f8                	add    eax,edi
c0002127:	e8 d0 fc ff ff       	call   c0001dfc <st_word>
c000212c:	85 ed                	test   ebp,ebp
c000212e:	75 05                	jne    c0002135 <put_lfn+0x6a>
c0002130:	be ff ff 00 00       	mov    esi,0xffff
c0002135:	ff 04 24             	inc    DWORD PTR [esp]
c0002138:	83 3c 24 0d          	cmp    DWORD PTR [esp],0xd
c000213c:	75 c5                	jne    c0002103 <put_lfn+0x38>
c000213e:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0002144:	74 0b                	je     c0002151 <put_lfn+0x86>
c0002146:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000214a:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c000214f:	75 07                	jne    c0002158 <put_lfn+0x8d>
c0002151:	83 c9 40             	or     ecx,0x40
c0002154:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002158:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000215c:	88 07                	mov    BYTE PTR [edi],al
c000215e:	83 c4 0c             	add    esp,0xc
c0002161:	5b                   	pop    ebx
c0002162:	5e                   	pop    esi
c0002163:	5f                   	pop    edi
c0002164:	5d                   	pop    ebp
c0002165:	c3                   	ret    

c0002166 <gen_numname>:
c0002166:	57                   	push   edi
c0002167:	89 cf                	mov    edi,ecx
c0002169:	56                   	push   esi
c000216a:	b9 0b 00 00 00       	mov    ecx,0xb
c000216f:	53                   	push   ebx
c0002170:	89 c6                	mov    esi,eax
c0002172:	83 ec 10             	sub    esp,0x10
c0002175:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002179:	e8 85 fc ff ff       	call   c0001e03 <mem_cpy>
c000217e:	83 fb 05             	cmp    ebx,0x5
c0002181:	76 30                	jbe    c00021b3 <gen_numname+0x4d>
c0002183:	66 8b 07             	mov    ax,WORD PTR [edi]
c0002186:	66 85 c0             	test   ax,ax
c0002189:	74 28                	je     c00021b3 <gen_numname+0x4d>
c000218b:	83 c7 02             	add    edi,0x2
c000218e:	ba 10 00 00 00       	mov    edx,0x10
c0002193:	01 db                	add    ebx,ebx
c0002195:	89 c1                	mov    ecx,eax
c0002197:	c1 e0 10             	shl    eax,0x10
c000219a:	83 e1 01             	and    ecx,0x1
c000219d:	c1 e8 11             	shr    eax,0x11
c00021a0:	01 cb                	add    ebx,ecx
c00021a2:	0f ba e3 10          	bt     ebx,0x10
c00021a6:	73 06                	jae    c00021ae <gen_numname+0x48>
c00021a8:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00021ae:	4a                   	dec    edx
c00021af:	75 e2                	jne    c0002193 <gen_numname+0x2d>
c00021b1:	eb d0                	jmp    c0002183 <gen_numname+0x1d>
c00021b3:	b8 07 00 00 00       	mov    eax,0x7
c00021b8:	89 d9                	mov    ecx,ebx
c00021ba:	83 e1 0f             	and    ecx,0xf
c00021bd:	8d 79 30             	lea    edi,[ecx+0x30]
c00021c0:	89 fa                	mov    edx,edi
c00021c2:	83 ff 39             	cmp    edi,0x39
c00021c5:	76 03                	jbe    c00021ca <gen_numname+0x64>
c00021c7:	8d 51 37             	lea    edx,[ecx+0x37]
c00021ca:	8d 48 ff             	lea    ecx,[eax-0x1]
c00021cd:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00021d1:	89 da                	mov    edx,ebx
c00021d3:	c1 ea 04             	shr    edx,0x4
c00021d6:	83 fb 0f             	cmp    ebx,0xf
c00021d9:	76 06                	jbe    c00021e1 <gen_numname+0x7b>
c00021db:	89 c8                	mov    eax,ecx
c00021dd:	89 d3                	mov    ebx,edx
c00021df:	eb d7                	jmp    c00021b8 <gen_numname+0x52>
c00021e1:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00021e6:	31 d2                	xor    edx,edx
c00021e8:	8d 58 fe             	lea    ebx,[eax-0x2]
c00021eb:	8d 04 16             	lea    eax,[esi+edx*1]
c00021ee:	39 ca                	cmp    edx,ecx
c00021f0:	73 19                	jae    c000220b <gen_numname+0xa5>
c00021f2:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00021f5:	83 f8 20             	cmp    eax,0x20
c00021f8:	74 11                	je     c000220b <gen_numname+0xa5>
c00021fa:	e8 58 fc ff ff       	call   c0001e57 <dbc_1st>
c00021ff:	85 c0                	test   eax,eax
c0002201:	74 05                	je     c0002208 <gen_numname+0xa2>
c0002203:	39 d3                	cmp    ebx,edx
c0002205:	74 04                	je     c000220b <gen_numname+0xa5>
c0002207:	42                   	inc    edx
c0002208:	42                   	inc    edx
c0002209:	eb e0                	jmp    c00021eb <gen_numname+0x85>
c000220b:	b0 20                	mov    al,0x20
c000220d:	83 f9 07             	cmp    ecx,0x7
c0002210:	77 05                	ja     c0002217 <gen_numname+0xb1>
c0002212:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0002216:	41                   	inc    ecx
c0002217:	42                   	inc    edx
c0002218:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c000221c:	83 fa 07             	cmp    edx,0x7
c000221f:	76 ea                	jbe    c000220b <gen_numname+0xa5>
c0002221:	83 c4 10             	add    esp,0x10
c0002224:	5b                   	pop    ebx
c0002225:	5e                   	pop    esi
c0002226:	5f                   	pop    edi
c0002227:	c3                   	ret    

c0002228 <sum_sfn>:
c0002228:	53                   	push   ebx
c0002229:	31 c9                	xor    ecx,ecx
c000222b:	31 db                	xor    ebx,ebx
c000222d:	0f b6 d1             	movzx  edx,cl
c0002230:	c1 e1 07             	shl    ecx,0x7
c0002233:	d1 ea                	shr    edx,1
c0002235:	09 ca                	or     edx,ecx
c0002237:	8a 0c 18             	mov    cl,BYTE PTR [eax+ebx*1]
c000223a:	43                   	inc    ebx
c000223b:	01 ca                	add    edx,ecx
c000223d:	83 fb 0b             	cmp    ebx,0xb
c0002240:	88 d1                	mov    cl,dl
c0002242:	75 e9                	jne    c000222d <sum_sfn+0x5>
c0002244:	88 d0                	mov    al,dl
c0002246:	5b                   	pop    ebx
c0002247:	c3                   	ret    

c0002248 <get_ldnumber>:
c0002248:	8b 10                	mov    edx,DWORD PTR [eax]
c000224a:	85 d2                	test   edx,edx
c000224c:	74 14                	je     c0002262 <get_ldnumber+0x1a>
c000224e:	56                   	push   esi
c000224f:	53                   	push   ebx
c0002250:	89 d3                	mov    ebx,edx
c0002252:	43                   	inc    ebx
c0002253:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002256:	80 f9 1f             	cmp    cl,0x1f
c0002259:	76 0d                	jbe    c0002268 <get_ldnumber+0x20>
c000225b:	80 f9 3a             	cmp    cl,0x3a
c000225e:	75 f2                	jne    c0002252 <get_ldnumber+0xa>
c0002260:	eb 0a                	jmp    c000226c <get_ldnumber+0x24>
c0002262:	83 c9 ff             	or     ecx,0xffffffff
c0002265:	89 c8                	mov    eax,ecx
c0002267:	c3                   	ret    
c0002268:	31 c9                	xor    ecx,ecx
c000226a:	eb 24                	jmp    c0002290 <get_ldnumber+0x48>
c000226c:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c000226f:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002272:	80 f9 09             	cmp    cl,0x9
c0002275:	77 16                	ja     c000228d <get_ldnumber+0x45>
c0002277:	83 c2 02             	add    edx,0x2
c000227a:	83 c9 ff             	or     ecx,0xffffffff
c000227d:	39 d3                	cmp    ebx,edx
c000227f:	75 0f                	jne    c0002290 <get_ldnumber+0x48>
c0002281:	89 f2                	mov    edx,esi
c0002283:	89 18                	mov    DWORD PTR [eax],ebx
c0002285:	0f be ca             	movsx  ecx,dl
c0002288:	83 e9 30             	sub    ecx,0x30
c000228b:	eb 03                	jmp    c0002290 <get_ldnumber+0x48>
c000228d:	83 c9 ff             	or     ecx,0xffffffff
c0002290:	89 c8                	mov    eax,ecx
c0002292:	5b                   	pop    ebx
c0002293:	5e                   	pop    esi
c0002294:	c3                   	ret    

c0002295 <validate>:
c0002295:	56                   	push   esi
c0002296:	53                   	push   ebx
c0002297:	89 d6                	mov    esi,edx
c0002299:	51                   	push   ecx
c000229a:	85 c0                	test   eax,eax
c000229c:	75 09                	jne    c00022a7 <validate+0x12>
c000229e:	b8 09 00 00 00       	mov    eax,0x9
c00022a3:	31 c9                	xor    ecx,ecx
c00022a5:	eb 2e                	jmp    c00022d5 <validate+0x40>
c00022a7:	89 c3                	mov    ebx,eax
c00022a9:	8b 00                	mov    eax,DWORD PTR [eax]
c00022ab:	85 c0                	test   eax,eax
c00022ad:	74 ef                	je     c000229e <validate+0x9>
c00022af:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00022b2:	74 ea                	je     c000229e <validate+0x9>
c00022b4:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00022b7:	66 39 50 06          	cmp    WORD PTR [eax+0x6],dx
c00022bb:	75 e1                	jne    c000229e <validate+0x9>
c00022bd:	83 ec 0c             	sub    esp,0xc
c00022c0:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00022c4:	50                   	push   eax
c00022c5:	e8 bc fa ff ff       	call   c0001d86 <disk_status>
c00022ca:	83 c4 10             	add    esp,0x10
c00022cd:	a8 01                	test   al,0x1
c00022cf:	75 cd                	jne    c000229e <validate+0x9>
c00022d1:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00022d3:	31 c0                	xor    eax,eax
c00022d5:	89 0e                	mov    DWORD PTR [esi],ecx
c00022d7:	5a                   	pop    edx
c00022d8:	5b                   	pop    ebx
c00022d9:	5e                   	pop    esi
c00022da:	c3                   	ret    

c00022db <sync_window>:
c00022db:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00022df:	74 58                	je     c0002339 <sync_window+0x5e>
c00022e1:	56                   	push   esi
c00022e2:	53                   	push   ebx
c00022e3:	8d 70 34             	lea    esi,[eax+0x34]
c00022e6:	51                   	push   ecx
c00022e7:	89 c3                	mov    ebx,eax
c00022e9:	6a 01                	push   0x1
c00022eb:	ff 70 30             	push   DWORD PTR [eax+0x30]
c00022ee:	56                   	push   esi
c00022ef:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00022f3:	50                   	push   eax
c00022f4:	e8 a9 fa ff ff       	call   c0001da2 <disk_write>
c00022f9:	83 c4 10             	add    esp,0x10
c00022fc:	ba 01 00 00 00       	mov    edx,0x1
c0002301:	85 c0                	test   eax,eax
c0002303:	75 2e                	jne    c0002333 <sync_window+0x58>
c0002305:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0002308:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000230b:	89 c1                	mov    ecx,eax
c000230d:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0002311:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c0002314:	39 d1                	cmp    ecx,edx
c0002316:	73 19                	jae    c0002331 <sync_window+0x56>
c0002318:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c000231c:	75 13                	jne    c0002331 <sync_window+0x56>
c000231e:	6a 01                	push   0x1
c0002320:	01 d0                	add    eax,edx
c0002322:	50                   	push   eax
c0002323:	56                   	push   esi
c0002324:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002328:	50                   	push   eax
c0002329:	e8 74 fa ff ff       	call   c0001da2 <disk_write>
c000232e:	83 c4 10             	add    esp,0x10
c0002331:	31 d2                	xor    edx,edx
c0002333:	89 d0                	mov    eax,edx
c0002335:	5a                   	pop    edx
c0002336:	5b                   	pop    ebx
c0002337:	5e                   	pop    esi
c0002338:	c3                   	ret    
c0002339:	31 d2                	xor    edx,edx
c000233b:	89 d0                	mov    eax,edx
c000233d:	c3                   	ret    

c000233e <move_window>:
c000233e:	57                   	push   edi
c000233f:	56                   	push   esi
c0002340:	31 f6                	xor    esi,esi
c0002342:	53                   	push   ebx
c0002343:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c0002346:	74 32                	je     c000237a <move_window+0x3c>
c0002348:	89 c3                	mov    ebx,eax
c000234a:	89 d7                	mov    edi,edx
c000234c:	e8 8a ff ff ff       	call   c00022db <sync_window>
c0002351:	89 c6                	mov    esi,eax
c0002353:	85 c0                	test   eax,eax
c0002355:	75 23                	jne    c000237a <move_window+0x3c>
c0002357:	6a 01                	push   0x1
c0002359:	8d 43 34             	lea    eax,[ebx+0x34]
c000235c:	57                   	push   edi
c000235d:	50                   	push   eax
c000235e:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002362:	50                   	push   eax
c0002363:	e8 24 fa ff ff       	call   c0001d8c <disk_read>
c0002368:	83 c4 10             	add    esp,0x10
c000236b:	85 c0                	test   eax,eax
c000236d:	74 08                	je     c0002377 <move_window+0x39>
c000236f:	be 01 00 00 00       	mov    esi,0x1
c0002374:	83 cf ff             	or     edi,0xffffffff
c0002377:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c000237a:	89 f0                	mov    eax,esi
c000237c:	5b                   	pop    ebx
c000237d:	5e                   	pop    esi
c000237e:	5f                   	pop    edi
c000237f:	c3                   	ret    

c0002380 <check_fs>:
c0002380:	53                   	push   ebx
c0002381:	89 c3                	mov    ebx,eax
c0002383:	83 ec 08             	sub    esp,0x8
c0002386:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c000238a:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c0002391:	e8 a8 ff ff ff       	call   c000233e <move_window>
c0002396:	ba 04 00 00 00       	mov    edx,0x4
c000239b:	85 c0                	test   eax,eax
c000239d:	75 68                	jne    c0002407 <check_fs+0x87>
c000239f:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c00023a5:	e8 2d fa ff ff       	call   c0001dd7 <ld_word>
c00023aa:	ba 03 00 00 00       	mov    edx,0x3
c00023af:	66 3d 55 aa          	cmp    ax,0xaa55
c00023b3:	75 52                	jne    c0002407 <check_fs+0x87>
c00023b5:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00023b8:	8d 50 18             	lea    edx,[eax+0x18]
c00023bb:	80 fa 01             	cmp    dl,0x1
c00023be:	76 09                	jbe    c00023c9 <check_fs+0x49>
c00023c0:	ba 02 00 00 00       	mov    edx,0x2
c00023c5:	3c eb                	cmp    al,0xeb
c00023c7:	75 3e                	jne    c0002407 <check_fs+0x87>
c00023c9:	ba a4 2e 02 c0       	mov    edx,0xc0022ea4
c00023ce:	8d 43 6a             	lea    eax,[ebx+0x6a]
c00023d1:	b9 03 00 00 00       	mov    ecx,0x3
c00023d6:	e8 48 fa ff ff       	call   c0001e23 <mem_cmp>
c00023db:	31 d2                	xor    edx,edx
c00023dd:	85 c0                	test   eax,eax
c00023df:	74 26                	je     c0002407 <check_fs+0x87>
c00023e1:	ba 7c 05 02 c0       	mov    edx,0xc002057c
c00023e6:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c00023ec:	b9 05 00 00 00       	mov    ecx,0x5
c00023f1:	e8 2d fa ff ff       	call   c0001e23 <mem_cmp>
c00023f6:	31 d2                	xor    edx,edx
c00023f8:	85 c0                	test   eax,eax
c00023fa:	74 0b                	je     c0002407 <check_fs+0x87>
c00023fc:	31 d2                	xor    edx,edx
c00023fe:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c0002402:	0f 95 c2             	setne  dl
c0002405:	01 d2                	add    edx,edx
c0002407:	89 d0                	mov    eax,edx
c0002409:	83 c4 08             	add    esp,0x8
c000240c:	5b                   	pop    ebx
c000240d:	c3                   	ret    

c000240e <find_volume>:
c000240e:	55                   	push   ebp
c000240f:	57                   	push   edi
c0002410:	56                   	push   esi
c0002411:	89 c6                	mov    esi,eax
c0002413:	53                   	push   ebx
c0002414:	89 d3                	mov    ebx,edx
c0002416:	83 ec 2c             	sub    esp,0x2c
c0002419:	31 d2                	xor    edx,edx
c000241b:	e8 60 ff ff ff       	call   c0002380 <check_fs>
c0002420:	83 f8 02             	cmp    eax,0x2
c0002423:	74 06                	je     c000242b <find_volume+0x1d>
c0002425:	77 62                	ja     c0002489 <find_volume+0x7b>
c0002427:	85 db                	test   ebx,ebx
c0002429:	74 5e                	je     c0002489 <find_volume+0x7b>
c000242b:	8d 4c 24 10          	lea    ecx,[esp+0x10]
c000242f:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c0002435:	8d ae fa 01 00 00    	lea    ebp,[esi+0x1fa]
c000243b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000243f:	89 cf                	mov    edi,ecx
c0002441:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002445:	89 e8                	mov    eax,ebp
c0002447:	83 c5 10             	add    ebp,0x10
c000244a:	e8 95 f9 ff ff       	call   c0001de4 <ld_dword>
c000244f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002453:	89 01                	mov    DWORD PTR [ecx],eax
c0002455:	83 c1 04             	add    ecx,0x4
c0002458:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c000245c:	75 e3                	jne    c0002441 <find_volume+0x33>
c000245e:	31 ed                	xor    ebp,ebp
c0002460:	85 db                	test   ebx,ebx
c0002462:	74 03                	je     c0002467 <find_volume+0x59>
c0002464:	8d 6b ff             	lea    ebp,[ebx-0x1]
c0002467:	8b 14 af             	mov    edx,DWORD PTR [edi+ebp*4]
c000246a:	b8 03 00 00 00       	mov    eax,0x3
c000246f:	85 d2                	test   edx,edx
c0002471:	74 0c                	je     c000247f <find_volume+0x71>
c0002473:	89 f0                	mov    eax,esi
c0002475:	e8 06 ff ff ff       	call   c0002380 <check_fs>
c000247a:	83 f8 01             	cmp    eax,0x1
c000247d:	76 0a                	jbe    c0002489 <find_volume+0x7b>
c000247f:	85 db                	test   ebx,ebx
c0002481:	75 06                	jne    c0002489 <find_volume+0x7b>
c0002483:	45                   	inc    ebp
c0002484:	83 fd 03             	cmp    ebp,0x3
c0002487:	76 de                	jbe    c0002467 <find_volume+0x59>
c0002489:	83 c4 2c             	add    esp,0x2c
c000248c:	5b                   	pop    ebx
c000248d:	5e                   	pop    esi
c000248e:	5f                   	pop    edi
c000248f:	5d                   	pop    ebp
c0002490:	c3                   	ret    

c0002491 <mount_volume>:
c0002491:	55                   	push   ebp
c0002492:	89 d5                	mov    ebp,edx
c0002494:	57                   	push   edi
c0002495:	89 cf                	mov    edi,ecx
c0002497:	56                   	push   esi
c0002498:	53                   	push   ebx
c0002499:	bb 0b 00 00 00       	mov    ebx,0xb
c000249e:	83 ec 1c             	sub    esp,0x1c
c00024a1:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00024a7:	e8 9c fd ff ff       	call   c0002248 <get_ldnumber>
c00024ac:	85 c0                	test   eax,eax
c00024ae:	0f 88 c4 02 00 00    	js     c0002778 <mount_volume+0x2e7>
c00024b4:	8b 34 85 a0 64 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd9b60]
c00024bb:	89 c2                	mov    edx,eax
c00024bd:	bb 0c 00 00 00       	mov    ebx,0xc
c00024c2:	85 f6                	test   esi,esi
c00024c4:	0f 84 ae 02 00 00    	je     c0002778 <mount_volume+0x2e7>
c00024ca:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c00024cd:	83 e7 fe             	and    edi,0xfffffffe
c00024d0:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00024d3:	74 3a                	je     c000250f <mount_volume+0x7e>
c00024d5:	89 04 24             	mov    DWORD PTR [esp],eax
c00024d8:	83 ec 0c             	sub    esp,0xc
c00024db:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00024df:	50                   	push   eax
c00024e0:	e8 a1 f8 ff ff       	call   c0001d86 <disk_status>
c00024e5:	83 c4 10             	add    esp,0x10
c00024e8:	a8 01                	test   al,0x1
c00024ea:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00024ed:	75 20                	jne    c000250f <mount_volume+0x7e>
c00024ef:	31 db                	xor    ebx,ebx
c00024f1:	81 e7 fe 00 00 00    	and    edi,0xfe
c00024f7:	0f 84 7b 02 00 00    	je     c0002778 <mount_volume+0x2e7>
c00024fd:	a8 04                	test   al,0x4
c00024ff:	0f 84 73 02 00 00    	je     c0002778 <mount_volume+0x2e7>
c0002505:	bb 0a 00 00 00       	mov    ebx,0xa
c000250a:	e9 69 02 00 00       	jmp    c0002778 <mount_volume+0x2e7>
c000250f:	83 ec 0c             	sub    esp,0xc
c0002512:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0002515:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c0002518:	0f b6 c2             	movzx  eax,dl
c000251b:	bb 03 00 00 00       	mov    ebx,0x3
c0002520:	50                   	push   eax
c0002521:	e8 63 f8 ff ff       	call   c0001d89 <disk_initialize>
c0002526:	83 c4 10             	add    esp,0x10
c0002529:	a8 01                	test   al,0x1
c000252b:	0f 85 47 02 00 00    	jne    c0002778 <mount_volume+0x2e7>
c0002531:	81 e7 fe 00 00 00    	and    edi,0xfe
c0002537:	74 04                	je     c000253d <mount_volume+0xac>
c0002539:	a8 04                	test   al,0x4
c000253b:	75 c8                	jne    c0002505 <mount_volume+0x74>
c000253d:	31 d2                	xor    edx,edx
c000253f:	89 f0                	mov    eax,esi
c0002541:	bb 01 00 00 00       	mov    ebx,0x1
c0002546:	e8 c3 fe ff ff       	call   c000240e <find_volume>
c000254b:	83 f8 04             	cmp    eax,0x4
c000254e:	0f 84 24 02 00 00    	je     c0002778 <mount_volume+0x2e7>
c0002554:	83 f8 01             	cmp    eax,0x1
c0002557:	76 0a                	jbe    c0002563 <mount_volume+0xd2>
c0002559:	bb 0d 00 00 00       	mov    ebx,0xd
c000255e:	e9 15 02 00 00       	jmp    c0002778 <mount_volume+0x2e7>
c0002563:	8d 46 3f             	lea    eax,[esi+0x3f]
c0002566:	e8 6c f8 ff ff       	call   c0001dd7 <ld_word>
c000256b:	66 3d 00 02          	cmp    ax,0x200
c000256f:	75 e8                	jne    c0002559 <mount_volume+0xc8>
c0002571:	8d 46 4a             	lea    eax,[esi+0x4a]
c0002574:	e8 5e f8 ff ff       	call   c0001dd7 <ld_word>
c0002579:	0f b7 c0             	movzx  eax,ax
c000257c:	89 04 24             	mov    DWORD PTR [esp],eax
c000257f:	85 c0                	test   eax,eax
c0002581:	75 0b                	jne    c000258e <mount_volume+0xfd>
c0002583:	8d 46 58             	lea    eax,[esi+0x58]
c0002586:	e8 59 f8 ff ff       	call   c0001de4 <ld_dword>
c000258b:	89 04 24             	mov    DWORD PTR [esp],eax
c000258e:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c0002591:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002595:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002598:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c000259b:	8a 46 44             	mov    al,BYTE PTR [esi+0x44]
c000259e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00025a2:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00025a5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00025a9:	48                   	dec    eax
c00025aa:	3c 01                	cmp    al,0x1
c00025ac:	77 ab                	ja     c0002559 <mount_volume+0xc8>
c00025ae:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c00025b2:	89 c3                	mov    ebx,eax
c00025b4:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00025b8:	66 85 c0             	test   ax,ax
c00025bb:	74 9c                	je     c0002559 <mount_volume+0xc8>
c00025bd:	8d 40 ff             	lea    eax,[eax-0x1]
c00025c0:	85 d8                	test   eax,ebx
c00025c2:	75 95                	jne    c0002559 <mount_volume+0xc8>
c00025c4:	8d 46 45             	lea    eax,[esi+0x45]
c00025c7:	e8 0b f8 ff ff       	call   c0001dd7 <ld_word>
c00025cc:	89 c7                	mov    edi,eax
c00025ce:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c00025d2:	a8 0f                	test   al,0xf
c00025d4:	75 83                	jne    c0002559 <mount_volume+0xc8>
c00025d6:	8d 46 47             	lea    eax,[esi+0x47]
c00025d9:	e8 f9 f7 ff ff       	call   c0001dd7 <ld_word>
c00025de:	0f b7 e8             	movzx  ebp,ax
c00025e1:	85 ed                	test   ebp,ebp
c00025e3:	75 0a                	jne    c00025ef <mount_volume+0x15e>
c00025e5:	8d 46 54             	lea    eax,[esi+0x54]
c00025e8:	e8 f7 f7 ff ff       	call   c0001de4 <ld_dword>
c00025ed:	89 c5                	mov    ebp,eax
c00025ef:	8d 46 42             	lea    eax,[esi+0x42]
c00025f2:	e8 e0 f7 ff ff       	call   c0001dd7 <ld_word>
c00025f7:	0f b7 c8             	movzx  ecx,ax
c00025fa:	85 c9                	test   ecx,ecx
c00025fc:	0f 84 57 ff ff ff    	je     c0002559 <mount_volume+0xc8>
c0002602:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0002607:	0f af 04 24          	imul   eax,DWORD PTR [esp]
c000260b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000260f:	0f b7 c7             	movzx  eax,di
c0002612:	c1 e8 04             	shr    eax,0x4
c0002615:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0002619:	01 c8                	add    eax,ecx
c000261b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000261f:	39 c5                	cmp    ebp,eax
c0002621:	0f 82 32 ff ff ff    	jb     c0002559 <mount_volume+0xc8>
c0002627:	29 c5                	sub    ebp,eax
c0002629:	31 d2                	xor    edx,edx
c000262b:	89 e8                	mov    eax,ebp
c000262d:	f7 f3                	div    ebx
c000262f:	39 dd                	cmp    ebp,ebx
c0002631:	0f 82 22 ff ff ff    	jb     c0002559 <mount_volume+0xc8>
c0002637:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c000263c:	0f 87 17 ff ff ff    	ja     c0002559 <mount_volume+0xc8>
c0002642:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002647:	0f 86 1c 01 00 00    	jbe    c0002769 <mount_volume+0x2d8>
c000264d:	bb 03 00 00 00       	mov    ebx,0x3
c0002652:	8d 68 02             	lea    ebp,[eax+0x2]
c0002655:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002659:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000265d:	03 54 24 04          	add    edx,DWORD PTR [esp+0x4]
c0002661:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c0002664:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c0002667:	01 c8                	add    eax,ecx
c0002669:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c000266c:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c000266f:	83 fb 03             	cmp    ebx,0x3
c0002672:	75 23                	jne    c0002697 <mount_volume+0x206>
c0002674:	8d 46 5e             	lea    eax,[esi+0x5e]
c0002677:	e8 5b f7 ff ff       	call   c0001dd7 <ld_word>
c000267c:	09 c7                	or     edi,eax
c000267e:	66 85 ff             	test   di,di
c0002681:	0f 85 d2 fe ff ff    	jne    c0002559 <mount_volume+0xc8>
c0002687:	8d 46 60             	lea    eax,[esi+0x60]
c000268a:	c1 e5 02             	shl    ebp,0x2
c000268d:	e8 52 f7 ff ff       	call   c0001de4 <ld_dword>
c0002692:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c0002695:	eb 24                	jmp    c00026bb <mount_volume+0x22a>
c0002697:	66 85 ff             	test   di,di
c000269a:	0f 84 b9 fe ff ff    	je     c0002559 <mount_volume+0xc8>
c00026a0:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00026a4:	83 fb 02             	cmp    ebx,0x2
c00026a7:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00026aa:	75 04                	jne    c00026b0 <mount_volume+0x21f>
c00026ac:	01 ed                	add    ebp,ebp
c00026ae:	eb 0b                	jmp    c00026bb <mount_volume+0x22a>
c00026b0:	8d 44 6d 00          	lea    eax,[ebp+ebp*2+0x0]
c00026b4:	83 e5 01             	and    ebp,0x1
c00026b7:	d1 e8                	shr    eax,1
c00026b9:	01 c5                	add    ebp,eax
c00026bb:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c00026c1:	c1 ed 09             	shr    ebp,0x9
c00026c4:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c00026c7:	0f 87 8c fe ff ff    	ja     c0002559 <mount_volume+0xc8>
c00026cd:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c00026d4:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c00026db:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c00026df:	83 fb 03             	cmp    ebx,0x3
c00026e2:	75 6e                	jne    c0002752 <mount_volume+0x2c1>
c00026e4:	8d 46 64             	lea    eax,[esi+0x64]
c00026e7:	e8 eb f6 ff ff       	call   c0001dd7 <ld_word>
c00026ec:	66 48                	dec    ax
c00026ee:	75 62                	jne    c0002752 <mount_volume+0x2c1>
c00026f0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00026f4:	89 f0                	mov    eax,esi
c00026f6:	42                   	inc    edx
c00026f7:	e8 42 fc ff ff       	call   c000233e <move_window>
c00026fc:	85 c0                	test   eax,eax
c00026fe:	75 52                	jne    c0002752 <mount_volume+0x2c1>
c0002700:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c0002704:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c000270a:	e8 c8 f6 ff ff       	call   c0001dd7 <ld_word>
c000270f:	66 3d 55 aa          	cmp    ax,0xaa55
c0002713:	75 3d                	jne    c0002752 <mount_volume+0x2c1>
c0002715:	8d 46 34             	lea    eax,[esi+0x34]
c0002718:	e8 c7 f6 ff ff       	call   c0001de4 <ld_dword>
c000271d:	3d 52 52 61 41       	cmp    eax,0x41615252
c0002722:	75 2e                	jne    c0002752 <mount_volume+0x2c1>
c0002724:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c000272a:	e8 b5 f6 ff ff       	call   c0001de4 <ld_dword>
c000272f:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002734:	75 1c                	jne    c0002752 <mount_volume+0x2c1>
c0002736:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c000273c:	e8 a3 f6 ff ff       	call   c0001de4 <ld_dword>
c0002741:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0002744:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c000274a:	e8 95 f6 ff ff       	call   c0001de4 <ld_dword>
c000274f:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0002752:	66 a1 80 64 02 c0    	mov    ax,ds:0xc0026480
c0002758:	88 1e                	mov    BYTE PTR [esi],bl
c000275a:	40                   	inc    eax
c000275b:	31 db                	xor    ebx,ebx
c000275d:	66 a3 80 64 02 c0    	mov    ds:0xc0026480,ax
c0002763:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c0002767:	eb 0f                	jmp    c0002778 <mount_volume+0x2e7>
c0002769:	3d f6 0f 00 00       	cmp    eax,0xff6
c000276e:	19 db                	sbb    ebx,ebx
c0002770:	83 c3 02             	add    ebx,0x2
c0002773:	e9 da fe ff ff       	jmp    c0002652 <mount_volume+0x1c1>
c0002778:	83 c4 1c             	add    esp,0x1c
c000277b:	89 d8                	mov    eax,ebx
c000277d:	5b                   	pop    ebx
c000277e:	5e                   	pop    esi
c000277f:	5f                   	pop    edi
c0002780:	5d                   	pop    ebp
c0002781:	c3                   	ret    

c0002782 <put_fat>:
c0002782:	55                   	push   ebp
c0002783:	bd 02 00 00 00       	mov    ebp,0x2
c0002788:	57                   	push   edi
c0002789:	56                   	push   esi
c000278a:	53                   	push   ebx
c000278b:	83 ec 1c             	sub    esp,0x1c
c000278e:	83 fa 01             	cmp    edx,0x1
c0002791:	0f 86 38 01 00 00    	jbe    c00028cf <put_fat+0x14d>
c0002797:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c000279a:	0f 86 2f 01 00 00    	jbe    c00028cf <put_fat+0x14d>
c00027a0:	89 c6                	mov    esi,eax
c00027a2:	89 cf                	mov    edi,ecx
c00027a4:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00027a7:	89 d3                	mov    ebx,edx
c00027a9:	83 f8 02             	cmp    eax,0x2
c00027ac:	0f 84 b1 00 00 00    	je     c0002863 <put_fat+0xe1>
c00027b2:	83 f8 03             	cmp    eax,0x3
c00027b5:	0f 84 d5 00 00 00    	je     c0002890 <put_fat+0x10e>
c00027bb:	48                   	dec    eax
c00027bc:	0f 85 0d 01 00 00    	jne    c00028cf <put_fat+0x14d>
c00027c2:	89 d1                	mov    ecx,edx
c00027c4:	89 f0                	mov    eax,esi
c00027c6:	d1 e9                	shr    ecx,1
c00027c8:	01 d1                	add    ecx,edx
c00027ca:	89 ca                	mov    edx,ecx
c00027cc:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00027d0:	c1 ea 09             	shr    edx,0x9
c00027d3:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00027d6:	e8 63 fb ff ff       	call   c000233e <move_window>
c00027db:	89 c5                	mov    ebp,eax
c00027dd:	85 c0                	test   eax,eax
c00027df:	0f 85 ea 00 00 00    	jne    c00028cf <put_fat+0x14d>
c00027e5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00027e9:	8d 46 34             	lea    eax,[esi+0x34]
c00027ec:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00027f0:	8d 41 01             	lea    eax,[ecx+0x1]
c00027f3:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c00027f9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00027fd:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002801:	89 f8                	mov    eax,edi
c0002803:	83 e3 01             	and    ebx,0x1
c0002806:	74 11                	je     c0002819 <put_fat+0x97>
c0002808:	8a 11                	mov    dl,BYTE PTR [ecx]
c000280a:	89 f8                	mov    eax,edi
c000280c:	83 e2 0f             	and    edx,0xf
c000280f:	c1 e0 04             	shl    eax,0x4
c0002812:	25 f0 0f 00 00       	and    eax,0xff0
c0002817:	09 d0                	or     eax,edx
c0002819:	88 01                	mov    BYTE PTR [ecx],al
c000281b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000281f:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002823:	c1 ea 09             	shr    edx,0x9
c0002826:	89 f0                	mov    eax,esi
c0002828:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000282b:	e8 0e fb ff ff       	call   c000233e <move_window>
c0002830:	89 c5                	mov    ebp,eax
c0002832:	85 c0                	test   eax,eax
c0002834:	0f 85 95 00 00 00    	jne    c00028cf <put_fat+0x14d>
c000283a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000283e:	25 ff 01 00 00       	and    eax,0x1ff
c0002843:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002847:	85 db                	test   ebx,ebx
c0002849:	74 07                	je     c0002852 <put_fat+0xd0>
c000284b:	c1 ef 04             	shr    edi,0x4
c000284e:	89 f9                	mov    ecx,edi
c0002850:	eb 0d                	jmp    c000285f <put_fat+0xdd>
c0002852:	8a 08                	mov    cl,BYTE PTR [eax]
c0002854:	c1 ef 08             	shr    edi,0x8
c0002857:	83 e1 f0             	and    ecx,0xfffffff0
c000285a:	83 e7 0f             	and    edi,0xf
c000285d:	09 f9                	or     ecx,edi
c000285f:	88 08                	mov    BYTE PTR [eax],cl
c0002861:	eb 27                	jmp    c000288a <put_fat+0x108>
c0002863:	c1 ea 08             	shr    edx,0x8
c0002866:	89 f0                	mov    eax,esi
c0002868:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000286b:	e8 ce fa ff ff       	call   c000233e <move_window>
c0002870:	89 c5                	mov    ebp,eax
c0002872:	85 c0                	test   eax,eax
c0002874:	75 59                	jne    c00028cf <put_fat+0x14d>
c0002876:	01 db                	add    ebx,ebx
c0002878:	0f b7 d7             	movzx  edx,di
c000287b:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002881:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0002885:	e8 72 f5 ff ff       	call   c0001dfc <st_word>
c000288a:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c000288e:	eb 3f                	jmp    c00028cf <put_fat+0x14d>
c0002890:	c1 ea 07             	shr    edx,0x7
c0002893:	89 f0                	mov    eax,esi
c0002895:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002898:	e8 a1 fa ff ff       	call   c000233e <move_window>
c000289d:	89 c5                	mov    ebp,eax
c000289f:	85 c0                	test   eax,eax
c00028a1:	75 2c                	jne    c00028cf <put_fat+0x14d>
c00028a3:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c00028a9:	c1 e3 02             	shl    ebx,0x2
c00028ac:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c00028b2:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c00028b6:	89 d8                	mov    eax,ebx
c00028b8:	e8 27 f5 ff ff       	call   c0001de4 <ld_dword>
c00028bd:	25 00 00 00 f0       	and    eax,0xf0000000
c00028c2:	09 f8                	or     eax,edi
c00028c4:	89 c2                	mov    edx,eax
c00028c6:	89 d8                	mov    eax,ebx
c00028c8:	e8 33 f5 ff ff       	call   c0001e00 <st_dword>
c00028cd:	eb bb                	jmp    c000288a <put_fat+0x108>
c00028cf:	83 c4 1c             	add    esp,0x1c
c00028d2:	89 e8                	mov    eax,ebp
c00028d4:	5b                   	pop    ebx
c00028d5:	5e                   	pop    esi
c00028d6:	5f                   	pop    edi
c00028d7:	5d                   	pop    ebp
c00028d8:	c3                   	ret    

c00028d9 <dir_clear>:
c00028d9:	55                   	push   ebp
c00028da:	57                   	push   edi
c00028db:	56                   	push   esi
c00028dc:	89 c6                	mov    esi,eax
c00028de:	53                   	push   ebx
c00028df:	83 ec 1c             	sub    esp,0x1c
c00028e2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00028e6:	e8 f0 f9 ff ff       	call   c00022db <sync_window>
c00028eb:	85 c0                	test   eax,eax
c00028ed:	0f 85 c0 00 00 00    	jne    c00029b3 <dir_clear+0xda>
c00028f3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028f7:	89 f0                	mov    eax,esi
c00028f9:	e8 30 f7 ff ff       	call   c000202e <clst2sect>
c00028fe:	31 d2                	xor    edx,edx
c0002900:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002903:	89 c5                	mov    ebp,eax
c0002905:	b9 00 02 00 00       	mov    ecx,0x200
c000290a:	8d 46 34             	lea    eax,[esi+0x34]
c000290d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002911:	e8 02 f5 ff ff       	call   c0001e18 <mem_set>
c0002916:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000291a:	c1 e3 09             	shl    ebx,0x9
c000291d:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002923:	76 1b                	jbe    c0002940 <dir_clear+0x67>
c0002925:	bb 00 80 00 00       	mov    ebx,0x8000
c000292a:	eb 14                	jmp    c0002940 <dir_clear+0x67>
c000292c:	83 ec 0c             	sub    esp,0xc
c000292f:	53                   	push   ebx
c0002930:	e8 eb 32 00 00       	call   c0005c20 <ff_memalloc>
c0002935:	83 c4 10             	add    esp,0x10
c0002938:	89 c7                	mov    edi,eax
c000293a:	85 c0                	test   eax,eax
c000293c:	75 7c                	jne    c00029ba <dir_clear+0xe1>
c000293e:	d1 eb                	shr    ebx,1
c0002940:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002946:	77 e4                	ja     c000292c <dir_clear+0x53>
c0002948:	31 db                	xor    ebx,ebx
c000294a:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000294e:	39 d8                	cmp    eax,ebx
c0002950:	76 53                	jbe    c00029a5 <dir_clear+0xcc>
c0002952:	6a 01                	push   0x1
c0002954:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002957:	50                   	push   eax
c0002958:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000295c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002960:	50                   	push   eax
c0002961:	e8 3c f4 ff ff       	call   c0001da2 <disk_write>
c0002966:	83 c4 10             	add    esp,0x10
c0002969:	85 c0                	test   eax,eax
c000296b:	75 38                	jne    c00029a5 <dir_clear+0xcc>
c000296d:	43                   	inc    ebx
c000296e:	eb da                	jmp    c000294a <dir_clear+0x71>
c0002970:	52                   	push   edx
c0002971:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002974:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0002978:	50                   	push   eax
c0002979:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000297d:	57                   	push   edi
c000297e:	50                   	push   eax
c000297f:	e8 1e f4 ff ff       	call   c0001da2 <disk_write>
c0002984:	83 c4 10             	add    esp,0x10
c0002987:	85 c0                	test   eax,eax
c0002989:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000298d:	75 0a                	jne    c0002999 <dir_clear+0xc0>
c000298f:	01 d3                	add    ebx,edx
c0002991:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002995:	39 d8                	cmp    eax,ebx
c0002997:	77 d7                	ja     c0002970 <dir_clear+0x97>
c0002999:	83 ec 0c             	sub    esp,0xc
c000299c:	57                   	push   edi
c000299d:	e8 96 32 00 00       	call   c0005c38 <ff_memfree>
c00029a2:	83 c4 10             	add    esp,0x10
c00029a5:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00029a9:	39 d8                	cmp    eax,ebx
c00029ab:	0f 95 c0             	setne  al
c00029ae:	0f b6 c0             	movzx  eax,al
c00029b1:	eb 19                	jmp    c00029cc <dir_clear+0xf3>
c00029b3:	b8 01 00 00 00       	mov    eax,0x1
c00029b8:	eb 12                	jmp    c00029cc <dir_clear+0xf3>
c00029ba:	89 d9                	mov    ecx,ebx
c00029bc:	31 d2                	xor    edx,edx
c00029be:	e8 55 f4 ff ff       	call   c0001e18 <mem_set>
c00029c3:	89 da                	mov    edx,ebx
c00029c5:	31 db                	xor    ebx,ebx
c00029c7:	c1 ea 09             	shr    edx,0x9
c00029ca:	eb c5                	jmp    c0002991 <dir_clear+0xb8>
c00029cc:	83 c4 1c             	add    esp,0x1c
c00029cf:	5b                   	pop    ebx
c00029d0:	5e                   	pop    esi
c00029d1:	5f                   	pop    edi
c00029d2:	5d                   	pop    ebp
c00029d3:	c3                   	ret    

c00029d4 <create_name>:
c00029d4:	55                   	push   ebp
c00029d5:	57                   	push   edi
c00029d6:	89 d7                	mov    edi,edx
c00029d8:	56                   	push   esi
c00029d9:	31 f6                	xor    esi,esi
c00029db:	53                   	push   ebx
c00029dc:	83 ec 3c             	sub    esp,0x3c
c00029df:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00029e3:	8b 02                	mov    eax,DWORD PTR [edx]
c00029e5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00029e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029ed:	8b 00                	mov    eax,DWORD PTR [eax]
c00029ef:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00029f2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00029f6:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00029fa:	e8 5e f4 ff ff       	call   c0001e5d <tchar2uni>
c00029ff:	89 c3                	mov    ebx,eax
c0002a01:	83 f8 ff             	cmp    eax,0xffffffff
c0002a04:	75 0a                	jne    c0002a10 <create_name+0x3c>
c0002a06:	b8 06 00 00 00       	mov    eax,0x6
c0002a0b:	e9 93 02 00 00       	jmp    c0002ca3 <create_name+0x2cf>
c0002a10:	3d ff ff 00 00       	cmp    eax,0xffff
c0002a15:	76 0c                	jbe    c0002a23 <create_name+0x4f>
c0002a17:	c1 e8 10             	shr    eax,0x10
c0002a1a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002a1e:	66 89 04 72          	mov    WORD PTR [edx+esi*2],ax
c0002a22:	46                   	inc    esi
c0002a23:	0f b7 d3             	movzx  edx,bx
c0002a26:	83 fa 1f             	cmp    edx,0x1f
c0002a29:	76 4a                	jbe    c0002a75 <create_name+0xa1>
c0002a2b:	83 fa 5c             	cmp    edx,0x5c
c0002a2e:	74 30                	je     c0002a60 <create_name+0x8c>
c0002a30:	83 fa 2f             	cmp    edx,0x2f
c0002a33:	74 2b                	je     c0002a60 <create_name+0x8c>
c0002a35:	83 fa 7f             	cmp    edx,0x7f
c0002a38:	77 0e                	ja     c0002a48 <create_name+0x74>
c0002a3a:	b8 82 05 02 c0       	mov    eax,0xc0020582
c0002a3f:	e8 02 f4 ff ff       	call   c0001e46 <chk_chr>
c0002a44:	85 c0                	test   eax,eax
c0002a46:	75 be                	jne    c0002a06 <create_name+0x32>
c0002a48:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0002a4e:	77 b6                	ja     c0002a06 <create_name+0x32>
c0002a50:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a54:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002a58:	46                   	inc    esi
c0002a59:	eb 9b                	jmp    c00029f6 <create_name+0x22>
c0002a5b:	40                   	inc    eax
c0002a5c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002a60:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002a64:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0002a67:	83 fa 2f             	cmp    edx,0x2f
c0002a6a:	74 ef                	je     c0002a5b <create_name+0x87>
c0002a6c:	83 fa 5c             	cmp    edx,0x5c
c0002a6f:	74 ea                	je     c0002a5b <create_name+0x87>
c0002a71:	31 db                	xor    ebx,ebx
c0002a73:	eb 02                	jmp    c0002a77 <create_name+0xa3>
c0002a75:	b3 04                	mov    bl,0x4
c0002a77:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002a7b:	89 07                	mov    DWORD PTR [edi],eax
c0002a7d:	85 f6                	test   esi,esi
c0002a7f:	74 16                	je     c0002a97 <create_name+0xc3>
c0002a81:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a85:	0f b7 44 70 fe       	movzx  eax,WORD PTR [eax+esi*2-0x2]
c0002a8a:	83 f8 20             	cmp    eax,0x20
c0002a8d:	74 05                	je     c0002a94 <create_name+0xc0>
c0002a8f:	83 f8 2e             	cmp    eax,0x2e
c0002a92:	75 03                	jne    c0002a97 <create_name+0xc3>
c0002a94:	4e                   	dec    esi
c0002a95:	eb e6                	jmp    c0002a7d <create_name+0xa9>
c0002a97:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a9b:	31 ff                	xor    edi,edi
c0002a9d:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0002aa3:	85 f6                	test   esi,esi
c0002aa5:	0f 84 5b ff ff ff    	je     c0002a06 <create_name+0x32>
c0002aab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002aaf:	8d 57 01             	lea    edx,[edi+0x1]
c0002ab2:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002ab6:	83 f8 20             	cmp    eax,0x20
c0002ab9:	75 04                	jne    c0002abf <create_name+0xeb>
c0002abb:	89 d7                	mov    edi,edx
c0002abd:	eb ec                	jmp    c0002aab <create_name+0xd7>
c0002abf:	85 ff                	test   edi,edi
c0002ac1:	75 05                	jne    c0002ac8 <create_name+0xf4>
c0002ac3:	83 f8 2e             	cmp    eax,0x2e
c0002ac6:	75 08                	jne    c0002ad0 <create_name+0xfc>
c0002ac8:	83 cb 03             	or     ebx,0x3
c0002acb:	eb 03                	jmp    c0002ad0 <create_name+0xfc>
c0002acd:	4e                   	dec    esi
c0002ace:	74 0c                	je     c0002adc <create_name+0x108>
c0002ad0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002ad4:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0002ada:	75 f1                	jne    c0002acd <create_name+0xf9>
c0002adc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002ae0:	b9 0b 00 00 00       	mov    ecx,0xb
c0002ae5:	83 c0 20             	add    eax,0x20
c0002ae8:	ba 20 00 00 00       	mov    edx,0x20
c0002aed:	31 ed                	xor    ebp,ebp
c0002aef:	e8 24 f3 ff ff       	call   c0001e18 <mem_set>
c0002af4:	b9 08 00 00 00       	mov    ecx,0x8
c0002af9:	c6 44 24 08 00       	mov    BYTE PTR [esp+0x8],0x0
c0002afe:	8d 47 01             	lea    eax,[edi+0x1]
c0002b01:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002b05:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002b09:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002b0d:	89 c7                	mov    edi,eax
c0002b0f:	85 c0                	test   eax,eax
c0002b11:	0f 84 25 01 00 00    	je     c0002c3c <create_name+0x268>
c0002b17:	83 f8 20             	cmp    eax,0x20
c0002b1a:	74 0f                	je     c0002b2b <create_name+0x157>
c0002b1c:	83 f8 2e             	cmp    eax,0x2e
c0002b1f:	75 13                	jne    c0002b34 <create_name+0x160>
c0002b21:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002b25:	0f 84 6a 01 00 00    	je     c0002c95 <create_name+0x2c1>
c0002b2b:	83 cb 03             	or     ebx,0x3
c0002b2e:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0002b32:	eb ca                	jmp    c0002afe <create_name+0x12a>
c0002b34:	39 cd                	cmp    ebp,ecx
c0002b36:	73 0b                	jae    c0002b43 <create_name+0x16f>
c0002b38:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002b3c:	75 3f                	jne    c0002b7d <create_name+0x1a9>
c0002b3e:	e9 52 01 00 00       	jmp    c0002c95 <create_name+0x2c1>
c0002b43:	83 f9 0b             	cmp    ecx,0xb
c0002b46:	75 0d                	jne    c0002b55 <create_name+0x181>
c0002b48:	83 cb 03             	or     ebx,0x3
c0002b4b:	b9 0b 00 00 00       	mov    ecx,0xb
c0002b50:	e9 e7 00 00 00       	jmp    c0002c3c <create_name+0x268>
c0002b55:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002b59:	74 0d                	je     c0002b68 <create_name+0x194>
c0002b5b:	83 cb 03             	or     ebx,0x3
c0002b5e:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002b62:	0f 87 d4 00 00 00    	ja     c0002c3c <create_name+0x268>
c0002b68:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002b6d:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0002b71:	b9 0b 00 00 00       	mov    ecx,0xb
c0002b76:	bd 08 00 00 00       	mov    ebp,0x8
c0002b7b:	eb b1                	jmp    c0002b2e <create_name+0x15a>
c0002b7d:	83 f8 7f             	cmp    eax,0x7f
c0002b80:	76 66                	jbe    c0002be8 <create_name+0x214>
c0002b82:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002b86:	89 d9                	mov    ecx,ebx
c0002b88:	83 c9 02             	or     ecx,0x2
c0002b8b:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002b8f:	52                   	push   edx
c0002b90:	52                   	push   edx
c0002b91:	68 b5 01 00 00       	push   0x1b5
c0002b96:	50                   	push   eax
c0002b97:	e8 b4 30 00 00       	call   c0005c50 <ff_uni2oem>
c0002b9c:	83 c4 10             	add    esp,0x10
c0002b9f:	89 c7                	mov    edi,eax
c0002ba1:	a8 80                	test   al,0x80
c0002ba3:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002ba7:	74 0c                	je     c0002bb5 <create_name+0x1e1>
c0002ba9:	83 e7 7f             	and    edi,0x7f
c0002bac:	0f b6 bf 40 06 02 c0 	movzx  edi,BYTE PTR [edi-0x3ffdf9c0]
c0002bb3:	eb 2a                	jmp    c0002bdf <create_name+0x20b>
c0002bb5:	0f b7 c0             	movzx  eax,ax
c0002bb8:	3d ff 00 00 00       	cmp    eax,0xff
c0002bbd:	76 20                	jbe    c0002bdf <create_name+0x20b>
c0002bbf:	8d 51 ff             	lea    edx,[ecx-0x1]
c0002bc2:	39 ea                	cmp    edx,ebp
c0002bc4:	77 0a                	ja     c0002bd0 <create_name+0x1fc>
c0002bc6:	83 cb 03             	or     ebx,0x3
c0002bc9:	89 cd                	mov    ebp,ecx
c0002bcb:	e9 5e ff ff ff       	jmp    c0002b2e <create_name+0x15a>
c0002bd0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0002bd4:	88 64 2b 20          	mov    BYTE PTR [ebx+ebp*1+0x20],ah
c0002bd8:	45                   	inc    ebp
c0002bd9:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002bdd:	eb 4d                	jmp    c0002c2c <create_name+0x258>
c0002bdf:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002be3:	66 85 ff             	test   di,di
c0002be6:	74 19                	je     c0002c01 <create_name+0x22d>
c0002be8:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002bec:	0f b7 d7             	movzx  edx,di
c0002bef:	b8 8b 05 02 c0       	mov    eax,0xc002058b
c0002bf4:	e8 4d f2 ff ff       	call   c0001e46 <chk_chr>
c0002bf9:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002bfd:	85 c0                	test   eax,eax
c0002bff:	74 0a                	je     c0002c0b <create_name+0x237>
c0002c01:	83 cb 03             	or     ebx,0x3
c0002c04:	bf 5f 00 00 00       	mov    edi,0x5f
c0002c09:	eb 21                	jmp    c0002c2c <create_name+0x258>
c0002c0b:	8d 47 bf             	lea    eax,[edi-0x41]
c0002c0e:	66 83 f8 19          	cmp    ax,0x19
c0002c12:	77 07                	ja     c0002c1b <create_name+0x247>
c0002c14:	83 4c 24 08 02       	or     DWORD PTR [esp+0x8],0x2
c0002c19:	eb 11                	jmp    c0002c2c <create_name+0x258>
c0002c1b:	8d 47 9f             	lea    eax,[edi-0x61]
c0002c1e:	66 83 f8 19          	cmp    ax,0x19
c0002c22:	77 08                	ja     c0002c2c <create_name+0x258>
c0002c24:	83 4c 24 08 01       	or     DWORD PTR [esp+0x8],0x1
c0002c29:	83 ef 20             	sub    edi,0x20
c0002c2c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0002c30:	89 f8                	mov    eax,edi
c0002c32:	88 44 2a 20          	mov    BYTE PTR [edx+ebp*1+0x20],al
c0002c36:	45                   	inc    ebp
c0002c37:	e9 f2 fe ff ff       	jmp    c0002b2e <create_name+0x15a>
c0002c3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002c40:	80 78 20 e5          	cmp    BYTE PTR [eax+0x20],0xe5
c0002c44:	75 04                	jne    c0002c4a <create_name+0x276>
c0002c46:	c6 40 20 05          	mov    BYTE PTR [eax+0x20],0x5
c0002c4a:	83 f9 08             	cmp    ecx,0x8
c0002c4d:	75 05                	jne    c0002c54 <create_name+0x280>
c0002c4f:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002c54:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c58:	83 e0 0c             	and    eax,0xc
c0002c5b:	83 f8 0c             	cmp    eax,0xc
c0002c5e:	74 0c                	je     c0002c6c <create_name+0x298>
c0002c60:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c64:	83 e0 03             	and    eax,0x3
c0002c67:	83 f8 03             	cmp    eax,0x3
c0002c6a:	75 05                	jne    c0002c71 <create_name+0x29d>
c0002c6c:	83 cb 02             	or     ebx,0x2
c0002c6f:	eb 19                	jmp    c0002c8a <create_name+0x2b6>
c0002c71:	f6 c3 02             	test   bl,0x2
c0002c74:	75 14                	jne    c0002c8a <create_name+0x2b6>
c0002c76:	f6 44 24 08 01       	test   BYTE PTR [esp+0x8],0x1
c0002c7b:	74 03                	je     c0002c80 <create_name+0x2ac>
c0002c7d:	83 cb 10             	or     ebx,0x10
c0002c80:	f6 44 24 08 04       	test   BYTE PTR [esp+0x8],0x4
c0002c85:	74 03                	je     c0002c8a <create_name+0x2b6>
c0002c87:	83 cb 08             	or     ebx,0x8
c0002c8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002c8e:	88 58 2b             	mov    BYTE PTR [eax+0x2b],bl
c0002c91:	31 c0                	xor    eax,eax
c0002c93:	eb 0e                	jmp    c0002ca3 <create_name+0x2cf>
c0002c95:	83 f9 0b             	cmp    ecx,0xb
c0002c98:	0f 85 ca fe ff ff    	jne    c0002b68 <create_name+0x194>
c0002c9e:	e9 a5 fe ff ff       	jmp    c0002b48 <create_name+0x174>
c0002ca3:	83 c4 3c             	add    esp,0x3c
c0002ca6:	5b                   	pop    ebx
c0002ca7:	5e                   	pop    esi
c0002ca8:	5f                   	pop    edi
c0002ca9:	5d                   	pop    ebp
c0002caa:	c3                   	ret    

c0002cab <cmp_lfn>:
c0002cab:	55                   	push   ebp
c0002cac:	57                   	push   edi
c0002cad:	89 d7                	mov    edi,edx
c0002caf:	56                   	push   esi
c0002cb0:	53                   	push   ebx
c0002cb1:	83 ec 1c             	sub    esp,0x1c
c0002cb4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002cb8:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002cbb:	e8 17 f1 ff ff       	call   c0001dd7 <ld_word>
c0002cc0:	66 85 c0             	test   ax,ax
c0002cc3:	74 07                	je     c0002ccc <cmp_lfn+0x21>
c0002cc5:	31 c0                	xor    eax,eax
c0002cc7:	e9 a1 00 00 00       	jmp    c0002d6d <cmp_lfn+0xc2>
c0002ccc:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002cce:	bd 01 00 00 00       	mov    ebp,0x1
c0002cd3:	83 e3 3f             	and    ebx,0x3f
c0002cd6:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002cde:	4b                   	dec    ebx
c0002cdf:	6b db 0d             	imul   ebx,ebx,0xd
c0002ce2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002ce6:	0f b6 80 c0 06 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdf940]
c0002ced:	01 f8                	add    eax,edi
c0002cef:	e8 e3 f0 ff ff       	call   c0001dd7 <ld_word>
c0002cf4:	66 85 ed             	test   bp,bp
c0002cf7:	89 c6                	mov    esi,eax
c0002cf9:	74 3c                	je     c0002d37 <cmp_lfn+0x8c>
c0002cfb:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002d01:	77 c2                	ja     c0002cc5 <cmp_lfn+0x1a>
c0002d03:	83 ec 0c             	sub    esp,0xc
c0002d06:	0f b7 c0             	movzx  eax,ax
c0002d09:	50                   	push   eax
c0002d0a:	e8 59 30 00 00       	call   c0005d68 <ff_wtoupper>
c0002d0f:	89 c5                	mov    ebp,eax
c0002d11:	8d 43 01             	lea    eax,[ebx+0x1]
c0002d14:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002d18:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002d1c:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002d20:	89 04 24             	mov    DWORD PTR [esp],eax
c0002d23:	e8 40 30 00 00       	call   c0005d68 <ff_wtoupper>
c0002d28:	83 c4 10             	add    esp,0x10
c0002d2b:	39 c5                	cmp    ebp,eax
c0002d2d:	75 96                	jne    c0002cc5 <cmp_lfn+0x1a>
c0002d2f:	89 f5                	mov    ebp,esi
c0002d31:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0002d35:	eb 0b                	jmp    c0002d42 <cmp_lfn+0x97>
c0002d37:	0f b7 c8             	movzx  ecx,ax
c0002d3a:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c0002d40:	75 83                	jne    c0002cc5 <cmp_lfn+0x1a>
c0002d42:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0002d46:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0002d4b:	75 95                	jne    c0002ce2 <cmp_lfn+0x37>
c0002d4d:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002d50:	74 16                	je     c0002d68 <cmp_lfn+0xbd>
c0002d52:	66 85 ed             	test   bp,bp
c0002d55:	74 11                	je     c0002d68 <cmp_lfn+0xbd>
c0002d57:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002d5b:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002d60:	0f 94 c0             	sete   al
c0002d63:	0f b6 c0             	movzx  eax,al
c0002d66:	eb 05                	jmp    c0002d6d <cmp_lfn+0xc2>
c0002d68:	b8 01 00 00 00       	mov    eax,0x1
c0002d6d:	83 c4 1c             	add    esp,0x1c
c0002d70:	5b                   	pop    ebx
c0002d71:	5e                   	pop    esi
c0002d72:	5f                   	pop    edi
c0002d73:	5d                   	pop    ebp
c0002d74:	c3                   	ret    

c0002d75 <sync_fs>:
c0002d75:	56                   	push   esi
c0002d76:	53                   	push   ebx
c0002d77:	53                   	push   ebx
c0002d78:	89 c3                	mov    ebx,eax
c0002d7a:	e8 5c f5 ff ff       	call   c00022db <sync_window>
c0002d7f:	85 c0                	test   eax,eax
c0002d81:	0f 85 9a 00 00 00    	jne    c0002e21 <sync_fs+0xac>
c0002d87:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002d8a:	75 7b                	jne    c0002e07 <sync_fs+0x92>
c0002d8c:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002d90:	75 75                	jne    c0002e07 <sync_fs+0x92>
c0002d92:	b9 00 02 00 00       	mov    ecx,0x200
c0002d97:	8d 73 34             	lea    esi,[ebx+0x34]
c0002d9a:	31 d2                	xor    edx,edx
c0002d9c:	89 f0                	mov    eax,esi
c0002d9e:	e8 75 f0 ff ff       	call   c0001e18 <mem_set>
c0002da3:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002da9:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002dae:	e8 49 f0 ff ff       	call   c0001dfc <st_word>
c0002db3:	ba 52 52 61 41       	mov    edx,0x41615252
c0002db8:	89 f0                	mov    eax,esi
c0002dba:	e8 41 f0 ff ff       	call   c0001e00 <st_dword>
c0002dbf:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002dc5:	ba 72 72 41 61       	mov    edx,0x61417272
c0002dca:	e8 31 f0 ff ff       	call   c0001e00 <st_dword>
c0002dcf:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002dd2:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002dd8:	e8 23 f0 ff ff       	call   c0001e00 <st_dword>
c0002ddd:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002de0:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002de6:	e8 15 f0 ff ff       	call   c0001e00 <st_dword>
c0002deb:	6a 01                	push   0x1
c0002ded:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002df0:	40                   	inc    eax
c0002df1:	50                   	push   eax
c0002df2:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002df5:	56                   	push   esi
c0002df6:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002dfa:	50                   	push   eax
c0002dfb:	e8 a2 ef ff ff       	call   c0001da2 <disk_write>
c0002e00:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002e04:	83 c4 10             	add    esp,0x10
c0002e07:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002e0b:	51                   	push   ecx
c0002e0c:	6a 00                	push   0x0
c0002e0e:	6a 00                	push   0x0
c0002e10:	50                   	push   eax
c0002e11:	e8 a2 ef ff ff       	call   c0001db8 <disk_ioctl>
c0002e16:	83 c4 10             	add    esp,0x10
c0002e19:	85 c0                	test   eax,eax
c0002e1b:	0f 95 c0             	setne  al
c0002e1e:	0f b6 c0             	movzx  eax,al
c0002e21:	5a                   	pop    edx
c0002e22:	5b                   	pop    ebx
c0002e23:	5e                   	pop    esi
c0002e24:	c3                   	ret    

c0002e25 <create_partition>:
c0002e25:	55                   	push   ebp
c0002e26:	0f b6 c0             	movzx  eax,al
c0002e29:	57                   	push   edi
c0002e2a:	56                   	push   esi
c0002e2b:	53                   	push   ebx
c0002e2c:	83 ec 40             	sub    esp,0x40
c0002e2f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002e33:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0002e37:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002e3b:	8d 44 24 30          	lea    eax,[esp+0x30]
c0002e3f:	50                   	push   eax
c0002e40:	6a 01                	push   0x1
c0002e42:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0002e46:	e8 6d ef ff ff       	call   c0001db8 <disk_ioctl>
c0002e4b:	83 c4 10             	add    esp,0x10
c0002e4e:	85 c0                	test   eax,eax
c0002e50:	0f 85 6a 01 00 00    	jne    c0002fc0 <create_partition+0x19b>
c0002e56:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002e5a:	b9 05 00 00 00       	mov    ecx,0x5
c0002e5f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002e63:	be 08 00 00 00       	mov    esi,0x8
c0002e68:	89 f0                	mov    eax,esi
c0002e6a:	31 d2                	xor    edx,edx
c0002e6c:	0f b6 d8             	movzx  ebx,al
c0002e6f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002e73:	f7 f3                	div    ebx
c0002e75:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0002e7a:	76 0a                	jbe    c0002e86 <create_partition+0x61>
c0002e7c:	d1 e6                	shl    esi,1
c0002e7e:	49                   	dec    ecx
c0002e7f:	75 e7                	jne    c0002e68 <create_partition+0x43>
c0002e81:	be ff ff ff ff       	mov    esi,0xffffffff
c0002e86:	b9 00 02 00 00       	mov    ecx,0x200
c0002e8b:	31 d2                	xor    edx,edx
c0002e8d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002e91:	e8 82 ef ff ff       	call   c0001e18 <mem_set>
c0002e96:	b9 64 00 00 00       	mov    ecx,0x64
c0002e9b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002e9f:	31 d2                	xor    edx,edx
c0002ea1:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002ea9:	f7 f1                	div    ecx
c0002eab:	b9 3f 00 00 00       	mov    ecx,0x3f
c0002eb0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002eb4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002eb8:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c0002ebe:	89 f0                	mov    eax,esi
c0002ec0:	0f b6 c0             	movzx  eax,al
c0002ec3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002ec7:	85 c9                	test   ecx,ecx
c0002ec9:	75 34                	jne    c0002eff <create_partition+0xda>
c0002ecb:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002ecf:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002ed4:	05 fe 01 00 00       	add    eax,0x1fe
c0002ed9:	e8 1e ef ff ff       	call   c0001dfc <st_word>
c0002ede:	6a 01                	push   0x1
c0002ee0:	6a 00                	push   0x0
c0002ee2:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0002ee6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0002eea:	e8 b3 ee ff ff       	call   c0001da2 <disk_write>
c0002eef:	83 c4 10             	add    esp,0x10
c0002ef2:	85 c0                	test   eax,eax
c0002ef4:	0f 95 c0             	setne  al
c0002ef7:	0f b6 c0             	movzx  eax,al
c0002efa:	e9 c6 00 00 00       	jmp    c0002fc5 <create_partition+0x1a0>
c0002eff:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c0002f03:	76 c6                	jbe    c0002ecb <create_partition+0xa6>
c0002f05:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002f09:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0002f0d:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c0002f10:	83 fe 64             	cmp    esi,0x64
c0002f13:	77 0d                	ja     c0002f22 <create_partition+0xfd>
c0002f15:	74 07                	je     c0002f1e <create_partition+0xf9>
c0002f17:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0002f1c:	eb 04                	jmp    c0002f22 <create_partition+0xfd>
c0002f1e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002f22:	31 c0                	xor    eax,eax
c0002f24:	89 f2                	mov    edx,esi
c0002f26:	01 ca                	add    edx,ecx
c0002f28:	0f 92 c0             	setb   al
c0002f2b:	3b 54 24 04          	cmp    edx,DWORD PTR [esp+0x4]
c0002f2f:	77 04                	ja     c0002f35 <create_partition+0x110>
c0002f31:	85 c0                	test   eax,eax
c0002f33:	74 08                	je     c0002f3d <create_partition+0x118>
c0002f35:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002f39:	29 ce                	sub    esi,ecx
c0002f3b:	eb 04                	jmp    c0002f41 <create_partition+0x11c>
c0002f3d:	85 f6                	test   esi,esi
c0002f3f:	74 8a                	je     c0002ecb <create_partition+0xa6>
c0002f41:	89 ca                	mov    edx,ecx
c0002f43:	89 d8                	mov    eax,ebx
c0002f45:	bf 3f 00 00 00       	mov    edi,0x3f
c0002f4a:	e8 b1 ee ff ff       	call   c0001e00 <st_dword>
c0002f4f:	8d 43 04             	lea    eax,[ebx+0x4]
c0002f52:	89 f2                	mov    edx,esi
c0002f54:	83 c3 10             	add    ebx,0x10
c0002f57:	e8 a4 ee ff ff       	call   c0001e00 <st_dword>
c0002f5c:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0002f60:	31 d2                	xor    edx,edx
c0002f62:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c0002f65:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002f69:	89 c8                	mov    eax,ecx
c0002f6b:	01 f1                	add    ecx,esi
c0002f6d:	f7 f7                	div    edi
c0002f6f:	89 d5                	mov    ebp,edx
c0002f71:	31 d2                	xor    edx,edx
c0002f73:	45                   	inc    ebp
c0002f74:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0002f78:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0002f7b:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0002f7e:	89 c2                	mov    edx,eax
c0002f80:	8d 41 ff             	lea    eax,[ecx-0x1]
c0002f83:	c1 ea 02             	shr    edx,0x2
c0002f86:	83 e2 c0             	and    edx,0xffffffc0
c0002f89:	09 ea                	or     edx,ebp
c0002f8b:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c0002f8e:	31 d2                	xor    edx,edx
c0002f90:	f7 f7                	div    edi
c0002f92:	89 d6                	mov    esi,edx
c0002f94:	31 d2                	xor    edx,edx
c0002f96:	46                   	inc    esi
c0002f97:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0002f9b:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c0002f9e:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c0002fa1:	89 c7                	mov    edi,eax
c0002fa3:	c1 ef 02             	shr    edi,0x2
c0002fa6:	83 e7 c0             	and    edi,0xffffffc0
c0002fa9:	09 fe                	or     esi,edi
c0002fab:	89 f2                	mov    edx,esi
c0002fad:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0002fb0:	83 7c 24 08 04       	cmp    DWORD PTR [esp+0x8],0x4
c0002fb5:	0f 85 0c ff ff ff    	jne    c0002ec7 <create_partition+0xa2>
c0002fbb:	e9 0b ff ff ff       	jmp    c0002ecb <create_partition+0xa6>
c0002fc0:	b8 01 00 00 00       	mov    eax,0x1
c0002fc5:	83 c4 3c             	add    esp,0x3c
c0002fc8:	5b                   	pop    ebx
c0002fc9:	5e                   	pop    esi
c0002fca:	5f                   	pop    edi
c0002fcb:	5d                   	pop    ebp
c0002fcc:	c3                   	ret    

c0002fcd <get_fileinfo>:
c0002fcd:	55                   	push   ebp
c0002fce:	57                   	push   edi
c0002fcf:	56                   	push   esi
c0002fd0:	53                   	push   ebx
c0002fd1:	83 ec 1c             	sub    esp,0x1c
c0002fd4:	8b 30                	mov    esi,DWORD PTR [eax]
c0002fd6:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c0002fda:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0002fde:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c0002fe2:	0f 84 d3 01 00 00    	je     c00031bb <get_fileinfo+0x1ee>
c0002fe8:	89 d3                	mov    ebx,edx
c0002fea:	89 c6                	mov    esi,eax
c0002fec:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c0002ff0:	74 72                	je     c0003064 <get_fileinfo+0x97>
c0002ff2:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002ffa:	31 ed                	xor    ebp,ebp
c0002ffc:	31 ff                	xor    edi,edi
c0002ffe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003002:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0003006:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003009:	0f b7 04 08          	movzx  eax,WORD PTR [eax+ecx*1]
c000300d:	89 c2                	mov    edx,eax
c000300f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003013:	85 c0                	test   eax,eax
c0003015:	74 41                	je     c0003058 <get_fileinfo+0x8b>
c0003017:	0f b7 c5             	movzx  eax,bp
c000301a:	85 c0                	test   eax,eax
c000301c:	75 0d                	jne    c000302b <get_fileinfo+0x5e>
c000301e:	8d 8a 00 28 00 00    	lea    ecx,[edx+0x2800]
c0003024:	66 81 f9 ff 07       	cmp    cx,0x7ff
c0003029:	76 22                	jbe    c000304d <get_fileinfo+0x80>
c000302b:	c1 e0 10             	shl    eax,0x10
c000302e:	b9 ff 00 00 00       	mov    ecx,0xff
c0003033:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0003037:	29 f9                	sub    ecx,edi
c0003039:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c000303d:	e8 f3 ee ff ff       	call   c0001f35 <put_utf>
c0003042:	0f b6 c0             	movzx  eax,al
c0003045:	85 c0                	test   eax,eax
c0003047:	74 0d                	je     c0003056 <get_fileinfo+0x89>
c0003049:	01 c7                	add    edi,eax
c000304b:	31 d2                	xor    edx,edx
c000304d:	83 44 24 04 02       	add    DWORD PTR [esp+0x4],0x2
c0003052:	89 d5                	mov    ebp,edx
c0003054:	eb a8                	jmp    c0002ffe <get_fileinfo+0x31>
c0003056:	31 ff                	xor    edi,edi
c0003058:	66 85 ed             	test   bp,bp
c000305b:	74 02                	je     c000305f <get_fileinfo+0x92>
c000305d:	31 ff                	xor    edi,edi
c000305f:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c0003064:	31 ff                	xor    edi,edi
c0003066:	31 c9                	xor    ecx,ecx
c0003068:	83 f9 0a             	cmp    ecx,0xa
c000306b:	0f 87 ac 00 00 00    	ja     c000311d <get_fileinfo+0x150>
c0003071:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003074:	8d 69 01             	lea    ebp,[ecx+0x1]
c0003077:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c000307b:	89 c2                	mov    edx,eax
c000307d:	83 f8 20             	cmp    eax,0x20
c0003080:	0f 84 90 00 00 00    	je     c0003116 <get_fileinfo+0x149>
c0003086:	83 f8 05             	cmp    eax,0x5
c0003089:	75 05                	jne    c0003090 <get_fileinfo+0xc3>
c000308b:	ba e5 00 00 00       	mov    edx,0xe5
c0003090:	83 ff 0b             	cmp    edi,0xb
c0003093:	77 0b                	ja     c00030a0 <get_fileinfo+0xd3>
c0003095:	83 fd 09             	cmp    ebp,0x9
c0003098:	75 06                	jne    c00030a0 <get_fileinfo+0xd3>
c000309a:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c000309f:	47                   	inc    edi
c00030a0:	0f b7 c2             	movzx  eax,dx
c00030a3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00030a7:	e8 ab ed ff ff       	call   c0001e57 <dbc_1st>
c00030ac:	85 c0                	test   eax,eax
c00030ae:	74 2f                	je     c00030df <get_fileinfo+0x112>
c00030b0:	83 fd 08             	cmp    ebp,0x8
c00030b3:	74 2a                	je     c00030df <get_fileinfo+0x112>
c00030b5:	83 fd 0b             	cmp    ebp,0xb
c00030b8:	74 25                	je     c00030df <get_fileinfo+0x112>
c00030ba:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030bd:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c00030c1:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00030c5:	e8 90 ed ff ff       	call   c0001e5a <dbc_2nd>
c00030ca:	85 c0                	test   eax,eax
c00030cc:	74 11                	je     c00030df <get_fileinfo+0x112>
c00030ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00030d2:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c00030d7:	c1 e0 08             	shl    eax,0x8
c00030da:	8d 69 02             	lea    ebp,[ecx+0x2]
c00030dd:	09 c2                	or     edx,eax
c00030df:	0f b7 d2             	movzx  edx,dx
c00030e2:	50                   	push   eax
c00030e3:	50                   	push   eax
c00030e4:	68 b5 01 00 00       	push   0x1b5
c00030e9:	52                   	push   edx
c00030ea:	e8 01 2c 00 00       	call   c0005cf0 <ff_oem2uni>
c00030ef:	83 c4 10             	add    esp,0x10
c00030f2:	0f b7 c0             	movzx  eax,ax
c00030f5:	85 c0                	test   eax,eax
c00030f7:	75 04                	jne    c00030fd <get_fileinfo+0x130>
c00030f9:	31 ff                	xor    edi,edi
c00030fb:	eb 20                	jmp    c000311d <get_fileinfo+0x150>
c00030fd:	b9 0c 00 00 00       	mov    ecx,0xc
c0003102:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c0003106:	29 f9                	sub    ecx,edi
c0003108:	e8 28 ee ff ff       	call   c0001f35 <put_utf>
c000310d:	0f b6 c0             	movzx  eax,al
c0003110:	85 c0                	test   eax,eax
c0003112:	74 e5                	je     c00030f9 <get_fileinfo+0x12c>
c0003114:	01 c7                	add    edi,eax
c0003116:	89 e9                	mov    ecx,ebp
c0003118:	e9 4b ff ff ff       	jmp    c0003068 <get_fileinfo+0x9b>
c000311d:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c0003122:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c0003126:	75 5f                	jne    c0003187 <get_fileinfo+0x1ba>
c0003128:	85 ff                	test   edi,edi
c000312a:	75 0b                	jne    c0003137 <get_fileinfo+0x16a>
c000312c:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c0003130:	ba 01 00 00 00       	mov    edx,0x1
c0003135:	eb 3e                	jmp    c0003175 <get_fileinfo+0x1a8>
c0003137:	bf 08 00 00 00       	mov    edi,0x8
c000313c:	31 d2                	xor    edx,edx
c000313e:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c0003144:	84 c0                	test   al,al
c0003146:	74 2d                	je     c0003175 <get_fileinfo+0x1a8>
c0003148:	66 83 f8 2e          	cmp    ax,0x2e
c000314c:	74 1b                	je     c0003169 <get_fileinfo+0x19c>
c000314e:	8d 48 bf             	lea    ecx,[eax-0x41]
c0003151:	66 83 f9 19          	cmp    cx,0x19
c0003155:	77 17                	ja     c000316e <get_fileinfo+0x1a1>
c0003157:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c000315a:	8a 49 0c             	mov    cl,BYTE PTR [ecx+0xc]
c000315d:	21 f9                	and    ecx,edi
c000315f:	80 e1 18             	and    cl,0x18
c0003162:	74 0a                	je     c000316e <get_fileinfo+0x1a1>
c0003164:	83 c0 20             	add    eax,0x20
c0003167:	eb 05                	jmp    c000316e <get_fileinfo+0x1a1>
c0003169:	bf 10 00 00 00       	mov    edi,0x10
c000316e:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c0003172:	42                   	inc    edx
c0003173:	eb c9                	jmp    c000313e <get_fileinfo+0x171>
c0003175:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c000317a:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000317d:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0003181:	75 04                	jne    c0003187 <get_fileinfo+0x1ba>
c0003183:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c0003187:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000318a:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c000318d:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0003190:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003193:	83 c0 1c             	add    eax,0x1c
c0003196:	e8 49 ec ff ff       	call   c0001de4 <ld_dword>
c000319b:	89 03                	mov    DWORD PTR [ebx],eax
c000319d:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031a0:	83 c0 16             	add    eax,0x16
c00031a3:	e8 2f ec ff ff       	call   c0001dd7 <ld_word>
c00031a8:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c00031ac:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031af:	83 c0 18             	add    eax,0x18
c00031b2:	e8 20 ec ff ff       	call   c0001dd7 <ld_word>
c00031b7:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00031bb:	83 c4 1c             	add    esp,0x1c
c00031be:	5b                   	pop    ebx
c00031bf:	5e                   	pop    esi
c00031c0:	5f                   	pop    edi
c00031c1:	5d                   	pop    ebp
c00031c2:	c3                   	ret    

c00031c3 <ld_clust.isra.0>:
c00031c3:	56                   	push   esi
c00031c4:	89 c6                	mov    esi,eax
c00031c6:	53                   	push   ebx
c00031c7:	8d 42 1a             	lea    eax,[edx+0x1a]
c00031ca:	89 d3                	mov    ebx,edx
c00031cc:	e8 06 ec ff ff       	call   c0001dd7 <ld_word>
c00031d1:	0f b7 c8             	movzx  ecx,ax
c00031d4:	89 f0                	mov    eax,esi
c00031d6:	3c 03                	cmp    al,0x3
c00031d8:	75 0d                	jne    c00031e7 <ld_clust.isra.0+0x24>
c00031da:	8d 43 14             	lea    eax,[ebx+0x14]
c00031dd:	e8 f5 eb ff ff       	call   c0001dd7 <ld_word>
c00031e2:	c1 e0 10             	shl    eax,0x10
c00031e5:	09 c1                	or     ecx,eax
c00031e7:	89 c8                	mov    eax,ecx
c00031e9:	5b                   	pop    ebx
c00031ea:	5e                   	pop    esi
c00031eb:	c3                   	ret    

c00031ec <st_clust.isra.1>:
c00031ec:	56                   	push   esi
c00031ed:	89 c6                	mov    esi,eax
c00031ef:	53                   	push   ebx
c00031f0:	89 d3                	mov    ebx,edx
c00031f2:	0f b7 d1             	movzx  edx,cx
c00031f5:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00031f8:	e8 ff eb ff ff       	call   c0001dfc <st_word>
c00031fd:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0003200:	75 0f                	jne    c0003211 <st_clust.isra.1+0x25>
c0003202:	c1 e9 10             	shr    ecx,0x10
c0003205:	8d 43 14             	lea    eax,[ebx+0x14]
c0003208:	89 ca                	mov    edx,ecx
c000320a:	5b                   	pop    ebx
c000320b:	5e                   	pop    esi
c000320c:	e9 eb eb ff ff       	jmp    c0001dfc <st_word>
c0003211:	5b                   	pop    ebx
c0003212:	5e                   	pop    esi
c0003213:	c3                   	ret    

c0003214 <get_fat.isra.2>:
c0003214:	b9 01 00 00 00       	mov    ecx,0x1
c0003219:	83 fa 01             	cmp    edx,0x1
c000321c:	0f 86 f3 00 00 00    	jbe    c0003315 <get_fat.isra.2+0x101>
c0003222:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c0003225:	0f 83 ea 00 00 00    	jae    c0003315 <get_fat.isra.2+0x101>
c000322b:	55                   	push   ebp
c000322c:	57                   	push   edi
c000322d:	89 c7                	mov    edi,eax
c000322f:	56                   	push   esi
c0003230:	89 d6                	mov    esi,edx
c0003232:	53                   	push   ebx
c0003233:	83 ec 0c             	sub    esp,0xc
c0003236:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0003239:	83 f8 02             	cmp    eax,0x2
c000323c:	74 78                	je     c00032b6 <get_fat.isra.2+0xa2>
c000323e:	83 f8 03             	cmp    eax,0x3
c0003241:	0f 84 96 00 00 00    	je     c00032dd <get_fat.isra.2+0xc9>
c0003247:	48                   	dec    eax
c0003248:	0f 85 bd 00 00 00    	jne    c000330b <get_fat.isra.2+0xf7>
c000324e:	89 d3                	mov    ebx,edx
c0003250:	89 f8                	mov    eax,edi
c0003252:	d1 eb                	shr    ebx,1
c0003254:	01 d3                	add    ebx,edx
c0003256:	89 da                	mov    edx,ebx
c0003258:	c1 ea 09             	shr    edx,0x9
c000325b:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c000325e:	e8 db f0 ff ff       	call   c000233e <move_window>
c0003263:	85 c0                	test   eax,eax
c0003265:	74 08                	je     c000326f <get_fat.isra.2+0x5b>
c0003267:	83 c9 ff             	or     ecx,0xffffffff
c000326a:	e9 9c 00 00 00       	jmp    c000330b <get_fat.isra.2+0xf7>
c000326f:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0003272:	89 f8                	mov    eax,edi
c0003274:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c000327a:	89 ea                	mov    edx,ebp
c000327c:	8a 5c 1f 34          	mov    bl,BYTE PTR [edi+ebx*1+0x34]
c0003280:	c1 ea 09             	shr    edx,0x9
c0003283:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003286:	e8 b3 f0 ff ff       	call   c000233e <move_window>
c000328b:	85 c0                	test   eax,eax
c000328d:	75 d8                	jne    c0003267 <get_fat.isra.2+0x53>
c000328f:	0f b6 c3             	movzx  eax,bl
c0003292:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003298:	0f b6 5c 2f 34       	movzx  ebx,BYTE PTR [edi+ebp*1+0x34]
c000329d:	c1 e3 08             	shl    ebx,0x8
c00032a0:	09 c3                	or     ebx,eax
c00032a2:	89 d9                	mov    ecx,ebx
c00032a4:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c00032aa:	83 e6 01             	and    esi,0x1
c00032ad:	74 5c                	je     c000330b <get_fat.isra.2+0xf7>
c00032af:	89 d9                	mov    ecx,ebx
c00032b1:	c1 e9 04             	shr    ecx,0x4
c00032b4:	eb 55                	jmp    c000330b <get_fat.isra.2+0xf7>
c00032b6:	c1 ea 08             	shr    edx,0x8
c00032b9:	89 f8                	mov    eax,edi
c00032bb:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00032be:	e8 7b f0 ff ff       	call   c000233e <move_window>
c00032c3:	85 c0                	test   eax,eax
c00032c5:	75 a0                	jne    c0003267 <get_fat.isra.2+0x53>
c00032c7:	01 f6                	add    esi,esi
c00032c9:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00032cf:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00032d3:	e8 ff ea ff ff       	call   c0001dd7 <ld_word>
c00032d8:	0f b7 c8             	movzx  ecx,ax
c00032db:	eb 2e                	jmp    c000330b <get_fat.isra.2+0xf7>
c00032dd:	c1 ea 07             	shr    edx,0x7
c00032e0:	89 f8                	mov    eax,edi
c00032e2:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00032e5:	e8 54 f0 ff ff       	call   c000233e <move_window>
c00032ea:	85 c0                	test   eax,eax
c00032ec:	0f 85 75 ff ff ff    	jne    c0003267 <get_fat.isra.2+0x53>
c00032f2:	c1 e6 02             	shl    esi,0x2
c00032f5:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00032fb:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00032ff:	e8 e0 ea ff ff       	call   c0001de4 <ld_dword>
c0003304:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003309:	89 c1                	mov    ecx,eax
c000330b:	83 c4 0c             	add    esp,0xc
c000330e:	89 c8                	mov    eax,ecx
c0003310:	5b                   	pop    ebx
c0003311:	5e                   	pop    esi
c0003312:	5f                   	pop    edi
c0003313:	5d                   	pop    ebp
c0003314:	c3                   	ret    
c0003315:	89 c8                	mov    eax,ecx
c0003317:	c3                   	ret    

c0003318 <dir_sdi>:
c0003318:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c000331e:	0f 87 b6 00 00 00    	ja     c00033da <dir_sdi+0xc2>
c0003324:	55                   	push   ebp
c0003325:	57                   	push   edi
c0003326:	56                   	push   esi
c0003327:	53                   	push   ebx
c0003328:	89 d3                	mov    ebx,edx
c000332a:	83 ec 1c             	sub    esp,0x1c
c000332d:	f6 c2 1f             	test   dl,0x1f
c0003330:	74 0a                	je     c000333c <dir_sdi+0x24>
c0003332:	b8 02 00 00 00       	mov    eax,0x2
c0003337:	e9 96 00 00 00       	jmp    c00033d2 <dir_sdi+0xba>
c000333c:	89 c6                	mov    esi,eax
c000333e:	8b 38                	mov    edi,DWORD PTR [eax]
c0003340:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c0003343:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0003346:	85 c9                	test   ecx,ecx
c0003348:	75 23                	jne    c000336d <dir_sdi+0x55>
c000334a:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c000334d:	76 07                	jbe    c0003356 <dir_sdi+0x3e>
c000334f:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c0003352:	85 c0                	test   eax,eax
c0003354:	75 15                	jne    c000336b <dir_sdi+0x53>
c0003356:	89 da                	mov    edx,ebx
c0003358:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c000335c:	c1 ea 05             	shr    edx,0x5
c000335f:	39 c2                	cmp    edx,eax
c0003361:	73 cf                	jae    c0003332 <dir_sdi+0x1a>
c0003363:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c0003366:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003369:	eb 3d                	jmp    c00033a8 <dir_sdi+0x90>
c000336b:	89 c1                	mov    ecx,eax
c000336d:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0003371:	c1 e5 09             	shl    ebp,0x9
c0003374:	89 ca                	mov    edx,ecx
c0003376:	39 eb                	cmp    ebx,ebp
c0003378:	72 1c                	jb     c0003396 <dir_sdi+0x7e>
c000337a:	8b 06                	mov    eax,DWORD PTR [esi]
c000337c:	e8 93 fe ff ff       	call   c0003214 <get_fat.isra.2>
c0003381:	89 c1                	mov    ecx,eax
c0003383:	83 f8 ff             	cmp    eax,0xffffffff
c0003386:	74 45                	je     c00033cd <dir_sdi+0xb5>
c0003388:	83 f8 01             	cmp    eax,0x1
c000338b:	76 a5                	jbe    c0003332 <dir_sdi+0x1a>
c000338d:	39 47 18             	cmp    DWORD PTR [edi+0x18],eax
c0003390:	76 a0                	jbe    c0003332 <dir_sdi+0x1a>
c0003392:	29 eb                	sub    ebx,ebp
c0003394:	eb de                	jmp    c0003374 <dir_sdi+0x5c>
c0003396:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000339a:	89 f8                	mov    eax,edi
c000339c:	e8 8d ec ff ff       	call   c000202e <clst2sect>
c00033a1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00033a5:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00033a8:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c00033ab:	89 4e 14             	mov    DWORD PTR [esi+0x14],ecx
c00033ae:	85 d2                	test   edx,edx
c00033b0:	74 80                	je     c0003332 <dir_sdi+0x1a>
c00033b2:	89 d8                	mov    eax,ebx
c00033b4:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00033ba:	c1 e8 09             	shr    eax,0x9
c00033bd:	01 d0                	add    eax,edx
c00033bf:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00033c2:	8d 44 1f 34          	lea    eax,[edi+ebx*1+0x34]
c00033c6:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00033c9:	31 c0                	xor    eax,eax
c00033cb:	eb 05                	jmp    c00033d2 <dir_sdi+0xba>
c00033cd:	b8 01 00 00 00       	mov    eax,0x1
c00033d2:	83 c4 1c             	add    esp,0x1c
c00033d5:	5b                   	pop    ebx
c00033d6:	5e                   	pop    esi
c00033d7:	5f                   	pop    edi
c00033d8:	5d                   	pop    ebp
c00033d9:	c3                   	ret    
c00033da:	b8 02 00 00 00       	mov    eax,0x2
c00033df:	c3                   	ret    

c00033e0 <create_chain>:
c00033e0:	55                   	push   ebp
c00033e1:	89 c5                	mov    ebp,eax
c00033e3:	57                   	push   edi
c00033e4:	89 d7                	mov    edi,edx
c00033e6:	56                   	push   esi
c00033e7:	53                   	push   ebx
c00033e8:	83 ec 1c             	sub    esp,0x1c
c00033eb:	85 d2                	test   edx,edx
c00033ed:	8b 30                	mov    esi,DWORD PTR [eax]
c00033ef:	75 0e                	jne    c00033ff <create_chain+0x1f>
c00033f1:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c00033f4:	85 c9                	test   ecx,ecx
c00033f6:	74 34                	je     c000342c <create_chain+0x4c>
c00033f8:	39 4e 18             	cmp    DWORD PTR [esi+0x18],ecx
c00033fb:	77 34                	ja     c0003431 <create_chain+0x51>
c00033fd:	eb 2d                	jmp    c000342c <create_chain+0x4c>
c00033ff:	89 f0                	mov    eax,esi
c0003401:	e8 0e fe ff ff       	call   c0003214 <get_fat.isra.2>
c0003406:	89 c3                	mov    ebx,eax
c0003408:	83 f8 01             	cmp    eax,0x1
c000340b:	77 0a                	ja     c0003417 <create_chain+0x37>
c000340d:	bb 01 00 00 00       	mov    ebx,0x1
c0003412:	e9 fe 00 00 00       	jmp    c0003515 <create_chain+0x135>
c0003417:	83 f8 ff             	cmp    eax,0xffffffff
c000341a:	0f 84 f2 00 00 00    	je     c0003512 <create_chain+0x132>
c0003420:	89 f9                	mov    ecx,edi
c0003422:	39 46 18             	cmp    DWORD PTR [esi+0x18],eax
c0003425:	76 0a                	jbe    c0003431 <create_chain+0x51>
c0003427:	e9 e9 00 00 00       	jmp    c0003515 <create_chain+0x135>
c000342c:	b9 01 00 00 00       	mov    ecx,0x1
c0003431:	83 7e 14 00          	cmp    DWORD PTR [esi+0x14],0x0
c0003435:	75 07                	jne    c000343e <create_chain+0x5e>
c0003437:	31 db                	xor    ebx,ebx
c0003439:	e9 d7 00 00 00       	jmp    c0003515 <create_chain+0x135>
c000343e:	39 f9                	cmp    ecx,edi
c0003440:	75 46                	jne    c0003488 <create_chain+0xa8>
c0003442:	8d 59 01             	lea    ebx,[ecx+0x1]
c0003445:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003448:	77 05                	ja     c000344f <create_chain+0x6f>
c000344a:	bb 02 00 00 00       	mov    ebx,0x2
c000344f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003453:	89 da                	mov    edx,ebx
c0003455:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003458:	e8 b7 fd ff ff       	call   c0003214 <get_fat.isra.2>
c000345d:	83 f8 01             	cmp    eax,0x1
c0003460:	74 ab                	je     c000340d <create_chain+0x2d>
c0003462:	83 f8 ff             	cmp    eax,0xffffffff
c0003465:	0f 84 a7 00 00 00    	je     c0003512 <create_chain+0x132>
c000346b:	85 c0                	test   eax,eax
c000346d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003471:	74 11                	je     c0003484 <create_chain+0xa4>
c0003473:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0003476:	83 f8 01             	cmp    eax,0x1
c0003479:	76 0d                	jbe    c0003488 <create_chain+0xa8>
c000347b:	3b 46 18             	cmp    eax,DWORD PTR [esi+0x18]
c000347e:	73 08                	jae    c0003488 <create_chain+0xa8>
c0003480:	89 c1                	mov    ecx,eax
c0003482:	eb 04                	jmp    c0003488 <create_chain+0xa8>
c0003484:	85 db                	test   ebx,ebx
c0003486:	75 3d                	jne    c00034c5 <create_chain+0xe5>
c0003488:	89 cb                	mov    ebx,ecx
c000348a:	43                   	inc    ebx
c000348b:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c000348e:	77 0a                	ja     c000349a <create_chain+0xba>
c0003490:	83 f9 01             	cmp    ecx,0x1
c0003493:	76 a2                	jbe    c0003437 <create_chain+0x57>
c0003495:	bb 02 00 00 00       	mov    ebx,0x2
c000349a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000349e:	89 da                	mov    edx,ebx
c00034a0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00034a3:	e8 6c fd ff ff       	call   c0003214 <get_fat.isra.2>
c00034a8:	85 c0                	test   eax,eax
c00034aa:	74 19                	je     c00034c5 <create_chain+0xe5>
c00034ac:	83 f8 01             	cmp    eax,0x1
c00034af:	0f 84 58 ff ff ff    	je     c000340d <create_chain+0x2d>
c00034b5:	40                   	inc    eax
c00034b6:	74 5a                	je     c0003512 <create_chain+0x132>
c00034b8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00034bc:	39 cb                	cmp    ebx,ecx
c00034be:	75 ca                	jne    c000348a <create_chain+0xaa>
c00034c0:	e9 72 ff ff ff       	jmp    c0003437 <create_chain+0x57>
c00034c5:	83 c9 ff             	or     ecx,0xffffffff
c00034c8:	89 da                	mov    edx,ebx
c00034ca:	89 f0                	mov    eax,esi
c00034cc:	e8 b1 f2 ff ff       	call   c0002782 <put_fat>
c00034d1:	85 c0                	test   eax,eax
c00034d3:	75 36                	jne    c000350b <create_chain+0x12b>
c00034d5:	85 ff                	test   edi,edi
c00034d7:	75 16                	jne    c00034ef <create_chain+0x10f>
c00034d9:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00034dc:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c00034df:	89 5e 10             	mov    DWORD PTR [esi+0x10],ebx
c00034e2:	8d 57 fe             	lea    edx,[edi-0x2]
c00034e5:	39 d0                	cmp    eax,edx
c00034e7:	77 17                	ja     c0003500 <create_chain+0x120>
c00034e9:	48                   	dec    eax
c00034ea:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00034ed:	eb 11                	jmp    c0003500 <create_chain+0x120>
c00034ef:	89 d9                	mov    ecx,ebx
c00034f1:	89 fa                	mov    edx,edi
c00034f3:	89 f0                	mov    eax,esi
c00034f5:	e8 88 f2 ff ff       	call   c0002782 <put_fat>
c00034fa:	85 c0                	test   eax,eax
c00034fc:	74 db                	je     c00034d9 <create_chain+0xf9>
c00034fe:	eb 0b                	jmp    c000350b <create_chain+0x12b>
c0003500:	8a 46 04             	mov    al,BYTE PTR [esi+0x4]
c0003503:	83 c8 01             	or     eax,0x1
c0003506:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c0003509:	eb 0a                	jmp    c0003515 <create_chain+0x135>
c000350b:	48                   	dec    eax
c000350c:	0f 85 fb fe ff ff    	jne    c000340d <create_chain+0x2d>
c0003512:	83 cb ff             	or     ebx,0xffffffff
c0003515:	83 c4 1c             	add    esp,0x1c
c0003518:	89 d8                	mov    eax,ebx
c000351a:	5b                   	pop    ebx
c000351b:	5e                   	pop    esi
c000351c:	5f                   	pop    edi
c000351d:	5d                   	pop    ebp
c000351e:	c3                   	ret    

c000351f <remove_chain>:
c000351f:	55                   	push   ebp
c0003520:	57                   	push   edi
c0003521:	56                   	push   esi
c0003522:	89 d6                	mov    esi,edx
c0003524:	53                   	push   ebx
c0003525:	83 ec 0c             	sub    esp,0xc
c0003528:	83 fa 01             	cmp    edx,0x1
c000352b:	8b 18                	mov    ebx,DWORD PTR [eax]
c000352d:	76 6a                	jbe    c0003599 <remove_chain+0x7a>
c000352f:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c0003532:	76 65                	jbe    c0003599 <remove_chain+0x7a>
c0003534:	89 c5                	mov    ebp,eax
c0003536:	89 ca                	mov    edx,ecx
c0003538:	85 c9                	test   ecx,ecx
c000353a:	74 0e                	je     c000354a <remove_chain+0x2b>
c000353c:	83 c9 ff             	or     ecx,0xffffffff
c000353f:	89 d8                	mov    eax,ebx
c0003541:	e8 3c f2 ff ff       	call   c0002782 <put_fat>
c0003546:	85 c0                	test   eax,eax
c0003548:	75 5b                	jne    c00035a5 <remove_chain+0x86>
c000354a:	89 f2                	mov    edx,esi
c000354c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000354f:	e8 c0 fc ff ff       	call   c0003214 <get_fat.isra.2>
c0003554:	89 c7                	mov    edi,eax
c0003556:	85 c0                	test   eax,eax
c0003558:	75 04                	jne    c000355e <remove_chain+0x3f>
c000355a:	31 c0                	xor    eax,eax
c000355c:	eb 47                	jmp    c00035a5 <remove_chain+0x86>
c000355e:	83 f8 01             	cmp    eax,0x1
c0003561:	74 36                	je     c0003599 <remove_chain+0x7a>
c0003563:	83 f8 ff             	cmp    eax,0xffffffff
c0003566:	74 38                	je     c00035a0 <remove_chain+0x81>
c0003568:	31 c9                	xor    ecx,ecx
c000356a:	89 f2                	mov    edx,esi
c000356c:	89 d8                	mov    eax,ebx
c000356e:	e8 0f f2 ff ff       	call   c0002782 <put_fat>
c0003573:	85 c0                	test   eax,eax
c0003575:	75 2e                	jne    c00035a5 <remove_chain+0x86>
c0003577:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000357a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000357d:	8d 4a fe             	lea    ecx,[edx-0x2]
c0003580:	39 c8                	cmp    eax,ecx
c0003582:	73 0d                	jae    c0003591 <remove_chain+0x72>
c0003584:	40                   	inc    eax
c0003585:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0003588:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c000358b:	83 c8 01             	or     eax,0x1
c000358e:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c0003591:	89 fe                	mov    esi,edi
c0003593:	39 fa                	cmp    edx,edi
c0003595:	77 b3                	ja     c000354a <remove_chain+0x2b>
c0003597:	eb c1                	jmp    c000355a <remove_chain+0x3b>
c0003599:	b8 02 00 00 00       	mov    eax,0x2
c000359e:	eb 05                	jmp    c00035a5 <remove_chain+0x86>
c00035a0:	b8 01 00 00 00       	mov    eax,0x1
c00035a5:	83 c4 0c             	add    esp,0xc
c00035a8:	5b                   	pop    ebx
c00035a9:	5e                   	pop    esi
c00035aa:	5f                   	pop    edi
c00035ab:	5d                   	pop    ebp
c00035ac:	c3                   	ret    

c00035ad <dir_next>:
c00035ad:	55                   	push   ebp
c00035ae:	57                   	push   edi
c00035af:	56                   	push   esi
c00035b0:	53                   	push   ebx
c00035b1:	83 ec 1c             	sub    esp,0x1c
c00035b4:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00035b7:	8b 28                	mov    ebp,DWORD PTR [eax]
c00035b9:	83 c7 20             	add    edi,0x20
c00035bc:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00035c2:	76 07                	jbe    c00035cb <dir_next+0x1e>
c00035c4:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00035cb:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c00035ce:	b9 04 00 00 00       	mov    ecx,0x4
c00035d3:	85 f6                	test   esi,esi
c00035d5:	0f 84 cd 00 00 00    	je     c00036a8 <dir_next+0xfb>
c00035db:	89 c3                	mov    ebx,eax
c00035dd:	89 d1                	mov    ecx,edx
c00035df:	89 f8                	mov    eax,edi
c00035e1:	25 ff 01 00 00       	and    eax,0x1ff
c00035e6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00035ea:	0f 85 a8 00 00 00    	jne    c0003698 <dir_next+0xeb>
c00035f0:	46                   	inc    esi
c00035f1:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00035f4:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c00035f7:	85 d2                	test   edx,edx
c00035f9:	75 22                	jne    c000361d <dir_next+0x70>
c00035fb:	89 fa                	mov    edx,edi
c00035fd:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003601:	c1 ea 05             	shr    edx,0x5
c0003604:	39 c2                	cmp    edx,eax
c0003606:	0f 82 8c 00 00 00    	jb     c0003698 <dir_next+0xeb>
c000360c:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003613:	b9 04 00 00 00       	mov    ecx,0x4
c0003618:	e9 8b 00 00 00       	jmp    c00036a8 <dir_next+0xfb>
c000361d:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0003621:	89 fe                	mov    esi,edi
c0003623:	48                   	dec    eax
c0003624:	c1 ee 09             	shr    esi,0x9
c0003627:	85 f0                	test   eax,esi
c0003629:	75 6d                	jne    c0003698 <dir_next+0xeb>
c000362b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000362f:	89 e8                	mov    eax,ebp
c0003631:	e8 de fb ff ff       	call   c0003214 <get_fat.isra.2>
c0003636:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000363a:	89 c6                	mov    esi,eax
c000363c:	83 f8 01             	cmp    eax,0x1
c000363f:	77 07                	ja     c0003648 <dir_next+0x9b>
c0003641:	b9 02 00 00 00       	mov    ecx,0x2
c0003646:	eb 60                	jmp    c00036a8 <dir_next+0xfb>
c0003648:	83 f8 ff             	cmp    eax,0xffffffff
c000364b:	75 07                	jne    c0003654 <dir_next+0xa7>
c000364d:	b9 01 00 00 00       	mov    ecx,0x1
c0003652:	eb 54                	jmp    c00036a8 <dir_next+0xfb>
c0003654:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003657:	77 30                	ja     c0003689 <dir_next+0xdc>
c0003659:	85 c9                	test   ecx,ecx
c000365b:	74 af                	je     c000360c <dir_next+0x5f>
c000365d:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003660:	89 d8                	mov    eax,ebx
c0003662:	e8 79 fd ff ff       	call   c00033e0 <create_chain>
c0003667:	b9 07 00 00 00       	mov    ecx,0x7
c000366c:	89 c6                	mov    esi,eax
c000366e:	85 c0                	test   eax,eax
c0003670:	74 36                	je     c00036a8 <dir_next+0xfb>
c0003672:	83 f8 01             	cmp    eax,0x1
c0003675:	74 ca                	je     c0003641 <dir_next+0x94>
c0003677:	83 f8 ff             	cmp    eax,0xffffffff
c000367a:	74 d1                	je     c000364d <dir_next+0xa0>
c000367c:	89 c2                	mov    edx,eax
c000367e:	89 e8                	mov    eax,ebp
c0003680:	e8 54 f2 ff ff       	call   c00028d9 <dir_clear>
c0003685:	85 c0                	test   eax,eax
c0003687:	75 c4                	jne    c000364d <dir_next+0xa0>
c0003689:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000368c:	89 f2                	mov    edx,esi
c000368e:	89 e8                	mov    eax,ebp
c0003690:	e8 99 e9 ff ff       	call   c000202e <clst2sect>
c0003695:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003698:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000369c:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c000369f:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c00036a3:	31 c9                	xor    ecx,ecx
c00036a5:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00036a8:	83 c4 1c             	add    esp,0x1c
c00036ab:	89 c8                	mov    eax,ecx
c00036ad:	5b                   	pop    ebx
c00036ae:	5e                   	pop    esi
c00036af:	5f                   	pop    edi
c00036b0:	5d                   	pop    ebp
c00036b1:	c3                   	ret    

c00036b2 <dir_alloc>:
c00036b2:	55                   	push   ebp
c00036b3:	89 c5                	mov    ebp,eax
c00036b5:	57                   	push   edi
c00036b6:	89 d7                	mov    edi,edx
c00036b8:	56                   	push   esi
c00036b9:	31 d2                	xor    edx,edx
c00036bb:	53                   	push   ebx
c00036bc:	83 ec 0c             	sub    esp,0xc
c00036bf:	8b 30                	mov    esi,DWORD PTR [eax]
c00036c1:	e8 52 fc ff ff       	call   c0003318 <dir_sdi>
c00036c6:	85 c0                	test   eax,eax
c00036c8:	75 3b                	jne    c0003705 <dir_alloc+0x53>
c00036ca:	31 db                	xor    ebx,ebx
c00036cc:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00036cf:	89 f0                	mov    eax,esi
c00036d1:	e8 68 ec ff ff       	call   c000233e <move_window>
c00036d6:	85 c0                	test   eax,eax
c00036d8:	75 2b                	jne    c0003705 <dir_alloc+0x53>
c00036da:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c00036dd:	0f b6 12             	movzx  edx,BYTE PTR [edx]
c00036e0:	85 d2                	test   edx,edx
c00036e2:	74 08                	je     c00036ec <dir_alloc+0x3a>
c00036e4:	81 fa e5 00 00 00    	cmp    edx,0xe5
c00036ea:	75 07                	jne    c00036f3 <dir_alloc+0x41>
c00036ec:	43                   	inc    ebx
c00036ed:	39 fb                	cmp    ebx,edi
c00036ef:	75 04                	jne    c00036f5 <dir_alloc+0x43>
c00036f1:	eb 1c                	jmp    c000370f <dir_alloc+0x5d>
c00036f3:	31 db                	xor    ebx,ebx
c00036f5:	ba 01 00 00 00       	mov    edx,0x1
c00036fa:	89 e8                	mov    eax,ebp
c00036fc:	e8 ac fe ff ff       	call   c00035ad <dir_next>
c0003701:	85 c0                	test   eax,eax
c0003703:	74 c7                	je     c00036cc <dir_alloc+0x1a>
c0003705:	83 f8 04             	cmp    eax,0x4
c0003708:	75 05                	jne    c000370f <dir_alloc+0x5d>
c000370a:	b8 07 00 00 00       	mov    eax,0x7
c000370f:	83 c4 0c             	add    esp,0xc
c0003712:	5b                   	pop    ebx
c0003713:	5e                   	pop    esi
c0003714:	5f                   	pop    edi
c0003715:	5d                   	pop    ebp
c0003716:	c3                   	ret    

c0003717 <dir_read>:
c0003717:	55                   	push   ebp
c0003718:	57                   	push   edi
c0003719:	bf ff ff ff ff       	mov    edi,0xffffffff
c000371e:	56                   	push   esi
c000371f:	be 04 00 00 00       	mov    esi,0x4
c0003724:	53                   	push   ebx
c0003725:	89 c3                	mov    ebx,eax
c0003727:	83 ec 1c             	sub    esp,0x1c
c000372a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000372e:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003730:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003735:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003738:	85 d2                	test   edx,edx
c000373a:	0f 84 e3 00 00 00    	je     c0003823 <dir_read+0x10c>
c0003740:	89 e8                	mov    eax,ebp
c0003742:	e8 f7 eb ff ff       	call   c000233e <move_window>
c0003747:	89 c6                	mov    esi,eax
c0003749:	85 c0                	test   eax,eax
c000374b:	0f 85 dd 00 00 00    	jne    c000382e <dir_read+0x117>
c0003751:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003754:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0003757:	88 04 24             	mov    BYTE PTR [esp],al
c000375a:	85 c0                	test   eax,eax
c000375c:	0f 84 c7 00 00 00    	je     c0003829 <dir_read+0x112>
c0003762:	8a 4a 0b             	mov    cl,BYTE PTR [edx+0xb]
c0003765:	83 e1 3f             	and    ecx,0x3f
c0003768:	83 f8 2e             	cmp    eax,0x2e
c000376b:	88 4b 06             	mov    BYTE PTR [ebx+0x6],cl
c000376e:	0f 84 95 00 00 00    	je     c0003809 <dir_read+0xf2>
c0003774:	3d e5 00 00 00       	cmp    eax,0xe5
c0003779:	0f 84 8a 00 00 00    	je     c0003809 <dir_read+0xf2>
c000377f:	0f b6 c9             	movzx  ecx,cl
c0003782:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003786:	83 e1 df             	and    ecx,0xffffffdf
c0003789:	83 f9 08             	cmp    ecx,0x8
c000378c:	0f 94 c1             	sete   cl
c000378f:	0f b6 c9             	movzx  ecx,cl
c0003792:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c0003796:	75 71                	jne    c0003809 <dir_read+0xf2>
c0003798:	83 7c 24 08 0f       	cmp    DWORD PTR [esp+0x8],0xf
c000379d:	75 4a                	jne    c00037e9 <dir_read+0xd2>
c000379f:	f6 04 24 40          	test   BYTE PTR [esp],0x40
c00037a3:	74 16                	je     c00037bb <dir_read+0xa4>
c00037a5:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00037a8:	81 24 24 bf 00 00 00 	and    DWORD PTR [esp],0xbf
c00037af:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00037b3:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00037b6:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00037b9:	eb 0e                	jmp    c00037c9 <dir_read+0xb2>
c00037bb:	89 f9                	mov    ecx,edi
c00037bd:	bf ff ff ff ff       	mov    edi,0xffffffff
c00037c2:	0f b6 c9             	movzx  ecx,cl
c00037c5:	39 c1                	cmp    ecx,eax
c00037c7:	75 45                	jne    c000380e <dir_read+0xf7>
c00037c9:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00037cd:	bf ff ff ff ff       	mov    edi,0xffffffff
c00037d2:	3a 42 0d             	cmp    al,BYTE PTR [edx+0xd]
c00037d5:	75 37                	jne    c000380e <dir_read+0xf7>
c00037d7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00037da:	e8 6c e8 ff ff       	call   c000204b <pick_lfn>
c00037df:	85 c0                	test   eax,eax
c00037e1:	74 2b                	je     c000380e <dir_read+0xf7>
c00037e3:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00037e6:	4f                   	dec    edi
c00037e7:	eb 25                	jmp    c000380e <dir_read+0xf7>
c00037e9:	89 f8                	mov    eax,edi
c00037eb:	84 c0                	test   al,al
c00037ed:	75 11                	jne    c0003800 <dir_read+0xe9>
c00037ef:	89 d0                	mov    eax,edx
c00037f1:	e8 32 ea ff ff       	call   c0002228 <sum_sfn>
c00037f6:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c00037fa:	75 04                	jne    c0003800 <dir_read+0xe9>
c00037fc:	31 f6                	xor    esi,esi
c00037fe:	eb 35                	jmp    c0003835 <dir_read+0x11e>
c0003800:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003807:	eb 2c                	jmp    c0003835 <dir_read+0x11e>
c0003809:	bf ff ff ff ff       	mov    edi,0xffffffff
c000380e:	31 d2                	xor    edx,edx
c0003810:	89 d8                	mov    eax,ebx
c0003812:	e8 96 fd ff ff       	call   c00035ad <dir_next>
c0003817:	89 c6                	mov    esi,eax
c0003819:	85 c0                	test   eax,eax
c000381b:	0f 84 14 ff ff ff    	je     c0003735 <dir_read+0x1e>
c0003821:	eb 0b                	jmp    c000382e <dir_read+0x117>
c0003823:	85 f6                	test   esi,esi
c0003825:	74 d5                	je     c00037fc <dir_read+0xe5>
c0003827:	eb 05                	jmp    c000382e <dir_read+0x117>
c0003829:	be 04 00 00 00       	mov    esi,0x4
c000382e:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003835:	83 c4 1c             	add    esp,0x1c
c0003838:	89 f0                	mov    eax,esi
c000383a:	5b                   	pop    ebx
c000383b:	5e                   	pop    esi
c000383c:	5f                   	pop    edi
c000383d:	5d                   	pop    ebp
c000383e:	c3                   	ret    

c000383f <dir_remove>:
c000383f:	57                   	push   edi
c0003840:	56                   	push   esi
c0003841:	53                   	push   ebx
c0003842:	89 c3                	mov    ebx,eax
c0003844:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003847:	8b 30                	mov    esi,DWORD PTR [eax]
c0003849:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000384c:	83 fa ff             	cmp    edx,0xffffffff
c000384f:	74 09                	je     c000385a <dir_remove+0x1b>
c0003851:	e8 c2 fa ff ff       	call   c0003318 <dir_sdi>
c0003856:	85 c0                	test   eax,eax
c0003858:	75 34                	jne    c000388e <dir_remove+0x4f>
c000385a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000385d:	89 f0                	mov    eax,esi
c000385f:	e8 da ea ff ff       	call   c000233e <move_window>
c0003864:	85 c0                	test   eax,eax
c0003866:	75 1c                	jne    c0003884 <dir_remove+0x45>
c0003868:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000386b:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c000386e:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003872:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c0003875:	73 17                	jae    c000388e <dir_remove+0x4f>
c0003877:	31 d2                	xor    edx,edx
c0003879:	89 d8                	mov    eax,ebx
c000387b:	e8 2d fd ff ff       	call   c00035ad <dir_next>
c0003880:	85 c0                	test   eax,eax
c0003882:	74 d6                	je     c000385a <dir_remove+0x1b>
c0003884:	83 f8 04             	cmp    eax,0x4
c0003887:	75 05                	jne    c000388e <dir_remove+0x4f>
c0003889:	b8 02 00 00 00       	mov    eax,0x2
c000388e:	5b                   	pop    ebx
c000388f:	5e                   	pop    esi
c0003890:	5f                   	pop    edi
c0003891:	c3                   	ret    

c0003892 <dir_find>:
c0003892:	55                   	push   ebp
c0003893:	31 d2                	xor    edx,edx
c0003895:	57                   	push   edi
c0003896:	56                   	push   esi
c0003897:	53                   	push   ebx
c0003898:	89 c3                	mov    ebx,eax
c000389a:	83 ec 1c             	sub    esp,0x1c
c000389d:	8b 00                	mov    eax,DWORD PTR [eax]
c000389f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00038a3:	89 d8                	mov    eax,ebx
c00038a5:	e8 6e fa ff ff       	call   c0003318 <dir_sdi>
c00038aa:	89 c6                	mov    esi,eax
c00038ac:	85 c0                	test   eax,eax
c00038ae:	0f 85 1d 01 00 00    	jne    c00039d1 <dir_find+0x13f>
c00038b4:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00038bb:	c6 44 24 0b ff       	mov    BYTE PTR [esp+0xb],0xff
c00038c0:	bf ff ff ff ff       	mov    edi,0xffffffff
c00038c5:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00038c8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00038cc:	e8 6d ea ff ff       	call   c000233e <move_window>
c00038d1:	89 c6                	mov    esi,eax
c00038d3:	85 c0                	test   eax,eax
c00038d5:	0f 85 f6 00 00 00    	jne    c00039d1 <dir_find+0x13f>
c00038db:	8b 6b 1c             	mov    ebp,DWORD PTR [ebx+0x1c]
c00038de:	0f b6 4d 00          	movzx  ecx,BYTE PTR [ebp+0x0]
c00038e2:	88 4c 24 04          	mov    BYTE PTR [esp+0x4],cl
c00038e6:	85 c9                	test   ecx,ecx
c00038e8:	0f 84 de 00 00 00    	je     c00039cc <dir_find+0x13a>
c00038ee:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c00038f1:	89 d0                	mov    eax,edx
c00038f3:	83 e0 3f             	and    eax,0x3f
c00038f6:	81 f9 e5 00 00 00    	cmp    ecx,0xe5
c00038fc:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00038ff:	0f 84 a6 00 00 00    	je     c00039ab <dir_find+0x119>
c0003905:	80 e2 08             	and    dl,0x8
c0003908:	0f b6 c0             	movzx  eax,al
c000390b:	74 0b                	je     c0003918 <dir_find+0x86>
c000390d:	83 f8 0f             	cmp    eax,0xf
c0003910:	0f 85 95 00 00 00    	jne    c00039ab <dir_find+0x119>
c0003916:	eb 05                	jmp    c000391d <dir_find+0x8b>
c0003918:	83 f8 0f             	cmp    eax,0xf
c000391b:	75 62                	jne    c000397f <dir_find+0xed>
c000391d:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c0003921:	0f 85 90 00 00 00    	jne    c00039b7 <dir_find+0x125>
c0003927:	f6 44 24 04 40       	test   BYTE PTR [esp+0x4],0x40
c000392c:	74 17                	je     c0003945 <dir_find+0xb3>
c000392e:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003931:	81 64 24 04 bf 00 00 00 	and    DWORD PTR [esp+0x4],0xbf
c0003939:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000393d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003940:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003943:	eb 13                	jmp    c0003958 <dir_find+0xc6>
c0003945:	89 f8                	mov    eax,edi
c0003947:	bf ff ff ff ff       	mov    edi,0xffffffff
c000394c:	0f b6 d0             	movzx  edx,al
c000394f:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0003954:	39 c2                	cmp    edx,eax
c0003956:	75 5f                	jne    c00039b7 <dir_find+0x125>
c0003958:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000395c:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003961:	3a 45 0d             	cmp    al,BYTE PTR [ebp+0xd]
c0003964:	75 51                	jne    c00039b7 <dir_find+0x125>
c0003966:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000396a:	89 ea                	mov    edx,ebp
c000396c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000396f:	e8 37 f3 ff ff       	call   c0002cab <cmp_lfn>
c0003974:	85 c0                	test   eax,eax
c0003976:	74 3f                	je     c00039b7 <dir_find+0x125>
c0003978:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000397c:	4f                   	dec    edi
c000397d:	eb 38                	jmp    c00039b7 <dir_find+0x125>
c000397f:	89 f8                	mov    eax,edi
c0003981:	84 c0                	test   al,al
c0003983:	75 0d                	jne    c0003992 <dir_find+0x100>
c0003985:	89 e8                	mov    eax,ebp
c0003987:	e8 9c e8 ff ff       	call   c0002228 <sum_sfn>
c000398c:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c0003990:	74 3f                	je     c00039d1 <dir_find+0x13f>
c0003992:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c0003996:	75 13                	jne    c00039ab <dir_find+0x119>
c0003998:	8d 53 20             	lea    edx,[ebx+0x20]
c000399b:	b9 0b 00 00 00       	mov    ecx,0xb
c00039a0:	89 e8                	mov    eax,ebp
c00039a2:	e8 7c e4 ff ff       	call   c0001e23 <mem_cmp>
c00039a7:	85 c0                	test   eax,eax
c00039a9:	74 26                	je     c00039d1 <dir_find+0x13f>
c00039ab:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00039b2:	bf ff ff ff ff       	mov    edi,0xffffffff
c00039b7:	31 d2                	xor    edx,edx
c00039b9:	89 d8                	mov    eax,ebx
c00039bb:	e8 ed fb ff ff       	call   c00035ad <dir_next>
c00039c0:	89 c6                	mov    esi,eax
c00039c2:	85 c0                	test   eax,eax
c00039c4:	0f 84 fb fe ff ff    	je     c00038c5 <dir_find+0x33>
c00039ca:	eb 05                	jmp    c00039d1 <dir_find+0x13f>
c00039cc:	be 04 00 00 00       	mov    esi,0x4
c00039d1:	83 c4 1c             	add    esp,0x1c
c00039d4:	89 f0                	mov    eax,esi
c00039d6:	5b                   	pop    ebx
c00039d7:	5e                   	pop    esi
c00039d8:	5f                   	pop    edi
c00039d9:	5d                   	pop    ebp
c00039da:	c3                   	ret    

c00039db <follow_path>:
c00039db:	56                   	push   esi
c00039dc:	53                   	push   ebx
c00039dd:	89 c3                	mov    ebx,eax
c00039df:	83 ec 14             	sub    esp,0x14
c00039e2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00039e6:	8b 30                	mov    esi,DWORD PTR [eax]
c00039e8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00039ec:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00039ef:	83 fa 5c             	cmp    edx,0x5c
c00039f2:	75 07                	jne    c00039fb <follow_path+0x20>
c00039f4:	40                   	inc    eax
c00039f5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00039f9:	eb ed                	jmp    c00039e8 <follow_path+0xd>
c00039fb:	83 fa 2f             	cmp    edx,0x2f
c00039fe:	74 f4                	je     c00039f4 <follow_path+0x19>
c0003a00:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0003a07:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0003a0a:	77 3e                	ja     c0003a4a <follow_path+0x6f>
c0003a0c:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c0003a10:	31 d2                	xor    edx,edx
c0003a12:	89 d8                	mov    eax,ebx
c0003a14:	e8 ff f8 ff ff       	call   c0003318 <dir_sdi>
c0003a19:	eb 4f                	jmp    c0003a6a <follow_path+0x8f>
c0003a1b:	89 d8                	mov    eax,ebx
c0003a1d:	e8 70 fe ff ff       	call   c0003892 <dir_find>
c0003a22:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c0003a25:	85 c0                	test   eax,eax
c0003a27:	75 32                	jne    c0003a5b <follow_path+0x80>
c0003a29:	80 e2 04             	and    dl,0x4
c0003a2c:	75 3c                	jne    c0003a6a <follow_path+0x8f>
c0003a2e:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0003a32:	74 31                	je     c0003a65 <follow_path+0x8a>
c0003a34:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003a37:	25 ff 01 00 00       	and    eax,0x1ff
c0003a3c:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003a40:	8a 06                	mov    al,BYTE PTR [esi]
c0003a42:	e8 7c f7 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0003a47:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003a4a:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003a4e:	89 d8                	mov    eax,ebx
c0003a50:	e8 7f ef ff ff       	call   c00029d4 <create_name>
c0003a55:	85 c0                	test   eax,eax
c0003a57:	74 c2                	je     c0003a1b <follow_path+0x40>
c0003a59:	eb 0f                	jmp    c0003a6a <follow_path+0x8f>
c0003a5b:	83 f8 04             	cmp    eax,0x4
c0003a5e:	75 0a                	jne    c0003a6a <follow_path+0x8f>
c0003a60:	80 e2 04             	and    dl,0x4
c0003a63:	75 05                	jne    c0003a6a <follow_path+0x8f>
c0003a65:	b8 05 00 00 00       	mov    eax,0x5
c0003a6a:	83 c4 14             	add    esp,0x14
c0003a6d:	5b                   	pop    ebx
c0003a6e:	5e                   	pop    esi
c0003a6f:	c3                   	ret    

c0003a70 <dir_register>:
c0003a70:	55                   	push   ebp
c0003a71:	57                   	push   edi
c0003a72:	56                   	push   esi
c0003a73:	be 06 00 00 00       	mov    esi,0x6
c0003a78:	53                   	push   ebx
c0003a79:	83 ec 2c             	sub    esp,0x2c
c0003a7c:	8a 50 2b             	mov    dl,BYTE PTR [eax+0x2b]
c0003a7f:	80 e2 a0             	and    dl,0xa0
c0003a82:	0f 85 66 01 00 00    	jne    c0003bee <dir_register+0x17e>
c0003a88:	8b 38                	mov    edi,DWORD PTR [eax]
c0003a8a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003a92:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003a95:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003a99:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003a9e:	74 06                	je     c0003aa6 <dir_register+0x36>
c0003aa0:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003aa4:	eb ef                	jmp    c0003a95 <dir_register+0x25>
c0003aa6:	89 c3                	mov    ebx,eax
c0003aa8:	b9 0c 00 00 00       	mov    ecx,0xc
c0003aad:	8d 40 20             	lea    eax,[eax+0x20]
c0003ab0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003ab4:	89 c2                	mov    edx,eax
c0003ab6:	8d 44 24 14          	lea    eax,[esp+0x14]
c0003aba:	e8 44 e3 ff ff       	call   c0001e03 <mem_cpy>
c0003abf:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003ac4:	74 48                	je     c0003b0e <dir_register+0x9e>
c0003ac6:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c0003aca:	bd 01 00 00 00       	mov    ebp,0x1
c0003acf:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003ad2:	55                   	push   ebp
c0003ad3:	8d 54 24 18          	lea    edx,[esp+0x18]
c0003ad7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003adb:	e8 86 e6 ff ff       	call   c0002166 <gen_numname>
c0003ae0:	58                   	pop    eax
c0003ae1:	89 d8                	mov    eax,ebx
c0003ae3:	e8 aa fd ff ff       	call   c0003892 <dir_find>
c0003ae8:	89 c6                	mov    esi,eax
c0003aea:	85 c0                	test   eax,eax
c0003aec:	75 10                	jne    c0003afe <dir_register+0x8e>
c0003aee:	45                   	inc    ebp
c0003aef:	83 fd 64             	cmp    ebp,0x64
c0003af2:	75 db                	jne    c0003acf <dir_register+0x5f>
c0003af4:	be 07 00 00 00       	mov    esi,0x7
c0003af9:	e9 f0 00 00 00       	jmp    c0003bee <dir_register+0x17e>
c0003afe:	83 f8 04             	cmp    eax,0x4
c0003b01:	0f 85 e7 00 00 00    	jne    c0003bee <dir_register+0x17e>
c0003b07:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0003b0b:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c0003b0e:	bd 01 00 00 00       	mov    ebp,0x1
c0003b13:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0003b18:	74 13                	je     c0003b2d <dir_register+0xbd>
c0003b1a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b1e:	b9 0d 00 00 00       	mov    ecx,0xd
c0003b23:	83 c0 0c             	add    eax,0xc
c0003b26:	31 d2                	xor    edx,edx
c0003b28:	f7 f1                	div    ecx
c0003b2a:	8d 68 01             	lea    ebp,[eax+0x1]
c0003b2d:	89 ea                	mov    edx,ebp
c0003b2f:	89 d8                	mov    eax,ebx
c0003b31:	e8 7c fb ff ff       	call   c00036b2 <dir_alloc>
c0003b36:	89 c6                	mov    esi,eax
c0003b38:	85 c0                	test   eax,eax
c0003b3a:	0f 85 ae 00 00 00    	jne    c0003bee <dir_register+0x17e>
c0003b40:	4d                   	dec    ebp
c0003b41:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0003b45:	74 67                	je     c0003bae <dir_register+0x13e>
c0003b47:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003b4a:	89 e8                	mov    eax,ebp
c0003b4c:	c1 e0 05             	shl    eax,0x5
c0003b4f:	29 c2                	sub    edx,eax
c0003b51:	89 d8                	mov    eax,ebx
c0003b53:	e8 c0 f7 ff ff       	call   c0003318 <dir_sdi>
c0003b58:	89 c6                	mov    esi,eax
c0003b5a:	85 c0                	test   eax,eax
c0003b5c:	0f 85 8c 00 00 00    	jne    c0003bee <dir_register+0x17e>
c0003b62:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003b66:	e8 bd e6 ff ff       	call   c0002228 <sum_sfn>
c0003b6b:	0f b6 e8             	movzx  ebp,al
c0003b6e:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003b71:	89 f8                	mov    eax,edi
c0003b73:	e8 c6 e7 ff ff       	call   c000233e <move_window>
c0003b78:	89 c6                	mov    esi,eax
c0003b7a:	85 c0                	test   eax,eax
c0003b7c:	75 70                	jne    c0003bee <dir_register+0x17e>
c0003b7e:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0003b83:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003b86:	83 ec 0c             	sub    esp,0xc
c0003b89:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003b8c:	55                   	push   ebp
c0003b8d:	e8 39 e5 ff ff       	call   c00020cb <put_lfn>
c0003b92:	31 d2                	xor    edx,edx
c0003b94:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003b98:	89 d8                	mov    eax,ebx
c0003b9a:	e8 0e fa ff ff       	call   c00035ad <dir_next>
c0003b9f:	83 c4 10             	add    esp,0x10
c0003ba2:	89 c6                	mov    esi,eax
c0003ba4:	85 c0                	test   eax,eax
c0003ba6:	75 46                	jne    c0003bee <dir_register+0x17e>
c0003ba8:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0003bac:	75 c0                	jne    c0003b6e <dir_register+0xfe>
c0003bae:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003bb1:	89 f8                	mov    eax,edi
c0003bb3:	e8 86 e7 ff ff       	call   c000233e <move_window>
c0003bb8:	89 c6                	mov    esi,eax
c0003bba:	85 c0                	test   eax,eax
c0003bbc:	75 30                	jne    c0003bee <dir_register+0x17e>
c0003bbe:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003bc1:	b9 20 00 00 00       	mov    ecx,0x20
c0003bc6:	31 d2                	xor    edx,edx
c0003bc8:	e8 4b e2 ff ff       	call   c0001e18 <mem_set>
c0003bcd:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003bd0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003bd4:	b9 0b 00 00 00       	mov    ecx,0xb
c0003bd9:	e8 25 e2 ff ff       	call   c0001e03 <mem_cpy>
c0003bde:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003be1:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003be4:	83 e0 18             	and    eax,0x18
c0003be7:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003bea:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003bee:	83 c4 2c             	add    esp,0x2c
c0003bf1:	89 f0                	mov    eax,esi
c0003bf3:	5b                   	pop    ebx
c0003bf4:	5e                   	pop    esi
c0003bf5:	5f                   	pop    edi
c0003bf6:	5d                   	pop    ebp
c0003bf7:	c3                   	ret    

c0003bf8 <f_mount>:
c0003bf8:	53                   	push   ebx
c0003bf9:	83 ec 18             	sub    esp,0x18
c0003bfc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003c00:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003c04:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003c08:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003c0c:	e8 37 e6 ff ff       	call   c0002248 <get_ldnumber>
c0003c11:	89 c2                	mov    edx,eax
c0003c13:	b8 0b 00 00 00       	mov    eax,0xb
c0003c18:	85 d2                	test   edx,edx
c0003c1a:	78 39                	js     c0003c55 <f_mount+0x5d>
c0003c1c:	8b 04 95 a0 64 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd9b60]
c0003c23:	85 c0                	test   eax,eax
c0003c25:	74 03                	je     c0003c2a <f_mount+0x32>
c0003c27:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003c2a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003c2e:	85 c0                	test   eax,eax
c0003c30:	74 03                	je     c0003c35 <f_mount+0x3d>
c0003c32:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003c35:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003c39:	89 04 95 a0 64 02 c0 	mov    DWORD PTR [edx*4-0x3ffd9b60],eax
c0003c40:	31 c0                	xor    eax,eax
c0003c42:	84 db                	test   bl,bl
c0003c44:	74 0f                	je     c0003c55 <f_mount+0x5d>
c0003c46:	31 c9                	xor    ecx,ecx
c0003c48:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003c4c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003c50:	e8 3c e8 ff ff       	call   c0002491 <mount_volume>
c0003c55:	83 c4 18             	add    esp,0x18
c0003c58:	5b                   	pop    ebx
c0003c59:	c3                   	ret    

c0003c5a <f_open>:
c0003c5a:	55                   	push   ebp
c0003c5b:	b8 09 00 00 00       	mov    eax,0x9
c0003c60:	57                   	push   edi
c0003c61:	56                   	push   esi
c0003c62:	53                   	push   ebx
c0003c63:	83 ec 5c             	sub    esp,0x5c
c0003c66:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003c6a:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003c6e:	85 db                	test   ebx,ebx
c0003c70:	0f 84 9f 02 00 00    	je     c0003f15 <f_open+0x2bb>
c0003c76:	89 fd                	mov    ebp,edi
c0003c78:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003c7c:	83 e5 3f             	and    ebp,0x3f
c0003c7f:	89 e8                	mov    eax,ebp
c0003c81:	89 ee                	mov    esi,ebp
c0003c83:	0f b6 c8             	movzx  ecx,al
c0003c86:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003c8a:	e8 02 e8 ff ff       	call   c0002491 <mount_volume>
c0003c8f:	85 c0                	test   eax,eax
c0003c91:	0f 85 78 02 00 00    	jne    c0003f0f <f_open+0x2b5>
c0003c97:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c9b:	83 ec 0c             	sub    esp,0xc
c0003c9e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003ca2:	68 00 02 00 00       	push   0x200
c0003ca7:	e8 74 1f 00 00       	call   c0005c20 <ff_memalloc>
c0003cac:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0003cb0:	83 c4 10             	add    esp,0x10
c0003cb3:	b8 11 00 00 00       	mov    eax,0x11
c0003cb8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003cbd:	0f 84 52 02 00 00    	je     c0003f15 <f_open+0x2bb>
c0003cc3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003cc7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003ccb:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003ccf:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0003cd2:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003cd6:	e8 00 fd ff ff       	call   c00039db <follow_path>
c0003cdb:	85 c0                	test   eax,eax
c0003cdd:	75 0c                	jne    c0003ceb <f_open+0x91>
c0003cdf:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0003ce4:	74 05                	je     c0003ceb <f_open+0x91>
c0003ce6:	b8 06 00 00 00       	mov    eax,0x6
c0003ceb:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003cf1:	0f 84 d5 00 00 00    	je     c0003dcc <f_open+0x172>
c0003cf7:	85 c0                	test   eax,eax
c0003cf9:	74 21                	je     c0003d1c <f_open+0xc2>
c0003cfb:	83 f8 04             	cmp    eax,0x4
c0003cfe:	0f 85 f0 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003d04:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003d08:	e8 63 fd ff ff       	call   c0003a70 <dir_register>
c0003d0d:	85 c0                	test   eax,eax
c0003d0f:	0f 85 df 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003d15:	83 cd 08             	or     ebp,0x8
c0003d18:	89 ee                	mov    esi,ebp
c0003d1a:	eb 2c                	jmp    c0003d48 <f_open+0xee>
c0003d1c:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003d20:	b8 07 00 00 00       	mov    eax,0x7
c0003d25:	80 e2 11             	and    dl,0x11
c0003d28:	0f 85 c6 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003d2e:	b8 08 00 00 00       	mov    eax,0x8
c0003d33:	f7 c7 04 00 00 00    	test   edi,0x4
c0003d39:	0f 85 b5 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003d3f:	83 e7 08             	and    edi,0x8
c0003d42:	0f 84 b1 00 00 00    	je     c0003df9 <f_open+0x19f>
c0003d48:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0003d4c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d50:	89 ea                	mov    edx,ebp
c0003d52:	8a 00                	mov    al,BYTE PTR [eax]
c0003d54:	e8 6a f4 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0003d59:	ba 00 00 21 50       	mov    edx,0x50210000
c0003d5e:	89 c7                	mov    edi,eax
c0003d60:	8d 45 0e             	lea    eax,[ebp+0xe]
c0003d63:	e8 98 e0 ff ff       	call   c0001e00 <st_dword>
c0003d68:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003d6c:	31 c9                	xor    ecx,ecx
c0003d6e:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003d72:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d76:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003d7a:	e8 6d f4 ff ff       	call   c00031ec <st_clust.isra.1>
c0003d7f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003d83:	31 d2                	xor    edx,edx
c0003d85:	83 c0 1c             	add    eax,0x1c
c0003d88:	e8 73 e0 ff ff       	call   c0001e00 <st_dword>
c0003d8d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d91:	85 ff                	test   edi,edi
c0003d93:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003d97:	74 60                	je     c0003df9 <f_open+0x19f>
c0003d99:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d9d:	31 c9                	xor    ecx,ecx
c0003d9f:	8b 68 30             	mov    ebp,DWORD PTR [eax+0x30]
c0003da2:	89 fa                	mov    edx,edi
c0003da4:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003da8:	e8 72 f7 ff ff       	call   c000351f <remove_chain>
c0003dad:	85 c0                	test   eax,eax
c0003daf:	0f 85 3f 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003db5:	89 ea                	mov    edx,ebp
c0003db7:	4f                   	dec    edi
c0003db8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003dbc:	e8 7d e5 ff ff       	call   c000233e <move_window>
c0003dc1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003dc5:	85 c0                	test   eax,eax
c0003dc7:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003dca:	eb 27                	jmp    c0003df3 <f_open+0x199>
c0003dcc:	85 c0                	test   eax,eax
c0003dce:	0f 85 20 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003dd4:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003dd8:	b8 04 00 00 00       	mov    eax,0x4
c0003ddd:	f6 c2 10             	test   dl,0x10
c0003de0:	0f 85 0e 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003de6:	83 e7 02             	and    edi,0x2
c0003de9:	74 0e                	je     c0003df9 <f_open+0x19f>
c0003deb:	b8 07 00 00 00       	mov    eax,0x7
c0003df0:	80 e2 01             	and    dl,0x1
c0003df3:	0f 85 fb 00 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003df9:	f7 c6 08 00 00 00    	test   esi,0x8
c0003dff:	74 03                	je     c0003e04 <f_open+0x1aa>
c0003e01:	83 ce 40             	or     esi,0x40
c0003e04:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0003e08:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003e0c:	8b 45 30             	mov    eax,DWORD PTR [ebp+0x30]
c0003e0f:	89 fa                	mov    edx,edi
c0003e11:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0003e14:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0003e17:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0003e1a:	e8 a4 f3 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0003e1f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003e22:	8d 47 1c             	lea    eax,[edi+0x1c]
c0003e25:	8d 7b 28             	lea    edi,[ebx+0x28]
c0003e28:	e8 b7 df ff ff       	call   c0001de4 <ld_dword>
c0003e2d:	89 2b                	mov    DWORD PTR [ebx],ebp
c0003e2f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003e32:	31 d2                	xor    edx,edx
c0003e34:	66 8b 45 06          	mov    ax,WORD PTR [ebp+0x6]
c0003e38:	b9 00 02 00 00       	mov    ecx,0x200
c0003e3d:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0003e41:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0003e45:	89 f0                	mov    eax,esi
c0003e47:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0003e4e:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0003e51:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0003e58:	89 f8                	mov    eax,edi
c0003e5a:	e8 b9 df ff ff       	call   c0001e18 <mem_set>
c0003e5f:	83 e6 20             	and    esi,0x20
c0003e62:	75 07                	jne    c0003e6b <f_open+0x211>
c0003e64:	31 c0                	xor    eax,eax
c0003e66:	e9 89 00 00 00       	jmp    c0003ef4 <f_open+0x29a>
c0003e6b:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0003e6e:	85 ed                	test   ebp,ebp
c0003e70:	74 f2                	je     c0003e64 <f_open+0x20a>
c0003e72:	89 6b 14             	mov    DWORD PTR [ebx+0x14],ebp
c0003e75:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e79:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0003e7c:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0003e80:	c1 e6 09             	shl    esi,0x9
c0003e83:	39 ee                	cmp    esi,ebp
c0003e85:	73 1c                	jae    c0003ea3 <f_open+0x249>
c0003e87:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003e89:	29 f5                	sub    ebp,esi
c0003e8b:	e8 84 f3 ff ff       	call   c0003214 <get_fat.isra.2>
c0003e90:	89 c2                	mov    edx,eax
c0003e92:	83 f8 01             	cmp    eax,0x1
c0003e95:	76 10                	jbe    c0003ea7 <f_open+0x24d>
c0003e97:	83 f8 ff             	cmp    eax,0xffffffff
c0003e9a:	75 e7                	jne    c0003e83 <f_open+0x229>
c0003e9c:	b8 01 00 00 00       	mov    eax,0x1
c0003ea1:	eb 09                	jmp    c0003eac <f_open+0x252>
c0003ea3:	31 c0                	xor    eax,eax
c0003ea5:	eb 05                	jmp    c0003eac <f_open+0x252>
c0003ea7:	b8 02 00 00 00       	mov    eax,0x2
c0003eac:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0003eaf:	85 c0                	test   eax,eax
c0003eb1:	75 41                	jne    c0003ef4 <f_open+0x29a>
c0003eb3:	f7 c5 ff 01 00 00    	test   ebp,0x1ff
c0003eb9:	74 a9                	je     c0003e64 <f_open+0x20a>
c0003ebb:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0003ebf:	89 f0                	mov    eax,esi
c0003ec1:	e8 68 e1 ff ff       	call   c000202e <clst2sect>
c0003ec6:	89 c2                	mov    edx,eax
c0003ec8:	b8 02 00 00 00       	mov    eax,0x2
c0003ecd:	85 d2                	test   edx,edx
c0003ecf:	74 23                	je     c0003ef4 <f_open+0x29a>
c0003ed1:	c1 ed 09             	shr    ebp,0x9
c0003ed4:	8d 44 15 00          	lea    eax,[ebp+edx*1+0x0]
c0003ed8:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003edb:	6a 01                	push   0x1
c0003edd:	50                   	push   eax
c0003ede:	57                   	push   edi
c0003edf:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003ee3:	50                   	push   eax
c0003ee4:	e8 a3 de ff ff       	call   c0001d8c <disk_read>
c0003ee9:	83 c4 10             	add    esp,0x10
c0003eec:	85 c0                	test   eax,eax
c0003eee:	0f 95 c0             	setne  al
c0003ef1:	0f b6 c0             	movzx  eax,al
c0003ef4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003ef8:	83 ec 0c             	sub    esp,0xc
c0003efb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0003eff:	e8 34 1d 00 00       	call   c0005c38 <ff_memfree>
c0003f04:	83 c4 10             	add    esp,0x10
c0003f07:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003f0b:	85 c0                	test   eax,eax
c0003f0d:	74 06                	je     c0003f15 <f_open+0x2bb>
c0003f0f:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0003f15:	83 c4 5c             	add    esp,0x5c
c0003f18:	5b                   	pop    ebx
c0003f19:	5e                   	pop    esi
c0003f1a:	5f                   	pop    edi
c0003f1b:	5d                   	pop    ebp
c0003f1c:	c3                   	ret    

c0003f1d <f_read>:
c0003f1d:	55                   	push   ebp
c0003f1e:	57                   	push   edi
c0003f1f:	56                   	push   esi
c0003f20:	53                   	push   ebx
c0003f21:	83 ec 2c             	sub    esp,0x2c
c0003f24:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003f28:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003f2c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003f32:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0003f36:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003f3a:	89 d8                	mov    eax,ebx
c0003f3c:	e8 54 e3 ff ff       	call   c0002295 <validate>
c0003f41:	89 c5                	mov    ebp,eax
c0003f43:	85 c0                	test   eax,eax
c0003f45:	0f 85 c7 01 00 00    	jne    c0004112 <f_read+0x1f5>
c0003f4b:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0003f4f:	85 ed                	test   ebp,ebp
c0003f51:	0f 85 bb 01 00 00    	jne    c0004112 <f_read+0x1f5>
c0003f57:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0003f5b:	0f 84 ac 01 00 00    	je     c000410d <f_read+0x1f0>
c0003f61:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0003f64:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0003f67:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003f6b:	39 f0                	cmp    eax,esi
c0003f6d:	0f 86 b0 00 00 00    	jbe    c0004023 <f_read+0x106>
c0003f73:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0003f77:	e9 a7 00 00 00       	jmp    c0004023 <f_read+0x106>
c0003f7c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003f7f:	a9 ff 01 00 00       	test   eax,0x1ff
c0003f84:	0f 85 56 01 00 00    	jne    c00040e0 <f_read+0x1c3>
c0003f8a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003f8e:	0f b7 7a 0a          	movzx  edi,WORD PTR [edx+0xa]
c0003f92:	89 c2                	mov    edx,eax
c0003f94:	4f                   	dec    edi
c0003f95:	c1 ea 09             	shr    edx,0x9
c0003f98:	21 d7                	and    edi,edx
c0003f9a:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0003f9e:	0f 84 8f 00 00 00    	je     c0004033 <f_read+0x116>
c0003fa4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003fa8:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003fab:	89 c8                	mov    eax,ecx
c0003fad:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003fb1:	e8 78 e0 ff ff       	call   c000202e <clst2sect>
c0003fb6:	85 c0                	test   eax,eax
c0003fb8:	0f 84 8d 00 00 00    	je     c000404b <f_read+0x12e>
c0003fbe:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003fc2:	81 7c 24 04 ff 01 00 00 	cmp    DWORD PTR [esp+0x4],0x1ff
c0003fca:	8d 3c 01             	lea    edi,[ecx+eax*1]
c0003fcd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003fd1:	0f 86 bf 00 00 00    	jbe    c0004096 <f_read+0x179>
c0003fd7:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0003fdb:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0003fdf:	c1 ee 09             	shr    esi,0x9
c0003fe2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003fe6:	01 f2                	add    edx,esi
c0003fe8:	39 c2                	cmp    edx,eax
c0003fea:	76 06                	jbe    c0003ff2 <f_read+0xd5>
c0003fec:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0003ff0:	89 c6                	mov    esi,eax
c0003ff2:	56                   	push   esi
c0003ff3:	57                   	push   edi
c0003ff4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0003ff8:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003ffc:	50                   	push   eax
c0003ffd:	e8 8a dd ff ff       	call   c0001d8c <disk_read>
c0004002:	83 c4 10             	add    esp,0x10
c0004005:	85 c0                	test   eax,eax
c0004007:	75 55                	jne    c000405e <f_read+0x141>
c0004009:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c000400d:	75 65                	jne    c0004074 <f_read+0x157>
c000400f:	c1 e6 09             	shl    esi,0x9
c0004012:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004016:	29 74 24 04          	sub    DWORD PTR [esp+0x4],esi
c000401a:	01 30                	add    DWORD PTR [eax],esi
c000401c:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004020:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004023:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0004028:	0f 85 4e ff ff ff    	jne    c0003f7c <f_read+0x5f>
c000402e:	e9 df 00 00 00       	jmp    c0004112 <f_read+0x1f5>
c0004033:	85 c0                	test   eax,eax
c0004035:	75 05                	jne    c000403c <f_read+0x11f>
c0004037:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000403a:	eb 0a                	jmp    c0004046 <f_read+0x129>
c000403c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000403f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004041:	e8 ce f1 ff ff       	call   c0003214 <get_fat.isra.2>
c0004046:	83 f8 01             	cmp    eax,0x1
c0004049:	77 0e                	ja     c0004059 <f_read+0x13c>
c000404b:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c000404f:	bd 02 00 00 00       	mov    ebp,0x2
c0004054:	e9 b9 00 00 00       	jmp    c0004112 <f_read+0x1f5>
c0004059:	83 f8 ff             	cmp    eax,0xffffffff
c000405c:	75 0e                	jne    c000406c <f_read+0x14f>
c000405e:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004062:	bd 01 00 00 00       	mov    ebp,0x1
c0004067:	e9 a6 00 00 00       	jmp    c0004112 <f_read+0x1f5>
c000406c:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000406f:	e9 30 ff ff ff       	jmp    c0003fa4 <f_read+0x87>
c0004074:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004077:	29 f8                	sub    eax,edi
c0004079:	39 f0                	cmp    eax,esi
c000407b:	73 92                	jae    c000400f <f_read+0xf2>
c000407d:	c1 e0 09             	shl    eax,0x9
c0004080:	8d 53 28             	lea    edx,[ebx+0x28]
c0004083:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0004087:	b9 00 02 00 00       	mov    ecx,0x200
c000408c:	e8 72 dd ff ff       	call   c0001e03 <mem_cpy>
c0004091:	e9 79 ff ff ff       	jmp    c000400f <f_read+0xf2>
c0004096:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004099:	39 f8                	cmp    eax,edi
c000409b:	74 40                	je     c00040dd <f_read+0x1c0>
c000409d:	8d 73 28             	lea    esi,[ebx+0x28]
c00040a0:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00040a4:	74 1e                	je     c00040c4 <f_read+0x1a7>
c00040a6:	6a 01                	push   0x1
c00040a8:	50                   	push   eax
c00040a9:	56                   	push   esi
c00040aa:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00040ae:	50                   	push   eax
c00040af:	e8 ee dc ff ff       	call   c0001da2 <disk_write>
c00040b4:	83 c4 10             	add    esp,0x10
c00040b7:	85 c0                	test   eax,eax
c00040b9:	75 a3                	jne    c000405e <f_read+0x141>
c00040bb:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00040be:	83 e0 7f             	and    eax,0x7f
c00040c1:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00040c4:	6a 01                	push   0x1
c00040c6:	57                   	push   edi
c00040c7:	56                   	push   esi
c00040c8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00040cc:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00040d0:	50                   	push   eax
c00040d1:	e8 b6 dc ff ff       	call   c0001d8c <disk_read>
c00040d6:	83 c4 10             	add    esp,0x10
c00040d9:	85 c0                	test   eax,eax
c00040db:	75 81                	jne    c000405e <f_read+0x141>
c00040dd:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c00040e0:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00040e3:	ba 00 02 00 00       	mov    edx,0x200
c00040e8:	25 ff 01 00 00       	and    eax,0x1ff
c00040ed:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c00040f1:	29 c2                	sub    edx,eax
c00040f3:	39 d6                	cmp    esi,edx
c00040f5:	76 02                	jbe    c00040f9 <f_read+0x1dc>
c00040f7:	89 d6                	mov    esi,edx
c00040f9:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c00040fd:	89 f1                	mov    ecx,esi
c00040ff:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0004103:	e8 fb dc ff ff       	call   c0001e03 <mem_cpy>
c0004108:	e9 05 ff ff ff       	jmp    c0004012 <f_read+0xf5>
c000410d:	bd 07 00 00 00       	mov    ebp,0x7
c0004112:	83 c4 2c             	add    esp,0x2c
c0004115:	89 e8                	mov    eax,ebp
c0004117:	5b                   	pop    ebx
c0004118:	5e                   	pop    esi
c0004119:	5f                   	pop    edi
c000411a:	5d                   	pop    ebp
c000411b:	c3                   	ret    

c000411c <f_write>:
c000411c:	55                   	push   ebp
c000411d:	57                   	push   edi
c000411e:	56                   	push   esi
c000411f:	53                   	push   ebx
c0004120:	83 ec 2c             	sub    esp,0x2c
c0004123:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004127:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000412b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0004131:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004135:	89 d8                	mov    eax,ebx
c0004137:	e8 59 e1 ff ff       	call   c0002295 <validate>
c000413c:	89 c5                	mov    ebp,eax
c000413e:	85 c0                	test   eax,eax
c0004140:	0f 85 14 02 00 00    	jne    c000435a <f_write+0x23e>
c0004146:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c000414a:	85 ed                	test   ebp,ebp
c000414c:	0f 85 08 02 00 00    	jne    c000435a <f_write+0x23e>
c0004152:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004156:	0f 84 f9 01 00 00    	je     c0004355 <f_write+0x239>
c000415c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000415f:	89 c7                	mov    edi,eax
c0004161:	03 7c 24 48          	add    edi,DWORD PTR [esp+0x48]
c0004165:	0f 83 ef 00 00 00    	jae    c000425a <f_write+0x13e>
c000416b:	f7 d0                	not    eax
c000416d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0004171:	e9 e4 00 00 00       	jmp    c000425a <f_write+0x13e>
c0004176:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004179:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c000417f:	0f 85 9a 01 00 00    	jne    c000431f <f_write+0x203>
c0004185:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004189:	89 d1                	mov    ecx,edx
c000418b:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000418f:	c1 e9 09             	shr    ecx,0x9
c0004192:	48                   	dec    eax
c0004193:	21 c8                	and    eax,ecx
c0004195:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004199:	0f 84 c8 00 00 00    	je     c0004267 <f_write+0x14b>
c000419f:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00041a3:	0f 85 22 01 00 00    	jne    c00042cb <f_write+0x1af>
c00041a9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00041ad:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00041b0:	89 c8                	mov    eax,ecx
c00041b2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00041b6:	e8 73 de ff ff       	call   c000202e <clst2sect>
c00041bb:	85 c0                	test   eax,eax
c00041bd:	0f 84 d2 00 00 00    	je     c0004295 <f_write+0x179>
c00041c3:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00041c7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00041cb:	01 c7                	add    edi,eax
c00041cd:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00041d5:	0f 86 1c 01 00 00    	jbe    c00042f7 <f_write+0x1db>
c00041db:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00041df:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00041e3:	c1 ee 09             	shr    esi,0x9
c00041e6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00041ea:	01 f2                	add    edx,esi
c00041ec:	39 c2                	cmp    edx,eax
c00041ee:	76 06                	jbe    c00041f6 <f_write+0xda>
c00041f0:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00041f4:	89 c6                	mov    esi,eax
c00041f6:	56                   	push   esi
c00041f7:	57                   	push   edi
c00041f8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00041fc:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004200:	50                   	push   eax
c0004201:	e8 9c db ff ff       	call   c0001da2 <disk_write>
c0004206:	83 c4 10             	add    esp,0x10
c0004209:	85 c0                	test   eax,eax
c000420b:	0f 85 97 00 00 00    	jne    c00042a8 <f_write+0x18c>
c0004211:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0004214:	29 fa                	sub    edx,edi
c0004216:	39 f2                	cmp    edx,esi
c0004218:	73 1d                	jae    c0004237 <f_write+0x11b>
c000421a:	8d 43 28             	lea    eax,[ebx+0x28]
c000421d:	c1 e2 09             	shl    edx,0x9
c0004220:	b9 00 02 00 00       	mov    ecx,0x200
c0004225:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c0004229:	e8 d5 db ff ff       	call   c0001e03 <mem_cpy>
c000422e:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004231:	83 e0 7f             	and    eax,0x7f
c0004234:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004237:	c1 e6 09             	shl    esi,0x9
c000423a:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000423e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004242:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004246:	01 30                	add    DWORD PTR [eax],esi
c0004248:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000424b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000424e:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0004251:	39 f0                	cmp    eax,esi
c0004253:	73 02                	jae    c0004257 <f_write+0x13b>
c0004255:	89 f0                	mov    eax,esi
c0004257:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000425a:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000425f:	0f 85 11 ff ff ff    	jne    c0004176 <f_write+0x5a>
c0004265:	eb 1b                	jmp    c0004282 <f_write+0x166>
c0004267:	85 d2                	test   edx,edx
c0004269:	75 09                	jne    c0004274 <f_write+0x158>
c000426b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000426e:	85 c0                	test   eax,eax
c0004270:	75 1e                	jne    c0004290 <f_write+0x174>
c0004272:	eb 03                	jmp    c0004277 <f_write+0x15b>
c0004274:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004277:	89 d8                	mov    eax,ebx
c0004279:	e8 62 f1 ff ff       	call   c00033e0 <create_chain>
c000427e:	85 c0                	test   eax,eax
c0004280:	75 0e                	jne    c0004290 <f_write+0x174>
c0004282:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004285:	83 c8 40             	or     eax,0x40
c0004288:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000428b:	e9 ca 00 00 00       	jmp    c000435a <f_write+0x23e>
c0004290:	83 f8 01             	cmp    eax,0x1
c0004293:	75 0e                	jne    c00042a3 <f_write+0x187>
c0004295:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004299:	bd 02 00 00 00       	mov    ebp,0x2
c000429e:	e9 b7 00 00 00       	jmp    c000435a <f_write+0x23e>
c00042a3:	83 f8 ff             	cmp    eax,0xffffffff
c00042a6:	75 0e                	jne    c00042b6 <f_write+0x19a>
c00042a8:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00042ac:	bd 01 00 00 00       	mov    ebp,0x1
c00042b1:	e9 a4 00 00 00       	jmp    c000435a <f_write+0x23e>
c00042b6:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00042b9:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00042bd:	0f 85 dc fe ff ff    	jne    c000419f <f_write+0x83>
c00042c3:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00042c6:	e9 d4 fe ff ff       	jmp    c000419f <f_write+0x83>
c00042cb:	6a 01                	push   0x1
c00042cd:	8d 43 28             	lea    eax,[ebx+0x28]
c00042d0:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00042d3:	50                   	push   eax
c00042d4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00042d8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00042dc:	50                   	push   eax
c00042dd:	e8 c0 da ff ff       	call   c0001da2 <disk_write>
c00042e2:	83 c4 10             	add    esp,0x10
c00042e5:	85 c0                	test   eax,eax
c00042e7:	75 bf                	jne    c00042a8 <f_write+0x18c>
c00042e9:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00042ec:	83 e0 7f             	and    eax,0x7f
c00042ef:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00042f2:	e9 b2 fe ff ff       	jmp    c00041a9 <f_write+0x8d>
c00042f7:	39 7b 1c             	cmp    DWORD PTR [ebx+0x1c],edi
c00042fa:	74 20                	je     c000431c <f_write+0x200>
c00042fc:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00042ff:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0004302:	76 18                	jbe    c000431c <f_write+0x200>
c0004304:	6a 01                	push   0x1
c0004306:	8d 43 28             	lea    eax,[ebx+0x28]
c0004309:	57                   	push   edi
c000430a:	50                   	push   eax
c000430b:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000430f:	50                   	push   eax
c0004310:	e8 77 da ff ff       	call   c0001d8c <disk_read>
c0004315:	83 c4 10             	add    esp,0x10
c0004318:	85 c0                	test   eax,eax
c000431a:	75 8c                	jne    c00042a8 <f_write+0x18c>
c000431c:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c000431f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004322:	ba 00 02 00 00       	mov    edx,0x200
c0004327:	25 ff 01 00 00       	and    eax,0x1ff
c000432c:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0004330:	29 c2                	sub    edx,eax
c0004332:	39 d6                	cmp    esi,edx
c0004334:	76 02                	jbe    c0004338 <f_write+0x21c>
c0004336:	89 d6                	mov    esi,edx
c0004338:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c000433c:	89 f1                	mov    ecx,esi
c000433e:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0004342:	e8 bc da ff ff       	call   c0001e03 <mem_cpy>
c0004347:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000434a:	83 c8 80             	or     eax,0xffffff80
c000434d:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004350:	e9 e5 fe ff ff       	jmp    c000423a <f_write+0x11e>
c0004355:	bd 07 00 00 00       	mov    ebp,0x7
c000435a:	83 c4 2c             	add    esp,0x2c
c000435d:	89 e8                	mov    eax,ebp
c000435f:	5b                   	pop    ebx
c0004360:	5e                   	pop    esi
c0004361:	5f                   	pop    edi
c0004362:	5d                   	pop    ebp
c0004363:	c3                   	ret    

c0004364 <f_sync>:
c0004364:	56                   	push   esi
c0004365:	53                   	push   ebx
c0004366:	83 ec 14             	sub    esp,0x14
c0004369:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000436d:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004371:	89 d8                	mov    eax,ebx
c0004373:	e8 1d df ff ff       	call   c0002295 <validate>
c0004378:	85 c0                	test   eax,eax
c000437a:	0f 85 a3 00 00 00    	jne    c0004423 <f_sync+0xbf>
c0004380:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004383:	f6 c2 40             	test   dl,0x40
c0004386:	0f 84 97 00 00 00    	je     c0004423 <f_sync+0xbf>
c000438c:	80 e2 80             	and    dl,0x80
c000438f:	74 2e                	je     c00043bf <f_sync+0x5b>
c0004391:	6a 01                	push   0x1
c0004393:	8d 43 28             	lea    eax,[ebx+0x28]
c0004396:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004399:	50                   	push   eax
c000439a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000439e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00043a2:	50                   	push   eax
c00043a3:	e8 fa d9 ff ff       	call   c0001da2 <disk_write>
c00043a8:	83 c4 10             	add    esp,0x10
c00043ab:	89 c2                	mov    edx,eax
c00043ad:	b8 01 00 00 00       	mov    eax,0x1
c00043b2:	85 d2                	test   edx,edx
c00043b4:	75 6d                	jne    c0004423 <f_sync+0xbf>
c00043b6:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00043b9:	83 e0 7f             	and    eax,0x7f
c00043bc:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00043bf:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00043c2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00043c6:	e8 73 df ff ff       	call   c000233e <move_window>
c00043cb:	85 c0                	test   eax,eax
c00043cd:	75 54                	jne    c0004423 <f_sync+0xbf>
c00043cf:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00043d2:	8a 46 0b             	mov    al,BYTE PTR [esi+0xb]
c00043d5:	89 f2                	mov    edx,esi
c00043d7:	83 c8 20             	or     eax,0x20
c00043da:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c00043dd:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00043e0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00043e2:	e8 05 ee ff ff       	call   c00031ec <st_clust.isra.1>
c00043e7:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00043ea:	8d 46 1c             	lea    eax,[esi+0x1c]
c00043ed:	e8 0e da ff ff       	call   c0001e00 <st_dword>
c00043f2:	8d 46 16             	lea    eax,[esi+0x16]
c00043f5:	ba 00 00 21 50       	mov    edx,0x50210000
c00043fa:	e8 01 da ff ff       	call   c0001e00 <st_dword>
c00043ff:	31 d2                	xor    edx,edx
c0004401:	8d 46 12             	lea    eax,[esi+0x12]
c0004404:	e8 f3 d9 ff ff       	call   c0001dfc <st_word>
c0004409:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000440d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004411:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004415:	e8 5b e9 ff ff       	call   c0002d75 <sync_fs>
c000441a:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000441d:	83 e2 bf             	and    edx,0xffffffbf
c0004420:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004423:	83 c4 14             	add    esp,0x14
c0004426:	5b                   	pop    ebx
c0004427:	5e                   	pop    esi
c0004428:	c3                   	ret    

c0004429 <f_close>:
c0004429:	53                   	push   ebx
c000442a:	83 ec 24             	sub    esp,0x24
c000442d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0004431:	53                   	push   ebx
c0004432:	e8 2d ff ff ff       	call   c0004364 <f_sync>
c0004437:	83 c4 10             	add    esp,0x10
c000443a:	85 c0                	test   eax,eax
c000443c:	75 15                	jne    c0004453 <f_close+0x2a>
c000443e:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004442:	89 d8                	mov    eax,ebx
c0004444:	e8 4c de ff ff       	call   c0002295 <validate>
c0004449:	85 c0                	test   eax,eax
c000444b:	75 06                	jne    c0004453 <f_close+0x2a>
c000444d:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0004453:	83 c4 18             	add    esp,0x18
c0004456:	5b                   	pop    ebx
c0004457:	c3                   	ret    

c0004458 <f_lseek>:
c0004458:	55                   	push   ebp
c0004459:	57                   	push   edi
c000445a:	56                   	push   esi
c000445b:	53                   	push   ebx
c000445c:	83 ec 2c             	sub    esp,0x2c
c000445f:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004463:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0004467:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000446b:	89 d8                	mov    eax,ebx
c000446d:	e8 23 de ff ff       	call   c0002295 <validate>
c0004472:	89 c5                	mov    ebp,eax
c0004474:	85 c0                	test   eax,eax
c0004476:	0f 85 83 01 00 00    	jne    c00045ff <f_lseek+0x1a7>
c000447c:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004480:	85 ed                	test   ebp,ebp
c0004482:	0f 85 77 01 00 00    	jne    c00045ff <f_lseek+0x1a7>
c0004488:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000448b:	39 f0                	cmp    eax,esi
c000448d:	73 08                	jae    c0004497 <f_lseek+0x3f>
c000448f:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004493:	75 02                	jne    c0004497 <f_lseek+0x3f>
c0004495:	89 c6                	mov    esi,eax
c0004497:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000449a:	85 f6                	test   esi,esi
c000449c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00044a3:	75 07                	jne    c00044ac <f_lseek+0x54>
c00044a5:	31 f6                	xor    esi,esi
c00044a7:	e9 e2 00 00 00       	jmp    c000458e <f_lseek+0x136>
c00044ac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044b0:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c00044b4:	c1 e7 09             	shl    edi,0x9
c00044b7:	85 c9                	test   ecx,ecx
c00044b9:	74 28                	je     c00044e3 <f_lseek+0x8b>
c00044bb:	49                   	dec    ecx
c00044bc:	31 d2                	xor    edx,edx
c00044be:	8d 46 ff             	lea    eax,[esi-0x1]
c00044c1:	f7 f7                	div    edi
c00044c3:	31 d2                	xor    edx,edx
c00044c5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00044c9:	89 c8                	mov    eax,ecx
c00044cb:	f7 f7                	div    edi
c00044cd:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00044d1:	72 10                	jb     c00044e3 <f_lseek+0x8b>
c00044d3:	89 f8                	mov    eax,edi
c00044d5:	f7 d8                	neg    eax
c00044d7:	21 c1                	and    ecx,eax
c00044d9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00044dc:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c00044df:	29 ce                	sub    esi,ecx
c00044e1:	eb 3c                	jmp    c000451f <f_lseek+0xc7>
c00044e3:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00044e6:	85 c0                	test   eax,eax
c00044e8:	75 32                	jne    c000451c <f_lseek+0xc4>
c00044ea:	31 d2                	xor    edx,edx
c00044ec:	89 d8                	mov    eax,ebx
c00044ee:	e8 ed ee ff ff       	call   c00033e0 <create_chain>
c00044f3:	83 f8 01             	cmp    eax,0x1
c00044f6:	75 0e                	jne    c0004506 <f_lseek+0xae>
c00044f8:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00044fc:	bd 02 00 00 00       	mov    ebp,0x2
c0004501:	e9 f9 00 00 00       	jmp    c00045ff <f_lseek+0x1a7>
c0004506:	83 f8 ff             	cmp    eax,0xffffffff
c0004509:	75 0e                	jne    c0004519 <f_lseek+0xc1>
c000450b:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c000450f:	bd 01 00 00 00       	mov    ebp,0x1
c0004514:	e9 e6 00 00 00       	jmp    c00045ff <f_lseek+0x1a7>
c0004519:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000451c:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000451f:	85 c0                	test   eax,eax
c0004521:	74 82                	je     c00044a5 <f_lseek+0x4d>
c0004523:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004526:	39 fe                	cmp    esi,edi
c0004528:	76 3d                	jbe    c0004567 <f_lseek+0x10f>
c000452a:	01 fa                	add    edx,edi
c000452c:	29 fe                	sub    esi,edi
c000452e:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c0004531:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004535:	89 c2                	mov    edx,eax
c0004537:	74 0d                	je     c0004546 <f_lseek+0xee>
c0004539:	89 d8                	mov    eax,ebx
c000453b:	e8 a0 ee ff ff       	call   c00033e0 <create_chain>
c0004540:	85 c0                	test   eax,eax
c0004542:	75 09                	jne    c000454d <f_lseek+0xf5>
c0004544:	eb 1f                	jmp    c0004565 <f_lseek+0x10d>
c0004546:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004548:	e8 c7 ec ff ff       	call   c0003214 <get_fat.isra.2>
c000454d:	83 f8 ff             	cmp    eax,0xffffffff
c0004550:	74 b9                	je     c000450b <f_lseek+0xb3>
c0004552:	83 f8 01             	cmp    eax,0x1
c0004555:	76 a1                	jbe    c00044f8 <f_lseek+0xa0>
c0004557:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000455b:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c000455e:	76 98                	jbe    c00044f8 <f_lseek+0xa0>
c0004560:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004563:	eb be                	jmp    c0004523 <f_lseek+0xcb>
c0004565:	31 f6                	xor    esi,esi
c0004567:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c000456a:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004570:	0f 84 2f ff ff ff    	je     c00044a5 <f_lseek+0x4d>
c0004576:	89 c2                	mov    edx,eax
c0004578:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000457c:	e8 ad da ff ff       	call   c000202e <clst2sect>
c0004581:	85 c0                	test   eax,eax
c0004583:	0f 84 6f ff ff ff    	je     c00044f8 <f_lseek+0xa0>
c0004589:	c1 ee 09             	shr    esi,0x9
c000458c:	01 c6                	add    esi,eax
c000458e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004591:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004594:	76 0c                	jbe    c00045a2 <f_lseek+0x14a>
c0004596:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004599:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000459c:	83 ca 40             	or     edx,0x40
c000459f:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00045a2:	a9 ff 01 00 00       	test   eax,0x1ff
c00045a7:	74 56                	je     c00045ff <f_lseek+0x1a7>
c00045a9:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00045ac:	39 f0                	cmp    eax,esi
c00045ae:	74 4f                	je     c00045ff <f_lseek+0x1a7>
c00045b0:	8d 7b 28             	lea    edi,[ebx+0x28]
c00045b3:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00045b7:	74 26                	je     c00045df <f_lseek+0x187>
c00045b9:	6a 01                	push   0x1
c00045bb:	50                   	push   eax
c00045bc:	57                   	push   edi
c00045bd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00045c1:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00045c5:	50                   	push   eax
c00045c6:	e8 d7 d7 ff ff       	call   c0001da2 <disk_write>
c00045cb:	83 c4 10             	add    esp,0x10
c00045ce:	85 c0                	test   eax,eax
c00045d0:	0f 85 35 ff ff ff    	jne    c000450b <f_lseek+0xb3>
c00045d6:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00045d9:	83 e0 7f             	and    eax,0x7f
c00045dc:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00045df:	6a 01                	push   0x1
c00045e1:	56                   	push   esi
c00045e2:	57                   	push   edi
c00045e3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00045e7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00045eb:	50                   	push   eax
c00045ec:	e8 9b d7 ff ff       	call   c0001d8c <disk_read>
c00045f1:	83 c4 10             	add    esp,0x10
c00045f4:	85 c0                	test   eax,eax
c00045f6:	0f 85 0f ff ff ff    	jne    c000450b <f_lseek+0xb3>
c00045fc:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c00045ff:	83 c4 2c             	add    esp,0x2c
c0004602:	89 e8                	mov    eax,ebp
c0004604:	5b                   	pop    ebx
c0004605:	5e                   	pop    esi
c0004606:	5f                   	pop    edi
c0004607:	5d                   	pop    ebp
c0004608:	c3                   	ret    

c0004609 <f_opendir>:
c0004609:	56                   	push   esi
c000460a:	b8 09 00 00 00       	mov    eax,0x9
c000460f:	53                   	push   ebx
c0004610:	83 ec 24             	sub    esp,0x24
c0004613:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004617:	85 db                	test   ebx,ebx
c0004619:	0f 84 af 00 00 00    	je     c00046ce <f_opendir+0xc5>
c000461f:	31 c9                	xor    ecx,ecx
c0004621:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004625:	8d 44 24 34          	lea    eax,[esp+0x34]
c0004629:	e8 63 de ff ff       	call   c0002491 <mount_volume>
c000462e:	85 c0                	test   eax,eax
c0004630:	0f 85 92 00 00 00    	jne    c00046c8 <f_opendir+0xbf>
c0004636:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000463a:	83 ec 0c             	sub    esp,0xc
c000463d:	89 03                	mov    DWORD PTR [ebx],eax
c000463f:	68 00 02 00 00       	push   0x200
c0004644:	e8 d7 15 00 00       	call   c0005c20 <ff_memalloc>
c0004649:	83 c4 10             	add    esp,0x10
c000464c:	89 c6                	mov    esi,eax
c000464e:	b8 11 00 00 00       	mov    eax,0x11
c0004653:	85 f6                	test   esi,esi
c0004655:	74 77                	je     c00046ce <f_opendir+0xc5>
c0004657:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000465b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000465f:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004662:	89 d8                	mov    eax,ebx
c0004664:	e8 72 f3 ff ff       	call   c00039db <follow_path>
c0004669:	85 c0                	test   eax,eax
c000466b:	75 37                	jne    c00046a4 <f_opendir+0x9b>
c000466d:	f6 43 2b 80          	test   BYTE PTR [ebx+0x2b],0x80
c0004671:	75 1c                	jne    c000468f <f_opendir+0x86>
c0004673:	b8 05 00 00 00       	mov    eax,0x5
c0004678:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c000467c:	74 26                	je     c00046a4 <f_opendir+0x9b>
c000467e:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0004681:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004685:	8a 00                	mov    al,BYTE PTR [eax]
c0004687:	e8 37 eb ff ff       	call   c00031c3 <ld_clust.isra.0>
c000468c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000468f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004693:	31 d2                	xor    edx,edx
c0004695:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0004699:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000469d:	89 d8                	mov    eax,ebx
c000469f:	e8 74 ec ff ff       	call   c0003318 <dir_sdi>
c00046a4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00046a8:	83 ec 0c             	sub    esp,0xc
c00046ab:	56                   	push   esi
c00046ac:	e8 87 15 00 00       	call   c0005c38 <ff_memfree>
c00046b1:	83 c4 10             	add    esp,0x10
c00046b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00046b8:	83 f8 04             	cmp    eax,0x4
c00046bb:	74 06                	je     c00046c3 <f_opendir+0xba>
c00046bd:	85 c0                	test   eax,eax
c00046bf:	74 0d                	je     c00046ce <f_opendir+0xc5>
c00046c1:	eb 05                	jmp    c00046c8 <f_opendir+0xbf>
c00046c3:	b8 05 00 00 00       	mov    eax,0x5
c00046c8:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00046ce:	83 c4 24             	add    esp,0x24
c00046d1:	5b                   	pop    ebx
c00046d2:	5e                   	pop    esi
c00046d3:	c3                   	ret    

c00046d4 <f_closedir>:
c00046d4:	53                   	push   ebx
c00046d5:	83 ec 18             	sub    esp,0x18
c00046d8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00046dc:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00046e0:	89 d8                	mov    eax,ebx
c00046e2:	e8 ae db ff ff       	call   c0002295 <validate>
c00046e7:	85 c0                	test   eax,eax
c00046e9:	75 06                	jne    c00046f1 <f_closedir+0x1d>
c00046eb:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00046f1:	83 c4 18             	add    esp,0x18
c00046f4:	5b                   	pop    ebx
c00046f5:	c3                   	ret    

c00046f6 <f_readdir>:
c00046f6:	57                   	push   edi
c00046f7:	56                   	push   esi
c00046f8:	53                   	push   ebx
c00046f9:	83 ec 20             	sub    esp,0x20
c00046fc:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004700:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0004704:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004708:	89 d8                	mov    eax,ebx
c000470a:	e8 86 db ff ff       	call   c0002295 <validate>
c000470f:	85 c0                	test   eax,eax
c0004711:	75 6e                	jne    c0004781 <f_readdir+0x8b>
c0004713:	85 ff                	test   edi,edi
c0004715:	75 0b                	jne    c0004722 <f_readdir+0x2c>
c0004717:	31 d2                	xor    edx,edx
c0004719:	89 d8                	mov    eax,ebx
c000471b:	e8 f8 eb ff ff       	call   c0003318 <dir_sdi>
c0004720:	eb 5f                	jmp    c0004781 <f_readdir+0x8b>
c0004722:	83 ec 0c             	sub    esp,0xc
c0004725:	68 00 02 00 00       	push   0x200
c000472a:	e8 f1 14 00 00       	call   c0005c20 <ff_memalloc>
c000472f:	83 c4 10             	add    esp,0x10
c0004732:	89 c6                	mov    esi,eax
c0004734:	b8 11 00 00 00       	mov    eax,0x11
c0004739:	85 f6                	test   esi,esi
c000473b:	74 44                	je     c0004781 <f_readdir+0x8b>
c000473d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004741:	31 d2                	xor    edx,edx
c0004743:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004746:	89 d8                	mov    eax,ebx
c0004748:	e8 ca ef ff ff       	call   c0003717 <dir_read>
c000474d:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0004752:	75 19                	jne    c000476d <f_readdir+0x77>
c0004754:	89 fa                	mov    edx,edi
c0004756:	89 d8                	mov    eax,ebx
c0004758:	e8 70 e8 ff ff       	call   c0002fcd <get_fileinfo>
c000475d:	31 d2                	xor    edx,edx
c000475f:	89 d8                	mov    eax,ebx
c0004761:	e8 47 ee ff ff       	call   c00035ad <dir_next>
c0004766:	83 f8 04             	cmp    eax,0x4
c0004769:	75 02                	jne    c000476d <f_readdir+0x77>
c000476b:	31 c0                	xor    eax,eax
c000476d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004771:	83 ec 0c             	sub    esp,0xc
c0004774:	56                   	push   esi
c0004775:	e8 be 14 00 00       	call   c0005c38 <ff_memfree>
c000477a:	83 c4 10             	add    esp,0x10
c000477d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004781:	83 c4 20             	add    esp,0x20
c0004784:	5b                   	pop    ebx
c0004785:	5e                   	pop    esi
c0004786:	5f                   	pop    edi
c0004787:	c3                   	ret    

c0004788 <f_stat>:
c0004788:	57                   	push   edi
c0004789:	31 c9                	xor    ecx,ecx
c000478b:	56                   	push   esi
c000478c:	53                   	push   ebx
c000478d:	83 ec 30             	sub    esp,0x30
c0004790:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0004794:	89 e2                	mov    edx,esp
c0004796:	8d 44 24 40          	lea    eax,[esp+0x40]
c000479a:	e8 f2 dc ff ff       	call   c0002491 <mount_volume>
c000479f:	89 c3                	mov    ebx,eax
c00047a1:	85 c0                	test   eax,eax
c00047a3:	75 59                	jne    c00047fe <f_stat+0x76>
c00047a5:	83 ec 0c             	sub    esp,0xc
c00047a8:	bb 11 00 00 00       	mov    ebx,0x11
c00047ad:	68 00 02 00 00       	push   0x200
c00047b2:	e8 69 14 00 00       	call   c0005c20 <ff_memalloc>
c00047b7:	83 c4 10             	add    esp,0x10
c00047ba:	89 c6                	mov    esi,eax
c00047bc:	85 c0                	test   eax,eax
c00047be:	74 3e                	je     c00047fe <f_stat+0x76>
c00047c0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00047c3:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00047c7:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00047ca:	89 e0                	mov    eax,esp
c00047cc:	e8 0a f2 ff ff       	call   c00039db <follow_path>
c00047d1:	89 c3                	mov    ebx,eax
c00047d3:	85 c0                	test   eax,eax
c00047d5:	75 1b                	jne    c00047f2 <f_stat+0x6a>
c00047d7:	f6 44 24 2b 80       	test   BYTE PTR [esp+0x2b],0x80
c00047dc:	75 0f                	jne    c00047ed <f_stat+0x65>
c00047de:	85 ff                	test   edi,edi
c00047e0:	74 10                	je     c00047f2 <f_stat+0x6a>
c00047e2:	89 fa                	mov    edx,edi
c00047e4:	89 e0                	mov    eax,esp
c00047e6:	e8 e2 e7 ff ff       	call   c0002fcd <get_fileinfo>
c00047eb:	eb 05                	jmp    c00047f2 <f_stat+0x6a>
c00047ed:	bb 06 00 00 00       	mov    ebx,0x6
c00047f2:	83 ec 0c             	sub    esp,0xc
c00047f5:	56                   	push   esi
c00047f6:	e8 3d 14 00 00       	call   c0005c38 <ff_memfree>
c00047fb:	83 c4 10             	add    esp,0x10
c00047fe:	83 c4 30             	add    esp,0x30
c0004801:	89 d8                	mov    eax,ebx
c0004803:	5b                   	pop    ebx
c0004804:	5e                   	pop    esi
c0004805:	5f                   	pop    edi
c0004806:	c3                   	ret    

c0004807 <f_getfree>:
c0004807:	55                   	push   ebp
c0004808:	31 c9                	xor    ecx,ecx
c000480a:	57                   	push   edi
c000480b:	56                   	push   esi
c000480c:	53                   	push   ebx
c000480d:	83 ec 2c             	sub    esp,0x2c
c0004810:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004814:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004818:	e8 74 dc ff ff       	call   c0002491 <mount_volume>
c000481d:	89 c7                	mov    edi,eax
c000481f:	85 c0                	test   eax,eax
c0004821:	0f 85 df 00 00 00    	jne    c0004906 <f_getfree+0xff>
c0004827:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000482b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000482f:	89 30                	mov    DWORD PTR [eax],esi
c0004831:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0004834:	8b 6e 18             	mov    ebp,DWORD PTR [esi+0x18]
c0004837:	8d 55 fe             	lea    edx,[ebp-0x2]
c000483a:	39 d0                	cmp    eax,edx
c000483c:	77 0b                	ja     c0004849 <f_getfree+0x42>
c000483e:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0004842:	89 01                	mov    DWORD PTR [ecx],eax
c0004844:	e9 bd 00 00 00       	jmp    c0004906 <f_getfree+0xff>
c0004849:	80 3e 01             	cmp    BYTE PTR [esi],0x1
c000484c:	75 29                	jne    c0004877 <f_getfree+0x70>
c000484e:	bd 02 00 00 00       	mov    ebp,0x2
c0004853:	31 db                	xor    ebx,ebx
c0004855:	89 ea                	mov    edx,ebp
c0004857:	89 f0                	mov    eax,esi
c0004859:	e8 b6 e9 ff ff       	call   c0003214 <get_fat.isra.2>
c000485e:	83 f8 ff             	cmp    eax,0xffffffff
c0004861:	74 7d                	je     c00048e0 <f_getfree+0xd9>
c0004863:	83 f8 01             	cmp    eax,0x1
c0004866:	74 7f                	je     c00048e7 <f_getfree+0xe0>
c0004868:	83 d3 00             	adc    ebx,0x0
c000486b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000486f:	45                   	inc    ebp
c0004870:	39 68 18             	cmp    DWORD PTR [eax+0x18],ebp
c0004873:	77 e0                	ja     c0004855 <f_getfree+0x4e>
c0004875:	eb 79                	jmp    c00048f0 <f_getfree+0xe9>
c0004877:	8b 56 24             	mov    edx,DWORD PTR [esi+0x24]
c000487a:	31 db                	xor    ebx,ebx
c000487c:	31 f6                	xor    esi,esi
c000487e:	85 f6                	test   esi,esi
c0004880:	75 18                	jne    c000489a <f_getfree+0x93>
c0004882:	8d 42 01             	lea    eax,[edx+0x1]
c0004885:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004889:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000488d:	e8 ac da ff ff       	call   c000233e <move_window>
c0004892:	85 c0                	test   eax,eax
c0004894:	75 58                	jne    c00048ee <f_getfree+0xe7>
c0004896:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000489a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000489e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00048a2:	8d 44 31 34          	lea    eax,[ecx+esi*1+0x34]
c00048a6:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c00048a9:	75 13                	jne    c00048be <f_getfree+0xb7>
c00048ab:	e8 27 d5 ff ff       	call   c0001dd7 <ld_word>
c00048b0:	0f b7 c0             	movzx  eax,ax
c00048b3:	83 f8 01             	cmp    eax,0x1
c00048b6:	83 d3 00             	adc    ebx,0x0
c00048b9:	83 c6 02             	add    esi,0x2
c00048bc:	eb 13                	jmp    c00048d1 <f_getfree+0xca>
c00048be:	e8 21 d5 ff ff       	call   c0001de4 <ld_dword>
c00048c3:	25 ff ff ff 0f       	and    eax,0xfffffff
c00048c8:	83 f8 01             	cmp    eax,0x1
c00048cb:	83 d3 00             	adc    ebx,0x0
c00048ce:	83 c6 04             	add    esi,0x4
c00048d1:	81 e6 ff 01 00 00    	and    esi,0x1ff
c00048d7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00048db:	4d                   	dec    ebp
c00048dc:	75 a0                	jne    c000487e <f_getfree+0x77>
c00048de:	eb 10                	jmp    c00048f0 <f_getfree+0xe9>
c00048e0:	bf 01 00 00 00       	mov    edi,0x1
c00048e5:	eb 09                	jmp    c00048f0 <f_getfree+0xe9>
c00048e7:	bf 02 00 00 00       	mov    edi,0x2
c00048ec:	eb 02                	jmp    c00048f0 <f_getfree+0xe9>
c00048ee:	89 c7                	mov    edi,eax
c00048f0:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00048f4:	89 18                	mov    DWORD PTR [eax],ebx
c00048f6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048fa:	8a 50 04             	mov    dl,BYTE PTR [eax+0x4]
c00048fd:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c0004900:	83 ca 01             	or     edx,0x1
c0004903:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c0004906:	83 c4 2c             	add    esp,0x2c
c0004909:	89 f8                	mov    eax,edi
c000490b:	5b                   	pop    ebx
c000490c:	5e                   	pop    esi
c000490d:	5f                   	pop    edi
c000490e:	5d                   	pop    ebp
c000490f:	c3                   	ret    

c0004910 <f_truncate>:
c0004910:	56                   	push   esi
c0004911:	53                   	push   ebx
c0004912:	83 ec 14             	sub    esp,0x14
c0004915:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004919:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000491d:	89 d8                	mov    eax,ebx
c000491f:	e8 71 d9 ff ff       	call   c0002295 <validate>
c0004924:	89 c6                	mov    esi,eax
c0004926:	85 c0                	test   eax,eax
c0004928:	0f 85 c4 00 00 00    	jne    c00049f2 <f_truncate+0xe2>
c000492e:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0004932:	85 f6                	test   esi,esi
c0004934:	0f 85 b8 00 00 00    	jne    c00049f2 <f_truncate+0xe2>
c000493a:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000493e:	0f 84 a9 00 00 00    	je     c00049ed <f_truncate+0xdd>
c0004944:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004947:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000494a:	0f 83 a2 00 00 00    	jae    c00049f2 <f_truncate+0xe2>
c0004950:	85 c0                	test   eax,eax
c0004952:	75 15                	jne    c0004969 <f_truncate+0x59>
c0004954:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004957:	31 c9                	xor    ecx,ecx
c0004959:	89 d8                	mov    eax,ebx
c000495b:	e8 bf eb ff ff       	call   c000351f <remove_chain>
c0004960:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004967:	eb 35                	jmp    c000499e <f_truncate+0x8e>
c0004969:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000496c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000496e:	e8 a1 e8 ff ff       	call   c0003214 <get_fat.isra.2>
c0004973:	89 c2                	mov    edx,eax
c0004975:	b8 01 00 00 00       	mov    eax,0x1
c000497a:	83 fa ff             	cmp    edx,0xffffffff
c000497d:	74 1f                	je     c000499e <f_truncate+0x8e>
c000497f:	b8 02 00 00 00       	mov    eax,0x2
c0004984:	83 fa 01             	cmp    edx,0x1
c0004987:	74 15                	je     c000499e <f_truncate+0x8e>
c0004989:	31 c0                	xor    eax,eax
c000498b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000498f:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004992:	76 0a                	jbe    c000499e <f_truncate+0x8e>
c0004994:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c0004997:	89 d8                	mov    eax,ebx
c0004999:	e8 81 eb ff ff       	call   c000351f <remove_chain>
c000499e:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00049a1:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00049a4:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00049a7:	83 ca 40             	or     edx,0x40
c00049aa:	85 c0                	test   eax,eax
c00049ac:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00049af:	75 35                	jne    c00049e6 <f_truncate+0xd6>
c00049b1:	80 e2 80             	and    dl,0x80
c00049b4:	74 3c                	je     c00049f2 <f_truncate+0xe2>
c00049b6:	6a 01                	push   0x1
c00049b8:	8d 43 28             	lea    eax,[ebx+0x28]
c00049bb:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00049be:	50                   	push   eax
c00049bf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00049c3:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00049c7:	50                   	push   eax
c00049c8:	e8 d5 d3 ff ff       	call   c0001da2 <disk_write>
c00049cd:	83 c4 10             	add    esp,0x10
c00049d0:	85 c0                	test   eax,eax
c00049d2:	75 0d                	jne    c00049e1 <f_truncate+0xd1>
c00049d4:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00049d7:	31 f6                	xor    esi,esi
c00049d9:	83 e0 7f             	and    eax,0x7f
c00049dc:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00049df:	eb 11                	jmp    c00049f2 <f_truncate+0xe2>
c00049e1:	b8 01 00 00 00       	mov    eax,0x1
c00049e6:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c00049e9:	89 c6                	mov    esi,eax
c00049eb:	eb 05                	jmp    c00049f2 <f_truncate+0xe2>
c00049ed:	be 07 00 00 00       	mov    esi,0x7
c00049f2:	89 f0                	mov    eax,esi
c00049f4:	83 c4 14             	add    esp,0x14
c00049f7:	5b                   	pop    ebx
c00049f8:	5e                   	pop    esi
c00049f9:	c3                   	ret    

c00049fa <f_unlink>:
c00049fa:	55                   	push   ebp
c00049fb:	b9 02 00 00 00       	mov    ecx,0x2
c0004a00:	57                   	push   edi
c0004a01:	56                   	push   esi
c0004a02:	53                   	push   ebx
c0004a03:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004a09:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004a0d:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c0004a14:	e8 78 da ff ff       	call   c0002491 <mount_volume>
c0004a19:	85 c0                	test   eax,eax
c0004a1b:	0f 85 f0 00 00 00    	jne    c0004b11 <f_unlink+0x117>
c0004a21:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a25:	83 ec 0c             	sub    esp,0xc
c0004a28:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004a2c:	68 00 02 00 00       	push   0x200
c0004a31:	e8 ea 11 00 00       	call   c0005c20 <ff_memalloc>
c0004a36:	83 c4 10             	add    esp,0x10
c0004a39:	89 c3                	mov    ebx,eax
c0004a3b:	b8 11 00 00 00       	mov    eax,0x11
c0004a40:	85 db                	test   ebx,ebx
c0004a42:	0f 84 c9 00 00 00    	je     c0004b11 <f_unlink+0x117>
c0004a48:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a4c:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c0004a53:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004a56:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004a5a:	e8 7c ef ff ff       	call   c00039db <follow_path>
c0004a5f:	85 c0                	test   eax,eax
c0004a61:	0f 85 96 00 00 00    	jne    c0004afd <f_unlink+0x103>
c0004a67:	b8 06 00 00 00       	mov    eax,0x6
c0004a6c:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0004a71:	0f 85 86 00 00 00    	jne    c0004afd <f_unlink+0x103>
c0004a77:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c0004a7c:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004a82:	74 07                	je     c0004a8b <f_unlink+0x91>
c0004a84:	b8 07 00 00 00       	mov    eax,0x7
c0004a89:	eb 72                	jmp    c0004afd <f_unlink+0x103>
c0004a8b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004a8f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004a93:	8a 07                	mov    al,BYTE PTR [edi]
c0004a95:	e8 29 e7 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0004a9a:	83 e5 10             	and    ebp,0x10
c0004a9d:	89 c6                	mov    esi,eax
c0004a9f:	75 0f                	jne    c0004ab0 <f_unlink+0xb6>
c0004aa1:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004aa5:	e8 95 ed ff ff       	call   c000383f <dir_remove>
c0004aaa:	85 c0                	test   eax,eax
c0004aac:	74 2f                	je     c0004add <f_unlink+0xe3>
c0004aae:	eb 4d                	jmp    c0004afd <f_unlink+0x103>
c0004ab0:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004ab4:	31 d2                	xor    edx,edx
c0004ab6:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0004aba:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004abe:	e8 55 e8 ff ff       	call   c0003318 <dir_sdi>
c0004ac3:	85 c0                	test   eax,eax
c0004ac5:	75 36                	jne    c0004afd <f_unlink+0x103>
c0004ac7:	31 d2                	xor    edx,edx
c0004ac9:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004acd:	e8 45 ec ff ff       	call   c0003717 <dir_read>
c0004ad2:	85 c0                	test   eax,eax
c0004ad4:	74 ae                	je     c0004a84 <f_unlink+0x8a>
c0004ad6:	83 f8 04             	cmp    eax,0x4
c0004ad9:	75 22                	jne    c0004afd <f_unlink+0x103>
c0004adb:	eb c4                	jmp    c0004aa1 <f_unlink+0xa7>
c0004add:	85 f6                	test   esi,esi
c0004adf:	75 0b                	jne    c0004aec <f_unlink+0xf2>
c0004ae1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ae5:	e8 8b e2 ff ff       	call   c0002d75 <sync_fs>
c0004aea:	eb 11                	jmp    c0004afd <f_unlink+0x103>
c0004aec:	31 c9                	xor    ecx,ecx
c0004aee:	89 f2                	mov    edx,esi
c0004af0:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004af4:	e8 26 ea ff ff       	call   c000351f <remove_chain>
c0004af9:	85 c0                	test   eax,eax
c0004afb:	74 e4                	je     c0004ae1 <f_unlink+0xe7>
c0004afd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004b01:	83 ec 0c             	sub    esp,0xc
c0004b04:	53                   	push   ebx
c0004b05:	e8 2e 11 00 00       	call   c0005c38 <ff_memfree>
c0004b0a:	83 c4 10             	add    esp,0x10
c0004b0d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b11:	81 c4 8c 00 00 00    	add    esp,0x8c
c0004b17:	5b                   	pop    ebx
c0004b18:	5e                   	pop    esi
c0004b19:	5f                   	pop    edi
c0004b1a:	5d                   	pop    ebp
c0004b1b:	c3                   	ret    

c0004b1c <f_mkdir>:
c0004b1c:	57                   	push   edi
c0004b1d:	b9 02 00 00 00       	mov    ecx,0x2
c0004b22:	56                   	push   esi
c0004b23:	53                   	push   ebx
c0004b24:	83 ec 50             	sub    esp,0x50
c0004b27:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004b2b:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004b2f:	e8 5d d9 ff ff       	call   c0002491 <mount_volume>
c0004b34:	89 c3                	mov    ebx,eax
c0004b36:	85 c0                	test   eax,eax
c0004b38:	0f 85 70 01 00 00    	jne    c0004cae <f_mkdir+0x192>
c0004b3e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b42:	bb 11 00 00 00       	mov    ebx,0x11
c0004b47:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004b4b:	83 ec 0c             	sub    esp,0xc
c0004b4e:	68 00 02 00 00       	push   0x200
c0004b53:	e8 c8 10 00 00       	call   c0005c20 <ff_memalloc>
c0004b58:	83 c4 10             	add    esp,0x10
c0004b5b:	89 c7                	mov    edi,eax
c0004b5d:	85 c0                	test   eax,eax
c0004b5f:	0f 84 49 01 00 00    	je     c0004cae <f_mkdir+0x192>
c0004b65:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b69:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004b6d:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004b70:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004b74:	e8 62 ee ff ff       	call   c00039db <follow_path>
c0004b79:	89 c3                	mov    ebx,eax
c0004b7b:	85 c0                	test   eax,eax
c0004b7d:	74 3e                	je     c0004bbd <f_mkdir+0xa1>
c0004b7f:	83 f8 04             	cmp    eax,0x4
c0004b82:	75 3e                	jne    c0004bc2 <f_mkdir+0xa6>
c0004b84:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b88:	31 d2                	xor    edx,edx
c0004b8a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004b8e:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004b92:	e8 49 e8 ff ff       	call   c00033e0 <create_chain>
c0004b97:	89 c6                	mov    esi,eax
c0004b99:	85 c0                	test   eax,eax
c0004b9b:	74 0c                	je     c0004ba9 <f_mkdir+0x8d>
c0004b9d:	bb 02 00 00 00       	mov    ebx,0x2
c0004ba2:	83 f8 01             	cmp    eax,0x1
c0004ba5:	74 07                	je     c0004bae <f_mkdir+0x92>
c0004ba7:	eb 2a                	jmp    c0004bd3 <f_mkdir+0xb7>
c0004ba9:	bb 07 00 00 00       	mov    ebx,0x7
c0004bae:	31 c9                	xor    ecx,ecx
c0004bb0:	89 f2                	mov    edx,esi
c0004bb2:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004bb6:	e8 64 e9 ff ff       	call   c000351f <remove_chain>
c0004bbb:	eb 05                	jmp    c0004bc2 <f_mkdir+0xa6>
c0004bbd:	bb 08 00 00 00       	mov    ebx,0x8
c0004bc2:	83 ec 0c             	sub    esp,0xc
c0004bc5:	57                   	push   edi
c0004bc6:	e8 6d 10 00 00       	call   c0005c38 <ff_memfree>
c0004bcb:	83 c4 10             	add    esp,0x10
c0004bce:	e9 db 00 00 00       	jmp    c0004cae <f_mkdir+0x192>
c0004bd3:	bb 01 00 00 00       	mov    ebx,0x1
c0004bd8:	83 f8 ff             	cmp    eax,0xffffffff
c0004bdb:	74 d1                	je     c0004bae <f_mkdir+0x92>
c0004bdd:	89 f2                	mov    edx,esi
c0004bdf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004be3:	e8 f1 dc ff ff       	call   c00028d9 <dir_clear>
c0004be8:	89 c3                	mov    ebx,eax
c0004bea:	85 c0                	test   eax,eax
c0004bec:	75 c0                	jne    c0004bae <f_mkdir+0x92>
c0004bee:	b9 0b 00 00 00       	mov    ecx,0xb
c0004bf3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004bf7:	ba 20 00 00 00       	mov    edx,0x20
c0004bfc:	83 c0 34             	add    eax,0x34
c0004bff:	e8 14 d2 ff ff       	call   c0001e18 <mem_set>
c0004c04:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c08:	ba 00 00 21 50       	mov    edx,0x50210000
c0004c0d:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004c11:	c6 40 3f 10          	mov    BYTE PTR [eax+0x3f],0x10
c0004c15:	83 c0 4a             	add    eax,0x4a
c0004c18:	e8 e3 d1 ff ff       	call   c0001e00 <st_dword>
c0004c1d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c21:	89 f1                	mov    ecx,esi
c0004c23:	8d 50 34             	lea    edx,[eax+0x34]
c0004c26:	e8 c1 e5 ff ff       	call   c00031ec <st_clust.isra.1>
c0004c2b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c2f:	b9 20 00 00 00       	mov    ecx,0x20
c0004c34:	8d 50 34             	lea    edx,[eax+0x34]
c0004c37:	83 c0 54             	add    eax,0x54
c0004c3a:	e8 c4 d1 ff ff       	call   c0001e03 <mem_cpy>
c0004c3f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c43:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004c47:	8d 50 54             	lea    edx,[eax+0x54]
c0004c4a:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004c4e:	e8 99 e5 ff ff       	call   c00031ec <st_clust.isra.1>
c0004c53:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c57:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c5b:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c5f:	e8 0c ee ff ff       	call   c0003a70 <dir_register>
c0004c64:	89 c3                	mov    ebx,eax
c0004c66:	85 c0                	test   eax,eax
c0004c68:	0f 85 40 ff ff ff    	jne    c0004bae <f_mkdir+0x92>
c0004c6e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004c72:	ba 00 00 21 50       	mov    edx,0x50210000
c0004c77:	83 c0 16             	add    eax,0x16
c0004c7a:	e8 81 d1 ff ff       	call   c0001e00 <st_dword>
c0004c7f:	89 f1                	mov    ecx,esi
c0004c81:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004c85:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c89:	e8 5e e5 ff ff       	call   c00031ec <st_clust.isra.1>
c0004c8e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004c92:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004c96:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c9a:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c9e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ca2:	e8 ce e0 ff ff       	call   c0002d75 <sync_fs>
c0004ca7:	89 c3                	mov    ebx,eax
c0004ca9:	e9 14 ff ff ff       	jmp    c0004bc2 <f_mkdir+0xa6>
c0004cae:	83 c4 50             	add    esp,0x50
c0004cb1:	89 d8                	mov    eax,ebx
c0004cb3:	5b                   	pop    ebx
c0004cb4:	5e                   	pop    esi
c0004cb5:	5f                   	pop    edi
c0004cb6:	c3                   	ret    

c0004cb7 <f_rename>:
c0004cb7:	57                   	push   edi
c0004cb8:	56                   	push   esi
c0004cb9:	53                   	push   ebx
c0004cba:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004cc0:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004cc7:	e8 7c d5 ff ff       	call   c0002248 <get_ldnumber>
c0004ccc:	b9 02 00 00 00       	mov    ecx,0x2
c0004cd1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004cd5:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004cdc:	e8 b0 d7 ff ff       	call   c0002491 <mount_volume>
c0004ce1:	85 c0                	test   eax,eax
c0004ce3:	0f 85 7c 01 00 00    	jne    c0004e65 <f_rename+0x1ae>
c0004ce9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ced:	83 ec 0c             	sub    esp,0xc
c0004cf0:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004cf4:	68 00 02 00 00       	push   0x200
c0004cf9:	e8 22 0f 00 00       	call   c0005c20 <ff_memalloc>
c0004cfe:	83 c4 10             	add    esp,0x10
c0004d01:	89 c6                	mov    esi,eax
c0004d03:	b8 11 00 00 00       	mov    eax,0x11
c0004d08:	85 f6                	test   esi,esi
c0004d0a:	0f 84 55 01 00 00    	je     c0004e65 <f_rename+0x1ae>
c0004d10:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d14:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004d1b:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004d1e:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004d22:	e8 b4 ec ff ff       	call   c00039db <follow_path>
c0004d27:	85 c0                	test   eax,eax
c0004d29:	0f 85 22 01 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004d2f:	8a 54 24 6b          	mov    dl,BYTE PTR [esp+0x6b]
c0004d33:	b8 06 00 00 00       	mov    eax,0x6
c0004d38:	80 e2 a0             	and    dl,0xa0
c0004d3b:	0f 85 10 01 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004d41:	b9 20 00 00 00       	mov    ecx,0x20
c0004d46:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004d4a:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d4e:	e8 b0 d0 ff ff       	call   c0001e03 <mem_cpy>
c0004d53:	b9 30 00 00 00       	mov    ecx,0x30
c0004d58:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004d5c:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004d60:	e8 9e d0 ff ff       	call   c0001e03 <mem_cpy>
c0004d65:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004d6c:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004d70:	e8 66 ec ff ff       	call   c00039db <follow_path>
c0004d75:	85 c0                	test   eax,eax
c0004d77:	75 20                	jne    c0004d99 <f_rename+0xe2>
c0004d79:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004d7d:	b8 08 00 00 00       	mov    eax,0x8
c0004d82:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004d86:	0f 85 c5 00 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004d8c:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004d90:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004d97:	eb 03                	jmp    c0004d9c <f_rename+0xe5>
c0004d99:	83 f8 04             	cmp    eax,0x4
c0004d9c:	0f 85 af 00 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004da2:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004da6:	e8 c5 ec ff ff       	call   c0003a70 <dir_register>
c0004dab:	85 c0                	test   eax,eax
c0004dad:	0f 85 9e 00 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004db3:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004dba:	b9 13 00 00 00       	mov    ecx,0x13
c0004dbf:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004dc2:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004dc6:	e8 38 d0 ff ff       	call   c0001e03 <mem_cpy>
c0004dcb:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004dcf:	a8 10                	test   al,0x10
c0004dd1:	75 03                	jne    c0004dd6 <f_rename+0x11f>
c0004dd3:	83 c8 20             	or     eax,0x20
c0004dd6:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004dd9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ddd:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004de1:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004de5:	74 54                	je     c0004e3b <f_rename+0x184>
c0004de7:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004deb:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004def:	74 4a                	je     c0004e3b <f_rename+0x184>
c0004df1:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004df5:	89 da                	mov    edx,ebx
c0004df7:	8a 07                	mov    al,BYTE PTR [edi]
c0004df9:	e8 c5 e3 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0004dfe:	89 c2                	mov    edx,eax
c0004e00:	89 f8                	mov    eax,edi
c0004e02:	e8 27 d2 ff ff       	call   c000202e <clst2sect>
c0004e07:	89 c2                	mov    edx,eax
c0004e09:	b8 02 00 00 00       	mov    eax,0x2
c0004e0e:	85 d2                	test   edx,edx
c0004e10:	74 3f                	je     c0004e51 <f_rename+0x19a>
c0004e12:	89 f8                	mov    eax,edi
c0004e14:	e8 25 d5 ff ff       	call   c000233e <move_window>
c0004e19:	85 c0                	test   eax,eax
c0004e1b:	75 34                	jne    c0004e51 <f_rename+0x19a>
c0004e1d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e21:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c0004e25:	75 14                	jne    c0004e3b <f_rename+0x184>
c0004e27:	8d 50 54             	lea    edx,[eax+0x54]
c0004e2a:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0004e2e:	e8 b9 e3 ff ff       	call   c00031ec <st_clust.isra.1>
c0004e33:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e37:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e3b:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004e3f:	e8 fb e9 ff ff       	call   c000383f <dir_remove>
c0004e44:	85 c0                	test   eax,eax
c0004e46:	75 09                	jne    c0004e51 <f_rename+0x19a>
c0004e48:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e4c:	e8 24 df ff ff       	call   c0002d75 <sync_fs>
c0004e51:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e55:	83 ec 0c             	sub    esp,0xc
c0004e58:	56                   	push   esi
c0004e59:	e8 da 0d 00 00       	call   c0005c38 <ff_memfree>
c0004e5e:	83 c4 10             	add    esp,0x10
c0004e61:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e65:	81 c4 a0 00 00 00    	add    esp,0xa0
c0004e6b:	5b                   	pop    ebx
c0004e6c:	5e                   	pop    esi
c0004e6d:	5f                   	pop    edi
c0004e6e:	c3                   	ret    

c0004e6f <f_chmod>:
c0004e6f:	57                   	push   edi
c0004e70:	b9 02 00 00 00       	mov    ecx,0x2
c0004e75:	56                   	push   esi
c0004e76:	53                   	push   ebx
c0004e77:	83 ec 50             	sub    esp,0x50
c0004e7a:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0004e7e:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c0004e82:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004e86:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004e8a:	e8 02 d6 ff ff       	call   c0002491 <mount_volume>
c0004e8f:	85 c0                	test   eax,eax
c0004e91:	0f 85 81 00 00 00    	jne    c0004f18 <f_chmod+0xa9>
c0004e97:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e9b:	83 ec 0c             	sub    esp,0xc
c0004e9e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004ea2:	68 00 02 00 00       	push   0x200
c0004ea7:	e8 74 0d 00 00       	call   c0005c20 <ff_memalloc>
c0004eac:	83 c4 10             	add    esp,0x10
c0004eaf:	89 c6                	mov    esi,eax
c0004eb1:	b8 11 00 00 00       	mov    eax,0x11
c0004eb6:	85 f6                	test   esi,esi
c0004eb8:	74 5e                	je     c0004f18 <f_chmod+0xa9>
c0004eba:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ebe:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004ec2:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004ec5:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004ec9:	e8 0d eb ff ff       	call   c00039db <follow_path>
c0004ece:	85 c0                	test   eax,eax
c0004ed0:	75 32                	jne    c0004f04 <f_chmod+0x95>
c0004ed2:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0004ed6:	b8 06 00 00 00       	mov    eax,0x6
c0004edb:	80 e2 a0             	and    dl,0xa0
c0004ede:	75 24                	jne    c0004f04 <f_chmod+0x95>
c0004ee0:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004ee4:	8a 50 0b             	mov    dl,BYTE PTR [eax+0xb]
c0004ee7:	31 d7                	xor    edi,edx
c0004ee9:	21 fb                	and    ebx,edi
c0004eeb:	83 e3 27             	and    ebx,0x27
c0004eee:	31 d3                	xor    ebx,edx
c0004ef0:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c0004ef3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ef7:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004efb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004eff:	e8 71 de ff ff       	call   c0002d75 <sync_fs>
c0004f04:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f08:	83 ec 0c             	sub    esp,0xc
c0004f0b:	56                   	push   esi
c0004f0c:	e8 27 0d 00 00       	call   c0005c38 <ff_memfree>
c0004f11:	83 c4 10             	add    esp,0x10
c0004f14:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004f18:	83 c4 50             	add    esp,0x50
c0004f1b:	5b                   	pop    ebx
c0004f1c:	5e                   	pop    esi
c0004f1d:	5f                   	pop    edi
c0004f1e:	c3                   	ret    

c0004f1f <f_utime>:
c0004f1f:	56                   	push   esi
c0004f20:	b9 02 00 00 00       	mov    ecx,0x2
c0004f25:	53                   	push   ebx
c0004f26:	83 ec 54             	sub    esp,0x54
c0004f29:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0004f2d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004f31:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004f35:	e8 57 d5 ff ff       	call   c0002491 <mount_volume>
c0004f3a:	85 c0                	test   eax,eax
c0004f3c:	0f 85 87 00 00 00    	jne    c0004fc9 <f_utime+0xaa>
c0004f42:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f46:	83 ec 0c             	sub    esp,0xc
c0004f49:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004f4d:	68 00 02 00 00       	push   0x200
c0004f52:	e8 c9 0c 00 00       	call   c0005c20 <ff_memalloc>
c0004f57:	83 c4 10             	add    esp,0x10
c0004f5a:	89 c3                	mov    ebx,eax
c0004f5c:	b8 11 00 00 00       	mov    eax,0x11
c0004f61:	85 db                	test   ebx,ebx
c0004f63:	74 64                	je     c0004fc9 <f_utime+0xaa>
c0004f65:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f69:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004f6d:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004f70:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004f74:	e8 62 ea ff ff       	call   c00039db <follow_path>
c0004f79:	85 c0                	test   eax,eax
c0004f7b:	75 38                	jne    c0004fb5 <f_utime+0x96>
c0004f7d:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0004f81:	b8 06 00 00 00       	mov    eax,0x6
c0004f86:	80 e2 a0             	and    dl,0xa0
c0004f89:	75 2a                	jne    c0004fb5 <f_utime+0x96>
c0004f8b:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0004f8f:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0004f93:	c1 e2 10             	shl    edx,0x10
c0004f96:	09 c2                	or     edx,eax
c0004f98:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004f9c:	83 c0 16             	add    eax,0x16
c0004f9f:	e8 5c ce ff ff       	call   c0001e00 <st_dword>
c0004fa4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fa8:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004fac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fb0:	e8 c0 dd ff ff       	call   c0002d75 <sync_fs>
c0004fb5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004fb9:	83 ec 0c             	sub    esp,0xc
c0004fbc:	53                   	push   ebx
c0004fbd:	e8 76 0c 00 00       	call   c0005c38 <ff_memfree>
c0004fc2:	83 c4 10             	add    esp,0x10
c0004fc5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004fc9:	83 c4 54             	add    esp,0x54
c0004fcc:	5b                   	pop    ebx
c0004fcd:	5e                   	pop    esi
c0004fce:	c3                   	ret    

c0004fcf <f_getlabel>:
c0004fcf:	55                   	push   ebp
c0004fd0:	31 c9                	xor    ecx,ecx
c0004fd2:	57                   	push   edi
c0004fd3:	56                   	push   esi
c0004fd4:	53                   	push   ebx
c0004fd5:	83 ec 5c             	sub    esp,0x5c
c0004fd8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004fdc:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004fe0:	e8 ac d4 ff ff       	call   c0002491 <mount_volume>
c0004fe5:	89 c6                	mov    esi,eax
c0004fe7:	85 c0                	test   eax,eax
c0004fe9:	0f 85 27 01 00 00    	jne    c0005116 <f_getlabel+0x147>
c0004fef:	83 7c 24 74 00       	cmp    DWORD PTR [esp+0x74],0x0
c0004ff4:	0f 84 d0 00 00 00    	je     c00050ca <f_getlabel+0xfb>
c0004ffa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ffe:	31 d2                	xor    edx,edx
c0005000:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005004:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000500c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005010:	e8 03 e3 ff ff       	call   c0003318 <dir_sdi>
c0005015:	85 c0                	test   eax,eax
c0005017:	0f 85 a1 00 00 00    	jne    c00050be <f_getlabel+0xef>
c000501d:	ba 01 00 00 00       	mov    edx,0x1
c0005022:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005026:	e8 ec e6 ff ff       	call   c0003717 <dir_read>
c000502b:	85 c0                	test   eax,eax
c000502d:	0f 85 8b 00 00 00    	jne    c00050be <f_getlabel+0xef>
c0005033:	31 db                	xor    ebx,ebx
c0005035:	31 c9                	xor    ecx,ecx
c0005037:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000503b:	8d 79 01             	lea    edi,[ecx+0x1]
c000503e:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0005043:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0005048:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000504c:	e8 06 ce ff ff       	call   c0001e57 <dbc_1st>
c0005051:	85 c0                	test   eax,eax
c0005053:	74 16                	je     c000506b <f_getlabel+0x9c>
c0005055:	83 ff 0b             	cmp    edi,0xb
c0005058:	74 11                	je     c000506b <f_getlabel+0x9c>
c000505a:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c000505f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005063:	8d 79 02             	lea    edi,[ecx+0x2]
c0005066:	c1 e0 08             	shl    eax,0x8
c0005069:	09 c2                	or     edx,eax
c000506b:	0f b7 d2             	movzx  edx,dx
c000506e:	50                   	push   eax
c000506f:	50                   	push   eax
c0005070:	68 b5 01 00 00       	push   0x1b5
c0005075:	52                   	push   edx
c0005076:	e8 75 0c 00 00       	call   c0005cf0 <ff_oem2uni>
c000507b:	83 c4 10             	add    esp,0x10
c000507e:	0f b7 c0             	movzx  eax,ax
c0005081:	85 c0                	test   eax,eax
c0005083:	74 22                	je     c00050a7 <f_getlabel+0xd8>
c0005085:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0005089:	b9 04 00 00 00       	mov    ecx,0x4
c000508e:	01 da                	add    edx,ebx
c0005090:	e8 a0 ce ff ff       	call   c0001f35 <put_utf>
c0005095:	0f b6 c0             	movzx  eax,al
c0005098:	85 c0                	test   eax,eax
c000509a:	74 0b                	je     c00050a7 <f_getlabel+0xd8>
c000509c:	01 c3                	add    ebx,eax
c000509e:	83 ff 0b             	cmp    edi,0xb
c00050a1:	74 06                	je     c00050a9 <f_getlabel+0xda>
c00050a3:	89 f9                	mov    ecx,edi
c00050a5:	eb 90                	jmp    c0005037 <f_getlabel+0x68>
c00050a7:	31 db                	xor    ebx,ebx
c00050a9:	03 5c 24 74          	add    ebx,DWORD PTR [esp+0x74]
c00050ad:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00050b0:	39 5c 24 74          	cmp    DWORD PTR [esp+0x74],ebx
c00050b4:	74 14                	je     c00050ca <f_getlabel+0xfb>
c00050b6:	4b                   	dec    ebx
c00050b7:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c00050ba:	74 f1                	je     c00050ad <f_getlabel+0xde>
c00050bc:	eb 0c                	jmp    c00050ca <f_getlabel+0xfb>
c00050be:	83 f8 04             	cmp    eax,0x4
c00050c1:	75 51                	jne    c0005114 <f_getlabel+0x145>
c00050c3:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00050c7:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00050ca:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c00050cf:	74 45                	je     c0005116 <f_getlabel+0x147>
c00050d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050d5:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00050d8:	e8 61 d2 ff ff       	call   c000233e <move_window>
c00050dd:	89 c6                	mov    esi,eax
c00050df:	85 c0                	test   eax,eax
c00050e1:	75 33                	jne    c0005116 <f_getlabel+0x147>
c00050e3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00050e7:	b8 43 00 00 00       	mov    eax,0x43
c00050ec:	0f b6 0a             	movzx  ecx,BYTE PTR [edx]
c00050ef:	83 f9 03             	cmp    ecx,0x3
c00050f2:	74 0f                	je     c0005103 <f_getlabel+0x134>
c00050f4:	31 c0                	xor    eax,eax
c00050f6:	83 f9 04             	cmp    ecx,0x4
c00050f9:	0f 94 c0             	sete   al
c00050fc:	48                   	dec    eax
c00050fd:	83 e0 c3             	and    eax,0xffffffc3
c0005100:	83 c0 64             	add    eax,0x64
c0005103:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0005107:	e8 d8 cc ff ff       	call   c0001de4 <ld_dword>
c000510c:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0005110:	89 07                	mov    DWORD PTR [edi],eax
c0005112:	eb 02                	jmp    c0005116 <f_getlabel+0x147>
c0005114:	89 c6                	mov    esi,eax
c0005116:	83 c4 5c             	add    esp,0x5c
c0005119:	89 f0                	mov    eax,esi
c000511b:	5b                   	pop    ebx
c000511c:	5e                   	pop    esi
c000511d:	5f                   	pop    edi
c000511e:	5d                   	pop    ebp
c000511f:	c3                   	ret    

c0005120 <f_setlabel>:
c0005120:	57                   	push   edi
c0005121:	b9 02 00 00 00       	mov    ecx,0x2
c0005126:	56                   	push   esi
c0005127:	53                   	push   ebx
c0005128:	83 ec 50             	sub    esp,0x50
c000512b:	8d 54 24 04          	lea    edx,[esp+0x4]
c000512f:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005133:	e8 59 d3 ff ff       	call   c0002491 <mount_volume>
c0005138:	89 c6                	mov    esi,eax
c000513a:	85 c0                	test   eax,eax
c000513c:	0f 85 65 01 00 00    	jne    c00052a7 <f_setlabel+0x187>
c0005142:	b9 0b 00 00 00       	mov    ecx,0xb
c0005147:	ba 20 00 00 00       	mov    edx,0x20
c000514c:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0005150:	31 db                	xor    ebx,ebx
c0005152:	e8 c1 cc ff ff       	call   c0001e18 <mem_set>
c0005157:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000515b:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c000515e:	76 5d                	jbe    c00051bd <f_setlabel+0x9d>
c0005160:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005164:	e8 f4 cc ff ff       	call   c0001e5d <tchar2uni>
c0005169:	3d ff ff 00 00       	cmp    eax,0xffff
c000516e:	76 0a                	jbe    c000517a <f_setlabel+0x5a>
c0005170:	be 06 00 00 00       	mov    esi,0x6
c0005175:	e9 2d 01 00 00       	jmp    c00052a7 <f_setlabel+0x187>
c000517a:	83 ec 0c             	sub    esp,0xc
c000517d:	50                   	push   eax
c000517e:	e8 e5 0b 00 00       	call   c0005d68 <ff_wtoupper>
c0005183:	5a                   	pop    edx
c0005184:	59                   	pop    ecx
c0005185:	68 b5 01 00 00       	push   0x1b5
c000518a:	50                   	push   eax
c000518b:	e8 c0 0a 00 00       	call   c0005c50 <ff_uni2oem>
c0005190:	83 c4 10             	add    esp,0x10
c0005193:	0f b7 f0             	movzx  esi,ax
c0005196:	89 f7                	mov    edi,esi
c0005198:	85 f6                	test   esi,esi
c000519a:	74 d4                	je     c0005170 <f_setlabel+0x50>
c000519c:	89 f2                	mov    edx,esi
c000519e:	b8 10 06 02 c0       	mov    eax,0xc0020610
c00051a3:	e8 9e cc ff ff       	call   c0001e46 <chk_chr>
c00051a8:	85 c0                	test   eax,eax
c00051aa:	75 c4                	jne    c0005170 <f_setlabel+0x50>
c00051ac:	81 fe ff 00 00 00    	cmp    esi,0xff
c00051b2:	0f 87 c9 00 00 00    	ja     c0005281 <f_setlabel+0x161>
c00051b8:	e9 e0 00 00 00       	jmp    c000529d <f_setlabel+0x17d>
c00051bd:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c00051c2:	74 ac                	je     c0005170 <f_setlabel+0x50>
c00051c4:	85 db                	test   ebx,ebx
c00051c6:	74 0e                	je     c00051d6 <f_setlabel+0xb6>
c00051c8:	8d 43 ff             	lea    eax,[ebx-0x1]
c00051cb:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c00051d0:	75 04                	jne    c00051d6 <f_setlabel+0xb6>
c00051d2:	89 c3                	mov    ebx,eax
c00051d4:	eb ee                	jmp    c00051c4 <f_setlabel+0xa4>
c00051d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00051da:	31 d2                	xor    edx,edx
c00051dc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00051e0:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00051e8:	8d 44 24 20          	lea    eax,[esp+0x20]
c00051ec:	e8 27 e1 ff ff       	call   c0003318 <dir_sdi>
c00051f1:	89 c6                	mov    esi,eax
c00051f3:	85 c0                	test   eax,eax
c00051f5:	0f 85 ac 00 00 00    	jne    c00052a7 <f_setlabel+0x187>
c00051fb:	ba 01 00 00 00       	mov    edx,0x1
c0005200:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005204:	e8 0e e5 ff ff       	call   c0003717 <dir_read>
c0005209:	85 c0                	test   eax,eax
c000520b:	75 18                	jne    c0005225 <f_setlabel+0x105>
c000520d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005211:	85 db                	test   ebx,ebx
c0005213:	74 0b                	je     c0005220 <f_setlabel+0x100>
c0005215:	b9 0b 00 00 00       	mov    ecx,0xb
c000521a:	8d 54 24 0a          	lea    edx,[esp+0xa]
c000521e:	eb 47                	jmp    c0005267 <f_setlabel+0x147>
c0005220:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0005223:	eb 47                	jmp    c000526c <f_setlabel+0x14c>
c0005225:	83 f8 04             	cmp    eax,0x4
c0005228:	75 53                	jne    c000527d <f_setlabel+0x15d>
c000522a:	85 db                	test   ebx,ebx
c000522c:	74 79                	je     c00052a7 <f_setlabel+0x187>
c000522e:	ba 01 00 00 00       	mov    edx,0x1
c0005233:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005237:	e8 76 e4 ff ff       	call   c00036b2 <dir_alloc>
c000523c:	89 c6                	mov    esi,eax
c000523e:	85 c0                	test   eax,eax
c0005240:	75 65                	jne    c00052a7 <f_setlabel+0x187>
c0005242:	b9 20 00 00 00       	mov    ecx,0x20
c0005247:	31 d2                	xor    edx,edx
c0005249:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000524d:	e8 c6 cb ff ff       	call   c0001e18 <mem_set>
c0005252:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005256:	b9 0b 00 00 00       	mov    ecx,0xb
c000525b:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c000525f:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005263:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005267:	e8 97 cb ff ff       	call   c0001e03 <mem_cpy>
c000526c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005270:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005274:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005278:	e8 f8 da ff ff       	call   c0002d75 <sync_fs>
c000527d:	89 c6                	mov    esi,eax
c000527f:	eb 26                	jmp    c00052a7 <f_setlabel+0x187>
c0005281:	83 fb 09             	cmp    ebx,0x9
c0005284:	0f 87 e6 fe ff ff    	ja     c0005170 <f_setlabel+0x50>
c000528a:	89 f0                	mov    eax,esi
c000528c:	88 64 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],ah
c0005290:	43                   	inc    ebx
c0005291:	89 f8                	mov    eax,edi
c0005293:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c0005297:	43                   	inc    ebx
c0005298:	e9 ba fe ff ff       	jmp    c0005157 <f_setlabel+0x37>
c000529d:	83 fb 0a             	cmp    ebx,0xa
c00052a0:	76 ef                	jbe    c0005291 <f_setlabel+0x171>
c00052a2:	e9 c9 fe ff ff       	jmp    c0005170 <f_setlabel+0x50>
c00052a7:	83 c4 50             	add    esp,0x50
c00052aa:	89 f0                	mov    eax,esi
c00052ac:	5b                   	pop    ebx
c00052ad:	5e                   	pop    esi
c00052ae:	5f                   	pop    edi
c00052af:	c3                   	ret    

c00052b0 <f_expand>:
c00052b0:	55                   	push   ebp
c00052b1:	57                   	push   edi
c00052b2:	56                   	push   esi
c00052b3:	53                   	push   ebx
c00052b4:	83 ec 2c             	sub    esp,0x2c
c00052b7:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00052bb:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00052bf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00052c3:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00052c7:	89 d8                	mov    eax,ebx
c00052c9:	e8 c7 cf ff ff       	call   c0002295 <validate>
c00052ce:	89 c6                	mov    esi,eax
c00052d0:	85 c0                	test   eax,eax
c00052d2:	0f 85 3b 01 00 00    	jne    c0005413 <f_expand+0x163>
c00052d8:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c00052dc:	85 f6                	test   esi,esi
c00052de:	0f 85 2f 01 00 00    	jne    c0005413 <f_expand+0x163>
c00052e4:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c00052e9:	75 0a                	jne    c00052f5 <f_expand+0x45>
c00052eb:	be 07 00 00 00       	mov    esi,0x7
c00052f0:	e9 1e 01 00 00       	jmp    c0005413 <f_expand+0x163>
c00052f5:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c00052f9:	75 f0                	jne    c00052eb <f_expand+0x3b>
c00052fb:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00052ff:	74 ea                	je     c00052eb <f_expand+0x3b>
c0005301:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0005305:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c0005309:	c1 e1 09             	shl    ecx,0x9
c000530c:	8d 41 ff             	lea    eax,[ecx-0x1]
c000530f:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c0005313:	0f 95 c0             	setne  al
c0005316:	31 d2                	xor    edx,edx
c0005318:	0f b6 c0             	movzx  eax,al
c000531b:	89 c7                	mov    edi,eax
c000531d:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005321:	f7 f1                	div    ecx
c0005323:	01 f8                	add    eax,edi
c0005325:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
c0005328:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000532c:	83 ff 01             	cmp    edi,0x1
c000532f:	76 05                	jbe    c0005336 <f_expand+0x86>
c0005331:	39 7d 18             	cmp    DWORD PTR [ebp+0x18],edi
c0005334:	77 05                	ja     c000533b <f_expand+0x8b>
c0005336:	bf 02 00 00 00       	mov    edi,0x2
c000533b:	89 3c 24             	mov    DWORD PTR [esp],edi
c000533e:	89 fd                	mov    ebp,edi
c0005340:	31 c9                	xor    ecx,ecx
c0005342:	89 ea                	mov    edx,ebp
c0005344:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005348:	8b 03                	mov    eax,DWORD PTR [ebx]
c000534a:	45                   	inc    ebp
c000534b:	e8 c4 de ff ff       	call   c0003214 <get_fat.isra.2>
c0005350:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005354:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005358:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c000535b:	77 05                	ja     c0005362 <f_expand+0xb2>
c000535d:	bd 02 00 00 00       	mov    ebp,0x2
c0005362:	83 f8 01             	cmp    eax,0x1
c0005365:	74 20                	je     c0005387 <f_expand+0xd7>
c0005367:	83 f8 ff             	cmp    eax,0xffffffff
c000536a:	74 25                	je     c0005391 <f_expand+0xe1>
c000536c:	85 c0                	test   eax,eax
c000536e:	75 09                	jne    c0005379 <f_expand+0xc9>
c0005370:	41                   	inc    ecx
c0005371:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c0005375:	75 07                	jne    c000537e <f_expand+0xce>
c0005377:	eb 1f                	jmp    c0005398 <f_expand+0xe8>
c0005379:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000537c:	31 c9                	xor    ecx,ecx
c000537e:	39 fd                	cmp    ebp,edi
c0005380:	75 c0                	jne    c0005342 <f_expand+0x92>
c0005382:	e9 64 ff ff ff       	jmp    c00052eb <f_expand+0x3b>
c0005387:	be 02 00 00 00       	mov    esi,0x2
c000538c:	e9 82 00 00 00       	jmp    c0005413 <f_expand+0x163>
c0005391:	be 01 00 00 00       	mov    esi,0x1
c0005396:	eb 7b                	jmp    c0005413 <f_expand+0x163>
c0005398:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000539d:	74 2b                	je     c00053ca <f_expand+0x11a>
c000539f:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00053a2:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c00053a6:	85 ed                	test   ebp,ebp
c00053a8:	74 24                	je     c00053ce <f_expand+0x11e>
c00053aa:	83 c9 ff             	or     ecx,0xffffffff
c00053ad:	83 fd 01             	cmp    ebp,0x1
c00053b0:	74 03                	je     c00053b5 <f_expand+0x105>
c00053b2:	8d 4f 01             	lea    ecx,[edi+0x1]
c00053b5:	89 fa                	mov    edx,edi
c00053b7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00053bb:	e8 c2 d3 ff ff       	call   c0002782 <put_fat>
c00053c0:	85 c0                	test   eax,eax
c00053c2:	75 4d                	jne    c0005411 <f_expand+0x161>
c00053c4:	89 f8                	mov    eax,edi
c00053c6:	4d                   	dec    ebp
c00053c7:	47                   	inc    edi
c00053c8:	eb dc                	jmp    c00053a6 <f_expand+0xf6>
c00053ca:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00053cd:	48                   	dec    eax
c00053ce:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00053d2:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00053d7:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c00053da:	74 37                	je     c0005413 <f_expand+0x163>
c00053dc:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00053df:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00053e2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00053e6:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00053e9:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00053ec:	83 c8 40             	or     eax,0x40
c00053ef:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00053f2:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00053f5:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c00053f8:	8d 4b fe             	lea    ecx,[ebx-0x2]
c00053fb:	39 c8                	cmp    eax,ecx
c00053fd:	77 14                	ja     c0005413 <f_expand+0x163>
c00053ff:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0005403:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0005406:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0005409:	83 c8 01             	or     eax,0x1
c000540c:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c000540f:	eb 02                	jmp    c0005413 <f_expand+0x163>
c0005411:	89 c6                	mov    esi,eax
c0005413:	83 c4 2c             	add    esp,0x2c
c0005416:	89 f0                	mov    eax,esi
c0005418:	5b                   	pop    ebx
c0005419:	5e                   	pop    esi
c000541a:	5f                   	pop    edi
c000541b:	5d                   	pop    ebp
c000541c:	c3                   	ret    

c000541d <f_mkfs>:
c000541d:	55                   	push   ebp
c000541e:	57                   	push   edi
c000541f:	56                   	push   esi
c0005420:	be 0b 00 00 00       	mov    esi,0xb
c0005425:	53                   	push   ebx
c0005426:	83 ec 5c             	sub    esp,0x5c
c0005429:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000542d:	8b 6c 24 78          	mov    ebp,DWORD PTR [esp+0x78]
c0005431:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005435:	e8 0e ce ff ff       	call   c0002248 <get_ldnumber>
c000543a:	85 c0                	test   eax,eax
c000543c:	0f 88 d1 07 00 00    	js     c0005c13 <f_mkfs+0x7f6>
c0005442:	8b 14 85 a0 64 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9b60]
c0005449:	85 d2                	test   edx,edx
c000544b:	74 03                	je     c0005450 <f_mkfs+0x33>
c000544d:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0005450:	85 db                	test   ebx,ebx
c0005452:	75 05                	jne    c0005459 <f_mkfs+0x3c>
c0005454:	bb 00 06 02 c0       	mov    ebx,0xc0020600
c0005459:	83 ec 0c             	sub    esp,0xc
c000545c:	0f b6 c0             	movzx  eax,al
c000545f:	be 03 00 00 00       	mov    esi,0x3
c0005464:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005468:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000546c:	e8 18 c9 ff ff       	call   c0001d89 <disk_initialize>
c0005471:	83 c4 10             	add    esp,0x10
c0005474:	a8 01                	test   al,0x1
c0005476:	0f 85 97 07 00 00    	jne    c0005c13 <f_mkfs+0x7f6>
c000547c:	be 0a 00 00 00       	mov    esi,0xa
c0005481:	a8 04                	test   al,0x4
c0005483:	0f 85 8a 07 00 00    	jne    c0005c13 <f_mkfs+0x7f6>
c0005489:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000548c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0005490:	85 c0                	test   eax,eax
c0005492:	75 20                	jne    c00054b4 <f_mkfs+0x97>
c0005494:	51                   	push   ecx
c0005495:	8d 44 24 44          	lea    eax,[esp+0x44]
c0005499:	50                   	push   eax
c000549a:	6a 03                	push   0x3
c000549c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00054a0:	e8 13 c9 ff ff       	call   c0001db8 <disk_ioctl>
c00054a5:	83 c4 10             	add    esp,0x10
c00054a8:	85 c0                	test   eax,eax
c00054aa:	74 08                	je     c00054b4 <f_mkfs+0x97>
c00054ac:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00054b4:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00054b8:	8d 42 ff             	lea    eax,[edx-0x1]
c00054bb:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00054c0:	77 04                	ja     c00054c6 <f_mkfs+0xa9>
c00054c2:	85 c2                	test   edx,eax
c00054c4:	74 08                	je     c00054ce <f_mkfs+0xb1>
c00054c6:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00054ce:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00054d1:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00054d5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00054d9:	48                   	dec    eax
c00054da:	3c 01                	cmp    al,0x1
c00054dc:	76 05                	jbe    c00054e3 <f_mkfs+0xc6>
c00054de:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c00054e3:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00054e6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00054ea:	48                   	dec    eax
c00054eb:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00054f0:	77 07                	ja     c00054f9 <f_mkfs+0xdc>
c00054f2:	f6 44 24 14 0f       	test   BYTE PTR [esp+0x14],0xf
c00054f7:	74 08                	je     c0005501 <f_mkfs+0xe4>
c00054f9:	c7 44 24 14 00 02 00 00 	mov    DWORD PTR [esp+0x14],0x200
c0005501:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0005504:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c000550a:	77 07                	ja     c0005513 <f_mkfs+0xf6>
c000550c:	8d 47 ff             	lea    eax,[edi-0x1]
c000550f:	85 f8                	test   eax,edi
c0005511:	74 02                	je     c0005515 <f_mkfs+0xf8>
c0005513:	31 ff                	xor    edi,edi
c0005515:	81 7c 24 7c ff 01 00 00 	cmp    DWORD PTR [esp+0x7c],0x1ff
c000551d:	77 0a                	ja     c0005529 <f_mkfs+0x10c>
c000551f:	be 11 00 00 00       	mov    esi,0x11
c0005524:	e9 ea 06 00 00       	jmp    c0005c13 <f_mkfs+0x7f6>
c0005529:	8b 33                	mov    esi,DWORD PTR [ebx]
c000552b:	85 ed                	test   ebp,ebp
c000552d:	89 eb                	mov    ebx,ebp
c000552f:	75 1e                	jne    c000554f <f_mkfs+0x132>
c0005531:	83 ec 0c             	sub    esp,0xc
c0005534:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c000553b:	25 00 fe ff ff       	and    eax,0xfffffe00
c0005540:	50                   	push   eax
c0005541:	e8 da 06 00 00       	call   c0005c20 <ff_memalloc>
c0005546:	83 c4 10             	add    esp,0x10
c0005549:	89 c3                	mov    ebx,eax
c000554b:	85 c0                	test   eax,eax
c000554d:	74 d0                	je     c000551f <f_mkfs+0x102>
c000554f:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0005557:	52                   	push   edx
c0005558:	8d 44 24 48          	lea    eax,[esp+0x48]
c000555c:	50                   	push   eax
c000555d:	6a 01                	push   0x1
c000555f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005563:	e8 50 c8 ff ff       	call   c0001db8 <disk_ioctl>
c0005568:	83 c4 10             	add    esp,0x10
c000556b:	85 c0                	test   eax,eax
c000556d:	0f 85 49 06 00 00    	jne    c0005bbc <f_mkfs+0x79f>
c0005573:	89 f0                	mov    eax,esi
c0005575:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000557d:	83 e0 08             	and    eax,0x8
c0005580:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0005584:	75 18                	jne    c000559e <f_mkfs+0x181>
c0005586:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000558a:	83 f8 3f             	cmp    eax,0x3f
c000558d:	76 0f                	jbe    c000559e <f_mkfs+0x181>
c000558f:	83 e8 3f             	sub    eax,0x3f
c0005592:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c000559a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000559e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055a2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00055a6:	83 f8 7f             	cmp    eax,0x7f
c00055a9:	0f 86 5b 02 00 00    	jbe    c000580a <f_mkfs+0x3ed>
c00055af:	b9 80 00 00 00       	mov    ecx,0x80
c00055b4:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c00055ba:	77 05                	ja     c00055c1 <f_mkfs+0x1a4>
c00055bc:	c1 ef 09             	shr    edi,0x9
c00055bf:	89 f9                	mov    ecx,edi
c00055c1:	89 f0                	mov    eax,esi
c00055c3:	89 f7                	mov    edi,esi
c00055c5:	83 e0 01             	and    eax,0x1
c00055c8:	83 e7 02             	and    edi,0x2
c00055cb:	0f b6 c0             	movzx  eax,al
c00055ce:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c00055d2:	74 0a                	je     c00055de <f_mkfs+0x1c1>
c00055d4:	85 c0                	test   eax,eax
c00055d6:	0f 84 4f 01 00 00    	je     c000572b <f_mkfs+0x30e>
c00055dc:	eb 37                	jmp    c0005615 <f_mkfs+0x1f8>
c00055de:	be 13 00 00 00       	mov    esi,0x13
c00055e3:	85 c0                	test   eax,eax
c00055e5:	75 2e                	jne    c0005615 <f_mkfs+0x1f8>
c00055e7:	e9 e7 05 00 00       	jmp    c0005bd3 <f_mkfs+0x7b6>
c00055ec:	83 f8 02             	cmp    eax,0x2
c00055ef:	0f 85 0d 02 00 00    	jne    c0005802 <f_mkfs+0x3e5>
c00055f5:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c00055fb:	0f 86 e4 01 00 00    	jbe    c00057e5 <f_mkfs+0x3c8>
c0005601:	85 c9                	test   ecx,ecx
c0005603:	0f 85 dc 05 00 00    	jne    c0005be5 <f_mkfs+0x7c8>
c0005609:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c000560c:	83 f9 40             	cmp    ecx,0x40
c000560f:	0f 87 e0 05 00 00    	ja     c0005bf5 <f_mkfs+0x7d8>
c0005615:	89 cf                	mov    edi,ecx
c0005617:	85 c9                	test   ecx,ecx
c0005619:	75 1c                	jne    c0005637 <f_mkfs+0x21a>
c000561b:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000561f:	b8 e0 05 02 c0       	mov    eax,0xc00205e0
c0005624:	c1 ee 0c             	shr    esi,0xc
c0005627:	bf 01 00 00 00       	mov    edi,0x1
c000562c:	0f b7 10             	movzx  edx,WORD PTR [eax]
c000562f:	85 d2                	test   edx,edx
c0005631:	0f 85 63 01 00 00    	jne    c000579a <f_mkfs+0x37d>
c0005637:	31 d2                	xor    edx,edx
c0005639:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000563d:	f7 f7                	div    edi
c000563f:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005644:	0f 86 62 01 00 00    	jbe    c00057ac <f_mkfs+0x38f>
c000564a:	83 c0 02             	add    eax,0x2
c000564d:	c6 44 24 0b 02       	mov    BYTE PTR [esp+0xb],0x2
c0005652:	01 c0                	add    eax,eax
c0005654:	05 ff 01 00 00       	add    eax,0x1ff
c0005659:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0005661:	c1 e8 09             	shr    eax,0x9
c0005664:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005668:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000566c:	c1 e0 05             	shl    eax,0x5
c000566f:	c1 e8 09             	shr    eax,0x9
c0005672:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0005676:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c000567b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000567f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005683:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c0005687:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000568b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000568f:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c0005694:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0005698:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c000569c:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00056a0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00056a4:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00056a8:	8d 74 10 ff          	lea    esi,[eax+edx*1-0x1]
c00056ac:	f7 d8                	neg    eax
c00056ae:	21 c6                	and    esi,eax
c00056b0:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00056b5:	29 d6                	sub    esi,edx
c00056b7:	83 f8 03             	cmp    eax,0x3
c00056ba:	0f 85 ff 00 00 00    	jne    c00057bf <f_mkfs+0x3a2>
c00056c0:	01 74 24 24          	add    DWORD PTR [esp+0x24],esi
c00056c4:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c00056c8:	89 f8                	mov    eax,edi
c00056ca:	c1 e0 04             	shl    eax,0x4
c00056cd:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c00056d1:	03 44 24 34          	add    eax,DWORD PTR [esp+0x34]
c00056d5:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c00056d9:	0f 82 2b 01 00 00    	jb     c000580a <f_mkfs+0x3ed>
c00056df:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00056e3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00056e7:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c00056eb:	0f af 54 24 28       	imul   edx,DWORD PTR [esp+0x28]
c00056f0:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c00056f4:	29 d0                	sub    eax,edx
c00056f6:	31 d2                	xor    edx,edx
c00056f8:	f7 f7                	div    edi
c00056fa:	89 c6                	mov    esi,eax
c00056fc:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005701:	83 f8 03             	cmp    eax,0x3
c0005704:	0f 85 e2 fe ff ff    	jne    c00055ec <f_mkfs+0x1cf>
c000570a:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005710:	0f 87 03 01 00 00    	ja     c0005819 <f_mkfs+0x3fc>
c0005716:	85 c9                	test   ecx,ecx
c0005718:	0f 85 ec 00 00 00    	jne    c000580a <f_mkfs+0x3ed>
c000571e:	83 ff 01             	cmp    edi,0x1
c0005721:	0f 86 e3 00 00 00    	jbe    c000580a <f_mkfs+0x3ed>
c0005727:	d1 ef                	shr    edi,1
c0005729:	89 f9                	mov    ecx,edi
c000572b:	89 ce                	mov    esi,ecx
c000572d:	85 c9                	test   ecx,ecx
c000572f:	75 25                	jne    c0005756 <f_mkfs+0x339>
c0005731:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005735:	b8 f0 05 02 c0       	mov    eax,0xc00205f0
c000573a:	c1 ee 11             	shr    esi,0x11
c000573d:	b9 01 00 00 00       	mov    ecx,0x1
c0005742:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0005745:	85 d2                	test   edx,edx
c0005747:	74 0b                	je     c0005754 <f_mkfs+0x337>
c0005749:	83 c0 02             	add    eax,0x2
c000574c:	39 f2                	cmp    edx,esi
c000574e:	77 04                	ja     c0005754 <f_mkfs+0x337>
c0005750:	01 c9                	add    ecx,ecx
c0005752:	eb ee                	jmp    c0005742 <f_mkfs+0x325>
c0005754:	31 f6                	xor    esi,esi
c0005756:	31 d2                	xor    edx,edx
c0005758:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000575c:	f7 f1                	div    ecx
c000575e:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0005765:	2d f6 ff 00 00       	sub    eax,0xfff6
c000576a:	c1 ea 09             	shr    edx,0x9
c000576d:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0005772:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0005776:	0f 87 8e 00 00 00    	ja     c000580a <f_mkfs+0x3ed>
c000577c:	89 cf                	mov    edi,ecx
c000577e:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c0005786:	89 f1                	mov    ecx,esi
c0005788:	c7 44 24 24 20 00 00 00 	mov    DWORD PTR [esp+0x24],0x20
c0005790:	c6 44 24 0b 03       	mov    BYTE PTR [esp+0xb],0x3
c0005795:	e9 dc fe ff ff       	jmp    c0005676 <f_mkfs+0x259>
c000579a:	83 c0 02             	add    eax,0x2
c000579d:	39 f2                	cmp    edx,esi
c000579f:	0f 87 92 fe ff ff    	ja     c0005637 <f_mkfs+0x21a>
c00057a5:	01 ff                	add    edi,edi
c00057a7:	e9 80 fe ff ff       	jmp    c000562c <f_mkfs+0x20f>
c00057ac:	8d 04 40             	lea    eax,[eax+eax*2]
c00057af:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c00057b4:	40                   	inc    eax
c00057b5:	d1 e8                	shr    eax,1
c00057b7:	83 c0 03             	add    eax,0x3
c00057ba:	e9 95 fe ff ff       	jmp    c0005654 <f_mkfs+0x237>
c00057bf:	31 d2                	xor    edx,edx
c00057c1:	89 f0                	mov    eax,esi
c00057c3:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00057c7:	85 d2                	test   edx,edx
c00057c9:	74 09                	je     c00057d4 <f_mkfs+0x3b7>
c00057cb:	4e                   	dec    esi
c00057cc:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c00057d0:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c00057d4:	89 f0                	mov    eax,esi
c00057d6:	31 d2                	xor    edx,edx
c00057d8:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00057dc:	01 44 24 18          	add    DWORD PTR [esp+0x18],eax
c00057e0:	e9 e3 fe ff ff       	jmp    c00056c8 <f_mkfs+0x2ab>
c00057e5:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c00057eb:	77 2c                	ja     c0005819 <f_mkfs+0x3fc>
c00057ed:	85 c9                	test   ecx,ecx
c00057ef:	75 19                	jne    c000580a <f_mkfs+0x3ed>
c00057f1:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c00057f4:	81 f9 80 00 00 00    	cmp    ecx,0x80
c00057fa:	0f 86 15 fe ff ff    	jbe    c0005615 <f_mkfs+0x1f8>
c0005800:	eb 08                	jmp    c000580a <f_mkfs+0x3ed>
c0005802:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c0005808:	76 0a                	jbe    c0005814 <f_mkfs+0x3f7>
c000580a:	be 0e 00 00 00       	mov    esi,0xe
c000580f:	e9 bf 03 00 00       	jmp    c0005bd3 <f_mkfs+0x7b6>
c0005814:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c0005819:	31 d2                	xor    edx,edx
c000581b:	b9 00 02 00 00       	mov    ecx,0x200
c0005820:	89 d8                	mov    eax,ebx
c0005822:	e8 f1 c5 ff ff       	call   c0001e18 <mem_set>
c0005827:	b9 0b 00 00 00       	mov    ecx,0xb
c000582c:	ba 92 05 02 c0       	mov    edx,0xc0020592
c0005831:	89 d8                	mov    eax,ebx
c0005833:	e8 cb c5 ff ff       	call   c0001e03 <mem_cpy>
c0005838:	8d 43 0b             	lea    eax,[ebx+0xb]
c000583b:	ba 00 02 00 00       	mov    edx,0x200
c0005840:	e8 b7 c5 ff ff       	call   c0001dfc <st_word>
c0005845:	89 f8                	mov    eax,edi
c0005847:	0f b7 54 24 24       	movzx  edx,WORD PTR [esp+0x24]
c000584c:	88 43 0d             	mov    BYTE PTR [ebx+0xd],al
c000584f:	8d 43 0e             	lea    eax,[ebx+0xe]
c0005852:	e8 a5 c5 ff ff       	call   c0001dfc <st_word>
c0005857:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c000585b:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000585e:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005863:	83 f8 03             	cmp    eax,0x3
c0005866:	75 08                	jne    c0005870 <f_mkfs+0x453>
c0005868:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005870:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005874:	8d 43 11             	lea    eax,[ebx+0x11]
c0005877:	e8 80 c5 ff ff       	call   c0001dfc <st_word>
c000587c:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0005880:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0005886:	77 0a                	ja     c0005892 <f_mkfs+0x475>
c0005888:	8d 43 13             	lea    eax,[ebx+0x13]
c000588b:	e8 6c c5 ff ff       	call   c0001dfc <st_word>
c0005890:	eb 08                	jmp    c000589a <f_mkfs+0x47d>
c0005892:	8d 43 20             	lea    eax,[ebx+0x20]
c0005895:	e8 66 c5 ff ff       	call   c0001e00 <st_dword>
c000589a:	8d 43 18             	lea    eax,[ebx+0x18]
c000589d:	ba 3f 00 00 00       	mov    edx,0x3f
c00058a2:	c6 43 15 f8          	mov    BYTE PTR [ebx+0x15],0xf8
c00058a6:	e8 51 c5 ff ff       	call   c0001dfc <st_word>
c00058ab:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00058ae:	ba ff 00 00 00       	mov    edx,0xff
c00058b3:	e8 44 c5 ff ff       	call   c0001dfc <st_word>
c00058b8:	8d 43 1c             	lea    eax,[ebx+0x1c]
c00058bb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00058bf:	e8 3c c5 ff ff       	call   c0001e00 <st_dword>
c00058c4:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00058c9:	83 f8 03             	cmp    eax,0x3
c00058cc:	75 57                	jne    c0005925 <f_mkfs+0x508>
c00058ce:	8d 43 43             	lea    eax,[ebx+0x43]
c00058d1:	ba 00 00 21 50       	mov    edx,0x50210000
c00058d6:	e8 25 c5 ff ff       	call   c0001e00 <st_dword>
c00058db:	8d 43 24             	lea    eax,[ebx+0x24]
c00058de:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00058e2:	e8 19 c5 ff ff       	call   c0001e00 <st_dword>
c00058e7:	8d 43 2c             	lea    eax,[ebx+0x2c]
c00058ea:	ba 02 00 00 00       	mov    edx,0x2
c00058ef:	e8 0c c5 ff ff       	call   c0001e00 <st_dword>
c00058f4:	8d 43 30             	lea    eax,[ebx+0x30]
c00058f7:	ba 01 00 00 00       	mov    edx,0x1
c00058fc:	e8 fb c4 ff ff       	call   c0001dfc <st_word>
c0005901:	8d 43 32             	lea    eax,[ebx+0x32]
c0005904:	ba 06 00 00 00       	mov    edx,0x6
c0005909:	e8 ee c4 ff ff       	call   c0001dfc <st_word>
c000590e:	c6 43 40 80          	mov    BYTE PTR [ebx+0x40],0x80
c0005912:	c6 43 42 29          	mov    BYTE PTR [ebx+0x42],0x29
c0005916:	8d 43 47             	lea    eax,[ebx+0x47]
c0005919:	b9 13 00 00 00       	mov    ecx,0x13
c000591e:	ba 9e 05 02 c0       	mov    edx,0xc002059e
c0005923:	eb 2f                	jmp    c0005954 <f_mkfs+0x537>
c0005925:	8d 43 27             	lea    eax,[ebx+0x27]
c0005928:	ba 00 00 21 50       	mov    edx,0x50210000
c000592d:	e8 ce c4 ff ff       	call   c0001e00 <st_dword>
c0005932:	0f b7 54 24 18       	movzx  edx,WORD PTR [esp+0x18]
c0005937:	8d 43 16             	lea    eax,[ebx+0x16]
c000593a:	e8 bd c4 ff ff       	call   c0001dfc <st_word>
c000593f:	c6 43 24 80          	mov    BYTE PTR [ebx+0x24],0x80
c0005943:	c6 43 26 29          	mov    BYTE PTR [ebx+0x26],0x29
c0005947:	8d 43 2b             	lea    eax,[ebx+0x2b]
c000594a:	b9 13 00 00 00       	mov    ecx,0x13
c000594f:	ba b2 05 02 c0       	mov    edx,0xc00205b2
c0005954:	e8 aa c4 ff ff       	call   c0001e03 <mem_cpy>
c0005959:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c000595f:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005964:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005968:	e8 8f c4 ff ff       	call   c0001dfc <st_word>
c000596d:	6a 01                	push   0x1
c000596f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005973:	53                   	push   ebx
c0005974:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005978:	e8 25 c4 ff ff       	call   c0001da2 <disk_write>
c000597d:	83 c4 10             	add    esp,0x10
c0005980:	85 c0                	test   eax,eax
c0005982:	0f 85 34 02 00 00    	jne    c0005bbc <f_mkfs+0x79f>
c0005988:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c000598d:	83 f8 03             	cmp    eax,0x3
c0005990:	0f 85 98 00 00 00    	jne    c0005a2e <f_mkfs+0x611>
c0005996:	6a 01                	push   0x1
c0005998:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000599c:	83 c0 06             	add    eax,0x6
c000599f:	50                   	push   eax
c00059a0:	53                   	push   ebx
c00059a1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00059a5:	e8 f8 c3 ff ff       	call   c0001da2 <disk_write>
c00059aa:	b9 00 02 00 00       	mov    ecx,0x200
c00059af:	31 d2                	xor    edx,edx
c00059b1:	89 d8                	mov    eax,ebx
c00059b3:	e8 60 c4 ff ff       	call   c0001e18 <mem_set>
c00059b8:	ba 52 52 61 41       	mov    edx,0x41615252
c00059bd:	89 d8                	mov    eax,ebx
c00059bf:	e8 3c c4 ff ff       	call   c0001e00 <st_dword>
c00059c4:	8d 83 e4 01 00 00    	lea    eax,[ebx+0x1e4]
c00059ca:	ba 72 72 41 61       	mov    edx,0x61417272
c00059cf:	e8 2c c4 ff ff       	call   c0001e00 <st_dword>
c00059d4:	8d 56 ff             	lea    edx,[esi-0x1]
c00059d7:	8d 83 e8 01 00 00    	lea    eax,[ebx+0x1e8]
c00059dd:	e8 1e c4 ff ff       	call   c0001e00 <st_dword>
c00059e2:	8d 83 ec 01 00 00    	lea    eax,[ebx+0x1ec]
c00059e8:	ba 02 00 00 00       	mov    edx,0x2
c00059ed:	e8 0e c4 ff ff       	call   c0001e00 <st_dword>
c00059f2:	ba 55 aa 00 00       	mov    edx,0xaa55
c00059f7:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c00059fd:	e8 fa c3 ff ff       	call   c0001dfc <st_word>
c0005a02:	6a 01                	push   0x1
c0005a04:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005a08:	83 c0 07             	add    eax,0x7
c0005a0b:	50                   	push   eax
c0005a0c:	53                   	push   ebx
c0005a0d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0005a11:	e8 8c c3 ff ff       	call   c0001da2 <disk_write>
c0005a16:	83 c4 20             	add    esp,0x20
c0005a19:	6a 01                	push   0x1
c0005a1b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005a1f:	40                   	inc    eax
c0005a20:	50                   	push   eax
c0005a21:	53                   	push   ebx
c0005a22:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005a26:	e8 77 c3 ff ff       	call   c0001da2 <disk_write>
c0005a2b:	83 c4 10             	add    esp,0x10
c0005a2e:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0005a32:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0005a36:	c1 e8 09             	shr    eax,0x9
c0005a39:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0005a3f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005a43:	31 d2                	xor    edx,edx
c0005a45:	89 d8                	mov    eax,ebx
c0005a47:	e8 cc c3 ff ff       	call   c0001e18 <mem_set>
c0005a4c:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005a51:	31 c9                	xor    ecx,ecx
c0005a53:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0005a5b:	83 f8 01             	cmp    eax,0x1
c0005a5e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005a62:	0f 94 c1             	sete   cl
c0005a65:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0005a69:	ff 4c 24 14          	dec    DWORD PTR [esp+0x14]
c0005a6d:	81 64 24 14 00 00 00 ff 	and    DWORD PTR [esp+0x14],0xff000000
c0005a75:	81 44 24 14 f8 ff ff 00 	add    DWORD PTR [esp+0x14],0xfffff8
c0005a7d:	83 7c 24 2c 03       	cmp    DWORD PTR [esp+0x2c],0x3
c0005a82:	75 21                	jne    c0005aa5 <f_mkfs+0x688>
c0005a84:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005a89:	89 d8                	mov    eax,ebx
c0005a8b:	e8 70 c3 ff ff       	call   c0001e00 <st_dword>
c0005a90:	8d 43 04             	lea    eax,[ebx+0x4]
c0005a93:	83 ca ff             	or     edx,0xffffffff
c0005a96:	e8 65 c3 ff ff       	call   c0001e00 <st_dword>
c0005a9b:	8d 43 08             	lea    eax,[ebx+0x8]
c0005a9e:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0005aa3:	eb 06                	jmp    c0005aab <f_mkfs+0x68e>
c0005aa5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005aa9:	89 d8                	mov    eax,ebx
c0005aab:	e8 50 c3 ff ff       	call   c0001e00 <st_dword>
c0005ab0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005ab4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0005ab8:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005abc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005ac0:	39 ce                	cmp    esi,ecx
c0005ac2:	76 02                	jbe    c0005ac6 <f_mkfs+0x6a9>
c0005ac4:	89 ce                	mov    esi,ecx
c0005ac6:	56                   	push   esi
c0005ac7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005acb:	53                   	push   ebx
c0005acc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005ad0:	e8 cd c2 ff ff       	call   c0001da2 <disk_write>
c0005ad5:	83 c4 10             	add    esp,0x10
c0005ad8:	85 c0                	test   eax,eax
c0005ada:	0f 85 dc 00 00 00    	jne    c0005bbc <f_mkfs+0x79f>
c0005ae0:	31 d2                	xor    edx,edx
c0005ae2:	b9 00 02 00 00       	mov    ecx,0x200
c0005ae7:	89 d8                	mov    eax,ebx
c0005ae9:	e8 2a c3 ff ff       	call   c0001e18 <mem_set>
c0005aee:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005af2:	29 74 24 1c          	sub    DWORD PTR [esp+0x1c],esi
c0005af6:	75 c0                	jne    c0005ab8 <f_mkfs+0x69b>
c0005af8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005afc:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0005b04:	40                   	inc    eax
c0005b05:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c0005b09:	0f 87 6e ff ff ff    	ja     c0005a7d <f_mkfs+0x660>
c0005b0f:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b14:	83 f8 03             	cmp    eax,0x3
c0005b17:	74 04                	je     c0005b1d <f_mkfs+0x700>
c0005b19:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0005b1d:	89 fe                	mov    esi,edi
c0005b1f:	3b 7c 24 10          	cmp    edi,DWORD PTR [esp+0x10]
c0005b23:	76 04                	jbe    c0005b29 <f_mkfs+0x70c>
c0005b25:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005b29:	56                   	push   esi
c0005b2a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005b2e:	53                   	push   ebx
c0005b2f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b33:	e8 6a c2 ff ff       	call   c0001da2 <disk_write>
c0005b38:	83 c4 10             	add    esp,0x10
c0005b3b:	85 c0                	test   eax,eax
c0005b3d:	75 7d                	jne    c0005bbc <f_mkfs+0x79f>
c0005b3f:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005b43:	29 f7                	sub    edi,esi
c0005b45:	75 d6                	jne    c0005b1d <f_mkfs+0x700>
c0005b47:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b4c:	b9 0c 00 00 00       	mov    ecx,0xc
c0005b51:	83 f8 03             	cmp    eax,0x3
c0005b54:	74 1e                	je     c0005b74 <f_mkfs+0x757>
c0005b56:	b9 06 00 00 00       	mov    ecx,0x6
c0005b5b:	81 7c 24 44 ff ff 00 00 	cmp    DWORD PTR [esp+0x44],0xffff
c0005b63:	77 0f                	ja     c0005b74 <f_mkfs+0x757>
c0005b65:	b9 04 00 00 00       	mov    ecx,0x4
c0005b6a:	83 f8 02             	cmp    eax,0x2
c0005b6d:	74 05                	je     c0005b74 <f_mkfs+0x757>
c0005b6f:	b9 01 00 00 00       	mov    ecx,0x1
c0005b74:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c0005b79:	75 2a                	jne    c0005ba5 <f_mkfs+0x788>
c0005b7b:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005b7f:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0005b87:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005b8b:	83 ec 0c             	sub    esp,0xc
c0005b8e:	53                   	push   ebx
c0005b8f:	8d 54 24 58          	lea    edx,[esp+0x58]
c0005b93:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005b97:	e8 89 d2 ff ff       	call   c0002e25 <create_partition>
c0005b9c:	83 c4 10             	add    esp,0x10
c0005b9f:	89 c6                	mov    esi,eax
c0005ba1:	85 c0                	test   eax,eax
c0005ba3:	75 2e                	jne    c0005bd3 <f_mkfs+0x7b6>
c0005ba5:	31 f6                	xor    esi,esi
c0005ba7:	50                   	push   eax
c0005ba8:	6a 00                	push   0x0
c0005baa:	6a 00                	push   0x0
c0005bac:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005bb0:	e8 03 c2 ff ff       	call   c0001db8 <disk_ioctl>
c0005bb5:	83 c4 10             	add    esp,0x10
c0005bb8:	85 c0                	test   eax,eax
c0005bba:	74 17                	je     c0005bd3 <f_mkfs+0x7b6>
c0005bbc:	85 ed                	test   ebp,ebp
c0005bbe:	75 0c                	jne    c0005bcc <f_mkfs+0x7af>
c0005bc0:	83 ec 0c             	sub    esp,0xc
c0005bc3:	53                   	push   ebx
c0005bc4:	e8 6f 00 00 00       	call   c0005c38 <ff_memfree>
c0005bc9:	83 c4 10             	add    esp,0x10
c0005bcc:	be 01 00 00 00       	mov    esi,0x1
c0005bd1:	eb 40                	jmp    c0005c13 <f_mkfs+0x7f6>
c0005bd3:	85 ed                	test   ebp,ebp
c0005bd5:	75 3c                	jne    c0005c13 <f_mkfs+0x7f6>
c0005bd7:	83 ec 0c             	sub    esp,0xc
c0005bda:	53                   	push   ebx
c0005bdb:	e8 58 00 00 00       	call   c0005c38 <ff_memfree>
c0005be0:	83 c4 10             	add    esp,0x10
c0005be3:	eb 2e                	jmp    c0005c13 <f_mkfs+0x7f6>
c0005be5:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005bea:	0f 85 3b fb ff ff    	jne    c000572b <f_mkfs+0x30e>
c0005bf0:	e9 15 fc ff ff       	jmp    c000580a <f_mkfs+0x3ed>
c0005bf5:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005bfa:	0f 85 31 fb ff ff    	jne    c0005731 <f_mkfs+0x314>
c0005c00:	89 cf                	mov    edi,ecx
c0005c02:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005c08:	0f 86 29 fa ff ff    	jbe    c0005637 <f_mkfs+0x21a>
c0005c0e:	e9 f7 fb ff ff       	jmp    c000580a <f_mkfs+0x3ed>
c0005c13:	83 c4 5c             	add    esp,0x5c
c0005c16:	89 f0                	mov    eax,esi
c0005c18:	5b                   	pop    ebx
c0005c19:	5e                   	pop    esi
c0005c1a:	5f                   	pop    edi
c0005c1b:	5d                   	pop    ebp
c0005c1c:	c3                   	ret    
c0005c1d:	66 90                	xchg   ax,ax
c0005c1f:	90                   	nop

c0005c20 <ff_memalloc>:
c0005c20:	83 ec 0c             	sub    esp,0xc
c0005c23:	83 ec 0c             	sub    esp,0xc
c0005c26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c2a:	e8 87 1e 00 00       	call   c0007ab6 <malloc>
c0005c2f:	83 c4 10             	add    esp,0x10
c0005c32:	83 c4 0c             	add    esp,0xc
c0005c35:	c3                   	ret    
c0005c36:	66 90                	xchg   ax,ax

c0005c38 <ff_memfree>:
c0005c38:	83 ec 0c             	sub    esp,0xc
c0005c3b:	83 ec 0c             	sub    esp,0xc
c0005c3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c42:	e8 7f 1e 00 00       	call   c0007ac6 <free>
c0005c47:	83 c4 10             	add    esp,0x10
c0005c4a:	90                   	nop
c0005c4b:	83 c4 0c             	add    esp,0xc
c0005c4e:	c3                   	ret    
c0005c4f:	90                   	nop

c0005c50 <ff_uni2oem>:
c0005c50:	83 ec 14             	sub    esp,0x14
c0005c53:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005c57:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005c5b:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005c62:	c7 44 24 0c e0 09 02 c0 	mov    DWORD PTR [esp+0xc],0xc00209e0
c0005c6a:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005c6f:	77 0b                	ja     c0005c7c <ff_uni2oem+0x2c>
c0005c71:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005c75:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005c7a:	eb 68                	jmp    c0005ce4 <ff_uni2oem+0x94>
c0005c7c:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005c84:	77 5e                	ja     c0005ce4 <ff_uni2oem+0x94>
c0005c86:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005c8a:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005c8f:	75 53                	jne    c0005ce4 <ff_uni2oem+0x94>
c0005c91:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005c98:	eb 12                	jmp    c0005cac <ff_uni2oem+0x5c>
c0005c9a:	66 90                	xchg   ax,ax
c0005c9c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ca1:	83 c0 01             	add    eax,0x1
c0005ca4:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ca9:	8d 76 00             	lea    esi,[esi+0x0]
c0005cac:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005cb1:	83 f8 7f             	cmp    eax,0x7f
c0005cb4:	77 1e                	ja     c0005cd4 <ff_uni2oem+0x84>
c0005cb6:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005cbb:	01 c0                	add    eax,eax
c0005cbd:	89 c2                	mov    edx,eax
c0005cbf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005cc3:	01 d0                	add    eax,edx
c0005cc5:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005cc8:	0f b7 c0             	movzx  eax,ax
c0005ccb:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005ccf:	75 cb                	jne    c0005c9c <ff_uni2oem+0x4c>
c0005cd1:	8d 76 00             	lea    esi,[esi+0x0]
c0005cd4:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005cd9:	83 e8 80             	sub    eax,0xffffff80
c0005cdc:	0f b6 c0             	movzx  eax,al
c0005cdf:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ce4:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ce9:	83 c4 14             	add    esp,0x14
c0005cec:	c3                   	ret    
c0005ced:	8d 76 00             	lea    esi,[esi+0x0]

c0005cf0 <ff_oem2uni>:
c0005cf0:	83 ec 18             	sub    esp,0x18
c0005cf3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005cf7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005cfb:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005d00:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005d04:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005d0b:	c7 44 24 10 e0 09 02 c0 	mov    DWORD PTR [esp+0x10],0xc00209e0
c0005d13:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d18:	83 f8 7f             	cmp    eax,0x7f
c0005d1b:	77 0b                	ja     c0005d28 <ff_oem2uni+0x38>
c0005d1d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005d21:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005d26:	eb 34                	jmp    c0005d5c <ff_oem2uni+0x6c>
c0005d28:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005d2c:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005d31:	75 29                	jne    c0005d5c <ff_oem2uni+0x6c>
c0005d33:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d38:	3d ff 00 00 00       	cmp    eax,0xff
c0005d3d:	77 1d                	ja     c0005d5c <ff_oem2uni+0x6c>
c0005d3f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d44:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005d49:	01 c0                	add    eax,eax
c0005d4b:	89 c2                	mov    edx,eax
c0005d4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005d51:	01 d0                	add    eax,edx
c0005d53:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005d56:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005d5b:	90                   	nop
c0005d5c:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005d61:	83 c4 18             	add    esp,0x18
c0005d64:	c3                   	ret    
c0005d65:	8d 76 00             	lea    esi,[esi+0x0]

c0005d68 <ff_wtoupper>:
c0005d68:	83 ec 10             	sub    esp,0x10
c0005d6b:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005d73:	0f 87 ab 01 00 00    	ja     c0005f24 <ff_wtoupper+0x1bc>
c0005d79:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005d7d:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005d82:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005d87:	3d ff 0f 00 00       	cmp    eax,0xfff
c0005d8c:	77 0a                	ja     c0005d98 <ff_wtoupper+0x30>
c0005d8e:	b8 e0 07 02 c0       	mov    eax,0xc00207e0
c0005d93:	eb 0b                	jmp    c0005da0 <ff_wtoupper+0x38>
c0005d95:	8d 76 00             	lea    esi,[esi+0x0]
c0005d98:	b8 20 07 02 c0       	mov    eax,0xc0020720
c0005d9d:	8d 76 00             	lea    esi,[esi+0x0]
c0005da0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005da4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005da8:	8d 50 02             	lea    edx,[eax+0x2]
c0005dab:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005daf:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005db2:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005db7:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005dbc:	85 c0                	test   eax,eax
c0005dbe:	0f 84 54 01 00 00    	je     c0005f18 <ff_wtoupper+0x1b0>
c0005dc4:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005dc9:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005dce:	39 c2                	cmp    edx,eax
c0005dd0:	0f 82 42 01 00 00    	jb     c0005f18 <ff_wtoupper+0x1b0>
c0005dd6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005dda:	8d 50 02             	lea    edx,[eax+0x2]
c0005ddd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005de1:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005de4:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005de9:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005dee:	c1 e8 08             	shr    eax,0x8
c0005df1:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005df6:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005dfb:	0f b6 c0             	movzx  eax,al
c0005dfe:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005e03:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005e08:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0005e0d:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0005e12:	01 ca                	add    edx,ecx
c0005e14:	39 d0                	cmp    eax,edx
c0005e16:	0f 8d d8 00 00 00    	jge    c0005ef4 <ff_wtoupper+0x18c>
c0005e1c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005e21:	83 f8 08             	cmp    eax,0x8
c0005e24:	0f 87 ea 00 00 00    	ja     c0005f14 <ff_wtoupper+0x1ac>
c0005e2a:	8b 04 85 e0 06 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdf920]
c0005e31:	ff e0                	jmp    eax
c0005e33:	90                   	nop
c0005e34:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005e39:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005e3e:	29 c2                	sub    edx,eax
c0005e40:	89 d0                	mov    eax,edx
c0005e42:	01 c0                	add    eax,eax
c0005e44:	89 c2                	mov    edx,eax
c0005e46:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e4a:	01 d0                	add    eax,edx
c0005e4c:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005e4f:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e54:	e9 97 00 00 00       	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005e59:	8d 76 00             	lea    esi,[esi+0x0]
c0005e5c:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0005e61:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005e65:	89 d1                	mov    ecx,edx
c0005e67:	29 c1                	sub    ecx,eax
c0005e69:	89 c8                	mov    eax,ecx
c0005e6b:	83 e0 01             	and    eax,0x1
c0005e6e:	89 c2                	mov    edx,eax
c0005e70:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005e75:	29 d0                	sub    eax,edx
c0005e77:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e7c:	eb 72                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005e7e:	66 90                	xchg   ax,ax
c0005e80:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005e85:	83 e8 10             	sub    eax,0x10
c0005e88:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e8d:	eb 61                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005e8f:	90                   	nop
c0005e90:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005e95:	83 e8 20             	sub    eax,0x20
c0005e98:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e9d:	eb 51                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005e9f:	90                   	nop
c0005ea0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ea5:	83 e8 30             	sub    eax,0x30
c0005ea8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ead:	eb 41                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005eaf:	90                   	nop
c0005eb0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005eb5:	83 e8 1a             	sub    eax,0x1a
c0005eb8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ebd:	eb 31                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005ebf:	90                   	nop
c0005ec0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ec5:	83 c0 08             	add    eax,0x8
c0005ec8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ecd:	eb 21                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005ecf:	90                   	nop
c0005ed0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ed5:	83 e8 50             	sub    eax,0x50
c0005ed8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005edd:	eb 11                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005edf:	90                   	nop
c0005ee0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ee5:	2d 60 1c 00 00       	sub    eax,0x1c60
c0005eea:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005eef:	90                   	nop
c0005ef0:	eb 22                	jmp    c0005f14 <ff_wtoupper+0x1ac>
c0005ef2:	66 90                	xchg   ax,ax
c0005ef4:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005ef9:	85 c0                	test   eax,eax
c0005efb:	0f 85 a3 fe ff ff    	jne    c0005da4 <ff_wtoupper+0x3c>
c0005f01:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005f06:	01 c0                	add    eax,eax
c0005f08:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0005f0c:	e9 93 fe ff ff       	jmp    c0005da4 <ff_wtoupper+0x3c>
c0005f11:	8d 76 00             	lea    esi,[esi+0x0]
c0005f14:	90                   	nop
c0005f15:	8d 76 00             	lea    esi,[esi+0x0]
c0005f18:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005f1d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005f21:	8d 76 00             	lea    esi,[esi+0x0]
c0005f24:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005f28:	83 c4 10             	add    esp,0x10
c0005f2b:	c3                   	ret    

c0005f2c <utf2ucs>:
c0005f2c:	57                   	push   edi
c0005f2d:	31 c9                	xor    ecx,ecx
c0005f2f:	56                   	push   esi
c0005f30:	89 d7                	mov    edi,edx
c0005f32:	53                   	push   ebx
c0005f33:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c0005f37:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0005f3b:	89 de                	mov    esi,ebx
c0005f3d:	c1 fe 08             	sar    esi,0x8
c0005f40:	89 f2                	mov    edx,esi
c0005f42:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c0005f45:	41                   	inc    ecx
c0005f46:	85 db                	test   ebx,ebx
c0005f48:	75 e9                	jne    c0005f33 <utf2ucs+0x7>
c0005f4a:	5b                   	pop    ebx
c0005f4b:	5e                   	pop    esi
c0005f4c:	5f                   	pop    edi
c0005f4d:	c3                   	ret    

c0005f4e <ucs2utfn>:
c0005f4e:	83 e1 fe             	and    ecx,0xfffffffe
c0005f51:	01 d1                	add    ecx,edx
c0005f53:	39 d1                	cmp    ecx,edx
c0005f55:	75 04                	jne    c0005f5b <ucs2utfn+0xd>
c0005f57:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005f5a:	c3                   	ret    
c0005f5b:	57                   	push   edi
c0005f5c:	56                   	push   esi
c0005f5d:	53                   	push   ebx
c0005f5e:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c0005f61:	83 c2 02             	add    edx,0x2
c0005f64:	89 de                	mov    esi,ebx
c0005f66:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c0005f6a:	c1 e6 08             	shl    esi,0x8
c0005f6d:	09 f3                	or     ebx,esi
c0005f6f:	83 fb 3b             	cmp    ebx,0x3b
c0005f72:	74 50                	je     c0005fc4 <ucs2utfn+0x76>
c0005f74:	83 fb 7f             	cmp    ebx,0x7f
c0005f77:	7f 05                	jg     c0005f7e <ucs2utfn+0x30>
c0005f79:	88 18                	mov    BYTE PTR [eax],bl
c0005f7b:	40                   	inc    eax
c0005f7c:	eb 42                	jmp    c0005fc0 <ucs2utfn+0x72>
c0005f7e:	89 de                	mov    esi,ebx
c0005f80:	89 df                	mov    edi,ebx
c0005f82:	c1 fe 06             	sar    esi,0x6
c0005f85:	83 e7 3f             	and    edi,0x3f
c0005f88:	83 cf 80             	or     edi,0xffffff80
c0005f8b:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0005f91:	7f 12                	jg     c0005fa5 <ucs2utfn+0x57>
c0005f93:	83 ce c0             	or     esi,0xffffffc0
c0005f96:	83 c0 02             	add    eax,0x2
c0005f99:	89 f3                	mov    ebx,esi
c0005f9b:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005f9e:	89 fb                	mov    ebx,edi
c0005fa0:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005fa3:	eb 1b                	jmp    c0005fc0 <ucs2utfn+0x72>
c0005fa5:	c1 fb 0c             	sar    ebx,0xc
c0005fa8:	83 e6 3f             	and    esi,0x3f
c0005fab:	83 cb e0             	or     ebx,0xffffffe0
c0005fae:	83 ce 80             	or     esi,0xffffff80
c0005fb1:	88 18                	mov    BYTE PTR [eax],bl
c0005fb3:	89 f3                	mov    ebx,esi
c0005fb5:	83 c0 03             	add    eax,0x3
c0005fb8:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005fbb:	89 fb                	mov    ebx,edi
c0005fbd:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005fc0:	39 d1                	cmp    ecx,edx
c0005fc2:	75 9a                	jne    c0005f5e <ucs2utfn+0x10>
c0005fc4:	5b                   	pop    ebx
c0005fc5:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005fc8:	5e                   	pop    esi
c0005fc9:	5f                   	pop    edi
c0005fca:	c3                   	ret    

c0005fcb <isjoliet>:
c0005fcb:	31 d2                	xor    edx,edx
c0005fcd:	80 38 25             	cmp    BYTE PTR [eax],0x25
c0005fd0:	75 26                	jne    c0005ff8 <isjoliet+0x2d>
c0005fd2:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c0005fd6:	75 20                	jne    c0005ff8 <isjoliet+0x2d>
c0005fd8:	0f be 40 02          	movsx  eax,BYTE PTR [eax+0x2]
c0005fdc:	ba 02 00 00 00       	mov    edx,0x2
c0005fe1:	83 f8 43             	cmp    eax,0x43
c0005fe4:	74 12                	je     c0005ff8 <isjoliet+0x2d>
c0005fe6:	ba 03 00 00 00       	mov    edx,0x3
c0005feb:	83 f8 45             	cmp    eax,0x45
c0005fee:	74 08                	je     c0005ff8 <isjoliet+0x2d>
c0005ff0:	31 d2                	xor    edx,edx
c0005ff2:	83 f8 40             	cmp    eax,0x40
c0005ff5:	0f 94 c2             	sete   dl
c0005ff8:	89 d0                	mov    eax,edx
c0005ffa:	c3                   	ret    

c0005ffb <htohl_32>:
c0005ffb:	8b 00                	mov    eax,DWORD PTR [eax]
c0005ffd:	c3                   	ret    

c0005ffe <iso_733>:
c0005ffe:	eb fb                	jmp    c0005ffb <htohl_32>

c0006000 <bgrad_cache>:
c0006000:	83 fa 0e             	cmp    edx,0xe
c0006003:	77 16                	ja     c000601b <bgrad_cache+0x1b>
c0006005:	53                   	push   ebx
c0006006:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c0006009:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c000600d:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c0006010:	42                   	inc    edx
c0006011:	83 fa 0f             	cmp    edx,0xf
c0006014:	75 f3                	jne    c0006009 <bgrad_cache+0x9>
c0006016:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0006019:	5b                   	pop    ebx
c000601a:	c3                   	ret    
c000601b:	c3                   	ret    

c000601c <ucscompare>:
c000601c:	55                   	push   ebp
c000601d:	57                   	push   edi
c000601e:	89 c7                	mov    edi,eax
c0006020:	56                   	push   esi
c0006021:	89 d6                	mov    esi,edx
c0006023:	53                   	push   ebx
c0006024:	31 d2                	xor    edx,edx
c0006026:	83 ec 1c             	sub    esp,0x1c
c0006029:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c000602d:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c0006032:	c1 e3 08             	shl    ebx,0x8
c0006035:	09 c3                	or     ebx,eax
c0006037:	39 ca                	cmp    edx,ecx
c0006039:	7d 42                	jge    c000607d <ucscompare+0x61>
c000603b:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c000603f:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c0006044:	c1 e0 08             	shl    eax,0x8
c0006047:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000604b:	09 e8                	or     eax,ebp
c000604d:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0006051:	83 f8 3b             	cmp    eax,0x3b
c0006054:	74 27                	je     c000607d <ucscompare+0x61>
c0006056:	83 ec 0c             	sub    esp,0xc
c0006059:	50                   	push   eax
c000605a:	e8 f1 a8 ff ff       	call   c0000950 <tolower>
c000605f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006062:	89 c5                	mov    ebp,eax
c0006064:	e8 e7 a8 ff ff       	call   c0000950 <tolower>
c0006069:	83 c4 10             	add    esp,0x10
c000606c:	39 c5                	cmp    ebp,eax
c000606e:	75 20                	jne    c0006090 <ucscompare+0x74>
c0006070:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006074:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006078:	83 c2 02             	add    edx,0x2
c000607b:	eb ac                	jmp    c0006029 <ucscompare+0xd>
c000607d:	85 db                	test   ebx,ebx
c000607f:	0f 95 c2             	setne  dl
c0006082:	31 c0                	xor    eax,eax
c0006084:	83 fb 2f             	cmp    ebx,0x2f
c0006087:	0f 95 c0             	setne  al
c000608a:	21 d0                	and    eax,edx
c000608c:	f7 d8                	neg    eax
c000608e:	eb 03                	jmp    c0006093 <ucscompare+0x77>
c0006090:	83 c8 ff             	or     eax,0xffffffff
c0006093:	83 c4 1c             	add    esp,0x1c
c0006096:	5b                   	pop    ebx
c0006097:	5e                   	pop    esi
c0006098:	5f                   	pop    edi
c0006099:	5d                   	pop    ebp
c000609a:	c3                   	ret    

c000609b <fncompare>:
c000609b:	55                   	push   ebp
c000609c:	57                   	push   edi
c000609d:	89 c7                	mov    edi,eax
c000609f:	56                   	push   esi
c00060a0:	89 ce                	mov    esi,ecx
c00060a2:	53                   	push   ebx
c00060a3:	31 db                	xor    ebx,ebx
c00060a5:	83 ec 1c             	sub    esp,0x1c
c00060a8:	39 d3                	cmp    ebx,edx
c00060aa:	7d 45                	jge    c00060f1 <fncompare+0x56>
c00060ac:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c00060b0:	83 f8 3b             	cmp    eax,0x3b
c00060b3:	74 3c                	je     c00060f1 <fncompare+0x56>
c00060b5:	83 f8 2e             	cmp    eax,0x2e
c00060b8:	75 0e                	jne    c00060c8 <fncompare+0x2d>
c00060ba:	8d 4a ff             	lea    ecx,[edx-0x1]
c00060bd:	39 d9                	cmp    ecx,ebx
c00060bf:	74 30                	je     c00060f1 <fncompare+0x56>
c00060c1:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c00060c6:	74 29                	je     c00060f1 <fncompare+0x56>
c00060c8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00060cc:	83 ec 0c             	sub    esp,0xc
c00060cf:	50                   	push   eax
c00060d0:	e8 7b a8 ff ff       	call   c0000950 <tolower>
c00060d5:	89 c5                	mov    ebp,eax
c00060d7:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c00060db:	89 04 24             	mov    DWORD PTR [esp],eax
c00060de:	e8 6d a8 ff ff       	call   c0000950 <tolower>
c00060e3:	83 c4 10             	add    esp,0x10
c00060e6:	39 c5                	cmp    ebp,eax
c00060e8:	75 1e                	jne    c0006108 <fncompare+0x6d>
c00060ea:	43                   	inc    ebx
c00060eb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00060ef:	eb b7                	jmp    c00060a8 <fncompare+0xd>
c00060f1:	0f be 14 1e          	movsx  edx,BYTE PTR [esi+ebx*1]
c00060f5:	85 d2                	test   edx,edx
c00060f7:	0f 95 c1             	setne  cl
c00060fa:	31 c0                	xor    eax,eax
c00060fc:	83 fa 2f             	cmp    edx,0x2f
c00060ff:	0f 95 c0             	setne  al
c0006102:	21 c8                	and    eax,ecx
c0006104:	f7 d8                	neg    eax
c0006106:	eb 03                	jmp    c000610b <fncompare+0x70>
c0006108:	83 c8 ff             	or     eax,0xffffffff
c000610b:	83 c4 1c             	add    esp,0x1c
c000610e:	5b                   	pop    ebx
c000610f:	5e                   	pop    esi
c0006110:	5f                   	pop    edi
c0006111:	5d                   	pop    ebp
c0006112:	c3                   	ret    

c0006113 <bclear_cache>:
c0006113:	83 ec 18             	sub    esp,0x18
c0006116:	68 e0 0a 02 c0       	push   0xc0020ae0
c000611b:	e8 64 43 01 00       	call   c001a484 <iso_kprintf>
c0006120:	83 c4 10             	add    esp,0x10
c0006123:	31 c0                	xor    eax,eax
c0006125:	8b 14 85 20 60 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9fe0]
c000612c:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0006132:	8b 14 85 80 60 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9f80]
c0006139:	40                   	inc    eax
c000613a:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0006140:	83 f8 10             	cmp    eax,0x10
c0006143:	75 e0                	jne    c0006125 <bclear_cache+0x12>
c0006145:	83 c4 0c             	add    esp,0xc
c0006148:	c3                   	ret    

c0006149 <bclear>:
c0006149:	eb c8                	jmp    c0006113 <bclear_cache>

c000614b <iso_break_all>:
c000614b:	83 ec 18             	sub    esp,0x18
c000614e:	68 ee 0a 02 c0       	push   0xc0020aee
c0006153:	e8 2c 43 01 00       	call   c001a484 <iso_kprintf>
c0006158:	83 c4 10             	add    esp,0x10
c000615b:	31 c0                	xor    eax,eax
c000615d:	c7 80 d0 65 02 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffd9a30],0x1
c0006167:	05 94 00 00 00       	add    eax,0x94
c000616c:	3d 40 09 00 00       	cmp    eax,0x940
c0006171:	75 ea                	jne    c000615d <iso_break_all+0x12>
c0006173:	83 c4 0c             	add    esp,0xc
c0006176:	c3                   	ret    

c0006177 <isoReadDiscSector>:
c0006177:	83 ec 0c             	sub    esp,0xc
c000617a:	0f be 05 60 60 02 c0 	movsx  eax,BYTE PTR ds:0xc0026060
c0006181:	50                   	push   eax
c0006182:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006186:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000618a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000618e:	e8 95 42 01 00       	call   c001a428 <isoReadDiscSectorHelper>
c0006193:	83 c4 1c             	add    esp,0x1c
c0006196:	c3                   	ret    

c0006197 <bread_cache>:
c0006197:	55                   	push   ebp
c0006198:	57                   	push   edi
c0006199:	89 d7                	mov    edi,edx
c000619b:	56                   	push   esi
c000619c:	ba 0f 00 00 00       	mov    edx,0xf
c00061a1:	53                   	push   ebx
c00061a2:	89 c6                	mov    esi,eax
c00061a4:	83 ec 0c             	sub    esp,0xc
c00061a7:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c00061aa:	39 38                	cmp    DWORD PTR [eax],edi
c00061ac:	74 3c                	je     c00061ea <bread_cache+0x53>
c00061ae:	4a                   	dec    edx
c00061af:	83 fa ff             	cmp    edx,0xffffffff
c00061b2:	75 f3                	jne    c00061a7 <bread_cache+0x10>
c00061b4:	31 db                	xor    ebx,ebx
c00061b6:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c00061b9:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c00061bc:	74 08                	je     c00061c6 <bread_cache+0x2f>
c00061be:	43                   	inc    ebx
c00061bf:	83 fb 10             	cmp    ebx,0x10
c00061c2:	75 f2                	jne    c00061b6 <bread_cache+0x1f>
c00061c4:	31 db                	xor    ebx,ebx
c00061c6:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c00061c9:	50                   	push   eax
c00061ca:	6a 01                	push   0x1
c00061cc:	57                   	push   edi
c00061cd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00061d0:	83 c0 04             	add    eax,0x4
c00061d3:	50                   	push   eax
c00061d4:	e8 9e ff ff ff       	call   c0006177 <isoReadDiscSector>
c00061d9:	83 c4 10             	add    esp,0x10
c00061dc:	83 c9 ff             	or     ecx,0xffffffff
c00061df:	85 c0                	test   eax,eax
c00061e1:	78 13                	js     c00061f6 <bread_cache+0x5f>
c00061e3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00061e6:	89 da                	mov    edx,ebx
c00061e8:	89 38                	mov    DWORD PTR [eax],edi
c00061ea:	89 f0                	mov    eax,esi
c00061ec:	e8 0f fe ff ff       	call   c0006000 <bgrad_cache>
c00061f1:	b9 0f 00 00 00       	mov    ecx,0xf
c00061f6:	83 c4 0c             	add    esp,0xc
c00061f9:	89 c8                	mov    eax,ecx
c00061fb:	5b                   	pop    ebx
c00061fc:	5e                   	pop    esi
c00061fd:	5f                   	pop    edi
c00061fe:	5d                   	pop    ebp
c00061ff:	c3                   	ret    

c0006200 <biread>:
c0006200:	89 c2                	mov    edx,eax
c0006202:	b8 80 60 02 c0       	mov    eax,0xc0026080
c0006207:	eb 8e                	jmp    c0006197 <bread_cache>

c0006209 <bdread>:
c0006209:	89 c2                	mov    edx,eax
c000620b:	b8 20 60 02 c0       	mov    eax,0xc0026020
c0006210:	eb 85                	jmp    c0006197 <bread_cache>

c0006212 <strnicmp>:
c0006212:	55                   	push   ebp
c0006213:	57                   	push   edi
c0006214:	31 ff                	xor    edi,edi
c0006216:	56                   	push   esi
c0006217:	53                   	push   ebx
c0006218:	83 ec 0c             	sub    esp,0xc
c000621b:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000621f:	3b 7c 24 28          	cmp    edi,DWORD PTR [esp+0x28]
c0006223:	74 43                	je     c0006268 <strnicmp+0x56>
c0006225:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006229:	0f be 04 38          	movsx  eax,BYTE PTR [eax+edi*1]
c000622d:	85 c0                	test   eax,eax
c000622f:	74 37                	je     c0006268 <strnicmp+0x56>
c0006231:	0f be 14 3e          	movsx  edx,BYTE PTR [esi+edi*1]
c0006235:	85 d2                	test   edx,edx
c0006237:	74 2f                	je     c0006268 <strnicmp+0x56>
c0006239:	39 d0                	cmp    eax,edx
c000623b:	8d 6f 01             	lea    ebp,[edi+0x1]
c000623e:	75 04                	jne    c0006244 <strnicmp+0x32>
c0006240:	89 ef                	mov    edi,ebp
c0006242:	eb db                	jmp    c000621f <strnicmp+0xd>
c0006244:	83 ec 0c             	sub    esp,0xc
c0006247:	50                   	push   eax
c0006248:	e8 03 a7 ff ff       	call   c0000950 <tolower>
c000624d:	89 c3                	mov    ebx,eax
c000624f:	0f be 04 3e          	movsx  eax,BYTE PTR [esi+edi*1]
c0006253:	89 ef                	mov    edi,ebp
c0006255:	89 04 24             	mov    DWORD PTR [esp],eax
c0006258:	e8 f3 a6 ff ff       	call   c0000950 <tolower>
c000625d:	83 c4 10             	add    esp,0x10
c0006260:	29 c3                	sub    ebx,eax
c0006262:	89 d8                	mov    eax,ebx
c0006264:	74 b9                	je     c000621f <strnicmp+0xd>
c0006266:	eb 02                	jmp    c000626a <strnicmp+0x58>
c0006268:	31 c0                	xor    eax,eax
c000626a:	83 c4 0c             	add    esp,0xc
c000626d:	5b                   	pop    ebx
c000626e:	5e                   	pop    esi
c000626f:	5f                   	pop    edi
c0006270:	5d                   	pop    ebp
c0006271:	c3                   	ret    

c0006272 <find_object>:
c0006272:	55                   	push   ebp
c0006273:	57                   	push   edi
c0006274:	89 c7                	mov    edi,eax
c0006276:	56                   	push   esi
c0006277:	53                   	push   ebx
c0006278:	89 d3                	mov    ebx,edx
c000627a:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0006280:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0006287:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000628b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000628f:	83 3d b4 6e 02 c0 00 	cmp    DWORD PTR ds:0xc0026eb4,0x0
c0006296:	74 0b                	je     c00062a3 <find_object+0x31>
c0006298:	89 fa                	mov    edx,edi
c000629a:	8d 44 24 20          	lea    eax,[esp+0x20]
c000629e:	e8 89 fc ff ff       	call   c0005f2c <utf2ucs>
c00062a3:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c00062a6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062aa:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00062af:	7e 11                	jle    c00062c2 <find_object+0x50>
c00062b1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00062b5:	e8 46 ff ff ff       	call   c0006200 <biread>
c00062ba:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00062be:	85 c0                	test   eax,eax
c00062c0:	79 07                	jns    c00062c9 <find_object+0x57>
c00062c2:	31 db                	xor    ebx,ebx
c00062c4:	e9 56 01 00 00       	jmp    c000641f <find_object+0x1ad>
c00062c9:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00062d1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00062d5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00062d9:	8b 04 85 80 60 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9f80]
c00062e0:	8d 5c 08 04          	lea    ebx,[eax+ecx*1+0x4]
c00062e4:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c00062e7:	85 f6                	test   esi,esi
c00062e9:	75 0e                	jne    c00062f9 <find_object+0x87>
c00062eb:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00062ef:	81 6c 24 0c 00 08 00 00 	sub    DWORD PTR [esp+0xc],0x800
c00062f7:	eb b1                	jmp    c00062aa <find_object+0x38>
c00062f9:	8b 2d b4 6e 02 c0    	mov    ebp,DWORD PTR ds:0xc0026eb4
c00062ff:	0f b6 4b 20          	movzx  ecx,BYTE PTR [ebx+0x20]
c0006303:	85 ed                	test   ebp,ebp
c0006305:	89 c8                	mov    eax,ecx
c0006307:	74 2b                	je     c0006334 <find_object+0xc2>
c0006309:	8d 43 21             	lea    eax,[ebx+0x21]
c000630c:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006310:	e8 07 fd ff ff       	call   c000601c <ucscompare>
c0006315:	85 c0                	test   eax,eax
c0006317:	0f 84 bf 00 00 00    	je     c00063dc <find_object+0x16a>
c000631d:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c0006320:	01 44 24 08          	add    DWORD PTR [esp+0x8],eax
c0006324:	81 7c 24 08 ff 07 00 00 	cmp    DWORD PTR [esp+0x8],0x7ff
c000632c:	0f 8e da 00 00 00    	jle    c000640c <find_object+0x19a>
c0006332:	eb b7                	jmp    c00062eb <find_object+0x79>
c0006334:	29 ce                	sub    esi,ecx
c0006336:	8d 54 0b 21          	lea    edx,[ebx+ecx*1+0x21]
c000633a:	a8 01                	test   al,0x1
c000633c:	74 05                	je     c0006343 <find_object+0xd1>
c000633e:	83 ee 21             	sub    esi,0x21
c0006341:	eb 5a                	jmp    c000639d <find_object+0x12b>
c0006343:	42                   	inc    edx
c0006344:	83 ee 22             	sub    esi,0x22
c0006347:	eb 54                	jmp    c000639d <find_object+0x12b>
c0006349:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c000634c:	48                   	dec    eax
c000634d:	3c 01                	cmp    al,0x1
c000634f:	77 51                	ja     c00063a2 <find_object+0x130>
c0006351:	50                   	push   eax
c0006352:	6a 02                	push   0x2
c0006354:	68 fd 0a 02 c0       	push   0xc0020afd
c0006359:	52                   	push   edx
c000635a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000635e:	e8 7d a4 ff ff       	call   c00007e0 <strncmp>
c0006363:	83 c4 10             	add    esp,0x10
c0006366:	85 c0                	test   eax,eax
c0006368:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000636c:	75 27                	jne    c0006395 <find_object+0x123>
c000636e:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006372:	8d 68 fb             	lea    ebp,[eax-0x5]
c0006375:	50                   	push   eax
c0006376:	8d 42 05             	lea    eax,[edx+0x5]
c0006379:	55                   	push   ebp
c000637a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000637e:	50                   	push   eax
c000637f:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0006383:	50                   	push   eax
c0006384:	e8 f7 a2 ff ff       	call   c0000680 <strncpy>
c0006389:	c6 44 2c 30 00       	mov    BYTE PTR [esp+ebp*1+0x30],0x0
c000638e:	83 c4 10             	add    esp,0x10
c0006391:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006395:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006399:	29 c6                	sub    esi,eax
c000639b:	01 c2                	add    edx,eax
c000639d:	83 fe 03             	cmp    esi,0x3
c00063a0:	7f a7                	jg     c0006349 <find_object+0xd7>
c00063a2:	85 ed                	test   ebp,ebp
c00063a4:	7e 40                	jle    c00063e6 <find_object+0x174>
c00063a6:	51                   	push   ecx
c00063a7:	51                   	push   ecx
c00063a8:	6a 2f                	push   0x2f
c00063aa:	57                   	push   edi
c00063ab:	e8 f0 a3 ff ff       	call   c00007a0 <strchr>
c00063b0:	83 c4 10             	add    esp,0x10
c00063b3:	85 c0                	test   eax,eax
c00063b5:	74 04                	je     c00063bb <find_object+0x149>
c00063b7:	29 f8                	sub    eax,edi
c00063b9:	eb 0c                	jmp    c00063c7 <find_object+0x155>
c00063bb:	83 ec 0c             	sub    esp,0xc
c00063be:	57                   	push   edi
c00063bf:	e8 ac a1 ff ff       	call   c0000570 <strlen>
c00063c4:	83 c4 10             	add    esp,0x10
c00063c7:	52                   	push   edx
c00063c8:	50                   	push   eax
c00063c9:	57                   	push   edi
c00063ca:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00063ce:	50                   	push   eax
c00063cf:	e8 3e fe ff ff       	call   c0006212 <strnicmp>
c00063d4:	83 c4 10             	add    esp,0x10
c00063d7:	e9 39 ff ff ff       	jmp    c0006315 <find_object+0xa3>
c00063dc:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00063e0:	3b 44 24 10          	cmp    eax,DWORD PTR [esp+0x10]
c00063e4:	eb 1e                	jmp    c0006404 <find_object+0x192>
c00063e6:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c00063ea:	8d 43 21             	lea    eax,[ebx+0x21]
c00063ed:	89 f9                	mov    ecx,edi
c00063ef:	e8 a7 fc ff ff       	call   c000609b <fncompare>
c00063f4:	85 c0                	test   eax,eax
c00063f6:	0f 85 21 ff ff ff    	jne    c000631d <find_object+0xab>
c00063fc:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c0006400:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0006404:	0f 85 13 ff ff ff    	jne    c000631d <find_object+0xab>
c000640a:	eb 13                	jmp    c000641f <find_object+0x1ad>
c000640c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006410:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0006414:	0f 8f b7 fe ff ff    	jg     c00062d1 <find_object+0x5f>
c000641a:	e9 cc fe ff ff       	jmp    c00062eb <find_object+0x79>
c000641f:	81 c4 2c 01 00 00    	add    esp,0x12c
c0006425:	89 d8                	mov    eax,ebx
c0006427:	5b                   	pop    ebx
c0006428:	5e                   	pop    esi
c0006429:	5f                   	pop    edi
c000642a:	5d                   	pop    ebp
c000642b:	c3                   	ret    

c000642c <find_object_path>:
c000642c:	55                   	push   ebp
c000642d:	57                   	push   edi
c000642e:	89 d7                	mov    edi,edx
c0006430:	56                   	push   esi
c0006431:	89 c6                	mov    esi,eax
c0006433:	53                   	push   ebx
c0006434:	89 cb                	mov    ebx,ecx
c0006436:	83 ec 0c             	sub    esp,0xc
c0006439:	50                   	push   eax
c000643a:	50                   	push   eax
c000643b:	6a 2f                	push   0x2f
c000643d:	56                   	push   esi
c000643e:	e8 5d a3 ff ff       	call   c00007a0 <strchr>
c0006443:	83 c4 10             	add    esp,0x10
c0006446:	89 c5                	mov    ebp,eax
c0006448:	85 c0                	test   eax,eax
c000644a:	74 3a                	je     c0006486 <find_object_path+0x5a>
c000644c:	39 ee                	cmp    esi,ebp
c000644e:	74 31                	je     c0006481 <find_object_path+0x55>
c0006450:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006453:	e8 a6 fb ff ff       	call   c0005ffe <iso_733>
c0006458:	89 c2                	mov    edx,eax
c000645a:	8d 43 02             	lea    eax,[ebx+0x2]
c000645d:	e8 9c fb ff ff       	call   c0005ffe <iso_733>
c0006462:	83 ec 0c             	sub    esp,0xc
c0006465:	89 c1                	mov    ecx,eax
c0006467:	52                   	push   edx
c0006468:	89 f0                	mov    eax,esi
c000646a:	ba 01 00 00 00       	mov    edx,0x1
c000646f:	e8 fe fd ff ff       	call   c0006272 <find_object>
c0006474:	83 c4 10             	add    esp,0x10
c0006477:	89 c3                	mov    ebx,eax
c0006479:	85 c0                	test   eax,eax
c000647b:	75 04                	jne    c0006481 <find_object_path+0x55>
c000647d:	31 db                	xor    ebx,ebx
c000647f:	eb 36                	jmp    c00064b7 <find_object_path+0x8b>
c0006481:	8d 75 01             	lea    esi,[ebp+0x1]
c0006484:	eb b3                	jmp    c0006439 <find_object_path+0xd>
c0006486:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006489:	74 28                	je     c00064b3 <find_object_path+0x87>
c000648b:	8d 43 0a             	lea    eax,[ebx+0xa]
c000648e:	e8 6b fb ff ff       	call   c0005ffe <iso_733>
c0006493:	89 c2                	mov    edx,eax
c0006495:	8d 43 02             	lea    eax,[ebx+0x2]
c0006498:	e8 61 fb ff ff       	call   c0005ffe <iso_733>
c000649d:	83 ec 0c             	sub    esp,0xc
c00064a0:	89 c1                	mov    ecx,eax
c00064a2:	52                   	push   edx
c00064a3:	89 f0                	mov    eax,esi
c00064a5:	89 fa                	mov    edx,edi
c00064a7:	e8 c6 fd ff ff       	call   c0006272 <find_object>
c00064ac:	83 c4 10             	add    esp,0x10
c00064af:	89 c3                	mov    ebx,eax
c00064b1:	eb 04                	jmp    c00064b7 <find_object_path+0x8b>
c00064b3:	85 ff                	test   edi,edi
c00064b5:	74 c6                	je     c000647d <find_object_path+0x51>
c00064b7:	83 c4 0c             	add    esp,0xc
c00064ba:	89 d8                	mov    eax,ebx
c00064bc:	5b                   	pop    ebx
c00064bd:	5e                   	pop    esi
c00064be:	5f                   	pop    edi
c00064bf:	5d                   	pop    ebp
c00064c0:	c3                   	ret    

c00064c1 <stricmp>:
c00064c1:	57                   	push   edi
c00064c2:	56                   	push   esi
c00064c3:	31 f6                	xor    esi,esi
c00064c5:	53                   	push   ebx
c00064c6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00064ca:	83 ec 0c             	sub    esp,0xc
c00064cd:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00064d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064d5:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00064d9:	50                   	push   eax
c00064da:	e8 51 a4 ff ff       	call   c0000930 <toupper>
c00064df:	89 04 24             	mov    DWORD PTR [esp],eax
c00064e2:	e8 69 a4 ff ff       	call   c0000950 <tolower>
c00064e7:	89 3c 24             	mov    DWORD PTR [esp],edi
c00064ea:	89 c3                	mov    ebx,eax
c00064ec:	e8 3f a4 ff ff       	call   c0000930 <toupper>
c00064f1:	89 04 24             	mov    DWORD PTR [esp],eax
c00064f4:	e8 57 a4 ff ff       	call   c0000950 <tolower>
c00064f9:	83 c4 10             	add    esp,0x10
c00064fc:	39 c3                	cmp    ebx,eax
c00064fe:	75 05                	jne    c0006505 <stricmp+0x44>
c0006500:	46                   	inc    esi
c0006501:	85 db                	test   ebx,ebx
c0006503:	75 c1                	jne    c00064c6 <stricmp+0x5>
c0006505:	29 c3                	sub    ebx,eax
c0006507:	89 d8                	mov    eax,ebx
c0006509:	5b                   	pop    ebx
c000650a:	5e                   	pop    esi
c000650b:	5f                   	pop    edi
c000650c:	c3                   	ret    

c000650d <iso_open>:
c000650d:	57                   	push   edi
c000650e:	31 c0                	xor    eax,eax
c0006510:	56                   	push   esi
c0006511:	b9 80 6e 02 c0       	mov    ecx,0xc0026e80
c0006516:	53                   	push   ebx
c0006517:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000651c:	0f 95 c0             	setne  al
c000651f:	89 c2                	mov    edx,eax
c0006521:	89 c6                	mov    esi,eax
c0006523:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006527:	e8 00 ff ff ff       	call   c000642c <find_object_path>
c000652c:	83 ca ff             	or     edx,0xffffffff
c000652f:	85 c0                	test   eax,eax
c0006531:	74 5e                	je     c0006591 <iso_open+0x84>
c0006533:	89 c1                	mov    ecx,eax
c0006535:	31 d2                	xor    edx,edx
c0006537:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c000653d:	83 bf 40 65 02 c0 00 	cmp    DWORD PTR [edi-0x3ffd9ac0],0x0
c0006544:	75 42                	jne    c0006588 <iso_open+0x7b>
c0006546:	8d 41 02             	lea    eax,[ecx+0x2]
c0006549:	c7 87 40 65 02 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffd9ac0],0xffffffff
c0006553:	e8 a6 fa ff ff       	call   c0005ffe <iso_733>
c0006558:	89 b7 44 65 02 c0    	mov    DWORD PTR [edi-0x3ffd9abc],esi
c000655e:	89 87 40 65 02 c0    	mov    DWORD PTR [edi-0x3ffd9ac0],eax
c0006564:	c7 87 48 65 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffd9ab8],0x0
c000656e:	8d 41 0a             	lea    eax,[ecx+0xa]
c0006571:	e8 88 fa ff ff       	call   c0005ffe <iso_733>
c0006576:	c7 87 d0 65 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffd9a30],0x0
c0006580:	89 87 4c 65 02 c0    	mov    DWORD PTR [edi-0x3ffd9ab4],eax
c0006586:	eb 09                	jmp    c0006591 <iso_open+0x84>
c0006588:	42                   	inc    edx
c0006589:	83 fa 10             	cmp    edx,0x10
c000658c:	75 a9                	jne    c0006537 <iso_open+0x2a>
c000658e:	83 ca ff             	or     edx,0xffffffff
c0006591:	5b                   	pop    ebx
c0006592:	89 d0                	mov    eax,edx
c0006594:	5e                   	pop    esi
c0006595:	5f                   	pop    edi
c0006596:	c3                   	ret    

c0006597 <iso_close>:
c0006597:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000659b:	83 f8 0f             	cmp    eax,0xf
c000659e:	7f 10                	jg     c00065b0 <iso_close+0x19>
c00065a0:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c00065a6:	c7 80 40 65 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9ac0],0x0
c00065b0:	e9 5e fb ff ff       	jmp    c0006113 <bclear_cache>

c00065b5 <iso_read>:
c00065b5:	55                   	push   ebp
c00065b6:	57                   	push   edi
c00065b7:	56                   	push   esi
c00065b8:	53                   	push   ebx
c00065b9:	83 ec 1c             	sub    esp,0x1c
c00065bc:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00065c0:	83 fd 0f             	cmp    ebp,0xf
c00065c3:	7e 0a                	jle    c00065cf <iso_read+0x1a>
c00065c5:	83 c8 ff             	or     eax,0xffffffff
c00065c8:	89 c2                	mov    edx,eax
c00065ca:	e9 f4 00 00 00       	jmp    c00066c3 <iso_read+0x10e>
c00065cf:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00065d5:	83 bd 40 65 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffd9ac0],0x0
c00065dc:	74 e7                	je     c00065c5 <iso_read+0x10>
c00065de:	8b 95 d0 65 02 c0    	mov    edx,DWORD PTR [ebp-0x3ffd9a30]
c00065e4:	85 d2                	test   edx,edx
c00065e6:	75 dd                	jne    c00065c5 <iso_read+0x10>
c00065e8:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00065ed:	0f 84 cd 00 00 00    	je     c00066c0 <iso_read+0x10b>
c00065f3:	8b 85 48 65 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffd9ab8]
c00065f9:	8b 8d 4c 65 02 c0    	mov    ecx,DWORD PTR [ebp-0x3ffd9ab4]
c00065ff:	29 c1                	sub    ecx,eax
c0006601:	3b 4c 24 38          	cmp    ecx,DWORD PTR [esp+0x38]
c0006605:	76 04                	jbe    c000660b <iso_read+0x56>
c0006607:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000660b:	85 c9                	test   ecx,ecx
c000660d:	0f 84 ad 00 00 00    	je     c00066c0 <iso_read+0x10b>
c0006613:	89 c6                	mov    esi,eax
c0006615:	bb 00 08 00 00       	mov    ebx,0x800
c000661a:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006620:	c1 e8 0b             	shr    eax,0xb
c0006623:	29 f3                	sub    ebx,esi
c0006625:	03 85 40 65 02 c0    	add    eax,DWORD PTR [ebp-0x3ffd9ac0]
c000662b:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006631:	7e 3f                	jle    c0006672 <iso_read+0xbd>
c0006633:	81 fb 00 08 00 00    	cmp    ebx,0x800
c0006639:	75 37                	jne    c0006672 <iso_read+0xbd>
c000663b:	be 20 00 00 00       	mov    esi,0x20
c0006640:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c0006646:	7f 05                	jg     c000664d <iso_read+0x98>
c0006648:	89 ce                	mov    esi,ecx
c000664a:	c1 fe 0b             	sar    esi,0xb
c000664d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006651:	89 f3                	mov    ebx,esi
c0006653:	c1 e3 0b             	shl    ebx,0xb
c0006656:	52                   	push   edx
c0006657:	56                   	push   esi
c0006658:	50                   	push   eax
c0006659:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000665d:	e8 15 fb ff ff       	call   c0006177 <isoReadDiscSector>
c0006662:	83 c4 10             	add    esp,0x10
c0006665:	85 c0                	test   eax,eax
c0006667:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000666b:	7f 3e                	jg     c00066ab <iso_read+0xf6>
c000666d:	e9 53 ff ff ff       	jmp    c00065c5 <iso_read+0x10>
c0006672:	39 cb                	cmp    ebx,ecx
c0006674:	7e 02                	jle    c0006678 <iso_read+0xc3>
c0006676:	89 cb                	mov    ebx,ecx
c0006678:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000667c:	e8 88 fb ff ff       	call   c0006209 <bdread>
c0006681:	85 c0                	test   eax,eax
c0006683:	0f 88 3c ff ff ff    	js     c00065c5 <iso_read+0x10>
c0006689:	8b 0c 85 20 60 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd9fe0]
c0006690:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0006694:	8b 85 48 65 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffd9ab8]
c000669a:	25 ff 07 00 00       	and    eax,0x7ff
c000669f:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c00066a3:	89 d9                	mov    ecx,ebx
c00066a5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00066a7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00066ab:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c00066af:	01 9d 48 65 02 c0    	add    DWORD PTR [ebp-0x3ffd9ab8],ebx
c00066b5:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c00066b9:	01 da                	add    edx,ebx
c00066bb:	e9 28 ff ff ff       	jmp    c00065e8 <iso_read+0x33>
c00066c0:	89 d0                	mov    eax,edx
c00066c2:	99                   	cdq    
c00066c3:	83 c4 1c             	add    esp,0x1c
c00066c6:	5b                   	pop    ebx
c00066c7:	5e                   	pop    esi
c00066c8:	5f                   	pop    edi
c00066c9:	5d                   	pop    ebp
c00066ca:	c3                   	ret    

c00066cb <iso_seek>:
c00066cb:	55                   	push   ebp
c00066cc:	83 c8 ff             	or     eax,0xffffffff
c00066cf:	57                   	push   edi
c00066d0:	89 c2                	mov    edx,eax
c00066d2:	56                   	push   esi
c00066d3:	53                   	push   ebx
c00066d4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00066d8:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00066dc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00066e0:	83 fe 0f             	cmp    esi,0xf
c00066e3:	7f 65                	jg     c000674a <iso_seek+0x7f>
c00066e5:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c00066eb:	8d 8d 40 65 02 c0    	lea    ecx,[ebp-0x3ffd9ac0]
c00066f1:	83 bd 40 65 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffd9ac0],0x0
c00066f8:	74 50                	je     c000674a <iso_seek+0x7f>
c00066fa:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c0006701:	75 47                	jne    c000674a <iso_seek+0x7f>
c0006703:	83 fb 01             	cmp    ebx,0x1
c0006706:	74 0e                	je     c0006716 <iso_seek+0x4b>
c0006708:	83 fb 02             	cmp    ebx,0x2
c000670b:	74 0e                	je     c000671b <iso_seek+0x50>
c000670d:	85 db                	test   ebx,ebx
c000670f:	75 39                	jne    c000674a <iso_seek+0x7f>
c0006711:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0006714:	eb 0d                	jmp    c0006723 <iso_seek+0x58>
c0006716:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c0006719:	eb 08                	jmp    c0006723 <iso_seek+0x58>
c000671b:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c000671e:	01 f8                	add    eax,edi
c0006720:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0006723:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c0006729:	8b 88 4c 65 02 c0    	mov    ecx,DWORD PTR [eax-0x3ffd9ab4]
c000672f:	05 40 65 02 c0       	add    eax,0xc0026540
c0006734:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c0006737:	76 03                	jbe    c000673c <iso_seek+0x71>
c0006739:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000673c:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c0006742:	8b 82 48 65 02 c0    	mov    eax,DWORD PTR [edx-0x3ffd9ab8]
c0006748:	31 d2                	xor    edx,edx
c000674a:	5b                   	pop    ebx
c000674b:	5e                   	pop    esi
c000674c:	5f                   	pop    edi
c000674d:	5d                   	pop    ebp
c000674e:	c3                   	ret    

c000674f <iso_tell>:
c000674f:	83 c8 ff             	or     eax,0xffffffff
c0006752:	53                   	push   ebx
c0006753:	89 c2                	mov    edx,eax
c0006755:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006759:	83 f9 0f             	cmp    ecx,0xf
c000675c:	7f 20                	jg     c000677e <iso_tell+0x2f>
c000675e:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c0006764:	83 bb 40 65 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffd9ac0],0x0
c000676b:	74 11                	je     c000677e <iso_tell+0x2f>
c000676d:	83 bb d0 65 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffd9a30],0x0
c0006774:	75 08                	jne    c000677e <iso_tell+0x2f>
c0006776:	8b 83 48 65 02 c0    	mov    eax,DWORD PTR [ebx-0x3ffd9ab8]
c000677c:	31 d2                	xor    edx,edx
c000677e:	5b                   	pop    ebx
c000677f:	c3                   	ret    

c0006780 <iso_total>:
c0006780:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006784:	83 c8 ff             	or     eax,0xffffffff
c0006787:	83 fa 0f             	cmp    edx,0xf
c000678a:	7f 1e                	jg     c00067aa <iso_total+0x2a>
c000678c:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c0006792:	83 ba 40 65 02 c0 00 	cmp    DWORD PTR [edx-0x3ffd9ac0],0x0
c0006799:	74 0f                	je     c00067aa <iso_total+0x2a>
c000679b:	83 ba d0 65 02 c0 00 	cmp    DWORD PTR [edx-0x3ffd9a30],0x0
c00067a2:	75 06                	jne    c00067aa <iso_total+0x2a>
c00067a4:	8b 82 4c 65 02 c0    	mov    eax,DWORD PTR [edx-0x3ffd9ab4]
c00067aa:	c3                   	ret    

c00067ab <fn_postprocess>:
c00067ab:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00067af:	89 d0                	mov    eax,edx
c00067b1:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c00067b4:	83 f9 3b             	cmp    ecx,0x3b
c00067b7:	74 07                	je     c00067c0 <fn_postprocess+0x15>
c00067b9:	85 c9                	test   ecx,ecx
c00067bb:	74 03                	je     c00067c0 <fn_postprocess+0x15>
c00067bd:	40                   	inc    eax
c00067be:	eb f1                	jmp    c00067b1 <fn_postprocess+0x6>
c00067c0:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00067c3:	39 d0                	cmp    eax,edx
c00067c5:	76 0a                	jbe    c00067d1 <fn_postprocess+0x26>
c00067c7:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00067cb:	75 04                	jne    c00067d1 <fn_postprocess+0x26>
c00067cd:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00067d1:	c3                   	ret    

c00067d2 <iso_readdir>:
c00067d2:	55                   	push   ebp
c00067d3:	57                   	push   edi
c00067d4:	56                   	push   esi
c00067d5:	53                   	push   ebx
c00067d6:	83 ec 1c             	sub    esp,0x1c
c00067d9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00067dd:	83 fb 0f             	cmp    ebx,0xf
c00067e0:	7f 28                	jg     c000680a <iso_readdir+0x38>
c00067e2:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c00067e8:	8d b8 40 65 02 c0    	lea    edi,[eax-0x3ffd9ac0]
c00067ee:	83 b8 40 65 02 c0 00 	cmp    DWORD PTR [eax-0x3ffd9ac0],0x0
c00067f5:	74 13                	je     c000680a <iso_readdir+0x38>
c00067f7:	83 7f 04 00          	cmp    DWORD PTR [edi+0x4],0x0
c00067fb:	74 0d                	je     c000680a <iso_readdir+0x38>
c00067fd:	83 bf 90 00 00 00 00 	cmp    DWORD PTR [edi+0x90],0x0
c0006804:	0f 84 b1 00 00 00    	je     c00068bb <iso_readdir+0xe9>
c000680a:	83 ec 0c             	sub    esp,0xc
c000680d:	68 00 0b 02 c0       	push   0xc0020b00
c0006812:	e8 6d 3c 01 00       	call   c001a484 <iso_kprintf>
c0006817:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000681a:	e8 81 3c 01 00       	call   c001a4a0 <iso_kprintfd>
c000681f:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006825:	c7 04 24 05 0b 02 c0 	mov    DWORD PTR [esp],0xc0020b05
c000682c:	e8 53 3c 01 00       	call   c001a484 <iso_kprintf>
c0006831:	5d                   	pop    ebp
c0006832:	ff b3 40 65 02 c0    	push   DWORD PTR [ebx-0x3ffd9ac0]
c0006838:	e8 63 3c 01 00       	call   c001a4a0 <iso_kprintfd>
c000683d:	c7 04 24 0b 0b 02 c0 	mov    DWORD PTR [esp],0xc0020b0b
c0006844:	e8 3b 3c 01 00       	call   c001a484 <iso_kprintf>
c0006849:	58                   	pop    eax
c000684a:	ff b3 44 65 02 c0    	push   DWORD PTR [ebx-0x3ffd9abc]
c0006850:	e8 4b 3c 01 00       	call   c001a4a0 <iso_kprintfd>
c0006855:	c7 04 24 11 0b 02 c0 	mov    DWORD PTR [esp],0xc0020b11
c000685c:	e8 23 3c 01 00       	call   c001a484 <iso_kprintf>
c0006861:	58                   	pop    eax
c0006862:	ff b3 d0 65 02 c0    	push   DWORD PTR [ebx-0x3ffd9a30]
c0006868:	e8 33 3c 01 00       	call   c001a4a0 <iso_kprintfd>
c000686d:	83 c4 10             	add    esp,0x10
c0006870:	eb 42                	jmp    c00068b4 <iso_readdir+0xe2>
c0006872:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006875:	8b 34 85 80 60 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd9f80]
c000687c:	89 d1                	mov    ecx,edx
c000687e:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0006884:	8d 74 0e 04          	lea    esi,[esi+ecx*1+0x4]
c0006888:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c000688b:	75 35                	jne    c00068c2 <iso_readdir+0xf0>
c000688d:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c0006893:	81 c2 00 08 00 00    	add    edx,0x800
c0006899:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c000689c:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000689f:	3b 57 0c             	cmp    edx,DWORD PTR [edi+0xc]
c00068a2:	73 1e                	jae    c00068c2 <iso_readdir+0xf0>
c00068a4:	c1 ea 0b             	shr    edx,0xb
c00068a7:	8b 07                	mov    eax,DWORD PTR [edi]
c00068a9:	01 d0                	add    eax,edx
c00068ab:	e8 50 f9 ff ff       	call   c0006200 <biread>
c00068b0:	85 c0                	test   eax,eax
c00068b2:	79 be                	jns    c0006872 <iso_readdir+0xa0>
c00068b4:	31 c0                	xor    eax,eax
c00068b6:	e9 66 01 00 00       	jmp    c0006a21 <iso_readdir+0x24f>
c00068bb:	31 f6                	xor    esi,esi
c00068bd:	83 c8 ff             	or     eax,0xffffffff
c00068c0:	eb da                	jmp    c000689c <iso_readdir+0xca>
c00068c2:	69 d3 94 00 00 00    	imul   edx,ebx,0x94
c00068c8:	8b ba 48 65 02 c0    	mov    edi,DWORD PTR [edx-0x3ffd9ab8]
c00068ce:	81 c2 40 65 02 c0    	add    edx,0xc0026540
c00068d4:	3b 7a 0c             	cmp    edi,DWORD PTR [edx+0xc]
c00068d7:	73 db                	jae    c00068b4 <iso_readdir+0xe2>
c00068d9:	80 7e 21 00          	cmp    BYTE PTR [esi+0x21],0x0
c00068dd:	75 34                	jne    c0006913 <iso_readdir+0x141>
c00068df:	80 7e 20 01          	cmp    BYTE PTR [esi+0x20],0x1
c00068e3:	75 2e                	jne    c0006913 <iso_readdir+0x141>
c00068e5:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c00068e8:	8b 34 85 80 60 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd9f80]
c00068ef:	01 f9                	add    ecx,edi
c00068f1:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c00068f4:	89 c8                	mov    eax,ecx
c00068f6:	25 ff 07 00 00       	and    eax,0x7ff
c00068fb:	0f b6 44 06 04       	movzx  eax,BYTE PTR [esi+eax*1+0x4]
c0006900:	01 c8                	add    eax,ecx
c0006902:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0006905:	25 ff 07 00 00       	and    eax,0x7ff
c000690a:	8d 74 06 04          	lea    esi,[esi+eax*1+0x4]
c000690e:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006911:	74 a1                	je     c00068b4 <iso_readdir+0xe2>
c0006913:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006919:	0f b6 4e 20          	movzx  ecx,BYTE PTR [esi+0x20]
c000691d:	8d 56 21             	lea    edx,[esi+0x21]
c0006920:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006924:	8d a8 58 65 02 c0    	lea    ebp,[eax-0x3ffd9aa8]
c000692a:	83 3d b4 6e 02 c0 00 	cmp    DWORD PTR ds:0xc0026eb4,0x0
c0006931:	74 0c                	je     c000693f <iso_readdir+0x16d>
c0006933:	89 e8                	mov    eax,ebp
c0006935:	e8 14 f6 ff ff       	call   c0005f4e <ucs2utfn>
c000693a:	e9 a6 00 00 00       	jmp    c00069e5 <iso_readdir+0x213>
c000693f:	57                   	push   edi
c0006940:	51                   	push   ecx
c0006941:	52                   	push   edx
c0006942:	55                   	push   ebp
c0006943:	e8 38 9d ff ff       	call   c0000680 <strncpy>
c0006948:	0f b6 46 20          	movzx  eax,BYTE PTR [esi+0x20]
c000694c:	69 cb 94 00 00 00    	imul   ecx,ebx,0x94
c0006952:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0006955:	c6 84 01 58 65 02 c0 00 	mov    BYTE PTR [ecx+eax*1-0x3ffd9aa8],0x0
c000695d:	e8 49 fe ff ff       	call   c00067ab <fn_postprocess>
c0006962:	0f b6 56 20          	movzx  edx,BYTE PTR [esi+0x20]
c0006966:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006969:	83 c4 10             	add    esp,0x10
c000696c:	29 d0                	sub    eax,edx
c000696e:	8d 7c 16 21          	lea    edi,[esi+edx*1+0x21]
c0006972:	f6 46 20 01          	test   BYTE PTR [esi+0x20],0x1
c0006976:	74 05                	je     c000697d <iso_readdir+0x1ab>
c0006978:	83 e8 21             	sub    eax,0x21
c000697b:	eb 04                	jmp    c0006981 <iso_readdir+0x1af>
c000697d:	47                   	inc    edi
c000697e:	83 e8 22             	sub    eax,0x22
c0006981:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006985:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c000698b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000698f:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c0006994:	7e 4f                	jle    c00069e5 <iso_readdir+0x213>
c0006996:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c0006999:	48                   	dec    eax
c000699a:	3c 01                	cmp    al,0x1
c000699c:	77 47                	ja     c00069e5 <iso_readdir+0x213>
c000699e:	52                   	push   edx
c000699f:	6a 02                	push   0x2
c00069a1:	68 fd 0a 02 c0       	push   0xc0020afd
c00069a6:	57                   	push   edi
c00069a7:	e8 34 9e ff ff       	call   c00007e0 <strncmp>
c00069ac:	83 c4 10             	add    esp,0x10
c00069af:	85 c0                	test   eax,eax
c00069b1:	75 26                	jne    c00069d9 <iso_readdir+0x207>
c00069b3:	50                   	push   eax
c00069b4:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c00069b8:	83 e8 05             	sub    eax,0x5
c00069bb:	50                   	push   eax
c00069bc:	8d 47 05             	lea    eax,[edi+0x5]
c00069bf:	50                   	push   eax
c00069c0:	55                   	push   ebp
c00069c1:	e8 ba 9c ff ff       	call   c0000680 <strncpy>
c00069c6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00069ca:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c00069ce:	83 c4 10             	add    esp,0x10
c00069d1:	c6 84 08 53 65 02 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffd9aad],0x0
c00069d9:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c00069dd:	29 44 24 04          	sub    DWORD PTR [esp+0x4],eax
c00069e1:	01 c7                	add    edi,eax
c00069e3:	eb aa                	jmp    c000698f <iso_readdir+0x1bd>
c00069e5:	83 c8 ff             	or     eax,0xffffffff
c00069e8:	f6 46 19 02          	test   BYTE PTR [esi+0x19],0x2
c00069ec:	89 c2                	mov    edx,eax
c00069ee:	75 0a                	jne    c00069fa <iso_readdir+0x228>
c00069f0:	8d 46 0a             	lea    eax,[esi+0xa]
c00069f3:	e8 06 f6 ff ff       	call   c0005ffe <iso_733>
c00069f8:	31 d2                	xor    edx,edx
c00069fa:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006a00:	89 83 50 65 02 c0    	mov    DWORD PTR [ebx-0x3ffd9ab0],eax
c0006a06:	89 93 54 65 02 c0    	mov    DWORD PTR [ebx-0x3ffd9aac],edx
c0006a0c:	81 c3 40 65 02 c0    	add    ebx,0xc0026540
c0006a12:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006a15:	01 43 08             	add    DWORD PTR [ebx+0x8],eax
c0006a18:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006a1c:	05 50 65 02 c0       	add    eax,0xc0026550
c0006a21:	83 c4 1c             	add    esp,0x1c
c0006a24:	5b                   	pop    ebx
c0006a25:	5e                   	pop    esi
c0006a26:	5f                   	pop    edi
c0006a27:	5d                   	pop    ebp
c0006a28:	c3                   	ret    

c0006a29 <iso_reset>:
c0006a29:	83 ec 18             	sub    esp,0x18
c0006a2c:	68 1a 0b 02 c0       	push   0xc0020b1a
c0006a31:	e8 4e 3a 01 00       	call   c001a484 <iso_kprintf>
c0006a36:	e8 10 f7 ff ff       	call   c000614b <iso_break_all>
c0006a3b:	e8 09 f7 ff ff       	call   c0006149 <bclear>
c0006a40:	31 c0                	xor    eax,eax
c0006a42:	83 c4 1c             	add    esp,0x1c
c0006a45:	c3                   	ret    

c0006a46 <init_percd>:
c0006a46:	57                   	push   edi
c0006a47:	56                   	push   esi
c0006a48:	53                   	push   ebx
c0006a49:	bb 01 00 00 00       	mov    ebx,0x1
c0006a4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a52:	a2 60 60 02 c0       	mov    ds:0xc0026060,al
c0006a57:	e8 cd ff ff ff       	call   c0006a29 <iso_reset>
c0006a5c:	c7 05 b4 6e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026eb4,0x0
c0006a66:	a1 ac 6e 02 c0       	mov    eax,ds:0xc0026eac
c0006a6b:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c0006a6f:	e8 8c f7 ff ff       	call   c0006200 <biread>
c0006a74:	89 c6                	mov    esi,eax
c0006a76:	85 c0                	test   eax,eax
c0006a78:	0f 88 ba 00 00 00    	js     c0006b38 <init_percd+0xf2>
c0006a7e:	8b 04 85 80 60 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9f80]
c0006a85:	83 c0 04             	add    eax,0x4
c0006a88:	52                   	push   edx
c0006a89:	6a 06                	push   0x6
c0006a8b:	68 25 0b 02 c0       	push   0xc0020b25
c0006a90:	50                   	push   eax
c0006a91:	e8 ea 98 ff ff       	call   c0000380 <memcmp>
c0006a96:	83 c4 10             	add    esp,0x10
c0006a99:	85 c0                	test   eax,eax
c0006a9b:	74 08                	je     c0006aa5 <init_percd+0x5f>
c0006a9d:	43                   	inc    ebx
c0006a9e:	83 fb 04             	cmp    ebx,0x4
c0006aa1:	75 c3                	jne    c0006a66 <init_percd+0x20>
c0006aa3:	eb 1a                	jmp    c0006abf <init_percd+0x79>
c0006aa5:	8b 04 b5 80 60 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffd9f80]
c0006aac:	83 c0 5c             	add    eax,0x5c
c0006aaf:	e8 17 f5 ff ff       	call   c0005fcb <isjoliet>
c0006ab4:	a3 b4 6e 02 c0       	mov    ds:0xc0026eb4,eax
c0006ab9:	85 c0                	test   eax,eax
c0006abb:	74 e0                	je     c0006a9d <init_percd+0x57>
c0006abd:	eb 3e                	jmp    c0006afd <init_percd+0xb7>
c0006abf:	83 3d b4 6e 02 c0 00 	cmp    DWORD PTR ds:0xc0026eb4,0x0
c0006ac6:	75 35                	jne    c0006afd <init_percd+0xb7>
c0006ac8:	a1 ac 6e 02 c0       	mov    eax,ds:0xc0026eac
c0006acd:	83 c0 10             	add    eax,0x10
c0006ad0:	e8 2b f7 ff ff       	call   c0006200 <biread>
c0006ad5:	89 c6                	mov    esi,eax
c0006ad7:	85 c0                	test   eax,eax
c0006ad9:	78 5f                	js     c0006b3a <init_percd+0xf4>
c0006adb:	83 cb ff             	or     ebx,0xffffffff
c0006ade:	50                   	push   eax
c0006adf:	8b 04 b5 80 60 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffd9f80]
c0006ae6:	6a 06                	push   0x6
c0006ae8:	83 c0 04             	add    eax,0x4
c0006aeb:	68 2c 0b 02 c0       	push   0xc0020b2c
c0006af0:	50                   	push   eax
c0006af1:	e8 8a 98 ff ff       	call   c0000380 <memcmp>
c0006af6:	83 c4 10             	add    esp,0x10
c0006af9:	85 c0                	test   eax,eax
c0006afb:	75 3d                	jne    c0006b3a <init_percd+0xf4>
c0006afd:	8b 34 b5 80 60 02 c0 	mov    esi,DWORD PTR [esi*4-0x3ffd9f80]
c0006b04:	bf 80 6e 02 c0       	mov    edi,0xc0026e80
c0006b09:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006b0f:	b9 22 00 00 00       	mov    ecx,0x22
c0006b14:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006b16:	b8 82 6e 02 c0       	mov    eax,0xc0026e82
c0006b1b:	31 db                	xor    ebx,ebx
c0006b1d:	e8 dc f4 ff ff       	call   c0005ffe <iso_733>
c0006b22:	a3 a8 6e 02 c0       	mov    ds:0xc0026ea8,eax
c0006b27:	b8 8a 6e 02 c0       	mov    eax,0xc0026e8a
c0006b2c:	e8 cd f4 ff ff       	call   c0005ffe <iso_733>
c0006b31:	a3 a4 6e 02 c0       	mov    ds:0xc0026ea4,eax
c0006b36:	eb 02                	jmp    c0006b3a <init_percd+0xf4>
c0006b38:	89 c3                	mov    ebx,eax
c0006b3a:	89 d8                	mov    eax,ebx
c0006b3c:	5b                   	pop    ebx
c0006b3d:	5e                   	pop    esi
c0006b3e:	5f                   	pop    edi
c0006b3f:	c3                   	ret    

c0006b40 <iso_ioctl>:
c0006b40:	83 ec 18             	sub    esp,0x18
c0006b43:	68 33 0b 02 c0       	push   0xc0020b33
c0006b48:	e8 37 39 01 00       	call   c001a484 <iso_kprintf>
c0006b4d:	e8 d7 fe ff ff       	call   c0006a29 <iso_reset>
c0006b52:	31 c0                	xor    eax,eax
c0006b54:	83 c4 1c             	add    esp,0x1c
c0006b57:	c3                   	ret    

c0006b58 <fs_iso9660_init>:
c0006b58:	53                   	push   ebx
c0006b59:	31 db                	xor    ebx,ebx
c0006b5b:	83 ec 14             	sub    esp,0x14
c0006b5e:	68 3e 0b 02 c0       	push   0xc0020b3e
c0006b63:	e8 1c 39 01 00       	call   c001a484 <iso_kprintf>
c0006b68:	83 c4 0c             	add    esp,0xc
c0006b6b:	68 40 09 00 00       	push   0x940
c0006b70:	6a 00                	push   0x0
c0006b72:	68 40 65 02 c0       	push   0xc0026540
c0006b77:	e8 74 99 ff ff       	call   c00004f0 <memset>
c0006b7c:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006b83:	c7 05 40 65 02 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0026540,0xffffffff
c0006b8d:	e8 24 0f 00 00       	call   c0007ab6 <malloc>
c0006b92:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006b99:	a3 b0 6e 02 c0       	mov    ds:0xc0026eb0,eax
c0006b9e:	e8 13 0f 00 00       	call   c0007ab6 <malloc>
c0006ba3:	83 c4 10             	add    esp,0x10
c0006ba6:	a3 20 65 02 c0       	mov    ds:0xc0026520,eax
c0006bab:	83 ec 0c             	sub    esp,0xc
c0006bae:	68 04 08 00 00       	push   0x804
c0006bb3:	e8 fe 0e 00 00       	call   c0007ab6 <malloc>
c0006bb8:	89 04 9d 80 60 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd9f80],eax
c0006bbf:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006bc5:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006bcc:	e8 e5 0e 00 00       	call   c0007ab6 <malloc>
c0006bd1:	83 c4 10             	add    esp,0x10
c0006bd4:	89 04 9d 20 60 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd9fe0],eax
c0006bdb:	43                   	inc    ebx
c0006bdc:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006be2:	83 fb 10             	cmp    ebx,0x10
c0006be5:	75 c4                	jne    c0006bab <fs_iso9660_init+0x53>
c0006be7:	31 c0                	xor    eax,eax
c0006be9:	83 c4 08             	add    esp,0x8
c0006bec:	5b                   	pop    ebx
c0006bed:	c3                   	ret    

c0006bee <fs_iso9660_shutdown>:
c0006bee:	53                   	push   ebx
c0006bef:	31 db                	xor    ebx,ebx
c0006bf1:	83 ec 08             	sub    esp,0x8
c0006bf4:	83 ec 0c             	sub    esp,0xc
c0006bf7:	ff 34 9d 80 60 02 c0 	push   DWORD PTR [ebx*4-0x3ffd9f80]
c0006bfe:	e8 c3 0e 00 00       	call   c0007ac6 <free>
c0006c03:	58                   	pop    eax
c0006c04:	ff 34 9d 20 60 02 c0 	push   DWORD PTR [ebx*4-0x3ffd9fe0]
c0006c0b:	43                   	inc    ebx
c0006c0c:	e8 b5 0e 00 00       	call   c0007ac6 <free>
c0006c11:	83 c4 10             	add    esp,0x10
c0006c14:	83 fb 10             	cmp    ebx,0x10
c0006c17:	75 db                	jne    c0006bf4 <fs_iso9660_shutdown+0x6>
c0006c19:	a1 b0 6e 02 c0       	mov    eax,ds:0xc0026eb0
c0006c1e:	85 c0                	test   eax,eax
c0006c20:	74 0c                	je     c0006c2e <fs_iso9660_shutdown+0x40>
c0006c22:	83 ec 0c             	sub    esp,0xc
c0006c25:	50                   	push   eax
c0006c26:	e8 9b 0e 00 00       	call   c0007ac6 <free>
c0006c2b:	83 c4 10             	add    esp,0x10
c0006c2e:	a1 20 65 02 c0       	mov    eax,ds:0xc0026520
c0006c33:	85 c0                	test   eax,eax
c0006c35:	74 0c                	je     c0006c43 <fs_iso9660_shutdown+0x55>
c0006c37:	83 ec 0c             	sub    esp,0xc
c0006c3a:	50                   	push   eax
c0006c3b:	e8 86 0e 00 00       	call   c0007ac6 <free>
c0006c40:	83 c4 10             	add    esp,0x10
c0006c43:	c7 05 20 65 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026520,0x0
c0006c4d:	c7 05 b0 6e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026eb0,0x0
c0006c57:	31 c0                	xor    eax,eax
c0006c59:	83 c4 08             	add    esp,0x8
c0006c5c:	5b                   	pop    ebx
c0006c5d:	c3                   	ret    

c0006c5e <Computer::close(int, int, void*)>:
c0006c5e:	57                   	push   edi
c0006c5f:	56                   	push   esi
c0006c60:	53                   	push   ebx
c0006c61:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0006c65:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0006c69:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0006c6d:	e8 42 a2 00 00       	call   c0010eb4 <KeExecuteAtexit()>
c0006c72:	83 ec 0c             	sub    esp,0xc
c0006c75:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006c7b:	50                   	push   eax
c0006c7c:	e8 d7 5e 00 00       	call   c000cb58 <Device::closeAll()>
c0006c81:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006c87:	83 c4 10             	add    esp,0x10
c0006c8a:	8b 10                	mov    edx,DWORD PTR [eax]
c0006c8c:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c0006c90:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c0006c98:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0006c9c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006ca0:	5b                   	pop    ebx
c0006ca1:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0006ca4:	5e                   	pop    esi
c0006ca5:	5f                   	pop    edi
c0006ca6:	ff e0                	jmp    eax

c0006ca8 <Krnl::firstTask()>:
c0006ca8:	53                   	push   ebx
c0006ca9:	83 ec 14             	sub    esp,0x14
c0006cac:	fb                   	sti    
c0006cad:	68 4f 0b 02 c0       	push   0xc0020b4f
c0006cb2:	e8 dc a2 00 00       	call   c0010f93 <KeSetBootMessage(char const*)>
c0006cb7:	c7 04 24 24 07 00 00 	mov    DWORD PTR [esp],0x724
c0006cbe:	e8 f3 0d 00 00       	call   c0007ab6 <malloc>
c0006cc3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0006cca:	89 c3                	mov    ebx,eax
c0006ccc:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0006cd1:	50                   	push   eax
c0006cd2:	68 68 0b 02 c0       	push   0xc0020b68
c0006cd7:	6a 01                	push   0x1
c0006cd9:	53                   	push   ebx
c0006cda:	e8 c5 ef 00 00       	call   c0015ca4 <Process::Process(bool, char const*, Process*, char**)>
c0006cdf:	83 c4 20             	add    esp,0x20
c0006ce2:	68 ff 00 00 00       	push   0xff
c0006ce7:	6a 00                	push   0x0
c0006ce9:	68 fd 74 00 c0       	push   0xc00074fd
c0006cee:	53                   	push   ebx
c0006cef:	e8 d4 f1 00 00       	call   c0015ec8 <Process::createThread(void (*)(void*), void*, int)>
c0006cf4:	8b 15 f0 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6f0
c0006cfa:	6a 7a                	push   0x7a
c0006cfc:	6a 00                	push   0x0
c0006cfe:	68 b0 69 01 c0       	push   0xc00169b0
c0006d03:	52                   	push   edx
c0006d04:	e8 bf f1 00 00       	call   c0015ec8 <Process::createThread(void (*)(void*), void*, int)>
c0006d09:	83 c4 14             	add    esp,0x14
c0006d0c:	a3 a8 c6 02 c0       	mov    ds:0xc002c6a8,eax
c0006d11:	68 64 0c 02 c0       	push   0xc0020c64
c0006d16:	e8 78 a2 00 00       	call   c0010f93 <KeSetBootMessage(char const*)>
c0006d1b:	c6 05 bd 6e 02 c0 01 	mov    BYTE PTR ds:0xc0026ebd,0x1
c0006d22:	e8 25 ab 00 00       	call   c001184c <KeInitRand()>
c0006d27:	e8 a7 00 01 00       	call   c0016dd3 <Vm::initialise8086()>
c0006d2c:	e8 7f 4b 00 00       	call   c000b8b0 <Fs::initVFS()>
c0006d31:	c7 04 24 75 0b 02 c0 	mov    DWORD PTR [esp],0xc0020b75
c0006d38:	e8 56 a2 00 00       	call   c0010f93 <KeSetBootMessage(char const*)>
c0006d3d:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0006d42:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006d48:	8b 10                	mov    edx,DWORD PTR [eax]
c0006d4a:	6a 00                	push   0x0
c0006d4c:	6a 00                	push   0x0
c0006d4e:	6a 00                	push   0x0
c0006d50:	50                   	push   eax
c0006d51:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0006d54:	83 c4 14             	add    esp,0x14
c0006d57:	68 64 0c 02 c0       	push   0xc0020c64
c0006d5c:	e8 32 a2 00 00       	call   c0010f93 <KeSetBootMessage(char const*)>
c0006d61:	e8 6d 47 00 00       	call   c000b4d3 <KeInitialiseSymlinks()>
c0006d66:	e8 8b a7 00 00       	call   c00114f6 <KeLoadSystemEnv()>
c0006d6b:	e8 e8 a9 00 00       	call   c0011758 <KeSetupPowerManager()>
c0006d70:	83 c4 0c             	add    esp,0xc
c0006d73:	6a 3a                	push   0x3a
c0006d75:	68 8f 0b 02 c0       	push   0xc0020b8f
c0006d7a:	68 98 0b 02 c0       	push   0xc0020b98
c0006d7f:	e8 3c d1 00 00       	call   c0013ec0 <Reg::readIntWithDefault(char*, char*, int)>
c0006d84:	89 04 24             	mov    DWORD PTR [esp],eax
c0006d87:	e8 2c 57 00 00       	call   c000c4b8 <User::loadClockSettings(int)>
c0006d8c:	c7 04 24 88 0c 02 c0 	mov    DWORD PTR [esp],0xc0020c88
c0006d93:	e8 fb a1 00 00       	call   c0010f93 <KeSetBootMessage(char const*)>
c0006d98:	59                   	pop    ecx
c0006d99:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0006d9e:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c0006da4:	53                   	push   ebx
c0006da5:	e8 ac 5d 00 00       	call   c000cb56 <Device::loadDriversForAll()>
c0006daa:	c7 04 24 a0 0b 02 c0 	mov    DWORD PTR [esp],0xc0020ba0
c0006db1:	e8 dd a1 00 00       	call   c0010f93 <KeSetBootMessage(char const*)>
c0006db6:	58                   	pop    eax
c0006db7:	8b 1d b8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb8
c0006dbd:	5a                   	pop    edx
c0006dbe:	6a 01                	push   0x1
c0006dc0:	68 b1 0b 02 c0       	push   0xc0020bb1
c0006dc5:	e8 ed e8 00 00       	call   c00156b7 <Thr::loadDLL(char const*, bool)>
c0006dca:	59                   	pop    ecx
c0006dcb:	5a                   	pop    edx
c0006dcc:	53                   	push   ebx
c0006dcd:	50                   	push   eax
c0006dce:	e8 15 eb 00 00       	call   c00158e8 <Thr::executeDLL(unsigned long, void*)>
c0006dd3:	83 c4 10             	add    esp,0x10
c0006dd6:	83 ec 0c             	sub    esp,0xc
c0006dd9:	6a 02                	push   0x2
c0006ddb:	e8 4c f5 00 00       	call   c001632c <blockTask(TaskState)>
c0006de0:	83 c4 10             	add    esp,0x10
c0006de3:	eb f1                	jmp    c0006dd6 <Krnl::firstTask()+0x12e>
c0006de5:	90                   	nop

c0006de6 <Computer::Computer()>:
c0006de6:	83 ec 0c             	sub    esp,0xc
c0006de9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ded:	83 ec 08             	sub    esp,0x8
c0006df0:	68 cd 0b 02 c0       	push   0xc0020bcd
c0006df5:	50                   	push   eax
c0006df6:	e8 d7 5d 00 00       	call   c000cbd2 <Device::Device(char const*)>
c0006dfb:	83 c4 10             	add    esp,0x10
c0006dfe:	ba d4 0c 02 c0       	mov    edx,0xc0020cd4
c0006e03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e07:	89 10                	mov    DWORD PTR [eax],edx
c0006e09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e0d:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0006e17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e1b:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0006e25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e29:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0006e2f:	83 ca 04             	or     edx,0x4
c0006e32:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0006e38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e3c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e42:	0f b6 d0             	movzx  edx,al
c0006e45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e49:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0006e50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e54:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e5a:	0f b6 d0             	movzx  edx,al
c0006e5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e61:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0006e66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e6a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e70:	8d 50 01             	lea    edx,[eax+0x1]
c0006e73:	88 d1                	mov    cl,dl
c0006e75:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006e79:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c0006e7f:	0f b6 d0             	movzx  edx,al
c0006e82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e86:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0006e8a:	83 e1 3f             	and    ecx,0x3f
c0006e8d:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0006e91:	90                   	nop
c0006e92:	83 c4 0c             	add    esp,0xc
c0006e95:	c3                   	ret    

c0006e96 <Computer::setBootMessage(char const*)>:
c0006e96:	c3                   	ret    
c0006e97:	90                   	nop

c0006e98 <Computer::detectFeatures()>:
c0006e98:	55                   	push   ebp
c0006e99:	57                   	push   edi
c0006e9a:	56                   	push   esi
c0006e9b:	53                   	push   ebx
c0006e9c:	83 ec 1c             	sub    esp,0x1c
c0006e9f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006ea3:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0006ea9:	81 e2 04 00 fc ff    	and    edx,0xfffc0004
c0006eaf:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0006eb5:	e8 3f 93 ff ff       	call   c00001f9 <detectCPUID>
c0006eba:	31 d2                	xor    edx,edx
c0006ebc:	85 c0                	test   eax,eax
c0006ebe:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006ec4:	0f 95 c2             	setne  dl
c0006ec7:	83 e0 fd             	and    eax,0xfffffffd
c0006eca:	d1 e2                	shl    edx,1
c0006ecc:	09 d0                	or     eax,edx
c0006ece:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006ed4:	a8 02                	test   al,0x2
c0006ed6:	75 51                	jne    c0006f29 <Computer::detectFeatures()+0x91>
c0006ed8:	f6 05 d1 6e 02 c0 04 	test   BYTE PTR ds:0xc0026ed1,0x4
c0006edf:	74 0f                	je     c0006ef0 <Computer::detectFeatures()+0x58>
c0006ee1:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006ee7:	83 e0 fb             	and    eax,0xfffffffb
c0006eea:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006ef0:	e8 61 85 01 00       	call   c001f456 <x87Detect>
c0006ef5:	83 e0 01             	and    eax,0x1
c0006ef8:	c1 e0 04             	shl    eax,0x4
c0006efb:	89 c2                	mov    edx,eax
c0006efd:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f03:	83 e0 ef             	and    eax,0xffffffef
c0006f06:	09 d0                	or     eax,edx
c0006f08:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f0e:	88 c2                	mov    dl,al
c0006f10:	a8 10                	test   al,0x10
c0006f12:	0f 85 33 01 00 00    	jne    c000704b <Computer::detectFeatures()+0x1b3>
c0006f18:	80 e2 80             	and    dl,0x80
c0006f1b:	0f 85 4c 01 00 00    	jne    c000706d <Computer::detectFeatures()+0x1d5>
c0006f21:	83 c4 1c             	add    esp,0x1c
c0006f24:	5b                   	pop    ebx
c0006f25:	5e                   	pop    esi
c0006f26:	5f                   	pop    edi
c0006f27:	5d                   	pop    ebp
c0006f28:	c3                   	ret    
c0006f29:	83 ec 0c             	sub    esp,0xc
c0006f2c:	6a 20                	push   0x20
c0006f2e:	e8 99 94 00 00       	call   c00103cc <CPU::cpuidCheckEDX(unsigned int)>
c0006f33:	83 e0 01             	and    eax,0x1
c0006f36:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0006f3d:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f43:	83 e0 f7             	and    eax,0xfffffff7
c0006f46:	09 d0                	or     eax,edx
c0006f48:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f4e:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0006f55:	e8 72 94 00 00       	call   c00103cc <CPU::cpuidCheckEDX(unsigned int)>
c0006f5a:	89 c2                	mov    edx,eax
c0006f5c:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006f62:	83 e2 01             	and    edx,0x1
c0006f65:	83 e0 fe             	and    eax,0xfffffffe
c0006f68:	09 d0                	or     eax,edx
c0006f6a:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006f70:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0006f77:	e8 50 94 00 00       	call   c00103cc <CPU::cpuidCheckEDX(unsigned int)>
c0006f7c:	89 c2                	mov    edx,eax
c0006f7e:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006f84:	c1 e2 07             	shl    edx,0x7
c0006f87:	83 e0 7f             	and    eax,0x7f
c0006f8a:	09 d0                	or     eax,edx
c0006f8c:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006f92:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0006f99:	e8 2e 94 00 00       	call   c00103cc <CPU::cpuidCheckEDX(unsigned int)>
c0006f9e:	83 c4 10             	add    esp,0x10
c0006fa1:	83 e0 01             	and    eax,0x1
c0006fa4:	c1 e0 05             	shl    eax,0x5
c0006fa7:	89 c2                	mov    edx,eax
c0006fa9:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006faf:	83 e0 df             	and    eax,0xffffffdf
c0006fb2:	09 d0                	or     eax,edx
c0006fb4:	f7 05 d0 6e 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0026ed0,0x401
c0006fbe:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006fc4:	0f 84 c9 00 00 00    	je     c0007093 <Computer::detectFeatures()+0x1fb>
c0006fca:	83 e0 fe             	and    eax,0xfffffffe
c0006fcd:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006fd3:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006fd9:	89 c2                	mov    edx,eax
c0006fdb:	83 e2 09             	and    edx,0x9
c0006fde:	83 fa 01             	cmp    edx,0x1
c0006fe1:	75 09                	jne    c0006fec <Computer::detectFeatures()+0x154>
c0006fe3:	83 e0 fe             	and    eax,0xfffffffe
c0006fe6:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006fec:	83 ec 0c             	sub    esp,0xc
c0006fef:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006ff3:	50                   	push   eax
c0006ff4:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c0006ff8:	55                   	push   ebp
c0006ff9:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0006ffd:	57                   	push   edi
c0006ffe:	8d 74 24 18          	lea    esi,[esp+0x18]
c0007002:	56                   	push   esi
c0007003:	68 00 00 00 80       	push   0x80000000
c0007008:	e8 3b 93 00 00       	call   c0010348 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000700d:	83 c4 20             	add    esp,0x20
c0007010:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c0007017:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000701b:	0f 86 b7 fe ff ff    	jbe    c0006ed8 <Computer::detectFeatures()+0x40>
c0007021:	83 ec 0c             	sub    esp,0xc
c0007024:	50                   	push   eax
c0007025:	55                   	push   ebp
c0007026:	57                   	push   edi
c0007027:	56                   	push   esi
c0007028:	68 01 00 00 80       	push   0x80000001
c000702d:	e8 16 93 00 00       	call   c0010348 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0007032:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0007038:	83 c4 20             	add    esp,0x20
c000703b:	25 bf ff fc ff       	and    eax,0xfffcffbf
c0007040:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0007046:	e9 8d fe ff ff       	jmp    c0006ed8 <Computer::detectFeatures()+0x40>
c000704b:	e8 c0 83 01 00       	call   c001f410 <absolutelyNoChanceInHell>
c0007050:	8a 93 6c 01 00 00    	mov    dl,BYTE PTR [ebx+0x16c]
c0007056:	c1 e0 07             	shl    eax,0x7
c0007059:	83 e2 7f             	and    edx,0x7f
c000705c:	09 c2                	or     edx,eax
c000705e:	88 93 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],dl
c0007064:	80 e2 80             	and    dl,0x80
c0007067:	0f 84 b4 fe ff ff    	je     c0006f21 <Computer::detectFeatures()+0x89>
c000706d:	e8 0e 80 01 00       	call   c001f080 <avxDetect>
c0007072:	83 e0 01             	and    eax,0x1
c0007075:	c1 e0 05             	shl    eax,0x5
c0007078:	89 c2                	mov    edx,eax
c000707a:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0007080:	83 e0 df             	and    eax,0xffffffdf
c0007083:	09 d0                	or     eax,edx
c0007085:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c000708b:	83 c4 1c             	add    esp,0x1c
c000708e:	5b                   	pop    ebx
c000708f:	5e                   	pop    esi
c0007090:	5f                   	pop    edi
c0007091:	5d                   	pop    ebp
c0007092:	c3                   	ret    
c0007093:	83 ec 0c             	sub    esp,0xc
c0007096:	68 00 02 00 00       	push   0x200
c000709b:	e8 2c 93 00 00       	call   c00103cc <CPU::cpuidCheckEDX(unsigned int)>
c00070a0:	83 c4 10             	add    esp,0x10
c00070a3:	89 c2                	mov    edx,eax
c00070a5:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c00070ab:	83 e2 01             	and    edx,0x1
c00070ae:	83 e0 fe             	and    eax,0xfffffffe
c00070b1:	09 d0                	or     eax,edx
c00070b3:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00070b9:	e9 15 ff ff ff       	jmp    c0006fd3 <Computer::detectFeatures()+0x13b>

c00070be <Computer::displayFeatures()>:
c00070be:	c3                   	ret    
c00070bf:	90                   	nop

c00070c0 <Computer::rdmsr(unsigned int)>:
c00070c0:	83 ec 0c             	sub    esp,0xc
c00070c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00070c7:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c00070ce:	74 0a                	je     c00070da <Computer::rdmsr(unsigned int)+0x1a>
c00070d0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00070d4:	0f 32                	rdmsr  
c00070d6:	83 c4 0c             	add    esp,0xc
c00070d9:	c3                   	ret    
c00070da:	83 ec 0c             	sub    esp,0xc
c00070dd:	68 d6 0b 02 c0       	push   0xc0020bd6
c00070e2:	e8 ac a5 00 00       	call   c0011693 <KePanic(char const*)>
c00070e7:	83 c4 10             	add    esp,0x10
c00070ea:	eb e4                	jmp    c00070d0 <Computer::rdmsr(unsigned int)+0x10>

c00070ec <Computer::wrmsr(unsigned int, unsigned long long)>:
c00070ec:	57                   	push   edi
c00070ed:	56                   	push   esi
c00070ee:	83 ec 04             	sub    esp,0x4
c00070f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00070f5:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00070f9:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00070fd:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0007104:	74 10                	je     c0007116 <Computer::wrmsr(unsigned int, unsigned long long)+0x2a>
c0007106:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000710a:	89 f0                	mov    eax,esi
c000710c:	89 fa                	mov    edx,edi
c000710e:	0f 30                	wrmsr  
c0007110:	83 c4 04             	add    esp,0x4
c0007113:	5e                   	pop    esi
c0007114:	5f                   	pop    edi
c0007115:	c3                   	ret    
c0007116:	83 ec 0c             	sub    esp,0xc
c0007119:	68 dc 0b 02 c0       	push   0xc0020bdc
c000711e:	e8 70 a5 00 00       	call   c0011693 <KePanic(char const*)>
c0007123:	83 c4 10             	add    esp,0x10
c0007126:	eb de                	jmp    c0007106 <Computer::wrmsr(unsigned int, unsigned long long)+0x1a>

c0007128 <Computer::shutdown()>:
c0007128:	83 ec 0c             	sub    esp,0xc
c000712b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000712f:	8b 10                	mov    edx,DWORD PTR [eax]
c0007131:	6a 00                	push   0x0
c0007133:	6a 00                	push   0x0
c0007135:	6a 00                	push   0x0
c0007137:	50                   	push   eax
c0007138:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000713b:	83 c4 1c             	add    esp,0x1c
c000713e:	c3                   	ret    
c000713f:	90                   	nop

c0007140 <Computer::restart()>:
c0007140:	83 ec 0c             	sub    esp,0xc
c0007143:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007147:	8b 10                	mov    edx,DWORD PTR [eax]
c0007149:	6a 00                	push   0x0
c000714b:	6a 00                	push   0x0
c000714d:	6a 01                	push   0x1
c000714f:	50                   	push   eax
c0007150:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0007153:	83 c4 1c             	add    esp,0x1c
c0007156:	c3                   	ret    
c0007157:	90                   	nop

c0007158 <Computer::sleep()>:
c0007158:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000715c:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0007162:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0007166:	e9 79 8c 00 00       	jmp    c000fde4 <ACPI::sleep()>
c000716b:	90                   	nop

c000716c <Computer::nmiEnabled()>:
c000716c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007170:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0007176:	c3                   	ret    
c0007177:	90                   	nop

c0007178 <Computer::readCMOS(unsigned char)>:
c0007178:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000717c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007180:	80 ba 58 01 00 00 00 	cmp    BYTE PTR [edx+0x158],0x0
c0007187:	75 09                	jne    c0007192 <Computer::readCMOS(unsigned char)+0x1a>
c0007189:	b2 80                	mov    dl,0x80
c000718b:	09 d0                	or     eax,edx
c000718d:	e6 70                	out    0x70,al
c000718f:	e4 71                	in     al,0x71
c0007191:	c3                   	ret    
c0007192:	31 d2                	xor    edx,edx
c0007194:	eb f5                	jmp    c000718b <Computer::readCMOS(unsigned char)+0x13>

c0007196 <Computer::enableNMI(bool)>:
c0007196:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000719a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000719e:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c00071a4:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c00071ac:	eb ca                	jmp    c0007178 <Computer::readCMOS(unsigned char)>

c00071ae <Computer::open(int, int, void*)>:
c00071ae:	56                   	push   esi
c00071af:	53                   	push   ebx
c00071b0:	83 ec 10             	sub    esp,0x10
c00071b3:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00071b7:	f6 05 d0 6e 02 c0 04 	test   BYTE PTR ds:0xc0026ed0,0x4
c00071be:	68 e2 0b 02 c0       	push   0xc0020be2
c00071c3:	0f 94 05 e0 36 02 c0 	sete   BYTE PTR ds:0xc00236e0
c00071ca:	e8 c4 9d 00 00       	call   c0010f93 <KeSetBootMessage(char const*)>
c00071cf:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c00071d6:	e8 db 08 00 00       	call   c0007ab6 <malloc>
c00071db:	89 04 24             	mov    DWORD PTR [esp],eax
c00071de:	89 c6                	mov    esi,eax
c00071e0:	e8 73 87 00 00       	call   c000f958 <ACPI::ACPI()>
c00071e5:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c00071eb:	58                   	pop    eax
c00071ec:	5a                   	pop    edx
c00071ed:	56                   	push   esi
c00071ee:	53                   	push   ebx
c00071ef:	e8 46 58 00 00       	call   c000ca3a <Device::addChild(Device*)>
c00071f4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00071f7:	e8 9c fc ff ff       	call   c0006e98 <Computer::detectFeatures()>
c00071fc:	59                   	pop    ecx
c00071fd:	5e                   	pop    esi
c00071fe:	6a 01                	push   0x1
c0007200:	53                   	push   ebx
c0007201:	e8 90 ff ff ff       	call   c0007196 <Computer::enableNMI(bool)>
c0007206:	c7 04 24 fa 0b 02 c0 	mov    DWORD PTR [esp],0xc0020bfa
c000720d:	e8 81 9d 00 00       	call   c0010f93 <KeSetBootMessage(char const*)>
c0007212:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c0007219:	e8 98 08 00 00       	call   c0007ab6 <malloc>
c000721e:	89 04 24             	mov    DWORD PTR [esp],eax
c0007221:	89 c6                	mov    esi,eax
c0007223:	e8 5c 92 00 00       	call   c0010484 <CPU::CPU()>
c0007228:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000722e:	58                   	pop    eax
c000722f:	5a                   	pop    edx
c0007230:	56                   	push   esi
c0007231:	53                   	push   ebx
c0007232:	e8 03 58 00 00       	call   c000ca3a <Device::addChild(Device*)>
c0007237:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000723d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0007241:	8b 10                	mov    edx,DWORD PTR [eax]
c0007243:	51                   	push   ecx
c0007244:	6a 00                	push   0x0
c0007246:	6a 00                	push   0x0
c0007248:	50                   	push   eax
c0007249:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000724c:	83 c4 14             	add    esp,0x14
c000724f:	68 a8 0c 02 c0       	push   0xc0020ca8
c0007254:	e8 3a 9d 00 00       	call   c0010f93 <KeSetBootMessage(char const*)>
c0007259:	e8 b2 0d 01 00       	call   c0018010 <HalInitialiseCoprocessor()>
c000725e:	c7 04 24 14 0c 02 c0 	mov    DWORD PTR [esp],0xc0020c14
c0007265:	e8 29 9d 00 00       	call   c0010f93 <KeSetBootMessage(char const*)>
c000726a:	c7 04 24 a8 6c 00 c0 	mov    DWORD PTR [esp],0xc0006ca8
c0007271:	e8 7e ed 00 00       	call   c0015ff4 <setupMultitasking(void (*)())>
c0007276:	83 c4 14             	add    esp,0x14
c0007279:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000727e:	5b                   	pop    ebx
c000727f:	5e                   	pop    esi
c0007280:	c3                   	ret    
c0007281:	90                   	nop

c0007282 <Computer::disableNMI()>:
c0007282:	6a 00                	push   0x0
c0007284:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007288:	50                   	push   eax
c0007289:	e8 08 ff ff ff       	call   c0007196 <Computer::enableNMI(bool)>
c000728e:	5a                   	pop    edx
c000728f:	59                   	pop    ecx
c0007290:	c3                   	ret    
c0007291:	90                   	nop

c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>:
c0007292:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007296:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000729a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000729e:	80 b9 58 01 00 00 00 	cmp    BYTE PTR [ecx+0x158],0x0
c00072a5:	75 0b                	jne    c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)+0x20>
c00072a7:	b1 80                	mov    cl,0x80
c00072a9:	09 c8                	or     eax,ecx
c00072ab:	e6 70                	out    0x70,al
c00072ad:	88 d0                	mov    al,dl
c00072af:	e6 71                	out    0x71,al
c00072b1:	c3                   	ret    
c00072b2:	31 c9                	xor    ecx,ecx
c00072b4:	eb f3                	jmp    c00072a9 <Computer::writeCMOS(unsigned char, unsigned char)+0x17>

c00072b6 <Computer::handleNMI()>:
c00072b6:	56                   	push   esi
c00072b7:	53                   	push   ebx
c00072b8:	83 ec 10             	sub    esp,0x10
c00072bb:	e4 92                	in     al,0x92
c00072bd:	89 c6                	mov    esi,eax
c00072bf:	e4 61                	in     al,0x61
c00072c1:	68 2f 0c 02 c0       	push   0xc0020c2f
c00072c6:	88 c3                	mov    bl,al
c00072c8:	e8 78 36 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00072cd:	83 c4 10             	add    esp,0x10
c00072d0:	83 e6 10             	and    esi,0x10
c00072d3:	75 10                	jne    c00072e5 <Computer::handleNMI()+0x2f>
c00072d5:	f6 c3 40             	test   bl,0x40
c00072d8:	75 20                	jne    c00072fa <Computer::handleNMI()+0x44>
c00072da:	80 e3 80             	and    bl,0x80
c00072dd:	75 30                	jne    c000730f <Computer::handleNMI()+0x59>
c00072df:	83 c4 04             	add    esp,0x4
c00072e2:	5b                   	pop    ebx
c00072e3:	5e                   	pop    esi
c00072e4:	c3                   	ret    
c00072e5:	83 ec 0c             	sub    esp,0xc
c00072e8:	68 40 0c 02 c0       	push   0xc0020c40
c00072ed:	e8 a1 a3 00 00       	call   c0011693 <KePanic(char const*)>
c00072f2:	83 c4 10             	add    esp,0x10
c00072f5:	f6 c3 40             	test   bl,0x40
c00072f8:	74 e0                	je     c00072da <Computer::handleNMI()+0x24>
c00072fa:	83 ec 0c             	sub    esp,0xc
c00072fd:	68 4d 0c 02 c0       	push   0xc0020c4d
c0007302:	e8 8c a3 00 00       	call   c0011693 <KePanic(char const*)>
c0007307:	83 c4 10             	add    esp,0x10
c000730a:	80 e3 80             	and    bl,0x80
c000730d:	74 d0                	je     c00072df <Computer::handleNMI()+0x29>
c000730f:	c7 44 24 10 57 0c 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020c57
c0007317:	83 c4 04             	add    esp,0x4
c000731a:	5b                   	pop    ebx
c000731b:	5e                   	pop    esi
c000731c:	e9 72 a3 00 00       	jmp    c0011693 <KePanic(char const*)>
c0007321:	90                   	nop

c0007322 <GDTEntry::setBase(unsigned int)>:
c0007322:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007326:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000732a:	89 c1                	mov    ecx,eax
c000732c:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0007330:	c1 e9 10             	shr    ecx,0x10
c0007333:	c1 e8 18             	shr    eax,0x18
c0007336:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c0007339:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000733c:	c3                   	ret    
c000733d:	90                   	nop

c000733e <GDTEntry::setLimit(unsigned int)>:
c000733e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007342:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007346:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c0007349:	66 89 01             	mov    WORD PTR [ecx],ax
c000734c:	83 e2 f0             	and    edx,0xfffffff0
c000734f:	c1 e8 10             	shr    eax,0x10
c0007352:	83 e0 0f             	and    eax,0xf
c0007355:	09 d0                	or     eax,edx
c0007357:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000735a:	c3                   	ret    
c000735b:	90                   	nop

c000735c <GDT::GDT()>:
c000735c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007360:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007366:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000736a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007370:	90                   	nop
c0007371:	c3                   	ret    

c0007372 <GDT::addEntry(GDTEntry)>:
c0007372:	53                   	push   ebx
c0007373:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007377:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000737b:	8b 02                	mov    eax,DWORD PTR [edx]
c000737d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007381:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c0007385:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c0007389:	8d 48 01             	lea    ecx,[eax+0x1]
c000738c:	c1 e0 03             	shl    eax,0x3
c000738f:	89 0a                	mov    DWORD PTR [edx],ecx
c0007391:	5b                   	pop    ebx
c0007392:	c3                   	ret    
c0007393:	90                   	nop

c0007394 <GDT::getNumberOfEntries()>:
c0007394:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007398:	8b 00                	mov    eax,DWORD PTR [eax]
c000739a:	c3                   	ret    
c000739b:	90                   	nop

c000739c <GDT::flush()>:
c000739c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00073a0:	8b 10                	mov    edx,DWORD PTR [eax]
c00073a2:	83 c0 04             	add    eax,0x4
c00073a5:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c00073ac:	a3 c2 6e 02 c0       	mov    ds:0xc0026ec2,eax
c00073b1:	66 89 15 c0 6e 02 c0 	mov    WORD PTR ds:0xc0026ec0,dx
c00073b8:	e9 9d 8f ff ff       	jmp    c000035a <loadGDT>
c00073bd:	90                   	nop

c00073be <GDT::setup()>:
c00073be:	57                   	push   edi
c00073bf:	56                   	push   esi
c00073c0:	53                   	push   ebx
c00073c1:	83 ec 30             	sub    esp,0x30
c00073c4:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00073c8:	6a 00                	push   0x0
c00073ca:	8d 74 24 14          	lea    esi,[esp+0x14]
c00073ce:	56                   	push   esi
c00073cf:	e8 4e ff ff ff       	call   c0007322 <GDTEntry::setBase(unsigned int)>
c00073d4:	6a 00                	push   0x0
c00073d6:	56                   	push   esi
c00073d7:	e8 62 ff ff ff       	call   c000733e <GDTEntry::setLimit(unsigned int)>
c00073dc:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c00073e4:	6a 00                	push   0x0
c00073e6:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00073ea:	56                   	push   esi
c00073eb:	e8 32 ff ff ff       	call   c0007322 <GDTEntry::setBase(unsigned int)>
c00073f0:	68 ff ff ff 00       	push   0xffffff
c00073f5:	56                   	push   esi
c00073f6:	e8 43 ff ff ff       	call   c000733e <GDTEntry::setLimit(unsigned int)>
c00073fb:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00073ff:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0007403:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007407:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c000740b:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c0007410:	0d 00 9a c0 00       	or     eax,0xc09a00
c0007415:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0007419:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000741d:	89 f8                	mov    eax,edi
c000741f:	89 fa                	mov    edx,edi
c0007421:	80 e4 f7             	and    ah,0xf7
c0007424:	80 ce 60             	or     dh,0x60
c0007427:	89 c7                	mov    edi,eax
c0007429:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000742d:	80 cc 60             	or     ah,0x60
c0007430:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0007434:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0007438:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000743c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007440:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007444:	83 c4 20             	add    esp,0x20
c0007447:	6a 00                	push   0x0
c0007449:	8d 44 24 24          	lea    eax,[esp+0x24]
c000744d:	50                   	push   eax
c000744e:	e8 cf fe ff ff       	call   c0007322 <GDTEntry::setBase(unsigned int)>
c0007453:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0007457:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000745b:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000745f:	83 e0 3f             	and    eax,0x3f
c0007462:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c0007466:	6a 00                	push   0x0
c0007468:	8d 44 24 34          	lea    eax,[esp+0x34]
c000746c:	50                   	push   eax
c000746d:	e8 b0 fe ff ff       	call   c0007322 <GDTEntry::setBase(unsigned int)>
c0007472:	8a 44 24 3e          	mov    al,BYTE PTR [esp+0x3e]
c0007476:	83 e0 3f             	and    eax,0x3f
c0007479:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c000747d:	83 c4 0c             	add    esp,0xc
c0007480:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007484:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007488:	53                   	push   ebx
c0007489:	e8 e4 fe ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c000748e:	83 c4 0c             	add    esp,0xc
c0007491:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007495:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007499:	53                   	push   ebx
c000749a:	e8 d3 fe ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c000749f:	83 c4 0c             	add    esp,0xc
c00074a2:	57                   	push   edi
c00074a3:	56                   	push   esi
c00074a4:	53                   	push   ebx
c00074a5:	e8 c8 fe ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c00074aa:	83 c4 0c             	add    esp,0xc
c00074ad:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00074b1:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00074b5:	53                   	push   ebx
c00074b6:	e8 b7 fe ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c00074bb:	83 c4 0c             	add    esp,0xc
c00074be:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00074c2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00074c6:	53                   	push   ebx
c00074c7:	e8 a6 fe ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c00074cc:	83 c4 0c             	add    esp,0xc
c00074cf:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00074d3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00074d7:	53                   	push   ebx
c00074d8:	e8 95 fe ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c00074dd:	83 c4 0c             	add    esp,0xc
c00074e0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00074e4:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00074e8:	53                   	push   ebx
c00074e9:	e8 84 fe ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c00074ee:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00074f1:	e8 a6 fe ff ff       	call   c000739c <GDT::flush()>
c00074f6:	83 c4 40             	add    esp,0x40
c00074f9:	5b                   	pop    ebx
c00074fa:	5e                   	pop    esi
c00074fb:	5f                   	pop    edi
c00074fc:	c3                   	ret    

c00074fd <idleFunction(void*)>:
c00074fd:	83 ec 0c             	sub    esp,0xc
c0007500:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0007505:	48                   	dec    eax
c0007506:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000750b:	75 01                	jne    c000750e <idleFunction(void*)+0x11>
c000750d:	fb                   	sti    
c000750e:	e8 c9 07 01 00       	call   c0017cdc <HalSystemIdle()>
c0007513:	e8 fa 84 01 00       	call   c001fa12 <idleCommon()>
c0007518:	eb f4                	jmp    c000750e <idleFunction(void*)+0x11>
c000751a:	66 90                	xchg   ax,ax

c000751c <IDTEntry::IDTEntry(bool)>:
c000751c:	53                   	push   ebx
c000751d:	83 ec 04             	sub    esp,0x4
c0007520:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007524:	88 04 24             	mov    BYTE PTR [esp],al
c0007527:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000752b:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c0007531:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007535:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0007539:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000753d:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007540:	83 e2 f0             	and    edx,0xfffffff0
c0007543:	83 ca 0e             	or     edx,0xe
c0007546:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007549:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000754d:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007550:	83 e2 ef             	and    edx,0xffffffef
c0007553:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007556:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c000755a:	85 c0                	test   eax,eax
c000755c:	74 06                	je     c0007564 <IDTEntry::IDTEntry(bool)+0x48>
c000755e:	b2 03                	mov    dl,0x3
c0007560:	eb 06                	jmp    c0007568 <IDTEntry::IDTEntry(bool)+0x4c>
c0007562:	66 90                	xchg   ax,ax
c0007564:	b2 00                	mov    dl,0x0
c0007566:	66 90                	xchg   ax,ax
c0007568:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000756c:	83 e2 03             	and    edx,0x3
c000756f:	89 d3                	mov    ebx,edx
c0007571:	c1 e3 05             	shl    ebx,0x5
c0007574:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007577:	83 e2 9f             	and    edx,0xffffff9f
c000757a:	88 d1                	mov    cl,dl
c000757c:	88 da                	mov    dl,bl
c000757e:	09 ca                	or     edx,ecx
c0007580:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007583:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007587:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000758a:	83 ca 80             	or     edx,0xffffff80
c000758d:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007590:	90                   	nop
c0007591:	83 c4 04             	add    esp,0x4
c0007594:	5b                   	pop    ebx
c0007595:	c3                   	ret    

c0007596 <IDTEntry::setOffset(unsigned int)>:
c0007596:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000759a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000759e:	66 89 02             	mov    WORD PTR [edx],ax
c00075a1:	c1 e8 10             	shr    eax,0x10
c00075a4:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c00075a8:	c3                   	ret    
c00075a9:	90                   	nop
c00075aa:	66 90                	xchg   ax,ax

c00075ac <IDT::IDT()>:
c00075ac:	90                   	nop
c00075ad:	c3                   	ret    

c00075ae <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c00075ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00075b2:	83 c0 30             	add    eax,0x30
c00075b5:	c3                   	ret    

c00075b6 <IDT::addEntry(IDTEntry, int)>:
c00075b6:	53                   	push   ebx
c00075b7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00075bb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00075bf:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00075c3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00075c7:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c00075ca:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c00075ce:	5b                   	pop    ebx
c00075cf:	c3                   	ret    

c00075d0 <IDT::addEntry(int, void (*)(), bool)>:
c00075d0:	53                   	push   ebx
c00075d1:	83 ec 10             	sub    esp,0x10
c00075d4:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c00075d9:	50                   	push   eax
c00075da:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c00075de:	53                   	push   ebx
c00075df:	e8 38 ff ff ff       	call   c000751c <IDTEntry::IDTEntry(bool)>
c00075e4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00075e8:	53                   	push   ebx
c00075e9:	e8 a8 ff ff ff       	call   c0007596 <IDTEntry::setOffset(unsigned int)>
c00075ee:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00075f2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00075f6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00075fa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00075fe:	e8 b3 ff ff ff       	call   c00075b6 <IDT::addEntry(IDTEntry, int)>
c0007603:	83 c4 30             	add    esp,0x30
c0007606:	5b                   	pop    ebx
c0007607:	c3                   	ret    

c0007608 <IDT::flush()>:
c0007608:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000760c:	66 c7 05 c8 6e 02 c0 ff 07 	mov    WORD PTR ds:0xc0026ec8,0x7ff
c0007615:	a3 ca 6e 02 c0       	mov    ds:0xc0026eca,eax
c000761a:	0f 01 1d c8 6e 02 c0 	lidtd  ds:0xc0026ec8
c0007621:	c3                   	ret    

c0007622 <IDT::setup()>:
c0007622:	57                   	push   edi
c0007623:	56                   	push   esi
c0007624:	53                   	push   ebx
c0007625:	83 ec 10             	sub    esp,0x10
c0007628:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000762c:	6a 00                	push   0x0
c000762e:	68 10 f1 01 c0       	push   0xc001f110
c0007633:	6a 00                	push   0x0
c0007635:	53                   	push   ebx
c0007636:	e8 95 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000763b:	6a 00                	push   0x0
c000763d:	68 20 f1 01 c0       	push   0xc001f120
c0007642:	6a 01                	push   0x1
c0007644:	53                   	push   ebx
c0007645:	e8 86 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000764a:	83 c4 20             	add    esp,0x20
c000764d:	6a 00                	push   0x0
c000764f:	68 2a f1 01 c0       	push   0xc001f12a
c0007654:	6a 02                	push   0x2
c0007656:	53                   	push   ebx
c0007657:	e8 74 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000765c:	6a 00                	push   0x0
c000765e:	68 34 f1 01 c0       	push   0xc001f134
c0007663:	6a 03                	push   0x3
c0007665:	53                   	push   ebx
c0007666:	e8 65 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000766b:	83 c4 20             	add    esp,0x20
c000766e:	6a 00                	push   0x0
c0007670:	68 3e f1 01 c0       	push   0xc001f13e
c0007675:	6a 04                	push   0x4
c0007677:	53                   	push   ebx
c0007678:	e8 53 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000767d:	6a 00                	push   0x0
c000767f:	68 48 f1 01 c0       	push   0xc001f148
c0007684:	6a 05                	push   0x5
c0007686:	53                   	push   ebx
c0007687:	e8 44 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000768c:	83 c4 20             	add    esp,0x20
c000768f:	6a 00                	push   0x0
c0007691:	68 52 f1 01 c0       	push   0xc001f152
c0007696:	6a 06                	push   0x6
c0007698:	53                   	push   ebx
c0007699:	e8 32 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000769e:	6a 00                	push   0x0
c00076a0:	68 5c f1 01 c0       	push   0xc001f15c
c00076a5:	6a 07                	push   0x7
c00076a7:	53                   	push   ebx
c00076a8:	e8 23 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00076ad:	83 c4 20             	add    esp,0x20
c00076b0:	6a 00                	push   0x0
c00076b2:	68 66 f1 01 c0       	push   0xc001f166
c00076b7:	6a 08                	push   0x8
c00076b9:	53                   	push   ebx
c00076ba:	e8 11 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00076bf:	6a 00                	push   0x0
c00076c1:	68 6e f1 01 c0       	push   0xc001f16e
c00076c6:	6a 09                	push   0x9
c00076c8:	53                   	push   ebx
c00076c9:	e8 02 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00076ce:	83 c4 20             	add    esp,0x20
c00076d1:	6a 00                	push   0x0
c00076d3:	68 78 f1 01 c0       	push   0xc001f178
c00076d8:	6a 0a                	push   0xa
c00076da:	53                   	push   ebx
c00076db:	e8 f0 fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00076e0:	6a 00                	push   0x0
c00076e2:	68 80 f1 01 c0       	push   0xc001f180
c00076e7:	6a 0b                	push   0xb
c00076e9:	53                   	push   ebx
c00076ea:	e8 e1 fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00076ef:	83 c4 20             	add    esp,0x20
c00076f2:	6a 00                	push   0x0
c00076f4:	68 88 f1 01 c0       	push   0xc001f188
c00076f9:	6a 0c                	push   0xc
c00076fb:	53                   	push   ebx
c00076fc:	e8 cf fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007701:	6a 00                	push   0x0
c0007703:	68 90 f1 01 c0       	push   0xc001f190
c0007708:	6a 0d                	push   0xd
c000770a:	53                   	push   ebx
c000770b:	e8 c0 fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007710:	83 c4 20             	add    esp,0x20
c0007713:	6a 00                	push   0x0
c0007715:	68 aa f1 01 c0       	push   0xc001f1aa
c000771a:	6a 0e                	push   0xe
c000771c:	53                   	push   ebx
c000771d:	e8 ae fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007722:	6a 00                	push   0x0
c0007724:	68 b2 f1 01 c0       	push   0xc001f1b2
c0007729:	6a 0f                	push   0xf
c000772b:	53                   	push   ebx
c000772c:	e8 9f fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007731:	83 c4 20             	add    esp,0x20
c0007734:	6a 00                	push   0x0
c0007736:	68 bc f1 01 c0       	push   0xc001f1bc
c000773b:	6a 10                	push   0x10
c000773d:	53                   	push   ebx
c000773e:	e8 8d fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007743:	6a 00                	push   0x0
c0007745:	68 c6 f1 01 c0       	push   0xc001f1c6
c000774a:	6a 11                	push   0x11
c000774c:	53                   	push   ebx
c000774d:	e8 7e fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007752:	83 c4 20             	add    esp,0x20
c0007755:	6a 00                	push   0x0
c0007757:	68 d0 f1 01 c0       	push   0xc001f1d0
c000775c:	6a 12                	push   0x12
c000775e:	53                   	push   ebx
c000775f:	e8 6c fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007764:	6a 01                	push   0x1
c0007766:	68 6a f2 01 c0       	push   0xc001f26a
c000776b:	6a 60                	push   0x60
c000776d:	53                   	push   ebx
c000776e:	e8 5d fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007773:	83 c4 20             	add    esp,0x20
c0007776:	6a 00                	push   0x0
c0007778:	68 71 f2 01 c0       	push   0xc001f271
c000777d:	6a 20                	push   0x20
c000777f:	53                   	push   ebx
c0007780:	e8 4b fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007785:	6a 00                	push   0x0
c0007787:	68 5c f2 01 c0       	push   0xc001f25c
c000778c:	6a 21                	push   0x21
c000778e:	53                   	push   ebx
c000778f:	e8 3c fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007794:	83 c4 20             	add    esp,0x20
c0007797:	6a 00                	push   0x0
c0007799:	68 63 f2 01 c0       	push   0xc001f263
c000779e:	6a 22                	push   0x22
c00077a0:	53                   	push   ebx
c00077a1:	e8 2a fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00077a6:	6a 00                	push   0x0
c00077a8:	68 da f1 01 c0       	push   0xc001f1da
c00077ad:	6a 23                	push   0x23
c00077af:	53                   	push   ebx
c00077b0:	e8 1b fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00077b5:	83 c4 20             	add    esp,0x20
c00077b8:	6a 00                	push   0x0
c00077ba:	68 e4 f1 01 c0       	push   0xc001f1e4
c00077bf:	6a 24                	push   0x24
c00077c1:	53                   	push   ebx
c00077c2:	e8 09 fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00077c7:	6a 00                	push   0x0
c00077c9:	68 ee f1 01 c0       	push   0xc001f1ee
c00077ce:	6a 25                	push   0x25
c00077d0:	53                   	push   ebx
c00077d1:	e8 fa fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00077d6:	83 c4 20             	add    esp,0x20
c00077d9:	6a 00                	push   0x0
c00077db:	68 f8 f1 01 c0       	push   0xc001f1f8
c00077e0:	6a 26                	push   0x26
c00077e2:	53                   	push   ebx
c00077e3:	e8 e8 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00077e8:	6a 00                	push   0x0
c00077ea:	68 02 f2 01 c0       	push   0xc001f202
c00077ef:	6a 27                	push   0x27
c00077f1:	53                   	push   ebx
c00077f2:	e8 d9 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00077f7:	83 c4 20             	add    esp,0x20
c00077fa:	6a 00                	push   0x0
c00077fc:	68 0c f2 01 c0       	push   0xc001f20c
c0007801:	6a 28                	push   0x28
c0007803:	53                   	push   ebx
c0007804:	e8 c7 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007809:	6a 00                	push   0x0
c000780b:	68 16 f2 01 c0       	push   0xc001f216
c0007810:	6a 29                	push   0x29
c0007812:	53                   	push   ebx
c0007813:	e8 b8 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007818:	83 c4 20             	add    esp,0x20
c000781b:	6a 00                	push   0x0
c000781d:	68 20 f2 01 c0       	push   0xc001f220
c0007822:	6a 2a                	push   0x2a
c0007824:	53                   	push   ebx
c0007825:	e8 a6 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000782a:	6a 00                	push   0x0
c000782c:	68 2a f2 01 c0       	push   0xc001f22a
c0007831:	6a 2b                	push   0x2b
c0007833:	53                   	push   ebx
c0007834:	e8 97 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007839:	83 c4 20             	add    esp,0x20
c000783c:	6a 00                	push   0x0
c000783e:	68 34 f2 01 c0       	push   0xc001f234
c0007843:	6a 2c                	push   0x2c
c0007845:	53                   	push   ebx
c0007846:	e8 85 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000784b:	6a 00                	push   0x0
c000784d:	68 3e f2 01 c0       	push   0xc001f23e
c0007852:	6a 2d                	push   0x2d
c0007854:	53                   	push   ebx
c0007855:	e8 76 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000785a:	83 c4 20             	add    esp,0x20
c000785d:	6a 00                	push   0x0
c000785f:	68 48 f2 01 c0       	push   0xc001f248
c0007864:	6a 2e                	push   0x2e
c0007866:	53                   	push   ebx
c0007867:	e8 64 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000786c:	6a 00                	push   0x0
c000786e:	68 52 f2 01 c0       	push   0xc001f252
c0007873:	6a 2f                	push   0x2f
c0007875:	53                   	push   ebx
c0007876:	e8 55 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000787b:	83 c4 20             	add    esp,0x20
c000787e:	6a 00                	push   0x0
c0007880:	68 ac f3 01 c0       	push   0xc001f3ac
c0007885:	6a 30                	push   0x30
c0007887:	53                   	push   ebx
c0007888:	e8 43 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000788d:	6a 00                	push   0x0
c000788f:	68 b6 f3 01 c0       	push   0xc001f3b6
c0007894:	6a 31                	push   0x31
c0007896:	53                   	push   ebx
c0007897:	e8 34 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000789c:	83 c4 20             	add    esp,0x20
c000789f:	6a 00                	push   0x0
c00078a1:	68 c0 f3 01 c0       	push   0xc001f3c0
c00078a6:	6a 32                	push   0x32
c00078a8:	53                   	push   ebx
c00078a9:	e8 22 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00078ae:	6a 00                	push   0x0
c00078b0:	68 ca f3 01 c0       	push   0xc001f3ca
c00078b5:	6a 33                	push   0x33
c00078b7:	53                   	push   ebx
c00078b8:	e8 13 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00078bd:	83 c4 20             	add    esp,0x20
c00078c0:	6a 00                	push   0x0
c00078c2:	68 d4 f3 01 c0       	push   0xc001f3d4
c00078c7:	6a 34                	push   0x34
c00078c9:	53                   	push   ebx
c00078ca:	e8 01 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00078cf:	6a 00                	push   0x0
c00078d1:	68 de f3 01 c0       	push   0xc001f3de
c00078d6:	6a 35                	push   0x35
c00078d8:	53                   	push   ebx
c00078d9:	e8 f2 fc ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00078de:	83 c4 20             	add    esp,0x20
c00078e1:	6a 00                	push   0x0
c00078e3:	68 e8 f3 01 c0       	push   0xc001f3e8
c00078e8:	6a 36                	push   0x36
c00078ea:	53                   	push   ebx
c00078eb:	e8 e0 fc ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00078f0:	6a 00                	push   0x0
c00078f2:	68 f2 f3 01 c0       	push   0xc001f3f2
c00078f7:	6a 37                	push   0x37
c00078f9:	53                   	push   ebx
c00078fa:	e8 d1 fc ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00078ff:	83 c4 1c             	add    esp,0x1c
c0007902:	6a 03                	push   0x3
c0007904:	6a 02                	push   0x2
c0007906:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c000790c:	e8 13 25 00 00       	call   c0009e24 <VAS::allocatePages(int, int)>
c0007911:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0007918:	89 c6                	mov    esi,eax
c000791a:	e8 97 01 00 00       	call   c0007ab6 <malloc>
c000791f:	81 c6 00 20 00 00    	add    esi,0x2000
c0007925:	89 04 24             	mov    DWORD PTR [esp],eax
c0007928:	89 c7                	mov    edi,eax
c000792a:	e8 15 16 00 00       	call   c0008f44 <TSS::TSS()>
c000792f:	83 c4 0c             	add    esp,0xc
c0007932:	68 66 f1 01 c0       	push   0xc001f166
c0007937:	56                   	push   esi
c0007938:	57                   	push   edi
c0007939:	e8 4a 16 00 00       	call   c0008f88 <TSS::setup(unsigned long, unsigned long)>
c000793e:	89 c6                	mov    esi,eax
c0007940:	58                   	pop    eax
c0007941:	5a                   	pop    edx
c0007942:	6a 00                	push   0x0
c0007944:	8d 44 24 14          	lea    eax,[esp+0x14]
c0007948:	50                   	push   eax
c0007949:	e8 ce fb ff ff       	call   c000751c <IDTEntry::IDTEntry(bool)>
c000794e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007952:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0007957:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000795e:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c0007964:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007968:	80 ce 05             	or     dh,0x5
c000796b:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000796e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007972:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007976:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0007979:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000797c:	e8 87 fc ff ff       	call   c0007608 <IDT::flush()>
c0007981:	83 c4 20             	add    esp,0x20
c0007984:	5b                   	pop    ebx
c0007985:	5e                   	pop    esi
c0007986:	5f                   	pop    edi
c0007987:	c3                   	ret    

c0007988 <sbrk>:
c0007988:	55                   	push   ebp
c0007989:	57                   	push   edi
c000798a:	56                   	push   esi
c000798b:	53                   	push   ebx
c000798c:	83 ec 1c             	sub    esp,0x1c
c000798f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007993:	85 c0                	test   eax,eax
c0007995:	74 61                	je     c00079f8 <sbrk+0x70>
c0007997:	78 66                	js     c00079ff <sbrk+0x77>
c0007999:	8b 15 d4 36 02 c0    	mov    edx,DWORD PTR ds:0xc00236d4
c000799f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00079a3:	05 ff 0f 00 00       	add    eax,0xfff
c00079a8:	89 c5                	mov    ebp,eax
c00079aa:	78 6b                	js     c0007a17 <sbrk+0x8f>
c00079ac:	c1 fd 0c             	sar    ebp,0xc
c00079af:	bb 00 00 00 00       	mov    ebx,0x0
c00079b4:	8b 35 b0 6f 02 c0    	mov    esi,DWORD PTR ds:0xc0026fb0
c00079ba:	8b 3d d4 36 02 c0    	mov    edi,DWORD PTR ds:0xc00236d4
c00079c0:	e8 fa 03 00 00       	call   c0007dbf <Phys::allocatePage()>
c00079c5:	68 01 04 00 00       	push   0x401
c00079ca:	57                   	push   edi
c00079cb:	50                   	push   eax
c00079cc:	56                   	push   esi
c00079cd:	e8 4e 23 00 00       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c00079d2:	81 05 d4 36 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc00236d4,0x1000
c00079dc:	83 c3 01             	add    ebx,0x1
c00079df:	83 c4 10             	add    esp,0x10
c00079e2:	39 dd                	cmp    ebp,ebx
c00079e4:	75 ce                	jne    c00079b4 <sbrk+0x2c>
c00079e6:	0f 20 d8             	mov    eax,cr3
c00079e9:	0f 22 d8             	mov    cr3,eax
c00079ec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00079f0:	83 c4 1c             	add    esp,0x1c
c00079f3:	5b                   	pop    ebx
c00079f4:	5e                   	pop    esi
c00079f5:	5f                   	pop    edi
c00079f6:	5d                   	pop    ebp
c00079f7:	c3                   	ret    
c00079f8:	a1 d4 36 02 c0       	mov    eax,ds:0xc00236d4
c00079fd:	eb f1                	jmp    c00079f0 <sbrk+0x68>
c00079ff:	83 ec 08             	sub    esp,0x8
c0007a02:	50                   	push   eax
c0007a03:	68 f8 0c 02 c0       	push   0xc0020cf8
c0007a08:	e8 38 2f 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0007a0d:	83 c4 10             	add    esp,0x10
c0007a10:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0007a15:	eb d9                	jmp    c00079f0 <sbrk+0x68>
c0007a17:	8d a8 ff 0f 00 00    	lea    ebp,[eax+0xfff]
c0007a1d:	eb 8d                	jmp    c00079ac <sbrk+0x24>

c0007a1f <mmap>:
c0007a1f:	83 ec 18             	sub    esp,0x18
c0007a22:	68 28 0d 02 c0       	push   0xc0020d28
c0007a27:	e8 67 9c 00 00       	call   c0011693 <KePanic(char const*)>
c0007a2c:	b8 00 00 00 00       	mov    eax,0x0
c0007a31:	83 c4 1c             	add    esp,0x1c
c0007a34:	c3                   	ret    

c0007a35 <munmap>:
c0007a35:	83 ec 18             	sub    esp,0x18
c0007a38:	68 2d 0d 02 c0       	push   0xc0020d2d
c0007a3d:	e8 51 9c 00 00       	call   c0011693 <KePanic(char const*)>
c0007a42:	b8 00 00 00 00       	mov    eax,0x0
c0007a47:	83 c4 1c             	add    esp,0x1c
c0007a4a:	c3                   	ret    

c0007a4b <liballoc_lock()>:
c0007a4b:	fa                   	cli    
c0007a4c:	83 05 c8 c6 02 c0 01 	add    DWORD PTR ds:0xc002c6c8,0x1
c0007a53:	b8 00 00 00 00       	mov    eax,0x0
c0007a58:	c3                   	ret    

c0007a59 <liballoc_unlock()>:
c0007a59:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0007a5e:	83 e8 01             	sub    eax,0x1
c0007a61:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0007a66:	75 01                	jne    c0007a69 <liballoc_unlock()+0x10>
c0007a68:	fb                   	sti    
c0007a69:	b8 00 00 00 00       	mov    eax,0x0
c0007a6e:	c3                   	ret    

c0007a6f <liballoc_alloc(int)>:
c0007a6f:	83 ec 10             	sub    esp,0x10
c0007a72:	6a 01                	push   0x1
c0007a74:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007a78:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c0007a7e:	e8 a1 23 00 00       	call   c0009e24 <VAS::allocatePages(int, int)>
c0007a83:	83 c4 1c             	add    esp,0x1c
c0007a86:	c3                   	ret    

c0007a87 <liballoc_free(void*, int)>:
c0007a87:	83 ec 14             	sub    esp,0x14
c0007a8a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007a8e:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c0007a94:	e8 cf 1f 00 00       	call   c0009a68 <VAS::freeAllocatedPages(unsigned long)>
c0007a99:	b8 00 00 00 00       	mov    eax,0x0
c0007a9e:	83 c4 1c             	add    esp,0x1c
c0007aa1:	c3                   	ret    

c0007aa2 <realloc>:
c0007aa2:	83 ec 14             	sub    esp,0x14
c0007aa5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007aa9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007aad:	e8 36 9b ff ff       	call   c00015e8 <dlrealloc>
c0007ab2:	83 c4 1c             	add    esp,0x1c
c0007ab5:	c3                   	ret    

c0007ab6 <malloc>:
c0007ab6:	83 ec 18             	sub    esp,0x18
c0007ab9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007abd:	e8 e9 95 ff ff       	call   c00010ab <dlmalloc>
c0007ac2:	83 c4 1c             	add    esp,0x1c
c0007ac5:	c3                   	ret    

c0007ac6 <free>:
c0007ac6:	83 ec 18             	sub    esp,0x18
c0007ac9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007acd:	e8 81 92 ff ff       	call   c0000d53 <dlfree>
c0007ad2:	83 c4 1c             	add    esp,0x1c
c0007ad5:	c3                   	ret    

c0007ad6 <rfree>:
c0007ad6:	83 ec 18             	sub    esp,0x18
c0007ad9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007add:	e8 71 92 ff ff       	call   c0000d53 <dlfree>
c0007ae2:	83 c4 1c             	add    esp,0x1c
c0007ae5:	c3                   	ret    

c0007ae6 <calloc>:
c0007ae6:	56                   	push   esi
c0007ae7:	53                   	push   ebx
c0007ae8:	83 ec 10             	sub    esp,0x10
c0007aeb:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007aef:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c0007af4:	53                   	push   ebx
c0007af5:	e8 bc ff ff ff       	call   c0007ab6 <malloc>
c0007afa:	89 c6                	mov    esi,eax
c0007afc:	83 c4 0c             	add    esp,0xc
c0007aff:	53                   	push   ebx
c0007b00:	6a 00                	push   0x0
c0007b02:	50                   	push   eax
c0007b03:	e8 e8 89 ff ff       	call   c00004f0 <memset>
c0007b08:	89 f0                	mov    eax,esi
c0007b0a:	83 c4 14             	add    esp,0x14
c0007b0d:	5b                   	pop    ebx
c0007b0e:	5e                   	pop    esi
c0007b0f:	c3                   	ret    

c0007b10 <KeEntryPoint>:
c0007b10:	57                   	push   edi
c0007b11:	bf f9 03 00 00       	mov    edi,0x3f9
c0007b16:	56                   	push   esi
c0007b17:	89 fa                	mov    edx,edi
c0007b19:	53                   	push   ebx
c0007b1a:	31 f6                	xor    esi,esi
c0007b1c:	83 ec 2c             	sub    esp,0x2c
c0007b1f:	a1 00 05 00 00       	mov    eax,ds:0x500
c0007b24:	a3 d0 6e 02 c0       	mov    ds:0xc0026ed0,eax
c0007b29:	89 f0                	mov    eax,esi
c0007b2b:	ee                   	out    dx,al
c0007b2c:	bb fb 03 00 00       	mov    ebx,0x3fb
c0007b31:	b0 80                	mov    al,0x80
c0007b33:	89 da                	mov    edx,ebx
c0007b35:	ee                   	out    dx,al
c0007b36:	b1 03                	mov    cl,0x3
c0007b38:	ba f8 03 00 00       	mov    edx,0x3f8
c0007b3d:	88 c8                	mov    al,cl
c0007b3f:	ee                   	out    dx,al
c0007b40:	89 f0                	mov    eax,esi
c0007b42:	89 fa                	mov    edx,edi
c0007b44:	ee                   	out    dx,al
c0007b45:	88 c8                	mov    al,cl
c0007b47:	89 da                	mov    edx,ebx
c0007b49:	ee                   	out    dx,al
c0007b4a:	b0 c7                	mov    al,0xc7
c0007b4c:	ba fa 03 00 00       	mov    edx,0x3fa
c0007b51:	ee                   	out    dx,al
c0007b52:	b0 0b                	mov    al,0xb
c0007b54:	ba fc 03 00 00       	mov    edx,0x3fc
c0007b59:	ee                   	out    dx,al
c0007b5a:	68 34 0d 02 c0       	push   0xc0020d34
c0007b5f:	e8 e1 2d 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0007b64:	e8 ae 93 00 00       	call   c0010f17 <KeDisplaySplashScreen()>
c0007b69:	a1 24 05 00 00       	mov    eax,ds:0x524
c0007b6e:	05 ff 0f 00 00       	add    eax,0xfff
c0007b73:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007b78:	89 04 24             	mov    DWORD PTR [esp],eax
c0007b7b:	e8 ad 03 00 00       	call   c0007f2d <Phys::physicalMemorySetup(unsigned int)>
c0007b80:	e8 66 1c 00 00       	call   c00097eb <Virt::virtualMemorySetup()>
c0007b85:	e8 d7 92 00 00       	call   c0010e61 <KeInitialiseAtexit()>
c0007b8a:	58                   	pop    eax
c0007b8b:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c0007b8f:	53                   	push   ebx
c0007b90:	e8 53 1f 00 00       	call   c0009ae8 <VAS::VAS()>
c0007b95:	89 1d b0 6f 02 c0    	mov    DWORD PTR ds:0xc0026fb0,ebx
c0007b9b:	e8 0a 7e 01 00       	call   c001f9aa <_init>
c0007ba0:	c7 04 24 70 01 00 00 	mov    DWORD PTR [esp],0x170
c0007ba7:	e8 0a ff ff ff       	call   c0007ab6 <malloc>
c0007bac:	89 04 24             	mov    DWORD PTR [esp],eax
c0007baf:	89 c6                	mov    esi,eax
c0007bb1:	e8 30 f2 ff ff       	call   c0006de6 <Computer::Computer()>
c0007bb6:	53                   	push   ebx
c0007bb7:	89 35 b8 6e 02 c0    	mov    DWORD PTR ds:0xc0026eb8,esi
c0007bbd:	6a 00                	push   0x0
c0007bbf:	6a 00                	push   0x0
c0007bc1:	56                   	push   esi
c0007bc2:	e8 e7 f5 ff ff       	call   c00071ae <Computer::open(int, int, void*)>
c0007bc7:	83 c4 14             	add    esp,0x14
c0007bca:	53                   	push   ebx
c0007bcb:	e8 e2 1f 00 00       	call   c0009bb2 <VAS::~VAS()>
c0007bd0:	83 c4 30             	add    esp,0x30
c0007bd3:	5b                   	pop    ebx
c0007bd4:	5e                   	pop    esi
c0007bd5:	5f                   	pop    edi
c0007bd6:	c3                   	ret    

c0007bd7 <Phys::allocateDMA(unsigned long)>:
c0007bd7:	55                   	push   ebp
c0007bd8:	31 ed                	xor    ebp,ebp
c0007bda:	57                   	push   edi
c0007bdb:	56                   	push   esi
c0007bdc:	53                   	push   ebx
c0007bdd:	31 db                	xor    ebx,ebx
c0007bdf:	83 ec 1c             	sub    esp,0x1c
c0007be2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007be6:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0007bee:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c0007bf4:	31 c0                	xor    eax,eax
c0007bf6:	c1 ef 0c             	shr    edi,0xc
c0007bf9:	eb 1b                	jmp    c0007c16 <Phys::allocateDMA(unsigned long)+0x3f>
c0007bfb:	85 c0                	test   eax,eax
c0007bfd:	75 06                	jne    c0007c05 <Phys::allocateDMA(unsigned long)+0x2e>
c0007bff:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007c03:	89 dd                	mov    ebp,ebx
c0007c05:	8d 70 01             	lea    esi,[eax+0x1]
c0007c08:	39 f7                	cmp    edi,esi
c0007c0a:	74 37                	je     c0007c43 <Phys::allocateDMA(unsigned long)+0x6c>
c0007c0c:	89 f0                	mov    eax,esi
c0007c0e:	83 c3 01             	add    ebx,0x1
c0007c11:	83 fb 0f             	cmp    ebx,0xf
c0007c14:	7f 13                	jg     c0007c29 <Phys::allocateDMA(unsigned long)+0x52>
c0007c16:	80 bb ec 6e 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffd9114],0x0
c0007c1d:	74 dc                	je     c0007bfb <Phys::allocateDMA(unsigned long)+0x24>
c0007c1f:	31 c0                	xor    eax,eax
c0007c21:	83 c3 01             	add    ebx,0x1
c0007c24:	83 fb 0f             	cmp    ebx,0xf
c0007c27:	7e ed                	jle    c0007c16 <Phys::allocateDMA(unsigned long)+0x3f>
c0007c29:	83 ec 0c             	sub    esp,0xc
c0007c2c:	68 4c 0d 02 c0       	push   0xc0020d4c
c0007c31:	e8 5d 9a 00 00       	call   c0011693 <KePanic(char const*)>
c0007c36:	83 c4 10             	add    esp,0x10
c0007c39:	31 c0                	xor    eax,eax
c0007c3b:	83 c4 1c             	add    esp,0x1c
c0007c3e:	5b                   	pop    ebx
c0007c3f:	5e                   	pop    esi
c0007c40:	5f                   	pop    edi
c0007c41:	5d                   	pop    ebp
c0007c42:	c3                   	ret    
c0007c43:	89 e9                	mov    ecx,ebp
c0007c45:	c1 f9 04             	sar    ecx,0x4
c0007c48:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007c4c:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c0007c50:	89 ca                	mov    edx,ecx
c0007c52:	83 ea 01             	sub    edx,0x1
c0007c55:	79 03                	jns    c0007c5a <Phys::allocateDMA(unsigned long)+0x83>
c0007c57:	8d 51 0e             	lea    edx,[ecx+0xe]
c0007c5a:	c1 fa 04             	sar    edx,0x4
c0007c5d:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c0007c61:	74 08                	je     c0007c6b <Phys::allocateDMA(unsigned long)+0x94>
c0007c63:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007c67:	31 c0                	xor    eax,eax
c0007c69:	eb b6                	jmp    c0007c21 <Phys::allocateDMA(unsigned long)+0x4a>
c0007c6b:	85 f6                	test   esi,esi
c0007c6d:	74 17                	je     c0007c86 <Phys::allocateDMA(unsigned long)+0xaf>
c0007c6f:	8d 95 ec 6e 02 c0    	lea    edx,[ebp-0x3ffd9114]
c0007c75:	8d 84 05 ed 6e 02 c0 	lea    eax,[ebp+eax*1-0x3ffd9113]
c0007c7c:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0007c7f:	83 c2 01             	add    edx,0x1
c0007c82:	39 d0                	cmp    eax,edx
c0007c84:	75 f6                	jne    c0007c7c <Phys::allocateDMA(unsigned long)+0xa5>
c0007c86:	a1 e4 6e 02 c0       	mov    eax,ds:0xc0026ee4
c0007c8b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007c8f:	01 f8                	add    eax,edi
c0007c91:	85 d2                	test   edx,edx
c0007c93:	a3 e4 6e 02 c0       	mov    ds:0xc0026ee4,eax
c0007c98:	74 17                	je     c0007cb1 <Phys::allocateDMA(unsigned long)+0xda>
c0007c9a:	83 ec 0c             	sub    esp,0xc
c0007c9d:	68 4c 0d 02 c0       	push   0xc0020d4c
c0007ca2:	e8 ec 99 00 00       	call   c0011693 <KePanic(char const*)>
c0007ca7:	83 c4 10             	add    esp,0x10
c0007caa:	89 f0                	mov    eax,esi
c0007cac:	e9 5d ff ff ff       	jmp    c0007c0e <Phys::allocateDMA(unsigned long)+0x37>
c0007cb1:	c1 e5 0c             	shl    ebp,0xc
c0007cb4:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c0007cba:	e9 7c ff ff ff       	jmp    c0007c3b <Phys::allocateDMA(unsigned long)+0x64>

c0007cbf <Phys::freeDMA(unsigned long, unsigned long)>:
c0007cbf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007cc3:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c0007cc9:	a1 e4 6e 02 c0       	mov    eax,ds:0xc0026ee4
c0007cce:	c1 ea 0c             	shr    edx,0xc
c0007cd1:	29 d0                	sub    eax,edx
c0007cd3:	a3 e4 6e 02 c0       	mov    ds:0xc0026ee4,eax
c0007cd8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007cdc:	05 00 00 ff 3d       	add    eax,0x3dff0000
c0007ce1:	c1 e8 0c             	shr    eax,0xc
c0007ce4:	85 d2                	test   edx,edx
c0007ce6:	74 11                	je     c0007cf9 <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c0007ce8:	05 ec 6e 02 c0       	add    eax,0xc0026eec
c0007ced:	01 c2                	add    edx,eax
c0007cef:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0007cf2:	83 c0 01             	add    eax,0x1
c0007cf5:	39 d0                	cmp    eax,edx
c0007cf7:	75 f6                	jne    c0007cef <Phys::freeDMA(unsigned long, unsigned long)+0x30>
c0007cf9:	c3                   	ret    

c0007cfa <Phys::setPageState(unsigned long, bool)>:
c0007cfa:	57                   	push   edi
c0007cfb:	56                   	push   esi
c0007cfc:	8b 35 d8 36 02 c0    	mov    esi,DWORD PTR ds:0xc00236d8
c0007d02:	53                   	push   ebx
c0007d03:	bb fe ff ff ff       	mov    ebx,0xfffffffe
c0007d08:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007d0c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0007d10:	0f b6 c0             	movzx  eax,al
c0007d13:	89 ca                	mov    edx,ecx
c0007d15:	83 e1 07             	and    ecx,0x7
c0007d18:	c1 ea 03             	shr    edx,0x3
c0007d1b:	d3 c3                	rol    ebx,cl
c0007d1d:	01 d6                	add    esi,edx
c0007d1f:	d3 e0                	shl    eax,cl
c0007d21:	0f b6 3e             	movzx  edi,BYTE PTR [esi]
c0007d24:	21 fb                	and    ebx,edi
c0007d26:	88 1e                	mov    BYTE PTR [esi],bl
c0007d28:	8b 1d d8 36 02 c0    	mov    ebx,DWORD PTR ds:0xc00236d8
c0007d2e:	01 da                	add    edx,ebx
c0007d30:	8a 0a                	mov    cl,BYTE PTR [edx]
c0007d32:	09 c8                	or     eax,ecx
c0007d34:	88 02                	mov    BYTE PTR [edx],al
c0007d36:	5b                   	pop    ebx
c0007d37:	5e                   	pop    esi
c0007d38:	5f                   	pop    edi
c0007d39:	c3                   	ret    

c0007d3a <Phys::getPageState(unsigned long)>:
c0007d3a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007d3e:	8b 15 d8 36 02 c0    	mov    edx,DWORD PTR ds:0xc00236d8
c0007d44:	89 c8                	mov    eax,ecx
c0007d46:	83 e1 07             	and    ecx,0x7
c0007d49:	c1 e8 03             	shr    eax,0x3
c0007d4c:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c0007d50:	d3 f8                	sar    eax,cl
c0007d52:	83 e0 01             	and    eax,0x1
c0007d55:	c3                   	ret    

c0007d56 <Phys::freePage(unsigned long)>:
c0007d56:	53                   	push   ebx
c0007d57:	83 ec 08             	sub    esp,0x8
c0007d5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d5e:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c0007d64:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0007d6a:	76 41                	jbe    c0007dad <Phys::freePage(unsigned long)+0x57>
c0007d6c:	c1 e8 0c             	shr    eax,0xc
c0007d6f:	50                   	push   eax
c0007d70:	89 c3                	mov    ebx,eax
c0007d72:	e8 c3 ff ff ff       	call   c0007d3a <Phys::getPageState(unsigned long)>
c0007d77:	5a                   	pop    edx
c0007d78:	84 c0                	test   al,al
c0007d7a:	74 20                	je     c0007d9c <Phys::freePage(unsigned long)+0x46>
c0007d7c:	83 ec 08             	sub    esp,0x8
c0007d7f:	a1 e4 6e 02 c0       	mov    eax,ds:0xc0026ee4
c0007d84:	6a 00                	push   0x0
c0007d86:	83 e8 01             	sub    eax,0x1
c0007d89:	53                   	push   ebx
c0007d8a:	a3 e4 6e 02 c0       	mov    ds:0xc0026ee4,eax
c0007d8f:	e8 66 ff ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0007d94:	83 c4 10             	add    esp,0x10
c0007d97:	83 c4 08             	add    esp,0x8
c0007d9a:	5b                   	pop    ebx
c0007d9b:	c3                   	ret    
c0007d9c:	c7 44 24 10 f1 0d 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020df1
c0007da4:	83 c4 08             	add    esp,0x8
c0007da7:	5b                   	pop    ebx
c0007da8:	e9 e6 98 00 00       	jmp    c0011693 <KePanic(char const*)>
c0007dad:	68 00 10 00 00       	push   0x1000
c0007db2:	50                   	push   eax
c0007db3:	e8 07 ff ff ff       	call   c0007cbf <Phys::freeDMA(unsigned long, unsigned long)>
c0007db8:	59                   	pop    ecx
c0007db9:	5b                   	pop    ebx
c0007dba:	83 c4 08             	add    esp,0x8
c0007dbd:	5b                   	pop    ebx
c0007dbe:	c3                   	ret    

c0007dbf <Phys::allocatePage()>:
c0007dbf:	56                   	push   esi
c0007dc0:	53                   	push   ebx
c0007dc1:	83 ec 14             	sub    esp,0x14
c0007dc4:	8b 35 d8 6e 02 c0    	mov    esi,DWORD PTR ds:0xc0026ed8
c0007dca:	89 f3                	mov    ebx,esi
c0007dcc:	eb 0a                	jmp    c0007dd8 <Phys::allocatePage()+0x19>
c0007dce:	89 1d d8 6e 02 c0    	mov    DWORD PTR ds:0xc0026ed8,ebx
c0007dd4:	39 de                	cmp    esi,ebx
c0007dd6:	74 26                	je     c0007dfe <Phys::allocatePage()+0x3f>
c0007dd8:	53                   	push   ebx
c0007dd9:	e8 5c ff ff ff       	call   c0007d3a <Phys::getPageState(unsigned long)>
c0007dde:	5a                   	pop    edx
c0007ddf:	84 c0                	test   al,al
c0007de1:	74 67                	je     c0007e4a <Phys::allocatePage()+0x8b>
c0007de3:	83 c3 01             	add    ebx,0x1
c0007de6:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007dec:	75 e0                	jne    c0007dce <Phys::allocatePage()+0xf>
c0007dee:	31 db                	xor    ebx,ebx
c0007df0:	c7 05 d8 6e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026ed8,0x0
c0007dfa:	39 de                	cmp    esi,ebx
c0007dfc:	75 da                	jne    c0007dd8 <Phys::allocatePage()+0x19>
c0007dfe:	83 ec 0c             	sub    esp,0xc
c0007e01:	a0 fc 6e 02 c0       	mov    al,ds:0xc0026efc
c0007e06:	83 f0 01             	xor    eax,0x1
c0007e09:	a2 fc 6e 02 c0       	mov    ds:0xc0026efc,al
c0007e0e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0007e13:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0007e16:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0007e1c:	50                   	push   eax
c0007e1d:	e8 a8 27 00 00       	call   c000a5ca <VAS::scanForEviction()>
c0007e22:	83 c4 10             	add    esp,0x10
c0007e25:	85 c0                	test   eax,eax
c0007e27:	75 48                	jne    c0007e71 <Phys::allocatePage()+0xb2>
c0007e29:	83 ec 0c             	sub    esp,0xc
c0007e2c:	68 74 0d 02 c0       	push   0xc0020d74
c0007e31:	e8 5d 98 00 00       	call   c0011693 <KePanic(char const*)>
c0007e36:	83 c4 10             	add    esp,0x10
c0007e39:	8b 1d d8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026ed8
c0007e3f:	53                   	push   ebx
c0007e40:	e8 f5 fe ff ff       	call   c0007d3a <Phys::getPageState(unsigned long)>
c0007e45:	5a                   	pop    edx
c0007e46:	84 c0                	test   al,al
c0007e48:	75 99                	jne    c0007de3 <Phys::allocatePage()+0x24>
c0007e4a:	6a 01                	push   0x1
c0007e4c:	53                   	push   ebx
c0007e4d:	e8 a8 fe ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0007e52:	8b 15 e4 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026ee4
c0007e58:	a1 d8 6e 02 c0       	mov    eax,ds:0xc0026ed8
c0007e5d:	83 c2 01             	add    edx,0x1
c0007e60:	59                   	pop    ecx
c0007e61:	89 15 e4 6e 02 c0    	mov    DWORD PTR ds:0xc0026ee4,edx
c0007e67:	c1 e0 0c             	shl    eax,0xc
c0007e6a:	5b                   	pop    ebx
c0007e6b:	83 c4 14             	add    esp,0x14
c0007e6e:	5b                   	pop    ebx
c0007e6f:	5e                   	pop    esi
c0007e70:	c3                   	ret    
c0007e71:	83 ec 08             	sub    esp,0x8
c0007e74:	89 c2                	mov    edx,eax
c0007e76:	6a 01                	push   0x1
c0007e78:	c1 ea 0c             	shr    edx,0xc
c0007e7b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007e7f:	52                   	push   edx
c0007e80:	e8 75 fe ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0007e85:	83 c4 10             	add    esp,0x10
c0007e88:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007e8c:	eb dd                	jmp    c0007e6b <Phys::allocatePage()+0xac>

c0007e8e <Phys::allocateContiguousPages(int)>:
c0007e8e:	57                   	push   edi
c0007e8f:	56                   	push   esi
c0007e90:	53                   	push   ebx
c0007e91:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007e95:	fa                   	cli    
c0007e96:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0007e9b:	31 db                	xor    ebx,ebx
c0007e9d:	83 c0 01             	add    eax,0x1
c0007ea0:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0007ea5:	85 db                	test   ebx,ebx
c0007ea7:	75 11                	jne    c0007eba <Phys::allocateContiguousPages(int)+0x2c>
c0007ea9:	e8 11 ff ff ff       	call   c0007dbf <Phys::allocatePage()>
c0007eae:	83 fe 01             	cmp    esi,0x1
c0007eb1:	89 c7                	mov    edi,eax
c0007eb3:	74 21                	je     c0007ed6 <Phys::allocateContiguousPages(int)+0x48>
c0007eb5:	bb 01 00 00 00       	mov    ebx,0x1
c0007eba:	e8 00 ff ff ff       	call   c0007dbf <Phys::allocatePage()>
c0007ebf:	89 da                	mov    edx,ebx
c0007ec1:	c1 e2 0c             	shl    edx,0xc
c0007ec4:	01 fa                	add    edx,edi
c0007ec6:	39 c2                	cmp    edx,eax
c0007ec8:	74 22                	je     c0007eec <Phys::allocateContiguousPages(int)+0x5e>
c0007eca:	bb 01 00 00 00       	mov    ebx,0x1
c0007ecf:	89 c7                	mov    edi,eax
c0007ed1:	83 fe 01             	cmp    esi,0x1
c0007ed4:	75 e4                	jne    c0007eba <Phys::allocateContiguousPages(int)+0x2c>
c0007ed6:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0007edb:	83 e8 01             	sub    eax,0x1
c0007ede:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0007ee3:	75 01                	jne    c0007ee6 <Phys::allocateContiguousPages(int)+0x58>
c0007ee5:	fb                   	sti    
c0007ee6:	89 f8                	mov    eax,edi
c0007ee8:	5b                   	pop    ebx
c0007ee9:	5e                   	pop    esi
c0007eea:	5f                   	pop    edi
c0007eeb:	c3                   	ret    
c0007eec:	83 c3 01             	add    ebx,0x1
c0007eef:	39 f3                	cmp    ebx,esi
c0007ef1:	75 b2                	jne    c0007ea5 <Phys::allocateContiguousPages(int)+0x17>
c0007ef3:	eb e1                	jmp    c0007ed6 <Phys::allocateContiguousPages(int)+0x48>

c0007ef5 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0007ef5:	56                   	push   esi
c0007ef6:	53                   	push   ebx
c0007ef7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007efb:	39 1d dc 6e 02 c0    	cmp    DWORD PTR ds:0xc0026edc,ebx
c0007f01:	73 06                	jae    c0007f09 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0007f03:	89 1d dc 6e 02 c0    	mov    DWORD PTR ds:0xc0026edc,ebx
c0007f09:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007f0d:	c1 eb 0c             	shr    ebx,0xc
c0007f10:	c1 e8 0c             	shr    eax,0xc
c0007f13:	39 d8                	cmp    eax,ebx
c0007f15:	73 13                	jae    c0007f2a <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0007f17:	6a 00                	push   0x0
c0007f19:	8d 70 01             	lea    esi,[eax+0x1]
c0007f1c:	50                   	push   eax
c0007f1d:	e8 d8 fd ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0007f22:	5a                   	pop    edx
c0007f23:	89 f0                	mov    eax,esi
c0007f25:	59                   	pop    ecx
c0007f26:	39 f3                	cmp    ebx,esi
c0007f28:	75 ed                	jne    c0007f17 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0007f2a:	5b                   	pop    ebx
c0007f2b:	5e                   	pop    esi
c0007f2c:	c3                   	ret    

c0007f2d <Phys::physicalMemorySetup(unsigned int)>:
c0007f2d:	55                   	push   ebp
c0007f2e:	57                   	push   edi
c0007f2f:	56                   	push   esi
c0007f30:	53                   	push   ebx
c0007f31:	83 ec 40             	sub    esp,0x40
c0007f34:	6a 10                	push   0x10
c0007f36:	6a 00                	push   0x0
c0007f38:	68 ec 6e 02 c0       	push   0xc0026eec
c0007f3d:	e8 ae 85 ff ff       	call   c00004f0 <memset>
c0007f42:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007f46:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007f4b:	05 00 10 00 00       	add    eax,0x1000
c0007f50:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0007f54:	5b                   	pop    ebx
c0007f55:	31 db                	xor    ebx,ebx
c0007f57:	5e                   	pop    esi
c0007f58:	50                   	push   eax
c0007f59:	68 07 0e 02 c0       	push   0xc0020e07
c0007f5e:	e8 e2 29 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0007f63:	83 c4 10             	add    esp,0x10
c0007f66:	83 ec 08             	sub    esp,0x8
c0007f69:	6a 01                	push   0x1
c0007f6b:	53                   	push   ebx
c0007f6c:	83 c3 01             	add    ebx,0x1
c0007f6f:	e8 86 fd ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0007f74:	83 c4 10             	add    esp,0x10
c0007f77:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007f7d:	75 e7                	jne    c0007f66 <Phys::physicalMemorySetup(unsigned int)+0x39>
c0007f7f:	0f b6 05 14 05 00 c2 	movzx  eax,BYTE PTR ds:0xc2000514
c0007f86:	0f b6 15 13 05 00 c2 	movzx  edx,BYTE PTR ds:0xc2000513
c0007f8d:	c1 e0 08             	shl    eax,0x8
c0007f90:	09 c2                	or     edx,eax
c0007f92:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0007f96:	0f 84 98 01 00 00    	je     c0008134 <Phys::physicalMemorySetup(unsigned int)+0x207>
c0007f9c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0007fa0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007fa8:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0007fad:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007fb1:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0007fb9:	eb 1c                	jmp    c0007fd7 <Phys::physicalMemorySetup(unsigned int)+0xaa>
c0007fbb:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0007fbf:	83 c3 18             	add    ebx,0x18
c0007fc2:	83 c6 01             	add    esi,0x1
c0007fc5:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0007fc9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007fcd:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0007fd1:	0f 84 6d 01 00 00    	je     c0008144 <Phys::physicalMemorySetup(unsigned int)+0x217>
c0007fd7:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0007fda:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0007fdd:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0007fe0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007fe4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007fe8:	8b 33                	mov    esi,DWORD PTR [ebx]
c0007fea:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0007fed:	01 f0                	add    eax,esi
c0007fef:	55                   	push   ebp
c0007ff0:	11 fa                	adc    edx,edi
c0007ff2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007ff6:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0007ffa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007ffe:	51                   	push   ecx
c0007fff:	56                   	push   esi
c0008000:	68 a4 0d 02 c0       	push   0xc0020da4
c0008005:	e8 3b 29 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000800a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000800e:	83 c4 10             	add    esp,0x10
c0008011:	09 f8                	or     eax,edi
c0008013:	0f 85 2b 01 00 00    	jne    c0008144 <Phys::physicalMemorySetup(unsigned int)+0x217>
c0008019:	83 fd 01             	cmp    ebp,0x1
c000801c:	75 9d                	jne    c0007fbb <Phys::physicalMemorySetup(unsigned int)+0x8e>
c000801e:	ba 00 00 08 00       	mov    edx,0x80000
c0008023:	89 c1                	mov    ecx,eax
c0008025:	39 f2                	cmp    edx,esi
c0008027:	19 f9                	sbb    ecx,edi
c0008029:	0f 82 ab 00 00 00    	jb     c00080da <Phys::physicalMemorySetup(unsigned int)+0x1ad>
c000802f:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0008033:	89 c1                	mov    ecx,eax
c0008035:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c0008039:	0f 83 9b 00 00 00    	jae    c00080da <Phys::physicalMemorySetup(unsigned int)+0x1ad>
c000803f:	ba 00 00 0a 00       	mov    edx,0xa0000
c0008044:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008048:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000804c:	39 fa                	cmp    edx,edi
c000804e:	19 e8                	sbb    eax,ebp
c0008050:	0f 82 b0 01 00 00    	jb     c0008206 <Phys::physicalMemorySetup(unsigned int)+0x2d9>
c0008056:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000805a:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000805e:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c0008064:	ba ff 1f 00 00       	mov    edx,0x1fff
c0008069:	83 d5 ff             	adc    ebp,0xffffffff
c000806c:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0008070:	31 c0                	xor    eax,eax
c0008072:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c0008076:	39 fa                	cmp    edx,edi
c0008078:	89 c1                	mov    ecx,eax
c000807a:	19 e9                	sbb    ecx,ebp
c000807c:	0f 83 39 ff ff ff    	jae    c0007fbb <Phys::physicalMemorySetup(unsigned int)+0x8e>
c0008082:	be 00 00 08 00       	mov    esi,0x80000
c0008087:	83 ec 04             	sub    esp,0x4
c000808a:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000808e:	57                   	push   edi
c000808f:	56                   	push   esi
c0008090:	68 c8 0d 02 c0       	push   0xc0020dc8
c0008095:	e8 ab 28 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000809a:	5d                   	pop    ebp
c000809b:	58                   	pop    eax
c000809c:	57                   	push   edi
c000809d:	56                   	push   esi
c000809e:	e8 52 fe ff ff       	call   c0007ef5 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c00080a3:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00080a7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00080ab:	83 c4 0c             	add    esp,0xc
c00080ae:	0f ac d0 0c          	shrd   eax,edx,0xc
c00080b2:	8b 15 e8 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026ee8
c00080b8:	01 d0                	add    eax,edx
c00080ba:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00080c1:	a3 e8 6e 02 c0       	mov    ds:0xc0026ee8,eax
c00080c6:	52                   	push   edx
c00080c7:	50                   	push   eax
c00080c8:	68 2d 0e 02 c0       	push   0xc0020e2d
c00080cd:	e8 73 28 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00080d2:	83 c4 10             	add    esp,0x10
c00080d5:	e9 e1 fe ff ff       	jmp    c0007fbb <Phys::physicalMemorySetup(unsigned int)+0x8e>
c00080da:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c00080de:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00080e2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00080e6:	39 ea                	cmp    edx,ebp
c00080e8:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c00080ec:	0f 82 c9 fe ff ff    	jb     c0007fbb <Phys::physicalMemorySetup(unsigned int)+0x8e>
c00080f2:	ba ff 1f 00 00       	mov    edx,0x1fff
c00080f7:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00080fb:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c00080ff:	0f 83 b6 fe ff ff    	jae    c0007fbb <Phys::physicalMemorySetup(unsigned int)+0x8e>
c0008105:	39 ee                	cmp    esi,ebp
c0008107:	89 f8                	mov    eax,edi
c0008109:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c000810d:	0f 83 74 ff ff ff    	jae    c0008087 <Phys::physicalMemorySetup(unsigned int)+0x15a>
c0008113:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008117:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000811b:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000811f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008123:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c0008127:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000812b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000812f:	e9 53 ff ff ff       	jmp    c0008087 <Phys::physicalMemorySetup(unsigned int)+0x15a>
c0008134:	83 ec 0c             	sub    esp,0xc
c0008137:	68 1f 0e 02 c0       	push   0xc0020e1f
c000813c:	e8 52 95 00 00       	call   c0011693 <KePanic(char const*)>
c0008141:	83 c4 10             	add    esp,0x10
c0008144:	83 ec 08             	sub    esp,0x8
c0008147:	bb 60 00 00 00       	mov    ebx,0x60
c000814c:	6a 00                	push   0x0
c000814e:	6a 06                	push   0x6
c0008150:	e8 a5 fb ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0008155:	58                   	pop    eax
c0008156:	5a                   	pop    edx
c0008157:	6a 00                	push   0x0
c0008159:	6a 07                	push   0x7
c000815b:	e8 9a fb ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0008160:	8b 0d e8 6e 02 c0    	mov    ecx,DWORD PTR ds:0xc0026ee8
c0008166:	83 c4 10             	add    esp,0x10
c0008169:	83 c1 02             	add    ecx,0x2
c000816c:	89 0d e8 6e 02 c0    	mov    DWORD PTR ds:0xc0026ee8,ecx
c0008172:	83 ec 08             	sub    esp,0x8
c0008175:	6a 00                	push   0x0
c0008177:	53                   	push   ebx
c0008178:	83 c3 01             	add    ebx,0x1
c000817b:	e8 7a fb ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0008180:	83 c4 10             	add    esp,0x10
c0008183:	81 fb 80 00 00 00    	cmp    ebx,0x80
c0008189:	75 e7                	jne    c0008172 <Phys::physicalMemorySetup(unsigned int)+0x245>
c000818b:	a1 e8 6e 02 c0       	mov    eax,ds:0xc0026ee8
c0008190:	bb 40 01 00 00       	mov    ebx,0x140
c0008195:	83 c0 20             	add    eax,0x20
c0008198:	a3 e8 6e 02 c0       	mov    ds:0xc0026ee8,eax
c000819d:	eb 26                	jmp    c00081c5 <Phys::physicalMemorySetup(unsigned int)+0x298>
c000819f:	83 ec 08             	sub    esp,0x8
c00081a2:	6a 00                	push   0x0
c00081a4:	53                   	push   ebx
c00081a5:	83 c3 01             	add    ebx,0x1
c00081a8:	e8 4d fb ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c00081ad:	a1 e8 6e 02 c0       	mov    eax,ds:0xc0026ee8
c00081b2:	83 c4 10             	add    esp,0x10
c00081b5:	83 c0 01             	add    eax,0x1
c00081b8:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c00081be:	a3 e8 6e 02 c0       	mov    ds:0xc0026ee8,eax
c00081c3:	74 07                	je     c00081cc <Phys::physicalMemorySetup(unsigned int)+0x29f>
c00081c5:	3d ff 03 00 00       	cmp    eax,0x3ff
c00081ca:	7e d3                	jle    c000819f <Phys::physicalMemorySetup(unsigned int)+0x272>
c00081cc:	bb d0 01 00 00       	mov    ebx,0x1d0
c00081d1:	3d ff 07 00 00       	cmp    eax,0x7ff
c00081d6:	7f 26                	jg     c00081fe <Phys::physicalMemorySetup(unsigned int)+0x2d1>
c00081d8:	83 ec 08             	sub    esp,0x8
c00081db:	6a 00                	push   0x0
c00081dd:	53                   	push   ebx
c00081de:	83 c3 01             	add    ebx,0x1
c00081e1:	e8 14 fb ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c00081e6:	a1 e8 6e 02 c0       	mov    eax,ds:0xc0026ee8
c00081eb:	83 c4 10             	add    esp,0x10
c00081ee:	83 c0 01             	add    eax,0x1
c00081f1:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c00081f7:	a3 e8 6e 02 c0       	mov    ds:0xc0026ee8,eax
c00081fc:	75 d3                	jne    c00081d1 <Phys::physicalMemorySetup(unsigned int)+0x2a4>
c00081fe:	83 c4 3c             	add    esp,0x3c
c0008201:	5b                   	pop    ebx
c0008202:	5e                   	pop    esi
c0008203:	5f                   	pop    edi
c0008204:	5d                   	pop    ebp
c0008205:	c3                   	ret    
c0008206:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c000820e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0008216:	e9 3b fe ff ff       	jmp    c0008056 <Phys::physicalMemorySetup(unsigned int)+0x129>
c000821b:	90                   	nop

c000821c <Pipe::isAtty()>:
c000821c:	31 c0                	xor    eax,eax
c000821e:	c3                   	ret    
c000821f:	90                   	nop

c0008220 <Pipe::~Pipe()>:
c0008220:	83 ec 0c             	sub    esp,0xc
c0008223:	ba 8c 0e 02 c0       	mov    edx,0xc0020e8c
c0008228:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000822c:	89 10                	mov    DWORD PTR [eax],edx
c000822e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008232:	83 ec 0c             	sub    esp,0xc
c0008235:	50                   	push   eax
c0008236:	e8 69 11 00 00       	call   c00093a4 <UnixFile::~UnixFile()>
c000823b:	83 c4 10             	add    esp,0x10
c000823e:	90                   	nop
c000823f:	83 c4 0c             	add    esp,0xc
c0008242:	c3                   	ret    
c0008243:	90                   	nop

c0008244 <Pipe::~Pipe()>:
c0008244:	83 ec 0c             	sub    esp,0xc
c0008247:	83 ec 0c             	sub    esp,0xc
c000824a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000824e:	e8 cd ff ff ff       	call   c0008220 <Pipe::~Pipe()>
c0008253:	83 c4 10             	add    esp,0x10
c0008256:	83 ec 08             	sub    esp,0x8
c0008259:	6a 20                	push   0x20
c000825b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000825f:	e8 b4 25 00 00       	call   c000a818 <operator delete(void*, unsigned long)>
c0008264:	83 c4 10             	add    esp,0x10
c0008267:	83 c4 0c             	add    esp,0xc
c000826a:	c3                   	ret    
c000826b:	90                   	nop

c000826c <Pipe::write(unsigned long long, void*, int*)>:
c000826c:	55                   	push   ebp
c000826d:	57                   	push   edi
c000826e:	56                   	push   esi
c000826f:	53                   	push   ebx
c0008270:	83 ec 1c             	sub    esp,0x1c
c0008273:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0008277:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000827b:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c000827e:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008282:	89 04 24             	mov    DWORD PTR [esp],eax
c0008285:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008289:	89 d8                	mov    eax,ebx
c000828b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000828e:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0008292:	89 d6                	mov    esi,edx
c0008294:	89 d7                	mov    edi,edx
c0008296:	c1 ff 1f             	sar    edi,0x1f
c0008299:	03 34 24             	add    esi,DWORD PTR [esp]
c000829c:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00082a0:	c1 f8 1f             	sar    eax,0x1f
c00082a3:	39 f3                	cmp    ebx,esi
c00082a5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00082a9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00082ad:	19 f8                	sbb    eax,edi
c00082af:	b8 01 00 00 00       	mov    eax,0x1
c00082b4:	72 6e                	jb     c0008324 <Pipe::write(unsigned long long, void*, int*)+0xb8>
c00082b6:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00082b9:	01 d0                	add    eax,edx
c00082bb:	99                   	cdq    
c00082bc:	f7 fb                	idiv   ebx
c00082be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00082c2:	29 d3                	sub    ebx,edx
c00082c4:	89 d7                	mov    edi,edx
c00082c6:	89 de                	mov    esi,ebx
c00082c8:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00082cb:	c1 fb 1f             	sar    ebx,0x1f
c00082ce:	39 f2                	cmp    edx,esi
c00082d0:	19 d8                	sbb    eax,ebx
c00082d2:	b8 00 00 00 00       	mov    eax,0x0
c00082d7:	72 04                	jb     c00082dd <Pipe::write(unsigned long long, void*, int*)+0x71>
c00082d9:	89 d0                	mov    eax,edx
c00082db:	29 f0                	sub    eax,esi
c00082dd:	89 d3                	mov    ebx,edx
c00082df:	29 c3                	sub    ebx,eax
c00082e1:	74 0b                	je     c00082ee <Pipe::write(unsigned long long, void*, int*)+0x82>
c00082e3:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c00082e6:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00082ea:	89 d9                	mov    ecx,ebx
c00082ec:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00082ee:	85 c0                	test   eax,eax
c00082f0:	74 0d                	je     c00082ff <Pipe::write(unsigned long long, void*, int*)+0x93>
c00082f2:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c00082f6:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00082f9:	89 de                	mov    esi,ebx
c00082fb:	89 c1                	mov    ecx,eax
c00082fd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00082ff:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c0008302:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008307:	75 10                	jne    c0008319 <Pipe::write(unsigned long long, void*, int*)+0xad>
c0008309:	83 ec 0c             	sub    esp,0xc
c000830c:	68 49 0e 02 c0       	push   0xc0020e49
c0008311:	e8 7d 93 00 00       	call   c0011693 <KePanic(char const*)>
c0008316:	83 c4 10             	add    esp,0x10
c0008319:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000831d:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008320:	89 08                	mov    DWORD PTR [eax],ecx
c0008322:	31 c0                	xor    eax,eax
c0008324:	83 c4 1c             	add    esp,0x1c
c0008327:	5b                   	pop    ebx
c0008328:	5e                   	pop    esi
c0008329:	5f                   	pop    edi
c000832a:	5d                   	pop    ebp
c000832b:	c3                   	ret    

c000832c <Pipe::read(unsigned long long, void*, int*)>:
c000832c:	55                   	push   ebp
c000832d:	57                   	push   edi
c000832e:	56                   	push   esi
c000832f:	53                   	push   ebx
c0008330:	83 ec 1c             	sub    esp,0x1c
c0008333:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0008337:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000833b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000833f:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0008342:	89 c8                	mov    eax,ecx
c0008344:	99                   	cdq    
c0008345:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0008349:	74 24                	je     c000836f <Pipe::read(unsigned long long, void*, int*)+0x43>
c000834b:	39 f9                	cmp    ecx,edi
c000834d:	89 d1                	mov    ecx,edx
c000834f:	19 f1                	sbb    ecx,esi
c0008351:	73 1c                	jae    c000836f <Pipe::read(unsigned long long, void*, int*)+0x43>
c0008353:	fa                   	cli    
c0008354:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c000835a:	e8 b9 dd 00 00       	call   c0016118 <schedule()>
c000835f:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0008364:	48                   	dec    eax
c0008365:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000836a:	75 d3                	jne    c000833f <Pipe::read(unsigned long long, void*, int*)+0x13>
c000836c:	fb                   	sti    
c000836d:	eb d0                	jmp    c000833f <Pipe::read(unsigned long long, void*, int*)+0x13>
c000836f:	39 f8                	cmp    eax,edi
c0008371:	89 d1                	mov    ecx,edx
c0008373:	89 3c 24             	mov    DWORD PTR [esp],edi
c0008376:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000837a:	19 f1                	sbb    ecx,esi
c000837c:	73 07                	jae    c0008385 <Pipe::read(unsigned long long, void*, int*)+0x59>
c000837e:	89 04 24             	mov    DWORD PTR [esp],eax
c0008381:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008385:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c0008388:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000838b:	29 f7                	sub    edi,esi
c000838d:	89 f8                	mov    eax,edi
c000838f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0008393:	99                   	cdq    
c0008394:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0008397:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000839b:	19 d0                	sbb    eax,edx
c000839d:	73 07                	jae    c00083a6 <Pipe::read(unsigned long long, void*, int*)+0x7a>
c000839f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00083a2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00083a6:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c00083a9:	89 ea                	mov    edx,ebp
c00083ab:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c00083af:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00083b4:	74 0d                	je     c00083c3 <Pipe::read(unsigned long long, void*, int*)+0x97>
c00083b6:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00083b9:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00083bd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00083c1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00083c3:	85 d2                	test   edx,edx
c00083c5:	74 11                	je     c00083d8 <Pipe::read(unsigned long long, void*, int*)+0xac>
c00083c7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083cb:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c00083ce:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c00083d2:	89 d1                	mov    ecx,edx
c00083d4:	89 c7                	mov    edi,eax
c00083d6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00083d8:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00083db:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c00083de:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c00083e1:	99                   	cdq    
c00083e2:	89 f7                	mov    edi,esi
c00083e4:	03 04 24             	add    eax,DWORD PTR [esp]
c00083e7:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c00083eb:	c1 ff 1f             	sar    edi,0x1f
c00083ee:	57                   	push   edi
c00083ef:	56                   	push   esi
c00083f0:	52                   	push   edx
c00083f1:	50                   	push   eax
c00083f2:	e8 99 74 01 00       	call   c001f890 <__umoddi3>
c00083f7:	83 c4 10             	add    esp,0x10
c00083fa:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00083fd:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008402:	75 10                	jne    c0008414 <Pipe::read(unsigned long long, void*, int*)+0xe8>
c0008404:	83 ec 0c             	sub    esp,0xc
c0008407:	68 66 0e 02 c0       	push   0xc0020e66
c000840c:	e8 82 92 00 00       	call   c0011693 <KePanic(char const*)>
c0008411:	83 c4 10             	add    esp,0x10
c0008414:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0008418:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000841b:	89 10                	mov    DWORD PTR [eax],edx
c000841d:	83 c4 1c             	add    esp,0x1c
c0008420:	31 c0                	xor    eax,eax
c0008422:	5b                   	pop    ebx
c0008423:	5e                   	pop    esi
c0008424:	5f                   	pop    edi
c0008425:	5d                   	pop    ebp
c0008426:	c3                   	ret    
c0008427:	90                   	nop

c0008428 <Pipe::Pipe(int)>:
c0008428:	83 ec 0c             	sub    esp,0xc
c000842b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000842f:	83 ec 08             	sub    esp,0x8
c0008432:	6a 00                	push   0x0
c0008434:	50                   	push   eax
c0008435:	e8 84 0d 00 00       	call   c00091be <UnixFile::UnixFile(int)>
c000843a:	83 c4 10             	add    esp,0x10
c000843d:	ba 8c 0e 02 c0       	mov    edx,0xc0020e8c
c0008442:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008446:	89 10                	mov    DWORD PTR [eax],edx
c0008448:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000844c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008450:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0008453:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008457:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000845e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008462:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0008469:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000846d:	83 ec 0c             	sub    esp,0xc
c0008470:	50                   	push   eax
c0008471:	e8 40 f6 ff ff       	call   c0007ab6 <malloc>
c0008476:	83 c4 10             	add    esp,0x10
c0008479:	89 c2                	mov    edx,eax
c000847b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000847f:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008482:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008486:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000848a:	90                   	nop
c000848b:	83 c4 0c             	add    esp,0xc
c000848e:	c3                   	ret    
c000848f:	90                   	nop

c0008490 <VgaText::isAtty()>:
c0008490:	b0 01                	mov    al,0x1
c0008492:	c3                   	ret    
c0008493:	90                   	nop

c0008494 <VgaText::~VgaText()>:
c0008494:	83 ec 0c             	sub    esp,0xc
c0008497:	ba d4 0e 02 c0       	mov    edx,0xc0020ed4
c000849c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00084a0:	89 10                	mov    DWORD PTR [eax],edx
c00084a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00084a6:	83 ec 0c             	sub    esp,0xc
c00084a9:	50                   	push   eax
c00084aa:	e8 f5 0e 00 00       	call   c00093a4 <UnixFile::~UnixFile()>
c00084af:	83 c4 10             	add    esp,0x10
c00084b2:	90                   	nop
c00084b3:	83 c4 0c             	add    esp,0xc
c00084b6:	c3                   	ret    
c00084b7:	90                   	nop

c00084b8 <VgaText::~VgaText()>:
c00084b8:	83 ec 0c             	sub    esp,0xc
c00084bb:	83 ec 0c             	sub    esp,0xc
c00084be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084c2:	e8 cd ff ff ff       	call   c0008494 <VgaText::~VgaText()>
c00084c7:	83 c4 10             	add    esp,0x10
c00084ca:	83 ec 08             	sub    esp,0x8
c00084cd:	68 84 01 00 00       	push   0x184
c00084d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084d6:	e8 3d 23 00 00       	call   c000a818 <operator delete(void*, unsigned long)>
c00084db:	83 c4 10             	add    esp,0x10
c00084de:	83 c4 0c             	add    esp,0xc
c00084e1:	c3                   	ret    

c00084e2 <VgaText::read(unsigned long long, void*, int*)>:
c00084e2:	83 ec 10             	sub    esp,0x10
c00084e5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00084e9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00084ed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084f1:	e8 1e 54 00 00       	call   c000d914 <readKeyboard(VgaText*, char*, unsigned long)>
c00084f6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00084fa:	89 02                	mov    DWORD PTR [edx],eax
c00084fc:	31 c0                	xor    eax,eax
c00084fe:	83 c4 1c             	add    esp,0x1c
c0008501:	c3                   	ret    

c0008502 <setTerminalScrollLock(bool)>:
c0008502:	c3                   	ret    

c0008503 <doTerminalCycle()>:
c0008503:	c3                   	ret    

c0008504 <addToTerminalCycle(VgaText*)>:
c0008504:	c3                   	ret    

c0008505 <scrollTerminalScrollLock(int)>:
c0008505:	c3                   	ret    

c0008506 <VgaText::updateTitle()>:
c0008506:	c3                   	ret    
c0008507:	90                   	nop

c0008508 <VgaText::load()>:
c0008508:	c3                   	ret    
c0008509:	90                   	nop

c000850a <VgaText::updateCursor()>:
c000850a:	83 ec 14             	sub    esp,0x14
c000850d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008511:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0008514:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0008517:	e8 b4 09 01 00       	call   c0018ed0 <HalConsoleCursorUpdate(int, int)>
c000851c:	83 c4 1c             	add    esp,0x1c
c000851f:	c3                   	ret    

c0008520 <VgaText::doANSI_SGR(int)>:
c0008520:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008524:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008528:	85 d2                	test   edx,edx
c000852a:	75 0b                	jne    c0008537 <VgaText::doANSI_SGR(int)+0x17>
c000852c:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000852f:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008532:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0008535:	eb 59                	jmp    c0008590 <VgaText::doANSI_SGR(int)+0x70>
c0008537:	83 fa 07             	cmp    edx,0x7
c000853a:	75 0b                	jne    c0008547 <VgaText::doANSI_SGR(int)+0x27>
c000853c:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c000853f:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0008542:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c0008545:	eb 49                	jmp    c0008590 <VgaText::doANSI_SGR(int)+0x70>
c0008547:	83 fa 1b             	cmp    edx,0x1b
c000854a:	74 e0                	je     c000852c <VgaText::doANSI_SGR(int)+0xc>
c000854c:	8d 4a e2             	lea    ecx,[edx-0x1e]
c000854f:	83 f9 07             	cmp    ecx,0x7
c0008552:	77 09                	ja     c000855d <VgaText::doANSI_SGR(int)+0x3d>
c0008554:	8b 14 8d 00 37 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdc900]
c000855b:	eb 20                	jmp    c000857d <VgaText::doANSI_SGR(int)+0x5d>
c000855d:	8d 4a d8             	lea    ecx,[edx-0x28]
c0008560:	83 f9 07             	cmp    ecx,0x7
c0008563:	77 09                	ja     c000856e <VgaText::doANSI_SGR(int)+0x4e>
c0008565:	8b 14 8d 00 37 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdc900]
c000856c:	eb 22                	jmp    c0008590 <VgaText::doANSI_SGR(int)+0x70>
c000856e:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0008571:	83 f9 07             	cmp    ecx,0x7
c0008574:	77 0b                	ja     c0008581 <VgaText::doANSI_SGR(int)+0x61>
c0008576:	8b 14 95 b8 35 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdca48]
c000857d:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008580:	c3                   	ret    
c0008581:	8d 4a 9c             	lea    ecx,[edx-0x64]
c0008584:	83 f9 07             	cmp    ecx,0x7
c0008587:	77 0a                	ja     c0008593 <VgaText::doANSI_SGR(int)+0x73>
c0008589:	8b 14 95 90 35 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdca70]
c0008590:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0008593:	c3                   	ret    

c0008594 <VgaText::setDefaultBgColour(VgaColour)>:
c0008594:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008598:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000859c:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000859f:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00085a2:	c3                   	ret    
c00085a3:	90                   	nop

c00085a4 <VgaText::setDefaultFgColour(VgaColour)>:
c00085a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085a8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085ac:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00085af:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00085b2:	c3                   	ret    
c00085b3:	90                   	nop

c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c00085b4:	53                   	push   ebx
c00085b5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00085b9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00085bd:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00085c1:	51                   	push   ecx
c00085c2:	e8 cd ff ff ff       	call   c0008594 <VgaText::setDefaultBgColour(VgaColour)>
c00085c7:	58                   	pop    eax
c00085c8:	5a                   	pop    edx
c00085c9:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00085cd:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00085d1:	5b                   	pop    ebx
c00085d2:	eb d0                	jmp    c00085a4 <VgaText::setDefaultFgColour(VgaColour)>

c00085d4 <VgaText::setTitleTextColour(VgaColour)>:
c00085d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085d8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085dc:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c00085df:	c3                   	ret    

c00085e0 <VgaText::setTitleColour(VgaColour)>:
c00085e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085e4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085e8:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00085eb:	c3                   	ret    

c00085ec <VgaText::setTitle(char*)>:
c00085ec:	c3                   	ret    
c00085ed:	90                   	nop

c00085ee <VgaText::combineColours(unsigned char, unsigned char)>:
c00085ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085f2:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00085f7:	83 e0 0f             	and    eax,0xf
c00085fa:	c1 e2 04             	shl    edx,0x4
c00085fd:	09 d0                	or     eax,edx
c00085ff:	c3                   	ret    

c0008600 <VgaText::scrollScreen()>:
c0008600:	55                   	push   ebp
c0008601:	57                   	push   edi
c0008602:	56                   	push   esi
c0008603:	be 01 00 00 00       	mov    esi,0x1
c0008608:	53                   	push   ebx
c0008609:	83 ec 0c             	sub    esp,0xc
c000860c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008610:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0008613:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c0008619:	31 ff                	xor    edi,edi
c000861b:	01 e9                	add    ecx,ebp
c000861d:	8a 01                	mov    al,BYTE PTR [ecx]
c000861f:	83 fe 18             	cmp    esi,0x18
c0008622:	88 81 60 ff ff ff    	mov    BYTE PTR [ecx-0xa0],al
c0008628:	75 20                	jne    c000864a <VgaText::scrollScreen()+0x4a>
c000862a:	f7 c7 01 00 00 00    	test   edi,0x1
c0008630:	74 15                	je     c0008647 <VgaText::scrollScreen()+0x47>
c0008632:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0008636:	50                   	push   eax
c0008637:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c000863b:	50                   	push   eax
c000863c:	e8 ad ff ff ff       	call   c00085ee <VgaText::combineColours(unsigned char, unsigned char)>
c0008641:	5a                   	pop    edx
c0008642:	5a                   	pop    edx
c0008643:	88 01                	mov    BYTE PTR [ecx],al
c0008645:	eb 03                	jmp    c000864a <VgaText::scrollScreen()+0x4a>
c0008647:	c6 01 20             	mov    BYTE PTR [ecx],0x20
c000864a:	47                   	inc    edi
c000864b:	41                   	inc    ecx
c000864c:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0008652:	75 c9                	jne    c000861d <VgaText::scrollScreen()+0x1d>
c0008654:	46                   	inc    esi
c0008655:	83 fe 19             	cmp    esi,0x19
c0008658:	75 b9                	jne    c0008613 <VgaText::scrollScreen()+0x13>
c000865a:	39 1d 04 6f 02 c0    	cmp    DWORD PTR ds:0xc0026f04,ebx
c0008660:	75 1f                	jne    c0008681 <VgaText::scrollScreen()+0x81>
c0008662:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0008666:	74 05                	je     c000866d <VgaText::scrollScreen()+0x6d>
c0008668:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c000866b:	eb 14                	jmp    c0008681 <VgaText::scrollScreen()+0x81>
c000866d:	50                   	push   eax
c000866e:	50                   	push   eax
c000866f:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0008673:	50                   	push   eax
c0008674:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0008678:	50                   	push   eax
c0008679:	e8 e6 06 01 00       	call   c0018d64 <HalConsoleScroll(int, int)>
c000867e:	83 c4 10             	add    esp,0x10
c0008681:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0008685:	83 c4 0c             	add    esp,0xc
c0008688:	5b                   	pop    ebx
c0008689:	5e                   	pop    esi
c000868a:	5f                   	pop    edi
c000868b:	5d                   	pop    ebp
c000868c:	e9 79 fe ff ff       	jmp    c000850a <VgaText::updateCursor()>
c0008691:	90                   	nop

c0008692 <VgaText::combineCharAndColour(char, unsigned char)>:
c0008692:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0008697:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c000869c:	c1 e0 08             	shl    eax,0x8
c000869f:	09 d0                	or     eax,edx
c00086a1:	c3                   	ret    

c00086a2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00086a2:	55                   	push   ebp
c00086a3:	57                   	push   edi
c00086a4:	56                   	push   esi
c00086a5:	53                   	push   ebx
c00086a6:	83 ec 1c             	sub    esp,0x1c
c00086a9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00086ad:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00086b1:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00086b5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00086b9:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00086bd:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00086c1:	0f b6 c3             	movzx  eax,bl
c00086c4:	50                   	push   eax
c00086c5:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c00086ca:	50                   	push   eax
c00086cb:	e8 1e ff ff ff       	call   c00085ee <VgaText::combineColours(unsigned char, unsigned char)>
c00086d0:	5a                   	pop    edx
c00086d1:	0f b6 c0             	movzx  eax,al
c00086d4:	59                   	pop    ecx
c00086d5:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c00086da:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00086de:	50                   	push   eax
c00086df:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00086e3:	e8 aa ff ff ff       	call   c0008692 <VgaText::combineCharAndColour(char, unsigned char)>
c00086e8:	5a                   	pop    edx
c00086e9:	6b d7 50             	imul   edx,edi,0x50
c00086ec:	59                   	pop    ecx
c00086ed:	01 f2                	add    edx,esi
c00086ef:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00086f2:	0f b7 d2             	movzx  edx,dx
c00086f5:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c00086f9:	39 2d 04 6f 02 c0    	cmp    DWORD PTR ds:0xc0026f04,ebp
c00086ff:	75 28                	jne    c0008729 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x87>
c0008701:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008705:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0008709:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c000870d:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c0008711:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0008715:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008719:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000871d:	83 c4 1c             	add    esp,0x1c
c0008720:	5b                   	pop    ebx
c0008721:	5e                   	pop    esi
c0008722:	5f                   	pop    edi
c0008723:	5d                   	pop    ebp
c0008724:	e9 43 07 01 00       	jmp    c0018e6c <HalConsoleWriteCharacter(char, int, int, int, int)>
c0008729:	83 c4 1c             	add    esp,0x1c
c000872c:	5b                   	pop    ebx
c000872d:	5e                   	pop    esi
c000872e:	5f                   	pop    edi
c000872f:	5d                   	pop    ebp
c0008730:	c3                   	ret    
c0008731:	90                   	nop

c0008732 <VgaText::getCursorX()>:
c0008732:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008736:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0008739:	c3                   	ret    

c000873a <VgaText::getCursorY()>:
c000873a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000873e:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0008741:	c3                   	ret    

c0008742 <VgaText::setCursor(int, int)>:
c0008742:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008746:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000874a:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c000874d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008751:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0008754:	e9 b1 fd ff ff       	jmp    c000850a <VgaText::updateCursor()>

c0008759 <setActiveTerminal(VgaText*)>:
c0008759:	53                   	push   ebx
c000875a:	83 ec 08             	sub    esp,0x8
c000875d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008761:	85 db                	test   ebx,ebx
c0008763:	75 11                	jne    c0008776 <setActiveTerminal(VgaText*)+0x1d>
c0008765:	c7 44 24 10 a0 0e 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020ea0
c000876d:	83 c4 08             	add    esp,0x8
c0008770:	5b                   	pop    ebx
c0008771:	e9 1d 8f 00 00       	jmp    c0011693 <KePanic(char const*)>
c0008776:	a1 04 6f 02 c0       	mov    eax,ds:0xc0026f04
c000877b:	85 c0                	test   eax,eax
c000877d:	74 0c                	je     c000878b <setActiveTerminal(VgaText*)+0x32>
c000877f:	83 ec 0c             	sub    esp,0xc
c0008782:	50                   	push   eax
c0008783:	e8 82 fd ff ff       	call   c000850a <VgaText::updateCursor()>
c0008788:	83 c4 10             	add    esp,0x10
c000878b:	89 1d 04 6f 02 c0    	mov    DWORD PTR ds:0xc0026f04,ebx
c0008791:	50                   	push   eax
c0008792:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008795:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008798:	53                   	push   ebx
c0008799:	e8 a4 ff ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c000879e:	83 c4 18             	add    esp,0x18
c00087a1:	5b                   	pop    ebx
c00087a2:	c3                   	ret    
c00087a3:	90                   	nop

c00087a4 <VgaText::clearScreen()>:
c00087a4:	57                   	push   edi
c00087a5:	56                   	push   esi
c00087a6:	31 f6                	xor    esi,esi
c00087a8:	53                   	push   ebx
c00087a9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00087ad:	52                   	push   edx
c00087ae:	6a 00                	push   0x0
c00087b0:	6a 00                	push   0x0
c00087b2:	53                   	push   ebx
c00087b3:	e8 8a ff ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c00087b8:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00087bf:	83 c4 10             	add    esp,0x10
c00087c2:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c00087c5:	7e 20                	jle    c00087e7 <VgaText::clearScreen()+0x43>
c00087c7:	31 ff                	xor    edi,edi
c00087c9:	50                   	push   eax
c00087ca:	50                   	push   eax
c00087cb:	56                   	push   esi
c00087cc:	57                   	push   edi
c00087cd:	47                   	inc    edi
c00087ce:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00087d1:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00087d4:	6a 20                	push   0x20
c00087d6:	53                   	push   ebx
c00087d7:	e8 c6 fe ff ff       	call   c00086a2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00087dc:	83 c4 20             	add    esp,0x20
c00087df:	83 ff 50             	cmp    edi,0x50
c00087e2:	75 e5                	jne    c00087c9 <VgaText::clearScreen()+0x25>
c00087e4:	46                   	inc    esi
c00087e5:	eb db                	jmp    c00087c2 <VgaText::clearScreen()+0x1e>
c00087e7:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c00087ee:	5b                   	pop    ebx
c00087ef:	5e                   	pop    esi
c00087f0:	5f                   	pop    edi
c00087f1:	c3                   	ret    

c00087f2 <VgaText::setCursorX(int)>:
c00087f2:	83 ec 10             	sub    esp,0x10
c00087f5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00087f9:	ff 70 18             	push   DWORD PTR [eax+0x18]
c00087fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008800:	50                   	push   eax
c0008801:	e8 3c ff ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c0008806:	83 c4 1c             	add    esp,0x1c
c0008809:	c3                   	ret    

c000880a <VgaText::setCursorY(int)>:
c000880a:	83 ec 10             	sub    esp,0x10
c000880d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008811:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008815:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0008818:	50                   	push   eax
c0008819:	e8 24 ff ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c000881e:	83 c4 1c             	add    esp,0x1c
c0008821:	c3                   	ret    

c0008822 <VgaText::incrementCursor(bool)>:
c0008822:	56                   	push   esi
c0008823:	53                   	push   ebx
c0008824:	51                   	push   ecx
c0008825:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008829:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000882d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0008830:	40                   	inc    eax
c0008831:	83 f8 50             	cmp    eax,0x50
c0008834:	74 05                	je     c000883b <VgaText::incrementCursor(bool)+0x19>
c0008836:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0008839:	eb 24                	jmp    c000885f <VgaText::incrementCursor(bool)+0x3d>
c000883b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000883e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008845:	8d 50 01             	lea    edx,[eax+0x1]
c0008848:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000884b:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c000884e:	75 0f                	jne    c000885f <VgaText::incrementCursor(bool)+0x3d>
c0008850:	83 ec 0c             	sub    esp,0xc
c0008853:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008856:	53                   	push   ebx
c0008857:	e8 a4 fd ff ff       	call   c0008600 <VgaText::scrollScreen()>
c000885c:	83 c4 10             	add    esp,0x10
c000885f:	89 f0                	mov    eax,esi
c0008861:	84 c0                	test   al,al
c0008863:	74 0c                	je     c0008871 <VgaText::incrementCursor(bool)+0x4f>
c0008865:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008869:	5a                   	pop    edx
c000886a:	5b                   	pop    ebx
c000886b:	5e                   	pop    esi
c000886c:	e9 99 fc ff ff       	jmp    c000850a <VgaText::updateCursor()>
c0008871:	58                   	pop    eax
c0008872:	5b                   	pop    ebx
c0008873:	5e                   	pop    esi
c0008874:	c3                   	ret    
c0008875:	90                   	nop

c0008876 <VgaText::decrementCursor(bool)>:
c0008876:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000887a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000887e:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008881:	85 c0                	test   eax,eax
c0008883:	74 04                	je     c0008889 <VgaText::decrementCursor(bool)+0x13>
c0008885:	48                   	dec    eax
c0008886:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0008889:	84 c9                	test   cl,cl
c000888b:	74 09                	je     c0008896 <VgaText::decrementCursor(bool)+0x20>
c000888d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008891:	e9 74 fc ff ff       	jmp    c000850a <VgaText::updateCursor()>
c0008896:	c3                   	ret    
c0008897:	90                   	nop

c0008898 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0008898:	53                   	push   ebx
c0008899:	83 ec 08             	sub    esp,0x8
c000889c:	0f be 44 24 14       	movsx  eax,BYTE PTR [esp+0x14]
c00088a1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00088a5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00088a9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00088ad:	83 f8 07             	cmp    eax,0x7
c00088b0:	75 21                	jne    c00088d3 <VgaText::putchar(char, VgaColour, VgaColour)+0x3b>
c00088b2:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00088ba:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c00088c2:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c00088ca:	83 c4 08             	add    esp,0x8
c00088cd:	5b                   	pop    ebx
c00088ce:	e9 8c 3b 00 00       	jmp    c000c45f <Krnl::beep(int, int, bool)>
c00088d3:	83 f8 0d             	cmp    eax,0xd
c00088d6:	75 09                	jne    c00088e1 <VgaText::putchar(char, VgaColour, VgaColour)+0x49>
c00088d8:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00088df:	eb 2d                	jmp    c000890e <VgaText::putchar(char, VgaColour, VgaColour)+0x76>
c00088e1:	83 f8 0a             	cmp    eax,0xa
c00088e4:	75 31                	jne    c0008917 <VgaText::putchar(char, VgaColour, VgaColour)+0x7f>
c00088e6:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00088e9:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00088f0:	8d 50 01             	lea    edx,[eax+0x1]
c00088f3:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00088f6:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00088f9:	75 0f                	jne    c000890a <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c00088fb:	83 ec 0c             	sub    esp,0xc
c00088fe:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008901:	53                   	push   ebx
c0008902:	e8 f9 fc ff ff       	call   c0008600 <VgaText::scrollScreen()>
c0008907:	83 c4 10             	add    esp,0x10
c000890a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000890e:	83 c4 08             	add    esp,0x8
c0008911:	5b                   	pop    ebx
c0008912:	e9 f3 fb ff ff       	jmp    c000850a <VgaText::updateCursor()>
c0008917:	83 f8 08             	cmp    eax,0x8
c000891a:	75 25                	jne    c0008941 <VgaText::putchar(char, VgaColour, VgaColour)+0xa9>
c000891c:	50                   	push   eax
c000891d:	50                   	push   eax
c000891e:	6a 01                	push   0x1
c0008920:	53                   	push   ebx
c0008921:	e8 50 ff ff ff       	call   c0008876 <VgaText::decrementCursor(bool)>
c0008926:	5a                   	pop    edx
c0008927:	59                   	pop    ecx
c0008928:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000892b:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000892e:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008931:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008934:	6a 20                	push   0x20
c0008936:	53                   	push   ebx
c0008937:	e8 66 fd ff ff       	call   c00086a2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000893c:	83 c4 28             	add    esp,0x28
c000893f:	5b                   	pop    ebx
c0008940:	c3                   	ret    
c0008941:	83 ec 08             	sub    esp,0x8
c0008944:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008947:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000894a:	51                   	push   ecx
c000894b:	52                   	push   edx
c000894c:	50                   	push   eax
c000894d:	53                   	push   ebx
c000894e:	e8 4f fd ff ff       	call   c00086a2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008953:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0008957:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c000895f:	83 c4 28             	add    esp,0x28
c0008962:	5b                   	pop    ebx
c0008963:	e9 ba fe ff ff       	jmp    c0008822 <VgaText::incrementCursor(bool)>

c0008968 <VgaText::putchar(char)>:
c0008968:	57                   	push   edi
c0008969:	56                   	push   esi
c000896a:	53                   	push   ebx
c000896b:	83 ec 10             	sub    esp,0x10
c000896e:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008972:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008976:	89 f8                	mov    eax,edi
c0008978:	0f be c0             	movsx  eax,al
c000897b:	83 f8 5b             	cmp    eax,0x5b
c000897e:	75 18                	jne    c0008998 <VgaText::putchar(char)+0x30>
c0008980:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0008984:	74 20                	je     c00089a6 <VgaText::putchar(char)+0x3e>
c0008986:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c000898c:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c0008993:	e9 c1 00 00 00       	jmp    c0008a59 <VgaText::putchar(char)+0xf1>
c0008998:	83 f8 1b             	cmp    eax,0x1b
c000899b:	75 09                	jne    c00089a6 <VgaText::putchar(char)+0x3e>
c000899d:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c00089a1:	e9 b3 00 00 00       	jmp    c0008a59 <VgaText::putchar(char)+0xf1>
c00089a6:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c00089a9:	84 c9                	test   cl,cl
c00089ab:	0f 84 98 00 00 00    	je     c0008a49 <VgaText::putchar(char)+0xe1>
c00089b1:	8d 77 c0             	lea    esi,[edi-0x40]
c00089b4:	89 f2                	mov    edx,esi
c00089b6:	80 fa 3e             	cmp    dl,0x3e
c00089b9:	77 78                	ja     c0008a33 <VgaText::putchar(char)+0xcb>
c00089bb:	83 f8 6d             	cmp    eax,0x6d
c00089be:	75 47                	jne    c0008a07 <VgaText::putchar(char)+0x9f>
c00089c0:	31 f6                	xor    esi,esi
c00089c2:	31 d2                	xor    edx,edx
c00089c4:	31 c0                	xor    eax,eax
c00089c6:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c00089c9:	7e 2d                	jle    c00089f8 <VgaText::putchar(char)+0x90>
c00089cb:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c00089d0:	83 fa 3b             	cmp    edx,0x3b
c00089d3:	75 17                	jne    c00089ec <VgaText::putchar(char)+0x84>
c00089d5:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00089d9:	50                   	push   eax
c00089da:	53                   	push   ebx
c00089db:	e8 40 fb ff ff       	call   c0008520 <VgaText::doANSI_SGR(int)>
c00089e0:	59                   	pop    ecx
c00089e1:	31 d2                	xor    edx,edx
c00089e3:	5f                   	pop    edi
c00089e4:	31 c0                	xor    eax,eax
c00089e6:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00089ea:	eb 09                	jmp    c00089f5 <VgaText::putchar(char)+0x8d>
c00089ec:	6b c0 0a             	imul   eax,eax,0xa
c00089ef:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c00089f3:	88 ca                	mov    dl,cl
c00089f5:	46                   	inc    esi
c00089f6:	eb ce                	jmp    c00089c6 <VgaText::putchar(char)+0x5e>
c00089f8:	84 d2                	test   dl,dl
c00089fa:	74 2f                	je     c0008a2b <VgaText::putchar(char)+0xc3>
c00089fc:	50                   	push   eax
c00089fd:	53                   	push   ebx
c00089fe:	e8 1d fb ff ff       	call   c0008520 <VgaText::doANSI_SGR(int)>
c0008a03:	58                   	pop    eax
c0008a04:	5a                   	pop    edx
c0008a05:	eb 24                	jmp    c0008a2b <VgaText::putchar(char)+0xc3>
c0008a07:	83 f8 4a             	cmp    eax,0x4a
c0008a0a:	75 1f                	jne    c0008a2b <VgaText::putchar(char)+0xc3>
c0008a0c:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0008a10:	75 19                	jne    c0008a2b <VgaText::putchar(char)+0xc3>
c0008a12:	83 ec 0c             	sub    esp,0xc
c0008a15:	53                   	push   ebx
c0008a16:	e8 89 fd ff ff       	call   c00087a4 <VgaText::clearScreen()>
c0008a1b:	83 c4 0c             	add    esp,0xc
c0008a1e:	6a 00                	push   0x0
c0008a20:	6a 00                	push   0x0
c0008a22:	53                   	push   ebx
c0008a23:	e8 1a fd ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c0008a28:	83 c4 10             	add    esp,0x10
c0008a2b:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0008a31:	eb 26                	jmp    c0008a59 <VgaText::putchar(char)+0xf1>
c0008a33:	8b 43 54             	mov    eax,DWORD PTR [ebx+0x54]
c0008a36:	83 f8 0e             	cmp    eax,0xe
c0008a39:	7f 1e                	jg     c0008a59 <VgaText::putchar(char)+0xf1>
c0008a3b:	8d 48 01             	lea    ecx,[eax+0x1]
c0008a3e:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0008a41:	89 f9                	mov    ecx,edi
c0008a43:	88 4c 03 42          	mov    BYTE PTR [ebx+eax*1+0x42],cl
c0008a47:	eb 10                	jmp    c0008a59 <VgaText::putchar(char)+0xf1>
c0008a49:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008a4c:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008a4f:	50                   	push   eax
c0008a50:	53                   	push   ebx
c0008a51:	e8 42 fe ff ff       	call   c0008898 <VgaText::putchar(char, VgaColour, VgaColour)>
c0008a56:	83 c4 10             	add    esp,0x10
c0008a59:	83 c4 10             	add    esp,0x10
c0008a5c:	5b                   	pop    ebx
c0008a5d:	5e                   	pop    esi
c0008a5e:	5f                   	pop    edi
c0008a5f:	c3                   	ret    

c0008a60 <VgaText::putx(unsigned int)>:
c0008a60:	57                   	push   edi
c0008a61:	b9 11 00 00 00       	mov    ecx,0x11
c0008a66:	56                   	push   esi
c0008a67:	be ae 0e 02 c0       	mov    esi,0xc0020eae
c0008a6c:	53                   	push   ebx
c0008a6d:	83 ec 20             	sub    esp,0x20
c0008a70:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008a74:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0008a78:	fc                   	cld    
c0008a79:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008a7b:	be 08 00 00 00       	mov    esi,0x8
c0008a80:	50                   	push   eax
c0008a81:	50                   	push   eax
c0008a82:	89 d8                	mov    eax,ebx
c0008a84:	c1 e3 04             	shl    ebx,0x4
c0008a87:	c1 e8 1c             	shr    eax,0x1c
c0008a8a:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0008a8f:	50                   	push   eax
c0008a90:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0008a94:	e8 cf fe ff ff       	call   c0008968 <VgaText::putchar(char)>
c0008a99:	83 c4 10             	add    esp,0x10
c0008a9c:	4e                   	dec    esi
c0008a9d:	75 e1                	jne    c0008a80 <VgaText::putx(unsigned int)+0x20>
c0008a9f:	83 c4 20             	add    esp,0x20
c0008aa2:	5b                   	pop    ebx
c0008aa3:	5e                   	pop    esi
c0008aa4:	5f                   	pop    edi
c0008aa5:	c3                   	ret    

c0008aa6 <VgaText::puts(char const*)>:
c0008aa6:	53                   	push   ebx
c0008aa7:	83 ec 08             	sub    esp,0x8
c0008aaa:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0008aae:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0008ab1:	85 c0                	test   eax,eax
c0008ab3:	74 12                	je     c0008ac7 <VgaText::puts(char const*)+0x21>
c0008ab5:	43                   	inc    ebx
c0008ab6:	51                   	push   ecx
c0008ab7:	51                   	push   ecx
c0008ab8:	50                   	push   eax
c0008ab9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008abd:	e8 a6 fe ff ff       	call   c0008968 <VgaText::putchar(char)>
c0008ac2:	83 c4 10             	add    esp,0x10
c0008ac5:	eb e7                	jmp    c0008aae <VgaText::puts(char const*)+0x8>
c0008ac7:	83 c4 08             	add    esp,0x8
c0008aca:	5b                   	pop    ebx
c0008acb:	c3                   	ret    

c0008acc <VgaText::write(unsigned long long, void*, int*)>:
c0008acc:	55                   	push   ebp
c0008acd:	57                   	push   edi
c0008ace:	56                   	push   esi
c0008acf:	53                   	push   ebx
c0008ad0:	83 ec 0c             	sub    esp,0xc
c0008ad3:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0008ad7:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008adb:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0008adf:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0008ae6:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0008ae9:	39 eb                	cmp    ebx,ebp
c0008aeb:	74 13                	je     c0008b00 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0008aed:	43                   	inc    ebx
c0008aee:	50                   	push   eax
c0008aef:	50                   	push   eax
c0008af0:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0008af4:	50                   	push   eax
c0008af5:	56                   	push   esi
c0008af6:	e8 6d fe ff ff       	call   c0008968 <VgaText::putchar(char)>
c0008afb:	83 c4 10             	add    esp,0x10
c0008afe:	eb e9                	jmp    c0008ae9 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0008b00:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0008b07:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008b0b:	89 38                	mov    DWORD PTR [eax],edi
c0008b0d:	83 c4 0c             	add    esp,0xc
c0008b10:	31 c0                	xor    eax,eax
c0008b12:	5b                   	pop    ebx
c0008b13:	5e                   	pop    esi
c0008b14:	5f                   	pop    edi
c0008b15:	5d                   	pop    ebp
c0008b16:	c3                   	ret    
c0008b17:	90                   	nop

c0008b18 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0008b18:	55                   	push   ebp
c0008b19:	57                   	push   edi
c0008b1a:	56                   	push   esi
c0008b1b:	53                   	push   ebx
c0008b1c:	83 ec 0c             	sub    esp,0xc
c0008b1f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008b23:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008b28:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0008b2f:	50                   	push   eax
c0008b30:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008b35:	50                   	push   eax
c0008b36:	e8 b3 fa ff ff       	call   c00085ee <VgaText::combineColours(unsigned char, unsigned char)>
c0008b3b:	5a                   	pop    edx
c0008b3c:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008b40:	59                   	pop    ecx
c0008b41:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008b44:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008b48:	0f b7 f6             	movzx  esi,si
c0008b4b:	0f b6 e8             	movzx  ebp,al
c0008b4e:	01 f6                	add    esi,esi
c0008b50:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008b53:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0008b56:	85 c0                	test   eax,eax
c0008b58:	0f 84 ef 00 00 00    	je     c0008c4d <VgaText::puts(char const*, VgaColour, VgaColour)+0x135>
c0008b5e:	83 f8 0d             	cmp    eax,0xd
c0008b61:	75 0c                	jne    c0008b6f <VgaText::puts(char const*, VgaColour, VgaColour)+0x57>
c0008b63:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008b6a:	e9 d8 00 00 00       	jmp    c0008c47 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008b6f:	83 f8 0a             	cmp    eax,0xa
c0008b72:	75 44                	jne    c0008bb8 <VgaText::puts(char const*, VgaColour, VgaColour)+0xa0>
c0008b74:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008b77:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008b7e:	8d 48 01             	lea    ecx,[eax+0x1]
c0008b81:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0008b84:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c0008b87:	75 0f                	jne    c0008b98 <VgaText::puts(char const*, VgaColour, VgaColour)+0x80>
c0008b89:	83 ec 0c             	sub    esp,0xc
c0008b8c:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008b8f:	53                   	push   ebx
c0008b90:	e8 6b fa ff ff       	call   c0008600 <VgaText::scrollScreen()>
c0008b95:	83 c4 10             	add    esp,0x10
c0008b98:	83 ec 0c             	sub    esp,0xc
c0008b9b:	53                   	push   ebx
c0008b9c:	e8 69 f9 ff ff       	call   c000850a <VgaText::updateCursor()>
c0008ba1:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008ba5:	83 c4 10             	add    esp,0x10
c0008ba8:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008bab:	0f b7 f6             	movzx  esi,si
c0008bae:	01 f6                	add    esi,esi
c0008bb0:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008bb3:	e9 8f 00 00 00       	jmp    c0008c47 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008bb8:	83 f8 08             	cmp    eax,0x8
c0008bbb:	75 34                	jne    c0008bf1 <VgaText::puts(char const*, VgaColour, VgaColour)+0xd9>
c0008bbd:	51                   	push   ecx
c0008bbe:	51                   	push   ecx
c0008bbf:	6a 01                	push   0x1
c0008bc1:	53                   	push   ebx
c0008bc2:	e8 af fc ff ff       	call   c0008876 <VgaText::decrementCursor(bool)>
c0008bc7:	5e                   	pop    esi
c0008bc8:	58                   	pop    eax
c0008bc9:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008bcc:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008bcf:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008bd2:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008bd5:	6a 20                	push   0x20
c0008bd7:	53                   	push   ebx
c0008bd8:	e8 c5 fa ff ff       	call   c00086a2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008bdd:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008be1:	83 c4 20             	add    esp,0x20
c0008be4:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008be7:	0f b7 f6             	movzx  esi,si
c0008bea:	01 f6                	add    esi,esi
c0008bec:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008bef:	eb 56                	jmp    c0008c47 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008bf1:	52                   	push   edx
c0008bf2:	52                   	push   edx
c0008bf3:	55                   	push   ebp
c0008bf4:	50                   	push   eax
c0008bf5:	e8 98 fa ff ff       	call   c0008692 <VgaText::combineCharAndColour(char, unsigned char)>
c0008bfa:	83 c4 10             	add    esp,0x10
c0008bfd:	66 89 06             	mov    WORD PTR [esi],ax
c0008c00:	39 1d 04 6f 02 c0    	cmp    DWORD PTR ds:0xc0026f04,ebx
c0008c06:	75 1d                	jne    c0008c25 <VgaText::puts(char const*, VgaColour, VgaColour)+0x10d>
c0008c08:	83 ec 0c             	sub    esp,0xc
c0008c0b:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008c0e:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008c11:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008c15:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008c19:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0008c1c:	50                   	push   eax
c0008c1d:	e8 4a 02 01 00       	call   c0018e6c <HalConsoleWriteCharacter(char, int, int, int, int)>
c0008c22:	83 c4 20             	add    esp,0x20
c0008c25:	83 c6 02             	add    esi,0x2
c0008c28:	50                   	push   eax
c0008c29:	50                   	push   eax
c0008c2a:	6a 00                	push   0x0
c0008c2c:	53                   	push   ebx
c0008c2d:	e8 f0 fb ff ff       	call   c0008822 <VgaText::incrementCursor(bool)>
c0008c32:	83 c4 10             	add    esp,0x10
c0008c35:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0008c39:	75 0c                	jne    c0008c47 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008c3b:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008c3f:	0f b7 f6             	movzx  esi,si
c0008c42:	01 f6                	add    esi,esi
c0008c44:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008c47:	47                   	inc    edi
c0008c48:	e9 06 ff ff ff       	jmp    c0008b53 <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c0008c4d:	83 ec 0c             	sub    esp,0xc
c0008c50:	53                   	push   ebx
c0008c51:	e8 b4 f8 ff ff       	call   c000850a <VgaText::updateCursor()>
c0008c56:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0008c5d:	83 c4 1c             	add    esp,0x1c
c0008c60:	5b                   	pop    ebx
c0008c61:	5e                   	pop    esi
c0008c62:	5f                   	pop    edi
c0008c63:	5d                   	pop    ebp
c0008c64:	c3                   	ret    
c0008c65:	90                   	nop

c0008c66 <VgaText::VgaText(char const*)>:
c0008c66:	56                   	push   esi
c0008c67:	53                   	push   ebx
c0008c68:	83 ec 04             	sub    esp,0x4
c0008c6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c6f:	83 ec 08             	sub    esp,0x8
c0008c72:	6a 00                	push   0x0
c0008c74:	50                   	push   eax
c0008c75:	e8 44 05 00 00       	call   c00091be <UnixFile::UnixFile(int)>
c0008c7a:	83 c4 10             	add    esp,0x10
c0008c7d:	ba d4 0e 02 c0       	mov    edx,0xc0020ed4
c0008c82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c86:	89 10                	mov    DWORD PTR [eax],edx
c0008c88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c8c:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0008c93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c97:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0008c9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ca2:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c0008ca6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008caa:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0008cae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cb2:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c0008cb9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cbd:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0008cc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cc8:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0008ccf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cd3:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0008cda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cde:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c0008ce5:	83 ec 0c             	sub    esp,0xc
c0008ce8:	6a 01                	push   0x1
c0008cea:	e8 1e 09 00 00       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c0008cef:	83 c4 10             	add    esp,0x10
c0008cf2:	89 c2                	mov    edx,eax
c0008cf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cf8:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008cfb:	8b 1d b0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fb0
c0008d01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d05:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008d08:	89 c6                	mov    esi,eax
c0008d0a:	e8 b0 f0 ff ff       	call   c0007dbf <Phys::allocatePage()>
c0008d0f:	68 05 0c 00 00       	push   0xc05
c0008d14:	56                   	push   esi
c0008d15:	50                   	push   eax
c0008d16:	53                   	push   ebx
c0008d17:	e8 04 10 00 00       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c0008d1c:	83 c4 10             	add    esp,0x10
c0008d1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d23:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008d26:	83 ec 04             	sub    esp,0x4
c0008d29:	68 a0 0f 00 00       	push   0xfa0
c0008d2e:	6a 00                	push   0x0
c0008d30:	50                   	push   eax
c0008d31:	e8 ba 77 ff ff       	call   c00004f0 <memset>
c0008d36:	83 c4 10             	add    esp,0x10
c0008d39:	83 ec 04             	sub    esp,0x4
c0008d3c:	6a 00                	push   0x0
c0008d3e:	6a 07                	push   0x7
c0008d40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d44:	e8 6b f8 ff ff       	call   c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0008d49:	83 c4 10             	add    esp,0x10
c0008d4c:	83 ec 04             	sub    esp,0x4
c0008d4f:	6a 00                	push   0x0
c0008d51:	6a 00                	push   0x0
c0008d53:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d57:	e8 e6 f9 ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c0008d5c:	83 c4 10             	add    esp,0x10
c0008d5f:	83 ec 0c             	sub    esp,0xc
c0008d62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d66:	e8 39 fa ff ff       	call   c00087a4 <VgaText::clearScreen()>
c0008d6b:	83 c4 10             	add    esp,0x10
c0008d6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d72:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0008d76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d7a:	05 82 00 00 00       	add    eax,0x82
c0008d7f:	83 ec 04             	sub    esp,0x4
c0008d82:	68 80 00 00 00       	push   0x80
c0008d87:	6a 00                	push   0x0
c0008d89:	50                   	push   eax
c0008d8a:	e8 61 77 ff ff       	call   c00004f0 <memset>
c0008d8f:	83 c4 10             	add    esp,0x10
c0008d92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d96:	05 02 01 00 00       	add    eax,0x102
c0008d9b:	83 ec 04             	sub    esp,0x4
c0008d9e:	68 80 00 00 00       	push   0x80
c0008da3:	6a 00                	push   0x0
c0008da5:	50                   	push   eax
c0008da6:	e8 45 77 ff ff       	call   c00004f0 <memset>
c0008dab:	83 c4 10             	add    esp,0x10
c0008dae:	90                   	nop
c0008daf:	83 c4 04             	add    esp,0x4
c0008db2:	5b                   	pop    ebx
c0008db3:	5e                   	pop    esi
c0008db4:	c3                   	ret    
c0008db5:	90                   	nop

c0008db6 <VgaText::receiveKey(unsigned char)>:
c0008db6:	55                   	push   ebp
c0008db7:	57                   	push   edi
c0008db8:	56                   	push   esi
c0008db9:	53                   	push   ebx
c0008dba:	83 ec 2c             	sub    esp,0x2c
c0008dbd:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0008dc1:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0008dc5:	89 ef                	mov    edi,ebp
c0008dc7:	81 e7 ff 00 00 00    	and    edi,0xff
c0008dcd:	0f 84 66 01 00 00    	je     c0008f39 <VgaText::receiveKey(unsigned char)+0x183>
c0008dd3:	8d b3 82 00 00 00    	lea    esi,[ebx+0x82]
c0008dd9:	83 ff 08             	cmp    edi,0x8
c0008ddc:	75 73                	jne    c0008e51 <VgaText::receiveKey(unsigned char)+0x9b>
c0008dde:	83 ec 0c             	sub    esp,0xc
c0008de1:	56                   	push   esi
c0008de2:	e8 89 77 ff ff       	call   c0000570 <strlen>
c0008de7:	83 c4 10             	add    esp,0x10
c0008dea:	85 c0                	test   eax,eax
c0008dec:	0f 84 02 01 00 00    	je     c0008ef4 <VgaText::receiveKey(unsigned char)+0x13e>
c0008df2:	50                   	push   eax
c0008df3:	50                   	push   eax
c0008df4:	6a 08                	push   0x8
c0008df6:	53                   	push   ebx
c0008df7:	e8 6c fb ff ff       	call   c0008968 <VgaText::putchar(char)>
c0008dfc:	89 34 24             	mov    DWORD PTR [esp],esi
c0008dff:	e8 6c 77 ff ff       	call   c0000570 <strlen>
c0008e04:	83 c4 10             	add    esp,0x10
c0008e07:	0f be 94 03 81 00 00 00 	movsx  edx,BYTE PTR [ebx+eax*1+0x81]
c0008e0f:	83 fa 0d             	cmp    edx,0xd
c0008e12:	89 d0                	mov    eax,edx
c0008e14:	0f 95 c1             	setne  cl
c0008e17:	83 fa 1f             	cmp    edx,0x1f
c0008e1a:	0f 9e c2             	setle  dl
c0008e1d:	0f b6 d2             	movzx  edx,dl
c0008e20:	85 ca                	test   edx,ecx
c0008e22:	74 17                	je     c0008e3b <VgaText::receiveKey(unsigned char)+0x85>
c0008e24:	83 e8 08             	sub    eax,0x8
c0008e27:	3c 02                	cmp    al,0x2
c0008e29:	76 10                	jbe    c0008e3b <VgaText::receiveKey(unsigned char)+0x85>
c0008e2b:	55                   	push   ebp
c0008e2c:	55                   	push   ebp
c0008e2d:	68 bf 0e 02 c0       	push   0xc0020ebf
c0008e32:	53                   	push   ebx
c0008e33:	e8 6e fc ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0008e38:	83 c4 10             	add    esp,0x10
c0008e3b:	83 ec 0c             	sub    esp,0xc
c0008e3e:	56                   	push   esi
c0008e3f:	e8 2c 77 ff ff       	call   c0000570 <strlen>
c0008e44:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c0008e4c:	e9 a0 00 00 00       	jmp    c0008ef1 <VgaText::receiveKey(unsigned char)+0x13b>
c0008e51:	83 ec 0c             	sub    esp,0xc
c0008e54:	8d 83 02 01 00 00    	lea    eax,[ebx+0x102]
c0008e5a:	50                   	push   eax
c0008e5b:	e8 10 77 ff ff       	call   c0000570 <strlen>
c0008e60:	89 34 24             	mov    DWORD PTR [esp],esi
c0008e63:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008e67:	e8 04 77 ff ff       	call   c0000570 <strlen>
c0008e6c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008e70:	83 c4 10             	add    esp,0x10
c0008e73:	8d 44 02 03          	lea    eax,[edx+eax*1+0x3]
c0008e77:	3d 80 00 00 00       	cmp    eax,0x80
c0008e7c:	0f 87 b7 00 00 00    	ja     c0008f39 <VgaText::receiveKey(unsigned char)+0x183>
c0008e82:	8d 45 ff             	lea    eax,[ebp-0x1]
c0008e85:	8d 55 f7             	lea    edx,[ebp-0x9]
c0008e88:	3c 1e                	cmp    al,0x1e
c0008e8a:	0f 96 c0             	setbe  al
c0008e8d:	80 fa 01             	cmp    dl,0x1
c0008e90:	0f 97 c2             	seta   dl
c0008e93:	0f b6 d2             	movzx  edx,dl
c0008e96:	85 c2                	test   edx,eax
c0008e98:	74 2e                	je     c0008ec8 <VgaText::receiveKey(unsigned char)+0x112>
c0008e9a:	83 ff 0d             	cmp    edi,0xd
c0008e9d:	74 29                	je     c0008ec8 <VgaText::receiveKey(unsigned char)+0x112>
c0008e9f:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008ea2:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008ea5:	68 c5 0e 02 c0       	push   0xc0020ec5
c0008eaa:	53                   	push   ebx
c0008eab:	e8 68 fc ff ff       	call   c0008b18 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0008eb0:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008eb3:	8d 45 40             	lea    eax,[ebp+0x40]
c0008eb6:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008eb9:	0f b6 c0             	movzx  eax,al
c0008ebc:	50                   	push   eax
c0008ebd:	53                   	push   ebx
c0008ebe:	e8 d5 f9 ff ff       	call   c0008898 <VgaText::putchar(char, VgaColour, VgaColour)>
c0008ec3:	83 c4 20             	add    esp,0x20
c0008ec6:	eb 11                	jmp    c0008ed9 <VgaText::receiveKey(unsigned char)+0x123>
c0008ec8:	89 e8                	mov    eax,ebp
c0008eca:	51                   	push   ecx
c0008ecb:	0f be c0             	movsx  eax,al
c0008ece:	51                   	push   ecx
c0008ecf:	50                   	push   eax
c0008ed0:	53                   	push   ebx
c0008ed1:	e8 92 fa ff ff       	call   c0008968 <VgaText::putchar(char)>
c0008ed6:	83 c4 10             	add    esp,0x10
c0008ed9:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0008ede:	89 e8                	mov    eax,ebp
c0008ee0:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0008ee4:	52                   	push   edx
c0008ee5:	52                   	push   edx
c0008ee6:	8d 44 24 26          	lea    eax,[esp+0x26]
c0008eea:	50                   	push   eax
c0008eeb:	56                   	push   esi
c0008eec:	e8 4f 79 ff ff       	call   c0000840 <strcat>
c0008ef1:	83 c4 10             	add    esp,0x10
c0008ef4:	8a 93 80 00 00 00    	mov    dl,BYTE PTR [ebx+0x80]
c0008efa:	b0 01                	mov    al,0x1
c0008efc:	83 ff 1c             	cmp    edi,0x1c
c0008eff:	77 0e                	ja     c0008f0f <VgaText::receiveKey(unsigned char)+0x159>
c0008f01:	b8 08 04 00 10       	mov    eax,0x10000408
c0008f06:	89 f9                	mov    ecx,edi
c0008f08:	d3 e8                	shr    eax,cl
c0008f0a:	f7 d0                	not    eax
c0008f0c:	83 e0 01             	and    eax,0x1
c0008f0f:	84 c0                	test   al,al
c0008f11:	74 04                	je     c0008f17 <VgaText::receiveKey(unsigned char)+0x161>
c0008f13:	84 d2                	test   dl,dl
c0008f15:	74 22                	je     c0008f39 <VgaText::receiveKey(unsigned char)+0x183>
c0008f17:	81 c3 02 01 00 00    	add    ebx,0x102
c0008f1d:	50                   	push   eax
c0008f1e:	50                   	push   eax
c0008f1f:	56                   	push   esi
c0008f20:	53                   	push   ebx
c0008f21:	e8 1a 79 ff ff       	call   c0000840 <strcat>
c0008f26:	83 c4 0c             	add    esp,0xc
c0008f29:	68 80 00 00 00       	push   0x80
c0008f2e:	6a 00                	push   0x0
c0008f30:	56                   	push   esi
c0008f31:	e8 ba 75 ff ff       	call   c00004f0 <memset>
c0008f36:	83 c4 10             	add    esp,0x10
c0008f39:	83 c4 2c             	add    esp,0x2c
c0008f3c:	5b                   	pop    ebx
c0008f3d:	5e                   	pop    esi
c0008f3e:	5f                   	pop    edi
c0008f3f:	5d                   	pop    ebp
c0008f40:	c3                   	ret    
c0008f41:	90                   	nop

c0008f42 <VgaText::doUpdate()>:
c0008f42:	c3                   	ret    
c0008f43:	90                   	nop

c0008f44 <TSS::TSS()>:
c0008f44:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008f48:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0008f4f:	90                   	nop
c0008f50:	c3                   	ret    
c0008f51:	90                   	nop
c0008f52:	66 90                	xchg   ax,ax

c0008f54 <TSS::setESP(unsigned long)>:
c0008f54:	55                   	push   ebp
c0008f55:	89 e5                	mov    ebp,esp
c0008f57:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f5a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008f5d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008f60:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008f63:	90                   	nop
c0008f64:	5d                   	pop    ebp
c0008f65:	c3                   	ret    
c0008f66:	66 90                	xchg   ax,ax

c0008f68 <TSS::flush()>:
c0008f68:	55                   	push   ebp
c0008f69:	89 e5                	mov    ebp,esp
c0008f6b:	83 ec 10             	sub    esp,0x10
c0008f6e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f71:	8b 00                	mov    eax,DWORD PTR [eax]
c0008f73:	83 c8 03             	or     eax,0x3
c0008f76:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0008f7a:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0008f7e:	66 89 d0             	mov    ax,dx
c0008f81:	0f 00 d8             	ltr    ax
c0008f84:	90                   	nop
c0008f85:	c9                   	leave  
c0008f86:	c3                   	ret    
c0008f87:	90                   	nop

c0008f88 <TSS::setup(unsigned long, unsigned long)>:
c0008f88:	55                   	push   ebp
c0008f89:	89 e5                	mov    ebp,esp
c0008f8b:	83 ec 18             	sub    esp,0x18
c0008f8e:	83 ec 0c             	sub    esp,0xc
c0008f91:	6a 68                	push   0x68
c0008f93:	e8 1e eb ff ff       	call   c0007ab6 <malloc>
c0008f98:	83 c4 10             	add    esp,0x10
c0008f9b:	89 c2                	mov    edx,eax
c0008f9d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fa0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008fa3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fa6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fa9:	83 ec 04             	sub    esp,0x4
c0008fac:	6a 68                	push   0x68
c0008fae:	6a 00                	push   0x0
c0008fb0:	50                   	push   eax
c0008fb1:	e8 3a 75 ff ff       	call   c00004f0 <memset>
c0008fb6:	83 c4 10             	add    esp,0x10
c0008fb9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fbc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fbf:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0008fc5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fc8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fcb:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0008fd1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fd4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fd7:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008fda:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008fdd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fe0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fe3:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0008fe9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fef:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0008ff5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ff8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008ffb:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0009001:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009004:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009007:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c000900d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009010:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009013:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0009019:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000901c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000901f:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0009025:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009028:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000902b:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000902e:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0009031:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009034:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009037:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000903a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000903d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009040:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009043:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c000904a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000904d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009050:	0f 20 da             	mov    edx,cr3
c0009053:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0009056:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0009059:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000905c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000905f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009062:	83 ec 08             	sub    esp,0x8
c0009065:	50                   	push   eax
c0009066:	8d 45 ec             	lea    eax,[ebp-0x14]
c0009069:	50                   	push   eax
c000906a:	e8 b3 e2 ff ff       	call   c0007322 <GDTEntry::setBase(unsigned int)>
c000906f:	83 c4 10             	add    esp,0x10
c0009072:	83 ec 08             	sub    esp,0x8
c0009075:	6a 68                	push   0x68
c0009077:	8d 45 ec             	lea    eax,[ebp-0x14]
c000907a:	50                   	push   eax
c000907b:	e8 be e2 ff ff       	call   c000733e <GDTEntry::setLimit(unsigned int)>
c0009080:	83 c4 10             	add    esp,0x10
c0009083:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0009087:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000908a:	83 e0 0f             	and    eax,0xf
c000908d:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0009090:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0009093:	83 c8 40             	or     eax,0x40
c0009096:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0009099:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000909e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00090a4:	05 78 01 00 00       	add    eax,0x178
c00090a9:	83 ec 04             	sub    esp,0x4
c00090ac:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00090af:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c00090b2:	50                   	push   eax
c00090b3:	e8 ba e2 ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c00090b8:	83 c4 10             	add    esp,0x10
c00090bb:	89 c2                	mov    edx,eax
c00090bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00090c0:	89 10                	mov    DWORD PTR [eax],edx
c00090c2:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c00090c7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00090cd:	05 78 01 00 00       	add    eax,0x178
c00090d2:	83 ec 0c             	sub    esp,0xc
c00090d5:	50                   	push   eax
c00090d6:	e8 c1 e2 ff ff       	call   c000739c <GDT::flush()>
c00090db:	83 c4 10             	add    esp,0x10
c00090de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00090e1:	8b 00                	mov    eax,DWORD PTR [eax]
c00090e3:	c9                   	leave  
c00090e4:	c3                   	ret    
c00090e5:	90                   	nop

c00090e6 <ReservedFilename::read(unsigned long long, void*, int*)>:
c00090e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00090ea:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00090ee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00090f1:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00090f6:	75 08                	jne    c0009100 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c00090f8:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00090fe:	eb 38                	jmp    c0009138 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0009100:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0009105:	75 17                	jne    c000911e <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0009107:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000910c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000910f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0009115:	8b 10                	mov    edx,DWORD PTR [eax]
c0009117:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000911b:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c000911e:	89 c1                	mov    ecx,eax
c0009120:	83 e1 fd             	and    ecx,0xfffffffd
c0009123:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0009129:	74 cd                	je     c00090f8 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c000912b:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0009130:	83 e0 ef             	and    eax,0xffffffef
c0009133:	83 f8 08             	cmp    eax,0x8
c0009136:	76 c0                	jbe    c00090f8 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0009138:	31 c0                	xor    eax,eax
c000913a:	c3                   	ret    
c000913b:	90                   	nop

c000913c <ReservedFilename::isAtty()>:
c000913c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009140:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009143:	31 c0                	xor    eax,eax
c0009145:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c000914b:	74 09                	je     c0009156 <ReservedFilename::isAtty()+0x1a>
c000914d:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0009153:	0f 94 c0             	sete   al
c0009156:	c3                   	ret    
c0009157:	90                   	nop

c0009158 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0009158:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000915c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009160:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009163:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009167:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000916c:	75 08                	jne    c0009176 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c000916e:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0009174:	eb 3d                	jmp    c00091b3 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0009176:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000917b:	75 17                	jne    c0009194 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c000917d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0009182:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009185:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000918b:	8b 10                	mov    edx,DWORD PTR [eax]
c000918d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009191:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0009194:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0009199:	75 04                	jne    c000919f <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c000919b:	89 0a                	mov    DWORD PTR [edx],ecx
c000919d:	eb 14                	jmp    c00091b3 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000919f:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c00091a4:	74 c8                	je     c000916e <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00091a6:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00091ab:	83 e0 ef             	and    eax,0xffffffef
c00091ae:	83 f8 08             	cmp    eax,0x8
c00091b1:	76 bb                	jbe    c000916e <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00091b3:	31 c0                	xor    eax,eax
c00091b5:	c3                   	ret    

c00091b6 <UnixFile::getFileDescriptor()>:
c00091b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00091ba:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00091bd:	c3                   	ret    

c00091be <UnixFile::UnixFile(int)>:
c00091be:	53                   	push   ebx
c00091bf:	83 ec 28             	sub    esp,0x28
c00091c2:	ba 9c 0f 02 c0       	mov    edx,0xc0020f9c
c00091c7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00091cb:	89 10                	mov    DWORD PTR [eax],edx
c00091cd:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c00091d5:	0f 8f 90 01 00 00    	jg     c000936b <UnixFile::UnixFile(int)+0x1ad>
c00091db:	a1 40 37 02 c0       	mov    eax,ds:0xc0023740
c00091e0:	8d 50 01             	lea    edx,[eax+0x1]
c00091e3:	89 15 40 37 02 c0    	mov    DWORD PTR ds:0xc0023740,edx
c00091e9:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00091ed:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00091f0:	83 ec 08             	sub    esp,0x8
c00091f3:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00091f7:	68 98 6f 02 c0       	push   0xc0026f98
c00091fc:	e8 77 68 01 00       	call   c001fa78 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0009201:	83 c4 10             	add    esp,0x10
c0009204:	a0 94 6f 02 c0       	mov    al,ds:0xc0026f94
c0009209:	83 f0 01             	xor    eax,0x1
c000920c:	0f b6 c0             	movzx  eax,al
c000920f:	85 c0                	test   eax,eax
c0009211:	0f 84 55 01 00 00    	je     c000936c <UnixFile::UnixFile(int)+0x1ae>
c0009217:	c6 05 94 6f 02 c0 01 	mov    BYTE PTR ds:0xc0026f94,0x1
c000921e:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0009226:	83 ec 0c             	sub    esp,0xc
c0009229:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000922d:	e8 84 e8 ff ff       	call   c0007ab6 <malloc>
c0009232:	83 c4 10             	add    esp,0x10
c0009235:	89 c3                	mov    ebx,eax
c0009237:	83 ec 08             	sub    esp,0x8
c000923a:	68 03 ff ff 0f       	push   0xfffff03
c000923f:	53                   	push   ebx
c0009240:	e8 2d 01 00 00       	call   c0009372 <ReservedFilename::ReservedFilename(int)>
c0009245:	83 c4 10             	add    esp,0x10
c0009248:	89 1d 8c 6f 02 c0    	mov    DWORD PTR ds:0xc0026f8c,ebx
c000924e:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0009256:	83 ec 0c             	sub    esp,0xc
c0009259:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000925d:	e8 54 e8 ff ff       	call   c0007ab6 <malloc>
c0009262:	83 c4 10             	add    esp,0x10
c0009265:	89 c3                	mov    ebx,eax
c0009267:	83 ec 08             	sub    esp,0x8
c000926a:	68 01 ff ff 0f       	push   0xfffff01
c000926f:	53                   	push   ebx
c0009270:	e8 fd 00 00 00       	call   c0009372 <ReservedFilename::ReservedFilename(int)>
c0009275:	83 c4 10             	add    esp,0x10
c0009278:	89 1d 90 6f 02 c0    	mov    DWORD PTR ds:0xc0026f90,ebx
c000927e:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0009286:	83 ec 0c             	sub    esp,0xc
c0009289:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000928d:	e8 24 e8 ff ff       	call   c0007ab6 <malloc>
c0009292:	83 c4 10             	add    esp,0x10
c0009295:	89 c3                	mov    ebx,eax
c0009297:	83 ec 08             	sub    esp,0x8
c000929a:	68 00 ff ff 0f       	push   0xfffff00
c000929f:	53                   	push   ebx
c00092a0:	e8 cd 00 00 00       	call   c0009372 <ReservedFilename::ReservedFilename(int)>
c00092a5:	83 c4 10             	add    esp,0x10
c00092a8:	89 1d 84 6f 02 c0    	mov    DWORD PTR ds:0xc0026f84,ebx
c00092ae:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c00092b6:	83 ec 0c             	sub    esp,0xc
c00092b9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092bd:	e8 f4 e7 ff ff       	call   c0007ab6 <malloc>
c00092c2:	83 c4 10             	add    esp,0x10
c00092c5:	89 c3                	mov    ebx,eax
c00092c7:	83 ec 08             	sub    esp,0x8
c00092ca:	68 02 ff ff 0f       	push   0xfffff02
c00092cf:	53                   	push   ebx
c00092d0:	e8 9d 00 00 00       	call   c0009372 <ReservedFilename::ReservedFilename(int)>
c00092d5:	83 c4 10             	add    esp,0x10
c00092d8:	89 1d 88 6f 02 c0    	mov    DWORD PTR ds:0xc0026f88,ebx
c00092de:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00092e6:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c00092eb:	7f 7f                	jg     c000936c <UnixFile::UnixFile(int)+0x1ae>
c00092ed:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c00092f5:	83 ec 0c             	sub    esp,0xc
c00092f8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00092fc:	e8 b5 e7 ff ff       	call   c0007ab6 <malloc>
c0009301:	83 c4 10             	add    esp,0x10
c0009304:	89 c3                	mov    ebx,eax
c0009306:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000930a:	05 10 ff ff 0f       	add    eax,0xfffff10
c000930f:	83 ec 08             	sub    esp,0x8
c0009312:	50                   	push   eax
c0009313:	53                   	push   ebx
c0009314:	e8 59 00 00 00       	call   c0009372 <ReservedFilename::ReservedFilename(int)>
c0009319:	83 c4 10             	add    esp,0x10
c000931c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009320:	89 1c 85 60 6f 02 c0 	mov    DWORD PTR [eax*4-0x3ffd90a0],ebx
c0009327:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c000932f:	83 ec 0c             	sub    esp,0xc
c0009332:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009336:	e8 7b e7 ff ff       	call   c0007ab6 <malloc>
c000933b:	83 c4 10             	add    esp,0x10
c000933e:	89 c3                	mov    ebx,eax
c0009340:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009344:	05 20 ff ff 0f       	add    eax,0xfffff20
c0009349:	83 ec 08             	sub    esp,0x8
c000934c:	50                   	push   eax
c000934d:	53                   	push   ebx
c000934e:	e8 1f 00 00 00       	call   c0009372 <ReservedFilename::ReservedFilename(int)>
c0009353:	83 c4 10             	add    esp,0x10
c0009356:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000935a:	89 1c 85 20 6f 02 c0 	mov    DWORD PTR [eax*4-0x3ffd90e0],ebx
c0009361:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009366:	e9 7b ff ff ff       	jmp    c00092e6 <UnixFile::UnixFile(int)+0x128>
c000936b:	90                   	nop
c000936c:	83 c4 28             	add    esp,0x28
c000936f:	5b                   	pop    ebx
c0009370:	c3                   	ret    
c0009371:	90                   	nop

c0009372 <ReservedFilename::ReservedFilename(int)>:
c0009372:	83 ec 0c             	sub    esp,0xc
c0009375:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009379:	83 ec 08             	sub    esp,0x8
c000937c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009380:	50                   	push   eax
c0009381:	e8 38 fe ff ff       	call   c00091be <UnixFile::UnixFile(int)>
c0009386:	83 c4 10             	add    esp,0x10
c0009389:	ba b8 0f 02 c0       	mov    edx,0xc0020fb8
c000938e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009392:	89 10                	mov    DWORD PTR [eax],edx
c0009394:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009398:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000939c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000939f:	90                   	nop
c00093a0:	83 c4 0c             	add    esp,0xc
c00093a3:	c3                   	ret    

c00093a4 <UnixFile::~UnixFile()>:
c00093a4:	83 ec 1c             	sub    esp,0x1c
c00093a7:	ba 9c 0f 02 c0       	mov    edx,0xc0020f9c
c00093ac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00093b0:	89 10                	mov    DWORD PTR [eax],edx
c00093b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00093b6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00093b9:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c00093be:	7f 76                	jg     c0009436 <UnixFile::~UnixFile()+0x92>
c00093c0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00093c8:	83 ec 0c             	sub    esp,0xc
c00093cb:	68 98 6f 02 c0       	push   0xc0026f98
c00093d0:	e8 77 67 01 00       	call   c001fb4c <LinkedList<UnixFile>::getFirstElement()>
c00093d5:	83 c4 10             	add    esp,0x10
c00093d8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00093dc:	83 ec 0c             	sub    esp,0xc
c00093df:	68 98 6f 02 c0       	push   0xc0026f98
c00093e4:	e8 6b 67 01 00       	call   c001fb54 <LinkedList<UnixFile>::removeFirst()>
c00093e9:	83 c4 10             	add    esp,0x10
c00093ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00093f0:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c00093f4:	74 43                	je     c0009439 <UnixFile::~UnixFile()+0x95>
c00093f6:	83 ec 08             	sub    esp,0x8
c00093f9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00093fd:	68 98 6f 02 c0       	push   0xc0026f98
c0009402:	e8 71 66 01 00       	call   c001fa78 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0009407:	83 c4 10             	add    esp,0x10
c000940a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000940e:	8d 50 01             	lea    edx,[eax+0x1]
c0009411:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009415:	3d 20 a1 07 00       	cmp    eax,0x7a120
c000941a:	0f 94 c0             	sete   al
c000941d:	0f b6 c0             	movzx  eax,al
c0009420:	85 c0                	test   eax,eax
c0009422:	74 a4                	je     c00093c8 <UnixFile::~UnixFile()+0x24>
c0009424:	83 ec 0c             	sub    esp,0xc
c0009427:	68 74 0f 02 c0       	push   0xc0020f74
c000942c:	e8 62 82 00 00       	call   c0011693 <KePanic(char const*)>
c0009431:	83 c4 10             	add    esp,0x10
c0009434:	eb 92                	jmp    c00093c8 <UnixFile::~UnixFile()+0x24>
c0009436:	90                   	nop
c0009437:	eb 01                	jmp    c000943a <UnixFile::~UnixFile()+0x96>
c0009439:	90                   	nop
c000943a:	90                   	nop
c000943b:	83 c4 1c             	add    esp,0x1c
c000943e:	c3                   	ret    
c000943f:	90                   	nop

c0009440 <UnixFile::~UnixFile()>:
c0009440:	83 ec 0c             	sub    esp,0xc
c0009443:	83 ec 0c             	sub    esp,0xc
c0009446:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000944a:	e8 55 ff ff ff       	call   c00093a4 <UnixFile::~UnixFile()>
c000944f:	83 c4 10             	add    esp,0x10
c0009452:	83 ec 08             	sub    esp,0x8
c0009455:	6a 0c                	push   0xc
c0009457:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000945b:	e8 b8 13 00 00       	call   c000a818 <operator delete(void*, unsigned long)>
c0009460:	83 c4 10             	add    esp,0x10
c0009463:	83 c4 0c             	add    esp,0xc
c0009466:	c3                   	ret    
c0009467:	90                   	nop

c0009468 <ReservedFilename::~ReservedFilename()>:
c0009468:	83 ec 0c             	sub    esp,0xc
c000946b:	ba b8 0f 02 c0       	mov    edx,0xc0020fb8
c0009470:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009474:	89 10                	mov    DWORD PTR [eax],edx
c0009476:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000947a:	83 ec 0c             	sub    esp,0xc
c000947d:	50                   	push   eax
c000947e:	e8 21 ff ff ff       	call   c00093a4 <UnixFile::~UnixFile()>
c0009483:	83 c4 10             	add    esp,0x10
c0009486:	90                   	nop
c0009487:	83 c4 0c             	add    esp,0xc
c000948a:	c3                   	ret    
c000948b:	90                   	nop

c000948c <ReservedFilename::~ReservedFilename()>:
c000948c:	83 ec 0c             	sub    esp,0xc
c000948f:	83 ec 0c             	sub    esp,0xc
c0009492:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009496:	e8 cd ff ff ff       	call   c0009468 <ReservedFilename::~ReservedFilename()>
c000949b:	83 c4 10             	add    esp,0x10
c000949e:	83 ec 08             	sub    esp,0x8
c00094a1:	6a 0c                	push   0xc
c00094a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00094a7:	e8 6c 13 00 00       	call   c000a818 <operator delete(void*, unsigned long)>
c00094ac:	83 c4 10             	add    esp,0x10
c00094af:	83 c4 0c             	add    esp,0xc
c00094b2:	c3                   	ret    

c00094b3 <KeGetFileFromDescriptor(int)>:
c00094b3:	53                   	push   ebx
c00094b4:	83 ec 08             	sub    esp,0x8
c00094b7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00094bb:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c00094c1:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c00094c7:	7f 2c                	jg     c00094f5 <KeGetFileFromDescriptor(int)+0x42>
c00094c9:	83 ec 0c             	sub    esp,0xc
c00094cc:	68 98 6f 02 c0       	push   0xc0026f98
c00094d1:	e8 76 66 01 00       	call   c001fb4c <LinkedList<UnixFile>::getFirstElement()>
c00094d6:	83 c4 10             	add    esp,0x10
c00094d9:	85 c0                	test   eax,eax
c00094db:	75 04                	jne    c00094e1 <KeGetFileFromDescriptor(int)+0x2e>
c00094dd:	31 c0                	xor    eax,eax
c00094df:	eb 6e                	jmp    c000954f <KeGetFileFromDescriptor(int)+0x9c>
c00094e1:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c00094e4:	74 69                	je     c000954f <KeGetFileFromDescriptor(int)+0x9c>
c00094e6:	52                   	push   edx
c00094e7:	52                   	push   edx
c00094e8:	50                   	push   eax
c00094e9:	68 98 6f 02 c0       	push   0xc0026f98
c00094ee:	e8 03 67 01 00       	call   c001fbf6 <LinkedList<UnixFile>::getNext(UnixFile*)>
c00094f3:	eb e1                	jmp    c00094d6 <KeGetFileFromDescriptor(int)+0x23>
c00094f5:	a1 8c 6f 02 c0       	mov    eax,ds:0xc0026f8c
c00094fa:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0009500:	74 4d                	je     c000954f <KeGetFileFromDescriptor(int)+0x9c>
c0009502:	a1 90 6f 02 c0       	mov    eax,ds:0xc0026f90
c0009507:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c000950d:	74 40                	je     c000954f <KeGetFileFromDescriptor(int)+0x9c>
c000950f:	a1 88 6f 02 c0       	mov    eax,ds:0xc0026f88
c0009514:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c000951a:	74 33                	je     c000954f <KeGetFileFromDescriptor(int)+0x9c>
c000951c:	a1 84 6f 02 c0       	mov    eax,ds:0xc0026f84
c0009521:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0009527:	74 26                	je     c000954f <KeGetFileFromDescriptor(int)+0x9c>
c0009529:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c000952f:	83 f8 08             	cmp    eax,0x8
c0009532:	77 09                	ja     c000953d <KeGetFileFromDescriptor(int)+0x8a>
c0009534:	8b 04 85 60 6f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd90a0]
c000953b:	eb 12                	jmp    c000954f <KeGetFileFromDescriptor(int)+0x9c>
c000953d:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0009543:	83 fb 08             	cmp    ebx,0x8
c0009546:	77 95                	ja     c00094dd <KeGetFileFromDescriptor(int)+0x2a>
c0009548:	8b 04 9d 20 6f 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd90e0]
c000954f:	83 c4 08             	add    esp,0x8
c0009552:	5b                   	pop    ebx
c0009553:	c3                   	ret    

c0009554 <__static_initialization_and_destruction_0(int, int)>:
c0009554:	83 ec 0c             	sub    esp,0xc
c0009557:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000955c:	75 34                	jne    c0009592 <__static_initialization_and_destruction_0(int, int)+0x3e>
c000955e:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0009566:	75 2a                	jne    c0009592 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0009568:	83 ec 0c             	sub    esp,0xc
c000956b:	68 98 6f 02 c0       	push   0xc0026f98
c0009570:	e8 c1 64 01 00       	call   c001fa36 <LinkedList<UnixFile>::LinkedList()>
c0009575:	83 c4 10             	add    esp,0x10
c0009578:	83 ec 04             	sub    esp,0x4
c000957b:	68 d0 36 02 c0       	push   0xc00236d0
c0009580:	68 98 6f 02 c0       	push   0xc0026f98
c0009585:	68 34 fa 01 c0       	push   0xc001fa34
c000958a:	e8 39 12 00 00       	call   c000a7c8 <__cxa_atexit>
c000958f:	83 c4 10             	add    esp,0x10
c0009592:	90                   	nop
c0009593:	83 c4 0c             	add    esp,0xc
c0009596:	c3                   	ret    

c0009597 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0009597:	83 ec 0c             	sub    esp,0xc
c000959a:	83 ec 08             	sub    esp,0x8
c000959d:	68 ff ff 00 00       	push   0xffff
c00095a2:	6a 01                	push   0x1
c00095a4:	e8 ab ff ff ff       	call   c0009554 <__static_initialization_and_destruction_0(int, int)>
c00095a9:	83 c4 10             	add    esp,0x10
c00095ac:	83 c4 0c             	add    esp,0xc
c00095af:	c3                   	ret    

c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c00095b0:	53                   	push   ebx
c00095b1:	8b 15 48 37 02 c0    	mov    edx,DWORD PTR ds:0xc0023748
c00095b7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00095bb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00095bf:	8d 98 00 80 f3 ff    	lea    ebx,[eax-0xc8000]
c00095c5:	89 d8                	mov    eax,ebx
c00095c7:	d1 e8                	shr    eax,1
c00095c9:	01 d0                	add    eax,edx
c00095cb:	80 e3 01             	and    bl,0x1
c00095ce:	8a 10                	mov    dl,BYTE PTR [eax]
c00095d0:	75 09                	jne    c00095db <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x2b>
c00095d2:	83 e2 f0             	and    edx,0xfffffff0
c00095d5:	09 ca                	or     edx,ecx
c00095d7:	88 10                	mov    BYTE PTR [eax],dl
c00095d9:	5b                   	pop    ebx
c00095da:	c3                   	ret    
c00095db:	83 e2 0f             	and    edx,0xf
c00095de:	0f b6 c9             	movzx  ecx,cl
c00095e1:	c1 e1 04             	shl    ecx,0x4
c00095e4:	09 ca                	or     edx,ecx
c00095e6:	88 10                	mov    BYTE PTR [eax],dl
c00095e8:	5b                   	pop    ebx
c00095e9:	c3                   	ret    

c00095ea <Virt::getPageState(unsigned long)>:
c00095ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00095ee:	8b 0d 48 37 02 c0    	mov    ecx,DWORD PTR ds:0xc0023748
c00095f4:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c00095fa:	89 d0                	mov    eax,edx
c00095fc:	d1 e8                	shr    eax,1
c00095fe:	80 e2 01             	and    dl,0x1
c0009601:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0009604:	74 03                	je     c0009609 <Virt::getPageState(unsigned long)+0x1f>
c0009606:	c1 e8 04             	shr    eax,0x4
c0009609:	83 e0 0f             	and    eax,0xf
c000960c:	c3                   	ret    

c000960d <Virt::allocateKernelVirtualPages(int)>:
c000960d:	55                   	push   ebp
c000960e:	31 ed                	xor    ebp,ebp
c0009610:	57                   	push   edi
c0009611:	31 ff                	xor    edi,edi
c0009613:	56                   	push   esi
c0009614:	53                   	push   ebx
c0009615:	31 db                	xor    ebx,ebx
c0009617:	83 ec 0c             	sub    esp,0xc
c000961a:	8b 35 44 37 02 c0    	mov    esi,DWORD PTR ds:0xc0023744
c0009620:	56                   	push   esi
c0009621:	e8 c4 ff ff ff       	call   c00095ea <Virt::getPageState(unsigned long)>
c0009626:	5a                   	pop    edx
c0009627:	84 c0                	test   al,al
c0009629:	75 41                	jne    c000966c <Virt::allocateKernelVirtualPages(int)+0x5f>
c000962b:	85 db                	test   ebx,ebx
c000962d:	75 02                	jne    c0009631 <Virt::allocateKernelVirtualPages(int)+0x24>
c000962f:	89 f5                	mov    ebp,esi
c0009631:	83 c3 01             	add    ebx,0x1
c0009634:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0009638:	74 5f                	je     c0009699 <Virt::allocateKernelVirtualPages(int)+0x8c>
c000963a:	83 c6 01             	add    esi,0x1
c000963d:	81 fe ff ff 0e 00    	cmp    esi,0xeffff
c0009643:	76 34                	jbe    c0009679 <Virt::allocateKernelVirtualPages(int)+0x6c>
c0009645:	c7 05 44 37 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0023744,0xc8000
c000964f:	f7 c7 01 00 00 00    	test   edi,0x1
c0009655:	75 2a                	jne    c0009681 <Virt::allocateKernelVirtualPages(int)+0x74>
c0009657:	be 00 80 0c 00       	mov    esi,0xc8000
c000965c:	bf 01 00 00 00       	mov    edi,0x1
c0009661:	56                   	push   esi
c0009662:	e8 83 ff ff ff       	call   c00095ea <Virt::getPageState(unsigned long)>
c0009667:	5a                   	pop    edx
c0009668:	84 c0                	test   al,al
c000966a:	74 bf                	je     c000962b <Virt::allocateKernelVirtualPages(int)+0x1e>
c000966c:	31 db                	xor    ebx,ebx
c000966e:	83 c6 01             	add    esi,0x1
c0009671:	81 fe ff ff 0e 00    	cmp    esi,0xeffff
c0009677:	77 cc                	ja     c0009645 <Virt::allocateKernelVirtualPages(int)+0x38>
c0009679:	89 35 44 37 02 c0    	mov    DWORD PTR ds:0xc0023744,esi
c000967f:	eb 9f                	jmp    c0009620 <Virt::allocateKernelVirtualPages(int)+0x13>
c0009681:	83 ec 0c             	sub    esp,0xc
c0009684:	68 cc 0f 02 c0       	push   0xc0020fcc
c0009689:	e8 05 80 00 00       	call   c0011693 <KePanic(char const*)>
c000968e:	8b 35 44 37 02 c0    	mov    esi,DWORD PTR ds:0xc0023744
c0009694:	83 c4 10             	add    esp,0x10
c0009697:	eb 87                	jmp    c0009620 <Virt::allocateKernelVirtualPages(int)+0x13>
c0009699:	89 2d 44 37 02 c0    	mov    DWORD PTR ds:0xc0023744,ebp
c000969f:	83 fb 01             	cmp    ebx,0x1
c00096a2:	74 6f                	je     c0009713 <Virt::allocateKernelVirtualPages(int)+0x106>
c00096a4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00096a8:	85 c9                	test   ecx,ecx
c00096aa:	74 49                	je     c00096f5 <Virt::allocateKernelVirtualPages(int)+0xe8>
c00096ac:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00096b0:	89 e8                	mov    eax,ebp
c00096b2:	31 db                	xor    ebx,ebx
c00096b4:	8d 79 ff             	lea    edi,[ecx-0x1]
c00096b7:	eb 18                	jmp    c00096d1 <Virt::allocateKernelVirtualPages(int)+0xc4>
c00096b9:	6a 01                	push   0x1
c00096bb:	83 c3 01             	add    ebx,0x1
c00096be:	50                   	push   eax
c00096bf:	e8 ec fe ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096c4:	58                   	pop    eax
c00096c5:	5a                   	pop    edx
c00096c6:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c00096ca:	74 29                	je     c00096f5 <Virt::allocateKernelVirtualPages(int)+0xe8>
c00096cc:	a1 44 37 02 c0       	mov    eax,ds:0xc0023744
c00096d1:	8d 50 01             	lea    edx,[eax+0x1]
c00096d4:	85 db                	test   ebx,ebx
c00096d6:	89 15 44 37 02 c0    	mov    DWORD PTR ds:0xc0023744,edx
c00096dc:	74 24                	je     c0009702 <Virt::allocateKernelVirtualPages(int)+0xf5>
c00096de:	39 df                	cmp    edi,ebx
c00096e0:	75 d7                	jne    c00096b9 <Virt::allocateKernelVirtualPages(int)+0xac>
c00096e2:	6a 03                	push   0x3
c00096e4:	83 c3 01             	add    ebx,0x1
c00096e7:	50                   	push   eax
c00096e8:	e8 c3 fe ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096ed:	59                   	pop    ecx
c00096ee:	5e                   	pop    esi
c00096ef:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c00096f3:	75 d7                	jne    c00096cc <Virt::allocateKernelVirtualPages(int)+0xbf>
c00096f5:	83 c4 0c             	add    esp,0xc
c00096f8:	89 e8                	mov    eax,ebp
c00096fa:	5b                   	pop    ebx
c00096fb:	c1 e0 0c             	shl    eax,0xc
c00096fe:	5e                   	pop    esi
c00096ff:	5f                   	pop    edi
c0009700:	5d                   	pop    ebp
c0009701:	c3                   	ret    
c0009702:	6a 02                	push   0x2
c0009704:	bb 01 00 00 00       	mov    ebx,0x1
c0009709:	50                   	push   eax
c000970a:	e8 a1 fe ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000970f:	58                   	pop    eax
c0009710:	5a                   	pop    edx
c0009711:	eb b9                	jmp    c00096cc <Virt::allocateKernelVirtualPages(int)+0xbf>
c0009713:	6a 04                	push   0x4
c0009715:	8d 45 01             	lea    eax,[ebp+0x1]
c0009718:	55                   	push   ebp
c0009719:	a3 44 37 02 c0       	mov    ds:0xc0023744,eax
c000971e:	e8 8d fe ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009723:	5b                   	pop    ebx
c0009724:	89 e8                	mov    eax,ebp
c0009726:	5e                   	pop    esi
c0009727:	c1 e0 0c             	shl    eax,0xc
c000972a:	83 c4 0c             	add    esp,0xc
c000972d:	5b                   	pop    ebx
c000972e:	5e                   	pop    esi
c000972f:	5f                   	pop    edi
c0009730:	5d                   	pop    ebp
c0009731:	c3                   	ret    

c0009732 <Virt::freeSwapfilePage(unsigned long)>:
c0009732:	53                   	push   ebx
c0009733:	8b 15 ac 6f 02 c0    	mov    edx,DWORD PTR ds:0xc0026fac
c0009739:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000973d:	b8 01 00 00 00       	mov    eax,0x1
c0009742:	89 cb                	mov    ebx,ecx
c0009744:	d3 e0                	shl    eax,cl
c0009746:	c1 eb 05             	shr    ebx,0x5
c0009749:	f7 d0                	not    eax
c000974b:	8b 0c 9a             	mov    ecx,DWORD PTR [edx+ebx*4]
c000974e:	21 c1                	and    ecx,eax
c0009750:	89 0c 9a             	mov    DWORD PTR [edx+ebx*4],ecx
c0009753:	5b                   	pop    ebx
c0009754:	c3                   	ret    

c0009755 <Virt::swapIDToSector(unsigned long)>:
c0009755:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009759:	8b 15 4c 37 02 c0    	mov    edx,DWORD PTR ds:0xc002374c
c000975f:	8b 0d 54 37 02 c0    	mov    ecx,DWORD PTR ds:0xc0023754
c0009765:	0f af c2             	imul   eax,edx
c0009768:	01 c8                	add    eax,ecx
c000976a:	c3                   	ret    

c000976b <Virt::allocateSwapfilePage()>:
c000976b:	55                   	push   ebp
c000976c:	31 d2                	xor    edx,edx
c000976e:	57                   	push   edi
c000976f:	56                   	push   esi
c0009770:	53                   	push   ebx
c0009771:	83 ec 0c             	sub    esp,0xc
c0009774:	8b 0d 4c 37 02 c0    	mov    ecx,DWORD PTR ds:0xc002374c
c000977a:	a1 50 37 02 c0       	mov    eax,ds:0xc0023750
c000977f:	f7 f1                	div    ecx
c0009781:	39 0d 50 37 02 c0    	cmp    DWORD PTR ds:0xc0023750,ecx
c0009787:	72 2f                	jb     c00097b8 <Virt::allocateSwapfilePage()+0x4d>
c0009789:	8b 35 ac 6f 02 c0    	mov    esi,DWORD PTR ds:0xc0026fac
c000978f:	8b 16                	mov    edx,DWORD PTR [esi]
c0009791:	f6 c2 01             	test   dl,0x1
c0009794:	74 3e                	je     c00097d4 <Virt::allocateSwapfilePage()+0x69>
c0009796:	31 c9                	xor    ecx,ecx
c0009798:	bf 01 00 00 00       	mov    edi,0x1
c000979d:	eb 12                	jmp    c00097b1 <Virt::allocateSwapfilePage()+0x46>
c000979f:	89 fd                	mov    ebp,edi
c00097a1:	89 ca                	mov    edx,ecx
c00097a3:	d3 e5                	shl    ebp,cl
c00097a5:	c1 ea 05             	shr    edx,0x5
c00097a8:	8d 1c 96             	lea    ebx,[esi+edx*4]
c00097ab:	8b 13                	mov    edx,DWORD PTR [ebx]
c00097ad:	85 ea                	test   edx,ebp
c00097af:	74 2c                	je     c00097dd <Virt::allocateSwapfilePage()+0x72>
c00097b1:	83 c1 01             	add    ecx,0x1
c00097b4:	39 c8                	cmp    eax,ecx
c00097b6:	77 e7                	ja     c000979f <Virt::allocateSwapfilePage()+0x34>
c00097b8:	83 ec 0c             	sub    esp,0xc
c00097bb:	68 60 12 02 c0       	push   0xc0021260
c00097c0:	e8 ce 7e 00 00       	call   c0011693 <KePanic(char const*)>
c00097c5:	83 c4 10             	add    esp,0x10
c00097c8:	31 c9                	xor    ecx,ecx
c00097ca:	83 c4 0c             	add    esp,0xc
c00097cd:	89 c8                	mov    eax,ecx
c00097cf:	5b                   	pop    ebx
c00097d0:	5e                   	pop    esi
c00097d1:	5f                   	pop    edi
c00097d2:	5d                   	pop    ebp
c00097d3:	c3                   	ret    
c00097d4:	89 f3                	mov    ebx,esi
c00097d6:	bd 01 00 00 00       	mov    ebp,0x1
c00097db:	31 c9                	xor    ecx,ecx
c00097dd:	09 ea                	or     edx,ebp
c00097df:	89 c8                	mov    eax,ecx
c00097e1:	89 13                	mov    DWORD PTR [ebx],edx
c00097e3:	83 c4 0c             	add    esp,0xc
c00097e6:	5b                   	pop    ebx
c00097e7:	5e                   	pop    esi
c00097e8:	5f                   	pop    edi
c00097e9:	5d                   	pop    ebp
c00097ea:	c3                   	ret    

c00097eb <Virt::virtualMemorySetup()>:
c00097eb:	53                   	push   ebx
c00097ec:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00097f1:	6a 0f                	push   0xf
c00097f3:	53                   	push   ebx
c00097f4:	83 c3 01             	add    ebx,0x1
c00097f7:	e8 b4 fd ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00097fc:	58                   	pop    eax
c00097fd:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0009803:	5a                   	pop    edx
c0009804:	75 eb                	jne    c00097f1 <Virt::virtualMemorySetup()+0x6>
c0009806:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000980b:	6a 00                	push   0x0
c000980d:	53                   	push   ebx
c000980e:	83 c3 01             	add    ebx,0x1
c0009811:	e8 9a fd ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009816:	59                   	pop    ecx
c0009817:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000981d:	58                   	pop    eax
c000981e:	75 eb                	jne    c000980b <Virt::virtualMemorySetup()+0x20>
c0009820:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0009825:	6a 0f                	push   0xf
c0009827:	53                   	push   ebx
c0009828:	83 c3 01             	add    ebx,0x1
c000982b:	e8 80 fd ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009830:	58                   	pop    eax
c0009831:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0009837:	5a                   	pop    edx
c0009838:	75 eb                	jne    c0009825 <Virt::virtualMemorySetup()+0x3a>
c000983a:	5b                   	pop    ebx
c000983b:	c3                   	ret    

c000983c <Virt::setupPageSwapping(int)>:
c000983c:	53                   	push   ebx
c000983d:	83 ec 0c             	sub    esp,0xc
c0009840:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0009844:	a1 88 b8 02 c0       	mov    eax,ds:0xc002b888
c0009849:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000984f:	8b 10                	mov    edx,DWORD PTR [eax]
c0009851:	53                   	push   ebx
c0009852:	c1 e3 0b             	shl    ebx,0xb
c0009855:	68 77 12 02 c0       	push   0xc0021277
c000985a:	50                   	push   eax
c000985b:	ff 52 60             	call   DWORD PTR [edx+0x60]
c000985e:	89 1d 50 37 02 c0    	mov    DWORD PTR ds:0xc0023750,ebx
c0009864:	c6 05 58 37 02 c0 43 	mov    BYTE PTR ds:0xc0023758,0x43
c000986b:	c1 eb 08             	shr    ebx,0x8
c000986e:	a3 54 37 02 c0       	mov    ds:0xc0023754,eax
c0009873:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009876:	c7 05 4c 37 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002374c,0x8
c0009880:	e8 31 e2 ff ff       	call   c0007ab6 <malloc>
c0009885:	83 c4 0c             	add    esp,0xc
c0009888:	89 c1                	mov    ecx,eax
c000988a:	a3 ac 6f 02 c0       	mov    ds:0xc0026fac,eax
c000988f:	31 d2                	xor    edx,edx
c0009891:	a1 50 37 02 c0       	mov    eax,ds:0xc0023750
c0009896:	f7 35 4c 37 02 c0    	div    DWORD PTR ds:0xc002374c
c000989c:	c1 e8 05             	shr    eax,0x5
c000989f:	50                   	push   eax
c00098a0:	6a 00                	push   0x0
c00098a2:	51                   	push   ecx
c00098a3:	e8 48 6c ff ff       	call   c00004f0 <memset>
c00098a8:	83 c4 18             	add    esp,0x18
c00098ab:	5b                   	pop    ebx
c00098ac:	c3                   	ret    
c00098ad:	90                   	nop

c00098ae <VAS::setCPUSpecific(unsigned long)>:
c00098ae:	c3                   	ret    
c00098af:	90                   	nop

c00098b0 <VAS::VAS(VAS*)>:
c00098b0:	83 ec 0c             	sub    esp,0xc
c00098b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00098b7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00098be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00098c2:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00098c9:	83 ec 0c             	sub    esp,0xc
c00098cc:	68 ec 0f 02 c0       	push   0xc0020fec
c00098d1:	e8 bd 7d 00 00       	call   c0011693 <KePanic(char const*)>
c00098d6:	83 c4 10             	add    esp,0x10
c00098d9:	90                   	nop
c00098da:	83 c4 0c             	add    esp,0xc
c00098dd:	c3                   	ret    

c00098de <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c00098de:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00098e2:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c00098e7:	89 c2                	mov    edx,eax
c00098e9:	c1 e8 0a             	shr    eax,0xa
c00098ec:	c1 ea 16             	shr    edx,0x16
c00098ef:	83 f9 01             	cmp    ecx,0x1
c00098f2:	19 c9                	sbb    ecx,ecx
c00098f4:	c1 e2 0c             	shl    edx,0xc
c00098f7:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c00098fd:	25 fc 0f 00 00       	and    eax,0xffc
c0009902:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0009909:	01 d0                	add    eax,edx
c000990b:	c3                   	ret    

c000990c <VAS::getPageTableEntry(unsigned long)>:
c000990c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009910:	89 ca                	mov    edx,ecx
c0009912:	c1 e9 0a             	shr    ecx,0xa
c0009915:	c1 ea 16             	shr    edx,0x16
c0009918:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c000991e:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0009924:	c1 e0 0c             	shl    eax,0xc
c0009927:	8d 04 08             	lea    eax,[eax+ecx*1]
c000992a:	c3                   	ret    

c000992b <Virt::freeKernelVirtualPages(unsigned long)>:
c000992b:	55                   	push   ebp
c000992c:	57                   	push   edi
c000992d:	bf 01 00 00 00       	mov    edi,0x1
c0009932:	56                   	push   esi
c0009933:	53                   	push   ebx
c0009934:	83 ec 1c             	sub    esp,0x1c
c0009937:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000993b:	c1 ee 0c             	shr    esi,0xc
c000993e:	eb 48                	jmp    c0009988 <Virt::freeKernelVirtualPages(unsigned long)+0x5d>
c0009940:	83 ec 08             	sub    esp,0x8
c0009943:	a1 b0 6f 02 c0       	mov    eax,ds:0xc0026fb0
c0009948:	55                   	push   ebp
c0009949:	50                   	push   eax
c000994a:	e8 bd ff ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c000994f:	83 c4 10             	add    esp,0x10
c0009952:	8b 10                	mov    edx,DWORD PTR [eax]
c0009954:	f6 c6 04             	test   dh,0x4
c0009957:	75 70                	jne    c00099c9 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c0009959:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000995f:	83 fb 04             	cmp    ebx,0x4
c0009962:	0f 84 8a 00 00 00    	je     c00099f2 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0009968:	83 fb 02             	cmp    ebx,0x2
c000996b:	0f 84 9a 00 00 00    	je     c0009a0b <Virt::freeKernelVirtualPages(unsigned long)+0xe0>
c0009971:	83 fb 03             	cmp    ebx,0x3
c0009974:	0f 84 be 00 00 00    	je     c0009a38 <Virt::freeKernelVirtualPages(unsigned long)+0x10d>
c000997a:	83 fb 01             	cmp    ebx,0x1
c000997d:	0f 84 a2 00 00 00    	je     c0009a25 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c0009983:	83 c6 01             	add    esi,0x1
c0009986:	31 ff                	xor    edi,edi
c0009988:	56                   	push   esi
c0009989:	89 f5                	mov    ebp,esi
c000998b:	e8 5a fc ff ff       	call   c00095ea <Virt::getPageState(unsigned long)>
c0009990:	c1 e5 0c             	shl    ebp,0xc
c0009993:	0f b6 d8             	movzx  ebx,al
c0009996:	5a                   	pop    edx
c0009997:	85 db                	test   ebx,ebx
c0009999:	75 a5                	jne    c0009940 <Virt::freeKernelVirtualPages(unsigned long)+0x15>
c000999b:	83 ec 0c             	sub    esp,0xc
c000999e:	68 8e 12 02 c0       	push   0xc002128e
c00099a3:	e8 eb 7c 00 00       	call   c0011693 <KePanic(char const*)>
c00099a8:	5a                   	pop    edx
c00099a9:	59                   	pop    ecx
c00099aa:	55                   	push   ebp
c00099ab:	8b 2d b0 6f 02 c0    	mov    ebp,DWORD PTR ds:0xc0026fb0
c00099b1:	55                   	push   ebp
c00099b2:	e8 55 ff ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c00099b7:	83 c4 10             	add    esp,0x10
c00099ba:	8b 10                	mov    edx,DWORD PTR [eax]
c00099bc:	f6 c6 04             	test   dh,0x4
c00099bf:	75 08                	jne    c00099c9 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c00099c1:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00099c7:	eb ba                	jmp    c0009983 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c00099c9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00099cd:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00099d3:	83 ec 0c             	sub    esp,0xc
c00099d6:	52                   	push   edx
c00099d7:	e8 7a e3 ff ff       	call   c0007d56 <Phys::freePage(unsigned long)>
c00099dc:	83 c4 10             	add    esp,0x10
c00099df:	83 fb 04             	cmp    ebx,0x4
c00099e2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00099e6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00099ec:	0f 85 76 ff ff ff    	jne    c0009968 <Virt::freeKernelVirtualPages(unsigned long)+0x3d>
c00099f2:	83 e7 01             	and    edi,0x1
c00099f5:	75 46                	jne    c0009a3d <Virt::freeKernelVirtualPages(unsigned long)+0x112>
c00099f7:	c7 44 24 30 10 10 02 c0 	mov    DWORD PTR [esp+0x30],0xc0021010
c00099ff:	83 c4 1c             	add    esp,0x1c
c0009a02:	5b                   	pop    ebx
c0009a03:	5e                   	pop    esi
c0009a04:	5f                   	pop    edi
c0009a05:	5d                   	pop    ebp
c0009a06:	e9 88 7c 00 00       	jmp    c0011693 <KePanic(char const*)>
c0009a0b:	83 e7 01             	and    edi,0x1
c0009a0e:	75 15                	jne    c0009a25 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c0009a10:	83 ec 0c             	sub    esp,0xc
c0009a13:	68 aa 12 02 c0       	push   0xc00212aa
c0009a18:	e8 76 7c 00 00       	call   c0011693 <KePanic(char const*)>
c0009a1d:	83 c4 10             	add    esp,0x10
c0009a20:	e9 5e ff ff ff       	jmp    c0009983 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0009a25:	83 ec 08             	sub    esp,0x8
c0009a28:	6a 00                	push   0x0
c0009a2a:	56                   	push   esi
c0009a2b:	e8 80 fb ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a30:	83 c4 10             	add    esp,0x10
c0009a33:	e9 4b ff ff ff       	jmp    c0009983 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0009a38:	83 e7 01             	and    edi,0x1
c0009a3b:	75 16                	jne    c0009a53 <Virt::freeKernelVirtualPages(unsigned long)+0x128>
c0009a3d:	83 ec 08             	sub    esp,0x8
c0009a40:	6a 00                	push   0x0
c0009a42:	56                   	push   esi
c0009a43:	e8 68 fb ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a48:	83 c4 10             	add    esp,0x10
c0009a4b:	83 c4 1c             	add    esp,0x1c
c0009a4e:	5b                   	pop    ebx
c0009a4f:	5e                   	pop    esi
c0009a50:	5f                   	pop    edi
c0009a51:	5d                   	pop    ebp
c0009a52:	c3                   	ret    
c0009a53:	c7 44 24 30 c6 12 02 c0 	mov    DWORD PTR [esp+0x30],0xc00212c6
c0009a5b:	83 c4 1c             	add    esp,0x1c
c0009a5e:	5b                   	pop    ebx
c0009a5f:	5e                   	pop    esi
c0009a60:	5f                   	pop    edi
c0009a61:	5d                   	pop    ebp
c0009a62:	e9 2c 7c 00 00       	jmp    c0011693 <KePanic(char const*)>
c0009a67:	90                   	nop

c0009a68 <VAS::freeAllocatedPages(unsigned long)>:
c0009a68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009a6c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009a70:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0009a74:	74 09                	je     c0009a7f <VAS::freeAllocatedPages(unsigned long)+0x17>
c0009a76:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009a7a:	e9 ac fe ff ff       	jmp    c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c0009a7f:	c7 44 24 04 34 10 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021034
c0009a87:	e9 b9 0e 00 00       	jmp    c000a945 <Dbg::kprintf(char const*, ...)>

c0009a8c <VAS::virtualToPhysical(unsigned long)>:
c0009a8c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009a90:	50                   	push   eax
c0009a91:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009a95:	52                   	push   edx
c0009a96:	e8 71 fe ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c0009a9b:	59                   	pop    ecx
c0009a9c:	8b 00                	mov    eax,DWORD PTR [eax]
c0009a9e:	5a                   	pop    edx
c0009a9f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009aa4:	c3                   	ret    
c0009aa5:	90                   	nop

c0009aa6 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>:
c0009aa6:	55                   	push   ebp
c0009aa7:	57                   	push   edi
c0009aa8:	56                   	push   esi
c0009aa9:	53                   	push   ebx
c0009aaa:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009aae:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0009ab2:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0009ab6:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0009aba:	85 db                	test   ebx,ebx
c0009abc:	7e 24                	jle    c0009ae2 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x3c>
c0009abe:	c1 e3 0c             	shl    ebx,0xc
c0009ac1:	01 f3                	add    ebx,esi
c0009ac3:	56                   	push   esi
c0009ac4:	81 c6 00 10 00 00    	add    esi,0x1000
c0009aca:	55                   	push   ebp
c0009acb:	e8 3c fe ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c0009ad0:	5a                   	pop    edx
c0009ad1:	59                   	pop    ecx
c0009ad2:	8b 08                	mov    ecx,DWORD PTR [eax]
c0009ad4:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0009ad8:	21 f9                	and    ecx,edi
c0009ada:	09 d1                	or     ecx,edx
c0009adc:	39 f3                	cmp    ebx,esi
c0009ade:	89 08                	mov    DWORD PTR [eax],ecx
c0009ae0:	75 e1                	jne    c0009ac3 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x1d>
c0009ae2:	5b                   	pop    ebx
c0009ae3:	5e                   	pop    esi
c0009ae4:	5f                   	pop    edi
c0009ae5:	5d                   	pop    ebp
c0009ae6:	c3                   	ret    
c0009ae7:	90                   	nop

c0009ae8 <VAS::VAS()>:
c0009ae8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009aec:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009af3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009af7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009afe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b02:	a3 b0 6f 02 c0       	mov    ds:0xc0026fb0,eax
c0009b07:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b0b:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0009b0f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b13:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0009b16:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b1a:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0009b21:	ba 7d 50 02 c0       	mov    edx,0xc002507d
c0009b26:	b8 00 50 02 c0       	mov    eax,0xc0025000
c0009b2b:	29 c2                	sub    edx,eax
c0009b2d:	89 d0                	mov    eax,edx
c0009b2f:	05 ff 0f 00 00       	add    eax,0xfff
c0009b34:	c1 e8 0c             	shr    eax,0xc
c0009b37:	89 c2                	mov    edx,eax
c0009b39:	b8 00 50 02 c0       	mov    eax,0xc0025000
c0009b3e:	6a 04                	push   0x4
c0009b40:	6a ff                	push   0xffffffff
c0009b42:	52                   	push   edx
c0009b43:	50                   	push   eax
c0009b44:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b48:	e8 59 ff ff ff       	call   c0009aa6 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0009b4d:	83 c4 14             	add    esp,0x14
c0009b50:	90                   	nop
c0009b51:	c3                   	ret    

c0009b52 <VAS::setToWriteCombining(unsigned long, int)>:
c0009b52:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0009b57:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009b5d:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c0009b64:	75 01                	jne    c0009b67 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0009b66:	c3                   	ret    
c0009b67:	68 80 00 00 00       	push   0x80
c0009b6c:	6a ff                	push   0xffffffff
c0009b6e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009b72:	50                   	push   eax
c0009b73:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009b77:	52                   	push   edx
c0009b78:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0009b7c:	51                   	push   ecx
c0009b7d:	e8 24 ff ff ff       	call   c0009aa6 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0009b82:	83 c4 14             	add    esp,0x14
c0009b85:	c3                   	ret    

c0009b86 <VAS::mapOtherVASIn(bool, VAS*)>:
c0009b86:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009b8a:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0009b8d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b91:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0009b94:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0009b99:	83 f8 01             	cmp    eax,0x1
c0009b9c:	19 c0                	sbb    eax,eax
c0009b9e:	83 ca 03             	or     edx,0x3
c0009ba1:	83 e0 fc             	and    eax,0xfffffffc
c0009ba4:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0009bab:	0f 20 d8             	mov    eax,cr3
c0009bae:	0f 22 d8             	mov    cr3,eax
c0009bb1:	c3                   	ret    

c0009bb2 <VAS::~VAS()>:
c0009bb2:	83 ec 2c             	sub    esp,0x2c
c0009bb5:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0009bbd:	fa                   	cli    
c0009bbe:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0009bc3:	83 c0 01             	add    eax,0x1
c0009bc6:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0009bcb:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009bd0:	8b 00                	mov    eax,DWORD PTR [eax]
c0009bd2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009bd5:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009bdb:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009bdf:	6a 01                	push   0x1
c0009be1:	50                   	push   eax
c0009be2:	e8 9f ff ff ff       	call   c0009b86 <VAS::mapOtherVASIn(bool, VAS*)>
c0009be7:	83 c4 0c             	add    esp,0xc
c0009bea:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0009bf2:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0009bfa:	0f 8f d8 00 00 00    	jg     c0009cd8 <VAS::~VAS()+0x126>
c0009c00:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009c04:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009c07:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009c0b:	c1 e2 02             	shl    edx,0x2
c0009c0e:	01 d0                	add    eax,edx
c0009c10:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c12:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009c16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009c1a:	83 e0 01             	and    eax,0x1
c0009c1d:	0f 84 ab 00 00 00    	je     c0009cce <VAS::~VAS()+0x11c>
c0009c23:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009c2b:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0009c33:	7f 74                	jg     c0009ca9 <VAS::~VAS()+0xf7>
c0009c35:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009c39:	c1 e0 0a             	shl    eax,0xa
c0009c3c:	89 c2                	mov    edx,eax
c0009c3e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009c42:	01 d0                	add    eax,edx
c0009c44:	c1 e0 0c             	shl    eax,0xc
c0009c47:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009c4b:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009c50:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c52:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009c55:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009c5b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009c5f:	6a 01                	push   0x1
c0009c61:	50                   	push   eax
c0009c62:	e8 77 fc ff ff       	call   c00098de <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0009c67:	83 c4 0c             	add    esp,0xc
c0009c6a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009c6e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009c72:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c74:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009c78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c7c:	25 01 04 00 00       	and    eax,0x401
c0009c81:	3d 01 04 00 00       	cmp    eax,0x401
c0009c86:	75 1a                	jne    c0009ca2 <VAS::~VAS()+0xf0>
c0009c88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c8c:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009c91:	83 ec 0c             	sub    esp,0xc
c0009c94:	50                   	push   eax
c0009c95:	e8 bc e0 ff ff       	call   c0007d56 <Phys::freePage(unsigned long)>
c0009c9a:	83 c4 10             	add    esp,0x10
c0009c9d:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009ca2:	83 44 24 14 01       	add    DWORD PTR [esp+0x14],0x1
c0009ca7:	eb 82                	jmp    c0009c2b <VAS::~VAS()+0x79>
c0009ca9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009cad:	25 00 04 00 00       	and    eax,0x400
c0009cb2:	74 1a                	je     c0009cce <VAS::~VAS()+0x11c>
c0009cb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009cb8:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009cbd:	83 ec 0c             	sub    esp,0xc
c0009cc0:	50                   	push   eax
c0009cc1:	e8 90 e0 ff ff       	call   c0007d56 <Phys::freePage(unsigned long)>
c0009cc6:	83 c4 10             	add    esp,0x10
c0009cc9:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009cce:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c0009cd3:	e9 1a ff ff ff       	jmp    c0009bf2 <VAS::~VAS()+0x40>
c0009cd8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009cdc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009cdf:	83 ec 0c             	sub    esp,0xc
c0009ce2:	50                   	push   eax
c0009ce3:	e8 43 fc ff ff       	call   c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c0009ce8:	83 c4 10             	add    esp,0x10
c0009ceb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009cef:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009cf2:	83 ec 0c             	sub    esp,0xc
c0009cf5:	50                   	push   eax
c0009cf6:	e8 5b e0 ff ff       	call   c0007d56 <Phys::freePage(unsigned long)>
c0009cfb:	83 c4 10             	add    esp,0x10
c0009cfe:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009d03:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0009d08:	83 e8 01             	sub    eax,0x1
c0009d0b:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0009d10:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0009d15:	85 c0                	test   eax,eax
c0009d17:	75 01                	jne    c0009d1a <VAS::~VAS()+0x168>
c0009d19:	fb                   	sti    
c0009d1a:	90                   	nop
c0009d1b:	83 c4 2c             	add    esp,0x2c
c0009d1e:	c3                   	ret    
c0009d1f:	90                   	nop

c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0009d20:	55                   	push   ebp
c0009d21:	57                   	push   edi
c0009d22:	56                   	push   esi
c0009d23:	53                   	push   ebx
c0009d24:	83 ec 1c             	sub    esp,0x1c
c0009d27:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0009d2b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009d2f:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0009d35:	77 08                	ja     c0009d3f <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c0009d37:	0f 20 d8             	mov    eax,cr3
c0009d3a:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c0009d3d:	75 49                	jne    c0009d88 <VAS::mapPage(unsigned long, unsigned long, int)+0x68>
c0009d3f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009d43:	09 d8                	or     eax,ebx
c0009d45:	a9 ff 0f 00 00       	test   eax,0xfff
c0009d4a:	75 59                	jne    c0009da5 <VAS::mapPage(unsigned long, unsigned long, int)+0x85>
c0009d4c:	89 de                	mov    esi,ebx
c0009d4e:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009d51:	c1 ee 16             	shr    esi,0x16
c0009d54:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0009d5b:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0009d5f:	74 56                	je     c0009db7 <VAS::mapPage(unsigned long, unsigned long, int)+0x97>
c0009d61:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009d65:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009d69:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0009d6f:	c1 eb 0a             	shr    ebx,0xa
c0009d72:	c1 e6 0c             	shl    esi,0xc
c0009d75:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0009d7b:	09 d0                	or     eax,edx
c0009d7d:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0009d80:	83 c4 1c             	add    esp,0x1c
c0009d83:	5b                   	pop    ebx
c0009d84:	5e                   	pop    esi
c0009d85:	5f                   	pop    edi
c0009d86:	5d                   	pop    ebp
c0009d87:	c3                   	ret    
c0009d88:	83 ec 0c             	sub    esp,0xc
c0009d8b:	68 58 10 02 c0       	push   0xc0021058
c0009d90:	e8 b0 0b 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0009d95:	83 c4 10             	add    esp,0x10
c0009d98:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009d9c:	09 d8                	or     eax,ebx
c0009d9e:	a9 ff 0f 00 00       	test   eax,0xfff
c0009da3:	74 a7                	je     c0009d4c <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0009da5:	83 ec 0c             	sub    esp,0xc
c0009da8:	68 c0 10 02 c0       	push   0xc00210c0
c0009dad:	e8 e1 78 00 00       	call   c0011693 <KePanic(char const*)>
c0009db2:	83 c4 10             	add    esp,0x10
c0009db5:	eb 95                	jmp    c0009d4c <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0009db7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009dbb:	e8 ff df ff ff       	call   c0007dbf <Phys::allocatePage()>
c0009dc0:	83 ec 0c             	sub    esp,0xc
c0009dc3:	89 c5                	mov    ebp,eax
c0009dc5:	8b 0d b0 6f 02 c0    	mov    ecx,DWORD PTR ds:0xc0026fb0
c0009dcb:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0009dcf:	6a 01                	push   0x1
c0009dd1:	e8 37 f8 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c0009dd6:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0009ddd:	6a 01                	push   0x1
c0009ddf:	50                   	push   eax
c0009de0:	55                   	push   ebp
c0009de1:	81 cd 07 04 00 00    	or     ebp,0x407
c0009de7:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0009deb:	51                   	push   ecx
c0009dec:	e8 29 01 00 00       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009df1:	83 c4 1c             	add    esp,0x1c
c0009df4:	68 00 10 00 00       	push   0x1000
c0009df9:	6a 00                	push   0x0
c0009dfb:	50                   	push   eax
c0009dfc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009e00:	e8 eb 66 ff ff       	call   c00004f0 <memset>
c0009e05:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0009e09:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009e0c:	e8 1a fb ff ff       	call   c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c0009e11:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009e15:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009e18:	83 c4 10             	add    esp,0x10
c0009e1b:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0009e1e:	e9 3e ff ff ff       	jmp    c0009d61 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>
c0009e23:	90                   	nop

c0009e24 <VAS::allocatePages(int, int)>:
c0009e24:	55                   	push   ebp
c0009e25:	57                   	push   edi
c0009e26:	56                   	push   esi
c0009e27:	53                   	push   ebx
c0009e28:	83 ec 1c             	sub    esp,0x1c
c0009e2b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0009e2f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0009e33:	80 7e 01 00          	cmp    BYTE PTR [esi+0x1],0x0
c0009e37:	75 71                	jne    c0009eaa <VAS::allocatePages(int, int)+0x86>
c0009e39:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0009e3c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009e40:	85 c0                	test   eax,eax
c0009e42:	74 4d                	je     c0009e91 <VAS::allocatePages(int, int)+0x6d>
c0009e44:	89 dd                	mov    ebp,ebx
c0009e46:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009e4a:	c1 e5 0c             	shl    ebp,0xc
c0009e4d:	01 c5                	add    ebp,eax
c0009e4f:	85 db                	test   ebx,ebx
c0009e51:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0009e54:	7e 29                	jle    c0009e7f <VAS::allocatePages(int, int)+0x5b>
c0009e56:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009e5a:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009e5e:	81 cf 00 04 00 00    	or     edi,0x400
c0009e64:	e8 56 df ff ff       	call   c0007dbf <Phys::allocatePage()>
c0009e69:	57                   	push   edi
c0009e6a:	53                   	push   ebx
c0009e6b:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009e71:	50                   	push   eax
c0009e72:	56                   	push   esi
c0009e73:	e8 a8 fe ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009e78:	83 c4 10             	add    esp,0x10
c0009e7b:	39 dd                	cmp    ebp,ebx
c0009e7d:	75 e5                	jne    c0009e64 <VAS::allocatePages(int, int)+0x40>
c0009e7f:	0f 20 d8             	mov    eax,cr3
c0009e82:	0f 22 d8             	mov    cr3,eax
c0009e85:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009e89:	83 c4 1c             	add    esp,0x1c
c0009e8c:	5b                   	pop    ebx
c0009e8d:	5e                   	pop    esi
c0009e8e:	5f                   	pop    edi
c0009e8f:	5d                   	pop    ebp
c0009e90:	c3                   	ret    
c0009e91:	83 ec 0c             	sub    esp,0xc
c0009e94:	68 e4 10 02 c0       	push   0xc00210e4
c0009e99:	e8 f5 77 00 00       	call   c0011693 <KePanic(char const*)>
c0009e9e:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0009ea1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009ea5:	83 c4 10             	add    esp,0x10
c0009ea8:	eb 9a                	jmp    c0009e44 <VAS::allocatePages(int, int)+0x20>
c0009eaa:	83 ec 0c             	sub    esp,0xc
c0009ead:	53                   	push   ebx
c0009eae:	e8 5a f7 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c0009eb3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009eb7:	83 c4 10             	add    esp,0x10
c0009eba:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0009ebf:	77 37                	ja     c0009ef8 <VAS::allocatePages(int, int)+0xd4>
c0009ec1:	85 db                	test   ebx,ebx
c0009ec3:	7e ba                	jle    c0009e7f <VAS::allocatePages(int, int)+0x5b>
c0009ec5:	c1 e3 0c             	shl    ebx,0xc
c0009ec8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009ecc:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009ed0:	8d 2c 03             	lea    ebp,[ebx+eax*1]
c0009ed3:	81 cf 00 04 00 00    	or     edi,0x400
c0009ed9:	89 c3                	mov    ebx,eax
c0009edb:	e8 df de ff ff       	call   c0007dbf <Phys::allocatePage()>
c0009ee0:	57                   	push   edi
c0009ee1:	53                   	push   ebx
c0009ee2:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009ee8:	50                   	push   eax
c0009ee9:	56                   	push   esi
c0009eea:	e8 31 fe ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009eef:	83 c4 10             	add    esp,0x10
c0009ef2:	39 dd                	cmp    ebp,ebx
c0009ef4:	75 e5                	jne    c0009edb <VAS::allocatePages(int, int)+0xb7>
c0009ef6:	eb 87                	jmp    c0009e7f <VAS::allocatePages(int, int)+0x5b>
c0009ef8:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0009efd:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009f03:	f6 80 8c 11 00 00 10 	test   BYTE PTR [eax+0x118c],0x10
c0009f0a:	74 b5                	je     c0009ec1 <VAS::allocatePages(int, int)+0x9d>
c0009f0c:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0009f10:	80 ce 01             	or     dh,0x1
c0009f13:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0009f17:	eb a8                	jmp    c0009ec1 <VAS::allocatePages(int, int)+0x9d>
c0009f19:	90                   	nop

c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0009f1a:	55                   	push   ebp
c0009f1b:	57                   	push   edi
c0009f1c:	56                   	push   esi
c0009f1d:	53                   	push   ebx
c0009f1e:	83 ec 0c             	sub    esp,0xc
c0009f21:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0009f25:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0009f29:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0009f2d:	85 db                	test   ebx,ebx
c0009f2f:	7e 2f                	jle    c0009f60 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x46>
c0009f31:	c1 e3 0c             	shl    ebx,0xc
c0009f34:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0009f38:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0009f3c:	01 d3                	add    ebx,edx
c0009f3e:	55                   	push   ebp
c0009f3f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0009f43:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009f47:	29 c2                	sub    edx,eax
c0009f49:	01 f2                	add    edx,esi
c0009f4b:	52                   	push   edx
c0009f4c:	56                   	push   esi
c0009f4d:	81 c6 00 10 00 00    	add    esi,0x1000
c0009f53:	57                   	push   edi
c0009f54:	e8 c7 fd ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009f59:	83 c4 10             	add    esp,0x10
c0009f5c:	39 de                	cmp    esi,ebx
c0009f5e:	75 de                	jne    c0009f3e <VAS::mapRange(unsigned long, unsigned long, int, int)+0x24>
c0009f60:	0f 20 d8             	mov    eax,cr3
c0009f63:	0f 22 d8             	mov    cr3,eax
c0009f66:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009f6a:	83 c4 0c             	add    esp,0xc
c0009f6d:	5b                   	pop    ebx
c0009f6e:	5e                   	pop    esi
c0009f6f:	5f                   	pop    edi
c0009f70:	5d                   	pop    ebp
c0009f71:	c3                   	ret    

c0009f72 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0009f72:	55                   	push   ebp
c0009f73:	57                   	push   edi
c0009f74:	56                   	push   esi
c0009f75:	53                   	push   ebx
c0009f76:	83 ec 1c             	sub    esp,0x1c
c0009f79:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009f7d:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0009f81:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009f85:	09 f8                	or     eax,edi
c0009f87:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009f8b:	a9 ff 0f 00 00       	test   eax,0xfff
c0009f90:	75 4f                	jne    c0009fe1 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x6f>
c0009f92:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0009f96:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0009f99:	c1 eb 16             	shr    ebx,0x16
c0009f9c:	8d 3c 9d 00 00 00 00 	lea    edi,[ebx*4+0x0]
c0009fa3:	f6 04 38 01          	test   BYTE PTR [eax+edi*1],0x1
c0009fa7:	74 52                	je     c0009ffb <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x89>
c0009fa9:	0f b6 f2             	movzx  esi,dl
c0009fac:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009fb0:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0009fb4:	c1 e8 0a             	shr    eax,0xa
c0009fb7:	83 fe 01             	cmp    esi,0x1
c0009fba:	19 d2                	sbb    edx,edx
c0009fbc:	c1 e3 0c             	shl    ebx,0xc
c0009fbf:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0009fc5:	25 fc 0f 00 00       	and    eax,0xffc
c0009fca:	01 d8                	add    eax,ebx
c0009fcc:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0009fd0:	09 d9                	or     ecx,ebx
c0009fd2:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0009fd9:	83 c4 1c             	add    esp,0x1c
c0009fdc:	5b                   	pop    ebx
c0009fdd:	5e                   	pop    esi
c0009fde:	5f                   	pop    edi
c0009fdf:	5d                   	pop    ebp
c0009fe0:	c3                   	ret    
c0009fe1:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009fe5:	83 ec 0c             	sub    esp,0xc
c0009fe8:	68 10 11 02 c0       	push   0xc0021110
c0009fed:	e8 a1 76 00 00       	call   c0011693 <KePanic(char const*)>
c0009ff2:	83 c4 10             	add    esp,0x10
c0009ff5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009ff9:	eb 97                	jmp    c0009f92 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x20>
c0009ffb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009fff:	e8 bb dd ff ff       	call   c0007dbf <Phys::allocatePage()>
c000a004:	83 ec 0c             	sub    esp,0xc
c000a007:	89 c5                	mov    ebp,eax
c000a009:	8b 0d b0 6f 02 c0    	mov    ecx,DWORD PTR ds:0xc0026fb0
c000a00f:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000a013:	6a 01                	push   0x1
c000a015:	e8 f3 f5 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c000a01a:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000a021:	6a 01                	push   0x1
c000a023:	50                   	push   eax
c000a024:	55                   	push   ebp
c000a025:	81 cd 07 04 00 00    	or     ebp,0x407
c000a02b:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000a02f:	51                   	push   ecx
c000a030:	e8 e5 fe ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a035:	83 c4 1c             	add    esp,0x1c
c000a038:	68 00 10 00 00       	push   0x1000
c000a03d:	6a 00                	push   0x0
c000a03f:	50                   	push   eax
c000a040:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a044:	e8 a7 64 ff ff       	call   c00004f0 <memset>
c000a049:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000a04d:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a050:	e8 d6 f8 ff ff       	call   c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c000a055:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a058:	83 c4 10             	add    esp,0x10
c000a05b:	89 2c 38             	mov    DWORD PTR [eax+edi*1],ebp
c000a05e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a062:	e9 42 ff ff ff       	jmp    c0009fa9 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x37>
c000a067:	90                   	nop

c000a068 <VAS::VAS(bool)>:
c000a068:	53                   	push   ebx
c000a069:	83 ec 28             	sub    esp,0x28
c000a06c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a070:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000a074:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a078:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000a07f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a083:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000a08a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a08e:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000a092:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000a095:	e8 25 dd ff ff       	call   c0007dbf <Phys::allocatePage()>
c000a09a:	89 c2                	mov    edx,eax
c000a09c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0a0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000a0a3:	8b 1d b0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fb0
c000a0a9:	83 ec 0c             	sub    esp,0xc
c000a0ac:	6a 01                	push   0x1
c000a0ae:	e8 5a f5 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c000a0b3:	83 c4 10             	add    esp,0x10
c000a0b6:	89 c2                	mov    edx,eax
c000a0b8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0bc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a0bf:	83 ec 0c             	sub    esp,0xc
c000a0c2:	6a 03                	push   0x3
c000a0c4:	6a 01                	push   0x1
c000a0c6:	52                   	push   edx
c000a0c7:	50                   	push   eax
c000a0c8:	53                   	push   ebx
c000a0c9:	e8 4c fe ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a0ce:	83 c4 20             	add    esp,0x20
c000a0d1:	89 c2                	mov    edx,eax
c000a0d3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0d7:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a0da:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000a0e2:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000a0ea:	7f 1d                	jg     c000a109 <VAS::VAS(bool)+0xa1>
c000a0ec:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0f0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a0f3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a0f7:	c1 e2 02             	shl    edx,0x2
c000a0fa:	01 d0                	add    eax,edx
c000a0fc:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a102:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000a107:	eb d9                	jmp    c000a0e2 <VAS::VAS(bool)+0x7a>
c000a109:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000a111:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000a119:	7f 7e                	jg     c000a199 <VAS::VAS(bool)+0x131>
c000a11b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a11f:	2d 00 02 00 00       	sub    eax,0x200
c000a124:	c1 e0 0c             	shl    eax,0xc
c000a127:	83 c8 05             	or     eax,0x5
c000a12a:	89 c2                	mov    edx,eax
c000a12c:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000a131:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a137:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a13d:	83 e0 10             	and    eax,0x10
c000a140:	0f b6 c0             	movzx  eax,al
c000a143:	85 c0                	test   eax,eax
c000a145:	74 07                	je     c000a14e <VAS::VAS(bool)+0xe6>
c000a147:	b8 00 01 00 00       	mov    eax,0x100
c000a14c:	eb 05                	jmp    c000a153 <VAS::VAS(bool)+0xeb>
c000a14e:	b8 00 00 00 00       	mov    eax,0x0
c000a153:	09 d0                	or     eax,edx
c000a155:	89 c1                	mov    ecx,eax
c000a157:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a15b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a15e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a162:	c1 e2 02             	shl    edx,0x2
c000a165:	01 d0                	add    eax,edx
c000a167:	89 ca                	mov    edx,ecx
c000a169:	89 10                	mov    DWORD PTR [eax],edx
c000a16b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a16f:	2d 40 03 00 00       	sub    eax,0x340
c000a174:	83 f8 7f             	cmp    eax,0x7f
c000a177:	77 16                	ja     c000a18f <VAS::VAS(bool)+0x127>
c000a179:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a17d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a180:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a184:	c1 e2 02             	shl    edx,0x2
c000a187:	01 d0                	add    eax,edx
c000a189:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a18f:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000a194:	e9 78 ff ff ff       	jmp    c000a111 <VAS::VAS(bool)+0xa9>
c000a199:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000a19e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a1a4:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a1aa:	83 e0 10             	and    eax,0x10
c000a1ad:	0f b6 c0             	movzx  eax,al
c000a1b0:	85 c0                	test   eax,eax
c000a1b2:	74 07                	je     c000a1bb <VAS::VAS(bool)+0x153>
c000a1b4:	b8 03 41 00 00       	mov    eax,0x4103
c000a1b9:	eb 05                	jmp    c000a1c0 <VAS::VAS(bool)+0x158>
c000a1bb:	b8 03 40 00 00       	mov    eax,0x4003
c000a1c0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000a1c4:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000a1c7:	81 c2 20 0c 00 00    	add    edx,0xc20
c000a1cd:	89 02                	mov    DWORD PTR [edx],eax
c000a1cf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a1d3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000a1d6:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000a1db:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a1e1:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a1e7:	83 e0 10             	and    eax,0x10
c000a1ea:	0f b6 c0             	movzx  eax,al
c000a1ed:	85 c0                	test   eax,eax
c000a1ef:	74 07                	je     c000a1f8 <VAS::VAS(bool)+0x190>
c000a1f1:	b8 00 01 00 00       	mov    eax,0x100
c000a1f6:	eb 05                	jmp    c000a1fd <VAS::VAS(bool)+0x195>
c000a1f8:	b8 00 00 00 00       	mov    eax,0x0
c000a1fd:	09 c2                	or     edx,eax
c000a1ff:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a203:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a206:	05 fc 0f 00 00       	add    eax,0xffc
c000a20b:	83 ca 03             	or     edx,0x3
c000a20e:	89 10                	mov    DWORD PTR [eax],edx
c000a210:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000a215:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a21b:	83 ec 0c             	sub    esp,0xc
c000a21e:	50                   	push   eax
c000a21f:	e8 aa 2a 00 00       	call   c000ccce <Device::getName()>
c000a224:	83 c4 10             	add    esp,0x10
c000a227:	83 ec 08             	sub    esp,0x8
c000a22a:	68 e0 12 02 c0       	push   0xc00212e0
c000a22f:	50                   	push   eax
c000a230:	e8 1b 65 ff ff       	call   c0000750 <strcmp>
c000a235:	83 c4 10             	add    esp,0x10
c000a238:	85 c0                	test   eax,eax
c000a23a:	0f 94 c0             	sete   al
c000a23d:	0f b6 c0             	movzx  eax,al
c000a240:	85 c0                	test   eax,eax
c000a242:	74 68                	je     c000a2ac <VAS::VAS(bool)+0x244>
c000a244:	fa                   	cli    
c000a245:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000a24a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a250:	05 7c 09 00 00       	add    eax,0x97c
c000a255:	83 ec 0c             	sub    esp,0xc
c000a258:	50                   	push   eax
c000a259:	e8 50 d3 ff ff       	call   c00075ae <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a25e:	83 c4 10             	add    esp,0x10
c000a261:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a266:	89 c3                	mov    ebx,eax
c000a268:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000a26d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a273:	05 7c 09 00 00       	add    eax,0x97c
c000a278:	83 ec 0c             	sub    esp,0xc
c000a27b:	50                   	push   eax
c000a27c:	e8 2d d3 ff ff       	call   c00075ae <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a281:	83 c4 10             	add    esp,0x10
c000a284:	83 ec 08             	sub    esp,0x8
c000a287:	50                   	push   eax
c000a288:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a28c:	e8 7b f6 ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c000a291:	83 c4 10             	add    esp,0x10
c000a294:	8b 00                	mov    eax,DWORD PTR [eax]
c000a296:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a29b:	6a 11                	push   0x11
c000a29d:	53                   	push   ebx
c000a29e:	50                   	push   eax
c000a29f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a2a3:	e8 78 fa ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a2a8:	83 c4 10             	add    esp,0x10
c000a2ab:	fb                   	sti    
c000a2ac:	90                   	nop
c000a2ad:	83 c4 28             	add    esp,0x28
c000a2b0:	5b                   	pop    ebx
c000a2b1:	c3                   	ret    

c000a2b2 <VAS::evict(unsigned long)>:
c000a2b2:	55                   	push   ebp
c000a2b3:	57                   	push   edi
c000a2b4:	56                   	push   esi
c000a2b5:	53                   	push   ebx
c000a2b6:	83 ec 1c             	sub    esp,0x1c
c000a2b9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a2bd:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a2c1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a2c5:	e8 a1 f4 ff ff       	call   c000976b <Virt::allocateSwapfilePage()>
c000a2ca:	89 c7                	mov    edi,eax
c000a2cc:	a1 4c 37 02 c0       	mov    eax,ds:0xc002374c
c000a2d1:	85 c0                	test   eax,eax
c000a2d3:	7e 40                	jle    c000a315 <VAS::evict(unsigned long)+0x63>
c000a2d5:	89 ee                	mov    esi,ebp
c000a2d7:	31 db                	xor    ebx,ebx
c000a2d9:	83 ec 0c             	sub    esp,0xc
c000a2dc:	57                   	push   edi
c000a2dd:	e8 73 f4 ff ff       	call   c0009755 <Virt::swapIDToSector(unsigned long)>
c000a2e2:	89 34 24             	mov    DWORD PTR [esp],esi
c000a2e5:	01 d8                	add    eax,ebx
c000a2e7:	6a 01                	push   0x1
c000a2e9:	31 d2                	xor    edx,edx
c000a2eb:	83 c3 01             	add    ebx,0x1
c000a2ee:	52                   	push   edx
c000a2ef:	81 c6 00 02 00 00    	add    esi,0x200
c000a2f5:	50                   	push   eax
c000a2f6:	0f be 05 58 37 02 c0 	movsx  eax,BYTE PTR ds:0xc0023758
c000a2fd:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c000a304:	50                   	push   eax
c000a305:	e8 7e 3b 00 00       	call   c000de88 <LogicalDisk::write(unsigned long long, int, void*)>
c000a30a:	83 c4 20             	add    esp,0x20
c000a30d:	39 1d 4c 37 02 c0    	cmp    DWORD PTR ds:0xc002374c,ebx
c000a313:	7f c4                	jg     c000a2d9 <VAS::evict(unsigned long)+0x27>
c000a315:	83 ec 08             	sub    esp,0x8
c000a318:	c1 e7 0c             	shl    edi,0xc
c000a31b:	55                   	push   ebp
c000a31c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a320:	50                   	push   eax
c000a321:	e8 e6 f5 ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c000a326:	8b 10                	mov    edx,DWORD PTR [eax]
c000a328:	89 d3                	mov    ebx,edx
c000a32a:	81 e2 fe 07 00 00    	and    edx,0x7fe
c000a330:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a336:	09 d7                	or     edi,edx
c000a338:	89 38                	mov    DWORD PTR [eax],edi
c000a33a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000a33d:	8b 15 a8 6f 02 c0    	mov    edx,DWORD PTR ds:0xc0026fa8
c000a343:	83 c2 01             	add    edx,0x1
c000a346:	89 15 a8 6f 02 c0    	mov    DWORD PTR ds:0xc0026fa8,edx
c000a34c:	e8 05 da ff ff       	call   c0007d56 <Phys::freePage(unsigned long)>
c000a351:	0f 20 d8             	mov    eax,cr3
c000a354:	0f 22 d8             	mov    cr3,eax
c000a357:	8b 0d a8 6f 02 c0    	mov    ecx,DWORD PTR ds:0xc0026fa8
c000a35d:	51                   	push   ecx
c000a35e:	55                   	push   ebp
c000a35f:	53                   	push   ebx
c000a360:	68 34 11 02 c0       	push   0xc0021134
c000a365:	e8 db 05 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a36a:	a1 a4 6f 02 c0       	mov    eax,ds:0xc0026fa4
c000a36f:	c7 44 24 50 ee 12 02 c0 	mov    DWORD PTR [esp+0x50],0xc00212ee
c000a377:	8d 50 01             	lea    edx,[eax+0x1]
c000a37a:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000a37e:	89 15 a4 6f 02 c0    	mov    DWORD PTR ds:0xc0026fa4,edx
c000a384:	83 c4 3c             	add    esp,0x3c
c000a387:	5b                   	pop    ebx
c000a388:	5e                   	pop    esi
c000a389:	5f                   	pop    edi
c000a38a:	5d                   	pop    ebp
c000a38b:	e9 b5 05 00 00       	jmp    c000a945 <Dbg::kprintf(char const*, ...)>

c000a390 <VAS::tryLoadBackOffDisk(unsigned long)>:
c000a390:	55                   	push   ebp
c000a391:	57                   	push   edi
c000a392:	56                   	push   esi
c000a393:	53                   	push   ebx
c000a394:	81 ec 1c 10 00 00    	sub    esp,0x101c
c000a39a:	8b b4 24 34 10 00 00 	mov    esi,DWORD PTR [esp+0x1034]
c000a3a1:	89 f3                	mov    ebx,esi
c000a3a3:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a3a9:	81 fe ff ff bf ff    	cmp    esi,0xffbfffff
c000a3af:	77 22                	ja     c000a3d3 <VAS::tryLoadBackOffDisk(unsigned long)+0x43>
c000a3b1:	83 ec 08             	sub    esp,0x8
c000a3b4:	56                   	push   esi
c000a3b5:	68 11 13 02 c0       	push   0xc0021311
c000a3ba:	e8 86 05 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a3bf:	83 c4 10             	add    esp,0x10
c000a3c2:	85 db                	test   ebx,ebx
c000a3c4:	75 2a                	jne    c000a3f0 <VAS::tryLoadBackOffDisk(unsigned long)+0x60>
c000a3c6:	31 c0                	xor    eax,eax
c000a3c8:	81 c4 1c 10 00 00    	add    esp,0x101c
c000a3ce:	5b                   	pop    ebx
c000a3cf:	5e                   	pop    esi
c000a3d0:	5f                   	pop    edi
c000a3d1:	5d                   	pop    ebp
c000a3d2:	c3                   	ret    
c000a3d3:	83 ec 0c             	sub    esp,0xc
c000a3d6:	68 ff 12 02 c0       	push   0xc00212ff
c000a3db:	e8 b3 72 00 00       	call   c0011693 <KePanic(char const*)>
c000a3e0:	5f                   	pop    edi
c000a3e1:	5d                   	pop    ebp
c000a3e2:	56                   	push   esi
c000a3e3:	68 11 13 02 c0       	push   0xc0021311
c000a3e8:	e8 58 05 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a3ed:	83 c4 10             	add    esp,0x10
c000a3f0:	83 ec 08             	sub    esp,0x8
c000a3f3:	53                   	push   ebx
c000a3f4:	8b 8c 24 3c 10 00 00 	mov    ecx,DWORD PTR [esp+0x103c]
c000a3fb:	51                   	push   ecx
c000a3fc:	e8 0b f5 ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c000a401:	83 c4 10             	add    esp,0x10
c000a404:	89 c2                	mov    edx,eax
c000a406:	85 c0                	test   eax,eax
c000a408:	74 bc                	je     c000a3c6 <VAS::tryLoadBackOffDisk(unsigned long)+0x36>
c000a40a:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a40c:	f7 c5 00 02 00 00    	test   ebp,0x200
c000a412:	0f 85 c0 00 00 00    	jne    c000a4d8 <VAS::tryLoadBackOffDisk(unsigned long)+0x148>
c000a418:	89 e8                	mov    eax,ebp
c000a41a:	25 01 04 00 00       	and    eax,0x401
c000a41f:	3d 00 04 00 00       	cmp    eax,0x400
c000a424:	75 a0                	jne    c000a3c6 <VAS::tryLoadBackOffDisk(unsigned long)+0x36>
c000a426:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a42a:	c1 ed 0c             	shr    ebp,0xc
c000a42d:	e8 8d d9 ff ff       	call   c0007dbf <Phys::allocatePage()>
c000a432:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a436:	8b 0a                	mov    ecx,DWORD PTR [edx]
c000a438:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c000a43e:	09 c1                	or     ecx,eax
c000a440:	81 c9 01 08 00 00    	or     ecx,0x801
c000a446:	89 0a                	mov    DWORD PTR [edx],ecx
c000a448:	8b 15 4c 37 02 c0    	mov    edx,DWORD PTR ds:0xc002374c
c000a44e:	85 d2                	test   edx,edx
c000a450:	7e 40                	jle    c000a492 <VAS::tryLoadBackOffDisk(unsigned long)+0x102>
c000a452:	89 df                	mov    edi,ebx
c000a454:	31 f6                	xor    esi,esi
c000a456:	83 ec 0c             	sub    esp,0xc
c000a459:	55                   	push   ebp
c000a45a:	e8 f6 f2 ff ff       	call   c0009755 <Virt::swapIDToSector(unsigned long)>
c000a45f:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a462:	01 f0                	add    eax,esi
c000a464:	6a 01                	push   0x1
c000a466:	31 d2                	xor    edx,edx
c000a468:	83 c6 01             	add    esi,0x1
c000a46b:	52                   	push   edx
c000a46c:	81 c7 00 02 00 00    	add    edi,0x200
c000a472:	50                   	push   eax
c000a473:	0f be 05 58 37 02 c0 	movsx  eax,BYTE PTR ds:0xc0023758
c000a47a:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c000a481:	50                   	push   eax
c000a482:	e8 95 39 00 00       	call   c000de1c <LogicalDisk::read(unsigned long long, int, void*)>
c000a487:	83 c4 20             	add    esp,0x20
c000a48a:	39 35 4c 37 02 c0    	cmp    DWORD PTR ds:0xc002374c,esi
c000a490:	7f c4                	jg     c000a456 <VAS::tryLoadBackOffDisk(unsigned long)+0xc6>
c000a492:	83 ec 04             	sub    esp,0x4
c000a495:	a1 a8 6f 02 c0       	mov    eax,ds:0xc0026fa8
c000a49a:	83 e8 01             	sub    eax,0x1
c000a49d:	50                   	push   eax
c000a49e:	a3 a8 6f 02 c0       	mov    ds:0xc0026fa8,eax
c000a4a3:	53                   	push   ebx
c000a4a4:	68 24 13 02 c0       	push   0xc0021324
c000a4a9:	e8 97 04 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a4ae:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000a4b1:	e8 7c f2 ff ff       	call   c0009732 <Virt::freeSwapfilePage(unsigned long)>
c000a4b6:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000a4bb:	83 c4 10             	add    esp,0x10
c000a4be:	83 e8 01             	sub    eax,0x1
c000a4c1:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000a4c6:	85 c0                	test   eax,eax
c000a4c8:	75 01                	jne    c000a4cb <VAS::tryLoadBackOffDisk(unsigned long)+0x13b>
c000a4ca:	fb                   	sti    
c000a4cb:	0f 20 d8             	mov    eax,cr3
c000a4ce:	0f 22 d8             	mov    cr3,eax
c000a4d1:	b0 01                	mov    al,0x1
c000a4d3:	e9 f0 fe ff ff       	jmp    c000a3c8 <VAS::tryLoadBackOffDisk(unsigned long)+0x38>
c000a4d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a4dc:	bd 00 10 00 00       	mov    ebp,0x1000
c000a4e1:	83 ec 0c             	sub    esp,0xc
c000a4e4:	89 de                	mov    esi,ebx
c000a4e6:	68 64 11 02 c0       	push   0xc0021164
c000a4eb:	e8 55 04 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a4f0:	8d 7c 24 20          	lea    edi,[esp+0x20]
c000a4f4:	e8 c6 d8 ff ff       	call   c0007dbf <Phys::allocatePage()>
c000a4f9:	89 e9                	mov    ecx,ebp
c000a4fb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a4fd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a501:	8b 0a                	mov    ecx,DWORD PTR [edx]
c000a503:	81 e1 ff 0d 00 00    	and    ecx,0xdff
c000a509:	09 c8                	or     eax,ecx
c000a50b:	83 c8 02             	or     eax,0x2
c000a50e:	89 02                	mov    DWORD PTR [edx],eax
c000a510:	0f 20 d8             	mov    eax,cr3
c000a513:	0f 22 d8             	mov    cr3,eax
c000a516:	8d 74 24 20          	lea    esi,[esp+0x20]
c000a51a:	89 df                	mov    edi,ebx
c000a51c:	89 e9                	mov    ecx,ebp
c000a51e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a520:	b0 01                	mov    al,0x1
c000a522:	83 c4 10             	add    esp,0x10
c000a525:	e9 9e fe ff ff       	jmp    c000a3c8 <VAS::tryLoadBackOffDisk(unsigned long)+0x38>

c000a52a <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)>:
c000a52a:	55                   	push   ebp
c000a52b:	57                   	push   edi
c000a52c:	56                   	push   esi
c000a52d:	53                   	push   ebx
c000a52e:	83 ec 28             	sub    esp,0x28
c000a531:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000a535:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a539:	50                   	push   eax
c000a53a:	e8 ce f0 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c000a53f:	83 c4 0c             	add    esp,0xc
c000a542:	89 c5                	mov    ebp,eax
c000a544:	6a 07                	push   0x7
c000a546:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000a54a:	52                   	push   edx
c000a54b:	56                   	push   esi
c000a54c:	e8 d3 f8 ff ff       	call   c0009e24 <VAS::allocatePages(int, int)>
c000a551:	83 c4 10             	add    esp,0x10
c000a554:	89 c7                	mov    edi,eax
c000a556:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000a55a:	85 c9                	test   ecx,ecx
c000a55c:	74 2f                	je     c000a58d <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x63>
c000a55e:	31 db                	xor    ebx,ebx
c000a560:	e8 5a d8 ff ff       	call   c0007dbf <Phys::allocatePage()>
c000a565:	83 c3 01             	add    ebx,0x1
c000a568:	6a 03                	push   0x3
c000a56a:	55                   	push   ebp
c000a56b:	50                   	push   eax
c000a56c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a570:	56                   	push   esi
c000a571:	e8 aa f7 ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a576:	6a 07                	push   0x7
c000a578:	57                   	push   edi
c000a579:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a57d:	50                   	push   eax
c000a57e:	56                   	push   esi
c000a57f:	e8 9c f7 ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a584:	83 c4 20             	add    esp,0x20
c000a587:	39 5c 24 34          	cmp    DWORD PTR [esp+0x34],ebx
c000a58b:	75 d3                	jne    c000a560 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x36>
c000a58d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a591:	89 28                	mov    DWORD PTR [eax],ebp
c000a593:	83 c4 1c             	add    esp,0x1c
c000a596:	89 f8                	mov    eax,edi
c000a598:	5b                   	pop    ebx
c000a599:	5e                   	pop    esi
c000a59a:	5f                   	pop    edi
c000a59b:	5d                   	pop    ebp
c000a59c:	c3                   	ret    
c000a59d:	90                   	nop

c000a59e <VAS::freeSharedMemoryWithKernel(unsigned long, unsigned long)>:
c000a59e:	53                   	push   ebx
c000a59f:	83 ec 14             	sub    esp,0x14
c000a5a2:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c000a5a6:	68 84 11 02 c0       	push   0xc0021184
c000a5ab:	e8 95 03 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a5b0:	c7 04 24 e4 11 02 c0 	mov    DWORD PTR [esp],0xc00211e4
c000a5b7:	e8 89 03 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a5bc:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000a5c0:	83 c4 18             	add    esp,0x18
c000a5c3:	5b                   	pop    ebx
c000a5c4:	e9 62 f3 ff ff       	jmp    c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c000a5c9:	90                   	nop

c000a5ca <VAS::scanForEviction()>:
c000a5ca:	57                   	push   edi
c000a5cb:	56                   	push   esi
c000a5cc:	31 f6                	xor    esi,esi
c000a5ce:	53                   	push   ebx
c000a5cf:	83 ec 10             	sub    esp,0x10
c000a5d2:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000a5d6:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000a5d9:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a5df:	75 0e                	jne    c000a5ef <VAS::scanForEviction()+0x25>
c000a5e1:	89 da                	mov    edx,ebx
c000a5e3:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a5e6:	c1 ea 16             	shr    edx,0x16
c000a5e9:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a5ed:	74 57                	je     c000a646 <VAS::scanForEviction()+0x7c>
c000a5ef:	53                   	push   ebx
c000a5f0:	57                   	push   edi
c000a5f1:	e8 16 f3 ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c000a5f6:	5a                   	pop    edx
c000a5f7:	8b 10                	mov    edx,DWORD PTR [eax]
c000a5f9:	59                   	pop    ecx
c000a5fa:	89 d1                	mov    ecx,edx
c000a5fc:	c1 e9 0c             	shr    ecx,0xc
c000a5ff:	74 10                	je     c000a611 <VAS::scanForEviction()+0x47>
c000a601:	89 d1                	mov    ecx,edx
c000a603:	81 e1 01 08 00 00    	and    ecx,0x801
c000a609:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000a60f:	74 40                	je     c000a651 <VAS::scanForEviction()+0x87>
c000a611:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a617:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000a61d:	76 2d                	jbe    c000a64c <VAS::scanForEviction()+0x82>
c000a61f:	83 c6 01             	add    esi,0x1
c000a622:	c7 47 08 00 00 00 00 	mov    DWORD PTR [edi+0x8],0x0
c000a629:	83 fe 03             	cmp    esi,0x3
c000a62c:	74 32                	je     c000a660 <VAS::scanForEviction()+0x96>
c000a62e:	31 db                	xor    ebx,ebx
c000a630:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a636:	75 b7                	jne    c000a5ef <VAS::scanForEviction()+0x25>
c000a638:	89 da                	mov    edx,ebx
c000a63a:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a63d:	c1 ea 16             	shr    edx,0x16
c000a640:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a644:	75 a9                	jne    c000a5ef <VAS::scanForEviction()+0x25>
c000a646:	81 c3 00 00 40 00    	add    ebx,0x400000
c000a64c:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c000a64f:	eb 88                	jmp    c000a5d9 <VAS::scanForEviction()+0xf>
c000a651:	f6 c2 20             	test   dl,0x20
c000a654:	74 13                	je     c000a669 <VAS::scanForEviction()+0x9f>
c000a656:	83 e2 df             	and    edx,0xffffffdf
c000a659:	89 10                	mov    DWORD PTR [eax],edx
c000a65b:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000a65e:	eb b1                	jmp    c000a611 <VAS::scanForEviction()+0x47>
c000a660:	83 c4 10             	add    esp,0x10
c000a663:	31 c0                	xor    eax,eax
c000a665:	5b                   	pop    ebx
c000a666:	5e                   	pop    esi
c000a667:	5f                   	pop    edi
c000a668:	c3                   	ret    
c000a669:	83 ec 08             	sub    esp,0x8
c000a66c:	89 d0                	mov    eax,edx
c000a66e:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a673:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000a677:	53                   	push   ebx
c000a678:	68 39 13 02 c0       	push   0xc0021339
c000a67d:	e8 c3 02 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a682:	58                   	pop    eax
c000a683:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c000a686:	5a                   	pop    edx
c000a687:	51                   	push   ecx
c000a688:	57                   	push   edi
c000a689:	e8 24 fc ff ff       	call   c000a2b2 <VAS::evict(unsigned long)>
c000a68e:	5b                   	pop    ebx
c000a68f:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000a692:	5e                   	pop    esi
c000a693:	50                   	push   eax
c000a694:	68 4d 13 02 c0       	push   0xc002134d
c000a699:	e8 a7 02 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a69e:	58                   	pop    eax
c000a69f:	5a                   	pop    edx
c000a6a0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a6a4:	50                   	push   eax
c000a6a5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a6a9:	68 60 13 02 c0       	push   0xc0021360
c000a6ae:	e8 92 02 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a6b3:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c000a6b6:	83 c4 10             	add    esp,0x10
c000a6b9:	81 c1 00 10 00 00    	add    ecx,0x1000
c000a6bf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a6c3:	89 4f 08             	mov    DWORD PTR [edi+0x8],ecx
c000a6c6:	83 c4 10             	add    esp,0x10
c000a6c9:	5b                   	pop    ebx
c000a6ca:	5e                   	pop    esi
c000a6cb:	5f                   	pop    edi
c000a6cc:	c3                   	ret    

c000a6cd <mapVASFirstTime>:
c000a6cd:	55                   	push   ebp
c000a6ce:	57                   	push   edi
c000a6cf:	56                   	push   esi
c000a6d0:	53                   	push   ebx
c000a6d1:	83 ec 0c             	sub    esp,0xc
c000a6d4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a6d9:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a6dc:	83 fa 01             	cmp    edx,0x1
c000a6df:	0f 84 cb 00 00 00    	je     c000a7b0 <mapVASFirstTime+0xe3>
c000a6e5:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000a6e8:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000a6eb:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000a6f0:	c1 e5 15             	shl    ebp,0x15
c000a6f3:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000a6f8:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000a6fe:	29 eb                	sub    ebx,ebp
c000a700:	29 ef                	sub    edi,ebp
c000a702:	e8 b8 d6 ff ff       	call   c0007dbf <Phys::allocatePage()>
c000a707:	83 ec 0c             	sub    esp,0xc
c000a70a:	68 03 04 00 00       	push   0x403
c000a70f:	6a 01                	push   0x1
c000a711:	53                   	push   ebx
c000a712:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a718:	50                   	push   eax
c000a719:	56                   	push   esi
c000a71a:	e8 fb f7 ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a71f:	83 c4 20             	add    esp,0x20
c000a722:	39 fb                	cmp    ebx,edi
c000a724:	75 dc                	jne    c000a702 <mapVASFirstTime+0x35>
c000a726:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000a72b:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000a730:	29 eb                	sub    ebx,ebp
c000a732:	29 ef                	sub    edi,ebp
c000a734:	e8 86 d6 ff ff       	call   c0007dbf <Phys::allocatePage()>
c000a739:	0f b6 56 01          	movzx  edx,BYTE PTR [esi+0x1]
c000a73d:	83 fa 01             	cmp    edx,0x1
c000a740:	19 d2                	sbb    edx,edx
c000a742:	83 ec 0c             	sub    esp,0xc
c000a745:	83 e2 04             	and    edx,0x4
c000a748:	81 c2 03 04 00 00    	add    edx,0x403
c000a74e:	52                   	push   edx
c000a74f:	6a 01                	push   0x1
c000a751:	53                   	push   ebx
c000a752:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a758:	50                   	push   eax
c000a759:	56                   	push   esi
c000a75a:	e8 bb f7 ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a75f:	83 c4 20             	add    esp,0x20
c000a762:	39 df                	cmp    edi,ebx
c000a764:	75 ce                	jne    c000a734 <mapVASFirstTime+0x67>
c000a766:	83 ec 0c             	sub    esp,0xc
c000a769:	bb 7c 60 02 c0       	mov    ebx,0xc002607c
c000a76e:	6a 04                	push   0x4
c000a770:	81 eb 00 50 02 c0    	sub    ebx,0xc0025000
c000a776:	6a ff                	push   0xffffffff
c000a778:	c1 eb 0c             	shr    ebx,0xc
c000a77b:	53                   	push   ebx
c000a77c:	68 00 50 02 c0       	push   0xc0025000
c000a781:	56                   	push   esi
c000a782:	e8 1f f3 ff ff       	call   c0009aa6 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c000a787:	83 c4 14             	add    esp,0x14
c000a78a:	a1 b0 6f 02 c0       	mov    eax,ds:0xc0026fb0
c000a78f:	6a 04                	push   0x4
c000a791:	6a ff                	push   0xffffffff
c000a793:	53                   	push   ebx
c000a794:	68 00 50 02 c0       	push   0xc0025000
c000a799:	50                   	push   eax
c000a79a:	e8 07 f3 ff ff       	call   c0009aa6 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c000a79f:	0f 20 d8             	mov    eax,cr3
c000a7a2:	0f 22 d8             	mov    cr3,eax
c000a7a5:	83 c4 20             	add    esp,0x20
c000a7a8:	83 c4 0c             	add    esp,0xc
c000a7ab:	5b                   	pop    ebx
c000a7ac:	5e                   	pop    esi
c000a7ad:	5f                   	pop    edi
c000a7ae:	5d                   	pop    ebp
c000a7af:	c3                   	ret    
c000a7b0:	83 ec 0c             	sub    esp,0xc
c000a7b3:	68 6d 13 02 c0       	push   0xc002136d
c000a7b8:	e8 88 01 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a7bd:	83 c4 10             	add    esp,0x10
c000a7c0:	83 c4 0c             	add    esp,0xc
c000a7c3:	5b                   	pop    ebx
c000a7c4:	5e                   	pop    esi
c000a7c5:	5f                   	pop    edi
c000a7c6:	5d                   	pop    ebp
c000a7c7:	c3                   	ret    

c000a7c8 <__cxa_atexit>:
c000a7c8:	31 c0                	xor    eax,eax
c000a7ca:	c3                   	ret    

c000a7cb <__cxa_finalize>:
c000a7cb:	c3                   	ret    

c000a7cc <__stack_chk_fail>:
c000a7cc:	55                   	push   ebp
c000a7cd:	89 e5                	mov    ebp,esp
c000a7cf:	83 ec 10             	sub    esp,0x10
c000a7d2:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000a7d5:	68 86 13 02 c0       	push   0xc0021386
c000a7da:	e8 66 01 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a7df:	58                   	pop    eax
c000a7e0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000a7e3:	5a                   	pop    edx
c000a7e4:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000a7e7:	68 86 13 02 c0       	push   0xc0021386
c000a7ec:	e8 54 01 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a7f1:	c7 04 24 8e 13 02 c0 	mov    DWORD PTR [esp],0xc002138e
c000a7f8:	e8 96 6e 00 00       	call   c0011693 <KePanic(char const*)>
c000a7fd:	83 c4 10             	add    esp,0x10
c000a800:	c9                   	leave  
c000a801:	c3                   	ret    

c000a802 <__cxa_pure_virtual>:
c000a802:	83 ec 18             	sub    esp,0x18
c000a805:	68 a6 13 02 c0       	push   0xc00213a6
c000a80a:	e8 84 6e 00 00       	call   c0011693 <KePanic(char const*)>
c000a80f:	83 c4 1c             	add    esp,0x1c
c000a812:	c3                   	ret    

c000a813 <operator new[](unsigned long)>:
c000a813:	e9 9e d2 ff ff       	jmp    c0007ab6 <malloc>

c000a818 <operator delete(void*, unsigned long)>:
c000a818:	e9 b9 d2 ff ff       	jmp    c0007ad6 <rfree>

c000a81d <operator delete[](void*)>:
c000a81d:	e9 b4 d2 ff ff       	jmp    c0007ad6 <rfree>

c000a822 <operator delete[](void*, unsigned long)>:
c000a822:	e9 af d2 ff ff       	jmp    c0007ad6 <rfree>

c000a827 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000a827:	55                   	push   ebp
c000a828:	57                   	push   edi
c000a829:	56                   	push   esi
c000a82a:	be af 0e 02 c0       	mov    esi,0xc0020eaf
c000a82f:	53                   	push   ebx
c000a830:	83 ec 20             	sub    esp,0x20
c000a833:	a0 ae 0e 02 c0       	mov    al,ds:0xc0020eae
c000a838:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000a83c:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000a840:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a844:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000a848:	b8 10 00 00 00       	mov    eax,0x10
c000a84d:	f7 c7 02 00 00 00    	test   edi,0x2
c000a853:	75 60                	jne    c000a8b5 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x8e>
c000a855:	89 c1                	mov    ecx,eax
c000a857:	c1 e9 02             	shr    ecx,0x2
c000a85a:	fc                   	cld    
c000a85b:	31 d2                	xor    edx,edx
c000a85d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000a85f:	a8 02                	test   al,0x2
c000a861:	74 0b                	je     c000a86e <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x47>
c000a863:	66 8b 16             	mov    dx,WORD PTR [esi]
c000a866:	66 89 17             	mov    WORD PTR [edi],dx
c000a869:	ba 02 00 00 00       	mov    edx,0x2
c000a86e:	a8 01                	test   al,0x1
c000a870:	74 06                	je     c000a878 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x51>
c000a872:	8a 04 16             	mov    al,BYTE PTR [esi+edx*1]
c000a875:	88 04 17             	mov    BYTE PTR [edi+edx*1],al
c000a878:	89 ee                	mov    esi,ebp
c000a87a:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000a87e:	eb 02                	jmp    c000a882 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x5b>
c000a880:	89 c6                	mov    esi,eax
c000a882:	31 d2                	xor    edx,edx
c000a884:	83 c1 01             	add    ecx,0x1
c000a887:	89 f0                	mov    eax,esi
c000a889:	f7 f3                	div    ebx
c000a88b:	39 de                	cmp    esi,ebx
c000a88d:	73 f1                	jae    c000a880 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x59>
c000a88f:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000a892:	eb 02                	jmp    c000a896 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x6f>
c000a894:	89 c5                	mov    ebp,eax
c000a896:	31 d2                	xor    edx,edx
c000a898:	83 e9 01             	sub    ecx,0x1
c000a89b:	89 e8                	mov    eax,ebp
c000a89d:	f7 f3                	div    ebx
c000a89f:	39 dd                	cmp    ebp,ebx
c000a8a1:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000a8a5:	88 11                	mov    BYTE PTR [ecx],dl
c000a8a7:	73 eb                	jae    c000a894 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x6d>
c000a8a9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a8ad:	83 c4 20             	add    esp,0x20
c000a8b0:	5b                   	pop    ebx
c000a8b1:	5e                   	pop    esi
c000a8b2:	5f                   	pop    edi
c000a8b3:	5d                   	pop    ebp
c000a8b4:	c3                   	ret    
c000a8b5:	66 8b 16             	mov    dx,WORD PTR [esi]
c000a8b8:	83 c7 02             	add    edi,0x2
c000a8bb:	66 89 57 fe          	mov    WORD PTR [edi-0x2],dx
c000a8bf:	83 c6 02             	add    esi,0x2
c000a8c2:	83 e8 02             	sub    eax,0x2
c000a8c5:	eb 8e                	jmp    c000a855 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x2e>

c000a8c7 <Dbg::logc(char)>:
c000a8c7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a8cb:	f6 05 d0 6e 02 c0 10 	test   BYTE PTR ds:0xc0026ed0,0x10
c000a8d2:	75 12                	jne    c000a8e6 <Dbg::logc(char)+0x1f>
c000a8d4:	ba fd 03 00 00       	mov    edx,0x3fd
c000a8d9:	ec                   	in     al,dx
c000a8da:	a8 20                	test   al,0x20
c000a8dc:	74 fb                	je     c000a8d9 <Dbg::logc(char)+0x12>
c000a8de:	ba f8 03 00 00       	mov    edx,0x3f8
c000a8e3:	88 c8                	mov    al,cl
c000a8e5:	ee                   	out    dx,al
c000a8e6:	c3                   	ret    

c000a8e7 <Dbg::logs(char*)>:
c000a8e7:	53                   	push   ebx
c000a8e8:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a8ec:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a8ef:	85 c0                	test   eax,eax
c000a8f1:	74 11                	je     c000a904 <Dbg::logs(char*)+0x1d>
c000a8f3:	83 c3 01             	add    ebx,0x1
c000a8f6:	50                   	push   eax
c000a8f7:	e8 cb ff ff ff       	call   c000a8c7 <Dbg::logc(char)>
c000a8fc:	58                   	pop    eax
c000a8fd:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a900:	85 c0                	test   eax,eax
c000a902:	75 ef                	jne    c000a8f3 <Dbg::logs(char*)+0xc>
c000a904:	5b                   	pop    ebx
c000a905:	c3                   	ret    

c000a906 <Dbg::logWriteInt(unsigned int)>:
c000a906:	83 ec 10             	sub    esp,0x10
c000a909:	6a 0a                	push   0xa
c000a90b:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a90f:	50                   	push   eax
c000a910:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a914:	50                   	push   eax
c000a915:	e8 0d ff ff ff       	call   c000a827 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a91a:	50                   	push   eax
c000a91b:	e8 c7 ff ff ff       	call   c000a8e7 <Dbg::logs(char*)>
c000a920:	83 c4 20             	add    esp,0x20
c000a923:	c3                   	ret    

c000a924 <Dbg::logWriteIntBase(unsigned int, int)>:
c000a924:	83 ec 10             	sub    esp,0x10
c000a927:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a92b:	50                   	push   eax
c000a92c:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a930:	50                   	push   eax
c000a931:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a935:	52                   	push   edx
c000a936:	e8 ec fe ff ff       	call   c000a827 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a93b:	50                   	push   eax
c000a93c:	e8 a6 ff ff ff       	call   c000a8e7 <Dbg::logs(char*)>
c000a941:	83 c4 20             	add    esp,0x20
c000a944:	c3                   	ret    

c000a945 <Dbg::kprintf(char const*, ...)>:
c000a945:	55                   	push   ebp
c000a946:	57                   	push   edi
c000a947:	56                   	push   esi
c000a948:	53                   	push   ebx
c000a949:	83 ec 0c             	sub    esp,0xc
c000a94c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000a950:	f6 05 d0 6e 02 c0 10 	test   BYTE PTR ds:0xc0026ed0,0x10
c000a957:	74 08                	je     c000a961 <Dbg::kprintf(char const*, ...)+0x1c>
c000a959:	83 c4 0c             	add    esp,0xc
c000a95c:	5b                   	pop    ebx
c000a95d:	5e                   	pop    esi
c000a95e:	5f                   	pop    edi
c000a95f:	5d                   	pop    ebp
c000a960:	c3                   	ret    
c000a961:	8d 44 24 24          	lea    eax,[esp+0x24]
c000a965:	31 ff                	xor    edi,edi
c000a967:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a96b:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a96e:	85 c0                	test   eax,eax
c000a970:	74 e7                	je     c000a959 <Dbg::kprintf(char const*, ...)+0x14>
c000a972:	8d 77 01             	lea    esi,[edi+0x1]
c000a975:	83 f8 25             	cmp    eax,0x25
c000a978:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a97b:	75 47                	jne    c000a9c4 <Dbg::kprintf(char const*, ...)+0x7f>
c000a97d:	83 c7 02             	add    edi,0x2
c000a980:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000a983:	8d 34 3b             	lea    esi,[ebx+edi*1]
c000a986:	83 e8 25             	sub    eax,0x25
c000a989:	0f b6 c0             	movzx  eax,al
c000a98c:	83 f8 53             	cmp    eax,0x53
c000a98f:	0f 87 ce 00 00 00    	ja     c000aa63 <Dbg::kprintf(char const*, ...)+0x11e>
c000a995:	ff 24 85 bc 13 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdec44]
c000a99c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a9a0:	89 c8                	mov    eax,ecx
c000a9a2:	83 c1 04             	add    ecx,0x4
c000a9a5:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a9a9:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a9ab:	55                   	push   ebp
c000a9ac:	e8 55 ff ff ff       	call   c000a906 <Dbg::logWriteInt(unsigned int)>
c000a9b1:	58                   	pop    eax
c000a9b2:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000a9b5:	85 c0                	test   eax,eax
c000a9b7:	74 a0                	je     c000a959 <Dbg::kprintf(char const*, ...)+0x14>
c000a9b9:	8d 77 01             	lea    esi,[edi+0x1]
c000a9bc:	83 f8 25             	cmp    eax,0x25
c000a9bf:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a9c2:	74 b9                	je     c000a97d <Dbg::kprintf(char const*, ...)+0x38>
c000a9c4:	50                   	push   eax
c000a9c5:	89 f7                	mov    edi,esi
c000a9c7:	e8 fb fe ff ff       	call   c000a8c7 <Dbg::logc(char)>
c000a9cc:	89 ee                	mov    esi,ebp
c000a9ce:	58                   	pop    eax
c000a9cf:	eb e1                	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000a9d1:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a9d5:	89 c8                	mov    eax,ecx
c000a9d7:	83 c1 04             	add    ecx,0x4
c000a9da:	8b 00                	mov    eax,DWORD PTR [eax]
c000a9dc:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a9e0:	50                   	push   eax
c000a9e1:	e8 01 ff ff ff       	call   c000a8e7 <Dbg::logs(char*)>
c000a9e6:	58                   	pop    eax
c000a9e7:	eb c9                	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000a9e9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a9ed:	89 d0                	mov    eax,edx
c000a9ef:	83 c2 04             	add    edx,0x4
c000a9f2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a9f6:	8b 00                	mov    eax,DWORD PTR [eax]
c000a9f8:	50                   	push   eax
c000a9f9:	e8 08 ff ff ff       	call   c000a906 <Dbg::logWriteInt(unsigned int)>
c000a9fe:	58                   	pop    eax
c000a9ff:	eb b1                	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa01:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000aa05:	89 d0                	mov    eax,edx
c000aa07:	83 c2 04             	add    edx,0x4
c000aa0a:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000aa0d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa11:	50                   	push   eax
c000aa12:	e8 b0 fe ff ff       	call   c000a8c7 <Dbg::logc(char)>
c000aa17:	58                   	pop    eax
c000aa18:	eb 98                	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa1a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000aa1e:	89 c8                	mov    eax,ecx
c000aa20:	83 c1 04             	add    ecx,0x4
c000aa23:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000aa27:	6a 10                	push   0x10
c000aa29:	8b 08                	mov    ecx,DWORD PTR [eax]
c000aa2b:	51                   	push   ecx
c000aa2c:	e8 f3 fe ff ff       	call   c000a924 <Dbg::logWriteIntBase(unsigned int, int)>
c000aa31:	5d                   	pop    ebp
c000aa32:	58                   	pop    eax
c000aa33:	e9 7a ff ff ff       	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa38:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000aa3c:	89 d0                	mov    eax,edx
c000aa3e:	83 c2 08             	add    edx,0x8
c000aa41:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa45:	6a 10                	push   0x10
c000aa47:	8b 00                	mov    eax,DWORD PTR [eax]
c000aa49:	50                   	push   eax
c000aa4a:	e8 d5 fe ff ff       	call   c000a924 <Dbg::logWriteIntBase(unsigned int, int)>
c000aa4f:	58                   	pop    eax
c000aa50:	5a                   	pop    edx
c000aa51:	e9 5c ff ff ff       	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa56:	6a 25                	push   0x25
c000aa58:	e8 6a fe ff ff       	call   c000a8c7 <Dbg::logc(char)>
c000aa5d:	5a                   	pop    edx
c000aa5e:	e9 4f ff ff ff       	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa63:	6a 25                	push   0x25
c000aa65:	e8 5d fe ff ff       	call   c000a8c7 <Dbg::logc(char)>
c000aa6a:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000aa6e:	50                   	push   eax
c000aa6f:	e8 53 fe ff ff       	call   c000a8c7 <Dbg::logc(char)>
c000aa74:	5a                   	pop    edx
c000aa75:	59                   	pop    ecx
c000aa76:	e9 37 ff ff ff       	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa7b:	90                   	nop

c000aa7c <KiUbsanPrintDetails(char const*, void*)>:
c000aa7c:	83 ec 1c             	sub    esp,0x1c
c000aa7f:	83 ec 08             	sub    esp,0x8
c000aa82:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000aa86:	68 0c 15 02 c0       	push   0xc002150c
c000aa8b:	e8 b5 fe ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000aa90:	83 c4 10             	add    esp,0x10
c000aa93:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000aa97:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000aa9b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aa9f:	8b 00                	mov    eax,DWORD PTR [eax]
c000aaa1:	83 ec 08             	sub    esp,0x8
c000aaa4:	50                   	push   eax
c000aaa5:	68 20 15 02 c0       	push   0xc0021520
c000aaaa:	e8 96 fe ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000aaaf:	83 c4 10             	add    esp,0x10
c000aab2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aab6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000aab9:	83 ec 08             	sub    esp,0x8
c000aabc:	50                   	push   eax
c000aabd:	68 2a 15 02 c0       	push   0xc002152a
c000aac2:	e8 7e fe ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000aac7:	83 c4 10             	add    esp,0x10
c000aaca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aace:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000aad1:	83 ec 08             	sub    esp,0x8
c000aad4:	50                   	push   eax
c000aad5:	68 34 15 02 c0       	push   0xc0021534
c000aada:	e8 66 fe ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000aadf:	83 c4 10             	add    esp,0x10
c000aae2:	90                   	nop
c000aae3:	83 c4 1c             	add    esp,0x1c
c000aae6:	c3                   	ret    
c000aae7:	90                   	nop

c000aae8 <__ubsan_handle_type_mismatch_v1>:
c000aae8:	83 ec 0c             	sub    esp,0xc
c000aaeb:	83 ec 08             	sub    esp,0x8
c000aaee:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000aaf2:	68 78 16 02 c0       	push   0xc0021678
c000aaf7:	e8 80 ff ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000aafc:	83 c4 10             	add    esp,0x10
c000aaff:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000ab04:	75 16                	jne    c000ab1c <__ubsan_handle_type_mismatch_v1+0x34>
c000ab06:	83 ec 0c             	sub    esp,0xc
c000ab09:	68 3e 15 02 c0       	push   0xc002153e
c000ab0e:	e8 32 fe ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000ab13:	83 c4 10             	add    esp,0x10
c000ab16:	e9 91 00 00 00       	jmp    c000abac <__ubsan_handle_type_mismatch_v1+0xc4>
c000ab1b:	90                   	nop
c000ab1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab20:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000ab23:	85 c0                	test   eax,eax
c000ab25:	74 29                	je     c000ab50 <__ubsan_handle_type_mismatch_v1+0x68>
c000ab27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab2b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000ab2e:	83 e8 01             	sub    eax,0x1
c000ab31:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c000ab35:	75 19                	jne    c000ab50 <__ubsan_handle_type_mismatch_v1+0x68>
c000ab37:	83 ec 08             	sub    esp,0x8
c000ab3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab3e:	68 98 16 02 c0       	push   0xc0021698
c000ab43:	e8 fd fd ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000ab48:	83 c4 10             	add    esp,0x10
c000ab4b:	eb 5f                	jmp    c000abac <__ubsan_handle_type_mismatch_v1+0xc4>
c000ab4d:	8d 76 00             	lea    esi,[esi+0x0]
c000ab50:	83 ec 0c             	sub    esp,0xc
c000ab53:	68 53 15 02 c0       	push   0xc0021553
c000ab58:	e8 e8 fd ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000ab5d:	83 c4 10             	add    esp,0x10
c000ab60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab64:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000ab67:	0f b6 c0             	movzx  eax,al
c000ab6a:	83 ec 08             	sub    esp,0x8
c000ab6d:	50                   	push   eax
c000ab6e:	68 6d 15 02 c0       	push   0xc002156d
c000ab73:	e8 cd fd ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000ab78:	83 c4 10             	add    esp,0x10
c000ab7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab7f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ab82:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c000ab85:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ab89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab8d:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000ab90:	0f b6 c0             	movzx  eax,al
c000ab93:	8b 04 85 60 37 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc8a0]
c000ab9a:	51                   	push   ecx
c000ab9b:	52                   	push   edx
c000ab9c:	50                   	push   eax
c000ab9d:	68 c0 16 02 c0       	push   0xc00216c0
c000aba2:	e8 9e fd ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000aba7:	83 c4 10             	add    esp,0x10
c000abaa:	66 90                	xchg   ax,ax
c000abac:	83 ec 0c             	sub    esp,0xc
c000abaf:	68 78 16 02 c0       	push   0xc0021678
c000abb4:	e8 da 6a 00 00       	call   c0011693 <KePanic(char const*)>
c000abb9:	83 c4 10             	add    esp,0x10
c000abbc:	90                   	nop
c000abbd:	83 c4 0c             	add    esp,0xc
c000abc0:	c3                   	ret    
c000abc1:	8d 76 00             	lea    esi,[esi+0x0]

c000abc4 <__ubsan_handle_pointer_overflow>:
c000abc4:	83 ec 0c             	sub    esp,0xc
c000abc7:	83 ec 08             	sub    esp,0x8
c000abca:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000abce:	68 08 17 02 c0       	push   0xc0021708
c000abd3:	e8 a4 fe ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000abd8:	83 c4 10             	add    esp,0x10
c000abdb:	83 ec 0c             	sub    esp,0xc
c000abde:	68 08 17 02 c0       	push   0xc0021708
c000abe3:	e8 ab 6a 00 00       	call   c0011693 <KePanic(char const*)>
c000abe8:	83 c4 10             	add    esp,0x10
c000abeb:	90                   	nop
c000abec:	83 c4 0c             	add    esp,0xc
c000abef:	c3                   	ret    

c000abf0 <__ubsan_handle_out_of_bounds>:
c000abf0:	83 ec 0c             	sub    esp,0xc
c000abf3:	83 ec 08             	sub    esp,0x8
c000abf6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000abfa:	68 78 15 02 c0       	push   0xc0021578
c000abff:	e8 78 fe ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000ac04:	83 c4 10             	add    esp,0x10
c000ac07:	83 ec 0c             	sub    esp,0xc
c000ac0a:	68 78 15 02 c0       	push   0xc0021578
c000ac0f:	e8 7f 6a 00 00       	call   c0011693 <KePanic(char const*)>
c000ac14:	83 c4 10             	add    esp,0x10
c000ac17:	90                   	nop
c000ac18:	83 c4 0c             	add    esp,0xc
c000ac1b:	c3                   	ret    

c000ac1c <__ubsan_handle_add_overflow>:
c000ac1c:	83 ec 0c             	sub    esp,0xc
c000ac1f:	83 ec 08             	sub    esp,0x8
c000ac22:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac26:	68 95 15 02 c0       	push   0xc0021595
c000ac2b:	e8 4c fe ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000ac30:	83 c4 10             	add    esp,0x10
c000ac33:	83 ec 0c             	sub    esp,0xc
c000ac36:	68 95 15 02 c0       	push   0xc0021595
c000ac3b:	e8 53 6a 00 00       	call   c0011693 <KePanic(char const*)>
c000ac40:	83 c4 10             	add    esp,0x10
c000ac43:	90                   	nop
c000ac44:	83 c4 0c             	add    esp,0xc
c000ac47:	c3                   	ret    

c000ac48 <__ubsan_handle_load_invalid_value>:
c000ac48:	83 ec 0c             	sub    esp,0xc
c000ac4b:	83 ec 08             	sub    esp,0x8
c000ac4e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac52:	68 28 17 02 c0       	push   0xc0021728
c000ac57:	e8 20 fe ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000ac5c:	83 c4 10             	add    esp,0x10
c000ac5f:	83 ec 0c             	sub    esp,0xc
c000ac62:	68 28 17 02 c0       	push   0xc0021728
c000ac67:	e8 27 6a 00 00       	call   c0011693 <KePanic(char const*)>
c000ac6c:	83 c4 10             	add    esp,0x10
c000ac6f:	90                   	nop
c000ac70:	83 c4 0c             	add    esp,0xc
c000ac73:	c3                   	ret    

c000ac74 <__ubsan_handle_divrem_overflow>:
c000ac74:	83 ec 0c             	sub    esp,0xc
c000ac77:	83 ec 08             	sub    esp,0x8
c000ac7a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac7e:	68 4c 17 02 c0       	push   0xc002174c
c000ac83:	e8 f4 fd ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000ac88:	83 c4 10             	add    esp,0x10
c000ac8b:	83 ec 0c             	sub    esp,0xc
c000ac8e:	68 4c 17 02 c0       	push   0xc002174c
c000ac93:	e8 fb 69 00 00       	call   c0011693 <KePanic(char const*)>
c000ac98:	83 c4 10             	add    esp,0x10
c000ac9b:	90                   	nop
c000ac9c:	83 c4 0c             	add    esp,0xc
c000ac9f:	c3                   	ret    

c000aca0 <__ubsan_handle_mul_overflow>:
c000aca0:	83 ec 0c             	sub    esp,0xc
c000aca3:	83 ec 08             	sub    esp,0x8
c000aca6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000acaa:	68 b1 15 02 c0       	push   0xc00215b1
c000acaf:	e8 c8 fd ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000acb4:	83 c4 10             	add    esp,0x10
c000acb7:	83 ec 0c             	sub    esp,0xc
c000acba:	68 b1 15 02 c0       	push   0xc00215b1
c000acbf:	e8 cf 69 00 00       	call   c0011693 <KePanic(char const*)>
c000acc4:	83 c4 10             	add    esp,0x10
c000acc7:	90                   	nop
c000acc8:	83 c4 0c             	add    esp,0xc
c000accb:	c3                   	ret    

c000accc <__ubsan_handle_sub_overflow>:
c000accc:	83 ec 0c             	sub    esp,0xc
c000accf:	83 ec 08             	sub    esp,0x8
c000acd2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000acd6:	68 cd 15 02 c0       	push   0xc00215cd
c000acdb:	e8 9c fd ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000ace0:	83 c4 10             	add    esp,0x10
c000ace3:	83 ec 0c             	sub    esp,0xc
c000ace6:	68 cd 15 02 c0       	push   0xc00215cd
c000aceb:	e8 a3 69 00 00       	call   c0011693 <KePanic(char const*)>
c000acf0:	83 c4 10             	add    esp,0x10
c000acf3:	90                   	nop
c000acf4:	83 c4 0c             	add    esp,0xc
c000acf7:	c3                   	ret    

c000acf8 <__ubsan_handle_shift_out_of_bounds>:
c000acf8:	83 ec 0c             	sub    esp,0xc
c000acfb:	83 ec 08             	sub    esp,0x8
c000acfe:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ad02:	68 6c 17 02 c0       	push   0xc002176c
c000ad07:	e8 70 fd ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000ad0c:	83 c4 10             	add    esp,0x10
c000ad0f:	83 ec 0c             	sub    esp,0xc
c000ad12:	68 6c 17 02 c0       	push   0xc002176c
c000ad17:	e8 77 69 00 00       	call   c0011693 <KePanic(char const*)>
c000ad1c:	83 c4 10             	add    esp,0x10
c000ad1f:	90                   	nop
c000ad20:	83 c4 0c             	add    esp,0xc
c000ad23:	c3                   	ret    

c000ad24 <__ubsan_handle_negate_overflow>:
c000ad24:	83 ec 0c             	sub    esp,0xc
c000ad27:	83 ec 08             	sub    esp,0x8
c000ad2a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ad2e:	68 90 17 02 c0       	push   0xc0021790
c000ad33:	e8 44 fd ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000ad38:	83 c4 10             	add    esp,0x10
c000ad3b:	83 ec 0c             	sub    esp,0xc
c000ad3e:	68 90 17 02 c0       	push   0xc0021790
c000ad43:	e8 4b 69 00 00       	call   c0011693 <KePanic(char const*)>
c000ad48:	83 c4 10             	add    esp,0x10
c000ad4b:	90                   	nop
c000ad4c:	83 c4 0c             	add    esp,0xc
c000ad4f:	c3                   	ret    

c000ad50 <KiFlushSymlinkChanges()>:
c000ad50:	57                   	push   edi
c000ad51:	56                   	push   esi
c000ad52:	53                   	push   ebx
c000ad53:	83 ec 1c             	sub    esp,0x1c
c000ad56:	68 14 01 00 00       	push   0x114
c000ad5b:	e8 56 cd ff ff       	call   c0007ab6 <malloc>
c000ad60:	83 c4 0c             	add    esp,0xc
c000ad63:	89 c3                	mov    ebx,eax
c000ad65:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000ad6b:	68 af 17 02 c0       	push   0xc00217af
c000ad70:	50                   	push   eax
c000ad71:	e8 4c 0e 00 00       	call   c000bbc2 <File::File(char const*, Process*)>
c000ad76:	83 c4 10             	add    esp,0x10
c000ad79:	85 db                	test   ebx,ebx
c000ad7b:	75 10                	jne    c000ad8d <KiFlushSymlinkChanges()+0x3d>
c000ad7d:	83 ec 0c             	sub    esp,0xc
c000ad80:	68 cd 17 02 c0       	push   0xc00217cd
c000ad85:	e8 09 69 00 00       	call   c0011693 <KePanic(char const*)>
c000ad8a:	83 c4 10             	add    esp,0x10
c000ad8d:	50                   	push   eax
c000ad8e:	50                   	push   eax
c000ad8f:	6a 06                	push   0x6
c000ad91:	53                   	push   ebx
c000ad92:	e8 49 0e 00 00       	call   c000bbe0 <File::open(FileOpenMode)>
c000ad97:	83 c4 10             	add    esp,0x10
c000ad9a:	85 c0                	test   eax,eax
c000ad9c:	74 10                	je     c000adae <KiFlushSymlinkChanges()+0x5e>
c000ad9e:	83 ec 0c             	sub    esp,0xc
c000ada1:	68 e7 17 02 c0       	push   0xc00217e7
c000ada6:	e8 e8 68 00 00       	call   c0011693 <KePanic(char const*)>
c000adab:	83 c4 10             	add    esp,0x10
c000adae:	31 f6                	xor    esi,esi
c000adb0:	39 35 c0 6f 02 c0    	cmp    DWORD PTR ds:0xc0026fc0,esi
c000adb6:	7e 70                	jle    c000ae28 <KiFlushSymlinkChanges()+0xd8>
c000adb8:	83 ec 0c             	sub    esp,0xc
c000adbb:	8b 13                	mov    edx,DWORD PTR [ebx]
c000adbd:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000adc1:	89 f0                	mov    eax,esi
c000adc3:	57                   	push   edi
c000adc4:	c1 e0 08             	shl    eax,0x8
c000adc7:	05 00 70 02 c0       	add    eax,0xc0027000
c000adcc:	50                   	push   eax
c000adcd:	6a 00                	push   0x0
c000adcf:	68 00 01 00 00       	push   0x100
c000add4:	53                   	push   ebx
c000add5:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000add8:	83 c4 20             	add    esp,0x20
c000addb:	81 7c 24 0c 00 01 00 00 	cmp    DWORD PTR [esp+0xc],0x100
c000ade3:	74 10                	je     c000adf5 <KiFlushSymlinkChanges()+0xa5>
c000ade5:	83 ec 0c             	sub    esp,0xc
c000ade8:	68 01 18 02 c0       	push   0xc0021801
c000aded:	e8 a1 68 00 00       	call   c0011693 <KePanic(char const*)>
c000adf2:	83 c4 10             	add    esp,0x10
c000adf5:	83 ec 0c             	sub    esp,0xc
c000adf8:	8b 03                	mov    eax,DWORD PTR [ebx]
c000adfa:	8d 14 f5 e0 6f 02 c0 	lea    edx,[esi*8-0x3ffd9020]
c000ae01:	57                   	push   edi
c000ae02:	52                   	push   edx
c000ae03:	6a 00                	push   0x0
c000ae05:	6a 08                	push   0x8
c000ae07:	53                   	push   ebx
c000ae08:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000ae0b:	83 c4 20             	add    esp,0x20
c000ae0e:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000ae13:	74 10                	je     c000ae25 <KiFlushSymlinkChanges()+0xd5>
c000ae15:	83 ec 0c             	sub    esp,0xc
c000ae18:	68 1b 18 02 c0       	push   0xc002181b
c000ae1d:	e8 71 68 00 00       	call   c0011693 <KePanic(char const*)>
c000ae22:	83 c4 10             	add    esp,0x10
c000ae25:	46                   	inc    esi
c000ae26:	eb 88                	jmp    c000adb0 <KiFlushSymlinkChanges()+0x60>
c000ae28:	83 ec 0c             	sub    esp,0xc
c000ae2b:	53                   	push   ebx
c000ae2c:	e8 0d 0e 00 00       	call   c000bc3e <File::close()>
c000ae31:	83 c4 10             	add    esp,0x10
c000ae34:	85 db                	test   ebx,ebx
c000ae36:	74 0c                	je     c000ae44 <KiFlushSymlinkChanges()+0xf4>
c000ae38:	83 ec 0c             	sub    esp,0xc
c000ae3b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ae3d:	53                   	push   ebx
c000ae3e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000ae41:	83 c4 10             	add    esp,0x10
c000ae44:	c7 05 c0 6f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026fc0,0x0
c000ae4e:	83 c4 10             	add    esp,0x10
c000ae51:	5b                   	pop    ebx
c000ae52:	5e                   	pop    esi
c000ae53:	5f                   	pop    edi
c000ae54:	c3                   	ret    

c000ae55 <KiDeinitialiseSymlinks(void*)>:
c000ae55:	e9 f6 fe ff ff       	jmp    c000ad50 <KiFlushSymlinkChanges()>

c000ae5a <KiGetSymlinkHash(char const*)>:
c000ae5a:	53                   	push   ebx
c000ae5b:	89 c3                	mov    ebx,eax
c000ae5d:	83 ec 14             	sub    esp,0x14
c000ae60:	50                   	push   eax
c000ae61:	e8 0a 57 ff ff       	call   c0000570 <strlen>
c000ae66:	5a                   	pop    edx
c000ae67:	59                   	pop    ecx
c000ae68:	50                   	push   eax
c000ae69:	53                   	push   ebx
c000ae6a:	e8 a6 61 00 00       	call   c0011015 <KeCalculateCRC32(unsigned char*, int)>
c000ae6f:	83 c4 18             	add    esp,0x18
c000ae72:	89 c2                	mov    edx,eax
c000ae74:	5b                   	pop    ebx
c000ae75:	c1 ea 10             	shr    edx,0x10
c000ae78:	31 d0                	xor    eax,edx
c000ae7a:	c3                   	ret    

c000ae7b <KiSetHashInTable(unsigned short, bool)>:
c000ae7b:	57                   	push   edi
c000ae7c:	89 c7                	mov    edi,eax
c000ae7e:	56                   	push   esi
c000ae7f:	0f b6 f2             	movzx  esi,dl
c000ae82:	53                   	push   ebx
c000ae83:	0f b7 d8             	movzx  ebx,ax
c000ae86:	50                   	push   eax
c000ae87:	56                   	push   esi
c000ae88:	53                   	push   ebx
c000ae89:	c1 fb 03             	sar    ebx,0x3
c000ae8c:	68 35 18 02 c0       	push   0xc0021835
c000ae91:	e8 af fa ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000ae96:	89 f9                	mov    ecx,edi
c000ae98:	b8 01 00 00 00       	mov    eax,0x1
c000ae9d:	83 e1 07             	and    ecx,0x7
c000aea0:	83 c4 10             	add    esp,0x10
c000aea3:	d3 e0                	shl    eax,cl
c000aea5:	8a 93 00 74 02 c0    	mov    dl,BYTE PTR [ebx-0x3ffd8c00]
c000aeab:	85 f6                	test   esi,esi
c000aead:	74 04                	je     c000aeb3 <KiSetHashInTable(unsigned short, bool)+0x38>
c000aeaf:	09 d0                	or     eax,edx
c000aeb1:	eb 04                	jmp    c000aeb7 <KiSetHashInTable(unsigned short, bool)+0x3c>
c000aeb3:	f7 d0                	not    eax
c000aeb5:	21 d0                	and    eax,edx
c000aeb7:	88 83 00 74 02 c0    	mov    BYTE PTR [ebx-0x3ffd8c00],al
c000aebd:	5b                   	pop    ebx
c000aebe:	5e                   	pop    esi
c000aebf:	5f                   	pop    edi
c000aec0:	c3                   	ret    

c000aec1 <KiIsHashInTable(unsigned short)>:
c000aec1:	53                   	push   ebx
c000aec2:	0f b7 d0             	movzx  edx,ax
c000aec5:	83 ec 1c             	sub    esp,0x1c
c000aec8:	89 d3                	mov    ebx,edx
c000aeca:	83 e0 07             	and    eax,0x7
c000aecd:	c1 fb 03             	sar    ebx,0x3
c000aed0:	89 c1                	mov    ecx,eax
c000aed2:	0f b6 83 00 74 02 c0 	movzx  eax,BYTE PTR [ebx-0x3ffd8c00]
c000aed9:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000aedd:	d3 f8                	sar    eax,cl
c000aedf:	83 e0 01             	and    eax,0x1
c000aee2:	50                   	push   eax
c000aee3:	52                   	push   edx
c000aee4:	68 4e 18 02 c0       	push   0xc002184e
c000aee9:	e8 57 fa ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000aeee:	0f b6 93 00 74 02 c0 	movzx  edx,BYTE PTR [ebx-0x3ffd8c00]
c000aef5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000aef9:	89 d0                	mov    eax,edx
c000aefb:	83 c4 28             	add    esp,0x28
c000aefe:	d3 f8                	sar    eax,cl
c000af00:	5b                   	pop    ebx
c000af01:	83 e0 01             	and    eax,0x1
c000af04:	c3                   	ret    

c000af05 <KiCreateSymlinkID()>:
c000af05:	55                   	push   ebp
c000af06:	57                   	push   edi
c000af07:	56                   	push   esi
c000af08:	53                   	push   ebx
c000af09:	31 db                	xor    ebx,ebx
c000af0b:	83 ec 1c             	sub    esp,0x1c
c000af0e:	e8 ce 68 00 00       	call   c00117e1 <KeRand()>
c000af13:	43                   	inc    ebx
c000af14:	8b 2d 00 94 02 c0    	mov    ebp,DWORD PTR ds:0xc0029400
c000af1a:	31 d2                	xor    edx,edx
c000af1c:	8d 4d 01             	lea    ecx,[ebp+0x1]
c000af1f:	0f a4 c2 1b          	shld   edx,eax,0x1b
c000af23:	89 0d 00 94 02 c0    	mov    DWORD PTR ds:0xc0029400,ecx
c000af29:	c1 e0 1b             	shl    eax,0x1b
c000af2c:	89 d7                	mov    edi,edx
c000af2e:	89 c6                	mov    esi,eax
c000af30:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c000af34:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000af3c:	81 fb 9a 02 00 00    	cmp    ebx,0x29a
c000af42:	75 10                	jne    c000af54 <KiCreateSymlinkID()+0x4f>
c000af44:	83 ec 0c             	sub    esp,0xc
c000af47:	68 6b 18 02 c0       	push   0xc002186b
c000af4c:	e8 42 67 00 00       	call   c0011693 <KePanic(char const*)>
c000af51:	83 c4 10             	add    esp,0x10
c000af54:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000af58:	75 04                	jne    c000af5e <KiCreateSymlinkID()+0x59>
c000af5a:	39 f5                	cmp    ebp,esi
c000af5c:	74 b0                	je     c000af0e <KiCreateSymlinkID()+0x9>
c000af5e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000af62:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000af66:	31 f0                	xor    eax,esi
c000af68:	83 c4 1c             	add    esp,0x1c
c000af6b:	31 fa                	xor    edx,edi
c000af6d:	5b                   	pop    ebx
c000af6e:	5e                   	pop    esi
c000af6f:	5f                   	pop    edi
c000af70:	5d                   	pop    ebp
c000af71:	c3                   	ret    

c000af72 <KeRegisterSymlink(char const*, unsigned long long)>:
c000af72:	53                   	push   ebx
c000af73:	83 ec 0c             	sub    esp,0xc
c000af76:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000af7a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000af7e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000af82:	a1 c0 6f 02 c0       	mov    eax,ds:0xc0026fc0
c000af87:	68 00 01 00 00       	push   0x100
c000af8c:	89 0c c5 e4 6f 02 c0 	mov    DWORD PTR [eax*8-0x3ffd901c],ecx
c000af93:	6a 00                	push   0x0
c000af95:	89 14 c5 e0 6f 02 c0 	mov    DWORD PTR [eax*8-0x3ffd9020],edx
c000af9c:	c1 e0 08             	shl    eax,0x8
c000af9f:	05 00 70 02 c0       	add    eax,0xc0027000
c000afa4:	50                   	push   eax
c000afa5:	e8 46 55 ff ff       	call   c00004f0 <memset>
c000afaa:	58                   	pop    eax
c000afab:	a1 c0 6f 02 c0       	mov    eax,ds:0xc0026fc0
c000afb0:	5a                   	pop    edx
c000afb1:	c1 e0 08             	shl    eax,0x8
c000afb4:	53                   	push   ebx
c000afb5:	05 00 70 02 c0       	add    eax,0xc0027000
c000afba:	50                   	push   eax
c000afbb:	e8 80 56 ff ff       	call   c0000640 <strcpy>
c000afc0:	89 d8                	mov    eax,ebx
c000afc2:	e8 93 fe ff ff       	call   c000ae5a <KiGetSymlinkHash(char const*)>
c000afc7:	ba 01 00 00 00       	mov    edx,0x1
c000afcc:	0f b7 c0             	movzx  eax,ax
c000afcf:	e8 a7 fe ff ff       	call   c000ae7b <KiSetHashInTable(unsigned short, bool)>
c000afd4:	a1 c0 6f 02 c0       	mov    eax,ds:0xc0026fc0
c000afd9:	83 c4 10             	add    esp,0x10
c000afdc:	40                   	inc    eax
c000afdd:	a3 c0 6f 02 c0       	mov    ds:0xc0026fc0,eax
c000afe2:	83 f8 03             	cmp    eax,0x3
c000afe5:	7e 09                	jle    c000aff0 <KeRegisterSymlink(char const*, unsigned long long)+0x7e>
c000afe7:	83 c4 08             	add    esp,0x8
c000afea:	5b                   	pop    ebx
c000afeb:	e9 60 fd ff ff       	jmp    c000ad50 <KiFlushSymlinkChanges()>
c000aff0:	83 c4 08             	add    esp,0x8
c000aff3:	5b                   	pop    ebx
c000aff4:	c3                   	ret    

c000aff5 <KiIsSymlinkRegistered(char const*)>:
c000aff5:	55                   	push   ebp
c000aff6:	57                   	push   edi
c000aff7:	56                   	push   esi
c000aff8:	53                   	push   ebx
c000aff9:	81 ec 1c 01 00 00    	sub    esp,0x11c
c000afff:	8b b4 24 30 01 00 00 	mov    esi,DWORD PTR [esp+0x130]
c000b006:	89 f0                	mov    eax,esi
c000b008:	e8 4d fe ff ff       	call   c000ae5a <KiGetSymlinkHash(char const*)>
c000b00d:	0f b7 c0             	movzx  eax,ax
c000b010:	e8 ac fe ff ff       	call   c000aec1 <KiIsHashInTable(unsigned short)>
c000b015:	31 d2                	xor    edx,edx
c000b017:	88 c1                	mov    cl,al
c000b019:	31 c0                	xor    eax,eax
c000b01b:	84 c9                	test   cl,cl
c000b01d:	0f 84 4e 01 00 00    	je     c000b171 <KiIsSymlinkRegistered(char const*)+0x17c>
c000b023:	31 db                	xor    ebx,ebx
c000b025:	50                   	push   eax
c000b026:	50                   	push   eax
c000b027:	56                   	push   esi
c000b028:	68 74 18 02 c0       	push   0xc0021874
c000b02d:	e8 13 f9 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000b032:	83 c4 10             	add    esp,0x10
c000b035:	39 1d c0 6f 02 c0    	cmp    DWORD PTR ds:0xc0026fc0,ebx
c000b03b:	7e 30                	jle    c000b06d <KiIsSymlinkRegistered(char const*)+0x78>
c000b03d:	89 d8                	mov    eax,ebx
c000b03f:	55                   	push   ebp
c000b040:	c1 e0 08             	shl    eax,0x8
c000b043:	55                   	push   ebp
c000b044:	05 00 70 02 c0       	add    eax,0xc0027000
c000b049:	50                   	push   eax
c000b04a:	56                   	push   esi
c000b04b:	e8 00 57 ff ff       	call   c0000750 <strcmp>
c000b050:	83 c4 10             	add    esp,0x10
c000b053:	85 c0                	test   eax,eax
c000b055:	75 13                	jne    c000b06a <KiIsSymlinkRegistered(char const*)+0x75>
c000b057:	8b 04 dd e0 6f 02 c0 	mov    eax,DWORD PTR [ebx*8-0x3ffd9020]
c000b05e:	8b 14 dd e4 6f 02 c0 	mov    edx,DWORD PTR [ebx*8-0x3ffd901c]
c000b065:	e9 07 01 00 00       	jmp    c000b171 <KiIsSymlinkRegistered(char const*)+0x17c>
c000b06a:	43                   	inc    ebx
c000b06b:	eb c8                	jmp    c000b035 <KiIsSymlinkRegistered(char const*)+0x40>
c000b06d:	83 ec 0c             	sub    esp,0xc
c000b070:	68 14 01 00 00       	push   0x114
c000b075:	e8 3c ca ff ff       	call   c0007ab6 <malloc>
c000b07a:	83 c4 0c             	add    esp,0xc
c000b07d:	89 c3                	mov    ebx,eax
c000b07f:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000b085:	68 af 17 02 c0       	push   0xc00217af
c000b08a:	50                   	push   eax
c000b08b:	e8 32 0b 00 00       	call   c000bbc2 <File::File(char const*, Process*)>
c000b090:	83 c4 10             	add    esp,0x10
c000b093:	85 db                	test   ebx,ebx
c000b095:	75 12                	jne    c000b0a9 <KiIsSymlinkRegistered(char const*)+0xb4>
c000b097:	83 ec 0c             	sub    esp,0xc
c000b09a:	68 93 18 02 c0       	push   0xc0021893
c000b09f:	e8 ef 65 00 00       	call   c0011693 <KePanic(char const*)>
c000b0a4:	83 c4 10             	add    esp,0x10
c000b0a7:	eb 10                	jmp    c000b0b9 <KiIsSymlinkRegistered(char const*)+0xc4>
c000b0a9:	83 ec 0c             	sub    esp,0xc
c000b0ac:	53                   	push   ebx
c000b0ad:	e8 f2 0d 00 00       	call   c000bea4 <File::exists()>
c000b0b2:	83 c4 10             	add    esp,0x10
c000b0b5:	84 c0                	test   al,al
c000b0b7:	74 de                	je     c000b097 <KiIsSymlinkRegistered(char const*)+0xa2>
c000b0b9:	57                   	push   edi
c000b0ba:	57                   	push   edi
c000b0bb:	6a 01                	push   0x1
c000b0bd:	53                   	push   ebx
c000b0be:	e8 1d 0b 00 00       	call   c000bbe0 <File::open(FileOpenMode)>
c000b0c3:	83 c4 10             	add    esp,0x10
c000b0c6:	85 c0                	test   eax,eax
c000b0c8:	74 10                	je     c000b0da <KiIsSymlinkRegistered(char const*)+0xe5>
c000b0ca:	83 ec 0c             	sub    esp,0xc
c000b0cd:	68 ae 18 02 c0       	push   0xc00218ae
c000b0d2:	e8 bc 65 00 00       	call   c0011693 <KePanic(char const*)>
c000b0d7:	83 c4 10             	add    esp,0x10
c000b0da:	83 ec 0c             	sub    esp,0xc
c000b0dd:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b0df:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c000b0e3:	55                   	push   ebp
c000b0e4:	8d 7c 24 20          	lea    edi,[esp+0x20]
c000b0e8:	57                   	push   edi
c000b0e9:	6a 00                	push   0x0
c000b0eb:	68 00 01 00 00       	push   0x100
c000b0f0:	53                   	push   ebx
c000b0f1:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b0f4:	83 c4 20             	add    esp,0x20
c000b0f7:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c000b0ff:	75 58                	jne    c000b159 <KiIsSymlinkRegistered(char const*)+0x164>
c000b101:	83 ec 0c             	sub    esp,0xc
c000b104:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b106:	55                   	push   ebp
c000b107:	8d 54 24 18          	lea    edx,[esp+0x18]
c000b10b:	52                   	push   edx
c000b10c:	6a 00                	push   0x0
c000b10e:	6a 08                	push   0x8
c000b110:	53                   	push   ebx
c000b111:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b114:	83 c4 20             	add    esp,0x20
c000b117:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000b11c:	75 3b                	jne    c000b159 <KiIsSymlinkRegistered(char const*)+0x164>
c000b11e:	50                   	push   eax
c000b11f:	57                   	push   edi
c000b120:	56                   	push   esi
c000b121:	68 c9 18 02 c0       	push   0xc00218c9
c000b126:	e8 1a f8 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000b12b:	5a                   	pop    edx
c000b12c:	59                   	pop    ecx
c000b12d:	57                   	push   edi
c000b12e:	56                   	push   esi
c000b12f:	e8 1c 56 ff ff       	call   c0000750 <strcmp>
c000b134:	83 c4 10             	add    esp,0x10
c000b137:	85 c0                	test   eax,eax
c000b139:	75 9f                	jne    c000b0da <KiIsSymlinkRegistered(char const*)+0xe5>
c000b13b:	83 ec 0c             	sub    esp,0xc
c000b13e:	53                   	push   ebx
c000b13f:	e8 fa 0a 00 00       	call   c000bc3e <File::close()>
c000b144:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b146:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b149:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b14c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b150:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000b154:	83 c4 10             	add    esp,0x10
c000b157:	eb 18                	jmp    c000b171 <KiIsSymlinkRegistered(char const*)+0x17c>
c000b159:	83 ec 0c             	sub    esp,0xc
c000b15c:	53                   	push   ebx
c000b15d:	e8 dc 0a 00 00       	call   c000bc3e <File::close()>
c000b162:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b164:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b167:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b16a:	83 c4 10             	add    esp,0x10
c000b16d:	31 c0                	xor    eax,eax
c000b16f:	31 d2                	xor    edx,edx
c000b171:	81 c4 1c 01 00 00    	add    esp,0x11c
c000b177:	5b                   	pop    ebx
c000b178:	5e                   	pop    esi
c000b179:	5f                   	pop    edi
c000b17a:	5d                   	pop    ebp
c000b17b:	c3                   	ret    

c000b17c <KeDereferenceSymlink(char const*, char*)>:
c000b17c:	55                   	push   ebp
c000b17d:	57                   	push   edi
c000b17e:	56                   	push   esi
c000b17f:	53                   	push   ebx
c000b180:	83 ec 44             	sub    esp,0x44
c000b183:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c000b187:	56                   	push   esi
c000b188:	68 d3 18 02 c0       	push   0xc00218d3
c000b18d:	e8 b3 f7 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000b192:	89 34 24             	mov    DWORD PTR [esp],esi
c000b195:	e8 5b fe ff ff       	call   c000aff5 <KiIsSymlinkRegistered(char const*)>
c000b19a:	83 c4 10             	add    esp,0x10
c000b19d:	89 c7                	mov    edi,eax
c000b19f:	89 d0                	mov    eax,edx
c000b1a1:	09 f8                	or     eax,edi
c000b1a3:	75 07                	jne    c000b1ac <KeDereferenceSymlink(char const*, char*)+0x30>
c000b1a5:	31 c0                	xor    eax,eax
c000b1a7:	e9 e3 01 00 00       	jmp    c000b38f <KeDereferenceSymlink(char const*, char*)+0x213>
c000b1ac:	89 d5                	mov    ebp,edx
c000b1ae:	53                   	push   ebx
c000b1af:	53                   	push   ebx
c000b1b0:	57                   	push   edi
c000b1b1:	68 ed 18 02 c0       	push   0xc00218ed
c000b1b6:	e8 8a f7 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000b1bb:	58                   	pop    eax
c000b1bc:	5a                   	pop    edx
c000b1bd:	55                   	push   ebp
c000b1be:	68 fb 18 02 c0       	push   0xc00218fb
c000b1c3:	e8 7d f7 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000b1c8:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c000b1cf:	e8 e2 c8 ff ff       	call   c0007ab6 <malloc>
c000b1d4:	83 c4 0c             	add    esp,0xc
c000b1d7:	89 c3                	mov    ebx,eax
c000b1d9:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000b1df:	56                   	push   esi
c000b1e0:	50                   	push   eax
c000b1e1:	e8 dc 09 00 00       	call   c000bbc2 <File::File(char const*, Process*)>
c000b1e6:	83 c4 10             	add    esp,0x10
c000b1e9:	85 db                	test   ebx,ebx
c000b1eb:	0f 84 68 01 00 00    	je     c000b359 <KeDereferenceSymlink(char const*, char*)+0x1dd>
c000b1f1:	83 ec 0c             	sub    esp,0xc
c000b1f4:	68 40 25 02 c0       	push   0xc0022540
c000b1f9:	e8 47 f7 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000b1fe:	5a                   	pop    edx
c000b1ff:	59                   	pop    ecx
c000b200:	6a 01                	push   0x1
c000b202:	53                   	push   ebx
c000b203:	e8 d8 09 00 00       	call   c000bbe0 <File::open(FileOpenMode)>
c000b208:	83 c4 10             	add    esp,0x10
c000b20b:	85 c0                	test   eax,eax
c000b20d:	74 0b                	je     c000b21a <KeDereferenceSymlink(char const*, char*)+0x9e>
c000b20f:	83 ec 0c             	sub    esp,0xc
c000b212:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b214:	53                   	push   ebx
c000b215:	e9 39 01 00 00       	jmp    c000b353 <KeDereferenceSymlink(char const*, char*)+0x1d7>
c000b21a:	83 ec 0c             	sub    esp,0xc
c000b21d:	68 46 0e 02 c0       	push   0xc0020e46
c000b222:	e8 1e f7 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000b227:	58                   	pop    eax
c000b228:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b22a:	8d 74 24 18          	lea    esi,[esp+0x18]
c000b22e:	56                   	push   esi
c000b22f:	8d 54 24 37          	lea    edx,[esp+0x37]
c000b233:	52                   	push   edx
c000b234:	6a 00                	push   0x0
c000b236:	6a 08                	push   0x8
c000b238:	53                   	push   ebx
c000b239:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b23c:	83 c4 20             	add    esp,0x20
c000b23f:	85 c0                	test   eax,eax
c000b241:	0f 85 fe 00 00 00    	jne    c000b345 <KeDereferenceSymlink(char const*, char*)+0x1c9>
c000b247:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000b24c:	0f 85 f3 00 00 00    	jne    c000b345 <KeDereferenceSymlink(char const*, char*)+0x1c9>
c000b252:	83 ec 0c             	sub    esp,0xc
c000b255:	68 72 25 02 c0       	push   0xc0022572
c000b25a:	e8 e6 f6 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000b25f:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b261:	8d 54 24 20          	lea    edx,[esp+0x20]
c000b265:	89 34 24             	mov    DWORD PTR [esp],esi
c000b268:	52                   	push   edx
c000b269:	6a 00                	push   0x0
c000b26b:	6a 08                	push   0x8
c000b26d:	53                   	push   ebx
c000b26e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b271:	83 c4 20             	add    esp,0x20
c000b274:	85 c0                	test   eax,eax
c000b276:	0f 85 c9 00 00 00    	jne    c000b345 <KeDereferenceSymlink(char const*, char*)+0x1c9>
c000b27c:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000b281:	0f 85 be 00 00 00    	jne    c000b345 <KeDereferenceSymlink(char const*, char*)+0x1c9>
c000b287:	39 6c 24 14          	cmp    DWORD PTR [esp+0x14],ebp
c000b28b:	0f 85 14 ff ff ff    	jne    c000b1a5 <KeDereferenceSymlink(char const*, char*)+0x29>
c000b291:	39 7c 24 10          	cmp    DWORD PTR [esp+0x10],edi
c000b295:	0f 85 0a ff ff ff    	jne    c000b1a5 <KeDereferenceSymlink(char const*, char*)+0x29>
c000b29b:	83 ec 0c             	sub    esp,0xc
c000b29e:	68 09 19 02 c0       	push   0xc0021909
c000b2a3:	e8 9d f6 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000b2a8:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000b2b0:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000b2b8:	83 c4 0c             	add    esp,0xc
c000b2bb:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000b2bf:	50                   	push   eax
c000b2c0:	8d 44 24 20          	lea    eax,[esp+0x20]
c000b2c4:	50                   	push   eax
c000b2c5:	53                   	push   ebx
c000b2c6:	e8 17 0c 00 00       	call   c000bee2 <File::stat(unsigned long long*, bool*)>
c000b2cb:	83 c4 10             	add    esp,0x10
c000b2ce:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000b2d3:	75 70                	jne    c000b345 <KeDereferenceSymlink(char const*, char*)+0x1c9>
c000b2d5:	31 ff                	xor    edi,edi
c000b2d7:	b8 0f 00 00 00       	mov    eax,0xf
c000b2dc:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c000b2e0:	89 f8                	mov    eax,edi
c000b2e2:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c000b2e6:	73 5d                	jae    c000b345 <KeDereferenceSymlink(char const*, char*)+0x1c9>
c000b2e8:	83 ec 0c             	sub    esp,0xc
c000b2eb:	68 09 19 02 c0       	push   0xc0021909
c000b2f0:	e8 50 f6 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000b2f5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000b2f9:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000b2fd:	83 c0 f0             	add    eax,0xfffffff0
c000b300:	b9 ff 00 00 00       	mov    ecx,0xff
c000b305:	83 d2 ff             	adc    edx,0xffffffff
c000b308:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b30c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b310:	83 c4 10             	add    esp,0x10
c000b313:	39 c1                	cmp    ecx,eax
c000b315:	19 d7                	sbb    edi,edx
c000b317:	72 40                	jb     c000b359 <KeDereferenceSymlink(char const*, char*)+0x1dd>
c000b319:	83 ec 0c             	sub    esp,0xc
c000b31c:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c000b31e:	56                   	push   esi
c000b31f:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000b323:	52                   	push   edx
c000b324:	50                   	push   eax
c000b325:	53                   	push   ebx
c000b326:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c000b329:	83 c4 20             	add    esp,0x20
c000b32c:	85 c0                	test   eax,eax
c000b32e:	75 15                	jne    c000b345 <KeDereferenceSymlink(char const*, char*)+0x1c9>
c000b330:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b334:	89 c7                	mov    edi,eax
c000b336:	c1 ff 1f             	sar    edi,0x1f
c000b339:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000b33d:	75 06                	jne    c000b345 <KeDereferenceSymlink(char const*, char*)+0x1c9>
c000b33f:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c000b343:	74 19                	je     c000b35e <KeDereferenceSymlink(char const*, char*)+0x1e2>
c000b345:	83 ec 0c             	sub    esp,0xc
c000b348:	53                   	push   ebx
c000b349:	e8 f0 08 00 00       	call   c000bc3e <File::close()>
c000b34e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b350:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b353:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b356:	83 c4 10             	add    esp,0x10
c000b359:	83 c8 ff             	or     eax,0xffffffff
c000b35c:	eb 31                	jmp    c000b38f <KeDereferenceSymlink(char const*, char*)+0x213>
c000b35e:	83 ec 0c             	sub    esp,0xc
c000b361:	68 52 30 02 c0       	push   0xc0023052
c000b366:	e8 da f5 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000b36b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b36e:	e8 cb 08 00 00       	call   c000bc3e <File::close()>
c000b373:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b375:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b378:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b37b:	c7 04 24 0c 19 02 c0 	mov    DWORD PTR [esp],0xc002190c
c000b382:	e8 be f5 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000b387:	83 c4 10             	add    esp,0x10
c000b38a:	b8 01 00 00 00       	mov    eax,0x1
c000b38f:	83 c4 3c             	add    esp,0x3c
c000b392:	5b                   	pop    ebx
c000b393:	5e                   	pop    esi
c000b394:	5f                   	pop    edi
c000b395:	5d                   	pop    ebp
c000b396:	c3                   	ret    

c000b397 <KeCreateSymlink(char const*, char const*)>:
c000b397:	55                   	push   ebp
c000b398:	57                   	push   edi
c000b399:	56                   	push   esi
c000b39a:	53                   	push   ebx
c000b39b:	83 ec 38             	sub    esp,0x38
c000b39e:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c000b3a2:	68 14 01 00 00       	push   0x114
c000b3a7:	e8 0a c7 ff ff       	call   c0007ab6 <malloc>
c000b3ac:	6a 00                	push   0x0
c000b3ae:	89 c3                	mov    ebx,eax
c000b3b0:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000b3b6:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000b3ba:	50                   	push   eax
c000b3bb:	e8 24 07 00 00       	call   c000bae4 <File::File(char const*, Process*, bool)>
c000b3c0:	83 c4 20             	add    esp,0x20
c000b3c3:	b8 01 00 00 00       	mov    eax,0x1
c000b3c8:	85 db                	test   ebx,ebx
c000b3ca:	0f 84 fb 00 00 00    	je     c000b4cb <KeCreateSymlink(char const*, char const*)+0x134>
c000b3d0:	52                   	push   edx
c000b3d1:	52                   	push   edx
c000b3d2:	6a 12                	push   0x12
c000b3d4:	53                   	push   ebx
c000b3d5:	e8 06 08 00 00       	call   c000bbe0 <File::open(FileOpenMode)>
c000b3da:	83 c4 10             	add    esp,0x10
c000b3dd:	85 c0                	test   eax,eax
c000b3df:	74 0b                	je     c000b3ec <KeCreateSymlink(char const*, char const*)+0x55>
c000b3e1:	83 ec 0c             	sub    esp,0xc
c000b3e4:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b3e6:	53                   	push   ebx
c000b3e7:	e9 d4 00 00 00       	jmp    c000b4c0 <KeCreateSymlink(char const*, char const*)+0x129>
c000b3ec:	8d 7c 24 17          	lea    edi,[esp+0x17]
c000b3f0:	be 0f 19 02 c0       	mov    esi,0xc002190f
c000b3f5:	b9 09 00 00 00       	mov    ecx,0x9
c000b3fa:	fc                   	cld    
c000b3fb:	83 ec 0c             	sub    esp,0xc
c000b3fe:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b400:	8d 74 24 10          	lea    esi,[esp+0x10]
c000b404:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b406:	56                   	push   esi
c000b407:	8d 54 24 27          	lea    edx,[esp+0x27]
c000b40b:	52                   	push   edx
c000b40c:	6a 00                	push   0x0
c000b40e:	6a 08                	push   0x8
c000b410:	53                   	push   ebx
c000b411:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b414:	83 c4 20             	add    esp,0x20
c000b417:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000b41c:	0f 85 90 00 00 00    	jne    c000b4b2 <KeCreateSymlink(char const*, char const*)+0x11b>
c000b422:	85 c0                	test   eax,eax
c000b424:	0f 85 88 00 00 00    	jne    c000b4b2 <KeCreateSymlink(char const*, char const*)+0x11b>
c000b42a:	e8 d6 fa ff ff       	call   c000af05 <KiCreateSymlinkID()>
c000b42f:	83 ec 0c             	sub    esp,0xc
c000b432:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b436:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b43a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b43c:	56                   	push   esi
c000b43d:	8d 54 24 18          	lea    edx,[esp+0x18]
c000b441:	52                   	push   edx
c000b442:	6a 00                	push   0x0
c000b444:	6a 08                	push   0x8
c000b446:	53                   	push   ebx
c000b447:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b44a:	83 c4 20             	add    esp,0x20
c000b44d:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000b452:	75 5e                	jne    c000b4b2 <KeCreateSymlink(char const*, char const*)+0x11b>
c000b454:	85 c0                	test   eax,eax
c000b456:	75 5a                	jne    c000b4b2 <KeCreateSymlink(char const*, char const*)+0x11b>
c000b458:	83 ec 0c             	sub    esp,0xc
c000b45b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b45d:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000b460:	55                   	push   ebp
c000b461:	e8 0a 51 ff ff       	call   c0000570 <strlen>
c000b466:	89 34 24             	mov    DWORD PTR [esp],esi
c000b469:	31 d2                	xor    edx,edx
c000b46b:	55                   	push   ebp
c000b46c:	52                   	push   edx
c000b46d:	50                   	push   eax
c000b46e:	53                   	push   ebx
c000b46f:	ff d7                	call   edi
c000b471:	83 c4 14             	add    esp,0x14
c000b474:	89 c6                	mov    esi,eax
c000b476:	55                   	push   ebp
c000b477:	e8 f4 50 ff ff       	call   c0000570 <strlen>
c000b47c:	83 c4 10             	add    esp,0x10
c000b47f:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c000b483:	75 2d                	jne    c000b4b2 <KeCreateSymlink(char const*, char const*)+0x11b>
c000b485:	85 f6                	test   esi,esi
c000b487:	75 29                	jne    c000b4b2 <KeCreateSymlink(char const*, char const*)+0x11b>
c000b489:	50                   	push   eax
c000b48a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b48e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b492:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c000b496:	e8 d7 fa ff ff       	call   c000af72 <KeRegisterSymlink(char const*, unsigned long long)>
c000b49b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b49e:	e8 9b 07 00 00       	call   c000bc3e <File::close()>
c000b4a3:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b4a5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b4a8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b4ab:	83 c4 10             	add    esp,0x10
c000b4ae:	31 c0                	xor    eax,eax
c000b4b0:	eb 19                	jmp    c000b4cb <KeCreateSymlink(char const*, char const*)+0x134>
c000b4b2:	83 ec 0c             	sub    esp,0xc
c000b4b5:	53                   	push   ebx
c000b4b6:	e8 83 07 00 00       	call   c000bc3e <File::close()>
c000b4bb:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b4bd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b4c0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b4c3:	83 c4 10             	add    esp,0x10
c000b4c6:	b8 01 00 00 00       	mov    eax,0x1
c000b4cb:	83 c4 2c             	add    esp,0x2c
c000b4ce:	5b                   	pop    ebx
c000b4cf:	5e                   	pop    esi
c000b4d0:	5f                   	pop    edi
c000b4d1:	5d                   	pop    ebp
c000b4d2:	c3                   	ret    

c000b4d3 <KeInitialiseSymlinks()>:
c000b4d3:	57                   	push   edi
c000b4d4:	56                   	push   esi
c000b4d5:	53                   	push   ebx
c000b4d6:	81 ec 14 01 00 00    	sub    esp,0x114
c000b4dc:	c7 05 c0 6f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026fc0,0x0
c000b4e6:	68 00 20 00 00       	push   0x2000
c000b4eb:	6a 00                	push   0x0
c000b4ed:	68 00 74 02 c0       	push   0xc0027400
c000b4f2:	e8 f9 4f ff ff       	call   c00004f0 <memset>
c000b4f7:	5f                   	pop    edi
c000b4f8:	58                   	pop    eax
c000b4f9:	6a 00                	push   0x0
c000b4fb:	68 55 ae 00 c0       	push   0xc000ae55
c000b500:	e8 7b 59 00 00       	call   c0010e80 <KeRegisterAtexit(void (*)(void*), void*)>
c000b505:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c000b50c:	e8 a5 c5 ff ff       	call   c0007ab6 <malloc>
c000b511:	83 c4 0c             	add    esp,0xc
c000b514:	89 c3                	mov    ebx,eax
c000b516:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000b51c:	68 af 17 02 c0       	push   0xc00217af
c000b521:	50                   	push   eax
c000b522:	e8 9b 06 00 00       	call   c000bbc2 <File::File(char const*, Process*)>
c000b527:	83 c4 10             	add    esp,0x10
c000b52a:	85 db                	test   ebx,ebx
c000b52c:	75 10                	jne    c000b53e <KeInitialiseSymlinks()+0x6b>
c000b52e:	83 ec 0c             	sub    esp,0xc
c000b531:	68 18 19 02 c0       	push   0xc0021918
c000b536:	e8 58 61 00 00       	call   c0011693 <KePanic(char const*)>
c000b53b:	83 c4 10             	add    esp,0x10
c000b53e:	83 ec 0c             	sub    esp,0xc
c000b541:	53                   	push   ebx
c000b542:	e8 5d 09 00 00       	call   c000bea4 <File::exists()>
c000b547:	83 c4 10             	add    esp,0x10
c000b54a:	84 c0                	test   al,al
c000b54c:	75 3a                	jne    c000b588 <KeInitialiseSymlinks()+0xb5>
c000b54e:	56                   	push   esi
c000b54f:	56                   	push   esi
c000b550:	6a 12                	push   0x12
c000b552:	53                   	push   ebx
c000b553:	e8 88 06 00 00       	call   c000bbe0 <File::open(FileOpenMode)>
c000b558:	83 c4 10             	add    esp,0x10
c000b55b:	85 c0                	test   eax,eax
c000b55d:	74 10                	je     c000b56f <KeInitialiseSymlinks()+0x9c>
c000b55f:	83 ec 0c             	sub    esp,0xc
c000b562:	68 35 19 02 c0       	push   0xc0021935
c000b567:	e8 27 61 00 00       	call   c0011693 <KePanic(char const*)>
c000b56c:	83 c4 10             	add    esp,0x10
c000b56f:	83 ec 0c             	sub    esp,0xc
c000b572:	53                   	push   ebx
c000b573:	e8 c6 06 00 00       	call   c000bc3e <File::close()>
c000b578:	83 c4 10             	add    esp,0x10
c000b57b:	85 db                	test   ebx,ebx
c000b57d:	0f 84 a5 00 00 00    	je     c000b628 <KeInitialiseSymlinks()+0x155>
c000b583:	e9 94 00 00 00       	jmp    c000b61c <KeInitialiseSymlinks()+0x149>
c000b588:	51                   	push   ecx
c000b589:	51                   	push   ecx
c000b58a:	6a 01                	push   0x1
c000b58c:	53                   	push   ebx
c000b58d:	e8 4e 06 00 00       	call   c000bbe0 <File::open(FileOpenMode)>
c000b592:	83 c4 10             	add    esp,0x10
c000b595:	85 c0                	test   eax,eax
c000b597:	74 10                	je     c000b5a9 <KeInitialiseSymlinks()+0xd6>
c000b599:	83 ec 0c             	sub    esp,0xc
c000b59c:	68 52 19 02 c0       	push   0xc0021952
c000b5a1:	e8 ed 60 00 00       	call   c0011693 <KePanic(char const*)>
c000b5a6:	83 c4 10             	add    esp,0x10
c000b5a9:	83 ec 0c             	sub    esp,0xc
c000b5ac:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b5ae:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000b5b2:	57                   	push   edi
c000b5b3:	8d 74 24 20          	lea    esi,[esp+0x20]
c000b5b7:	56                   	push   esi
c000b5b8:	6a 00                	push   0x0
c000b5ba:	68 00 01 00 00       	push   0x100
c000b5bf:	53                   	push   ebx
c000b5c0:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b5c3:	83 c4 20             	add    esp,0x20
c000b5c6:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c000b5ce:	75 40                	jne    c000b610 <KeInitialiseSymlinks()+0x13d>
c000b5d0:	83 ec 0c             	sub    esp,0xc
c000b5d3:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b5d5:	57                   	push   edi
c000b5d6:	8d 54 24 18          	lea    edx,[esp+0x18]
c000b5da:	52                   	push   edx
c000b5db:	6a 00                	push   0x0
c000b5dd:	6a 08                	push   0x8
c000b5df:	53                   	push   ebx
c000b5e0:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b5e3:	83 c4 20             	add    esp,0x20
c000b5e6:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000b5eb:	75 23                	jne    c000b610 <KeInitialiseSymlinks()+0x13d>
c000b5ed:	52                   	push   edx
c000b5ee:	52                   	push   edx
c000b5ef:	56                   	push   esi
c000b5f0:	68 6d 19 02 c0       	push   0xc002196d
c000b5f5:	e8 4b f3 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000b5fa:	89 f0                	mov    eax,esi
c000b5fc:	e8 59 f8 ff ff       	call   c000ae5a <KiGetSymlinkHash(char const*)>
c000b601:	ba 01 00 00 00       	mov    edx,0x1
c000b606:	0f b7 c0             	movzx  eax,ax
c000b609:	e8 6d f8 ff ff       	call   c000ae7b <KiSetHashInTable(unsigned short, bool)>
c000b60e:	eb 96                	jmp    c000b5a6 <KeInitialiseSymlinks()+0xd3>
c000b610:	83 ec 0c             	sub    esp,0xc
c000b613:	53                   	push   ebx
c000b614:	e8 25 06 00 00       	call   c000bc3e <File::close()>
c000b619:	83 c4 10             	add    esp,0x10
c000b61c:	83 ec 0c             	sub    esp,0xc
c000b61f:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b621:	53                   	push   ebx
c000b622:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b625:	83 c4 10             	add    esp,0x10
c000b628:	50                   	push   eax
c000b629:	50                   	push   eax
c000b62a:	68 a5 19 02 c0       	push   0xc00219a5
c000b62f:	68 b3 19 02 c0       	push   0xc00219b3
c000b634:	e8 5e fd ff ff       	call   c000b397 <KeCreateSymlink(char const*, char const*)>
c000b639:	81 c4 20 01 00 00    	add    esp,0x120
c000b63f:	5b                   	pop    ebx
c000b640:	5e                   	pop    esi
c000b641:	5f                   	pop    edi
c000b642:	c3                   	ret    
c000b643:	90                   	nop

c000b644 <File::read(unsigned long long, void*, int*)>:
c000b644:	53                   	push   ebx
c000b645:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b649:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b64d:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000b654:	83 f8 19             	cmp    eax,0x19
c000b657:	77 35                	ja     c000b68e <File::read(unsigned long long, void*, int*)+0x4a>
c000b659:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000b660:	85 c0                	test   eax,eax
c000b662:	74 2a                	je     c000b68e <File::read(unsigned long long, void*, int*)+0x4a>
c000b664:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b66a:	85 c0                	test   eax,eax
c000b66c:	74 20                	je     c000b68e <File::read(unsigned long long, void*, int*)+0x4a>
c000b66e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b672:	74 21                	je     c000b695 <File::read(unsigned long long, void*, int*)+0x51>
c000b674:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b676:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b67a:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000b680:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b684:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b688:	5b                   	pop    ebx
c000b689:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000b68c:	ff e0                	jmp    eax
c000b68e:	b8 0b 00 00 00       	mov    eax,0xb
c000b693:	eb 05                	jmp    c000b69a <File::read(unsigned long long, void*, int*)+0x56>
c000b695:	b8 05 00 00 00       	mov    eax,0x5
c000b69a:	5b                   	pop    ebx
c000b69b:	c3                   	ret    

c000b69c <File::write(unsigned long long, void*, int*)>:
c000b69c:	53                   	push   ebx
c000b69d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b6a1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b6a5:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000b6ac:	83 f8 19             	cmp    eax,0x19
c000b6af:	77 35                	ja     c000b6e6 <File::write(unsigned long long, void*, int*)+0x4a>
c000b6b1:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000b6b8:	85 c0                	test   eax,eax
c000b6ba:	74 2a                	je     c000b6e6 <File::write(unsigned long long, void*, int*)+0x4a>
c000b6bc:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b6c2:	85 c0                	test   eax,eax
c000b6c4:	74 20                	je     c000b6e6 <File::write(unsigned long long, void*, int*)+0x4a>
c000b6c6:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b6ca:	74 21                	je     c000b6ed <File::write(unsigned long long, void*, int*)+0x51>
c000b6cc:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b6ce:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b6d2:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000b6d8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b6dc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b6e0:	5b                   	pop    ebx
c000b6e1:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000b6e4:	ff e0                	jmp    eax
c000b6e6:	b8 0b 00 00 00       	mov    eax,0xb
c000b6eb:	eb 05                	jmp    c000b6f2 <File::write(unsigned long long, void*, int*)+0x56>
c000b6ed:	b8 05 00 00 00       	mov    eax,0x5
c000b6f2:	5b                   	pop    ebx
c000b6f3:	c3                   	ret    

c000b6f4 <Directory::read(unsigned long long, void*, int*)>:
c000b6f4:	53                   	push   ebx
c000b6f5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b6f9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b6fd:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000b704:	83 f8 19             	cmp    eax,0x19
c000b707:	77 35                	ja     c000b73e <Directory::read(unsigned long long, void*, int*)+0x4a>
c000b709:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000b710:	85 c0                	test   eax,eax
c000b712:	74 2a                	je     c000b73e <Directory::read(unsigned long long, void*, int*)+0x4a>
c000b714:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b71a:	85 c0                	test   eax,eax
c000b71c:	74 20                	je     c000b73e <Directory::read(unsigned long long, void*, int*)+0x4a>
c000b71e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b722:	74 21                	je     c000b745 <Directory::read(unsigned long long, void*, int*)+0x51>
c000b724:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b726:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b72a:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000b730:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b734:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b738:	5b                   	pop    ebx
c000b739:	8b 41 54             	mov    eax,DWORD PTR [ecx+0x54]
c000b73c:	ff e0                	jmp    eax
c000b73e:	b8 0b 00 00 00       	mov    eax,0xb
c000b743:	eb 05                	jmp    c000b74a <Directory::read(unsigned long long, void*, int*)+0x56>
c000b745:	b8 05 00 00 00       	mov    eax,0x5
c000b74a:	5b                   	pop    ebx
c000b74b:	c3                   	ret    

c000b74c <Directory::write(unsigned long long, void*, int*)>:
c000b74c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b750:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000b757:	b8 0b 00 00 00       	mov    eax,0xb
c000b75c:	83 fa 19             	cmp    edx,0x19
c000b75f:	77 18                	ja     c000b779 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000b761:	8b 14 95 80 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4780]
c000b768:	85 d2                	test   edx,edx
c000b76a:	74 0d                	je     c000b779 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000b76c:	83 ba 74 01 00 00 01 	cmp    DWORD PTR [edx+0x174],0x1
c000b773:	19 c0                	sbb    eax,eax
c000b775:	83 e0 0a             	and    eax,0xa
c000b778:	40                   	inc    eax
c000b779:	c3                   	ret    

c000b77a <File::isAtty()>:
c000b77a:	31 c0                	xor    eax,eax
c000b77c:	c3                   	ret    
c000b77d:	90                   	nop

c000b77e <Directory::isAtty()>:
c000b77e:	31 c0                	xor    eax,eax
c000b780:	c3                   	ret    
c000b781:	90                   	nop

c000b782 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000b782:	b8 0a 00 00 00       	mov    eax,0xa
c000b787:	c3                   	ret    

c000b788 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000b788:	b8 0a 00 00 00       	mov    eax,0xa
c000b78d:	c3                   	ret    

c000b78e <Filesystem::allocateSwapfile(char const*, int)>:
c000b78e:	31 c0                	xor    eax,eax
c000b790:	31 d2                	xor    edx,edx
c000b792:	c3                   	ret    
c000b793:	90                   	nop

c000b794 <File::~File()>:
c000b794:	83 ec 0c             	sub    esp,0xc
c000b797:	ba 6c 1a 02 c0       	mov    edx,0xc0021a6c
c000b79c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b7a0:	89 10                	mov    DWORD PTR [eax],edx
c000b7a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b7a6:	83 ec 0c             	sub    esp,0xc
c000b7a9:	50                   	push   eax
c000b7aa:	e8 f5 db ff ff       	call   c00093a4 <UnixFile::~UnixFile()>
c000b7af:	83 c4 10             	add    esp,0x10
c000b7b2:	90                   	nop
c000b7b3:	83 c4 0c             	add    esp,0xc
c000b7b6:	c3                   	ret    
c000b7b7:	90                   	nop

c000b7b8 <File::~File()>:
c000b7b8:	83 ec 0c             	sub    esp,0xc
c000b7bb:	83 ec 0c             	sub    esp,0xc
c000b7be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7c2:	e8 cd ff ff ff       	call   c000b794 <File::~File()>
c000b7c7:	83 c4 10             	add    esp,0x10
c000b7ca:	83 ec 08             	sub    esp,0x8
c000b7cd:	68 14 01 00 00       	push   0x114
c000b7d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7d6:	e8 3d f0 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000b7db:	83 c4 10             	add    esp,0x10
c000b7de:	83 c4 0c             	add    esp,0xc
c000b7e1:	c3                   	ret    

c000b7e2 <Directory::~Directory()>:
c000b7e2:	83 ec 0c             	sub    esp,0xc
c000b7e5:	ba 88 1a 02 c0       	mov    edx,0xc0021a88
c000b7ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b7ee:	89 10                	mov    DWORD PTR [eax],edx
c000b7f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b7f4:	83 ec 0c             	sub    esp,0xc
c000b7f7:	50                   	push   eax
c000b7f8:	e8 a7 db ff ff       	call   c00093a4 <UnixFile::~UnixFile()>
c000b7fd:	83 c4 10             	add    esp,0x10
c000b800:	90                   	nop
c000b801:	83 c4 0c             	add    esp,0xc
c000b804:	c3                   	ret    
c000b805:	90                   	nop

c000b806 <Directory::~Directory()>:
c000b806:	83 ec 0c             	sub    esp,0xc
c000b809:	83 ec 0c             	sub    esp,0xc
c000b80c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b810:	e8 cd ff ff ff       	call   c000b7e2 <Directory::~Directory()>
c000b815:	83 c4 10             	add    esp,0x10
c000b818:	83 ec 08             	sub    esp,0x8
c000b81b:	68 14 01 00 00       	push   0x114
c000b820:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b824:	e8 ef ef ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000b829:	83 c4 10             	add    esp,0x10
c000b82c:	83 c4 0c             	add    esp,0xc
c000b82f:	c3                   	ret    

c000b830 <Filesystem::Filesystem()>:
c000b830:	ba 00 1a 02 c0       	mov    edx,0xc0021a00
c000b835:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b839:	89 10                	mov    DWORD PTR [eax],edx
c000b83b:	8b 15 04 94 02 c0    	mov    edx,DWORD PTR ds:0xc0029404
c000b841:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b845:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b848:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b84c:	a3 04 94 02 c0       	mov    ds:0xc0029404,eax
c000b851:	90                   	nop
c000b852:	c3                   	ret    
c000b853:	90                   	nop

c000b854 <Filesystem::~Filesystem()>:
c000b854:	ba 00 1a 02 c0       	mov    edx,0xc0021a00
c000b859:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b85d:	89 10                	mov    DWORD PTR [eax],edx
c000b85f:	90                   	nop
c000b860:	c3                   	ret    
c000b861:	90                   	nop

c000b862 <Filesystem::~Filesystem()>:
c000b862:	83 ec 0c             	sub    esp,0xc
c000b865:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b869:	e8 e6 ff ff ff       	call   c000b854 <Filesystem::~Filesystem()>
c000b86e:	83 c4 04             	add    esp,0x4
c000b871:	83 ec 08             	sub    esp,0x8
c000b874:	6a 08                	push   0x8
c000b876:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b87a:	e8 99 ef ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000b87f:	83 c4 10             	add    esp,0x10
c000b882:	83 c4 0c             	add    esp,0xc
c000b885:	c3                   	ret    

c000b886 <Fs::getcwd(Process*, char*, int)>:
c000b886:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b88a:	31 c0                	xor    eax,eax
c000b88c:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000b88f:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000b893:	7d 15                	jge    c000b8aa <Fs::getcwd(Process*, char*, int)+0x24>
c000b895:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000b899:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000b8a0:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000b8a3:	84 c9                	test   cl,cl
c000b8a5:	74 06                	je     c000b8ad <Fs::getcwd(Process*, char*, int)+0x27>
c000b8a7:	40                   	inc    eax
c000b8a8:	eb e2                	jmp    c000b88c <Fs::getcwd(Process*, char*, int)+0x6>
c000b8aa:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000b8ad:	31 c0                	xor    eax,eax
c000b8af:	c3                   	ret    

c000b8b0 <Fs::initVFS()>:
c000b8b0:	83 ec 18             	sub    esp,0x18
c000b8b3:	6a 08                	push   0x8
c000b8b5:	e8 fc c1 ff ff       	call   c0007ab6 <malloc>
c000b8ba:	89 04 24             	mov    DWORD PTR [esp],eax
c000b8bd:	e8 c2 e3 00 00       	call   c0019c84 <FAT::FAT()>
c000b8c2:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000b8c9:	e8 e8 c1 ff ff       	call   c0007ab6 <malloc>
c000b8ce:	89 04 24             	mov    DWORD PTR [esp],eax
c000b8d1:	e8 da f2 00 00       	call   c001abb0 <ISO9660::ISO9660()>
c000b8d6:	83 c4 1c             	add    esp,0x1c
c000b8d9:	c3                   	ret    

c000b8da <Fs::standardiseFiles(char*, char const*, char const*, bool)>:
c000b8da:	55                   	push   ebp
c000b8db:	57                   	push   edi
c000b8dc:	56                   	push   esi
c000b8dd:	53                   	push   ebx
c000b8de:	81 ec 10 04 00 00    	sub    esp,0x410
c000b8e4:	8b ac 24 28 04 00 00 	mov    ebp,DWORD PTR [esp+0x428]
c000b8eb:	8b b4 24 24 04 00 00 	mov    esi,DWORD PTR [esp+0x424]
c000b8f2:	0f b6 9c 24 30 04 00 00 	movzx  ebx,BYTE PTR [esp+0x430]
c000b8fa:	68 00 04 00 00       	push   0x400
c000b8ff:	6a 00                	push   0x0
c000b901:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c000b905:	57                   	push   edi
c000b906:	e8 e5 4b ff ff       	call   c00004f0 <memset>
c000b90b:	83 c4 10             	add    esp,0x10
c000b90e:	80 7d 01 3a          	cmp    BYTE PTR [ebp+0x1],0x3a
c000b912:	75 0b                	jne    c000b91f <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x45>
c000b914:	50                   	push   eax
c000b915:	50                   	push   eax
c000b916:	55                   	push   ebp
c000b917:	57                   	push   edi
c000b918:	e8 23 4d ff ff       	call   c0000640 <strcpy>
c000b91d:	eb 51                	jmp    c000b970 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x96>
c000b91f:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000b923:	83 f8 5c             	cmp    eax,0x5c
c000b926:	74 05                	je     c000b92d <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x53>
c000b928:	83 f8 2f             	cmp    eax,0x2f
c000b92b:	75 1e                	jne    c000b94b <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x71>
c000b92d:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c000b934:	8a 00                	mov    al,BYTE PTR [eax]
c000b936:	3c 60                	cmp    al,0x60
c000b938:	7e 03                	jle    c000b93d <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x63>
c000b93a:	83 e8 20             	sub    eax,0x20
c000b93d:	88 04 24             	mov    BYTE PTR [esp],al
c000b940:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000b947:	50                   	push   eax
c000b948:	50                   	push   eax
c000b949:	eb 1e                	jmp    c000b969 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x8f>
c000b94b:	50                   	push   eax
c000b94c:	50                   	push   eax
c000b94d:	ff b4 24 30 04 00 00 	push   DWORD PTR [esp+0x430]
c000b954:	57                   	push   edi
c000b955:	e8 e6 4c ff ff       	call   c0000640 <strcpy>
c000b95a:	58                   	pop    eax
c000b95b:	5a                   	pop    edx
c000b95c:	68 c3 29 02 c0       	push   0xc00229c3
c000b961:	57                   	push   edi
c000b962:	e8 d9 4e ff ff       	call   c0000840 <strcat>
c000b967:	59                   	pop    ecx
c000b968:	58                   	pop    eax
c000b969:	55                   	push   ebp
c000b96a:	57                   	push   edi
c000b96b:	e8 d0 4e ff ff       	call   c0000840 <strcat>
c000b970:	83 c4 10             	add    esp,0x10
c000b973:	8a 04 24             	mov    al,BYTE PTR [esp]
c000b976:	3c 60                	cmp    al,0x60
c000b978:	7e 03                	jle    c000b97d <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xa3>
c000b97a:	83 e8 20             	sub    eax,0x20
c000b97d:	88 04 24             	mov    BYTE PTR [esp],al
c000b980:	88 06                	mov    BYTE PTR [esi],al
c000b982:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000b989:	66 c7 46 01 3a 2f    	mov    WORD PTR [esi+0x1],0x2f3a
c000b98f:	c6 46 03 00          	mov    BYTE PTR [esi+0x3],0x0
c000b993:	bf 03 00 00 00       	mov    edi,0x3
c000b998:	b8 03 00 00 00       	mov    eax,0x3
c000b99d:	0f be 2c 3c          	movsx  ebp,BYTE PTR [esp+edi*1]
c000b9a1:	89 e9                	mov    ecx,ebp
c000b9a3:	85 ed                	test   ebp,ebp
c000b9a5:	0f 84 97 00 00 00    	je     c000ba42 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x168>
c000b9ab:	8d 57 01             	lea    edx,[edi+0x1]
c000b9ae:	83 fd 5c             	cmp    ebp,0x5c
c000b9b1:	74 05                	je     c000b9b8 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xde>
c000b9b3:	83 fd 2f             	cmp    ebp,0x2f
c000b9b6:	75 12                	jne    c000b9ca <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c000b9b8:	89 c5                	mov    ebp,eax
c000b9ba:	80 7c 06 ff 2f       	cmp    BYTE PTR [esi+eax*1-0x1],0x2f
c000b9bf:	74 09                	je     c000b9ca <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c000b9c1:	40                   	inc    eax
c000b9c2:	c6 04 2e 2f          	mov    BYTE PTR [esi+ebp*1],0x2f
c000b9c6:	89 d7                	mov    edi,edx
c000b9c8:	eb d3                	jmp    c000b99d <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xc3>
c000b9ca:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000b9cf:	0f be e9             	movsx  ebp,cl
c000b9d2:	75 5e                	jne    c000ba32 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x158>
c000b9d4:	83 fd 2e             	cmp    ebp,0x2e
c000b9d7:	75 59                	jne    c000ba32 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x158>
c000b9d9:	80 3c 14 2e          	cmp    BYTE PTR [esp+edx*1],0x2e
c000b9dd:	0f be 6c 3c 02       	movsx  ebp,BYTE PTR [esp+edi*1+0x2]
c000b9e2:	74 18                	je     c000b9fc <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x122>
c000b9e4:	83 fd 2e             	cmp    ebp,0x2e
c000b9e7:	74 53                	je     c000ba3c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x162>
c000b9e9:	89 fa                	mov    edx,edi
c000b9eb:	42                   	inc    edx
c000b9ec:	0f be 0c 14          	movsx  ecx,BYTE PTR [esp+edx*1]
c000b9f0:	83 f9 2f             	cmp    ecx,0x2f
c000b9f3:	74 f6                	je     c000b9eb <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x111>
c000b9f5:	83 f9 5c             	cmp    ecx,0x5c
c000b9f8:	74 f1                	je     c000b9eb <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x111>
c000b9fa:	eb ca                	jmp    c000b9c6 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c000b9fc:	83 fd 2e             	cmp    ebp,0x2e
c000b9ff:	74 3b                	je     c000ba3c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x162>
c000ba01:	83 f8 03             	cmp    eax,0x3
c000ba04:	74 c0                	je     c000b9c6 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c000ba06:	42                   	inc    edx
c000ba07:	0f be 0c 14          	movsx  ecx,BYTE PTR [esp+edx*1]
c000ba0b:	83 f9 5c             	cmp    ecx,0x5c
c000ba0e:	74 f6                	je     c000ba06 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x12c>
c000ba10:	83 f9 2f             	cmp    ecx,0x2f
c000ba13:	74 f1                	je     c000ba06 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x12c>
c000ba15:	48                   	dec    eax
c000ba16:	80 3c 06 2f          	cmp    BYTE PTR [esi+eax*1],0x2f
c000ba1a:	75 06                	jne    c000ba22 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x148>
c000ba1c:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c000ba20:	eb f3                	jmp    c000ba15 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x13b>
c000ba22:	80 3c 06 2f          	cmp    BYTE PTR [esi+eax*1],0x2f
c000ba26:	74 07                	je     c000ba2f <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x155>
c000ba28:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c000ba2c:	48                   	dec    eax
c000ba2d:	eb f3                	jmp    c000ba22 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x148>
c000ba2f:	40                   	inc    eax
c000ba30:	eb 94                	jmp    c000b9c6 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c000ba32:	83 fd 5c             	cmp    ebp,0x5c
c000ba35:	74 8f                	je     c000b9c6 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c000ba37:	83 fd 2f             	cmp    ebp,0x2f
c000ba3a:	74 8a                	je     c000b9c6 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c000ba3c:	88 0c 06             	mov    BYTE PTR [esi+eax*1],cl
c000ba3f:	40                   	inc    eax
c000ba40:	eb 84                	jmp    c000b9c6 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c000ba42:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c000ba46:	83 ec 0c             	sub    esp,0xc
c000ba49:	56                   	push   esi
c000ba4a:	e8 21 4b ff ff       	call   c0000570 <strlen>
c000ba4f:	83 c4 10             	add    esp,0x10
c000ba52:	80 7c 06 ff 2e       	cmp    BYTE PTR [esi+eax*1-0x1],0x2e
c000ba57:	74 17                	je     c000ba70 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x196>
c000ba59:	83 ec 0c             	sub    esp,0xc
c000ba5c:	56                   	push   esi
c000ba5d:	e8 0e 4b ff ff       	call   c0000570 <strlen>
c000ba62:	83 c4 10             	add    esp,0x10
c000ba65:	80 7c 06 ff 2f       	cmp    BYTE PTR [esi+eax*1-0x1],0x2f
c000ba6a:	74 04                	je     c000ba70 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x196>
c000ba6c:	31 ff                	xor    edi,edi
c000ba6e:	eb 4c                	jmp    c000babc <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1e2>
c000ba70:	83 ec 0c             	sub    esp,0xc
c000ba73:	56                   	push   esi
c000ba74:	e8 f7 4a ff ff       	call   c0000570 <strlen>
c000ba79:	83 c4 10             	add    esp,0x10
c000ba7c:	80 7c 06 fe 3a       	cmp    BYTE PTR [esi+eax*1-0x2],0x3a
c000ba81:	74 e9                	je     c000ba6c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x192>
c000ba83:	83 ec 0c             	sub    esp,0xc
c000ba86:	56                   	push   esi
c000ba87:	e8 e4 4a ff ff       	call   c0000570 <strlen>
c000ba8c:	83 c4 10             	add    esp,0x10
c000ba8f:	c6 44 06 ff 00       	mov    BYTE PTR [esi+eax*1-0x1],0x0
c000ba94:	eb b0                	jmp    c000ba46 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x16c>
c000ba96:	50                   	push   eax
c000ba97:	50                   	push   eax
c000ba98:	56                   	push   esi
c000ba99:	8d 6c 24 0c          	lea    ebp,[esp+0xc]
c000ba9d:	55                   	push   ebp
c000ba9e:	e8 9d 4b ff ff       	call   c0000640 <strcpy>
c000baa3:	5a                   	pop    edx
c000baa4:	59                   	pop    ecx
c000baa5:	56                   	push   esi
c000baa6:	55                   	push   ebp
c000baa7:	e8 d0 f6 ff ff       	call   c000b17c <KeDereferenceSymlink(char const*, char*)>
c000baac:	83 c4 10             	add    esp,0x10
c000baaf:	48                   	dec    eax
c000bab0:	75 27                	jne    c000bad9 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1ff>
c000bab2:	8d 47 01             	lea    eax,[edi+0x1]
c000bab5:	83 ff 14             	cmp    edi,0x14
c000bab8:	74 08                	je     c000bac2 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1e8>
c000baba:	89 c7                	mov    edi,eax
c000babc:	85 db                	test   ebx,ebx
c000babe:	75 d6                	jne    c000ba96 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1bc>
c000bac0:	eb 17                	jmp    c000bad9 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1ff>
c000bac2:	83 ec 0c             	sub    esp,0xc
c000bac5:	bf 15 00 00 00       	mov    edi,0x15
c000baca:	68 d1 19 02 c0       	push   0xc00219d1
c000bacf:	e8 bf 5b 00 00       	call   c0011693 <KePanic(char const*)>
c000bad4:	83 c4 10             	add    esp,0x10
c000bad7:	eb e3                	jmp    c000babc <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1e2>
c000bad9:	81 c4 0c 04 00 00    	add    esp,0x40c
c000badf:	5b                   	pop    ebx
c000bae0:	5e                   	pop    esi
c000bae1:	5f                   	pop    edi
c000bae2:	5d                   	pop    ebp
c000bae3:	c3                   	ret    

c000bae4 <File::File(char const*, Process*, bool)>:
c000bae4:	83 ec 1c             	sub    esp,0x1c
c000bae7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000baeb:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000baef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000baf3:	83 ec 08             	sub    esp,0x8
c000baf6:	6a 00                	push   0x0
c000baf8:	50                   	push   eax
c000baf9:	e8 c0 d6 ff ff       	call   c00091be <UnixFile::UnixFile(int)>
c000bafe:	83 c4 10             	add    esp,0x10
c000bb01:	ba 6c 1a 02 c0       	mov    edx,0xc0021a6c
c000bb06:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb0a:	89 10                	mov    DWORD PTR [eax],edx
c000bb0c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000bb11:	85 c0                	test   eax,eax
c000bb13:	74 0f                	je     c000bb24 <File::File(char const*, Process*, bool)+0x40>
c000bb15:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c000bb1a:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c000bb1e:	74 04                	je     c000bb24 <File::File(char const*, Process*, bool)+0x40>
c000bb20:	b0 01                	mov    al,0x1
c000bb22:	eb 02                	jmp    c000bb26 <File::File(char const*, Process*, bool)+0x42>
c000bb24:	b0 00                	mov    al,0x0
c000bb26:	0f b6 c0             	movzx  eax,al
c000bb29:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000bb2d:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c000bb33:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000bb37:	83 c2 0d             	add    edx,0xd
c000bb3a:	50                   	push   eax
c000bb3b:	51                   	push   ecx
c000bb3c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bb40:	52                   	push   edx
c000bb41:	e8 94 fd ff ff       	call   c000b8da <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c000bb46:	83 c4 10             	add    esp,0x10
c000bb49:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb4d:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000bb50:	83 e8 41             	sub    eax,0x41
c000bb53:	88 c2                	mov    dl,al
c000bb55:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb59:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000bb5f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb63:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000bb67:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb6b:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000bb71:	0f b6 c0             	movzx  eax,al
c000bb74:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000bb7b:	85 c0                	test   eax,eax
c000bb7d:	74 3e                	je     c000bbbd <File::File(char const*, Process*, bool)+0xd9>
c000bb7f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb83:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000bb89:	0f b6 c0             	movzx  eax,al
c000bb8c:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000bb93:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000bb99:	85 c0                	test   eax,eax
c000bb9b:	75 20                	jne    c000bbbd <File::File(char const*, Process*, bool)+0xd9>
c000bb9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bba1:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000bba7:	0f b6 c0             	movzx  eax,al
c000bbaa:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000bbb1:	83 ec 0c             	sub    esp,0xc
c000bbb4:	50                   	push   eax
c000bbb5:	e8 a0 21 00 00       	call   c000dd5a <LogicalDisk::mount()>
c000bbba:	83 c4 10             	add    esp,0x10
c000bbbd:	90                   	nop
c000bbbe:	83 c4 1c             	add    esp,0x1c
c000bbc1:	c3                   	ret    

c000bbc2 <File::File(char const*, Process*)>:
c000bbc2:	83 ec 0c             	sub    esp,0xc
c000bbc5:	6a 01                	push   0x1
c000bbc7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bbcb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bbcf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bbd3:	e8 0c ff ff ff       	call   c000bae4 <File::File(char const*, Process*, bool)>
c000bbd8:	83 c4 10             	add    esp,0x10
c000bbdb:	90                   	nop
c000bbdc:	83 c4 0c             	add    esp,0xc
c000bbdf:	c3                   	ret    

c000bbe0 <File::open(FileOpenMode)>:
c000bbe0:	53                   	push   ebx
c000bbe1:	b8 0b 00 00 00       	mov    eax,0xb
c000bbe6:	83 ec 08             	sub    esp,0x8
c000bbe9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bbed:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000bbf4:	83 fa 19             	cmp    edx,0x19
c000bbf7:	77 40                	ja     c000bc39 <File::open(FileOpenMode)+0x59>
c000bbf9:	8b 14 95 80 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4780]
c000bc00:	85 d2                	test   edx,edx
c000bc02:	74 35                	je     c000bc39 <File::open(FileOpenMode)+0x59>
c000bc04:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000bc0a:	85 d2                	test   edx,edx
c000bc0c:	74 2b                	je     c000bc39 <File::open(FileOpenMode)+0x59>
c000bc0e:	b8 06 00 00 00       	mov    eax,0x6
c000bc13:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000bc17:	75 20                	jne    c000bc39 <File::open(FileOpenMode)+0x59>
c000bc19:	8b 02                	mov    eax,DWORD PTR [edx]
c000bc1b:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000bc21:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc25:	51                   	push   ecx
c000bc26:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000bc29:	51                   	push   ecx
c000bc2a:	52                   	push   edx
c000bc2b:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000bc2e:	83 c4 10             	add    esp,0x10
c000bc31:	85 c0                	test   eax,eax
c000bc33:	75 04                	jne    c000bc39 <File::open(FileOpenMode)+0x59>
c000bc35:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000bc39:	83 c4 08             	add    esp,0x8
c000bc3c:	5b                   	pop    ebx
c000bc3d:	c3                   	ret    

c000bc3e <File::close()>:
c000bc3e:	53                   	push   ebx
c000bc3f:	b8 0b 00 00 00       	mov    eax,0xb
c000bc44:	83 ec 08             	sub    esp,0x8
c000bc47:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bc4b:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bc52:	83 f9 19             	cmp    ecx,0x19
c000bc55:	77 41                	ja     c000bc98 <File::close()+0x5a>
c000bc57:	8b 1c 8d 80 b8 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd4780]
c000bc5e:	85 db                	test   ebx,ebx
c000bc60:	74 36                	je     c000bc98 <File::close()+0x5a>
c000bc62:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000bc69:	74 2d                	je     c000bc98 <File::close()+0x5a>
c000bc6b:	b8 05 00 00 00       	mov    eax,0x5
c000bc70:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bc74:	74 22                	je     c000bc98 <File::close()+0x5a>
c000bc76:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c000bc7a:	8b 04 8d 80 b8 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd4780]
c000bc81:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000bc87:	53                   	push   ebx
c000bc88:	53                   	push   ebx
c000bc89:	8b 08                	mov    ecx,DWORD PTR [eax]
c000bc8b:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000bc91:	50                   	push   eax
c000bc92:	ff 51 1c             	call   DWORD PTR [ecx+0x1c]
c000bc95:	83 c4 10             	add    esp,0x10
c000bc98:	83 c4 08             	add    esp,0x8
c000bc9b:	5b                   	pop    ebx
c000bc9c:	c3                   	ret    
c000bc9d:	90                   	nop

c000bc9e <File::seek(unsigned long long)>:
c000bc9e:	56                   	push   esi
c000bc9f:	53                   	push   ebx
c000bca0:	b8 0b 00 00 00       	mov    eax,0xb
c000bca5:	51                   	push   ecx
c000bca6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000bcaa:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bcae:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000bcb5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000bcb9:	83 fa 19             	cmp    edx,0x19
c000bcbc:	77 31                	ja     c000bcef <File::seek(unsigned long long)+0x51>
c000bcbe:	8b 14 95 80 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4780]
c000bcc5:	85 d2                	test   edx,edx
c000bcc7:	74 26                	je     c000bcef <File::seek(unsigned long long)+0x51>
c000bcc9:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000bccf:	85 d2                	test   edx,edx
c000bcd1:	74 1c                	je     c000bcef <File::seek(unsigned long long)+0x51>
c000bcd3:	b8 05 00 00 00       	mov    eax,0x5
c000bcd8:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000bcdc:	74 11                	je     c000bcef <File::seek(unsigned long long)+0x51>
c000bcde:	8b 02                	mov    eax,DWORD PTR [edx]
c000bce0:	53                   	push   ebx
c000bce1:	51                   	push   ecx
c000bce2:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000bce8:	52                   	push   edx
c000bce9:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000bcec:	83 c4 10             	add    esp,0x10
c000bcef:	5a                   	pop    edx
c000bcf0:	5b                   	pop    ebx
c000bcf1:	5e                   	pop    esi
c000bcf2:	c3                   	ret    
c000bcf3:	90                   	nop

c000bcf4 <File::truncate(unsigned long long)>:
c000bcf4:	56                   	push   esi
c000bcf5:	53                   	push   ebx
c000bcf6:	b8 0b 00 00 00       	mov    eax,0xb
c000bcfb:	51                   	push   ecx
c000bcfc:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000bd00:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bd04:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000bd0b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000bd0f:	83 fa 19             	cmp    edx,0x19
c000bd12:	77 31                	ja     c000bd45 <File::truncate(unsigned long long)+0x51>
c000bd14:	8b 14 95 80 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4780]
c000bd1b:	85 d2                	test   edx,edx
c000bd1d:	74 26                	je     c000bd45 <File::truncate(unsigned long long)+0x51>
c000bd1f:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000bd25:	85 d2                	test   edx,edx
c000bd27:	74 1c                	je     c000bd45 <File::truncate(unsigned long long)+0x51>
c000bd29:	b8 05 00 00 00       	mov    eax,0x5
c000bd2e:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000bd32:	74 11                	je     c000bd45 <File::truncate(unsigned long long)+0x51>
c000bd34:	8b 02                	mov    eax,DWORD PTR [edx]
c000bd36:	53                   	push   ebx
c000bd37:	51                   	push   ecx
c000bd38:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000bd3e:	52                   	push   edx
c000bd3f:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000bd42:	83 c4 10             	add    esp,0x10
c000bd45:	5a                   	pop    edx
c000bd46:	5b                   	pop    ebx
c000bd47:	5e                   	pop    esi
c000bd48:	c3                   	ret    
c000bd49:	90                   	nop

c000bd4a <File::tell(unsigned long long*)>:
c000bd4a:	83 ec 0c             	sub    esp,0xc
c000bd4d:	b8 0b 00 00 00       	mov    eax,0xb
c000bd52:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000bd56:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000bd5d:	83 fa 19             	cmp    edx,0x19
c000bd60:	77 34                	ja     c000bd96 <File::tell(unsigned long long*)+0x4c>
c000bd62:	8b 14 95 80 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4780]
c000bd69:	85 d2                	test   edx,edx
c000bd6b:	74 29                	je     c000bd96 <File::tell(unsigned long long*)+0x4c>
c000bd6d:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000bd73:	85 d2                	test   edx,edx
c000bd75:	74 1f                	je     c000bd96 <File::tell(unsigned long long*)+0x4c>
c000bd77:	b8 05 00 00 00       	mov    eax,0x5
c000bd7c:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000bd80:	74 14                	je     c000bd96 <File::tell(unsigned long long*)+0x4c>
c000bd82:	50                   	push   eax
c000bd83:	8b 02                	mov    eax,DWORD PTR [edx]
c000bd85:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bd89:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000bd8f:	52                   	push   edx
c000bd90:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000bd93:	83 c4 10             	add    esp,0x10
c000bd96:	83 c4 0c             	add    esp,0xc
c000bd99:	c3                   	ret    

c000bd9a <File::rewind()>:
c000bd9a:	83 ec 10             	sub    esp,0x10
c000bd9d:	6a 00                	push   0x0
c000bd9f:	6a 00                	push   0x0
c000bda1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bda5:	e8 f4 fe ff ff       	call   c000bc9e <File::seek(unsigned long long)>
c000bdaa:	83 c4 1c             	add    esp,0x1c
c000bdad:	c3                   	ret    

c000bdae <File::unlink()>:
c000bdae:	83 ec 0c             	sub    esp,0xc
c000bdb1:	b8 0b 00 00 00       	mov    eax,0xb
c000bdb6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bdba:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bdc1:	83 f9 19             	cmp    ecx,0x19
c000bdc4:	77 2f                	ja     c000bdf5 <File::unlink()+0x47>
c000bdc6:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000bdcd:	85 c9                	test   ecx,ecx
c000bdcf:	74 24                	je     c000bdf5 <File::unlink()+0x47>
c000bdd1:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bdd7:	85 c9                	test   ecx,ecx
c000bdd9:	74 1a                	je     c000bdf5 <File::unlink()+0x47>
c000bddb:	b8 06 00 00 00       	mov    eax,0x6
c000bde0:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bde4:	75 0f                	jne    c000bdf5 <File::unlink()+0x47>
c000bde6:	83 c2 0d             	add    edx,0xd
c000bde9:	50                   	push   eax
c000bdea:	50                   	push   eax
c000bdeb:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bded:	52                   	push   edx
c000bdee:	51                   	push   ecx
c000bdef:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000bdf2:	83 c4 10             	add    esp,0x10
c000bdf5:	83 c4 0c             	add    esp,0xc
c000bdf8:	c3                   	ret    
c000bdf9:	90                   	nop

c000bdfa <File::rename(char const*)>:
c000bdfa:	83 ec 0c             	sub    esp,0xc
c000bdfd:	b8 0b 00 00 00       	mov    eax,0xb
c000be02:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000be06:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000be0d:	83 f9 19             	cmp    ecx,0x19
c000be10:	77 32                	ja     c000be44 <File::rename(char const*)+0x4a>
c000be12:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000be19:	85 c9                	test   ecx,ecx
c000be1b:	74 27                	je     c000be44 <File::rename(char const*)+0x4a>
c000be1d:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000be23:	85 c9                	test   ecx,ecx
c000be25:	74 1d                	je     c000be44 <File::rename(char const*)+0x4a>
c000be27:	b8 06 00 00 00       	mov    eax,0x6
c000be2c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000be30:	75 12                	jne    c000be44 <File::rename(char const*)+0x4a>
c000be32:	83 c2 0d             	add    edx,0xd
c000be35:	50                   	push   eax
c000be36:	8b 01                	mov    eax,DWORD PTR [ecx]
c000be38:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000be3c:	52                   	push   edx
c000be3d:	51                   	push   ecx
c000be3e:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000be41:	83 c4 10             	add    esp,0x10
c000be44:	83 c4 0c             	add    esp,0xc
c000be47:	c3                   	ret    

c000be48 <File::chfatattr(unsigned char, unsigned char)>:
c000be48:	57                   	push   edi
c000be49:	b8 0b 00 00 00       	mov    eax,0xb
c000be4e:	56                   	push   esi
c000be4f:	53                   	push   ebx
c000be50:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000be54:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000be58:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000be5f:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000be63:	83 f9 19             	cmp    ecx,0x19
c000be66:	77 37                	ja     c000be9f <File::chfatattr(unsigned char, unsigned char)+0x57>
c000be68:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000be6f:	85 c9                	test   ecx,ecx
c000be71:	74 2c                	je     c000be9f <File::chfatattr(unsigned char, unsigned char)+0x57>
c000be73:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000be79:	85 c9                	test   ecx,ecx
c000be7b:	74 22                	je     c000be9f <File::chfatattr(unsigned char, unsigned char)+0x57>
c000be7d:	b8 06 00 00 00       	mov    eax,0x6
c000be82:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000be86:	75 17                	jne    c000be9f <File::chfatattr(unsigned char, unsigned char)+0x57>
c000be88:	8b 39                	mov    edi,DWORD PTR [ecx]
c000be8a:	89 f0                	mov    eax,esi
c000be8c:	83 c2 0d             	add    edx,0xd
c000be8f:	0f b6 f0             	movzx  esi,al
c000be92:	0f b6 db             	movzx  ebx,bl
c000be95:	56                   	push   esi
c000be96:	53                   	push   ebx
c000be97:	52                   	push   edx
c000be98:	51                   	push   ecx
c000be99:	ff 57 38             	call   DWORD PTR [edi+0x38]
c000be9c:	83 c4 10             	add    esp,0x10
c000be9f:	5b                   	pop    ebx
c000bea0:	5e                   	pop    esi
c000bea1:	5f                   	pop    edi
c000bea2:	c3                   	ret    
c000bea3:	90                   	nop

c000bea4 <File::exists()>:
c000bea4:	83 ec 0c             	sub    esp,0xc
c000bea7:	31 c0                	xor    eax,eax
c000bea9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bead:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000beb4:	83 f9 19             	cmp    ecx,0x19
c000beb7:	77 24                	ja     c000bedd <File::exists()+0x39>
c000beb9:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000bec0:	85 c9                	test   ecx,ecx
c000bec2:	74 19                	je     c000bedd <File::exists()+0x39>
c000bec4:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000beca:	85 c9                	test   ecx,ecx
c000becc:	74 0f                	je     c000bedd <File::exists()+0x39>
c000bece:	83 c2 0d             	add    edx,0xd
c000bed1:	50                   	push   eax
c000bed2:	50                   	push   eax
c000bed3:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bed5:	52                   	push   edx
c000bed6:	51                   	push   ecx
c000bed7:	ff 50 48             	call   DWORD PTR [eax+0x48]
c000beda:	83 c4 10             	add    esp,0x10
c000bedd:	83 c4 0c             	add    esp,0xc
c000bee0:	c3                   	ret    
c000bee1:	90                   	nop

c000bee2 <File::stat(unsigned long long*, bool*)>:
c000bee2:	56                   	push   esi
c000bee3:	53                   	push   ebx
c000bee4:	50                   	push   eax
c000bee5:	b8 0b 00 00 00       	mov    eax,0xb
c000beea:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000beee:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000bef2:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bef9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000befd:	83 f9 19             	cmp    ecx,0x19
c000bf00:	77 3d                	ja     c000bf3f <File::stat(unsigned long long*, bool*)+0x5d>
c000bf02:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000bf09:	85 c9                	test   ecx,ecx
c000bf0b:	74 32                	je     c000bf3f <File::stat(unsigned long long*, bool*)+0x5d>
c000bf0d:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bf13:	85 c9                	test   ecx,ecx
c000bf15:	74 28                	je     c000bf3f <File::stat(unsigned long long*, bool*)+0x5d>
c000bf17:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bf19:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bf1d:	74 13                	je     c000bf32 <File::stat(unsigned long long*, bool*)+0x50>
c000bf1f:	83 ec 04             	sub    esp,0x4
c000bf22:	56                   	push   esi
c000bf23:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000bf29:	51                   	push   ecx
c000bf2a:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000bf2d:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000bf30:	eb 0a                	jmp    c000bf3c <File::stat(unsigned long long*, bool*)+0x5a>
c000bf32:	53                   	push   ebx
c000bf33:	83 c2 0d             	add    edx,0xd
c000bf36:	56                   	push   esi
c000bf37:	52                   	push   edx
c000bf38:	51                   	push   ecx
c000bf39:	ff 50 34             	call   DWORD PTR [eax+0x34]
c000bf3c:	83 c4 10             	add    esp,0x10
c000bf3f:	5a                   	pop    edx
c000bf40:	5b                   	pop    ebx
c000bf41:	5e                   	pop    esi
c000bf42:	c3                   	ret    

c000bf43 <Fs::setcwd(Process*, char*)>:
c000bf43:	55                   	push   ebp
c000bf44:	57                   	push   edi
c000bf45:	56                   	push   esi
c000bf46:	53                   	push   ebx
c000bf47:	81 ec 1c 02 00 00    	sub    esp,0x21c
c000bf4d:	8b ac 24 30 02 00 00 	mov    ebp,DWORD PTR [esp+0x230]
c000bf54:	6a 00                	push   0x0
c000bf56:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000bf5c:	57                   	push   edi
c000bf5d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000bf64:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000bf68:	56                   	push   esi
c000bf69:	e8 6c f9 ff ff       	call   c000b8da <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c000bf6e:	89 34 24             	mov    DWORD PTR [esp],esi
c000bf71:	e8 fa 45 ff ff       	call   c0000570 <strlen>
c000bf76:	83 c4 10             	add    esp,0x10
c000bf79:	83 f8 02             	cmp    eax,0x2
c000bf7c:	77 15                	ja     c000bf93 <Fs::setcwd(Process*, char*)+0x50>
c000bf7e:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000bf83:	83 eb 41             	sub    ebx,0x41
c000bf86:	8b 04 9d 80 b8 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd4780]
c000bf8d:	85 c0                	test   eax,eax
c000bf8f:	75 1c                	jne    c000bfad <Fs::setcwd(Process*, char*)+0x6a>
c000bf91:	eb 2f                	jmp    c000bfc2 <Fs::setcwd(Process*, char*)+0x7f>
c000bf93:	83 ec 0c             	sub    esp,0xc
c000bf96:	56                   	push   esi
c000bf97:	e8 d4 45 ff ff       	call   c0000570 <strlen>
c000bf9c:	83 c4 10             	add    esp,0x10
c000bf9f:	83 f8 03             	cmp    eax,0x3
c000bfa2:	75 57                	jne    c000bffb <Fs::setcwd(Process*, char*)+0xb8>
c000bfa4:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000bfa9:	75 50                	jne    c000bffb <Fs::setcwd(Process*, char*)+0xb8>
c000bfab:	eb d1                	jmp    c000bf7e <Fs::setcwd(Process*, char*)+0x3b>
c000bfad:	83 b8 74 01 00 00 00 	cmp    DWORD PTR [eax+0x174],0x0
c000bfb4:	75 0c                	jne    c000bfc2 <Fs::setcwd(Process*, char*)+0x7f>
c000bfb6:	83 ec 0c             	sub    esp,0xc
c000bfb9:	50                   	push   eax
c000bfba:	e8 9b 1d 00 00       	call   c000dd5a <LogicalDisk::mount()>
c000bfbf:	83 c4 10             	add    esp,0x10
c000bfc2:	b8 03 00 00 00       	mov    eax,0x3
c000bfc7:	83 fb 19             	cmp    ebx,0x19
c000bfca:	0f 87 c6 00 00 00    	ja     c000c096 <Fs::setcwd(Process*, char*)+0x153>
c000bfd0:	8b 14 9d 80 b8 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffd4780]
c000bfd7:	b8 05 00 00 00       	mov    eax,0x5
c000bfdc:	85 d2                	test   edx,edx
c000bfde:	0f 84 b2 00 00 00    	je     c000c096 <Fs::setcwd(Process*, char*)+0x153>
c000bfe4:	b8 06 00 00 00       	mov    eax,0x6
c000bfe9:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c000bff0:	0f 85 92 00 00 00    	jne    c000c088 <Fs::setcwd(Process*, char*)+0x145>
c000bff6:	e9 9b 00 00 00       	jmp    c000c096 <Fs::setcwd(Process*, char*)+0x153>
c000bffb:	83 ec 0c             	sub    esp,0xc
c000bffe:	68 14 01 00 00       	push   0x114
c000c003:	e8 ae ba ff ff       	call   c0007ab6 <malloc>
c000c008:	83 c4 0c             	add    esp,0xc
c000c00b:	89 c3                	mov    ebx,eax
c000c00d:	55                   	push   ebp
c000c00e:	56                   	push   esi
c000c00f:	50                   	push   eax
c000c010:	e8 ad fb ff ff       	call   c000bbc2 <File::File(char const*, Process*)>
c000c015:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000c01a:	83 c4 0c             	add    esp,0xc
c000c01d:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000c021:	50                   	push   eax
c000c022:	8d 44 24 10          	lea    eax,[esp+0x10]
c000c026:	50                   	push   eax
c000c027:	53                   	push   ebx
c000c028:	e8 b5 fe ff ff       	call   c000bee2 <File::stat(unsigned long long*, bool*)>
c000c02d:	83 c4 10             	add    esp,0x10
c000c030:	83 f8 02             	cmp    eax,0x2
c000c033:	74 27                	je     c000c05c <Fs::setcwd(Process*, char*)+0x119>
c000c035:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000c03a:	75 1c                	jne    c000c058 <Fs::setcwd(Process*, char*)+0x115>
c000c03c:	b8 02 00 00 00       	mov    eax,0x2
c000c041:	85 db                	test   ebx,ebx
c000c043:	74 51                	je     c000c096 <Fs::setcwd(Process*, char*)+0x153>
c000c045:	83 ec 0c             	sub    esp,0xc
c000c048:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c04a:	53                   	push   ebx
c000c04b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000c04e:	83 c4 10             	add    esp,0x10
c000c051:	b8 02 00 00 00       	mov    eax,0x2
c000c056:	eb 3e                	jmp    c000c096 <Fs::setcwd(Process*, char*)+0x153>
c000c058:	85 c0                	test   eax,eax
c000c05a:	74 1c                	je     c000c078 <Fs::setcwd(Process*, char*)+0x135>
c000c05c:	b8 01 00 00 00       	mov    eax,0x1
c000c061:	85 db                	test   ebx,ebx
c000c063:	74 31                	je     c000c096 <Fs::setcwd(Process*, char*)+0x153>
c000c065:	83 ec 0c             	sub    esp,0xc
c000c068:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c06a:	53                   	push   ebx
c000c06b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000c06e:	83 c4 10             	add    esp,0x10
c000c071:	b8 01 00 00 00       	mov    eax,0x1
c000c076:	eb 1e                	jmp    c000c096 <Fs::setcwd(Process*, char*)+0x153>
c000c078:	85 db                	test   ebx,ebx
c000c07a:	74 0c                	je     c000c088 <Fs::setcwd(Process*, char*)+0x145>
c000c07c:	83 ec 0c             	sub    esp,0xc
c000c07f:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c081:	53                   	push   ebx
c000c082:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000c085:	83 c4 10             	add    esp,0x10
c000c088:	50                   	push   eax
c000c089:	50                   	push   eax
c000c08a:	56                   	push   esi
c000c08b:	57                   	push   edi
c000c08c:	e8 af 45 ff ff       	call   c0000640 <strcpy>
c000c091:	83 c4 10             	add    esp,0x10
c000c094:	31 c0                	xor    eax,eax
c000c096:	81 c4 1c 02 00 00    	add    esp,0x21c
c000c09c:	5b                   	pop    ebx
c000c09d:	5e                   	pop    esi
c000c09e:	5f                   	pop    edi
c000c09f:	5d                   	pop    ebp
c000c0a0:	c3                   	ret    
c000c0a1:	90                   	nop

c000c0a2 <Directory::Directory(char const*, Process*)>:
c000c0a2:	83 ec 0c             	sub    esp,0xc
c000c0a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0a9:	83 ec 08             	sub    esp,0x8
c000c0ac:	6a 00                	push   0x0
c000c0ae:	50                   	push   eax
c000c0af:	e8 0a d1 ff ff       	call   c00091be <UnixFile::UnixFile(int)>
c000c0b4:	83 c4 10             	add    esp,0x10
c000c0b7:	ba 88 1a 02 c0       	mov    edx,0xc0021a88
c000c0bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0c0:	89 10                	mov    DWORD PTR [eax],edx
c000c0c2:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c000c0c7:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000c0cb:	0f 95 c0             	setne  al
c000c0ce:	0f b6 c0             	movzx  eax,al
c000c0d1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c0d5:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c000c0db:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c0df:	83 c2 0d             	add    edx,0xd
c000c0e2:	50                   	push   eax
c000c0e3:	51                   	push   ecx
c000c0e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0e8:	52                   	push   edx
c000c0e9:	e8 ec f7 ff ff       	call   c000b8da <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c000c0ee:	83 c4 10             	add    esp,0x10
c000c0f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0f5:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000c0f8:	83 e8 41             	sub    eax,0x41
c000c0fb:	88 c2                	mov    dl,al
c000c0fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c101:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000c107:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c10b:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000c10f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c113:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000c119:	0f b6 c0             	movzx  eax,al
c000c11c:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000c123:	85 c0                	test   eax,eax
c000c125:	74 3e                	je     c000c165 <Directory::Directory(char const*, Process*)+0xc3>
c000c127:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c12b:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000c131:	0f b6 c0             	movzx  eax,al
c000c134:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000c13b:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000c141:	85 c0                	test   eax,eax
c000c143:	75 20                	jne    c000c165 <Directory::Directory(char const*, Process*)+0xc3>
c000c145:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c149:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000c14f:	0f b6 c0             	movzx  eax,al
c000c152:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000c159:	83 ec 0c             	sub    esp,0xc
c000c15c:	50                   	push   eax
c000c15d:	e8 f8 1b 00 00       	call   c000dd5a <LogicalDisk::mount()>
c000c162:	83 c4 10             	add    esp,0x10
c000c165:	90                   	nop
c000c166:	83 c4 0c             	add    esp,0xc
c000c169:	c3                   	ret    

c000c16a <Directory::open()>:
c000c16a:	53                   	push   ebx
c000c16b:	b8 0b 00 00 00       	mov    eax,0xb
c000c170:	83 ec 08             	sub    esp,0x8
c000c173:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c177:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000c17e:	83 fa 19             	cmp    edx,0x19
c000c181:	77 3d                	ja     c000c1c0 <Directory::open()+0x56>
c000c183:	8b 14 95 80 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4780]
c000c18a:	85 d2                	test   edx,edx
c000c18c:	74 32                	je     c000c1c0 <Directory::open()+0x56>
c000c18e:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000c194:	85 d2                	test   edx,edx
c000c196:	74 28                	je     c000c1c0 <Directory::open()+0x56>
c000c198:	b8 06 00 00 00       	mov    eax,0x6
c000c19d:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000c1a1:	75 1d                	jne    c000c1c0 <Directory::open()+0x56>
c000c1a3:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000c1a9:	50                   	push   eax
c000c1aa:	8b 02                	mov    eax,DWORD PTR [edx]
c000c1ac:	51                   	push   ecx
c000c1ad:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000c1b0:	51                   	push   ecx
c000c1b1:	52                   	push   edx
c000c1b2:	ff 50 50             	call   DWORD PTR [eax+0x50]
c000c1b5:	83 c4 10             	add    esp,0x10
c000c1b8:	85 c0                	test   eax,eax
c000c1ba:	75 04                	jne    c000c1c0 <Directory::open()+0x56>
c000c1bc:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000c1c0:	83 c4 08             	add    esp,0x8
c000c1c3:	5b                   	pop    ebx
c000c1c4:	c3                   	ret    
c000c1c5:	90                   	nop

c000c1c6 <Directory::close()>:
c000c1c6:	53                   	push   ebx
c000c1c7:	b8 0b 00 00 00       	mov    eax,0xb
c000c1cc:	83 ec 08             	sub    esp,0x8
c000c1cf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c1d3:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c1da:	83 f9 19             	cmp    ecx,0x19
c000c1dd:	77 41                	ja     c000c220 <Directory::close()+0x5a>
c000c1df:	8b 1c 8d 80 b8 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd4780]
c000c1e6:	85 db                	test   ebx,ebx
c000c1e8:	74 36                	je     c000c220 <Directory::close()+0x5a>
c000c1ea:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000c1f1:	74 2d                	je     c000c220 <Directory::close()+0x5a>
c000c1f3:	b8 05 00 00 00       	mov    eax,0x5
c000c1f8:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000c1fc:	74 22                	je     c000c220 <Directory::close()+0x5a>
c000c1fe:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c000c202:	8b 04 8d 80 b8 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd4780]
c000c209:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000c20f:	53                   	push   ebx
c000c210:	53                   	push   ebx
c000c211:	8b 08                	mov    ecx,DWORD PTR [eax]
c000c213:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000c219:	50                   	push   eax
c000c21a:	ff 51 20             	call   DWORD PTR [ecx+0x20]
c000c21d:	83 c4 10             	add    esp,0x10
c000c220:	83 c4 08             	add    esp,0x8
c000c223:	5b                   	pop    ebx
c000c224:	c3                   	ret    
c000c225:	90                   	nop

c000c226 <Directory::unlink()>:
c000c226:	83 ec 0c             	sub    esp,0xc
c000c229:	b8 0b 00 00 00       	mov    eax,0xb
c000c22e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c232:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c239:	83 f9 19             	cmp    ecx,0x19
c000c23c:	77 2f                	ja     c000c26d <Directory::unlink()+0x47>
c000c23e:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000c245:	85 c9                	test   ecx,ecx
c000c247:	74 24                	je     c000c26d <Directory::unlink()+0x47>
c000c249:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000c24f:	85 c9                	test   ecx,ecx
c000c251:	74 1a                	je     c000c26d <Directory::unlink()+0x47>
c000c253:	b8 06 00 00 00       	mov    eax,0x6
c000c258:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000c25c:	75 0f                	jne    c000c26d <Directory::unlink()+0x47>
c000c25e:	83 c2 0d             	add    edx,0xd
c000c261:	50                   	push   eax
c000c262:	50                   	push   eax
c000c263:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c265:	52                   	push   edx
c000c266:	51                   	push   ecx
c000c267:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000c26a:	83 c4 10             	add    esp,0x10
c000c26d:	83 c4 0c             	add    esp,0xc
c000c270:	c3                   	ret    
c000c271:	90                   	nop

c000c272 <Directory::rename(char const*)>:
c000c272:	83 ec 0c             	sub    esp,0xc
c000c275:	b8 0b 00 00 00       	mov    eax,0xb
c000c27a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c27e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c285:	83 f9 19             	cmp    ecx,0x19
c000c288:	77 32                	ja     c000c2bc <Directory::rename(char const*)+0x4a>
c000c28a:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000c291:	85 c9                	test   ecx,ecx
c000c293:	74 27                	je     c000c2bc <Directory::rename(char const*)+0x4a>
c000c295:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000c29b:	85 c9                	test   ecx,ecx
c000c29d:	74 1d                	je     c000c2bc <Directory::rename(char const*)+0x4a>
c000c29f:	b8 06 00 00 00       	mov    eax,0x6
c000c2a4:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000c2a8:	75 12                	jne    c000c2bc <Directory::rename(char const*)+0x4a>
c000c2aa:	83 c2 0d             	add    edx,0xd
c000c2ad:	50                   	push   eax
c000c2ae:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c2b0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c2b4:	52                   	push   edx
c000c2b5:	51                   	push   ecx
c000c2b6:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000c2b9:	83 c4 10             	add    esp,0x10
c000c2bc:	83 c4 0c             	add    esp,0xc
c000c2bf:	c3                   	ret    

c000c2c0 <Directory::exists()>:
c000c2c0:	83 ec 0c             	sub    esp,0xc
c000c2c3:	31 c0                	xor    eax,eax
c000c2c5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c2c9:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c2d0:	83 f9 19             	cmp    ecx,0x19
c000c2d3:	77 24                	ja     c000c2f9 <Directory::exists()+0x39>
c000c2d5:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000c2dc:	85 c9                	test   ecx,ecx
c000c2de:	74 19                	je     c000c2f9 <Directory::exists()+0x39>
c000c2e0:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000c2e6:	85 c9                	test   ecx,ecx
c000c2e8:	74 0f                	je     c000c2f9 <Directory::exists()+0x39>
c000c2ea:	83 c2 0d             	add    edx,0xd
c000c2ed:	50                   	push   eax
c000c2ee:	50                   	push   eax
c000c2ef:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c2f1:	52                   	push   edx
c000c2f2:	51                   	push   ecx
c000c2f3:	ff 50 48             	call   DWORD PTR [eax+0x48]
c000c2f6:	83 c4 10             	add    esp,0x10
c000c2f9:	83 c4 0c             	add    esp,0xc
c000c2fc:	c3                   	ret    
c000c2fd:	90                   	nop

c000c2fe <Directory::read(dirent*)>:
c000c2fe:	83 ec 1c             	sub    esp,0x1c
c000c301:	b8 0b 00 00 00       	mov    eax,0xb
c000c306:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000c30a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c311:	83 f9 19             	cmp    ecx,0x19
c000c314:	77 30                	ja     c000c346 <Directory::read(dirent*)+0x48>
c000c316:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000c31d:	85 c9                	test   ecx,ecx
c000c31f:	74 25                	je     c000c346 <Directory::read(dirent*)+0x48>
c000c321:	83 b9 74 01 00 00 00 	cmp    DWORD PTR [ecx+0x174],0x0
c000c328:	74 1c                	je     c000c346 <Directory::read(dirent*)+0x48>
c000c32a:	83 ec 0c             	sub    esp,0xc
c000c32d:	8b 02                	mov    eax,DWORD PTR [edx]
c000c32f:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000c333:	51                   	push   ecx
c000c334:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c338:	6a 00                	push   0x0
c000c33a:	68 10 01 00 00       	push   0x110
c000c33f:	52                   	push   edx
c000c340:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000c343:	83 c4 20             	add    esp,0x20
c000c346:	83 c4 1c             	add    esp,0x1c
c000c349:	c3                   	ret    

c000c34a <Directory::create()>:
c000c34a:	83 ec 0c             	sub    esp,0xc
c000c34d:	b8 0b 00 00 00       	mov    eax,0xb
c000c352:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c356:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c35d:	83 f9 19             	cmp    ecx,0x19
c000c360:	77 2f                	ja     c000c391 <Directory::create()+0x47>
c000c362:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000c369:	85 c9                	test   ecx,ecx
c000c36b:	74 24                	je     c000c391 <Directory::create()+0x47>
c000c36d:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000c373:	85 c9                	test   ecx,ecx
c000c375:	74 1a                	je     c000c391 <Directory::create()+0x47>
c000c377:	b8 06 00 00 00       	mov    eax,0x6
c000c37c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000c380:	75 0f                	jne    c000c391 <Directory::create()+0x47>
c000c382:	83 c2 0d             	add    edx,0xd
c000c385:	50                   	push   eax
c000c386:	50                   	push   eax
c000c387:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c389:	52                   	push   edx
c000c38a:	51                   	push   ecx
c000c38b:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000c38e:	83 c4 10             	add    esp,0x10
c000c391:	83 c4 0c             	add    esp,0xc
c000c394:	c3                   	ret    
c000c395:	90                   	nop

c000c396 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000c396:	b8 0a 00 00 00       	mov    eax,0xa
c000c39b:	c3                   	ret    

c000c39c <Bus::Bus(char const*)>:
c000c39c:	83 ec 0c             	sub    esp,0xc
c000c39f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c3a3:	83 ec 08             	sub    esp,0x8
c000c3a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3aa:	50                   	push   eax
c000c3ab:	e8 22 08 00 00       	call   c000cbd2 <Device::Device(char const*)>
c000c3b0:	83 c4 10             	add    esp,0x10
c000c3b3:	ba a4 1a 02 c0       	mov    edx,0xc0021aa4
c000c3b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c3bc:	89 10                	mov    DWORD PTR [eax],edx
c000c3be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c3c2:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000c3cc:	90                   	nop
c000c3cd:	83 c4 0c             	add    esp,0xc
c000c3d0:	c3                   	ret    
c000c3d1:	90                   	nop
c000c3d2:	66 90                	xchg   ax,ax

c000c3d4 <Bus::~Bus()>:
c000c3d4:	83 ec 0c             	sub    esp,0xc
c000c3d7:	ba a4 1a 02 c0       	mov    edx,0xc0021aa4
c000c3dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c3e0:	89 10                	mov    DWORD PTR [eax],edx
c000c3e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c3e6:	83 ec 0c             	sub    esp,0xc
c000c3e9:	50                   	push   eax
c000c3ea:	e8 4d 05 00 00       	call   c000c93c <Device::~Device()>
c000c3ef:	83 c4 10             	add    esp,0x10
c000c3f2:	90                   	nop
c000c3f3:	83 c4 0c             	add    esp,0xc
c000c3f6:	c3                   	ret    
c000c3f7:	90                   	nop

c000c3f8 <Bus::~Bus()>:
c000c3f8:	83 ec 0c             	sub    esp,0xc
c000c3fb:	83 ec 0c             	sub    esp,0xc
c000c3fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c402:	e8 cd ff ff ff       	call   c000c3d4 <Bus::~Bus()>
c000c407:	83 c4 10             	add    esp,0x10
c000c40a:	83 ec 08             	sub    esp,0x8
c000c40d:	68 58 01 00 00       	push   0x158
c000c412:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c416:	e8 fd e3 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000c41b:	83 c4 10             	add    esp,0x10
c000c41e:	83 c4 0c             	add    esp,0xc
c000c421:	c3                   	ret    

c000c422 <beepThread(void*)>:
c000c422:	83 ec 0c             	sub    esp,0xc
c000c425:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000c42a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c42e:	48                   	dec    eax
c000c42f:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000c434:	75 01                	jne    c000c437 <beepThread(void*)+0x15>
c000c436:	fb                   	sti    
c000c437:	83 ec 0c             	sub    esp,0xc
c000c43a:	6b c2 0a             	imul   eax,edx,0xa
c000c43d:	50                   	push   eax
c000c43e:	e8 05 a0 00 00       	call   c0016448 <milliTenthSleep(unsigned int)>
c000c443:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000c44a:	e8 54 bf 00 00       	call   c00183a3 <HalMakeBeep(int)>
c000c44f:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000c457:	83 c4 1c             	add    esp,0x1c
c000c45a:	e9 cd 9e 00 00       	jmp    c001632c <blockTask(TaskState)>

c000c45f <Krnl::beep(int, int, bool)>:
c000c45f:	56                   	push   esi
c000c460:	53                   	push   ebx
c000c461:	83 ec 10             	sub    esp,0x10
c000c464:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000c468:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000c46c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c470:	e8 2e bf 00 00       	call   c00183a3 <HalMakeBeep(int)>
c000c475:	83 c4 10             	add    esp,0x10
c000c478:	89 f0                	mov    eax,esi
c000c47a:	84 c0                	test   al,al
c000c47c:	74 1e                	je     c000c49c <Krnl::beep(int, int, bool)+0x3d>
c000c47e:	83 ec 0c             	sub    esp,0xc
c000c481:	6b db 0a             	imul   ebx,ebx,0xa
c000c484:	53                   	push   ebx
c000c485:	e8 be 9f 00 00       	call   c0016448 <milliTenthSleep(unsigned int)>
c000c48a:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000c492:	83 c4 14             	add    esp,0x14
c000c495:	5b                   	pop    ebx
c000c496:	5e                   	pop    esi
c000c497:	e9 07 bf 00 00       	jmp    c00183a3 <HalMakeBeep(int)>
c000c49c:	68 e6 00 00 00       	push   0xe6
c000c4a1:	53                   	push   ebx
c000c4a2:	68 22 c4 00 c0       	push   0xc000c422
c000c4a7:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000c4ad:	e8 16 9a 00 00       	call   c0015ec8 <Process::createThread(void (*)(void*), void*, int)>
c000c4b2:	83 c4 14             	add    esp,0x14
c000c4b5:	5b                   	pop    ebx
c000c4b6:	5e                   	pop    esi
c000c4b7:	c3                   	ret    

c000c4b8 <User::loadClockSettings(int)>:
c000c4b8:	53                   	push   ebx
c000c4b9:	83 ec 14             	sub    esp,0x14
c000c4bc:	68 14 01 00 00       	push   0x114
c000c4c1:	e8 f0 b5 ff ff       	call   c0007ab6 <malloc>
c000c4c6:	83 c4 0c             	add    esp,0xc
c000c4c9:	89 c3                	mov    ebx,eax
c000c4cb:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000c4d1:	68 c8 1a 02 c0       	push   0xc0021ac8
c000c4d6:	50                   	push   eax
c000c4d7:	e8 e6 f6 ff ff       	call   c000bbc2 <File::File(char const*, Process*)>
c000c4dc:	58                   	pop    eax
c000c4dd:	5a                   	pop    edx
c000c4de:	6a 01                	push   0x1
c000c4e0:	53                   	push   ebx
c000c4e1:	e8 fa f6 ff ff       	call   c000bbe0 <File::open(FileOpenMode)>
c000c4e6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000c4e9:	e8 50 f7 ff ff       	call   c000bc3e <File::close()>
c000c4ee:	83 c4 10             	add    esp,0x10
c000c4f1:	85 db                	test   ebx,ebx
c000c4f3:	74 0f                	je     c000c504 <User::loadClockSettings(int)+0x4c>
c000c4f5:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c4f7:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000c4fb:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000c4fe:	83 c4 08             	add    esp,0x8
c000c501:	5b                   	pop    ebx
c000c502:	ff e0                	jmp    eax
c000c504:	83 c4 08             	add    esp,0x8
c000c507:	5b                   	pop    ebx
c000c508:	c3                   	ret    
c000c509:	90                   	nop

c000c50a <Clock::Clock(char const*)>:
c000c50a:	83 ec 0c             	sub    esp,0xc
c000c50d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c511:	83 ec 08             	sub    esp,0x8
c000c514:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c518:	50                   	push   eax
c000c519:	e8 b4 06 00 00       	call   c000cbd2 <Device::Device(char const*)>
c000c51e:	83 c4 10             	add    esp,0x10
c000c521:	ba f0 1a 02 c0       	mov    edx,0xc0021af0
c000c526:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c52a:	89 10                	mov    DWORD PTR [eax],edx
c000c52c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c530:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000c53a:	90                   	nop
c000c53b:	83 c4 0c             	add    esp,0xc
c000c53e:	c3                   	ret    
c000c53f:	90                   	nop

c000c540 <Clock::~Clock()>:
c000c540:	83 ec 0c             	sub    esp,0xc
c000c543:	ba f0 1a 02 c0       	mov    edx,0xc0021af0
c000c548:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c54c:	89 10                	mov    DWORD PTR [eax],edx
c000c54e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c552:	83 ec 0c             	sub    esp,0xc
c000c555:	50                   	push   eax
c000c556:	e8 e1 03 00 00       	call   c000c93c <Device::~Device()>
c000c55b:	83 c4 10             	add    esp,0x10
c000c55e:	90                   	nop
c000c55f:	83 c4 0c             	add    esp,0xc
c000c562:	c3                   	ret    
c000c563:	90                   	nop

c000c564 <Clock::~Clock()>:
c000c564:	83 ec 0c             	sub    esp,0xc
c000c567:	83 ec 0c             	sub    esp,0xc
c000c56a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c56e:	e8 cd ff ff ff       	call   c000c540 <Clock::~Clock()>
c000c573:	83 c4 10             	add    esp,0x10
c000c576:	83 ec 08             	sub    esp,0x8
c000c579:	68 58 01 00 00       	push   0x158
c000c57e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c582:	e8 91 e2 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000c587:	83 c4 10             	add    esp,0x10
c000c58a:	83 c4 0c             	add    esp,0xc
c000c58d:	c3                   	ret    

c000c58e <Clock::timeInSecondsLocal()>:
c000c58e:	53                   	push   ebx
c000c58f:	83 ec 14             	sub    esp,0x14
c000c592:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c596:	8b 10                	mov    edx,DWORD PTR [eax]
c000c598:	50                   	push   eax
c000c599:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000c59c:	0f b6 0d 08 94 02 c0 	movzx  ecx,BYTE PTR ds:0xc0029408
c000c5a3:	03 0d 0c 94 02 c0    	add    ecx,DWORD PTR ds:0xc002940c
c000c5a9:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000c5af:	89 cb                	mov    ebx,ecx
c000c5b1:	c1 fb 1f             	sar    ebx,0x1f
c000c5b4:	01 c8                	add    eax,ecx
c000c5b6:	11 da                	adc    edx,ebx
c000c5b8:	83 c4 10             	add    esp,0x10
c000c5bb:	31 c9                	xor    ecx,ecx
c000c5bd:	80 3d 09 94 02 c0 00 	cmp    BYTE PTR ds:0xc0029409,0x0
c000c5c4:	74 05                	je     c000c5cb <Clock::timeInSecondsLocal()+0x3d>
c000c5c6:	b9 08 07 00 00       	mov    ecx,0x708
c000c5cb:	31 db                	xor    ebx,ebx
c000c5cd:	01 c8                	add    eax,ecx
c000c5cf:	11 da                	adc    edx,ebx
c000c5d1:	83 c4 08             	add    esp,0x8
c000c5d4:	5b                   	pop    ebx
c000c5d5:	c3                   	ret    

c000c5d6 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000c5d6:	57                   	push   edi
c000c5d7:	56                   	push   esi
c000c5d8:	53                   	push   ebx
c000c5d9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c5dd:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c5e1:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c5e3:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000c5e7:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000c5ea:	0f b6 05 08 94 02 c0 	movzx  eax,BYTE PTR ds:0xc0029408
c000c5f1:	03 05 0c 94 02 c0    	add    eax,DWORD PTR ds:0xc002940c
c000c5f7:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000c5fd:	99                   	cdq    
c000c5fe:	29 c6                	sub    esi,eax
c000c600:	19 d7                	sbb    edi,edx
c000c602:	89 f0                	mov    eax,esi
c000c604:	89 fa                	mov    edx,edi
c000c606:	31 f6                	xor    esi,esi
c000c608:	80 3d 09 94 02 c0 00 	cmp    BYTE PTR ds:0xc0029409,0x0
c000c60f:	74 05                	je     c000c616 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000c611:	be 08 07 00 00       	mov    esi,0x708
c000c616:	31 ff                	xor    edi,edi
c000c618:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000c61c:	29 f0                	sub    eax,esi
c000c61e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c622:	19 fa                	sbb    edx,edi
c000c624:	89 d8                	mov    eax,ebx
c000c626:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c62a:	5b                   	pop    ebx
c000c62b:	5e                   	pop    esi
c000c62c:	5f                   	pop    edi
c000c62d:	ff e0                	jmp    eax

c000c62f <datetimeToSeconds(datetime_t)>:
c000c62f:	55                   	push   ebp
c000c630:	57                   	push   edi
c000c631:	56                   	push   esi
c000c632:	53                   	push   ebx
c000c633:	83 ec 0c             	sub    esp,0xc
c000c636:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000c63a:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c000c63e:	89 d6                	mov    esi,edx
c000c640:	0f b6 c7             	movzx  eax,bh
c000c643:	c1 ee 10             	shr    esi,0x10
c000c646:	6b e8 3c             	imul   ebp,eax,0x3c
c000c649:	81 ee 6c 07 00 00    	sub    esi,0x76c
c000c64f:	0f b6 ce             	movzx  ecx,dh
c000c652:	89 df                	mov    edi,ebx
c000c654:	49                   	dec    ecx
c000c655:	c1 ef 10             	shr    edi,0x10
c000c658:	0f b6 db             	movzx  ebx,bl
c000c65b:	89 f8                	mov    eax,edi
c000c65d:	69 db 10 0e 00 00    	imul   ebx,ebx,0xe10
c000c663:	0f b6 f8             	movzx  edi,al
c000c666:	0f b6 d2             	movzx  edx,dl
c000c669:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c000c66d:	01 d8                	add    eax,ebx
c000c66f:	0f b7 de             	movzx  ebx,si
c000c672:	89 04 24             	mov    DWORD PTR [esp],eax
c000c675:	c1 f8 1f             	sar    eax,0x1f
c000c678:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c67c:	0f b6 c1             	movzx  eax,cl
c000c67f:	8b 0c 85 40 1b 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffde4c0]
c000c686:	83 f8 01             	cmp    eax,0x1
c000c689:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c000c68d:	76 27                	jbe    c000c6b6 <datetimeToSeconds(datetime_t)+0x87>
c000c68f:	83 e6 03             	and    esi,0x3
c000c692:	75 22                	jne    c000c6b6 <datetimeToSeconds(datetime_t)+0x87>
c000c694:	31 d2                	xor    edx,edx
c000c696:	be 64 00 00 00       	mov    esi,0x64
c000c69b:	89 d8                	mov    eax,ebx
c000c69d:	f7 f6                	div    esi
c000c69f:	85 d2                	test   edx,edx
c000c6a1:	75 12                	jne    c000c6b5 <datetimeToSeconds(datetime_t)+0x86>
c000c6a3:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000c6a9:	be 90 01 00 00       	mov    esi,0x190
c000c6ae:	99                   	cdq    
c000c6af:	f7 fe                	idiv   esi
c000c6b1:	85 d2                	test   edx,edx
c000c6b3:	75 01                	jne    c000c6b6 <datetimeToSeconds(datetime_t)+0x87>
c000c6b5:	41                   	inc    ecx
c000c6b6:	83 fb 46             	cmp    ebx,0x46
c000c6b9:	76 48                	jbe    c000c703 <datetimeToSeconds(datetime_t)+0xd4>
c000c6bb:	be 46 00 00 00       	mov    esi,0x46
c000c6c0:	bf 64 00 00 00       	mov    edi,0x64
c000c6c5:	bd 90 01 00 00       	mov    ebp,0x190
c000c6ca:	b8 6d 01 00 00       	mov    eax,0x16d
c000c6cf:	f7 c6 03 00 00 00    	test   esi,0x3
c000c6d5:	75 23                	jne    c000c6fa <datetimeToSeconds(datetime_t)+0xcb>
c000c6d7:	89 f0                	mov    eax,esi
c000c6d9:	99                   	cdq    
c000c6da:	f7 ff                	idiv   edi
c000c6dc:	b8 6e 01 00 00       	mov    eax,0x16e
c000c6e1:	85 d2                	test   edx,edx
c000c6e3:	75 15                	jne    c000c6fa <datetimeToSeconds(datetime_t)+0xcb>
c000c6e5:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000c6eb:	99                   	cdq    
c000c6ec:	f7 fd                	idiv   ebp
c000c6ee:	83 fa 01             	cmp    edx,0x1
c000c6f1:	19 c0                	sbb    eax,eax
c000c6f3:	f7 d0                	not    eax
c000c6f5:	05 6e 01 00 00       	add    eax,0x16e
c000c6fa:	01 c1                	add    ecx,eax
c000c6fc:	46                   	inc    esi
c000c6fd:	39 de                	cmp    esi,ebx
c000c6ff:	7c c9                	jl     c000c6ca <datetimeToSeconds(datetime_t)+0x9b>
c000c701:	eb 34                	jmp    c000c737 <datetimeToSeconds(datetime_t)+0x108>
c000c703:	74 32                	je     c000c737 <datetimeToSeconds(datetime_t)+0x108>
c000c705:	b8 45 00 00 00       	mov    eax,0x45
c000c70a:	89 c2                	mov    edx,eax
c000c70c:	83 e2 03             	and    edx,0x3
c000c70f:	39 d8                	cmp    eax,ebx
c000c711:	7e 0f                	jle    c000c722 <datetimeToSeconds(datetime_t)+0xf3>
c000c713:	83 fa 01             	cmp    edx,0x1
c000c716:	19 d2                	sbb    edx,edx
c000c718:	48                   	dec    eax
c000c719:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c000c720:	eb e8                	jmp    c000c70a <datetimeToSeconds(datetime_t)+0xdb>
c000c722:	b8 6d 01 00 00       	mov    eax,0x16d
c000c727:	85 d2                	test   edx,edx
c000c729:	75 0a                	jne    c000c735 <datetimeToSeconds(datetime_t)+0x106>
c000c72b:	83 fb 01             	cmp    ebx,0x1
c000c72e:	19 c0                	sbb    eax,eax
c000c730:	05 6e 01 00 00       	add    eax,0x16e
c000c735:	29 c1                	sub    ecx,eax
c000c737:	b8 80 51 01 00       	mov    eax,0x15180
c000c73c:	f7 e9                	imul   ecx
c000c73e:	03 04 24             	add    eax,DWORD PTR [esp]
c000c741:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000c745:	83 c4 0c             	add    esp,0xc
c000c748:	5b                   	pop    ebx
c000c749:	5e                   	pop    esi
c000c74a:	5f                   	pop    edi
c000c74b:	5d                   	pop    ebp
c000c74c:	c3                   	ret    
c000c74d:	90                   	nop

c000c74e <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000c74e:	57                   	push   edi
c000c74f:	56                   	push   esi
c000c750:	53                   	push   ebx
c000c751:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000c755:	8b 06                	mov    eax,DWORD PTR [esi]
c000c757:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000c75a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c75e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c762:	e8 c8 fe ff ff       	call   c000c62f <datetimeToSeconds(datetime_t)>
c000c767:	59                   	pop    ecx
c000c768:	0f b6 0d 08 94 02 c0 	movzx  ecx,BYTE PTR ds:0xc0029408
c000c76f:	5b                   	pop    ebx
c000c770:	03 0d 0c 94 02 c0    	add    ecx,DWORD PTR ds:0xc002940c
c000c776:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000c77c:	89 cb                	mov    ebx,ecx
c000c77e:	c1 fb 1f             	sar    ebx,0x1f
c000c781:	29 c8                	sub    eax,ecx
c000c783:	19 da                	sbb    edx,ebx
c000c785:	31 c9                	xor    ecx,ecx
c000c787:	80 3d 09 94 02 c0 00 	cmp    BYTE PTR ds:0xc0029409,0x0
c000c78e:	74 05                	je     c000c795 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000c790:	b9 08 07 00 00       	mov    ecx,0x708
c000c795:	31 db                	xor    ebx,ebx
c000c797:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000c79b:	29 c8                	sub    eax,ecx
c000c79d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c7a1:	19 da                	sbb    edx,ebx
c000c7a3:	89 f8                	mov    eax,edi
c000c7a5:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c7a9:	5b                   	pop    ebx
c000c7aa:	5e                   	pop    esi
c000c7ab:	5f                   	pop    edi
c000c7ac:	ff e0                	jmp    eax

c000c7ae <secondsToDatetime(unsigned long long)>:
c000c7ae:	55                   	push   ebp
c000c7af:	57                   	push   edi
c000c7b0:	56                   	push   esi
c000c7b1:	53                   	push   ebx
c000c7b2:	83 ec 1c             	sub    esp,0x1c
c000c7b5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000c7b9:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000c7bd:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000c7c1:	6a 00                	push   0x0
c000c7c3:	68 80 51 01 00       	push   0x15180
c000c7c8:	55                   	push   ebp
c000c7c9:	57                   	push   edi
c000c7ca:	e8 c1 2f 01 00       	call   c001f790 <__udivdi3>
c000c7cf:	83 c4 10             	add    esp,0x10
c000c7d2:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000c7d8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c7dc:	6a 00                	push   0x0
c000c7de:	68 80 51 01 00       	push   0x15180
c000c7e3:	55                   	push   ebp
c000c7e4:	57                   	push   edi
c000c7e5:	bf 10 0e 00 00       	mov    edi,0xe10
c000c7ea:	e8 a1 30 01 00       	call   c001f890 <__umoddi3>
c000c7ef:	83 c4 10             	add    esp,0x10
c000c7f2:	99                   	cdq    
c000c7f3:	f7 ff                	idiv   edi
c000c7f5:	bf 3c 00 00 00       	mov    edi,0x3c
c000c7fa:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000c7fd:	89 d0                	mov    eax,edx
c000c7ff:	99                   	cdq    
c000c800:	f7 ff                	idiv   edi
c000c802:	85 db                	test   ebx,ebx
c000c804:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000c807:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000c80a:	79 11                	jns    c000c81d <secondsToDatetime(unsigned long long)+0x6f>
c000c80c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c810:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000c816:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000c81b:	eb 07                	jmp    c000c824 <secondsToDatetime(unsigned long long)+0x76>
c000c81d:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000c822:	89 d8                	mov    eax,ebx
c000c824:	bf b4 05 00 00       	mov    edi,0x5b4
c000c829:	99                   	cdq    
c000c82a:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000c82f:	f7 f9                	idiv   ecx
c000c831:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000c836:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c83a:	31 d2                	xor    edx,edx
c000c83c:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000c844:	01 c3                	add    ebx,eax
c000c846:	89 d8                	mov    eax,ebx
c000c848:	f7 f1                	div    ecx
c000c84a:	31 d2                	xor    edx,edx
c000c84c:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000c84f:	89 d8                	mov    eax,ebx
c000c851:	f7 f7                	div    edi
c000c853:	31 d2                	xor    edx,edx
c000c855:	29 c1                	sub    ecx,eax
c000c857:	89 d8                	mov    eax,ebx
c000c859:	f7 f5                	div    ebp
c000c85b:	bd 6d 01 00 00       	mov    ebp,0x16d
c000c860:	29 c1                	sub    ecx,eax
c000c862:	31 d2                	xor    edx,edx
c000c864:	89 c8                	mov    eax,ecx
c000c866:	f7 f5                	div    ebp
c000c868:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000c86d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c871:	31 d2                	xor    edx,edx
c000c873:	89 c8                	mov    eax,ecx
c000c875:	f7 f5                	div    ebp
c000c877:	31 d2                	xor    edx,edx
c000c879:	01 c3                	add    ebx,eax
c000c87b:	89 c8                	mov    eax,ecx
c000c87d:	f7 f7                	div    edi
c000c87f:	bf 99 00 00 00       	mov    edi,0x99
c000c884:	29 c3                	sub    ebx,eax
c000c886:	31 d2                	xor    edx,edx
c000c888:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000c890:	29 c3                	sub    ebx,eax
c000c892:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000c895:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000c898:	bb 05 00 00 00       	mov    ebx,0x5
c000c89d:	83 c1 02             	add    ecx,0x2
c000c8a0:	89 c8                	mov    eax,ecx
c000c8a2:	f7 f7                	div    edi
c000c8a4:	31 d2                	xor    edx,edx
c000c8a6:	89 c7                	mov    edi,eax
c000c8a8:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000c8ae:	83 c0 02             	add    eax,0x2
c000c8b1:	f7 f3                	div    ebx
c000c8b3:	89 eb                	mov    ebx,ebp
c000c8b5:	29 c3                	sub    ebx,eax
c000c8b7:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000c8bd:	88 1e                	mov    BYTE PTR [esi],bl
c000c8bf:	19 c0                	sbb    eax,eax
c000c8c1:	31 d2                	xor    edx,edx
c000c8c3:	83 e0 0c             	and    eax,0xc
c000c8c6:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000c8ca:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000c8d2:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000c8d6:	83 f9 01             	cmp    ecx,0x1
c000c8d9:	0f 96 c2             	setbe  dl
c000c8dc:	41                   	inc    ecx
c000c8dd:	01 d0                	add    eax,edx
c000c8df:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000c8e2:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000c8e6:	83 c4 1c             	add    esp,0x1c
c000c8e9:	89 f0                	mov    eax,esi
c000c8eb:	5b                   	pop    ebx
c000c8ec:	5e                   	pop    esi
c000c8ed:	5f                   	pop    edi
c000c8ee:	5d                   	pop    ebp
c000c8ef:	c2 04 00             	ret    0x4

c000c8f2 <Clock::timeInDatetimeLocal()>:
c000c8f2:	53                   	push   ebx
c000c8f3:	83 ec 14             	sub    esp,0x14
c000c8f6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c8fa:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000c8fe:	e8 8b fc ff ff       	call   c000c58e <Clock::timeInSecondsLocal()>
c000c903:	83 c4 0c             	add    esp,0xc
c000c906:	52                   	push   edx
c000c907:	50                   	push   eax
c000c908:	53                   	push   ebx
c000c909:	e8 a0 fe ff ff       	call   c000c7ae <secondsToDatetime(unsigned long long)>
c000c90e:	89 d8                	mov    eax,ebx
c000c910:	83 c4 14             	add    esp,0x14
c000c913:	5b                   	pop    ebx
c000c914:	c2 04 00             	ret    0x4
c000c917:	90                   	nop

c000c918 <Device::hibernate()>:
c000c918:	c3                   	ret    
c000c919:	90                   	nop

c000c91a <Device::wake()>:
c000c91a:	c3                   	ret    
c000c91b:	90                   	nop

c000c91c <Device::detect()>:
c000c91c:	c3                   	ret    
c000c91d:	90                   	nop

c000c91e <Device::disableLegacy()>:
c000c91e:	c3                   	ret    
c000c91f:	90                   	nop

c000c920 <Device::powerSaving(PowerSavingLevel)>:
c000c920:	c3                   	ret    
c000c921:	90                   	nop

c000c922 <DriverlessDevice::close(int, int, void*)>:
c000c922:	31 c0                	xor    eax,eax
c000c924:	c3                   	ret    
c000c925:	90                   	nop

c000c926 <DriverlessDevice::detect()>:
c000c926:	c3                   	ret    
c000c927:	90                   	nop

c000c928 <DriverlessDevice::open(int, int, void*)>:
c000c928:	83 ec 18             	sub    esp,0x18
c000c92b:	68 70 1b 02 c0       	push   0xc0021b70
c000c930:	e8 5e 4d 00 00       	call   c0011693 <KePanic(char const*)>
c000c935:	83 c8 ff             	or     eax,0xffffffff
c000c938:	83 c4 1c             	add    esp,0x1c
c000c93b:	c3                   	ret    

c000c93c <Device::~Device()>:
c000c93c:	ba d0 1b 02 c0       	mov    edx,0xc0021bd0
c000c941:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c945:	89 10                	mov    DWORD PTR [eax],edx
c000c947:	90                   	nop
c000c948:	c3                   	ret    
c000c949:	90                   	nop

c000c94a <Device::~Device()>:
c000c94a:	83 ec 0c             	sub    esp,0xc
c000c94d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000c951:	e8 e6 ff ff ff       	call   c000c93c <Device::~Device()>
c000c956:	83 c4 04             	add    esp,0x4
c000c959:	83 ec 08             	sub    esp,0x8
c000c95c:	68 58 01 00 00       	push   0x158
c000c961:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c965:	e8 ae de ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000c96a:	83 c4 10             	add    esp,0x10
c000c96d:	83 c4 0c             	add    esp,0xc
c000c970:	c3                   	ret    
c000c971:	90                   	nop

c000c972 <Device::findAndLoadDriver()>:
c000c972:	c7 44 24 04 8e 1b 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021b8e
c000c97a:	e9 c6 df ff ff       	jmp    c000a945 <Dbg::kprintf(char const*, ...)>
c000c97f:	90                   	nop

c000c980 <Device::preOpenPCI(PCIDeviceInfo)>:
c000c980:	57                   	push   edi
c000c981:	b9 09 00 00 00       	mov    ecx,0x9
c000c986:	56                   	push   esi
c000c987:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000c98b:	8d 74 24 10          	lea    esi,[esp+0x10]
c000c98f:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000c999:	81 c7 18 01 00 00    	add    edi,0x118
c000c99f:	fc                   	cld    
c000c9a0:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000c9a2:	5e                   	pop    esi
c000c9a3:	5f                   	pop    edi
c000c9a4:	c3                   	ret    
c000c9a5:	90                   	nop

c000c9a6 <Device::preOpenACPI(void*, char*, char*)>:
c000c9a6:	57                   	push   edi
c000c9a7:	b9 1e 00 00 00       	mov    ecx,0x1e
c000c9ac:	56                   	push   esi
c000c9ad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c9b1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c9b5:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000c9bf:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000c9c5:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000c9cb:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c9cf:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c9d1:	b9 0e 00 00 00       	mov    ecx,0xe
c000c9d6:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000c9dc:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000c9e0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c9e2:	5e                   	pop    esi
c000c9e3:	5f                   	pop    edi
c000c9e4:	c3                   	ret    
c000c9e5:	90                   	nop

c000c9e6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000c9e6:	53                   	push   ebx
c000c9e7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c9eb:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c9ef:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c9f3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000c9f7:	0f b6 c0             	movzx  eax,al
c000c9fa:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000c9fe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ca02:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000ca06:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000ca0a:	5b                   	pop    ebx
c000ca0b:	e9 a8 05 00 00       	jmp    c000cfb8 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c000ca10 <Device::getParent()>:
c000ca10:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ca14:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000ca1a:	c3                   	ret    
c000ca1b:	90                   	nop

c000ca1c <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000ca1c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ca20:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ca24:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c000ca29:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000ca2d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000ca31:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ca35:	e9 e6 06 00 00       	jmp    c000d120 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c000ca3a <Device::addChild(Device*)>:
c000ca3a:	53                   	push   ebx
c000ca3b:	83 ec 08             	sub    esp,0x8
c000ca3e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ca42:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ca46:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000ca4c:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000ca52:	8b 13                	mov    edx,DWORD PTR [ebx]
c000ca54:	85 d2                	test   edx,edx
c000ca56:	74 04                	je     c000ca5c <Device::addChild(Device*)+0x22>
c000ca58:	89 d3                	mov    ebx,edx
c000ca5a:	eb f6                	jmp    c000ca52 <Device::addChild(Device*)+0x18>
c000ca5c:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000ca5f:	83 ec 0c             	sub    esp,0xc
c000ca62:	6a 08                	push   0x8
c000ca64:	e8 4d b0 ff ff       	call   c0007ab6 <malloc>
c000ca69:	89 03                	mov    DWORD PTR [ebx],eax
c000ca6b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ca71:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000ca78:	83 c4 18             	add    esp,0x18
c000ca7b:	5b                   	pop    ebx
c000ca7c:	c3                   	ret    
c000ca7d:	90                   	nop

c000ca7e <Device::removeAllChildren()>:
c000ca7e:	56                   	push   esi
c000ca7f:	53                   	push   ebx
c000ca80:	52                   	push   edx
c000ca81:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ca85:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000ca8b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ca8e:	74 17                	je     c000caa7 <Device::removeAllChildren()+0x29>
c000ca90:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ca93:	85 c0                	test   eax,eax
c000ca95:	74 0c                	je     c000caa3 <Device::removeAllChildren()+0x25>
c000ca97:	83 ec 0c             	sub    esp,0xc
c000ca9a:	8b 10                	mov    edx,DWORD PTR [eax]
c000ca9c:	50                   	push   eax
c000ca9d:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000caa0:	83 c4 10             	add    esp,0x10
c000caa3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000caa5:	eb e4                	jmp    c000ca8b <Device::removeAllChildren()+0xd>
c000caa7:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000caad:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000cab3:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000cab9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000cac0:	58                   	pop    eax
c000cac1:	5b                   	pop    ebx
c000cac2:	5e                   	pop    esi
c000cac3:	c3                   	ret    

c000cac4 <Device::hibernateAll()>:
c000cac4:	53                   	push   ebx
c000cac5:	83 ec 14             	sub    esp,0x14
c000cac8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000cacc:	8b 03                	mov    eax,DWORD PTR [ebx]
c000cace:	53                   	push   ebx
c000cacf:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000cad2:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000cad8:	83 c4 10             	add    esp,0x10
c000cadb:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000cade:	74 0f                	je     c000caef <Device::hibernateAll()+0x2b>
c000cae0:	83 ec 0c             	sub    esp,0xc
c000cae3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000cae6:	e8 d9 ff ff ff       	call   c000cac4 <Device::hibernateAll()>
c000caeb:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000caed:	eb e9                	jmp    c000cad8 <Device::hibernateAll()+0x14>
c000caef:	83 c4 08             	add    esp,0x8
c000caf2:	5b                   	pop    ebx
c000caf3:	c3                   	ret    

c000caf4 <Device::wakeAll()>:
c000caf4:	53                   	push   ebx
c000caf5:	83 ec 14             	sub    esp,0x14
c000caf8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000cafc:	8b 03                	mov    eax,DWORD PTR [ebx]
c000cafe:	53                   	push   ebx
c000caff:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000cb02:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000cb08:	83 c4 10             	add    esp,0x10
c000cb0b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000cb0e:	74 0f                	je     c000cb1f <Device::wakeAll()+0x2b>
c000cb10:	83 ec 0c             	sub    esp,0xc
c000cb13:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000cb16:	e8 d9 ff ff ff       	call   c000caf4 <Device::wakeAll()>
c000cb1b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000cb1d:	eb e9                	jmp    c000cb08 <Device::wakeAll()+0x14>
c000cb1f:	83 c4 08             	add    esp,0x8
c000cb22:	5b                   	pop    ebx
c000cb23:	c3                   	ret    

c000cb24 <Device::detectAll()>:
c000cb24:	53                   	push   ebx
c000cb25:	83 ec 14             	sub    esp,0x14
c000cb28:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000cb2c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000cb2e:	53                   	push   ebx
c000cb2f:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000cb32:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000cb38:	83 c4 10             	add    esp,0x10
c000cb3b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000cb3e:	74 0f                	je     c000cb4f <Device::detectAll()+0x2b>
c000cb40:	83 ec 0c             	sub    esp,0xc
c000cb43:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000cb46:	e8 d9 ff ff ff       	call   c000cb24 <Device::detectAll()>
c000cb4b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000cb4d:	eb e9                	jmp    c000cb38 <Device::detectAll()+0x14>
c000cb4f:	83 c4 08             	add    esp,0x8
c000cb52:	5b                   	pop    ebx
c000cb53:	c3                   	ret    

c000cb54 <Device::disableLegacyAll()>:
c000cb54:	c3                   	ret    
c000cb55:	90                   	nop

c000cb56 <Device::loadDriversForAll()>:
c000cb56:	c3                   	ret    
c000cb57:	90                   	nop

c000cb58 <Device::closeAll()>:
c000cb58:	53                   	push   ebx
c000cb59:	83 ec 08             	sub    esp,0x8
c000cb5c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cb60:	8b 03                	mov    eax,DWORD PTR [ebx]
c000cb62:	6a 00                	push   0x0
c000cb64:	6a 00                	push   0x0
c000cb66:	6a 00                	push   0x0
c000cb68:	53                   	push   ebx
c000cb69:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000cb6c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000cb72:	83 c4 10             	add    esp,0x10
c000cb75:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000cb78:	74 0f                	je     c000cb89 <Device::closeAll()+0x31>
c000cb7a:	83 ec 0c             	sub    esp,0xc
c000cb7d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000cb80:	e8 d3 ff ff ff       	call   c000cb58 <Device::closeAll()>
c000cb85:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000cb87:	eb e9                	jmp    c000cb72 <Device::closeAll()+0x1a>
c000cb89:	83 c4 08             	add    esp,0x8
c000cb8c:	5b                   	pop    ebx
c000cb8d:	c3                   	ret    

c000cb8e <Device::powerSavingAll(PowerSavingLevel)>:
c000cb8e:	56                   	push   esi
c000cb8f:	53                   	push   ebx
c000cb90:	83 ec 0c             	sub    esp,0xc
c000cb93:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000cb97:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000cb9b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000cb9d:	56                   	push   esi
c000cb9e:	53                   	push   ebx
c000cb9f:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000cba2:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000cba8:	83 c4 10             	add    esp,0x10
c000cbab:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000cbae:	74 0f                	je     c000cbbf <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000cbb0:	52                   	push   edx
c000cbb1:	52                   	push   edx
c000cbb2:	56                   	push   esi
c000cbb3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000cbb6:	e8 d3 ff ff ff       	call   c000cb8e <Device::powerSavingAll(PowerSavingLevel)>
c000cbbb:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000cbbd:	eb e9                	jmp    c000cba8 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000cbbf:	58                   	pop    eax
c000cbc0:	5b                   	pop    ebx
c000cbc1:	5e                   	pop    esi
c000cbc2:	c3                   	ret    
c000cbc3:	90                   	nop

c000cbc4 <Device::setName(char const*)>:
c000cbc4:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000cbcc:	e9 6f 3a ff ff       	jmp    c0000640 <strcpy>
c000cbd1:	90                   	nop

c000cbd2 <Device::Device(char const*)>:
c000cbd2:	83 ec 1c             	sub    esp,0x1c
c000cbd5:	ba d0 1b 02 c0       	mov    edx,0xc0021bd0
c000cbda:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cbde:	89 10                	mov    DWORD PTR [eax],edx
c000cbe0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cbe4:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000cbee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cbf2:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000cbfc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cc00:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000cc0a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cc0e:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000cc18:	83 ec 08             	sub    esp,0x8
c000cc1b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc1f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc23:	e8 9c ff ff ff       	call   c000cbc4 <Device::setName(char const*)>
c000cc28:	83 c4 10             	add    esp,0x10
c000cc2b:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000cc33:	83 ec 0c             	sub    esp,0xc
c000cc36:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cc3a:	e8 77 ae ff ff       	call   c0007ab6 <malloc>
c000cc3f:	83 c4 10             	add    esp,0x10
c000cc42:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000cc48:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000cc4f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000cc53:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000cc59:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cc5d:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000cc63:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000cc69:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cc6d:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000cc73:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000cc7a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cc7e:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000cc85:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cc89:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000cc90:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cc94:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000cc9e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cca2:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000ccac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ccb0:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000ccba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ccbe:	c7 80 10 01 00 00 14 00 00 00 	mov    DWORD PTR [eax+0x110],0x14
c000ccc8:	90                   	nop
c000ccc9:	83 c4 1c             	add    esp,0x1c
c000cccc:	c3                   	ret    
c000cccd:	90                   	nop

c000ccce <Device::getName()>:
c000ccce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ccd2:	05 d0 00 00 00       	add    eax,0xd0
c000ccd7:	c3                   	ret    

c000ccd8 <DriverlessDevice::DriverlessDevice(char const*)>:
c000ccd8:	83 ec 0c             	sub    esp,0xc
c000ccdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ccdf:	83 ec 08             	sub    esp,0x8
c000cce2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cce6:	50                   	push   eax
c000cce7:	e8 e6 fe ff ff       	call   c000cbd2 <Device::Device(char const*)>
c000ccec:	83 c4 10             	add    esp,0x10
c000ccef:	ba fc 1b 02 c0       	mov    edx,0xc0021bfc
c000ccf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ccf8:	89 10                	mov    DWORD PTR [eax],edx
c000ccfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ccfe:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000cd08:	90                   	nop
c000cd09:	83 c4 0c             	add    esp,0xc
c000cd0c:	c3                   	ret    
c000cd0d:	90                   	nop

c000cd0e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000cd0e:	57                   	push   edi
c000cd0f:	56                   	push   esi
c000cd10:	53                   	push   ebx
c000cd11:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cd15:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000cd19:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000cd1d:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000cd23:	75 0c                	jne    c000cd31 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000cd25:	52                   	push   edx
c000cd26:	52                   	push   edx
c000cd27:	53                   	push   ebx
c000cd28:	56                   	push   esi
c000cd29:	e8 14 2f 01 00       	call   c001fc42 <LinkedList<Device>::addElement(Device*)>
c000cd2e:	83 c4 10             	add    esp,0x10
c000cd31:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000cd37:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000cd3a:	74 12                	je     c000cd4e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000cd3c:	50                   	push   eax
c000cd3d:	57                   	push   edi
c000cd3e:	56                   	push   esi
c000cd3f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000cd42:	e8 c7 ff ff ff       	call   c000cd0e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000cd47:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000cd49:	83 c4 10             	add    esp,0x10
c000cd4c:	eb e9                	jmp    c000cd37 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000cd4e:	5b                   	pop    ebx
c000cd4f:	5e                   	pop    esi
c000cd50:	5f                   	pop    edi
c000cd51:	c3                   	ret    

c000cd52 <getDevicesOfType(DeviceType)>:
c000cd52:	53                   	push   ebx
c000cd53:	83 ec 14             	sub    esp,0x14
c000cd56:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000cd5a:	53                   	push   ebx
c000cd5b:	e8 be 2f 01 00       	call   c001fd1e <LinkedList<Device>::LinkedList()>
c000cd60:	83 c4 0c             	add    esp,0xc
c000cd63:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cd67:	53                   	push   ebx
c000cd68:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c000cd6e:	e8 9b ff ff ff       	call   c000cd0e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000cd73:	89 d8                	mov    eax,ebx
c000cd75:	83 c4 18             	add    esp,0x18
c000cd78:	5b                   	pop    ebx
c000cd79:	c2 04 00             	ret    0x4

c000cd7c <HardDiskController::HardDiskController(char const*)>:
c000cd7c:	83 ec 0c             	sub    esp,0xc
c000cd7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd83:	83 ec 08             	sub    esp,0x8
c000cd86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd8a:	50                   	push   eax
c000cd8b:	e8 42 fe ff ff       	call   c000cbd2 <Device::Device(char const*)>
c000cd90:	83 c4 10             	add    esp,0x10
c000cd93:	ba 28 1c 02 c0       	mov    edx,0xc0021c28
c000cd98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd9c:	89 10                	mov    DWORD PTR [eax],edx
c000cd9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cda2:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000cdac:	90                   	nop
c000cdad:	83 c4 0c             	add    esp,0xc
c000cdb0:	c3                   	ret    
c000cdb1:	90                   	nop
c000cdb2:	66 90                	xchg   ax,ax

c000cdb4 <HardDiskController::~HardDiskController()>:
c000cdb4:	83 ec 0c             	sub    esp,0xc
c000cdb7:	ba 28 1c 02 c0       	mov    edx,0xc0021c28
c000cdbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cdc0:	89 10                	mov    DWORD PTR [eax],edx
c000cdc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cdc6:	83 ec 0c             	sub    esp,0xc
c000cdc9:	50                   	push   eax
c000cdca:	e8 6d fb ff ff       	call   c000c93c <Device::~Device()>
c000cdcf:	83 c4 10             	add    esp,0x10
c000cdd2:	90                   	nop
c000cdd3:	83 c4 0c             	add    esp,0xc
c000cdd6:	c3                   	ret    
c000cdd7:	90                   	nop

c000cdd8 <HardDiskController::~HardDiskController()>:
c000cdd8:	83 ec 0c             	sub    esp,0xc
c000cddb:	83 ec 0c             	sub    esp,0xc
c000cdde:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cde2:	e8 cd ff ff ff       	call   c000cdb4 <HardDiskController::~HardDiskController()>
c000cde7:	83 c4 10             	add    esp,0x10
c000cdea:	83 ec 08             	sub    esp,0x8
c000cded:	68 58 01 00 00       	push   0x158
c000cdf2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cdf6:	e8 1d da ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000cdfb:	83 c4 10             	add    esp,0x10
c000cdfe:	83 c4 0c             	add    esp,0xc
c000ce01:	c3                   	ret    

c000ce02 <PhysicalDisk::eject()>:
c000ce02:	83 c8 ff             	or     eax,0xffffffff
c000ce05:	c3                   	ret    

c000ce06 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000ce06:	83 ec 0c             	sub    esp,0xc
c000ce09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce0d:	83 ec 08             	sub    esp,0x8
c000ce10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce14:	50                   	push   eax
c000ce15:	e8 b8 fd ff ff       	call   c000cbd2 <Device::Device(char const*)>
c000ce1a:	83 c4 10             	add    esp,0x10
c000ce1d:	ba 54 1c 02 c0       	mov    edx,0xc0021c54
c000ce22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce26:	89 10                	mov    DWORD PTR [eax],edx
c000ce28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce2c:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000ce33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce37:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000ce3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce42:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000ce4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce50:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ce54:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000ce5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce5e:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000ce68:	90                   	nop
c000ce69:	83 c4 0c             	add    esp,0xc
c000ce6c:	c3                   	ret    
c000ce6d:	90                   	nop

c000ce6e <PhysicalDisk::startCache()>:
c000ce6e:	56                   	push   esi
c000ce6f:	53                   	push   ebx
c000ce70:	83 ec 10             	sub    esp,0x10
c000ce73:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ce77:	6a 44                	push   0x44
c000ce79:	e8 38 ac ff ff       	call   c0007ab6 <malloc>
c000ce7e:	89 c6                	mov    esi,eax
c000ce80:	58                   	pop    eax
c000ce81:	5a                   	pop    edx
c000ce82:	53                   	push   ebx
c000ce83:	56                   	push   esi
c000ce84:	e8 7b 17 00 00       	call   c000e604 <VCache::VCache(PhysicalDisk*)>
c000ce89:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000ce8f:	83 c4 14             	add    esp,0x14
c000ce92:	5b                   	pop    ebx
c000ce93:	5e                   	pop    esi
c000ce94:	c3                   	ret    
c000ce95:	90                   	nop

c000ce96 <PhysicalDisk::~PhysicalDisk()>:
c000ce96:	83 ec 0c             	sub    esp,0xc
c000ce99:	ba 54 1c 02 c0       	mov    edx,0xc0021c54
c000ce9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cea2:	89 10                	mov    DWORD PTR [eax],edx
c000cea4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cea8:	83 ec 0c             	sub    esp,0xc
c000ceab:	50                   	push   eax
c000ceac:	e8 8b fa ff ff       	call   c000c93c <Device::~Device()>
c000ceb1:	83 c4 10             	add    esp,0x10
c000ceb4:	90                   	nop
c000ceb5:	83 c4 0c             	add    esp,0xc
c000ceb8:	c3                   	ret    
c000ceb9:	90                   	nop

c000ceba <PhysicalDisk::~PhysicalDisk()>:
c000ceba:	83 ec 0c             	sub    esp,0xc
c000cebd:	83 ec 0c             	sub    esp,0xc
c000cec0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cec4:	e8 cd ff ff ff       	call   c000ce96 <PhysicalDisk::~PhysicalDisk()>
c000cec9:	83 c4 10             	add    esp,0x10
c000cecc:	83 ec 08             	sub    esp,0x8
c000cecf:	68 6c 01 00 00       	push   0x16c
c000ced4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ced8:	e8 3b d9 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000cedd:	83 c4 10             	add    esp,0x10
c000cee0:	83 c4 0c             	add    esp,0xc
c000cee3:	c3                   	ret    

c000cee4 <int_handler>:
c000cee4:	55                   	push   ebp
c000cee5:	57                   	push   edi
c000cee6:	56                   	push   esi
c000cee7:	53                   	push   ebx
c000cee8:	83 ec 0c             	sub    esp,0xc
c000ceeb:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000ceef:	80 3d 88 be 02 c0 00 	cmp    BYTE PTR ds:0xc002be88,0x0
c000cef6:	74 0b                	je     c000cf03 <int_handler+0x1f>
c000cef8:	fa                   	cli    
c000cef9:	f4                   	hlt    
c000cefa:	80 3d 88 be 02 c0 00 	cmp    BYTE PTR ds:0xc002be88,0x0
c000cf01:	75 f5                	jne    c000cef8 <int_handler+0x14>
c000cf03:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c000cf06:	8d 46 e0             	lea    eax,[esi-0x20]
c000cf09:	83 f8 17             	cmp    eax,0x17
c000cf0c:	76 40                	jbe    c000cf4e <int_handler+0x6a>
c000cf0e:	c1 e6 04             	shl    esi,0x4
c000cf11:	31 db                	xor    ebx,ebx
c000cf13:	8d ae 20 a4 02 c0    	lea    ebp,[esi-0x3ffd5be0]
c000cf19:	81 c6 20 94 02 c0    	add    esi,0xc0029420
c000cf1f:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000cf23:	85 c0                	test   eax,eax
c000cf25:	74 13                	je     c000cf3a <int_handler+0x56>
c000cf27:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c000cf2a:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c000cf2e:	74 2c                	je     c000cf5c <int_handler+0x78>
c000cf30:	83 ec 08             	sub    esp,0x8
c000cf33:	52                   	push   edx
c000cf34:	57                   	push   edi
c000cf35:	ff d0                	call   eax
c000cf37:	83 c4 10             	add    esp,0x10
c000cf3a:	83 c3 01             	add    ebx,0x1
c000cf3d:	83 fb 04             	cmp    ebx,0x4
c000cf40:	75 dd                	jne    c000cf1f <int_handler+0x3b>
c000cf42:	83 c4 0c             	add    esp,0xc
c000cf45:	31 c0                	xor    eax,eax
c000cf47:	5b                   	pop    ebx
c000cf48:	31 d2                	xor    edx,edx
c000cf4a:	5e                   	pop    esi
c000cf4b:	5f                   	pop    edi
c000cf4c:	5d                   	pop    ebp
c000cf4d:	c3                   	ret    
c000cf4e:	83 ec 0c             	sub    esp,0xc
c000cf51:	50                   	push   eax
c000cf52:	e8 89 b4 00 00       	call   c00183e0 <HalEndOfInterrupt(int)>
c000cf57:	83 c4 10             	add    esp,0x10
c000cf5a:	eb b2                	jmp    c000cf0e <int_handler+0x2a>
c000cf5c:	83 ec 08             	sub    esp,0x8
c000cf5f:	52                   	push   edx
c000cf60:	57                   	push   edi
c000cf61:	ff d0                	call   eax
c000cf63:	83 c4 10             	add    esp,0x10
c000cf66:	83 c4 0c             	add    esp,0xc
c000cf69:	5b                   	pop    ebx
c000cf6a:	5e                   	pop    esi
c000cf6b:	5f                   	pop    edi
c000cf6c:	5d                   	pop    ebp
c000cf6d:	c3                   	ret    

c000cf6e <installISRHandler(int, void (*)(regs*, void*), void*)>:
c000cf6e:	56                   	push   esi
c000cf6f:	31 c0                	xor    eax,eax
c000cf71:	53                   	push   ebx
c000cf72:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000cf76:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cf7a:	89 ca                	mov    edx,ecx
c000cf7c:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000cf80:	c1 e2 04             	shl    edx,0x4
c000cf83:	83 bc 82 20 a4 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffd5be0],0x0
c000cf8b:	74 17                	je     c000cfa4 <installISRHandler(int, void (*)(regs*, void*), void*)+0x36>
c000cf8d:	83 c0 01             	add    eax,0x1
c000cf90:	83 f8 04             	cmp    eax,0x4
c000cf93:	75 ee                	jne    c000cf83 <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c000cf95:	c7 44 24 0c 84 1c 02 c0 	mov    DWORD PTR [esp+0xc],0xc0021c84
c000cf9d:	5b                   	pop    ebx
c000cf9e:	5e                   	pop    esi
c000cf9f:	e9 ef 46 00 00       	jmp    c0011693 <KePanic(char const*)>
c000cfa4:	8d 04 88             	lea    eax,[eax+ecx*4]
c000cfa7:	89 1c 85 20 a4 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5be0],ebx
c000cfae:	89 34 85 20 94 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6be0],esi
c000cfb5:	5b                   	pop    ebx
c000cfb6:	5e                   	pop    esi
c000cfb7:	c3                   	ret    

c000cfb8 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000cfb8:	57                   	push   edi
c000cfb9:	8b 15 b8 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026eb8
c000cfbf:	56                   	push   esi
c000cfc0:	53                   	push   ebx
c000cfc1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000cfc5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000cfc9:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000cfd0:	74 54                	je     c000d026 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x6e>
c000cfd2:	89 c7                	mov    edi,eax
c000cfd4:	84 c0                	test   al,al
c000cfd6:	74 1d                	je     c000cff5 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3d>
c000cfd8:	83 fe 0f             	cmp    esi,0xf
c000cfdb:	0f 8f d5 00 00 00    	jg     c000d0b6 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xfe>
c000cfe1:	0f b6 b6 88 37 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffdc878]
c000cfe8:	0f b7 bc 36 c0 bb 02 c0 	movzx  edi,WORD PTR [esi+esi*1-0x3ffd4440]
c000cff0:	d1 ef                	shr    edi,1
c000cff2:	83 e7 01             	and    edi,0x1
c000cff5:	83 ec 08             	sub    esp,0x8
c000cff8:	a1 c0 d0 02 c0       	mov    eax,ds:0xc002d0c0
c000cffd:	31 db                	xor    ebx,ebx
c000cfff:	50                   	push   eax
c000d000:	68 91 1c 02 c0       	push   0xc0021c91
c000d005:	e8 3b d9 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000d00a:	83 c4 10             	add    esp,0x10
c000d00d:	a1 c0 d0 02 c0       	mov    eax,ds:0xc002d0c0
c000d012:	85 c0                	test   eax,eax
c000d014:	7f 55                	jg     c000d06b <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb3>
c000d016:	83 ec 0c             	sub    esp,0xc
c000d019:	68 a8 1c 02 c0       	push   0xc0021ca8
c000d01e:	e8 70 46 00 00       	call   c0011693 <KePanic(char const*)>
c000d023:	83 c4 10             	add    esp,0x10
c000d026:	8d 7e 20             	lea    edi,[esi+0x20]
c000d029:	89 f8                	mov    eax,edi
c000d02b:	31 d2                	xor    edx,edx
c000d02d:	c1 e0 04             	shl    eax,0x4
c000d030:	8b 8c 90 20 a4 02 c0 	mov    ecx,DWORD PTR [eax+edx*4-0x3ffd5be0]
c000d037:	85 c9                	test   ecx,ecx
c000d039:	0f 84 8e 00 00 00    	je     c000d0cd <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x115>
c000d03f:	83 c2 01             	add    edx,0x1
c000d042:	83 fa 04             	cmp    edx,0x4
c000d045:	75 e9                	jne    c000d030 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x78>
c000d047:	83 ec 0c             	sub    esp,0xc
c000d04a:	68 fc 1c 02 c0       	push   0xc0021cfc
c000d04f:	e8 3f 46 00 00       	call   c0011693 <KePanic(char const*)>
c000d054:	83 c4 10             	add    esp,0x10
c000d057:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000d05c:	5b                   	pop    ebx
c000d05d:	5e                   	pop    esi
c000d05e:	5f                   	pop    edi
c000d05f:	c3                   	ret    
c000d060:	83 c3 01             	add    ebx,0x1
c000d063:	39 1d c0 d0 02 c0    	cmp    DWORD PTR ds:0xc002d0c0,ebx
c000d069:	7e ab                	jle    c000d016 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x5e>
c000d06b:	83 ec 08             	sub    esp,0x8
c000d06e:	8b 04 9d e0 d0 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd2f20]
c000d075:	56                   	push   esi
c000d076:	50                   	push   eax
c000d077:	e8 ee 1a 01 00       	call   c001eb6a <IOAPIC::handlesGSIWithNumber(unsigned int)>
c000d07c:	83 c4 10             	add    esp,0x10
c000d07f:	84 c0                	test   al,al
c000d081:	74 dd                	je     c000d060 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xa8>
c000d083:	83 ec 04             	sub    esp,0x4
c000d086:	89 f8                	mov    eax,edi
c000d088:	8b 1c 9d e0 d0 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd2f20]
c000d08f:	0f b6 f8             	movzx  edi,al
c000d092:	57                   	push   edi
c000d093:	8d 7e 20             	lea    edi,[esi+0x20]
c000d096:	6a 00                	push   0x0
c000d098:	89 f8                	mov    eax,edi
c000d09a:	0f b6 c0             	movzx  eax,al
c000d09d:	50                   	push   eax
c000d09e:	89 f0                	mov    eax,esi
c000d0a0:	6a 00                	push   0x0
c000d0a2:	0f b6 c0             	movzx  eax,al
c000d0a5:	6a 00                	push   0x0
c000d0a7:	50                   	push   eax
c000d0a8:	53                   	push   ebx
c000d0a9:	e8 28 1c 01 00       	call   c001ecd6 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c000d0ae:	83 c4 20             	add    esp,0x20
c000d0b1:	e9 73 ff ff ff       	jmp    c000d029 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x71>
c000d0b6:	83 ec 0c             	sub    esp,0xc
c000d0b9:	31 ff                	xor    edi,edi
c000d0bb:	68 c4 1c 02 c0       	push   0xc0021cc4
c000d0c0:	e8 ce 45 00 00       	call   c0011693 <KePanic(char const*)>
c000d0c5:	83 c4 10             	add    esp,0x10
c000d0c8:	e9 28 ff ff ff       	jmp    c000cff5 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3d>
c000d0cd:	8d 04 ba             	lea    eax,[edx+edi*4]
c000d0d0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d0d4:	89 14 85 20 a4 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5be0],edx
c000d0db:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d0df:	5b                   	pop    ebx
c000d0e0:	89 14 85 20 94 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6be0],edx
c000d0e7:	89 f0                	mov    eax,esi
c000d0e9:	5e                   	pop    esi
c000d0ea:	5f                   	pop    edi
c000d0eb:	c3                   	ret    

c000d0ec <uninstallISRHandler(int, void (*)(regs*, void*))>:
c000d0ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d0f0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d0f4:	c1 e0 04             	shl    eax,0x4
c000d0f7:	8d 50 10             	lea    edx,[eax+0x10]
c000d0fa:	39 88 20 a4 02 c0    	cmp    DWORD PTR [eax-0x3ffd5be0],ecx
c000d100:	74 08                	je     c000d10a <uninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c000d102:	83 c0 04             	add    eax,0x4
c000d105:	39 d0                	cmp    eax,edx
c000d107:	75 f1                	jne    c000d0fa <uninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c000d109:	c3                   	ret    
c000d10a:	c7 80 20 a4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5be0],0x0
c000d114:	c7 80 20 94 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6be0],0x0
c000d11e:	eb e2                	jmp    c000d102 <uninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c000d120 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000d120:	53                   	push   ebx
c000d121:	83 ec 08             	sub    esp,0x8
c000d124:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000d128:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000d12d:	74 0e                	je     c000d13d <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000d12f:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000d134:	f6 80 6c 01 00 00 01 	test   BYTE PTR [eax+0x16c],0x1
c000d13b:	75 37                	jne    c000d174 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x54>
c000d13d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d141:	83 c0 20             	add    eax,0x20
c000d144:	c1 e0 04             	shl    eax,0x4
c000d147:	8d 50 10             	lea    edx,[eax+0x10]
c000d14a:	39 98 20 a4 02 c0    	cmp    DWORD PTR [eax-0x3ffd5be0],ebx
c000d150:	74 0c                	je     c000d15e <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x3e>
c000d152:	83 c0 04             	add    eax,0x4
c000d155:	39 d0                	cmp    eax,edx
c000d157:	75 f1                	jne    c000d14a <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2a>
c000d159:	83 c4 08             	add    esp,0x8
c000d15c:	5b                   	pop    ebx
c000d15d:	c3                   	ret    
c000d15e:	c7 80 20 a4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5be0],0x0
c000d168:	c7 80 20 94 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6be0],0x0
c000d172:	eb de                	jmp    c000d152 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x32>
c000d174:	83 7c 24 10 0f       	cmp    DWORD PTR [esp+0x10],0xf
c000d179:	7f 11                	jg     c000d18c <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x6c>
c000d17b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d17f:	0f b6 80 88 37 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdc878]
c000d186:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d18a:	eb b1                	jmp    c000d13d <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000d18c:	83 ec 0c             	sub    esp,0xc
c000d18f:	68 b5 1c 02 c0       	push   0xc0021cb5
c000d194:	e8 fa 44 00 00       	call   c0011693 <KePanic(char const*)>
c000d199:	83 c4 10             	add    esp,0x10
c000d19c:	eb 9f                	jmp    c000d13d <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>

c000d19e <setupINTS()>:
c000d19e:	31 c0                	xor    eax,eax
c000d1a0:	c7 80 20 a4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5be0],0x0
c000d1aa:	c7 80 20 94 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6be0],0x0
c000d1b4:	c7 80 24 a4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5bdc],0x0
c000d1be:	c7 80 24 94 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6bdc],0x0
c000d1c8:	c7 80 28 a4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5bd8],0x0
c000d1d2:	c7 80 28 94 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6bd8],0x0
c000d1dc:	c7 80 2c a4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5bd4],0x0
c000d1e6:	c7 80 2c 94 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6bd4],0x0
c000d1f0:	83 c0 10             	add    eax,0x10
c000d1f3:	3d 00 10 00 00       	cmp    eax,0x1000
c000d1f8:	75 a6                	jne    c000d1a0 <setupINTS()+0x2>
c000d1fa:	c3                   	ret    

c000d1fb <convertLegacyIRQNumber(int)>:
c000d1fb:	83 ec 0c             	sub    esp,0xc
c000d1fe:	8b 15 b8 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026eb8
c000d204:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d208:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000d20f:	74 0c                	je     c000d21d <convertLegacyIRQNumber(int)+0x22>
c000d211:	83 f8 0f             	cmp    eax,0xf
c000d214:	7f 0b                	jg     c000d221 <convertLegacyIRQNumber(int)+0x26>
c000d216:	0f b6 80 88 37 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdc878]
c000d21d:	83 c4 0c             	add    esp,0xc
c000d220:	c3                   	ret    
c000d221:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d225:	83 ec 0c             	sub    esp,0xc
c000d228:	68 c4 1c 02 c0       	push   0xc0021cc4
c000d22d:	e8 61 44 00 00       	call   c0011693 <KePanic(char const*)>
c000d232:	83 c4 10             	add    esp,0x10
c000d235:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d239:	83 c4 0c             	add    esp,0xc
c000d23c:	c3                   	ret    
c000d23d:	90                   	nop

c000d23e <startGUI(void*)>:
c000d23e:	55                   	push   ebp
c000d23f:	89 e5                	mov    ebp,esp
c000d241:	53                   	push   ebx
c000d242:	83 ec 04             	sub    esp,0x4
c000d245:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d24a:	83 e8 01             	sub    eax,0x1
c000d24d:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000d252:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d257:	85 c0                	test   eax,eax
c000d259:	75 01                	jne    c000d25c <startGUI(void*)+0x1e>
c000d25b:	fb                   	sti    
c000d25c:	8b 1d b8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb8
c000d262:	83 ec 08             	sub    esp,0x8
c000d265:	6a 01                	push   0x1
c000d267:	68 21 1d 02 c0       	push   0xc0021d21
c000d26c:	e8 46 84 00 00       	call   c00156b7 <Thr::loadDLL(char const*, bool)>
c000d271:	83 c4 10             	add    esp,0x10
c000d274:	83 ec 08             	sub    esp,0x8
c000d277:	53                   	push   ebx
c000d278:	50                   	push   eax
c000d279:	e8 6a 86 00 00       	call   c00158e8 <Thr::executeDLL(unsigned long, void*)>
c000d27e:	83 c4 10             	add    esp,0x10
c000d281:	8b 1d b8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb8
c000d287:	83 ec 08             	sub    esp,0x8
c000d28a:	6a 01                	push   0x1
c000d28c:	68 3b 1d 02 c0       	push   0xc0021d3b
c000d291:	e8 21 84 00 00       	call   c00156b7 <Thr::loadDLL(char const*, bool)>
c000d296:	83 c4 10             	add    esp,0x10
c000d299:	83 ec 08             	sub    esp,0x8
c000d29c:	53                   	push   ebx
c000d29d:	50                   	push   eax
c000d29e:	e8 45 86 00 00       	call   c00158e8 <Thr::executeDLL(unsigned long, void*)>
c000d2a3:	83 c4 10             	add    esp,0x10
c000d2a6:	90                   	nop
c000d2a7:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000d2aa:	c9                   	leave  
c000d2ab:	c3                   	ret    

c000d2ac <startGUIVESA(void*)>:
c000d2ac:	55                   	push   ebp
c000d2ad:	89 e5                	mov    ebp,esp
c000d2af:	53                   	push   ebx
c000d2b0:	83 ec 04             	sub    esp,0x4
c000d2b3:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d2b8:	83 e8 01             	sub    eax,0x1
c000d2bb:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000d2c0:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d2c5:	85 c0                	test   eax,eax
c000d2c7:	75 01                	jne    c000d2ca <startGUIVESA(void*)+0x1e>
c000d2c9:	fb                   	sti    
c000d2ca:	8b 1d b8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb8
c000d2d0:	83 ec 08             	sub    esp,0x8
c000d2d3:	6a 01                	push   0x1
c000d2d5:	68 59 1d 02 c0       	push   0xc0021d59
c000d2da:	e8 d8 83 00 00       	call   c00156b7 <Thr::loadDLL(char const*, bool)>
c000d2df:	83 c4 10             	add    esp,0x10
c000d2e2:	83 ec 08             	sub    esp,0x8
c000d2e5:	53                   	push   ebx
c000d2e6:	50                   	push   eax
c000d2e7:	e8 fc 85 00 00       	call   c00158e8 <Thr::executeDLL(unsigned long, void*)>
c000d2ec:	83 c4 10             	add    esp,0x10
c000d2ef:	8b 1d b8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb8
c000d2f5:	83 ec 08             	sub    esp,0x8
c000d2f8:	6a 01                	push   0x1
c000d2fa:	68 3b 1d 02 c0       	push   0xc0021d3b
c000d2ff:	e8 b3 83 00 00       	call   c00156b7 <Thr::loadDLL(char const*, bool)>
c000d304:	83 c4 10             	add    esp,0x10
c000d307:	83 ec 08             	sub    esp,0x8
c000d30a:	53                   	push   ebx
c000d30b:	50                   	push   eax
c000d30c:	e8 d7 85 00 00       	call   c00158e8 <Thr::executeDLL(unsigned long, void*)>
c000d311:	83 c4 10             	add    esp,0x10
c000d314:	90                   	nop
c000d315:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000d318:	c9                   	leave  
c000d319:	c3                   	ret    

c000d31a <sendKeyToTerminal(unsigned char)>:
c000d31a:	55                   	push   ebp
c000d31b:	89 e5                	mov    ebp,esp
c000d31d:	83 ec 28             	sub    esp,0x28
c000d320:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d323:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000d326:	a1 04 6f 02 c0       	mov    eax,ds:0xc0026f04
c000d32b:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c000d32f:	83 ec 08             	sub    esp,0x8
c000d332:	52                   	push   edx
c000d333:	50                   	push   eax
c000d334:	e8 7d ba ff ff       	call   c0008db6 <VgaText::receiveKey(unsigned char)>
c000d339:	83 c4 10             	add    esp,0x10
c000d33c:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000d340:	83 f8 0a             	cmp    eax,0xa
c000d343:	74 16                	je     c000d35b <sendKeyToTerminal(unsigned char)+0x41>
c000d345:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000d349:	83 f8 03             	cmp    eax,0x3
c000d34c:	74 0d                	je     c000d35b <sendKeyToTerminal(unsigned char)+0x41>
c000d34e:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000d352:	83 f8 1c             	cmp    eax,0x1c
c000d355:	0f 85 97 00 00 00    	jne    c000d3f2 <sendKeyToTerminal(unsigned char)+0xd8>
c000d35b:	fa                   	cli    
c000d35c:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d361:	83 c0 01             	add    eax,0x1
c000d364:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000d369:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c000d36e:	83 c0 01             	add    eax,0x1
c000d371:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c000d376:	a1 20 b4 02 c0       	mov    eax,ds:0xc002b420
c000d37b:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000d37e:	c7 05 20 b4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b420,0x0
c000d388:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000d38c:	74 1f                	je     c000d3ad <sendKeyToTerminal(unsigned char)+0x93>
c000d38e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000d391:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000d394:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000d397:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000d39a:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000d39d:	83 ec 0c             	sub    esp,0xc
c000d3a0:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000d3a3:	e8 88 92 00 00       	call   c0016630 <unblockTask(ThreadControlBlock*)>
c000d3a8:	83 c4 10             	add    esp,0x10
c000d3ab:	eb db                	jmp    c000d388 <sendKeyToTerminal(unsigned char)+0x6e>
c000d3ad:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c000d3b2:	83 e8 01             	sub    eax,0x1
c000d3b5:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c000d3ba:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c000d3bf:	85 c0                	test   eax,eax
c000d3c1:	75 18                	jne    c000d3db <sendKeyToTerminal(unsigned char)+0xc1>
c000d3c3:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c000d3c8:	85 c0                	test   eax,eax
c000d3ca:	74 0f                	je     c000d3db <sendKeyToTerminal(unsigned char)+0xc1>
c000d3cc:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c000d3d6:	e8 3d 8d 00 00       	call   c0016118 <schedule()>
c000d3db:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d3e0:	83 e8 01             	sub    eax,0x1
c000d3e3:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000d3e8:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d3ed:	85 c0                	test   eax,eax
c000d3ef:	75 01                	jne    c000d3f2 <sendKeyToTerminal(unsigned char)+0xd8>
c000d3f1:	fb                   	sti    
c000d3f2:	90                   	nop
c000d3f3:	c9                   	leave  
c000d3f4:	c3                   	ret    

c000d3f5 <sendKeyboardToken(KeyboardToken)>:
c000d3f5:	55                   	push   ebp
c000d3f6:	89 e5                	mov    ebp,esp
c000d3f8:	83 ec 18             	sub    esp,0x18
c000d3fb:	e8 e3 42 00 00       	call   c00116e3 <KeUserIOReceived()>
c000d400:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000d403:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d406:	0f b7 c0             	movzx  eax,ax
c000d409:	83 f2 01             	xor    edx,0x1
c000d40c:	88 90 40 b4 02 c0    	mov    BYTE PTR [eax-0x3ffd4bc0],dl
c000d412:	a1 28 b4 02 c0       	mov    eax,ds:0xc002b428
c000d417:	85 c0                	test   eax,eax
c000d419:	74 24                	je     c000d43f <sendKeyboardToken(KeyboardToken)+0x4a>
c000d41b:	8b 0d 28 b4 02 c0    	mov    ecx,DWORD PTR ds:0xc002b428
c000d421:	83 ec 04             	sub    esp,0x4
c000d424:	68 40 b4 02 c0       	push   0xc002b440
c000d429:	83 ec 08             	sub    esp,0x8
c000d42c:	89 e2                	mov    edx,esp
c000d42e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d431:	89 02                	mov    DWORD PTR [edx],eax
c000d433:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000d436:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000d43a:	ff d1                	call   ecx
c000d43c:	83 c4 10             	add    esp,0x10
c000d43f:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000d443:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000d446:	a0 48 b8 02 c0       	mov    al,ds:0xc002b848
c000d44b:	0f b6 d2             	movzx  edx,dl
c000d44e:	0f b6 c0             	movzx  eax,al
c000d451:	39 c2                	cmp    edx,eax
c000d453:	74 1c                	je     c000d471 <sendKeyboardToken(KeyboardToken)+0x7c>
c000d455:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000d458:	a2 48 b8 02 c0       	mov    ds:0xc002b848,al
c000d45d:	a0 48 b8 02 c0       	mov    al,ds:0xc002b848
c000d462:	0f b6 c0             	movzx  eax,al
c000d465:	83 ec 0c             	sub    esp,0xc
c000d468:	50                   	push   eax
c000d469:	e8 94 b0 ff ff       	call   c0008502 <setTerminalScrollLock(bool)>
c000d46e:	83 c4 10             	add    esp,0x10
c000d471:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000d474:	0f b6 c0             	movzx  eax,al
c000d477:	85 c0                	test   eax,eax
c000d479:	0f 84 da 00 00 00    	je     c000d559 <sendKeyboardToken(KeyboardToken)+0x164>
c000d47f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d482:	0f b7 c0             	movzx  eax,ax
c000d485:	3d 18 03 00 00       	cmp    eax,0x318
c000d48a:	75 06                	jne    c000d492 <sendKeyboardToken(KeyboardToken)+0x9d>
c000d48c:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000d492:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d495:	0f b7 c0             	movzx  eax,ax
c000d498:	3d 19 03 00 00       	cmp    eax,0x319
c000d49d:	75 06                	jne    c000d4a5 <sendKeyboardToken(KeyboardToken)+0xb0>
c000d49f:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000d4a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4a8:	0f b7 c0             	movzx  eax,ax
c000d4ab:	3d 1a 03 00 00       	cmp    eax,0x31a
c000d4b0:	75 06                	jne    c000d4b8 <sendKeyboardToken(KeyboardToken)+0xc3>
c000d4b2:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000d4b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4bb:	0f b7 c0             	movzx  eax,ax
c000d4be:	3d 1b 03 00 00       	cmp    eax,0x31b
c000d4c3:	75 06                	jne    c000d4cb <sendKeyboardToken(KeyboardToken)+0xd6>
c000d4c5:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000d4cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4ce:	0f b7 c0             	movzx  eax,ax
c000d4d1:	3d 1c 03 00 00       	cmp    eax,0x31c
c000d4d6:	75 06                	jne    c000d4de <sendKeyboardToken(KeyboardToken)+0xe9>
c000d4d8:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000d4de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4e1:	0f b7 c0             	movzx  eax,ax
c000d4e4:	3d 1d 03 00 00       	cmp    eax,0x31d
c000d4e9:	75 06                	jne    c000d4f1 <sendKeyboardToken(KeyboardToken)+0xfc>
c000d4eb:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000d4f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4f4:	0f b7 c0             	movzx  eax,ax
c000d4f7:	3d 1e 03 00 00       	cmp    eax,0x31e
c000d4fc:	75 06                	jne    c000d504 <sendKeyboardToken(KeyboardToken)+0x10f>
c000d4fe:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000d504:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d507:	0f b7 c0             	movzx  eax,ax
c000d50a:	3d 1f 03 00 00       	cmp    eax,0x31f
c000d50f:	75 06                	jne    c000d517 <sendKeyboardToken(KeyboardToken)+0x122>
c000d511:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000d517:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d51a:	0f b7 c0             	movzx  eax,ax
c000d51d:	3d 20 03 00 00       	cmp    eax,0x320
c000d522:	75 06                	jne    c000d52a <sendKeyboardToken(KeyboardToken)+0x135>
c000d524:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000d52a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d52d:	0f b7 c0             	movzx  eax,ax
c000d530:	3d 21 03 00 00       	cmp    eax,0x321
c000d535:	75 06                	jne    c000d53d <sendKeyboardToken(KeyboardToken)+0x148>
c000d537:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000d53d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d540:	0f b7 c0             	movzx  eax,ax
c000d543:	3d 22 03 00 00       	cmp    eax,0x322
c000d548:	0f 85 f1 00 00 00    	jne    c000d63f <sendKeyboardToken(KeyboardToken)+0x24a>
c000d54e:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000d554:	e9 e6 00 00 00       	jmp    c000d63f <sendKeyboardToken(KeyboardToken)+0x24a>
c000d559:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d55c:	0f b7 c0             	movzx  eax,ax
c000d55f:	3d 18 03 00 00       	cmp    eax,0x318
c000d564:	75 0a                	jne    c000d570 <sendKeyboardToken(KeyboardToken)+0x17b>
c000d566:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000d56c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d570:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d573:	0f b7 c0             	movzx  eax,ax
c000d576:	3d 19 03 00 00       	cmp    eax,0x319
c000d57b:	75 0a                	jne    c000d587 <sendKeyboardToken(KeyboardToken)+0x192>
c000d57d:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000d583:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d587:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d58a:	0f b7 c0             	movzx  eax,ax
c000d58d:	3d 1a 03 00 00       	cmp    eax,0x31a
c000d592:	75 0a                	jne    c000d59e <sendKeyboardToken(KeyboardToken)+0x1a9>
c000d594:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000d59a:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d59e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d5a1:	0f b7 c0             	movzx  eax,ax
c000d5a4:	3d 1b 03 00 00       	cmp    eax,0x31b
c000d5a9:	75 0a                	jne    c000d5b5 <sendKeyboardToken(KeyboardToken)+0x1c0>
c000d5ab:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000d5b1:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d5b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d5b8:	0f b7 c0             	movzx  eax,ax
c000d5bb:	3d 1c 03 00 00       	cmp    eax,0x31c
c000d5c0:	75 0a                	jne    c000d5cc <sendKeyboardToken(KeyboardToken)+0x1d7>
c000d5c2:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000d5c8:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d5cc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d5cf:	0f b7 c0             	movzx  eax,ax
c000d5d2:	3d 1d 03 00 00       	cmp    eax,0x31d
c000d5d7:	75 0a                	jne    c000d5e3 <sendKeyboardToken(KeyboardToken)+0x1ee>
c000d5d9:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000d5df:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d5e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d5e6:	0f b7 c0             	movzx  eax,ax
c000d5e9:	3d 1e 03 00 00       	cmp    eax,0x31e
c000d5ee:	75 0a                	jne    c000d5fa <sendKeyboardToken(KeyboardToken)+0x205>
c000d5f0:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000d5f6:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d5fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d5fd:	0f b7 c0             	movzx  eax,ax
c000d600:	3d 1f 03 00 00       	cmp    eax,0x31f
c000d605:	75 0a                	jne    c000d611 <sendKeyboardToken(KeyboardToken)+0x21c>
c000d607:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000d60d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d611:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d614:	0f b7 c0             	movzx  eax,ax
c000d617:	3d 20 03 00 00       	cmp    eax,0x320
c000d61c:	75 0a                	jne    c000d628 <sendKeyboardToken(KeyboardToken)+0x233>
c000d61e:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000d624:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d628:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d62b:	0f b7 c0             	movzx  eax,ax
c000d62e:	3d 21 03 00 00       	cmp    eax,0x321
c000d633:	75 0a                	jne    c000d63f <sendKeyboardToken(KeyboardToken)+0x24a>
c000d635:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000d63b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d63f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d642:	0f b7 c0             	movzx  eax,ax
c000d645:	3d 00 02 00 00       	cmp    eax,0x200
c000d64a:	75 2f                	jne    c000d67b <sendKeyboardToken(KeyboardToken)+0x286>
c000d64c:	a0 40 b8 02 c0       	mov    al,ds:0xc002b840
c000d651:	83 f0 01             	xor    eax,0x1
c000d654:	0f b6 c0             	movzx  eax,al
c000d657:	85 c0                	test   eax,eax
c000d659:	74 20                	je     c000d67b <sendKeyboardToken(KeyboardToken)+0x286>
c000d65b:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c000d660:	6a 01                	push   0x1
c000d662:	6a 00                	push   0x0
c000d664:	68 3e d2 00 c0       	push   0xc000d23e
c000d669:	50                   	push   eax
c000d66a:	e8 59 88 00 00       	call   c0015ec8 <Process::createThread(void (*)(void*), void*, int)>
c000d66f:	83 c4 10             	add    esp,0x10
c000d672:	c6 05 40 b8 02 c0 01 	mov    BYTE PTR ds:0xc002b840,0x1
c000d679:	eb 3a                	jmp    c000d6b5 <sendKeyboardToken(KeyboardToken)+0x2c0>
c000d67b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d67e:	0f b7 c0             	movzx  eax,ax
c000d681:	3d 01 02 00 00       	cmp    eax,0x201
c000d686:	75 2d                	jne    c000d6b5 <sendKeyboardToken(KeyboardToken)+0x2c0>
c000d688:	a0 40 b8 02 c0       	mov    al,ds:0xc002b840
c000d68d:	83 f0 01             	xor    eax,0x1
c000d690:	0f b6 c0             	movzx  eax,al
c000d693:	85 c0                	test   eax,eax
c000d695:	74 1e                	je     c000d6b5 <sendKeyboardToken(KeyboardToken)+0x2c0>
c000d697:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c000d69c:	6a 01                	push   0x1
c000d69e:	6a 00                	push   0x0
c000d6a0:	68 ac d2 00 c0       	push   0xc000d2ac
c000d6a5:	50                   	push   eax
c000d6a6:	e8 1d 88 00 00       	call   c0015ec8 <Process::createThread(void (*)(void*), void*, int)>
c000d6ab:	83 c4 10             	add    esp,0x10
c000d6ae:	c6 05 40 b8 02 c0 01 	mov    BYTE PTR ds:0xc002b840,0x1
c000d6b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d6b8:	0f b7 c0             	movzx  eax,ax
c000d6bb:	3d 25 03 00 00       	cmp    eax,0x325
c000d6c0:	75 06                	jne    c000d6c8 <sendKeyboardToken(KeyboardToken)+0x2d3>
c000d6c2:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000d6c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d6cb:	0f b7 c0             	movzx  eax,ax
c000d6ce:	3d 24 03 00 00       	cmp    eax,0x324
c000d6d3:	75 06                	jne    c000d6db <sendKeyboardToken(KeyboardToken)+0x2e6>
c000d6d5:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000d6db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d6de:	0f b7 c0             	movzx  eax,ax
c000d6e1:	3d 23 03 00 00       	cmp    eax,0x323
c000d6e6:	75 06                	jne    c000d6ee <sendKeyboardToken(KeyboardToken)+0x2f9>
c000d6e8:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000d6ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d6f1:	0f b7 c0             	movzx  eax,ax
c000d6f4:	3d 26 03 00 00       	cmp    eax,0x326
c000d6f9:	75 06                	jne    c000d701 <sendKeyboardToken(KeyboardToken)+0x30c>
c000d6fb:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000d701:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d704:	0f b7 c0             	movzx  eax,ax
c000d707:	3d 27 03 00 00       	cmp    eax,0x327
c000d70c:	75 06                	jne    c000d714 <sendKeyboardToken(KeyboardToken)+0x31f>
c000d70e:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000d714:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d717:	0f b7 c0             	movzx  eax,ax
c000d71a:	3d 22 03 00 00       	cmp    eax,0x322
c000d71f:	75 06                	jne    c000d727 <sendKeyboardToken(KeyboardToken)+0x332>
c000d721:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000d727:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000d72b:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d72e:	83 f0 01             	xor    eax,0x1
c000d731:	0f b6 c0             	movzx  eax,al
c000d734:	85 c0                	test   eax,eax
c000d736:	74 7c                	je     c000d7b4 <sendKeyboardToken(KeyboardToken)+0x3bf>
c000d738:	a0 41 b5 02 c0       	mov    al,ds:0xc002b541
c000d73d:	0f b6 c0             	movzx  eax,al
c000d740:	85 c0                	test   eax,eax
c000d742:	74 43                	je     c000d787 <sendKeyboardToken(KeyboardToken)+0x392>
c000d744:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000d748:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c000d74c:	85 c0                	test   eax,eax
c000d74e:	74 2b                	je     c000d77b <sendKeyboardToken(KeyboardToken)+0x386>
c000d750:	8b 15 44 b8 02 c0    	mov    edx,DWORD PTR ds:0xc002b844
c000d756:	89 d0                	mov    eax,edx
c000d758:	c1 e0 02             	shl    eax,0x2
c000d75b:	01 d0                	add    eax,edx
c000d75d:	01 c0                	add    eax,eax
c000d75f:	a3 44 b8 02 c0       	mov    ds:0xc002b844,eax
c000d764:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d767:	0f b7 c0             	movzx  eax,ax
c000d76a:	8d 50 d0             	lea    edx,[eax-0x30]
c000d76d:	a1 44 b8 02 c0       	mov    eax,ds:0xc002b844
c000d772:	01 d0                	add    eax,edx
c000d774:	a3 44 b8 02 c0       	mov    ds:0xc002b844,eax
c000d779:	eb 71                	jmp    c000d7ec <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d77b:	c7 05 44 b8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b844,0x0
c000d785:	eb 65                	jmp    c000d7ec <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d787:	a1 44 b8 02 c0       	mov    eax,ds:0xc002b844
c000d78c:	85 c0                	test   eax,eax
c000d78e:	74 18                	je     c000d7a8 <sendKeyboardToken(KeyboardToken)+0x3b3>
c000d790:	a1 44 b8 02 c0       	mov    eax,ds:0xc002b844
c000d795:	0f b6 c0             	movzx  eax,al
c000d798:	83 ec 0c             	sub    esp,0xc
c000d79b:	50                   	push   eax
c000d79c:	e8 79 fb ff ff       	call   c000d31a <sendKeyToTerminal(unsigned char)>
c000d7a1:	83 c4 10             	add    esp,0x10
c000d7a4:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000d7a8:	c7 05 44 b8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b844,0x0
c000d7b2:	eb 38                	jmp    c000d7ec <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d7b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d7b7:	0f b7 c0             	movzx  eax,ax
c000d7ba:	3d 01 01 00 00       	cmp    eax,0x101
c000d7bf:	75 2b                	jne    c000d7ec <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d7c1:	a1 44 b8 02 c0       	mov    eax,ds:0xc002b844
c000d7c6:	85 c0                	test   eax,eax
c000d7c8:	74 18                	je     c000d7e2 <sendKeyboardToken(KeyboardToken)+0x3ed>
c000d7ca:	a1 44 b8 02 c0       	mov    eax,ds:0xc002b844
c000d7cf:	0f b6 c0             	movzx  eax,al
c000d7d2:	83 ec 0c             	sub    esp,0xc
c000d7d5:	50                   	push   eax
c000d7d6:	e8 3f fb ff ff       	call   c000d31a <sendKeyToTerminal(unsigned char)>
c000d7db:	83 c4 10             	add    esp,0x10
c000d7de:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000d7e2:	c7 05 44 b8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b844,0x0
c000d7ec:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000d7ef:	83 f0 01             	xor    eax,0x1
c000d7f2:	0f b6 c0             	movzx  eax,al
c000d7f5:	85 c0                	test   eax,eax
c000d7f7:	74 5a                	je     c000d853 <sendKeyboardToken(KeyboardToken)+0x45e>
c000d7f9:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d7fc:	83 f0 01             	xor    eax,0x1
c000d7ff:	0f b6 c0             	movzx  eax,al
c000d802:	85 c0                	test   eax,eax
c000d804:	74 4d                	je     c000d853 <sendKeyboardToken(KeyboardToken)+0x45e>
c000d806:	a0 40 b5 02 c0       	mov    al,ds:0xc002b540
c000d80b:	83 f0 01             	xor    eax,0x1
c000d80e:	0f b6 c0             	movzx  eax,al
c000d811:	85 c0                	test   eax,eax
c000d813:	74 3e                	je     c000d853 <sendKeyboardToken(KeyboardToken)+0x45e>
c000d815:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d818:	0f b7 c0             	movzx  eax,ax
c000d81b:	83 f8 1f             	cmp    eax,0x1f
c000d81e:	76 0b                	jbe    c000d82b <sendKeyboardToken(KeyboardToken)+0x436>
c000d820:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d823:	0f b7 c0             	movzx  eax,ax
c000d826:	83 f8 7e             	cmp    eax,0x7e
c000d829:	76 16                	jbe    c000d841 <sendKeyboardToken(KeyboardToken)+0x44c>
c000d82b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d82e:	0f b7 c0             	movzx  eax,ax
c000d831:	83 f8 0a             	cmp    eax,0xa
c000d834:	74 0b                	je     c000d841 <sendKeyboardToken(KeyboardToken)+0x44c>
c000d836:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d839:	0f b7 c0             	movzx  eax,ax
c000d83c:	83 f8 08             	cmp    eax,0x8
c000d83f:	75 12                	jne    c000d853 <sendKeyboardToken(KeyboardToken)+0x45e>
c000d841:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d844:	0f b6 c0             	movzx  eax,al
c000d847:	83 ec 0c             	sub    esp,0xc
c000d84a:	50                   	push   eax
c000d84b:	e8 ca fa ff ff       	call   c000d31a <sendKeyToTerminal(unsigned char)>
c000d850:	83 c4 10             	add    esp,0x10
c000d853:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000d856:	83 f0 01             	xor    eax,0x1
c000d859:	0f b6 c0             	movzx  eax,al
c000d85c:	85 c0                	test   eax,eax
c000d85e:	74 5d                	je     c000d8bd <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d860:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d863:	83 f0 01             	xor    eax,0x1
c000d866:	0f b6 c0             	movzx  eax,al
c000d869:	85 c0                	test   eax,eax
c000d86b:	74 50                	je     c000d8bd <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d86d:	a0 40 b5 02 c0       	mov    al,ds:0xc002b540
c000d872:	0f b6 c0             	movzx  eax,al
c000d875:	85 c0                	test   eax,eax
c000d877:	74 44                	je     c000d8bd <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d879:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d87c:	0f b7 c0             	movzx  eax,ax
c000d87f:	83 f8 3f             	cmp    eax,0x3f
c000d882:	76 39                	jbe    c000d8bd <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d884:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d887:	0f b7 c0             	movzx  eax,ax
c000d88a:	83 f8 7f             	cmp    eax,0x7f
c000d88d:	77 2e                	ja     c000d8bd <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d88f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d892:	88 c2                	mov    dl,al
c000d894:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d897:	0f b7 c0             	movzx  eax,ax
c000d89a:	83 f8 5f             	cmp    eax,0x5f
c000d89d:	76 04                	jbe    c000d8a3 <sendKeyboardToken(KeyboardToken)+0x4ae>
c000d89f:	b0 20                	mov    al,0x20
c000d8a1:	eb 02                	jmp    c000d8a5 <sendKeyboardToken(KeyboardToken)+0x4b0>
c000d8a3:	b0 00                	mov    al,0x0
c000d8a5:	89 d1                	mov    ecx,edx
c000d8a7:	29 c1                	sub    ecx,eax
c000d8a9:	89 c8                	mov    eax,ecx
c000d8ab:	83 e8 40             	sub    eax,0x40
c000d8ae:	0f b6 c0             	movzx  eax,al
c000d8b1:	83 ec 0c             	sub    esp,0xc
c000d8b4:	50                   	push   eax
c000d8b5:	e8 60 fa ff ff       	call   c000d31a <sendKeyToTerminal(unsigned char)>
c000d8ba:	83 c4 10             	add    esp,0x10
c000d8bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d8c0:	0f b7 c0             	movzx  eax,ax
c000d8c3:	3d 00 03 00 00       	cmp    eax,0x300
c000d8c8:	75 12                	jne    c000d8dc <sendKeyboardToken(KeyboardToken)+0x4e7>
c000d8ca:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d8cd:	83 f0 01             	xor    eax,0x1
c000d8d0:	0f b6 c0             	movzx  eax,al
c000d8d3:	85 c0                	test   eax,eax
c000d8d5:	74 05                	je     c000d8dc <sendKeyboardToken(KeyboardToken)+0x4e7>
c000d8d7:	e8 27 ac ff ff       	call   c0008503 <doTerminalCycle()>
c000d8dc:	90                   	nop
c000d8dd:	c9                   	leave  
c000d8de:	c3                   	ret    

c000d8df <clearInternalKeybuffer(VgaText*)>:
c000d8df:	55                   	push   ebp
c000d8e0:	89 e5                	mov    ebp,esp
c000d8e2:	83 ec 08             	sub    esp,0x8
c000d8e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d8e8:	05 02 01 00 00       	add    eax,0x102
c000d8ed:	83 ec 0c             	sub    esp,0xc
c000d8f0:	50                   	push   eax
c000d8f1:	e8 7a 2c ff ff       	call   c0000570 <strlen>
c000d8f6:	83 c4 10             	add    esp,0x10
c000d8f9:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d8fc:	81 c2 02 01 00 00    	add    edx,0x102
c000d902:	83 ec 04             	sub    esp,0x4
c000d905:	50                   	push   eax
c000d906:	6a 00                	push   0x0
c000d908:	52                   	push   edx
c000d909:	e8 e2 2b ff ff       	call   c00004f0 <memset>
c000d90e:	83 c4 10             	add    esp,0x10
c000d911:	90                   	nop
c000d912:	c9                   	leave  
c000d913:	c3                   	ret    

c000d914 <readKeyboard(VgaText*, char*, unsigned long)>:
c000d914:	55                   	push   ebp
c000d915:	89 e5                	mov    ebp,esp
c000d917:	83 ec 18             	sub    esp,0x18
c000d91a:	a1 28 b4 02 c0       	mov    eax,ds:0xc002b428
c000d91f:	85 c0                	test   eax,eax
c000d921:	74 2a                	je     c000d94d <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000d923:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000d929:	8b 0d 28 b4 02 c0    	mov    ecx,DWORD PTR ds:0xc002b428
c000d92f:	83 ec 04             	sub    esp,0x4
c000d932:	68 40 b4 02 c0       	push   0xc002b440
c000d937:	83 ec 08             	sub    esp,0x8
c000d93a:	89 e2                	mov    edx,esp
c000d93c:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c000d93f:	89 02                	mov    DWORD PTR [edx],eax
c000d941:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000d944:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000d948:	ff d1                	call   ecx
c000d94a:	83 c4 10             	add    esp,0x10
c000d94d:	fb                   	sti    
c000d94e:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000d955:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000d959:	0f 84 0d 01 00 00    	je     c000da6c <readKeyboard(VgaText*, char*, unsigned long)+0x158>
c000d95f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d962:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000d968:	0f be c0             	movsx  eax,al
c000d96b:	85 c0                	test   eax,eax
c000d96d:	75 2c                	jne    c000d99b <readKeyboard(VgaText*, char*, unsigned long)+0x87>
c000d96f:	fa                   	cli    
c000d970:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d975:	83 c0 01             	add    eax,0x1
c000d978:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000d97d:	e8 96 87 00 00       	call   c0016118 <schedule()>
c000d982:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d987:	83 e8 01             	sub    eax,0x1
c000d98a:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000d98f:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d994:	85 c0                	test   eax,eax
c000d996:	75 c7                	jne    c000d95f <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000d998:	fb                   	sti    
c000d999:	eb c4                	jmp    c000d95f <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000d99b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000d99e:	8d 50 01             	lea    edx,[eax+0x1]
c000d9a1:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d9a4:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d9a7:	8a 92 02 01 00 00    	mov    dl,BYTE PTR [edx+0x102]
c000d9ad:	88 10                	mov    BYTE PTR [eax],dl
c000d9af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d9b2:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000d9b8:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000d9bb:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d9bf:	83 f8 03             	cmp    eax,0x3
c000d9c2:	75 1e                	jne    c000d9e2 <readKeyboard(VgaText*, char*, unsigned long)+0xce>
c000d9c4:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000d9c9:	8b 00                	mov    eax,DWORD PTR [eax]
c000d9cb:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d9ce:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000d9d4:	83 ec 08             	sub    esp,0x8
c000d9d7:	6a 02                	push   0x2
c000d9d9:	50                   	push   eax
c000d9da:	e8 57 41 00 00       	call   c0011b36 <KeRaiseSignal(SigHandlerBlock*, int)>
c000d9df:	83 c4 10             	add    esp,0x10
c000d9e2:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d9e6:	83 f8 1c             	cmp    eax,0x1c
c000d9e9:	75 1e                	jne    c000da09 <readKeyboard(VgaText*, char*, unsigned long)+0xf5>
c000d9eb:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000d9f0:	8b 00                	mov    eax,DWORD PTR [eax]
c000d9f2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d9f5:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000d9fb:	83 ec 08             	sub    esp,0x8
c000d9fe:	6a 09                	push   0x9
c000da00:	50                   	push   eax
c000da01:	e8 30 41 00 00       	call   c0011b36 <KeRaiseSignal(SigHandlerBlock*, int)>
c000da06:	83 c4 10             	add    esp,0x10
c000da09:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000da0c:	05 02 01 00 00       	add    eax,0x102
c000da11:	83 ec 0c             	sub    esp,0xc
c000da14:	50                   	push   eax
c000da15:	e8 56 2b ff ff       	call   c0000570 <strlen>
c000da1a:	83 c4 10             	add    esp,0x10
c000da1d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000da20:	81 c2 02 01 00 00    	add    edx,0x102
c000da26:	8d 4a 01             	lea    ecx,[edx+0x1]
c000da29:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000da2c:	81 c2 02 01 00 00    	add    edx,0x102
c000da32:	83 ec 04             	sub    esp,0x4
c000da35:	50                   	push   eax
c000da36:	51                   	push   ecx
c000da37:	52                   	push   edx
c000da38:	e8 93 29 ff ff       	call   c00003d0 <memmove>
c000da3d:	83 c4 10             	add    esp,0x10
c000da40:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
c000da44:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c000da48:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000da4c:	83 f8 0a             	cmp    eax,0xa
c000da4f:	74 16                	je     c000da67 <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000da51:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000da55:	83 f8 03             	cmp    eax,0x3
c000da58:	74 0d                	je     c000da67 <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000da5a:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000da5e:	83 f8 1c             	cmp    eax,0x1c
c000da61:	0f 85 ee fe ff ff    	jne    c000d955 <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000da67:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000da6a:	eb 03                	jmp    c000da6f <readKeyboard(VgaText*, char*, unsigned long)+0x15b>
c000da6c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000da6f:	c9                   	leave  
c000da70:	c3                   	ret    
c000da71:	90                   	nop

c000da72 <Keyboard::Keyboard(char const*)>:
c000da72:	83 ec 0c             	sub    esp,0xc
c000da75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da79:	83 ec 08             	sub    esp,0x8
c000da7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da80:	50                   	push   eax
c000da81:	e8 4c f1 ff ff       	call   c000cbd2 <Device::Device(char const*)>
c000da86:	83 c4 10             	add    esp,0x10
c000da89:	ba 7c 1d 02 c0       	mov    edx,0xc0021d7c
c000da8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da92:	89 10                	mov    DWORD PTR [eax],edx
c000da94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da98:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000daa2:	c6 05 24 b4 02 c0 01 	mov    BYTE PTR ds:0xc002b424,0x1
c000daa9:	90                   	nop
c000daaa:	83 c4 0c             	add    esp,0xc
c000daad:	c3                   	ret    

c000daae <Keyboard::~Keyboard()>:
c000daae:	83 ec 0c             	sub    esp,0xc
c000dab1:	ba 7c 1d 02 c0       	mov    edx,0xc0021d7c
c000dab6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000daba:	89 10                	mov    DWORD PTR [eax],edx
c000dabc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dac0:	83 ec 0c             	sub    esp,0xc
c000dac3:	50                   	push   eax
c000dac4:	e8 73 ee ff ff       	call   c000c93c <Device::~Device()>
c000dac9:	83 c4 10             	add    esp,0x10
c000dacc:	90                   	nop
c000dacd:	83 c4 0c             	add    esp,0xc
c000dad0:	c3                   	ret    
c000dad1:	90                   	nop

c000dad2 <Keyboard::~Keyboard()>:
c000dad2:	83 ec 0c             	sub    esp,0xc
c000dad5:	83 ec 0c             	sub    esp,0xc
c000dad8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dadc:	e8 cd ff ff ff       	call   c000daae <Keyboard::~Keyboard()>
c000dae1:	83 c4 10             	add    esp,0x10
c000dae4:	83 ec 08             	sub    esp,0x8
c000dae7:	68 5c 01 00 00       	push   0x15c
c000daec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000daf0:	e8 23 cd ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000daf5:	83 c4 10             	add    esp,0x10
c000daf8:	83 c4 0c             	add    esp,0xc
c000dafb:	c3                   	ret    

c000dafc <LogicalDisk::close(int, int, void*)>:
c000dafc:	83 c8 ff             	or     eax,0xffffffff
c000daff:	c3                   	ret    

c000db00 <LogicalDisk::~LogicalDisk()>:
c000db00:	83 ec 0c             	sub    esp,0xc
c000db03:	ba f4 1d 02 c0       	mov    edx,0xc0021df4
c000db08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db0c:	89 10                	mov    DWORD PTR [eax],edx
c000db0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db12:	83 ec 0c             	sub    esp,0xc
c000db15:	50                   	push   eax
c000db16:	e8 21 ee ff ff       	call   c000c93c <Device::~Device()>
c000db1b:	83 c4 10             	add    esp,0x10
c000db1e:	90                   	nop
c000db1f:	83 c4 0c             	add    esp,0xc
c000db22:	c3                   	ret    
c000db23:	90                   	nop

c000db24 <LogicalDisk::~LogicalDisk()>:
c000db24:	83 ec 0c             	sub    esp,0xc
c000db27:	83 ec 0c             	sub    esp,0xc
c000db2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db2e:	e8 cd ff ff ff       	call   c000db00 <LogicalDisk::~LogicalDisk()>
c000db33:	83 c4 10             	add    esp,0x10
c000db36:	83 ec 08             	sub    esp,0x8
c000db39:	68 78 01 00 00       	push   0x178
c000db3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db42:	e8 d1 cc ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000db47:	83 c4 10             	add    esp,0x10
c000db4a:	83 c4 0c             	add    esp,0xc
c000db4d:	c3                   	ret    

c000db4e <LogicalDisk::open(int, int, void*)>:
c000db4e:	83 ec 18             	sub    esp,0x18
c000db51:	68 a8 1d 02 c0       	push   0xc0021da8
c000db56:	e8 38 3b 00 00       	call   c0011693 <KePanic(char const*)>
c000db5b:	83 c8 ff             	or     eax,0xffffffff
c000db5e:	83 c4 1c             	add    esp,0x1c
c000db61:	c3                   	ret    

c000db62 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000db62:	53                   	push   ebx
c000db63:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000db67:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000db6b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000db6f:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000db75:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000db7b:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000db81:	77 10                	ja     c000db93 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000db83:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000db89:	89 d3                	mov    ebx,edx
c000db8b:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000db91:	72 05                	jb     c000db98 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000db93:	83 c8 ff             	or     eax,0xffffffff
c000db96:	89 c2                	mov    edx,eax
c000db98:	5b                   	pop    ebx
c000db99:	c3                   	ret    

c000db9a <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000db9a:	56                   	push   esi
c000db9b:	83 c8 ff             	or     eax,0xffffffff
c000db9e:	53                   	push   ebx
c000db9f:	89 c2                	mov    edx,eax
c000dba1:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000dba5:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000dba9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000dbad:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000dbb3:	77 27                	ja     c000dbdc <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000dbb5:	89 d8                	mov    eax,ebx
c000dbb7:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000dbbd:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000dbc3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000dbc8:	89 c2                	mov    edx,eax
c000dbca:	73 10                	jae    c000dbdc <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000dbcc:	89 c8                	mov    eax,ecx
c000dbce:	89 da                	mov    edx,ebx
c000dbd0:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000dbd6:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000dbdc:	5b                   	pop    ebx
c000dbdd:	5e                   	pop    esi
c000dbde:	c3                   	ret    
c000dbdf:	90                   	nop

c000dbe0 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000dbe0:	83 ec 1c             	sub    esp,0x1c
c000dbe3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000dbe7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dbeb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000dbef:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dbf3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000dbf7:	89 04 24             	mov    DWORD PTR [esp],eax
c000dbfa:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000dbfe:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000dc02:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc06:	83 ec 08             	sub    esp,0x8
c000dc09:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dc0d:	50                   	push   eax
c000dc0e:	e8 bf ef ff ff       	call   c000cbd2 <Device::Device(char const*)>
c000dc13:	83 c4 10             	add    esp,0x10
c000dc16:	ba f4 1d 02 c0       	mov    edx,0xc0021df4
c000dc1b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc1f:	89 10                	mov    DWORD PTR [eax],edx
c000dc21:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc25:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000dc2c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc30:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c000dc37:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc3b:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000dc42:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc46:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000dc50:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000dc54:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000dc58:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000dc5c:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000dc62:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000dc68:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000dc6c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000dc6f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc73:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000dc79:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000dc7f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc83:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000dc87:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000dc8d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc91:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000dc9b:	90                   	nop
c000dc9c:	83 c4 1c             	add    esp,0x1c
c000dc9f:	c3                   	ret    

c000dca0 <LogicalDisk::assignDriveLetter()>:
c000dca0:	55                   	push   ebp
c000dca1:	57                   	push   edi
c000dca2:	56                   	push   esi
c000dca3:	53                   	push   ebx
c000dca4:	83 ec 14             	sub    esp,0x14
c000dca7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000dcab:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000dcb1:	b0 41                	mov    al,0x41
c000dcb3:	8a 93 69 01 00 00    	mov    dl,BYTE PTR [ebx+0x169]
c000dcb9:	84 d2                	test   dl,dl
c000dcbb:	75 02                	jne    c000dcbf <LogicalDisk::assignDriveLetter()+0x1f>
c000dcbd:	b0 43                	mov    al,0x43
c000dcbf:	8b 3d 60 b8 02 c0    	mov    edi,DWORD PTR ds:0xc002b860
c000dcc5:	0f b6 ca             	movzx  ecx,dl
c000dcc8:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c000dccc:	0f be e8             	movsx  ebp,al
c000dccf:	8b 3d 64 b8 02 c0    	mov    edi,DWORD PTR ds:0xc002b864
c000dcd5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000dcd9:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000dcdd:	3c 43                	cmp    al,0x43
c000dcdf:	75 10                	jne    c000dcf1 <LogicalDisk::assignDriveLetter()+0x51>
c000dce1:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000dce8:	75 5a                	jne    c000dd44 <LogicalDisk::assignDriveLetter()+0xa4>
c000dcea:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000dcef:	75 53                	jne    c000dd44 <LogicalDisk::assignDriveLetter()+0xa4>
c000dcf1:	8d 75 bf             	lea    esi,[ebp-0x41]
c000dcf4:	ba 01 00 00 00       	mov    edx,0x1
c000dcf9:	89 34 24             	mov    DWORD PTR [esp],esi
c000dcfc:	8a 0c 24             	mov    cl,BYTE PTR [esp]
c000dcff:	d3 e2                	shl    edx,cl
c000dd01:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000dd05:	89 d7                	mov    edi,edx
c000dd07:	89 d6                	mov    esi,edx
c000dd09:	c1 ff 1f             	sar    edi,0x1f
c000dd0c:	23 54 24 04          	and    edx,DWORD PTR [esp+0x4]
c000dd10:	21 f9                	and    ecx,edi
c000dd12:	09 d1                	or     ecx,edx
c000dd14:	75 2e                	jne    c000dd44 <LogicalDisk::assignDriveLetter()+0xa4>
c000dd16:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000dd1a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dd1e:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000dd24:	09 f2                	or     edx,esi
c000dd26:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000dd29:	89 15 60 b8 02 c0    	mov    DWORD PTR ds:0xc002b860,edx
c000dd2f:	89 1c b5 80 b8 02 c0 	mov    DWORD PTR [esi*4-0x3ffd4780],ebx
c000dd36:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000dd3a:	09 fa                	or     edx,edi
c000dd3c:	89 15 64 b8 02 c0    	mov    DWORD PTR ds:0xc002b864,edx
c000dd42:	eb 0d                	jmp    c000dd51 <LogicalDisk::assignDriveLetter()+0xb1>
c000dd44:	8d 50 01             	lea    edx,[eax+0x1]
c000dd47:	45                   	inc    ebp
c000dd48:	88 d0                	mov    al,dl
c000dd4a:	80 fa 5b             	cmp    dl,0x5b
c000dd4d:	75 8e                	jne    c000dcdd <LogicalDisk::assignDriveLetter()+0x3d>
c000dd4f:	31 c0                	xor    eax,eax
c000dd51:	83 c4 14             	add    esp,0x14
c000dd54:	5b                   	pop    ebx
c000dd55:	5e                   	pop    esi
c000dd56:	5f                   	pop    edi
c000dd57:	5d                   	pop    ebp
c000dd58:	c3                   	ret    
c000dd59:	90                   	nop

c000dd5a <LogicalDisk::mount()>:
c000dd5a:	56                   	push   esi
c000dd5b:	53                   	push   ebx
c000dd5c:	53                   	push   ebx
c000dd5d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000dd61:	8b 1d 04 94 02 c0    	mov    ebx,DWORD PTR ds:0xc0029404
c000dd67:	c7 86 74 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x174],0x0
c000dd71:	85 db                	test   ebx,ebx
c000dd73:	74 27                	je     c000dd9c <LogicalDisk::mount()+0x42>
c000dd75:	51                   	push   ecx
c000dd76:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000dd7d:	8b 13                	mov    edx,DWORD PTR [ebx]
c000dd7f:	83 e8 41             	sub    eax,0x41
c000dd82:	50                   	push   eax
c000dd83:	56                   	push   esi
c000dd84:	53                   	push   ebx
c000dd85:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000dd88:	83 c4 10             	add    esp,0x10
c000dd8b:	84 c0                	test   al,al
c000dd8d:	74 08                	je     c000dd97 <LogicalDisk::mount()+0x3d>
c000dd8f:	89 9e 74 01 00 00    	mov    DWORD PTR [esi+0x174],ebx
c000dd95:	eb 07                	jmp    c000dd9e <LogicalDisk::mount()+0x44>
c000dd97:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000dd9a:	eb d5                	jmp    c000dd71 <LogicalDisk::mount()+0x17>
c000dd9c:	31 c0                	xor    eax,eax
c000dd9e:	5a                   	pop    edx
c000dd9f:	5b                   	pop    ebx
c000dda0:	5e                   	pop    esi
c000dda1:	c3                   	ret    

c000dda2 <LogicalDisk::unmount()>:
c000dda2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dda6:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000ddb0:	c3                   	ret    
c000ddb1:	90                   	nop

c000ddb2 <LogicalDisk::eject()>:
c000ddb2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ddb6:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000ddbc:	8b 10                	mov    edx,DWORD PTR [eax]
c000ddbe:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ddc2:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000ddc5:	90                   	nop

c000ddc6 <LogicalDisk::unassignDriveLetter()>:
c000ddc6:	57                   	push   edi
c000ddc7:	56                   	push   esi
c000ddc8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ddcc:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000ddd3:	85 c9                	test   ecx,ecx
c000ddd5:	75 0f                	jne    c000dde6 <LogicalDisk::unassignDriveLetter()+0x20>
c000ddd7:	c7 44 24 0c cc 1d 02 c0 	mov    DWORD PTR [esp+0xc],0xc0021dcc
c000dddf:	5e                   	pop    esi
c000dde0:	5f                   	pop    edi
c000dde1:	e9 ad 38 00 00       	jmp    c0011693 <KePanic(char const*)>
c000dde6:	83 e9 41             	sub    ecx,0x41
c000dde9:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000ddf0:	b8 01 00 00 00       	mov    eax,0x1
c000ddf5:	c7 04 8d 80 b8 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd4780],0x0
c000de00:	d3 e0                	shl    eax,cl
c000de02:	89 c7                	mov    edi,eax
c000de04:	f7 d0                	not    eax
c000de06:	c1 ff 1f             	sar    edi,0x1f
c000de09:	21 05 60 b8 02 c0    	and    DWORD PTR ds:0xc002b860,eax
c000de0f:	89 fe                	mov    esi,edi
c000de11:	f7 d6                	not    esi
c000de13:	21 35 64 b8 02 c0    	and    DWORD PTR ds:0xc002b864,esi
c000de19:	5e                   	pop    esi
c000de1a:	5f                   	pop    edi
c000de1b:	c3                   	ret    

c000de1c <LogicalDisk::read(unsigned long long, int, void*)>:
c000de1c:	57                   	push   edi
c000de1d:	56                   	push   esi
c000de1e:	53                   	push   ebx
c000de1f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000de23:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000de27:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000de2b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000de2f:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000de35:	77 41                	ja     c000de78 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000de37:	99                   	cdq    
c000de38:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000de3e:	01 c8                	add    eax,ecx
c000de40:	11 da                	adc    edx,ebx
c000de42:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000de48:	19 d7                	sbb    edi,edx
c000de4a:	72 33                	jb     c000de7f <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000de4c:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000de52:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000de58:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000de5c:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000de60:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000de66:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000de6c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000de70:	5b                   	pop    ebx
c000de71:	5e                   	pop    esi
c000de72:	5f                   	pop    edi
c000de73:	e9 c6 0a 00 00       	jmp    c000e93e <VCache::read(unsigned long long, int, void*)>
c000de78:	b8 05 00 00 00       	mov    eax,0x5
c000de7d:	eb 05                	jmp    c000de84 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000de7f:	b8 07 00 00 00       	mov    eax,0x7
c000de84:	5b                   	pop    ebx
c000de85:	5e                   	pop    esi
c000de86:	5f                   	pop    edi
c000de87:	c3                   	ret    

c000de88 <LogicalDisk::write(unsigned long long, int, void*)>:
c000de88:	57                   	push   edi
c000de89:	56                   	push   esi
c000de8a:	53                   	push   ebx
c000de8b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000de8f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000de93:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000de97:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000de9b:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000dea1:	77 41                	ja     c000dee4 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000dea3:	99                   	cdq    
c000dea4:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000deaa:	01 c8                	add    eax,ecx
c000deac:	11 da                	adc    edx,ebx
c000deae:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000deb4:	19 d7                	sbb    edi,edx
c000deb6:	72 33                	jb     c000deeb <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000deb8:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000debe:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000dec4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000dec8:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000decc:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000ded2:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000ded8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dedc:	5b                   	pop    ebx
c000dedd:	5e                   	pop    esi
c000dede:	5f                   	pop    edi
c000dedf:	e9 6c 09 00 00       	jmp    c000e850 <VCache::write(unsigned long long, int, void*)>
c000dee4:	b8 05 00 00 00       	mov    eax,0x5
c000dee9:	eb 05                	jmp    c000def0 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000deeb:	b8 07 00 00 00       	mov    eax,0x7
c000def0:	5b                   	pop    ebx
c000def1:	5e                   	pop    esi
c000def2:	5f                   	pop    edi
c000def3:	c3                   	ret    

c000def4 <Mouse::Mouse(char const*)>:
c000def4:	83 ec 0c             	sub    esp,0xc
c000def7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000defb:	83 ec 08             	sub    esp,0x8
c000defe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df02:	50                   	push   eax
c000df03:	e8 ca ec ff ff       	call   c000cbd2 <Device::Device(char const*)>
c000df08:	83 c4 10             	add    esp,0x10
c000df0b:	ba 20 1e 02 c0       	mov    edx,0xc0021e20
c000df10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df14:	89 10                	mov    DWORD PTR [eax],edx
c000df16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df1a:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000df24:	90                   	nop
c000df25:	83 c4 0c             	add    esp,0xc
c000df28:	c3                   	ret    
c000df29:	90                   	nop
c000df2a:	66 90                	xchg   ax,ax

c000df2c <Mouse::~Mouse()>:
c000df2c:	83 ec 0c             	sub    esp,0xc
c000df2f:	ba 20 1e 02 c0       	mov    edx,0xc0021e20
c000df34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df38:	89 10                	mov    DWORD PTR [eax],edx
c000df3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df3e:	83 ec 0c             	sub    esp,0xc
c000df41:	50                   	push   eax
c000df42:	e8 f5 e9 ff ff       	call   c000c93c <Device::~Device()>
c000df47:	83 c4 10             	add    esp,0x10
c000df4a:	90                   	nop
c000df4b:	83 c4 0c             	add    esp,0xc
c000df4e:	c3                   	ret    
c000df4f:	90                   	nop

c000df50 <Mouse::~Mouse()>:
c000df50:	83 ec 0c             	sub    esp,0xc
c000df53:	83 ec 0c             	sub    esp,0xc
c000df56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df5a:	e8 cd ff ff ff       	call   c000df2c <Mouse::~Mouse()>
c000df5f:	83 c4 10             	add    esp,0x10
c000df62:	83 ec 08             	sub    esp,0x8
c000df65:	68 58 01 00 00       	push   0x158
c000df6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df6e:	e8 a5 c8 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000df73:	83 c4 10             	add    esp,0x10
c000df76:	83 c4 0c             	add    esp,0xc
c000df79:	c3                   	ret    

c000df7a <NIC::getMAC()>:
c000df7a:	31 c0                	xor    eax,eax
c000df7c:	31 d2                	xor    edx,edx
c000df7e:	c3                   	ret    
c000df7f:	90                   	nop

c000df80 <NIC::write(int, unsigned char*, int*)>:
c000df80:	b8 01 00 00 00       	mov    eax,0x1
c000df85:	c3                   	ret    

c000df86 <NIC::NIC(char const*)>:
c000df86:	83 ec 0c             	sub    esp,0xc
c000df89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df8d:	83 ec 08             	sub    esp,0x8
c000df90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df94:	50                   	push   eax
c000df95:	e8 38 ec ff ff       	call   c000cbd2 <Device::Device(char const*)>
c000df9a:	83 c4 10             	add    esp,0x10
c000df9d:	ba 4c 1e 02 c0       	mov    edx,0xc0021e4c
c000dfa2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfa6:	89 10                	mov    DWORD PTR [eax],edx
c000dfa8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfac:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000dfb6:	90                   	nop
c000dfb7:	83 c4 0c             	add    esp,0xc
c000dfba:	c3                   	ret    
c000dfbb:	90                   	nop

c000dfbc <NIC::~NIC()>:
c000dfbc:	83 ec 0c             	sub    esp,0xc
c000dfbf:	ba 4c 1e 02 c0       	mov    edx,0xc0021e4c
c000dfc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfc8:	89 10                	mov    DWORD PTR [eax],edx
c000dfca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfce:	83 ec 0c             	sub    esp,0xc
c000dfd1:	50                   	push   eax
c000dfd2:	e8 65 e9 ff ff       	call   c000c93c <Device::~Device()>
c000dfd7:	83 c4 10             	add    esp,0x10
c000dfda:	90                   	nop
c000dfdb:	83 c4 0c             	add    esp,0xc
c000dfde:	c3                   	ret    
c000dfdf:	90                   	nop

c000dfe0 <NIC::~NIC()>:
c000dfe0:	83 ec 0c             	sub    esp,0xc
c000dfe3:	83 ec 0c             	sub    esp,0xc
c000dfe6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfea:	e8 cd ff ff ff       	call   c000dfbc <NIC::~NIC()>
c000dfef:	83 c4 10             	add    esp,0x10
c000dff2:	83 ec 08             	sub    esp,0x8
c000dff5:	68 58 01 00 00       	push   0x158
c000dffa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dffe:	e8 15 c8 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000e003:	83 c4 10             	add    esp,0x10
c000e006:	83 c4 0c             	add    esp,0xc
c000e009:	c3                   	ret    

c000e00a <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000e00a:	55                   	push   ebp
c000e00b:	57                   	push   edi
c000e00c:	56                   	push   esi
c000e00d:	53                   	push   ebx
c000e00e:	81 ec 28 01 00 00    	sub    esp,0x128
c000e014:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c000e01b:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c000e022:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000e029:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c000e030:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e034:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000e038:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000e03f:	e8 8a ec ff ff       	call   c000ccce <Device::getName()>
c000e044:	5a                   	pop    edx
c000e045:	59                   	pop    ecx
c000e046:	50                   	push   eax
c000e047:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000e04b:	55                   	push   ebp
c000e04c:	e8 ef 25 ff ff       	call   c0000640 <strcpy>
c000e051:	5b                   	pop    ebx
c000e052:	58                   	pop    eax
c000e053:	68 78 1e 02 c0       	push   0xc0021e78
c000e058:	55                   	push   ebp
c000e059:	e8 e2 27 ff ff       	call   c0000840 <strcat>
c000e05e:	c7 04 24 78 01 00 00 	mov    DWORD PTR [esp],0x178
c000e065:	e8 4c 9a ff ff       	call   c0007ab6 <malloc>
c000e06a:	83 c4 0c             	add    esp,0xc
c000e06d:	89 c3                	mov    ebx,eax
c000e06f:	57                   	push   edi
c000e070:	56                   	push   esi
c000e071:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e075:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e079:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000e080:	55                   	push   ebp
c000e081:	50                   	push   eax
c000e082:	e8 59 fb ff ff       	call   c000dbe0 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000e087:	83 c4 14             	add    esp,0x14
c000e08a:	53                   	push   ebx
c000e08b:	e8 10 fc ff ff       	call   c000dca0 <LogicalDisk::assignDriveLetter()>
c000e090:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e093:	e8 c2 fc ff ff       	call   c000dd5a <LogicalDisk::mount()>
c000e098:	58                   	pop    eax
c000e099:	5a                   	pop    edx
c000e09a:	53                   	push   ebx
c000e09b:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000e0a2:	e8 93 e9 ff ff       	call   c000ca3a <Device::addChild(Device*)>
c000e0a7:	81 c4 2c 01 00 00    	add    esp,0x12c
c000e0ad:	5b                   	pop    ebx
c000e0ae:	5e                   	pop    esi
c000e0af:	5f                   	pop    edi
c000e0b0:	5d                   	pop    ebp
c000e0b1:	c3                   	ret    

c000e0b2 <createPartitionsForDisk(PhysicalDisk*)>:
c000e0b2:	55                   	push   ebp
c000e0b3:	57                   	push   edi
c000e0b4:	56                   	push   esi
c000e0b5:	53                   	push   ebx
c000e0b6:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000e0bc:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000e0c3:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000e0c9:	3d 00 02 00 00       	cmp    eax,0x200
c000e0ce:	74 27                	je     c000e0f7 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000e0d0:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000e0d6:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000e0dc:	83 ec 10             	sub    esp,0x10
c000e0df:	0f a4 f7 0a          	shld   edi,esi,0xa
c000e0e3:	99                   	cdq    
c000e0e4:	c1 e6 0a             	shl    esi,0xa
c000e0e7:	52                   	push   edx
c000e0e8:	89 fd                	mov    ebp,edi
c000e0ea:	50                   	push   eax
c000e0eb:	55                   	push   ebp
c000e0ec:	56                   	push   esi
c000e0ed:	e8 9e 16 01 00       	call   c001f790 <__udivdi3>
c000e0f2:	e9 b9 00 00 00       	jmp    c000e1b0 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000e0f7:	83 ec 0c             	sub    esp,0xc
c000e0fa:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e0fc:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000e100:	56                   	push   esi
c000e101:	6a 01                	push   0x1
c000e103:	6a 00                	push   0x0
c000e105:	6a 00                	push   0x0
c000e107:	53                   	push   ebx
c000e108:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000e10b:	83 c4 20             	add    esp,0x20
c000e10e:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000e116:	75 0a                	jne    c000e122 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000e118:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000e120:	74 2c                	je     c000e14e <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000e122:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000e128:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000e12e:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000e134:	83 ec 10             	sub    esp,0x10
c000e137:	0f a4 c2 0a          	shld   edx,eax,0xa
c000e13b:	89 f7                	mov    edi,esi
c000e13d:	c1 e0 0a             	shl    eax,0xa
c000e140:	c1 ff 1f             	sar    edi,0x1f
c000e143:	57                   	push   edi
c000e144:	56                   	push   esi
c000e145:	52                   	push   edx
c000e146:	50                   	push   eax
c000e147:	e8 44 16 01 00       	call   c001f790 <__udivdi3>
c000e14c:	eb 62                	jmp    c000e1b0 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000e14e:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000e155:	8a 94 24 1e 02 00 00 	mov    dl,BYTE PTR [esp+0x21e]
c000e15c:	89 cf                	mov    edi,ecx
c000e15e:	83 e2 7f             	and    edx,0x7f
c000e161:	83 e7 7f             	and    edi,0x7f
c000e164:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000e16b:	8d 0c 17             	lea    ecx,[edi+edx*1]
c000e16e:	83 e0 7f             	and    eax,0x7f
c000e171:	8d 14 01             	lea    edx,[ecx+eax*1]
c000e174:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000e17b:	83 e0 7f             	and    eax,0x7f
c000e17e:	01 d0                	add    eax,edx
c000e180:	89 c5                	mov    ebp,eax
c000e182:	84 c0                	test   al,al
c000e184:	74 41                	je     c000e1c7 <createPartitionsForDisk(PhysicalDisk*)+0x115>
c000e186:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000e18c:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000e192:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000e198:	83 ec 10             	sub    esp,0x10
c000e19b:	0f a4 c2 0a          	shld   edx,eax,0xa
c000e19f:	89 f7                	mov    edi,esi
c000e1a1:	c1 e0 0a             	shl    eax,0xa
c000e1a4:	c1 ff 1f             	sar    edi,0x1f
c000e1a7:	57                   	push   edi
c000e1a8:	56                   	push   esi
c000e1a9:	52                   	push   edx
c000e1aa:	50                   	push   eax
c000e1ab:	e8 e0 15 01 00       	call   c001f790 <__udivdi3>
c000e1b0:	83 c4 14             	add    esp,0x14
c000e1b3:	52                   	push   edx
c000e1b4:	50                   	push   eax
c000e1b5:	6a 00                	push   0x0
c000e1b7:	6a 00                	push   0x0
c000e1b9:	53                   	push   ebx
c000e1ba:	e8 4b fe ff ff       	call   c000e00a <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000e1bf:	83 c4 20             	add    esp,0x20
c000e1c2:	e9 73 01 00 00       	jmp    c000e33a <createPartitionsForDisk(PhysicalDisk*)+0x288>
c000e1c7:	89 f0                	mov    eax,esi
c000e1c9:	31 c9                	xor    ecx,ecx
c000e1cb:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000e1d2:	75 02                	jne    c000e1d6 <createPartitionsForDisk(PhysicalDisk*)+0x124>
c000e1d4:	89 cd                	mov    ebp,ecx
c000e1d6:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000e1dd:	0f b6 b0 c8 01 00 00 	movzx  esi,BYTE PTR [eax+0x1c8]
c000e1e4:	c1 e2 08             	shl    edx,0x8
c000e1e7:	c1 e6 10             	shl    esi,0x10
c000e1ea:	c7 44 cc 14 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x14],0x0
c000e1f2:	09 f2                	or     edx,esi
c000e1f4:	c7 44 cc 34 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x34],0x0
c000e1fc:	0f b6 b0 c6 01 00 00 	movzx  esi,BYTE PTR [eax+0x1c6]
c000e203:	83 c0 10             	add    eax,0x10
c000e206:	09 f2                	or     edx,esi
c000e208:	0f b6 b0 b9 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b9]
c000e20f:	c1 e6 18             	shl    esi,0x18
c000e212:	09 f2                	or     edx,esi
c000e214:	0f b6 b0 bc 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bc]
c000e21b:	89 54 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],edx
c000e21f:	c1 e6 10             	shl    esi,0x10
c000e222:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000e229:	c1 e2 08             	shl    edx,0x8
c000e22c:	09 f2                	or     edx,esi
c000e22e:	0f b6 b0 ba 01 00 00 	movzx  esi,BYTE PTR [eax+0x1ba]
c000e235:	09 f2                	or     edx,esi
c000e237:	0f b6 b0 bd 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bd]
c000e23e:	c1 e6 18             	shl    esi,0x18
c000e241:	09 f2                	or     edx,esi
c000e243:	89 54 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],edx
c000e247:	41                   	inc    ecx
c000e248:	83 f9 04             	cmp    ecx,0x4
c000e24b:	0f 85 7a ff ff ff    	jne    c000e1cb <createPartitionsForDisk(PhysicalDisk*)+0x119>
c000e251:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e255:	83 f0 01             	xor    eax,0x1
c000e258:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000e25c:	75 4f                	jne    c000e2ad <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000e25e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e262:	83 f0 01             	xor    eax,0x1
c000e265:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000e269:	75 42                	jne    c000e2ad <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000e26b:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000e273:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000e27b:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000e281:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000e287:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000e28d:	0f a4 c2 0a          	shld   edx,eax,0xa
c000e291:	89 f7                	mov    edi,esi
c000e293:	c1 e0 0a             	shl    eax,0xa
c000e296:	c1 ff 1f             	sar    edi,0x1f
c000e299:	57                   	push   edi
c000e29a:	56                   	push   esi
c000e29b:	52                   	push   edx
c000e29c:	50                   	push   eax
c000e29d:	e8 ee 14 01 00       	call   c001f790 <__udivdi3>
c000e2a2:	83 c4 10             	add    esp,0x10
c000e2a5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e2a9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000e2ad:	89 e8                	mov    eax,ebp
c000e2af:	0f b6 e8             	movzx  ebp,al
c000e2b2:	85 ed                	test   ebp,ebp
c000e2b4:	74 50                	je     c000e306 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000e2b6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e2ba:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000e2be:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e2c2:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000e2c6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e2ca:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e2ce:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000e2d2:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000e2d6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2da:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2de:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e2e2:	89 74 ec 10          	mov    DWORD PTR [esp+ebp*8+0x10],esi
c000e2e6:	89 7c ec 14          	mov    DWORD PTR [esp+ebp*8+0x14],edi
c000e2ea:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000e2ee:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000e2f2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e2f6:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000e2fa:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000e2fe:	89 44 ec 30          	mov    DWORD PTR [esp+ebp*8+0x30],eax
c000e302:	89 54 ec 34          	mov    DWORD PTR [esp+ebp*8+0x34],edx
c000e306:	31 ed                	xor    ebp,ebp
c000e308:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000e30c:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000e310:	89 f8                	mov    eax,edi
c000e312:	09 f0                	or     eax,esi
c000e314:	74 1e                	je     c000e334 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000e316:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000e31a:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000e31e:	89 d1                	mov    ecx,edx
c000e320:	09 c1                	or     ecx,eax
c000e322:	74 10                	je     c000e334 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000e324:	83 ec 0c             	sub    esp,0xc
c000e327:	57                   	push   edi
c000e328:	56                   	push   esi
c000e329:	52                   	push   edx
c000e32a:	50                   	push   eax
c000e32b:	53                   	push   ebx
c000e32c:	e8 d9 fc ff ff       	call   c000e00a <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000e331:	83 c4 20             	add    esp,0x20
c000e334:	45                   	inc    ebp
c000e335:	83 fd 04             	cmp    ebp,0x4
c000e338:	75 ce                	jne    c000e308 <createPartitionsForDisk(PhysicalDisk*)+0x256>
c000e33a:	81 c4 5c 02 00 00    	add    esp,0x25c
c000e340:	5b                   	pop    ebx
c000e341:	5e                   	pop    esi
c000e342:	5f                   	pop    edi
c000e343:	5d                   	pop    ebp
c000e344:	c3                   	ret    
c000e345:	66 90                	xchg   ax,ax
c000e347:	90                   	nop

c000e348 <Serial::Serial(char const*)>:
c000e348:	83 ec 0c             	sub    esp,0xc
c000e34b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e34f:	83 ec 08             	sub    esp,0x8
c000e352:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e356:	50                   	push   eax
c000e357:	e8 76 e8 ff ff       	call   c000cbd2 <Device::Device(char const*)>
c000e35c:	83 c4 10             	add    esp,0x10
c000e35f:	ba 8c 1e 02 c0       	mov    edx,0xc0021e8c
c000e364:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e368:	89 10                	mov    DWORD PTR [eax],edx
c000e36a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e36e:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000e378:	90                   	nop
c000e379:	83 c4 0c             	add    esp,0xc
c000e37c:	c3                   	ret    
c000e37d:	90                   	nop
c000e37e:	66 90                	xchg   ax,ax

c000e380 <Serial::~Serial()>:
c000e380:	83 ec 0c             	sub    esp,0xc
c000e383:	ba 8c 1e 02 c0       	mov    edx,0xc0021e8c
c000e388:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e38c:	89 10                	mov    DWORD PTR [eax],edx
c000e38e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e392:	83 ec 0c             	sub    esp,0xc
c000e395:	50                   	push   eax
c000e396:	e8 a1 e5 ff ff       	call   c000c93c <Device::~Device()>
c000e39b:	83 c4 10             	add    esp,0x10
c000e39e:	90                   	nop
c000e39f:	83 c4 0c             	add    esp,0xc
c000e3a2:	c3                   	ret    
c000e3a3:	90                   	nop

c000e3a4 <Serial::~Serial()>:
c000e3a4:	83 ec 0c             	sub    esp,0xc
c000e3a7:	83 ec 0c             	sub    esp,0xc
c000e3aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e3ae:	e8 cd ff ff ff       	call   c000e380 <Serial::~Serial()>
c000e3b3:	83 c4 10             	add    esp,0x10
c000e3b6:	83 ec 08             	sub    esp,0x8
c000e3b9:	68 58 01 00 00       	push   0x158
c000e3be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e3c2:	e8 51 c4 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000e3c7:	83 c4 10             	add    esp,0x10
c000e3ca:	83 c4 0c             	add    esp,0xc
c000e3cd:	c3                   	ret    
c000e3ce:	66 90                	xchg   ax,ax

c000e3d0 <Timer::Timer(char const*)>:
c000e3d0:	83 ec 0c             	sub    esp,0xc
c000e3d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3d7:	83 ec 08             	sub    esp,0x8
c000e3da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e3de:	50                   	push   eax
c000e3df:	e8 ee e7 ff ff       	call   c000cbd2 <Device::Device(char const*)>
c000e3e4:	83 c4 10             	add    esp,0x10
c000e3e7:	ba d0 1e 02 c0       	mov    edx,0xc0021ed0
c000e3ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3f0:	89 10                	mov    DWORD PTR [eax],edx
c000e3f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3f6:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000e400:	90                   	nop
c000e401:	83 c4 0c             	add    esp,0xc
c000e404:	c3                   	ret    
c000e405:	90                   	nop
c000e406:	66 90                	xchg   ax,ax

c000e408 <Timer::~Timer()>:
c000e408:	83 ec 0c             	sub    esp,0xc
c000e40b:	ba d0 1e 02 c0       	mov    edx,0xc0021ed0
c000e410:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e414:	89 10                	mov    DWORD PTR [eax],edx
c000e416:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e41a:	83 ec 0c             	sub    esp,0xc
c000e41d:	50                   	push   eax
c000e41e:	e8 19 e5 ff ff       	call   c000c93c <Device::~Device()>
c000e423:	83 c4 10             	add    esp,0x10
c000e426:	90                   	nop
c000e427:	83 c4 0c             	add    esp,0xc
c000e42a:	c3                   	ret    
c000e42b:	90                   	nop

c000e42c <Timer::~Timer()>:
c000e42c:	83 ec 0c             	sub    esp,0xc
c000e42f:	83 ec 0c             	sub    esp,0xc
c000e432:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e436:	e8 cd ff ff ff       	call   c000e408 <Timer::~Timer()>
c000e43b:	83 c4 10             	add    esp,0x10
c000e43e:	83 ec 08             	sub    esp,0x8
c000e441:	68 5c 01 00 00       	push   0x15c
c000e446:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e44a:	e8 c9 c3 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000e44f:	83 c4 10             	add    esp,0x10
c000e452:	83 c4 0c             	add    esp,0xc
c000e455:	c3                   	ret    

c000e456 <Timer::read()>:
c000e456:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e45a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000e460:	c3                   	ret    

c000e461 <setupTimer(int)>:
c000e461:	53                   	push   ebx
c000e462:	83 ec 14             	sub    esp,0x14
c000e465:	68 5c 01 00 00       	push   0x15c
c000e46a:	e8 47 96 ff ff       	call   c0007ab6 <malloc>
c000e46f:	89 04 24             	mov    DWORD PTR [esp],eax
c000e472:	89 c3                	mov    ebx,eax
c000e474:	e8 7b 0b 01 00       	call   c001eff4 <PIT::PIT()>
c000e479:	58                   	pop    eax
c000e47a:	5a                   	pop    edx
c000e47b:	53                   	push   ebx
c000e47c:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c000e482:	e8 b3 e5 ff ff       	call   c000ca3a <Device::addChild(Device*)>
c000e487:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e489:	6a 00                	push   0x0
c000e48b:	6a 00                	push   0x0
c000e48d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e491:	53                   	push   ebx
c000e492:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000e495:	89 d8                	mov    eax,ebx
c000e497:	83 c4 28             	add    esp,0x28
c000e49a:	5b                   	pop    ebx
c000e49b:	c3                   	ret    

c000e49c <timerHandler(unsigned int)>:
c000e49c:	56                   	push   esi
c000e49d:	53                   	push   ebx
c000e49e:	51                   	push   ecx
c000e49f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e4a3:	01 05 ec b8 02 c0    	add    DWORD PTR ds:0xc002b8ec,eax
c000e4a9:	80 3d bd 6e 02 c0 00 	cmp    BYTE PTR ds:0xc0026ebd,0x0
c000e4b0:	0f 84 4a 01 00 00    	je     c000e600 <timerHandler(unsigned int)+0x164>
c000e4b6:	fa                   	cli    
c000e4b7:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c000e4bd:	83 ec 0c             	sub    esp,0xc
c000e4c0:	ff 05 c4 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c4
c000e4c6:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e4cb:	e8 90 18 01 00       	call   c001fd60 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000e4d0:	83 c4 10             	add    esp,0x10
c000e4d3:	84 c0                	test   al,al
c000e4d5:	0f 85 a1 00 00 00    	jne    c000e57c <timerHandler(unsigned int)+0xe0>
c000e4db:	83 ec 0c             	sub    esp,0xc
c000e4de:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e4e3:	e8 94 18 01 00       	call   c001fd7c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e4e8:	83 c4 10             	add    esp,0x10
c000e4eb:	89 c6                	mov    esi,eax
c000e4ed:	8d 76 00             	lea    esi,[esi+0x0]
c000e4f0:	83 ec 0c             	sub    esp,0xc
c000e4f3:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e4f8:	e8 7f 18 01 00       	call   c001fd7c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e4fd:	c7 04 24 d8 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6d8
c000e504:	89 c3                	mov    ebx,eax
c000e506:	e8 79 18 01 00       	call   c001fd84 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000e50b:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000e50e:	83 c4 10             	add    esp,0x10
c000e511:	3b 05 ec b8 02 c0    	cmp    eax,DWORD PTR ds:0xc002b8ec
c000e517:	77 23                	ja     c000e53c <timerHandler(unsigned int)+0xa0>
c000e519:	83 ec 0c             	sub    esp,0xc
c000e51c:	53                   	push   ebx
c000e51d:	e8 0e 81 00 00       	call   c0016630 <unblockTask(ThreadControlBlock*)>
c000e522:	83 c4 10             	add    esp,0x10
c000e525:	39 de                	cmp    esi,ebx
c000e527:	75 27                	jne    c000e550 <timerHandler(unsigned int)+0xb4>
c000e529:	83 ec 0c             	sub    esp,0xc
c000e52c:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e531:	e8 46 18 01 00       	call   c001fd7c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e536:	89 c6                	mov    esi,eax
c000e538:	eb 12                	jmp    c000e54c <timerHandler(unsigned int)+0xb0>
c000e53a:	66 90                	xchg   ax,ax
c000e53c:	52                   	push   edx
c000e53d:	52                   	push   edx
c000e53e:	53                   	push   ebx
c000e53f:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e544:	e8 f7 18 01 00       	call   c001fe40 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000e549:	8d 76 00             	lea    esi,[esi+0x0]
c000e54c:	83 c4 10             	add    esp,0x10
c000e54f:	90                   	nop
c000e550:	83 ec 0c             	sub    esp,0xc
c000e553:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e558:	e8 03 18 01 00       	call   c001fd60 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000e55d:	83 c4 10             	add    esp,0x10
c000e560:	84 c0                	test   al,al
c000e562:	75 18                	jne    c000e57c <timerHandler(unsigned int)+0xe0>
c000e564:	83 ec 0c             	sub    esp,0xc
c000e567:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e56c:	e8 0b 18 01 00       	call   c001fd7c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e571:	83 c4 10             	add    esp,0x10
c000e574:	39 f0                	cmp    eax,esi
c000e576:	0f 85 74 ff ff ff    	jne    c000e4f0 <timerHandler(unsigned int)+0x54>
c000e57c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e581:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c000e585:	74 41                	je     c000e5c8 <timerHandler(unsigned int)+0x12c>
c000e587:	80 3d bc 6e 02 c0 00 	cmp    BYTE PTR ds:0xc0026ebc,0x0
c000e58e:	74 38                	je     c000e5c8 <timerHandler(unsigned int)+0x12c>
c000e590:	fa                   	cli    
c000e591:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c000e597:	a1 ec b8 02 c0       	mov    eax,ds:0xc002b8ec
c000e59c:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000e5a2:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c000e5a5:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000e5ab:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c000e5ae:	72 08                	jb     c000e5b8 <timerHandler(unsigned int)+0x11c>
c000e5b0:	e8 63 7b 00 00       	call   c0016118 <schedule()>
c000e5b5:	8d 76 00             	lea    esi,[esi+0x0]
c000e5b8:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000e5bd:	48                   	dec    eax
c000e5be:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000e5c3:	75 03                	jne    c000e5c8 <timerHandler(unsigned int)+0x12c>
c000e5c5:	fb                   	sti    
c000e5c6:	66 90                	xchg   ax,ax
c000e5c8:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c000e5cd:	48                   	dec    eax
c000e5ce:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c000e5d3:	75 1b                	jne    c000e5f0 <timerHandler(unsigned int)+0x154>
c000e5d5:	83 3d c0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6c0,0x0
c000e5dc:	74 12                	je     c000e5f0 <timerHandler(unsigned int)+0x154>
c000e5de:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c000e5e8:	e8 2b 7b 00 00       	call   c0016118 <schedule()>
c000e5ed:	8d 76 00             	lea    esi,[esi+0x0]
c000e5f0:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000e5f5:	48                   	dec    eax
c000e5f6:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000e5fb:	75 03                	jne    c000e600 <timerHandler(unsigned int)+0x164>
c000e5fd:	fb                   	sti    
c000e5fe:	66 90                	xchg   ax,ax
c000e600:	58                   	pop    eax
c000e601:	5b                   	pop    ebx
c000e602:	5e                   	pop    esi
c000e603:	c3                   	ret    

c000e604 <VCache::VCache(PhysicalDisk*)>:
c000e604:	53                   	push   ebx
c000e605:	83 ec 18             	sub    esp,0x18
c000e608:	ba 00 1f 02 c0       	mov    edx,0xc0021f00
c000e60d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e611:	89 10                	mov    DWORD PTR [eax],edx
c000e613:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e617:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000e61e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e622:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000e629:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e62d:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000e634:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000e63b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e63f:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000e646:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000e64d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e651:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000e658:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e65c:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000e660:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e664:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000e66b:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000e672:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e676:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000e67a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e67e:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000e682:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e686:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000e68a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e68e:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000e695:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000e69d:	83 ec 0c             	sub    esp,0xc
c000e6a0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e6a4:	e8 0d 94 ff ff       	call   c0007ab6 <malloc>
c000e6a9:	83 c4 10             	add    esp,0x10
c000e6ac:	89 c3                	mov    ebx,eax
c000e6ae:	83 ec 0c             	sub    esp,0xc
c000e6b1:	53                   	push   ebx
c000e6b2:	e8 fd 77 00 00       	call   c0015eb4 <Mutex::Mutex()>
c000e6b7:	83 c4 10             	add    esp,0x10
c000e6ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e6be:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000e6c1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e6c5:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000e6c9:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000e6cc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e6d0:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000e6d7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e6db:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000e6e1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e6e5:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000e6e8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e6ec:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000e6f2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e6f8:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000e6fc:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000e6ff:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000e702:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e706:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000e70a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e70e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000e714:	05 00 02 00 00       	add    eax,0x200
c000e719:	c1 e0 03             	shl    eax,0x3
c000e71c:	83 ec 0c             	sub    esp,0xc
c000e71f:	50                   	push   eax
c000e720:	e8 91 93 ff ff       	call   c0007ab6 <malloc>
c000e725:	83 c4 10             	add    esp,0x10
c000e728:	89 c2                	mov    edx,eax
c000e72a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e72e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000e731:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e735:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000e73c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e740:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000e744:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e748:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000e74e:	89 d0                	mov    eax,edx
c000e750:	c1 e0 02             	shl    eax,0x2
c000e753:	01 d0                	add    eax,edx
c000e755:	c1 e0 04             	shl    eax,0x4
c000e758:	83 ec 0c             	sub    esp,0xc
c000e75b:	50                   	push   eax
c000e75c:	e8 55 93 ff ff       	call   c0007ab6 <malloc>
c000e761:	83 c4 10             	add    esp,0x10
c000e764:	89 c2                	mov    edx,eax
c000e766:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e76a:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000e76d:	90                   	nop
c000e76e:	83 c4 18             	add    esp,0x18
c000e771:	5b                   	pop    ebx
c000e772:	c3                   	ret    
c000e773:	90                   	nop

c000e774 <VCache::invalidateReadBuffer()>:
c000e774:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e778:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000e77e:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000e782:	c3                   	ret    
c000e783:	90                   	nop

c000e784 <VCache::writeWriteBuffer()>:
c000e784:	53                   	push   ebx
c000e785:	83 ec 08             	sub    esp,0x8
c000e788:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e78c:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000e790:	74 1e                	je     c000e7b0 <VCache::writeWriteBuffer()+0x2c>
c000e792:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e795:	83 ec 0c             	sub    esp,0xc
c000e798:	8b 10                	mov    edx,DWORD PTR [eax]
c000e79a:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000e79d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000e7a0:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000e7a3:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000e7a6:	50                   	push   eax
c000e7a7:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000e7aa:	83 c4 20             	add    esp,0x20
c000e7ad:	8d 76 00             	lea    esi,[esi+0x0]
c000e7b0:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e7b7:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000e7be:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000e7c2:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000e7c9:	83 c4 08             	add    esp,0x8
c000e7cc:	5b                   	pop    ebx
c000e7cd:	c3                   	ret    
c000e7ce:	66 90                	xchg   ax,ax

c000e7d0 <VCache::~VCache()>:
c000e7d0:	83 ec 0c             	sub    esp,0xc
c000e7d3:	ba 00 1f 02 c0       	mov    edx,0xc0021f00
c000e7d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7dc:	89 10                	mov    DWORD PTR [eax],edx
c000e7de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7e2:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000e7e5:	0f b6 c0             	movzx  eax,al
c000e7e8:	85 c0                	test   eax,eax
c000e7ea:	74 10                	je     c000e7fc <VCache::~VCache()+0x2c>
c000e7ec:	83 ec 0c             	sub    esp,0xc
c000e7ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e7f3:	e8 8c ff ff ff       	call   c000e784 <VCache::writeWriteBuffer()>
c000e7f8:	83 c4 10             	add    esp,0x10
c000e7fb:	90                   	nop
c000e7fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e800:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000e803:	83 ec 0c             	sub    esp,0xc
c000e806:	50                   	push   eax
c000e807:	e8 ba 92 ff ff       	call   c0007ac6 <free>
c000e80c:	83 c4 10             	add    esp,0x10
c000e80f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e813:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000e816:	83 ec 0c             	sub    esp,0xc
c000e819:	50                   	push   eax
c000e81a:	e8 a7 92 ff ff       	call   c0007ac6 <free>
c000e81f:	83 c4 10             	add    esp,0x10
c000e822:	90                   	nop
c000e823:	83 c4 0c             	add    esp,0xc
c000e826:	c3                   	ret    
c000e827:	90                   	nop

c000e828 <VCache::~VCache()>:
c000e828:	83 ec 0c             	sub    esp,0xc
c000e82b:	83 ec 0c             	sub    esp,0xc
c000e82e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e832:	e8 99 ff ff ff       	call   c000e7d0 <VCache::~VCache()>
c000e837:	83 c4 10             	add    esp,0x10
c000e83a:	83 ec 08             	sub    esp,0x8
c000e83d:	6a 44                	push   0x44
c000e83f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e843:	e8 d0 bf ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000e848:	83 c4 10             	add    esp,0x10
c000e84b:	83 c4 0c             	add    esp,0xc
c000e84e:	c3                   	ret    
c000e84f:	90                   	nop

c000e850 <VCache::write(unsigned long long, int, void*)>:
c000e850:	55                   	push   ebp
c000e851:	57                   	push   edi
c000e852:	56                   	push   esi
c000e853:	53                   	push   ebx
c000e854:	83 ec 1c             	sub    esp,0x1c
c000e857:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e85b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e85f:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000e863:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e867:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000e86b:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000e86f:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000e873:	74 07                	je     c000e87c <VCache::write(unsigned long long, int, void*)+0x2c>
c000e875:	53                   	push   ebx
c000e876:	e8 f9 fe ff ff       	call   c000e774 <VCache::invalidateReadBuffer()>
c000e87b:	58                   	pop    eax
c000e87c:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000e880:	74 62                	je     c000e8e4 <VCache::write(unsigned long long, int, void*)+0x94>
c000e882:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000e885:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000e889:	99                   	cdq    
c000e88a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e88e:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c000e891:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c000e894:	31 c1                	xor    ecx,eax
c000e896:	89 d0                	mov    eax,edx
c000e898:	89 ca                	mov    edx,ecx
c000e89a:	31 e8                	xor    eax,ebp
c000e89c:	09 c2                	or     edx,eax
c000e89e:	75 38                	jne    c000e8d8 <VCache::write(unsigned long long, int, void*)+0x88>
c000e8a0:	83 ff 01             	cmp    edi,0x1
c000e8a3:	75 33                	jne    c000e8d8 <VCache::write(unsigned long long, int, void*)+0x88>
c000e8a5:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e8a8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e8ac:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000e8b2:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000e8b5:	0f af c8             	imul   ecx,eax
c000e8b8:	01 cf                	add    edi,ecx
c000e8ba:	89 c1                	mov    ecx,eax
c000e8bc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e8be:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000e8c1:	40                   	inc    eax
c000e8c2:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000e8c5:	83 f8 50             	cmp    eax,0x50
c000e8c8:	75 6a                	jne    c000e934 <VCache::write(unsigned long long, int, void*)+0xe4>
c000e8ca:	83 ec 0c             	sub    esp,0xc
c000e8cd:	53                   	push   ebx
c000e8ce:	e8 b1 fe ff ff       	call   c000e784 <VCache::writeWriteBuffer()>
c000e8d3:	83 c4 10             	add    esp,0x10
c000e8d6:	eb 5c                	jmp    c000e934 <VCache::write(unsigned long long, int, void*)+0xe4>
c000e8d8:	83 ec 0c             	sub    esp,0xc
c000e8db:	53                   	push   ebx
c000e8dc:	e8 a3 fe ff ff       	call   c000e784 <VCache::writeWriteBuffer()>
c000e8e1:	83 c4 10             	add    esp,0x10
c000e8e4:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e8e7:	83 ff 4f             	cmp    edi,0x4f
c000e8ea:	7f 20                	jg     c000e90c <VCache::write(unsigned long long, int, void*)+0xbc>
c000e8ec:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c000e8ef:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e8f3:	89 6b 20             	mov    DWORD PTR [ebx+0x20],ebp
c000e8f6:	89 53 1c             	mov    DWORD PTR [ebx+0x1c],edx
c000e8f9:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c000e8fd:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000e900:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000e906:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e908:	eb 2a                	jmp    c000e934 <VCache::write(unsigned long long, int, void*)+0xe4>
c000e90a:	66 90                	xchg   ax,ax
c000e90c:	8b 10                	mov    edx,DWORD PTR [eax]
c000e90e:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c000e912:	89 7c 24 3c          	mov    DWORD PTR [esp+0x3c],edi
c000e916:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000e91a:	89 6c 24 38          	mov    DWORD PTR [esp+0x38],ebp
c000e91e:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
c000e922:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e926:	8b 42 2c             	mov    eax,DWORD PTR [edx+0x2c]
c000e929:	83 c4 1c             	add    esp,0x1c
c000e92c:	5b                   	pop    ebx
c000e92d:	5e                   	pop    esi
c000e92e:	5f                   	pop    edi
c000e92f:	5d                   	pop    ebp
c000e930:	ff e0                	jmp    eax
c000e932:	66 90                	xchg   ax,ax
c000e934:	83 c4 1c             	add    esp,0x1c
c000e937:	31 c0                	xor    eax,eax
c000e939:	5b                   	pop    ebx
c000e93a:	5e                   	pop    esi
c000e93b:	5f                   	pop    edi
c000e93c:	5d                   	pop    ebp
c000e93d:	c3                   	ret    

c000e93e <VCache::read(unsigned long long, int, void*)>:
c000e93e:	55                   	push   ebp
c000e93f:	57                   	push   edi
c000e940:	56                   	push   esi
c000e941:	53                   	push   ebx
c000e942:	83 ec 1c             	sub    esp,0x1c
c000e945:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000e949:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e94d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000e951:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000e955:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000e959:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e95d:	80 7f 2c 00          	cmp    BYTE PTR [edi+0x2c],0x0
c000e961:	74 0d                	je     c000e970 <VCache::read(unsigned long long, int, void*)+0x32>
c000e963:	83 ec 0c             	sub    esp,0xc
c000e966:	57                   	push   edi
c000e967:	e8 18 fe ff ff       	call   c000e784 <VCache::writeWriteBuffer()>
c000e96c:	83 c4 10             	add    esp,0x10
c000e96f:	90                   	nop
c000e970:	83 fd 01             	cmp    ebp,0x1
c000e973:	0f 85 93 00 00 00    	jne    c000ea0c <VCache::read(unsigned long long, int, void*)+0xce>
c000e979:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e97c:	89 04 24             	mov    DWORD PTR [esp],eax
c000e97f:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c000e986:	0f 85 80 00 00 00    	jne    c000ea0c <VCache::read(unsigned long long, int, void*)+0xce>
c000e98c:	8b 6f 40             	mov    ebp,DWORD PTR [edi+0x40]
c000e98f:	89 e9                	mov    ecx,ebp
c000e991:	f7 d9                	neg    ecx
c000e993:	89 c8                	mov    eax,ecx
c000e995:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000e999:	c1 f8 1f             	sar    eax,0x1f
c000e99c:	21 d9                	and    ecx,ebx
c000e99e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e9a2:	89 c8                	mov    eax,ecx
c000e9a4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e9a8:	21 f1                	and    ecx,esi
c000e9aa:	80 7f 3c 00          	cmp    BYTE PTR [edi+0x3c],0x0
c000e9ae:	89 ca                	mov    edx,ecx
c000e9b0:	74 2e                	je     c000e9e0 <VCache::read(unsigned long long, int, void*)+0xa2>
c000e9b2:	39 4f 34             	cmp    DWORD PTR [edi+0x34],ecx
c000e9b5:	75 29                	jne    c000e9e0 <VCache::read(unsigned long long, int, void*)+0xa2>
c000e9b7:	39 47 30             	cmp    DWORD PTR [edi+0x30],eax
c000e9ba:	75 24                	jne    c000e9e0 <VCache::read(unsigned long long, int, void*)+0xa2>
c000e9bc:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e9bf:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000e9c5:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c000e9c8:	8d 70 ff             	lea    esi,[eax-0x1]
c000e9cb:	21 f3                	and    ebx,esi
c000e9cd:	0f af d9             	imul   ebx,ecx
c000e9d0:	03 5f 38             	add    ebx,DWORD PTR [edi+0x38]
c000e9d3:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000e9d7:	89 de                	mov    esi,ebx
c000e9d9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e9db:	31 c0                	xor    eax,eax
c000e9dd:	eb 61                	jmp    c000ea40 <VCache::read(unsigned long long, int, void*)+0x102>
c000e9df:	90                   	nop
c000e9e0:	83 ec 0c             	sub    esp,0xc
c000e9e3:	c6 47 3c 01          	mov    BYTE PTR [edi+0x3c],0x1
c000e9e7:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000e9eb:	89 47 30             	mov    DWORD PTR [edi+0x30],eax
c000e9ee:	89 57 34             	mov    DWORD PTR [edi+0x34],edx
c000e9f1:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e9f3:	ff 77 38             	push   DWORD PTR [edi+0x38]
c000e9f6:	55                   	push   ebp
c000e9f7:	52                   	push   edx
c000e9f8:	50                   	push   eax
c000e9f9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e9fd:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c000ea00:	83 c4 20             	add    esp,0x20
c000ea03:	85 c0                	test   eax,eax
c000ea05:	75 39                	jne    c000ea40 <VCache::read(unsigned long long, int, void*)+0x102>
c000ea07:	eb b3                	jmp    c000e9bc <VCache::read(unsigned long long, int, void*)+0x7e>
c000ea09:	8d 76 00             	lea    esi,[esi+0x0]
c000ea0c:	83 ec 0c             	sub    esp,0xc
c000ea0f:	57                   	push   edi
c000ea10:	e8 5f fd ff ff       	call   c000e774 <VCache::invalidateReadBuffer()>
c000ea15:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000ea18:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ea1c:	8b 10                	mov    edx,DWORD PTR [eax]
c000ea1e:	89 6c 24 4c          	mov    DWORD PTR [esp+0x4c],ebp
c000ea22:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c000ea26:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000ea2a:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c000ea2e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000ea32:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c000ea35:	83 c4 2c             	add    esp,0x2c
c000ea38:	5b                   	pop    ebx
c000ea39:	5e                   	pop    esi
c000ea3a:	5f                   	pop    edi
c000ea3b:	5d                   	pop    ebp
c000ea3c:	ff e0                	jmp    eax
c000ea3e:	66 90                	xchg   ax,ax
c000ea40:	83 c4 1c             	add    esp,0x1c
c000ea43:	5b                   	pop    ebx
c000ea44:	5e                   	pop    esi
c000ea45:	5f                   	pop    edi
c000ea46:	5d                   	pop    ebp
c000ea47:	c3                   	ret    

c000ea48 <Video::putrect(int, int, int, int, unsigned int)>:
c000ea48:	55                   	push   ebp
c000ea49:	57                   	push   edi
c000ea4a:	56                   	push   esi
c000ea4b:	53                   	push   ebx
c000ea4c:	83 ec 1c             	sub    esp,0x1c
c000ea4f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000ea53:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ea57:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000ea5b:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000ea5f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000ea63:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ea67:	01 df                	add    edi,ebx
c000ea69:	39 fb                	cmp    ebx,edi
c000ea6b:	7d 1f                	jge    c000ea8c <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000ea6d:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000ea71:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000ea75:	7d 12                	jge    c000ea89 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000ea77:	8b 16                	mov    edx,DWORD PTR [esi]
c000ea79:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ea7d:	53                   	push   ebx
c000ea7e:	55                   	push   ebp
c000ea7f:	45                   	inc    ebp
c000ea80:	56                   	push   esi
c000ea81:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000ea84:	83 c4 10             	add    esp,0x10
c000ea87:	eb e8                	jmp    c000ea71 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000ea89:	43                   	inc    ebx
c000ea8a:	eb dd                	jmp    c000ea69 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000ea8c:	83 c4 1c             	add    esp,0x1c
c000ea8f:	5b                   	pop    ebx
c000ea90:	5e                   	pop    esi
c000ea91:	5f                   	pop    edi
c000ea92:	5d                   	pop    ebp
c000ea93:	c3                   	ret    

c000ea94 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000ea94:	55                   	push   ebp
c000ea95:	57                   	push   edi
c000ea96:	31 ff                	xor    edi,edi
c000ea98:	56                   	push   esi
c000ea99:	53                   	push   ebx
c000ea9a:	83 ec 1c             	sub    esp,0x1c
c000ea9d:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000eaa1:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000eaa5:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000eaac:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000eab1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000eab5:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000eab9:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000eabd:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000eac0:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000eac4:	01 f9                	add    ecx,edi
c000eac6:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000eaca:	7d 2f                	jge    c000eafb <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000eacc:	31 f6                	xor    esi,esi
c000eace:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000ead2:	01 f2                	add    edx,esi
c000ead4:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000ead8:	7d 1a                	jge    c000eaf4 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000eada:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000eadd:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000eae0:	46                   	inc    esi
c000eae1:	51                   	push   ecx
c000eae2:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000eae6:	52                   	push   edx
c000eae7:	55                   	push   ebp
c000eae8:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000eaeb:	83 c4 10             	add    esp,0x10
c000eaee:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000eaf2:	eb da                	jmp    c000eace <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000eaf4:	47                   	inc    edi
c000eaf5:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000eaf9:	eb c5                	jmp    c000eac0 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000eafb:	83 c4 1c             	add    esp,0x1c
c000eafe:	5b                   	pop    ebx
c000eaff:	5e                   	pop    esi
c000eb00:	5f                   	pop    edi
c000eb01:	5d                   	pop    ebp
c000eb02:	c3                   	ret    
c000eb03:	90                   	nop

c000eb04 <Video::blit(unsigned int*, int, int, int, int)>:
c000eb04:	55                   	push   ebp
c000eb05:	57                   	push   edi
c000eb06:	56                   	push   esi
c000eb07:	53                   	push   ebx
c000eb08:	83 ec 1c             	sub    esp,0x1c
c000eb0b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000eb0f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000eb13:	85 c0                	test   eax,eax
c000eb15:	79 02                	jns    c000eb19 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c000eb17:	31 c0                	xor    eax,eax
c000eb19:	c1 e0 02             	shl    eax,0x2
c000eb1c:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000eb20:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000eb24:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000eb28:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000eb2c:	39 d8                	cmp    eax,ebx
c000eb2e:	7e 49                	jle    c000eb79 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000eb30:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000eb36:	7c 41                	jl     c000eb79 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000eb38:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000eb3c:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000eb40:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000eb44:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c000eb48:	39 f9                	cmp    ecx,edi
c000eb4a:	7e 22                	jle    c000eb6e <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c000eb4c:	83 c5 04             	add    ebp,0x4
c000eb4f:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000eb55:	7c 14                	jl     c000eb6b <Video::blit(unsigned int*, int, int, int, int)+0x67>
c000eb57:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000eb59:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c000eb5c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000eb60:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000eb64:	56                   	push   esi
c000eb65:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000eb68:	83 c4 10             	add    esp,0x10
c000eb6b:	47                   	inc    edi
c000eb6c:	eb d2                	jmp    c000eb40 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c000eb6e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eb72:	43                   	inc    ebx
c000eb73:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000eb77:	eb ab                	jmp    c000eb24 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c000eb79:	83 c4 1c             	add    esp,0x1c
c000eb7c:	5b                   	pop    ebx
c000eb7d:	5e                   	pop    esi
c000eb7e:	5f                   	pop    edi
c000eb7f:	5d                   	pop    ebp
c000eb80:	c3                   	ret    
c000eb81:	90                   	nop

c000eb82 <Video::clearScreen(unsigned int)>:
c000eb82:	57                   	push   edi
c000eb83:	56                   	push   esi
c000eb84:	53                   	push   ebx
c000eb85:	31 db                	xor    ebx,ebx
c000eb87:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000eb8b:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000eb91:	7e 1f                	jle    c000ebb2 <Video::clearScreen(unsigned int)+0x30>
c000eb93:	31 ff                	xor    edi,edi
c000eb95:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000eb9b:	7e 12                	jle    c000ebaf <Video::clearScreen(unsigned int)+0x2d>
c000eb9d:	8b 06                	mov    eax,DWORD PTR [esi]
c000eb9f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000eba3:	53                   	push   ebx
c000eba4:	57                   	push   edi
c000eba5:	47                   	inc    edi
c000eba6:	56                   	push   esi
c000eba7:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000ebaa:	83 c4 10             	add    esp,0x10
c000ebad:	eb e6                	jmp    c000eb95 <Video::clearScreen(unsigned int)+0x13>
c000ebaf:	43                   	inc    ebx
c000ebb0:	eb d9                	jmp    c000eb8b <Video::clearScreen(unsigned int)+0x9>
c000ebb2:	5b                   	pop    ebx
c000ebb3:	5e                   	pop    esi
c000ebb4:	5f                   	pop    edi
c000ebb5:	c3                   	ret    

c000ebb6 <Video::putpixel(int, int, unsigned int)>:
c000ebb6:	c7 44 24 04 08 1f 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021f08
c000ebbe:	e9 d0 2a 00 00       	jmp    c0011693 <KePanic(char const*)>
c000ebc3:	90                   	nop

c000ebc4 <Video::readPixelApprox(int, int)>:
c000ebc4:	83 ec 18             	sub    esp,0x18
c000ebc7:	68 29 1f 02 c0       	push   0xc0021f29
c000ebcc:	e8 c2 2a 00 00       	call   c0011693 <KePanic(char const*)>
c000ebd1:	31 c0                	xor    eax,eax
c000ebd3:	83 c4 1c             	add    esp,0x1c
c000ebd6:	c3                   	ret    
c000ebd7:	90                   	nop

c000ebd8 <Video::Video(char const*)>:
c000ebd8:	83 ec 0c             	sub    esp,0xc
c000ebdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ebdf:	83 ec 08             	sub    esp,0x8
c000ebe2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ebe6:	50                   	push   eax
c000ebe7:	e8 e6 df ff ff       	call   c000cbd2 <Device::Device(char const*)>
c000ebec:	83 c4 10             	add    esp,0x10
c000ebef:	ba a4 1f 02 c0       	mov    edx,0xc0021fa4
c000ebf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ebf8:	89 10                	mov    DWORD PTR [eax],edx
c000ebfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ebfe:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000ec08:	90                   	nop
c000ec09:	83 c4 0c             	add    esp,0xc
c000ec0c:	c3                   	ret    
c000ec0d:	90                   	nop

c000ec0e <Video::~Video()>:
c000ec0e:	83 ec 0c             	sub    esp,0xc
c000ec11:	ba a4 1f 02 c0       	mov    edx,0xc0021fa4
c000ec16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ec1a:	89 10                	mov    DWORD PTR [eax],edx
c000ec1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ec20:	83 ec 0c             	sub    esp,0xc
c000ec23:	50                   	push   eax
c000ec24:	e8 13 dd ff ff       	call   c000c93c <Device::~Device()>
c000ec29:	83 c4 10             	add    esp,0x10
c000ec2c:	90                   	nop
c000ec2d:	83 c4 0c             	add    esp,0xc
c000ec30:	c3                   	ret    
c000ec31:	90                   	nop

c000ec32 <Video::~Video()>:
c000ec32:	83 ec 0c             	sub    esp,0xc
c000ec35:	83 ec 0c             	sub    esp,0xc
c000ec38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ec3c:	e8 cd ff ff ff       	call   c000ec0e <Video::~Video()>
c000ec41:	83 c4 10             	add    esp,0x10
c000ec44:	83 ec 08             	sub    esp,0x8
c000ec47:	68 64 01 00 00       	push   0x164
c000ec4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ec50:	e8 c3 bb ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000ec55:	83 c4 10             	add    esp,0x10
c000ec58:	83 c4 0c             	add    esp,0xc
c000ec5b:	c3                   	ret    

c000ec5c <Video::isMonochrome()>:
c000ec5c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ec60:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000ec66:	c3                   	ret    
c000ec67:	90                   	nop

c000ec68 <Video::getWidth()>:
c000ec68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ec6c:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000ec72:	c3                   	ret    
c000ec73:	90                   	nop

c000ec74 <Video::getHeight()>:
c000ec74:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ec78:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000ec7e:	c3                   	ret    
c000ec7f:	90                   	nop

c000ec80 <Video::drawCursor(int, int, unsigned int*, int)>:
c000ec80:	55                   	push   ebp
c000ec81:	57                   	push   edi
c000ec82:	56                   	push   esi
c000ec83:	53                   	push   ebx
c000ec84:	83 ec 2c             	sub    esp,0x2c
c000ec87:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000ec8b:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000ec8f:	83 f8 01             	cmp    eax,0x1
c000ec92:	19 c9                	sbb    ecx,ecx
c000ec94:	31 db                	xor    ebx,ebx
c000ec96:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000ec9a:	89 cd                	mov    ebp,ecx
c000ec9c:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000eca4:	f7 d5                	not    ebp
c000eca6:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c000ecac:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000ecb0:	01 d8                	add    eax,ebx
c000ecb2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ecb6:	56                   	push   esi
c000ecb7:	e8 b8 ff ff ff       	call   c000ec74 <Video::getHeight()>
c000ecbc:	59                   	pop    ecx
c000ecbd:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000ecc1:	7e 70                	jle    c000ed33 <Video::drawCursor(int, int, unsigned int*, int)+0xb3>
c000ecc3:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000ecc7:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000eccb:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000ecce:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ecd2:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000ecd6:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000ecdd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ece1:	89 f8                	mov    eax,edi
c000ece3:	83 c0 20             	add    eax,0x20
c000ece6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ecea:	56                   	push   esi
c000eceb:	e8 78 ff ff ff       	call   c000ec68 <Video::getWidth()>
c000ecf0:	5a                   	pop    edx
c000ecf1:	39 c7                	cmp    edi,eax
c000ecf3:	7d 34                	jge    c000ed29 <Video::drawCursor(int, int, unsigned int*, int)+0xa9>
c000ecf5:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000ecfa:	74 05                	je     c000ed01 <Video::drawCursor(int, int, unsigned int*, int)+0x81>
c000ecfc:	8b 06                	mov    eax,DWORD PTR [esi]
c000ecfe:	55                   	push   ebp
c000ecff:	eb 0d                	jmp    c000ed0e <Video::drawCursor(int, int, unsigned int*, int)+0x8e>
c000ed01:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000ed06:	74 12                	je     c000ed1a <Video::drawCursor(int, int, unsigned int*, int)+0x9a>
c000ed08:	8b 06                	mov    eax,DWORD PTR [esi]
c000ed0a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ed0e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ed12:	57                   	push   edi
c000ed13:	56                   	push   esi
c000ed14:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000ed17:	83 c4 10             	add    esp,0x10
c000ed1a:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000ed1e:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000ed22:	47                   	inc    edi
c000ed23:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000ed27:	75 c1                	jne    c000ecea <Video::drawCursor(int, int, unsigned int*, int)+0x6a>
c000ed29:	43                   	inc    ebx
c000ed2a:	83 fb 20             	cmp    ebx,0x20
c000ed2d:	0f 85 79 ff ff ff    	jne    c000ecac <Video::drawCursor(int, int, unsigned int*, int)+0x2c>
c000ed33:	83 c4 2c             	add    esp,0x2c
c000ed36:	5b                   	pop    ebx
c000ed37:	5e                   	pop    esi
c000ed38:	5f                   	pop    edi
c000ed39:	5d                   	pop    ebp
c000ed3a:	c3                   	ret    
c000ed3b:	90                   	nop

c000ed3c <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000ed3c:	55                   	push   ebp
c000ed3d:	57                   	push   edi
c000ed3e:	56                   	push   esi
c000ed3f:	53                   	push   ebx
c000ed40:	83 ec 28             	sub    esp,0x28
c000ed43:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000ed47:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c000ed4b:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c000ed4f:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c000ed53:	c1 e6 08             	shl    esi,0x8
c000ed56:	01 c6                	add    esi,eax
c000ed58:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c000ed5c:	c1 e0 08             	shl    eax,0x8
c000ed5f:	01 d0                	add    eax,edx
c000ed61:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ed65:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ed69:	0f af c6             	imul   eax,esi
c000ed6c:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000ed73:	50                   	push   eax
c000ed74:	e8 3d 8d ff ff       	call   c0007ab6 <malloc>
c000ed79:	83 c4 10             	add    esp,0x10
c000ed7c:	89 c7                	mov    edi,eax
c000ed7e:	85 c0                	test   eax,eax
c000ed80:	75 10                	jne    c000ed92 <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c000ed82:	83 ec 0c             	sub    esp,0xc
c000ed85:	68 54 1f 02 c0       	push   0xc0021f54
c000ed8a:	e8 04 29 00 00       	call   c0011693 <KePanic(char const*)>
c000ed8f:	83 c4 10             	add    esp,0x10
c000ed92:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000ed96:	ba 12 00 00 00       	mov    edx,0x12
c000ed9b:	85 c0                	test   eax,eax
c000ed9d:	74 11                	je     c000edb0 <Video::tgaParse(unsigned char*, int, int*, int*)+0x74>
c000ed9f:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c000eda3:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000eda7:	c1 fa 03             	sar    edx,0x3
c000edaa:	0f af d1             	imul   edx,ecx
c000edad:	83 c2 12             	add    edx,0x12
c000edb0:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c000edb4:	74 04                	je     c000edba <Video::tgaParse(unsigned char*, int, int*, int*)+0x7e>
c000edb6:	85 f6                	test   esi,esi
c000edb8:	75 12                	jne    c000edcc <Video::tgaParse(unsigned char*, int, int*, int*)+0x90>
c000edba:	83 ec 0c             	sub    esp,0xc
c000edbd:	68 64 1f 02 c0       	push   0xc0021f64
c000edc2:	e8 7e bb ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000edc7:	e9 b8 00 00 00       	jmp    c000ee84 <Video::tgaParse(unsigned char*, int, int*, int*)+0x148>
c000edcc:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000edd0:	83 f9 02             	cmp    ecx,0x2
c000edd3:	0f 85 96 00 00 00    	jne    c000ee6f <Video::tgaParse(unsigned char*, int, int*, int*)+0x133>
c000edd9:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000edde:	75 0e                	jne    c000edee <Video::tgaParse(unsigned char*, int, int*, int*)+0xb2>
c000ede0:	85 c0                	test   eax,eax
c000ede2:	75 0a                	jne    c000edee <Video::tgaParse(unsigned char*, int, int*, int*)+0xb2>
c000ede4:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000ede7:	83 e8 18             	sub    eax,0x18
c000edea:	a8 f7                	test   al,0xf7
c000edec:	74 0a                	je     c000edf8 <Video::tgaParse(unsigned char*, int, int*, int*)+0xbc>
c000edee:	83 ec 0c             	sub    esp,0xc
c000edf1:	68 79 1f 02 c0       	push   0xc0021f79
c000edf6:	eb 7f                	jmp    c000ee77 <Video::tgaParse(unsigned char*, int, int*, int*)+0x13b>
c000edf8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000ee00:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000ee08:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c000ee0c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000ee14:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000ee18:	75 0c                	jne    c000ee26 <Video::tgaParse(unsigned char*, int, int*, int*)+0xea>
c000ee1a:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c000ee1f:	c1 e0 18             	shl    eax,0x18
c000ee22:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ee26:	45                   	inc    ebp
c000ee27:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c000ee2c:	c1 e1 10             	shl    ecx,0x10
c000ee2f:	89 c8                	mov    eax,ecx
c000ee31:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c000ee36:	c1 e1 08             	shl    ecx,0x8
c000ee39:	09 c1                	or     ecx,eax
c000ee3b:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c000ee3f:	09 c1                	or     ecx,eax
c000ee41:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c000ee45:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c000ee49:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000ee4d:	c1 f8 03             	sar    eax,0x3
c000ee50:	01 c2                	add    edx,eax
c000ee52:	89 e8                	mov    eax,ebp
c000ee54:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000ee58:	39 c6                	cmp    esi,eax
c000ee5a:	7f b0                	jg     c000ee0c <Video::tgaParse(unsigned char*, int, int*, int*)+0xd0>
c000ee5c:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000ee60:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ee64:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000ee67:	7e 22                	jle    c000ee8b <Video::tgaParse(unsigned char*, int, int*, int*)+0x14f>
c000ee69:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c000ee6d:	eb 99                	jmp    c000ee08 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcc>
c000ee6f:	50                   	push   eax
c000ee70:	50                   	push   eax
c000ee71:	51                   	push   ecx
c000ee72:	68 87 1f 02 c0       	push   0xc0021f87
c000ee77:	e8 c9 ba ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000ee7c:	89 3c 24             	mov    DWORD PTR [esp],edi
c000ee7f:	e8 42 8c ff ff       	call   c0007ac6 <free>
c000ee84:	83 c4 10             	add    esp,0x10
c000ee87:	31 ff                	xor    edi,edi
c000ee89:	eb 0f                	jmp    c000ee9a <Video::tgaParse(unsigned char*, int, int*, int*)+0x15e>
c000ee8b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ee8f:	89 30                	mov    DWORD PTR [eax],esi
c000ee91:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ee95:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000ee98:	89 30                	mov    DWORD PTR [eax],esi
c000ee9a:	83 c4 1c             	add    esp,0x1c
c000ee9d:	89 f8                	mov    eax,edi
c000ee9f:	5b                   	pop    ebx
c000eea0:	5e                   	pop    esi
c000eea1:	5f                   	pop    edi
c000eea2:	5d                   	pop    ebp
c000eea3:	c3                   	ret    

c000eea4 <Video::putTGA(int, int, unsigned char*, int)>:
c000eea4:	55                   	push   ebp
c000eea5:	57                   	push   edi
c000eea6:	56                   	push   esi
c000eea7:	53                   	push   ebx
c000eea8:	83 ec 28             	sub    esp,0x28
c000eeab:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000eeaf:	8d 44 24 18          	lea    eax,[esp+0x18]
c000eeb3:	50                   	push   eax
c000eeb4:	8d 44 24 18          	lea    eax,[esp+0x18]
c000eeb8:	50                   	push   eax
c000eeb9:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000eebd:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000eec1:	56                   	push   esi
c000eec2:	e8 75 fe ff ff       	call   c000ed3c <Video::tgaParse(unsigned char*, int, int*, int*)>
c000eec7:	83 c4 20             	add    esp,0x20
c000eeca:	85 c0                	test   eax,eax
c000eecc:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000eed0:	74 35                	je     c000ef07 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000eed2:	89 c7                	mov    edi,eax
c000eed4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000eed8:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000eedc:	39 d8                	cmp    eax,ebx
c000eede:	7e 27                	jle    c000ef07 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000eee0:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000eee4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000eee8:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000eeec:	39 e8                	cmp    eax,ebp
c000eeee:	7e 14                	jle    c000ef04 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c000eef0:	8b 06                	mov    eax,DWORD PTR [esi]
c000eef2:	83 c7 04             	add    edi,0x4
c000eef5:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c000eef8:	53                   	push   ebx
c000eef9:	55                   	push   ebp
c000eefa:	45                   	inc    ebp
c000eefb:	56                   	push   esi
c000eefc:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000eeff:	83 c4 10             	add    esp,0x10
c000ef02:	eb e0                	jmp    c000eee4 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000ef04:	43                   	inc    ebx
c000ef05:	eb cd                	jmp    c000eed4 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000ef07:	83 c4 1c             	add    esp,0x1c
c000ef0a:	5b                   	pop    ebx
c000ef0b:	5e                   	pop    esi
c000ef0c:	5f                   	pop    edi
c000ef0d:	5d                   	pop    ebp
c000ef0e:	c3                   	ret    
c000ef0f:	90                   	nop

c000ef10 <ACPI::close(int, int, void*)>:
c000ef10:	83 ec 1c             	sub    esp,0x1c
c000ef13:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c000ef1b:	74 0b                	je     c000ef28 <ACPI::close(int, int, void*)+0x18>
c000ef1d:	b8 00 00 00 00       	mov    eax,0x0
c000ef22:	e9 99 00 00 00       	jmp    c000efc0 <ACPI::close(int, int, void*)+0xb0>
c000ef27:	90                   	nop
c000ef28:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000ef2d:	75 29                	jne    c000ef58 <ACPI::close(int, int, void*)+0x48>
c000ef2f:	a1 08 b9 02 c0       	mov    eax,ds:0xc002b908
c000ef34:	85 c0                	test   eax,eax
c000ef36:	74 08                	je     c000ef40 <ACPI::close(int, int, void*)+0x30>
c000ef38:	a1 08 b9 02 c0       	mov    eax,ds:0xc002b908
c000ef3d:	ff d0                	call   eax
c000ef3f:	90                   	nop
c000ef40:	83 ec 0c             	sub    esp,0xc
c000ef43:	68 e8 1f 02 c0       	push   0xc0021fe8
c000ef48:	e8 46 27 00 00       	call   c0011693 <KePanic(char const*)>
c000ef4d:	83 c4 10             	add    esp,0x10
c000ef50:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ef55:	eb 69                	jmp    c000efc0 <ACPI::close(int, int, void*)+0xb0>
c000ef57:	90                   	nop
c000ef58:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000ef5d:	75 59                	jne    c000efb8 <ACPI::close(int, int, void*)+0xa8>
c000ef5f:	a1 04 b9 02 c0       	mov    eax,ds:0xc002b904
c000ef64:	85 c0                	test   eax,eax
c000ef66:	74 08                	je     c000ef70 <ACPI::close(int, int, void*)+0x60>
c000ef68:	a1 04 b9 02 c0       	mov    eax,ds:0xc002b904
c000ef6d:	ff d0                	call   eax
c000ef6f:	90                   	nop
c000ef70:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c000ef75:	8d 76 00             	lea    esi,[esi+0x0]
c000ef78:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000ef7d:	83 e0 02             	and    eax,0x2
c000ef80:	74 1e                	je     c000efa0 <ACPI::close(int, int, void*)+0x90>
c000ef82:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c000ef89:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ef8d:	89 c2                	mov    edx,eax
c000ef8f:	ec                   	in     al,dx
c000ef90:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000ef94:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000ef98:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000ef9c:	eb da                	jmp    c000ef78 <ACPI::close(int, int, void*)+0x68>
c000ef9e:	66 90                	xchg   ax,ax
c000efa0:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c000efa7:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c000efac:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000efb0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000efb4:	ee                   	out    dx,al
c000efb5:	8d 76 00             	lea    esi,[esi+0x0]
c000efb8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000efbd:	8d 76 00             	lea    esi,[esi+0x0]
c000efc0:	83 c4 1c             	add    esp,0x1c
c000efc3:	c3                   	ret    

c000efc4 <findRSDP()>:
c000efc4:	83 ec 1c             	sub    esp,0x1c
c000efc7:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000efcc:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000efd2:	83 e0 04             	and    eax,0x4
c000efd5:	0f b6 c0             	movzx  eax,al
c000efd8:	85 c0                	test   eax,eax
c000efda:	75 08                	jne    c000efe4 <findRSDP()+0x20>
c000efdc:	b8 00 00 00 00       	mov    eax,0x0
c000efe1:	eb 75                	jmp    c000f058 <findRSDP()+0x94>
c000efe3:	90                   	nop
c000efe4:	a1 e8 6e 02 c0       	mov    eax,ds:0xc0026ee8
c000efe9:	3d ff 07 00 00       	cmp    eax,0x7ff
c000efee:	7f 1c                	jg     c000f00c <findRSDP()+0x48>
c000eff0:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000eff5:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000effb:	83 e2 fb             	and    edx,0xfffffffb
c000effe:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f004:	b8 00 00 00 00       	mov    eax,0x0
c000f009:	eb 4d                	jmp    c000f058 <findRSDP()+0x94>
c000f00b:	90                   	nop
c000f00c:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c000f014:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c000f01c:	77 32                	ja     c000f050 <findRSDP()+0x8c>
c000f01e:	83 ec 04             	sub    esp,0x4
c000f021:	6a 08                	push   0x8
c000f023:	68 83 20 02 c0       	push   0xc0022083
c000f028:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f02c:	e8 4f 13 ff ff       	call   c0000380 <memcmp>
c000f031:	83 c4 10             	add    esp,0x10
c000f034:	85 c0                	test   eax,eax
c000f036:	0f 94 c0             	sete   al
c000f039:	0f b6 c0             	movzx  eax,al
c000f03c:	85 c0                	test   eax,eax
c000f03e:	74 08                	je     c000f048 <findRSDP()+0x84>
c000f040:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f044:	eb 12                	jmp    c000f058 <findRSDP()+0x94>
c000f046:	66 90                	xchg   ax,ax
c000f048:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c000f04d:	eb c5                	jmp    c000f014 <findRSDP()+0x50>
c000f04f:	90                   	nop
c000f050:	b8 00 00 00 00       	mov    eax,0x0
c000f055:	8d 76 00             	lea    esi,[esi+0x0]
c000f058:	83 c4 1c             	add    esp,0x1c
c000f05b:	c3                   	ret    

c000f05c <loadACPITables(unsigned char*)>:
c000f05c:	57                   	push   edi
c000f05d:	56                   	push   esi
c000f05e:	53                   	push   ebx
c000f05f:	83 ec 60             	sub    esp,0x60
c000f062:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f067:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f06d:	83 e0 04             	and    eax,0x4
c000f070:	0f b6 c0             	movzx  eax,al
c000f073:	85 c0                	test   eax,eax
c000f075:	0f 84 41 02 00 00    	je     c000f2bc <loadACPITables(unsigned char*)+0x260>
c000f07b:	a0 20 bb 02 c0       	mov    al,ds:0xc002bb20
c000f080:	0f b6 c0             	movzx  eax,al
c000f083:	85 c0                	test   eax,eax
c000f085:	74 79                	je     c000f100 <loadACPITables(unsigned char*)+0xa4>
c000f087:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000f08b:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000f08f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000f093:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f096:	83 e8 24             	sub    eax,0x24
c000f099:	c1 e8 03             	shr    eax,0x3
c000f09c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f0a0:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000f0a8:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000f0ac:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000f0b0:	0f 8d ba 00 00 00    	jge    c000f170 <loadACPITables(unsigned char*)+0x114>
c000f0b6:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000f0ba:	83 c0 24             	add    eax,0x24
c000f0bd:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000f0c1:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f0c5:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f0c9:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000f0cd:	c1 e0 03             	shl    eax,0x3
c000f0d0:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000f0d4:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f0d8:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000f0db:	8b 00                	mov    eax,DWORD PTR [eax]
c000f0dd:	89 c1                	mov    ecx,eax
c000f0df:	a1 0c b9 02 c0       	mov    eax,ds:0xc002b90c
c000f0e4:	8d 50 01             	lea    edx,[eax+0x1]
c000f0e7:	89 15 0c b9 02 c0    	mov    DWORD PTR ds:0xc002b90c,edx
c000f0ed:	89 ca                	mov    edx,ecx
c000f0ef:	89 14 c5 24 b9 02 c0 	mov    DWORD PTR [eax*8-0x3ffd46dc],edx
c000f0f6:	83 44 24 5c 01       	add    DWORD PTR [esp+0x5c],0x1
c000f0fb:	eb ab                	jmp    c000f0a8 <loadACPITables(unsigned char*)+0x4c>
c000f0fd:	8d 76 00             	lea    esi,[esi+0x0]
c000f100:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000f104:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f108:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f10c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f10f:	83 e8 24             	sub    eax,0x24
c000f112:	c1 e8 02             	shr    eax,0x2
c000f115:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f119:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000f121:	8d 76 00             	lea    esi,[esi+0x0]
c000f124:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000f128:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000f12c:	7d 42                	jge    c000f170 <loadACPITables(unsigned char*)+0x114>
c000f12e:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000f132:	83 c0 24             	add    eax,0x24
c000f135:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000f139:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000f13d:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000f141:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000f145:	c1 e0 02             	shl    eax,0x2
c000f148:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000f14c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f150:	8b 08                	mov    ecx,DWORD PTR [eax]
c000f152:	a1 0c b9 02 c0       	mov    eax,ds:0xc002b90c
c000f157:	8d 50 01             	lea    edx,[eax+0x1]
c000f15a:	89 15 0c b9 02 c0    	mov    DWORD PTR ds:0xc002b90c,edx
c000f160:	89 ca                	mov    edx,ecx
c000f162:	89 14 c5 24 b9 02 c0 	mov    DWORD PTR [eax*8-0x3ffd46dc],edx
c000f169:	83 44 24 58 01       	add    DWORD PTR [esp+0x58],0x1
c000f16e:	eb b4                	jmp    c000f124 <loadACPITables(unsigned char*)+0xc8>
c000f170:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000f178:	a1 0c b9 02 c0       	mov    eax,ds:0xc002b90c
c000f17d:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000f181:	0f 8d 39 01 00 00    	jge    c000f2c0 <loadACPITables(unsigned char*)+0x264>
c000f187:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000f18b:	8b 04 c5 24 b9 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd46dc]
c000f192:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f196:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f19a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000f19e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f1a2:	25 ff 0f 00 00       	and    eax,0xfff
c000f1a7:	89 c6                	mov    esi,eax
c000f1a9:	8b 1d b0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fb0
c000f1af:	83 ec 0c             	sub    esp,0xc
c000f1b2:	6a 01                	push   0x1
c000f1b4:	e8 54 a4 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c000f1b9:	83 c4 10             	add    esp,0x10
c000f1bc:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000f1c0:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000f1c6:	83 ec 0c             	sub    esp,0xc
c000f1c9:	6a 01                	push   0x1
c000f1cb:	6a 01                	push   0x1
c000f1cd:	50                   	push   eax
c000f1ce:	52                   	push   edx
c000f1cf:	53                   	push   ebx
c000f1d0:	e8 45 ad ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000f1d5:	83 c4 20             	add    esp,0x20
c000f1d8:	09 f0                	or     eax,esi
c000f1da:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f1de:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000f1e2:	c1 e0 03             	shl    eax,0x3
c000f1e5:	05 20 b9 02 c0       	add    eax,0xc002b920
c000f1ea:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f1ee:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f1f2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f1f6:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000f1fe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f202:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f206:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f20a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f20e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000f212:	89 c6                	mov    esi,eax
c000f214:	89 d7                	mov    edi,edx
c000f216:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f218:	89 c8                	mov    eax,ecx
c000f21a:	89 fa                	mov    edx,edi
c000f21c:	89 f3                	mov    ebx,esi
c000f21e:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000f222:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000f226:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000f22a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f22e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f231:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000f235:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f239:	05 00 10 00 00       	add    eax,0x1000
c000f23e:	c1 e8 0c             	shr    eax,0xc
c000f241:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000f245:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f249:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000f24d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f251:	25 ff 0f 00 00       	and    eax,0xfff
c000f256:	89 c6                	mov    esi,eax
c000f258:	8b 1d b0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fb0
c000f25e:	83 ec 0c             	sub    esp,0xc
c000f261:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f265:	e8 a3 a3 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c000f26a:	83 c4 10             	add    esp,0x10
c000f26d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000f271:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000f277:	83 ec 0c             	sub    esp,0xc
c000f27a:	6a 01                	push   0x1
c000f27c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f280:	50                   	push   eax
c000f281:	52                   	push   edx
c000f282:	53                   	push   ebx
c000f283:	e8 92 ac ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000f288:	83 c4 20             	add    esp,0x20
c000f28b:	09 f0                	or     eax,esi
c000f28d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f291:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f295:	83 ec 0c             	sub    esp,0xc
c000f298:	50                   	push   eax
c000f299:	e8 8d a6 ff ff       	call   c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c000f29e:	83 c4 10             	add    esp,0x10
c000f2a1:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000f2a5:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000f2a9:	89 14 c5 24 b9 02 c0 	mov    DWORD PTR [eax*8-0x3ffd46dc],edx
c000f2b0:	83 44 24 54 01       	add    DWORD PTR [esp+0x54],0x1
c000f2b5:	e9 be fe ff ff       	jmp    c000f178 <loadACPITables(unsigned char*)+0x11c>
c000f2ba:	66 90                	xchg   ax,ax
c000f2bc:	90                   	nop
c000f2bd:	8d 76 00             	lea    esi,[esi+0x0]
c000f2c0:	83 c4 60             	add    esp,0x60
c000f2c3:	5b                   	pop    ebx
c000f2c4:	5e                   	pop    esi
c000f2c5:	5f                   	pop    edi
c000f2c6:	c3                   	ret    
c000f2c7:	90                   	nop

c000f2c8 <findRSDT(unsigned char*)>:
c000f2c8:	57                   	push   edi
c000f2c9:	56                   	push   esi
c000f2ca:	53                   	push   ebx
c000f2cb:	83 ec 50             	sub    esp,0x50
c000f2ce:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f2d3:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f2d9:	83 e0 04             	and    eax,0x4
c000f2dc:	0f b6 c0             	movzx  eax,al
c000f2df:	85 c0                	test   eax,eax
c000f2e1:	75 0d                	jne    c000f2f0 <findRSDT(unsigned char*)+0x28>
c000f2e3:	b8 00 00 00 00       	mov    eax,0x0
c000f2e8:	e9 2b 01 00 00       	jmp    c000f418 <findRSDT(unsigned char*)+0x150>
c000f2ed:	8d 76 00             	lea    esi,[esi+0x0]
c000f2f0:	89 e0                	mov    eax,esp
c000f2f2:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f2f6:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f2fa:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000f2fe:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000f306:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f30a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f30e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000f312:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000f316:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000f31a:	89 c6                	mov    esi,eax
c000f31c:	89 d7                	mov    edi,edx
c000f31e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f320:	89 c8                	mov    eax,ecx
c000f322:	89 fa                	mov    edx,edi
c000f324:	89 f3                	mov    ebx,esi
c000f326:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000f32a:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000f32e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000f332:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000f336:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000f33a:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000f342:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f346:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f34a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f34e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f352:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f356:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f35a:	25 ff 0f 00 00       	and    eax,0xfff
c000f35f:	89 c6                	mov    esi,eax
c000f361:	8b 1d b0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fb0
c000f367:	83 ec 0c             	sub    esp,0xc
c000f36a:	6a 02                	push   0x2
c000f36c:	e8 9c a2 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c000f371:	83 c4 10             	add    esp,0x10
c000f374:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000f378:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000f37e:	83 ec 0c             	sub    esp,0xc
c000f381:	6a 01                	push   0x1
c000f383:	6a 02                	push   0x2
c000f385:	50                   	push   eax
c000f386:	52                   	push   edx
c000f387:	53                   	push   ebx
c000f388:	e8 8d ab ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000f38d:	83 c4 20             	add    esp,0x20
c000f390:	09 f0                	or     eax,esi
c000f392:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f396:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f39a:	25 ff 0f 00 00       	and    eax,0xfff
c000f39f:	89 c6                	mov    esi,eax
c000f3a1:	8b 1d b0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fb0
c000f3a7:	83 ec 0c             	sub    esp,0xc
c000f3aa:	6a 02                	push   0x2
c000f3ac:	e8 5c a2 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c000f3b1:	83 c4 10             	add    esp,0x10
c000f3b4:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000f3b8:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000f3be:	83 ec 0c             	sub    esp,0xc
c000f3c1:	6a 01                	push   0x1
c000f3c3:	6a 02                	push   0x2
c000f3c5:	50                   	push   eax
c000f3c6:	52                   	push   edx
c000f3c7:	53                   	push   ebx
c000f3c8:	e8 4d ab ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000f3cd:	83 c4 20             	add    esp,0x20
c000f3d0:	09 f0                	or     eax,esi
c000f3d2:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f3d6:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000f3db:	85 c0                	test   eax,eax
c000f3dd:	75 11                	jne    c000f3f0 <findRSDT(unsigned char*)+0x128>
c000f3df:	c6 05 20 bb 02 c0 00 	mov    BYTE PTR ds:0xc002bb20,0x0
c000f3e6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f3ea:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f3ee:	eb 24                	jmp    c000f414 <findRSDT(unsigned char*)+0x14c>
c000f3f0:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000f3f5:	83 f8 02             	cmp    eax,0x2
c000f3f8:	75 12                	jne    c000f40c <findRSDT(unsigned char*)+0x144>
c000f3fa:	c6 05 20 bb 02 c0 01 	mov    BYTE PTR ds:0xc002bb20,0x1
c000f401:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f405:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f409:	eb 09                	jmp    c000f414 <findRSDT(unsigned char*)+0x14c>
c000f40b:	90                   	nop
c000f40c:	b8 00 00 00 00       	mov    eax,0x0
c000f411:	eb 05                	jmp    c000f418 <findRSDT(unsigned char*)+0x150>
c000f413:	90                   	nop
c000f414:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f418:	83 c4 50             	add    esp,0x50
c000f41b:	5b                   	pop    ebx
c000f41c:	5e                   	pop    esi
c000f41d:	5f                   	pop    edi
c000f41e:	c3                   	ret    
c000f41f:	90                   	nop

c000f420 <findDataTable(unsigned char*, char*)>:
c000f420:	83 ec 1c             	sub    esp,0x1c
c000f423:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f428:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f42e:	83 e0 04             	and    eax,0x4
c000f431:	0f b6 c0             	movzx  eax,al
c000f434:	85 c0                	test   eax,eax
c000f436:	75 08                	jne    c000f440 <findDataTable(unsigned char*, char*)+0x20>
c000f438:	b8 00 00 00 00       	mov    eax,0x0
c000f43d:	eb 5d                	jmp    c000f49c <findDataTable(unsigned char*, char*)+0x7c>
c000f43f:	90                   	nop
c000f440:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000f448:	a1 0c b9 02 c0       	mov    eax,ds:0xc002b90c
c000f44d:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000f451:	7d 41                	jge    c000f494 <findDataTable(unsigned char*, char*)+0x74>
c000f453:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f457:	c1 e0 03             	shl    eax,0x3
c000f45a:	05 20 b9 02 c0       	add    eax,0xc002b920
c000f45f:	83 ec 04             	sub    esp,0x4
c000f462:	6a 04                	push   0x4
c000f464:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f468:	50                   	push   eax
c000f469:	e8 12 0f ff ff       	call   c0000380 <memcmp>
c000f46e:	83 c4 10             	add    esp,0x10
c000f471:	85 c0                	test   eax,eax
c000f473:	0f 94 c0             	sete   al
c000f476:	0f b6 c0             	movzx  eax,al
c000f479:	85 c0                	test   eax,eax
c000f47b:	74 0f                	je     c000f48c <findDataTable(unsigned char*, char*)+0x6c>
c000f47d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f481:	8b 04 c5 24 b9 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd46dc]
c000f488:	eb 12                	jmp    c000f49c <findDataTable(unsigned char*, char*)+0x7c>
c000f48a:	66 90                	xchg   ax,ax
c000f48c:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c000f491:	eb b5                	jmp    c000f448 <findDataTable(unsigned char*, char*)+0x28>
c000f493:	90                   	nop
c000f494:	b8 00 00 00 00       	mov    eax,0x0
c000f499:	8d 76 00             	lea    esi,[esi+0x0]
c000f49c:	83 c4 1c             	add    esp,0x1c
c000f49f:	c3                   	ret    

c000f4a0 <scanMADT()>:
c000f4a0:	53                   	push   ebx
c000f4a1:	83 ec 38             	sub    esp,0x38
c000f4a4:	a1 d0 6e 02 c0       	mov    eax,ds:0xc0026ed0
c000f4a9:	25 00 04 00 00       	and    eax,0x400
c000f4ae:	74 14                	je     c000f4c4 <scanMADT()+0x24>
c000f4b0:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f4b5:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f4bb:	83 e2 fb             	and    edx,0xfffffffb
c000f4be:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f4c4:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f4c9:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f4cf:	83 e0 04             	and    eax,0x4
c000f4d2:	0f b6 c0             	movzx  eax,al
c000f4d5:	85 c0                	test   eax,eax
c000f4d7:	0f 84 6b 04 00 00    	je     c000f948 <scanMADT()+0x4a8>
c000f4dd:	e8 e2 fa ff ff       	call   c000efc4 <findRSDP()>
c000f4e2:	a3 2c bb 02 c0       	mov    ds:0xc002bb2c,eax
c000f4e7:	a1 2c bb 02 c0       	mov    eax,ds:0xc002bb2c
c000f4ec:	85 c0                	test   eax,eax
c000f4ee:	75 1c                	jne    c000f50c <scanMADT()+0x6c>
c000f4f0:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f4f5:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f4fb:	83 e2 fb             	and    edx,0xfffffffb
c000f4fe:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f504:	e9 47 04 00 00       	jmp    c000f950 <scanMADT()+0x4b0>
c000f509:	8d 76 00             	lea    esi,[esi+0x0]
c000f50c:	a1 2c bb 02 c0       	mov    eax,ds:0xc002bb2c
c000f511:	83 ec 0c             	sub    esp,0xc
c000f514:	50                   	push   eax
c000f515:	e8 ae fd ff ff       	call   c000f2c8 <findRSDT(unsigned char*)>
c000f51a:	83 c4 10             	add    esp,0x10
c000f51d:	a3 28 bb 02 c0       	mov    ds:0xc002bb28,eax
c000f522:	a1 28 bb 02 c0       	mov    eax,ds:0xc002bb28
c000f527:	85 c0                	test   eax,eax
c000f529:	75 19                	jne    c000f544 <scanMADT()+0xa4>
c000f52b:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f530:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f536:	83 e2 fb             	and    edx,0xfffffffb
c000f539:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f53f:	e9 0c 04 00 00       	jmp    c000f950 <scanMADT()+0x4b0>
c000f544:	a1 28 bb 02 c0       	mov    eax,ds:0xc002bb28
c000f549:	83 ec 0c             	sub    esp,0xc
c000f54c:	50                   	push   eax
c000f54d:	e8 0a fb ff ff       	call   c000f05c <loadACPITables(unsigned char*)>
c000f552:	83 c4 10             	add    esp,0x10
c000f555:	a1 28 bb 02 c0       	mov    eax,ds:0xc002bb28
c000f55a:	83 ec 08             	sub    esp,0x8
c000f55d:	68 8c 20 02 c0       	push   0xc002208c
c000f562:	50                   	push   eax
c000f563:	e8 b8 fe ff ff       	call   c000f420 <findDataTable(unsigned char*, char*)>
c000f568:	83 c4 10             	add    esp,0x10
c000f56b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000f56f:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000f574:	75 1a                	jne    c000f590 <scanMADT()+0xf0>
c000f576:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f57b:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f581:	83 e2 fe             	and    edx,0xfffffffe
c000f584:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f58a:	e9 c1 03 00 00       	jmp    c000f950 <scanMADT()+0x4b0>
c000f58f:	90                   	nop
c000f590:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000f598:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f59c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f59f:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000f5a3:	0f 87 a7 03 00 00    	ja     c000f950 <scanMADT()+0x4b0>
c000f5a9:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000f5b1:	0f 87 99 03 00 00    	ja     c000f950 <scanMADT()+0x4b0>
c000f5b7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f5bb:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000f5bf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f5c3:	8d 50 01             	lea    edx,[eax+0x1]
c000f5c6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f5ca:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f5ce:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f5d2:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000f5d6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f5da:	8d 50 01             	lea    edx,[eax+0x1]
c000f5dd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f5e1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f5e5:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f5e9:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000f5ed:	0f b6 44 24 22       	movzx  eax,BYTE PTR [esp+0x22]
c000f5f2:	83 f8 02             	cmp    eax,0x2
c000f5f5:	0f 86 51 03 00 00    	jbe    c000f94c <scanMADT()+0x4ac>
c000f5fb:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f600:	85 c0                	test   eax,eax
c000f602:	75 58                	jne    c000f65c <scanMADT()+0x1bc>
c000f604:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f608:	8d 50 01             	lea    edx,[eax+0x1]
c000f60b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f60f:	8a 15 20 bd 02 c0    	mov    dl,BYTE PTR ds:0xc002bd20
c000f615:	0f b6 d2             	movzx  edx,dl
c000f618:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f61c:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000f620:	88 82 60 bd 02 c0    	mov    BYTE PTR [edx-0x3ffd42a0],al
c000f626:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f62a:	8d 50 01             	lea    edx,[eax+0x1]
c000f62d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f631:	8a 15 20 bd 02 c0    	mov    dl,BYTE PTR ds:0xc002bd20
c000f637:	8d 4a 01             	lea    ecx,[edx+0x1]
c000f63a:	88 0d 20 bd 02 c0    	mov    BYTE PTR ds:0xc002bd20,cl
c000f640:	0f b6 d2             	movzx  edx,dl
c000f643:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f647:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000f64b:	88 82 40 bd 02 c0    	mov    BYTE PTR [edx-0x3ffd42c0],al
c000f651:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f656:	e9 d9 02 00 00       	jmp    c000f934 <scanMADT()+0x494>
c000f65b:	90                   	nop
c000f65c:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f661:	83 f8 01             	cmp    eax,0x1
c000f664:	0f 85 1a 01 00 00    	jne    c000f784 <scanMADT()+0x2e4>
c000f66a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f66e:	8d 50 01             	lea    edx,[eax+0x1]
c000f671:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f675:	8a 15 e0 bb 02 c0    	mov    dl,BYTE PTR ds:0xc002bbe0
c000f67b:	0f b6 d2             	movzx  edx,dl
c000f67e:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f682:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000f686:	88 82 00 bc 02 c0    	mov    BYTE PTR [edx-0x3ffd4400],al
c000f68c:	83 44 24 2c 01       	add    DWORD PTR [esp+0x2c],0x1
c000f691:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f695:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f699:	01 d0                	add    eax,edx
c000f69b:	83 c0 2c             	add    eax,0x2c
c000f69e:	8a 00                	mov    al,BYTE PTR [eax]
c000f6a0:	0f b6 d0             	movzx  edx,al
c000f6a3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f6a7:	8d 48 01             	lea    ecx,[eax+0x1]
c000f6aa:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f6ae:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f6b2:	0f b6 c0             	movzx  eax,al
c000f6b5:	c1 e0 08             	shl    eax,0x8
c000f6b8:	89 d1                	mov    ecx,edx
c000f6ba:	09 c1                	or     ecx,eax
c000f6bc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f6c0:	8d 50 02             	lea    edx,[eax+0x2]
c000f6c3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f6c7:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f6cb:	0f b6 c0             	movzx  eax,al
c000f6ce:	c1 e0 10             	shl    eax,0x10
c000f6d1:	09 c1                	or     ecx,eax
c000f6d3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f6d7:	8d 50 03             	lea    edx,[eax+0x3]
c000f6da:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f6de:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f6e2:	0f b6 c0             	movzx  eax,al
c000f6e5:	c1 e0 18             	shl    eax,0x18
c000f6e8:	09 c1                	or     ecx,eax
c000f6ea:	89 ca                	mov    edx,ecx
c000f6ec:	a0 e0 bb 02 c0       	mov    al,ds:0xc002bbe0
c000f6f1:	0f b6 c0             	movzx  eax,al
c000f6f4:	89 14 85 20 bc 02 c0 	mov    DWORD PTR [eax*4-0x3ffd43e0],edx
c000f6fb:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f700:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f704:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f708:	01 d0                	add    eax,edx
c000f70a:	83 c0 2c             	add    eax,0x2c
c000f70d:	8a 00                	mov    al,BYTE PTR [eax]
c000f70f:	0f b6 d0             	movzx  edx,al
c000f712:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f716:	8d 48 01             	lea    ecx,[eax+0x1]
c000f719:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f71d:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f721:	0f b6 c0             	movzx  eax,al
c000f724:	c1 e0 08             	shl    eax,0x8
c000f727:	89 d1                	mov    ecx,edx
c000f729:	09 c1                	or     ecx,eax
c000f72b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f72f:	8d 50 02             	lea    edx,[eax+0x2]
c000f732:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f736:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f73a:	0f b6 c0             	movzx  eax,al
c000f73d:	c1 e0 10             	shl    eax,0x10
c000f740:	09 c1                	or     ecx,eax
c000f742:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f746:	8d 50 03             	lea    edx,[eax+0x3]
c000f749:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f74d:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f751:	0f b6 c0             	movzx  eax,al
c000f754:	c1 e0 18             	shl    eax,0x18
c000f757:	09 c1                	or     ecx,eax
c000f759:	89 ca                	mov    edx,ecx
c000f75b:	a0 e0 bb 02 c0       	mov    al,ds:0xc002bbe0
c000f760:	0f b6 c0             	movzx  eax,al
c000f763:	89 14 85 a0 bc 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4360],edx
c000f76a:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f76f:	a0 e0 bb 02 c0       	mov    al,ds:0xc002bbe0
c000f774:	83 c0 01             	add    eax,0x1
c000f777:	a2 e0 bb 02 c0       	mov    ds:0xc002bbe0,al
c000f77c:	e9 b3 01 00 00       	jmp    c000f934 <scanMADT()+0x494>
c000f781:	8d 76 00             	lea    esi,[esi+0x0]
c000f784:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f789:	83 f8 02             	cmp    eax,0x2
c000f78c:	0f 85 ea 00 00 00    	jne    c000f87c <scanMADT()+0x3dc>
c000f792:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f796:	8d 50 01             	lea    edx,[eax+0x1]
c000f799:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f79d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f7a1:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f7a5:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000f7a9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f7ad:	8d 50 01             	lea    edx,[eax+0x1]
c000f7b0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f7b4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f7b8:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f7bc:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000f7c0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f7c4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f7c8:	01 d0                	add    eax,edx
c000f7ca:	83 c0 2c             	add    eax,0x2c
c000f7cd:	8a 00                	mov    al,BYTE PTR [eax]
c000f7cf:	0f b6 d0             	movzx  edx,al
c000f7d2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f7d6:	8d 48 01             	lea    ecx,[eax+0x1]
c000f7d9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f7dd:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f7e1:	0f b6 c0             	movzx  eax,al
c000f7e4:	c1 e0 08             	shl    eax,0x8
c000f7e7:	89 d1                	mov    ecx,edx
c000f7e9:	09 c1                	or     ecx,eax
c000f7eb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f7ef:	8d 50 02             	lea    edx,[eax+0x2]
c000f7f2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f7f6:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f7fa:	0f b6 c0             	movzx  eax,al
c000f7fd:	c1 e0 10             	shl    eax,0x10
c000f800:	09 c1                	or     ecx,eax
c000f802:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f806:	8d 50 03             	lea    edx,[eax+0x3]
c000f809:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f80d:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f811:	0f b6 c0             	movzx  eax,al
c000f814:	c1 e0 18             	shl    eax,0x18
c000f817:	09 c8                	or     eax,ecx
c000f819:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f81d:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f822:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f826:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f82a:	01 d0                	add    eax,edx
c000f82c:	83 c0 2c             	add    eax,0x2c
c000f82f:	8a 00                	mov    al,BYTE PTR [eax]
c000f831:	0f b6 c0             	movzx  eax,al
c000f834:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000f838:	8d 4a 01             	lea    ecx,[edx+0x1]
c000f83b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f83f:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c000f843:	0f b6 d2             	movzx  edx,dl
c000f846:	c1 e2 08             	shl    edx,0x8
c000f849:	09 d0                	or     eax,edx
c000f84b:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000f850:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000f855:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000f85a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f85e:	88 90 88 37 02 c0    	mov    BYTE PTR [eax-0x3ffdc878],dl
c000f864:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c000f869:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000f86e:	66 89 84 12 c0 bb 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffd4440],ax
c000f876:	e9 b9 00 00 00       	jmp    c000f934 <scanMADT()+0x494>
c000f87b:	90                   	nop
c000f87c:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f881:	83 f8 04             	cmp    eax,0x4
c000f884:	0f 85 9a 00 00 00    	jne    c000f924 <scanMADT()+0x484>
c000f88a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f88e:	8d 50 01             	lea    edx,[eax+0x1]
c000f891:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f895:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f899:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f89d:	0f b6 c0             	movzx  eax,al
c000f8a0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000f8a4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f8a8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f8ac:	01 d0                	add    eax,edx
c000f8ae:	83 c0 2c             	add    eax,0x2c
c000f8b1:	8a 00                	mov    al,BYTE PTR [eax]
c000f8b3:	0f b6 d0             	movzx  edx,al
c000f8b6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f8ba:	8d 48 01             	lea    ecx,[eax+0x1]
c000f8bd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f8c1:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f8c5:	0f b6 c0             	movzx  eax,al
c000f8c8:	c1 e0 08             	shl    eax,0x8
c000f8cb:	09 d0                	or     eax,edx
c000f8cd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f8d1:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000f8d6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f8da:	8d 50 01             	lea    edx,[eax+0x1]
c000f8dd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f8e1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f8e5:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f8e9:	0f b6 c0             	movzx  eax,al
c000f8ec:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f8f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f8f4:	c1 e0 08             	shl    eax,0x8
c000f8f7:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000f8fb:	89 c1                	mov    ecx,eax
c000f8fd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f901:	c1 e0 18             	shl    eax,0x18
c000f904:	89 c3                	mov    ebx,eax
c000f906:	a1 30 bb 02 c0       	mov    eax,ds:0xc002bb30
c000f90b:	8d 50 01             	lea    edx,[eax+0x1]
c000f90e:	89 15 30 bb 02 c0    	mov    DWORD PTR ds:0xc002bb30,edx
c000f914:	09 d9                	or     ecx,ebx
c000f916:	89 ca                	mov    edx,ecx
c000f918:	89 14 85 40 bb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd44c0],edx
c000f91f:	eb 13                	jmp    c000f934 <scanMADT()+0x494>
c000f921:	8d 76 00             	lea    esi,[esi+0x0]
c000f924:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f929:	83 f8 05             	cmp    eax,0x5
c000f92c:	75 06                	jne    c000f934 <scanMADT()+0x494>
c000f92e:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000f933:	90                   	nop
c000f934:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c000f939:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f93d:	01 d0                	add    eax,edx
c000f93f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000f943:	e9 50 fc ff ff       	jmp    c000f598 <scanMADT()+0xf8>
c000f948:	90                   	nop
c000f949:	eb 05                	jmp    c000f950 <scanMADT()+0x4b0>
c000f94b:	90                   	nop
c000f94c:	90                   	nop
c000f94d:	8d 76 00             	lea    esi,[esi+0x0]
c000f950:	83 c4 38             	add    esp,0x38
c000f953:	5b                   	pop    ebx
c000f954:	c3                   	ret    
c000f955:	90                   	nop
c000f956:	66 90                	xchg   ax,ax

c000f958 <ACPI::ACPI()>:
c000f958:	83 ec 0c             	sub    esp,0xc
c000f95b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f95f:	83 ec 08             	sub    esp,0x8
c000f962:	68 91 20 02 c0       	push   0xc0022091
c000f967:	50                   	push   eax
c000f968:	e8 65 d2 ff ff       	call   c000cbd2 <Device::Device(char const*)>
c000f96d:	83 c4 10             	add    esp,0x10
c000f970:	ba e4 21 02 c0       	mov    edx,0xc00221e4
c000f975:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f979:	89 10                	mov    DWORD PTR [eax],edx
c000f97b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f97f:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000f986:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f98a:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000f994:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f998:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000f9a2:	e8 f9 fa ff ff       	call   c000f4a0 <scanMADT()>
c000f9a7:	90                   	nop
c000f9a8:	83 c4 0c             	add    esp,0xc
c000f9ab:	c3                   	ret    

c000f9ac <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000f9ac:	83 ec 2c             	sub    esp,0x2c
c000f9af:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000f9b3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f9b7:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000f9bb:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c000f9bf:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000f9c4:	88 d0                	mov    al,dl
c000f9c6:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000f9ca:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000f9cf:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000f9d7:	90                   	nop
c000f9d8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f9dc:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000f9e2:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000f9e6:	0f 8d b0 00 00 00    	jge    c000fa9c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xf0>
c000f9ec:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f9f0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f9f4:	83 c2 2a             	add    edx,0x2a
c000f9f7:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000f9fb:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c000fa00:	0f b7 c0             	movzx  eax,ax
c000fa03:	39 c2                	cmp    edx,eax
c000fa05:	0f 85 85 00 00 00    	jne    c000fa90 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000fa0b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000fa0f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000fa13:	83 c2 2a             	add    edx,0x2a
c000fa16:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000fa1a:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c000fa1f:	0f b6 c0             	movzx  eax,al
c000fa22:	39 c2                	cmp    edx,eax
c000fa24:	75 6a                	jne    c000fa90 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000fa26:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000fa2b:	85 c0                	test   eax,eax
c000fa2d:	74 3d                	je     c000fa6c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xc0>
c000fa2f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000fa33:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000fa37:	83 c2 2a             	add    edx,0x2a
c000fa3a:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000fa3e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fa42:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fa45:	39 c2                	cmp    edx,eax
c000fa47:	74 13                	je     c000fa5c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xb0>
c000fa49:	83 ec 0c             	sub    esp,0xc
c000fa4c:	68 0c 20 02 c0       	push   0xc002200c
c000fa51:	e8 3d 1c 00 00       	call   c0011693 <KePanic(char const*)>
c000fa56:	83 c4 10             	add    esp,0x10
c000fa59:	8d 76 00             	lea    esi,[esi+0x0]
c000fa5c:	83 ec 0c             	sub    esp,0xc
c000fa5f:	68 96 20 02 c0       	push   0xc0022096
c000fa64:	e8 2a 1c 00 00       	call   c0011693 <KePanic(char const*)>
c000fa69:	83 c4 10             	add    esp,0x10
c000fa6c:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000fa70:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000fa74:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000fa78:	83 c2 2a             	add    edx,0x2a
c000fa7b:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000fa7f:	8b 02                	mov    eax,DWORD PTR [edx]
c000fa81:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000fa84:	89 01                	mov    DWORD PTR [ecx],eax
c000fa86:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000fa89:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000fa8e:	66 90                	xchg   ax,ax
c000fa90:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000fa95:	e9 3e ff ff ff       	jmp    c000f9d8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000fa9a:	66 90                	xchg   ax,ax
c000fa9c:	90                   	nop
c000fa9d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000faa1:	83 c4 2c             	add    esp,0x2c
c000faa4:	c2 04 00             	ret    0x4
c000faa7:	90                   	nop

c000faa8 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000faa8:	83 ec 1c             	sub    esp,0x1c
c000faab:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000faaf:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000fab3:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000fab7:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000fabc:	88 c8                	mov    al,cl
c000fabe:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000fac2:	88 d0                	mov    al,dl
c000fac4:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000fac8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000facc:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000fad2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fad6:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000fad9:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c000fadd:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c000fae1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fae5:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000faeb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000faef:	8d 48 2a             	lea    ecx,[eax+0x2a]
c000faf2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000faf6:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c000fafb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000faff:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000fb05:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000fb09:	83 c0 01             	add    eax,0x1
c000fb0c:	88 c1                	mov    cl,al
c000fb0e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb12:	83 c2 2a             	add    edx,0x2a
c000fb15:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000fb19:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb1d:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000fb23:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb27:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000fb2a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000fb2e:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000fb32:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb36:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000fb3c:	8d 50 01             	lea    edx,[eax+0x1]
c000fb3f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb43:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000fb49:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb4d:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000fb53:	3d 00 02 00 00       	cmp    eax,0x200
c000fb58:	75 12                	jne    c000fb6c <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc4>
c000fb5a:	83 ec 0c             	sub    esp,0xc
c000fb5d:	68 a5 20 02 c0       	push   0xc00220a5
c000fb62:	e8 2c 1b 00 00       	call   c0011693 <KePanic(char const*)>
c000fb67:	83 c4 10             	add    esp,0x10
c000fb6a:	66 90                	xchg   ax,ax
c000fb6c:	90                   	nop
c000fb6d:	83 c4 1c             	add    esp,0x1c
c000fb70:	c3                   	ret    
c000fb71:	90                   	nop
c000fb72:	66 90                	xchg   ax,ax

c000fb74 <ACPI::setScreenBrightnessLevel(void*, int)>:
c000fb74:	b8 00 00 00 00       	mov    eax,0x0
c000fb79:	c3                   	ret    
c000fb7a:	66 90                	xchg   ax,ax

c000fb7c <ACPI::detectPCI()>:
c000fb7c:	53                   	push   ebx
c000fb7d:	83 ec 28             	sub    esp,0x28
c000fb80:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000fb85:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000fb8a:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000fb8f:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000fb95:	83 e0 04             	and    eax,0x4
c000fb98:	0f b6 c0             	movzx  eax,al
c000fb9b:	85 c0                	test   eax,eax
c000fb9d:	74 2d                	je     c000fbcc <ACPI::detectPCI()+0x50>
c000fb9f:	a1 28 bb 02 c0       	mov    eax,ds:0xc002bb28
c000fba4:	83 ec 08             	sub    esp,0x8
c000fba7:	68 c2 20 02 c0       	push   0xc00220c2
c000fbac:	50                   	push   eax
c000fbad:	e8 6e f8 ff ff       	call   c000f420 <findDataTable(unsigned char*, char*)>
c000fbb2:	83 c4 10             	add    esp,0x10
c000fbb5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fbb9:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000fbbe:	74 0c                	je     c000fbcc <ACPI::detectPCI()+0x50>
c000fbc0:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000fbc5:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000fbca:	66 90                	xchg   ax,ax
c000fbcc:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000fbd4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fbd8:	8a 00                	mov    al,BYTE PTR [eax]
c000fbda:	0f b6 c0             	movzx  eax,al
c000fbdd:	83 f8 01             	cmp    eax,0x1
c000fbe0:	75 0e                	jne    c000fbf0 <ACPI::detectPCI()+0x74>
c000fbe2:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000fbe7:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000fbec:	eb 2e                	jmp    c000fc1c <ACPI::detectPCI()+0xa0>
c000fbee:	66 90                	xchg   ax,ax
c000fbf0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fbf4:	8a 00                	mov    al,BYTE PTR [eax]
c000fbf6:	0f b6 c0             	movzx  eax,al
c000fbf9:	83 f8 02             	cmp    eax,0x2
c000fbfc:	75 1e                	jne    c000fc1c <ACPI::detectPCI()+0xa0>
c000fbfe:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000fc03:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000fc08:	85 c0                	test   eax,eax
c000fc0a:	74 10                	je     c000fc1c <ACPI::detectPCI()+0xa0>
c000fc0c:	83 ec 0c             	sub    esp,0xc
c000fc0f:	68 3c 20 02 c0       	push   0xc002203c
c000fc14:	e8 7a 1a 00 00       	call   c0011693 <KePanic(char const*)>
c000fc19:	83 c4 10             	add    esp,0x10
c000fc1c:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000fc20:	83 f0 01             	xor    eax,0x1
c000fc23:	0f b6 c0             	movzx  eax,al
c000fc26:	85 c0                	test   eax,eax
c000fc28:	74 46                	je     c000fc70 <ACPI::detectPCI()+0xf4>
c000fc2a:	e8 01 05 ff ff       	call   c0000130 <manualPCIProbe>
c000fc2f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000fc33:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000fc38:	75 0e                	jne    c000fc48 <ACPI::detectPCI()+0xcc>
c000fc3a:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000fc3f:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000fc44:	eb 2a                	jmp    c000fc70 <ACPI::detectPCI()+0xf4>
c000fc46:	66 90                	xchg   ax,ax
c000fc48:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000fc4d:	75 21                	jne    c000fc70 <ACPI::detectPCI()+0xf4>
c000fc4f:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000fc54:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000fc59:	85 c0                	test   eax,eax
c000fc5b:	74 13                	je     c000fc70 <ACPI::detectPCI()+0xf4>
c000fc5d:	83 ec 0c             	sub    esp,0xc
c000fc60:	68 3c 20 02 c0       	push   0xc002203c
c000fc65:	e8 29 1a 00 00       	call   c0011693 <KePanic(char const*)>
c000fc6a:	83 c4 10             	add    esp,0x10
c000fc6d:	8d 76 00             	lea    esi,[esi+0x0]
c000fc70:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000fc75:	85 c0                	test   eax,eax
c000fc77:	0f 84 87 00 00 00    	je     c000fd04 <ACPI::detectPCI()+0x188>
c000fc7d:	83 ec 0c             	sub    esp,0xc
c000fc80:	68 c7 20 02 c0       	push   0xc00220c7
c000fc85:	e8 09 13 00 00       	call   c0010f93 <KeSetBootMessage(char const*)>
c000fc8a:	83 c4 10             	add    esp,0x10
c000fc8d:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000fc95:	83 ec 0c             	sub    esp,0xc
c000fc98:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000fc9c:	e8 15 7e ff ff       	call   c0007ab6 <malloc>
c000fca1:	83 c4 10             	add    esp,0x10
c000fca4:	89 c3                	mov    ebx,eax
c000fca6:	83 ec 0c             	sub    esp,0xc
c000fca9:	53                   	push   ebx
c000fcaa:	e8 41 b5 00 00       	call   c001b1f0 <PCI::PCI()>
c000fcaf:	83 c4 10             	add    esp,0x10
c000fcb2:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000fcb6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fcba:	83 ec 08             	sub    esp,0x8
c000fcbd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fcc1:	50                   	push   eax
c000fcc2:	e8 73 cd ff ff       	call   c000ca3a <Device::addChild(Device*)>
c000fcc7:	83 c4 10             	add    esp,0x10
c000fcca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fcce:	8b 00                	mov    eax,DWORD PTR [eax]
c000fcd0:	83 c0 08             	add    eax,0x8
c000fcd3:	8b 00                	mov    eax,DWORD PTR [eax]
c000fcd5:	0f b6 54 24 1e       	movzx  edx,BYTE PTR [esp+0x1e]
c000fcda:	85 d2                	test   edx,edx
c000fcdc:	74 0a                	je     c000fce8 <ACPI::detectPCI()+0x16c>
c000fcde:	ba 01 00 00 00       	mov    edx,0x1
c000fce3:	eb 0b                	jmp    c000fcf0 <ACPI::detectPCI()+0x174>
c000fce5:	8d 76 00             	lea    esi,[esi+0x0]
c000fce8:	ba 02 00 00 00       	mov    edx,0x2
c000fced:	8d 76 00             	lea    esi,[esi+0x0]
c000fcf0:	6a 00                	push   0x0
c000fcf2:	6a 00                	push   0x0
c000fcf4:	52                   	push   edx
c000fcf5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fcf9:	ff d0                	call   eax
c000fcfb:	83 c4 10             	add    esp,0x10
c000fcfe:	e9 91 00 00 00       	jmp    c000fd94 <ACPI::detectPCI()+0x218>
c000fd03:	90                   	nop
c000fd04:	83 ec 0c             	sub    esp,0xc
c000fd07:	68 df 20 02 c0       	push   0xc00220df
c000fd0c:	e8 82 12 00 00       	call   c0010f93 <KeSetBootMessage(char const*)>
c000fd11:	83 c4 10             	add    esp,0x10
c000fd14:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000fd1b:	83 ec 0c             	sub    esp,0xc
c000fd1e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000fd22:	e8 8f 7d ff ff       	call   c0007ab6 <malloc>
c000fd27:	83 c4 10             	add    esp,0x10
c000fd2a:	89 c3                	mov    ebx,eax
c000fd2c:	83 ec 0c             	sub    esp,0xc
c000fd2f:	53                   	push   ebx
c000fd30:	e8 55 c0 00 00       	call   c001bd8a <IDE::IDE()>
c000fd35:	83 c4 10             	add    esp,0x10
c000fd38:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000fd3c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fd40:	83 ec 08             	sub    esp,0x8
c000fd43:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000fd47:	50                   	push   eax
c000fd48:	e8 ed cc ff ff       	call   c000ca3a <Device::addChild(Device*)>
c000fd4d:	83 c4 10             	add    esp,0x10
c000fd50:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fd54:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000fd5e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fd62:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000fd6b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fd6f:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000fd78:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fd7c:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd7e:	83 c0 08             	add    eax,0x8
c000fd81:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd83:	6a 00                	push   0x0
c000fd85:	6a 00                	push   0x0
c000fd87:	6a 00                	push   0x0
c000fd89:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fd8d:	ff d0                	call   eax
c000fd8f:	83 c4 10             	add    esp,0x10
c000fd92:	66 90                	xchg   ax,ax
c000fd94:	90                   	nop
c000fd95:	83 c4 28             	add    esp,0x28
c000fd98:	5b                   	pop    ebx
c000fd99:	c3                   	ret    
c000fd9a:	66 90                	xchg   ax,ax

c000fd9c <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000fd9c:	83 ec 1c             	sub    esp,0x1c
c000fd9f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fda3:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000fda6:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000fdaa:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000fdaf:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c000fdb4:	83 ec 08             	sub    esp,0x8
c000fdb7:	52                   	push   edx
c000fdb8:	50                   	push   eax
c000fdb9:	e8 ba 73 ff ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c000fdbe:	83 c4 10             	add    esp,0x10
c000fdc1:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000fdc5:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000fdca:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c000fdcf:	83 ec 04             	sub    esp,0x4
c000fdd2:	6a 01                	push   0x1
c000fdd4:	52                   	push   edx
c000fdd5:	50                   	push   eax
c000fdd6:	e8 b7 74 ff ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c000fddb:	83 c4 10             	add    esp,0x10
c000fdde:	90                   	nop
c000fddf:	83 c4 1c             	add    esp,0x1c
c000fde2:	c3                   	ret    
c000fde3:	90                   	nop

c000fde4 <ACPI::sleep()>:
c000fde4:	83 ec 0c             	sub    esp,0xc
c000fde7:	a1 00 b9 02 c0       	mov    eax,ds:0xc002b900
c000fdec:	85 c0                	test   eax,eax
c000fdee:	74 08                	je     c000fdf8 <ACPI::sleep()+0x14>
c000fdf0:	a1 00 b9 02 c0       	mov    eax,ds:0xc002b900
c000fdf5:	ff d0                	call   eax
c000fdf7:	90                   	nop
c000fdf8:	90                   	nop
c000fdf9:	83 c4 0c             	add    esp,0xc
c000fdfc:	c3                   	ret    
c000fdfd:	90                   	nop
c000fdfe:	66 90                	xchg   ax,ax

c000fe00 <ACPI::open(int, int, void*)>:
c000fe00:	57                   	push   edi
c000fe01:	56                   	push   esi
c000fe02:	53                   	push   ebx
c000fe03:	81 ec 70 01 00 00    	sub    esp,0x170
c000fe09:	83 ec 0c             	sub    esp,0xc
c000fe0c:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000fe13:	e8 64 fd ff ff       	call   c000fb7c <ACPI::detectPCI()>
c000fe18:	83 c4 10             	add    esp,0x10
c000fe1b:	83 ec 0c             	sub    esp,0xc
c000fe1e:	68 64 20 02 c0       	push   0xc0022064
c000fe23:	e8 6b 11 00 00       	call   c0010f93 <KeSetBootMessage(char const*)>
c000fe28:	83 c4 10             	add    esp,0x10
c000fe2b:	b8 4c 05 00 00       	mov    eax,0x54c
c000fe30:	8a 00                	mov    al,BYTE PTR [eax]
c000fe32:	88 84 24 6e 01 00 00 	mov    BYTE PTR [esp+0x16e],al
c000fe39:	0f b6 84 24 6e 01 00 00 	movzx  eax,BYTE PTR [esp+0x16e]
c000fe41:	83 f8 01             	cmp    eax,0x1
c000fe44:	75 12                	jne    c000fe58 <ACPI::open(int, int, void*)+0x58>
c000fe46:	83 ec 0c             	sub    esp,0xc
c000fe49:	68 b3 19 02 c0       	push   0xc00219b3
c000fe4e:	e8 ea 4d 00 00       	call   c0014c3d <Thr::loadKernelSymbolTable(char const*)>
c000fe53:	83 c4 10             	add    esp,0x10
c000fe56:	eb 34                	jmp    c000fe8c <ACPI::open(int, int, void*)+0x8c>
c000fe58:	0f b6 84 24 6e 01 00 00 	movzx  eax,BYTE PTR [esp+0x16e]
c000fe60:	3d bb 00 00 00       	cmp    eax,0xbb
c000fe65:	75 15                	jne    c000fe7c <ACPI::open(int, int, void*)+0x7c>
c000fe67:	83 ec 0c             	sub    esp,0xc
c000fe6a:	68 f4 20 02 c0       	push   0xc00220f4
c000fe6f:	e8 c9 4d 00 00       	call   c0014c3d <Thr::loadKernelSymbolTable(char const*)>
c000fe74:	83 c4 10             	add    esp,0x10
c000fe77:	eb 13                	jmp    c000fe8c <ACPI::open(int, int, void*)+0x8c>
c000fe79:	8d 76 00             	lea    esi,[esi+0x0]
c000fe7c:	83 ec 0c             	sub    esp,0xc
c000fe7f:	68 12 21 02 c0       	push   0xc0022112
c000fe84:	e8 0a 18 00 00       	call   c0011693 <KePanic(char const*)>
c000fe89:	83 c4 10             	add    esp,0x10
c000fe8c:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c000fe94:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c000fe9f:	83 ec 0c             	sub    esp,0xc
c000fea2:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000fea9:	e8 08 7c ff ff       	call   c0007ab6 <malloc>
c000feae:	83 c4 10             	add    esp,0x10
c000feb1:	89 c3                	mov    ebx,eax
c000feb3:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c000feb8:	83 ec 04             	sub    esp,0x4
c000febb:	50                   	push   eax
c000febc:	68 2c 21 02 c0       	push   0xc002212c
c000fec1:	53                   	push   ebx
c000fec2:	e8 fb bc ff ff       	call   c000bbc2 <File::File(char const*, Process*)>
c000fec7:	83 c4 10             	add    esp,0x10
c000feca:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c000fed1:	83 ec 08             	sub    esp,0x8
c000fed4:	6a 01                	push   0x1
c000fed6:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000fedd:	e8 fe bc ff ff       	call   c000bbe0 <File::open(FileOpenMode)>
c000fee2:	83 c4 10             	add    esp,0x10
c000fee5:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c000feec:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c000fef4:	75 16                	jne    c000ff0c <ACPI::open(int, int, void*)+0x10c>
c000fef6:	83 ec 0c             	sub    esp,0xc
c000fef9:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000ff00:	e8 39 bd ff ff       	call   c000bc3e <File::close()>
c000ff05:	83 c4 10             	add    esp,0x10
c000ff08:	eb 0a                	jmp    c000ff14 <ACPI::open(int, int, void*)+0x114>
c000ff0a:	66 90                	xchg   ax,ax
c000ff0c:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c000ff14:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c000ff1c:	74 1e                	je     c000ff3c <ACPI::open(int, int, void*)+0x13c>
c000ff1e:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c000ff25:	8b 00                	mov    eax,DWORD PTR [eax]
c000ff27:	83 c0 08             	add    eax,0x8
c000ff2a:	8b 00                	mov    eax,DWORD PTR [eax]
c000ff2c:	83 ec 0c             	sub    esp,0xc
c000ff2f:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000ff36:	ff d0                	call   eax
c000ff38:	83 c4 10             	add    esp,0x10
c000ff3b:	90                   	nop
c000ff3c:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c000ff43:	83 f0 01             	xor    eax,0x1
c000ff46:	0f b6 c0             	movzx  eax,al
c000ff49:	85 c0                	test   eax,eax
c000ff4b:	74 43                	je     c000ff90 <ACPI::open(int, int, void*)+0x190>
c000ff4d:	83 ec 0c             	sub    esp,0xc
c000ff50:	68 4a 21 02 c0       	push   0xc002214a
c000ff55:	e8 39 10 00 00       	call   c0010f93 <KeSetBootMessage(char const*)>
c000ff5a:	83 c4 10             	add    esp,0x10
c000ff5d:	83 ec 04             	sub    esp,0x4
c000ff60:	6a 0c                	push   0xc
c000ff62:	68 65 21 02 c0       	push   0xc0022165
c000ff67:	68 76 21 02 c0       	push   0xc0022176
c000ff6c:	e8 4f 3f 00 00       	call   c0013ec0 <Reg::readIntWithDefault(char*, char*, int)>
c000ff71:	83 c4 10             	add    esp,0x10
c000ff74:	89 84 24 60 01 00 00 	mov    DWORD PTR [esp+0x160],eax
c000ff7b:	83 ec 0c             	sub    esp,0xc
c000ff7e:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c000ff85:	e8 b2 98 ff ff       	call   c000983c <Virt::setupPageSwapping(int)>
c000ff8a:	83 c4 10             	add    esp,0x10
c000ff8d:	8d 76 00             	lea    esi,[esi+0x0]
c000ff90:	83 ec 0c             	sub    esp,0xc
c000ff93:	68 75 0b 02 c0       	push   0xc0020b75
c000ff98:	e8 f6 0f 00 00       	call   c0010f93 <KeSetBootMessage(char const*)>
c000ff9d:	83 c4 10             	add    esp,0x10
c000ffa0:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c000ffa7:	83 ec 08             	sub    esp,0x8
c000ffaa:	6a 13                	push   0x13
c000ffac:	50                   	push   eax
c000ffad:	e8 a0 cd ff ff       	call   c000cd52 <getDevicesOfType(DeviceType)>
c000ffb2:	83 c4 0c             	add    esp,0xc
c000ffb5:	8d 76 00             	lea    esi,[esi+0x0]
c000ffb8:	83 ec 0c             	sub    esp,0xc
c000ffbb:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ffc2:	50                   	push   eax
c000ffc3:	e8 a8 ff 00 00       	call   c001ff70 <LinkedList<Device>::isEmpty()>
c000ffc8:	83 c4 10             	add    esp,0x10
c000ffcb:	83 f0 01             	xor    eax,0x1
c000ffce:	0f b6 c0             	movzx  eax,al
c000ffd1:	85 c0                	test   eax,eax
c000ffd3:	0f 84 47 01 00 00    	je     c0010120 <ACPI::open(int, int, void*)+0x320>
c000ffd9:	83 ec 0c             	sub    esp,0xc
c000ffdc:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ffe3:	50                   	push   eax
c000ffe4:	e8 a3 ff 00 00       	call   c001ff8c <LinkedList<Device>::getFirstElement()>
c000ffe9:	83 c4 10             	add    esp,0x10
c000ffec:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c000fff3:	83 ec 0c             	sub    esp,0xc
c000fff6:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000fffd:	50                   	push   eax
c000fffe:	e8 91 ff 00 00       	call   c001ff94 <LinkedList<Device>::removeFirst()>
c0010003:	83 c4 10             	add    esp,0x10
c0010006:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c001000d:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c0010014:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c001001b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001001f:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c0010025:	ba 09 00 00 00       	mov    edx,0x9
c001002a:	fc                   	cld    
c001002b:	89 c7                	mov    edi,eax
c001002d:	89 de                	mov    esi,ebx
c001002f:	89 d1                	mov    ecx,edx
c0010031:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010033:	83 ec 08             	sub    esp,0x8
c0010036:	8d 44 24 38          	lea    eax,[esp+0x38]
c001003a:	50                   	push   eax
c001003b:	83 ec 24             	sub    esp,0x24
c001003e:	89 e0                	mov    eax,esp
c0010040:	89 c3                	mov    ebx,eax
c0010042:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0010046:	ba 09 00 00 00       	mov    edx,0x9
c001004b:	89 df                	mov    edi,ebx
c001004d:	89 c6                	mov    esi,eax
c001004f:	89 d1                	mov    ecx,edx
c0010051:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010053:	e8 82 b6 00 00       	call   c001b6da <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c0010058:	83 c4 30             	add    esp,0x30
c001005b:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c0010062:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c001006a:	0f 84 48 ff ff ff    	je     c000ffb8 <ACPI::open(int, int, void*)+0x1b8>
c0010070:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c001007b:	83 ec 0c             	sub    esp,0xc
c001007e:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0010085:	e8 2c 7a ff ff       	call   c0007ab6 <malloc>
c001008a:	83 c4 10             	add    esp,0x10
c001008d:	89 c3                	mov    ebx,eax
c001008f:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0010094:	83 ec 04             	sub    esp,0x4
c0010097:	50                   	push   eax
c0010098:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c001009f:	53                   	push   ebx
c00100a0:	e8 1d bb ff ff       	call   c000bbc2 <File::File(char const*, Process*)>
c00100a5:	83 c4 10             	add    esp,0x10
c00100a8:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c00100af:	83 ec 0c             	sub    esp,0xc
c00100b2:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c00100b9:	e8 e6 bd ff ff       	call   c000bea4 <File::exists()>
c00100be:	83 c4 10             	add    esp,0x10
c00100c1:	0f b6 c0             	movzx  eax,al
c00100c4:	85 c0                	test   eax,eax
c00100c6:	74 28                	je     c00100f0 <ACPI::open(int, int, void*)+0x2f0>
c00100c8:	83 ec 08             	sub    esp,0x8
c00100cb:	6a 01                	push   0x1
c00100cd:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c00100d4:	e8 de 55 00 00       	call   c00156b7 <Thr::loadDLL(char const*, bool)>
c00100d9:	83 c4 10             	add    esp,0x10
c00100dc:	83 ec 08             	sub    esp,0x8
c00100df:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c00100e6:	50                   	push   eax
c00100e7:	e8 fc 57 00 00       	call   c00158e8 <Thr::executeDLL(unsigned long, void*)>
c00100ec:	83 c4 10             	add    esp,0x10
c00100ef:	90                   	nop
c00100f0:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c00100f8:	0f 84 ba fe ff ff    	je     c000ffb8 <ACPI::open(int, int, void*)+0x1b8>
c00100fe:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c0010105:	8b 00                	mov    eax,DWORD PTR [eax]
c0010107:	83 c0 08             	add    eax,0x8
c001010a:	8b 00                	mov    eax,DWORD PTR [eax]
c001010c:	83 ec 0c             	sub    esp,0xc
c001010f:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c0010116:	ff d0                	call   eax
c0010118:	83 c4 10             	add    esp,0x10
c001011b:	e9 98 fe ff ff       	jmp    c000ffb8 <ACPI::open(int, int, void*)+0x1b8>
c0010120:	83 ec 0c             	sub    esp,0xc
c0010123:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c001012a:	50                   	push   eax
c001012b:	e8 3c fe 00 00       	call   c001ff6c <LinkedList<Device>::~LinkedList()>
c0010130:	83 c4 10             	add    esp,0x10
c0010133:	8b 1d b8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb8
c0010139:	83 ec 08             	sub    esp,0x8
c001013c:	6a 01                	push   0x1
c001013e:	68 7d 21 02 c0       	push   0xc002217d
c0010143:	e8 6f 55 00 00       	call   c00156b7 <Thr::loadDLL(char const*, bool)>
c0010148:	83 c4 10             	add    esp,0x10
c001014b:	83 ec 08             	sub    esp,0x8
c001014e:	53                   	push   ebx
c001014f:	50                   	push   eax
c0010150:	e8 93 57 00 00       	call   c00158e8 <Thr::executeDLL(unsigned long, void*)>
c0010155:	83 c4 10             	add    esp,0x10
c0010158:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001015d:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c0010163:	83 e0 04             	and    eax,0x4
c0010166:	0f b6 c0             	movzx  eax,al
c0010169:	85 c0                	test   eax,eax
c001016b:	0f 84 1b 01 00 00    	je     c001028c <ACPI::open(int, int, void*)+0x48c>
c0010171:	83 ec 0c             	sub    esp,0xc
c0010174:	68 9a 21 02 c0       	push   0xc002219a
c0010179:	e8 15 0e 00 00       	call   c0010f93 <KeSetBootMessage(char const*)>
c001017e:	83 c4 10             	add    esp,0x10
c0010181:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c001018c:	83 ec 0c             	sub    esp,0xc
c001018f:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c0010196:	e8 1b 79 ff ff       	call   c0007ab6 <malloc>
c001019b:	83 c4 10             	add    esp,0x10
c001019e:	89 c3                	mov    ebx,eax
c00101a0:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c00101a5:	83 ec 04             	sub    esp,0x4
c00101a8:	50                   	push   eax
c00101a9:	68 b7 21 02 c0       	push   0xc00221b7
c00101ae:	53                   	push   ebx
c00101af:	e8 0e ba ff ff       	call   c000bbc2 <File::File(char const*, Process*)>
c00101b4:	83 c4 10             	add    esp,0x10
c00101b7:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c00101be:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c00101c6:	74 20                	je     c00101e8 <ACPI::open(int, int, void*)+0x3e8>
c00101c8:	83 ec 0c             	sub    esp,0xc
c00101cb:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c00101d2:	e8 cd bc ff ff       	call   c000bea4 <File::exists()>
c00101d7:	83 c4 10             	add    esp,0x10
c00101da:	0f b6 c0             	movzx  eax,al
c00101dd:	85 c0                	test   eax,eax
c00101df:	74 07                	je     c00101e8 <ACPI::open(int, int, void*)+0x3e8>
c00101e1:	b0 01                	mov    al,0x1
c00101e3:	eb 07                	jmp    c00101ec <ACPI::open(int, int, void*)+0x3ec>
c00101e5:	8d 76 00             	lea    esi,[esi+0x0]
c00101e8:	b0 00                	mov    al,0x0
c00101ea:	66 90                	xchg   ax,ax
c00101ec:	0f b6 c0             	movzx  eax,al
c00101ef:	85 c0                	test   eax,eax
c00101f1:	74 25                	je     c0010218 <ACPI::open(int, int, void*)+0x418>
c00101f3:	83 ec 08             	sub    esp,0x8
c00101f6:	6a 01                	push   0x1
c00101f8:	68 b7 21 02 c0       	push   0xc00221b7
c00101fd:	e8 b5 54 00 00       	call   c00156b7 <Thr::loadDLL(char const*, bool)>
c0010202:	83 c4 10             	add    esp,0x10
c0010205:	83 ec 08             	sub    esp,0x8
c0010208:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c001020f:	50                   	push   eax
c0010210:	e8 d3 56 00 00       	call   c00158e8 <Thr::executeDLL(unsigned long, void*)>
c0010215:	83 c4 10             	add    esp,0x10
c0010218:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c0010220:	74 2a                	je     c001024c <ACPI::open(int, int, void*)+0x44c>
c0010222:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c001022a:	74 20                	je     c001024c <ACPI::open(int, int, void*)+0x44c>
c001022c:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c0010233:	8b 00                	mov    eax,DWORD PTR [eax]
c0010235:	83 c0 08             	add    eax,0x8
c0010238:	8b 00                	mov    eax,DWORD PTR [eax]
c001023a:	83 ec 0c             	sub    esp,0xc
c001023d:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c0010244:	ff d0                	call   eax
c0010246:	83 c4 10             	add    esp,0x10
c0010249:	8d 76 00             	lea    esi,[esi+0x0]
c001024c:	a1 28 bb 02 c0       	mov    eax,ds:0xc002bb28
c0010251:	83 ec 08             	sub    esp,0x8
c0010254:	68 d4 21 02 c0       	push   0xc00221d4
c0010259:	50                   	push   eax
c001025a:	e8 c1 f1 ff ff       	call   c000f420 <findDataTable(unsigned char*, char*)>
c001025f:	83 c4 10             	add    esp,0x10
c0010262:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c0010269:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c0010271:	74 19                	je     c001028c <ACPI::open(int, int, void*)+0x48c>
c0010273:	83 ec 08             	sub    esp,0x8
c0010276:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c001027d:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c0010284:	e8 13 fb ff ff       	call   c000fd9c <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c0010289:	83 c4 10             	add    esp,0x10
c001028c:	b8 00 00 00 00       	mov    eax,0x0
c0010291:	81 c4 70 01 00 00    	add    esp,0x170
c0010297:	5b                   	pop    ebx
c0010298:	5e                   	pop    esi
c0010299:	5f                   	pop    edi
c001029a:	c3                   	ret    
c001029b:	90                   	nop

c001029c <CPU::close(int, int, void*)>:
c001029c:	31 c0                	xor    eax,eax
c001029e:	c3                   	ret    
c001029f:	90                   	nop

c00102a0 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c00102a0:	60                   	pusha  
c00102a1:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00102a5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00102a9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00102ad:	9c                   	pushf  
c00102ae:	fa                   	cli    
c00102af:	0f 09                	wbinvd 
c00102b1:	0f 30                	wrmsr  
c00102b3:	9d                   	popf   
c00102b4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00102b8:	89 02                	mov    DWORD PTR [edx],eax
c00102ba:	61                   	popa   
c00102bb:	c3                   	ret    

c00102bc <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c00102bc:	60                   	pusha  
c00102bd:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00102c1:	9c                   	pushf  
c00102c2:	fa                   	cli    
c00102c3:	0f 09                	wbinvd 
c00102c5:	31 c0                	xor    eax,eax
c00102c7:	31 d2                	xor    edx,edx
c00102c9:	0f 32                	rdmsr  
c00102cb:	9d                   	popf   
c00102cc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00102d0:	89 02                	mov    DWORD PTR [edx],eax
c00102d2:	61                   	popa   
c00102d3:	c3                   	ret    

c00102d4 <CPU::AMD_K6_writeback(int, int, int)>:
c00102d4:	56                   	push   esi
c00102d5:	53                   	push   ebx
c00102d6:	83 ec 10             	sub    esp,0x10
c00102d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00102dd:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c00102e2:	75 5d                	jne    c0010341 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c00102e4:	83 f8 08             	cmp    eax,0x8
c00102e7:	75 09                	jne    c00102f2 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c00102e9:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c00102ee:	7e 13                	jle    c0010303 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c00102f0:	eb 30                	jmp    c0010322 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c00102f2:	83 f8 06             	cmp    eax,0x6
c00102f5:	7c 4a                	jl     c0010341 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c00102f7:	83 f8 07             	cmp    eax,0x7
c00102fa:	7e 07                	jle    c0010303 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c00102fc:	83 f8 09             	cmp    eax,0x9
c00102ff:	74 21                	je     c0010322 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0010301:	eb 3e                	jmp    c0010341 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0010303:	89 e6                	mov    esi,esp
c0010305:	8b 1d dc 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026edc
c001030b:	56                   	push   esi
c001030c:	c1 eb 15             	shr    ebx,0x15
c001030f:	68 82 00 00 c0       	push   0xc0000082
c0010314:	83 e3 7e             	and    ebx,0x7e
c0010317:	e8 a0 ff ff ff       	call   c00102bc <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c001031c:	56                   	push   esi
c001031d:	6a 00                	push   0x0
c001031f:	53                   	push   ebx
c0010320:	eb 12                	jmp    c0010334 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c0010322:	89 e3                	mov    ebx,esp
c0010324:	53                   	push   ebx
c0010325:	68 82 00 00 c0       	push   0xc0000082
c001032a:	e8 8d ff ff ff       	call   c00102bc <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c001032f:	53                   	push   ebx
c0010330:	6a 00                	push   0x0
c0010332:	6a 00                	push   0x0
c0010334:	68 82 00 00 c0       	push   0xc0000082
c0010339:	e8 62 ff ff ff       	call   c00102a0 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c001033e:	83 c4 18             	add    esp,0x18
c0010341:	83 c4 10             	add    esp,0x10
c0010344:	5b                   	pop    ebx
c0010345:	5e                   	pop    esi
c0010346:	c3                   	ret    
c0010347:	90                   	nop

c0010348 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0010348:	55                   	push   ebp
c0010349:	57                   	push   edi
c001034a:	56                   	push   esi
c001034b:	53                   	push   ebx
c001034c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010350:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0010354:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0010358:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001035c:	39 05 98 37 02 c0    	cmp    DWORD PTR ds:0xc0023798,eax
c0010362:	75 23                	jne    c0010387 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0010364:	a1 8c bd 02 c0       	mov    eax,ds:0xc002bd8c
c0010369:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001036d:	89 06                	mov    DWORD PTR [esi],eax
c001036f:	a1 88 bd 02 c0       	mov    eax,ds:0xc002bd88
c0010374:	89 07                	mov    DWORD PTR [edi],eax
c0010376:	a1 84 bd 02 c0       	mov    eax,ds:0xc002bd84
c001037b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c001037e:	a1 80 bd 02 c0       	mov    eax,ds:0xc002bd80
c0010383:	89 02                	mov    DWORD PTR [edx],eax
c0010385:	eb 3f                	jmp    c00103c6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0010387:	31 c9                	xor    ecx,ecx
c0010389:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001038d:	0f a2                	cpuid  
c001038f:	89 06                	mov    DWORD PTR [esi],eax
c0010391:	89 1f                	mov    DWORD PTR [edi],ebx
c0010393:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010397:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c001039a:	89 10                	mov    DWORD PTR [eax],edx
c001039c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00103a0:	a3 98 37 02 c0       	mov    ds:0xc0023798,eax
c00103a5:	8b 06                	mov    eax,DWORD PTR [esi]
c00103a7:	a3 8c bd 02 c0       	mov    ds:0xc002bd8c,eax
c00103ac:	8b 07                	mov    eax,DWORD PTR [edi]
c00103ae:	a3 88 bd 02 c0       	mov    ds:0xc002bd88,eax
c00103b3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00103b6:	a3 84 bd 02 c0       	mov    ds:0xc002bd84,eax
c00103bb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00103bf:	8b 00                	mov    eax,DWORD PTR [eax]
c00103c1:	a3 80 bd 02 c0       	mov    ds:0xc002bd80,eax
c00103c6:	5b                   	pop    ebx
c00103c7:	5e                   	pop    esi
c00103c8:	5f                   	pop    edi
c00103c9:	5d                   	pop    ebp
c00103ca:	c3                   	ret    
c00103cb:	90                   	nop

c00103cc <CPU::cpuidCheckEDX(unsigned int)>:
c00103cc:	83 ec 10             	sub    esp,0x10
c00103cf:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00103d3:	50                   	push   eax
c00103d4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00103d8:	50                   	push   eax
c00103d9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00103dd:	50                   	push   eax
c00103de:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00103e2:	50                   	push   eax
c00103e3:	6a 01                	push   0x1
c00103e5:	e8 5e ff ff ff       	call   c0010348 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00103ea:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00103ee:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c00103f2:	0f 95 c0             	setne  al
c00103f5:	83 c4 24             	add    esp,0x24
c00103f8:	c3                   	ret    
c00103f9:	90                   	nop

c00103fa <CPU::cpuidCheckECX(unsigned int)>:
c00103fa:	83 ec 10             	sub    esp,0x10
c00103fd:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010401:	50                   	push   eax
c0010402:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010406:	50                   	push   eax
c0010407:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001040b:	50                   	push   eax
c001040c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010410:	50                   	push   eax
c0010411:	6a 01                	push   0x1
c0010413:	e8 30 ff ff ff       	call   c0010348 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010418:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001041c:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0010420:	0f 95 c0             	setne  al
c0010423:	83 c4 24             	add    esp,0x24
c0010426:	c3                   	ret    
c0010427:	90                   	nop

c0010428 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c0010428:	83 ec 10             	sub    esp,0x10
c001042b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001042f:	50                   	push   eax
c0010430:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010434:	50                   	push   eax
c0010435:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010439:	50                   	push   eax
c001043a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001043e:	50                   	push   eax
c001043f:	6a 07                	push   0x7
c0010441:	e8 02 ff ff ff       	call   c0010348 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010446:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001044a:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c001044e:	0f 95 c0             	setne  al
c0010451:	83 c4 24             	add    esp,0x24
c0010454:	c3                   	ret    
c0010455:	90                   	nop

c0010456 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c0010456:	83 ec 10             	sub    esp,0x10
c0010459:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001045d:	50                   	push   eax
c001045e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010462:	50                   	push   eax
c0010463:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010467:	50                   	push   eax
c0010468:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001046c:	50                   	push   eax
c001046d:	6a 07                	push   0x7
c001046f:	e8 d4 fe ff ff       	call   c0010348 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010474:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010478:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c001047c:	0f 95 c0             	setne  al
c001047f:	83 c4 24             	add    esp,0x24
c0010482:	c3                   	ret    
c0010483:	90                   	nop

c0010484 <CPU::CPU()>:
c0010484:	83 ec 0c             	sub    esp,0xc
c0010487:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001048b:	83 ec 08             	sub    esp,0x8
c001048e:	68 f9 22 02 c0       	push   0xc00222f9
c0010493:	50                   	push   eax
c0010494:	e8 39 c7 ff ff       	call   c000cbd2 <Device::Device(char const*)>
c0010499:	83 c4 10             	add    esp,0x10
c001049c:	ba 8c 23 02 c0       	mov    edx,0xc002238c
c00104a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104a5:	89 10                	mov    DWORD PTR [eax],edx
c00104a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104ab:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c00104b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104b9:	05 78 01 00 00       	add    eax,0x178
c00104be:	83 ec 0c             	sub    esp,0xc
c00104c1:	50                   	push   eax
c00104c2:	e8 95 6e ff ff       	call   c000735c <GDT::GDT()>
c00104c7:	83 c4 10             	add    esp,0x10
c00104ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104ce:	05 7c 09 00 00       	add    eax,0x97c
c00104d3:	83 ec 0c             	sub    esp,0xc
c00104d6:	50                   	push   eax
c00104d7:	e8 d0 70 ff ff       	call   c00075ac <IDT::IDT()>
c00104dc:	83 c4 10             	add    esp,0x10
c00104df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104e3:	05 7c 11 00 00       	add    eax,0x117c
c00104e8:	83 ec 0c             	sub    esp,0xc
c00104eb:	50                   	push   eax
c00104ec:	e8 53 8a ff ff       	call   c0008f44 <TSS::TSS()>
c00104f1:	83 c4 10             	add    esp,0x10
c00104f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104f8:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c00104ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010503:	c7 80 10 01 00 00 11 00 00 00 	mov    DWORD PTR [eax+0x110],0x11
c001050d:	90                   	nop
c001050e:	83 c4 0c             	add    esp,0xc
c0010511:	c3                   	ret    

c0010512 <CPU::displayFeatures()>:
c0010512:	c3                   	ret    
c0010513:	90                   	nop

c0010514 <CPU::detectFeatures()>:
c0010514:	55                   	push   ebp
c0010515:	57                   	push   edi
c0010516:	56                   	push   esi
c0010517:	53                   	push   ebx
c0010518:	83 ec 30             	sub    esp,0x30
c001051b:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001051f:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c0010529:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c0010530:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c0010536:	6a 0d                	push   0xd
c0010538:	6a 00                	push   0x0
c001053a:	55                   	push   ebp
c001053b:	e8 b0 ff fe ff       	call   c00004f0 <memset>
c0010540:	83 c4 10             	add    esp,0x10
c0010543:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0010548:	f6 80 6c 01 00 00 02 	test   BYTE PTR [eax+0x16c],0x2
c001054f:	0f 84 db 05 00 00    	je     c0010b30 <CPU::detectFeatures()+0x61c>
c0010555:	83 ec 0c             	sub    esp,0xc
c0010558:	89 ef                	mov    edi,ebp
c001055a:	6a 10                	push   0x10
c001055c:	e8 6b fe ff ff       	call   c00103cc <CPU::cpuidCheckEDX(unsigned int)>
c0010561:	83 e0 01             	and    eax,0x1
c0010564:	8d 14 00             	lea    edx,[eax+eax*1]
c0010567:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001056d:	83 e0 fd             	and    eax,0xfffffffd
c0010570:	09 d0                	or     eax,edx
c0010572:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0010578:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c001057f:	e8 48 fe ff ff       	call   c00103cc <CPU::cpuidCheckEDX(unsigned int)>
c0010584:	83 e0 01             	and    eax,0x1
c0010587:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c001058e:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0010594:	83 e0 fb             	and    eax,0xfffffffb
c0010597:	09 d0                	or     eax,edx
c0010599:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001059f:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c00105a6:	e8 21 fe ff ff       	call   c00103cc <CPU::cpuidCheckEDX(unsigned int)>
c00105ab:	83 e0 01             	and    eax,0x1
c00105ae:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c00105b5:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c00105bb:	83 e0 f7             	and    eax,0xfffffff7
c00105be:	09 d0                	or     eax,edx
c00105c0:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c00105c6:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c00105cd:	e8 fa fd ff ff       	call   c00103cc <CPU::cpuidCheckEDX(unsigned int)>
c00105d2:	83 e0 01             	and    eax,0x1
c00105d5:	c1 e0 04             	shl    eax,0x4
c00105d8:	89 c2                	mov    edx,eax
c00105da:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c00105e0:	83 e0 ef             	and    eax,0xffffffef
c00105e3:	09 d0                	or     eax,edx
c00105e5:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c00105eb:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c00105f2:	e8 d5 fd ff ff       	call   c00103cc <CPU::cpuidCheckEDX(unsigned int)>
c00105f7:	83 e0 01             	and    eax,0x1
c00105fa:	c1 e0 05             	shl    eax,0x5
c00105fd:	89 c2                	mov    edx,eax
c00105ff:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0010605:	83 e0 df             	and    eax,0xffffffdf
c0010608:	09 d0                	or     eax,edx
c001060a:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0010610:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0010617:	e8 b0 fd ff ff       	call   c00103cc <CPU::cpuidCheckEDX(unsigned int)>
c001061c:	83 e0 01             	and    eax,0x1
c001061f:	8d 14 00             	lea    edx,[eax+eax*1]
c0010622:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0010628:	83 e0 fd             	and    eax,0xfffffffd
c001062b:	09 d0                	or     eax,edx
c001062d:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c0010633:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c001063a:	e8 8d fd ff ff       	call   c00103cc <CPU::cpuidCheckEDX(unsigned int)>
c001063f:	83 e0 01             	and    eax,0x1
c0010642:	c1 e0 06             	shl    eax,0x6
c0010645:	89 c2                	mov    edx,eax
c0010647:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c001064d:	83 e0 bf             	and    eax,0xffffffbf
c0010650:	09 d0                	or     eax,edx
c0010652:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c0010658:	58                   	pop    eax
c0010659:	8d 44 24 28          	lea    eax,[esp+0x28]
c001065d:	50                   	push   eax
c001065e:	8d 44 24 28          	lea    eax,[esp+0x28]
c0010662:	50                   	push   eax
c0010663:	8d 74 24 28          	lea    esi,[esp+0x28]
c0010667:	56                   	push   esi
c0010668:	8d 44 24 28          	lea    eax,[esp+0x28]
c001066c:	50                   	push   eax
c001066d:	6a 00                	push   0x0
c001066f:	e8 d4 fc ff ff       	call   c0010348 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010674:	b8 04 00 00 00       	mov    eax,0x4
c0010679:	89 c1                	mov    ecx,eax
c001067b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001067d:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c0010683:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c0010687:	89 c1                	mov    ecx,eax
c0010689:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001068b:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c0010691:	8d 74 24 38          	lea    esi,[esp+0x38]
c0010695:	89 c1                	mov    ecx,eax
c0010697:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010699:	83 c4 18             	add    esp,0x18
c001069c:	68 08 22 02 c0       	push   0xc0022208
c00106a1:	55                   	push   ebp
c00106a2:	e8 a9 00 ff ff       	call   c0000750 <strcmp>
c00106a7:	83 c4 10             	add    esp,0x10
c00106aa:	85 c0                	test   eax,eax
c00106ac:	75 0f                	jne    c00106bd <CPU::detectFeatures()+0x1a9>
c00106ae:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c00106b8:	e9 22 02 00 00       	jmp    c00108df <CPU::detectFeatures()+0x3cb>
c00106bd:	50                   	push   eax
c00106be:	50                   	push   eax
c00106bf:	68 15 22 02 c0       	push   0xc0022215
c00106c4:	55                   	push   ebp
c00106c5:	e8 86 00 ff ff       	call   c0000750 <strcmp>
c00106ca:	83 c4 10             	add    esp,0x10
c00106cd:	85 c0                	test   eax,eax
c00106cf:	74 dd                	je     c00106ae <CPU::detectFeatures()+0x19a>
c00106d1:	50                   	push   eax
c00106d2:	50                   	push   eax
c00106d3:	68 22 22 02 c0       	push   0xc0022222
c00106d8:	55                   	push   ebp
c00106d9:	e8 72 00 ff ff       	call   c0000750 <strcmp>
c00106de:	83 c4 10             	add    esp,0x10
c00106e1:	85 c0                	test   eax,eax
c00106e3:	74 2a                	je     c001070f <CPU::detectFeatures()+0x1fb>
c00106e5:	50                   	push   eax
c00106e6:	50                   	push   eax
c00106e7:	68 2f 22 02 c0       	push   0xc002222f
c00106ec:	55                   	push   ebp
c00106ed:	e8 5e 00 ff ff       	call   c0000750 <strcmp>
c00106f2:	83 c4 10             	add    esp,0x10
c00106f5:	85 c0                	test   eax,eax
c00106f7:	74 16                	je     c001070f <CPU::detectFeatures()+0x1fb>
c00106f9:	50                   	push   eax
c00106fa:	50                   	push   eax
c00106fb:	68 3c 22 02 c0       	push   0xc002223c
c0010700:	55                   	push   ebp
c0010701:	e8 4a 00 ff ff       	call   c0000750 <strcmp>
c0010706:	83 c4 10             	add    esp,0x10
c0010709:	85 c0                	test   eax,eax
c001070b:	74 48                	je     c0010755 <CPU::detectFeatures()+0x241>
c001070d:	eb 0f                	jmp    c001071e <CPU::detectFeatures()+0x20a>
c001070f:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0010719:	e9 c1 01 00 00       	jmp    c00108df <CPU::detectFeatures()+0x3cb>
c001071e:	50                   	push   eax
c001071f:	50                   	push   eax
c0010720:	68 49 22 02 c0       	push   0xc0022249
c0010725:	55                   	push   ebp
c0010726:	e8 25 00 ff ff       	call   c0000750 <strcmp>
c001072b:	83 c4 10             	add    esp,0x10
c001072e:	85 c0                	test   eax,eax
c0010730:	74 23                	je     c0010755 <CPU::detectFeatures()+0x241>
c0010732:	57                   	push   edi
c0010733:	57                   	push   edi
c0010734:	68 56 22 02 c0       	push   0xc0022256
c0010739:	55                   	push   ebp
c001073a:	e8 11 00 ff ff       	call   c0000750 <strcmp>
c001073f:	83 c4 10             	add    esp,0x10
c0010742:	85 c0                	test   eax,eax
c0010744:	75 1e                	jne    c0010764 <CPU::detectFeatures()+0x250>
c0010746:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0010750:	e9 8a 01 00 00       	jmp    c00108df <CPU::detectFeatures()+0x3cb>
c0010755:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c001075f:	e9 7b 01 00 00       	jmp    c00108df <CPU::detectFeatures()+0x3cb>
c0010764:	56                   	push   esi
c0010765:	56                   	push   esi
c0010766:	68 63 22 02 c0       	push   0xc0022263
c001076b:	55                   	push   ebp
c001076c:	e8 df ff fe ff       	call   c0000750 <strcmp>
c0010771:	83 c4 10             	add    esp,0x10
c0010774:	85 c0                	test   eax,eax
c0010776:	75 0f                	jne    c0010787 <CPU::detectFeatures()+0x273>
c0010778:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0010782:	e9 58 01 00 00       	jmp    c00108df <CPU::detectFeatures()+0x3cb>
c0010787:	51                   	push   ecx
c0010788:	51                   	push   ecx
c0010789:	68 22 22 02 c0       	push   0xc0022222
c001078e:	55                   	push   ebp
c001078f:	e8 bc ff fe ff       	call   c0000750 <strcmp>
c0010794:	83 c4 10             	add    esp,0x10
c0010797:	85 c0                	test   eax,eax
c0010799:	75 0f                	jne    c00107aa <CPU::detectFeatures()+0x296>
c001079b:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c00107a5:	e9 35 01 00 00       	jmp    c00108df <CPU::detectFeatures()+0x3cb>
c00107aa:	52                   	push   edx
c00107ab:	52                   	push   edx
c00107ac:	68 70 22 02 c0       	push   0xc0022270
c00107b1:	55                   	push   ebp
c00107b2:	e8 99 ff fe ff       	call   c0000750 <strcmp>
c00107b7:	83 c4 10             	add    esp,0x10
c00107ba:	85 c0                	test   eax,eax
c00107bc:	75 0f                	jne    c00107cd <CPU::detectFeatures()+0x2b9>
c00107be:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c00107c8:	e9 12 01 00 00       	jmp    c00108df <CPU::detectFeatures()+0x3cb>
c00107cd:	50                   	push   eax
c00107ce:	50                   	push   eax
c00107cf:	68 7d 22 02 c0       	push   0xc002227d
c00107d4:	55                   	push   ebp
c00107d5:	e8 76 ff fe ff       	call   c0000750 <strcmp>
c00107da:	83 c4 10             	add    esp,0x10
c00107dd:	85 c0                	test   eax,eax
c00107df:	75 0f                	jne    c00107f0 <CPU::detectFeatures()+0x2dc>
c00107e1:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c00107eb:	e9 ef 00 00 00       	jmp    c00108df <CPU::detectFeatures()+0x3cb>
c00107f0:	50                   	push   eax
c00107f1:	50                   	push   eax
c00107f2:	68 8a 22 02 c0       	push   0xc002228a
c00107f7:	55                   	push   ebp
c00107f8:	e8 53 ff fe ff       	call   c0000750 <strcmp>
c00107fd:	83 c4 10             	add    esp,0x10
c0010800:	85 c0                	test   eax,eax
c0010802:	75 0f                	jne    c0010813 <CPU::detectFeatures()+0x2ff>
c0010804:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c001080e:	e9 cc 00 00 00       	jmp    c00108df <CPU::detectFeatures()+0x3cb>
c0010813:	50                   	push   eax
c0010814:	50                   	push   eax
c0010815:	68 97 22 02 c0       	push   0xc0022297
c001081a:	55                   	push   ebp
c001081b:	e8 30 ff fe ff       	call   c0000750 <strcmp>
c0010820:	83 c4 10             	add    esp,0x10
c0010823:	85 c0                	test   eax,eax
c0010825:	75 0f                	jne    c0010836 <CPU::detectFeatures()+0x322>
c0010827:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0010831:	e9 a9 00 00 00       	jmp    c00108df <CPU::detectFeatures()+0x3cb>
c0010836:	50                   	push   eax
c0010837:	50                   	push   eax
c0010838:	68 a4 22 02 c0       	push   0xc00222a4
c001083d:	55                   	push   ebp
c001083e:	e8 0d ff fe ff       	call   c0000750 <strcmp>
c0010843:	83 c4 10             	add    esp,0x10
c0010846:	85 c0                	test   eax,eax
c0010848:	75 0f                	jne    c0010859 <CPU::detectFeatures()+0x345>
c001084a:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0010854:	e9 86 00 00 00       	jmp    c00108df <CPU::detectFeatures()+0x3cb>
c0010859:	50                   	push   eax
c001085a:	50                   	push   eax
c001085b:	68 b1 22 02 c0       	push   0xc00222b1
c0010860:	55                   	push   ebp
c0010861:	e8 ea fe fe ff       	call   c0000750 <strcmp>
c0010866:	83 c4 10             	add    esp,0x10
c0010869:	85 c0                	test   eax,eax
c001086b:	75 0c                	jne    c0010879 <CPU::detectFeatures()+0x365>
c001086d:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c0010877:	eb 66                	jmp    c00108df <CPU::detectFeatures()+0x3cb>
c0010879:	50                   	push   eax
c001087a:	50                   	push   eax
c001087b:	68 be 22 02 c0       	push   0xc00222be
c0010880:	55                   	push   ebp
c0010881:	e8 ca fe fe ff       	call   c0000750 <strcmp>
c0010886:	83 c4 10             	add    esp,0x10
c0010889:	85 c0                	test   eax,eax
c001088b:	75 0c                	jne    c0010899 <CPU::detectFeatures()+0x385>
c001088d:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c0010897:	eb 46                	jmp    c00108df <CPU::detectFeatures()+0x3cb>
c0010899:	57                   	push   edi
c001089a:	57                   	push   edi
c001089b:	68 cb 22 02 c0       	push   0xc00222cb
c00108a0:	55                   	push   ebp
c00108a1:	e8 aa fe fe ff       	call   c0000750 <strcmp>
c00108a6:	83 c4 10             	add    esp,0x10
c00108a9:	85 c0                	test   eax,eax
c00108ab:	74 e0                	je     c001088d <CPU::detectFeatures()+0x379>
c00108ad:	56                   	push   esi
c00108ae:	56                   	push   esi
c00108af:	68 d8 22 02 c0       	push   0xc00222d8
c00108b4:	55                   	push   ebp
c00108b5:	e8 96 fe fe ff       	call   c0000750 <strcmp>
c00108ba:	83 c4 10             	add    esp,0x10
c00108bd:	85 c0                	test   eax,eax
c00108bf:	74 cc                	je     c001088d <CPU::detectFeatures()+0x379>
c00108c1:	51                   	push   ecx
c00108c2:	51                   	push   ecx
c00108c3:	68 e5 22 02 c0       	push   0xc00222e5
c00108c8:	55                   	push   ebp
c00108c9:	e8 82 fe fe ff       	call   c0000750 <strcmp>
c00108ce:	83 c4 10             	add    esp,0x10
c00108d1:	85 c0                	test   eax,eax
c00108d3:	74 b8                	je     c001088d <CPU::detectFeatures()+0x379>
c00108d5:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c00108df:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c00108e4:	0f 86 be 00 00 00    	jbe    c00109a8 <CPU::detectFeatures()+0x494>
c00108ea:	83 ec 0c             	sub    esp,0xc
c00108ed:	68 80 00 00 00       	push   0x80
c00108f2:	e8 31 fb ff ff       	call   c0010428 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00108f7:	83 e0 01             	and    eax,0x1
c00108fa:	c1 e0 06             	shl    eax,0x6
c00108fd:	89 c2                	mov    edx,eax
c00108ff:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0010905:	83 e0 bf             	and    eax,0xffffffbf
c0010908:	09 d0                	or     eax,edx
c001090a:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0010910:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0010917:	e8 0c fb ff ff       	call   c0010428 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001091c:	83 e0 01             	and    eax,0x1
c001091f:	c1 e0 04             	shl    eax,0x4
c0010922:	89 c2                	mov    edx,eax
c0010924:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c001092a:	83 e0 ef             	and    eax,0xffffffef
c001092d:	09 d0                	or     eax,edx
c001092f:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c0010935:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c001093c:	e8 e7 fa ff ff       	call   c0010428 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0010941:	89 c2                	mov    edx,eax
c0010943:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0010949:	c1 e2 07             	shl    edx,0x7
c001094c:	83 e0 7f             	and    eax,0x7f
c001094f:	09 d0                	or     eax,edx
c0010951:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0010957:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001095e:	e8 f3 fa ff ff       	call   c0010456 <CPU::cpuidCheckExtendedECX(unsigned int)>
c0010963:	83 e0 01             	and    eax,0x1
c0010966:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c001096d:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c0010973:	83 e0 f7             	and    eax,0xfffffff7
c0010976:	09 d0                	or     eax,edx
c0010978:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c001097e:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c0010985:	e8 cc fa ff ff       	call   c0010456 <CPU::cpuidCheckExtendedECX(unsigned int)>
c001098a:	83 c4 10             	add    esp,0x10
c001098d:	83 e0 01             	and    eax,0x1
c0010990:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0010997:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c001099d:	83 e0 fb             	and    eax,0xfffffffb
c00109a0:	09 d0                	or     eax,edx
c00109a2:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c00109a8:	83 ec 0c             	sub    esp,0xc
c00109ab:	8d 44 24 28          	lea    eax,[esp+0x28]
c00109af:	50                   	push   eax
c00109b0:	8d 44 24 28          	lea    eax,[esp+0x28]
c00109b4:	50                   	push   eax
c00109b5:	8d 7c 24 28          	lea    edi,[esp+0x28]
c00109b9:	57                   	push   edi
c00109ba:	8d 74 24 28          	lea    esi,[esp+0x28]
c00109be:	56                   	push   esi
c00109bf:	6a 01                	push   0x1
c00109c1:	e8 82 f9 ff ff       	call   c0010348 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00109c6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00109ca:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c00109d0:	89 c1                	mov    ecx,eax
c00109d2:	83 e2 f0             	and    edx,0xfffffff0
c00109d5:	83 e1 0f             	and    ecx,0xf
c00109d8:	09 ca                	or     edx,ecx
c00109da:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c00109e0:	89 c2                	mov    edx,eax
c00109e2:	c1 ea 04             	shr    edx,0x4
c00109e5:	83 e2 0f             	and    edx,0xf
c00109e8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00109ec:	89 d1                	mov    ecx,edx
c00109ee:	83 c4 20             	add    esp,0x20
c00109f1:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00109f7:	c1 e1 06             	shl    ecx,0x6
c00109fa:	81 e2 3f c0 ff ff    	and    edx,0xffffc03f
c0010a00:	09 ca                	or     edx,ecx
c0010a02:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c0010a09:	89 c2                	mov    edx,eax
c0010a0b:	8a 8b 5d 01 00 00    	mov    cl,BYTE PTR [ebx+0x15d]
c0010a11:	c1 ea 08             	shr    edx,0x8
c0010a14:	83 e1 3f             	and    ecx,0x3f
c0010a17:	83 e2 0f             	and    edx,0xf
c0010a1a:	89 d5                	mov    ebp,edx
c0010a1c:	83 e5 03             	and    ebp,0x3
c0010a1f:	c1 e5 06             	shl    ebp,0x6
c0010a22:	09 e9                	or     ecx,ebp
c0010a24:	89 d5                	mov    ebp,edx
c0010a26:	88 8b 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],cl
c0010a2c:	c1 ed 02             	shr    ebp,0x2
c0010a2f:	8a 8b 5e 01 00 00    	mov    cl,BYTE PTR [ebx+0x15e]
c0010a35:	83 e1 c0             	and    ecx,0xffffffc0
c0010a38:	09 e9                	or     ecx,ebp
c0010a3a:	89 c5                	mov    ebp,eax
c0010a3c:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c0010a42:	c1 ed 08             	shr    ebp,0x8
c0010a45:	8a 8b 5c 01 00 00    	mov    cl,BYTE PTR [ebx+0x15c]
c0010a4b:	83 e5 30             	and    ebp,0x30
c0010a4e:	83 e1 cf             	and    ecx,0xffffffcf
c0010a51:	09 e9                	or     ecx,ebp
c0010a53:	83 fa 06             	cmp    edx,0x6
c0010a56:	88 8b 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],cl
c0010a5c:	74 05                	je     c0010a63 <CPU::detectFeatures()+0x54f>
c0010a5e:	83 fa 0f             	cmp    edx,0xf
c0010a61:	75 64                	jne    c0010ac7 <CPU::detectFeatures()+0x5b3>
c0010a63:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0010a69:	89 c1                	mov    ecx,eax
c0010a6b:	81 e5 3f c0 ff ff    	and    ebp,0xffffc03f
c0010a71:	c1 e9 10             	shr    ecx,0x10
c0010a74:	c1 e1 04             	shl    ecx,0x4
c0010a77:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c0010a7b:	0f b6 c9             	movzx  ecx,cl
c0010a7e:	c1 e1 06             	shl    ecx,0x6
c0010a81:	09 e9                	or     ecx,ebp
c0010a83:	83 fa 0f             	cmp    edx,0xf
c0010a86:	66 89 8b 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],cx
c0010a8d:	75 38                	jne    c0010ac7 <CPU::detectFeatures()+0x5b3>
c0010a8f:	c1 e8 14             	shr    eax,0x14
c0010a92:	83 c0 0f             	add    eax,0xf
c0010a95:	0f b6 c0             	movzx  eax,al
c0010a98:	89 c2                	mov    edx,eax
c0010a9a:	c1 e8 02             	shr    eax,0x2
c0010a9d:	83 e2 03             	and    edx,0x3
c0010aa0:	89 d1                	mov    ecx,edx
c0010aa2:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c0010aa8:	c1 e1 06             	shl    ecx,0x6
c0010aab:	83 e2 3f             	and    edx,0x3f
c0010aae:	09 ca                	or     edx,ecx
c0010ab0:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c0010ab6:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c0010abc:	83 e2 c0             	and    edx,0xffffffc0
c0010abf:	09 d0                	or     eax,edx
c0010ac1:	88 83 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],al
c0010ac7:	83 ec 0c             	sub    esp,0xc
c0010aca:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c0010ad0:	83 c8 07             	or     eax,0x7
c0010ad3:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c0010ad9:	8d 44 24 28          	lea    eax,[esp+0x28]
c0010add:	50                   	push   eax
c0010ade:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0010ae2:	55                   	push   ebp
c0010ae3:	57                   	push   edi
c0010ae4:	56                   	push   esi
c0010ae5:	68 00 00 00 80       	push   0x80000000
c0010aea:	e8 59 f8 ff ff       	call   c0010348 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010aef:	83 c4 20             	add    esp,0x20
c0010af2:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c0010afa:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0010afe:	76 1e                	jbe    c0010b1e <CPU::detectFeatures()+0x60a>
c0010b00:	83 ec 0c             	sub    esp,0xc
c0010b03:	50                   	push   eax
c0010b04:	55                   	push   ebp
c0010b05:	57                   	push   edi
c0010b06:	56                   	push   esi
c0010b07:	68 01 00 00 80       	push   0x80000001
c0010b0c:	e8 37 f8 ff ff       	call   c0010348 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010b11:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c0010b1b:	83 c4 20             	add    esp,0x20
c0010b1e:	52                   	push   edx
c0010b1f:	52                   	push   edx
c0010b20:	68 f1 22 02 c0       	push   0xc00222f1
c0010b25:	53                   	push   ebx
c0010b26:	e8 99 c0 ff ff       	call   c000cbc4 <Device::setName(char const*)>
c0010b2b:	83 c4 10             	add    esp,0x10
c0010b2e:	eb 69                	jmp    c0010b99 <CPU::detectFeatures()+0x685>
c0010b30:	50                   	push   eax
c0010b31:	50                   	push   eax
c0010b32:	68 56 22 02 c0       	push   0xc0022256
c0010b37:	55                   	push   ebp
c0010b38:	e8 03 fb fe ff       	call   c0000640 <strcpy>
c0010b3d:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0010b47:	e8 77 f6 fe ff       	call   c00001c3 <is486>
c0010b4c:	83 c4 10             	add    esp,0x10
c0010b4f:	85 c0                	test   eax,eax
c0010b51:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c0010b57:	74 1f                	je     c0010b78 <CPU::detectFeatures()+0x664>
c0010b59:	83 c8 07             	or     eax,0x7
c0010b5c:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c0010b62:	0f 20 c0             	mov    eax,cr0
c0010b65:	83 e0 14             	and    eax,0x14
c0010b68:	83 f8 04             	cmp    eax,0x4
c0010b6b:	75 10                	jne    c0010b7d <CPU::detectFeatures()+0x669>
c0010b6d:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0010b73:	83 e0 fd             	and    eax,0xfffffffd
c0010b76:	eb 1b                	jmp    c0010b93 <CPU::detectFeatures()+0x67f>
c0010b78:	83 e0 f8             	and    eax,0xfffffff8
c0010b7b:	eb df                	jmp    c0010b5c <CPU::detectFeatures()+0x648>
c0010b7d:	e8 1c f6 fe ff       	call   c000019e <hasLegacyFPU>
c0010b82:	83 e0 01             	and    eax,0x1
c0010b85:	8d 14 00             	lea    edx,[eax+eax*1]
c0010b88:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0010b8e:	83 e0 fd             	and    eax,0xfffffffd
c0010b91:	09 d0                	or     eax,edx
c0010b93:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c0010b99:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c0010ba0:	74 17                	je     c0010bb9 <CPU::detectFeatures()+0x6a5>
c0010ba2:	8b 15 b8 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026eb8
c0010ba8:	8a 82 6c 01 00 00    	mov    al,BYTE PTR [edx+0x16c]
c0010bae:	83 c8 10             	or     eax,0x10
c0010bb1:	88 82 6c 01 00 00    	mov    BYTE PTR [edx+0x16c],al
c0010bb7:	eb 20                	jmp    c0010bd9 <CPU::detectFeatures()+0x6c5>
c0010bb9:	e8 e0 f5 fe ff       	call   c000019e <hasLegacyFPU>
c0010bbe:	83 e0 01             	and    eax,0x1
c0010bc1:	8d 14 00             	lea    edx,[eax+eax*1]
c0010bc4:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0010bca:	83 e0 fd             	and    eax,0xfffffffd
c0010bcd:	09 d0                	or     eax,edx
c0010bcf:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c0010bd5:	a8 02                	test   al,0x2
c0010bd7:	75 c9                	jne    c0010ba2 <CPU::detectFeatures()+0x68e>
c0010bd9:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c0010be0:	83 c4 2c             	add    esp,0x2c
c0010be3:	5b                   	pop    ebx
c0010be4:	5e                   	pop    esi
c0010be5:	5f                   	pop    edi
c0010be6:	5d                   	pop    ebp
c0010be7:	c3                   	ret    

c0010be8 <CPU::setupSMEP()>:
c0010be8:	0f 20 e0             	mov    eax,cr4
c0010beb:	0d 00 00 10 00       	or     eax,0x100000
c0010bf0:	0f 22 e0             	mov    cr4,eax
c0010bf3:	c3                   	ret    

c0010bf4 <CPU::setupUMIP()>:
c0010bf4:	0f 20 e0             	mov    eax,cr4
c0010bf7:	80 cc 08             	or     ah,0x8
c0010bfa:	0f 22 e0             	mov    cr4,eax
c0010bfd:	c3                   	ret    

c0010bfe <CPU::setupTSC()>:
c0010bfe:	0f 20 e0             	mov    eax,cr4
c0010c01:	83 c8 04             	or     eax,0x4
c0010c04:	0f 22 e0             	mov    cr4,eax
c0010c07:	c3                   	ret    

c0010c08 <CPU::setupLargePages()>:
c0010c08:	0f 20 e0             	mov    eax,cr4
c0010c0b:	83 c8 10             	or     eax,0x10
c0010c0e:	0f 22 e0             	mov    cr4,eax
c0010c11:	c3                   	ret    

c0010c12 <CPU::setupPAT()>:
c0010c12:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0010c17:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0010c1e:	74 2c                	je     c0010c4c <CPU::setupPAT()+0x3a>
c0010c20:	53                   	push   ebx
c0010c21:	83 ec 10             	sub    esp,0x10
c0010c24:	68 77 02 00 00       	push   0x277
c0010c29:	50                   	push   eax
c0010c2a:	e8 91 64 ff ff       	call   c00070c0 <Computer::rdmsr(unsigned int)>
c0010c2f:	83 e2 f8             	and    edx,0xfffffff8
c0010c32:	83 ca 01             	or     edx,0x1
c0010c35:	52                   	push   edx
c0010c36:	50                   	push   eax
c0010c37:	68 77 02 00 00       	push   0x277
c0010c3c:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0010c42:	e8 a5 64 ff ff       	call   c00070ec <Computer::wrmsr(unsigned int, unsigned long long)>
c0010c47:	83 c4 28             	add    esp,0x28
c0010c4a:	5b                   	pop    ebx
c0010c4b:	c3                   	ret    
c0010c4c:	c3                   	ret    
c0010c4d:	90                   	nop

c0010c4e <CPU::setupMTRR()>:
c0010c4e:	c3                   	ret    
c0010c4f:	90                   	nop

c0010c50 <CPU::setupGlobalPages()>:
c0010c50:	0f 20 e0             	mov    eax,cr4
c0010c53:	0c 80                	or     al,0x80
c0010c55:	0f 22 e0             	mov    cr4,eax
c0010c58:	c3                   	ret    
c0010c59:	90                   	nop

c0010c5a <CPU::allowUsermodeDataAccess()>:
c0010c5a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010c5e:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c0010c65:	74 03                	je     c0010c6a <CPU::allowUsermodeDataAccess()+0x10>
c0010c67:	0f 01 cb             	stac   
c0010c6a:	c3                   	ret    
c0010c6b:	90                   	nop

c0010c6c <CPU::prohibitUsermodeDataAccess()>:
c0010c6c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010c70:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c0010c77:	74 03                	je     c0010c7c <CPU::prohibitUsermodeDataAccess()+0x10>
c0010c79:	0f 01 ca             	clac   
c0010c7c:	c3                   	ret    
c0010c7d:	90                   	nop

c0010c7e <CPU::setupSMAP()>:
c0010c7e:	0f 20 e0             	mov    eax,cr4
c0010c81:	0d 00 00 20 00       	or     eax,0x200000
c0010c86:	0f 22 e0             	mov    cr4,eax
c0010c89:	eb e1                	jmp    c0010c6c <CPU::prohibitUsermodeDataAccess()>
c0010c8b:	90                   	nop

c0010c8c <CPU::setupFeatures()>:
c0010c8c:	53                   	push   ebx
c0010c8d:	83 ec 08             	sub    esp,0x8
c0010c90:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010c94:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c0010c9b:	74 18                	je     c0010cb5 <CPU::setupFeatures()+0x29>
c0010c9d:	83 ec 0c             	sub    esp,0xc
c0010ca0:	68 fd 22 02 c0       	push   0xc00222fd
c0010ca5:	e8 9b 9c ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0010caa:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010cad:	e8 42 ff ff ff       	call   c0010bf4 <CPU::setupUMIP()>
c0010cb2:	83 c4 10             	add    esp,0x10
c0010cb5:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c0010cbc:	74 18                	je     c0010cd6 <CPU::setupFeatures()+0x4a>
c0010cbe:	83 ec 0c             	sub    esp,0xc
c0010cc1:	68 07 23 02 c0       	push   0xc0022307
c0010cc6:	e8 7a 9c ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0010ccb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010cce:	e8 2b ff ff ff       	call   c0010bfe <CPU::setupTSC()>
c0010cd3:	83 c4 10             	add    esp,0x10
c0010cd6:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c0010cdd:	74 18                	je     c0010cf7 <CPU::setupFeatures()+0x6b>
c0010cdf:	83 ec 0c             	sub    esp,0xc
c0010ce2:	68 10 23 02 c0       	push   0xc0022310
c0010ce7:	e8 59 9c ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0010cec:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010cef:	e8 14 ff ff ff       	call   c0010c08 <CPU::setupLargePages()>
c0010cf4:	83 c4 10             	add    esp,0x10
c0010cf7:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c0010cfe:	74 18                	je     c0010d18 <CPU::setupFeatures()+0x8c>
c0010d00:	83 ec 0c             	sub    esp,0xc
c0010d03:	68 19 23 02 c0       	push   0xc0022319
c0010d08:	e8 38 9c ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0010d0d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010d10:	e8 3b ff ff ff       	call   c0010c50 <CPU::setupGlobalPages()>
c0010d15:	83 c4 10             	add    esp,0x10
c0010d18:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c0010d1f:	74 18                	je     c0010d39 <CPU::setupFeatures()+0xad>
c0010d21:	83 ec 0c             	sub    esp,0xc
c0010d24:	68 2b 23 02 c0       	push   0xc002232b
c0010d29:	e8 17 9c ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0010d2e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010d31:	e8 dc fe ff ff       	call   c0010c12 <CPU::setupPAT()>
c0010d36:	83 c4 10             	add    esp,0x10
c0010d39:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c0010d40:	74 11                	je     c0010d53 <CPU::setupFeatures()+0xc7>
c0010d42:	c7 44 24 10 34 23 02 c0 	mov    DWORD PTR [esp+0x10],0xc0022334
c0010d4a:	83 c4 08             	add    esp,0x8
c0010d4d:	5b                   	pop    ebx
c0010d4e:	e9 f2 9b ff ff       	jmp    c000a945 <Dbg::kprintf(char const*, ...)>
c0010d53:	83 c4 08             	add    esp,0x8
c0010d56:	5b                   	pop    ebx
c0010d57:	c3                   	ret    

c0010d58 <CPU::open(int, int, void*)>:
c0010d58:	55                   	push   ebp
c0010d59:	57                   	push   edi
c0010d5a:	56                   	push   esi
c0010d5b:	53                   	push   ebx
c0010d5c:	83 ec 18             	sub    esp,0x18
c0010d5f:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010d63:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0010d67:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0010d6b:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0010d71:	89 bb 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edi
c0010d77:	8d ab 7c 11 00 00    	lea    ebp,[ebx+0x117c]
c0010d7d:	50                   	push   eax
c0010d7e:	e8 3b 66 ff ff       	call   c00073be <GDT::setup()>
c0010d83:	83 c4 0c             	add    esp,0xc
c0010d86:	6a 00                	push   0x0
c0010d88:	68 ef be ad de       	push   0xdeadbeef
c0010d8d:	55                   	push   ebp
c0010d8e:	e8 f5 81 ff ff       	call   c0008f88 <TSS::setup(unsigned long, unsigned long)>
c0010d93:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0010d96:	e8 cd 81 ff ff       	call   c0008f68 <TSS::flush()>
c0010d9b:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0010da1:	89 04 24             	mov    DWORD PTR [esp],eax
c0010da4:	e8 79 68 ff ff       	call   c0007622 <IDT::setup()>
c0010da9:	b8 00 04 00 00       	mov    eax,0x400
c0010dae:	0f 23 f8             	mov    db7,eax
c0010db1:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0010dbb:	e8 ff 6f ff ff       	call   c0007dbf <Phys::allocatePage()>
c0010dc0:	83 c4 10             	add    esp,0x10
c0010dc3:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0010dc9:	85 f6                	test   esi,esi
c0010dcb:	89 38                	mov    DWORD PTR [eax],edi
c0010dcd:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0010dd3:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0010dd6:	74 10                	je     c0010de8 <CPU::open(int, int, void*)+0x90>
c0010dd8:	50                   	push   eax
c0010dd9:	50                   	push   eax
c0010dda:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0010de0:	56                   	push   esi
c0010de1:	e8 c8 8a ff ff       	call   c00098ae <VAS::setCPUSpecific(unsigned long)>
c0010de6:	eb 0d                	jmp    c0010df5 <CPU::open(int, int, void*)+0x9d>
c0010de8:	83 ec 0c             	sub    esp,0xc
c0010deb:	68 3e 23 02 c0       	push   0xc002233e
c0010df0:	e8 9e 08 00 00       	call   c0011693 <KePanic(char const*)>
c0010df5:	83 c4 10             	add    esp,0x10
c0010df8:	83 ec 0c             	sub    esp,0xc
c0010dfb:	68 4c 23 02 c0       	push   0xc002234c
c0010e00:	e8 8e 01 00 00       	call   c0010f93 <KeSetBootMessage(char const*)>
c0010e05:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010e08:	e8 07 f7 ff ff       	call   c0010514 <CPU::detectFeatures()>
c0010e0d:	c7 04 24 6f 23 02 c0 	mov    DWORD PTR [esp],0xc002236f
c0010e14:	e8 7a 01 00 00       	call   c0010f93 <KeSetBootMessage(char const*)>
c0010e19:	e8 cf 73 00 00       	call   c00181ed <HalInitialise()>
c0010e1e:	a1 d0 6e 02 c0       	mov    eax,ds:0xc0026ed0
c0010e23:	83 e0 10             	and    eax,0x10
c0010e26:	83 f8 01             	cmp    eax,0x1
c0010e29:	19 c0                	sbb    eax,eax
c0010e2b:	83 e0 46             	and    eax,0x46
c0010e2e:	83 c0 1e             	add    eax,0x1e
c0010e31:	89 04 24             	mov    DWORD PTR [esp],eax
c0010e34:	e8 28 d6 ff ff       	call   c000e461 <setupTimer(int)>
c0010e39:	83 c4 10             	add    esp,0x10
c0010e3c:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0010e42:	f6 05 d0 6e 02 c0 20 	test   BYTE PTR ds:0xc0026ed0,0x20
c0010e49:	74 0c                	je     c0010e57 <CPU::open(int, int, void*)+0xff>
c0010e4b:	83 ec 0c             	sub    esp,0xc
c0010e4e:	53                   	push   ebx
c0010e4f:	e8 38 fe ff ff       	call   c0010c8c <CPU::setupFeatures()>
c0010e54:	83 c4 10             	add    esp,0x10
c0010e57:	83 c4 0c             	add    esp,0xc
c0010e5a:	31 c0                	xor    eax,eax
c0010e5c:	5b                   	pop    ebx
c0010e5d:	5e                   	pop    esi
c0010e5e:	5f                   	pop    edi
c0010e5f:	5d                   	pop    ebp
c0010e60:	c3                   	ret    

c0010e61 <KeInitialiseAtexit()>:
c0010e61:	83 ec 10             	sub    esp,0x10
c0010e64:	c7 05 a0 bd 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bda0,0x0
c0010e6e:	6a 60                	push   0x60
c0010e70:	6a 00                	push   0x0
c0010e72:	68 20 be 02 c0       	push   0xc002be20
c0010e77:	e8 74 f6 fe ff       	call   c00004f0 <memset>
c0010e7c:	83 c4 1c             	add    esp,0x1c
c0010e7f:	c3                   	ret    

c0010e80 <KeRegisterAtexit(void (*)(void*), void*)>:
c0010e80:	a1 a0 bd 02 c0       	mov    eax,ds:0xc002bda0
c0010e85:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010e89:	89 14 85 20 be 02 c0 	mov    DWORD PTR [eax*4-0x3ffd41e0],edx
c0010e90:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010e94:	89 14 85 c0 bd 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4240],edx
c0010e9b:	40                   	inc    eax
c0010e9c:	a3 a0 bd 02 c0       	mov    ds:0xc002bda0,eax
c0010ea1:	83 f8 17             	cmp    eax,0x17
c0010ea4:	7e 0d                	jle    c0010eb3 <KeRegisterAtexit(void (*)(void*), void*)+0x33>
c0010ea6:	c7 44 24 04 b0 23 02 c0 	mov    DWORD PTR [esp+0x4],0xc00223b0
c0010eae:	e9 e0 07 00 00       	jmp    c0011693 <KePanic(char const*)>
c0010eb3:	c3                   	ret    

c0010eb4 <KeExecuteAtexit()>:
c0010eb4:	53                   	push   ebx
c0010eb5:	31 db                	xor    ebx,ebx
c0010eb7:	83 ec 08             	sub    esp,0x8
c0010eba:	39 1d a0 bd 02 c0    	cmp    DWORD PTR ds:0xc002bda0,ebx
c0010ec0:	7e 50                	jle    c0010f12 <KeExecuteAtexit()+0x5e>
c0010ec2:	8b 04 9d 20 be 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd41e0]
c0010ec9:	85 c0                	test   eax,eax
c0010ecb:	74 42                	je     c0010f0f <KeExecuteAtexit()+0x5b>
c0010ecd:	51                   	push   ecx
c0010ece:	50                   	push   eax
c0010ecf:	53                   	push   ebx
c0010ed0:	68 c9 23 02 c0       	push   0xc00223c9
c0010ed5:	e8 6b 9a ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0010eda:	58                   	pop    eax
c0010edb:	ff 34 9d c0 bd 02 c0 	push   DWORD PTR [ebx*4-0x3ffd4240]
c0010ee2:	ff 14 9d 20 be 02 c0 	call   DWORD PTR [ebx*4-0x3ffd41e0]
c0010ee9:	c7 04 24 eb 23 02 c0 	mov    DWORD PTR [esp],0xc00223eb
c0010ef0:	e8 50 9a ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0010ef5:	c7 04 24 4b 35 02 c0 	mov    DWORD PTR [esp],0xc002354b
c0010efc:	c7 04 9d 20 be 02 c0 00 00 00 00 	mov    DWORD PTR [ebx*4-0x3ffd41e0],0x0
c0010f07:	e8 39 9a ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0010f0c:	83 c4 10             	add    esp,0x10
c0010f0f:	43                   	inc    ebx
c0010f10:	eb a8                	jmp    c0010eba <KeExecuteAtexit()+0x6>
c0010f12:	83 c4 08             	add    esp,0x8
c0010f15:	5b                   	pop    ebx
c0010f16:	c3                   	ret    

c0010f17 <KeDisplaySplashScreen()>:
c0010f17:	55                   	push   ebp
c0010f18:	bd 05 00 00 00       	mov    ebp,0x5
c0010f1d:	57                   	push   edi
c0010f1e:	bf 0a 00 00 00       	mov    edi,0xa
c0010f23:	56                   	push   esi
c0010f24:	31 f6                	xor    esi,esi
c0010f26:	53                   	push   ebx
c0010f27:	31 db                	xor    ebx,ebx
c0010f29:	83 ec 0c             	sub    esp,0xc
c0010f2c:	0f b6 96 a0 37 02 c0 	movzx  edx,BYTE PTR [esi-0x3ffdc860]
c0010f33:	89 d0                	mov    eax,edx
c0010f35:	85 d2                	test   edx,edx
c0010f37:	74 52                	je     c0010f8b <KeDisplaySplashScreen()+0x74>
c0010f39:	80 bb d6 37 02 c0 db 	cmp    BYTE PTR [ebx-0x3ffdc82a],0xdb
c0010f40:	75 13                	jne    c0010f55 <KeDisplaySplashScreen()+0x3e>
c0010f42:	0f b6 8b d5 37 02 c0 	movzx  ecx,BYTE PTR [ebx-0x3ffdc82b]
c0010f49:	83 e1 fe             	and    ecx,0xfffffffe
c0010f4c:	81 f9 ba 00 00 00    	cmp    ecx,0xba
c0010f52:	75 01                	jne    c0010f55 <KeDisplaySplashScreen()+0x3e>
c0010f54:	47                   	inc    edi
c0010f55:	83 fa 0d             	cmp    edx,0xd
c0010f58:	74 28                	je     c0010f82 <KeDisplaySplashScreen()+0x6b>
c0010f5a:	83 fa 0a             	cmp    edx,0xa
c0010f5d:	75 0a                	jne    c0010f69 <KeDisplaySplashScreen()+0x52>
c0010f5f:	45                   	inc    ebp
c0010f60:	bf 0a 00 00 00       	mov    edi,0xa
c0010f65:	31 db                	xor    ebx,ebx
c0010f67:	eb 19                	jmp    c0010f82 <KeDisplaySplashScreen()+0x6b>
c0010f69:	83 ec 0c             	sub    esp,0xc
c0010f6c:	8d 14 1f             	lea    edx,[edi+ebx*1]
c0010f6f:	55                   	push   ebp
c0010f70:	0f be c0             	movsx  eax,al
c0010f73:	52                   	push   edx
c0010f74:	43                   	inc    ebx
c0010f75:	6a 00                	push   0x0
c0010f77:	6a 0e                	push   0xe
c0010f79:	50                   	push   eax
c0010f7a:	e8 ed 7e 00 00       	call   c0018e6c <HalConsoleWriteCharacter(char, int, int, int, int)>
c0010f7f:	83 c4 20             	add    esp,0x20
c0010f82:	46                   	inc    esi
c0010f83:	81 fe 42 01 00 00    	cmp    esi,0x142
c0010f89:	75 a1                	jne    c0010f2c <KeDisplaySplashScreen()+0x15>
c0010f8b:	83 c4 0c             	add    esp,0xc
c0010f8e:	5b                   	pop    ebx
c0010f8f:	5e                   	pop    esi
c0010f90:	5f                   	pop    edi
c0010f91:	5d                   	pop    ebp
c0010f92:	c3                   	ret    

c0010f93 <KeSetBootMessage(char const*)>:
c0010f93:	57                   	push   edi
c0010f94:	56                   	push   esi
c0010f95:	53                   	push   ebx
c0010f96:	81 ec a4 00 00 00    	sub    esp,0xa4
c0010f9c:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c0010fa3:	68 9e 00 00 00       	push   0x9e
c0010fa8:	6a 00                	push   0x0
c0010faa:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0010fae:	56                   	push   esi
c0010faf:	e8 3c f5 fe ff       	call   c00004f0 <memset>
c0010fb4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010fb7:	e8 b4 f5 fe ff       	call   c0000570 <strlen>
c0010fbc:	ba 50 00 00 00       	mov    edx,0x50
c0010fc1:	83 c4 10             	add    esp,0x10
c0010fc4:	29 c2                	sub    edx,eax
c0010fc6:	31 c9                	xor    ecx,ecx
c0010fc8:	83 e2 fe             	and    edx,0xfffffffe
c0010fcb:	01 f2                	add    edx,esi
c0010fcd:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c0010fd2:	84 c0                	test   al,al
c0010fd4:	74 0a                	je     c0010fe0 <KeSetBootMessage(char const*)+0x4d>
c0010fd6:	80 cc 0f             	or     ah,0xf
c0010fd9:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c0010fdd:	41                   	inc    ecx
c0010fde:	eb ed                	jmp    c0010fcd <KeSetBootMessage(char const*)+0x3a>
c0010fe0:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c0010fe5:	b9 9e 00 00 00       	mov    ecx,0x9e
c0010fea:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010fec:	81 c4 a0 00 00 00    	add    esp,0xa0
c0010ff2:	5b                   	pop    ebx
c0010ff3:	5e                   	pop    esi
c0010ff4:	5f                   	pop    edi
c0010ff5:	c3                   	ret    
c0010ff6:	66 90                	xchg   ax,ax

c0010ff8 <Krnl::handlePowerButton()>:
c0010ff8:	83 ec 0c             	sub    esp,0xc
c0010ffb:	e8 ee 06 00 00       	call   c00116ee <KeHandlePowerButton()>
c0011000:	90                   	nop
c0011001:	83 c4 0c             	add    esp,0xc
c0011004:	c3                   	ret    
c0011005:	8d 76 00             	lea    esi,[esi+0x0]

c0011008 <Krnl::handleSleepButton()>:
c0011008:	83 ec 0c             	sub    esp,0xc
c001100b:	e8 13 07 00 00       	call   c0011723 <KeHandleSleepButton()>
c0011010:	90                   	nop
c0011011:	83 c4 0c             	add    esp,0xc
c0011014:	c3                   	ret    

c0011015 <KeCalculateCRC32(unsigned char*, int)>:
c0011015:	53                   	push   ebx
c0011016:	83 c8 ff             	or     eax,0xffffffff
c0011019:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001101d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011021:	01 cb                	add    ebx,ecx
c0011023:	39 d9                	cmp    ecx,ebx
c0011025:	74 15                	je     c001103c <KeCalculateCRC32(unsigned char*, int)+0x27>
c0011027:	41                   	inc    ecx
c0011028:	8a 51 ff             	mov    dl,BYTE PTR [ecx-0x1]
c001102b:	31 c2                	xor    edx,eax
c001102d:	c1 e8 08             	shr    eax,0x8
c0011030:	0f b6 d2             	movzx  edx,dl
c0011033:	33 04 95 00 39 02 c0 	xor    eax,DWORD PTR [edx*4-0x3ffdc700]
c001103a:	eb e7                	jmp    c0011023 <KeCalculateCRC32(unsigned char*, int)+0xe>
c001103c:	f7 d0                	not    eax
c001103e:	5b                   	pop    ebx
c001103f:	c3                   	ret    

c0011040 <EnvVarContainer::getEnv(char const*)>:
c0011040:	57                   	push   edi
c0011041:	56                   	push   esi
c0011042:	53                   	push   ebx
c0011043:	31 db                	xor    ebx,ebx
c0011045:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011049:	39 1e                	cmp    DWORD PTR [esi],ebx
c001104b:	7e 2b                	jle    c0011078 <EnvVarContainer::getEnv(char const*)+0x38>
c001104d:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c0011054:	50                   	push   eax
c0011055:	50                   	push   eax
c0011056:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0011059:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c001105c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011060:	e8 eb f6 fe ff       	call   c0000750 <strcmp>
c0011065:	83 c4 10             	add    esp,0x10
c0011068:	85 c0                	test   eax,eax
c001106a:	75 09                	jne    c0011075 <EnvVarContainer::getEnv(char const*)+0x35>
c001106c:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001106f:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c0011073:	eb 05                	jmp    c001107a <EnvVarContainer::getEnv(char const*)+0x3a>
c0011075:	43                   	inc    ebx
c0011076:	eb d1                	jmp    c0011049 <EnvVarContainer::getEnv(char const*)+0x9>
c0011078:	31 c0                	xor    eax,eax
c001107a:	5b                   	pop    ebx
c001107b:	5e                   	pop    esi
c001107c:	5f                   	pop    edi
c001107d:	c3                   	ret    

c001107e <EnvVarContainer::setEnv(char const*, char const*)>:
c001107e:	55                   	push   ebp
c001107f:	57                   	push   edi
c0011080:	56                   	push   esi
c0011081:	53                   	push   ebx
c0011082:	83 ec 28             	sub    esp,0x28
c0011085:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0011089:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001108d:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0011091:	56                   	push   esi
c0011092:	e8 d9 f4 fe ff       	call   c0000570 <strlen>
c0011097:	40                   	inc    eax
c0011098:	89 04 24             	mov    DWORD PTR [esp],eax
c001109b:	e8 16 6a ff ff       	call   c0007ab6 <malloc>
c00110a0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00110a3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00110a7:	e8 c4 f4 fe ff       	call   c0000570 <strlen>
c00110ac:	40                   	inc    eax
c00110ad:	89 04 24             	mov    DWORD PTR [esp],eax
c00110b0:	e8 01 6a ff ff       	call   c0007ab6 <malloc>
c00110b5:	89 34 24             	mov    DWORD PTR [esp],esi
c00110b8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00110bc:	e8 af f4 fe ff       	call   c0000570 <strlen>
c00110c1:	83 c4 0c             	add    esp,0xc
c00110c4:	40                   	inc    eax
c00110c5:	50                   	push   eax
c00110c6:	6a 00                	push   0x0
c00110c8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00110cc:	e8 1f f4 fe ff       	call   c00004f0 <memset>
c00110d1:	89 34 24             	mov    DWORD PTR [esp],esi
c00110d4:	e8 97 f4 fe ff       	call   c0000570 <strlen>
c00110d9:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00110dd:	8d 48 01             	lea    ecx,[eax+0x1]
c00110e0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00110e2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00110e5:	89 de                	mov    esi,ebx
c00110e7:	e8 84 f4 fe ff       	call   c0000570 <strlen>
c00110ec:	83 c4 0c             	add    esp,0xc
c00110ef:	40                   	inc    eax
c00110f0:	50                   	push   eax
c00110f1:	6a 00                	push   0x0
c00110f3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00110f7:	e8 f4 f3 fe ff       	call   c00004f0 <memset>
c00110fc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00110ff:	e8 6c f4 fe ff       	call   c0000570 <strlen>
c0011104:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0011108:	8d 48 01             	lea    ecx,[eax+0x1]
c001110b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001110d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0011110:	40                   	inc    eax
c0011111:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0011114:	c1 e0 03             	shl    eax,0x3
c0011117:	5a                   	pop    edx
c0011118:	59                   	pop    ecx
c0011119:	50                   	push   eax
c001111a:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001111d:	e8 80 69 ff ff       	call   c0007aa2 <realloc>
c0011122:	8d 74 24 18          	lea    esi,[esp+0x18]
c0011126:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0011129:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c001112c:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0011130:	b9 08 00 00 00       	mov    ecx,0x8
c0011135:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011137:	83 c4 2c             	add    esp,0x2c
c001113a:	5b                   	pop    ebx
c001113b:	5e                   	pop    esi
c001113c:	5f                   	pop    edi
c001113d:	5d                   	pop    ebp
c001113e:	c3                   	ret    
c001113f:	90                   	nop

c0011140 <EnvVarContainer::deleteEnv(char const*)>:
c0011140:	c3                   	ret    
c0011141:	90                   	nop

c0011142 <EnvVarContainer::loadFrom(char const*, char const*)>:
c0011142:	55                   	push   ebp
c0011143:	57                   	push   edi
c0011144:	56                   	push   esi
c0011145:	53                   	push   ebx
c0011146:	81 ec 38 01 00 00    	sub    esp,0x138
c001114c:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c0011153:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c001115a:	68 14 01 00 00       	push   0x114
c001115f:	e8 52 69 ff ff       	call   c0007ab6 <malloc>
c0011164:	83 c4 0c             	add    esp,0xc
c0011167:	89 c3                	mov    ebx,eax
c0011169:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001116c:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0011173:	50                   	push   eax
c0011174:	e8 49 aa ff ff       	call   c000bbc2 <File::File(char const*, Process*)>
c0011179:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001117c:	e8 23 ad ff ff       	call   c000bea4 <File::exists()>
c0011181:	83 c4 10             	add    esp,0x10
c0011184:	84 c0                	test   al,al
c0011186:	75 31                	jne    c00111b9 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c0011188:	50                   	push   eax
c0011189:	50                   	push   eax
c001118a:	6a 12                	push   0x12
c001118c:	53                   	push   ebx
c001118d:	e8 4e aa ff ff       	call   c000bbe0 <File::open(FileOpenMode)>
c0011192:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011194:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0011197:	89 34 24             	mov    DWORD PTR [esp],esi
c001119a:	e8 d1 f3 fe ff       	call   c0000570 <strlen>
c001119f:	5a                   	pop    edx
c00111a0:	31 d2                	xor    edx,edx
c00111a2:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c00111a6:	51                   	push   ecx
c00111a7:	56                   	push   esi
c00111a8:	52                   	push   edx
c00111a9:	50                   	push   eax
c00111aa:	53                   	push   ebx
c00111ab:	ff d7                	call   edi
c00111ad:	83 c4 14             	add    esp,0x14
c00111b0:	53                   	push   ebx
c00111b1:	e8 88 aa ff ff       	call   c000bc3e <File::close()>
c00111b6:	83 c4 10             	add    esp,0x10
c00111b9:	56                   	push   esi
c00111ba:	31 f6                	xor    esi,esi
c00111bc:	68 00 01 00 00       	push   0x100
c00111c1:	6a 00                	push   0x0
c00111c3:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00111c7:	50                   	push   eax
c00111c8:	e8 23 f3 fe ff       	call   c00004f0 <memset>
c00111cd:	5f                   	pop    edi
c00111ce:	58                   	pop    eax
c00111cf:	6a 01                	push   0x1
c00111d1:	53                   	push   ebx
c00111d2:	e8 09 aa ff ff       	call   c000bbe0 <File::open(FileOpenMode)>
c00111d7:	83 c4 10             	add    esp,0x10
c00111da:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00111e2:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00111ea:	83 ec 0c             	sub    esp,0xc
c00111ed:	8b 03                	mov    eax,DWORD PTR [ebx]
c00111ef:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c00111f3:	51                   	push   ecx
c00111f4:	8d 54 24 23          	lea    edx,[esp+0x23]
c00111f8:	52                   	push   edx
c00111f9:	6a 00                	push   0x0
c00111fb:	6a 01                	push   0x1
c00111fd:	53                   	push   ebx
c00111fe:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0011201:	0f be 44 24 33       	movsx  eax,BYTE PTR [esp+0x33]
c0011206:	83 c4 20             	add    esp,0x20
c0011209:	89 c2                	mov    edx,eax
c001120b:	85 c0                	test   eax,eax
c001120d:	0f 84 36 01 00 00    	je     c0011349 <EnvVarContainer::loadFrom(char const*, char const*)+0x207>
c0011213:	83 f8 0d             	cmp    eax,0xd
c0011216:	0f 84 22 01 00 00    	je     c001133e <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c001121c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0011221:	0f 84 f0 00 00 00    	je     c0011317 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d5>
c0011227:	83 f8 0a             	cmp    eax,0xa
c001122a:	74 13                	je     c001123f <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c001122c:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0011231:	74 0c                	je     c001123f <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c0011233:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0011239:	0f 8e f6 00 00 00    	jle    c0011335 <EnvVarContainer::loadFrom(char const*, char const*)+0x1f3>
c001123f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011243:	83 ec 0c             	sub    esp,0xc
c0011246:	8d 78 01             	lea    edi,[eax+0x1]
c0011249:	57                   	push   edi
c001124a:	e8 67 68 ff ff       	call   c0007ab6 <malloc>
c001124f:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c0011253:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0011257:	8d 56 04             	lea    edx,[esi+0x4]
c001125a:	89 14 24             	mov    DWORD PTR [esp],edx
c001125d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0011261:	e8 50 68 ff ff       	call   c0007ab6 <malloc>
c0011266:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001126a:	83 c4 0c             	add    esp,0xc
c001126d:	57                   	push   edi
c001126e:	6a 00                	push   0x0
c0011270:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0011274:	e8 77 f2 fe ff       	call   c00004f0 <memset>
c0011279:	8d 74 24 30          	lea    esi,[esp+0x30]
c001127d:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0011281:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0011285:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011287:	83 c4 0c             	add    esp,0xc
c001128a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001128e:	52                   	push   edx
c001128f:	6a 00                	push   0x0
c0011291:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0011295:	e8 56 f2 fe ff       	call   c00004f0 <memset>
c001129a:	8d 74 24 30          	lea    esi,[esp+0x30]
c001129e:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c00112a2:	89 34 24             	mov    DWORD PTR [esp],esi
c00112a5:	e8 c6 f2 fe ff       	call   c0000570 <strlen>
c00112aa:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c00112ae:	89 c1                	mov    ecx,eax
c00112b0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00112b2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00112b5:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c00112b8:	40                   	inc    eax
c00112b9:	83 c4 10             	add    esp,0x10
c00112bc:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00112bf:	85 d2                	test   edx,edx
c00112c1:	75 0c                	jne    c00112cf <EnvVarContainer::loadFrom(char const*, char const*)+0x18d>
c00112c3:	83 ec 0c             	sub    esp,0xc
c00112c6:	6a 08                	push   0x8
c00112c8:	e8 e9 67 ff ff       	call   c0007ab6 <malloc>
c00112cd:	eb 0c                	jmp    c00112db <EnvVarContainer::loadFrom(char const*, char const*)+0x199>
c00112cf:	c1 e0 03             	shl    eax,0x3
c00112d2:	51                   	push   ecx
c00112d3:	51                   	push   ecx
c00112d4:	50                   	push   eax
c00112d5:	52                   	push   edx
c00112d6:	e8 c7 67 ff ff       	call   c0007aa2 <realloc>
c00112db:	83 c4 10             	add    esp,0x10
c00112de:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00112e1:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c00112e4:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c00112e7:	8d 74 24 18          	lea    esi,[esp+0x18]
c00112eb:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c00112ef:	b9 08 00 00 00       	mov    ecx,0x8
c00112f4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00112f6:	31 f6                	xor    esi,esi
c00112f8:	50                   	push   eax
c00112f9:	68 00 01 00 00       	push   0x100
c00112fe:	6a 00                	push   0x0
c0011300:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0011304:	50                   	push   eax
c0011305:	e8 e6 f1 fe ff       	call   c00004f0 <memset>
c001130a:	83 c4 10             	add    esp,0x10
c001130d:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0011315:	eb 27                	jmp    c001133e <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0011317:	83 f8 3d             	cmp    eax,0x3d
c001131a:	74 1e                	je     c001133a <EnvVarContainer::loadFrom(char const*, char const*)+0x1f8>
c001131c:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0011322:	7f 07                	jg     c001132b <EnvVarContainer::loadFrom(char const*, char const*)+0x1e9>
c0011324:	88 54 34 20          	mov    BYTE PTR [esp+esi*1+0x20],dl
c0011328:	46                   	inc    esi
c0011329:	eb 13                	jmp    c001133e <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c001132b:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0011333:	eb 09                	jmp    c001133e <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0011335:	83 f8 3d             	cmp    eax,0x3d
c0011338:	75 ea                	jne    c0011324 <EnvVarContainer::loadFrom(char const*, char const*)+0x1e2>
c001133a:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c001133e:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0011343:	0f 85 99 fe ff ff    	jne    c00111e2 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c0011349:	83 ec 0c             	sub    esp,0xc
c001134c:	53                   	push   ebx
c001134d:	e8 ec a8 ff ff       	call   c000bc3e <File::close()>
c0011352:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011354:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011357:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001135a:	81 c4 3c 01 00 00    	add    esp,0x13c
c0011360:	5b                   	pop    ebx
c0011361:	5e                   	pop    esi
c0011362:	5f                   	pop    edi
c0011363:	5d                   	pop    ebp
c0011364:	c3                   	ret    
c0011365:	90                   	nop

c0011366 <EnvVarContainer::__loadSystem()>:
c0011366:	83 ec 10             	sub    esp,0x10
c0011369:	68 00 3d 02 c0       	push   0xc0023d00
c001136e:	68 f0 23 02 c0       	push   0xc00223f0
c0011373:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011377:	e8 c6 fd ff ff       	call   c0011142 <EnvVarContainer::loadFrom(char const*, char const*)>
c001137c:	83 c4 1c             	add    esp,0x1c
c001137f:	c3                   	ret    

c0011380 <EnvVarContainer::__loadUser()>:
c0011380:	c3                   	ret    
c0011381:	90                   	nop

c0011382 <EnvVarContainer::EnvVarContainer(Process*)>:
c0011382:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011386:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001138c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011390:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011394:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0011397:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001139b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00113a2:	90                   	nop
c00113a3:	c3                   	ret    

c00113a4 <EnvVarContainer::~EnvVarContainer()>:
c00113a4:	83 ec 0c             	sub    esp,0xc
c00113a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00113ab:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00113ae:	85 c0                	test   eax,eax
c00113b0:	74 1d                	je     c00113cf <EnvVarContainer::~EnvVarContainer()+0x2b>
c00113b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00113b6:	8b 00                	mov    eax,DWORD PTR [eax]
c00113b8:	85 c0                	test   eax,eax
c00113ba:	74 13                	je     c00113cf <EnvVarContainer::~EnvVarContainer()+0x2b>
c00113bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00113c0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00113c3:	83 ec 0c             	sub    esp,0xc
c00113c6:	50                   	push   eax
c00113c7:	e8 fa 66 ff ff       	call   c0007ac6 <free>
c00113cc:	83 c4 10             	add    esp,0x10
c00113cf:	90                   	nop
c00113d0:	83 c4 0c             	add    esp,0xc
c00113d3:	c3                   	ret    

c00113d4 <KeGetEnv(Process*, char const*)>:
c00113d4:	53                   	push   ebx
c00113d5:	83 ec 08             	sub    esp,0x8
c00113d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00113dc:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00113e0:	39 05 f0 c6 02 c0    	cmp    DWORD PTR ds:0xc002c6f0,eax
c00113e6:	74 04                	je     c00113ec <KeGetEnv(Process*, char const*)+0x18>
c00113e8:	85 c0                	test   eax,eax
c00113ea:	75 0b                	jne    c00113f7 <KeGetEnv(Process*, char const*)+0x23>
c00113ec:	a1 80 be 02 c0       	mov    eax,ds:0xc002be80
c00113f1:	85 c0                	test   eax,eax
c00113f3:	75 19                	jne    c001140e <KeGetEnv(Process*, char const*)+0x3a>
c00113f5:	eb 27                	jmp    c001141e <KeGetEnv(Process*, char const*)+0x4a>
c00113f7:	52                   	push   edx
c00113f8:	52                   	push   edx
c00113f9:	53                   	push   ebx
c00113fa:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c0011400:	e8 3b fc ff ff       	call   c0011040 <EnvVarContainer::getEnv(char const*)>
c0011405:	83 c4 10             	add    esp,0x10
c0011408:	85 c0                	test   eax,eax
c001140a:	75 28                	jne    c0011434 <KeGetEnv(Process*, char const*)+0x60>
c001140c:	eb de                	jmp    c00113ec <KeGetEnv(Process*, char const*)+0x18>
c001140e:	52                   	push   edx
c001140f:	52                   	push   edx
c0011410:	53                   	push   ebx
c0011411:	50                   	push   eax
c0011412:	e8 29 fc ff ff       	call   c0011040 <EnvVarContainer::getEnv(char const*)>
c0011417:	83 c4 10             	add    esp,0x10
c001141a:	85 c0                	test   eax,eax
c001141c:	75 16                	jne    c0011434 <KeGetEnv(Process*, char const*)+0x60>
c001141e:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0011422:	a1 84 be 02 c0       	mov    eax,ds:0xc002be84
c0011427:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001142b:	83 c4 08             	add    esp,0x8
c001142e:	5b                   	pop    ebx
c001142f:	e9 0c fc ff ff       	jmp    c0011040 <EnvVarContainer::getEnv(char const*)>
c0011434:	83 c4 08             	add    esp,0x8
c0011437:	5b                   	pop    ebx
c0011438:	c3                   	ret    

c0011439 <KeSetEnvSystem(char const*, char const*)>:
c0011439:	83 ec 10             	sub    esp,0x10
c001143c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011440:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011444:	ff 35 84 be 02 c0    	push   DWORD PTR ds:0xc002be84
c001144a:	e8 2f fc ff ff       	call   c001107e <EnvVarContainer::setEnv(char const*, char const*)>
c001144f:	83 c4 1c             	add    esp,0x1c
c0011452:	c3                   	ret    

c0011453 <KeSetEnvUser(char const*, char const*)>:
c0011453:	a1 80 be 02 c0       	mov    eax,ds:0xc002be80
c0011458:	85 c0                	test   eax,eax
c001145a:	74 15                	je     c0011471 <KeSetEnvUser(char const*, char const*)+0x1e>
c001145c:	83 ec 10             	sub    esp,0x10
c001145f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011463:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011467:	50                   	push   eax
c0011468:	e8 11 fc ff ff       	call   c001107e <EnvVarContainer::setEnv(char const*, char const*)>
c001146d:	83 c4 1c             	add    esp,0x1c
c0011470:	c3                   	ret    
c0011471:	c3                   	ret    

c0011472 <KeSetEnvProcess(Process*, char const*, char const*)>:
c0011472:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011476:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c001147c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011480:	e9 f9 fb ff ff       	jmp    c001107e <EnvVarContainer::setEnv(char const*, char const*)>

c0011485 <KeDeleteEnvSystem(char const*)>:
c0011485:	c3                   	ret    

c0011486 <KeDeleteEnvUser(char const*)>:
c0011486:	c3                   	ret    

c0011487 <KeDeleteEnvProcess(Process*, char const*)>:
c0011487:	c3                   	ret    

c0011488 <KeNewProcessEnv(Process*)>:
c0011488:	83 ec 28             	sub    esp,0x28
c001148b:	6a 0c                	push   0xc
c001148d:	e8 24 66 ff ff       	call   c0007ab6 <malloc>
c0011492:	5a                   	pop    edx
c0011493:	59                   	pop    ecx
c0011494:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0011498:	50                   	push   eax
c0011499:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001149d:	e8 e0 fe ff ff       	call   c0011382 <EnvVarContainer::EnvVarContainer(Process*)>
c00114a2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00114a6:	83 c4 2c             	add    esp,0x2c
c00114a9:	c3                   	ret    

c00114aa <KeCopyProcessEnv(Process*, Process*)>:
c00114aa:	57                   	push   edi
c00114ab:	56                   	push   esi
c00114ac:	53                   	push   ebx
c00114ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00114b1:	83 ec 0c             	sub    esp,0xc
c00114b4:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c00114ba:	6a 0c                	push   0xc
c00114bc:	e8 f5 65 ff ff       	call   c0007ab6 <malloc>
c00114c1:	89 c3                	mov    ebx,eax
c00114c3:	58                   	pop    eax
c00114c4:	5a                   	pop    edx
c00114c5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00114c9:	53                   	push   ebx
c00114ca:	e8 b3 fe ff ff       	call   c0011382 <EnvVarContainer::EnvVarContainer(Process*)>
c00114cf:	8b 07                	mov    eax,DWORD PTR [edi]
c00114d1:	89 03                	mov    DWORD PTR [ebx],eax
c00114d3:	c1 e0 03             	shl    eax,0x3
c00114d6:	89 04 24             	mov    DWORD PTR [esp],eax
c00114d9:	e8 d8 65 ff ff       	call   c0007ab6 <malloc>
c00114de:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00114e1:	8b 0f                	mov    ecx,DWORD PTR [edi]
c00114e3:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c00114e6:	c1 e1 03             	shl    ecx,0x3
c00114e9:	89 c7                	mov    edi,eax
c00114eb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00114ed:	83 c4 10             	add    esp,0x10
c00114f0:	89 d8                	mov    eax,ebx
c00114f2:	5b                   	pop    ebx
c00114f3:	5e                   	pop    esi
c00114f4:	5f                   	pop    edi
c00114f5:	c3                   	ret    

c00114f6 <KeLoadSystemEnv()>:
c00114f6:	53                   	push   ebx
c00114f7:	83 ec 14             	sub    esp,0x14
c00114fa:	6a 0c                	push   0xc
c00114fc:	e8 b5 65 ff ff       	call   c0007ab6 <malloc>
c0011501:	89 c3                	mov    ebx,eax
c0011503:	58                   	pop    eax
c0011504:	5a                   	pop    edx
c0011505:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c001150b:	53                   	push   ebx
c001150c:	e8 71 fe ff ff       	call   c0011382 <EnvVarContainer::EnvVarContainer(Process*)>
c0011511:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011514:	89 1d 84 be 02 c0    	mov    DWORD PTR ds:0xc002be84,ebx
c001151a:	e8 47 fe ff ff       	call   c0011366 <EnvVarContainer::__loadSystem()>
c001151f:	83 c4 18             	add    esp,0x18
c0011522:	5b                   	pop    ebx
c0011523:	c3                   	ret    

c0011524 <KeLoadUserEnv()>:
c0011524:	53                   	push   ebx
c0011525:	83 ec 14             	sub    esp,0x14
c0011528:	6a 0c                	push   0xc
c001152a:	e8 87 65 ff ff       	call   c0007ab6 <malloc>
c001152f:	89 c3                	mov    ebx,eax
c0011531:	58                   	pop    eax
c0011532:	5a                   	pop    edx
c0011533:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c0011539:	53                   	push   ebx
c001153a:	e8 43 fe ff ff       	call   c0011382 <EnvVarContainer::EnvVarContainer(Process*)>
c001153f:	89 1d 80 be 02 c0    	mov    DWORD PTR ds:0xc002be80,ebx
c0011545:	83 c4 18             	add    esp,0x18
c0011548:	5b                   	pop    ebx
c0011549:	c3                   	ret    

c001154a <KeFlushEnv()>:
c001154a:	c3                   	ret    

c001154b <KeGetProcessTotalEnvCount(Process*)>:
c001154b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001154f:	8b 15 80 be 02 c0    	mov    edx,DWORD PTR ds:0xc002be80
c0011555:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c001155b:	a1 84 be 02 c0       	mov    eax,ds:0xc002be84
c0011560:	8b 00                	mov    eax,DWORD PTR [eax]
c0011562:	03 01                	add    eax,DWORD PTR [ecx]
c0011564:	85 d2                	test   edx,edx
c0011566:	74 02                	je     c001156a <KeGetProcessTotalEnvCount(Process*)+0x1f>
c0011568:	03 02                	add    eax,DWORD PTR [edx]
c001156a:	c3                   	ret    

c001156b <KeGetProcessEnvPair(Process*, int)>:
c001156b:	57                   	push   edi
c001156c:	56                   	push   esi
c001156d:	8b 35 80 be 02 c0    	mov    esi,DWORD PTR ds:0xc002be80
c0011573:	53                   	push   ebx
c0011574:	85 f6                	test   esi,esi
c0011576:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001157a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001157e:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0011584:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011588:	8b 01                	mov    eax,DWORD PTR [ecx]
c001158a:	75 16                	jne    c00115a2 <KeGetProcessEnvPair(Process*, int)+0x37>
c001158c:	39 c2                	cmp    edx,eax
c001158e:	7c 16                	jl     c00115a6 <KeGetProcessEnvPair(Process*, int)+0x3b>
c0011590:	8b 0d 84 be 02 c0    	mov    ecx,DWORD PTR ds:0xc002be84
c0011596:	8b 31                	mov    esi,DWORD PTR [ecx]
c0011598:	01 c6                	add    esi,eax
c001159a:	39 d6                	cmp    esi,edx
c001159c:	7e 3c                	jle    c00115da <KeGetProcessEnvPair(Process*, int)+0x6f>
c001159e:	29 c2                	sub    edx,eax
c00115a0:	eb 04                	jmp    c00115a6 <KeGetProcessEnvPair(Process*, int)+0x3b>
c00115a2:	39 c2                	cmp    edx,eax
c00115a4:	7d 05                	jge    c00115ab <KeGetProcessEnvPair(Process*, int)+0x40>
c00115a6:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00115a9:	eb 20                	jmp    c00115cb <KeGetProcessEnvPair(Process*, int)+0x60>
c00115ab:	8b 3e                	mov    edi,DWORD PTR [esi]
c00115ad:	8d 0c 07             	lea    ecx,[edi+eax*1]
c00115b0:	39 d1                	cmp    ecx,edx
c00115b2:	7e 04                	jle    c00115b8 <KeGetProcessEnvPair(Process*, int)+0x4d>
c00115b4:	29 c2                	sub    edx,eax
c00115b6:	eb 10                	jmp    c00115c8 <KeGetProcessEnvPair(Process*, int)+0x5d>
c00115b8:	8b 35 84 be 02 c0    	mov    esi,DWORD PTR ds:0xc002be84
c00115be:	03 0e                	add    ecx,DWORD PTR [esi]
c00115c0:	39 d1                	cmp    ecx,edx
c00115c2:	7e 16                	jle    c00115da <KeGetProcessEnvPair(Process*, int)+0x6f>
c00115c4:	29 c2                	sub    edx,eax
c00115c6:	29 fa                	sub    edx,edi
c00115c8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00115cb:	8d 14 d0             	lea    edx,[eax+edx*8]
c00115ce:	8b 02                	mov    eax,DWORD PTR [edx]
c00115d0:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c00115d3:	89 03                	mov    DWORD PTR [ebx],eax
c00115d5:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00115d8:	eb 1d                	jmp    c00115f7 <KeGetProcessEnvPair(Process*, int)+0x8c>
c00115da:	83 ec 0c             	sub    esp,0xc
c00115dd:	68 12 24 02 c0       	push   0xc0022412
c00115e2:	e8 ac 00 00 00       	call   c0011693 <KePanic(char const*)>
c00115e7:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00115ed:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00115f4:	83 c4 10             	add    esp,0x10
c00115f7:	89 d8                	mov    eax,ebx
c00115f9:	5b                   	pop    ebx
c00115fa:	5e                   	pop    esi
c00115fb:	5f                   	pop    edi
c00115fc:	c2 04 00             	ret    0x4

c00115ff <CPU::current()>:
c00115ff:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0011604:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001160a:	c3                   	ret    

c001160b <operator new(unsigned long)>:
c001160b:	e9 a6 64 ff ff       	jmp    c0007ab6 <malloc>

c0011610 <operator delete(void*)>:
c0011610:	e9 c1 64 ff ff       	jmp    c0007ad6 <rfree>

c0011615 <disableIRQs()>:
c0011615:	fa                   	cli    
c0011616:	c3                   	ret    

c0011617 <enableIRQs()>:
c0011617:	fb                   	sti    
c0011618:	c3                   	ret    

c0011619 <lockScheduler()>:
c0011619:	fa                   	cli    
c001161a:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0011620:	c3                   	ret    

c0011621 <unlockScheduler()>:
c0011621:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0011626:	48                   	dec    eax
c0011627:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c001162c:	75 01                	jne    c001162f <unlockScheduler()+0xe>
c001162e:	fb                   	sti    
c001162f:	c3                   	ret    

c0011630 <lockStuff()>:
c0011630:	fa                   	cli    
c0011631:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0011637:	ff 05 c4 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c4
c001163d:	c3                   	ret    

c001163e <unlockStuff()>:
c001163e:	83 ec 0c             	sub    esp,0xc
c0011641:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c0011646:	48                   	dec    eax
c0011647:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c001164c:	75 18                	jne    c0011666 <unlockStuff()+0x28>
c001164e:	83 3d c0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6c0,0x0
c0011655:	74 0f                	je     c0011666 <unlockStuff()+0x28>
c0011657:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c0011661:	e8 b2 4a 00 00       	call   c0016118 <schedule()>
c0011666:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001166b:	48                   	dec    eax
c001166c:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0011671:	75 01                	jne    c0011674 <unlockStuff()+0x36>
c0011673:	fb                   	sti    
c0011674:	83 c4 0c             	add    esp,0xc
c0011677:	c3                   	ret    

c0011678 <Virt::getAKernelVAS()>:
c0011678:	a1 b0 6f 02 c0       	mov    eax,ds:0xc0026fb0
c001167d:	c3                   	ret    

c001167e <__not_memcpy>:
c001167e:	57                   	push   edi
c001167f:	56                   	push   esi
c0011680:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011684:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011688:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001168c:	89 c7                	mov    edi,eax
c001168e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011690:	5e                   	pop    esi
c0011691:	5f                   	pop    edi
c0011692:	c3                   	ret    

c0011693 <KePanic(char const*)>:
c0011693:	c6 05 88 be 02 c0 01 	mov    BYTE PTR ds:0xc002be88,0x1
c001169a:	e9 1f 6a 00 00       	jmp    c00180be <HalPanic(char const*)>

c001169f <KePowerThread(void*)>:
c001169f:	83 ec 0c             	sub    esp,0xc
c00116a2:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00116a7:	48                   	dec    eax
c00116a8:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00116ad:	75 01                	jne    c00116b0 <KePowerThread(void*)+0x11>
c00116af:	fb                   	sti    
c00116b0:	83 ec 0c             	sub    esp,0xc
c00116b3:	c6 05 a0 be 02 c0 00 	mov    BYTE PTR ds:0xc002bea0,0x0
c00116ba:	6a 0a                	push   0xa
c00116bc:	e8 9b 4d 00 00       	call   c001645c <sleep(unsigned int)>
c00116c1:	83 05 e4 be 02 c0 0a 	add    DWORD PTR ds:0xc002bee4,0xa
c00116c8:	83 c4 10             	add    esp,0x10
c00116cb:	eb e3                	jmp    c00116b0 <KePowerThread(void*)+0x11>

c00116cd <KeChangePowerSettings(PowerSettings)>:
c00116cd:	57                   	push   edi
c00116ce:	b9 09 00 00 00       	mov    ecx,0x9
c00116d3:	56                   	push   esi
c00116d4:	bf c0 be 02 c0       	mov    edi,0xc002bec0
c00116d9:	fc                   	cld    
c00116da:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00116de:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00116e0:	5e                   	pop    esi
c00116e1:	5f                   	pop    edi
c00116e2:	c3                   	ret    

c00116e3 <KeUserIOReceived()>:
c00116e3:	c7 05 e4 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bee4,0x0
c00116ed:	c3                   	ret    

c00116ee <KeHandlePowerButton()>:
c00116ee:	83 ec 0c             	sub    esp,0xc
c00116f1:	a1 c0 be 02 c0       	mov    eax,ds:0xc002bec0
c00116f6:	83 f8 02             	cmp    eax,0x2
c00116f9:	75 10                	jne    c001170b <KeHandlePowerButton()+0x1d>
c00116fb:	83 ec 0c             	sub    esp,0xc
c00116fe:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0011704:	e8 1f 5a ff ff       	call   c0007128 <Computer::shutdown()>
c0011709:	eb 11                	jmp    c001171c <KeHandlePowerButton()+0x2e>
c001170b:	48                   	dec    eax
c001170c:	75 11                	jne    c001171f <KeHandlePowerButton()+0x31>
c001170e:	83 ec 0c             	sub    esp,0xc
c0011711:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0011717:	e8 3c 5a ff ff       	call   c0007158 <Computer::sleep()>
c001171c:	83 c4 10             	add    esp,0x10
c001171f:	83 c4 0c             	add    esp,0xc
c0011722:	c3                   	ret    

c0011723 <KeHandleSleepButton()>:
c0011723:	83 ec 0c             	sub    esp,0xc
c0011726:	a1 c4 be 02 c0       	mov    eax,ds:0xc002bec4
c001172b:	83 f8 02             	cmp    eax,0x2
c001172e:	75 10                	jne    c0011740 <KeHandleSleepButton()+0x1d>
c0011730:	83 ec 0c             	sub    esp,0xc
c0011733:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0011739:	e8 ea 59 ff ff       	call   c0007128 <Computer::shutdown()>
c001173e:	eb 11                	jmp    c0011751 <KeHandleSleepButton()+0x2e>
c0011740:	48                   	dec    eax
c0011741:	75 11                	jne    c0011754 <KeHandleSleepButton()+0x31>
c0011743:	83 ec 0c             	sub    esp,0xc
c0011746:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c001174c:	e8 07 5a ff ff       	call   c0007158 <Computer::sleep()>
c0011751:	83 c4 10             	add    esp,0x10
c0011754:	83 c4 0c             	add    esp,0xc
c0011757:	c3                   	ret    

c0011758 <KeSetupPowerManager()>:
c0011758:	83 ec 0c             	sub    esp,0xc
c001175b:	c7 05 e4 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bee4,0x0
c0011765:	68 f0 00 00 00       	push   0xf0
c001176a:	c6 05 a0 be 02 c0 00 	mov    BYTE PTR ds:0xc002bea0,0x0
c0011771:	6a 00                	push   0x0
c0011773:	68 9f 16 01 c0       	push   0xc001169f
c0011778:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c001177e:	e8 45 47 00 00       	call   c0015ec8 <Process::createThread(void (*)(void*), void*, int)>
c0011783:	c7 05 c0 be 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc002bec0,0x2
c001178d:	c7 05 c4 be 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002bec4,0x1
c0011797:	c7 05 c8 be 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc002bec8,0x3
c00117a1:	c7 05 cc be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002becc,0x0
c00117ab:	c7 05 d8 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bed8,0x0
c00117b5:	c7 05 d0 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bed0,0x0
c00117bf:	c7 05 dc be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bedc,0x0
c00117c9:	c7 05 d4 be 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc002bed4,0x3c
c00117d3:	c7 05 e0 be 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc002bee0,0x3c
c00117dd:	83 c4 1c             	add    esp,0x1c
c00117e0:	c3                   	ret    

c00117e1 <KeRand()>:
c00117e1:	69 05 e8 be 02 c0 75 28 00 00 	imul   eax,DWORD PTR ds:0xc002bee8,0x2875
c00117eb:	69 0d ec be 02 c0 75 b1 e7 a2 	imul   ecx,DWORD PTR ds:0xc002beec,0xa2e7b175
c00117f5:	53                   	push   ebx
c00117f6:	01 c1                	add    ecx,eax
c00117f8:	b8 75 b1 e7 a2       	mov    eax,0xa2e7b175
c00117fd:	f7 25 e8 be 02 c0    	mul    DWORD PTR ds:0xc002bee8
c0011803:	01 ca                	add    edx,ecx
c0011805:	05 ef 04 b5 00       	add    eax,0xb504ef
c001180a:	83 d2 00             	adc    edx,0x0
c001180d:	a3 e8 be 02 c0       	mov    ds:0xc002bee8,eax
c0011812:	0f b7 da             	movzx  ebx,dx
c0011815:	89 da                	mov    edx,ebx
c0011817:	89 1d ec be 02 c0    	mov    DWORD PTR ds:0xc002beec,ebx
c001181d:	0f ac d0 0e          	shrd   eax,edx,0xe
c0011821:	5b                   	pop    ebx
c0011822:	c3                   	ret    

c0011823 <KeSeedRand(unsigned int)>:
c0011823:	53                   	push   ebx
c0011824:	83 ec 08             	sub    esp,0x8
c0011827:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001182b:	e8 ad 6b 00 00       	call   c00183dd <HalGetRand()>
c0011830:	c7 05 ec be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002beec,0x0
c001183a:	31 d8                	xor    eax,ebx
c001183c:	a3 e8 be 02 c0       	mov    ds:0xc002bee8,eax
c0011841:	e8 9b ff ff ff       	call   c00117e1 <KeRand()>
c0011846:	83 c4 08             	add    esp,0x8
c0011849:	5b                   	pop    ebx
c001184a:	eb 95                	jmp    c00117e1 <KeRand()>

c001184c <KeInitRand()>:
c001184c:	83 ec 0c             	sub    esp,0xc
c001184f:	e8 7e 69 00 00       	call   c00181d2 <HalQueryPerformanceCounter()>
c0011854:	0f 20 da             	mov    edx,cr3
c0011857:	0f 22 da             	mov    cr3,edx
c001185a:	0f 20 da             	mov    edx,cr3
c001185d:	0f 22 da             	mov    cr3,edx
c0011860:	0f 20 da             	mov    edx,cr3
c0011863:	0f 22 da             	mov    cr3,edx
c0011866:	0f 20 da             	mov    edx,cr3
c0011869:	0f 22 da             	mov    cr3,edx
c001186c:	83 ec 0c             	sub    esp,0xc
c001186f:	35 03 8a 95 38       	xor    eax,0x38958a03
c0011874:	50                   	push   eax
c0011875:	e8 a9 ff ff ff       	call   c0011823 <KeSeedRand(unsigned int)>
c001187a:	83 c4 1c             	add    esp,0x1c
c001187d:	c3                   	ret    
c001187e:	66 90                	xchg   ax,ax

c0011880 <KeResolveCompatibilitySymbol(char*)>:
c0011880:	83 ec 0c             	sub    esp,0xc
c0011883:	83 ec 08             	sub    esp,0x8
c0011886:	68 2c 24 02 c0       	push   0xc002242c
c001188b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001188f:	e8 bc ee fe ff       	call   c0000750 <strcmp>
c0011894:	83 c4 10             	add    esp,0x10
c0011897:	85 c0                	test   eax,eax
c0011899:	0f 94 c0             	sete   al
c001189c:	0f b6 c0             	movzx  eax,al
c001189f:	85 c0                	test   eax,eax
c00118a1:	74 0d                	je     c00118b0 <KeResolveCompatibilitySymbol(char*)+0x30>
c00118a3:	b8 b8 6e 02 c0       	mov    eax,0xc0026eb8
c00118a8:	e9 8b 01 00 00       	jmp    c0011a38 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00118ad:	8d 76 00             	lea    esi,[esi+0x0]
c00118b0:	83 ec 08             	sub    esp,0x8
c00118b3:	68 35 24 02 c0       	push   0xc0022435
c00118b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00118bc:	e8 8f ee fe ff       	call   c0000750 <strcmp>
c00118c1:	83 c4 10             	add    esp,0x10
c00118c4:	85 c0                	test   eax,eax
c00118c6:	0f 94 c0             	sete   al
c00118c9:	0f b6 c0             	movzx  eax,al
c00118cc:	85 c0                	test   eax,eax
c00118ce:	74 0c                	je     c00118dc <KeResolveCompatibilitySymbol(char*)+0x5c>
c00118d0:	b8 90 f7 01 c0       	mov    eax,0xc001f790
c00118d5:	e9 5e 01 00 00       	jmp    c0011a38 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00118da:	66 90                	xchg   ax,ax
c00118dc:	83 ec 08             	sub    esp,0x8
c00118df:	68 3f 24 02 c0       	push   0xc002243f
c00118e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00118e8:	e8 63 ee fe ff       	call   c0000750 <strcmp>
c00118ed:	83 c4 10             	add    esp,0x10
c00118f0:	85 c0                	test   eax,eax
c00118f2:	0f 94 c0             	sete   al
c00118f5:	0f b6 c0             	movzx  eax,al
c00118f8:	85 c0                	test   eax,eax
c00118fa:	74 0c                	je     c0011908 <KeResolveCompatibilitySymbol(char*)+0x88>
c00118fc:	b8 c4 f4 01 c0       	mov    eax,0xc001f4c4
c0011901:	e9 32 01 00 00       	jmp    c0011a38 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011906:	66 90                	xchg   ax,ax
c0011908:	83 ec 08             	sub    esp,0x8
c001190b:	68 48 24 02 c0       	push   0xc0022448
c0011910:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011914:	e8 37 ee fe ff       	call   c0000750 <strcmp>
c0011919:	83 c4 10             	add    esp,0x10
c001191c:	85 c0                	test   eax,eax
c001191e:	0f 94 c0             	sete   al
c0011921:	0f b6 c0             	movzx  eax,al
c0011924:	85 c0                	test   eax,eax
c0011926:	74 0c                	je     c0011934 <KeResolveCompatibilitySymbol(char*)+0xb4>
c0011928:	b8 93 16 01 c0       	mov    eax,0xc0011693
c001192d:	e9 06 01 00 00       	jmp    c0011a38 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011932:	66 90                	xchg   ax,ax
c0011934:	83 ec 08             	sub    esp,0x8
c0011937:	68 5b 24 02 c0       	push   0xc002245b
c001193c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011940:	e8 0b ee fe ff       	call   c0000750 <strcmp>
c0011945:	83 c4 10             	add    esp,0x10
c0011948:	85 c0                	test   eax,eax
c001194a:	0f 94 c0             	sete   al
c001194d:	0f b6 c0             	movzx  eax,al
c0011950:	85 c0                	test   eax,eax
c0011952:	74 0c                	je     c0011960 <KeResolveCompatibilitySymbol(char*)+0xe0>
c0011954:	b8 93 0f 01 c0       	mov    eax,0xc0010f93
c0011959:	e9 da 00 00 00       	jmp    c0011a38 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001195e:	66 90                	xchg   ax,ax
c0011960:	83 ec 08             	sub    esp,0x8
c0011963:	68 78 24 02 c0       	push   0xc0022478
c0011968:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001196c:	e8 df ed fe ff       	call   c0000750 <strcmp>
c0011971:	83 c4 10             	add    esp,0x10
c0011974:	85 c0                	test   eax,eax
c0011976:	0f 94 c0             	sete   al
c0011979:	0f b6 c0             	movzx  eax,al
c001197c:	85 c0                	test   eax,eax
c001197e:	74 0c                	je     c001198c <KeResolveCompatibilitySymbol(char*)+0x10c>
c0011980:	b8 90 f8 01 c0       	mov    eax,0xc001f890
c0011985:	e9 ae 00 00 00       	jmp    c0011a38 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001198a:	66 90                	xchg   ax,ax
c001198c:	83 ec 08             	sub    esp,0x8
c001198f:	68 82 24 02 c0       	push   0xc0022482
c0011994:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011998:	e8 b3 ed fe ff       	call   c0000750 <strcmp>
c001199d:	83 c4 10             	add    esp,0x10
c00119a0:	85 c0                	test   eax,eax
c00119a2:	0f 94 c0             	sete   al
c00119a5:	0f b6 c0             	movzx  eax,al
c00119a8:	85 c0                	test   eax,eax
c00119aa:	74 0c                	je     c00119b8 <KeResolveCompatibilitySymbol(char*)+0x138>
c00119ac:	b8 10 f6 01 c0       	mov    eax,0xc001f610
c00119b1:	e9 82 00 00 00       	jmp    c0011a38 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00119b6:	66 90                	xchg   ax,ax
c00119b8:	83 ec 08             	sub    esp,0x8
c00119bb:	68 8b 24 02 c0       	push   0xc002248b
c00119c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00119c4:	e8 87 ed fe ff       	call   c0000750 <strcmp>
c00119c9:	83 c4 10             	add    esp,0x10
c00119cc:	85 c0                	test   eax,eax
c00119ce:	0f 94 c0             	sete   al
c00119d1:	0f b6 c0             	movzx  eax,al
c00119d4:	85 c0                	test   eax,eax
c00119d6:	74 08                	je     c00119e0 <KeResolveCompatibilitySymbol(char*)+0x160>
c00119d8:	b8 bc 6e 02 c0       	mov    eax,0xc0026ebc
c00119dd:	eb 59                	jmp    c0011a38 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00119df:	90                   	nop
c00119e0:	83 ec 08             	sub    esp,0x8
c00119e3:	68 a3 24 02 c0       	push   0xc00224a3
c00119e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00119ec:	e8 5f ed fe ff       	call   c0000750 <strcmp>
c00119f1:	83 c4 10             	add    esp,0x10
c00119f4:	85 c0                	test   eax,eax
c00119f6:	0f 94 c0             	sete   al
c00119f9:	0f b6 c0             	movzx  eax,al
c00119fc:	85 c0                	test   eax,eax
c00119fe:	74 08                	je     c0011a08 <KeResolveCompatibilitySymbol(char*)+0x188>
c0011a00:	b8 bc 6e 02 c0       	mov    eax,0xc0026ebc
c0011a05:	eb 31                	jmp    c0011a38 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011a07:	90                   	nop
c0011a08:	83 ec 08             	sub    esp,0x8
c0011a0b:	68 b0 24 02 c0       	push   0xc00224b0
c0011a10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011a14:	e8 37 ed fe ff       	call   c0000750 <strcmp>
c0011a19:	83 c4 10             	add    esp,0x10
c0011a1c:	85 c0                	test   eax,eax
c0011a1e:	0f 94 c0             	sete   al
c0011a21:	0f b6 c0             	movzx  eax,al
c0011a24:	85 c0                	test   eax,eax
c0011a26:	74 08                	je     c0011a30 <KeResolveCompatibilitySymbol(char*)+0x1b0>
c0011a28:	b8 bd 6e 02 c0       	mov    eax,0xc0026ebd
c0011a2d:	eb 09                	jmp    c0011a38 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011a2f:	90                   	nop
c0011a30:	b8 00 00 00 00       	mov    eax,0x0
c0011a35:	8d 76 00             	lea    esi,[esi+0x0]
c0011a38:	83 c4 0c             	add    esp,0xc
c0011a3b:	c3                   	ret    

c0011a3c <KiSigKill(int)>:
c0011a3c:	83 ec 0c             	sub    esp,0xc
c0011a3f:	6a 00                	push   0x0
c0011a41:	6a 00                	push   0x0
c0011a43:	6a ff                	push   0xffffffff
c0011a45:	6a 01                	push   0x1
c0011a47:	e8 06 36 01 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0011a4c:	83 c4 1c             	add    esp,0x1c
c0011a4f:	c3                   	ret    

c0011a50 <KiDefaultSignalHandlerIgnore(int)>:
c0011a50:	c3                   	ret    

c0011a51 <KiDefaultSignalHandlerPause(int)>:
c0011a51:	57                   	push   edi
c0011a52:	b9 07 00 00 00       	mov    ecx,0x7
c0011a57:	56                   	push   esi
c0011a58:	be f9 24 02 c0       	mov    esi,0xc00224f9
c0011a5d:	83 ec 24             	sub    esp,0x24
c0011a60:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0011a64:	fc                   	cld    
c0011a65:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0011a67:	8d 44 24 04          	lea    eax,[esp+0x4]
c0011a6b:	50                   	push   eax
c0011a6c:	6a 00                	push   0x0
c0011a6e:	6a 00                	push   0x0
c0011a70:	6a 27                	push   0x27
c0011a72:	e8 db 35 01 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0011a77:	83 c4 34             	add    esp,0x34
c0011a7a:	5e                   	pop    esi
c0011a7b:	5f                   	pop    edi
c0011a7c:	c3                   	ret    

c0011a7d <KiDefaultSignalHandlerResume(int)>:
c0011a7d:	57                   	push   edi
c0011a7e:	b9 1d 00 00 00       	mov    ecx,0x1d
c0011a83:	56                   	push   esi
c0011a84:	be 15 25 02 c0       	mov    esi,0xc0022515
c0011a89:	83 ec 24             	sub    esp,0x24
c0011a8c:	8d 7c 24 03          	lea    edi,[esp+0x3]
c0011a90:	fc                   	cld    
c0011a91:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011a93:	8d 44 24 03          	lea    eax,[esp+0x3]
c0011a97:	50                   	push   eax
c0011a98:	6a 00                	push   0x0
c0011a9a:	6a 00                	push   0x0
c0011a9c:	6a 27                	push   0x27
c0011a9e:	e8 af 35 01 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0011aa3:	83 c4 34             	add    esp,0x34
c0011aa6:	5e                   	pop    esi
c0011aa7:	5f                   	pop    edi
c0011aa8:	c3                   	ret    

c0011aa9 <KeDeinitSignals(SigHandlerBlock*)>:
c0011aa9:	e9 18 60 ff ff       	jmp    c0007ac6 <free>

c0011aae <KeInitSignals()>:
c0011aae:	53                   	push   ebx
c0011aaf:	83 ec 14             	sub    esp,0x14
c0011ab2:	68 c8 00 00 00       	push   0xc8
c0011ab7:	e8 fa 5f ff ff       	call   c0007ab6 <malloc>
c0011abc:	83 c4 0c             	add    esp,0xc
c0011abf:	c7 80 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xbc],0x0
c0011ac9:	c7 80 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc0],0x0
c0011ad3:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0011ada:	89 c3                	mov    ebx,eax
c0011adc:	6a 20                	push   0x20
c0011ade:	8d 80 9c 00 00 00    	lea    eax,[eax+0x9c]
c0011ae4:	6a 00                	push   0x0
c0011ae6:	50                   	push   eax
c0011ae7:	e8 04 ea fe ff       	call   c00004f0 <memset>
c0011aec:	83 c4 0c             	add    esp,0xc
c0011aef:	6a 44                	push   0x44
c0011af1:	6a 00                	push   0x0
c0011af3:	53                   	push   ebx
c0011af4:	e8 f7 e9 fe ff       	call   c00004f0 <memset>
c0011af9:	89 d8                	mov    eax,ebx
c0011afb:	83 c4 18             	add    esp,0x18
c0011afe:	5b                   	pop    ebx
c0011aff:	c3                   	ret    

c0011b00 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c0011b00:	53                   	push   ebx
c0011b01:	b8 01 00 00 00       	mov    eax,0x1
c0011b06:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0011b0a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011b0e:	83 f9 10             	cmp    ecx,0x10
c0011b11:	7f 21                	jg     c0011b34 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c0011b13:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c0011b16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011b1a:	89 03                	mov    DWORD PTR [ebx],eax
c0011b1c:	b8 01 00 00 00       	mov    eax,0x1
c0011b21:	d3 e0                	shl    eax,cl
c0011b23:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0011b27:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0011b2a:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c0011b32:	31 c0                	xor    eax,eax
c0011b34:	5b                   	pop    ebx
c0011b35:	c3                   	ret    

c0011b36 <KeRaiseSignal(SigHandlerBlock*, int)>:
c0011b36:	55                   	push   ebp
c0011b37:	57                   	push   edi
c0011b38:	bf 08 00 00 00       	mov    edi,0x8
c0011b3d:	56                   	push   esi
c0011b3e:	53                   	push   ebx
c0011b3f:	83 ec 18             	sub    esp,0x18
c0011b42:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011b46:	68 32 25 02 c0       	push   0xc0022532
c0011b4b:	e8 f5 8d ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0011b50:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0011b57:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c0011b5d:	83 c4 10             	add    esp,0x10
c0011b60:	31 c9                	xor    ecx,ecx
c0011b62:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0011b66:	99                   	cdq    
c0011b67:	f7 ff                	idiv   edi
c0011b69:	8d 42 24             	lea    eax,[edx+0x24]
c0011b6c:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c0011b70:	85 f6                	test   esi,esi
c0011b72:	75 1a                	jne    c0011b8e <KeRaiseSignal(SigHandlerBlock*, int)+0x58>
c0011b74:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0011b78:	89 4c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],ecx
c0011b7c:	50                   	push   eax
c0011b7d:	50                   	push   eax
c0011b7e:	52                   	push   edx
c0011b7f:	68 43 25 02 c0       	push   0xc0022543
c0011b84:	e8 bc 8d ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0011b89:	83 c4 10             	add    esp,0x10
c0011b8c:	eb 1b                	jmp    c0011ba9 <KeRaiseSignal(SigHandlerBlock*, int)+0x73>
c0011b8e:	41                   	inc    ecx
c0011b8f:	83 f9 08             	cmp    ecx,0x8
c0011b92:	75 ce                	jne    c0011b62 <KeRaiseSignal(SigHandlerBlock*, int)+0x2c>
c0011b94:	83 ec 0c             	sub    esp,0xc
c0011b97:	be 01 00 00 00       	mov    esi,0x1
c0011b9c:	68 64 25 02 c0       	push   0xc0022564
c0011ba1:	e8 9f 8d ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0011ba6:	83 c4 10             	add    esp,0x10
c0011ba9:	83 c4 0c             	add    esp,0xc
c0011bac:	89 f0                	mov    eax,esi
c0011bae:	5b                   	pop    ebx
c0011baf:	5e                   	pop    esi
c0011bb0:	5f                   	pop    edi
c0011bb1:	5d                   	pop    ebp
c0011bb2:	c3                   	ret    

c0011bb3 <KeCheckSignal(SigHandlerBlock*, int*)>:
c0011bb3:	55                   	push   ebp
c0011bb4:	57                   	push   edi
c0011bb5:	56                   	push   esi
c0011bb6:	53                   	push   ebx
c0011bb7:	51                   	push   ecx
c0011bb8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0011bbc:	85 db                	test   ebx,ebx
c0011bbe:	0f 84 bc 00 00 00    	je     c0011c80 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0011bc4:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c0011bcb:	0f 84 af 00 00 00    	je     c0011c80 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0011bd1:	31 c9                	xor    ecx,ecx
c0011bd3:	bf 08 00 00 00       	mov    edi,0x8
c0011bd8:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c0011bde:	8d 04 0e             	lea    eax,[esi+ecx*1]
c0011be1:	99                   	cdq    
c0011be2:	f7 ff                	idiv   edi
c0011be4:	8b ac 93 9c 00 00 00 	mov    ebp,DWORD PTR [ebx+edx*4+0x9c]
c0011beb:	85 ed                	test   ebp,ebp
c0011bed:	0f 84 9e 00 00 00    	je     c0011c91 <KeCheckSignal(SigHandlerBlock*, int*)+0xde>
c0011bf3:	89 e9                	mov    ecx,ebp
c0011bf5:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c0011bfb:	bf 01 00 00 00       	mov    edi,0x1
c0011c00:	89 04 24             	mov    DWORD PTR [esp],eax
c0011c03:	d3 e7                	shl    edi,cl
c0011c05:	31 c9                	xor    ecx,ecx
c0011c07:	b8 01 00 00 00       	mov    eax,0x1
c0011c0c:	d3 e0                	shl    eax,cl
c0011c0e:	85 04 24             	test   DWORD PTR [esp],eax
c0011c11:	74 06                	je     c0011c19 <KeCheckSignal(SigHandlerBlock*, int*)+0x66>
c0011c13:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c0011c17:	75 67                	jne    c0011c80 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0011c19:	41                   	inc    ecx
c0011c1a:	83 f9 11             	cmp    ecx,0x11
c0011c1d:	75 e8                	jne    c0011c07 <KeCheckSignal(SigHandlerBlock*, int*)+0x54>
c0011c1f:	46                   	inc    esi
c0011c20:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0011c23:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0011c29:	09 f8                	or     eax,edi
c0011c2b:	c7 84 93 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+edx*4+0x9c],0x0
c0011c36:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c0011c3c:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c0011c43:	31 c0                	xor    eax,eax
c0011c45:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c0011c4d:	74 09                	je     c0011c58 <KeCheckSignal(SigHandlerBlock*, int*)+0xa5>
c0011c4f:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0011c56:	eb 06                	jmp    c0011c5e <KeCheckSignal(SigHandlerBlock*, int*)+0xab>
c0011c58:	40                   	inc    eax
c0011c59:	83 f8 08             	cmp    eax,0x8
c0011c5c:	75 e7                	jne    c0011c45 <KeCheckSignal(SigHandlerBlock*, int*)+0x92>
c0011c5e:	8b 04 ab             	mov    eax,DWORD PTR [ebx+ebp*4]
c0011c61:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011c65:	83 fd 09             	cmp    ebp,0x9
c0011c68:	89 2a                	mov    DWORD PTR [edx],ebp
c0011c6a:	75 07                	jne    c0011c73 <KeCheckSignal(SigHandlerBlock*, int*)+0xc0>
c0011c6c:	b8 3c 1a 01 c0       	mov    eax,0xc0011a3c
c0011c71:	eb 31                	jmp    c0011ca4 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011c73:	83 f8 01             	cmp    eax,0x1
c0011c76:	75 0c                	jne    c0011c84 <KeCheckSignal(SigHandlerBlock*, int*)+0xd1>
c0011c78:	f7 d7                	not    edi
c0011c7a:	21 bb c0 00 00 00    	and    DWORD PTR [ebx+0xc0],edi
c0011c80:	31 c0                	xor    eax,eax
c0011c82:	eb 20                	jmp    c0011ca4 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011c84:	85 c0                	test   eax,eax
c0011c86:	75 1c                	jne    c0011ca4 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011c88:	8b 04 ad 60 3d 02 c0 	mov    eax,DWORD PTR [ebp*4-0x3ffdc2a0]
c0011c8f:	eb 13                	jmp    c0011ca4 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011c91:	46                   	inc    esi
c0011c92:	41                   	inc    ecx
c0011c93:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0011c99:	83 f9 08             	cmp    ecx,0x8
c0011c9c:	0f 85 36 ff ff ff    	jne    c0011bd8 <KeCheckSignal(SigHandlerBlock*, int*)+0x25>
c0011ca2:	eb dc                	jmp    c0011c80 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0011ca4:	5a                   	pop    edx
c0011ca5:	5b                   	pop    ebx
c0011ca6:	5e                   	pop    esi
c0011ca7:	5f                   	pop    edi
c0011ca8:	5d                   	pop    ebp
c0011ca9:	c3                   	ret    

c0011caa <KiCheckSignalZ>:
c0011caa:	83 ec 10             	sub    esp,0x10
c0011cad:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0011cb1:	50                   	push   eax
c0011cb2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011cb7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011cba:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0011cc0:	e8 ee fe ff ff       	call   c0011bb3 <KeCheckSignal(SigHandlerBlock*, int*)>
c0011cc5:	5a                   	pop    edx
c0011cc6:	31 d2                	xor    edx,edx
c0011cc8:	59                   	pop    ecx
c0011cc9:	85 c0                	test   eax,eax
c0011ccb:	74 19                	je     c0011ce6 <KiCheckSignalZ+0x3c>
c0011ccd:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0011cd3:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0011cd6:	89 02                	mov    DWORD PTR [edx],eax
c0011cd8:	c7 42 04 00 00 00 00 	mov    DWORD PTR [edx+0x4],0x0
c0011cdf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011ce3:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0011ce6:	89 d0                	mov    eax,edx
c0011ce8:	83 c4 10             	add    esp,0x10
c0011ceb:	c3                   	ret    

c0011cec <KeCompleteSignal(SigHandlerBlock*, int)>:
c0011cec:	56                   	push   esi
c0011ced:	53                   	push   ebx
c0011cee:	bb 01 00 00 00       	mov    ebx,0x1
c0011cf3:	52                   	push   edx
c0011cf4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0011cf8:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011cfc:	d3 e3                	shl    ebx,cl
c0011cfe:	83 f9 10             	cmp    ecx,0x10
c0011d01:	7f 08                	jg     c0011d0b <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c0011d03:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c0011d09:	75 10                	jne    c0011d1b <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c0011d0b:	83 ec 0c             	sub    esp,0xc
c0011d0e:	68 75 25 02 c0       	push   0xc0022575
c0011d13:	e8 7b f9 ff ff       	call   c0011693 <KePanic(char const*)>
c0011d18:	83 c4 10             	add    esp,0x10
c0011d1b:	f7 d3                	not    ebx
c0011d1d:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c0011d23:	58                   	pop    eax
c0011d24:	5b                   	pop    ebx
c0011d25:	5e                   	pop    esi
c0011d26:	c3                   	ret    

c0011d27 <KiFinishSignalZ>:
c0011d27:	53                   	push   ebx
c0011d28:	83 ec 10             	sub    esp,0x10
c0011d2b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0011d2f:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c0011d32:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011d37:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011d3a:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0011d40:	e8 a7 ff ff ff       	call   c0011cec <KeCompleteSignal(SigHandlerBlock*, int)>
c0011d45:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0011d4b:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0011d52:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0011d59:	83 c4 18             	add    esp,0x18
c0011d5c:	5b                   	pop    ebx
c0011d5d:	c3                   	ret    

c0011d5e <SysSeekDir(regs*)>:
c0011d5e:	31 c0                	xor    eax,eax
c0011d60:	31 d2                	xor    edx,edx
c0011d62:	c3                   	ret    

c0011d63 <SysTellDir(regs*)>:
c0011d63:	31 c0                	xor    eax,eax
c0011d65:	31 d2                	xor    edx,edx
c0011d67:	c3                   	ret    

c0011d68 <SysVerify(regs*)>:
c0011d68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011d6c:	31 d2                	xor    edx,edx
c0011d6e:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011d71:	c3                   	ret    

c0011d72 <SysGetArgc(regs*)>:
c0011d72:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011d77:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011d7a:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c0011d80:	89 c2                	mov    edx,eax
c0011d82:	c1 fa 1f             	sar    edx,0x1f
c0011d85:	c3                   	ret    

c0011d86 <SysTTYName(regs*)>:
c0011d86:	b8 01 00 00 00       	mov    eax,0x1
c0011d8b:	31 d2                	xor    edx,edx
c0011d8d:	c3                   	ret    

c0011d8e <SysFormatDisk(regs*)>:
c0011d8e:	56                   	push   esi
c0011d8f:	53                   	push   ebx
c0011d90:	83 ec 04             	sub    esp,0x4
c0011d93:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011d97:	8b 1d 04 94 02 c0    	mov    ebx,DWORD PTR ds:0xc0029404
c0011d9d:	eb 28                	jmp    c0011dc7 <SysFormatDisk(regs*)+0x39>
c0011d9f:	83 ec 0c             	sub    esp,0xc
c0011da2:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0011da5:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c0011da8:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011daa:	51                   	push   ecx
c0011dab:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c0011dae:	51                   	push   ecx
c0011daf:	50                   	push   eax
c0011db0:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c0011db7:	50                   	push   eax
c0011db8:	53                   	push   ebx
c0011db9:	ff 52 4c             	call   DWORD PTR [edx+0x4c]
c0011dbc:	83 c4 20             	add    esp,0x20
c0011dbf:	83 f8 08             	cmp    eax,0x8
c0011dc2:	75 14                	jne    c0011dd8 <SysFormatDisk(regs*)+0x4a>
c0011dc4:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0011dc7:	85 db                	test   ebx,ebx
c0011dc9:	75 d4                	jne    c0011d9f <SysFormatDisk(regs*)+0x11>
c0011dcb:	83 c4 04             	add    esp,0x4
c0011dce:	b8 03 00 00 00       	mov    eax,0x3
c0011dd3:	31 d2                	xor    edx,edx
c0011dd5:	5b                   	pop    ebx
c0011dd6:	5e                   	pop    esi
c0011dd7:	c3                   	ret    
c0011dd8:	85 c0                	test   eax,eax
c0011dda:	74 1f                	je     c0011dfb <SysFormatDisk(regs*)+0x6d>
c0011ddc:	83 f8 09             	cmp    eax,0x9
c0011ddf:	74 0d                	je     c0011dee <SysFormatDisk(regs*)+0x60>
c0011de1:	83 c4 04             	add    esp,0x4
c0011de4:	b8 02 00 00 00       	mov    eax,0x2
c0011de9:	31 d2                	xor    edx,edx
c0011deb:	5b                   	pop    ebx
c0011dec:	5e                   	pop    esi
c0011ded:	c3                   	ret    
c0011dee:	83 c4 04             	add    esp,0x4
c0011df1:	b8 01 00 00 00       	mov    eax,0x1
c0011df6:	31 d2                	xor    edx,edx
c0011df8:	5b                   	pop    ebx
c0011df9:	5e                   	pop    esi
c0011dfa:	c3                   	ret    
c0011dfb:	83 c4 04             	add    esp,0x4
c0011dfe:	31 c0                	xor    eax,eax
c0011e00:	31 d2                	xor    edx,edx
c0011e02:	5b                   	pop    ebx
c0011e03:	5e                   	pop    esi
c0011e04:	c3                   	ret    

c0011e05 <SysSetDiskVolumeLabel(regs*)>:
c0011e05:	56                   	push   esi
c0011e06:	53                   	push   ebx
c0011e07:	83 ec 04             	sub    esp,0x4
c0011e0a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011e0e:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0011e11:	83 f8 19             	cmp    eax,0x19
c0011e14:	77 33                	ja     c0011e49 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011e16:	8b 0c 85 80 b8 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd4780]
c0011e1d:	85 c9                	test   ecx,ecx
c0011e1f:	74 28                	je     c0011e49 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011e21:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c0011e24:	85 db                	test   ebx,ebx
c0011e26:	74 21                	je     c0011e49 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011e28:	8b 91 74 01 00 00    	mov    edx,DWORD PTR [ecx+0x174]
c0011e2e:	85 d2                	test   edx,edx
c0011e30:	74 17                	je     c0011e49 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011e32:	8b 32                	mov    esi,DWORD PTR [edx]
c0011e34:	53                   	push   ebx
c0011e35:	50                   	push   eax
c0011e36:	51                   	push   ecx
c0011e37:	52                   	push   edx
c0011e38:	ff 56 5c             	call   DWORD PTR [esi+0x5c]
c0011e3b:	83 c4 10             	add    esp,0x10
c0011e3e:	89 c2                	mov    edx,eax
c0011e40:	83 c4 04             	add    esp,0x4
c0011e43:	c1 fa 1f             	sar    edx,0x1f
c0011e46:	5b                   	pop    ebx
c0011e47:	5e                   	pop    esi
c0011e48:	c3                   	ret    
c0011e49:	83 c4 04             	add    esp,0x4
c0011e4c:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0011e51:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011e56:	5b                   	pop    ebx
c0011e57:	5e                   	pop    esi
c0011e58:	c3                   	ret    

c0011e59 <SysGetDiskVolumeLabel(regs*)>:
c0011e59:	57                   	push   edi
c0011e5a:	56                   	push   esi
c0011e5b:	53                   	push   ebx
c0011e5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011e60:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0011e63:	83 fa 19             	cmp    edx,0x19
c0011e66:	77 3c                	ja     c0011ea4 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011e68:	8b 0c 95 80 b8 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd4780]
c0011e6f:	85 c9                	test   ecx,ecx
c0011e71:	74 31                	je     c0011ea4 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011e73:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0011e76:	85 db                	test   ebx,ebx
c0011e78:	74 2a                	je     c0011ea4 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011e7a:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0011e7d:	85 f6                	test   esi,esi
c0011e7f:	74 23                	je     c0011ea4 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011e81:	8b 81 74 01 00 00    	mov    eax,DWORD PTR [ecx+0x174]
c0011e87:	85 c0                	test   eax,eax
c0011e89:	74 19                	je     c0011ea4 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011e8b:	83 ec 0c             	sub    esp,0xc
c0011e8e:	8b 38                	mov    edi,DWORD PTR [eax]
c0011e90:	56                   	push   esi
c0011e91:	53                   	push   ebx
c0011e92:	52                   	push   edx
c0011e93:	51                   	push   ecx
c0011e94:	50                   	push   eax
c0011e95:	ff 57 58             	call   DWORD PTR [edi+0x58]
c0011e98:	83 c4 20             	add    esp,0x20
c0011e9b:	89 c2                	mov    edx,eax
c0011e9d:	5b                   	pop    ebx
c0011e9e:	c1 fa 1f             	sar    edx,0x1f
c0011ea1:	5e                   	pop    esi
c0011ea2:	5f                   	pop    edi
c0011ea3:	c3                   	ret    
c0011ea4:	5b                   	pop    ebx
c0011ea5:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0011eaa:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011eaf:	5e                   	pop    esi
c0011eb0:	5f                   	pop    edi
c0011eb1:	c3                   	ret    

c0011eb2 <SysShutdown(regs*)>:
c0011eb2:	83 ec 0c             	sub    esp,0xc
c0011eb5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011eb9:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011ebc:	85 c0                	test   eax,eax
c0011ebe:	74 18                	je     c0011ed8 <SysShutdown(regs*)+0x26>
c0011ec0:	83 f8 01             	cmp    eax,0x1
c0011ec3:	74 38                	je     c0011efd <SysShutdown(regs*)+0x4b>
c0011ec5:	83 f8 02             	cmp    eax,0x2
c0011ec8:	74 24                	je     c0011eee <SysShutdown(regs*)+0x3c>
c0011eca:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011ecf:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011ed4:	83 c4 0c             	add    esp,0xc
c0011ed7:	c3                   	ret    
c0011ed8:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0011edd:	8b 10                	mov    edx,DWORD PTR [eax]
c0011edf:	6a 00                	push   0x0
c0011ee1:	6a 00                	push   0x0
c0011ee3:	6a 00                	push   0x0
c0011ee5:	50                   	push   eax
c0011ee6:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011ee9:	83 c4 10             	add    esp,0x10
c0011eec:	eb dc                	jmp    c0011eca <SysShutdown(regs*)+0x18>
c0011eee:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0011ef3:	8b 10                	mov    edx,DWORD PTR [eax]
c0011ef5:	6a 00                	push   0x0
c0011ef7:	6a 00                	push   0x0
c0011ef9:	6a 01                	push   0x1
c0011efb:	eb e8                	jmp    c0011ee5 <SysShutdown(regs*)+0x33>
c0011efd:	a1 00 b9 02 c0       	mov    eax,ds:0xc002b900
c0011f02:	85 c0                	test   eax,eax
c0011f04:	74 02                	je     c0011f08 <SysShutdown(regs*)+0x56>
c0011f06:	ff d0                	call   eax
c0011f08:	31 c0                	xor    eax,eax
c0011f0a:	31 d2                	xor    edx,edx
c0011f0c:	83 c4 0c             	add    esp,0xc
c0011f0f:	c3                   	ret    

c0011f10 <SysRealpath(regs*)>:
c0011f10:	83 ec 0c             	sub    esp,0xc
c0011f13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011f17:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0011f1a:	85 d2                	test   edx,edx
c0011f1c:	74 07                	je     c0011f25 <SysRealpath(regs*)+0x15>
c0011f1e:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0011f21:	85 c0                	test   eax,eax
c0011f23:	75 0b                	jne    c0011f30 <SysRealpath(regs*)+0x20>
c0011f25:	b8 01 00 00 00       	mov    eax,0x1
c0011f2a:	31 d2                	xor    edx,edx
c0011f2c:	83 c4 0c             	add    esp,0xc
c0011f2f:	c3                   	ret    
c0011f30:	6a 00                	push   0x0
c0011f32:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0011f38:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0011f3b:	81 c1 0c 01 00 00    	add    ecx,0x10c
c0011f41:	51                   	push   ecx
c0011f42:	52                   	push   edx
c0011f43:	50                   	push   eax
c0011f44:	e8 91 99 ff ff       	call   c000b8da <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0011f49:	83 c4 10             	add    esp,0x10
c0011f4c:	31 c0                	xor    eax,eax
c0011f4e:	31 d2                	xor    edx,edx
c0011f50:	83 c4 0c             	add    esp,0xc
c0011f53:	c3                   	ret    

c0011f54 <SysReadDir(regs*)>:
c0011f54:	53                   	push   ebx
c0011f55:	83 ec 18             	sub    esp,0x18
c0011f58:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011f5c:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011f5f:	83 f8 02             	cmp    eax,0x2
c0011f62:	76 61                	jbe    c0011fc5 <SysReadDir(regs*)+0x71>
c0011f64:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c0011f6b:	77 49                	ja     c0011fb6 <SysReadDir(regs*)+0x62>
c0011f6d:	83 ec 0c             	sub    esp,0xc
c0011f70:	50                   	push   eax
c0011f71:	e8 3d 75 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0011f76:	83 c4 10             	add    esp,0x10
c0011f79:	85 c0                	test   eax,eax
c0011f7b:	74 39                	je     c0011fb6 <SysReadDir(regs*)+0x62>
c0011f7d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011f85:	83 ec 0c             	sub    esp,0xc
c0011f88:	8b 10                	mov    edx,DWORD PTR [eax]
c0011f8a:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0011f8e:	51                   	push   ecx
c0011f8f:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0011f92:	51                   	push   ecx
c0011f93:	6a 00                	push   0x0
c0011f95:	68 10 01 00 00       	push   0x110
c0011f9a:	50                   	push   eax
c0011f9b:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011f9e:	83 c4 20             	add    esp,0x20
c0011fa1:	85 c0                	test   eax,eax
c0011fa3:	74 29                	je     c0011fce <SysReadDir(regs*)+0x7a>
c0011fa5:	83 f8 07             	cmp    eax,0x7
c0011fa8:	74 1b                	je     c0011fc5 <SysReadDir(regs*)+0x71>
c0011faa:	b8 02 00 00 00       	mov    eax,0x2
c0011faf:	31 d2                	xor    edx,edx
c0011fb1:	83 c4 18             	add    esp,0x18
c0011fb4:	5b                   	pop    ebx
c0011fb5:	c3                   	ret    
c0011fb6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011fbb:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011fc0:	83 c4 18             	add    esp,0x18
c0011fc3:	5b                   	pop    ebx
c0011fc4:	c3                   	ret    
c0011fc5:	b8 01 00 00 00       	mov    eax,0x1
c0011fca:	31 d2                	xor    edx,edx
c0011fcc:	eb e3                	jmp    c0011fb1 <SysReadDir(regs*)+0x5d>
c0011fce:	31 c0                	xor    eax,eax
c0011fd0:	31 d2                	xor    edx,edx
c0011fd2:	eb dd                	jmp    c0011fb1 <SysReadDir(regs*)+0x5d>

c0011fd4 <SysIsATTY(regs*)>:
c0011fd4:	83 ec 0c             	sub    esp,0xc
c0011fd7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011fdb:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011fde:	83 f8 02             	cmp    eax,0x2
c0011fe1:	76 07                	jbe    c0011fea <SysIsATTY(regs*)+0x16>
c0011fe3:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011fe8:	75 26                	jne    c0012010 <SysIsATTY(regs*)+0x3c>
c0011fea:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011fef:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011ff2:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0011ff8:	85 c0                	test   eax,eax
c0011ffa:	74 24                	je     c0012020 <SysIsATTY(regs*)+0x4c>
c0011ffc:	83 ec 0c             	sub    esp,0xc
c0011fff:	8b 10                	mov    edx,DWORD PTR [eax]
c0012001:	50                   	push   eax
c0012002:	ff 12                	call   DWORD PTR [edx]
c0012004:	31 d2                	xor    edx,edx
c0012006:	0f b6 c0             	movzx  eax,al
c0012009:	83 c4 10             	add    esp,0x10
c001200c:	83 c4 0c             	add    esp,0xc
c001200f:	c3                   	ret    
c0012010:	83 ec 0c             	sub    esp,0xc
c0012013:	50                   	push   eax
c0012014:	e8 9a 74 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0012019:	83 c4 10             	add    esp,0x10
c001201c:	85 c0                	test   eax,eax
c001201e:	75 dc                	jne    c0011ffc <SysIsATTY(regs*)+0x28>
c0012020:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012025:	ba ff ff ff ff       	mov    edx,0xffffffff
c001202a:	83 c4 0c             	add    esp,0xc
c001202d:	c3                   	ret    

c001202e <SysSeek(regs*)>:
c001202e:	53                   	push   ebx
c001202f:	83 ec 08             	sub    esp,0x8
c0012032:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012036:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012039:	8d 50 fd             	lea    edx,[eax-0x3]
c001203c:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0012042:	77 32                	ja     c0012076 <SysSeek(regs*)+0x48>
c0012044:	83 ec 0c             	sub    esp,0xc
c0012047:	50                   	push   eax
c0012048:	e8 66 74 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c001204d:	83 c4 0c             	add    esp,0xc
c0012050:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0012053:	31 db                	xor    ebx,ebx
c0012055:	53                   	push   ebx
c0012056:	51                   	push   ecx
c0012057:	50                   	push   eax
c0012058:	e8 41 9c ff ff       	call   c000bc9e <File::seek(unsigned long long)>
c001205d:	83 c4 10             	add    esp,0x10
c0012060:	85 c0                	test   eax,eax
c0012062:	0f 95 c0             	setne  al
c0012065:	31 d2                	xor    edx,edx
c0012067:	0f b6 c0             	movzx  eax,al
c001206a:	f7 d8                	neg    eax
c001206c:	83 d2 00             	adc    edx,0x0
c001206f:	83 c4 08             	add    esp,0x8
c0012072:	f7 da                	neg    edx
c0012074:	5b                   	pop    ebx
c0012075:	c3                   	ret    
c0012076:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001207b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012080:	83 c4 08             	add    esp,0x8
c0012083:	5b                   	pop    ebx
c0012084:	c3                   	ret    

c0012085 <SysTell(regs*)>:
c0012085:	53                   	push   ebx
c0012086:	83 ec 08             	sub    esp,0x8
c0012089:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001208d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012090:	83 f8 02             	cmp    eax,0x2
c0012093:	76 4e                	jbe    c00120e3 <SysTell(regs*)+0x5e>
c0012095:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001209a:	76 19                	jbe    c00120b5 <SysTell(regs*)+0x30>
c001209c:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001209f:	31 d2                	xor    edx,edx
c00120a1:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00120a7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00120ae:	31 c0                	xor    eax,eax
c00120b0:	83 c4 08             	add    esp,0x8
c00120b3:	5b                   	pop    ebx
c00120b4:	c3                   	ret    
c00120b5:	83 ec 0c             	sub    esp,0xc
c00120b8:	50                   	push   eax
c00120b9:	e8 f5 73 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c00120be:	5a                   	pop    edx
c00120bf:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c00120c2:	59                   	pop    ecx
c00120c3:	53                   	push   ebx
c00120c4:	50                   	push   eax
c00120c5:	e8 80 9c ff ff       	call   c000bd4a <File::tell(unsigned long long*)>
c00120ca:	83 c4 10             	add    esp,0x10
c00120cd:	85 c0                	test   eax,eax
c00120cf:	0f 95 c0             	setne  al
c00120d2:	31 d2                	xor    edx,edx
c00120d4:	0f b6 c0             	movzx  eax,al
c00120d7:	f7 d8                	neg    eax
c00120d9:	83 d2 00             	adc    edx,0x0
c00120dc:	83 c4 08             	add    esp,0x8
c00120df:	f7 da                	neg    edx
c00120e1:	5b                   	pop    ebx
c00120e2:	c3                   	ret    
c00120e3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00120e8:	ba ff ff ff ff       	mov    edx,0xffffffff
c00120ed:	83 c4 08             	add    esp,0x8
c00120f0:	5b                   	pop    ebx
c00120f1:	c3                   	ret    

c00120f2 <SysSize(regs*)>:
c00120f2:	53                   	push   ebx
c00120f3:	83 ec 18             	sub    esp,0x18
c00120f6:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00120fa:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00120fd:	83 f8 02             	cmp    eax,0x2
c0012100:	76 54                	jbe    c0012156 <SysSize(regs*)+0x64>
c0012102:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0012107:	76 19                	jbe    c0012122 <SysSize(regs*)+0x30>
c0012109:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001210c:	31 d2                	xor    edx,edx
c001210e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0012114:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001211b:	31 c0                	xor    eax,eax
c001211d:	83 c4 18             	add    esp,0x18
c0012120:	5b                   	pop    ebx
c0012121:	c3                   	ret    
c0012122:	83 ec 0c             	sub    esp,0xc
c0012125:	50                   	push   eax
c0012126:	e8 88 73 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c001212b:	83 c4 0c             	add    esp,0xc
c001212e:	8d 54 24 13          	lea    edx,[esp+0x13]
c0012132:	52                   	push   edx
c0012133:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0012136:	52                   	push   edx
c0012137:	50                   	push   eax
c0012138:	e8 a5 9d ff ff       	call   c000bee2 <File::stat(unsigned long long*, bool*)>
c001213d:	83 c4 10             	add    esp,0x10
c0012140:	85 c0                	test   eax,eax
c0012142:	0f 95 c0             	setne  al
c0012145:	31 d2                	xor    edx,edx
c0012147:	0f b6 c0             	movzx  eax,al
c001214a:	f7 d8                	neg    eax
c001214c:	83 d2 00             	adc    edx,0x0
c001214f:	83 c4 18             	add    esp,0x18
c0012152:	f7 da                	neg    edx
c0012154:	5b                   	pop    ebx
c0012155:	c3                   	ret    
c0012156:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001215b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012160:	83 c4 18             	add    esp,0x18
c0012163:	5b                   	pop    ebx
c0012164:	c3                   	ret    

c0012165 <SysSizeFromFilename(regs*)>:
c0012165:	55                   	push   ebp
c0012166:	57                   	push   edi
c0012167:	56                   	push   esi
c0012168:	53                   	push   ebx
c0012169:	81 ec 3c 01 00 00    	sub    esp,0x13c
c001216f:	8b 9c 24 50 01 00 00 	mov    ebx,DWORD PTR [esp+0x150]
c0012176:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0012179:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c001217c:	85 f6                	test   esi,esi
c001217e:	74 34                	je     c00121b4 <SysSizeFromFilename(regs*)+0x4f>
c0012180:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0012186:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012189:	83 f8 02             	cmp    eax,0x2
c001218c:	76 2d                	jbe    c00121bb <SysSizeFromFilename(regs*)+0x56>
c001218e:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0012193:	76 3b                	jbe    c00121d0 <SysSizeFromFilename(regs*)+0x6b>
c0012195:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0012198:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001219e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00121a5:	81 c4 3c 01 00 00    	add    esp,0x13c
c00121ab:	31 c0                	xor    eax,eax
c00121ad:	5b                   	pop    ebx
c00121ae:	31 d2                	xor    edx,edx
c00121b0:	5e                   	pop    esi
c00121b1:	5f                   	pop    edi
c00121b2:	5d                   	pop    ebp
c00121b3:	c3                   	ret    
c00121b4:	89 f8                	mov    eax,edi
c00121b6:	83 f8 02             	cmp    eax,0x2
c00121b9:	77 d3                	ja     c001218e <SysSizeFromFilename(regs*)+0x29>
c00121bb:	81 c4 3c 01 00 00    	add    esp,0x13c
c00121c1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00121c6:	5b                   	pop    ebx
c00121c7:	ba ff ff ff ff       	mov    edx,0xffffffff
c00121cc:	5e                   	pop    esi
c00121cd:	5f                   	pop    edi
c00121ce:	5d                   	pop    ebp
c00121cf:	c3                   	ret    
c00121d0:	83 ec 0c             	sub    esp,0xc
c00121d3:	68 14 01 00 00       	push   0x114
c00121d8:	e8 d9 58 ff ff       	call   c0007ab6 <malloc>
c00121dd:	6a 01                	push   0x1
c00121df:	89 c5                	mov    ebp,eax
c00121e1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00121e6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00121e9:	50                   	push   eax
c00121ea:	57                   	push   edi
c00121eb:	55                   	push   ebp
c00121ec:	e8 f3 98 ff ff       	call   c000bae4 <File::File(char const*, Process*, bool)>
c00121f1:	83 c4 1c             	add    esp,0x1c
c00121f4:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c00121f8:	50                   	push   eax
c00121f9:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00121fc:	52                   	push   edx
c00121fd:	55                   	push   ebp
c00121fe:	e8 df 9c ff ff       	call   c000bee2 <File::stat(unsigned long long*, bool*)>
c0012203:	83 c4 10             	add    esp,0x10
c0012206:	85 ed                	test   ebp,ebp
c0012208:	74 15                	je     c001221f <SysSizeFromFilename(regs*)+0xba>
c001220a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001220e:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0012211:	83 ec 0c             	sub    esp,0xc
c0012214:	55                   	push   ebp
c0012215:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0012218:	83 c4 10             	add    esp,0x10
c001221b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001221f:	85 c0                	test   eax,eax
c0012221:	75 98                	jne    c00121bb <SysSizeFromFilename(regs*)+0x56>
c0012223:	83 ec 08             	sub    esp,0x8
c0012226:	8d 44 24 20          	lea    eax,[esp+0x20]
c001222a:	50                   	push   eax
c001222b:	57                   	push   edi
c001222c:	e8 4b 8f ff ff       	call   c000b17c <KeDereferenceSymlink(char const*, char*)>
c0012231:	83 c4 10             	add    esp,0x10
c0012234:	83 f8 01             	cmp    eax,0x1
c0012237:	74 1a                	je     c0012253 <SysSizeFromFilename(regs*)+0xee>
c0012239:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001223e:	74 26                	je     c0012266 <SysSizeFromFilename(regs*)+0x101>
c0012240:	85 f6                	test   esi,esi
c0012242:	0f 84 5d ff ff ff    	je     c00121a5 <SysSizeFromFilename(regs*)+0x40>
c0012248:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c001224e:	e9 52 ff ff ff       	jmp    c00121a5 <SysSizeFromFilename(regs*)+0x40>
c0012253:	85 f6                	test   esi,esi
c0012255:	0f 84 4a ff ff ff    	je     c00121a5 <SysSizeFromFilename(regs*)+0x40>
c001225b:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c0012261:	e9 3f ff ff ff       	jmp    c00121a5 <SysSizeFromFilename(regs*)+0x40>
c0012266:	85 f6                	test   esi,esi
c0012268:	0f 84 37 ff ff ff    	je     c00121a5 <SysSizeFromFilename(regs*)+0x40>
c001226e:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0012274:	e9 2c ff ff ff       	jmp    c00121a5 <SysSizeFromFilename(regs*)+0x40>

c0012279 <SysSizeFromFilenameNoSymlink(regs*)>:
c0012279:	55                   	push   ebp
c001227a:	57                   	push   edi
c001227b:	56                   	push   esi
c001227c:	53                   	push   ebx
c001227d:	81 ec 5c 02 00 00    	sub    esp,0x25c
c0012283:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c001228a:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001228d:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0012290:	85 f6                	test   esi,esi
c0012292:	74 34                	je     c00122c8 <SysSizeFromFilenameNoSymlink(regs*)+0x4f>
c0012294:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c001229a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001229d:	83 f8 02             	cmp    eax,0x2
c00122a0:	76 2d                	jbe    c00122cf <SysSizeFromFilenameNoSymlink(regs*)+0x56>
c00122a2:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00122a7:	76 3b                	jbe    c00122e4 <SysSizeFromFilenameNoSymlink(regs*)+0x6b>
c00122a9:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00122ac:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00122b2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00122b9:	81 c4 5c 02 00 00    	add    esp,0x25c
c00122bf:	31 c0                	xor    eax,eax
c00122c1:	5b                   	pop    ebx
c00122c2:	31 d2                	xor    edx,edx
c00122c4:	5e                   	pop    esi
c00122c5:	5f                   	pop    edi
c00122c6:	5d                   	pop    ebp
c00122c7:	c3                   	ret    
c00122c8:	89 f8                	mov    eax,edi
c00122ca:	83 f8 02             	cmp    eax,0x2
c00122cd:	77 d3                	ja     c00122a2 <SysSizeFromFilenameNoSymlink(regs*)+0x29>
c00122cf:	81 c4 5c 02 00 00    	add    esp,0x25c
c00122d5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00122da:	5b                   	pop    ebx
c00122db:	ba ff ff ff ff       	mov    edx,0xffffffff
c00122e0:	5e                   	pop    esi
c00122e1:	5f                   	pop    edi
c00122e2:	5d                   	pop    ebp
c00122e3:	c3                   	ret    
c00122e4:	83 ec 0c             	sub    esp,0xc
c00122e7:	68 14 01 00 00       	push   0x114
c00122ec:	e8 c5 57 ff ff       	call   c0007ab6 <malloc>
c00122f1:	6a 00                	push   0x0
c00122f3:	89 c5                	mov    ebp,eax
c00122f5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00122fa:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c00122fd:	51                   	push   ecx
c00122fe:	57                   	push   edi
c00122ff:	55                   	push   ebp
c0012300:	e8 df 97 ff ff       	call   c000bae4 <File::File(char const*, Process*, bool)>
c0012305:	83 c4 1c             	add    esp,0x1c
c0012308:	8d 44 24 23          	lea    eax,[esp+0x23]
c001230c:	50                   	push   eax
c001230d:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0012310:	53                   	push   ebx
c0012311:	55                   	push   ebp
c0012312:	e8 cb 9b ff ff       	call   c000bee2 <File::stat(unsigned long long*, bool*)>
c0012317:	83 c4 10             	add    esp,0x10
c001231a:	85 ed                	test   ebp,ebp
c001231c:	74 15                	je     c0012333 <SysSizeFromFilenameNoSymlink(regs*)+0xba>
c001231e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012322:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0012325:	83 ec 0c             	sub    esp,0xc
c0012328:	55                   	push   ebp
c0012329:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001232c:	83 c4 10             	add    esp,0x10
c001232f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012333:	85 c0                	test   eax,eax
c0012335:	75 98                	jne    c00122cf <SysSizeFromFilenameNoSymlink(regs*)+0x56>
c0012337:	6a 00                	push   0x0
c0012339:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001233e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012341:	05 0c 01 00 00       	add    eax,0x10c
c0012346:	50                   	push   eax
c0012347:	57                   	push   edi
c0012348:	8d 9c 24 44 01 00 00 	lea    ebx,[esp+0x144]
c001234f:	53                   	push   ebx
c0012350:	e8 85 95 ff ff       	call   c000b8da <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0012355:	58                   	pop    eax
c0012356:	5a                   	pop    edx
c0012357:	8d 44 24 28          	lea    eax,[esp+0x28]
c001235b:	50                   	push   eax
c001235c:	53                   	push   ebx
c001235d:	e8 1a 8e ff ff       	call   c000b17c <KeDereferenceSymlink(char const*, char*)>
c0012362:	83 c4 10             	add    esp,0x10
c0012365:	83 f8 01             	cmp    eax,0x1
c0012368:	74 1a                	je     c0012384 <SysSizeFromFilenameNoSymlink(regs*)+0x10b>
c001236a:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001236f:	74 26                	je     c0012397 <SysSizeFromFilenameNoSymlink(regs*)+0x11e>
c0012371:	85 f6                	test   esi,esi
c0012373:	0f 84 40 ff ff ff    	je     c00122b9 <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c0012379:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c001237f:	e9 35 ff ff ff       	jmp    c00122b9 <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c0012384:	85 f6                	test   esi,esi
c0012386:	0f 84 2d ff ff ff    	je     c00122b9 <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c001238c:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c0012392:	e9 22 ff ff ff       	jmp    c00122b9 <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c0012397:	85 f6                	test   esi,esi
c0012399:	0f 84 1a ff ff ff    	je     c00122b9 <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c001239f:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c00123a5:	e9 0f ff ff ff       	jmp    c00122b9 <SysSizeFromFilenameNoSymlink(regs*)+0x40>

c00123aa <SysClose(regs*)>:
c00123aa:	53                   	push   ebx
c00123ab:	83 ec 08             	sub    esp,0x8
c00123ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00123b2:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00123b5:	83 f8 02             	cmp    eax,0x2
c00123b8:	76 41                	jbe    c00123fb <SysClose(regs*)+0x51>
c00123ba:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c00123c0:	83 fa 01             	cmp    edx,0x1
c00123c3:	76 2d                	jbe    c00123f2 <SysClose(regs*)+0x48>
c00123c5:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00123ca:	77 2f                	ja     c00123fb <SysClose(regs*)+0x51>
c00123cc:	83 ec 0c             	sub    esp,0xc
c00123cf:	50                   	push   eax
c00123d0:	e8 de 70 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c00123d5:	89 c3                	mov    ebx,eax
c00123d7:	89 04 24             	mov    DWORD PTR [esp],eax
c00123da:	e8 5f 98 ff ff       	call   c000bc3e <File::close()>
c00123df:	83 c4 10             	add    esp,0x10
c00123e2:	85 db                	test   ebx,ebx
c00123e4:	74 0c                	je     c00123f2 <SysClose(regs*)+0x48>
c00123e6:	83 ec 0c             	sub    esp,0xc
c00123e9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00123eb:	53                   	push   ebx
c00123ec:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00123ef:	83 c4 10             	add    esp,0x10
c00123f2:	31 c0                	xor    eax,eax
c00123f4:	31 d2                	xor    edx,edx
c00123f6:	83 c4 08             	add    esp,0x8
c00123f9:	5b                   	pop    ebx
c00123fa:	c3                   	ret    
c00123fb:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012400:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012405:	83 c4 08             	add    esp,0x8
c0012408:	5b                   	pop    ebx
c0012409:	c3                   	ret    

c001240a <SysOpenDir(regs*)>:
c001240a:	56                   	push   esi
c001240b:	53                   	push   ebx
c001240c:	83 ec 04             	sub    esp,0x4
c001240f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012413:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0012416:	85 c9                	test   ecx,ecx
c0012418:	74 5d                	je     c0012477 <SysOpenDir(regs*)+0x6d>
c001241a:	83 ec 0c             	sub    esp,0xc
c001241d:	68 14 01 00 00       	push   0x114
c0012422:	e8 8f 56 ff ff       	call   c0007ab6 <malloc>
c0012427:	83 c4 0c             	add    esp,0xc
c001242a:	89 c6                	mov    esi,eax
c001242c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012431:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012434:	50                   	push   eax
c0012435:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0012438:	52                   	push   edx
c0012439:	56                   	push   esi
c001243a:	e8 63 9c ff ff       	call   c000c0a2 <Directory::Directory(char const*, Process*)>
c001243f:	83 c4 10             	add    esp,0x10
c0012442:	85 f6                	test   esi,esi
c0012444:	74 31                	je     c0012477 <SysOpenDir(regs*)+0x6d>
c0012446:	83 ec 0c             	sub    esp,0xc
c0012449:	56                   	push   esi
c001244a:	e8 1b 9d ff ff       	call   c000c16a <Directory::open()>
c001244f:	83 c4 10             	add    esp,0x10
c0012452:	85 c0                	test   eax,eax
c0012454:	75 21                	jne    c0012477 <SysOpenDir(regs*)+0x6d>
c0012456:	83 ec 0c             	sub    esp,0xc
c0012459:	56                   	push   esi
c001245a:	e8 57 6d ff ff       	call   c00091b6 <UnixFile::getFileDescriptor()>
c001245f:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0012462:	83 c4 10             	add    esp,0x10
c0012465:	89 02                	mov    DWORD PTR [edx],eax
c0012467:	c1 f8 1f             	sar    eax,0x1f
c001246a:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001246d:	83 c4 04             	add    esp,0x4
c0012470:	31 c0                	xor    eax,eax
c0012472:	31 d2                	xor    edx,edx
c0012474:	5b                   	pop    ebx
c0012475:	5e                   	pop    esi
c0012476:	c3                   	ret    
c0012477:	83 c4 04             	add    esp,0x4
c001247a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001247f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012484:	5b                   	pop    ebx
c0012485:	5e                   	pop    esi
c0012486:	c3                   	ret    

c0012487 <SysMakeDir(regs*)>:
c0012487:	56                   	push   esi
c0012488:	53                   	push   ebx
c0012489:	83 ec 10             	sub    esp,0x10
c001248c:	68 14 01 00 00       	push   0x114
c0012491:	e8 20 56 ff ff       	call   c0007ab6 <malloc>
c0012496:	83 c4 0c             	add    esp,0xc
c0012499:	89 c3                	mov    ebx,eax
c001249b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00124a0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00124a3:	50                   	push   eax
c00124a4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00124a8:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c00124ab:	52                   	push   edx
c00124ac:	53                   	push   ebx
c00124ad:	e8 f0 9b ff ff       	call   c000c0a2 <Directory::Directory(char const*, Process*)>
c00124b2:	83 c4 10             	add    esp,0x10
c00124b5:	85 db                	test   ebx,ebx
c00124b7:	74 2c                	je     c00124e5 <SysMakeDir(regs*)+0x5e>
c00124b9:	83 ec 0c             	sub    esp,0xc
c00124bc:	53                   	push   ebx
c00124bd:	e8 88 9e ff ff       	call   c000c34a <Directory::create()>
c00124c2:	89 c6                	mov    esi,eax
c00124c4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00124c6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00124c9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00124cc:	83 c4 10             	add    esp,0x10
c00124cf:	31 c0                	xor    eax,eax
c00124d1:	85 f6                	test   esi,esi
c00124d3:	0f 95 c0             	setne  al
c00124d6:	31 d2                	xor    edx,edx
c00124d8:	f7 d8                	neg    eax
c00124da:	83 d2 00             	adc    edx,0x0
c00124dd:	83 c4 04             	add    esp,0x4
c00124e0:	f7 da                	neg    edx
c00124e2:	5b                   	pop    ebx
c00124e3:	5e                   	pop    esi
c00124e4:	c3                   	ret    
c00124e5:	83 c4 04             	add    esp,0x4
c00124e8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00124ed:	ba ff ff ff ff       	mov    edx,0xffffffff
c00124f2:	5b                   	pop    ebx
c00124f3:	5e                   	pop    esi
c00124f4:	c3                   	ret    

c00124f5 <SysCloseDir(regs*)>:
c00124f5:	53                   	push   ebx
c00124f6:	83 ec 08             	sub    esp,0x8
c00124f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00124fd:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0012500:	8d 50 fd             	lea    edx,[eax-0x3]
c0012503:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0012509:	77 2f                	ja     c001253a <SysCloseDir(regs*)+0x45>
c001250b:	83 ec 0c             	sub    esp,0xc
c001250e:	50                   	push   eax
c001250f:	e8 9f 6f ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0012514:	89 c3                	mov    ebx,eax
c0012516:	89 04 24             	mov    DWORD PTR [esp],eax
c0012519:	e8 a8 9c ff ff       	call   c000c1c6 <Directory::close()>
c001251e:	83 c4 10             	add    esp,0x10
c0012521:	85 db                	test   ebx,ebx
c0012523:	74 0c                	je     c0012531 <SysCloseDir(regs*)+0x3c>
c0012525:	83 ec 0c             	sub    esp,0xc
c0012528:	8b 03                	mov    eax,DWORD PTR [ebx]
c001252a:	53                   	push   ebx
c001252b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001252e:	83 c4 10             	add    esp,0x10
c0012531:	31 c0                	xor    eax,eax
c0012533:	31 d2                	xor    edx,edx
c0012535:	83 c4 08             	add    esp,0x8
c0012538:	5b                   	pop    ebx
c0012539:	c3                   	ret    
c001253a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001253f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012544:	83 c4 08             	add    esp,0x8
c0012547:	5b                   	pop    ebx
c0012548:	c3                   	ret    

c0012549 <SysWait(regs*)>:
c0012549:	83 ec 10             	sub    esp,0x10
c001254c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012550:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0012553:	52                   	push   edx
c0012554:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c0012557:	51                   	push   ecx
c0012558:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001255b:	50                   	push   eax
c001255c:	e8 03 3e 00 00       	call   c0016364 <waitTask(int, int*, int)>
c0012561:	83 c4 1c             	add    esp,0x1c
c0012564:	89 c2                	mov    edx,eax
c0012566:	c1 fa 1f             	sar    edx,0x1f
c0012569:	c3                   	ret    

c001256a <SysNotImpl(regs*)>:
c001256a:	83 ec 18             	sub    esp,0x18
c001256d:	68 86 25 02 c0       	push   0xc0022586
c0012572:	e8 1c f1 ff ff       	call   c0011693 <KePanic(char const*)>
c0012577:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001257c:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012581:	83 c4 1c             	add    esp,0x1c
c0012584:	c3                   	ret    

c0012585 <SysPanic(regs*)>:
c0012585:	83 ec 18             	sub    esp,0x18
c0012588:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001258c:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001258f:	50                   	push   eax
c0012590:	e8 fe f0 ff ff       	call   c0011693 <KePanic(char const*)>
c0012595:	b8 01 00 00 00       	mov    eax,0x1
c001259a:	31 d2                	xor    edx,edx
c001259c:	83 c4 1c             	add    esp,0x1c
c001259f:	c3                   	ret    

c00125a0 <SysRmdir(regs*)>:
c00125a0:	56                   	push   esi
c00125a1:	53                   	push   ebx
c00125a2:	83 ec 20             	sub    esp,0x20
c00125a5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00125a9:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c00125ac:	68 14 01 00 00       	push   0x114
c00125b1:	e8 00 55 ff ff       	call   c0007ab6 <malloc>
c00125b6:	6a 00                	push   0x0
c00125b8:	89 c3                	mov    ebx,eax
c00125ba:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00125bf:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00125c2:	50                   	push   eax
c00125c3:	56                   	push   esi
c00125c4:	53                   	push   ebx
c00125c5:	e8 1a 95 ff ff       	call   c000bae4 <File::File(char const*, Process*, bool)>
c00125ca:	83 c4 14             	add    esp,0x14
c00125cd:	53                   	push   ebx
c00125ce:	e8 db 97 ff ff       	call   c000bdae <File::unlink()>
c00125d3:	83 c4 10             	add    esp,0x10
c00125d6:	85 db                	test   ebx,ebx
c00125d8:	74 14                	je     c00125ee <SysRmdir(regs*)+0x4e>
c00125da:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00125de:	8b 13                	mov    edx,DWORD PTR [ebx]
c00125e0:	83 ec 0c             	sub    esp,0xc
c00125e3:	53                   	push   ebx
c00125e4:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00125e7:	83 c4 10             	add    esp,0x10
c00125ea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00125ee:	85 c0                	test   eax,eax
c00125f0:	0f 95 c0             	setne  al
c00125f3:	31 d2                	xor    edx,edx
c00125f5:	0f b6 c0             	movzx  eax,al
c00125f8:	f7 d8                	neg    eax
c00125fa:	83 d2 00             	adc    edx,0x0
c00125fd:	83 c4 14             	add    esp,0x14
c0012600:	f7 da                	neg    edx
c0012602:	5b                   	pop    ebx
c0012603:	5e                   	pop    esi
c0012604:	c3                   	ret    

c0012605 <SysUnlink(regs*)>:
c0012605:	56                   	push   esi
c0012606:	53                   	push   ebx
c0012607:	83 ec 20             	sub    esp,0x20
c001260a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001260e:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0012611:	68 14 01 00 00       	push   0x114
c0012616:	e8 9b 54 ff ff       	call   c0007ab6 <malloc>
c001261b:	6a 00                	push   0x0
c001261d:	89 c3                	mov    ebx,eax
c001261f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012624:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012627:	50                   	push   eax
c0012628:	56                   	push   esi
c0012629:	53                   	push   ebx
c001262a:	e8 b5 94 ff ff       	call   c000bae4 <File::File(char const*, Process*, bool)>
c001262f:	83 c4 14             	add    esp,0x14
c0012632:	53                   	push   ebx
c0012633:	e8 76 97 ff ff       	call   c000bdae <File::unlink()>
c0012638:	83 c4 10             	add    esp,0x10
c001263b:	85 db                	test   ebx,ebx
c001263d:	74 14                	je     c0012653 <SysUnlink(regs*)+0x4e>
c001263f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012643:	8b 13                	mov    edx,DWORD PTR [ebx]
c0012645:	83 ec 0c             	sub    esp,0xc
c0012648:	53                   	push   ebx
c0012649:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001264c:	83 c4 10             	add    esp,0x10
c001264f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012653:	85 c0                	test   eax,eax
c0012655:	0f 95 c0             	setne  al
c0012658:	31 d2                	xor    edx,edx
c001265a:	0f b6 c0             	movzx  eax,al
c001265d:	f7 d8                	neg    eax
c001265f:	83 d2 00             	adc    edx,0x0
c0012662:	83 c4 14             	add    esp,0x14
c0012665:	f7 da                	neg    edx
c0012667:	5b                   	pop    ebx
c0012668:	5e                   	pop    esi
c0012669:	c3                   	ret    

c001266a <SysGetArgv(regs*)>:
c001266a:	83 ec 0c             	sub    esp,0xc
c001266d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012671:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0012674:	85 c0                	test   eax,eax
c0012676:	78 2c                	js     c00126a4 <SysGetArgv(regs*)+0x3a>
c0012678:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001267e:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0012681:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c0012687:	7d 1b                	jge    c00126a4 <SysGetArgv(regs*)+0x3a>
c0012689:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c0012690:	85 c0                	test   eax,eax
c0012692:	74 18                	je     c00126ac <SysGetArgv(regs*)+0x42>
c0012694:	83 ec 08             	sub    esp,0x8
c0012697:	50                   	push   eax
c0012698:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c001269b:	50                   	push   eax
c001269c:	e8 9f df fe ff       	call   c0000640 <strcpy>
c00126a1:	83 c4 10             	add    esp,0x10
c00126a4:	31 c0                	xor    eax,eax
c00126a6:	31 d2                	xor    edx,edx
c00126a8:	83 c4 0c             	add    esp,0xc
c00126ab:	c3                   	ret    
c00126ac:	b8 01 00 00 00       	mov    eax,0x1
c00126b1:	31 d2                	xor    edx,edx
c00126b3:	83 c4 0c             	add    esp,0xc
c00126b6:	c3                   	ret    

c00126b7 <SysUSleep(regs*)>:
c00126b7:	83 ec 1c             	sub    esp,0x1c
c00126ba:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00126be:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c00126c1:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c00126c4:	6a 00                	push   0x0
c00126c6:	6a 64                	push   0x64
c00126c8:	52                   	push   edx
c00126c9:	50                   	push   eax
c00126ca:	e8 c1 d0 00 00       	call   c001f790 <__udivdi3>
c00126cf:	83 c4 14             	add    esp,0x14
c00126d2:	50                   	push   eax
c00126d3:	e8 70 3d 00 00       	call   c0016448 <milliTenthSleep(unsigned int)>
c00126d8:	31 c0                	xor    eax,eax
c00126da:	31 d2                	xor    edx,edx
c00126dc:	83 c4 1c             	add    esp,0x1c
c00126df:	c3                   	ret    

c00126e0 <SysSpawn(regs*)>:
c00126e0:	56                   	push   esi
c00126e1:	53                   	push   ebx
c00126e2:	83 ec 04             	sub    esp,0x4
c00126e5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00126e9:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00126ec:	85 f6                	test   esi,esi
c00126ee:	75 0a                	jne    c00126fa <SysSpawn(regs*)+0x1a>
c00126f0:	83 c4 04             	add    esp,0x4
c00126f3:	31 c0                	xor    eax,eax
c00126f5:	31 d2                	xor    edx,edx
c00126f7:	5b                   	pop    ebx
c00126f8:	5e                   	pop    esi
c00126f9:	c3                   	ret    
c00126fa:	83 ec 0c             	sub    esp,0xc
c00126fd:	68 24 07 00 00       	push   0x724
c0012702:	e8 af 53 ff ff       	call   c0007ab6 <malloc>
c0012707:	83 c4 10             	add    esp,0x10
c001270a:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001270d:	89 c6                	mov    esi,eax
c001270f:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0012712:	85 c9                	test   ecx,ecx
c0012714:	75 39                	jne    c001274f <SysSpawn(regs*)+0x6f>
c0012716:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001271b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001271e:	52                   	push   edx
c001271f:	50                   	push   eax
c0012720:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012723:	50                   	push   eax
c0012724:	56                   	push   esi
c0012725:	e8 6e 33 00 00       	call   c0015a98 <Process::Process(char const*, Process*, char**)>
c001272a:	83 c4 10             	add    esp,0x10
c001272d:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c0012734:	75 ba                	jne    c00126f0 <SysSpawn(regs*)+0x10>
c0012736:	83 ec 0c             	sub    esp,0xc
c0012739:	56                   	push   esi
c001273a:	e8 95 38 00 00       	call   c0015fd4 <Process::createUserThread()>
c001273f:	8b 06                	mov    eax,DWORD PTR [esi]
c0012741:	83 c4 10             	add    esp,0x10
c0012744:	89 c2                	mov    edx,eax
c0012746:	83 c4 04             	add    esp,0x4
c0012749:	c1 fa 1f             	sar    edx,0x1f
c001274c:	5b                   	pop    ebx
c001274d:	5e                   	pop    esi
c001274e:	c3                   	ret    
c001274f:	31 c0                	xor    eax,eax
c0012751:	eb cb                	jmp    c001271e <SysSpawn(regs*)+0x3e>

c0012753 <SysGetEnv(regs*)>:
c0012753:	57                   	push   edi
c0012754:	56                   	push   esi
c0012755:	53                   	push   ebx
c0012756:	83 ec 1c             	sub    esp,0x1c
c0012759:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001275d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012762:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0012765:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0012768:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c001276b:	51                   	push   ecx
c001276c:	e8 da ed ff ff       	call   c001154b <KeGetProcessTotalEnvCount(Process*)>
c0012771:	83 c4 10             	add    esp,0x10
c0012774:	39 c7                	cmp    edi,eax
c0012776:	7c 14                	jl     c001278c <SysGetEnv(regs*)+0x39>
c0012778:	85 f6                	test   esi,esi
c001277a:	75 0b                	jne    c0012787 <SysGetEnv(regs*)+0x34>
c001277c:	83 c4 10             	add    esp,0x10
c001277f:	31 c0                	xor    eax,eax
c0012781:	5b                   	pop    ebx
c0012782:	31 d2                	xor    edx,edx
c0012784:	5e                   	pop    esi
c0012785:	5f                   	pop    edi
c0012786:	c3                   	ret    
c0012787:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001278a:	eb f0                	jmp    c001277c <SysGetEnv(regs*)+0x29>
c001278c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012790:	83 ec 04             	sub    esp,0x4
c0012793:	57                   	push   edi
c0012794:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001279a:	8b 7a 3c             	mov    edi,DWORD PTR [edx+0x3c]
c001279d:	57                   	push   edi
c001279e:	50                   	push   eax
c001279f:	e8 c7 ed ff ff       	call   c001156b <KeGetProcessEnvPair(Process*, int)>
c00127a4:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00127a7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00127ab:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00127af:	83 c4 0c             	add    esp,0xc
c00127b2:	85 d2                	test   edx,edx
c00127b4:	75 23                	jne    c00127d9 <SysGetEnv(regs*)+0x86>
c00127b6:	83 ec 0c             	sub    esp,0xc
c00127b9:	50                   	push   eax
c00127ba:	e8 b1 dd fe ff       	call   c0000570 <strlen>
c00127bf:	89 3c 24             	mov    DWORD PTR [esp],edi
c00127c2:	89 c3                	mov    ebx,eax
c00127c4:	e8 a7 dd fe ff       	call   c0000570 <strlen>
c00127c9:	83 c4 10             	add    esp,0x10
c00127cc:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c00127d0:	83 c4 10             	add    esp,0x10
c00127d3:	31 d2                	xor    edx,edx
c00127d5:	5b                   	pop    ebx
c00127d6:	5e                   	pop    esi
c00127d7:	5f                   	pop    edi
c00127d8:	c3                   	ret    
c00127d9:	83 ec 08             	sub    esp,0x8
c00127dc:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00127df:	50                   	push   eax
c00127e0:	56                   	push   esi
c00127e1:	e8 5a de fe ff       	call   c0000640 <strcpy>
c00127e6:	58                   	pop    eax
c00127e7:	5a                   	pop    edx
c00127e8:	68 a0 25 02 c0       	push   0xc00225a0
c00127ed:	56                   	push   esi
c00127ee:	e8 4d e0 fe ff       	call   c0000840 <strcat>
c00127f3:	59                   	pop    ecx
c00127f4:	5b                   	pop    ebx
c00127f5:	57                   	push   edi
c00127f6:	56                   	push   esi
c00127f7:	e8 44 e0 fe ff       	call   c0000840 <strcat>
c00127fc:	83 c4 10             	add    esp,0x10
c00127ff:	e9 78 ff ff ff       	jmp    c001277c <SysGetEnv(regs*)+0x29>

c0012804 <SysSetFatAttrib(regs*)>:
c0012804:	57                   	push   edi
c0012805:	56                   	push   esi
c0012806:	53                   	push   ebx
c0012807:	83 ec 1c             	sub    esp,0x1c
c001280a:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001280e:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0012811:	68 14 01 00 00       	push   0x114
c0012816:	e8 9b 52 ff ff       	call   c0007ab6 <malloc>
c001281b:	83 c4 0c             	add    esp,0xc
c001281e:	89 c3                	mov    ebx,eax
c0012820:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012825:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012828:	50                   	push   eax
c0012829:	57                   	push   edi
c001282a:	53                   	push   ebx
c001282b:	e8 92 93 ff ff       	call   c000bbc2 <File::File(char const*, Process*)>
c0012830:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0012833:	83 c4 0c             	add    esp,0xc
c0012836:	0f b6 d4             	movzx  edx,ah
c0012839:	0f b6 c0             	movzx  eax,al
c001283c:	52                   	push   edx
c001283d:	50                   	push   eax
c001283e:	53                   	push   ebx
c001283f:	e8 04 96 ff ff       	call   c000be48 <File::chfatattr(unsigned char, unsigned char)>
c0012844:	83 c4 10             	add    esp,0x10
c0012847:	85 db                	test   ebx,ebx
c0012849:	74 14                	je     c001285f <SysSetFatAttrib(regs*)+0x5b>
c001284b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001284f:	8b 13                	mov    edx,DWORD PTR [ebx]
c0012851:	83 ec 0c             	sub    esp,0xc
c0012854:	53                   	push   ebx
c0012855:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0012858:	83 c4 10             	add    esp,0x10
c001285b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001285f:	85 c0                	test   eax,eax
c0012861:	0f 95 c0             	setne  al
c0012864:	31 d2                	xor    edx,edx
c0012866:	0f b6 c0             	movzx  eax,al
c0012869:	f7 d8                	neg    eax
c001286b:	83 d2 00             	adc    edx,0x0
c001286e:	83 c4 10             	add    esp,0x10
c0012871:	f7 da                	neg    edx
c0012873:	5b                   	pop    ebx
c0012874:	5e                   	pop    esi
c0012875:	5f                   	pop    edi
c0012876:	c3                   	ret    

c0012877 <SysPipe(regs*)>:
c0012877:	57                   	push   edi
c0012878:	56                   	push   esi
c0012879:	53                   	push   ebx
c001287a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001287e:	83 ec 0c             	sub    esp,0xc
c0012881:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0012884:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0012887:	6a 20                	push   0x20
c0012889:	e8 28 52 ff ff       	call   c0007ab6 <malloc>
c001288e:	89 c3                	mov    ebx,eax
c0012890:	58                   	pop    eax
c0012891:	5a                   	pop    edx
c0012892:	68 00 50 00 00       	push   0x5000
c0012897:	53                   	push   ebx
c0012898:	e8 8b 5b ff ff       	call   c0008428 <Pipe::Pipe(int)>
c001289d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00128a0:	e8 11 69 ff ff       	call   c00091b6 <UnixFile::getFileDescriptor()>
c00128a5:	89 07                	mov    DWORD PTR [edi],eax
c00128a7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00128aa:	e8 07 69 ff ff       	call   c00091b6 <UnixFile::getFileDescriptor()>
c00128af:	83 c4 10             	add    esp,0x10
c00128b2:	89 06                	mov    DWORD PTR [esi],eax
c00128b4:	31 d2                	xor    edx,edx
c00128b6:	5b                   	pop    ebx
c00128b7:	31 c0                	xor    eax,eax
c00128b9:	5e                   	pop    esi
c00128ba:	5f                   	pop    edi
c00128bb:	c3                   	ret    

c00128bc <SysGetUnixTime(regs*)>:
c00128bc:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c00128c1:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00128c7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00128cb:	e9 be 9c ff ff       	jmp    c000c58e <Clock::timeInSecondsLocal()>

c00128d0 <string_ends_with(char const*, char const*)>:
c00128d0:	57                   	push   edi
c00128d1:	56                   	push   esi
c00128d2:	53                   	push   ebx
c00128d3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00128d7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00128db:	83 ec 0c             	sub    esp,0xc
c00128de:	53                   	push   ebx
c00128df:	e8 8c dc fe ff       	call   c0000570 <strlen>
c00128e4:	89 3c 24             	mov    DWORD PTR [esp],edi
c00128e7:	89 c6                	mov    esi,eax
c00128e9:	e8 82 dc fe ff       	call   c0000570 <strlen>
c00128ee:	83 c4 10             	add    esp,0x10
c00128f1:	39 c6                	cmp    esi,eax
c00128f3:	7d 06                	jge    c00128fb <string_ends_with(char const*, char const*)+0x2b>
c00128f5:	5b                   	pop    ebx
c00128f6:	31 c0                	xor    eax,eax
c00128f8:	5e                   	pop    esi
c00128f9:	5f                   	pop    edi
c00128fa:	c3                   	ret    
c00128fb:	83 ec 08             	sub    esp,0x8
c00128fe:	29 c6                	sub    esi,eax
c0012900:	57                   	push   edi
c0012901:	01 f3                	add    ebx,esi
c0012903:	53                   	push   ebx
c0012904:	e8 47 de fe ff       	call   c0000750 <strcmp>
c0012909:	83 c4 10             	add    esp,0x10
c001290c:	85 c0                	test   eax,eax
c001290e:	5b                   	pop    ebx
c001290f:	0f 94 c0             	sete   al
c0012912:	5e                   	pop    esi
c0012913:	0f b6 c0             	movzx  eax,al
c0012916:	5f                   	pop    edi
c0012917:	c3                   	ret    

c0012918 <SysOpen(regs*)>:
c0012918:	56                   	push   esi
c0012919:	53                   	push   ebx
c001291a:	81 ec 04 01 00 00    	sub    esp,0x104
c0012920:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0012927:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001292a:	85 c0                	test   eax,eax
c001292c:	0f 84 bc 01 00 00    	je     c0012aee <SysOpen(regs*)+0x1d6>
c0012932:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012935:	85 c0                	test   eax,eax
c0012937:	0f 84 b1 01 00 00    	je     c0012aee <SysOpen(regs*)+0x1d6>
c001293d:	6a 00                	push   0x0
c001293f:	68 a2 25 02 c0       	push   0xc00225a2
c0012944:	50                   	push   eax
c0012945:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0012949:	56                   	push   esi
c001294a:	e8 8b 8f ff ff       	call   c000b8da <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c001294f:	89 34 24             	mov    DWORD PTR [esp],esi
c0012952:	e8 19 dc fe ff       	call   c0000570 <strlen>
c0012957:	83 c4 10             	add    esp,0x10
c001295a:	83 e8 01             	sub    eax,0x1
c001295d:	74 21                	je     c0012980 <SysOpen(regs*)+0x68>
c001295f:	0f be 14 04          	movsx  edx,BYTE PTR [esp+eax*1]
c0012963:	eb 12                	jmp    c0012977 <SysOpen(regs*)+0x5f>
c0012965:	83 fa 3a             	cmp    edx,0x3a
c0012968:	74 12                	je     c001297c <SysOpen(regs*)+0x64>
c001296a:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001296e:	83 e8 01             	sub    eax,0x1
c0012971:	74 0d                	je     c0012980 <SysOpen(regs*)+0x68>
c0012973:	0f be 14 06          	movsx  edx,BYTE PTR [esi+eax*1]
c0012977:	83 fa 2e             	cmp    edx,0x2e
c001297a:	75 e9                	jne    c0012965 <SysOpen(regs*)+0x4d>
c001297c:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c0012980:	83 ec 08             	sub    esp,0x8
c0012983:	68 a6 25 02 c0       	push   0xc00225a6
c0012988:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001298b:	50                   	push   eax
c001298c:	e8 3f ff ff ff       	call   c00128d0 <string_ends_with(char const*, char const*)>
c0012991:	83 c4 10             	add    esp,0x10
c0012994:	85 c0                	test   eax,eax
c0012996:	74 1d                	je     c00129b5 <SysOpen(regs*)+0x9d>
c0012998:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001299b:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c00129a1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00129a8:	81 c4 04 01 00 00    	add    esp,0x104
c00129ae:	31 c0                	xor    eax,eax
c00129b0:	31 d2                	xor    edx,edx
c00129b2:	5b                   	pop    ebx
c00129b3:	5e                   	pop    esi
c00129b4:	c3                   	ret    
c00129b5:	83 ec 08             	sub    esp,0x8
c00129b8:	68 ab 25 02 c0       	push   0xc00225ab
c00129bd:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00129c0:	50                   	push   eax
c00129c1:	e8 0a ff ff ff       	call   c00128d0 <string_ends_with(char const*, char const*)>
c00129c6:	83 c4 10             	add    esp,0x10
c00129c9:	85 c0                	test   eax,eax
c00129cb:	75 cb                	jne    c0012998 <SysOpen(regs*)+0x80>
c00129cd:	83 ec 08             	sub    esp,0x8
c00129d0:	68 a7 25 02 c0       	push   0xc00225a7
c00129d5:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00129d8:	50                   	push   eax
c00129d9:	e8 72 dd fe ff       	call   c0000750 <strcmp>
c00129de:	83 c4 10             	add    esp,0x10
c00129e1:	85 c0                	test   eax,eax
c00129e3:	74 b3                	je     c0012998 <SysOpen(regs*)+0x80>
c00129e5:	83 ec 08             	sub    esp,0x8
c00129e8:	68 a6 25 02 c0       	push   0xc00225a6
c00129ed:	56                   	push   esi
c00129ee:	e8 dd fe ff ff       	call   c00128d0 <string_ends_with(char const*, char const*)>
c00129f3:	83 c4 10             	add    esp,0x10
c00129f6:	85 c0                	test   eax,eax
c00129f8:	75 9e                	jne    c0012998 <SysOpen(regs*)+0x80>
c00129fa:	83 ec 08             	sub    esp,0x8
c00129fd:	68 b0 25 02 c0       	push   0xc00225b0
c0012a02:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012a05:	50                   	push   eax
c0012a06:	e8 c5 fe ff ff       	call   c00128d0 <string_ends_with(char const*, char const*)>
c0012a0b:	83 c4 10             	add    esp,0x10
c0012a0e:	85 c0                	test   eax,eax
c0012a10:	0f 85 eb 00 00 00    	jne    c0012b01 <SysOpen(regs*)+0x1e9>
c0012a16:	83 ec 08             	sub    esp,0x8
c0012a19:	68 b5 25 02 c0       	push   0xc00225b5
c0012a1e:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012a21:	50                   	push   eax
c0012a22:	e8 a9 fe ff ff       	call   c00128d0 <string_ends_with(char const*, char const*)>
c0012a27:	83 c4 10             	add    esp,0x10
c0012a2a:	85 c0                	test   eax,eax
c0012a2c:	0f 85 cf 00 00 00    	jne    c0012b01 <SysOpen(regs*)+0x1e9>
c0012a32:	83 ec 08             	sub    esp,0x8
c0012a35:	68 b1 25 02 c0       	push   0xc00225b1
c0012a3a:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0012a3d:	51                   	push   ecx
c0012a3e:	e8 0d dd fe ff       	call   c0000750 <strcmp>
c0012a43:	83 c4 10             	add    esp,0x10
c0012a46:	85 c0                	test   eax,eax
c0012a48:	0f 84 b3 00 00 00    	je     c0012b01 <SysOpen(regs*)+0x1e9>
c0012a4e:	83 ec 08             	sub    esp,0x8
c0012a51:	68 b0 25 02 c0       	push   0xc00225b0
c0012a56:	56                   	push   esi
c0012a57:	e8 74 fe ff ff       	call   c00128d0 <string_ends_with(char const*, char const*)>
c0012a5c:	83 c4 10             	add    esp,0x10
c0012a5f:	85 c0                	test   eax,eax
c0012a61:	0f 85 9a 00 00 00    	jne    c0012b01 <SysOpen(regs*)+0x1e9>
c0012a67:	83 ec 0c             	sub    esp,0xc
c0012a6a:	68 14 01 00 00       	push   0x114
c0012a6f:	e8 42 50 ff ff       	call   c0007ab6 <malloc>
c0012a74:	83 c4 0c             	add    esp,0xc
c0012a77:	89 c6                	mov    esi,eax
c0012a79:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012a7e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012a81:	50                   	push   eax
c0012a82:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0012a85:	52                   	push   edx
c0012a86:	56                   	push   esi
c0012a87:	e8 36 91 ff ff       	call   c000bbc2 <File::File(char const*, Process*)>
c0012a8c:	83 c4 10             	add    esp,0x10
c0012a8f:	85 f6                	test   esi,esi
c0012a91:	74 5b                	je     c0012aee <SysOpen(regs*)+0x1d6>
c0012a93:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0012a96:	0f b6 c2             	movzx  eax,dl
c0012a99:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0012a9c:	89 d0                	mov    eax,edx
c0012a9e:	83 e0 01             	and    eax,0x1
c0012aa1:	f6 c2 02             	test   dl,0x2
c0012aa4:	74 03                	je     c0012aa9 <SysOpen(regs*)+0x191>
c0012aa6:	83 c8 02             	or     eax,0x2
c0012aa9:	f6 c2 04             	test   dl,0x4
c0012aac:	74 03                	je     c0012ab1 <SysOpen(regs*)+0x199>
c0012aae:	83 c8 04             	or     eax,0x4
c0012ab1:	f6 c2 08             	test   dl,0x8
c0012ab4:	74 03                	je     c0012ab9 <SysOpen(regs*)+0x1a1>
c0012ab6:	83 c8 0a             	or     eax,0xa
c0012ab9:	80 e2 10             	and    dl,0x10
c0012abc:	74 03                	je     c0012ac1 <SysOpen(regs*)+0x1a9>
c0012abe:	83 c8 12             	or     eax,0x12
c0012ac1:	83 ec 08             	sub    esp,0x8
c0012ac4:	50                   	push   eax
c0012ac5:	56                   	push   esi
c0012ac6:	e8 15 91 ff ff       	call   c000bbe0 <File::open(FileOpenMode)>
c0012acb:	83 c4 10             	add    esp,0x10
c0012ace:	85 c0                	test   eax,eax
c0012ad0:	75 1c                	jne    c0012aee <SysOpen(regs*)+0x1d6>
c0012ad2:	83 ec 0c             	sub    esp,0xc
c0012ad5:	56                   	push   esi
c0012ad6:	e8 db 66 ff ff       	call   c00091b6 <UnixFile::getFileDescriptor()>
c0012adb:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0012ade:	83 c4 10             	add    esp,0x10
c0012ae1:	89 02                	mov    DWORD PTR [edx],eax
c0012ae3:	c1 f8 1f             	sar    eax,0x1f
c0012ae6:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0012ae9:	e9 ba fe ff ff       	jmp    c00129a8 <SysOpen(regs*)+0x90>
c0012aee:	81 c4 04 01 00 00    	add    esp,0x104
c0012af4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012af9:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012afe:	5b                   	pop    ebx
c0012aff:	5e                   	pop    esi
c0012b00:	c3                   	ret    
c0012b01:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012b04:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0012b0a:	e9 92 fe ff ff       	jmp    c00129a1 <SysOpen(regs*)+0x89>

c0012b0f <KeSystemCall(regs*, void*)>:
c0012b0f:	53                   	push   ebx
c0012b10:	83 ec 08             	sub    esp,0x8
c0012b13:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012b17:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0012b1a:	83 f8 3e             	cmp    eax,0x3e
c0012b1d:	77 16                	ja     c0012b35 <KeSystemCall(regs*, void*)+0x26>
c0012b1f:	8b 14 85 c0 3d 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdc240]
c0012b26:	85 d2                	test   edx,edx
c0012b28:	74 0b                	je     c0012b35 <KeSystemCall(regs*, void*)+0x26>
c0012b2a:	83 ec 0c             	sub    esp,0xc
c0012b2d:	53                   	push   ebx
c0012b2e:	ff d2                	call   edx
c0012b30:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0012b33:	eb 0d                	jmp    c0012b42 <KeSystemCall(regs*, void*)+0x33>
c0012b35:	52                   	push   edx
c0012b36:	52                   	push   edx
c0012b37:	50                   	push   eax
c0012b38:	68 ba 25 02 c0       	push   0xc00225ba
c0012b3d:	e8 03 7e ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0012b42:	83 c4 10             	add    esp,0x10
c0012b45:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0012b4a:	31 d2                	xor    edx,edx
c0012b4c:	83 c4 08             	add    esp,0x8
c0012b4f:	5b                   	pop    ebx
c0012b50:	c3                   	ret    
c0012b51:	66 90                	xchg   ax,ax
c0012b53:	90                   	nop

c0012b54 <KeSwitchEndian16(unsigned short)>:
c0012b54:	83 ec 04             	sub    esp,0x4
c0012b57:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012b5b:	66 89 04 24          	mov    WORD PTR [esp],ax
c0012b5f:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0012b63:	c1 f8 08             	sar    eax,0x8
c0012b66:	89 c2                	mov    edx,eax
c0012b68:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0012b6c:	c1 e0 08             	shl    eax,0x8
c0012b6f:	09 d0                	or     eax,edx
c0012b71:	83 c4 04             	add    esp,0x4
c0012b74:	c3                   	ret    
c0012b75:	8d 76 00             	lea    esi,[esi+0x0]

c0012b78 <KeSwitchEndian32(unsigned int)>:
c0012b78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012b7c:	c1 e8 18             	shr    eax,0x18
c0012b7f:	89 c2                	mov    edx,eax
c0012b81:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012b85:	c1 e0 08             	shl    eax,0x8
c0012b88:	25 00 00 ff 00       	and    eax,0xff0000
c0012b8d:	09 c2                	or     edx,eax
c0012b8f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012b93:	c1 e8 08             	shr    eax,0x8
c0012b96:	25 00 ff 00 00       	and    eax,0xff00
c0012b9b:	09 c2                	or     edx,eax
c0012b9d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012ba1:	c1 e0 18             	shl    eax,0x18
c0012ba4:	09 d0                	or     eax,edx
c0012ba6:	c3                   	ret    
c0012ba7:	90                   	nop

c0012ba8 <EthernetCRC32(unsigned char*, int)>:
c0012ba8:	83 ec 10             	sub    esp,0x10
c0012bab:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0012bb0:	75 0a                	jne    c0012bbc <EthernetCRC32(unsigned char*, int)+0x14>
c0012bb2:	b8 00 00 00 00       	mov    eax,0x0
c0012bb7:	e9 8c 00 00 00       	jmp    c0012c48 <EthernetCRC32(unsigned char*, int)+0xa0>
c0012bbc:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0012bc1:	7f 09                	jg     c0012bcc <EthernetCRC32(unsigned char*, int)+0x24>
c0012bc3:	b8 00 00 00 00       	mov    eax,0x0
c0012bc8:	eb 7e                	jmp    c0012c48 <EthernetCRC32(unsigned char*, int)+0xa0>
c0012bca:	66 90                	xchg   ax,ax
c0012bcc:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c0012bd4:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0012bdc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012be0:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0012be4:	7d 5a                	jge    c0012c40 <EthernetCRC32(unsigned char*, int)+0x98>
c0012be6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012bea:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012bee:	01 d0                	add    eax,edx
c0012bf0:	8a 00                	mov    al,BYTE PTR [eax]
c0012bf2:	0f b6 c0             	movzx  eax,al
c0012bf5:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c0012bf9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0012c01:	8d 76 00             	lea    esi,[esi+0x0]
c0012c04:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c0012c09:	7f 2d                	jg     c0012c38 <EthernetCRC32(unsigned char*, int)+0x90>
c0012c0b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012c0f:	83 e0 01             	and    eax,0x1
c0012c12:	74 10                	je     c0012c24 <EthernetCRC32(unsigned char*, int)+0x7c>
c0012c14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012c18:	d1 e8                	shr    eax,1
c0012c1a:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0012c1f:	eb 0b                	jmp    c0012c2c <EthernetCRC32(unsigned char*, int)+0x84>
c0012c21:	8d 76 00             	lea    esi,[esi+0x0]
c0012c24:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012c28:	d1 e8                	shr    eax,1
c0012c2a:	66 90                	xchg   ax,ax
c0012c2c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012c30:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0012c35:	eb cd                	jmp    c0012c04 <EthernetCRC32(unsigned char*, int)+0x5c>
c0012c37:	90                   	nop
c0012c38:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c0012c3d:	eb 9d                	jmp    c0012bdc <EthernetCRC32(unsigned char*, int)+0x34>
c0012c3f:	90                   	nop
c0012c40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012c44:	f7 d0                	not    eax
c0012c46:	66 90                	xchg   ax,ax
c0012c48:	83 c4 10             	add    esp,0x10
c0012c4b:	c3                   	ret    

c0012c4c <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)>:
c0012c4c:	83 ec 2c             	sub    esp,0x2c
c0012c4f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012c53:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0012c58:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012c5c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012c60:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012c64:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012c67:	0f b7 c0             	movzx  eax,ax
c0012c6a:	3d 06 08 00 00       	cmp    eax,0x806
c0012c6f:	75 13                	jne    c0012c84 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x38>
c0012c71:	83 ec 0c             	sub    esp,0xc
c0012c74:	68 ce 25 02 c0       	push   0xc00225ce
c0012c79:	e8 c7 7c ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0012c7e:	83 c4 10             	add    esp,0x10
c0012c81:	eb 25                	jmp    c0012ca8 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c0012c83:	90                   	nop
c0012c84:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012c88:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012c8b:	0f b7 c0             	movzx  eax,ax
c0012c8e:	3d 00 08 00 00       	cmp    eax,0x800
c0012c93:	75 13                	jne    c0012ca8 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c0012c95:	83 ec 0c             	sub    esp,0xc
c0012c98:	68 e4 25 02 c0       	push   0xc00225e4
c0012c9d:	e8 a3 7c ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0012ca2:	83 c4 10             	add    esp,0x10
c0012ca5:	8d 76 00             	lea    esi,[esi+0x0]
c0012ca8:	90                   	nop
c0012ca9:	83 c4 2c             	add    esp,0x2c
c0012cac:	c3                   	ret    

c0012cad <CmOpen(char const*)>:
c0012cad:	57                   	push   edi
c0012cae:	56                   	push   esi
c0012caf:	53                   	push   ebx
c0012cb0:	83 ec 1c             	sub    esp,0x1c
c0012cb3:	6a 30                	push   0x30
c0012cb5:	e8 fc 4d ff ff       	call   c0007ab6 <malloc>
c0012cba:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0012cc1:	89 c3                	mov    ebx,eax
c0012cc3:	e8 ee 4d ff ff       	call   c0007ab6 <malloc>
c0012cc8:	83 c4 0c             	add    esp,0xc
c0012ccb:	89 c6                	mov    esi,eax
c0012ccd:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c0012cd3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0012cd7:	50                   	push   eax
c0012cd8:	e8 e5 8e ff ff       	call   c000bbc2 <File::File(char const*, Process*)>
c0012cdd:	83 c4 0c             	add    esp,0xc
c0012ce0:	89 33                	mov    DWORD PTR [ebx],esi
c0012ce2:	8d 44 24 07          	lea    eax,[esp+0x7]
c0012ce6:	50                   	push   eax
c0012ce7:	8d 44 24 10          	lea    eax,[esp+0x10]
c0012ceb:	50                   	push   eax
c0012cec:	56                   	push   esi
c0012ced:	e8 f0 91 ff ff       	call   c000bee2 <File::stat(unsigned long long*, bool*)>
c0012cf2:	5a                   	pop    edx
c0012cf3:	59                   	pop    ecx
c0012cf4:	6a 01                	push   0x1
c0012cf6:	ff 33                	push   DWORD PTR [ebx]
c0012cf8:	e8 e3 8e ff ff       	call   c000bbe0 <File::open(FileOpenMode)>
c0012cfd:	5e                   	pop    esi
c0012cfe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012d02:	e8 af 4d ff ff       	call   c0007ab6 <malloc>
c0012d07:	5a                   	pop    edx
c0012d08:	89 c7                	mov    edi,eax
c0012d0a:	8d 74 24 10          	lea    esi,[esp+0x10]
c0012d0e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012d10:	8b 10                	mov    edx,DWORD PTR [eax]
c0012d12:	56                   	push   esi
c0012d13:	57                   	push   edi
c0012d14:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012d18:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012d1c:	50                   	push   eax
c0012d1d:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012d20:	83 c4 14             	add    esp,0x14
c0012d23:	ff 33                	push   DWORD PTR [ebx]
c0012d25:	e8 14 8f ff ff       	call   c000bc3e <File::close()>
c0012d2a:	59                   	pop    ecx
c0012d2b:	58                   	pop    eax
c0012d2c:	6a 13                	push   0x13
c0012d2e:	ff 33                	push   DWORD PTR [ebx]
c0012d30:	e8 ab 8e ff ff       	call   c000bbe0 <File::open(FileOpenMode)>
c0012d35:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012d37:	8b 10                	mov    edx,DWORD PTR [eax]
c0012d39:	89 34 24             	mov    DWORD PTR [esp],esi
c0012d3c:	57                   	push   edi
c0012d3d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012d41:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012d45:	50                   	push   eax
c0012d46:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0012d49:	83 c4 14             	add    esp,0x14
c0012d4c:	57                   	push   edi
c0012d4d:	e8 74 4d ff ff       	call   c0007ac6 <free>
c0012d52:	83 c4 10             	add    esp,0x10
c0012d55:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0012d58:	75 10                	jne    c0012d6a <CmOpen(char const*)+0xbd>
c0012d5a:	83 ec 0c             	sub    esp,0xc
c0012d5d:	68 f9 25 02 c0       	push   0xc00225f9
c0012d62:	e8 2c e9 ff ff       	call   c0011693 <KePanic(char const*)>
c0012d67:	83 c4 10             	add    esp,0x10
c0012d6a:	8d 7b 05             	lea    edi,[ebx+0x5]
c0012d6d:	50                   	push   eax
c0012d6e:	6a 00                	push   0x0
c0012d70:	6a 00                	push   0x0
c0012d72:	ff 33                	push   DWORD PTR [ebx]
c0012d74:	e8 25 8f ff ff       	call   c000bc9e <File::seek(unsigned long long)>
c0012d79:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012d7b:	8b 10                	mov    edx,DWORD PTR [eax]
c0012d7d:	89 34 24             	mov    DWORD PTR [esp],esi
c0012d80:	57                   	push   edi
c0012d81:	6a 00                	push   0x0
c0012d83:	6a 2b                	push   0x2b
c0012d85:	50                   	push   eax
c0012d86:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012d89:	83 c4 1c             	add    esp,0x1c
c0012d8c:	6a 00                	push   0x0
c0012d8e:	6a 00                	push   0x0
c0012d90:	ff 33                	push   DWORD PTR [ebx]
c0012d92:	e8 07 8f ff ff       	call   c000bc9e <File::seek(unsigned long long)>
c0012d97:	83 c4 0c             	add    esp,0xc
c0012d9a:	6a 08                	push   0x8
c0012d9c:	68 0a 26 02 c0       	push   0xc002260a
c0012da1:	57                   	push   edi
c0012da2:	e8 d9 d5 fe ff       	call   c0000380 <memcmp>
c0012da7:	83 c4 10             	add    esp,0x10
c0012daa:	85 c0                	test   eax,eax
c0012dac:	74 10                	je     c0012dbe <CmOpen(char const*)+0x111>
c0012dae:	83 ec 0c             	sub    esp,0xc
c0012db1:	68 13 26 02 c0       	push   0xc0022613
c0012db6:	e8 d8 e8 ff ff       	call   c0011693 <KePanic(char const*)>
c0012dbb:	83 c4 10             	add    esp,0x10
c0012dbe:	c6 43 04 01          	mov    BYTE PTR [ebx+0x4],0x1
c0012dc2:	89 d8                	mov    eax,ebx
c0012dc4:	83 c4 10             	add    esp,0x10
c0012dc7:	5b                   	pop    ebx
c0012dc8:	5e                   	pop    esi
c0012dc9:	5f                   	pop    edi
c0012dca:	c3                   	ret    

c0012dcb <CmClose(Reghive_Tag*)>:
c0012dcb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012dcf:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c0012dd3:	74 0b                	je     c0012de0 <CmClose(Reghive_Tag*)+0x15>
c0012dd5:	8b 00                	mov    eax,DWORD PTR [eax]
c0012dd7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012ddb:	e9 5e 8e ff ff       	jmp    c000bc3e <File::close()>
c0012de0:	c3                   	ret    

c0012de1 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>:
c0012de1:	53                   	push   ebx
c0012de2:	83 ec 18             	sub    esp,0x18
c0012de5:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012de9:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0012ded:	74 29                	je     c0012e18 <CmReadExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c0012def:	50                   	push   eax
c0012df0:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c0012df5:	99                   	cdq    
c0012df6:	52                   	push   edx
c0012df7:	50                   	push   eax
c0012df8:	ff 33                	push   DWORD PTR [ebx]
c0012dfa:	e8 9f 8e ff ff       	call   c000bc9e <File::seek(unsigned long long)>
c0012dff:	5a                   	pop    edx
c0012e00:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012e02:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0012e06:	8b 10                	mov    edx,DWORD PTR [eax]
c0012e08:	51                   	push   ecx
c0012e09:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012e0d:	6a 00                	push   0x0
c0012e0f:	6a 2b                	push   0x2b
c0012e11:	50                   	push   eax
c0012e12:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012e15:	83 c4 20             	add    esp,0x20
c0012e18:	83 c4 18             	add    esp,0x18
c0012e1b:	5b                   	pop    ebx
c0012e1c:	c3                   	ret    

c0012e1d <CmGetString(Reghive_Tag*, int, char*)>:
c0012e1d:	55                   	push   ebp
c0012e1e:	57                   	push   edi
c0012e1f:	56                   	push   esi
c0012e20:	53                   	push   ebx
c0012e21:	31 db                	xor    ebx,ebx
c0012e23:	83 ec 70             	sub    esp,0x70
c0012e26:	8b ac 24 84 00 00 00 	mov    ebp,DWORD PTR [esp+0x84]
c0012e2d:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0012e31:	50                   	push   eax
c0012e32:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0012e39:	55                   	push   ebp
c0012e3a:	e8 a2 ff ff ff       	call   c0012de1 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012e3f:	83 c4 10             	add    esp,0x10
c0012e42:	0f b6 44 1c 22       	movzx  eax,BYTE PTR [esp+ebx*1+0x22]
c0012e47:	c1 e0 08             	shl    eax,0x8
c0012e4a:	89 c2                	mov    edx,eax
c0012e4c:	0f b6 44 1c 21       	movzx  eax,BYTE PTR [esp+ebx*1+0x21]
c0012e51:	09 d0                	or     eax,edx
c0012e53:	0f b6 54 1c 20       	movzx  edx,BYTE PTR [esp+ebx*1+0x20]
c0012e58:	c1 e0 08             	shl    eax,0x8
c0012e5b:	09 d0                	or     eax,edx
c0012e5d:	74 25                	je     c0012e84 <CmGetString(Reghive_Tag*, int, char*)+0x67>
c0012e5f:	6b fb 0d             	imul   edi,ebx,0xd
c0012e62:	52                   	push   edx
c0012e63:	8d 54 24 39          	lea    edx,[esp+0x39]
c0012e67:	52                   	push   edx
c0012e68:	50                   	push   eax
c0012e69:	55                   	push   ebp
c0012e6a:	e8 72 ff ff ff       	call   c0012de1 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012e6f:	8d 74 24 49          	lea    esi,[esp+0x49]
c0012e73:	03 bc 24 98 00 00 00 	add    edi,DWORD PTR [esp+0x98]
c0012e7a:	b9 27 00 00 00       	mov    ecx,0x27
c0012e7f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012e81:	83 c4 10             	add    esp,0x10
c0012e84:	83 c3 03             	add    ebx,0x3
c0012e87:	83 fb 15             	cmp    ebx,0x15
c0012e8a:	75 b6                	jne    c0012e42 <CmGetString(Reghive_Tag*, int, char*)+0x25>
c0012e8c:	83 c4 6c             	add    esp,0x6c
c0012e8f:	5b                   	pop    ebx
c0012e90:	5e                   	pop    esi
c0012e91:	5f                   	pop    edi
c0012e92:	5d                   	pop    ebp
c0012e93:	c3                   	ret    

c0012e94 <CmEnterDirectory(Reghive_Tag*, int)>:
c0012e94:	83 ec 40             	sub    esp,0x40
c0012e97:	8d 44 24 09          	lea    eax,[esp+0x9]
c0012e9b:	50                   	push   eax
c0012e9c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012ea0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012ea4:	e8 38 ff ff ff       	call   c0012de1 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012ea9:	83 c4 10             	add    esp,0x10
c0012eac:	83 c8 ff             	or     eax,0xffffffff
c0012eaf:	80 7c 24 05 4e       	cmp    BYTE PTR [esp+0x5],0x4e
c0012eb4:	75 19                	jne    c0012ecf <CmEnterDirectory(Reghive_Tag*, int)+0x3b>
c0012eb6:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c0012ebb:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0012ec0:	c1 e0 08             	shl    eax,0x8
c0012ec3:	09 c2                	or     edx,eax
c0012ec5:	0f b6 44 24 1d       	movzx  eax,BYTE PTR [esp+0x1d]
c0012eca:	c1 e0 10             	shl    eax,0x10
c0012ecd:	09 d0                	or     eax,edx
c0012ecf:	83 c4 3c             	add    esp,0x3c
c0012ed2:	c3                   	ret    

c0012ed3 <CmGetNext(Reghive_Tag*, int)>:
c0012ed3:	83 ec 40             	sub    esp,0x40
c0012ed6:	8d 44 24 09          	lea    eax,[esp+0x9]
c0012eda:	50                   	push   eax
c0012edb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012edf:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012ee3:	e8 f9 fe ff ff       	call   c0012de1 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012ee8:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c0012eed:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0012ef2:	c1 e0 08             	shl    eax,0x8
c0012ef5:	09 c2                	or     edx,eax
c0012ef7:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c0012efc:	83 c4 4c             	add    esp,0x4c
c0012eff:	c1 e0 10             	shl    eax,0x10
c0012f02:	09 d0                	or     eax,edx
c0012f04:	c3                   	ret    

c0012f05 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>:
c0012f05:	53                   	push   ebx
c0012f06:	83 ec 18             	sub    esp,0x18
c0012f09:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012f0d:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0012f11:	74 29                	je     c0012f3c <CmWriteExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c0012f13:	50                   	push   eax
c0012f14:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c0012f19:	99                   	cdq    
c0012f1a:	52                   	push   edx
c0012f1b:	50                   	push   eax
c0012f1c:	ff 33                	push   DWORD PTR [ebx]
c0012f1e:	e8 7b 8d ff ff       	call   c000bc9e <File::seek(unsigned long long)>
c0012f23:	5a                   	pop    edx
c0012f24:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012f26:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0012f2a:	8b 10                	mov    edx,DWORD PTR [eax]
c0012f2c:	51                   	push   ecx
c0012f2d:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012f31:	6a 00                	push   0x0
c0012f33:	6a 2b                	push   0x2b
c0012f35:	50                   	push   eax
c0012f36:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0012f39:	83 c4 20             	add    esp,0x20
c0012f3c:	83 c4 18             	add    esp,0x18
c0012f3f:	5b                   	pop    ebx
c0012f40:	c3                   	ret    

c0012f41 <CmFreeExtent(Reghive_Tag*, int)>:
c0012f41:	53                   	push   ebx
c0012f42:	83 ec 3c             	sub    esp,0x3c
c0012f45:	6a 2b                	push   0x2b
c0012f47:	6a 00                	push   0x0
c0012f49:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0012f4d:	53                   	push   ebx
c0012f4e:	e8 9d d5 fe ff       	call   c00004f0 <memset>
c0012f53:	83 c4 0c             	add    esp,0xc
c0012f56:	53                   	push   ebx
c0012f57:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012f5b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012f5f:	e8 a1 ff ff ff       	call   c0012f05 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012f64:	83 c4 48             	add    esp,0x48
c0012f67:	5b                   	pop    ebx
c0012f68:	c3                   	ret    

c0012f69 <CmUpdateHeader(Reghive_Tag*)>:
c0012f69:	83 ec 0c             	sub    esp,0xc
c0012f6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f70:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c0012f74:	74 10                	je     c0012f86 <CmUpdateHeader(Reghive_Tag*)+0x1d>
c0012f76:	52                   	push   edx
c0012f77:	8d 50 05             	lea    edx,[eax+0x5]
c0012f7a:	52                   	push   edx
c0012f7b:	6a 00                	push   0x0
c0012f7d:	50                   	push   eax
c0012f7e:	e8 82 ff ff ff       	call   c0012f05 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012f83:	83 c4 10             	add    esp,0x10
c0012f86:	83 c4 0c             	add    esp,0xc
c0012f89:	c3                   	ret    

c0012f8a <CmExpand(Reghive_Tag*, int)>:
c0012f8a:	57                   	push   edi
c0012f8b:	56                   	push   esi
c0012f8c:	83 ce ff             	or     esi,0xffffffff
c0012f8f:	53                   	push   ebx
c0012f90:	83 ec 30             	sub    esp,0x30
c0012f93:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0012f97:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0012f9b:	74 5f                	je     c0012ffc <CmExpand(Reghive_Tag*, int)+0x72>
c0012f9d:	31 d2                	xor    edx,edx
c0012f9f:	31 f6                	xor    esi,esi
c0012fa1:	50                   	push   eax
c0012fa2:	6b 43 0d 2b          	imul   eax,DWORD PTR [ebx+0xd],0x2b
c0012fa6:	52                   	push   edx
c0012fa7:	50                   	push   eax
c0012fa8:	ff 33                	push   DWORD PTR [ebx]
c0012faa:	e8 ef 8c ff ff       	call   c000bc9e <File::seek(unsigned long long)>
c0012faf:	83 c4 0c             	add    esp,0xc
c0012fb2:	6a 2b                	push   0x2b
c0012fb4:	6a 00                	push   0x0
c0012fb6:	8d 7c 24 11          	lea    edi,[esp+0x11]
c0012fba:	57                   	push   edi
c0012fbb:	e8 30 d5 fe ff       	call   c00004f0 <memset>
c0012fc0:	83 c4 10             	add    esp,0x10
c0012fc3:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c0012fc7:	7d 1b                	jge    c0012fe4 <CmExpand(Reghive_Tag*, int)+0x5a>
c0012fc9:	83 ec 0c             	sub    esp,0xc
c0012fcc:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012fce:	8d 4c 24 0c          	lea    ecx,[esp+0xc]
c0012fd2:	8b 10                	mov    edx,DWORD PTR [eax]
c0012fd4:	46                   	inc    esi
c0012fd5:	51                   	push   ecx
c0012fd6:	57                   	push   edi
c0012fd7:	6a 00                	push   0x0
c0012fd9:	6a 2b                	push   0x2b
c0012fdb:	50                   	push   eax
c0012fdc:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0012fdf:	83 c4 20             	add    esp,0x20
c0012fe2:	eb df                	jmp    c0012fc3 <CmExpand(Reghive_Tag*, int)+0x39>
c0012fe4:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0012fe8:	8b 73 0d             	mov    esi,DWORD PTR [ebx+0xd]
c0012feb:	83 ec 0c             	sub    esp,0xc
c0012fee:	01 f2                	add    edx,esi
c0012ff0:	89 53 0d             	mov    DWORD PTR [ebx+0xd],edx
c0012ff3:	53                   	push   ebx
c0012ff4:	e8 70 ff ff ff       	call   c0012f69 <CmUpdateHeader(Reghive_Tag*)>
c0012ff9:	83 c4 10             	add    esp,0x10
c0012ffc:	83 c4 30             	add    esp,0x30
c0012fff:	89 f0                	mov    eax,esi
c0013001:	5b                   	pop    ebx
c0013002:	5e                   	pop    esi
c0013003:	5f                   	pop    edi
c0013004:	c3                   	ret    

c0013005 <CmFindUnusedExtent(Reghive_Tag*)>:
c0013005:	55                   	push   ebp
c0013006:	57                   	push   edi
c0013007:	56                   	push   esi
c0013008:	53                   	push   ebx
c0013009:	83 cb ff             	or     ebx,0xffffffff
c001300c:	83 ec 1c             	sub    esp,0x1c
c001300f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0013013:	80 7d 04 00          	cmp    BYTE PTR [ebp+0x4],0x0
c0013017:	74 68                	je     c0013081 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c0013019:	be 2b 00 00 00       	mov    esi,0x2b
c001301e:	51                   	push   ecx
c001301f:	31 ff                	xor    edi,edi
c0013021:	6a 00                	push   0x0
c0013023:	31 db                	xor    ebx,ebx
c0013025:	6a 00                	push   0x0
c0013027:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c001302a:	e8 6f 8c ff ff       	call   c000bc9e <File::seek(unsigned long long)>
c001302f:	83 c4 10             	add    esp,0x10
c0013032:	39 5d 0d             	cmp    DWORD PTR [ebp+0xd],ebx
c0013035:	76 3b                	jbe    c0013072 <CmFindUnusedExtent(Reghive_Tag*)+0x6d>
c0013037:	83 ec 0c             	sub    esp,0xc
c001303a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001303d:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0013041:	8b 10                	mov    edx,DWORD PTR [eax]
c0013043:	51                   	push   ecx
c0013044:	8d 4c 24 1b          	lea    ecx,[esp+0x1b]
c0013048:	51                   	push   ecx
c0013049:	6a 00                	push   0x0
c001304b:	6a 01                	push   0x1
c001304d:	50                   	push   eax
c001304e:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0013051:	83 c4 20             	add    esp,0x20
c0013054:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0013059:	74 26                	je     c0013081 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c001305b:	43                   	inc    ebx
c001305c:	52                   	push   edx
c001305d:	57                   	push   edi
c001305e:	56                   	push   esi
c001305f:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0013062:	e8 37 8c ff ff       	call   c000bc9e <File::seek(unsigned long long)>
c0013067:	83 c6 2b             	add    esi,0x2b
c001306a:	83 d7 00             	adc    edi,0x0
c001306d:	83 c4 10             	add    esp,0x10
c0013070:	eb c0                	jmp    c0013032 <CmFindUnusedExtent(Reghive_Tag*)+0x2d>
c0013072:	50                   	push   eax
c0013073:	50                   	push   eax
c0013074:	6a 40                	push   0x40
c0013076:	55                   	push   ebp
c0013077:	e8 0e ff ff ff       	call   c0012f8a <CmExpand(Reghive_Tag*, int)>
c001307c:	83 c4 10             	add    esp,0x10
c001307f:	89 c3                	mov    ebx,eax
c0013081:	83 c4 1c             	add    esp,0x1c
c0013084:	89 d8                	mov    eax,ebx
c0013086:	5b                   	pop    ebx
c0013087:	5e                   	pop    esi
c0013088:	5f                   	pop    edi
c0013089:	5d                   	pop    ebp
c001308a:	c3                   	ret    

c001308b <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>:
c001308b:	55                   	push   ebp
c001308c:	57                   	push   edi
c001308d:	56                   	push   esi
c001308e:	53                   	push   ebx
c001308f:	81 ec 88 00 00 00    	sub    esp,0x88
c0013095:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c001309c:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00130a3:	e8 5d ff ff ff       	call   c0013005 <CmFindUnusedExtent(Reghive_Tag*)>
c00130a8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00130ac:	83 c4 0c             	add    esp,0xc
c00130af:	6a 2b                	push   0x2b
c00130b1:	6a 00                	push   0x0
c00130b3:	8d 6c 24 26          	lea    ebp,[esp+0x26]
c00130b7:	55                   	push   ebp
c00130b8:	e8 33 d4 fe ff       	call   c00004f0 <memset>
c00130bd:	83 c4 10             	add    esp,0x10
c00130c0:	85 db                	test   ebx,ebx
c00130c2:	74 12                	je     c00130d6 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x4b>
c00130c4:	51                   	push   ecx
c00130c5:	55                   	push   ebp
c00130c6:	53                   	push   ebx
c00130c7:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00130ce:	e8 0e fd ff ff       	call   c0012de1 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00130d3:	83 c4 10             	add    esp,0x10
c00130d6:	8d 7c 24 45          	lea    edi,[esp+0x45]
c00130da:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c00130e1:	b9 2b 00 00 00       	mov    ecx,0x2b
c00130e6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00130e8:	85 db                	test   ebx,ebx
c00130ea:	74 49                	je     c0013135 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xaa>
c00130ec:	0f b6 4c 24 1b       	movzx  ecx,BYTE PTR [esp+0x1b]
c00130f1:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c00130f6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00130fa:	c1 e0 08             	shl    eax,0x8
c00130fd:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0013103:	09 c8                	or     eax,ecx
c0013105:	74 11                	je     c0013118 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x8d>
c0013107:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c001310b:	88 64 24 47          	mov    BYTE PTR [esp+0x47],ah
c001310f:	c1 e8 10             	shr    eax,0x10
c0013112:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c0013116:	eb 0f                	jmp    c0013127 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x9c>
c0013118:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c001311d:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c0013122:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c0013127:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c001312b:	c1 ea 08             	shr    edx,0x8
c001312e:	66 89 54 24 1c       	mov    WORD PTR [esp+0x1c],dx
c0013133:	eb 0f                	jmp    c0013144 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xb9>
c0013135:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c001313a:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c001313f:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c0013144:	52                   	push   edx
c0013145:	8d 44 24 49          	lea    eax,[esp+0x49]
c0013149:	50                   	push   eax
c001314a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001314e:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0013155:	e8 ab fd ff ff       	call   c0012f05 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c001315a:	83 c4 10             	add    esp,0x10
c001315d:	85 db                	test   ebx,ebx
c001315f:	74 12                	je     c0013173 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xe8>
c0013161:	50                   	push   eax
c0013162:	55                   	push   ebp
c0013163:	53                   	push   ebx
c0013164:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c001316b:	e8 95 fd ff ff       	call   c0012f05 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0013170:	83 c4 10             	add    esp,0x10
c0013173:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013177:	83 c4 7c             	add    esp,0x7c
c001317a:	5b                   	pop    ebx
c001317b:	5e                   	pop    esi
c001317c:	5f                   	pop    edi
c001317d:	5d                   	pop    ebp
c001317e:	c3                   	ret    

c001317f <CmSetString(Reghive_Tag*, int, char const*)>:
c001317f:	55                   	push   ebp
c0013180:	57                   	push   edi
c0013181:	56                   	push   esi
c0013182:	53                   	push   ebx
c0013183:	bb 27 00 00 00       	mov    ebx,0x27
c0013188:	81 ec 88 00 00 00    	sub    esp,0x88
c001318e:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c0013195:	ff b4 24 a4 00 00 00 	push   DWORD PTR [esp+0xa4]
c001319c:	e8 cf d3 fe ff       	call   c0000570 <strlen>
c00131a1:	8d 48 26             	lea    ecx,[eax+0x26]
c00131a4:	89 c8                	mov    eax,ecx
c00131a6:	99                   	cdq    
c00131a7:	f7 fb                	idiv   ebx
c00131a9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00131ad:	83 c4 10             	add    esp,0x10
c00131b0:	81 f9 37 01 00 00    	cmp    ecx,0x137
c00131b6:	7e 10                	jle    c00131c8 <CmSetString(Reghive_Tag*, int, char const*)+0x49>
c00131b8:	83 ec 0c             	sub    esp,0xc
c00131bb:	68 24 26 02 c0       	push   0xc0022624
c00131c0:	e8 ce e4 ff ff       	call   c0011693 <KePanic(char const*)>
c00131c5:	83 c4 10             	add    esp,0x10
c00131c8:	31 ff                	xor    edi,edi
c00131ca:	50                   	push   eax
c00131cb:	8d 5c 24 1e          	lea    ebx,[esp+0x1e]
c00131cf:	53                   	push   ebx
c00131d0:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00131d7:	56                   	push   esi
c00131d8:	e8 04 fc ff ff       	call   c0012de1 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00131dd:	83 c4 10             	add    esp,0x10
c00131e0:	0f b6 53 18          	movzx  edx,BYTE PTR [ebx+0x18]
c00131e4:	89 d0                	mov    eax,edx
c00131e6:	0f b6 53 17          	movzx  edx,BYTE PTR [ebx+0x17]
c00131ea:	c1 e0 08             	shl    eax,0x8
c00131ed:	09 c2                	or     edx,eax
c00131ef:	0f b6 43 16          	movzx  eax,BYTE PTR [ebx+0x16]
c00131f3:	c1 e2 08             	shl    edx,0x8
c00131f6:	09 c2                	or     edx,eax
c00131f8:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c00131fc:	7e 76                	jle    c0013274 <CmSetString(Reghive_Tag*, int, char const*)+0xf5>
c00131fe:	85 d2                	test   edx,edx
c0013200:	75 25                	jne    c0013227 <CmSetString(Reghive_Tag*, int, char const*)+0xa8>
c0013202:	c6 44 24 45 13       	mov    BYTE PTR [esp+0x45],0x13
c0013207:	8d 44 24 45          	lea    eax,[esp+0x45]
c001320b:	50                   	push   eax
c001320c:	6a 00                	push   0x0
c001320e:	6a 00                	push   0x0
c0013210:	56                   	push   esi
c0013211:	e8 75 fe ff ff       	call   c001308b <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0013216:	83 c4 10             	add    esp,0x10
c0013219:	89 c2                	mov    edx,eax
c001321b:	88 43 16             	mov    BYTE PTR [ebx+0x16],al
c001321e:	88 63 17             	mov    BYTE PTR [ebx+0x17],ah
c0013221:	c1 f8 10             	sar    eax,0x10
c0013224:	88 43 18             	mov    BYTE PTR [ebx+0x18],al
c0013227:	55                   	push   ebp
c0013228:	8d 6c 24 49          	lea    ebp,[esp+0x49]
c001322c:	55                   	push   ebp
c001322d:	52                   	push   edx
c001322e:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013232:	56                   	push   esi
c0013233:	e8 a9 fb ff ff       	call   c0012de1 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0013238:	83 c4 0c             	add    esp,0xc
c001323b:	6a 27                	push   0x27
c001323d:	6a 00                	push   0x0
c001323f:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c0013243:	51                   	push   ecx
c0013244:	e8 a7 d2 fe ff       	call   c00004f0 <memset>
c0013249:	83 c4 0c             	add    esp,0xc
c001324c:	6b c7 27             	imul   eax,edi,0x27
c001324f:	6a 27                	push   0x27
c0013251:	03 84 24 a0 00 00 00 	add    eax,DWORD PTR [esp+0xa0]
c0013258:	50                   	push   eax
c0013259:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c001325d:	51                   	push   ecx
c001325e:	e8 1d d4 fe ff       	call   c0000680 <strncpy>
c0013263:	83 c4 0c             	add    esp,0xc
c0013266:	55                   	push   ebp
c0013267:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001326b:	52                   	push   edx
c001326c:	56                   	push   esi
c001326d:	e8 93 fc ff ff       	call   c0012f05 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0013272:	eb 19                	jmp    c001328d <CmSetString(Reghive_Tag*, int, char const*)+0x10e>
c0013274:	85 d2                	test   edx,edx
c0013276:	74 18                	je     c0013290 <CmSetString(Reghive_Tag*, int, char const*)+0x111>
c0013278:	51                   	push   ecx
c0013279:	51                   	push   ecx
c001327a:	52                   	push   edx
c001327b:	56                   	push   esi
c001327c:	e8 c0 fc ff ff       	call   c0012f41 <CmFreeExtent(Reghive_Tag*, int)>
c0013281:	c6 43 16 00          	mov    BYTE PTR [ebx+0x16],0x0
c0013285:	c6 43 17 00          	mov    BYTE PTR [ebx+0x17],0x0
c0013289:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001328d:	83 c4 10             	add    esp,0x10
c0013290:	47                   	inc    edi
c0013291:	83 c3 03             	add    ebx,0x3
c0013294:	83 ff 07             	cmp    edi,0x7
c0013297:	0f 85 43 ff ff ff    	jne    c00131e0 <CmSetString(Reghive_Tag*, int, char const*)+0x61>
c001329d:	50                   	push   eax
c001329e:	8d 44 24 1e          	lea    eax,[esp+0x1e]
c00132a2:	50                   	push   eax
c00132a3:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00132aa:	56                   	push   esi
c00132ab:	e8 55 fc ff ff       	call   c0012f05 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00132b0:	81 c4 8c 00 00 00    	add    esp,0x8c
c00132b6:	5b                   	pop    ebx
c00132b7:	5e                   	pop    esi
c00132b8:	5f                   	pop    edi
c00132b9:	5d                   	pop    ebp
c00132ba:	c3                   	ret    

c00132bb <CmGetMatch(char*, char*, bool, bool*)>:
c00132bb:	56                   	push   esi
c00132bc:	53                   	push   ebx
c00132bd:	50                   	push   eax
c00132be:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00132c2:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00132c7:	74 25                	je     c00132ee <CmGetMatch(char*, char*, bool, bool*)+0x33>
c00132c9:	c6 06 01             	mov    BYTE PTR [esi],0x1
c00132cc:	31 db                	xor    ebx,ebx
c00132ce:	50                   	push   eax
c00132cf:	50                   	push   eax
c00132d0:	8d 04 9d c0 3e 02 c0 	lea    eax,[ebx*4-0x3ffdc140]
c00132d7:	50                   	push   eax
c00132d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00132dc:	e8 6f d4 fe ff       	call   c0000750 <strcmp>
c00132e1:	83 c4 10             	add    esp,0x10
c00132e4:	85 c0                	test   eax,eax
c00132e6:	74 2e                	je     c0013316 <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c00132e8:	43                   	inc    ebx
c00132e9:	83 fb 3f             	cmp    ebx,0x3f
c00132ec:	75 e0                	jne    c00132ce <CmGetMatch(char*, char*, bool, bool*)+0x13>
c00132ee:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00132f1:	31 db                	xor    ebx,ebx
c00132f3:	8d 04 9d c0 3e 02 c0 	lea    eax,[ebx*4-0x3ffdc140]
c00132fa:	51                   	push   ecx
c00132fb:	51                   	push   ecx
c00132fc:	50                   	push   eax
c00132fd:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013301:	e8 4a d4 fe ff       	call   c0000750 <strcmp>
c0013306:	83 c4 10             	add    esp,0x10
c0013309:	85 c0                	test   eax,eax
c001330b:	74 09                	je     c0013316 <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c001330d:	43                   	inc    ebx
c001330e:	83 fb 3f             	cmp    ebx,0x3f
c0013311:	75 e0                	jne    c00132f3 <CmGetMatch(char*, char*, bool, bool*)+0x38>
c0013313:	83 cb ff             	or     ebx,0xffffffff
c0013316:	89 d8                	mov    eax,ebx
c0013318:	5a                   	pop    edx
c0013319:	5b                   	pop    ebx
c001331a:	5e                   	pop    esi
c001331b:	c3                   	ret    

c001331c <CmAddShift(unsigned int*, int*, unsigned char, int)>:
c001331c:	55                   	push   ebp
c001331d:	31 c0                	xor    eax,eax
c001331f:	57                   	push   edi
c0013320:	56                   	push   esi
c0013321:	53                   	push   ebx
c0013322:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013326:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001332a:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001332c:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0013330:	8d 2c 31             	lea    ebp,[ecx+esi*1]
c0013333:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013337:	83 fd 1f             	cmp    ebp,0x1f
c001333a:	7f 0b                	jg     c0013347 <CmAddShift(unsigned int*, int*, unsigned char, int)+0x2b>
c001333c:	0f b6 c2             	movzx  eax,dl
c001333f:	d3 e0                	shl    eax,cl
c0013341:	09 07                	or     DWORD PTR [edi],eax
c0013343:	b0 01                	mov    al,0x1
c0013345:	01 33                	add    DWORD PTR [ebx],esi
c0013347:	5b                   	pop    ebx
c0013348:	5e                   	pop    esi
c0013349:	5f                   	pop    edi
c001334a:	5d                   	pop    ebp
c001334b:	c3                   	ret    

c001334c <CmGetShift(unsigned int*, int*, int, bool*)>:
c001334c:	57                   	push   edi
c001334d:	56                   	push   esi
c001334e:	53                   	push   ebx
c001334f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0013353:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0013357:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001335b:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001335f:	39 0b                	cmp    DWORD PTR [ebx],ecx
c0013361:	7c 17                	jl     c001337a <CmGetShift(unsigned int*, int*, int, bool*)+0x2e>
c0013363:	8b 17                	mov    edx,DWORD PTR [edi]
c0013365:	b8 01 00 00 00       	mov    eax,0x1
c001336a:	d3 e0                	shl    eax,cl
c001336c:	48                   	dec    eax
c001336d:	21 d0                	and    eax,edx
c001336f:	d3 ea                	shr    edx,cl
c0013371:	89 17                	mov    DWORD PTR [edi],edx
c0013373:	29 0b                	sub    DWORD PTR [ebx],ecx
c0013375:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0013378:	eb 05                	jmp    c001337f <CmGetShift(unsigned int*, int*, int, bool*)+0x33>
c001337a:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001337d:	31 c0                	xor    eax,eax
c001337f:	5b                   	pop    ebx
c0013380:	5e                   	pop    esi
c0013381:	5f                   	pop    edi
c0013382:	c3                   	ret    

c0013383 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>:
c0013383:	83 ec 40             	sub    esp,0x40
c0013386:	8d 44 24 09          	lea    eax,[esp+0x9]
c001338a:	50                   	push   eax
c001338b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001338f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0013393:	e8 49 fa ff ff       	call   c0012de1 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0013398:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001339c:	8b 54 24 2b          	mov    edx,DWORD PTR [esp+0x2b]
c00133a0:	8b 4c 24 2f          	mov    ecx,DWORD PTR [esp+0x2f]
c00133a4:	89 10                	mov    DWORD PTR [eax],edx
c00133a6:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c00133a9:	83 c4 4c             	add    esp,0x4c
c00133ac:	c3                   	ret    

c00133ad <CmSetInteger(Reghive_Tag*, int, unsigned long long)>:
c00133ad:	55                   	push   ebp
c00133ae:	57                   	push   edi
c00133af:	56                   	push   esi
c00133b0:	53                   	push   ebx
c00133b1:	83 ec 40             	sub    esp,0x40
c00133b4:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c00133b8:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c00133bc:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c00133c0:	8d 5c 24 09          	lea    ebx,[esp+0x9]
c00133c4:	53                   	push   ebx
c00133c5:	56                   	push   esi
c00133c6:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00133ca:	e8 12 fa ff ff       	call   c0012de1 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00133cf:	89 7c 24 2b          	mov    DWORD PTR [esp+0x2b],edi
c00133d3:	89 6c 24 2f          	mov    DWORD PTR [esp+0x2f],ebp
c00133d7:	83 c4 0c             	add    esp,0xc
c00133da:	53                   	push   ebx
c00133db:	56                   	push   esi
c00133dc:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00133e0:	e8 20 fb ff ff       	call   c0012f05 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00133e5:	83 c4 4c             	add    esp,0x4c
c00133e8:	5b                   	pop    ebx
c00133e9:	5e                   	pop    esi
c00133ea:	5f                   	pop    edi
c00133eb:	5d                   	pop    ebp
c00133ec:	c3                   	ret    

c00133ed <CmConvertFromInternalFilename(unsigned char const*, char*)>:
c00133ed:	55                   	push   ebp
c00133ee:	57                   	push   edi
c00133ef:	56                   	push   esi
c00133f0:	31 f6                	xor    esi,esi
c00133f2:	53                   	push   ebx
c00133f3:	31 db                	xor    ebx,ebx
c00133f5:	83 ec 40             	sub    esp,0x40
c00133f8:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0013400:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0013408:	6a 12                	push   0x12
c001340a:	68 ee 00 00 00       	push   0xee
c001340f:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c0013413:	e8 d8 d0 fe ff       	call   c00004f0 <memset>
c0013418:	83 c4 10             	add    esp,0x10
c001341b:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001341f:	6a 08                	push   0x8
c0013421:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0013425:	0f b6 04 18          	movzx  eax,BYTE PTR [eax+ebx*1]
c0013429:	50                   	push   eax
c001342a:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c001342e:	55                   	push   ebp
c001342f:	57                   	push   edi
c0013430:	e8 e7 fe ff ff       	call   c001331c <CmAddShift(unsigned int*, int*, unsigned char, int)>
c0013435:	83 c4 10             	add    esp,0x10
c0013438:	8d 44 24 0f          	lea    eax,[esp+0xf]
c001343c:	50                   	push   eax
c001343d:	6a 06                	push   0x6
c001343f:	55                   	push   ebp
c0013440:	57                   	push   edi
c0013441:	e8 06 ff ff ff       	call   c001334c <CmGetShift(unsigned int*, int*, int, bool*)>
c0013446:	83 c4 10             	add    esp,0x10
c0013449:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001344e:	74 07                	je     c0013457 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x6a>
c0013450:	46                   	inc    esi
c0013451:	88 44 34 17          	mov    BYTE PTR [esp+esi*1+0x17],al
c0013455:	eb e1                	jmp    c0013438 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x4b>
c0013457:	43                   	inc    ebx
c0013458:	83 fb 12             	cmp    ebx,0x12
c001345b:	75 c2                	jne    c001341f <CmConvertFromInternalFilename(unsigned char const*, char*)+0x32>
c001345d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0013461:	31 db                	xor    ebx,ebx
c0013463:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0013466:	50                   	push   eax
c0013467:	50                   	push   eax
c0013468:	0f b6 44 1c 20       	movzx  eax,BYTE PTR [esp+ebx*1+0x20]
c001346d:	43                   	inc    ebx
c001346e:	8d 04 85 c0 3e 02 c0 	lea    eax,[eax*4-0x3ffdc140]
c0013475:	50                   	push   eax
c0013476:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c001347a:	e8 c1 d3 fe ff       	call   c0000840 <strcat>
c001347f:	83 c4 10             	add    esp,0x10
c0013482:	83 fb 18             	cmp    ebx,0x18
c0013485:	75 df                	jne    c0013466 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x79>
c0013487:	83 c4 3c             	add    esp,0x3c
c001348a:	31 c0                	xor    eax,eax
c001348c:	5b                   	pop    ebx
c001348d:	5e                   	pop    esi
c001348e:	5f                   	pop    edi
c001348f:	5d                   	pop    ebp
c0013490:	c3                   	ret    

c0013491 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>:
c0013491:	83 ec 40             	sub    esp,0x40
c0013494:	8d 44 24 09          	lea    eax,[esp+0x9]
c0013498:	50                   	push   eax
c0013499:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001349d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00134a1:	e8 3b f9 ff ff       	call   c0012de1 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00134a6:	58                   	pop    eax
c00134a7:	5a                   	pop    edx
c00134a8:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c00134ac:	8d 44 24 15          	lea    eax,[esp+0x15]
c00134b0:	50                   	push   eax
c00134b1:	e8 37 ff ff ff       	call   c00133ed <CmConvertFromInternalFilename(unsigned char const*, char*)>
c00134b6:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c00134bb:	83 c4 4c             	add    esp,0x4c
c00134be:	c3                   	ret    

c00134bf <CmConvertToInternalFilename(char const*, unsigned char*)>:
c00134bf:	55                   	push   ebp
c00134c0:	57                   	push   edi
c00134c1:	56                   	push   esi
c00134c2:	53                   	push   ebx
c00134c3:	31 db                	xor    ebx,ebx
c00134c5:	83 ec 70             	sub    esp,0x70
c00134c8:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
c00134cf:	6a 30                	push   0x30
c00134d1:	6a 00                	push   0x0
c00134d3:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c00134d7:	56                   	push   esi
c00134d8:	e8 13 d0 fe ff       	call   c00004f0 <memset>
c00134dd:	83 c4 10             	add    esp,0x10
c00134e0:	83 ec 0c             	sub    esp,0xc
c00134e3:	57                   	push   edi
c00134e4:	e8 87 d0 fe ff       	call   c0000570 <strlen>
c00134e9:	83 c4 10             	add    esp,0x10
c00134ec:	39 d8                	cmp    eax,ebx
c00134ee:	76 16                	jbe    c0013506 <CmConvertToInternalFilename(char const*, unsigned char*)+0x47>
c00134f0:	83 ec 0c             	sub    esp,0xc
c00134f3:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c00134f7:	50                   	push   eax
c00134f8:	e8 33 d4 fe ff       	call   c0000930 <toupper>
c00134fd:	83 c4 10             	add    esp,0x10
c0013500:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c0013503:	43                   	inc    ebx
c0013504:	eb da                	jmp    c00134e0 <CmConvertToInternalFilename(char const*, unsigned char*)+0x21>
c0013506:	31 f6                	xor    esi,esi
c0013508:	52                   	push   edx
c0013509:	31 ff                	xor    edi,edi
c001350b:	6a 18                	push   0x18
c001350d:	6a 3f                	push   0x3f
c001350f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0013513:	50                   	push   eax
c0013514:	e8 d7 cf fe ff       	call   c00004f0 <memset>
c0013519:	83 c4 10             	add    esp,0x10
c001351c:	8a 44 34 30          	mov    al,BYTE PTR [esp+esi*1+0x30]
c0013520:	8d 5c 24 10          	lea    ebx,[esp+0x10]
c0013524:	84 c0                	test   al,al
c0013526:	0f 84 b0 00 00 00    	je     c00135dc <CmConvertToInternalFilename(char const*, unsigned char*)+0x11d>
c001352c:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c0013530:	c6 44 24 16 00       	mov    BYTE PTR [esp+0x16],0x0
c0013535:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0013539:	c6 44 24 11 00       	mov    BYTE PTR [esp+0x11],0x0
c001353e:	8d 6e 01             	lea    ebp,[esi+0x1]
c0013541:	83 ec 0c             	sub    esp,0xc
c0013544:	8a 54 2c 3c          	mov    dl,BYTE PTR [esp+ebp*1+0x3c]
c0013548:	88 54 24 21          	mov    BYTE PTR [esp+0x21],dl
c001354c:	53                   	push   ebx
c001354d:	e8 1e d0 fe ff       	call   c0000570 <strlen>
c0013552:	83 c4 10             	add    esp,0x10
c0013555:	85 c0                	test   eax,eax
c0013557:	8d 44 24 0f          	lea    eax,[esp+0xf]
c001355b:	74 0b                	je     c0013568 <CmConvertToInternalFilename(char const*, unsigned char*)+0xa9>
c001355d:	50                   	push   eax
c001355e:	6a 01                	push   0x1
c0013560:	53                   	push   ebx
c0013561:	8d 44 24 20          	lea    eax,[esp+0x20]
c0013565:	50                   	push   eax
c0013566:	eb 0a                	jmp    c0013572 <CmConvertToInternalFilename(char const*, unsigned char*)+0xb3>
c0013568:	50                   	push   eax
c0013569:	6a 00                	push   0x0
c001356b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001356f:	50                   	push   eax
c0013570:	6a 00                	push   0x0
c0013572:	e8 44 fd ff ff       	call   c00132bb <CmGetMatch(char*, char*, bool, bool*)>
c0013577:	83 c4 10             	add    esp,0x10
c001357a:	83 f8 ff             	cmp    eax,0xffffffff
c001357d:	75 1a                	jne    c0013599 <CmConvertToInternalFilename(char const*, unsigned char*)+0xda>
c001357f:	83 ec 0c             	sub    esp,0xc
c0013582:	68 39 26 02 c0       	push   0xc0022639
c0013587:	e8 07 e1 ff ff       	call   c0011693 <KePanic(char const*)>
c001358c:	83 c4 10             	add    esp,0x10
c001358f:	b8 02 00 00 00       	mov    eax,0x2
c0013594:	e9 bc 00 00 00       	jmp    c0013655 <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c0013599:	83 ff 18             	cmp    edi,0x18
c001359c:	75 1a                	jne    c00135b8 <CmConvertToInternalFilename(char const*, unsigned char*)+0xf9>
c001359e:	83 ec 0c             	sub    esp,0xc
c00135a1:	68 4e 26 02 c0       	push   0xc002264e
c00135a6:	e8 e8 e0 ff ff       	call   c0011693 <KePanic(char const*)>
c00135ab:	83 c4 10             	add    esp,0x10
c00135ae:	b8 01 00 00 00       	mov    eax,0x1
c00135b3:	e9 9d 00 00 00       	jmp    c0013655 <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c00135b8:	47                   	inc    edi
c00135b9:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00135be:	88 44 3c 17          	mov    BYTE PTR [esp+edi*1+0x17],al
c00135c2:	74 02                	je     c00135c6 <CmConvertToInternalFilename(char const*, unsigned char*)+0x107>
c00135c4:	89 ee                	mov    esi,ebp
c00135c6:	83 ec 0c             	sub    esp,0xc
c00135c9:	53                   	push   ebx
c00135ca:	e8 a1 cf fe ff       	call   c0000570 <strlen>
c00135cf:	83 c4 10             	add    esp,0x10
c00135d2:	85 c0                	test   eax,eax
c00135d4:	74 06                	je     c00135dc <CmConvertToInternalFilename(char const*, unsigned char*)+0x11d>
c00135d6:	46                   	inc    esi
c00135d7:	e9 40 ff ff ff       	jmp    c001351c <CmConvertToInternalFilename(char const*, unsigned char*)+0x5d>
c00135dc:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00135e4:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00135ec:	31 f6                	xor    esi,esi
c00135ee:	50                   	push   eax
c00135ef:	31 ff                	xor    edi,edi
c00135f1:	6a 12                	push   0x12
c00135f3:	68 ee 00 00 00       	push   0xee
c00135f8:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c00135ff:	e8 ec ce fe ff       	call   c00004f0 <memset>
c0013604:	83 c4 10             	add    esp,0x10
c0013607:	83 fe 17             	cmp    esi,0x17
c001360a:	8d 6c 24 14          	lea    ebp,[esp+0x14]
c001360e:	7e 26                	jle    c0013636 <CmConvertToInternalFilename(char const*, unsigned char*)+0x177>
c0013610:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0013614:	50                   	push   eax
c0013615:	6a 08                	push   0x8
c0013617:	55                   	push   ebp
c0013618:	53                   	push   ebx
c0013619:	e8 2e fd ff ff       	call   c001334c <CmGetShift(unsigned int*, int*, int, bool*)>
c001361e:	83 c4 10             	add    esp,0x10
c0013621:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0013626:	74 26                	je     c001364e <CmConvertToInternalFilename(char const*, unsigned char*)+0x18f>
c0013628:	8b 8c 24 84 00 00 00 	mov    ecx,DWORD PTR [esp+0x84]
c001362f:	4e                   	dec    esi
c0013630:	88 04 39             	mov    BYTE PTR [ecx+edi*1],al
c0013633:	47                   	inc    edi
c0013634:	eb 1c                	jmp    c0013652 <CmConvertToInternalFilename(char const*, unsigned char*)+0x193>
c0013636:	6a 06                	push   0x6
c0013638:	0f b6 44 34 1c       	movzx  eax,BYTE PTR [esp+esi*1+0x1c]
c001363d:	50                   	push   eax
c001363e:	55                   	push   ebp
c001363f:	53                   	push   ebx
c0013640:	e8 d7 fc ff ff       	call   c001331c <CmAddShift(unsigned int*, int*, unsigned char, int)>
c0013645:	83 c4 10             	add    esp,0x10
c0013648:	84 c0                	test   al,al
c001364a:	75 06                	jne    c0013652 <CmConvertToInternalFilename(char const*, unsigned char*)+0x193>
c001364c:	eb c2                	jmp    c0013610 <CmConvertToInternalFilename(char const*, unsigned char*)+0x151>
c001364e:	31 c0                	xor    eax,eax
c0013650:	eb 03                	jmp    c0013655 <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c0013652:	46                   	inc    esi
c0013653:	eb b2                	jmp    c0013607 <CmConvertToInternalFilename(char const*, unsigned char*)+0x148>
c0013655:	83 c4 6c             	add    esp,0x6c
c0013658:	5b                   	pop    ebx
c0013659:	5e                   	pop    esi
c001365a:	5f                   	pop    edi
c001365b:	5d                   	pop    ebp
c001365c:	c3                   	ret    

c001365d <CmCreateString(Reghive_Tag*, int, char const*)>:
c001365d:	53                   	push   ebx
c001365e:	83 ec 3c             	sub    esp,0x3c
c0013661:	6a 2b                	push   0x2b
c0013663:	6a 00                	push   0x0
c0013665:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0013669:	53                   	push   ebx
c001366a:	e8 81 ce fe ff       	call   c00004f0 <memset>
c001366f:	58                   	pop    eax
c0013670:	5a                   	pop    edx
c0013671:	8d 44 24 11          	lea    eax,[esp+0x11]
c0013675:	50                   	push   eax
c0013676:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001367a:	e8 40 fe ff ff       	call   c00134bf <CmConvertToInternalFilename(char const*, unsigned char*)>
c001367f:	c6 44 24 15 c1       	mov    BYTE PTR [esp+0x15],0xc1
c0013684:	83 c4 0c             	add    esp,0xc
c0013687:	6a 15                	push   0x15
c0013689:	6a 00                	push   0x0
c001368b:	8d 44 24 27          	lea    eax,[esp+0x27]
c001368f:	50                   	push   eax
c0013690:	e8 5b ce fe ff       	call   c00004f0 <memset>
c0013695:	53                   	push   ebx
c0013696:	6a 00                	push   0x0
c0013698:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001369c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00136a0:	e8 e6 f9 ff ff       	call   c001308b <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c00136a5:	83 c4 58             	add    esp,0x58
c00136a8:	5b                   	pop    ebx
c00136a9:	c3                   	ret    

c00136aa <CmFindInDirectory(Reghive_Tag*, int, char const*)>:
c00136aa:	56                   	push   esi
c00136ab:	53                   	push   ebx
c00136ac:	83 ec 48             	sub    esp,0x48
c00136af:	6a 12                	push   0x12
c00136b1:	68 ff 00 00 00       	push   0xff
c00136b6:	8d 74 24 0f          	lea    esi,[esp+0xf]
c00136ba:	56                   	push   esi
c00136bb:	e8 30 ce fe ff       	call   c00004f0 <memset>
c00136c0:	5a                   	pop    edx
c00136c1:	59                   	pop    ecx
c00136c2:	56                   	push   esi
c00136c3:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c00136c7:	e8 f3 fd ff ff       	call   c00134bf <CmConvertToInternalFilename(char const*, unsigned char*)>
c00136cc:	83 c4 10             	add    esp,0x10
c00136cf:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c00136d3:	85 db                	test   ebx,ebx
c00136d5:	74 42                	je     c0013719 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x6f>
c00136d7:	50                   	push   eax
c00136d8:	8d 44 24 19          	lea    eax,[esp+0x19]
c00136dc:	50                   	push   eax
c00136dd:	53                   	push   ebx
c00136de:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00136e2:	e8 fa f6 ff ff       	call   c0012de1 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00136e7:	83 c4 0c             	add    esp,0xc
c00136ea:	6a 12                	push   0x12
c00136ec:	8d 44 24 21          	lea    eax,[esp+0x21]
c00136f0:	50                   	push   eax
c00136f1:	56                   	push   esi
c00136f2:	e8 89 cc fe ff       	call   c0000380 <memcmp>
c00136f7:	83 c4 10             	add    esp,0x10
c00136fa:	85 c0                	test   eax,eax
c00136fc:	74 1e                	je     c001371c <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x72>
c00136fe:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c0013703:	0f b6 5c 24 17       	movzx  ebx,BYTE PTR [esp+0x17]
c0013708:	c1 e3 08             	shl    ebx,0x8
c001370b:	09 d8                	or     eax,ebx
c001370d:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c0013712:	c1 e3 10             	shl    ebx,0x10
c0013715:	09 c3                	or     ebx,eax
c0013717:	eb ba                	jmp    c00136d3 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x29>
c0013719:	83 cb ff             	or     ebx,0xffffffff
c001371c:	89 d8                	mov    eax,ebx
c001371e:	83 c4 44             	add    esp,0x44
c0013721:	5b                   	pop    ebx
c0013722:	5e                   	pop    esi
c0013723:	c3                   	ret    

c0013724 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>:
c0013724:	57                   	push   edi
c0013725:	56                   	push   esi
c0013726:	53                   	push   ebx
c0013727:	83 ec 34             	sub    esp,0x34
c001372a:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001372e:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0013732:	6a 2b                	push   0x2b
c0013734:	6a 00                	push   0x0
c0013736:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c001373a:	53                   	push   ebx
c001373b:	e8 b0 cd fe ff       	call   c00004f0 <memset>
c0013740:	58                   	pop    eax
c0013741:	5a                   	pop    edx
c0013742:	8d 44 24 11          	lea    eax,[esp+0x11]
c0013746:	50                   	push   eax
c0013747:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001374b:	e8 6f fd ff ff       	call   c00134bf <CmConvertToInternalFilename(char const*, unsigned char*)>
c0013750:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0013754:	89 74 24 2b          	mov    DWORD PTR [esp+0x2b],esi
c0013758:	89 7c 24 2f          	mov    DWORD PTR [esp+0x2f],edi
c001375c:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c0013760:	53                   	push   ebx
c0013761:	6a 00                	push   0x0
c0013763:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0013767:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001376b:	e8 1b f9 ff ff       	call   c001308b <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0013770:	83 c4 50             	add    esp,0x50
c0013773:	5b                   	pop    ebx
c0013774:	5e                   	pop    esi
c0013775:	5f                   	pop    edi
c0013776:	c3                   	ret    

c0013777 <CmCreateDirectory(Reghive_Tag*, int, char const*)>:
c0013777:	55                   	push   ebp
c0013778:	57                   	push   edi
c0013779:	56                   	push   esi
c001377a:	53                   	push   ebx
c001377b:	83 ec 40             	sub    esp,0x40
c001377e:	8b 6c 24 58          	mov    ebp,DWORD PTR [esp+0x58]
c0013782:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0013786:	6a 2b                	push   0x2b
c0013788:	6a 00                	push   0x0
c001378a:	8d 74 24 11          	lea    esi,[esp+0x11]
c001378e:	56                   	push   esi
c001378f:	e8 5c cd fe ff       	call   c00004f0 <memset>
c0013794:	5f                   	pop    edi
c0013795:	89 ef                	mov    edi,ebp
c0013797:	58                   	pop    eax
c0013798:	8d 44 24 11          	lea    eax,[esp+0x11]
c001379c:	50                   	push   eax
c001379d:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c00137a1:	e8 19 fd ff ff       	call   c00134bf <CmConvertToInternalFilename(char const*, unsigned char*)>
c00137a6:	c6 44 24 15 4e       	mov    BYTE PTR [esp+0x15],0x4e
c00137ab:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c00137b0:	c6 44 24 2c 00       	mov    BYTE PTR [esp+0x2c],0x0
c00137b5:	c6 44 24 2d 00       	mov    BYTE PTR [esp+0x2d],0x0
c00137ba:	83 c4 10             	add    esp,0x10
c00137bd:	85 ed                	test   ebp,ebp
c00137bf:	74 14                	je     c00137d5 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c00137c1:	51                   	push   ecx
c00137c2:	51                   	push   ecx
c00137c3:	57                   	push   edi
c00137c4:	53                   	push   ebx
c00137c5:	e8 09 f7 ff ff       	call   c0012ed3 <CmGetNext(Reghive_Tag*, int)>
c00137ca:	83 c4 10             	add    esp,0x10
c00137cd:	85 c0                	test   eax,eax
c00137cf:	74 04                	je     c00137d5 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c00137d1:	89 c7                	mov    edi,eax
c00137d3:	eb e8                	jmp    c00137bd <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x46>
c00137d5:	56                   	push   esi
c00137d6:	6a 00                	push   0x0
c00137d8:	57                   	push   edi
c00137d9:	53                   	push   ebx
c00137da:	e8 ac f8 ff ff       	call   c001308b <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c00137df:	83 c4 0c             	add    esp,0xc
c00137e2:	89 c7                	mov    edi,eax
c00137e4:	56                   	push   esi
c00137e5:	50                   	push   eax
c00137e6:	53                   	push   ebx
c00137e7:	e8 f5 f5 ff ff       	call   c0012de1 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00137ec:	58                   	pop    eax
c00137ed:	5a                   	pop    edx
c00137ee:	6a 6c                	push   0x6c
c00137f0:	6a 00                	push   0x0
c00137f2:	6a 00                	push   0x0
c00137f4:	68 5f 26 02 c0       	push   0xc002265f
c00137f9:	57                   	push   edi
c00137fa:	53                   	push   ebx
c00137fb:	e8 24 ff ff ff       	call   c0013724 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>
c0013800:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c0013804:	88 64 24 3c          	mov    BYTE PTR [esp+0x3c],ah
c0013808:	c1 e8 10             	shr    eax,0x10
c001380b:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c001380f:	83 c4 1c             	add    esp,0x1c
c0013812:	56                   	push   esi
c0013813:	57                   	push   edi
c0013814:	53                   	push   ebx
c0013815:	e8 eb f6 ff ff       	call   c0012f05 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c001381a:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c001381f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0013824:	c1 e0 08             	shl    eax,0x8
c0013827:	09 c2                	or     edx,eax
c0013829:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001382e:	83 c4 4c             	add    esp,0x4c
c0013831:	c1 e0 10             	shl    eax,0x10
c0013834:	5b                   	pop    ebx
c0013835:	09 d0                	or     eax,edx
c0013837:	5e                   	pop    esi
c0013838:	5f                   	pop    edi
c0013839:	5d                   	pop    ebp
c001383a:	c3                   	ret    

c001383b <zStrtok(char*, char const*)>:
c001383b:	55                   	push   ebp
c001383c:	57                   	push   edi
c001383d:	56                   	push   esi
c001383e:	53                   	push   ebx
c001383f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013843:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013847:	85 db                	test   ebx,ebx
c0013849:	74 2f                	je     c001387a <zStrtok(char*, char const*)+0x3f>
c001384b:	85 c0                	test   eax,eax
c001384d:	75 09                	jne    c0013858 <zStrtok(char*, char const*)+0x1d>
c001384f:	a1 f0 be 02 c0       	mov    eax,ds:0xc002bef0
c0013854:	85 c0                	test   eax,eax
c0013856:	74 50                	je     c00138a8 <zStrtok(char*, char const*)+0x6d>
c0013858:	31 c9                	xor    ecx,ecx
c001385a:	80 3c 08 00          	cmp    BYTE PTR [eax+ecx*1],0x0
c001385e:	74 03                	je     c0013863 <zStrtok(char*, char const*)+0x28>
c0013860:	41                   	inc    ecx
c0013861:	eb f7                	jmp    c001385a <zStrtok(char*, char const*)+0x1f>
c0013863:	31 d2                	xor    edx,edx
c0013865:	39 ca                	cmp    edx,ecx
c0013867:	74 15                	je     c001387e <zStrtok(char*, char const*)+0x43>
c0013869:	0f be 34 10          	movsx  esi,BYTE PTR [eax+edx*1]
c001386d:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c0013870:	8d 3c 10             	lea    edi,[eax+edx*1]
c0013873:	39 ee                	cmp    esi,ebp
c0013875:	74 13                	je     c001388a <zStrtok(char*, char const*)+0x4f>
c0013877:	42                   	inc    edx
c0013878:	eb eb                	jmp    c0013865 <zStrtok(char*, char const*)+0x2a>
c001387a:	31 c0                	xor    eax,eax
c001387c:	eb 2a                	jmp    c00138a8 <zStrtok(char*, char const*)+0x6d>
c001387e:	c7 05 f0 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bef0,0x0
c0013888:	eb 1e                	jmp    c00138a8 <zStrtok(char*, char const*)+0x6d>
c001388a:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c001388d:	39 ce                	cmp    esi,ecx
c001388f:	75 0a                	jne    c001389b <zStrtok(char*, char const*)+0x60>
c0013891:	40                   	inc    eax
c0013892:	a3 f0 be 02 c0       	mov    ds:0xc002bef0,eax
c0013897:	89 d8                	mov    eax,ebx
c0013899:	eb 0d                	jmp    c00138a8 <zStrtok(char*, char const*)+0x6d>
c001389b:	8d 54 10 01          	lea    edx,[eax+edx*1+0x1]
c001389f:	c6 07 00             	mov    BYTE PTR [edi],0x0
c00138a2:	89 15 f0 be 02 c0    	mov    DWORD PTR ds:0xc002bef0,edx
c00138a8:	5b                   	pop    ebx
c00138a9:	5e                   	pop    esi
c00138aa:	5f                   	pop    edi
c00138ab:	5d                   	pop    ebp
c00138ac:	c3                   	ret    

c00138ad <CmFindObjectFromPath(Reghive_Tag*, char const*)>:
c00138ad:	57                   	push   edi
c00138ae:	56                   	push   esi
c00138af:	53                   	push   ebx
c00138b0:	81 ec 08 01 00 00    	sub    esp,0x108
c00138b6:	8b bc 24 18 01 00 00 	mov    edi,DWORD PTR [esp+0x118]
c00138bd:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c00138c4:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c00138c8:	53                   	push   ebx
c00138c9:	e8 72 cd fe ff       	call   c0000640 <strcpy>
c00138ce:	59                   	pop    ecx
c00138cf:	5e                   	pop    esi
c00138d0:	68 c3 29 02 c0       	push   0xc00229c3
c00138d5:	53                   	push   ebx
c00138d6:	bb 01 00 00 00       	mov    ebx,0x1
c00138db:	e8 5b ff ff ff       	call   c001383b <zStrtok(char*, char const*)>
c00138e0:	83 c4 10             	add    esp,0x10
c00138e3:	85 c0                	test   eax,eax
c00138e5:	74 3b                	je     c0013922 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c00138e7:	52                   	push   edx
c00138e8:	50                   	push   eax
c00138e9:	6a 01                	push   0x1
c00138eb:	57                   	push   edi
c00138ec:	e8 b9 fd ff ff       	call   c00136aa <CmFindInDirectory(Reghive_Tag*, int, char const*)>
c00138f1:	59                   	pop    ecx
c00138f2:	89 c3                	mov    ebx,eax
c00138f4:	5e                   	pop    esi
c00138f5:	68 c3 29 02 c0       	push   0xc00229c3
c00138fa:	6a 00                	push   0x0
c00138fc:	e8 3a ff ff ff       	call   c001383b <zStrtok(char*, char const*)>
c0013901:	83 c4 10             	add    esp,0x10
c0013904:	89 c6                	mov    esi,eax
c0013906:	85 c0                	test   eax,eax
c0013908:	74 18                	je     c0013922 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c001390a:	52                   	push   edx
c001390b:	52                   	push   edx
c001390c:	53                   	push   ebx
c001390d:	57                   	push   edi
c001390e:	e8 81 f5 ff ff       	call   c0012e94 <CmEnterDirectory(Reghive_Tag*, int)>
c0013913:	83 c4 10             	add    esp,0x10
c0013916:	89 c3                	mov    ebx,eax
c0013918:	83 f8 ff             	cmp    eax,0xffffffff
c001391b:	74 05                	je     c0013922 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c001391d:	50                   	push   eax
c001391e:	56                   	push   esi
c001391f:	53                   	push   ebx
c0013920:	eb c9                	jmp    c00138eb <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x3e>
c0013922:	81 c4 00 01 00 00    	add    esp,0x100
c0013928:	89 d8                	mov    eax,ebx
c001392a:	5b                   	pop    ebx
c001392b:	5e                   	pop    esi
c001392c:	5f                   	pop    edi
c001392d:	c3                   	ret    

c001392e <CmDisplayTree(Reghive_Tag*, int, int)>:
c001392e:	55                   	push   ebp
c001392f:	57                   	push   edi
c0013930:	56                   	push   esi
c0013931:	53                   	push   ebx
c0013932:	83 ec 5c             	sub    esp,0x5c
c0013935:	8b 74 24 70          	mov    esi,DWORD PTR [esp+0x70]
c0013939:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c001393d:	85 db                	test   ebx,ebx
c001393f:	0f 8e 84 00 00 00    	jle    c00139c9 <CmDisplayTree(Reghive_Tag*, int, int)+0x9b>
c0013945:	31 ed                	xor    ebp,ebp
c0013947:	57                   	push   edi
c0013948:	6a 32                	push   0x32
c001394a:	6a 00                	push   0x0
c001394c:	8d 7c 24 2a          	lea    edi,[esp+0x2a]
c0013950:	57                   	push   edi
c0013951:	e8 9a cb fe ff       	call   c00004f0 <memset>
c0013956:	83 c4 0c             	add    esp,0xc
c0013959:	57                   	push   edi
c001395a:	53                   	push   ebx
c001395b:	56                   	push   esi
c001395c:	e8 30 fb ff ff       	call   c0013491 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0013961:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013965:	83 c4 10             	add    esp,0x10
c0013968:	3b 6c 24 78          	cmp    ebp,DWORD PTR [esp+0x78]
c001396c:	7d 13                	jge    c0013981 <CmDisplayTree(Reghive_Tag*, int, int)+0x53>
c001396e:	83 ec 0c             	sub    esp,0xc
c0013971:	45                   	inc    ebp
c0013972:	68 67 2d 02 c0       	push   0xc0022d67
c0013977:	e8 c9 6f ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001397c:	83 c4 10             	add    esp,0x10
c001397f:	eb e7                	jmp    c0013968 <CmDisplayTree(Reghive_Tag*, int, int)+0x3a>
c0013981:	51                   	push   ecx
c0013982:	57                   	push   edi
c0013983:	53                   	push   ebx
c0013984:	68 65 26 02 c0       	push   0xc0022665
c0013989:	e8 b7 6f ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001398e:	83 c4 10             	add    esp,0x10
c0013991:	83 7c 24 0c 4e       	cmp    DWORD PTR [esp+0xc],0x4e
c0013996:	75 1e                	jne    c00139b6 <CmDisplayTree(Reghive_Tag*, int, int)+0x88>
c0013998:	52                   	push   edx
c0013999:	52                   	push   edx
c001399a:	53                   	push   ebx
c001399b:	56                   	push   esi
c001399c:	e8 f3 f4 ff ff       	call   c0012e94 <CmEnterDirectory(Reghive_Tag*, int)>
c00139a1:	83 c4 0c             	add    esp,0xc
c00139a4:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c00139a8:	8d 51 04             	lea    edx,[ecx+0x4]
c00139ab:	52                   	push   edx
c00139ac:	50                   	push   eax
c00139ad:	56                   	push   esi
c00139ae:	e8 7b ff ff ff       	call   c001392e <CmDisplayTree(Reghive_Tag*, int, int)>
c00139b3:	83 c4 10             	add    esp,0x10
c00139b6:	50                   	push   eax
c00139b7:	50                   	push   eax
c00139b8:	53                   	push   ebx
c00139b9:	56                   	push   esi
c00139ba:	e8 14 f5 ff ff       	call   c0012ed3 <CmGetNext(Reghive_Tag*, int)>
c00139bf:	83 c4 10             	add    esp,0x10
c00139c2:	89 c3                	mov    ebx,eax
c00139c4:	e9 74 ff ff ff       	jmp    c001393d <CmDisplayTree(Reghive_Tag*, int, int)+0xf>
c00139c9:	83 c4 5c             	add    esp,0x5c
c00139cc:	5b                   	pop    ebx
c00139cd:	5e                   	pop    esi
c00139ce:	5f                   	pop    edi
c00139cf:	5d                   	pop    ebp
c00139d0:	c3                   	ret    

c00139d1 <CmSplitFinalSlashInPlace(char*)>:
c00139d1:	53                   	push   ebx
c00139d2:	83 ec 14             	sub    esp,0x14
c00139d5:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00139d9:	53                   	push   ebx
c00139da:	e8 91 cb fe ff       	call   c0000570 <strlen>
c00139df:	83 c4 10             	add    esp,0x10
c00139e2:	48                   	dec    eax
c00139e3:	85 c0                	test   eax,eax
c00139e5:	74 15                	je     c00139fc <CmSplitFinalSlashInPlace(char*)+0x2b>
c00139e7:	8d 14 03             	lea    edx,[ebx+eax*1]
c00139ea:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c00139ee:	75 09                	jne    c00139f9 <CmSplitFinalSlashInPlace(char*)+0x28>
c00139f0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00139f3:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c00139f7:	eb 05                	jmp    c00139fe <CmSplitFinalSlashInPlace(char*)+0x2d>
c00139f9:	48                   	dec    eax
c00139fa:	eb e7                	jmp    c00139e3 <CmSplitFinalSlashInPlace(char*)+0x12>
c00139fc:	31 c0                	xor    eax,eax
c00139fe:	83 c4 08             	add    esp,0x8
c0013a01:	5b                   	pop    ebx
c0013a02:	c3                   	ret    

c0013a03 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0013a03:	55                   	push   ebp
c0013a04:	57                   	push   edi
c0013a05:	56                   	push   esi
c0013a06:	53                   	push   ebx
c0013a07:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0013a0d:	8b 9c 24 44 01 00 00 	mov    ebx,DWORD PTR [esp+0x144]
c0013a14:	8a 13                	mov    dl,BYTE PTR [ebx]
c0013a16:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0013a19:	80 fa 40             	cmp    dl,0x40
c0013a1c:	75 1c                	jne    c0013a3a <Reg::findLineFromLoadedData(char*, char*, char*)+0x37>
c0013a1e:	0f be 0b             	movsx  ecx,BYTE PTR [ebx]
c0013a21:	85 c9                	test   ecx,ecx
c0013a23:	0f 84 09 01 00 00    	je     c0013b32 <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c0013a29:	8d 43 01             	lea    eax,[ebx+0x1]
c0013a2c:	83 f9 3a             	cmp    ecx,0x3a
c0013a2f:	74 04                	je     c0013a35 <Reg::findLineFromLoadedData(char*, char*, char*)+0x32>
c0013a31:	89 c3                	mov    ebx,eax
c0013a33:	eb e9                	jmp    c0013a1e <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c0013a35:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0013a38:	89 c3                	mov    ebx,eax
c0013a3a:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0013a3e:	50                   	push   eax
c0013a3f:	6a 40                	push   0x40
c0013a41:	6a 00                	push   0x0
c0013a43:	8d 44 24 24          	lea    eax,[esp+0x24]
c0013a47:	50                   	push   eax
c0013a48:	e8 a3 ca fe ff       	call   c00004f0 <memset>
c0013a4d:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0013a54:	31 c0                	xor    eax,eax
c0013a56:	83 c4 10             	add    esp,0x10
c0013a59:	0f be 74 24 0c       	movsx  esi,BYTE PTR [esp+0xc]
c0013a5e:	0f be 17             	movsx  edx,BYTE PTR [edi]
c0013a61:	89 d1                	mov    ecx,edx
c0013a63:	85 d2                	test   edx,edx
c0013a65:	0f 84 c7 00 00 00    	je     c0013b32 <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c0013a6b:	3d c7 00 00 00       	cmp    eax,0xc7
c0013a70:	0f 8f bc 00 00 00    	jg     c0013b32 <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c0013a76:	83 fa 0a             	cmp    edx,0xa
c0013a79:	0f 85 a4 00 00 00    	jne    c0013b23 <Reg::findLineFromLoadedData(char*, char*, char*)+0x120>
c0013a7f:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c0013a84:	0f be 4c 24 58       	movsx  ecx,BYTE PTR [esp+0x58]
c0013a89:	89 c8                	mov    eax,ecx
c0013a8b:	a8 df                	test   al,0xdf
c0013a8d:	0f 94 c2             	sete   dl
c0013a90:	83 f9 23             	cmp    ecx,0x23
c0013a93:	0f 94 44 24 0c       	sete   BYTE PTR [esp+0xc]
c0013a98:	0b 54 24 0c          	or     edx,DWORD PTR [esp+0xc]
c0013a9c:	80 e2 01             	and    dl,0x1
c0013a9f:	75 4a                	jne    c0013aeb <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0013aa1:	83 e8 09             	sub    eax,0x9
c0013aa4:	3c 01                	cmp    al,0x1
c0013aa6:	76 43                	jbe    c0013aeb <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0013aa8:	83 f9 5b             	cmp    ecx,0x5b
c0013aab:	75 42                	jne    c0013aef <Reg::findLineFromLoadedData(char*, char*, char*)+0xec>
c0013aad:	83 fe 40             	cmp    esi,0x40
c0013ab0:	75 39                	jne    c0013aeb <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0013ab2:	83 ec 0c             	sub    esp,0xc
c0013ab5:	8d 54 24 65          	lea    edx,[esp+0x65]
c0013ab9:	52                   	push   edx
c0013aba:	e8 b1 ca fe ff       	call   c0000570 <strlen>
c0013abf:	83 c4 10             	add    esp,0x10
c0013ac2:	83 f8 3f             	cmp    eax,0x3f
c0013ac5:	77 6b                	ja     c0013b32 <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c0013ac7:	50                   	push   eax
c0013ac8:	50                   	push   eax
c0013ac9:	8d 54 24 61          	lea    edx,[esp+0x61]
c0013acd:	52                   	push   edx
c0013ace:	8d 54 24 24          	lea    edx,[esp+0x24]
c0013ad2:	52                   	push   edx
c0013ad3:	e8 68 cb fe ff       	call   c0000640 <strcpy>
c0013ad8:	58                   	pop    eax
c0013ad9:	8d 54 24 24          	lea    edx,[esp+0x24]
c0013add:	52                   	push   edx
c0013ade:	e8 8d ca fe ff       	call   c0000570 <strlen>
c0013ae3:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0013ae8:	83 c4 10             	add    esp,0x10
c0013aeb:	31 d2                	xor    edx,edx
c0013aed:	eb 3b                	jmp    c0013b2a <Reg::findLineFromLoadedData(char*, char*, char*)+0x127>
c0013aef:	83 fe 40             	cmp    esi,0x40
c0013af2:	74 06                	je     c0013afa <Reg::findLineFromLoadedData(char*, char*, char*)+0xf7>
c0013af4:	8d 44 24 58          	lea    eax,[esp+0x58]
c0013af8:	eb 20                	jmp    c0013b1a <Reg::findLineFromLoadedData(char*, char*, char*)+0x117>
c0013afa:	50                   	push   eax
c0013afb:	50                   	push   eax
c0013afc:	55                   	push   ebp
c0013afd:	8d 44 24 24          	lea    eax,[esp+0x24]
c0013b01:	50                   	push   eax
c0013b02:	e8 49 cc fe ff       	call   c0000750 <strcmp>
c0013b07:	83 c4 10             	add    esp,0x10
c0013b0a:	85 c0                	test   eax,eax
c0013b0c:	75 dd                	jne    c0013aeb <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0013b0e:	eb e4                	jmp    c0013af4 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf1>
c0013b10:	8d 50 01             	lea    edx,[eax+0x1]
c0013b13:	83 f9 3d             	cmp    ecx,0x3d
c0013b16:	74 1e                	je     c0013b36 <Reg::findLineFromLoadedData(char*, char*, char*)+0x133>
c0013b18:	89 d0                	mov    eax,edx
c0013b1a:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0013b1d:	85 c9                	test   ecx,ecx
c0013b1f:	75 ef                	jne    c0013b10 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10d>
c0013b21:	eb 0f                	jmp    c0013b32 <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c0013b23:	8d 50 01             	lea    edx,[eax+0x1]
c0013b26:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c0013b2a:	47                   	inc    edi
c0013b2b:	89 d0                	mov    eax,edx
c0013b2d:	e9 2c ff ff ff       	jmp    c0013a5e <Reg::findLineFromLoadedData(char*, char*, char*)+0x5b>
c0013b32:	31 c0                	xor    eax,eax
c0013b34:	eb 33                	jmp    c0013b69 <Reg::findLineFromLoadedData(char*, char*, char*)+0x166>
c0013b36:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0013b3a:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0013b3d:	50                   	push   eax
c0013b3e:	50                   	push   eax
c0013b3f:	8d 44 24 60          	lea    eax,[esp+0x60]
c0013b43:	50                   	push   eax
c0013b44:	53                   	push   ebx
c0013b45:	e8 06 cc fe ff       	call   c0000750 <strcmp>
c0013b4a:	83 c4 10             	add    esp,0x10
c0013b4d:	85 c0                	test   eax,eax
c0013b4f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013b53:	75 96                	jne    c0013aeb <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0013b55:	51                   	push   ecx
c0013b56:	51                   	push   ecx
c0013b57:	52                   	push   edx
c0013b58:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0013b5f:	e8 dc ca fe ff       	call   c0000640 <strcpy>
c0013b64:	83 c4 10             	add    esp,0x10
c0013b67:	b0 01                	mov    al,0x1
c0013b69:	81 c4 2c 01 00 00    	add    esp,0x12c
c0013b6f:	5b                   	pop    ebx
c0013b70:	5e                   	pop    esi
c0013b71:	5f                   	pop    edi
c0013b72:	5d                   	pop    ebp
c0013b73:	c3                   	ret    

c0013b74 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0013b74:	57                   	push   edi
c0013b75:	56                   	push   esi
c0013b76:	53                   	push   ebx
c0013b77:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0013b7d:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c0013b84:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0013b8b:	53                   	push   ebx
c0013b8c:	e8 df c9 fe ff       	call   c0000570 <strlen>
c0013b91:	89 34 24             	mov    DWORD PTR [esp],esi
c0013b94:	89 c7                	mov    edi,eax
c0013b96:	e8 d5 c9 fe ff       	call   c0000570 <strlen>
c0013b9b:	83 c4 10             	add    esp,0x10
c0013b9e:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0013ba2:	3d ff 00 00 00       	cmp    eax,0xff
c0013ba7:	0f 87 d3 00 00 00    	ja     c0013c80 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0013bad:	57                   	push   edi
c0013bae:	57                   	push   edi
c0013baf:	56                   	push   esi
c0013bb0:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0013bb4:	56                   	push   esi
c0013bb5:	e8 86 ca fe ff       	call   c0000640 <strcpy>
c0013bba:	58                   	pop    eax
c0013bbb:	5a                   	pop    edx
c0013bbc:	68 c3 29 02 c0       	push   0xc00229c3
c0013bc1:	56                   	push   esi
c0013bc2:	e8 79 cc fe ff       	call   c0000840 <strcat>
c0013bc7:	59                   	pop    ecx
c0013bc8:	5f                   	pop    edi
c0013bc9:	53                   	push   ebx
c0013bca:	56                   	push   esi
c0013bcb:	e8 70 cc fe ff       	call   c0000840 <strcat>
c0013bd0:	58                   	pop    eax
c0013bd1:	5a                   	pop    edx
c0013bd2:	68 6f 26 02 c0       	push   0xc002266f
c0013bd7:	56                   	push   esi
c0013bd8:	e8 63 cc fe ff       	call   c0000840 <strcat>
c0013bdd:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0013be4:	e8 cd 3e ff ff       	call   c0007ab6 <malloc>
c0013be9:	83 c4 0c             	add    esp,0xc
c0013bec:	89 c3                	mov    ebx,eax
c0013bee:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c0013bf4:	56                   	push   esi
c0013bf5:	50                   	push   eax
c0013bf6:	e8 c7 7f ff ff       	call   c000bbc2 <File::File(char const*, Process*)>
c0013bfb:	83 c4 10             	add    esp,0x10
c0013bfe:	85 db                	test   ebx,ebx
c0013c00:	74 7e                	je     c0013c80 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0013c02:	51                   	push   ecx
c0013c03:	51                   	push   ecx
c0013c04:	6a 01                	push   0x1
c0013c06:	53                   	push   ebx
c0013c07:	e8 d4 7f ff ff       	call   c000bbe0 <File::open(FileOpenMode)>
c0013c0c:	83 c4 10             	add    esp,0x10
c0013c0f:	85 c0                	test   eax,eax
c0013c11:	74 08                	je     c0013c1b <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c0013c13:	83 ec 0c             	sub    esp,0xc
c0013c16:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013c18:	53                   	push   ebx
c0013c19:	eb 5f                	jmp    c0013c7a <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0013c1b:	52                   	push   edx
c0013c1c:	8d 44 24 17          	lea    eax,[esp+0x17]
c0013c20:	50                   	push   eax
c0013c21:	8d 44 24 20          	lea    eax,[esp+0x20]
c0013c25:	50                   	push   eax
c0013c26:	53                   	push   ebx
c0013c27:	e8 b6 82 ff ff       	call   c000bee2 <File::stat(unsigned long long*, bool*)>
c0013c2c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013c30:	83 c4 10             	add    esp,0x10
c0013c33:	89 c1                	mov    ecx,eax
c0013c35:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c0013c39:	74 31                	je     c0013c6c <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0013c3b:	83 ec 0c             	sub    esp,0xc
c0013c3e:	50                   	push   eax
c0013c3f:	e8 72 3e ff ff       	call   c0007ab6 <malloc>
c0013c44:	89 c6                	mov    esi,eax
c0013c46:	58                   	pop    eax
c0013c47:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013c49:	8d 54 24 20          	lea    edx,[esp+0x20]
c0013c4d:	52                   	push   edx
c0013c4e:	56                   	push   esi
c0013c4f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0013c53:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0013c57:	53                   	push   ebx
c0013c58:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013c5b:	83 c4 20             	add    esp,0x20
c0013c5e:	85 c0                	test   eax,eax
c0013c60:	75 0a                	jne    c0013c6c <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0013c62:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013c66:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0013c6a:	74 18                	je     c0013c84 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c0013c6c:	83 ec 0c             	sub    esp,0xc
c0013c6f:	53                   	push   ebx
c0013c70:	e8 c9 7f ff ff       	call   c000bc3e <File::close()>
c0013c75:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013c77:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013c7a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013c7d:	83 c4 10             	add    esp,0x10
c0013c80:	31 c0                	xor    eax,eax
c0013c82:	eb 3b                	jmp    c0013cbf <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c0013c84:	83 ec 0c             	sub    esp,0xc
c0013c87:	53                   	push   ebx
c0013c88:	e8 b1 7f ff ff       	call   c000bc3e <File::close()>
c0013c8d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013c8f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013c92:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013c95:	83 c4 0c             	add    esp,0xc
c0013c98:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0013c9f:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0013ca6:	56                   	push   esi
c0013ca7:	e8 57 fd ff ff       	call   c0013a03 <Reg::findLineFromLoadedData(char*, char*, char*)>
c0013cac:	89 34 24             	mov    DWORD PTR [esp],esi
c0013caf:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0013cb3:	e8 0e 3e ff ff       	call   c0007ac6 <free>
c0013cb8:	83 c4 10             	add    esp,0x10
c0013cbb:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0013cbf:	81 c4 20 01 00 00    	add    esp,0x120
c0013cc5:	5b                   	pop    ebx
c0013cc6:	5e                   	pop    esi
c0013cc7:	5f                   	pop    edi
c0013cc8:	c3                   	ret    

c0013cc9 <Reg::getLine(char*, char*, char*)>:
c0013cc9:	57                   	push   edi
c0013cca:	56                   	push   esi
c0013ccb:	53                   	push   ebx
c0013ccc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013cd0:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013cd4:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013cd8:	57                   	push   edi
c0013cd9:	56                   	push   esi
c0013cda:	53                   	push   ebx
c0013cdb:	68 74 26 02 c0       	push   0xc0022674
c0013ce0:	e8 8f fe ff ff       	call   c0013b74 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0013ce5:	83 c4 10             	add    esp,0x10
c0013ce8:	84 c0                	test   al,al
c0013cea:	75 10                	jne    c0013cfc <Reg::getLine(char*, char*, char*)+0x33>
c0013cec:	57                   	push   edi
c0013ced:	56                   	push   esi
c0013cee:	53                   	push   ebx
c0013cef:	68 99 26 02 c0       	push   0xc0022699
c0013cf4:	e8 7b fe ff ff       	call   c0013b74 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0013cf9:	83 c4 10             	add    esp,0x10
c0013cfc:	5b                   	pop    ebx
c0013cfd:	5e                   	pop    esi
c0013cfe:	5f                   	pop    edi
c0013cff:	c3                   	ret    

c0013d00 <Reg::readInt(char*, char*, int*)>:
c0013d00:	55                   	push   ebp
c0013d01:	57                   	push   edi
c0013d02:	56                   	push   esi
c0013d03:	53                   	push   ebx
c0013d04:	81 ec f0 00 00 00    	sub    esp,0xf0
c0013d0a:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0013d0e:	55                   	push   ebp
c0013d0f:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0013d16:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0013d1d:	e8 a7 ff ff ff       	call   c0013cc9 <Reg::getLine(char*, char*, char*)>
c0013d22:	83 c4 10             	add    esp,0x10
c0013d25:	84 c0                	test   al,al
c0013d27:	0f 84 b6 00 00 00    	je     c0013de3 <Reg::readInt(char*, char*, int*)+0xe3>
c0013d2d:	0f be 54 24 18       	movsx  edx,BYTE PTR [esp+0x18]
c0013d32:	83 fa 2b             	cmp    edx,0x2b
c0013d35:	74 0c                	je     c0013d43 <Reg::readInt(char*, char*, int*)+0x43>
c0013d37:	83 fa 2d             	cmp    edx,0x2d
c0013d3a:	75 0e                	jne    c0013d4a <Reg::readInt(char*, char*, int*)+0x4a>
c0013d3c:	ba 01 00 00 00       	mov    edx,0x1
c0013d41:	eb 0b                	jmp    c0013d4e <Reg::readInt(char*, char*, int*)+0x4e>
c0013d43:	ba 01 00 00 00       	mov    edx,0x1
c0013d48:	eb 02                	jmp    c0013d4c <Reg::readInt(char*, char*, int*)+0x4c>
c0013d4a:	31 d2                	xor    edx,edx
c0013d4c:	31 c0                	xor    eax,eax
c0013d4e:	be 0a 00 00 00       	mov    esi,0xa
c0013d53:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c0013d58:	75 21                	jne    c0013d7b <Reg::readInt(char*, char*, int*)+0x7b>
c0013d5a:	0f be 4c 14 19       	movsx  ecx,BYTE PTR [esp+edx*1+0x19]
c0013d5f:	83 f9 78             	cmp    ecx,0x78
c0013d62:	75 0a                	jne    c0013d6e <Reg::readInt(char*, char*, int*)+0x6e>
c0013d64:	83 c2 02             	add    edx,0x2
c0013d67:	be 10 00 00 00       	mov    esi,0x10
c0013d6c:	eb 0d                	jmp    c0013d7b <Reg::readInt(char*, char*, int*)+0x7b>
c0013d6e:	83 f9 62             	cmp    ecx,0x62
c0013d71:	75 08                	jne    c0013d7b <Reg::readInt(char*, char*, int*)+0x7b>
c0013d73:	83 c2 02             	add    edx,0x2
c0013d76:	be 02 00 00 00       	mov    esi,0x2
c0013d7b:	01 d5                	add    ebp,edx
c0013d7d:	31 d2                	xor    edx,edx
c0013d7f:	0f be 4d 00          	movsx  ecx,BYTE PTR [ebp+0x0]
c0013d83:	83 f9 0d             	cmp    ecx,0xd
c0013d86:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0013d8a:	0f 94 c3             	sete   bl
c0013d8d:	85 c9                	test   ecx,ecx
c0013d8f:	89 df                	mov    edi,ebx
c0013d91:	0f 94 c3             	sete   bl
c0013d94:	09 df                	or     edi,ebx
c0013d96:	89 fb                	mov    ebx,edi
c0013d98:	83 e7 01             	and    edi,0x1
c0013d9b:	75 35                	jne    c0013dd2 <Reg::readInt(char*, char*, int*)+0xd2>
c0013d9d:	0f af d6             	imul   edx,esi
c0013da0:	83 fe 10             	cmp    esi,0x10
c0013da3:	75 26                	jne    c0013dcb <Reg::readInt(char*, char*, int*)+0xcb>
c0013da5:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0013da9:	83 ef 41             	sub    edi,0x41
c0013dac:	89 fb                	mov    ebx,edi
c0013dae:	80 fb 05             	cmp    bl,0x5
c0013db1:	77 06                	ja     c0013db9 <Reg::readInt(char*, char*, int*)+0xb9>
c0013db3:	8d 54 0a c9          	lea    edx,[edx+ecx*1-0x37]
c0013db7:	eb 16                	jmp    c0013dcf <Reg::readInt(char*, char*, int*)+0xcf>
c0013db9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013dbd:	83 eb 61             	sub    ebx,0x61
c0013dc0:	80 fb 05             	cmp    bl,0x5
c0013dc3:	77 06                	ja     c0013dcb <Reg::readInt(char*, char*, int*)+0xcb>
c0013dc5:	8d 54 0a a9          	lea    edx,[edx+ecx*1-0x57]
c0013dc9:	eb 04                	jmp    c0013dcf <Reg::readInt(char*, char*, int*)+0xcf>
c0013dcb:	8d 54 0a d0          	lea    edx,[edx+ecx*1-0x30]
c0013dcf:	45                   	inc    ebp
c0013dd0:	eb ad                	jmp    c0013d7f <Reg::readInt(char*, char*, int*)+0x7f>
c0013dd2:	84 c0                	test   al,al
c0013dd4:	74 02                	je     c0013dd8 <Reg::readInt(char*, char*, int*)+0xd8>
c0013dd6:	f7 da                	neg    edx
c0013dd8:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c0013ddf:	89 10                	mov    DWORD PTR [eax],edx
c0013de1:	88 d8                	mov    al,bl
c0013de3:	81 c4 ec 00 00 00    	add    esp,0xec
c0013de9:	5b                   	pop    ebx
c0013dea:	5e                   	pop    esi
c0013deb:	5f                   	pop    edi
c0013dec:	5d                   	pop    ebp
c0013ded:	c3                   	ret    

c0013dee <Reg::readString(char*, char*, char*, int)>:
c0013dee:	57                   	push   edi
c0013def:	56                   	push   esi
c0013df0:	53                   	push   ebx
c0013df1:	81 ec d4 00 00 00    	sub    esp,0xd4
c0013df7:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c0013dfe:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0013e02:	57                   	push   edi
c0013e03:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0013e0a:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0013e11:	e8 b3 fe ff ff       	call   c0013cc9 <Reg::getLine(char*, char*, char*)>
c0013e16:	83 c4 10             	add    esp,0x10
c0013e19:	89 c6                	mov    esi,eax
c0013e1b:	84 c0                	test   al,al
c0013e1d:	74 44                	je     c0013e63 <Reg::readString(char*, char*, char*, int)+0x75>
c0013e1f:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c0013e26:	31 c0                	xor    eax,eax
c0013e28:	4a                   	dec    edx
c0013e29:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c0013e2c:	84 c9                	test   cl,cl
c0013e2e:	74 0f                	je     c0013e3f <Reg::readString(char*, char*, char*, int)+0x51>
c0013e30:	39 c2                	cmp    edx,eax
c0013e32:	7e 0b                	jle    c0013e3f <Reg::readString(char*, char*, char*, int)+0x51>
c0013e34:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0013e37:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c0013e3c:	40                   	inc    eax
c0013e3d:	eb ea                	jmp    c0013e29 <Reg::readString(char*, char*, char*, int)+0x3b>
c0013e3f:	83 ec 0c             	sub    esp,0xc
c0013e42:	53                   	push   ebx
c0013e43:	e8 28 c7 fe ff       	call   c0000570 <strlen>
c0013e48:	83 c4 10             	add    esp,0x10
c0013e4b:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c0013e50:	75 11                	jne    c0013e63 <Reg::readString(char*, char*, char*, int)+0x75>
c0013e52:	83 ec 0c             	sub    esp,0xc
c0013e55:	53                   	push   ebx
c0013e56:	e8 15 c7 fe ff       	call   c0000570 <strlen>
c0013e5b:	83 c4 10             	add    esp,0x10
c0013e5e:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0013e63:	81 c4 d0 00 00 00    	add    esp,0xd0
c0013e69:	89 f0                	mov    eax,esi
c0013e6b:	5b                   	pop    ebx
c0013e6c:	5e                   	pop    esi
c0013e6d:	5f                   	pop    edi
c0013e6e:	c3                   	ret    

c0013e6f <Reg::readBool(char*, char*, bool*)>:
c0013e6f:	83 ec 20             	sub    esp,0x20
c0013e72:	8d 44 24 10          	lea    eax,[esp+0x10]
c0013e76:	50                   	push   eax
c0013e77:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013e7b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013e7f:	e8 7c fe ff ff       	call   c0013d00 <Reg::readInt(char*, char*, int*)>
c0013e84:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0013e89:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0013e8d:	0f 95 02             	setne  BYTE PTR [edx]
c0013e90:	83 c4 2c             	add    esp,0x2c
c0013e93:	c3                   	ret    

c0013e94 <Reg::readBoolWithDefault(char*, char*, bool)>:
c0013e94:	53                   	push   ebx
c0013e95:	83 ec 1c             	sub    esp,0x1c
c0013e98:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c0013e9c:	8d 44 24 13          	lea    eax,[esp+0x13]
c0013ea0:	50                   	push   eax
c0013ea1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013ea5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013ea9:	e8 c1 ff ff ff       	call   c0013e6f <Reg::readBool(char*, char*, bool*)>
c0013eae:	83 c4 10             	add    esp,0x10
c0013eb1:	84 c0                	test   al,al
c0013eb3:	74 04                	je     c0013eb9 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c0013eb5:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c0013eb9:	88 d8                	mov    al,bl
c0013ebb:	83 c4 18             	add    esp,0x18
c0013ebe:	5b                   	pop    ebx
c0013ebf:	c3                   	ret    

c0013ec0 <Reg::readIntWithDefault(char*, char*, int)>:
c0013ec0:	53                   	push   ebx
c0013ec1:	83 ec 1c             	sub    esp,0x1c
c0013ec4:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0013ec8:	8d 44 24 10          	lea    eax,[esp+0x10]
c0013ecc:	50                   	push   eax
c0013ecd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013ed1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013ed5:	e8 26 fe ff ff       	call   c0013d00 <Reg::readInt(char*, char*, int*)>
c0013eda:	83 c4 10             	add    esp,0x10
c0013edd:	84 c0                	test   al,al
c0013edf:	74 04                	je     c0013ee5 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c0013ee1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013ee5:	89 d8                	mov    eax,ebx
c0013ee7:	83 c4 18             	add    esp,0x18
c0013eea:	5b                   	pop    ebx
c0013eeb:	c3                   	ret    

c0013eec <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c0013eec:	57                   	push   edi
c0013eed:	56                   	push   esi
c0013eee:	56                   	push   esi
c0013eef:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013ef3:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0013ef7:	56                   	push   esi
c0013ef8:	57                   	push   edi
c0013ef9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013efd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013f01:	e8 e8 fe ff ff       	call   c0013dee <Reg::readString(char*, char*, char*, int)>
c0013f06:	83 c4 10             	add    esp,0x10
c0013f09:	84 c0                	test   al,al
c0013f0b:	75 1a                	jne    c0013f27 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c0013f0d:	51                   	push   ecx
c0013f0e:	56                   	push   esi
c0013f0f:	6a 00                	push   0x0
c0013f11:	57                   	push   edi
c0013f12:	e8 d9 c5 fe ff       	call   c00004f0 <memset>
c0013f17:	8d 4e ff             	lea    ecx,[esi-0x1]
c0013f1a:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0013f1e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013f20:	83 c4 10             	add    esp,0x10
c0013f23:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0013f27:	89 f8                	mov    eax,edi
c0013f29:	5a                   	pop    edx
c0013f2a:	5e                   	pop    esi
c0013f2b:	5f                   	pop    edi
c0013f2c:	c3                   	ret    

c0013f2d <SysEject(regs*)>:
c0013f2d:	83 ec 0c             	sub    esp,0xc
c0013f30:	83 ca ff             	or     edx,0xffffffff
c0013f33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f37:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0013f3a:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0013f3f:	83 e9 41             	sub    ecx,0x41
c0013f42:	83 f9 19             	cmp    ecx,0x19
c0013f45:	77 18                	ja     c0013f5f <SysEject(regs*)+0x32>
c0013f47:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c0013f4e:	85 c9                	test   ecx,ecx
c0013f50:	74 0d                	je     c0013f5f <SysEject(regs*)+0x32>
c0013f52:	83 ec 0c             	sub    esp,0xc
c0013f55:	51                   	push   ecx
c0013f56:	e8 57 9e ff ff       	call   c000ddb2 <LogicalDisk::eject()>
c0013f5b:	83 c4 10             	add    esp,0x10
c0013f5e:	99                   	cdq    
c0013f5f:	83 c4 0c             	add    esp,0xc
c0013f62:	c3                   	ret    

c0013f63 <SysExit(regs*)>:
c0013f63:	83 ec 18             	sub    esp,0x18
c0013f66:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013f6a:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013f6d:	e8 46 2b 00 00       	call   c0016ab8 <terminateTask(int)>
c0013f72:	83 c8 ff             	or     eax,0xffffffff
c0013f75:	83 c4 1c             	add    esp,0x1c
c0013f78:	89 c2                	mov    edx,eax
c0013f7a:	c3                   	ret    

c0013f7b <SysGetCwd(regs*)>:
c0013f7b:	83 ec 10             	sub    esp,0x10
c0013f7e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013f82:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0013f85:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013f88:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013f8d:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013f90:	e8 f1 78 ff ff       	call   c000b886 <Fs::getcwd(Process*, char*, int)>
c0013f95:	83 c4 1c             	add    esp,0x1c
c0013f98:	99                   	cdq    
c0013f99:	c3                   	ret    

c0013f9a <SysGetPID(regs*)>:
c0013f9a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013f9f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013fa2:	8b 00                	mov    eax,DWORD PTR [eax]
c0013fa4:	99                   	cdq    
c0013fa5:	c3                   	ret    

c0013fa6 <SysGetRAMData(regs*)>:
c0013fa6:	8b 0d e8 6e 02 c0    	mov    ecx,DWORD PTR ds:0xc0026ee8
c0013fac:	69 05 e4 6e 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc0026ee4,0xc8
c0013fb6:	99                   	cdq    
c0013fb7:	f7 f9                	idiv   ecx
c0013fb9:	c1 e0 18             	shl    eax,0x18
c0013fbc:	09 c8                	or     eax,ecx
c0013fbe:	99                   	cdq    
c0013fbf:	c3                   	ret    

c0013fc0 <SysGetVGAPtr(regs*)>:
c0013fc0:	55                   	push   ebp
c0013fc1:	57                   	push   edi
c0013fc2:	56                   	push   esi
c0013fc3:	53                   	push   ebx
c0013fc4:	83 ec 18             	sub    esp,0x18
c0013fc7:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0013fcb:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013fce:	e8 b1 25 00 00       	call   c0016584 <Thr::processFromPID(int)>
c0013fd3:	83 c4 10             	add    esp,0x10
c0013fd6:	89 c1                	mov    ecx,eax
c0013fd8:	b8 01 00 00 00       	mov    eax,0x1
c0013fdd:	85 c9                	test   ecx,ecx
c0013fdf:	74 57                	je     c0014038 <SysGetVGAPtr(regs*)+0x78>
c0013fe1:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c0013fe7:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0013feb:	74 0c                	je     c0013ff9 <SysGetVGAPtr(regs*)+0x39>
c0013fed:	83 ec 0c             	sub    esp,0xc
c0013ff0:	55                   	push   ebp
c0013ff1:	e8 63 47 ff ff       	call   c0008759 <setActiveTerminal(VgaText*)>
c0013ff6:	83 c4 10             	add    esp,0x10
c0013ff9:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0013ffc:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0013fff:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c0014004:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014006:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0014009:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001400c:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c0014012:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014015:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0014018:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c001401e:	50                   	push   eax
c001401f:	50                   	push   eax
c0014020:	68 b4 26 02 c0       	push   0xc00226b4
c0014025:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014028:	05 a8 0f 00 00       	add    eax,0xfa8
c001402d:	50                   	push   eax
c001402e:	e8 0d c6 fe ff       	call   c0000640 <strcpy>
c0014033:	83 c4 10             	add    esp,0x10
c0014036:	31 c0                	xor    eax,eax
c0014038:	83 c4 0c             	add    esp,0xc
c001403b:	31 d2                	xor    edx,edx
c001403d:	5b                   	pop    ebx
c001403e:	5e                   	pop    esi
c001403f:	5f                   	pop    edi
c0014040:	5d                   	pop    ebp
c0014041:	c3                   	ret    
c0014042:	66 90                	xchg   ax,ax

c0014044 <SysKill(regs*)>:
c0014044:	53                   	push   ebx
c0014045:	83 ec 08             	sub    esp,0x8
c0014048:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001404c:	83 7b 28 ff          	cmp    DWORD PTR [ebx+0x28],0xffffffff
c0014050:	75 16                	jne    c0014068 <SysKill(regs*)+0x24>
c0014052:	83 ec 0c             	sub    esp,0xc
c0014055:	68 be 26 02 c0       	push   0xc00226be
c001405a:	e8 34 d6 ff ff       	call   c0011693 <KePanic(char const*)>
c001405f:	83 c4 10             	add    esp,0x10
c0014062:	e9 89 00 00 00       	jmp    c00140f0 <SysKill(regs*)+0xac>
c0014067:	90                   	nop
c0014068:	83 ec 0c             	sub    esp,0xc
c001406b:	68 e4 c6 02 c0       	push   0xc002c6e4
c0014070:	e8 07 bd 00 00       	call   c001fd7c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0014075:	8d 76 00             	lea    esi,[esi+0x0]
c0014078:	83 c4 10             	add    esp,0x10
c001407b:	85 c0                	test   eax,eax
c001407d:	74 19                	je     c0014098 <SysKill(regs*)+0x54>
c001407f:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0014082:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0014085:	39 0a                	cmp    DWORD PTR [edx],ecx
c0014087:	74 33                	je     c00140bc <SysKill(regs*)+0x78>
c0014089:	52                   	push   edx
c001408a:	52                   	push   edx
c001408b:	50                   	push   eax
c001408c:	68 e4 c6 02 c0       	push   0xc002c6e4
c0014091:	e8 06 c0 00 00       	call   c002009c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0014096:	eb e0                	jmp    c0014078 <SysKill(regs*)+0x34>
c0014098:	83 ec 0c             	sub    esp,0xc
c001409b:	68 d8 c6 02 c0       	push   0xc002c6d8
c00140a0:	e8 d7 bc 00 00       	call   c001fd7c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00140a5:	8d 76 00             	lea    esi,[esi+0x0]
c00140a8:	83 c4 10             	add    esp,0x10
c00140ab:	85 c0                	test   eax,eax
c00140ad:	74 41                	je     c00140f0 <SysKill(regs*)+0xac>
c00140af:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c00140b2:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00140b5:	39 0a                	cmp    DWORD PTR [edx],ecx
c00140b7:	75 27                	jne    c00140e0 <SysKill(regs*)+0x9c>
c00140b9:	8d 76 00             	lea    esi,[esi+0x0]
c00140bc:	51                   	push   ecx
c00140bd:	51                   	push   ecx
c00140be:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00140c1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00140c6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00140c9:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c00140cf:	e8 62 da ff ff       	call   c0011b36 <KeRaiseSignal(SigHandlerBlock*, int)>
c00140d4:	83 c4 10             	add    esp,0x10
c00140d7:	31 c0                	xor    eax,eax
c00140d9:	31 d2                	xor    edx,edx
c00140db:	eb 1b                	jmp    c00140f8 <SysKill(regs*)+0xb4>
c00140dd:	8d 76 00             	lea    esi,[esi+0x0]
c00140e0:	52                   	push   edx
c00140e1:	52                   	push   edx
c00140e2:	50                   	push   eax
c00140e3:	68 d8 c6 02 c0       	push   0xc002c6d8
c00140e8:	e8 af bf 00 00       	call   c002009c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c00140ed:	eb b9                	jmp    c00140a8 <SysKill(regs*)+0x64>
c00140ef:	90                   	nop
c00140f0:	83 c8 ff             	or     eax,0xffffffff
c00140f3:	89 c2                	mov    edx,eax
c00140f5:	8d 76 00             	lea    esi,[esi+0x0]
c00140f8:	83 c4 08             	add    esp,0x8
c00140fb:	5b                   	pop    ebx
c00140fc:	c3                   	ret    

c00140fd <SysLoadDLL(regs*)>:
c00140fd:	56                   	push   esi
c00140fe:	53                   	push   ebx
c00140ff:	31 d2                	xor    edx,edx
c0014101:	51                   	push   ecx
c0014102:	b8 01 00 00 00       	mov    eax,0x1
c0014107:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001410b:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001410f:	0f 84 8c 00 00 00    	je     c00141a1 <SysLoadDLL(regs*)+0xa4>
c0014115:	83 ec 0c             	sub    esp,0xc
c0014118:	68 14 01 00 00       	push   0x114
c001411d:	e8 94 39 ff ff       	call   c0007ab6 <malloc>
c0014122:	83 c4 0c             	add    esp,0xc
c0014125:	89 c3                	mov    ebx,eax
c0014127:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001412c:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c001412f:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0014132:	53                   	push   ebx
c0014133:	e8 8a 7a ff ff       	call   c000bbc2 <File::File(char const*, Process*)>
c0014138:	83 c4 10             	add    esp,0x10
c001413b:	31 d2                	xor    edx,edx
c001413d:	b8 02 00 00 00       	mov    eax,0x2
c0014142:	85 db                	test   ebx,ebx
c0014144:	74 5b                	je     c00141a1 <SysLoadDLL(regs*)+0xa4>
c0014146:	83 ec 0c             	sub    esp,0xc
c0014149:	53                   	push   ebx
c001414a:	e8 55 7d ff ff       	call   c000bea4 <File::exists()>
c001414f:	83 c4 10             	add    esp,0x10
c0014152:	84 c0                	test   al,al
c0014154:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014156:	75 11                	jne    c0014169 <SysLoadDLL(regs*)+0x6c>
c0014158:	83 ec 0c             	sub    esp,0xc
c001415b:	53                   	push   ebx
c001415c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001415f:	83 c4 10             	add    esp,0x10
c0014162:	b8 03 00 00 00       	mov    eax,0x3
c0014167:	eb 36                	jmp    c001419f <SysLoadDLL(regs*)+0xa2>
c0014169:	83 ec 0c             	sub    esp,0xc
c001416c:	53                   	push   ebx
c001416d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014170:	58                   	pop    eax
c0014171:	5a                   	pop    edx
c0014172:	6a 00                	push   0x0
c0014174:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0014177:	e8 3b 15 00 00       	call   c00156b7 <Thr::loadDLL(char const*, bool)>
c001417c:	83 c4 10             	add    esp,0x10
c001417f:	89 c1                	mov    ecx,eax
c0014181:	31 d2                	xor    edx,edx
c0014183:	b8 04 00 00 00       	mov    eax,0x4
c0014188:	85 c9                	test   ecx,ecx
c001418a:	74 15                	je     c00141a1 <SysLoadDLL(regs*)+0xa4>
c001418c:	53                   	push   ebx
c001418d:	53                   	push   ebx
c001418e:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0014194:	51                   	push   ecx
c0014195:	e8 4e 17 00 00       	call   c00158e8 <Thr::executeDLL(unsigned long, void*)>
c001419a:	83 c4 10             	add    esp,0x10
c001419d:	31 c0                	xor    eax,eax
c001419f:	31 d2                	xor    edx,edx
c00141a1:	59                   	pop    ecx
c00141a2:	5b                   	pop    ebx
c00141a3:	5e                   	pop    esi
c00141a4:	c3                   	ret    

c00141a5 <SysRead(regs*)>:
c00141a5:	57                   	push   edi
c00141a6:	56                   	push   esi
c00141a7:	53                   	push   ebx
c00141a8:	83 ec 10             	sub    esp,0x10
c00141ab:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00141af:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00141b2:	83 f8 02             	cmp    eax,0x2
c00141b5:	77 10                	ja     c00141c7 <SysRead(regs*)+0x22>
c00141b7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00141bc:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00141bf:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c00141c5:	eb 0e                	jmp    c00141d5 <SysRead(regs*)+0x30>
c00141c7:	83 ec 0c             	sub    esp,0xc
c00141ca:	50                   	push   eax
c00141cb:	e8 e3 52 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c00141d0:	83 c4 10             	add    esp,0x10
c00141d3:	89 c1                	mov    ecx,eax
c00141d5:	83 c8 ff             	or     eax,0xffffffff
c00141d8:	85 c9                	test   ecx,ecx
c00141da:	89 c2                	mov    edx,eax
c00141dc:	74 28                	je     c0014206 <SysRead(regs*)+0x61>
c00141de:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00141e6:	31 ff                	xor    edi,edi
c00141e8:	83 ec 0c             	sub    esp,0xc
c00141eb:	8b 01                	mov    eax,DWORD PTR [ecx]
c00141ed:	8d 54 24 18          	lea    edx,[esp+0x18]
c00141f1:	52                   	push   edx
c00141f2:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00141f5:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c00141f8:	57                   	push   edi
c00141f9:	56                   	push   esi
c00141fa:	51                   	push   ecx
c00141fb:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00141fe:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0014202:	83 c4 20             	add    esp,0x20
c0014205:	99                   	cdq    
c0014206:	83 c4 10             	add    esp,0x10
c0014209:	5b                   	pop    ebx
c001420a:	5e                   	pop    esi
c001420b:	5f                   	pop    edi
c001420c:	c3                   	ret    

c001420d <SysRegisterSignal(regs*)>:
c001420d:	83 ec 18             	sub    esp,0x18
c0014210:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014214:	6a 00                	push   0x0
c0014216:	6a 00                	push   0x0
c0014218:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001421b:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001421e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014223:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014226:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c001422c:	e8 cf d8 ff ff       	call   c0011b00 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c0014231:	83 c4 2c             	add    esp,0x2c
c0014234:	99                   	cdq    
c0014235:	c3                   	ret    

c0014236 <SysRegistryGetTypeFromPath(regs*)>:
c0014236:	57                   	push   edi
c0014237:	56                   	push   esi
c0014238:	53                   	push   ebx
c0014239:	81 ec 38 01 00 00    	sub    esp,0x138
c001423f:	8b 9c 24 48 01 00 00 	mov    ebx,DWORD PTR [esp+0x148]
c0014246:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014249:	68 df 26 02 c0       	push   0xc00226df
c001424e:	e8 f2 66 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0014253:	5a                   	pop    edx
c0014254:	59                   	pop    ecx
c0014255:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014258:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001425b:	e8 4d f6 ff ff       	call   c00138ad <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0014260:	5f                   	pop    edi
c0014261:	89 c6                	mov    esi,eax
c0014263:	5a                   	pop    edx
c0014264:	50                   	push   eax
c0014265:	68 ff 26 02 c0       	push   0xc00226ff
c001426a:	e8 d6 66 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001426f:	83 c4 10             	add    esp,0x10
c0014272:	85 f6                	test   esi,esi
c0014274:	74 28                	je     c001429e <SysRegistryGetTypeFromPath(regs*)+0x68>
c0014276:	50                   	push   eax
c0014277:	8d 7c 24 08          	lea    edi,[esp+0x8]
c001427b:	57                   	push   edi
c001427c:	56                   	push   esi
c001427d:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014280:	e8 0c f2 ff ff       	call   c0013491 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0014285:	83 c4 0c             	add    esp,0xc
c0014288:	89 c3                	mov    ebx,eax
c001428a:	57                   	push   edi
c001428b:	50                   	push   eax
c001428c:	68 07 27 02 c0       	push   0xc0022707
c0014291:	e8 af 66 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0014296:	89 d8                	mov    eax,ebx
c0014298:	83 c4 10             	add    esp,0x10
c001429b:	99                   	cdq    
c001429c:	eb 05                	jmp    c00142a3 <SysRegistryGetTypeFromPath(regs*)+0x6d>
c001429e:	83 c8 ff             	or     eax,0xffffffff
c00142a1:	89 c2                	mov    edx,eax
c00142a3:	81 c4 30 01 00 00    	add    esp,0x130
c00142a9:	5b                   	pop    ebx
c00142aa:	5e                   	pop    esi
c00142ab:	5f                   	pop    edi
c00142ac:	c3                   	ret    

c00142ad <SysRegistryReadExtent(regs*)>:
c00142ad:	83 ec 1c             	sub    esp,0x1c
c00142b0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00142b4:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c00142b7:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c00142ba:	85 c0                	test   eax,eax
c00142bc:	79 1f                	jns    c00142dd <SysRegistryReadExtent(regs*)+0x30>
c00142be:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00142c3:	52                   	push   edx
c00142c4:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00142c8:	52                   	push   edx
c00142c9:	50                   	push   eax
c00142ca:	51                   	push   ecx
c00142cb:	e8 b3 f0 ff ff       	call   c0013383 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c00142d0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00142d4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00142d8:	83 c4 10             	add    esp,0x10
c00142db:	eb 14                	jmp    c00142f1 <SysRegistryReadExtent(regs*)+0x44>
c00142dd:	83 ec 04             	sub    esp,0x4
c00142e0:	ff 72 24             	push   DWORD PTR [edx+0x24]
c00142e3:	50                   	push   eax
c00142e4:	51                   	push   ecx
c00142e5:	e8 33 eb ff ff       	call   c0012e1d <CmGetString(Reghive_Tag*, int, char*)>
c00142ea:	83 c4 10             	add    esp,0x10
c00142ed:	31 c0                	xor    eax,eax
c00142ef:	31 d2                	xor    edx,edx
c00142f1:	83 c4 1c             	add    esp,0x1c
c00142f4:	c3                   	ret    

c00142f5 <SysRegistryPathToExtentLookup(regs*)>:
c00142f5:	53                   	push   ebx
c00142f6:	83 ec 10             	sub    esp,0x10
c00142f9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00142fd:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014300:	68 1d 27 02 c0       	push   0xc002271d
c0014305:	e8 3b 66 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001430a:	58                   	pop    eax
c001430b:	5a                   	pop    edx
c001430c:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001430f:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014312:	e8 96 f5 ff ff       	call   c00138ad <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0014317:	83 c4 18             	add    esp,0x18
c001431a:	99                   	cdq    
c001431b:	5b                   	pop    ebx
c001431c:	c3                   	ret    

c001431d <SysRegistryEnterDirectory(regs*)>:
c001431d:	53                   	push   ebx
c001431e:	83 ec 10             	sub    esp,0x10
c0014321:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014325:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014328:	68 40 27 02 c0       	push   0xc0022740
c001432d:	e8 13 66 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0014332:	58                   	pop    eax
c0014333:	5a                   	pop    edx
c0014334:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014337:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001433a:	e8 55 eb ff ff       	call   c0012e94 <CmEnterDirectory(Reghive_Tag*, int)>
c001433f:	83 c4 18             	add    esp,0x18
c0014342:	99                   	cdq    
c0014343:	5b                   	pop    ebx
c0014344:	c3                   	ret    

c0014345 <SysRegistryGetNext(regs*)>:
c0014345:	53                   	push   ebx
c0014346:	83 ec 10             	sub    esp,0x10
c0014349:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001434d:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014350:	68 5e 27 02 c0       	push   0xc002275e
c0014355:	e8 eb 65 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001435a:	58                   	pop    eax
c001435b:	5a                   	pop    edx
c001435c:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001435f:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014362:	e8 6c eb ff ff       	call   c0012ed3 <CmGetNext(Reghive_Tag*, int)>
c0014367:	83 c4 18             	add    esp,0x18
c001436a:	99                   	cdq    
c001436b:	5b                   	pop    ebx
c001436c:	c3                   	ret    

c001436d <SysRegistryGetNameAndTypeFromExtent(regs*)>:
c001436d:	57                   	push   edi
c001436e:	56                   	push   esi
c001436f:	53                   	push   ebx
c0014370:	81 ec 34 01 00 00    	sub    esp,0x134
c0014376:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001437d:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0014381:	57                   	push   edi
c0014382:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0014385:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0014388:	e8 04 f1 ff ff       	call   c0013491 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c001438d:	89 c3                	mov    ebx,eax
c001438f:	58                   	pop    eax
c0014390:	5a                   	pop    edx
c0014391:	57                   	push   edi
c0014392:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0014395:	e8 a6 c2 fe ff       	call   c0000640 <strcpy>
c001439a:	89 d8                	mov    eax,ebx
c001439c:	81 c4 40 01 00 00    	add    esp,0x140
c00143a2:	99                   	cdq    
c00143a3:	5b                   	pop    ebx
c00143a4:	5e                   	pop    esi
c00143a5:	5f                   	pop    edi
c00143a6:	c3                   	ret    

c00143a7 <SysRegistryOpen(regs*)>:
c00143a7:	83 ec 18             	sub    esp,0x18
c00143aa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00143ae:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00143b1:	e8 f7 e8 ff ff       	call   c0012cad <CmOpen(char const*)>
c00143b6:	83 c4 1c             	add    esp,0x1c
c00143b9:	99                   	cdq    
c00143ba:	c3                   	ret    

c00143bb <SysRegistryClose(regs*)>:
c00143bb:	83 ec 18             	sub    esp,0x18
c00143be:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00143c2:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00143c5:	e8 01 ea ff ff       	call   c0012dcb <CmClose(Reghive_Tag*)>
c00143ca:	31 c0                	xor    eax,eax
c00143cc:	31 d2                	xor    edx,edx
c00143ce:	83 c4 1c             	add    esp,0x1c
c00143d1:	c3                   	ret    

c00143d2 <SysSbrk(regs*)>:
c00143d2:	56                   	push   esi
c00143d3:	53                   	push   ebx
c00143d4:	50                   	push   eax
c00143d5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00143da:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00143de:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00143e1:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c00143e4:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c00143ea:	85 db                	test   ebx,ebx
c00143ec:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c00143ef:	74 02                	je     c00143f3 <SysSbrk(regs*)+0x21>
c00143f1:	79 06                	jns    c00143f9 <SysSbrk(regs*)+0x27>
c00143f3:	89 f0                	mov    eax,esi
c00143f5:	31 d2                	xor    edx,edx
c00143f7:	eb 2a                	jmp    c0014423 <SysSbrk(regs*)+0x51>
c00143f9:	83 c8 ff             	or     eax,0xffffffff
c00143fc:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0014402:	89 c2                	mov    edx,eax
c0014404:	77 1d                	ja     c0014423 <SysSbrk(regs*)+0x51>
c0014406:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c001440c:	50                   	push   eax
c001440d:	c1 ea 0c             	shr    edx,0xc
c0014410:	68 07 0c 00 00       	push   0xc07
c0014415:	52                   	push   edx
c0014416:	51                   	push   ecx
c0014417:	e8 08 5a ff ff       	call   c0009e24 <VAS::allocatePages(int, int)>
c001441c:	89 f0                	mov    eax,esi
c001441e:	31 d2                	xor    edx,edx
c0014420:	83 c4 10             	add    esp,0x10
c0014423:	59                   	pop    ecx
c0014424:	5b                   	pop    ebx
c0014425:	5e                   	pop    esi
c0014426:	c3                   	ret    

c0014427 <SysSetCwd(regs*)>:
c0014427:	83 ec 14             	sub    esp,0x14
c001442a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001442e:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014431:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014436:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0014439:	e8 05 7b ff ff       	call   c000bf43 <Fs::setcwd(Process*, char*)>
c001443e:	83 c4 1c             	add    esp,0x1c
c0014441:	99                   	cdq    
c0014442:	c3                   	ret    

c0014443 <SysSetTime(regs*)>:
c0014443:	55                   	push   ebp
c0014444:	31 c9                	xor    ecx,ecx
c0014446:	57                   	push   edi
c0014447:	bd 0c 00 00 00       	mov    ebp,0xc
c001444c:	56                   	push   esi
c001444d:	53                   	push   ebx
c001444e:	31 db                	xor    ebx,ebx
c0014450:	83 ec 10             	sub    esp,0x10
c0014453:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0014457:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c001445a:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c001445d:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c0014460:	89 c2                	mov    edx,eax
c0014462:	81 ef 6c 07 00 00    	sub    edi,0x76c
c0014468:	83 e2 1f             	and    edx,0x1f
c001446b:	c1 e7 10             	shl    edi,0x10
c001446e:	42                   	inc    edx
c001446f:	c1 e8 05             	shr    eax,0x5
c0014472:	88 d1                	mov    cl,dl
c0014474:	31 d2                	xor    edx,edx
c0014476:	f7 f5                	div    ebp
c0014478:	89 dd                	mov    ebp,ebx
c001447a:	88 d5                	mov    ch,dl
c001447c:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0014482:	0f b7 c1             	movzx  eax,cx
c0014485:	31 d2                	xor    edx,edx
c0014487:	09 f8                	or     eax,edi
c0014489:	bf 3c 00 00 00       	mov    edi,0x3c
c001448e:	89 c1                	mov    ecx,eax
c0014490:	89 f0                	mov    eax,esi
c0014492:	f7 f7                	div    edi
c0014494:	c1 e2 10             	shl    edx,0x10
c0014497:	09 d5                	or     ebp,edx
c0014499:	31 d2                	xor    edx,edx
c001449b:	89 eb                	mov    ebx,ebp
c001449d:	f7 f7                	div    edi
c001449f:	bf 10 0e 00 00       	mov    edi,0xe10
c00144a4:	88 d7                	mov    bh,dl
c00144a6:	89 f0                	mov    eax,esi
c00144a8:	31 d2                	xor    edx,edx
c00144aa:	f7 f7                	div    edi
c00144ac:	bf 18 00 00 00       	mov    edi,0x18
c00144b1:	31 d2                	xor    edx,edx
c00144b3:	f7 f7                	div    edi
c00144b5:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c00144ba:	88 d3                	mov    bl,dl
c00144bc:	53                   	push   ebx
c00144bd:	51                   	push   ecx
c00144be:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c00144c4:	e8 85 82 ff ff       	call   c000c74e <Clock::setTimeInDatetimeLocal(datetime_t)>
c00144c9:	83 c4 1c             	add    esp,0x1c
c00144cc:	83 f0 01             	xor    eax,0x1
c00144cf:	5b                   	pop    ebx
c00144d0:	0f b6 c0             	movzx  eax,al
c00144d3:	5e                   	pop    esi
c00144d4:	31 d2                	xor    edx,edx
c00144d6:	5f                   	pop    edi
c00144d7:	5d                   	pop    ebp
c00144d8:	c3                   	ret    

c00144d9 <SysSymlink(regs*)>:
c00144d9:	53                   	push   ebx
c00144da:	83 c8 ff             	or     eax,0xffffffff
c00144dd:	83 ec 08             	sub    esp,0x8
c00144e0:	89 c2                	mov    edx,eax
c00144e2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00144e6:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00144e9:	85 c9                	test   ecx,ecx
c00144eb:	74 14                	je     c0014501 <SysSymlink(regs*)+0x28>
c00144ed:	8b 5b 24             	mov    ebx,DWORD PTR [ebx+0x24]
c00144f0:	85 db                	test   ebx,ebx
c00144f2:	74 0d                	je     c0014501 <SysSymlink(regs*)+0x28>
c00144f4:	50                   	push   eax
c00144f5:	50                   	push   eax
c00144f6:	53                   	push   ebx
c00144f7:	51                   	push   ecx
c00144f8:	e8 9a 6e ff ff       	call   c000b397 <KeCreateSymlink(char const*, char const*)>
c00144fd:	83 c4 10             	add    esp,0x10
c0014500:	99                   	cdq    
c0014501:	83 c4 08             	add    esp,0x8
c0014504:	5b                   	pop    ebx
c0014505:	c3                   	ret    

c0014506 <SysTimezone(regs*)>:
c0014506:	53                   	push   ebx
c0014507:	83 ec 08             	sub    esp,0x8
c001450a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001450e:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0014512:	75 17                	jne    c001452b <SysTimezone(regs*)+0x25>
c0014514:	83 ec 0c             	sub    esp,0xc
c0014517:	68 75 27 02 c0       	push   0xc0022775
c001451c:	e8 24 64 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0014521:	83 c8 ff             	or     eax,0xffffffff
c0014524:	83 c4 10             	add    esp,0x10
c0014527:	89 c2                	mov    edx,eax
c0014529:	eb 20                	jmp    c001454b <SysTimezone(regs*)+0x45>
c001452b:	83 ec 0c             	sub    esp,0xc
c001452e:	68 8a 27 02 c0       	push   0xc002278a
c0014533:	e8 0d 64 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0014538:	58                   	pop    eax
c0014539:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001453c:	e8 77 7f ff ff       	call   c000c4b8 <User::loadClockSettings(int)>
c0014541:	83 c4 10             	add    esp,0x10
c0014544:	b8 01 00 00 00       	mov    eax,0x1
c0014549:	31 d2                	xor    edx,edx
c001454b:	83 c4 08             	add    esp,0x8
c001454e:	5b                   	pop    ebx
c001454f:	c3                   	ret    

c0014550 <SysTruncate(regs*)>:
c0014550:	55                   	push   ebp
c0014551:	57                   	push   edi
c0014552:	31 ff                	xor    edi,edi
c0014554:	56                   	push   esi
c0014555:	53                   	push   ebx
c0014556:	83 ec 0c             	sub    esp,0xc
c0014559:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001455d:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0014560:	8b 68 24             	mov    ebp,DWORD PTR [eax+0x24]
c0014563:	89 ce                	mov    esi,ecx
c0014565:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c0014569:	0f 84 9a 00 00 00    	je     c0014609 <SysTruncate(regs*)+0xb9>
c001456f:	83 ec 0c             	sub    esp,0xc
c0014572:	68 14 01 00 00       	push   0x114
c0014577:	e8 3a 35 ff ff       	call   c0007ab6 <malloc>
c001457c:	83 c4 0c             	add    esp,0xc
c001457f:	89 c3                	mov    ebx,eax
c0014581:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014586:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0014589:	55                   	push   ebp
c001458a:	53                   	push   ebx
c001458b:	e8 32 76 ff ff       	call   c000bbc2 <File::File(char const*, Process*)>
c0014590:	83 c4 10             	add    esp,0x10
c0014593:	31 d2                	xor    edx,edx
c0014595:	b8 03 00 00 00       	mov    eax,0x3
c001459a:	85 db                	test   ebx,ebx
c001459c:	0f 84 a2 00 00 00    	je     c0014644 <SysTruncate(regs*)+0xf4>
c00145a2:	51                   	push   ecx
c00145a3:	51                   	push   ecx
c00145a4:	6a 02                	push   0x2
c00145a6:	53                   	push   ebx
c00145a7:	e8 34 76 ff ff       	call   c000bbe0 <File::open(FileOpenMode)>
c00145ac:	83 c4 10             	add    esp,0x10
c00145af:	85 c0                	test   eax,eax
c00145b1:	74 13                	je     c00145c6 <SysTruncate(regs*)+0x76>
c00145b3:	83 ec 0c             	sub    esp,0xc
c00145b6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00145b8:	53                   	push   ebx
c00145b9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00145bc:	83 c4 10             	add    esp,0x10
c00145bf:	b8 04 00 00 00       	mov    eax,0x4
c00145c4:	eb 7c                	jmp    c0014642 <SysTruncate(regs*)+0xf2>
c00145c6:	52                   	push   edx
c00145c7:	57                   	push   edi
c00145c8:	56                   	push   esi
c00145c9:	53                   	push   ebx
c00145ca:	e8 25 77 ff ff       	call   c000bcf4 <File::truncate(unsigned long long)>
c00145cf:	83 c4 10             	add    esp,0x10
c00145d2:	85 c0                	test   eax,eax
c00145d4:	74 1b                	je     c00145f1 <SysTruncate(regs*)+0xa1>
c00145d6:	83 ec 0c             	sub    esp,0xc
c00145d9:	53                   	push   ebx
c00145da:	e8 5f 76 ff ff       	call   c000bc3e <File::close()>
c00145df:	8b 03                	mov    eax,DWORD PTR [ebx]
c00145e1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00145e4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00145e7:	83 c4 10             	add    esp,0x10
c00145ea:	b8 05 00 00 00       	mov    eax,0x5
c00145ef:	eb 51                	jmp    c0014642 <SysTruncate(regs*)+0xf2>
c00145f1:	83 ec 0c             	sub    esp,0xc
c00145f4:	53                   	push   ebx
c00145f5:	e8 44 76 ff ff       	call   c000bc3e <File::close()>
c00145fa:	8b 03                	mov    eax,DWORD PTR [ebx]
c00145fc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00145ff:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014602:	83 c4 10             	add    esp,0x10
c0014605:	31 c0                	xor    eax,eax
c0014607:	eb 39                	jmp    c0014642 <SysTruncate(regs*)+0xf2>
c0014609:	31 d2                	xor    edx,edx
c001460b:	b8 01 00 00 00       	mov    eax,0x1
c0014610:	83 fd 02             	cmp    ebp,0x2
c0014613:	7e 2f                	jle    c0014644 <SysTruncate(regs*)+0xf4>
c0014615:	83 ec 0c             	sub    esp,0xc
c0014618:	51                   	push   ecx
c0014619:	e8 95 4e ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c001461e:	83 c4 10             	add    esp,0x10
c0014621:	89 c1                	mov    ecx,eax
c0014623:	31 d2                	xor    edx,edx
c0014625:	b8 02 00 00 00       	mov    eax,0x2
c001462a:	85 c9                	test   ecx,ecx
c001462c:	74 16                	je     c0014644 <SysTruncate(regs*)+0xf4>
c001462e:	50                   	push   eax
c001462f:	57                   	push   edi
c0014630:	56                   	push   esi
c0014631:	51                   	push   ecx
c0014632:	e8 bd 76 ff ff       	call   c000bcf4 <File::truncate(unsigned long long)>
c0014637:	83 c4 10             	add    esp,0x10
c001463a:	85 c0                	test   eax,eax
c001463c:	0f 95 c0             	setne  al
c001463f:	0f b6 c0             	movzx  eax,al
c0014642:	31 d2                	xor    edx,edx
c0014644:	83 c4 0c             	add    esp,0xc
c0014647:	5b                   	pop    ebx
c0014648:	5e                   	pop    esi
c0014649:	5f                   	pop    edi
c001464a:	5d                   	pop    ebp
c001464b:	c3                   	ret    

c001464c <SysWrite(regs*)>:
c001464c:	57                   	push   edi
c001464d:	56                   	push   esi
c001464e:	53                   	push   ebx
c001464f:	83 ec 10             	sub    esp,0x10
c0014652:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0014656:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014659:	83 f8 02             	cmp    eax,0x2
c001465c:	77 10                	ja     c001466e <SysWrite(regs*)+0x22>
c001465e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014663:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014666:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c001466c:	eb 0e                	jmp    c001467c <SysWrite(regs*)+0x30>
c001466e:	83 ec 0c             	sub    esp,0xc
c0014671:	50                   	push   eax
c0014672:	e8 3c 4e ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0014677:	83 c4 10             	add    esp,0x10
c001467a:	89 c1                	mov    ecx,eax
c001467c:	83 c8 ff             	or     eax,0xffffffff
c001467f:	85 c9                	test   ecx,ecx
c0014681:	89 c2                	mov    edx,eax
c0014683:	74 28                	je     c00146ad <SysWrite(regs*)+0x61>
c0014685:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001468d:	31 ff                	xor    edi,edi
c001468f:	83 ec 0c             	sub    esp,0xc
c0014692:	8b 01                	mov    eax,DWORD PTR [ecx]
c0014694:	8d 54 24 18          	lea    edx,[esp+0x18]
c0014698:	52                   	push   edx
c0014699:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001469c:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001469f:	57                   	push   edi
c00146a0:	56                   	push   esi
c00146a1:	51                   	push   ecx
c00146a2:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00146a5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00146a9:	83 c4 20             	add    esp,0x20
c00146ac:	99                   	cdq    
c00146ad:	83 c4 10             	add    esp,0x10
c00146b0:	5b                   	pop    ebx
c00146b1:	5e                   	pop    esi
c00146b2:	5f                   	pop    edi
c00146b3:	c3                   	ret    

c00146b4 <SysWsbe(regs*)>:
c00146b4:	57                   	push   edi
c00146b5:	b9 0b 00 00 00       	mov    ecx,0xb
c00146ba:	56                   	push   esi
c00146bb:	be c9 27 02 c0       	mov    esi,0xc00227c9
c00146c0:	53                   	push   ebx
c00146c1:	83 ec 30             	sub    esp,0x30
c00146c4:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00146c8:	fc                   	cld    
c00146c9:	83 ec 0c             	sub    esp,0xc
c00146cc:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00146ce:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00146d2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00146d7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00146da:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c00146e0:	8b 06                	mov    eax,DWORD PTR [esi]
c00146e2:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c00146e5:	57                   	push   edi
c00146e6:	e8 85 be fe ff       	call   c0000570 <strlen>
c00146eb:	5a                   	pop    edx
c00146ec:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00146f0:	52                   	push   edx
c00146f1:	31 d2                	xor    edx,edx
c00146f3:	57                   	push   edi
c00146f4:	52                   	push   edx
c00146f5:	50                   	push   eax
c00146f6:	56                   	push   esi
c00146f7:	ff d3                	call   ebx
c00146f9:	83 c4 14             	add    esp,0x14
c00146fc:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0014700:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0014703:	e8 b0 23 00 00       	call   c0016ab8 <terminateTask(int)>
c0014708:	83 c4 40             	add    esp,0x40
c001470b:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0014710:	5b                   	pop    ebx
c0014711:	31 d2                	xor    edx,edx
c0014713:	5e                   	pop    esi
c0014714:	5f                   	pop    edi
c0014715:	c3                   	ret    

c0014716 <SysYield(regs*)>:
c0014716:	83 ec 0c             	sub    esp,0xc
c0014719:	fa                   	cli    
c001471a:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0014720:	e8 f3 19 00 00       	call   c0016118 <schedule()>
c0014725:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001472a:	48                   	dec    eax
c001472b:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0014730:	75 01                	jne    c0014733 <SysYield(regs*)+0x1d>
c0014732:	fb                   	sti    
c0014733:	31 c0                	xor    eax,eax
c0014735:	31 d2                	xor    edx,edx
c0014737:	83 c4 0c             	add    esp,0xc
c001473a:	c3                   	ret    

c001473b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001473b:	55                   	push   ebp
c001473c:	57                   	push   edi
c001473d:	56                   	push   esi
c001473e:	53                   	push   ebx
c001473f:	81 ec 2c 10 00 00    	sub    esp,0x102c
c0014745:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c001474d:	0f 95 c0             	setne  al
c0014750:	31 d2                	xor    edx,edx
c0014752:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c001475a:	0f 94 c2             	sete   dl
c001475d:	85 c2                	test   edx,eax
c001475f:	74 34                	je     c0014795 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x5a>
c0014761:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c001476c:	74 27                	je     c0014795 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x5a>
c001476e:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c0014775:	05 00 10 00 00       	add    eax,0x1000
c001477a:	89 c1                	mov    ecx,eax
c001477c:	25 00 f0 ff ff       	and    eax,0xfffff000
c0014781:	81 c9 00 f0 ff ff    	or     ecx,0xfffff000
c0014787:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c001478e:	89 8c 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],ecx
c0014795:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c001479c:	83 ec 0c             	sub    esp,0xc
c001479f:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c00147a5:	6a 01                	push   0x1
c00147a7:	e8 61 4e ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c00147ac:	83 c4 10             	add    esp,0x10
c00147af:	89 c3                	mov    ebx,eax
c00147b1:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c00147b7:	0f 86 25 01 00 00    	jbe    c00148e2 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a7>
c00147bd:	c1 ee 0c             	shr    esi,0xc
c00147c0:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c00147c7:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00147cb:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00147d3:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c00147da:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00147de:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c00147e5:	29 ef                	sub    edi,ebp
c00147e7:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00147eb:	0f 83 f8 00 00 00    	jae    c00148e9 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1ae>
c00147f1:	81 ff 00 10 00 00    	cmp    edi,0x1000
c00147f7:	76 05                	jbe    c00147fe <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc3>
c00147f9:	bf 00 10 00 00       	mov    edi,0x1000
c00147fe:	83 ec 0c             	sub    esp,0xc
c0014801:	31 d2                	xor    edx,edx
c0014803:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001480a:	8b 08                	mov    ecx,DWORD PTR [eax]
c001480c:	8d 44 24 28          	lea    eax,[esp+0x28]
c0014810:	50                   	push   eax
c0014811:	8d 74 24 30          	lea    esi,[esp+0x30]
c0014815:	56                   	push   esi
c0014816:	52                   	push   edx
c0014817:	57                   	push   edi
c0014818:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c001481f:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014822:	83 c4 20             	add    esp,0x20
c0014825:	85 c0                	test   eax,eax
c0014827:	75 06                	jne    c001482f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf4>
c0014829:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c001482d:	74 13                	je     c0014842 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x107>
c001482f:	83 ec 0c             	sub    esp,0xc
c0014832:	53                   	push   ebx
c0014833:	e8 f3 50 ff ff       	call   c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c0014838:	83 c4 10             	add    esp,0x10
c001483b:	31 c0                	xor    eax,eax
c001483d:	e9 7c 01 00 00       	jmp    c00149be <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x283>
c0014842:	fa                   	cli    
c0014843:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0014849:	e8 71 35 ff ff       	call   c0007dbf <Phys::allocatePage()>
c001484e:	6a 07                	push   0x7
c0014850:	89 c7                	mov    edi,eax
c0014852:	53                   	push   ebx
c0014853:	50                   	push   eax
c0014854:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014859:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001485c:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014862:	e8 b9 54 ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c0014867:	83 c4 0c             	add    esp,0xc
c001486a:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0014871:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014877:	6a 00                	push   0x0
c0014879:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001487e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014881:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014887:	e8 fa 52 ff ff       	call   c0009b86 <VAS::mapOtherVASIn(bool, VAS*)>
c001488c:	58                   	pop    eax
c001488d:	5a                   	pop    edx
c001488e:	68 07 0c 00 00       	push   0xc07
c0014893:	55                   	push   ebp
c0014894:	57                   	push   edi
c0014895:	89 df                	mov    edi,ebx
c0014897:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001489e:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00148a4:	6a 00                	push   0x0
c00148a6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00148ab:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00148ae:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00148b4:	e8 b9 56 ff ff       	call   c0009f72 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00148b9:	b9 00 10 00 00       	mov    ecx,0x1000
c00148be:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00148c0:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00148c5:	83 c4 20             	add    esp,0x20
c00148c8:	48                   	dec    eax
c00148c9:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00148ce:	85 c0                	test   eax,eax
c00148d0:	75 01                	jne    c00148d3 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x198>
c00148d2:	fb                   	sti    
c00148d3:	81 c5 00 10 00 00    	add    ebp,0x1000
c00148d9:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c00148dd:	e9 f1 fe ff ff       	jmp    c00147d3 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x98>
c00148e2:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c00148e9:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c00148f0:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c00148f6:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c00148fc:	0f 86 ae 00 00 00    	jbe    c00149b0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c0014902:	fa                   	cli    
c0014903:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0014909:	c1 ee 0c             	shr    esi,0xc
c001490c:	51                   	push   ecx
c001490d:	31 ff                	xor    edi,edi
c001490f:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0014916:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001491c:	6a 00                	push   0x0
c001491e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014923:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014926:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001492c:	e8 55 52 ff ff       	call   c0009b86 <VAS::mapOtherVASIn(bool, VAS*)>
c0014931:	83 c4 10             	add    esp,0x10
c0014934:	e8 86 34 ff ff       	call   c0007dbf <Phys::allocatePage()>
c0014939:	47                   	inc    edi
c001493a:	6a 07                	push   0x7
c001493c:	53                   	push   ebx
c001493d:	50                   	push   eax
c001493e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014942:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0014948:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c001494b:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c0014951:	e8 ca 53 ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c0014956:	58                   	pop    eax
c0014957:	5a                   	pop    edx
c0014958:	68 07 0c 00 00       	push   0xc07
c001495d:	55                   	push   ebp
c001495e:	81 c5 00 10 00 00    	add    ebp,0x1000
c0014964:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014968:	50                   	push   eax
c0014969:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0014970:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014976:	6a 00                	push   0x0
c0014978:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001497d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014980:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014986:	e8 e7 55 ff ff       	call   c0009f72 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001498b:	83 c4 1c             	add    esp,0x1c
c001498e:	68 00 10 00 00       	push   0x1000
c0014993:	6a 00                	push   0x0
c0014995:	53                   	push   ebx
c0014996:	e8 55 bb fe ff       	call   c00004f0 <memset>
c001499b:	83 c4 10             	add    esp,0x10
c001499e:	39 fe                	cmp    esi,edi
c00149a0:	77 92                	ja     c0014934 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f9>
c00149a2:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00149a7:	48                   	dec    eax
c00149a8:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00149ad:	75 01                	jne    c00149b0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c00149af:	fb                   	sti    
c00149b0:	83 ec 0c             	sub    esp,0xc
c00149b3:	53                   	push   ebx
c00149b4:	e8 72 4f ff ff       	call   c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c00149b9:	83 c4 10             	add    esp,0x10
c00149bc:	b0 01                	mov    al,0x1
c00149be:	81 c4 2c 10 00 00    	add    esp,0x102c
c00149c4:	5b                   	pop    ebx
c00149c5:	5e                   	pop    esi
c00149c6:	5f                   	pop    edi
c00149c7:	5d                   	pop    ebp
c00149c8:	c3                   	ret    

c00149c9 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c00149c9:	55                   	push   ebp
c00149ca:	57                   	push   edi
c00149cb:	56                   	push   esi
c00149cc:	53                   	push   ebx
c00149cd:	83 ec 48             	sub    esp,0x48
c00149d0:	68 14 01 00 00       	push   0x114
c00149d5:	e8 dc 30 ff ff       	call   c0007ab6 <malloc>
c00149da:	83 c4 0c             	add    esp,0xc
c00149dd:	89 c6                	mov    esi,eax
c00149df:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00149e3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00149e7:	50                   	push   eax
c00149e8:	e8 d5 71 ff ff       	call   c000bbc2 <File::File(char const*, Process*)>
c00149ed:	58                   	pop    eax
c00149ee:	5a                   	pop    edx
c00149ef:	6a 01                	push   0x1
c00149f1:	56                   	push   esi
c00149f2:	e8 e9 71 ff ff       	call   c000bbe0 <File::open(FileOpenMode)>
c00149f7:	83 c4 10             	add    esp,0x10
c00149fa:	85 c0                	test   eax,eax
c00149fc:	0f 85 43 01 00 00    	jne    c0014b45 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0014a02:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0014a0a:	83 ec 0c             	sub    esp,0xc
c0014a0d:	6a 34                	push   0x34
c0014a0f:	e8 a2 30 ff ff       	call   c0007ab6 <malloc>
c0014a14:	89 c3                	mov    ebx,eax
c0014a16:	58                   	pop    eax
c0014a17:	8b 06                	mov    eax,DWORD PTR [esi]
c0014a19:	8d 7c 24 38          	lea    edi,[esp+0x38]
c0014a1d:	57                   	push   edi
c0014a1e:	53                   	push   ebx
c0014a1f:	6a 00                	push   0x0
c0014a21:	6a 34                	push   0x34
c0014a23:	56                   	push   esi
c0014a24:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014a27:	83 c4 20             	add    esp,0x20
c0014a2a:	85 c0                	test   eax,eax
c0014a2c:	0f 85 13 01 00 00    	jne    c0014b45 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0014a32:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c0014a38:	0f 85 07 01 00 00    	jne    c0014b45 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0014a3e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014a41:	85 c0                	test   eax,eax
c0014a43:	0f 84 fc 00 00 00    	je     c0014b45 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0014a49:	31 d2                	xor    edx,edx
c0014a4b:	55                   	push   ebp
c0014a4c:	52                   	push   edx
c0014a4d:	50                   	push   eax
c0014a4e:	56                   	push   esi
c0014a4f:	e8 4a 72 ff ff       	call   c000bc9e <File::seek(unsigned long long)>
c0014a54:	83 c4 10             	add    esp,0x10
c0014a57:	85 c0                	test   eax,eax
c0014a59:	0f 85 e6 00 00 00    	jne    c0014b45 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0014a5f:	83 ec 0c             	sub    esp,0xc
c0014a62:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0014a65:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0014a69:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0014a6d:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0014a71:	0f af c2             	imul   eax,edx
c0014a74:	50                   	push   eax
c0014a75:	e8 3c 30 ff ff       	call   c0007ab6 <malloc>
c0014a7a:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0014a7c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0014a80:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014a83:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014a87:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0014a8b:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0014a8f:	0f af c2             	imul   eax,edx
c0014a92:	99                   	cdq    
c0014a93:	52                   	push   edx
c0014a94:	50                   	push   eax
c0014a95:	56                   	push   esi
c0014a96:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014a99:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0014a9c:	83 c4 20             	add    esp,0x20
c0014a9f:	85 c0                	test   eax,eax
c0014aa1:	0f 84 9e 00 00 00    	je     c0014b45 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0014aa7:	31 d2                	xor    edx,edx
c0014aa9:	51                   	push   ecx
c0014aaa:	52                   	push   edx
c0014aab:	50                   	push   eax
c0014aac:	56                   	push   esi
c0014aad:	e8 ec 71 ff ff       	call   c000bc9e <File::seek(unsigned long long)>
c0014ab2:	83 c4 10             	add    esp,0x10
c0014ab5:	85 c0                	test   eax,eax
c0014ab7:	0f 85 88 00 00 00    	jne    c0014b45 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0014abd:	83 ec 0c             	sub    esp,0xc
c0014ac0:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0014ac4:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0014ac8:	31 ed                	xor    ebp,ebp
c0014aca:	0f af c2             	imul   eax,edx
c0014acd:	50                   	push   eax
c0014ace:	e8 e3 2f ff ff       	call   c0007ab6 <malloc>
c0014ad3:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0014ad5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014ad9:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014adc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014ae0:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0014ae4:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0014ae8:	0f af c2             	imul   eax,edx
c0014aeb:	99                   	cdq    
c0014aec:	52                   	push   edx
c0014aed:	50                   	push   eax
c0014aee:	56                   	push   esi
c0014aef:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014af2:	83 c4 20             	add    esp,0x20
c0014af5:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014afd:	0f b7 fd             	movzx  edi,bp
c0014b00:	66 3b 6b 2c          	cmp    bp,WORD PTR [ebx+0x2c]
c0014b04:	73 7d                	jae    c0014b83 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1ba>
c0014b06:	c1 e7 05             	shl    edi,0x5
c0014b09:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c0014b0d:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0014b10:	75 6b                	jne    c0014b7d <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b4>
c0014b12:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0014b15:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014b19:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0014b1c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014b20:	52                   	push   edx
c0014b21:	31 d2                	xor    edx,edx
c0014b23:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0014b26:	52                   	push   edx
c0014b27:	50                   	push   eax
c0014b28:	56                   	push   esi
c0014b29:	e8 70 71 ff ff       	call   c000bc9e <File::seek(unsigned long long)>
c0014b2e:	83 c4 10             	add    esp,0x10
c0014b31:	85 c0                	test   eax,eax
c0014b33:	74 17                	je     c0014b4c <Thr::loadProgramIntoMemory(Process*, char const*)+0x183>
c0014b35:	83 ec 0c             	sub    esp,0xc
c0014b38:	68 f5 27 02 c0       	push   0xc00227f5
c0014b3d:	e8 03 5e ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0014b42:	83 c4 10             	add    esp,0x10
c0014b45:	31 c0                	xor    eax,eax
c0014b47:	e9 87 00 00 00       	jmp    c0014bd3 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20a>
c0014b4c:	83 ec 0c             	sub    esp,0xc
c0014b4f:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0014b52:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c0014b55:	50                   	push   eax
c0014b56:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0014b5a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014b5e:	56                   	push   esi
c0014b5f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0014b63:	e8 d3 fb ff ff       	call   c001473b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0014b68:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0014b6c:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c0014b70:	83 c4 20             	add    esp,0x20
c0014b73:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0014b77:	73 04                	jae    c0014b7d <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b4>
c0014b79:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014b7d:	45                   	inc    ebp
c0014b7e:	e9 7a ff ff ff       	jmp    c0014afd <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0014b83:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0014b87:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0014b8b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014b8f:	89 91 0e 05 00 00    	mov    DWORD PTR [ecx+0x50e],edx
c0014b95:	83 ec 0c             	sub    esp,0xc
c0014b98:	8b 91 12 05 00 00    	mov    edx,DWORD PTR [ecx+0x512]
c0014b9e:	25 00 f0 ff ff       	and    eax,0xfffff000
c0014ba3:	05 00 10 00 00       	add    eax,0x1000
c0014ba8:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0014bab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014baf:	e8 12 2f ff ff       	call   c0007ac6 <free>
c0014bb4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014bb7:	e8 0a 2f ff ff       	call   c0007ac6 <free>
c0014bbc:	58                   	pop    eax
c0014bbd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014bc1:	e8 00 2f ff ff       	call   c0007ac6 <free>
c0014bc6:	89 34 24             	mov    DWORD PTR [esp],esi
c0014bc9:	e8 70 70 ff ff       	call   c000bc3e <File::close()>
c0014bce:	83 c4 10             	add    esp,0x10
c0014bd1:	b0 01                	mov    al,0x1
c0014bd3:	83 c4 3c             	add    esp,0x3c
c0014bd6:	5b                   	pop    ebx
c0014bd7:	5e                   	pop    esi
c0014bd8:	5f                   	pop    edi
c0014bd9:	5d                   	pop    ebp
c0014bda:	c3                   	ret    

c0014bdb <Thr::runtimeReferenceHelper()>:
c0014bdb:	83 ec 18             	sub    esp,0x18
c0014bde:	68 fd 27 02 c0       	push   0xc00227fd
c0014be3:	e8 5d 5d ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0014be8:	fa                   	cli    
c0014be9:	83 c4 10             	add    esp,0x10
c0014bec:	eb fe                	jmp    c0014bec <Thr::runtimeReferenceHelper()+0x11>

c0014bee <Thr::getAddressOfKernelSymbol(char const*)>:
c0014bee:	57                   	push   edi
c0014bef:	56                   	push   esi
c0014bf0:	53                   	push   ebx
c0014bf1:	31 db                	xor    ebx,ebx
c0014bf3:	39 1d a0 c6 02 c0    	cmp    DWORD PTR ds:0xc002c6a0,ebx
c0014bf9:	7e 3c                	jle    c0014c37 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0014bfb:	8b 34 9d 20 c6 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd39e0]
c0014c02:	31 ff                	xor    edi,edi
c0014c04:	39 3c 9d 20 c5 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd3ae0],edi
c0014c0b:	7e 27                	jle    c0014c34 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0014c0d:	50                   	push   eax
c0014c0e:	50                   	push   eax
c0014c0f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014c13:	8b 06                	mov    eax,DWORD PTR [esi]
c0014c15:	03 04 9d a0 c5 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd3a60]
c0014c1c:	50                   	push   eax
c0014c1d:	e8 2e bb fe ff       	call   c0000750 <strcmp>
c0014c22:	83 c4 10             	add    esp,0x10
c0014c25:	85 c0                	test   eax,eax
c0014c27:	75 05                	jne    c0014c2e <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0014c29:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0014c2c:	eb 0b                	jmp    c0014c39 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0014c2e:	83 c6 10             	add    esi,0x10
c0014c31:	47                   	inc    edi
c0014c32:	eb d0                	jmp    c0014c04 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0014c34:	43                   	inc    ebx
c0014c35:	eb bc                	jmp    c0014bf3 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0014c37:	31 c0                	xor    eax,eax
c0014c39:	5b                   	pop    ebx
c0014c3a:	5e                   	pop    esi
c0014c3b:	5f                   	pop    edi
c0014c3c:	c3                   	ret    

c0014c3d <Thr::loadKernelSymbolTable(char const*)>:
c0014c3d:	55                   	push   ebp
c0014c3e:	57                   	push   edi
c0014c3f:	56                   	push   esi
c0014c40:	53                   	push   ebx
c0014c41:	83 ec 68             	sub    esp,0x68
c0014c44:	8b 35 f0 c6 02 c0    	mov    esi,DWORD PTR ds:0xc002c6f0
c0014c4a:	68 14 01 00 00       	push   0x114
c0014c4f:	e8 62 2e ff ff       	call   c0007ab6 <malloc>
c0014c54:	83 c4 0c             	add    esp,0xc
c0014c57:	89 c3                	mov    ebx,eax
c0014c59:	56                   	push   esi
c0014c5a:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0014c5e:	50                   	push   eax
c0014c5f:	e8 5e 6f ff ff       	call   c000bbc2 <File::File(char const*, Process*)>
c0014c64:	5e                   	pop    esi
c0014c65:	5f                   	pop    edi
c0014c66:	6a 01                	push   0x1
c0014c68:	53                   	push   ebx
c0014c69:	e8 72 6f ff ff       	call   c000bbe0 <File::open(FileOpenMode)>
c0014c6e:	83 c4 10             	add    esp,0x10
c0014c71:	85 c0                	test   eax,eax
c0014c73:	74 0a                	je     c0014c7f <Thr::loadKernelSymbolTable(char const*)+0x42>
c0014c75:	83 ec 0c             	sub    esp,0xc
c0014c78:	68 1f 28 02 c0       	push   0xc002281f
c0014c7d:	eb 34                	jmp    c0014cb3 <Thr::loadKernelSymbolTable(char const*)+0x76>
c0014c7f:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0014c87:	83 ec 0c             	sub    esp,0xc
c0014c8a:	6a 34                	push   0x34
c0014c8c:	e8 25 2e ff ff       	call   c0007ab6 <malloc>
c0014c91:	59                   	pop    ecx
c0014c92:	89 c7                	mov    edi,eax
c0014c94:	8d 74 24 34          	lea    esi,[esp+0x34]
c0014c98:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014c9a:	56                   	push   esi
c0014c9b:	57                   	push   edi
c0014c9c:	6a 00                	push   0x0
c0014c9e:	6a 34                	push   0x34
c0014ca0:	53                   	push   ebx
c0014ca1:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014ca4:	83 c4 20             	add    esp,0x20
c0014ca7:	85 c0                	test   eax,eax
c0014ca9:	74 17                	je     c0014cc2 <Thr::loadKernelSymbolTable(char const*)+0x85>
c0014cab:	83 ec 0c             	sub    esp,0xc
c0014cae:	68 36 28 02 c0       	push   0xc0022836
c0014cb3:	e8 db c9 ff ff       	call   c0011693 <KePanic(char const*)>
c0014cb8:	83 c4 10             	add    esp,0x10
c0014cbb:	31 c0                	xor    eax,eax
c0014cbd:	e9 31 02 00 00       	jmp    c0014ef3 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0014cc2:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0014cc8:	75 e1                	jne    c0014cab <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0014cca:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0014ccd:	85 c0                	test   eax,eax
c0014ccf:	74 da                	je     c0014cab <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0014cd1:	52                   	push   edx
c0014cd2:	31 d2                	xor    edx,edx
c0014cd4:	52                   	push   edx
c0014cd5:	50                   	push   eax
c0014cd6:	53                   	push   ebx
c0014cd7:	e8 c2 6f ff ff       	call   c000bc9e <File::seek(unsigned long long)>
c0014cdc:	83 c4 10             	add    esp,0x10
c0014cdf:	85 c0                	test   eax,eax
c0014ce1:	75 c8                	jne    c0014cab <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0014ce3:	83 ec 0c             	sub    esp,0xc
c0014ce6:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0014cea:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014cee:	31 ed                	xor    ebp,ebp
c0014cf0:	0f af c2             	imul   eax,edx
c0014cf3:	50                   	push   eax
c0014cf4:	e8 bd 2d ff ff       	call   c0007ab6 <malloc>
c0014cf9:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014cfb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014cff:	89 34 24             	mov    DWORD PTR [esp],esi
c0014d02:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014d06:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0014d0a:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014d0e:	0f af c2             	imul   eax,edx
c0014d11:	99                   	cdq    
c0014d12:	52                   	push   edx
c0014d13:	50                   	push   eax
c0014d14:	53                   	push   ebx
c0014d15:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014d18:	83 c4 20             	add    esp,0x20
c0014d1b:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0014d23:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0014d2b:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0014d33:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014d3b:	0f b7 f5             	movzx  esi,bp
c0014d3e:	66 3b 6f 30          	cmp    bp,WORD PTR [edi+0x30]
c0014d42:	0f 83 a7 00 00 00    	jae    c0014def <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c0014d48:	6b f6 28             	imul   esi,esi,0x28
c0014d4b:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0014d4f:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0014d52:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014d56:	50                   	push   eax
c0014d57:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014d5b:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0014d5f:	8b 16                	mov    edx,DWORD PTR [esi]
c0014d61:	6b c0 28             	imul   eax,eax,0x28
c0014d64:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0014d68:	89 d0                	mov    eax,edx
c0014d6a:	31 d2                	xor    edx,edx
c0014d6c:	52                   	push   edx
c0014d6d:	50                   	push   eax
c0014d6e:	53                   	push   ebx
c0014d6f:	e8 2a 6f ff ff       	call   c000bc9e <File::seek(unsigned long long)>
c0014d74:	83 c4 0c             	add    esp,0xc
c0014d77:	6a 20                	push   0x20
c0014d79:	6a 00                	push   0x0
c0014d7b:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0014d7f:	52                   	push   edx
c0014d80:	e8 6b b7 fe ff       	call   c00004f0 <memset>
c0014d85:	58                   	pop    eax
c0014d86:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014d88:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0014d8c:	51                   	push   ecx
c0014d8d:	8d 54 24 40          	lea    edx,[esp+0x40]
c0014d91:	52                   	push   edx
c0014d92:	6a 00                	push   0x0
c0014d94:	6a 1f                	push   0x1f
c0014d96:	53                   	push   ebx
c0014d97:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014d9a:	83 c4 18             	add    esp,0x18
c0014d9d:	68 4d 28 02 c0       	push   0xc002284d
c0014da2:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0014da6:	52                   	push   edx
c0014da7:	e8 a4 b9 fe ff       	call   c0000750 <strcmp>
c0014dac:	83 c4 10             	add    esp,0x10
c0014daf:	85 c0                	test   eax,eax
c0014db1:	75 0f                	jne    c0014dc2 <Thr::loadKernelSymbolTable(char const*)+0x185>
c0014db3:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014db6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014dba:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014dbe:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014dc2:	50                   	push   eax
c0014dc3:	50                   	push   eax
c0014dc4:	68 55 28 02 c0       	push   0xc0022855
c0014dc9:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0014dcd:	50                   	push   eax
c0014dce:	e8 7d b9 fe ff       	call   c0000750 <strcmp>
c0014dd3:	83 c4 10             	add    esp,0x10
c0014dd6:	85 c0                	test   eax,eax
c0014dd8:	75 0f                	jne    c0014de9 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c0014dda:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014ddd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014de1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014de5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014de9:	45                   	inc    ebp
c0014dea:	e9 4c ff ff ff       	jmp    c0014d3b <Thr::loadKernelSymbolTable(char const*)+0xfe>
c0014def:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0014df4:	75 10                	jne    c0014e06 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c0014df6:	83 ec 0c             	sub    esp,0xc
c0014df9:	68 5d 28 02 c0       	push   0xc002285d
c0014dfe:	e8 90 c8 ff ff       	call   c0011693 <KePanic(char const*)>
c0014e03:	83 c4 10             	add    esp,0x10
c0014e06:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0014e0b:	75 10                	jne    c0014e1d <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c0014e0d:	83 ec 0c             	sub    esp,0xc
c0014e10:	68 5d 28 02 c0       	push   0xc002285d
c0014e15:	e8 79 c8 ff ff       	call   c0011693 <KePanic(char const*)>
c0014e1a:	83 c4 10             	add    esp,0x10
c0014e1d:	31 d2                	xor    edx,edx
c0014e1f:	50                   	push   eax
c0014e20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014e24:	52                   	push   edx
c0014e25:	50                   	push   eax
c0014e26:	53                   	push   ebx
c0014e27:	e8 72 6e ff ff       	call   c000bc9e <File::seek(unsigned long long)>
c0014e2c:	5a                   	pop    edx
c0014e2d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014e31:	e8 80 2c ff ff       	call   c0007ab6 <malloc>
c0014e36:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014e3a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014e3e:	31 c9                	xor    ecx,ecx
c0014e40:	5e                   	pop    esi
c0014e41:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014e43:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0014e47:	55                   	push   ebp
c0014e48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014e4c:	51                   	push   ecx
c0014e4d:	52                   	push   edx
c0014e4e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0014e52:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0014e56:	53                   	push   ebx
c0014e57:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014e5a:	83 c4 14             	add    esp,0x14
c0014e5d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014e61:	e8 50 2c ff ff       	call   c0007ab6 <malloc>
c0014e66:	89 c6                	mov    esi,eax
c0014e68:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014e6a:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014e6d:	56                   	push   esi
c0014e6e:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0014e72:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0014e76:	51                   	push   ecx
c0014e77:	52                   	push   edx
c0014e78:	53                   	push   ebx
c0014e79:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014e7c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014e80:	8b 15 a0 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6a0
c0014e86:	83 c4 1c             	add    esp,0x1c
c0014e89:	c1 e8 04             	shr    eax,0x4
c0014e8c:	89 04 95 20 c5 02 c0 	mov    DWORD PTR [edx*4-0x3ffd3ae0],eax
c0014e93:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014e97:	31 d2                	xor    edx,edx
c0014e99:	52                   	push   edx
c0014e9a:	50                   	push   eax
c0014e9b:	53                   	push   ebx
c0014e9c:	e8 fd 6d ff ff       	call   c000bc9e <File::seek(unsigned long long)>
c0014ea1:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014ea3:	31 d2                	xor    edx,edx
c0014ea5:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014ea8:	56                   	push   esi
c0014ea9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014ead:	52                   	push   edx
c0014eae:	50                   	push   eax
c0014eaf:	53                   	push   ebx
c0014eb0:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014eb3:	83 c4 14             	add    esp,0x14
c0014eb6:	53                   	push   ebx
c0014eb7:	e8 82 6d ff ff       	call   c000bc3e <File::close()>
c0014ebc:	5d                   	pop    ebp
c0014ebd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014ec1:	e8 00 2c ff ff       	call   c0007ac6 <free>
c0014ec6:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014ec9:	e8 f8 2b ff ff       	call   c0007ac6 <free>
c0014ece:	a1 a0 c6 02 c0       	mov    eax,ds:0xc002c6a0
c0014ed3:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0014ed7:	8d 50 01             	lea    edx,[eax+0x1]
c0014eda:	89 0c 85 20 c6 02 c0 	mov    DWORD PTR [eax*4-0x3ffd39e0],ecx
c0014ee1:	89 34 85 a0 c5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3a60],esi
c0014ee8:	89 15 a0 c6 02 c0    	mov    DWORD PTR ds:0xc002c6a0,edx
c0014eee:	83 c4 10             	add    esp,0x10
c0014ef1:	b0 01                	mov    al,0x1
c0014ef3:	83 c4 5c             	add    esp,0x5c
c0014ef6:	5b                   	pop    ebx
c0014ef7:	5e                   	pop    esi
c0014ef8:	5f                   	pop    edi
c0014ef9:	5d                   	pop    ebp
c0014efa:	c3                   	ret    

c0014efb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0014efb:	55                   	push   ebp
c0014efc:	57                   	push   edi
c0014efd:	56                   	push   esi
c0014efe:	53                   	push   ebx
c0014eff:	81 ec 68 03 00 00    	sub    esp,0x368
c0014f05:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0014f0c:	8b 1d f0 c6 02 c0    	mov    ebx,DWORD PTR ds:0xc002c6f0
c0014f12:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0014f16:	68 14 01 00 00       	push   0x114
c0014f1b:	e8 96 2b ff ff       	call   c0007ab6 <malloc>
c0014f20:	83 c4 0c             	add    esp,0xc
c0014f23:	89 c5                	mov    ebp,eax
c0014f25:	53                   	push   ebx
c0014f26:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0014f2d:	50                   	push   eax
c0014f2e:	e8 8f 6c ff ff       	call   c000bbc2 <File::File(char const*, Process*)>
c0014f33:	5e                   	pop    esi
c0014f34:	5f                   	pop    edi
c0014f35:	6a 01                	push   0x1
c0014f37:	55                   	push   ebp
c0014f38:	e8 a3 6c ff ff       	call   c000bbe0 <File::open(FileOpenMode)>
c0014f3d:	83 c4 10             	add    esp,0x10
c0014f40:	85 c0                	test   eax,eax
c0014f42:	0f 85 aa 06 00 00    	jne    c00155f2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014f48:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0014f50:	83 ec 0c             	sub    esp,0xc
c0014f53:	6a 34                	push   0x34
c0014f55:	e8 5c 2b ff ff       	call   c0007ab6 <malloc>
c0014f5a:	5b                   	pop    ebx
c0014f5b:	89 c7                	mov    edi,eax
c0014f5d:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0014f61:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014f64:	53                   	push   ebx
c0014f65:	57                   	push   edi
c0014f66:	6a 00                	push   0x0
c0014f68:	6a 34                	push   0x34
c0014f6a:	55                   	push   ebp
c0014f6b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014f6e:	83 c4 20             	add    esp,0x20
c0014f71:	85 c0                	test   eax,eax
c0014f73:	0f 85 79 06 00 00    	jne    c00155f2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014f79:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0014f7f:	0f 85 6d 06 00 00    	jne    c00155f2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014f85:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0014f88:	85 c0                	test   eax,eax
c0014f8a:	0f 84 62 06 00 00    	je     c00155f2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014f90:	31 d2                	xor    edx,edx
c0014f92:	51                   	push   ecx
c0014f93:	52                   	push   edx
c0014f94:	50                   	push   eax
c0014f95:	55                   	push   ebp
c0014f96:	e8 03 6d ff ff       	call   c000bc9e <File::seek(unsigned long long)>
c0014f9b:	83 c4 10             	add    esp,0x10
c0014f9e:	85 c0                	test   eax,eax
c0014fa0:	0f 85 4c 06 00 00    	jne    c00155f2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014fa6:	83 ec 0c             	sub    esp,0xc
c0014fa9:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c0014fac:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0014fb0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0014fb4:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014fb8:	0f af c2             	imul   eax,edx
c0014fbb:	50                   	push   eax
c0014fbc:	e8 f5 2a ff ff       	call   c0007ab6 <malloc>
c0014fc1:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0014fc4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014fc8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014fcb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014fcf:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0014fd3:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014fd7:	0f af c2             	imul   eax,edx
c0014fda:	99                   	cdq    
c0014fdb:	52                   	push   edx
c0014fdc:	50                   	push   eax
c0014fdd:	55                   	push   ebp
c0014fde:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014fe1:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c0014fe4:	83 c4 20             	add    esp,0x20
c0014fe7:	85 c0                	test   eax,eax
c0014fe9:	0f 84 03 06 00 00    	je     c00155f2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014fef:	52                   	push   edx
c0014ff0:	31 d2                	xor    edx,edx
c0014ff2:	52                   	push   edx
c0014ff3:	50                   	push   eax
c0014ff4:	55                   	push   ebp
c0014ff5:	e8 a4 6c ff ff       	call   c000bc9e <File::seek(unsigned long long)>
c0014ffa:	83 c4 10             	add    esp,0x10
c0014ffd:	85 c0                	test   eax,eax
c0014fff:	0f 85 ed 05 00 00    	jne    c00155f2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0015005:	83 ec 0c             	sub    esp,0xc
c0015008:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001500c:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0015010:	31 f6                	xor    esi,esi
c0015012:	0f af c2             	imul   eax,edx
c0015015:	50                   	push   eax
c0015016:	e8 9b 2a ff ff       	call   c0007ab6 <malloc>
c001501b:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001501e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0015022:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015025:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0015029:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001502d:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0015031:	0f af c2             	imul   eax,edx
c0015034:	99                   	cdq    
c0015035:	52                   	push   edx
c0015036:	50                   	push   eax
c0015037:	55                   	push   ebp
c0015038:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001503b:	83 c4 20             	add    esp,0x20
c001503e:	0f b7 de             	movzx  ebx,si
c0015041:	66 3b 77 2c          	cmp    si,WORD PTR [edi+0x2c]
c0015045:	0f 83 87 00 00 00    	jae    c00150d2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001504b:	c1 e3 05             	shl    ebx,0x5
c001504e:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c0015052:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c0015055:	75 75                	jne    c00150cc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c0015057:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001505a:	31 d2                	xor    edx,edx
c001505c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015060:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0015063:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015067:	50                   	push   eax
c0015068:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001506b:	52                   	push   edx
c001506c:	50                   	push   eax
c001506d:	55                   	push   ebp
c001506e:	e8 2b 6c ff ff       	call   c000bc9e <File::seek(unsigned long long)>
c0015073:	83 c4 10             	add    esp,0x10
c0015076:	85 c0                	test   eax,eax
c0015078:	0f 85 74 05 00 00    	jne    c00155f2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c001507e:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0015085:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0015088:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c001508c:	31 d2                	xor    edx,edx
c001508e:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0015092:	83 ec 0c             	sub    esp,0xc
c0015095:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015099:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00150a0:	50                   	push   eax
c00150a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00150a5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00150a9:	52                   	push   edx
c00150aa:	50                   	push   eax
c00150ab:	55                   	push   ebp
c00150ac:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00150af:	83 c4 1c             	add    esp,0x1c
c00150b2:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00150b5:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c00150b8:	50                   	push   eax
c00150b9:	6a 00                	push   0x0
c00150bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00150bf:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00150c3:	50                   	push   eax
c00150c4:	e8 27 b4 fe ff       	call   c00004f0 <memset>
c00150c9:	83 c4 10             	add    esp,0x10
c00150cc:	46                   	inc    esi
c00150cd:	e9 6c ff ff ff       	jmp    c001503e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c00150d2:	53                   	push   ebx
c00150d3:	31 db                	xor    ebx,ebx
c00150d5:	68 00 01 00 00       	push   0x100
c00150da:	6a 00                	push   0x0
c00150dc:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c00150e0:	50                   	push   eax
c00150e1:	e8 0a b4 fe ff       	call   c00004f0 <memset>
c00150e6:	83 c4 0c             	add    esp,0xc
c00150e9:	68 00 01 00 00       	push   0x100
c00150ee:	6a 00                	push   0x0
c00150f0:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c00150f7:	50                   	push   eax
c00150f8:	e8 f3 b3 fe ff       	call   c00004f0 <memset>
c00150fd:	83 c4 10             	add    esp,0x10
c0015100:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0015108:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0015110:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0015118:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0015120:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0015128:	0f b7 f3             	movzx  esi,bx
c001512b:	66 3b 5f 30          	cmp    bx,WORD PTR [edi+0x30]
c001512f:	0f 83 2d 01 00 00    	jae    c0015262 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c0015135:	6b f6 28             	imul   esi,esi,0x28
c0015138:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001513c:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001513f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015143:	52                   	push   edx
c0015144:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015148:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001514c:	8b 06                	mov    eax,DWORD PTR [esi]
c001514e:	6b d2 28             	imul   edx,edx,0x28
c0015151:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0015155:	31 d2                	xor    edx,edx
c0015157:	52                   	push   edx
c0015158:	50                   	push   eax
c0015159:	55                   	push   ebp
c001515a:	e8 3f 6b ff ff       	call   c000bc9e <File::seek(unsigned long long)>
c001515f:	83 c4 0c             	add    esp,0xc
c0015162:	6a 20                	push   0x20
c0015164:	6a 00                	push   0x0
c0015166:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001516d:	51                   	push   ecx
c001516e:	e8 7d b3 fe ff       	call   c00004f0 <memset>
c0015173:	59                   	pop    ecx
c0015174:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0015177:	8d 54 24 58          	lea    edx,[esp+0x58]
c001517b:	52                   	push   edx
c001517c:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0015183:	51                   	push   ecx
c0015184:	6a 00                	push   0x0
c0015186:	6a 1f                	push   0x1f
c0015188:	55                   	push   ebp
c0015189:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001518c:	83 c4 1c             	add    esp,0x1c
c001518f:	6a 09                	push   0x9
c0015191:	68 77 28 02 c0       	push   0xc0022877
c0015196:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001519d:	51                   	push   ecx
c001519e:	e8 dd b1 fe ff       	call   c0000380 <memcmp>
c00151a3:	83 c4 10             	add    esp,0x10
c00151a6:	85 c0                	test   eax,eax
c00151a8:	75 21                	jne    c00151cb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c00151aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00151ae:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00151b2:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c00151b6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00151ba:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00151bd:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c00151c4:	89 d0                	mov    eax,edx
c00151c6:	40                   	inc    eax
c00151c7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00151cb:	50                   	push   eax
c00151cc:	6a 09                	push   0x9
c00151ce:	68 81 28 02 c0       	push   0xc0022881
c00151d3:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00151da:	50                   	push   eax
c00151db:	e8 a0 b1 fe ff       	call   c0000380 <memcmp>
c00151e0:	83 c4 10             	add    esp,0x10
c00151e3:	85 c0                	test   eax,eax
c00151e5:	75 21                	jne    c0015208 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c00151e7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00151eb:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00151ef:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00151f3:	89 4c 84 50          	mov    DWORD PTR [esp+eax*4+0x50],ecx
c00151f7:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00151fa:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0015201:	89 d0                	mov    eax,edx
c0015203:	40                   	inc    eax
c0015204:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015208:	50                   	push   eax
c0015209:	50                   	push   eax
c001520a:	68 4d 28 02 c0       	push   0xc002284d
c001520f:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0015216:	50                   	push   eax
c0015217:	e8 34 b5 fe ff       	call   c0000750 <strcmp>
c001521c:	83 c4 10             	add    esp,0x10
c001521f:	85 c0                	test   eax,eax
c0015221:	75 0f                	jne    c0015232 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c0015223:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0015226:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001522a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001522e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0015232:	50                   	push   eax
c0015233:	50                   	push   eax
c0015234:	68 55 28 02 c0       	push   0xc0022855
c0015239:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0015240:	50                   	push   eax
c0015241:	e8 0a b5 fe ff       	call   c0000750 <strcmp>
c0015246:	83 c4 10             	add    esp,0x10
c0015249:	85 c0                	test   eax,eax
c001524b:	75 0f                	jne    c001525c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001524d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0015250:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0015254:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015258:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001525c:	43                   	inc    ebx
c001525d:	e9 c6 fe ff ff       	jmp    c0015128 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c0015262:	31 d2                	xor    edx,edx
c0015264:	50                   	push   eax
c0015265:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015269:	52                   	push   edx
c001526a:	50                   	push   eax
c001526b:	55                   	push   ebp
c001526c:	e8 2d 6a ff ff       	call   c000bc9e <File::seek(unsigned long long)>
c0015271:	58                   	pop    eax
c0015272:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0015276:	e8 3b 28 ff ff       	call   c0007ab6 <malloc>
c001527b:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001527e:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0015282:	31 d2                	xor    edx,edx
c0015284:	58                   	pop    eax
c0015285:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0015289:	53                   	push   ebx
c001528a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001528e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015292:	52                   	push   edx
c0015293:	50                   	push   eax
c0015294:	55                   	push   ebp
c0015295:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015298:	83 c4 14             	add    esp,0x14
c001529b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001529f:	e8 12 28 ff ff       	call   c0007ab6 <malloc>
c00152a4:	31 d2                	xor    edx,edx
c00152a6:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00152aa:	83 c4 0c             	add    esp,0xc
c00152ad:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00152b1:	52                   	push   edx
c00152b2:	50                   	push   eax
c00152b3:	55                   	push   ebp
c00152b4:	e8 e5 69 ff ff       	call   c000bc9e <File::seek(unsigned long long)>
c00152b9:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00152bc:	31 d2                	xor    edx,edx
c00152be:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00152c1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00152c5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00152c9:	52                   	push   edx
c00152ca:	50                   	push   eax
c00152cb:	55                   	push   ebp
c00152cc:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00152cf:	83 c4 20             	add    esp,0x20
c00152d2:	0f b6 44 24 3b       	movzx  eax,BYTE PTR [esp+0x3b]
c00152d7:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00152df:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00152e3:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00152e7:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c00152eb:	0f 84 05 03 00 00    	je     c00155f6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6fb>
c00152f1:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c00152f8:	31 d2                	xor    edx,edx
c00152fa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00152fe:	c1 e8 03             	shr    eax,0x3
c0015301:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0015305:	51                   	push   ecx
c0015306:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001530a:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001530e:	52                   	push   edx
c001530f:	50                   	push   eax
c0015310:	55                   	push   ebp
c0015311:	e8 88 69 ff ff       	call   c000bc9e <File::seek(unsigned long long)>
c0015316:	5b                   	pop    ebx
c0015317:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001531b:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c0015322:	e8 8f 27 ff ff       	call   c0007ab6 <malloc>
c0015327:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001532a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001532e:	31 d2                	xor    edx,edx
c0015330:	5e                   	pop    esi
c0015331:	8d 44 24 58          	lea    eax,[esp+0x58]
c0015335:	50                   	push   eax
c0015336:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001533a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001533e:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c0015345:	52                   	push   edx
c0015346:	50                   	push   eax
c0015347:	55                   	push   ebp
c0015348:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001534b:	83 c4 20             	add    esp,0x20
c001534e:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0015356:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001535a:	39 5c 24 20          	cmp    DWORD PTR [esp+0x20],ebx
c001535e:	0f 8d 76 02 00 00    	jge    c00155da <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6df>
c0015364:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0015368:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001536c:	c6 44 24 3a 00       	mov    BYTE PTR [esp+0x3a],0x0
c0015371:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0015374:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0015378:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001537c:	8b 44 c8 04          	mov    eax,DWORD PTR [eax+ecx*8+0x4]
c0015380:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0015384:	c1 e8 08             	shr    eax,0x8
c0015387:	89 c6                	mov    esi,eax
c0015389:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001538d:	c1 e6 04             	shl    esi,0x4
c0015390:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c0015394:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0015397:	85 db                	test   ebx,ebx
c0015399:	0f 85 b3 00 00 00    	jne    c0015452 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c001539f:	83 ec 0c             	sub    esp,0xc
c00153a2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00153a6:	03 06                	add    eax,DWORD PTR [esi]
c00153a8:	50                   	push   eax
c00153a9:	e8 40 f8 ff ff       	call   c0014bee <Thr::getAddressOfKernelSymbol(char const*)>
c00153ae:	83 c4 10             	add    esp,0x10
c00153b1:	89 c3                	mov    ebx,eax
c00153b3:	c6 44 24 3a 01       	mov    BYTE PTR [esp+0x3a],0x1
c00153b8:	85 c0                	test   eax,eax
c00153ba:	0f 85 92 00 00 00    	jne    c0015452 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c00153c0:	83 ec 0c             	sub    esp,0xc
c00153c3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00153c7:	03 06                	add    eax,DWORD PTR [esi]
c00153c9:	50                   	push   eax
c00153ca:	e8 b1 c4 ff ff       	call   c0011880 <KeResolveCompatibilitySymbol(char*)>
c00153cf:	83 c4 10             	add    esp,0x10
c00153d2:	89 c3                	mov    ebx,eax
c00153d4:	85 c0                	test   eax,eax
c00153d6:	75 7a                	jne    c0015452 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c00153d8:	51                   	push   ecx
c00153d9:	51                   	push   ecx
c00153da:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00153de:	03 06                	add    eax,DWORD PTR [esi]
c00153e0:	50                   	push   eax
c00153e1:	68 8b 28 02 c0       	push   0xc002288b
c00153e6:	e8 5a 55 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00153eb:	58                   	pop    eax
c00153ec:	5a                   	pop    edx
c00153ed:	68 a5 28 02 c0       	push   0xc00228a5
c00153f2:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00153f9:	50                   	push   eax
c00153fa:	e8 41 b2 fe ff       	call   c0000640 <strcpy>
c00153ff:	59                   	pop    ecx
c0015400:	58                   	pop    eax
c0015401:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0015405:	03 06                	add    eax,DWORD PTR [esi]
c0015407:	50                   	push   eax
c0015408:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001540f:	50                   	push   eax
c0015410:	e8 2b b4 fe ff       	call   c0000840 <strcat>
c0015415:	58                   	pop    eax
c0015416:	5a                   	pop    edx
c0015417:	68 3b 29 02 c0       	push   0xc002293b
c001541c:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0015423:	50                   	push   eax
c0015424:	e8 17 b4 fe ff       	call   c0000840 <strcat>
c0015429:	83 c4 10             	add    esp,0x10
c001542c:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0015431:	0f 84 5d 01 00 00    	je     c0015594 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c0015437:	83 ec 0c             	sub    esp,0xc
c001543a:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0015441:	50                   	push   eax
c0015442:	e8 4c c2 ff ff       	call   c0011693 <KePanic(char const*)>
c0015447:	83 c4 10             	add    esp,0x10
c001544a:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c001544e:	88 44 24 3a          	mov    BYTE PTR [esp+0x3a],al
c0015452:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c0015457:	83 f8 01             	cmp    eax,0x1
c001545a:	0f 85 8f 00 00 00    	jne    c00154ef <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5f4>
c0015460:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c0015467:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001546b:	2b 4c 24 24          	sub    ecx,DWORD PTR [esp+0x24]
c001546f:	01 ce                	add    esi,ecx
c0015471:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c0015479:	0f 94 c0             	sete   al
c001547c:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c0015484:	0f 94 c2             	sete   dl
c0015487:	09 c2                	or     edx,eax
c0015489:	8b 06                	mov    eax,DWORD PTR [esi]
c001548b:	80 7c 24 3a 00       	cmp    BYTE PTR [esp+0x3a],0x0
c0015490:	0f b6 d2             	movzx  edx,dl
c0015493:	74 41                	je     c00154d6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5db>
c0015495:	8d 0c 03             	lea    ecx,[ebx+eax*1]
c0015498:	85 d2                	test   edx,edx
c001549a:	75 15                	jne    c00154b1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b6>
c001549c:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00154a0:	66 83 f8 0c          	cmp    ax,0xc
c00154a4:	76 05                	jbe    c00154ab <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b0>
c00154a6:	b8 0c 00 00 00       	mov    eax,0xc
c00154ab:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c00154af:	76 37                	jbe    c00154e8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c00154b1:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00154b5:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00154ba:	0f 84 d4 00 00 00    	je     c0015594 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c00154c0:	83 ec 0c             	sub    esp,0xc
c00154c3:	68 bc 28 02 c0       	push   0xc00228bc
c00154c8:	e8 c6 c1 ff ff       	call   c0011693 <KePanic(char const*)>
c00154cd:	83 c4 10             	add    esp,0x10
c00154d0:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00154d4:	eb 12                	jmp    c00154e8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c00154d6:	01 c1                	add    ecx,eax
c00154d8:	85 d2                	test   edx,edx
c00154da:	75 0c                	jne    c00154e8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c00154dc:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00154e0:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c00154e4:	77 02                	ja     c00154e8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c00154e6:	01 d9                	add    ecx,ebx
c00154e8:	89 0e                	mov    DWORD PTR [esi],ecx
c00154ea:	e9 e2 00 00 00       	jmp    c00155d1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c00154ef:	83 f8 02             	cmp    eax,0x2
c00154f2:	75 77                	jne    c001556b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x670>
c00154f4:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c00154fb:	2b 74 24 24          	sub    esi,DWORD PTR [esp+0x24]
c00154ff:	03 74 24 28          	add    esi,DWORD PTR [esp+0x28]
c0015503:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c001550b:	74 21                	je     c001552e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x633>
c001550d:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c0015515:	74 17                	je     c001552e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x633>
c0015517:	0f b7 57 30          	movzx  edx,WORD PTR [edi+0x30]
c001551b:	b8 0a 00 00 00       	mov    eax,0xa
c0015520:	83 fa 0e             	cmp    edx,0xe
c0015523:	77 03                	ja     c0015528 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x62d>
c0015525:	8d 42 fc             	lea    eax,[edx-0x4]
c0015528:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c001552c:	76 17                	jbe    c0015545 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x64a>
c001552e:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0015533:	74 5f                	je     c0015594 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c0015535:	83 ec 0c             	sub    esp,0xc
c0015538:	68 d8 28 02 c0       	push   0xc00228d8
c001553d:	e8 51 c1 ff ff       	call   c0011693 <KePanic(char const*)>
c0015542:	83 c4 10             	add    esp,0x10
c0015545:	8b 06                	mov    eax,DWORD PTR [esi]
c0015547:	80 7c 24 3a 00       	cmp    BYTE PTR [esp+0x3a],0x0
c001554c:	74 13                	je     c0015561 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x666>
c001554e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0015552:	2b 94 24 74 03 00 00 	sub    edx,DWORD PTR [esp+0x374]
c0015559:	2b 54 24 28          	sub    edx,DWORD PTR [esp+0x28]
c001555d:	01 d0                	add    eax,edx
c001555f:	eb 04                	jmp    c0015565 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c0015561:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0015565:	01 c3                	add    ebx,eax
c0015567:	89 1e                	mov    DWORD PTR [esi],ebx
c0015569:	eb 66                	jmp    c00155d1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c001556b:	52                   	push   edx
c001556c:	52                   	push   edx
c001556d:	50                   	push   eax
c001556e:	68 f4 28 02 c0       	push   0xc00228f4
c0015573:	e8 cd 53 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0015578:	83 c4 10             	add    esp,0x10
c001557b:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0015580:	74 12                	je     c0015594 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c0015582:	83 ec 0c             	sub    esp,0xc
c0015585:	68 ff 28 02 c0       	push   0xc00228ff
c001558a:	e8 04 c1 ff ff       	call   c0011693 <KePanic(char const*)>
c001558f:	83 c4 10             	add    esp,0x10
c0015592:	eb 3d                	jmp    c00155d1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c0015594:	83 ec 0c             	sub    esp,0xc
c0015597:	55                   	push   ebp
c0015598:	e8 a1 66 ff ff       	call   c000bc3e <File::close()>
c001559d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00155a0:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00155a3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00155a6:	59                   	pop    ecx
c00155a7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00155ab:	e8 16 25 ff ff       	call   c0007ac6 <free>
c00155b0:	5b                   	pop    ebx
c00155b1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00155b5:	e8 0c 25 ff ff       	call   c0007ac6 <free>
c00155ba:	89 3c 24             	mov    DWORD PTR [esp],edi
c00155bd:	e8 04 25 ff ff       	call   c0007ac6 <free>
c00155c2:	5e                   	pop    esi
c00155c3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00155c7:	e8 fa 24 ff ff       	call   c0007ac6 <free>
c00155cc:	83 c4 10             	add    esp,0x10
c00155cf:	eb 21                	jmp    c00155f2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c00155d1:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c00155d5:	e9 7c fd ff ff       	jmp    c0015356 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x45b>
c00155da:	83 ec 0c             	sub    esp,0xc
c00155dd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00155e1:	e8 e0 24 ff ff       	call   c0007ac6 <free>
c00155e6:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c00155ea:	83 c4 10             	add    esp,0x10
c00155ed:	e9 f1 fc ff ff       	jmp    c00152e3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3e8>
c00155f2:	31 c0                	xor    eax,eax
c00155f4:	eb 33                	jmp    c0015629 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72e>
c00155f6:	83 ec 0c             	sub    esp,0xc
c00155f9:	55                   	push   ebp
c00155fa:	e8 3f 66 ff ff       	call   c000bc3e <File::close()>
c00155ff:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0015602:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0015605:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015608:	58                   	pop    eax
c0015609:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001560d:	e8 b4 24 ff ff       	call   c0007ac6 <free>
c0015612:	89 3c 24             	mov    DWORD PTR [esp],edi
c0015615:	e8 ac 24 ff ff       	call   c0007ac6 <free>
c001561a:	5a                   	pop    edx
c001561b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001561f:	e8 a2 24 ff ff       	call   c0007ac6 <free>
c0015624:	83 c4 10             	add    esp,0x10
c0015627:	b0 01                	mov    al,0x1
c0015629:	81 c4 5c 03 00 00    	add    esp,0x35c
c001562f:	5b                   	pop    ebx
c0015630:	5e                   	pop    esi
c0015631:	5f                   	pop    edi
c0015632:	5d                   	pop    ebp
c0015633:	c3                   	ret    

c0015634 <Thr::getDriverBaseFromAddress(unsigned long)>:
c0015634:	56                   	push   esi
c0015635:	31 d2                	xor    edx,edx
c0015637:	53                   	push   ebx
c0015638:	8b 1d 00 bf 02 c0    	mov    ebx,DWORD PTR ds:0xc002bf00
c001563e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015642:	39 d3                	cmp    ebx,edx
c0015644:	7e 1b                	jle    c0015661 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c0015646:	8b 04 95 20 c1 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd3ee0]
c001564d:	39 c8                	cmp    eax,ecx
c001564f:	77 0d                	ja     c001565e <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c0015651:	8b 34 95 20 bf 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd40e0]
c0015658:	01 c6                	add    esi,eax
c001565a:	39 ce                	cmp    esi,ecx
c001565c:	77 05                	ja     c0015663 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001565e:	42                   	inc    edx
c001565f:	eb e1                	jmp    c0015642 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0015661:	31 c0                	xor    eax,eax
c0015663:	5b                   	pop    ebx
c0015664:	5e                   	pop    esi
c0015665:	c3                   	ret    

c0015666 <Thr::getDriverNameFromAddress(unsigned long)>:
c0015666:	53                   	push   ebx
c0015667:	31 c0                	xor    eax,eax
c0015669:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001566d:	8b 1d 00 bf 02 c0    	mov    ebx,DWORD PTR ds:0xc002bf00
c0015673:	39 c3                	cmp    ebx,eax
c0015675:	7e 22                	jle    c0015699 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c0015677:	8b 14 85 20 c1 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd3ee0]
c001567e:	39 ca                	cmp    edx,ecx
c0015680:	77 14                	ja     c0015696 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0015682:	03 14 85 20 bf 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd40e0]
c0015689:	39 ca                	cmp    edx,ecx
c001568b:	76 09                	jbe    c0015696 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001568d:	8b 04 85 20 c3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3ce0]
c0015694:	eb 05                	jmp    c001569b <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c0015696:	40                   	inc    eax
c0015697:	eb da                	jmp    c0015673 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c0015699:	31 c0                	xor    eax,eax
c001569b:	5b                   	pop    ebx
c001569c:	c3                   	ret    

c001569d <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001569d:	53                   	push   ebx
c001569e:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00156a2:	53                   	push   ebx
c00156a3:	e8 8c ff ff ff       	call   c0015634 <Thr::getDriverBaseFromAddress(unsigned long)>
c00156a8:	5a                   	pop    edx
c00156a9:	31 d2                	xor    edx,edx
c00156ab:	85 c0                	test   eax,eax
c00156ad:	74 04                	je     c00156b3 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c00156af:	89 da                	mov    edx,ebx
c00156b1:	29 c2                	sub    edx,eax
c00156b3:	89 d0                	mov    eax,edx
c00156b5:	5b                   	pop    ebx
c00156b6:	c3                   	ret    

c00156b7 <Thr::loadDLL(char const*, bool)>:
c00156b7:	55                   	push   ebp
c00156b8:	57                   	push   edi
c00156b9:	56                   	push   esi
c00156ba:	53                   	push   ebx
c00156bb:	81 ec 34 01 00 00    	sub    esp,0x134
c00156c1:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c00156c8:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c00156cf:	56                   	push   esi
c00156d0:	68 17 29 02 c0       	push   0xc0022917
c00156d5:	e8 6b 52 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00156da:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00156e1:	e8 d0 23 ff ff       	call   c0007ab6 <malloc>
c00156e6:	83 c4 0c             	add    esp,0xc
c00156e9:	89 c3                	mov    ebx,eax
c00156eb:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c00156f1:	56                   	push   esi
c00156f2:	50                   	push   eax
c00156f3:	e8 ca 64 ff ff       	call   c000bbc2 <File::File(char const*, Process*)>
c00156f8:	83 c4 10             	add    esp,0x10
c00156fb:	85 db                	test   ebx,ebx
c00156fd:	75 3c                	jne    c001573b <Thr::loadDLL(char const*, bool)+0x84>
c00156ff:	89 f8                	mov    eax,edi
c0015701:	84 c0                	test   al,al
c0015703:	0f 84 d2 01 00 00    	je     c00158db <Thr::loadDLL(char const*, bool)+0x224>
c0015709:	55                   	push   ebp
c001570a:	55                   	push   ebp
c001570b:	68 28 29 02 c0       	push   0xc0022928
c0015710:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c0015714:	55                   	push   ebp
c0015715:	e8 26 af fe ff       	call   c0000640 <strcpy>
c001571a:	58                   	pop    eax
c001571b:	5a                   	pop    edx
c001571c:	56                   	push   esi
c001571d:	55                   	push   ebp
c001571e:	e8 1d b1 fe ff       	call   c0000840 <strcat>
c0015723:	59                   	pop    ecx
c0015724:	58                   	pop    eax
c0015725:	68 3b 29 02 c0       	push   0xc002293b
c001572a:	55                   	push   ebp
c001572b:	e8 10 b1 fe ff       	call   c0000840 <strcat>
c0015730:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0015733:	e8 5b bf ff ff       	call   c0011693 <KePanic(char const*)>
c0015738:	83 c4 10             	add    esp,0x10
c001573b:	51                   	push   ecx
c001573c:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c0015740:	50                   	push   eax
c0015741:	8d 44 24 20          	lea    eax,[esp+0x20]
c0015745:	50                   	push   eax
c0015746:	53                   	push   ebx
c0015747:	e8 96 67 ff ff       	call   c000bee2 <File::stat(unsigned long long*, bool*)>
c001574c:	83 c4 10             	add    esp,0x10
c001574f:	85 db                	test   ebx,ebx
c0015751:	74 0c                	je     c001575f <Thr::loadDLL(char const*, bool)+0xa8>
c0015753:	83 ec 0c             	sub    esp,0xc
c0015756:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015758:	53                   	push   ebx
c0015759:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001575c:	83 c4 10             	add    esp,0x10
c001575f:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c0015764:	75 0a                	jne    c0015770 <Thr::loadDLL(char const*, bool)+0xb9>
c0015766:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001576a:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001576e:	75 3c                	jne    c00157ac <Thr::loadDLL(char const*, bool)+0xf5>
c0015770:	89 f8                	mov    eax,edi
c0015772:	84 c0                	test   al,al
c0015774:	0f 84 49 01 00 00    	je     c00158c3 <Thr::loadDLL(char const*, bool)+0x20c>
c001577a:	51                   	push   ecx
c001577b:	51                   	push   ecx
c001577c:	68 28 29 02 c0       	push   0xc0022928
c0015781:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c0015785:	53                   	push   ebx
c0015786:	e8 b5 ae fe ff       	call   c0000640 <strcpy>
c001578b:	5d                   	pop    ebp
c001578c:	58                   	pop    eax
c001578d:	56                   	push   esi
c001578e:	53                   	push   ebx
c001578f:	e8 ac b0 fe ff       	call   c0000840 <strcat>
c0015794:	58                   	pop    eax
c0015795:	5a                   	pop    edx
c0015796:	68 3b 29 02 c0       	push   0xc002293b
c001579b:	53                   	push   ebx
c001579c:	e8 9f b0 fe ff       	call   c0000840 <strcat>
c00157a1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00157a4:	e8 ea be ff ff       	call   c0011693 <KePanic(char const*)>
c00157a9:	83 c4 10             	add    esp,0x10
c00157ac:	52                   	push   edx
c00157ad:	6a 03                	push   0x3
c00157af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00157b3:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00157b7:	05 ff 0f 00 00       	add    eax,0xfff
c00157bc:	83 d2 00             	adc    edx,0x0
c00157bf:	0f ac d0 0c          	shrd   eax,edx,0xc
c00157c3:	50                   	push   eax
c00157c4:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c00157ca:	e8 55 46 ff ff       	call   c0009e24 <VAS::allocatePages(int, int)>
c00157cf:	59                   	pop    ecx
c00157d0:	89 c3                	mov    ebx,eax
c00157d2:	5d                   	pop    ebp
c00157d3:	50                   	push   eax
c00157d4:	68 12 0e 02 c0       	push   0xc0020e12
c00157d9:	e8 67 51 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00157de:	89 34 24             	mov    DWORD PTR [esp],esi
c00157e1:	e8 8a ad fe ff       	call   c0000570 <strlen>
c00157e6:	8b 2d 00 bf 02 c0    	mov    ebp,DWORD PTR ds:0xc002bf00
c00157ec:	40                   	inc    eax
c00157ed:	89 04 24             	mov    DWORD PTR [esp],eax
c00157f0:	e8 c1 22 ff ff       	call   c0007ab6 <malloc>
c00157f5:	89 04 ad 20 c3 02 c0 	mov    DWORD PTR [ebp*4-0x3ffd3ce0],eax
c00157fc:	58                   	pop    eax
c00157fd:	a1 00 bf 02 c0       	mov    eax,ds:0xc002bf00
c0015802:	5a                   	pop    edx
c0015803:	56                   	push   esi
c0015804:	ff 34 85 20 c3 02 c0 	push   DWORD PTR [eax*4-0x3ffd3ce0]
c001580b:	e8 30 ae fe ff       	call   c0000640 <strcpy>
c0015810:	a1 00 bf 02 c0       	mov    eax,ds:0xc002bf00
c0015815:	8d 50 01             	lea    edx,[eax+0x1]
c0015818:	89 1c 85 20 c1 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3ee0],ebx
c001581f:	89 15 00 bf 02 c0    	mov    DWORD PTR ds:0xc002bf00,edx
c0015825:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015829:	83 c4 0c             	add    esp,0xc
c001582c:	89 14 85 20 bf 02 c0 	mov    DWORD PTR [eax*4-0x3ffd40e0],edx
c0015833:	6a 01                	push   0x1
c0015835:	53                   	push   ebx
c0015836:	56                   	push   esi
c0015837:	e8 bf f6 ff ff       	call   c0014efb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001583c:	83 c4 10             	add    esp,0x10
c001583f:	0f b6 c0             	movzx  eax,al
c0015842:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015846:	85 c0                	test   eax,eax
c0015848:	0f 85 89 00 00 00    	jne    c00158d7 <Thr::loadDLL(char const*, bool)+0x220>
c001584e:	89 f8                	mov    eax,edi
c0015850:	84 c0                	test   al,al
c0015852:	74 73                	je     c00158c7 <Thr::loadDLL(char const*, bool)+0x210>
c0015854:	83 ec 0c             	sub    esp,0xc
c0015857:	68 3d 29 02 c0       	push   0xc002293d
c001585c:	e8 32 be ff ff       	call   c0011693 <KePanic(char const*)>
c0015861:	83 c4 10             	add    esp,0x10
c0015864:	eb 61                	jmp    c00158c7 <Thr::loadDLL(char const*, bool)+0x210>
c0015866:	50                   	push   eax
c0015867:	50                   	push   eax
c0015868:	89 e8                	mov    eax,ebp
c001586a:	c1 e0 0c             	shl    eax,0xc
c001586d:	01 d8                	add    eax,ebx
c001586f:	50                   	push   eax
c0015870:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c0015876:	e8 91 40 ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c001587b:	83 c4 10             	add    esp,0x10
c001587e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015880:	a8 60                	test   al,0x60
c0015882:	75 11                	jne    c0015895 <Thr::loadDLL(char const*, bool)+0x1de>
c0015884:	83 ec 0c             	sub    esp,0xc
c0015887:	25 00 f0 ff ff       	and    eax,0xfffff000
c001588c:	50                   	push   eax
c001588d:	e8 c4 24 ff ff       	call   c0007d56 <Phys::freePage(unsigned long)>
c0015892:	83 c4 10             	add    esp,0x10
c0015895:	45                   	inc    ebp
c0015896:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001589a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001589e:	05 ff 0f 00 00       	add    eax,0xfff
c00158a3:	bf 00 00 00 00       	mov    edi,0x0
c00158a8:	83 d2 00             	adc    edx,0x0
c00158ab:	0f ac d0 0c          	shrd   eax,edx,0xc
c00158af:	c1 ea 0c             	shr    edx,0xc
c00158b2:	39 c5                	cmp    ebp,eax
c00158b4:	89 d1                	mov    ecx,edx
c00158b6:	89 f8                	mov    eax,edi
c00158b8:	19 c8                	sbb    eax,ecx
c00158ba:	72 aa                	jb     c0015866 <Thr::loadDLL(char const*, bool)+0x1af>
c00158bc:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00158c1:	75 18                	jne    c00158db <Thr::loadDLL(char const*, bool)+0x224>
c00158c3:	31 db                	xor    ebx,ebx
c00158c5:	eb 14                	jmp    c00158db <Thr::loadDLL(char const*, bool)+0x224>
c00158c7:	83 ec 0c             	sub    esp,0xc
c00158ca:	68 5c 29 02 c0       	push   0xc002295c
c00158cf:	e8 bf bd ff ff       	call   c0011693 <KePanic(char const*)>
c00158d4:	83 c4 10             	add    esp,0x10
c00158d7:	31 ed                	xor    ebp,ebp
c00158d9:	eb bb                	jmp    c0015896 <Thr::loadDLL(char const*, bool)+0x1df>
c00158db:	81 c4 2c 01 00 00    	add    esp,0x12c
c00158e1:	89 d8                	mov    eax,ebx
c00158e3:	5b                   	pop    ebx
c00158e4:	5e                   	pop    esi
c00158e5:	5f                   	pop    edi
c00158e6:	5d                   	pop    ebp
c00158e7:	c3                   	ret    

c00158e8 <Thr::executeDLL(unsigned long, void*)>:
c00158e8:	56                   	push   esi
c00158e9:	53                   	push   ebx
c00158ea:	52                   	push   edx
c00158eb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00158ef:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00158f3:	85 db                	test   ebx,ebx
c00158f5:	75 10                	jne    c0015907 <Thr::executeDLL(unsigned long, void*)+0x1f>
c00158f7:	83 ec 0c             	sub    esp,0xc
c00158fa:	68 78 29 02 c0       	push   0xc0022978
c00158ff:	e8 8f bd ff ff       	call   c0011693 <KePanic(char const*)>
c0015904:	83 c4 10             	add    esp,0x10
c0015907:	50                   	push   eax
c0015908:	50                   	push   eax
c0015909:	53                   	push   ebx
c001590a:	68 a2 29 02 c0       	push   0xc00229a2
c001590f:	e8 31 50 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0015914:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0015918:	89 d8                	mov    eax,ebx
c001591a:	83 c4 14             	add    esp,0x14
c001591d:	5b                   	pop    ebx
c001591e:	5e                   	pop    esi
c001591f:	ff e0                	jmp    eax
c0015921:	66 90                	xchg   ax,ax
c0015923:	90                   	nop

c0015924 <userModeEntryPoint(void*)>:
c0015924:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0015929:	83 e8 01             	sub    eax,0x1
c001592c:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0015931:	75 01                	jne    c0015934 <userModeEntryPoint(void*)+0x10>
c0015933:	fb                   	sti    
c0015934:	fb                   	sti    
c0015935:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001593a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001593d:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c0015943:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015947:	e9 f3 a8 fe ff       	jmp    c000023f <goToUsermode>

c001594c <changeTSS>:
c001594c:	83 ec 14             	sub    esp,0x14
c001594f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015954:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015957:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001595c:	c1 e2 15             	shl    edx,0x15
c001595f:	29 d0                	sub    eax,edx
c0015961:	50                   	push   eax
c0015962:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0015967:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001596d:	05 7c 11 00 00       	add    eax,0x117c
c0015972:	50                   	push   eax
c0015973:	e8 dc 35 ff ff       	call   c0008f54 <TSS::setESP(unsigned long)>
c0015978:	83 c4 1c             	add    esp,0x1c
c001597b:	c3                   	ret    

c001597c <switchToThread(ThreadControlBlock*)>:
c001597c:	57                   	push   edi
c001597d:	8b 0d c4 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c4
c0015983:	56                   	push   esi
c0015984:	85 c9                	test   ecx,ecx
c0015986:	53                   	push   ebx
c0015987:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001598b:	0f 85 8b 00 00 00    	jne    c0015a1c <switchToThread(ThreadControlBlock*)+0xa0>
c0015991:	0f b6 53 40          	movzx  edx,BYTE PTR [ebx+0x40]
c0015995:	81 fa ff 00 00 00    	cmp    edx,0xff
c001599b:	74 7b                	je     c0015a18 <switchToThread(ThreadControlBlock*)+0x9c>
c001599d:	b8 00 04 00 00       	mov    eax,0x400
c00159a2:	29 d0                	sub    eax,edx
c00159a4:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00159a7:	d1 f8                	sar    eax,1
c00159a9:	01 d0                	add    eax,edx
c00159ab:	90                   	nop
c00159ac:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00159af:	e8 1e 28 00 00       	call   c00181d2 <HalQueryPerformanceCounter()>
c00159b4:	a3 08 c7 02 c0       	mov    ds:0xc002c708,eax
c00159b9:	89 15 0c c7 02 c0    	mov    DWORD PTR ds:0xc002c70c,edx
c00159bf:	89 c6                	mov    esi,eax
c00159c1:	89 d7                	mov    edi,edx
c00159c3:	2b 35 f8 c6 02 c0    	sub    esi,DWORD PTR ds:0xc002c6f8
c00159c9:	a3 f8 c6 02 c0       	mov    ds:0xc002c6f8,eax
c00159ce:	1b 3d fc c6 02 c0    	sbb    edi,DWORD PTR ds:0xc002c6fc
c00159d4:	89 35 00 c7 02 c0    	mov    DWORD PTR ds:0xc002c700,esi
c00159da:	89 3d 04 c7 02 c0    	mov    DWORD PTR ds:0xc002c704,edi
c00159e0:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00159e6:	89 15 fc c6 02 c0    	mov    DWORD PTR ds:0xc002c6fc,edx
c00159ec:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c00159ef:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c00159f2:	01 c6                	add    esi,eax
c00159f4:	11 d7                	adc    edi,edx
c00159f6:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c00159f9:	83 ec 0c             	sub    esp,0xc
c00159fc:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c00159ff:	53                   	push   ebx
c0015a00:	e8 72 a8 fe ff       	call   c0000277 <switchToThreadASM>
c0015a05:	0f 20 c0             	mov    eax,cr0
c0015a08:	83 c8 08             	or     eax,0x8
c0015a0b:	0f 22 c0             	mov    cr0,eax
c0015a0e:	83 c4 10             	add    esp,0x10
c0015a11:	5b                   	pop    ebx
c0015a12:	5e                   	pop    esi
c0015a13:	5f                   	pop    edi
c0015a14:	c3                   	ret    
c0015a15:	8d 76 00             	lea    esi,[esi+0x0]
c0015a18:	31 c0                	xor    eax,eax
c0015a1a:	eb 90                	jmp    c00159ac <switchToThread(ThreadControlBlock*)+0x30>
c0015a1c:	5b                   	pop    ebx
c0015a1d:	c7 05 c0 c6 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x1
c0015a27:	5e                   	pop    esi
c0015a28:	5f                   	pop    edi
c0015a29:	c3                   	ret    
c0015a2a:	66 90                	xchg   ax,ax

c0015a2c <Process::addArgs(char**)>:
c0015a2c:	57                   	push   edi
c0015a2d:	56                   	push   esi
c0015a2e:	53                   	push   ebx
c0015a2f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015a33:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0015a37:	c7 86 16 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x516],0x0
c0015a41:	85 ff                	test   edi,edi
c0015a43:	74 4f                	je     c0015a94 <Process::addArgs(char**)+0x68>
c0015a45:	8b 07                	mov    eax,DWORD PTR [edi]
c0015a47:	85 c0                	test   eax,eax
c0015a49:	74 49                	je     c0015a94 <Process::addArgs(char**)+0x68>
c0015a4b:	31 db                	xor    ebx,ebx
c0015a4d:	8d 76 00             	lea    esi,[esi+0x0]
c0015a50:	83 ec 0c             	sub    esp,0xc
c0015a53:	50                   	push   eax
c0015a54:	e8 17 ab fe ff       	call   c0000570 <strlen>
c0015a59:	83 c0 01             	add    eax,0x1
c0015a5c:	89 04 24             	mov    DWORD PTR [esp],eax
c0015a5f:	e8 52 20 ff ff       	call   c0007ab6 <malloc>
c0015a64:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c0015a6b:	5a                   	pop    edx
c0015a6c:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0015a6f:	59                   	pop    ecx
c0015a70:	83 c3 01             	add    ebx,0x1
c0015a73:	52                   	push   edx
c0015a74:	50                   	push   eax
c0015a75:	e8 c6 ab fe ff       	call   c0000640 <strcpy>
c0015a7a:	8b 8e 16 05 00 00    	mov    ecx,DWORD PTR [esi+0x516]
c0015a80:	83 c4 10             	add    esp,0x10
c0015a83:	83 c1 01             	add    ecx,0x1
c0015a86:	89 8e 16 05 00 00    	mov    DWORD PTR [esi+0x516],ecx
c0015a8c:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0015a8f:	85 c0                	test   eax,eax
c0015a91:	75 bd                	jne    c0015a50 <Process::addArgs(char**)+0x24>
c0015a93:	90                   	nop
c0015a94:	5b                   	pop    ebx
c0015a95:	5e                   	pop    esi
c0015a96:	5f                   	pop    edi
c0015a97:	c3                   	ret    

c0015a98 <Process::Process(char const*, Process*, char**)>:
c0015a98:	56                   	push   esi
c0015a99:	53                   	push   ebx
c0015a9a:	83 ec 14             	sub    esp,0x14
c0015a9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015aa1:	05 0c 02 00 00       	add    eax,0x20c
c0015aa6:	bb 07 00 00 00       	mov    ebx,0x7
c0015aab:	89 c6                	mov    esi,eax
c0015aad:	8d 76 00             	lea    esi,[esi+0x0]
c0015ab0:	85 db                	test   ebx,ebx
c0015ab2:	78 14                	js     c0015ac8 <Process::Process(char const*, Process*, char**)+0x30>
c0015ab4:	83 ec 0c             	sub    esp,0xc
c0015ab7:	56                   	push   esi
c0015ab8:	e8 eb a5 00 00       	call   c00200a8 <ThreadControlBlock::ThreadControlBlock()>
c0015abd:	83 c4 10             	add    esp,0x10
c0015ac0:	83 c6 5f             	add    esi,0x5f
c0015ac3:	83 eb 01             	sub    ebx,0x1
c0015ac6:	eb e8                	jmp    c0015ab0 <Process::Process(char const*, Process*, char**)+0x18>
c0015ac8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015acc:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0015ad3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015ad7:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0015ade:	83 ec 0c             	sub    esp,0xc
c0015ae1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015ae5:	e8 9e b9 ff ff       	call   c0011488 <KeNewProcessEnv(Process*)>
c0015aea:	83 c4 10             	add    esp,0x10
c0015aed:	89 c2                	mov    edx,eax
c0015aef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015af3:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0015af9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015afd:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0015b06:	a1 c0 3f 02 c0       	mov    eax,ds:0xc0023fc0
c0015b0b:	8d 50 01             	lea    edx,[eax+0x1]
c0015b0e:	89 15 c0 3f 02 c0    	mov    DWORD PTR ds:0xc0023fc0,edx
c0015b14:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015b18:	89 02                	mov    DWORD PTR [edx],eax
c0015b1a:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c0015b22:	83 ec 0c             	sub    esp,0xc
c0015b25:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015b29:	e8 88 1f ff ff       	call   c0007ab6 <malloc>
c0015b2e:	83 c4 10             	add    esp,0x10
c0015b31:	89 c3                	mov    ebx,eax
c0015b33:	83 ec 08             	sub    esp,0x8
c0015b36:	6a 00                	push   0x0
c0015b38:	53                   	push   ebx
c0015b39:	e8 2a 45 ff ff       	call   c000a068 <VAS::VAS(bool)>
c0015b3e:	83 c4 10             	add    esp,0x10
c0015b41:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b45:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0015b4b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b4f:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0015b59:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b5d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015b61:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0015b67:	e8 42 bf ff ff       	call   c0011aae <KeInitSignals()>
c0015b6c:	89 c2                	mov    edx,eax
c0015b6e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b72:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0015b78:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b7c:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015b82:	85 c0                	test   eax,eax
c0015b84:	74 42                	je     c0015bc8 <Process::Process(char const*, Process*, char**)+0x130>
c0015b86:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b8a:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015b90:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0015b96:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b9a:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0015ba0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015ba4:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015baa:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0015bb0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015bb4:	05 0c 01 00 00       	add    eax,0x10c
c0015bb9:	83 ec 08             	sub    esp,0x8
c0015bbc:	52                   	push   edx
c0015bbd:	50                   	push   eax
c0015bbe:	e8 7d aa fe ff       	call   c0000640 <strcpy>
c0015bc3:	83 c4 10             	add    esp,0x10
c0015bc6:	eb 64                	jmp    c0015c2c <Process::Process(char const*, Process*, char**)+0x194>
c0015bc8:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c0015bd0:	83 ec 0c             	sub    esp,0xc
c0015bd3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015bd7:	e8 da 1e ff ff       	call   c0007ab6 <malloc>
c0015bdc:	83 c4 10             	add    esp,0x10
c0015bdf:	89 c3                	mov    ebx,eax
c0015be1:	83 ec 08             	sub    esp,0x8
c0015be4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015be8:	53                   	push   ebx
c0015be9:	e8 78 30 ff ff       	call   c0008c66 <VgaText::VgaText(char const*)>
c0015bee:	83 c4 10             	add    esp,0x10
c0015bf1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015bf5:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0015bfb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015bff:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015c05:	83 ec 0c             	sub    esp,0xc
c0015c08:	50                   	push   eax
c0015c09:	e8 f6 28 ff ff       	call   c0008504 <addToTerminalCycle(VgaText*)>
c0015c0e:	83 c4 10             	add    esp,0x10
c0015c11:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015c15:	05 0c 01 00 00       	add    eax,0x10c
c0015c1a:	83 ec 08             	sub    esp,0x8
c0015c1d:	68 c1 29 02 c0       	push   0xc00229c1
c0015c22:	50                   	push   eax
c0015c23:	e8 18 aa fe ff       	call   c0000640 <strcpy>
c0015c28:	83 c4 10             	add    esp,0x10
c0015c2b:	90                   	nop
c0015c2c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015c30:	83 c0 0c             	add    eax,0xc
c0015c33:	83 ec 08             	sub    esp,0x8
c0015c36:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015c3a:	50                   	push   eax
c0015c3b:	e8 00 aa fe ff       	call   c0000640 <strcpy>
c0015c40:	83 c4 10             	add    esp,0x10
c0015c43:	83 ec 08             	sub    esp,0x8
c0015c46:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0015c4a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015c4e:	e8 d9 fd ff ff       	call   c0015a2c <Process::addArgs(char**)>
c0015c53:	83 c4 10             	add    esp,0x10
c0015c56:	83 ec 08             	sub    esp,0x8
c0015c59:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015c5d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015c61:	e8 63 ed ff ff       	call   c00149c9 <Thr::loadProgramIntoMemory(Process*, char const*)>
c0015c66:	83 c4 10             	add    esp,0x10
c0015c69:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0015c6d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0015c71:	83 f0 01             	xor    eax,0x1
c0015c74:	88 c2                	mov    dl,al
c0015c76:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015c7a:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c0015c80:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0015c85:	83 ec 04             	sub    esp,0x4
c0015c88:	50                   	push   eax
c0015c89:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015c8d:	68 18 2a 02 c0       	push   0xc0022a18
c0015c92:	e8 ae 4c ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0015c97:	83 c4 10             	add    esp,0x10
c0015c9a:	90                   	nop
c0015c9b:	83 c4 14             	add    esp,0x14
c0015c9e:	5b                   	pop    ebx
c0015c9f:	5e                   	pop    esi
c0015ca0:	c3                   	ret    
c0015ca1:	90                   	nop
c0015ca2:	66 90                	xchg   ax,ax

c0015ca4 <Process::Process(bool, char const*, Process*, char**)>:
c0015ca4:	56                   	push   esi
c0015ca5:	53                   	push   ebx
c0015ca6:	83 ec 24             	sub    esp,0x24
c0015ca9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015cad:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0015cb1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015cb5:	05 0c 02 00 00       	add    eax,0x20c
c0015cba:	bb 07 00 00 00       	mov    ebx,0x7
c0015cbf:	89 c6                	mov    esi,eax
c0015cc1:	8d 76 00             	lea    esi,[esi+0x0]
c0015cc4:	85 db                	test   ebx,ebx
c0015cc6:	78 14                	js     c0015cdc <Process::Process(bool, char const*, Process*, char**)+0x38>
c0015cc8:	83 ec 0c             	sub    esp,0xc
c0015ccb:	56                   	push   esi
c0015ccc:	e8 d7 a3 00 00       	call   c00200a8 <ThreadControlBlock::ThreadControlBlock()>
c0015cd1:	83 c4 10             	add    esp,0x10
c0015cd4:	83 c6 5f             	add    esi,0x5f
c0015cd7:	83 eb 01             	sub    ebx,0x1
c0015cda:	eb e8                	jmp    c0015cc4 <Process::Process(bool, char const*, Process*, char**)+0x20>
c0015cdc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015ce0:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0015ce7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015ceb:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0015cf2:	83 ec 0c             	sub    esp,0xc
c0015cf5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0015cf9:	e8 8a b7 ff ff       	call   c0011488 <KeNewProcessEnv(Process*)>
c0015cfe:	83 c4 10             	add    esp,0x10
c0015d01:	89 c2                	mov    edx,eax
c0015d03:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d07:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0015d0d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d11:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0015d1a:	a1 c0 3f 02 c0       	mov    eax,ds:0xc0023fc0
c0015d1f:	8d 50 01             	lea    edx,[eax+0x1]
c0015d22:	89 15 c0 3f 02 c0    	mov    DWORD PTR ds:0xc0023fc0,edx
c0015d28:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0015d2c:	89 02                	mov    DWORD PTR [edx],eax
c0015d2e:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c0015d36:	83 ec 0c             	sub    esp,0xc
c0015d39:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0015d3d:	e8 74 1d ff ff       	call   c0007ab6 <malloc>
c0015d42:	83 c4 10             	add    esp,0x10
c0015d45:	89 c3                	mov    ebx,eax
c0015d47:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0015d4c:	83 ec 08             	sub    esp,0x8
c0015d4f:	50                   	push   eax
c0015d50:	53                   	push   ebx
c0015d51:	e8 12 43 ff ff       	call   c000a068 <VAS::VAS(bool)>
c0015d56:	83 c4 10             	add    esp,0x10
c0015d59:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d5d:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0015d63:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d67:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0015d71:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d75:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0015d79:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0015d7f:	e8 2a bd ff ff       	call   c0011aae <KeInitSignals()>
c0015d84:	89 c2                	mov    edx,eax
c0015d86:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d8a:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0015d90:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d94:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015d9a:	85 c0                	test   eax,eax
c0015d9c:	74 42                	je     c0015de0 <Process::Process(bool, char const*, Process*, char**)+0x13c>
c0015d9e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015da2:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015da8:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0015dae:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015db2:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0015db8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015dbc:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015dc2:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0015dc8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015dcc:	05 0c 01 00 00       	add    eax,0x10c
c0015dd1:	83 ec 08             	sub    esp,0x8
c0015dd4:	52                   	push   edx
c0015dd5:	50                   	push   eax
c0015dd6:	e8 65 a8 fe ff       	call   c0000640 <strcpy>
c0015ddb:	83 c4 10             	add    esp,0x10
c0015dde:	eb 64                	jmp    c0015e44 <Process::Process(bool, char const*, Process*, char**)+0x1a0>
c0015de0:	c7 44 24 18 84 01 00 00 	mov    DWORD PTR [esp+0x18],0x184
c0015de8:	83 ec 0c             	sub    esp,0xc
c0015deb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0015def:	e8 c2 1c ff ff       	call   c0007ab6 <malloc>
c0015df4:	83 c4 10             	add    esp,0x10
c0015df7:	89 c3                	mov    ebx,eax
c0015df9:	83 ec 08             	sub    esp,0x8
c0015dfc:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0015e00:	53                   	push   ebx
c0015e01:	e8 60 2e ff ff       	call   c0008c66 <VgaText::VgaText(char const*)>
c0015e06:	83 c4 10             	add    esp,0x10
c0015e09:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015e0d:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0015e13:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015e17:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015e1d:	83 ec 0c             	sub    esp,0xc
c0015e20:	50                   	push   eax
c0015e21:	e8 de 26 ff ff       	call   c0008504 <addToTerminalCycle(VgaText*)>
c0015e26:	83 c4 10             	add    esp,0x10
c0015e29:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015e2d:	05 0c 01 00 00       	add    eax,0x10c
c0015e32:	83 ec 08             	sub    esp,0x8
c0015e35:	68 c1 29 02 c0       	push   0xc00229c1
c0015e3a:	50                   	push   eax
c0015e3b:	e8 00 a8 fe ff       	call   c0000640 <strcpy>
c0015e40:	83 c4 10             	add    esp,0x10
c0015e43:	90                   	nop
c0015e44:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015e48:	83 c0 0c             	add    eax,0xc
c0015e4b:	83 ec 08             	sub    esp,0x8
c0015e4e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0015e52:	50                   	push   eax
c0015e53:	e8 e8 a7 fe ff       	call   c0000640 <strcpy>
c0015e58:	83 c4 10             	add    esp,0x10
c0015e5b:	83 ec 08             	sub    esp,0x8
c0015e5e:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0015e62:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0015e66:	e8 c1 fb ff ff       	call   c0015a2c <Process::addArgs(char**)>
c0015e6b:	83 c4 10             	add    esp,0x10
c0015e6e:	90                   	nop
c0015e6f:	83 c4 24             	add    esp,0x24
c0015e72:	5b                   	pop    ebx
c0015e73:	5e                   	pop    esi
c0015e74:	c3                   	ret    
c0015e75:	8d 76 00             	lea    esi,[esi+0x0]

c0015e78 <taskStartupFunction>:
c0015e78:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015e7d:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c0015e80:	c3                   	ret    
c0015e81:	90                   	nop
c0015e82:	66 90                	xchg   ax,ax

c0015e84 <Semaphore::Semaphore(int)>:
c0015e84:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015e88:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015e8c:	89 10                	mov    DWORD PTR [eax],edx
c0015e8e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015e92:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0015e99:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015e9d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0015ea4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015ea8:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0015eaf:	90                   	nop
c0015eb0:	c3                   	ret    
c0015eb1:	90                   	nop
c0015eb2:	66 90                	xchg   ax,ax

c0015eb4 <Mutex::Mutex()>:
c0015eb4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015eb8:	6a 01                	push   0x1
c0015eba:	50                   	push   eax
c0015ebb:	e8 c4 ff ff ff       	call   c0015e84 <Semaphore::Semaphore(int)>
c0015ec0:	83 c4 08             	add    esp,0x8
c0015ec3:	90                   	nop
c0015ec4:	c3                   	ret    
c0015ec5:	90                   	nop
c0015ec6:	66 90                	xchg   ax,ax

c0015ec8 <Process::createThread(void (*)(void*), void*, int)>:
c0015ec8:	57                   	push   edi
c0015ec9:	31 c9                	xor    ecx,ecx
c0015ecb:	56                   	push   esi
c0015ecc:	53                   	push   ebx
c0015ecd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015ed1:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c0015ed8:	89 f2                	mov    edx,esi
c0015eda:	66 90                	xchg   ax,ax
c0015edc:	0f b7 c2             	movzx  eax,dx
c0015edf:	80 e2 01             	and    dl,0x1
c0015ee2:	74 14                	je     c0015ef8 <Process::createThread(void (*)(void*), void*, int)+0x30>
c0015ee4:	d1 f8                	sar    eax,1
c0015ee6:	83 c1 01             	add    ecx,0x1
c0015ee9:	89 c2                	mov    edx,eax
c0015eeb:	83 f9 10             	cmp    ecx,0x10
c0015eee:	75 ec                	jne    c0015edc <Process::createThread(void (*)(void*), void*, int)+0x14>
c0015ef0:	31 db                	xor    ebx,ebx
c0015ef2:	89 d8                	mov    eax,ebx
c0015ef4:	5b                   	pop    ebx
c0015ef5:	5e                   	pop    esi
c0015ef6:	5f                   	pop    edi
c0015ef7:	c3                   	ret    
c0015ef8:	b8 01 00 00 00       	mov    eax,0x1
c0015efd:	d3 e0                	shl    eax,cl
c0015eff:	09 c6                	or     esi,eax
c0015f01:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0015f04:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c0015f0b:	01 c0                	add    eax,eax
c0015f0d:	01 c8                	add    eax,ecx
c0015f0f:	8d 04 80             	lea    eax,[eax+eax*4]
c0015f12:	01 d8                	add    eax,ebx
c0015f14:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c0015f1b:	75 0b                	jne    c0015f28 <Process::createThread(void (*)(void*), void*, int)+0x60>
c0015f1d:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c0015f27:	90                   	nop
c0015f28:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0015f2e:	83 ec 0c             	sub    esp,0xc
c0015f31:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0015f34:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0015f37:	01 c0                	add    eax,eax
c0015f39:	01 c8                	add    eax,ecx
c0015f3b:	8d 3c 80             	lea    edi,[eax+eax*4]
c0015f3e:	8d 04 3b             	lea    eax,[ebx+edi*1]
c0015f41:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0015f47:	8d b0 00 02 00 00    	lea    esi,[eax+0x200]
c0015f4d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0015f51:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c0015f57:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c0015f5d:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c0015f63:	89 ca                	mov    edx,ecx
c0015f65:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c0015f6c:	f7 da                	neg    edx
c0015f6e:	c1 e2 15             	shl    edx,0x15
c0015f71:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0015f77:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0015f7d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015f81:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0015f8b:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c0015f91:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015f95:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0015f9b:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0015fa5:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0015faf:	68 00 01 00 00       	push   0x100
c0015fb4:	e8 fd 1a ff ff       	call   c0007ab6 <malloc>
c0015fb9:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0015fbc:	58                   	pop    eax
c0015fbd:	5a                   	pop    edx
c0015fbe:	53                   	push   ebx
c0015fbf:	68 e4 c6 02 c0       	push   0xc002c6e4
c0015fc4:	e8 77 9e 00 00       	call   c001fe40 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015fc9:	83 c4 10             	add    esp,0x10
c0015fcc:	89 d8                	mov    eax,ebx
c0015fce:	5b                   	pop    ebx
c0015fcf:	5e                   	pop    esi
c0015fd0:	5f                   	pop    edi
c0015fd1:	c3                   	ret    
c0015fd2:	66 90                	xchg   ax,ax

c0015fd4 <Process::createUserThread()>:
c0015fd4:	83 ec 0c             	sub    esp,0xc
c0015fd7:	68 80 00 00 00       	push   0x80
c0015fdc:	6a 00                	push   0x0
c0015fde:	68 24 59 01 c0       	push   0xc0015924
c0015fe3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015fe7:	50                   	push   eax
c0015fe8:	e8 db fe ff ff       	call   c0015ec8 <Process::createThread(void (*)(void*), void*, int)>
c0015fed:	83 c4 1c             	add    esp,0x1c
c0015ff0:	c3                   	ret    
c0015ff1:	8d 76 00             	lea    esi,[esi+0x0]

c0015ff4 <setupMultitasking(void (*)())>:
c0015ff4:	56                   	push   esi
c0015ff5:	53                   	push   ebx
c0015ff6:	83 ec 04             	sub    esp,0x4
c0015ff9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015ffd:	eb 11                	jmp    c0016010 <setupMultitasking(void (*)())+0x1c>
c0015fff:	90                   	nop
c0016000:	83 ec 0c             	sub    esp,0xc
c0016003:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016008:	e8 77 9d 00 00       	call   c001fd84 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001600d:	83 c4 10             	add    esp,0x10
c0016010:	83 ec 0c             	sub    esp,0xc
c0016013:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016018:	e8 43 9d 00 00       	call   c001fd60 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001601d:	83 c4 10             	add    esp,0x10
c0016020:	84 c0                	test   al,al
c0016022:	74 dc                	je     c0016000 <setupMultitasking(void (*)())+0xc>
c0016024:	83 ec 0c             	sub    esp,0xc
c0016027:	68 24 07 00 00       	push   0x724
c001602c:	e8 85 1a ff ff       	call   c0007ab6 <malloc>
c0016031:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0016038:	89 c3                	mov    ebx,eax
c001603a:	6a 00                	push   0x0
c001603c:	68 c5 29 02 c0       	push   0xc00229c5
c0016041:	6a 01                	push   0x1
c0016043:	50                   	push   eax
c0016044:	e8 5b fc ff ff       	call   c0015ca4 <Process::Process(bool, char const*, Process*, char**)>
c0016049:	83 c4 14             	add    esp,0x14
c001604c:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c0016052:	89 1d f0 c6 02 c0    	mov    DWORD PTR ds:0xc002c6f0,ebx
c0016058:	50                   	push   eax
c0016059:	e8 fb 26 ff ff       	call   c0008759 <setActiveTerminal(VgaText*)>
c001605e:	66 8b 83 04 05 00 00 	mov    ax,WORD PTR [ebx+0x504]
c0016065:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c001606f:	83 c8 01             	or     eax,0x1
c0016072:	66 89 83 04 05 00 00 	mov    WORD PTR [ebx+0x504],ax
c0016079:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c001607f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0016082:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c001608c:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0016092:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c0016098:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c00160a2:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c00160ac:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c00160b6:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c00160bc:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c00160c6:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c00160cc:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c00160d6:	c7 04 24 00 01 00 00 	mov    DWORD PTR [esp],0x100
c00160dd:	e8 d4 19 ff ff       	call   c0007ab6 <malloc>
c00160e2:	89 83 14 02 00 00    	mov    DWORD PTR [ebx+0x214],eax
c00160e8:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c00160ee:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c00160f4:	5a                   	pop    edx
c00160f5:	59                   	pop    ecx
c00160f6:	68 c1 29 02 c0       	push   0xc00229c1
c00160fb:	50                   	push   eax
c00160fc:	e8 3f a5 fe ff       	call   c0000640 <strcpy>
c0016101:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c0016108:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001610c:	83 c4 14             	add    esp,0x14
c001610f:	5b                   	pop    ebx
c0016110:	5e                   	pop    esi
c0016111:	e9 53 a1 fe ff       	jmp    c0000269 <switchToThreadASMFirstTime>
c0016116:	66 90                	xchg   ax,ax

c0016118 <schedule()>:
c0016118:	8b 15 c4 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6c4
c001611e:	85 d2                	test   edx,edx
c0016120:	74 0e                	je     c0016130 <schedule()+0x18>
c0016122:	c7 05 c0 c6 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x1
c001612c:	c3                   	ret    
c001612d:	8d 76 00             	lea    esi,[esi+0x0]
c0016130:	53                   	push   ebx
c0016131:	83 ec 14             	sub    esp,0x14
c0016134:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016139:	e8 22 9c 00 00       	call   c001fd60 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001613e:	83 c4 10             	add    esp,0x10
c0016141:	84 c0                	test   al,al
c0016143:	75 3f                	jne    c0016184 <schedule()+0x6c>
c0016145:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001614a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001614d:	83 fa 01             	cmp    edx,0x1
c0016150:	74 3a                	je     c001618c <schedule()+0x74>
c0016152:	66 90                	xchg   ax,ax
c0016154:	83 ec 0c             	sub    esp,0xc
c0016157:	68 e4 c6 02 c0       	push   0xc002c6e4
c001615c:	e8 1b 9c 00 00       	call   c001fd7c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016161:	c7 04 24 e4 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6e4
c0016168:	89 c3                	mov    ebx,eax
c001616a:	e8 15 9c 00 00       	call   c001fd84 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001616f:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0016176:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016179:	e8 fe f7 ff ff       	call   c001597c <switchToThread(ThreadControlBlock*)>
c001617e:	83 c4 10             	add    esp,0x10
c0016181:	8d 76 00             	lea    esi,[esi+0x0]
c0016184:	83 c4 08             	add    esp,0x8
c0016187:	5b                   	pop    ebx
c0016188:	c3                   	ret    
c0016189:	8d 76 00             	lea    esi,[esi+0x0]
c001618c:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0016193:	83 ec 08             	sub    esp,0x8
c0016196:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001619b:	50                   	push   eax
c001619c:	68 e4 c6 02 c0       	push   0xc002c6e4
c00161a1:	e8 9a 9c 00 00       	call   c001fe40 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00161a6:	83 c4 10             	add    esp,0x10
c00161a9:	eb a9                	jmp    c0016154 <schedule()+0x3c>
c00161ab:	90                   	nop

c00161ac <Semaphore::tryAcquire()>:
c00161ac:	53                   	push   ebx
c00161ad:	83 ec 08             	sub    esp,0x8
c00161b0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00161b4:	fa                   	cli    
c00161b5:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00161ba:	8d 50 01             	lea    edx,[eax+0x1]
c00161bd:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c00161c3:	8b 15 c4 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6c4
c00161c9:	8d 5a 01             	lea    ebx,[edx+0x1]
c00161cc:	89 1d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ebx
c00161d2:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c00161d5:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c00161d7:	7c 33                	jl     c001620c <Semaphore::tryAcquire()+0x60>
c00161d9:	89 15 c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,edx
c00161df:	85 d2                	test   edx,edx
c00161e1:	75 0d                	jne    c00161f0 <Semaphore::tryAcquire()+0x44>
c00161e3:	8b 15 c0 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6c0
c00161e9:	85 d2                	test   edx,edx
c00161eb:	75 6f                	jne    c001625c <Semaphore::tryAcquire()+0xb0>
c00161ed:	8d 76 00             	lea    esi,[esi+0x0]
c00161f0:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00161f5:	85 c0                	test   eax,eax
c00161f7:	74 0b                	je     c0016204 <Semaphore::tryAcquire()+0x58>
c00161f9:	8d 76 00             	lea    esi,[esi+0x0]
c00161fc:	31 c0                	xor    eax,eax
c00161fe:	83 c4 08             	add    esp,0x8
c0016201:	5b                   	pop    ebx
c0016202:	c3                   	ret    
c0016203:	90                   	nop
c0016204:	fb                   	sti    
c0016205:	83 c4 08             	add    esp,0x8
c0016208:	5b                   	pop    ebx
c0016209:	c3                   	ret    
c001620a:	66 90                	xchg   ax,ax
c001620c:	83 c3 01             	add    ebx,0x1
c001620f:	89 15 c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,edx
c0016215:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c0016218:	85 d2                	test   edx,edx
c001621a:	75 24                	jne    c0016240 <Semaphore::tryAcquire()+0x94>
c001621c:	8b 0d c0 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c0
c0016222:	85 c9                	test   ecx,ecx
c0016224:	74 1a                	je     c0016240 <Semaphore::tryAcquire()+0x94>
c0016226:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c0016230:	e8 e3 fe ff ff       	call   c0016118 <schedule()>
c0016235:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001623a:	83 e8 01             	sub    eax,0x1
c001623d:	8d 76 00             	lea    esi,[esi+0x0]
c0016240:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016245:	85 c0                	test   eax,eax
c0016247:	75 0b                	jne    c0016254 <Semaphore::tryAcquire()+0xa8>
c0016249:	fb                   	sti    
c001624a:	b0 01                	mov    al,0x1
c001624c:	83 c4 08             	add    esp,0x8
c001624f:	5b                   	pop    ebx
c0016250:	c3                   	ret    
c0016251:	8d 76 00             	lea    esi,[esi+0x0]
c0016254:	b0 01                	mov    al,0x1
c0016256:	83 c4 08             	add    esp,0x8
c0016259:	5b                   	pop    ebx
c001625a:	c3                   	ret    
c001625b:	90                   	nop
c001625c:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c0016266:	e8 ad fe ff ff       	call   c0016118 <schedule()>
c001626b:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016270:	83 e8 01             	sub    eax,0x1
c0016273:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016278:	85 c0                	test   eax,eax
c001627a:	75 80                	jne    c00161fc <Semaphore::tryAcquire()+0x50>
c001627c:	eb 86                	jmp    c0016204 <Semaphore::tryAcquire()+0x58>
c001627e:	66 90                	xchg   ax,ax

c0016280 <Semaphore::assertLocked(char const*)>:
c0016280:	83 ec 0c             	sub    esp,0xc
c0016283:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016287:	fa                   	cli    
c0016288:	8b 0d c8 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c8
c001628e:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c0016293:	83 c1 01             	add    ecx,0x1
c0016296:	89 0d c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,ecx
c001629c:	8d 48 01             	lea    ecx,[eax+0x1]
c001629f:	89 0d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ecx
c00162a5:	8b 0a                	mov    ecx,DWORD PTR [edx]
c00162a7:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c00162aa:	7c 28                	jl     c00162d4 <Semaphore::assertLocked(char const*)+0x54>
c00162ac:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c00162b1:	85 c0                	test   eax,eax
c00162b3:	75 0b                	jne    c00162c0 <Semaphore::assertLocked(char const*)+0x40>
c00162b5:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c00162ba:	85 c0                	test   eax,eax
c00162bc:	75 32                	jne    c00162f0 <Semaphore::assertLocked(char const*)+0x70>
c00162be:	66 90                	xchg   ax,ax
c00162c0:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00162c5:	83 e8 01             	sub    eax,0x1
c00162c8:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00162cd:	75 01                	jne    c00162d0 <Semaphore::assertLocked(char const*)+0x50>
c00162cf:	fb                   	sti    
c00162d0:	83 c4 0c             	add    esp,0xc
c00162d3:	c3                   	ret    
c00162d4:	83 ec 0c             	sub    esp,0xc
c00162d7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00162db:	52                   	push   edx
c00162dc:	e8 b2 b3 ff ff       	call   c0011693 <KePanic(char const*)>
c00162e1:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c00162e6:	83 c4 10             	add    esp,0x10
c00162e9:	83 e8 01             	sub    eax,0x1
c00162ec:	eb be                	jmp    c00162ac <Semaphore::assertLocked(char const*)+0x2c>
c00162ee:	66 90                	xchg   ax,ax
c00162f0:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c00162fa:	e8 19 fe ff ff       	call   c0016118 <schedule()>
c00162ff:	eb bf                	jmp    c00162c0 <Semaphore::assertLocked(char const*)+0x40>
c0016301:	8d 76 00             	lea    esi,[esi+0x0]

c0016304 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0016304:	83 ec 0c             	sub    esp,0xc
c0016307:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001630c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016310:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0016313:	e8 00 fe ff ff       	call   c0016118 <schedule()>
c0016318:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001631d:	83 e8 01             	sub    eax,0x1
c0016320:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016325:	75 01                	jne    c0016328 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c0016327:	fb                   	sti    
c0016328:	83 c4 0c             	add    esp,0xc
c001632b:	c3                   	ret    

c001632c <blockTask(TaskState)>:
c001632c:	83 ec 0c             	sub    esp,0xc
c001632f:	fa                   	cli    
c0016330:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016335:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016339:	83 c0 01             	add    eax,0x1
c001633c:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016341:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016346:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0016349:	e8 ca fd ff ff       	call   c0016118 <schedule()>
c001634e:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016353:	83 e8 01             	sub    eax,0x1
c0016356:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c001635b:	75 03                	jne    c0016360 <blockTask(TaskState)+0x34>
c001635d:	fb                   	sti    
c001635e:	66 90                	xchg   ax,ax
c0016360:	83 c4 0c             	add    esp,0xc
c0016363:	c3                   	ret    

c0016364 <waitTask(int, int*, int)>:
c0016364:	83 ec 18             	sub    esp,0x18
c0016367:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001636c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0016370:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c0016373:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016377:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001637c:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001637f:	6a 07                	push   0x7
c0016381:	e8 a6 ff ff ff       	call   c001632c <blockTask(TaskState)>
c0016386:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001638b:	83 c4 10             	add    esp,0x10
c001638e:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c0016391:	85 d2                	test   edx,edx
c0016393:	74 0b                	je     c00163a0 <waitTask(int, int*, int)+0x3c>
c0016395:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c0016398:	89 02                	mov    DWORD PTR [edx],eax
c001639a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001639f:	90                   	nop
c00163a0:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c00163a3:	83 c4 0c             	add    esp,0xc
c00163a6:	c3                   	ret    
c00163a7:	90                   	nop

c00163a8 <milliTenthSleepUntil(unsigned int)>:
c00163a8:	83 ec 0c             	sub    esp,0xc
c00163ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163af:	39 05 ec b8 02 c0    	cmp    DWORD PTR ds:0xc002b8ec,eax
c00163b5:	76 05                	jbe    c00163bc <milliTenthSleepUntil(unsigned int)+0x14>
c00163b7:	90                   	nop
c00163b8:	83 c4 0c             	add    esp,0xc
c00163bb:	c3                   	ret    
c00163bc:	fa                   	cli    
c00163bd:	8b 15 c8 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6c8
c00163c3:	83 ec 08             	sub    esp,0x8
c00163c6:	83 c2 01             	add    edx,0x1
c00163c9:	8b 0d c4 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c4
c00163cf:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c00163d5:	83 c1 01             	add    ecx,0x1
c00163d8:	89 0d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ecx
c00163de:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00163e4:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c00163e7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00163ec:	50                   	push   eax
c00163ed:	68 d8 c6 02 c0       	push   0xc002c6d8
c00163f2:	e8 49 9a 00 00       	call   c001fe40 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00163f7:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00163fe:	e8 29 ff ff ff       	call   c001632c <blockTask(TaskState)>
c0016403:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c0016408:	83 c4 10             	add    esp,0x10
c001640b:	83 e8 01             	sub    eax,0x1
c001640e:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c0016413:	85 c0                	test   eax,eax
c0016415:	75 09                	jne    c0016420 <milliTenthSleepUntil(unsigned int)+0x78>
c0016417:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c001641c:	85 c0                	test   eax,eax
c001641e:	75 14                	jne    c0016434 <milliTenthSleepUntil(unsigned int)+0x8c>
c0016420:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016425:	83 e8 01             	sub    eax,0x1
c0016428:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c001642d:	75 89                	jne    c00163b8 <milliTenthSleepUntil(unsigned int)+0x10>
c001642f:	fb                   	sti    
c0016430:	83 c4 0c             	add    esp,0xc
c0016433:	c3                   	ret    
c0016434:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c001643e:	e8 d5 fc ff ff       	call   c0016118 <schedule()>
c0016443:	eb db                	jmp    c0016420 <milliTenthSleepUntil(unsigned int)+0x78>
c0016445:	8d 76 00             	lea    esi,[esi+0x0]

c0016448 <milliTenthSleep(unsigned int)>:
c0016448:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001644c:	a1 ec b8 02 c0       	mov    eax,ds:0xc002b8ec
c0016451:	01 c2                	add    edx,eax
c0016453:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0016457:	e9 4c ff ff ff       	jmp    c00163a8 <milliTenthSleepUntil(unsigned int)>

c001645c <sleep(unsigned int)>:
c001645c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016460:	8d 04 80             	lea    eax,[eax+eax*4]
c0016463:	8d 04 80             	lea    eax,[eax+eax*4]
c0016466:	8d 04 80             	lea    eax,[eax+eax*4]
c0016469:	8d 04 80             	lea    eax,[eax+eax*4]
c001646c:	c1 e0 04             	shl    eax,0x4
c001646f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016473:	eb d3                	jmp    c0016448 <milliTenthSleep(unsigned int)>
c0016475:	90                   	nop
c0016476:	66 90                	xchg   ax,ax

c0016478 <Semaphore::acquire()>:
c0016478:	83 ec 0c             	sub    esp,0xc
c001647b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001647f:	fa                   	cli    
c0016480:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016485:	83 c0 01             	add    eax,0x1
c0016488:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c001648d:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c0016492:	8d 48 01             	lea    ecx,[eax+0x1]
c0016495:	89 0d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ecx
c001649b:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001649e:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c00164a0:	7d 2e                	jge    c00164d0 <Semaphore::acquire()+0x58>
c00164a2:	83 c1 01             	add    ecx,0x1
c00164a5:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c00164a8:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c00164ad:	85 c0                	test   eax,eax
c00164af:	75 0b                	jne    c00164bc <Semaphore::acquire()+0x44>
c00164b1:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c00164b6:	85 c0                	test   eax,eax
c00164b8:	75 66                	jne    c0016520 <Semaphore::acquire()+0xa8>
c00164ba:	66 90                	xchg   ax,ax
c00164bc:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00164c1:	83 e8 01             	sub    eax,0x1
c00164c4:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00164c9:	75 01                	jne    c00164cc <Semaphore::acquire()+0x54>
c00164cb:	fb                   	sti    
c00164cc:	83 c4 0c             	add    esp,0xc
c00164cf:	c3                   	ret    
c00164d0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00164d5:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00164dc:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00164df:	85 c9                	test   ecx,ecx
c00164e1:	74 51                	je     c0016534 <Semaphore::acquire()+0xbc>
c00164e3:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c00164e6:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00164ec:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c00164ef:	90                   	nop
c00164f0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00164f5:	83 ec 0c             	sub    esp,0xc
c00164f8:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c00164fb:	68 44 2a 02 c0       	push   0xc0022a44
c0016500:	e8 40 44 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0016505:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c001650c:	e8 1b fe ff ff       	call   c001632c <blockTask(TaskState)>
c0016511:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c0016516:	83 c4 10             	add    esp,0x10
c0016519:	83 e8 01             	sub    eax,0x1
c001651c:	eb 8a                	jmp    c00164a8 <Semaphore::acquire()+0x30>
c001651e:	66 90                	xchg   ax,ax
c0016520:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c001652a:	e8 e9 fb ff ff       	call   c0016118 <schedule()>
c001652f:	eb 8b                	jmp    c00164bc <Semaphore::acquire()+0x44>
c0016531:	8d 76 00             	lea    esi,[esi+0x0]
c0016534:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016539:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001653c:	eb b2                	jmp    c00164f0 <Semaphore::acquire()+0x78>
c001653e:	66 90                	xchg   ax,ax

c0016540 <taskReturned>:
c0016540:	83 ec 18             	sub    esp,0x18
c0016543:	68 64 2a 02 c0       	push   0xc0022a64
c0016548:	e8 46 b1 ff ff       	call   c0011693 <KePanic(char const*)>
c001654d:	83 c4 10             	add    esp,0x10
c0016550:	83 ec 0c             	sub    esp,0xc
c0016553:	6a 02                	push   0x2
c0016555:	e8 d2 fd ff ff       	call   c001632c <blockTask(TaskState)>
c001655a:	fa                   	cli    
c001655b:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016560:	83 c0 01             	add    eax,0x1
c0016563:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016568:	e8 ab fb ff ff       	call   c0016118 <schedule()>
c001656d:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016572:	83 c4 10             	add    esp,0x10
c0016575:	83 e8 01             	sub    eax,0x1
c0016578:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c001657d:	85 c0                	test   eax,eax
c001657f:	75 cf                	jne    c0016550 <taskReturned+0x10>
c0016581:	fb                   	sti    
c0016582:	eb cc                	jmp    c0016550 <taskReturned+0x10>

c0016584 <Thr::processFromPID(int)>:
c0016584:	57                   	push   edi
c0016585:	56                   	push   esi
c0016586:	53                   	push   ebx
c0016587:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001658b:	fa                   	cli    
c001658c:	8b 0d c8 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c8
c0016592:	83 ec 0c             	sub    esp,0xc
c0016595:	83 c1 01             	add    ecx,0x1
c0016598:	68 e4 c6 02 c0       	push   0xc002c6e4
c001659d:	89 0d c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,ecx
c00165a3:	e8 d4 97 00 00       	call   c001fd7c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00165a8:	83 c4 10             	add    esp,0x10
c00165ab:	89 c7                	mov    edi,eax
c00165ad:	eb 15                	jmp    c00165c4 <Thr::processFromPID(int)+0x40>
c00165af:	90                   	nop
c00165b0:	83 ec 0c             	sub    esp,0xc
c00165b3:	68 e4 c6 02 c0       	push   0xc002c6e4
c00165b8:	e8 bf 97 00 00       	call   c001fd7c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00165bd:	83 c4 10             	add    esp,0x10
c00165c0:	39 f8                	cmp    eax,edi
c00165c2:	74 50                	je     c0016614 <Thr::processFromPID(int)+0x90>
c00165c4:	83 ec 0c             	sub    esp,0xc
c00165c7:	68 e4 c6 02 c0       	push   0xc002c6e4
c00165cc:	e8 ab 97 00 00       	call   c001fd7c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00165d1:	c7 04 24 e4 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6e4
c00165d8:	89 c3                	mov    ebx,eax
c00165da:	e8 a5 97 00 00       	call   c001fd84 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00165df:	58                   	pop    eax
c00165e0:	5a                   	pop    edx
c00165e1:	53                   	push   ebx
c00165e2:	68 e4 c6 02 c0       	push   0xc002c6e4
c00165e7:	e8 54 98 00 00       	call   c001fe40 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00165ec:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00165ef:	83 c4 10             	add    esp,0x10
c00165f2:	39 30                	cmp    DWORD PTR [eax],esi
c00165f4:	75 ba                	jne    c00165b0 <Thr::processFromPID(int)+0x2c>
c00165f6:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00165fb:	83 e8 01             	sub    eax,0x1
c00165fe:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016603:	74 0b                	je     c0016610 <Thr::processFromPID(int)+0x8c>
c0016605:	8d 76 00             	lea    esi,[esi+0x0]
c0016608:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001660b:	5b                   	pop    ebx
c001660c:	5e                   	pop    esi
c001660d:	5f                   	pop    edi
c001660e:	c3                   	ret    
c001660f:	90                   	nop
c0016610:	fb                   	sti    
c0016611:	eb f5                	jmp    c0016608 <Thr::processFromPID(int)+0x84>
c0016613:	90                   	nop
c0016614:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016619:	83 e8 01             	sub    eax,0x1
c001661c:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016621:	75 05                	jne    c0016628 <Thr::processFromPID(int)+0xa4>
c0016623:	fb                   	sti    
c0016624:	5b                   	pop    ebx
c0016625:	5e                   	pop    esi
c0016626:	5f                   	pop    edi
c0016627:	c3                   	ret    
c0016628:	5b                   	pop    ebx
c0016629:	31 c0                	xor    eax,eax
c001662b:	5e                   	pop    esi
c001662c:	5f                   	pop    edi
c001662d:	c3                   	ret    
c001662e:	66 90                	xchg   ax,ax

c0016630 <unblockTask(ThreadControlBlock*)>:
c0016630:	53                   	push   ebx
c0016631:	83 ec 08             	sub    esp,0x8
c0016634:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016638:	fa                   	cli    
c0016639:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001663e:	83 c0 01             	add    eax,0x1
c0016641:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016646:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0016649:	85 c0                	test   eax,eax
c001664b:	74 67                	je     c00166b4 <unblockTask(ThreadControlBlock*)+0x84>
c001664d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0016650:	83 f8 01             	cmp    eax,0x1
c0016653:	74 37                	je     c001668c <unblockTask(ThreadControlBlock*)+0x5c>
c0016655:	83 ec 0c             	sub    esp,0xc
c0016658:	68 e4 c6 02 c0       	push   0xc002c6e4
c001665d:	e8 1a 97 00 00       	call   c001fd7c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016662:	83 c4 10             	add    esp,0x10
c0016665:	85 c0                	test   eax,eax
c0016667:	75 1b                	jne    c0016684 <unblockTask(ThreadControlBlock*)+0x54>
c0016669:	eb 5d                	jmp    c00166c8 <unblockTask(ThreadControlBlock*)+0x98>
c001666b:	90                   	nop
c001666c:	83 ec 08             	sub    esp,0x8
c001666f:	50                   	push   eax
c0016670:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016675:	e8 22 9a 00 00       	call   c002009c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001667a:	83 c4 10             	add    esp,0x10
c001667d:	85 c0                	test   eax,eax
c001667f:	74 47                	je     c00166c8 <unblockTask(ThreadControlBlock*)+0x98>
c0016681:	8d 76 00             	lea    esi,[esi+0x0]
c0016684:	39 c3                	cmp    ebx,eax
c0016686:	75 e4                	jne    c001666c <unblockTask(ThreadControlBlock*)+0x3c>
c0016688:	eb 12                	jmp    c001669c <unblockTask(ThreadControlBlock*)+0x6c>
c001668a:	66 90                	xchg   ax,ax
c001668c:	83 ec 0c             	sub    esp,0xc
c001668f:	68 e3 29 02 c0       	push   0xc00229e3
c0016694:	e8 ac 42 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0016699:	83 c4 10             	add    esp,0x10
c001669c:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00166a1:	83 e8 01             	sub    eax,0x1
c00166a4:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00166a9:	75 01                	jne    c00166ac <unblockTask(ThreadControlBlock*)+0x7c>
c00166ab:	fb                   	sti    
c00166ac:	83 c4 08             	add    esp,0x8
c00166af:	5b                   	pop    ebx
c00166b0:	c3                   	ret    
c00166b1:	8d 76 00             	lea    esi,[esi+0x0]
c00166b4:	83 ec 0c             	sub    esp,0xc
c00166b7:	68 cc 29 02 c0       	push   0xc00229cc
c00166bc:	e8 84 42 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00166c1:	83 c4 10             	add    esp,0x10
c00166c4:	eb d6                	jmp    c001669c <unblockTask(ThreadControlBlock*)+0x6c>
c00166c6:	66 90                	xchg   ax,ax
c00166c8:	83 ec 08             	sub    esp,0x8
c00166cb:	53                   	push   ebx
c00166cc:	68 e4 c6 02 c0       	push   0xc002c6e4
c00166d1:	e8 6a 97 00 00       	call   c001fe40 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00166d6:	83 c4 10             	add    esp,0x10
c00166d9:	eb c1                	jmp    c001669c <unblockTask(ThreadControlBlock*)+0x6c>
c00166db:	90                   	nop

c00166dc <cleanupTerminatedTask(ThreadControlBlock*)>:
c00166dc:	55                   	push   ebp
c00166dd:	57                   	push   edi
c00166de:	56                   	push   esi
c00166df:	53                   	push   ebx
c00166e0:	83 ec 1c             	sub    esp,0x1c
c00166e3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00166e7:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00166ea:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c00166f0:	85 ed                	test   ebp,ebp
c00166f2:	7e 28                	jle    c001671c <cleanupTerminatedTask(ThreadControlBlock*)+0x40>
c00166f4:	31 f6                	xor    esi,esi
c00166f6:	66 90                	xchg   ax,ax
c00166f8:	83 ec 0c             	sub    esp,0xc
c00166fb:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c0016702:	83 c6 01             	add    esi,0x1
c0016705:	57                   	push   edi
c0016706:	e8 bb 13 ff ff       	call   c0007ac6 <free>
c001670b:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001670e:	83 c4 10             	add    esp,0x10
c0016711:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c0016717:	7f df                	jg     c00166f8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c0016719:	8d 76 00             	lea    esi,[esi+0x0]
c001671c:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0016726:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001672b:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c001672e:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0016731:	d3 c0                	rol    eax,cl
c0016733:	66 8b 8a 04 05 00 00 	mov    cx,WORD PTR [edx+0x504]
c001673a:	21 c8                	and    eax,ecx
c001673c:	66 89 82 04 05 00 00 	mov    WORD PTR [edx+0x504],ax
c0016743:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0016746:	89 f7                	mov    edi,esi
c0016748:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c0016750:	0f 85 72 01 00 00    	jne    c00168c8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c0016756:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c001675c:	85 ed                	test   ebp,ebp
c001675e:	74 1c                	je     c001677c <cleanupTerminatedTask(ThreadControlBlock*)+0xa0>
c0016760:	83 ec 0c             	sub    esp,0xc
c0016763:	55                   	push   ebp
c0016764:	e8 3b ac ff ff       	call   c00113a4 <EnvVarContainer::~EnvVarContainer()>
c0016769:	59                   	pop    ecx
c001676a:	5e                   	pop    esi
c001676b:	6a 0c                	push   0xc
c001676d:	55                   	push   ebp
c001676e:	e8 a5 40 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c0016773:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0016776:	83 c4 10             	add    esp,0x10
c0016779:	89 f7                	mov    edi,esi
c001677b:	90                   	nop
c001677c:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0016782:	85 c0                	test   eax,eax
c0016784:	0f 84 b2 00 00 00    	je     c001683c <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c001678a:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c001678d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0016791:	31 c9                	xor    ecx,ecx
c0016793:	eb 17                	jmp    c00167ac <cleanupTerminatedTask(ThreadControlBlock*)+0xd0>
c0016795:	8d 76 00             	lea    esi,[esi+0x0]
c0016798:	83 c1 01             	add    ecx,0x1
c001679b:	83 f9 10             	cmp    ecx,0x10
c001679e:	0f 84 98 00 00 00    	je     c001683c <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c00167a4:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00167aa:	66 90                	xchg   ax,ax
c00167ac:	0f b7 90 04 05 00 00 	movzx  edx,WORD PTR [eax+0x504]
c00167b3:	d3 fa                	sar    edx,cl
c00167b5:	80 e2 01             	and    dl,0x1
c00167b8:	74 de                	je     c0016798 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c00167ba:	8d 14 c9             	lea    edx,[ecx+ecx*8]
c00167bd:	01 d2                	add    edx,edx
c00167bf:	01 ca                	add    edx,ecx
c00167c1:	8d 14 92             	lea    edx,[edx+edx*4]
c00167c4:	01 d0                	add    eax,edx
c00167c6:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c00167cc:	83 fd 07             	cmp    ebp,0x7
c00167cf:	75 c7                	jne    c0016798 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c00167d1:	05 40 02 00 00       	add    eax,0x240
c00167d6:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c00167d9:	83 fd ff             	cmp    ebp,0xffffffff
c00167dc:	0f 8c ee 00 00 00    	jl     c00168d0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c00167e2:	0f 84 ac 01 00 00    	je     c0016994 <cleanupTerminatedTask(ThreadControlBlock*)+0x2b8>
c00167e8:	85 ed                	test   ebp,ebp
c00167ea:	0f 84 90 01 00 00    	je     c0016980 <cleanupTerminatedTask(ThreadControlBlock*)+0x2a4>
c00167f0:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c00167f2:	75 a4                	jne    c0016798 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c00167f4:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00167fa:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00167fe:	01 d0                	add    eax,edx
c0016800:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0016804:	83 ec 0c             	sub    esp,0xc
c0016807:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c001680d:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016810:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0016816:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001681d:	50                   	push   eax
c001681e:	e8 0d fe ff ff       	call   c0016630 <unblockTask(ThreadControlBlock*)>
c0016823:	83 c4 10             	add    esp,0x10
c0016826:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0016829:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001682d:	89 f7                	mov    edi,esi
c001682f:	83 c1 01             	add    ecx,0x1
c0016832:	83 f9 10             	cmp    ecx,0x10
c0016835:	0f 85 69 ff ff ff    	jne    c00167a4 <cleanupTerminatedTask(ThreadControlBlock*)+0xc8>
c001683b:	90                   	nop
c001683c:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c0016842:	85 c0                	test   eax,eax
c0016844:	74 62                	je     c00168a8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c0016846:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c001684c:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c0016852:	74 54                	je     c00168a8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c0016854:	83 ec 0c             	sub    esp,0xc
c0016857:	68 e4 c6 02 c0       	push   0xc002c6e4
c001685c:	e8 1b 95 00 00       	call   c001fd7c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016861:	c7 04 24 e4 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6e4
c0016868:	89 c7                	mov    edi,eax
c001686a:	e8 f1 94 00 00       	call   c001fd60 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001686f:	83 c4 10             	add    esp,0x10
c0016872:	84 c0                	test   al,al
c0016874:	0f 84 ce 00 00 00    	je     c0016948 <cleanupTerminatedTask(ThreadControlBlock*)+0x26c>
c001687a:	66 90                	xchg   ax,ax
c001687c:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001687f:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0016885:	85 d2                	test   edx,edx
c0016887:	74 0f                	je     c0016898 <cleanupTerminatedTask(ThreadControlBlock*)+0x1bc>
c0016889:	83 ec 0c             	sub    esp,0xc
c001688c:	8b 02                	mov    eax,DWORD PTR [edx]
c001688e:	52                   	push   edx
c001688f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016892:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016895:	83 c4 10             	add    esp,0x10
c0016898:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c00168a2:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c00168a5:	8d 76 00             	lea    esi,[esi+0x0]
c00168a8:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c00168ae:	85 db                	test   ebx,ebx
c00168b0:	74 16                	je     c00168c8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c00168b2:	83 ec 0c             	sub    esp,0xc
c00168b5:	53                   	push   ebx
c00168b6:	e8 f7 32 ff ff       	call   c0009bb2 <VAS::~VAS()>
c00168bb:	58                   	pop    eax
c00168bc:	5a                   	pop    edx
c00168bd:	6a 14                	push   0x14
c00168bf:	53                   	push   ebx
c00168c0:	e8 53 3f ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c00168c5:	83 c4 10             	add    esp,0x10
c00168c8:	83 c4 1c             	add    esp,0x1c
c00168cb:	5b                   	pop    ebx
c00168cc:	5e                   	pop    esi
c00168cd:	5f                   	pop    edi
c00168ce:	5d                   	pop    ebp
c00168cf:	c3                   	ret    
c00168d0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00168d4:	83 ec 0c             	sub    esp,0xc
c00168d7:	68 98 2a 02 c0       	push   0xc0022a98
c00168dc:	e8 b2 ad ff ff       	call   c0011693 <KePanic(char const*)>
c00168e1:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00168e4:	83 c4 10             	add    esp,0x10
c00168e7:	89 f7                	mov    edi,esi
c00168e9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00168ed:	e9 a6 fe ff ff       	jmp    c0016798 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c00168f2:	66 90                	xchg   ax,ax
c00168f4:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00168fa:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c0016900:	75 1e                	jne    c0016920 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0016902:	83 ec 0c             	sub    esp,0xc
c0016905:	68 00 2b 02 c0       	push   0xc0022b00
c001690a:	e8 36 40 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001690f:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0016916:	e8 11 fa ff ff       	call   c001632c <blockTask(TaskState)>
c001691b:	83 c4 10             	add    esp,0x10
c001691e:	66 90                	xchg   ax,ax
c0016920:	83 ec 08             	sub    esp,0x8
c0016923:	56                   	push   esi
c0016924:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016929:	e8 12 95 00 00       	call   c001fe40 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001692e:	c7 04 24 e4 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6e4
c0016935:	e8 42 94 00 00       	call   c001fd7c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001693a:	83 c4 10             	add    esp,0x10
c001693d:	39 f8                	cmp    eax,edi
c001693f:	0f 84 37 ff ff ff    	je     c001687c <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c0016945:	8d 76 00             	lea    esi,[esi+0x0]
c0016948:	83 ec 0c             	sub    esp,0xc
c001694b:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016950:	e8 27 94 00 00       	call   c001fd7c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016955:	c7 04 24 e4 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6e4
c001695c:	89 c6                	mov    esi,eax
c001695e:	e8 21 94 00 00       	call   c001fd84 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016963:	83 c4 10             	add    esp,0x10
c0016966:	39 f3                	cmp    ebx,esi
c0016968:	74 b6                	je     c0016920 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c001696a:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c001696d:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016970:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c0016976:	75 a8                	jne    c0016920 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0016978:	e9 77 ff ff ff       	jmp    c00168f4 <cleanupTerminatedTask(ThreadControlBlock*)+0x218>
c001697d:	8d 76 00             	lea    esi,[esi+0x0]
c0016980:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0016984:	83 ec 0c             	sub    esp,0xc
c0016987:	68 cc 2a 02 c0       	push   0xc0022acc
c001698c:	e9 4b ff ff ff       	jmp    c00168dc <cleanupTerminatedTask(ThreadControlBlock*)+0x200>
c0016991:	8d 76 00             	lea    esi,[esi+0x0]
c0016994:	8b 36                	mov    esi,DWORD PTR [esi]
c0016996:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001699a:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c001699d:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00169a0:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c00169a6:	01 d7                	add    edi,edx
c00169a8:	89 f8                	mov    eax,edi
c00169aa:	e9 51 fe ff ff       	jmp    c0016800 <cleanupTerminatedTask(ThreadControlBlock*)+0x124>
c00169af:	90                   	nop

c00169b0 <cleanerTaskFunction(void*)>:
c00169b0:	53                   	push   ebx
c00169b1:	83 ec 08             	sub    esp,0x8
c00169b4:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00169b9:	83 e8 01             	sub    eax,0x1
c00169bc:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00169c1:	75 01                	jne    c00169c4 <cleanerTaskFunction(void*)+0x14>
c00169c3:	fb                   	sti    
c00169c4:	fa                   	cli    
c00169c5:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00169ca:	80 3d ac c6 02 c0 00 	cmp    BYTE PTR ds:0xc002c6ac,0x0
c00169d1:	8d 50 01             	lea    edx,[eax+0x1]
c00169d4:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c00169da:	0f 84 c4 00 00 00    	je     c0016aa4 <cleanerTaskFunction(void*)+0xf4>
c00169e0:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00169e5:	85 c0                	test   eax,eax
c00169e7:	75 03                	jne    c00169ec <cleanerTaskFunction(void*)+0x3c>
c00169e9:	fb                   	sti    
c00169ea:	66 90                	xchg   ax,ax
c00169ec:	c6 05 ac c6 02 c0 00 	mov    BYTE PTR ds:0xc002c6ac,0x0
c00169f3:	fa                   	cli    
c00169f4:	8b 15 c8 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6c8
c00169fa:	8b 0d c4 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c4
c0016a00:	83 c2 01             	add    edx,0x1
c0016a03:	83 c1 01             	add    ecx,0x1
c0016a06:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c0016a0c:	89 0d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ecx
c0016a12:	fa                   	cli    
c0016a13:	8b 1d c8 c6 02 c0    	mov    ebx,DWORD PTR ds:0xc002c6c8
c0016a19:	83 c3 01             	add    ebx,0x1
c0016a1c:	89 1d c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,ebx
c0016a22:	eb 28                	jmp    c0016a4c <cleanerTaskFunction(void*)+0x9c>
c0016a24:	83 ec 0c             	sub    esp,0xc
c0016a27:	68 cc c6 02 c0       	push   0xc002c6cc
c0016a2c:	e8 4b 93 00 00       	call   c001fd7c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016a31:	c7 04 24 cc c6 02 c0 	mov    DWORD PTR [esp],0xc002c6cc
c0016a38:	89 c3                	mov    ebx,eax
c0016a3a:	e8 45 93 00 00       	call   c001fd84 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016a3f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016a42:	e8 95 fc ff ff       	call   c00166dc <cleanupTerminatedTask(ThreadControlBlock*)>
c0016a47:	83 c4 10             	add    esp,0x10
c0016a4a:	66 90                	xchg   ax,ax
c0016a4c:	83 ec 0c             	sub    esp,0xc
c0016a4f:	68 cc c6 02 c0       	push   0xc002c6cc
c0016a54:	e8 07 93 00 00       	call   c001fd60 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016a59:	83 c4 10             	add    esp,0x10
c0016a5c:	84 c0                	test   al,al
c0016a5e:	74 c4                	je     c0016a24 <cleanerTaskFunction(void*)+0x74>
c0016a60:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016a65:	83 e8 01             	sub    eax,0x1
c0016a68:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016a6d:	75 01                	jne    c0016a70 <cleanerTaskFunction(void*)+0xc0>
c0016a6f:	fb                   	sti    
c0016a70:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c0016a75:	83 e8 01             	sub    eax,0x1
c0016a78:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c0016a7d:	0f 85 31 ff ff ff    	jne    c00169b4 <cleanerTaskFunction(void*)+0x4>
c0016a83:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c0016a88:	85 c0                	test   eax,eax
c0016a8a:	0f 84 24 ff ff ff    	je     c00169b4 <cleanerTaskFunction(void*)+0x4>
c0016a90:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c0016a9a:	e8 79 f6 ff ff       	call   c0016118 <schedule()>
c0016a9f:	e9 10 ff ff ff       	jmp    c00169b4 <cleanerTaskFunction(void*)+0x4>
c0016aa4:	83 ec 0c             	sub    esp,0xc
c0016aa7:	6a 02                	push   0x2
c0016aa9:	e8 56 f8 ff ff       	call   c0016304 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0016aae:	83 c4 10             	add    esp,0x10
c0016ab1:	e9 36 ff ff ff       	jmp    c00169ec <cleanerTaskFunction(void*)+0x3c>
c0016ab6:	66 90                	xchg   ax,ax

c0016ab8 <terminateTask(int)>:
c0016ab8:	83 ec 14             	sub    esp,0x14
c0016abb:	fa                   	cli    
c0016abc:	8b 15 c8 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6c8
c0016ac2:	8b 0d c4 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c4
c0016ac8:	83 c2 01             	add    edx,0x1
c0016acb:	83 c1 01             	add    ecx,0x1
c0016ace:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c0016ad4:	89 0d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ecx
c0016ada:	fa                   	cli    
c0016adb:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016ae0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016ae4:	83 c0 01             	add    eax,0x1
c0016ae7:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016aec:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016af1:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c0016af4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016af9:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0016afc:	50                   	push   eax
c0016afd:	68 cc c6 02 c0       	push   0xc002c6cc
c0016b02:	e8 39 93 00 00       	call   c001fe40 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016b07:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016b0c:	83 c4 10             	add    esp,0x10
c0016b0f:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0016b16:	a1 a8 c6 02 c0       	mov    eax,ds:0xc002c6a8
c0016b1b:	85 c0                	test   eax,eax
c0016b1d:	74 65                	je     c0016b84 <terminateTask(int)+0xcc>
c0016b1f:	83 ec 0c             	sub    esp,0xc
c0016b22:	c6 05 ac c6 02 c0 01 	mov    BYTE PTR ds:0xc002c6ac,0x1
c0016b29:	50                   	push   eax
c0016b2a:	e8 01 fb ff ff       	call   c0016630 <unblockTask(ThreadControlBlock*)>
c0016b2f:	83 c4 10             	add    esp,0x10
c0016b32:	66 90                	xchg   ax,ax
c0016b34:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016b39:	83 e8 01             	sub    eax,0x1
c0016b3c:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016b41:	75 01                	jne    c0016b44 <terminateTask(int)+0x8c>
c0016b43:	fb                   	sti    
c0016b44:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c0016b49:	83 e8 01             	sub    eax,0x1
c0016b4c:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c0016b51:	75 09                	jne    c0016b5c <terminateTask(int)+0xa4>
c0016b53:	83 3d c0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6c0,0x0
c0016b5a:	75 3c                	jne    c0016b98 <terminateTask(int)+0xe0>
c0016b5c:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016b61:	83 e8 01             	sub    eax,0x1
c0016b64:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016b69:	75 01                	jne    c0016b6c <terminateTask(int)+0xb4>
c0016b6b:	fb                   	sti    
c0016b6c:	fa                   	cli    
c0016b6d:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016b72:	83 c0 01             	add    eax,0x1
c0016b75:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016b7a:	66 90                	xchg   ax,ax
c0016b7c:	e8 97 f5 ff ff       	call   c0016118 <schedule()>
c0016b81:	eb d9                	jmp    c0016b5c <terminateTask(int)+0xa4>
c0016b83:	90                   	nop
c0016b84:	83 ec 0c             	sub    esp,0xc
c0016b87:	68 fa 29 02 c0       	push   0xc00229fa
c0016b8c:	e8 b4 3d ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0016b91:	83 c4 10             	add    esp,0x10
c0016b94:	eb 9e                	jmp    c0016b34 <terminateTask(int)+0x7c>
c0016b96:	66 90                	xchg   ax,ax
c0016b98:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c0016ba2:	eb d8                	jmp    c0016b7c <terminateTask(int)+0xc4>

c0016ba4 <Thr::terminateFromIRQ(int)>:
c0016ba4:	83 ec 18             	sub    esp,0x18
c0016ba7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016bab:	50                   	push   eax
c0016bac:	e8 07 ff ff ff       	call   c0016ab8 <terminateTask(int)>
c0016bb1:	90                   	nop
c0016bb2:	66 90                	xchg   ax,ax

c0016bb4 <Semaphore::release()>:
c0016bb4:	83 ec 0c             	sub    esp,0xc
c0016bb7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016bbb:	fa                   	cli    
c0016bbc:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016bc1:	83 c0 01             	add    eax,0x1
c0016bc4:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016bc9:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c0016bce:	8d 48 01             	lea    ecx,[eax+0x1]
c0016bd1:	89 0d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ecx
c0016bd7:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0016bda:	85 c9                	test   ecx,ecx
c0016bdc:	74 42                	je     c0016c20 <Semaphore::release()+0x6c>
c0016bde:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0016be1:	83 ec 0c             	sub    esp,0xc
c0016be4:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0016be7:	51                   	push   ecx
c0016be8:	e8 43 fa ff ff       	call   c0016630 <unblockTask(ThreadControlBlock*)>
c0016bed:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c0016bf2:	83 c4 10             	add    esp,0x10
c0016bf5:	83 e8 01             	sub    eax,0x1
c0016bf8:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c0016bfd:	85 c0                	test   eax,eax
c0016bff:	75 0b                	jne    c0016c0c <Semaphore::release()+0x58>
c0016c01:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c0016c06:	85 c0                	test   eax,eax
c0016c08:	75 22                	jne    c0016c2c <Semaphore::release()+0x78>
c0016c0a:	66 90                	xchg   ax,ax
c0016c0c:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016c11:	83 e8 01             	sub    eax,0x1
c0016c14:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016c19:	75 01                	jne    c0016c1c <Semaphore::release()+0x68>
c0016c1b:	fb                   	sti    
c0016c1c:	83 c4 0c             	add    esp,0xc
c0016c1f:	c3                   	ret    
c0016c20:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0016c23:	83 e9 01             	sub    ecx,0x1
c0016c26:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0016c29:	eb cd                	jmp    c0016bf8 <Semaphore::release()+0x44>
c0016c2b:	90                   	nop
c0016c2c:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c0016c36:	e8 dd f4 ff ff       	call   c0016118 <schedule()>
c0016c3b:	eb cf                	jmp    c0016c0c <Semaphore::release()+0x58>
c0016c3d:	8d 76 00             	lea    esi,[esi+0x0]

c0016c40 <__static_initialization_and_destruction_0(int, int)>:
c0016c40:	83 ec 0c             	sub    esp,0xc
c0016c43:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0016c48:	0f 85 8e 00 00 00    	jne    c0016cdc <__static_initialization_and_destruction_0(int, int)+0x9c>
c0016c4e:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0016c56:	0f 85 80 00 00 00    	jne    c0016cdc <__static_initialization_and_destruction_0(int, int)+0x9c>
c0016c5c:	83 ec 0c             	sub    esp,0xc
c0016c5f:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016c64:	e8 8b 94 00 00       	call   c00200f4 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0016c69:	83 c4 10             	add    esp,0x10
c0016c6c:	83 ec 04             	sub    esp,0x4
c0016c6f:	68 d0 36 02 c0       	push   0xc00236d0
c0016c74:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016c79:	68 a4 00 02 c0       	push   0xc00200a4
c0016c7e:	e8 45 3b ff ff       	call   c000a7c8 <__cxa_atexit>
c0016c83:	83 c4 10             	add    esp,0x10
c0016c86:	83 ec 0c             	sub    esp,0xc
c0016c89:	68 d8 c6 02 c0       	push   0xc002c6d8
c0016c8e:	e8 61 94 00 00       	call   c00200f4 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0016c93:	83 c4 10             	add    esp,0x10
c0016c96:	83 ec 04             	sub    esp,0x4
c0016c99:	68 d0 36 02 c0       	push   0xc00236d0
c0016c9e:	68 d8 c6 02 c0       	push   0xc002c6d8
c0016ca3:	68 a4 00 02 c0       	push   0xc00200a4
c0016ca8:	e8 1b 3b ff ff       	call   c000a7c8 <__cxa_atexit>
c0016cad:	83 c4 10             	add    esp,0x10
c0016cb0:	83 ec 0c             	sub    esp,0xc
c0016cb3:	68 cc c6 02 c0       	push   0xc002c6cc
c0016cb8:	e8 37 94 00 00       	call   c00200f4 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0016cbd:	83 c4 10             	add    esp,0x10
c0016cc0:	83 ec 04             	sub    esp,0x4
c0016cc3:	68 d0 36 02 c0       	push   0xc00236d0
c0016cc8:	68 cc c6 02 c0       	push   0xc002c6cc
c0016ccd:	68 a4 00 02 c0       	push   0xc00200a4
c0016cd2:	e8 f1 3a ff ff       	call   c000a7c8 <__cxa_atexit>
c0016cd7:	83 c4 10             	add    esp,0x10
c0016cda:	66 90                	xchg   ax,ax
c0016cdc:	90                   	nop
c0016cdd:	83 c4 0c             	add    esp,0xc
c0016ce0:	c3                   	ret    
c0016ce1:	8d 76 00             	lea    esi,[esi+0x0]

c0016ce4 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c0016ce4:	83 ec 0c             	sub    esp,0xc
c0016ce7:	83 ec 08             	sub    esp,0x8
c0016cea:	68 ff ff 00 00       	push   0xffff
c0016cef:	6a 01                	push   0x1
c0016cf1:	e8 4a ff ff ff       	call   c0016c40 <__static_initialization_and_destruction_0(int, int)>
c0016cf6:	83 c4 10             	add    esp,0x10
c0016cf9:	83 c4 0c             	add    esp,0xc
c0016cfc:	c3                   	ret    

c0016cfd <Vm::inbv(unsigned short)>:
c0016cfd:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016d01:	66 81 fa fe fe       	cmp    dx,0xfefe
c0016d06:	75 06                	jne    c0016d0e <Vm::inbv(unsigned short)+0x11>
c0016d08:	a0 2c c7 02 c0       	mov    al,ds:0xc002c72c
c0016d0d:	c3                   	ret    
c0016d0e:	ec                   	in     al,dx
c0016d0f:	c3                   	ret    

c0016d10 <Vm::outbv(unsigned short, unsigned char)>:
c0016d10:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016d14:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016d18:	66 81 fa fe fe       	cmp    dx,0xfefe
c0016d1d:	75 25                	jne    c0016d44 <Vm::outbv(unsigned short, unsigned char)+0x34>
c0016d1f:	8b 0d 2c c7 02 c0    	mov    ecx,DWORD PTR ds:0xc002c72c
c0016d25:	8d 51 01             	lea    edx,[ecx+0x1]
c0016d28:	88 81 40 c7 02 c0    	mov    BYTE PTR [ecx-0x3ffd38c0],al
c0016d2e:	89 15 2c c7 02 c0    	mov    DWORD PTR ds:0xc002c72c,edx
c0016d34:	83 fa 20             	cmp    edx,0x20
c0016d37:	75 0c                	jne    c0016d45 <Vm::outbv(unsigned short, unsigned char)+0x35>
c0016d39:	c7 05 2c c7 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc002c72c,0x1f
c0016d43:	c3                   	ret    
c0016d44:	ee                   	out    dx,al
c0016d45:	c3                   	ret    

c0016d46 <Vm::realToLinear(unsigned short, unsigned short)>:
c0016d46:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016d4b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016d50:	c1 e0 04             	shl    eax,0x4
c0016d53:	01 d0                	add    eax,edx
c0016d55:	c3                   	ret    

c0016d56 <Vm::getSegment(unsigned int)>:
c0016d56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016d5a:	c1 e8 10             	shr    eax,0x10
c0016d5d:	c3                   	ret    

c0016d5e <Vm::getOffset(unsigned int)>:
c0016d5e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016d62:	c3                   	ret    

c0016d63 <Vm::mainloop2()>:
c0016d63:	83 ec 18             	sub    esp,0x18
c0016d66:	fa                   	cli    
c0016d67:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0016d6d:	6a 02                	push   0x2
c0016d6f:	c6 05 25 c7 02 c0 01 	mov    BYTE PTR ds:0xc002c725,0x1
c0016d76:	e8 89 f5 ff ff       	call   c0016304 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0016d7b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016d80:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0016d84:	52                   	push   edx
c0016d85:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c0016d89:	52                   	push   edx
c0016d8a:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c0016d8e:	52                   	push   edx
c0016d8f:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c0016d93:	50                   	push   eax
c0016d94:	e8 76 94 fe ff       	call   c000020f <goToVM86>
c0016d99:	83 c4 2c             	add    esp,0x2c
c0016d9c:	c3                   	ret    

c0016d9d <Vm::mainVm8086Loop(void*)>:
c0016d9d:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016da2:	48                   	dec    eax
c0016da3:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016da8:	75 01                	jne    c0016dab <Vm::mainVm8086Loop(void*)+0xe>
c0016daa:	fb                   	sti    
c0016dab:	eb b6                	jmp    c0016d63 <Vm::mainloop2()>

c0016dad <Vm::mainloop3(unsigned long)>:
c0016dad:	83 ec 18             	sub    esp,0x18
c0016db0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016db4:	fa                   	cli    
c0016db5:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0016dbb:	6a 02                	push   0x2
c0016dbd:	c6 05 24 c7 02 c0 01 	mov    BYTE PTR ds:0xc002c724,0x1
c0016dc4:	a3 20 c7 02 c0       	mov    ds:0xc002c720,eax
c0016dc9:	e8 36 f5 ff ff       	call   c0016304 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0016dce:	83 c4 1c             	add    esp,0x1c
c0016dd1:	eb 90                	jmp    c0016d63 <Vm::mainloop2()>

c0016dd3 <Vm::initialise8086()>:
c0016dd3:	83 ec 0c             	sub    esp,0xc
c0016dd6:	68 80 00 00 00       	push   0x80
c0016ddb:	6a 00                	push   0x0
c0016ddd:	68 9d 6d 01 c0       	push   0xc0016d9d
c0016de2:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c0016de8:	e8 db f0 ff ff       	call   c0015ec8 <Process::createThread(void (*)(void*), void*, int)>
c0016ded:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0016df4:	a3 28 c7 02 c0       	mov    ds:0xc002c728,eax
c0016df9:	68 00 01 00 00       	push   0x100
c0016dfe:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0016e03:	6a 00                	push   0x0
c0016e05:	6a 00                	push   0x0
c0016e07:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016e0d:	e8 08 31 ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0016e12:	83 c4 2c             	add    esp,0x2c
c0016e15:	c3                   	ret    

c0016e16 <Vm::finish8086()>:
c0016e16:	53                   	push   ebx
c0016e17:	83 ec 08             	sub    esp,0x8
c0016e1a:	fa                   	cli    
c0016e1b:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0016e21:	80 3d 24 c7 02 c0 00 	cmp    BYTE PTR ds:0xc002c724,0x0
c0016e28:	75 15                	jne    c0016e3f <Vm::finish8086()+0x29>
c0016e2a:	e8 e9 f2 ff ff       	call   c0016118 <schedule()>
c0016e2f:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016e34:	48                   	dec    eax
c0016e35:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016e3a:	75 de                	jne    c0016e1a <Vm::finish8086()+0x4>
c0016e3c:	fb                   	sti    
c0016e3d:	eb db                	jmp    c0016e1a <Vm::finish8086()+0x4>
c0016e3f:	83 ec 0c             	sub    esp,0xc
c0016e42:	8b 1d 20 c7 02 c0    	mov    ebx,DWORD PTR ds:0xc002c720
c0016e48:	ff 35 28 c7 02 c0    	push   DWORD PTR ds:0xc002c728
c0016e4e:	c6 05 24 c7 02 c0 00 	mov    BYTE PTR ds:0xc002c724,0x0
c0016e55:	e8 d6 f7 ff ff       	call   c0016630 <unblockTask(ThreadControlBlock*)>
c0016e5a:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016e5f:	83 c4 10             	add    esp,0x10
c0016e62:	8d 50 ff             	lea    edx,[eax-0x1]
c0016e65:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c0016e6b:	85 d2                	test   edx,edx
c0016e6d:	75 01                	jne    c0016e70 <Vm::finish8086()+0x5a>
c0016e6f:	fb                   	sti    
c0016e70:	89 d8                	mov    eax,ebx
c0016e72:	83 c4 08             	add    esp,0x8
c0016e75:	5b                   	pop    ebx
c0016e76:	c3                   	ret    

c0016e77 <Vm::getOutput8086(unsigned char*)>:
c0016e77:	57                   	push   edi
c0016e78:	8b 0d 2c c7 02 c0    	mov    ecx,DWORD PTR ds:0xc002c72c
c0016e7e:	56                   	push   esi
c0016e7f:	be 40 c7 02 c0       	mov    esi,0xc002c740
c0016e84:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0016e88:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016e8a:	a1 2c c7 02 c0       	mov    eax,ds:0xc002c72c
c0016e8f:	5e                   	pop    esi
c0016e90:	c7 05 2c c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c72c,0x0
c0016e9a:	5f                   	pop    edi
c0016e9b:	c3                   	ret    

c0016e9c <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0016e9c:	55                   	push   ebp
c0016e9d:	57                   	push   edi
c0016e9e:	56                   	push   esi
c0016e9f:	53                   	push   ebx
c0016ea0:	83 ec 0c             	sub    esp,0xc
c0016ea3:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0016ea7:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0016eab:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0016eaf:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0016eb3:	fa                   	cli    
c0016eb4:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0016eba:	80 3d 25 c7 02 c0 00 	cmp    BYTE PTR ds:0xc002c725,0x0
c0016ec1:	75 15                	jne    c0016ed8 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c0016ec3:	e8 50 f2 ff ff       	call   c0016118 <schedule()>
c0016ec8:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016ecd:	48                   	dec    eax
c0016ece:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016ed3:	75 de                	jne    c0016eb3 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0016ed5:	fb                   	sti    
c0016ed6:	eb db                	jmp    c0016eb3 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0016ed8:	a1 28 c7 02 c0       	mov    eax,ds:0xc002c728
c0016edd:	c7 05 2c c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c72c,0x0
c0016ee7:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0016eeb:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0016eef:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0016ef3:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0016ef7:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0016efb:	0f b7 ff             	movzx  edi,di
c0016efe:	0f b7 f6             	movzx  esi,si
c0016f01:	50                   	push   eax
c0016f02:	6a 20                	push   0x20
c0016f04:	6a 00                	push   0x0
c0016f06:	68 40 c7 02 c0       	push   0xc002c740
c0016f0b:	e8 e0 95 fe ff       	call   c00004f0 <memset>
c0016f10:	5a                   	pop    edx
c0016f11:	59                   	pop    ecx
c0016f12:	57                   	push   edi
c0016f13:	56                   	push   esi
c0016f14:	e8 2d fe ff ff       	call   c0016d46 <Vm::realToLinear(unsigned short, unsigned short)>
c0016f19:	83 c4 10             	add    esp,0x10
c0016f1c:	89 c7                	mov    edi,eax
c0016f1e:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0016f22:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0016f26:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016f28:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016f2d:	c6 05 25 c7 02 c0 00 	mov    BYTE PTR ds:0xc002c725,0x0
c0016f34:	48                   	dec    eax
c0016f35:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016f3a:	75 01                	jne    c0016f3d <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c0016f3c:	fb                   	sti    
c0016f3d:	83 ec 0c             	sub    esp,0xc
c0016f40:	ff 35 28 c7 02 c0    	push   DWORD PTR ds:0xc002c728
c0016f46:	e8 e5 f6 ff ff       	call   c0016630 <unblockTask(ThreadControlBlock*)>
c0016f4b:	83 c4 1c             	add    esp,0x1c
c0016f4e:	b0 01                	mov    al,0x1
c0016f50:	5b                   	pop    ebx
c0016f51:	5e                   	pop    esi
c0016f52:	5f                   	pop    edi
c0016f53:	5d                   	pop    ebp
c0016f54:	c3                   	ret    

c0016f55 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0016f55:	55                   	push   ebp
c0016f56:	57                   	push   edi
c0016f57:	56                   	push   esi
c0016f58:	53                   	push   ebx
c0016f59:	83 ec 34             	sub    esp,0x34
c0016f5c:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0016f60:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0016f64:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0016f68:	8b 6c 24 54          	mov    ebp,DWORD PTR [esp+0x54]
c0016f6c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016f70:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016f74:	68 28 2b 02 c0       	push   0xc0022b28
c0016f79:	e8 c7 39 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0016f7e:	83 c4 10             	add    esp,0x10
c0016f81:	fa                   	cli    
c0016f82:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0016f88:	8a 1d 25 c7 02 c0    	mov    bl,BYTE PTR ds:0xc002c725
c0016f8e:	84 db                	test   bl,bl
c0016f90:	75 15                	jne    c0016fa7 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x52>
c0016f92:	e8 81 f1 ff ff       	call   c0016118 <schedule()>
c0016f97:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016f9c:	48                   	dec    eax
c0016f9d:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016fa2:	75 dd                	jne    c0016f81 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x2c>
c0016fa4:	fb                   	sti    
c0016fa5:	eb da                	jmp    c0016f81 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x2c>
c0016fa7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016fab:	a1 28 c7 02 c0       	mov    eax,ds:0xc002c728
c0016fb0:	c7 05 2c c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c72c,0x0
c0016fba:	66 89 50 5b          	mov    WORD PTR [eax+0x5b],dx
c0016fbe:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0016fc2:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0016fc6:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0016fca:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0016fce:	50                   	push   eax
c0016fcf:	6a 20                	push   0x20
c0016fd1:	6a 00                	push   0x0
c0016fd3:	68 40 c7 02 c0       	push   0xc002c740
c0016fd8:	e8 13 95 fe ff       	call   c00004f0 <memset>
c0016fdd:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0016fe4:	e8 cd 0a ff ff       	call   c0007ab6 <malloc>
c0016fe9:	83 c4 0c             	add    esp,0xc
c0016fec:	89 c5                	mov    ebp,eax
c0016fee:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c0016ff4:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016ff8:	50                   	push   eax
c0016ff9:	e8 c4 4b ff ff       	call   c000bbc2 <File::File(char const*, Process*)>
c0016ffe:	83 c4 10             	add    esp,0x10
c0017001:	85 ed                	test   ebp,ebp
c0017003:	75 0a                	jne    c001700f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xba>
c0017005:	83 ec 0c             	sub    esp,0xc
c0017008:	68 4a 2b 02 c0       	push   0xc0022b4a
c001700d:	eb 2b                	jmp    c001703a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xe5>
c001700f:	50                   	push   eax
c0017010:	8d 44 24 17          	lea    eax,[esp+0x17]
c0017014:	50                   	push   eax
c0017015:	8d 44 24 20          	lea    eax,[esp+0x20]
c0017019:	50                   	push   eax
c001701a:	55                   	push   ebp
c001701b:	e8 c2 4e ff ff       	call   c000bee2 <File::stat(unsigned long long*, bool*)>
c0017020:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0017024:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0017028:	83 c4 10             	add    esp,0x10
c001702b:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0017030:	74 27                	je     c0017059 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x104>
c0017032:	83 ec 0c             	sub    esp,0xc
c0017035:	68 5e 2b 02 c0       	push   0xc0022b5e
c001703a:	e8 54 a6 ff ff       	call   c0011693 <KePanic(char const*)>
c001703f:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0017044:	83 c4 10             	add    esp,0x10
c0017047:	48                   	dec    eax
c0017048:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c001704d:	85 c0                	test   eax,eax
c001704f:	75 01                	jne    c0017052 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xfd>
c0017051:	fb                   	sti    
c0017052:	31 db                	xor    ebx,ebx
c0017054:	e9 90 00 00 00       	jmp    c00170e9 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x194>
c0017059:	51                   	push   ecx
c001705a:	51                   	push   ecx
c001705b:	6a 01                	push   0x1
c001705d:	55                   	push   ebp
c001705e:	e8 7d 4b ff ff       	call   c000bbe0 <File::open(FileOpenMode)>
c0017063:	83 c4 10             	add    esp,0x10
c0017066:	85 c0                	test   eax,eax
c0017068:	74 26                	je     c0017090 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x13b>
c001706a:	83 ec 0c             	sub    esp,0xc
c001706d:	68 77 2b 02 c0       	push   0xc0022b77
c0017072:	e8 1c a6 ff ff       	call   c0011693 <KePanic(char const*)>
c0017077:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001707c:	83 c4 10             	add    esp,0x10
c001707f:	48                   	dec    eax
c0017080:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0017085:	85 c0                	test   eax,eax
c0017087:	75 c9                	jne    c0017052 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xfd>
c0017089:	fb                   	sti    
c001708a:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c001708e:	eb 59                	jmp    c00170e9 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x194>
c0017090:	0f b7 ff             	movzx  edi,di
c0017093:	50                   	push   eax
c0017094:	0f b7 f6             	movzx  esi,si
c0017097:	50                   	push   eax
c0017098:	57                   	push   edi
c0017099:	56                   	push   esi
c001709a:	e8 a7 fc ff ff       	call   c0016d46 <Vm::realToLinear(unsigned short, unsigned short)>
c001709f:	5a                   	pop    edx
c00170a0:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c00170a3:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c00170a7:	51                   	push   ecx
c00170a8:	50                   	push   eax
c00170a9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00170ad:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00170b1:	55                   	push   ebp
c00170b2:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00170b5:	83 c4 14             	add    esp,0x14
c00170b8:	55                   	push   ebp
c00170b9:	e8 80 4b ff ff       	call   c000bc3e <File::close()>
c00170be:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00170c3:	83 c4 10             	add    esp,0x10
c00170c6:	48                   	dec    eax
c00170c7:	c6 05 25 c7 02 c0 00 	mov    BYTE PTR ds:0xc002c725,0x0
c00170ce:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00170d3:	85 c0                	test   eax,eax
c00170d5:	75 01                	jne    c00170d8 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x183>
c00170d7:	fb                   	sti    
c00170d8:	83 ec 0c             	sub    esp,0xc
c00170db:	ff 35 28 c7 02 c0    	push   DWORD PTR ds:0xc002c728
c00170e1:	e8 4a f5 ff ff       	call   c0016630 <unblockTask(ThreadControlBlock*)>
c00170e6:	83 c4 10             	add    esp,0x10
c00170e9:	83 c4 2c             	add    esp,0x2c
c00170ec:	88 d8                	mov    al,bl
c00170ee:	5b                   	pop    ebx
c00170ef:	5e                   	pop    esi
c00170f0:	5f                   	pop    edi
c00170f1:	5d                   	pop    ebp
c00170f2:	c3                   	ret    

c00170f3 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c00170f3:	57                   	push   edi
c00170f4:	56                   	push   esi
c00170f5:	53                   	push   ebx
c00170f6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00170fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170fe:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0017102:	83 e8 06             	sub    eax,0x6
c0017105:	0f b7 c0             	movzx  eax,ax
c0017108:	50                   	push   eax
c0017109:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001710e:	50                   	push   eax
c001710f:	e8 32 fc ff ff       	call   c0016d46 <Vm::realToLinear(unsigned short, unsigned short)>
c0017114:	5a                   	pop    edx
c0017115:	8b 73 38             	mov    esi,DWORD PTR [ebx+0x38]
c0017118:	59                   	pop    ecx
c0017119:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c001711c:	8d 51 fa             	lea    edx,[ecx-0x6]
c001711f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0017125:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0017128:	8d 56 02             	lea    edx,[esi+0x2]
c001712b:	66 89 10             	mov    WORD PTR [eax],dx
c001712e:	66 8b 53 3c          	mov    dx,WORD PTR [ebx+0x3c]
c0017132:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0017136:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0017139:	66 8b 53 40          	mov    dx,WORD PTR [ebx+0x40]
c001713d:	0f b6 f1             	movzx  esi,cl
c0017140:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0017144:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001714a:	80 7a 5d 00          	cmp    BYTE PTR [edx+0x5d],0x0
c001714e:	0f b6 d5             	movzx  edx,ch
c0017151:	74 0a                	je     c001715d <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x6a>
c0017153:	c1 e2 08             	shl    edx,0x8
c0017156:	09 f2                	or     edx,esi
c0017158:	80 ce 02             	or     dh,0x2
c001715b:	eb 08                	jmp    c0017165 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x72>
c001715d:	c1 e2 08             	shl    edx,0x8
c0017160:	09 f2                	or     edx,esi
c0017162:	80 e6 fd             	and    dh,0xfd
c0017165:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0017169:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001716e:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0017172:	0f b7 04 bd 02 00 00 00 	movzx  eax,WORD PTR [edi*4+0x2]
c001717a:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c001717d:	0f b7 04 bd 00 00 00 00 	movzx  eax,WORD PTR [edi*4+0x0]
c0017185:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0017188:	5b                   	pop    ebx
c0017189:	5e                   	pop    esi
c001718a:	5f                   	pop    edi
c001718b:	c3                   	ret    

c001718c <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001718c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0017191:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0017196:	c1 e0 04             	shl    eax,0x4
c0017199:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001719c:	c3                   	ret    

c001719d <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001719d:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00171a2:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00171a7:	c1 e0 04             	shl    eax,0x4
c00171aa:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c00171ae:	c3                   	ret    

c00171af <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c00171af:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00171b4:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00171b9:	c1 e0 04             	shl    eax,0x4
c00171bc:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c00171bf:	c3                   	ret    

c00171c0 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c00171c0:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00171c5:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00171ca:	c1 e0 04             	shl    eax,0x4
c00171cd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00171d1:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c00171d4:	c3                   	ret    

c00171d5 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c00171d5:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00171da:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00171df:	c1 e0 04             	shl    eax,0x4
c00171e2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00171e6:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c00171ea:	c3                   	ret    

c00171eb <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c00171eb:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00171f0:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00171f5:	c1 e0 04             	shl    eax,0x4
c00171f8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00171fc:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c00171ff:	c3                   	ret    

c0017200 <Vm::faultHandler(regs*)>:
c0017200:	55                   	push   ebp
c0017201:	57                   	push   edi
c0017202:	56                   	push   esi
c0017203:	53                   	push   ebx
c0017204:	83 ec 2c             	sub    esp,0x2c
c0017207:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001720b:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001720e:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c0017212:	0f b7 f8             	movzx  edi,ax
c0017215:	52                   	push   edx
c0017216:	0f b7 c0             	movzx  eax,ax
c0017219:	50                   	push   eax
c001721a:	e8 27 fb ff ff       	call   c0016d46 <Vm::realToLinear(unsigned short, unsigned short)>
c001721f:	5a                   	pop    edx
c0017220:	59                   	pop    ecx
c0017221:	89 c1                	mov    ecx,eax
c0017223:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0017226:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001722a:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c001722f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017233:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0017236:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001723a:	0f b7 44 24 14       	movzx  eax,WORD PTR [esp+0x14]
c001723f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017243:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017247:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001724b:	e8 f6 fa ff ff       	call   c0016d46 <Vm::realToLinear(unsigned short, unsigned short)>
c0017250:	5e                   	pop    esi
c0017251:	be 06 00 00 00       	mov    esi,0x6
c0017256:	5d                   	pop    ebp
c0017257:	31 ed                	xor    ebp,ebp
c0017259:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001725e:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0017261:	81 fa 9d 00 00 00    	cmp    edx,0x9d
c0017267:	0f 84 74 02 00 00    	je     c00174e1 <Vm::faultHandler(regs*)+0x2e1>
c001726d:	0f 87 94 00 00 00    	ja     c0017307 <Vm::faultHandler(regs*)+0x107>
c0017273:	83 fa 66             	cmp    edx,0x66
c0017276:	0f 84 e2 01 00 00    	je     c001745e <Vm::faultHandler(regs*)+0x25e>
c001727c:	77 47                	ja     c00172c5 <Vm::faultHandler(regs*)+0xc5>
c001727e:	83 fa 36             	cmp    edx,0x36
c0017281:	0f 84 ca 01 00 00    	je     c0017451 <Vm::faultHandler(regs*)+0x251>
c0017287:	77 1a                	ja     c00172a3 <Vm::faultHandler(regs*)+0xa3>
c0017289:	83 fa 26             	cmp    edx,0x26
c001728c:	0f 84 98 01 00 00    	je     c001742a <Vm::faultHandler(regs*)+0x22a>
c0017292:	83 fa 2e             	cmp    edx,0x2e
c0017295:	0f 85 21 06 00 00    	jne    c00178bc <Vm::faultHandler(regs*)+0x6bc>
c001729b:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001729e:	31 f6                	xor    esi,esi
c00172a0:	41                   	inc    ecx
c00172a1:	eb bb                	jmp    c001725e <Vm::faultHandler(regs*)+0x5e>
c00172a3:	83 fa 64             	cmp    edx,0x64
c00172a6:	0f 84 8b 01 00 00    	je     c0017437 <Vm::faultHandler(regs*)+0x237>
c00172ac:	0f 87 92 01 00 00    	ja     c0017444 <Vm::faultHandler(regs*)+0x244>
c00172b2:	83 fa 3e             	cmp    edx,0x3e
c00172b5:	0f 85 01 06 00 00    	jne    c00178bc <Vm::faultHandler(regs*)+0x6bc>
c00172bb:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00172be:	be 01 00 00 00       	mov    esi,0x1
c00172c3:	eb db                	jmp    c00172a0 <Vm::faultHandler(regs*)+0xa0>
c00172c5:	83 fa 6d             	cmp    edx,0x6d
c00172c8:	0f 84 34 03 00 00    	je     c0017602 <Vm::faultHandler(regs*)+0x402>
c00172ce:	77 17                	ja     c00172e7 <Vm::faultHandler(regs*)+0xe7>
c00172d0:	83 fa 67             	cmp    edx,0x67
c00172d3:	0f 84 92 01 00 00    	je     c001746b <Vm::faultHandler(regs*)+0x26b>
c00172d9:	83 fa 6c             	cmp    edx,0x6c
c00172dc:	0f 84 b1 02 00 00    	je     c0017593 <Vm::faultHandler(regs*)+0x393>
c00172e2:	e9 d5 05 00 00       	jmp    c00178bc <Vm::faultHandler(regs*)+0x6bc>
c00172e7:	83 fa 6f             	cmp    edx,0x6f
c00172ea:	0f 84 3d 04 00 00    	je     c001772d <Vm::faultHandler(regs*)+0x52d>
c00172f0:	0f 82 9f 03 00 00    	jb     c0017695 <Vm::faultHandler(regs*)+0x495>
c00172f6:	81 fa 9c 00 00 00    	cmp    edx,0x9c
c00172fc:	0f 84 76 01 00 00    	je     c0017478 <Vm::faultHandler(regs*)+0x278>
c0017302:	e9 b5 05 00 00       	jmp    c00178bc <Vm::faultHandler(regs*)+0x6bc>
c0017307:	81 fa ec 00 00 00    	cmp    edx,0xec
c001730d:	0f 84 51 05 00 00    	je     c0017864 <Vm::faultHandler(regs*)+0x664>
c0017313:	0f 87 a9 00 00 00    	ja     c00173c2 <Vm::faultHandler(regs*)+0x1c2>
c0017319:	81 fa e4 00 00 00    	cmp    edx,0xe4
c001731f:	0f 84 d0 04 00 00    	je     c00177f5 <Vm::faultHandler(regs*)+0x5f5>
c0017325:	77 78                	ja     c001739f <Vm::faultHandler(regs*)+0x19f>
c0017327:	81 fa cd 00 00 00    	cmp    edx,0xcd
c001732d:	0f 84 0e 02 00 00    	je     c0017541 <Vm::faultHandler(regs*)+0x341>
c0017333:	81 fa cf 00 00 00    	cmp    edx,0xcf
c0017339:	0f 85 7d 05 00 00    	jne    c00178bc <Vm::faultHandler(regs*)+0x6bc>
c001733f:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0017343:	89 d1                	mov    ecx,edx
c0017345:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c0017348:	c1 e1 08             	shl    ecx,0x8
c001734b:	09 ca                	or     edx,ecx
c001734d:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0017350:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0017354:	89 d1                	mov    ecx,edx
c0017356:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c001735a:	c1 e1 08             	shl    ecx,0x8
c001735d:	09 ca                	or     edx,ecx
c001735f:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0017362:	0f b6 50 05          	movzx  edx,BYTE PTR [eax+0x5]
c0017366:	89 d1                	mov    ecx,edx
c0017368:	0f b6 50 04          	movzx  edx,BYTE PTR [eax+0x4]
c001736c:	c1 e1 08             	shl    ecx,0x8
c001736f:	09 ca                	or     edx,ecx
c0017371:	81 ca 00 02 02 00    	or     edx,0x20200
c0017377:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001737a:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
c001737e:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0017384:	d1 e8                	shr    eax,1
c0017386:	83 e0 01             	and    eax,0x1
c0017389:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c001738c:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001738f:	83 c0 06             	add    eax,0x6
c0017392:	25 ff ff 00 00       	and    eax,0xffff
c0017397:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001739a:	e9 19 05 00 00       	jmp    c00178b8 <Vm::faultHandler(regs*)+0x6b8>
c001739f:	81 fa e6 00 00 00    	cmp    edx,0xe6
c00173a5:	0f 84 8f 04 00 00    	je     c001783a <Vm::faultHandler(regs*)+0x63a>
c00173ab:	0f 82 60 04 00 00    	jb     c0017811 <Vm::faultHandler(regs*)+0x611>
c00173b1:	81 fa e7 00 00 00    	cmp    edx,0xe7
c00173b7:	0f 84 94 04 00 00    	je     c0017851 <Vm::faultHandler(regs*)+0x651>
c00173bd:	e9 fa 04 00 00       	jmp    c00178bc <Vm::faultHandler(regs*)+0x6bc>
c00173c2:	81 fa ef 00 00 00    	cmp    edx,0xef
c00173c8:	0f 84 d7 04 00 00    	je     c00178a5 <Vm::faultHandler(regs*)+0x6a5>
c00173ce:	77 2e                	ja     c00173fe <Vm::faultHandler(regs*)+0x1fe>
c00173d0:	81 fa ed 00 00 00    	cmp    edx,0xed
c00173d6:	0f 84 a4 04 00 00    	je     c0017880 <Vm::faultHandler(regs*)+0x680>
c00173dc:	81 fa ee 00 00 00    	cmp    edx,0xee
c00173e2:	0f 85 d4 04 00 00    	jne    c00178bc <Vm::faultHandler(regs*)+0x6bc>
c00173e8:	50                   	push   eax
c00173e9:	50                   	push   eax
c00173ea:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c00173ee:	50                   	push   eax
c00173ef:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00173f3:	50                   	push   eax
c00173f4:	e8 17 f9 ff ff       	call   c0016d10 <Vm::outbv(unsigned short, unsigned char)>
c00173f9:	e9 9f 04 00 00       	jmp    c001789d <Vm::faultHandler(regs*)+0x69d>
c00173fe:	81 fa fa 00 00 00    	cmp    edx,0xfa
c0017404:	0f 84 6d 01 00 00    	je     c0017577 <Vm::faultHandler(regs*)+0x377>
c001740a:	81 fa fb 00 00 00    	cmp    edx,0xfb
c0017410:	0f 84 6f 01 00 00    	je     c0017585 <Vm::faultHandler(regs*)+0x385>
c0017416:	81 fa f3 00 00 00    	cmp    edx,0xf3
c001741c:	0f 85 9a 04 00 00    	jne    c00178bc <Vm::faultHandler(regs*)+0x6bc>
c0017422:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017425:	e9 76 fe ff ff       	jmp    c00172a0 <Vm::faultHandler(regs*)+0xa0>
c001742a:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001742d:	be 02 00 00 00       	mov    esi,0x2
c0017432:	e9 69 fe ff ff       	jmp    c00172a0 <Vm::faultHandler(regs*)+0xa0>
c0017437:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001743a:	be 03 00 00 00       	mov    esi,0x3
c001743f:	e9 5c fe ff ff       	jmp    c00172a0 <Vm::faultHandler(regs*)+0xa0>
c0017444:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017447:	be 04 00 00 00       	mov    esi,0x4
c001744c:	e9 4f fe ff ff       	jmp    c00172a0 <Vm::faultHandler(regs*)+0xa0>
c0017451:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017454:	be 05 00 00 00       	mov    esi,0x5
c0017459:	e9 42 fe ff ff       	jmp    c00172a0 <Vm::faultHandler(regs*)+0xa0>
c001745e:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017461:	bd 01 00 00 00       	mov    ebp,0x1
c0017466:	e9 35 fe ff ff       	jmp    c00172a0 <Vm::faultHandler(regs*)+0xa0>
c001746b:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001746e:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0017473:	e9 28 fe ff ff       	jmp    c00172a0 <Vm::faultHandler(regs*)+0xa0>
c0017478:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001747b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001747f:	83 e5 01             	and    ebp,0x1
c0017482:	74 30                	je     c00174b4 <Vm::faultHandler(regs*)+0x2b4>
c0017484:	83 e9 04             	sub    ecx,0x4
c0017487:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001748d:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0017493:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0017496:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0017499:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001749f:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c00174a3:	0f 84 0c 04 00 00    	je     c00178b5 <Vm::faultHandler(regs*)+0x6b5>
c00174a9:	80 ce 02             	or     dh,0x2
c00174ac:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c00174af:	e9 01 04 00 00       	jmp    c00178b5 <Vm::faultHandler(regs*)+0x6b5>
c00174b4:	83 e9 02             	sub    ecx,0x2
c00174b7:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00174bd:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c00174c0:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c00174c4:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00174ca:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c00174ce:	74 05                	je     c00174d5 <Vm::faultHandler(regs*)+0x2d5>
c00174d0:	80 ce 02             	or     dh,0x2
c00174d3:	eb 03                	jmp    c00174d8 <Vm::faultHandler(regs*)+0x2d8>
c00174d5:	80 e6 fd             	and    dh,0xfd
c00174d8:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c00174dc:	e9 d4 03 00 00       	jmp    c00178b5 <Vm::faultHandler(regs*)+0x6b5>
c00174e1:	83 e5 01             	and    ebp,0x1
c00174e4:	74 2a                	je     c0017510 <Vm::faultHandler(regs*)+0x310>
c00174e6:	8b 10                	mov    edx,DWORD PTR [eax]
c00174e8:	81 e2 ff 0d 00 00    	and    edx,0xdff
c00174ee:	81 ca 00 02 02 00    	or     edx,0x20200
c00174f4:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00174f7:	8b 00                	mov    eax,DWORD PTR [eax]
c00174f9:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00174ff:	c1 e8 09             	shr    eax,0x9
c0017502:	83 e0 01             	and    eax,0x1
c0017505:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0017508:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001750b:	83 c0 04             	add    eax,0x4
c001750e:	eb 24                	jmp    c0017534 <Vm::faultHandler(regs*)+0x334>
c0017510:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0017513:	81 ca 00 02 02 00    	or     edx,0x20200
c0017519:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001751c:	0f b7 00             	movzx  eax,WORD PTR [eax]
c001751f:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0017525:	c1 e8 09             	shr    eax,0x9
c0017528:	83 e0 01             	and    eax,0x1
c001752b:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c001752e:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0017531:	83 c0 02             	add    eax,0x2
c0017534:	25 ff ff 00 00       	and    eax,0xffff
c0017539:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001753c:	e9 74 03 00 00       	jmp    c00178b5 <Vm::faultHandler(regs*)+0x6b5>
c0017541:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017545:	3d ee 00 00 00       	cmp    eax,0xee
c001754a:	75 10                	jne    c001755c <Vm::faultHandler(regs*)+0x35c>
c001754c:	83 ec 0c             	sub    esp,0xc
c001754f:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0017552:	e8 56 f8 ff ff       	call   c0016dad <Vm::mainloop3(unsigned long)>
c0017557:	e9 44 03 00 00       	jmp    c00178a0 <Vm::faultHandler(regs*)+0x6a0>
c001755c:	83 ec 0c             	sub    esp,0xc
c001755f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017563:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017567:	51                   	push   ecx
c0017568:	50                   	push   eax
c0017569:	53                   	push   ebx
c001756a:	e8 84 fb ff ff       	call   c00170f3 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001756f:	83 c4 20             	add    esp,0x20
c0017572:	e9 41 03 00 00       	jmp    c00178b8 <Vm::faultHandler(regs*)+0x6b8>
c0017577:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001757c:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0017580:	e9 30 03 00 00       	jmp    c00178b5 <Vm::faultHandler(regs*)+0x6b5>
c0017585:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001758a:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c001758e:	e9 22 03 00 00       	jmp    c00178b5 <Vm::faultHandler(regs*)+0x6b5>
c0017593:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0017596:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c001759b:	74 2b                	je     c00175c8 <Vm::faultHandler(regs*)+0x3c8>
c001759d:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c00175a4:	76 22                	jbe    c00175c8 <Vm::faultHandler(regs*)+0x3c8>
c00175a6:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00175aa:	50                   	push   eax
c00175ab:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00175af:	50                   	push   eax
c00175b0:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00175b4:	50                   	push   eax
c00175b5:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00175b9:	50                   	push   eax
c00175ba:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00175be:	50                   	push   eax
c00175bf:	6a 6c                	push   0x6c
c00175c1:	6a 6c                	push   0x6c
c00175c3:	e9 bd 01 00 00       	jmp    c0017785 <Vm::faultHandler(regs*)+0x585>
c00175c8:	83 ec 0c             	sub    esp,0xc
c00175cb:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00175cf:	0f b7 f6             	movzx  esi,si
c00175d2:	50                   	push   eax
c00175d3:	e8 25 f7 ff ff       	call   c0016cfd <Vm::inbv(unsigned short)>
c00175d8:	83 c4 0c             	add    esp,0xc
c00175db:	0f b6 c0             	movzx  eax,al
c00175de:	50                   	push   eax
c00175df:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c00175e3:	50                   	push   eax
c00175e4:	56                   	push   esi
c00175e5:	e8 d6 fb ff ff       	call   c00171c0 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c00175ea:	83 c4 10             	add    esp,0x10
c00175ed:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00175f0:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00175f4:	74 03                	je     c00175f9 <Vm::faultHandler(regs*)+0x3f9>
c00175f6:	48                   	dec    eax
c00175f7:	eb 01                	jmp    c00175fa <Vm::faultHandler(regs*)+0x3fa>
c00175f9:	40                   	inc    eax
c00175fa:	0f b7 c0             	movzx  eax,ax
c00175fd:	e9 8b 00 00 00       	jmp    c001768d <Vm::faultHandler(regs*)+0x48d>
c0017602:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0017605:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017608:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c001760d:	74 29                	je     c0017638 <Vm::faultHandler(regs*)+0x438>
c001760f:	3d ff ff 00 00       	cmp    eax,0xffff
c0017614:	76 22                	jbe    c0017638 <Vm::faultHandler(regs*)+0x438>
c0017616:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001761a:	50                   	push   eax
c001761b:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001761f:	50                   	push   eax
c0017620:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0017624:	50                   	push   eax
c0017625:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0017629:	50                   	push   eax
c001762a:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001762e:	50                   	push   eax
c001762f:	6a 6d                	push   0x6d
c0017631:	6a 6d                	push   0x6d
c0017633:	e9 4d 01 00 00       	jmp    c0017785 <Vm::faultHandler(regs*)+0x585>
c0017638:	0f b7 c8             	movzx  ecx,ax
c001763b:	0f b7 f6             	movzx  esi,si
c001763e:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0017641:	83 e5 01             	and    ebp,0x1
c0017644:	74 20                	je     c0017666 <Vm::faultHandler(regs*)+0x466>
c0017646:	ed                   	in     eax,dx
c0017647:	55                   	push   ebp
c0017648:	50                   	push   eax
c0017649:	51                   	push   ecx
c001764a:	56                   	push   esi
c001764b:	e8 9b fb ff ff       	call   c00171eb <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0017650:	83 c4 10             	add    esp,0x10
c0017653:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017656:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001765a:	74 05                	je     c0017661 <Vm::faultHandler(regs*)+0x461>
c001765c:	83 e8 04             	sub    eax,0x4
c001765f:	eb 27                	jmp    c0017688 <Vm::faultHandler(regs*)+0x488>
c0017661:	83 c0 04             	add    eax,0x4
c0017664:	eb 22                	jmp    c0017688 <Vm::faultHandler(regs*)+0x488>
c0017666:	66 ed                	in     ax,dx
c0017668:	0f b7 c0             	movzx  eax,ax
c001766b:	57                   	push   edi
c001766c:	50                   	push   eax
c001766d:	51                   	push   ecx
c001766e:	56                   	push   esi
c001766f:	e8 61 fb ff ff       	call   c00171d5 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0017674:	83 c4 10             	add    esp,0x10
c0017677:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001767a:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001767e:	74 05                	je     c0017685 <Vm::faultHandler(regs*)+0x485>
c0017680:	83 e8 02             	sub    eax,0x2
c0017683:	eb 03                	jmp    c0017688 <Vm::faultHandler(regs*)+0x488>
c0017685:	83 c0 02             	add    eax,0x2
c0017688:	25 ff ff 00 00       	and    eax,0xffff
c001768d:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0017690:	e9 20 02 00 00       	jmp    c00178b5 <Vm::faultHandler(regs*)+0x6b5>
c0017695:	8d 46 ff             	lea    eax,[esi-0x1]
c0017698:	0f b6 f0             	movzx  esi,al
c001769b:	83 fe 05             	cmp    esi,0x5
c001769e:	77 23                	ja     c00176c3 <Vm::faultHandler(regs*)+0x4c3>
c00176a0:	ff 24 b5 ec 2b 02 c0 	jmp    DWORD PTR [esi*4-0x3ffdd414]
c00176a7:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c00176ac:	eb 15                	jmp    c00176c3 <Vm::faultHandler(regs*)+0x4c3>
c00176ae:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c00176b2:	eb 0f                	jmp    c00176c3 <Vm::faultHandler(regs*)+0x4c3>
c00176b4:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c00176b8:	eb 09                	jmp    c00176c3 <Vm::faultHandler(regs*)+0x4c3>
c00176ba:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c00176be:	eb 03                	jmp    c00176c3 <Vm::faultHandler(regs*)+0x4c3>
c00176c0:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c00176c3:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00176c6:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c00176cb:	74 29                	je     c00176f6 <Vm::faultHandler(regs*)+0x4f6>
c00176cd:	3d ff ff 00 00       	cmp    eax,0xffff
c00176d2:	76 22                	jbe    c00176f6 <Vm::faultHandler(regs*)+0x4f6>
c00176d4:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00176d8:	50                   	push   eax
c00176d9:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00176dd:	50                   	push   eax
c00176de:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00176e2:	50                   	push   eax
c00176e3:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00176e7:	50                   	push   eax
c00176e8:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00176ec:	50                   	push   eax
c00176ed:	6a 6e                	push   0x6e
c00176ef:	6a 6e                	push   0x6e
c00176f1:	e9 8f 00 00 00       	jmp    c0017785 <Vm::faultHandler(regs*)+0x585>
c00176f6:	0f b7 c0             	movzx  eax,ax
c00176f9:	52                   	push   edx
c00176fa:	52                   	push   edx
c00176fb:	50                   	push   eax
c00176fc:	57                   	push   edi
c00176fd:	e8 8a fa ff ff       	call   c001718c <Vm::readByteFromReal(unsigned short, unsigned short)>
c0017702:	59                   	pop    ecx
c0017703:	0f b6 c0             	movzx  eax,al
c0017706:	5e                   	pop    esi
c0017707:	50                   	push   eax
c0017708:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001770c:	50                   	push   eax
c001770d:	e8 fe f5 ff ff       	call   c0016d10 <Vm::outbv(unsigned short, unsigned char)>
c0017712:	83 c4 10             	add    esp,0x10
c0017715:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0017718:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001771c:	74 03                	je     c0017721 <Vm::faultHandler(regs*)+0x521>
c001771e:	48                   	dec    eax
c001771f:	eb 01                	jmp    c0017722 <Vm::faultHandler(regs*)+0x522>
c0017721:	40                   	inc    eax
c0017722:	0f b7 c0             	movzx  eax,ax
c0017725:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0017728:	e9 88 01 00 00       	jmp    c00178b5 <Vm::faultHandler(regs*)+0x6b5>
c001772d:	8d 46 ff             	lea    eax,[esi-0x1]
c0017730:	0f b6 f0             	movzx  esi,al
c0017733:	83 fe 05             	cmp    esi,0x5
c0017736:	77 1e                	ja     c0017756 <Vm::faultHandler(regs*)+0x556>
c0017738:	ff 24 b5 04 2c 02 c0 	jmp    DWORD PTR [esi*4-0x3ffdd3fc]
c001773f:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0017743:	eb 11                	jmp    c0017756 <Vm::faultHandler(regs*)+0x556>
c0017745:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0017748:	eb 0c                	jmp    c0017756 <Vm::faultHandler(regs*)+0x556>
c001774a:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c001774d:	eb 07                	jmp    c0017756 <Vm::faultHandler(regs*)+0x556>
c001774f:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0017752:	eb 02                	jmp    c0017756 <Vm::faultHandler(regs*)+0x556>
c0017754:	8b 3b                	mov    edi,DWORD PTR [ebx]
c0017756:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0017759:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c001775e:	74 37                	je     c0017797 <Vm::faultHandler(regs*)+0x597>
c0017760:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0017766:	76 2f                	jbe    c0017797 <Vm::faultHandler(regs*)+0x597>
c0017768:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001776c:	50                   	push   eax
c001776d:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0017771:	50                   	push   eax
c0017772:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0017776:	50                   	push   eax
c0017777:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001777b:	50                   	push   eax
c001777c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017780:	50                   	push   eax
c0017781:	6a 6f                	push   0x6f
c0017783:	6a 6f                	push   0x6f
c0017785:	68 90 2b 02 c0       	push   0xc0022b90
c001778a:	e8 b6 31 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001778f:	83 c4 20             	add    esp,0x20
c0017792:	e9 83 01 00 00       	jmp    c001791a <Vm::faultHandler(regs*)+0x71a>
c0017797:	0f b7 d7             	movzx  edx,di
c001779a:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c001779d:	0f b7 c6             	movzx  eax,si
c00177a0:	81 e1 00 04 00 00    	and    ecx,0x400
c00177a6:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c00177a9:	83 e5 01             	and    ebp,0x1
c00177ac:	74 1d                	je     c00177cb <Vm::faultHandler(regs*)+0x5cb>
c00177ae:	55                   	push   ebp
c00177af:	55                   	push   ebp
c00177b0:	50                   	push   eax
c00177b1:	52                   	push   edx
c00177b2:	e8 f8 f9 ff ff       	call   c00171af <Vm::readDwordFromReal(unsigned short, unsigned short)>
c00177b7:	83 c4 10             	add    esp,0x10
c00177ba:	89 fa                	mov    edx,edi
c00177bc:	ef                   	out    dx,eax
c00177bd:	85 c9                	test   ecx,ecx
c00177bf:	74 05                	je     c00177c6 <Vm::faultHandler(regs*)+0x5c6>
c00177c1:	83 ee 04             	sub    esi,0x4
c00177c4:	eb 21                	jmp    c00177e7 <Vm::faultHandler(regs*)+0x5e7>
c00177c6:	83 c6 04             	add    esi,0x4
c00177c9:	eb 1c                	jmp    c00177e7 <Vm::faultHandler(regs*)+0x5e7>
c00177cb:	55                   	push   ebp
c00177cc:	55                   	push   ebp
c00177cd:	50                   	push   eax
c00177ce:	52                   	push   edx
c00177cf:	e8 c9 f9 ff ff       	call   c001719d <Vm::readWordFromReal(unsigned short, unsigned short)>
c00177d4:	83 c4 10             	add    esp,0x10
c00177d7:	89 fa                	mov    edx,edi
c00177d9:	66 ef                	out    dx,ax
c00177db:	85 c9                	test   ecx,ecx
c00177dd:	74 05                	je     c00177e4 <Vm::faultHandler(regs*)+0x5e4>
c00177df:	83 ee 02             	sub    esi,0x2
c00177e2:	eb 03                	jmp    c00177e7 <Vm::faultHandler(regs*)+0x5e7>
c00177e4:	83 c6 02             	add    esi,0x2
c00177e7:	81 e6 ff ff 00 00    	and    esi,0xffff
c00177ed:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c00177f0:	e9 c0 00 00 00       	jmp    c00178b5 <Vm::faultHandler(regs*)+0x6b5>
c00177f5:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c00177fc:	83 ec 0c             	sub    esp,0xc
c00177ff:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017803:	50                   	push   eax
c0017804:	e8 f4 f4 ff ff       	call   c0016cfd <Vm::inbv(unsigned short)>
c0017809:	0f b6 c0             	movzx  eax,al
c001780c:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001780f:	eb 3a                	jmp    c001784b <Vm::faultHandler(regs*)+0x64b>
c0017811:	83 e5 01             	and    ebp,0x1
c0017814:	74 07                	je     c001781d <Vm::faultHandler(regs*)+0x61d>
c0017816:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001781a:	ed                   	in     eax,dx
c001781b:	eb 14                	jmp    c0017831 <Vm::faultHandler(regs*)+0x631>
c001781d:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c0017820:	66 31 f6             	xor    si,si
c0017823:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0017826:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001782a:	66 ed                	in     ax,dx
c001782c:	0f b7 c0             	movzx  eax,ax
c001782f:	09 f0                	or     eax,esi
c0017831:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0017834:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0017838:	eb 7e                	jmp    c00178b8 <Vm::faultHandler(regs*)+0x6b8>
c001783a:	52                   	push   edx
c001783b:	52                   	push   edx
c001783c:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0017840:	50                   	push   eax
c0017841:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017845:	50                   	push   eax
c0017846:	e8 c5 f4 ff ff       	call   c0016d10 <Vm::outbv(unsigned short, unsigned char)>
c001784b:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001784f:	eb 4f                	jmp    c00178a0 <Vm::faultHandler(regs*)+0x6a0>
c0017851:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0017854:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0017858:	83 e5 01             	and    ebp,0x1
c001785b:	74 03                	je     c0017860 <Vm::faultHandler(regs*)+0x660>
c001785d:	ef                   	out    dx,eax
c001785e:	eb d4                	jmp    c0017834 <Vm::faultHandler(regs*)+0x634>
c0017860:	66 ef                	out    dx,ax
c0017862:	eb d0                	jmp    c0017834 <Vm::faultHandler(regs*)+0x634>
c0017864:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001786b:	83 ec 0c             	sub    esp,0xc
c001786e:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0017872:	50                   	push   eax
c0017873:	e8 85 f4 ff ff       	call   c0016cfd <Vm::inbv(unsigned short)>
c0017878:	0f b6 c0             	movzx  eax,al
c001787b:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001787e:	eb 1d                	jmp    c001789d <Vm::faultHandler(regs*)+0x69d>
c0017880:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0017883:	83 e5 01             	and    ebp,0x1
c0017886:	74 03                	je     c001788b <Vm::faultHandler(regs*)+0x68b>
c0017888:	ed                   	in     eax,dx
c0017889:	eb 0d                	jmp    c0017898 <Vm::faultHandler(regs*)+0x698>
c001788b:	66 ed                	in     ax,dx
c001788d:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0017890:	0f b7 c0             	movzx  eax,ax
c0017893:	66 31 d2             	xor    dx,dx
c0017896:	09 d0                	or     eax,edx
c0017898:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001789b:	eb 18                	jmp    c00178b5 <Vm::faultHandler(regs*)+0x6b5>
c001789d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00178a0:	83 c4 10             	add    esp,0x10
c00178a3:	eb 13                	jmp    c00178b8 <Vm::faultHandler(regs*)+0x6b8>
c00178a5:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00178a8:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00178ab:	83 e5 01             	and    ebp,0x1
c00178ae:	74 03                	je     c00178b3 <Vm::faultHandler(regs*)+0x6b3>
c00178b0:	ef                   	out    dx,eax
c00178b1:	eb 02                	jmp    c00178b5 <Vm::faultHandler(regs*)+0x6b5>
c00178b3:	66 ef                	out    dx,ax
c00178b5:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00178b8:	b0 01                	mov    al,0x1
c00178ba:	eb 60                	jmp    c001791c <Vm::faultHandler(regs*)+0x71c>
c00178bc:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00178c0:	50                   	push   eax
c00178c1:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00178c5:	50                   	push   eax
c00178c6:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00178ca:	50                   	push   eax
c00178cb:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00178cf:	50                   	push   eax
c00178d0:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00178d4:	50                   	push   eax
c00178d5:	52                   	push   edx
c00178d6:	52                   	push   edx
c00178d7:	68 bd 2b 02 c0       	push   0xc0022bbd
c00178dc:	e8 64 30 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00178e1:	83 c4 20             	add    esp,0x20
c00178e4:	83 ec 0c             	sub    esp,0xc
c00178e7:	6a 60                	push   0x60
c00178e9:	e8 0f f4 ff ff       	call   c0016cfd <Vm::inbv(unsigned short)>
c00178ee:	83 c4 10             	add    esp,0x10
c00178f1:	0f b6 d0             	movzx  edx,al
c00178f4:	83 fa 1c             	cmp    edx,0x1c
c00178f7:	74 05                	je     c00178fe <Vm::faultHandler(regs*)+0x6fe>
c00178f9:	83 fa 5a             	cmp    edx,0x5a
c00178fc:	75 e6                	jne    c00178e4 <Vm::faultHandler(regs*)+0x6e4>
c00178fe:	0f b6 c0             	movzx  eax,al
c0017901:	83 f8 1c             	cmp    eax,0x1c
c0017904:	74 05                	je     c001790b <Vm::faultHandler(regs*)+0x70b>
c0017906:	83 f8 5a             	cmp    eax,0x5a
c0017909:	75 0f                	jne    c001791a <Vm::faultHandler(regs*)+0x71a>
c001790b:	83 ec 0c             	sub    esp,0xc
c001790e:	6a 60                	push   0x60
c0017910:	e8 e8 f3 ff ff       	call   c0016cfd <Vm::inbv(unsigned short)>
c0017915:	83 c4 10             	add    esp,0x10
c0017918:	eb e4                	jmp    c00178fe <Vm::faultHandler(regs*)+0x6fe>
c001791a:	31 c0                	xor    eax,eax
c001791c:	83 c4 2c             	add    esp,0x2c
c001791f:	5b                   	pop    ebx
c0017920:	5e                   	pop    esi
c0017921:	5f                   	pop    edi
c0017922:	5d                   	pop    ebp
c0017923:	c3                   	ret    

c0017924 <noCopro(unsigned long)>:
c0017924:	c3                   	ret    

c0017925 <nmiHandler(regs*, void*)>:
c0017925:	83 ec 0c             	sub    esp,0xc
c0017928:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001792d:	83 ec 0c             	sub    esp,0xc
c0017930:	50                   	push   eax
c0017931:	e8 80 f9 fe ff       	call   c00072b6 <Computer::handleNMI()>
c0017936:	83 c4 10             	add    esp,0x10
c0017939:	90                   	nop
c001793a:	83 c4 0c             	add    esp,0xc
c001793d:	c3                   	ret    

c001793e <doubleFault(regs*, void*)>:
c001793e:	55                   	push   ebp
c001793f:	89 e5                	mov    ebp,esp
c0017941:	83 ec 08             	sub    esp,0x8
c0017944:	83 ec 0c             	sub    esp,0xc
c0017947:	68 1c 2c 02 c0       	push   0xc0022c1c
c001794c:	e8 42 9d ff ff       	call   c0011693 <KePanic(char const*)>
c0017951:	83 c4 10             	add    esp,0x10
c0017954:	90                   	nop
c0017955:	c9                   	leave  
c0017956:	c3                   	ret    

c0017957 <displayDebugInfo(regs*)>:
c0017957:	83 ec 1c             	sub    esp,0x1c
c001795a:	0f 20 c0             	mov    eax,cr0
c001795d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017961:	0f 20 d0             	mov    eax,cr2
c0017964:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017968:	0f 20 d8             	mov    eax,cr3
c001796b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001796f:	0f 20 e0             	mov    eax,cr4
c0017972:	89 04 24             	mov    DWORD PTR [esp],eax
c0017975:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017979:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c001797c:	83 ec 08             	sub    esp,0x8
c001797f:	50                   	push   eax
c0017980:	68 38 2c 02 c0       	push   0xc0022c38
c0017985:	e8 bb 2f ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001798a:	83 c4 10             	add    esp,0x10
c001798d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017991:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0017994:	83 ec 08             	sub    esp,0x8
c0017997:	50                   	push   eax
c0017998:	68 29 2c 02 c0       	push   0xc0022c29
c001799d:	e8 a3 2f ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00179a2:	83 c4 10             	add    esp,0x10
c00179a5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00179a9:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00179ac:	83 ec 08             	sub    esp,0x8
c00179af:	50                   	push   eax
c00179b0:	68 34 2c 02 c0       	push   0xc0022c34
c00179b5:	e8 8b 2f ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00179ba:	83 c4 10             	add    esp,0x10
c00179bd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00179c1:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00179c4:	83 ec 08             	sub    esp,0x8
c00179c7:	50                   	push   eax
c00179c8:	68 43 2c 02 c0       	push   0xc0022c43
c00179cd:	e8 73 2f ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00179d2:	83 c4 10             	add    esp,0x10
c00179d5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00179d9:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c00179dc:	83 ec 08             	sub    esp,0x8
c00179df:	50                   	push   eax
c00179e0:	68 4e 2c 02 c0       	push   0xc0022c4e
c00179e5:	e8 5b 2f ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00179ea:	83 c4 10             	add    esp,0x10
c00179ed:	83 ec 08             	sub    esp,0x8
c00179f0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00179f4:	68 59 2c 02 c0       	push   0xc0022c59
c00179f9:	e8 47 2f ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00179fe:	83 c4 10             	add    esp,0x10
c0017a01:	83 ec 08             	sub    esp,0x8
c0017a04:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017a08:	68 64 2c 02 c0       	push   0xc0022c64
c0017a0d:	e8 33 2f ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017a12:	83 c4 10             	add    esp,0x10
c0017a15:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a19:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0017a1c:	c1 e0 05             	shl    eax,0x5
c0017a1f:	8d 90 e0 3f 02 c0    	lea    edx,[eax-0x3ffdc020]
c0017a25:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a29:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0017a2c:	83 ec 04             	sub    esp,0x4
c0017a2f:	52                   	push   edx
c0017a30:	50                   	push   eax
c0017a31:	68 6f 2c 02 c0       	push   0xc0022c6f
c0017a36:	e8 0a 2f ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017a3b:	83 c4 10             	add    esp,0x10
c0017a3e:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017a43:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017a49:	83 ec 0c             	sub    esp,0xc
c0017a4c:	50                   	push   eax
c0017a4d:	e8 07 0d ff ff       	call   c0008759 <setActiveTerminal(VgaText*)>
c0017a52:	83 c4 10             	add    esp,0x10
c0017a55:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017a5a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017a60:	83 ec 08             	sub    esp,0x8
c0017a63:	68 7e 2c 02 c0       	push   0xc0022c7e
c0017a68:	50                   	push   eax
c0017a69:	e8 38 10 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017a6e:	83 c4 10             	add    esp,0x10
c0017a71:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017a76:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017a7c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017a80:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
c0017a83:	83 ec 08             	sub    esp,0x8
c0017a86:	52                   	push   edx
c0017a87:	50                   	push   eax
c0017a88:	e8 d3 0f ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c0017a8d:	83 c4 10             	add    esp,0x10
c0017a90:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017a95:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017a9b:	83 ec 08             	sub    esp,0x8
c0017a9e:	68 8c 2c 02 c0       	push   0xc0022c8c
c0017aa3:	50                   	push   eax
c0017aa4:	e8 fd 0f ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017aa9:	83 c4 10             	add    esp,0x10
c0017aac:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017ab1:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017ab7:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0017abc:	8b 12                	mov    edx,DWORD PTR [edx]
c0017abe:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0017ac1:	83 c2 0c             	add    edx,0xc
c0017ac4:	83 ec 08             	sub    esp,0x8
c0017ac7:	52                   	push   edx
c0017ac8:	50                   	push   eax
c0017ac9:	e8 d8 0f ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017ace:	83 c4 10             	add    esp,0x10
c0017ad1:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017ad6:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017adc:	83 ec 08             	sub    esp,0x8
c0017adf:	68 95 2c 02 c0       	push   0xc0022c95
c0017ae4:	50                   	push   eax
c0017ae5:	e8 bc 0f ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017aea:	83 c4 10             	add    esp,0x10
c0017aed:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017af2:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017af8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017afc:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c0017aff:	83 ec 08             	sub    esp,0x8
c0017b02:	52                   	push   edx
c0017b03:	50                   	push   eax
c0017b04:	e8 57 0f ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c0017b09:	83 c4 10             	add    esp,0x10
c0017b0c:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017b11:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017b17:	83 ec 08             	sub    esp,0x8
c0017b1a:	68 9d 2c 02 c0       	push   0xc0022c9d
c0017b1f:	50                   	push   eax
c0017b20:	e8 81 0f ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017b25:	83 c4 10             	add    esp,0x10
c0017b28:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017b2d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017b33:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017b37:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c0017b3a:	83 ec 08             	sub    esp,0x8
c0017b3d:	52                   	push   edx
c0017b3e:	50                   	push   eax
c0017b3f:	e8 1c 0f ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c0017b44:	83 c4 10             	add    esp,0x10
c0017b47:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017b4c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017b52:	83 ec 08             	sub    esp,0x8
c0017b55:	68 a5 2c 02 c0       	push   0xc0022ca5
c0017b5a:	50                   	push   eax
c0017b5b:	e8 46 0f ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017b60:	83 c4 10             	add    esp,0x10
c0017b63:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017b68:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017b6e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017b72:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c0017b75:	83 ec 08             	sub    esp,0x8
c0017b78:	52                   	push   edx
c0017b79:	50                   	push   eax
c0017b7a:	e8 e1 0e ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c0017b7f:	83 c4 10             	add    esp,0x10
c0017b82:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017b87:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017b8d:	83 ec 08             	sub    esp,0x8
c0017b90:	68 ad 2c 02 c0       	push   0xc0022cad
c0017b95:	50                   	push   eax
c0017b96:	e8 0b 0f ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017b9b:	83 c4 10             	add    esp,0x10
c0017b9e:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017ba3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017ba9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017bad:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0017bb0:	83 ec 08             	sub    esp,0x8
c0017bb3:	52                   	push   edx
c0017bb4:	50                   	push   eax
c0017bb5:	e8 a6 0e ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c0017bba:	83 c4 10             	add    esp,0x10
c0017bbd:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017bc2:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017bc8:	83 ec 08             	sub    esp,0x8
c0017bcb:	68 b5 2c 02 c0       	push   0xc0022cb5
c0017bd0:	50                   	push   eax
c0017bd1:	e8 d0 0e ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017bd6:	83 c4 10             	add    esp,0x10
c0017bd9:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017bde:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017be4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017be8:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c0017beb:	83 ec 08             	sub    esp,0x8
c0017bee:	52                   	push   edx
c0017bef:	50                   	push   eax
c0017bf0:	e8 6b 0e ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c0017bf5:	83 c4 10             	add    esp,0x10
c0017bf8:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017bfd:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017c03:	83 ec 08             	sub    esp,0x8
c0017c06:	68 bd 2c 02 c0       	push   0xc0022cbd
c0017c0b:	50                   	push   eax
c0017c0c:	e8 95 0e ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017c11:	83 c4 10             	add    esp,0x10
c0017c14:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017c19:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017c1f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017c23:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0017c26:	83 ec 08             	sub    esp,0x8
c0017c29:	52                   	push   edx
c0017c2a:	50                   	push   eax
c0017c2b:	e8 30 0e ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c0017c30:	83 c4 10             	add    esp,0x10
c0017c33:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017c38:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017c3e:	83 ec 08             	sub    esp,0x8
c0017c41:	68 c5 2c 02 c0       	push   0xc0022cc5
c0017c46:	50                   	push   eax
c0017c47:	e8 5a 0e ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017c4c:	83 c4 10             	add    esp,0x10
c0017c4f:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017c54:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017c5a:	83 ec 08             	sub    esp,0x8
c0017c5d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017c61:	50                   	push   eax
c0017c62:	e8 f9 0d ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c0017c67:	83 c4 10             	add    esp,0x10
c0017c6a:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017c6f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017c75:	83 ec 08             	sub    esp,0x8
c0017c78:	68 ce 2c 02 c0       	push   0xc0022cce
c0017c7d:	50                   	push   eax
c0017c7e:	e8 23 0e ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017c83:	83 c4 10             	add    esp,0x10
c0017c86:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017c8b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017c91:	83 ec 08             	sub    esp,0x8
c0017c94:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017c98:	50                   	push   eax
c0017c99:	e8 c2 0d ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c0017c9e:	83 c4 10             	add    esp,0x10
c0017ca1:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017ca6:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017cac:	83 ec 08             	sub    esp,0x8
c0017caf:	68 d6 2c 02 c0       	push   0xc0022cd6
c0017cb4:	50                   	push   eax
c0017cb5:	e8 ec 0d ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017cba:	83 c4 10             	add    esp,0x10
c0017cbd:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017cc2:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017cc8:	83 ec 08             	sub    esp,0x8
c0017ccb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017ccf:	50                   	push   eax
c0017cd0:	e8 8b 0d ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c0017cd5:	83 c4 10             	add    esp,0x10
c0017cd8:	fa                   	cli    
c0017cd9:	f4                   	hlt    
c0017cda:	eb fe                	jmp    c0017cda <displayDebugInfo(regs*)+0x383>

c0017cdc <HalSystemIdle()>:
c0017cdc:	56                   	push   esi
c0017cdd:	53                   	push   ebx
c0017cde:	83 ec 14             	sub    esp,0x14
c0017ce1:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0017ce6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0017cec:	8a 80 8e 11 00 00    	mov    al,BYTE PTR [eax+0x118e]
c0017cf2:	83 e0 04             	and    eax,0x4
c0017cf5:	0f b6 c0             	movzx  eax,al
c0017cf8:	85 c0                	test   eax,eax
c0017cfa:	0f 95 c0             	setne  al
c0017cfd:	0f b6 c0             	movzx  eax,al
c0017d00:	85 c0                	test   eax,eax
c0017d02:	74 4c                	je     c0017d50 <HalSystemIdle()+0x74>
c0017d04:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0017d09:	83 ec 08             	sub    esp,0x8
c0017d0c:	68 e1 00 00 00       	push   0xe1
c0017d11:	50                   	push   eax
c0017d12:	e8 a9 f3 fe ff       	call   c00070c0 <Computer::rdmsr(unsigned int)>
c0017d17:	83 c4 10             	add    esp,0x10
c0017d1a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017d1e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0017d22:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0017d27:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017d2b:	83 e2 02             	and    edx,0x2
c0017d2e:	89 d3                	mov    ebx,edx
c0017d30:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017d34:	83 e2 00             	and    edx,0x0
c0017d37:	89 d6                	mov    esi,edx
c0017d39:	56                   	push   esi
c0017d3a:	53                   	push   ebx
c0017d3b:	68 e1 00 00 00       	push   0xe1
c0017d40:	50                   	push   eax
c0017d41:	e8 a6 f3 fe ff       	call   c00070ec <Computer::wrmsr(unsigned int, unsigned long long)>
c0017d46:	83 c4 10             	add    esp,0x10
c0017d49:	e8 46 84 fe ff       	call   c0000194 <doTPAUSE>
c0017d4e:	eb 01                	jmp    c0017d51 <HalSystemIdle()+0x75>
c0017d50:	f4                   	hlt    
c0017d51:	90                   	nop
c0017d52:	83 c4 14             	add    esp,0x14
c0017d55:	5b                   	pop    ebx
c0017d56:	5e                   	pop    esi
c0017d57:	c3                   	ret    

c0017d58 <displayProgramFault(char const*)>:
c0017d58:	83 ec 0c             	sub    esp,0xc
c0017d5b:	83 ec 0c             	sub    esp,0xc
c0017d5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017d62:	e8 de 2b ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017d67:	83 c4 10             	add    esp,0x10
c0017d6a:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017d6f:	8b 00                	mov    eax,DWORD PTR [eax]
c0017d71:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017d74:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017d7a:	85 c0                	test   eax,eax
c0017d7c:	74 21                	je     c0017d9f <displayProgramFault(char const*)+0x47>
c0017d7e:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017d83:	8b 00                	mov    eax,DWORD PTR [eax]
c0017d85:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017d88:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017d8e:	6a 04                	push   0x4
c0017d90:	6a 0f                	push   0xf
c0017d92:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017d96:	50                   	push   eax
c0017d97:	e8 7c 0d ff ff       	call   c0008b18 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0017d9c:	83 c4 10             	add    esp,0x10
c0017d9f:	90                   	nop
c0017da0:	83 c4 0c             	add    esp,0xc
c0017da3:	c3                   	ret    

c0017da4 <gpFault(regs*, void*)>:
c0017da4:	83 ec 1c             	sub    esp,0x1c
c0017da7:	c7 05 74 c7 02 c0 00 72 01 c0 	mov    DWORD PTR ds:0xc002c774,0xc0017200
c0017db1:	a1 74 c7 02 c0       	mov    eax,ds:0xc002c774
c0017db6:	85 c0                	test   eax,eax
c0017db8:	74 1e                	je     c0017dd8 <gpFault(regs*, void*)+0x34>
c0017dba:	a1 74 c7 02 c0       	mov    eax,ds:0xc002c774
c0017dbf:	83 ec 0c             	sub    esp,0xc
c0017dc2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017dc6:	ff d0                	call   eax
c0017dc8:	83 c4 10             	add    esp,0x10
c0017dcb:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017dcf:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0017dd4:	85 c0                	test   eax,eax
c0017dd6:	75 2e                	jne    c0017e06 <gpFault(regs*, void*)+0x62>
c0017dd8:	83 ec 0c             	sub    esp,0xc
c0017ddb:	68 de 2c 02 c0       	push   0xc0022cde
c0017de0:	e8 73 ff ff ff       	call   c0017d58 <displayProgramFault(char const*)>
c0017de5:	83 c4 10             	add    esp,0x10
c0017de8:	83 ec 0c             	sub    esp,0xc
c0017deb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017def:	e8 63 fb ff ff       	call   c0017957 <displayDebugInfo(regs*)>
c0017df4:	83 c4 10             	add    esp,0x10
c0017df7:	83 ec 0c             	sub    esp,0xc
c0017dfa:	6a 00                	push   0x0
c0017dfc:	e8 a3 ed ff ff       	call   c0016ba4 <Thr::terminateFromIRQ(int)>
c0017e01:	83 c4 10             	add    esp,0x10
c0017e04:	eb 01                	jmp    c0017e07 <gpFault(regs*, void*)+0x63>
c0017e06:	90                   	nop
c0017e07:	83 c4 1c             	add    esp,0x1c
c0017e0a:	c3                   	ret    

c0017e0b <pgFault(regs*, void*)>:
c0017e0b:	83 ec 1c             	sub    esp,0x1c
c0017e0e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017e12:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0017e15:	0f 20 d0             	mov    eax,cr2
c0017e18:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017e1c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017e20:	83 ec 04             	sub    esp,0x4
c0017e23:	52                   	push   edx
c0017e24:	50                   	push   eax
c0017e25:	68 bc 2d 02 c0       	push   0xc0022dbc
c0017e2a:	e8 16 2b ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017e2f:	83 c4 10             	add    esp,0x10
c0017e32:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017e37:	8b 00                	mov    eax,DWORD PTR [eax]
c0017e39:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017e3c:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0017e42:	0f 20 d2             	mov    edx,cr2
c0017e45:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0017e49:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017e4d:	83 ec 08             	sub    esp,0x8
c0017e50:	52                   	push   edx
c0017e51:	50                   	push   eax
c0017e52:	e8 39 25 ff ff       	call   c000a390 <VAS::tryLoadBackOffDisk(unsigned long)>
c0017e57:	83 c4 10             	add    esp,0x10
c0017e5a:	0f b6 c0             	movzx  eax,al
c0017e5d:	85 c0                	test   eax,eax
c0017e5f:	75 2e                	jne    c0017e8f <pgFault(regs*, void*)+0x84>
c0017e61:	83 ec 0c             	sub    esp,0xc
c0017e64:	68 f7 2c 02 c0       	push   0xc0022cf7
c0017e69:	e8 ea fe ff ff       	call   c0017d58 <displayProgramFault(char const*)>
c0017e6e:	83 c4 10             	add    esp,0x10
c0017e71:	83 ec 0c             	sub    esp,0xc
c0017e74:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017e78:	e8 da fa ff ff       	call   c0017957 <displayDebugInfo(regs*)>
c0017e7d:	83 c4 10             	add    esp,0x10
c0017e80:	83 ec 0c             	sub    esp,0xc
c0017e83:	6a 00                	push   0x0
c0017e85:	e8 1a ed ff ff       	call   c0016ba4 <Thr::terminateFromIRQ(int)>
c0017e8a:	83 c4 10             	add    esp,0x10
c0017e8d:	eb 01                	jmp    c0017e90 <pgFault(regs*, void*)+0x85>
c0017e8f:	90                   	nop
c0017e90:	83 c4 1c             	add    esp,0x1c
c0017e93:	c3                   	ret    

c0017e94 <otherISRHandler(regs*, void*)>:
c0017e94:	83 ec 0c             	sub    esp,0xc
c0017e97:	83 ec 0c             	sub    esp,0xc
c0017e9a:	68 e4 2d 02 c0       	push   0xc0022de4
c0017e9f:	e8 b4 fe ff ff       	call   c0017d58 <displayProgramFault(char const*)>
c0017ea4:	83 c4 10             	add    esp,0x10
c0017ea7:	83 ec 0c             	sub    esp,0xc
c0017eaa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017eae:	e8 a4 fa ff ff       	call   c0017957 <displayDebugInfo(regs*)>
c0017eb3:	83 c4 10             	add    esp,0x10
c0017eb6:	83 ec 0c             	sub    esp,0xc
c0017eb9:	6a 00                	push   0x0
c0017ebb:	e8 e4 ec ff ff       	call   c0016ba4 <Thr::terminateFromIRQ(int)>
c0017ec0:	83 c4 10             	add    esp,0x10
c0017ec3:	90                   	nop
c0017ec4:	83 c4 0c             	add    esp,0xc
c0017ec7:	c3                   	ret    

c0017ec8 <opcodeFault(regs*, void*)>:
c0017ec8:	55                   	push   ebp
c0017ec9:	89 e5                	mov    ebp,esp
c0017ecb:	83 ec 08             	sub    esp,0x8
c0017ece:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017ed1:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017ed4:	83 ec 08             	sub    esp,0x8
c0017ed7:	50                   	push   eax
c0017ed8:	68 02 2d 02 c0       	push   0xc0022d02
c0017edd:	e8 63 2a ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017ee2:	83 c4 10             	add    esp,0x10
c0017ee5:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0017eea:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0017ef0:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0017ef6:	0f b6 c0             	movzx  eax,al
c0017ef9:	85 c0                	test   eax,eax
c0017efb:	74 21                	je     c0017f1e <opcodeFault(regs*, void*)+0x56>
c0017efd:	83 ec 0c             	sub    esp,0xc
c0017f00:	68 0c 2e 02 c0       	push   0xc0022e0c
c0017f05:	e8 3b 2a ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017f0a:	83 c4 10             	add    esp,0x10
c0017f0d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017f10:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017f13:	8d 50 19             	lea    edx,[eax+0x19]
c0017f16:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017f19:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0017f1c:	eb 2b                	jmp    c0017f49 <opcodeFault(regs*, void*)+0x81>
c0017f1e:	83 ec 0c             	sub    esp,0xc
c0017f21:	68 10 2d 02 c0       	push   0xc0022d10
c0017f26:	e8 2d fe ff ff       	call   c0017d58 <displayProgramFault(char const*)>
c0017f2b:	83 c4 10             	add    esp,0x10
c0017f2e:	83 ec 0c             	sub    esp,0xc
c0017f31:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0017f34:	e8 1e fa ff ff       	call   c0017957 <displayDebugInfo(regs*)>
c0017f39:	83 c4 10             	add    esp,0x10
c0017f3c:	83 ec 0c             	sub    esp,0xc
c0017f3f:	6a 00                	push   0x0
c0017f41:	e8 5e ec ff ff       	call   c0016ba4 <Thr::terminateFromIRQ(int)>
c0017f46:	83 c4 10             	add    esp,0x10
c0017f49:	c9                   	leave  
c0017f4a:	c3                   	ret    

c0017f4b <i386SaveCoprocessor(void*)>:
c0017f4b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017f4f:	83 c0 3f             	add    eax,0x3f
c0017f52:	83 e0 c0             	and    eax,0xffffffc0
c0017f55:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017f59:	ff 25 70 c7 02 c0    	jmp    DWORD PTR ds:0xc002c770

c0017f5f <i386LoadCoprocessor(void*)>:
c0017f5f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017f63:	83 c0 3f             	add    eax,0x3f
c0017f66:	83 e0 c0             	and    eax,0xffffffc0
c0017f69:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017f6d:	ff 25 6c c7 02 c0    	jmp    DWORD PTR ds:0xc002c76c

c0017f73 <x87EmulHandler(regs*, void*)>:
c0017f73:	53                   	push   ebx
c0017f74:	83 ec 08             	sub    esp,0x8
c0017f77:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017f7c:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c0017f80:	74 10                	je     c0017f92 <x87EmulHandler(regs*, void*)+0x1f>
c0017f82:	83 ec 0c             	sub    esp,0xc
c0017f85:	68 1d 2d 02 c0       	push   0xc0022d1d
c0017f8a:	e8 04 97 ff ff       	call   c0011693 <KePanic(char const*)>
c0017f8f:	83 c4 10             	add    esp,0x10
c0017f92:	0f 20 c0             	mov    eax,cr0
c0017f95:	a8 08                	test   al,0x8
c0017f97:	74 59                	je     c0017ff2 <x87EmulHandler(regs*, void*)+0x7f>
c0017f99:	0f 06                	clts   
c0017f9b:	a1 68 c7 02 c0       	mov    eax,ds:0xc002c768
c0017fa0:	85 c0                	test   eax,eax
c0017fa2:	74 0e                	je     c0017fb2 <x87EmulHandler(regs*, void*)+0x3f>
c0017fa4:	83 ec 0c             	sub    esp,0xc
c0017fa7:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0017faa:	e8 9c ff ff ff       	call   c0017f4b <i386SaveCoprocessor(void*)>
c0017faf:	83 c4 10             	add    esp,0x10
c0017fb2:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0017fb8:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c0017fbc:	75 12                	jne    c0017fd0 <x87EmulHandler(regs*, void*)+0x5d>
c0017fbe:	83 ec 0c             	sub    esp,0xc
c0017fc1:	68 40 02 00 00       	push   0x240
c0017fc6:	e8 eb fa fe ff       	call   c0007ab6 <malloc>
c0017fcb:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c0017fce:	eb 10                	jmp    c0017fe0 <x87EmulHandler(regs*, void*)+0x6d>
c0017fd0:	83 ec 0c             	sub    esp,0xc
c0017fd3:	a1 68 c7 02 c0       	mov    eax,ds:0xc002c768
c0017fd8:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0017fdb:	e8 7f ff ff ff       	call   c0017f5f <i386LoadCoprocessor(void*)>
c0017fe0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017fe5:	83 c4 10             	add    esp,0x10
c0017fe8:	a3 68 c7 02 c0       	mov    ds:0xc002c768,eax
c0017fed:	83 c4 08             	add    esp,0x8
c0017ff0:	5b                   	pop    ebx
c0017ff1:	c3                   	ret    
c0017ff2:	83 ec 0c             	sub    esp,0xc
c0017ff5:	68 31 2d 02 c0       	push   0xc0022d31
c0017ffa:	e8 46 29 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017fff:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0018007:	83 c4 18             	add    esp,0x18
c001800a:	5b                   	pop    ebx
c001800b:	e9 94 eb ff ff       	jmp    c0016ba4 <Thr::terminateFromIRQ(int)>

c0018010 <HalInitialiseCoprocessor()>:
c0018010:	83 ec 10             	sub    esp,0x10
c0018013:	c7 05 68 c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c768,0x0
c001801d:	6a 00                	push   0x0
c001801f:	68 73 7f 01 c0       	push   0xc0017f73
c0018024:	6a 07                	push   0x7
c0018026:	e8 43 4f ff ff       	call   c000cf6e <installISRHandler(int, void (*)(regs*, void*), void*)>
c001802b:	e8 50 70 00 00       	call   c001f080 <avxDetect>
c0018030:	83 c4 10             	add    esp,0x10
c0018033:	85 c0                	test   eax,eax
c0018035:	74 1c                	je     c0018053 <HalInitialiseCoprocessor()+0x43>
c0018037:	c7 05 70 c7 02 c0 aa f0 01 c0 	mov    DWORD PTR ds:0xc002c770,0xc001f0aa
c0018041:	c7 05 6c c7 02 c0 bb f0 01 c0 	mov    DWORD PTR ds:0xc002c76c,0xc001f0bb
c001804b:	83 c4 0c             	add    esp,0xc
c001804e:	e9 79 70 00 00       	jmp    c001f0cc <avxInit>
c0018053:	e8 b8 73 00 00       	call   c001f410 <absolutelyNoChanceInHell>
c0018058:	85 c0                	test   eax,eax
c001805a:	74 1c                	je     c0018078 <HalInitialiseCoprocessor()+0x68>
c001805c:	c7 05 70 c7 02 c0 28 f4 01 c0 	mov    DWORD PTR ds:0xc002c770,0xc001f428
c0018066:	c7 05 6c c7 02 c0 30 f4 01 c0 	mov    DWORD PTR ds:0xc002c76c,0xc001f430
c0018070:	83 c4 0c             	add    esp,0xc
c0018073:	e9 c0 73 00 00       	jmp    c001f438 <sseInit>
c0018078:	e8 d9 73 00 00       	call   c001f456 <x87Detect>
c001807d:	85 c0                	test   eax,eax
c001807f:	74 1c                	je     c001809d <HalInitialiseCoprocessor()+0x8d>
c0018081:	c7 05 70 c7 02 c0 71 f4 01 c0 	mov    DWORD PTR ds:0xc002c770,0xc001f471
c001808b:	c7 05 6c c7 02 c0 78 f4 01 c0 	mov    DWORD PTR ds:0xc002c76c,0xc001f478
c0018095:	83 c4 0c             	add    esp,0xc
c0018098:	e9 e2 73 00 00       	jmp    c001f47f <x87Init>
c001809d:	c7 05 70 c7 02 c0 24 79 01 c0 	mov    DWORD PTR ds:0xc002c770,0xc0017924
c00180a7:	c7 05 6c c7 02 c0 24 79 01 c0 	mov    DWORD PTR ds:0xc002c76c,0xc0017924
c00180b1:	0f 20 c0             	mov    eax,cr0
c00180b4:	83 c8 04             	or     eax,0x4
c00180b7:	0f 22 c0             	mov    cr0,eax
c00180ba:	83 c4 0c             	add    esp,0xc
c00180bd:	c3                   	ret    

c00180be <HalPanic(char const*)>:
c00180be:	53                   	push   ebx
c00180bf:	83 ec 10             	sub    esp,0x10
c00180c2:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00180c6:	fa                   	cli    
c00180c7:	53                   	push   ebx
c00180c8:	68 47 2d 02 c0       	push   0xc0022d47
c00180cd:	e8 73 28 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00180d2:	a1 64 c7 02 c0       	mov    eax,ds:0xc002c764
c00180d7:	83 c4 10             	add    esp,0x10
c00180da:	85 c0                	test   eax,eax
c00180dc:	74 09                	je     c00180e7 <HalPanic(char const*)+0x29>
c00180de:	83 ec 0c             	sub    esp,0xc
c00180e1:	53                   	push   ebx
c00180e2:	ff d0                	call   eax
c00180e4:	83 c4 10             	add    esp,0x10
c00180e7:	a1 04 6f 02 c0       	mov    eax,ds:0xc0026f04
c00180ec:	85 c0                	test   eax,eax
c00180ee:	0f 84 dc 00 00 00    	je     c00181d0 <HalPanic(char const*)+0x112>
c00180f4:	52                   	push   edx
c00180f5:	6a 01                	push   0x1
c00180f7:	6a 0f                	push   0xf
c00180f9:	50                   	push   eax
c00180fa:	e8 b5 04 ff ff       	call   c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00180ff:	59                   	pop    ecx
c0018100:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c0018106:	e8 99 06 ff ff       	call   c00087a4 <VgaText::clearScreen()>
c001810b:	58                   	pop    eax
c001810c:	5a                   	pop    edx
c001810d:	68 c4 0e 02 c0       	push   0xc0020ec4
c0018112:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c0018118:	e8 cf 04 ff ff       	call   c00085ec <VgaText::setTitle(char*)>
c001811d:	83 c4 0c             	add    esp,0xc
c0018120:	6a 01                	push   0x1
c0018122:	6a 0f                	push   0xf
c0018124:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c001812a:	e8 85 04 ff ff       	call   c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001812f:	59                   	pop    ecx
c0018130:	58                   	pop    eax
c0018131:	68 60 2d 02 c0       	push   0xc0022d60
c0018136:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c001813c:	e8 65 09 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0018141:	83 c4 0c             	add    esp,0xc
c0018144:	6a 0f                	push   0xf
c0018146:	6a 01                	push   0x1
c0018148:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c001814e:	e8 61 04 ff ff       	call   c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0018153:	58                   	pop    eax
c0018154:	5a                   	pop    edx
c0018155:	68 69 2d 02 c0       	push   0xc0022d69
c001815a:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c0018160:	e8 41 09 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0018165:	83 c4 0c             	add    esp,0xc
c0018168:	6a 01                	push   0x1
c001816a:	6a 0f                	push   0xf
c001816c:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c0018172:	e8 3d 04 ff ff       	call   c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0018177:	59                   	pop    ecx
c0018178:	58                   	pop    eax
c0018179:	68 ad 2d 02 c0       	push   0xc0022dad
c001817e:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c0018184:	e8 1d 09 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0018189:	58                   	pop    eax
c001818a:	5a                   	pop    edx
c001818b:	68 76 2d 02 c0       	push   0xc0022d76
c0018190:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c0018196:	e8 0b 09 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001819b:	59                   	pop    ecx
c001819c:	58                   	pop    eax
c001819d:	68 b0 2d 02 c0       	push   0xc0022db0
c00181a2:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c00181a8:	e8 f9 08 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c00181ad:	58                   	pop    eax
c00181ae:	5a                   	pop    edx
c00181af:	53                   	push   ebx
c00181b0:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c00181b6:	e8 eb 08 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c00181bb:	59                   	pop    ecx
c00181bc:	5b                   	pop    ebx
c00181bd:	68 ad 2d 02 c0       	push   0xc0022dad
c00181c2:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c00181c8:	e8 d9 08 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c00181cd:	83 c4 10             	add    esp,0x10
c00181d0:	eb fe                	jmp    c00181d0 <HalPanic(char const*)+0x112>

c00181d2 <HalQueryPerformanceCounter()>:
c00181d2:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c00181d7:	31 d2                	xor    edx,edx
c00181d9:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c00181df:	31 c0                	xor    eax,eax
c00181e1:	f6 81 8c 11 00 00 02 	test   BYTE PTR [ecx+0x118c],0x2
c00181e8:	74 02                	je     c00181ec <HalQueryPerformanceCounter()+0x1a>
c00181ea:	0f 31                	rdtsc  
c00181ec:	c3                   	ret    

c00181ed <HalInitialise()>:
c00181ed:	53                   	push   ebx
c00181ee:	83 ec 08             	sub    esp,0x8
c00181f1:	e8 a8 4f ff ff       	call   c000d19e <setupINTS()>
c00181f6:	80 3d e0 bb 02 c0 00 	cmp    BYTE PTR ds:0xc002bbe0,0x0
c00181fd:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0018202:	75 0f                	jne    c0018213 <HalInitialise()+0x26>
c0018204:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c001820a:	83 e2 fe             	and    edx,0xfffffffe
c001820d:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0018213:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0018219:	c6 05 60 c7 02 c0 00 	mov    BYTE PTR ds:0xc002c760,0x0
c0018220:	83 e2 fe             	and    edx,0xfffffffe
c0018223:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0018229:	e8 9e 02 00 00       	call   c00184cc <picOpen()>
c001822e:	80 3d 60 c7 02 c0 00 	cmp    BYTE PTR ds:0xc002c760,0x0
c0018235:	74 0a                	je     c0018241 <HalInitialise()+0x54>
c0018237:	e8 e0 01 00 00       	call   c001841c <picDisable()>
c001823c:	e8 ad 67 00 00       	call   c001e9ee <apicOpen()>
c0018241:	bb 0f 00 00 00       	mov    ebx,0xf
c0018246:	50                   	push   eax
c0018247:	6a 00                	push   0x0
c0018249:	68 94 7e 01 c0       	push   0xc0017e94
c001824e:	6a 00                	push   0x0
c0018250:	e8 19 4d ff ff       	call   c000cf6e <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018255:	83 c4 0c             	add    esp,0xc
c0018258:	6a 00                	push   0x0
c001825a:	68 94 7e 01 c0       	push   0xc0017e94
c001825f:	6a 01                	push   0x1
c0018261:	e8 08 4d ff ff       	call   c000cf6e <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018266:	83 c4 0c             	add    esp,0xc
c0018269:	6a 00                	push   0x0
c001826b:	68 25 79 01 c0       	push   0xc0017925
c0018270:	6a 02                	push   0x2
c0018272:	e8 f7 4c ff ff       	call   c000cf6e <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018277:	83 c4 0c             	add    esp,0xc
c001827a:	6a 00                	push   0x0
c001827c:	68 94 7e 01 c0       	push   0xc0017e94
c0018281:	6a 03                	push   0x3
c0018283:	e8 e6 4c ff ff       	call   c000cf6e <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018288:	83 c4 0c             	add    esp,0xc
c001828b:	6a 00                	push   0x0
c001828d:	68 94 7e 01 c0       	push   0xc0017e94
c0018292:	6a 04                	push   0x4
c0018294:	e8 d5 4c ff ff       	call   c000cf6e <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018299:	83 c4 0c             	add    esp,0xc
c001829c:	6a 00                	push   0x0
c001829e:	68 94 7e 01 c0       	push   0xc0017e94
c00182a3:	6a 05                	push   0x5
c00182a5:	e8 c4 4c ff ff       	call   c000cf6e <installISRHandler(int, void (*)(regs*, void*), void*)>
c00182aa:	83 c4 0c             	add    esp,0xc
c00182ad:	6a 00                	push   0x0
c00182af:	68 c8 7e 01 c0       	push   0xc0017ec8
c00182b4:	6a 06                	push   0x6
c00182b6:	e8 b3 4c ff ff       	call   c000cf6e <installISRHandler(int, void (*)(regs*, void*), void*)>
c00182bb:	83 c4 0c             	add    esp,0xc
c00182be:	6a 00                	push   0x0
c00182c0:	68 3e 79 01 c0       	push   0xc001793e
c00182c5:	6a 08                	push   0x8
c00182c7:	e8 a2 4c ff ff       	call   c000cf6e <installISRHandler(int, void (*)(regs*, void*), void*)>
c00182cc:	83 c4 0c             	add    esp,0xc
c00182cf:	6a 00                	push   0x0
c00182d1:	68 94 7e 01 c0       	push   0xc0017e94
c00182d6:	6a 09                	push   0x9
c00182d8:	e8 91 4c ff ff       	call   c000cf6e <installISRHandler(int, void (*)(regs*, void*), void*)>
c00182dd:	83 c4 0c             	add    esp,0xc
c00182e0:	6a 00                	push   0x0
c00182e2:	68 94 7e 01 c0       	push   0xc0017e94
c00182e7:	6a 0a                	push   0xa
c00182e9:	e8 80 4c ff ff       	call   c000cf6e <installISRHandler(int, void (*)(regs*, void*), void*)>
c00182ee:	83 c4 0c             	add    esp,0xc
c00182f1:	6a 00                	push   0x0
c00182f3:	68 94 7e 01 c0       	push   0xc0017e94
c00182f8:	6a 0b                	push   0xb
c00182fa:	e8 6f 4c ff ff       	call   c000cf6e <installISRHandler(int, void (*)(regs*, void*), void*)>
c00182ff:	83 c4 0c             	add    esp,0xc
c0018302:	6a 00                	push   0x0
c0018304:	68 a4 7d 01 c0       	push   0xc0017da4
c0018309:	6a 0d                	push   0xd
c001830b:	e8 5e 4c ff ff       	call   c000cf6e <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018310:	83 c4 0c             	add    esp,0xc
c0018313:	6a 00                	push   0x0
c0018315:	68 0b 7e 01 c0       	push   0xc0017e0b
c001831a:	6a 0e                	push   0xe
c001831c:	e8 4d 4c ff ff       	call   c000cf6e <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018321:	83 c4 10             	add    esp,0x10
c0018324:	50                   	push   eax
c0018325:	6a 00                	push   0x0
c0018327:	68 94 7e 01 c0       	push   0xc0017e94
c001832c:	53                   	push   ebx
c001832d:	43                   	inc    ebx
c001832e:	e8 3b 4c ff ff       	call   c000cf6e <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018333:	83 c4 10             	add    esp,0x10
c0018336:	83 fb 1e             	cmp    ebx,0x1e
c0018339:	75 e9                	jne    c0018324 <HalInitialise()+0x137>
c001833b:	50                   	push   eax
c001833c:	6a 00                	push   0x0
c001833e:	68 0f 2b 01 c0       	push   0xc0012b0f
c0018343:	6a 60                	push   0x60
c0018345:	e8 24 4c ff ff       	call   c000cf6e <installISRHandler(int, void (*)(regs*, void*), void*)>
c001834a:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001834f:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0018359:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c0018360:	e8 51 f7 fe ff       	call   c0007ab6 <malloc>
c0018365:	89 04 24             	mov    DWORD PTR [esp],eax
c0018368:	89 c3                	mov    ebx,eax
c001836a:	e8 3b 09 00 00       	call   c0018caa <RTC::RTC()>
c001836f:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c0018379:	5a                   	pop    edx
c001837a:	59                   	pop    ecx
c001837b:	53                   	push   ebx
c001837c:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018382:	e8 b3 46 ff ff       	call   c000ca3a <Device::addChild(Device*)>
c0018387:	8b 03                	mov    eax,DWORD PTR [ebx]
c0018389:	6a 00                	push   0x0
c001838b:	6a 00                	push   0x0
c001838d:	6a 00                	push   0x0
c001838f:	53                   	push   ebx
c0018390:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0018393:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0018398:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c001839e:	83 c4 28             	add    esp,0x28
c00183a1:	5b                   	pop    ebx
c00183a2:	c3                   	ret    

c00183a3 <HalMakeBeep(int)>:
c00183a3:	53                   	push   ebx
c00183a4:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00183a8:	85 db                	test   ebx,ebx
c00183aa:	75 07                	jne    c00183b3 <HalMakeBeep(int)+0x10>
c00183ac:	e4 61                	in     al,0x61
c00183ae:	83 e0 fc             	and    eax,0xfffffffc
c00183b1:	eb 26                	jmp    c00183d9 <HalMakeBeep(int)+0x36>
c00183b3:	b8 dc 34 12 00       	mov    eax,0x1234dc
c00183b8:	99                   	cdq    
c00183b9:	f7 fb                	idiv   ebx
c00183bb:	89 c1                	mov    ecx,eax
c00183bd:	b0 b6                	mov    al,0xb6
c00183bf:	e6 43                	out    0x43,al
c00183c1:	88 c8                	mov    al,cl
c00183c3:	e6 42                	out    0x42,al
c00183c5:	89 c8                	mov    eax,ecx
c00183c7:	c1 e8 08             	shr    eax,0x8
c00183ca:	e6 42                	out    0x42,al
c00183cc:	e4 61                	in     al,0x61
c00183ce:	89 c2                	mov    edx,eax
c00183d0:	83 ca 03             	or     edx,0x3
c00183d3:	38 d0                	cmp    al,dl
c00183d5:	74 04                	je     c00183db <HalMakeBeep(int)+0x38>
c00183d7:	88 d0                	mov    al,dl
c00183d9:	e6 61                	out    0x61,al
c00183db:	5b                   	pop    ebx
c00183dc:	c3                   	ret    

c00183dd <HalGetRand()>:
c00183dd:	31 c0                	xor    eax,eax
c00183df:	c3                   	ret    

c00183e0 <HalEndOfInterrupt(int)>:
c00183e0:	80 3d 60 c7 02 c0 00 	cmp    BYTE PTR ds:0xc002c760,0x0
c00183e7:	74 23                	je     c001840c <HalEndOfInterrupt(int)+0x2c>
c00183e9:	83 ec 14             	sub    esp,0x14
c00183ec:	6a 1b                	push   0x1b
c00183ee:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00183f4:	e8 c7 ec fe ff       	call   c00070c0 <Computer::rdmsr(unsigned int)>
c00183f9:	25 00 f0 ff ff       	and    eax,0xfffff000
c00183fe:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c0018408:	83 c4 1c             	add    esp,0x1c
c001840b:	c3                   	ret    
c001840c:	e9 3f 02 00 00       	jmp    c0018650 <picEOI(int)>

c0018411 <HalRestart()>:
c0018411:	c3                   	ret    

c0018412 <HalShutdown()>:
c0018412:	c3                   	ret    

c0018413 <HalSleep()>:
c0018413:	c3                   	ret    

c0018414 <picIoWait()>:
c0018414:	eb 00                	jmp    c0018416 <picIoWait()+0x2>
c0018416:	eb 00                	jmp    c0018418 <picIoWait()+0x4>
c0018418:	90                   	nop
c0018419:	c3                   	ret    
c001841a:	66 90                	xchg   ax,ax

c001841c <picDisable()>:
c001841c:	83 ec 10             	sub    esp,0x10
c001841f:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c0018426:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c001842b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001842f:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0018434:	ee                   	out    dx,al
c0018435:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c001843c:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c0018441:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0018445:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c001844a:	ee                   	out    dx,al
c001844b:	90                   	nop
c001844c:	83 c4 10             	add    esp,0x10
c001844f:	c3                   	ret    

c0018450 <picGetIRQReg(int)>:
c0018450:	83 ec 10             	sub    esp,0x10
c0018453:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018457:	0f b6 c0             	movzx  eax,al
c001845a:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0018461:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c0018465:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0018469:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001846e:	ee                   	out    dx,al
c001846f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018473:	0f b6 c0             	movzx  eax,al
c0018476:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c001847d:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0018481:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0018485:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001848a:	ee                   	out    dx,al
c001848b:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c0018492:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0018497:	89 c2                	mov    edx,eax
c0018499:	ec                   	in     al,dx
c001849a:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001849e:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00184a2:	0f b6 c0             	movzx  eax,al
c00184a5:	c1 e0 08             	shl    eax,0x8
c00184a8:	89 c1                	mov    ecx,eax
c00184aa:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c00184b1:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c00184b6:	89 c2                	mov    edx,eax
c00184b8:	ec                   	in     al,dx
c00184b9:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00184bd:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c00184c1:	0f b6 c0             	movzx  eax,al
c00184c4:	09 c8                	or     eax,ecx
c00184c6:	83 c4 10             	add    esp,0x10
c00184c9:	c3                   	ret    
c00184ca:	66 90                	xchg   ax,ax

c00184cc <picOpen()>:
c00184cc:	83 ec 50             	sub    esp,0x50
c00184cf:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c00184d6:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00184db:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00184df:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00184e3:	ee                   	out    dx,al
c00184e4:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c00184eb:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c00184f0:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c00184f4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00184f8:	ee                   	out    dx,al
c00184f9:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c0018501:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c0018509:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c0018510:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018514:	89 c2                	mov    edx,eax
c0018516:	ec                   	in     al,dx
c0018517:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c001851b:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c001851f:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0018523:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c001852a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001852e:	89 c2                	mov    edx,eax
c0018530:	ec                   	in     al,dx
c0018531:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0018535:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0018539:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c001853d:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c0018544:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c0018549:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001854d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018551:	ee                   	out    dx,al
c0018552:	e8 bd fe ff ff       	call   c0018414 <picIoWait()>
c0018557:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c001855e:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c0018563:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0018567:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001856b:	ee                   	out    dx,al
c001856c:	e8 a3 fe ff ff       	call   c0018414 <picIoWait()>
c0018571:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0018575:	0f b6 c0             	movzx  eax,al
c0018578:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c001857f:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c0018583:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c0018587:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001858b:	ee                   	out    dx,al
c001858c:	e8 83 fe ff ff       	call   c0018414 <picIoWait()>
c0018591:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0018595:	0f b6 c0             	movzx  eax,al
c0018598:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c001859f:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c00185a3:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c00185a7:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00185ab:	ee                   	out    dx,al
c00185ac:	e8 63 fe ff ff       	call   c0018414 <picIoWait()>
c00185b1:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c00185b8:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c00185bd:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c00185c1:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00185c5:	ee                   	out    dx,al
c00185c6:	e8 49 fe ff ff       	call   c0018414 <picIoWait()>
c00185cb:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c00185d2:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c00185d7:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c00185db:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00185df:	ee                   	out    dx,al
c00185e0:	e8 2f fe ff ff       	call   c0018414 <picIoWait()>
c00185e5:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c00185ec:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c00185f1:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c00185f5:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00185f9:	ee                   	out    dx,al
c00185fa:	e8 15 fe ff ff       	call   c0018414 <picIoWait()>
c00185ff:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c0018606:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c001860b:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c001860f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0018613:	ee                   	out    dx,al
c0018614:	e8 fb fd ff ff       	call   c0018414 <picIoWait()>
c0018619:	0f b6 44 24 47       	movzx  eax,BYTE PTR [esp+0x47]
c001861e:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c0018625:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c0018629:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c001862d:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0018631:	ee                   	out    dx,al
c0018632:	0f b6 44 24 46       	movzx  eax,BYTE PTR [esp+0x46]
c0018637:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c001863e:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0018642:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c0018646:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001864a:	ee                   	out    dx,al
c001864b:	90                   	nop
c001864c:	83 c4 50             	add    esp,0x50
c001864f:	c3                   	ret    

c0018650 <picEOI(int)>:
c0018650:	83 ec 10             	sub    esp,0x10
c0018653:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0018658:	75 1e                	jne    c0018678 <picEOI(int)+0x28>
c001865a:	6a 0b                	push   0xb
c001865c:	e8 ef fd ff ff       	call   c0018450 <picGetIRQReg(int)>
c0018661:	83 c4 04             	add    esp,0x4
c0018664:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c0018669:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c001866e:	25 80 00 00 00       	and    eax,0x80
c0018673:	74 73                	je     c00186e8 <picEOI(int)+0x98>
c0018675:	8d 76 00             	lea    esi,[esi+0x0]
c0018678:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c001867d:	75 31                	jne    c00186b0 <picEOI(int)+0x60>
c001867f:	6a 0b                	push   0xb
c0018681:	e8 ca fd ff ff       	call   c0018450 <picGetIRQReg(int)>
c0018686:	83 c4 04             	add    esp,0x4
c0018689:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c001868e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018692:	98                   	cwde   
c0018693:	85 c0                	test   eax,eax
c0018695:	78 19                	js     c00186b0 <picEOI(int)+0x60>
c0018697:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c001869e:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c00186a3:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00186a7:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c00186ac:	ee                   	out    dx,al
c00186ad:	eb 3d                	jmp    c00186ec <picEOI(int)+0x9c>
c00186af:	90                   	nop
c00186b0:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c00186b5:	7e 19                	jle    c00186d0 <picEOI(int)+0x80>
c00186b7:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c00186be:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c00186c3:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c00186c7:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c00186cc:	ee                   	out    dx,al
c00186cd:	8d 76 00             	lea    esi,[esi+0x0]
c00186d0:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c00186d7:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c00186dc:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c00186e0:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c00186e5:	ee                   	out    dx,al
c00186e6:	eb 04                	jmp    c00186ec <picEOI(int)+0x9c>
c00186e8:	90                   	nop
c00186e9:	8d 76 00             	lea    esi,[esi+0x0]
c00186ec:	83 c4 10             	add    esp,0x10
c00186ef:	c3                   	ret    

c00186f0 <RTC::open(int, int, void*)>:
c00186f0:	31 c0                	xor    eax,eax
c00186f2:	c3                   	ret    
c00186f3:	90                   	nop

c00186f4 <RTC::close(int, int, void*)>:
c00186f4:	31 c0                	xor    eax,eax
c00186f6:	c3                   	ret    
c00186f7:	90                   	nop

c00186f8 <RTC::timeInSecondsUTC()>:
c00186f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00186fc:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0018702:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0018708:	c3                   	ret    
c0018709:	90                   	nop

c001870a <RTC::timeInDatetimeUTC()>:
c001870a:	53                   	push   ebx
c001870b:	83 ec 14             	sub    esp,0x14
c001870e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0018712:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018716:	8b 10                	mov    edx,DWORD PTR [eax]
c0018718:	50                   	push   eax
c0018719:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001871c:	83 c4 0c             	add    esp,0xc
c001871f:	52                   	push   edx
c0018720:	50                   	push   eax
c0018721:	53                   	push   ebx
c0018722:	e8 87 40 ff ff       	call   c000c7ae <secondsToDatetime(unsigned long long)>
c0018727:	89 d8                	mov    eax,ebx
c0018729:	83 c4 14             	add    esp,0x14
c001872c:	5b                   	pop    ebx
c001872d:	c2 04 00             	ret    0x4

c0018730 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c0018730:	56                   	push   esi
c0018731:	53                   	push   ebx
c0018732:	83 ec 14             	sub    esp,0x14
c0018735:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0018739:	8b 03                	mov    eax,DWORD PTR [ebx]
c001873b:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c001873e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018742:	52                   	push   edx
c0018743:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018747:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001874b:	50                   	push   eax
c001874c:	e8 5d 40 ff ff       	call   c000c7ae <secondsToDatetime(unsigned long long)>
c0018751:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018755:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018759:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001875d:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0018761:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0018765:	89 f0                	mov    eax,esi
c0018767:	83 c4 20             	add    esp,0x20
c001876a:	5b                   	pop    ebx
c001876b:	5e                   	pop    esi
c001876c:	ff e0                	jmp    eax

c001876e <RTC::~RTC()>:
c001876e:	83 ec 0c             	sub    esp,0xc
c0018771:	ba 4c 2e 02 c0       	mov    edx,0xc0022e4c
c0018776:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001877a:	89 10                	mov    DWORD PTR [eax],edx
c001877c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018780:	83 ec 0c             	sub    esp,0xc
c0018783:	50                   	push   eax
c0018784:	e8 b7 3d ff ff       	call   c000c540 <Clock::~Clock()>
c0018789:	83 c4 10             	add    esp,0x10
c001878c:	90                   	nop
c001878d:	83 c4 0c             	add    esp,0xc
c0018790:	c3                   	ret    
c0018791:	90                   	nop

c0018792 <RTC::~RTC()>:
c0018792:	83 ec 0c             	sub    esp,0xc
c0018795:	83 ec 0c             	sub    esp,0xc
c0018798:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001879c:	e8 cd ff ff ff       	call   c001876e <RTC::~RTC()>
c00187a1:	83 c4 10             	add    esp,0x10
c00187a4:	83 ec 08             	sub    esp,0x8
c00187a7:	68 60 01 00 00       	push   0x160
c00187ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00187b0:	e8 63 20 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c00187b5:	83 c4 10             	add    esp,0x10
c00187b8:	83 c4 0c             	add    esp,0xc
c00187bb:	c3                   	ret    

c00187bc <RTC::get_update_in_progress_flag()>:
c00187bc:	83 ec 14             	sub    esp,0x14
c00187bf:	6a 0a                	push   0xa
c00187c1:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00187c7:	e8 ac e9 fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c00187cc:	83 c4 1c             	add    esp,0x1c
c00187cf:	0f b6 c0             	movzx  eax,al
c00187d2:	c1 e8 07             	shr    eax,0x7
c00187d5:	c3                   	ret    

c00187d6 <RTC::completeRTCRefresh()>:
c00187d6:	55                   	push   ebp
c00187d7:	57                   	push   edi
c00187d8:	56                   	push   esi
c00187d9:	53                   	push   ebx
c00187da:	83 ec 3c             	sub    esp,0x3c
c00187dd:	8b 1d ec b8 02 c0    	mov    ebx,DWORD PTR ds:0xc002b8ec
c00187e3:	83 ec 0c             	sub    esp,0xc
c00187e6:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00187ea:	e8 cd ff ff ff       	call   c00187bc <RTC::get_update_in_progress_flag()>
c00187ef:	83 c4 10             	add    esp,0x10
c00187f2:	84 c0                	test   al,al
c00187f4:	74 0e                	je     c0018804 <RTC::completeRTCRefresh()+0x2e>
c00187f6:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c00187fc:	3b 05 ec b8 02 c0    	cmp    eax,DWORD PTR ds:0xc002b8ec
c0018802:	73 df                	jae    c00187e3 <RTC::completeRTCRefresh()+0xd>
c0018804:	51                   	push   ecx
c0018805:	51                   	push   ecx
c0018806:	6a 00                	push   0x0
c0018808:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c001880e:	e8 65 e9 fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c0018813:	5b                   	pop    ebx
c0018814:	89 c7                	mov    edi,eax
c0018816:	5e                   	pop    esi
c0018817:	6a 02                	push   0x2
c0018819:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c001881f:	e8 54 e9 fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c0018824:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c0018828:	5d                   	pop    ebp
c0018829:	58                   	pop    eax
c001882a:	6a 04                	push   0x4
c001882c:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018832:	e8 41 e9 fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c0018837:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c001883b:	58                   	pop    eax
c001883c:	5a                   	pop    edx
c001883d:	6a 07                	push   0x7
c001883f:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018845:	e8 2e e9 fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c001884a:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c001884e:	59                   	pop    ecx
c001884f:	5b                   	pop    ebx
c0018850:	6a 08                	push   0x8
c0018852:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018858:	e8 1b e9 fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c001885d:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c0018861:	5e                   	pop    esi
c0018862:	5d                   	pop    ebp
c0018863:	6a 09                	push   0x9
c0018865:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c001886b:	e8 08 e9 fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c0018870:	0f b6 c0             	movzx  eax,al
c0018873:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0018877:	83 c4 10             	add    esp,0x10
c001887a:	8b 1d ec b8 02 c0    	mov    ebx,DWORD PTR ds:0xc002b8ec
c0018880:	83 ec 0c             	sub    esp,0xc
c0018883:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0018887:	e8 30 ff ff ff       	call   c00187bc <RTC::get_update_in_progress_flag()>
c001888c:	83 c4 10             	add    esp,0x10
c001888f:	84 c0                	test   al,al
c0018891:	74 0e                	je     c00188a1 <RTC::completeRTCRefresh()+0xcb>
c0018893:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0018899:	3b 05 ec b8 02 c0    	cmp    eax,DWORD PTR ds:0xc002b8ec
c001889f:	73 df                	jae    c0018880 <RTC::completeRTCRefresh()+0xaa>
c00188a1:	51                   	push   ecx
c00188a2:	51                   	push   ecx
c00188a3:	6a 00                	push   0x0
c00188a5:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00188ab:	e8 c8 e8 fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c00188b0:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c00188b4:	5b                   	pop    ebx
c00188b5:	5e                   	pop    esi
c00188b6:	6a 02                	push   0x2
c00188b8:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00188be:	e8 b5 e8 fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c00188c3:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c00188c7:	5d                   	pop    ebp
c00188c8:	58                   	pop    eax
c00188c9:	6a 04                	push   0x4
c00188cb:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00188d1:	e8 a2 e8 fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c00188d6:	88 c3                	mov    bl,al
c00188d8:	58                   	pop    eax
c00188d9:	5a                   	pop    edx
c00188da:	6a 07                	push   0x7
c00188dc:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00188e2:	e8 91 e8 fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c00188e7:	59                   	pop    ecx
c00188e8:	89 c6                	mov    esi,eax
c00188ea:	5d                   	pop    ebp
c00188eb:	6a 08                	push   0x8
c00188ed:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00188f3:	e8 80 e8 fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c00188f8:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c00188fc:	58                   	pop    eax
c00188fd:	5a                   	pop    edx
c00188fe:	6a 09                	push   0x9
c0018900:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018906:	e8 6d e8 fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c001890b:	89 f9                	mov    ecx,edi
c001890d:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0018911:	0f b6 e8             	movzx  ebp,al
c0018914:	83 c4 10             	add    esp,0x10
c0018917:	38 4c 24 08          	cmp    BYTE PTR [esp+0x8],cl
c001891b:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018920:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c0018925:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0018929:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001892d:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c0018931:	0f 94 c0             	sete   al
c0018934:	0f b6 fb             	movzx  edi,bl
c0018937:	3a 4c 24 18          	cmp    cl,BYTE PTR [esp+0x18]
c001893b:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c0018940:	0f 94 c2             	sete   dl
c0018943:	21 d0                	and    eax,edx
c0018945:	3a 5c 24 1c          	cmp    bl,BYTE PTR [esp+0x1c]
c0018949:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c001894d:	0f 94 c2             	sete   dl
c0018950:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0018954:	21 c2                	and    edx,eax
c0018956:	89 f0                	mov    eax,esi
c0018958:	0f b6 c0             	movzx  eax,al
c001895b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001895f:	89 f0                	mov    eax,esi
c0018961:	3a 44 24 22          	cmp    al,BYTE PTR [esp+0x22]
c0018965:	0f 94 c0             	sete   al
c0018968:	21 d0                	and    eax,edx
c001896a:	31 d2                	xor    edx,edx
c001896c:	3a 4c 24 23          	cmp    cl,BYTE PTR [esp+0x23]
c0018970:	0f 94 c2             	sete   dl
c0018973:	85 c2                	test   edx,eax
c0018975:	75 27                	jne    c001899e <RTC::completeRTCRefresh()+0x1c8>
c0018977:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001897b:	89 6c 24 24          	mov    DWORD PTR [esp+0x24],ebp
c001897f:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0018983:	88 5c 24 1c          	mov    BYTE PTR [esp+0x1c],bl
c0018987:	89 f0                	mov    eax,esi
c0018989:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001898d:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0018991:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018995:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0018999:	e9 dc fe ff ff       	jmp    c001887a <RTC::completeRTCRefresh()+0xa4>
c001899e:	39 6c 24 24          	cmp    DWORD PTR [esp+0x24],ebp
c00189a2:	75 d3                	jne    c0018977 <RTC::completeRTCRefresh()+0x1a1>
c00189a4:	52                   	push   edx
c00189a5:	52                   	push   edx
c00189a6:	6a 0b                	push   0xb
c00189a8:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00189ae:	e8 c5 e7 fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c00189b3:	83 c4 10             	add    esp,0x10
c00189b6:	a8 04                	test   al,0x4
c00189b8:	75 7a                	jne    c0018a34 <RTC::completeRTCRefresh()+0x25e>
c00189ba:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00189be:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00189c2:	83 e1 0f             	and    ecx,0xf
c00189c5:	c1 ea 04             	shr    edx,0x4
c00189c8:	c1 ef 04             	shr    edi,0x4
c00189cb:	6b d2 0a             	imul   edx,edx,0xa
c00189ce:	83 e6 0f             	and    esi,0xf
c00189d1:	01 d1                	add    ecx,edx
c00189d3:	c1 ed 04             	shr    ebp,0x4
c00189d6:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00189da:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00189de:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00189e2:	c1 ea 04             	shr    edx,0x4
c00189e5:	83 e1 0f             	and    ecx,0xf
c00189e8:	6b d2 0a             	imul   edx,edx,0xa
c00189eb:	6b ed 0a             	imul   ebp,ebp,0xa
c00189ee:	01 d1                	add    ecx,edx
c00189f0:	89 fa                	mov    edx,edi
c00189f2:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c00189f6:	83 e2 07             	and    edx,0x7
c00189f9:	89 d9                	mov    ecx,ebx
c00189fb:	6b d2 0a             	imul   edx,edx,0xa
c00189fe:	83 e1 0f             	and    ecx,0xf
c0018a01:	83 e3 80             	and    ebx,0xffffff80
c0018a04:	01 d1                	add    ecx,edx
c0018a06:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018a0a:	09 cb                	or     ebx,ecx
c0018a0c:	c1 ea 04             	shr    edx,0x4
c0018a0f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018a13:	6b d2 0a             	imul   edx,edx,0xa
c0018a16:	83 e1 0f             	and    ecx,0xf
c0018a19:	01 d6                	add    esi,edx
c0018a1b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018a1f:	c1 ea 04             	shr    edx,0x4
c0018a22:	6b d2 0a             	imul   edx,edx,0xa
c0018a25:	01 d1                	add    ecx,edx
c0018a27:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018a2b:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c0018a2f:	83 e2 0f             	and    edx,0xf
c0018a32:	01 d5                	add    ebp,edx
c0018a34:	a8 02                	test   al,0x2
c0018a36:	75 15                	jne    c0018a4d <RTC::completeRTCRefresh()+0x277>
c0018a38:	f6 c3 80             	test   bl,0x80
c0018a3b:	74 10                	je     c0018a4d <RTC::completeRTCRefresh()+0x277>
c0018a3d:	83 e3 7f             	and    ebx,0x7f
c0018a40:	b9 18 00 00 00       	mov    ecx,0x18
c0018a45:	8d 43 0c             	lea    eax,[ebx+0xc]
c0018a48:	99                   	cdq    
c0018a49:	f7 f9                	idiv   ecx
c0018a4b:	88 d3                	mov    bl,dl
c0018a4d:	8d bd d0 07 00 00    	lea    edi,[ebp+0x7d0]
c0018a53:	81 ff e3 07 00 00    	cmp    edi,0x7e3
c0018a59:	77 06                	ja     c0018a61 <RTC::completeRTCRefresh()+0x28b>
c0018a5b:	8d bd 34 08 00 00    	lea    edi,[ebp+0x834]
c0018a61:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018a66:	31 c9                	xor    ecx,ecx
c0018a68:	c1 e0 10             	shl    eax,0x10
c0018a6b:	89 cd                	mov    ebp,ecx
c0018a6d:	c1 e7 10             	shl    edi,0x10
c0018a70:	31 d2                	xor    edx,edx
c0018a72:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0018a78:	09 c5                	or     ebp,eax
c0018a7a:	89 f0                	mov    eax,esi
c0018a7c:	89 e9                	mov    ecx,ebp
c0018a7e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0018a82:	8a 6c 24 0c          	mov    ch,BYTE PTR [esp+0xc]
c0018a86:	88 c2                	mov    dl,al
c0018a88:	88 d9                	mov    cl,bl
c0018a8a:	8a 74 24 10          	mov    dh,BYTE PTR [esp+0x10]
c0018a8e:	0f b7 c2             	movzx  eax,dx
c0018a91:	09 f8                	or     eax,edi
c0018a93:	89 c2                	mov    edx,eax
c0018a95:	50                   	push   eax
c0018a96:	50                   	push   eax
c0018a97:	51                   	push   ecx
c0018a98:	52                   	push   edx
c0018a99:	e8 91 3b ff ff       	call   c000c62f <datetimeToSeconds(datetime_t)>
c0018a9e:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c0018aa2:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c0018aa8:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c0018aae:	83 c4 4c             	add    esp,0x4c
c0018ab1:	5b                   	pop    ebx
c0018ab2:	5e                   	pop    esi
c0018ab3:	5f                   	pop    edi
c0018ab4:	5d                   	pop    ebp
c0018ab5:	c3                   	ret    

c0018ab6 <RTC::setTimeInDatetimeUTC(datetime_t)>:
c0018ab6:	55                   	push   ebp
c0018ab7:	57                   	push   edi
c0018ab8:	56                   	push   esi
c0018ab9:	53                   	push   ebx
c0018aba:	83 ec 30             	sub    esp,0x30
c0018abd:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0018ac1:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0018ac5:	6a 00                	push   0x0
c0018ac7:	6a 00                	push   0x0
c0018ac9:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018acf:	e8 be e7 fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018ad4:	83 c4 0c             	add    esp,0xc
c0018ad7:	6a 00                	push   0x0
c0018ad9:	6a 02                	push   0x2
c0018adb:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018ae1:	e8 ac e7 fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018ae6:	31 d2                	xor    edx,edx
c0018ae8:	89 f9                	mov    ecx,edi
c0018aea:	89 f8                	mov    eax,edi
c0018aec:	c1 e9 10             	shr    ecx,0x10
c0018aef:	0f b6 c4             	movzx  eax,ah
c0018af2:	88 4c 24 1c          	mov    BYTE PTR [esp+0x1c],cl
c0018af6:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0018afa:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018afe:	b9 64 00 00 00       	mov    ecx,0x64
c0018b03:	89 f0                	mov    eax,esi
c0018b05:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0018b09:	89 f0                	mov    eax,esi
c0018b0b:	0f b6 c4             	movzx  eax,ah
c0018b0e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018b12:	89 f0                	mov    eax,esi
c0018b14:	c1 e8 10             	shr    eax,0x10
c0018b17:	f7 f1                	div    ecx
c0018b19:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0018b1d:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0018b21:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0018b25:	59                   	pop    ecx
c0018b26:	5b                   	pop    ebx
c0018b27:	89 fb                	mov    ebx,edi
c0018b29:	6a 0b                	push   0xb
c0018b2b:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018b31:	e8 42 e6 fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c0018b36:	83 c4 10             	add    esp,0x10
c0018b39:	89 c5                	mov    ebp,eax
c0018b3b:	a8 04                	test   al,0x4
c0018b3d:	75 6e                	jne    c0018bad <RTC::setTimeInDatetimeUTC(datetime_t)+0xf7>
c0018b3f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0018b43:	31 d2                	xor    edx,edx
c0018b45:	0f b6 c1             	movzx  eax,cl
c0018b48:	b9 0a 00 00 00       	mov    ecx,0xa
c0018b4d:	f7 f1                	div    ecx
c0018b4f:	c1 e0 04             	shl    eax,0x4
c0018b52:	09 d0                	or     eax,edx
c0018b54:	31 d2                	xor    edx,edx
c0018b56:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018b5a:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0018b5f:	f7 f1                	div    ecx
c0018b61:	c1 e0 04             	shl    eax,0x4
c0018b64:	09 d0                	or     eax,edx
c0018b66:	31 d2                	xor    edx,edx
c0018b68:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018b6c:	0f b6 c3             	movzx  eax,bl
c0018b6f:	f7 f1                	div    ecx
c0018b71:	c1 e0 04             	shl    eax,0x4
c0018b74:	09 d0                	or     eax,edx
c0018b76:	31 d2                	xor    edx,edx
c0018b78:	89 c3                	mov    ebx,eax
c0018b7a:	89 f0                	mov    eax,esi
c0018b7c:	0f b6 c0             	movzx  eax,al
c0018b7f:	f7 f1                	div    ecx
c0018b81:	c1 e0 04             	shl    eax,0x4
c0018b84:	09 d0                	or     eax,edx
c0018b86:	31 d2                	xor    edx,edx
c0018b88:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0018b8c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018b91:	f7 f1                	div    ecx
c0018b93:	c1 e0 04             	shl    eax,0x4
c0018b96:	09 d0                	or     eax,edx
c0018b98:	31 d2                	xor    edx,edx
c0018b9a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018b9e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018ba2:	f7 f1                	div    ecx
c0018ba4:	c1 e0 04             	shl    eax,0x4
c0018ba7:	09 d0                	or     eax,edx
c0018ba9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018bad:	83 e5 02             	and    ebp,0x2
c0018bb0:	75 1e                	jne    c0018bd0 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0018bb2:	0f b6 c3             	movzx  eax,bl
c0018bb5:	83 f8 0b             	cmp    eax,0xb
c0018bb8:	76 10                	jbe    c0018bca <RTC::setTimeInDatetimeUTC(datetime_t)+0x114>
c0018bba:	8d 53 f4             	lea    edx,[ebx-0xc]
c0018bbd:	88 d3                	mov    bl,dl
c0018bbf:	84 d2                	test   dl,dl
c0018bc1:	75 02                	jne    c0018bc5 <RTC::setTimeInDatetimeUTC(datetime_t)+0x10f>
c0018bc3:	b3 0c                	mov    bl,0xc
c0018bc5:	83 cb 80             	or     ebx,0xffffff80
c0018bc8:	eb 06                	jmp    c0018bd0 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0018bca:	85 c0                	test   eax,eax
c0018bcc:	75 02                	jne    c0018bd0 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0018bce:	b3 0c                	mov    bl,0xc
c0018bd0:	0f b6 db             	movzx  ebx,bl
c0018bd3:	50                   	push   eax
c0018bd4:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0018bd9:	52                   	push   edx
c0018bda:	6a 00                	push   0x0
c0018bdc:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018be2:	e8 ab e6 fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018be7:	83 c4 0c             	add    esp,0xc
c0018bea:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018bef:	50                   	push   eax
c0018bf0:	6a 02                	push   0x2
c0018bf2:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018bf8:	e8 95 e6 fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018bfd:	83 c4 0c             	add    esp,0xc
c0018c00:	53                   	push   ebx
c0018c01:	6a 04                	push   0x4
c0018c03:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018c09:	e8 84 e6 fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018c0e:	83 c4 0c             	add    esp,0xc
c0018c11:	0f b6 54 24 14       	movzx  edx,BYTE PTR [esp+0x14]
c0018c16:	52                   	push   edx
c0018c17:	6a 07                	push   0x7
c0018c19:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018c1f:	e8 6e e6 fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018c24:	83 c4 0c             	add    esp,0xc
c0018c27:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0018c2c:	50                   	push   eax
c0018c2d:	6a 08                	push   0x8
c0018c2f:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018c35:	e8 58 e6 fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018c3a:	83 c4 0c             	add    esp,0xc
c0018c3d:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c0018c42:	55                   	push   ebp
c0018c43:	6a 09                	push   0x9
c0018c45:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018c4b:	e8 42 e6 fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018c50:	5a                   	pop    edx
c0018c51:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0018c55:	e8 7c fb ff ff       	call   c00187d6 <RTC::completeRTCRefresh()>
c0018c5a:	83 c4 3c             	add    esp,0x3c
c0018c5d:	b0 01                	mov    al,0x1
c0018c5f:	5b                   	pop    ebx
c0018c60:	5e                   	pop    esi
c0018c61:	5f                   	pop    edi
c0018c62:	5d                   	pop    ebp
c0018c63:	c3                   	ret    

c0018c64 <rtcIRQHandler(regs*, void*)>:
c0018c64:	53                   	push   ebx
c0018c65:	83 ec 10             	sub    esp,0x10
c0018c68:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0018c6c:	6a 0c                	push   0xc
c0018c6e:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018c74:	e8 ff e4 fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c0018c79:	83 c4 10             	add    esp,0x10
c0018c7c:	a8 80                	test   al,0x80
c0018c7e:	74 24                	je     c0018ca4 <rtcIRQHandler(regs*, void*)+0x40>
c0018c80:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c0018c87:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c0018c8e:	66 ff 05 78 c7 02 c0 	inc    WORD PTR ds:0xc002c778
c0018c95:	75 0d                	jne    c0018ca4 <rtcIRQHandler(regs*, void*)+0x40>
c0018c97:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0018c9b:	83 c4 08             	add    esp,0x8
c0018c9e:	5b                   	pop    ebx
c0018c9f:	e9 32 fb ff ff       	jmp    c00187d6 <RTC::completeRTCRefresh()>
c0018ca4:	83 c4 08             	add    esp,0x8
c0018ca7:	5b                   	pop    ebx
c0018ca8:	c3                   	ret    
c0018ca9:	90                   	nop

c0018caa <RTC::RTC()>:
c0018caa:	83 ec 1c             	sub    esp,0x1c
c0018cad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018cb1:	83 ec 08             	sub    esp,0x8
c0018cb4:	68 2f 2e 02 c0       	push   0xc0022e2f
c0018cb9:	50                   	push   eax
c0018cba:	e8 4b 38 ff ff       	call   c000c50a <Clock::Clock(char const*)>
c0018cbf:	83 c4 10             	add    esp,0x10
c0018cc2:	ba 4c 2e 02 c0       	mov    edx,0xc0022e4c
c0018cc7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018ccb:	89 10                	mov    DWORD PTR [eax],edx
c0018ccd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018cd1:	83 ec 0c             	sub    esp,0xc
c0018cd4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018cd8:	6a 01                	push   0x1
c0018cda:	68 64 8c 01 c0       	push   0xc0018c64
c0018cdf:	6a 08                	push   0x8
c0018ce1:	50                   	push   eax
c0018ce2:	e8 ff 3c ff ff       	call   c000c9e6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0018ce7:	83 c4 20             	add    esp,0x20
c0018cea:	89 c2                	mov    edx,eax
c0018cec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018cf0:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0018cf6:	fa                   	cli    
c0018cf7:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0018cfc:	83 c0 01             	add    eax,0x1
c0018cff:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0018d04:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0018d09:	83 ec 08             	sub    esp,0x8
c0018d0c:	6a 0b                	push   0xb
c0018d0e:	50                   	push   eax
c0018d0f:	e8 64 e4 fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c0018d14:	83 c4 10             	add    esp,0x10
c0018d17:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0018d1b:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0018d20:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0018d24:	83 ca 10             	or     edx,0x10
c0018d27:	0f b6 d2             	movzx  edx,dl
c0018d2a:	83 ec 04             	sub    esp,0x4
c0018d2d:	52                   	push   edx
c0018d2e:	6a 0b                	push   0xb
c0018d30:	50                   	push   eax
c0018d31:	e8 5c e5 fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018d36:	83 c4 10             	add    esp,0x10
c0018d39:	83 ec 0c             	sub    esp,0xc
c0018d3c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018d40:	e8 91 fa ff ff       	call   c00187d6 <RTC::completeRTCRefresh()>
c0018d45:	83 c4 10             	add    esp,0x10
c0018d48:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0018d4d:	83 e8 01             	sub    eax,0x1
c0018d50:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0018d55:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0018d5a:	85 c0                	test   eax,eax
c0018d5c:	75 01                	jne    c0018d5f <RTC::RTC()+0xb5>
c0018d5e:	fb                   	sti    
c0018d5f:	90                   	nop
c0018d60:	83 c4 1c             	add    esp,0x1c
c0018d63:	c3                   	ret    

c0018d64 <HalConsoleScroll(int, int)>:
c0018d64:	83 ec 10             	sub    esp,0x10
c0018d67:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c0018d6f:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0018d77:	90                   	nop
c0018d78:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0018d7d:	0f 8f e1 00 00 00    	jg     c0018e64 <HalConsoleScroll(int, int)+0x100>
c0018d83:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0018d8b:	90                   	nop
c0018d8c:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c0018d94:	0f 8f be 00 00 00    	jg     c0018e58 <HalConsoleScroll(int, int)+0xf4>
c0018d9a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018d9e:	89 d0                	mov    eax,edx
c0018da0:	c1 e0 02             	shl    eax,0x2
c0018da3:	01 d0                	add    eax,edx
c0018da5:	c1 e0 05             	shl    eax,0x5
c0018da8:	89 c2                	mov    edx,eax
c0018daa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018dae:	01 d0                	add    eax,edx
c0018db0:	89 c2                	mov    edx,eax
c0018db2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018db6:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0018db9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018dbd:	89 d0                	mov    eax,edx
c0018dbf:	c1 e0 02             	shl    eax,0x2
c0018dc2:	01 d0                	add    eax,edx
c0018dc4:	c1 e0 05             	shl    eax,0x5
c0018dc7:	89 c2                	mov    edx,eax
c0018dc9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018dcd:	01 d0                	add    eax,edx
c0018dcf:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c0018dd5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018dd9:	01 c2                	add    edx,eax
c0018ddb:	8a 01                	mov    al,BYTE PTR [ecx]
c0018ddd:	88 02                	mov    BYTE PTR [edx],al
c0018ddf:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0018de4:	75 66                	jne    c0018e4c <HalConsoleScroll(int, int)+0xe8>
c0018de6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018dea:	83 e0 01             	and    eax,0x1
c0018ded:	74 39                	je     c0018e28 <HalConsoleScroll(int, int)+0xc4>
c0018def:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018df3:	83 e0 0f             	and    eax,0xf
c0018df6:	88 c2                	mov    dl,al
c0018df8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018dfc:	c1 e0 04             	shl    eax,0x4
c0018dff:	09 d0                	or     eax,edx
c0018e01:	88 c1                	mov    cl,al
c0018e03:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018e07:	89 d0                	mov    eax,edx
c0018e09:	c1 e0 02             	shl    eax,0x2
c0018e0c:	01 d0                	add    eax,edx
c0018e0e:	c1 e0 05             	shl    eax,0x5
c0018e11:	89 c2                	mov    edx,eax
c0018e13:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018e17:	01 d0                	add    eax,edx
c0018e19:	89 c2                	mov    edx,eax
c0018e1b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018e1f:	01 d0                	add    eax,edx
c0018e21:	88 ca                	mov    dl,cl
c0018e23:	88 10                	mov    BYTE PTR [eax],dl
c0018e25:	eb 25                	jmp    c0018e4c <HalConsoleScroll(int, int)+0xe8>
c0018e27:	90                   	nop
c0018e28:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018e2c:	89 d0                	mov    eax,edx
c0018e2e:	c1 e0 02             	shl    eax,0x2
c0018e31:	01 d0                	add    eax,edx
c0018e33:	c1 e0 05             	shl    eax,0x5
c0018e36:	89 c2                	mov    edx,eax
c0018e38:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018e3c:	01 d0                	add    eax,edx
c0018e3e:	89 c2                	mov    edx,eax
c0018e40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018e44:	01 d0                	add    eax,edx
c0018e46:	c6 00 20             	mov    BYTE PTR [eax],0x20
c0018e49:	8d 76 00             	lea    esi,[esi+0x0]
c0018e4c:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c0018e51:	e9 36 ff ff ff       	jmp    c0018d8c <HalConsoleScroll(int, int)+0x28>
c0018e56:	66 90                	xchg   ax,ax
c0018e58:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0018e5d:	e9 16 ff ff ff       	jmp    c0018d78 <HalConsoleScroll(int, int)+0x14>
c0018e62:	66 90                	xchg   ax,ax
c0018e64:	90                   	nop
c0018e65:	83 c4 10             	add    esp,0x10
c0018e68:	c3                   	ret    
c0018e69:	8d 76 00             	lea    esi,[esi+0x0]

c0018e6c <HalConsoleWriteCharacter(char, int, int, int, int)>:
c0018e6c:	83 ec 14             	sub    esp,0x14
c0018e6f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018e73:	88 04 24             	mov    BYTE PTR [esp],al
c0018e76:	8a 04 24             	mov    al,BYTE PTR [esp]
c0018e79:	0f b6 c0             	movzx  eax,al
c0018e7c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018e80:	89 d1                	mov    ecx,edx
c0018e82:	83 e1 0f             	and    ecx,0xf
c0018e85:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018e89:	c1 e2 04             	shl    edx,0x4
c0018e8c:	0f b6 d2             	movzx  edx,dl
c0018e8f:	09 ca                	or     edx,ecx
c0018e91:	c1 e2 08             	shl    edx,0x8
c0018e94:	09 d0                	or     eax,edx
c0018e96:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0018e9b:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c0018ea3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018ea7:	89 d0                	mov    eax,edx
c0018ea9:	c1 e0 02             	shl    eax,0x2
c0018eac:	01 d0                	add    eax,edx
c0018eae:	c1 e0 04             	shl    eax,0x4
c0018eb1:	89 c2                	mov    edx,eax
c0018eb3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018eb7:	01 d0                	add    eax,edx
c0018eb9:	01 c0                	add    eax,eax
c0018ebb:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0018ebf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018ec3:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0018ec8:	66 89 02             	mov    WORD PTR [edx],ax
c0018ecb:	90                   	nop
c0018ecc:	83 c4 14             	add    esp,0x14
c0018ecf:	c3                   	ret    

c0018ed0 <HalConsoleCursorUpdate(int, int)>:
c0018ed0:	83 ec 20             	sub    esp,0x20
c0018ed3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018ed7:	89 c2                	mov    edx,eax
c0018ed9:	c1 e2 02             	shl    edx,0x2
c0018edc:	01 d0                	add    eax,edx
c0018ede:	c1 e0 04             	shl    eax,0x4
c0018ee1:	89 c2                	mov    edx,eax
c0018ee3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018ee7:	01 d0                	add    eax,edx
c0018ee9:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0018eee:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c0018ef5:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c0018efa:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0018efe:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018f02:	ee                   	out    dx,al
c0018f03:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0018f08:	0f b6 c0             	movzx  eax,al
c0018f0b:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c0018f12:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0018f16:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0018f1a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018f1e:	ee                   	out    dx,al
c0018f1f:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c0018f26:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c0018f2b:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0018f2f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018f33:	ee                   	out    dx,al
c0018f34:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c0018f39:	c1 e8 08             	shr    eax,0x8
c0018f3c:	0f b6 c0             	movzx  eax,al
c0018f3f:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c0018f46:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0018f4a:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0018f4e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018f52:	ee                   	out    dx,al
c0018f53:	90                   	nop
c0018f54:	83 c4 20             	add    esp,0x20
c0018f57:	c3                   	ret    

c0018f58 <FAT::getName()>:
c0018f58:	b8 80 2e 02 c0       	mov    eax,0xc0022e80
c0018f5d:	c3                   	ret    
c0018f5e:	66 90                	xchg   ax,ax

c0018f60 <FAT::tell(void*, unsigned long long*)>:
c0018f60:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018f65:	75 09                	jne    c0018f70 <FAT::tell(void*, unsigned long long*)+0x10>
c0018f67:	b8 04 00 00 00       	mov    eax,0x4
c0018f6c:	c3                   	ret    
c0018f6d:	8d 76 00             	lea    esi,[esi+0x0]
c0018f70:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018f75:	75 09                	jne    c0018f80 <FAT::tell(void*, unsigned long long*)+0x20>
c0018f77:	b8 04 00 00 00       	mov    eax,0x4
c0018f7c:	c3                   	ret    
c0018f7d:	8d 76 00             	lea    esi,[esi+0x0]
c0018f80:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018f84:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0018f87:	ba 00 00 00 00       	mov    edx,0x0
c0018f8c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018f90:	89 01                	mov    DWORD PTR [ecx],eax
c0018f92:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018f95:	b8 00 00 00 00       	mov    eax,0x0
c0018f9a:	c3                   	ret    
c0018f9b:	90                   	nop

c0018f9c <FAT::stat(void*, unsigned long long*)>:
c0018f9c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018fa1:	75 09                	jne    c0018fac <FAT::stat(void*, unsigned long long*)+0x10>
c0018fa3:	b8 04 00 00 00       	mov    eax,0x4
c0018fa8:	c3                   	ret    
c0018fa9:	8d 76 00             	lea    esi,[esi+0x0]
c0018fac:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018fb1:	75 09                	jne    c0018fbc <FAT::stat(void*, unsigned long long*)+0x20>
c0018fb3:	b8 04 00 00 00       	mov    eax,0x4
c0018fb8:	c3                   	ret    
c0018fb9:	8d 76 00             	lea    esi,[esi+0x0]
c0018fbc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018fc0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018fc3:	ba 00 00 00 00       	mov    edx,0x0
c0018fc8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018fcc:	89 01                	mov    DWORD PTR [ecx],eax
c0018fce:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018fd1:	b8 00 00 00 00       	mov    eax,0x0
c0018fd6:	c3                   	ret    
c0018fd7:	90                   	nop

c0018fd8 <FAT::~FAT()>:
c0018fd8:	83 ec 0c             	sub    esp,0xc
c0018fdb:	ba cc 2e 02 c0       	mov    edx,0xc0022ecc
c0018fe0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018fe4:	89 10                	mov    DWORD PTR [eax],edx
c0018fe6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018fea:	83 ec 0c             	sub    esp,0xc
c0018fed:	50                   	push   eax
c0018fee:	e8 61 28 ff ff       	call   c000b854 <Filesystem::~Filesystem()>
c0018ff3:	83 c4 10             	add    esp,0x10
c0018ff6:	90                   	nop
c0018ff7:	83 c4 0c             	add    esp,0xc
c0018ffa:	c3                   	ret    
c0018ffb:	90                   	nop

c0018ffc <FAT::~FAT()>:
c0018ffc:	83 ec 0c             	sub    esp,0xc
c0018fff:	83 ec 0c             	sub    esp,0xc
c0019002:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019006:	e8 cd ff ff ff       	call   c0018fd8 <FAT::~FAT()>
c001900b:	83 c4 10             	add    esp,0x10
c001900e:	83 ec 08             	sub    esp,0x8
c0019011:	6a 08                	push   0x8
c0019013:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019017:	e8 fc 17 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001901c:	83 c4 10             	add    esp,0x10
c001901f:	83 c4 0c             	add    esp,0xc
c0019022:	c3                   	ret    
c0019023:	90                   	nop

c0019024 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0019024:	83 ec 1c             	sub    esp,0x1c
c0019027:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001902e:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0019033:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019037:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c001903e:	83 f8 ff             	cmp    eax,0xffffffff
c0019041:	75 35                	jne    c0019078 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c0019043:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0019047:	88 c2                	mov    dl,al
c0019049:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c001904e:	01 d0                	add    eax,edx
c0019050:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0019054:	8b 15 80 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c780
c001905a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001905e:	89 14 85 a0 c7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3860],edx
c0019065:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c001906a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001906e:	89 14 85 20 c8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd37e0],edx
c0019075:	eb 19                	jmp    c0019090 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c0019077:	90                   	nop
c0019078:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001907c:	88 c2                	mov    dl,al
c001907e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019082:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c0019089:	01 d0                	add    eax,edx
c001908b:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001908f:	90                   	nop
c0019090:	83 ec 04             	sub    esp,0x4
c0019093:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0019097:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001909b:	8d 44 24 15          	lea    eax,[esp+0x15]
c001909f:	50                   	push   eax
c00190a0:	e8 2a bf fe ff       	call   c0004fcf <f_getlabel>
c00190a5:	83 c4 10             	add    esp,0x10
c00190a8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00190ac:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00190b1:	75 09                	jne    c00190bc <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c00190b3:	b8 00 00 00 00       	mov    eax,0x0
c00190b8:	eb 0a                	jmp    c00190c4 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c00190ba:	66 90                	xchg   ax,ax
c00190bc:	b8 01 00 00 00       	mov    eax,0x1
c00190c1:	8d 76 00             	lea    esi,[esi+0x0]
c00190c4:	83 c4 1c             	add    esp,0x1c
c00190c7:	c3                   	ret    

c00190c8 <FAT::setlabel(LogicalDisk*, int, char*)>:
c00190c8:	57                   	push   edi
c00190c9:	83 ec 58             	sub    esp,0x58
c00190cc:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c00190d4:	8d 54 24 10          	lea    edx,[esp+0x10]
c00190d8:	b8 00 00 00 00       	mov    eax,0x0
c00190dd:	b9 0f 00 00 00       	mov    ecx,0xf
c00190e2:	fc                   	cld    
c00190e3:	89 d7                	mov    edi,edx
c00190e5:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00190e7:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00190eb:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c00190f2:	83 f8 ff             	cmp    eax,0xffffffff
c00190f5:	75 35                	jne    c001912c <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c00190f7:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00190fb:	88 c2                	mov    dl,al
c00190fd:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c0019102:	01 d0                	add    eax,edx
c0019104:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019108:	8b 15 80 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c780
c001910e:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0019112:	89 14 85 a0 c7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3860],edx
c0019119:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c001911e:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0019122:	89 14 85 20 c8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd37e0],edx
c0019129:	eb 19                	jmp    c0019144 <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c001912b:	90                   	nop
c001912c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0019130:	88 c2                	mov    dl,al
c0019132:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0019136:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c001913d:	01 d0                	add    eax,edx
c001913f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019143:	90                   	nop
c0019144:	83 ec 08             	sub    esp,0x8
c0019147:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001914b:	8d 44 24 18          	lea    eax,[esp+0x18]
c001914f:	50                   	push   eax
c0019150:	e8 eb 76 fe ff       	call   c0000840 <strcat>
c0019155:	83 c4 10             	add    esp,0x10
c0019158:	83 ec 0c             	sub    esp,0xc
c001915b:	8d 44 24 18          	lea    eax,[esp+0x18]
c001915f:	50                   	push   eax
c0019160:	e8 bb bf fe ff       	call   c0005120 <f_setlabel>
c0019165:	83 c4 10             	add    esp,0x10
c0019168:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001916c:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0019171:	75 09                	jne    c001917c <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c0019173:	b8 00 00 00 00       	mov    eax,0x0
c0019178:	eb 0a                	jmp    c0019184 <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c001917a:	66 90                	xchg   ax,ax
c001917c:	b8 01 00 00 00       	mov    eax,0x1
c0019181:	8d 76 00             	lea    esi,[esi+0x0]
c0019184:	83 c4 58             	add    esp,0x58
c0019187:	5f                   	pop    edi
c0019188:	c3                   	ret    
c0019189:	90                   	nop
c001918a:	66 90                	xchg   ax,ax

c001918c <FAT::format(LogicalDisk*, int, char const*, int)>:
c001918c:	83 ec 2c             	sub    esp,0x2c
c001918f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0019197:	83 ec 08             	sub    esp,0x8
c001919a:	68 a4 2e 02 c0       	push   0xc0022ea4
c001919f:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00191a3:	e8 a8 75 fe ff       	call   c0000750 <strcmp>
c00191a8:	83 c4 10             	add    esp,0x10
c00191ab:	85 c0                	test   eax,eax
c00191ad:	0f 94 c0             	sete   al
c00191b0:	0f b6 c0             	movzx  eax,al
c00191b3:	85 c0                	test   eax,eax
c00191b5:	74 0d                	je     c00191c4 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c00191b7:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00191bf:	e9 c0 00 00 00       	jmp    c0019284 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c00191c4:	83 ec 08             	sub    esp,0x8
c00191c7:	68 96 2e 02 c0       	push   0xc0022e96
c00191cc:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00191d0:	e8 7b 75 fe ff       	call   c0000750 <strcmp>
c00191d5:	83 c4 10             	add    esp,0x10
c00191d8:	85 c0                	test   eax,eax
c00191da:	0f 94 c0             	sete   al
c00191dd:	0f b6 c0             	movzx  eax,al
c00191e0:	85 c0                	test   eax,eax
c00191e2:	74 10                	je     c00191f4 <FAT::format(LogicalDisk*, int, char const*, int)+0x68>
c00191e4:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00191ec:	e9 93 00 00 00       	jmp    c0019284 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c00191f1:	8d 76 00             	lea    esi,[esi+0x0]
c00191f4:	83 ec 08             	sub    esp,0x8
c00191f7:	68 9c 2e 02 c0       	push   0xc0022e9c
c00191fc:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019200:	e8 4b 75 fe ff       	call   c0000750 <strcmp>
c0019205:	83 c4 10             	add    esp,0x10
c0019208:	85 c0                	test   eax,eax
c001920a:	0f 94 c0             	sete   al
c001920d:	0f b6 c0             	movzx  eax,al
c0019210:	85 c0                	test   eax,eax
c0019212:	74 0c                	je     c0019220 <FAT::format(LogicalDisk*, int, char const*, int)+0x94>
c0019214:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001921c:	eb 66                	jmp    c0019284 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001921e:	66 90                	xchg   ax,ax
c0019220:	83 ec 08             	sub    esp,0x8
c0019223:	68 7c 05 02 c0       	push   0xc002057c
c0019228:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001922c:	e8 1f 75 fe ff       	call   c0000750 <strcmp>
c0019231:	83 c4 10             	add    esp,0x10
c0019234:	85 c0                	test   eax,eax
c0019236:	0f 94 c0             	sete   al
c0019239:	0f b6 c0             	movzx  eax,al
c001923c:	85 c0                	test   eax,eax
c001923e:	74 0c                	je     c001924c <FAT::format(LogicalDisk*, int, char const*, int)+0xc0>
c0019240:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0019248:	eb 3a                	jmp    c0019284 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001924a:	66 90                	xchg   ax,ax
c001924c:	83 ec 08             	sub    esp,0x8
c001924f:	68 a2 2e 02 c0       	push   0xc0022ea2
c0019254:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019258:	e8 f3 74 fe ff       	call   c0000750 <strcmp>
c001925d:	83 c4 10             	add    esp,0x10
c0019260:	85 c0                	test   eax,eax
c0019262:	0f 94 c0             	sete   al
c0019265:	0f b6 c0             	movzx  eax,al
c0019268:	85 c0                	test   eax,eax
c001926a:	74 0c                	je     c0019278 <FAT::format(LogicalDisk*, int, char const*, int)+0xec>
c001926c:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0019274:	eb 0e                	jmp    c0019284 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0019276:	66 90                	xchg   ax,ax
c0019278:	b8 08 00 00 00       	mov    eax,0x8
c001927d:	e9 ea 00 00 00       	jmp    c001936c <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0019282:	66 90                	xchg   ax,ax
c0019284:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001928b:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0019290:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019294:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c001929b:	83 f8 ff             	cmp    eax,0xffffffff
c001929e:	75 34                	jne    c00192d4 <FAT::format(LogicalDisk*, int, char const*, int)+0x148>
c00192a0:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00192a4:	88 c2                	mov    dl,al
c00192a6:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c00192ab:	01 d0                	add    eax,edx
c00192ad:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00192b1:	8b 15 80 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c780
c00192b7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00192bb:	89 14 85 a0 c7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3860],edx
c00192c2:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c00192c7:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00192cb:	89 14 85 20 c8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd37e0],edx
c00192d2:	eb 18                	jmp    c00192ec <FAT::format(LogicalDisk*, int, char const*, int)+0x160>
c00192d4:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00192d8:	88 c2                	mov    dl,al
c00192da:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00192de:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c00192e5:	01 d0                	add    eax,edx
c00192e7:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00192eb:	90                   	nop
c00192ec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00192f0:	88 04 24             	mov    BYTE PTR [esp],al
c00192f3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00192f7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00192fb:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0019303:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0019308:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0019310:	83 ec 0c             	sub    esp,0xc
c0019313:	68 00 20 00 00       	push   0x2000
c0019318:	e8 99 e7 fe ff       	call   c0007ab6 <malloc>
c001931d:	83 c4 10             	add    esp,0x10
c0019320:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019324:	68 00 20 00 00       	push   0x2000
c0019329:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001932d:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019331:	50                   	push   eax
c0019332:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c0019336:	50                   	push   eax
c0019337:	e8 e1 c0 fe ff       	call   c000541d <f_mkfs>
c001933c:	83 c4 10             	add    esp,0x10
c001933f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019343:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0019348:	75 0a                	jne    c0019354 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c001934a:	b8 00 00 00 00       	mov    eax,0x0
c001934f:	eb 1b                	jmp    c001936c <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0019351:	8d 76 00             	lea    esi,[esi+0x0]
c0019354:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0019359:	75 09                	jne    c0019364 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d8>
c001935b:	b8 09 00 00 00       	mov    eax,0x9
c0019360:	eb 0a                	jmp    c001936c <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0019362:	66 90                	xchg   ax,ax
c0019364:	b8 01 00 00 00       	mov    eax,0x1
c0019369:	8d 76 00             	lea    esi,[esi+0x0]
c001936c:	83 c4 2c             	add    esp,0x2c
c001936f:	c3                   	ret    

c0019370 <FAT::tryMount(LogicalDisk*, int)>:
c0019370:	81 ec 4c 03 00 00    	sub    esp,0x34c
c0019376:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c001937b:	83 f8 14             	cmp    eax,0x14
c001937e:	75 18                	jne    c0019398 <FAT::tryMount(LogicalDisk*, int)+0x28>
c0019380:	83 ec 0c             	sub    esp,0xc
c0019383:	68 a8 2e 02 c0       	push   0xc0022ea8
c0019388:	e8 06 83 ff ff       	call   c0011693 <KePanic(char const*)>
c001938d:	83 c4 10             	add    esp,0x10
c0019390:	b0 00                	mov    al,0x0
c0019392:	e9 ed 01 00 00       	jmp    c0019584 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0019397:	90                   	nop
c0019398:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c001939f:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00193a5:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00193ab:	3d 00 02 00 00       	cmp    eax,0x200
c00193b0:	74 0a                	je     c00193bc <FAT::tryMount(LogicalDisk*, int)+0x4c>
c00193b2:	b0 00                	mov    al,0x0
c00193b4:	e9 cb 01 00 00       	jmp    c0019584 <FAT::tryMount(LogicalDisk*, int)+0x214>
c00193b9:	8d 76 00             	lea    esi,[esi+0x0]
c00193bc:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c00193c4:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c00193cb:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c00193d2:	83 f8 ff             	cmp    eax,0xffffffff
c00193d5:	74 09                	je     c00193e0 <FAT::tryMount(LogicalDisk*, int)+0x70>
c00193d7:	b0 01                	mov    al,0x1
c00193d9:	e9 a6 01 00 00       	jmp    c0019584 <FAT::tryMount(LogicalDisk*, int)+0x214>
c00193de:	66 90                	xchg   ax,ax
c00193e0:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c00193ea:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c00193f2:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c00193f9:	88 c2                	mov    dl,al
c00193fb:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c0019400:	01 d0                	add    eax,edx
c0019402:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c0019409:	8b 15 80 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c780
c001940f:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0019416:	89 14 85 a0 c7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3860],edx
c001941d:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c0019422:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c0019429:	89 14 85 20 c8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd37e0],edx
c0019430:	83 ec 0c             	sub    esp,0xc
c0019433:	68 34 02 00 00       	push   0x234
c0019438:	e8 79 e6 fe ff       	call   c0007ab6 <malloc>
c001943d:	83 c4 10             	add    esp,0x10
c0019440:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c0019447:	83 ec 04             	sub    esp,0x4
c001944a:	6a 00                	push   0x0
c001944c:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0019453:	50                   	push   eax
c0019454:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001945b:	e8 98 a7 fe ff       	call   c0003bf8 <f_mount>
c0019460:	83 c4 10             	add    esp,0x10
c0019463:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c001946a:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c0019472:	74 1c                	je     c0019490 <FAT::tryMount(LogicalDisk*, int)+0x120>
c0019474:	83 ec 0c             	sub    esp,0xc
c0019477:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001947e:	e8 53 e6 fe ff       	call   c0007ad6 <rfree>
c0019483:	83 c4 10             	add    esp,0x10
c0019486:	b0 00                	mov    al,0x0
c0019488:	e9 f7 00 00 00       	jmp    c0019584 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001948d:	8d 76 00             	lea    esi,[esi+0x0]
c0019490:	83 ec 04             	sub    esp,0x4
c0019493:	68 00 01 00 00       	push   0x100
c0019498:	6a 00                	push   0x0
c001949a:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c00194a1:	50                   	push   eax
c00194a2:	e8 49 70 fe ff       	call   c00004f0 <memset>
c00194a7:	83 c4 10             	add    esp,0x10
c00194aa:	83 ec 08             	sub    esp,0x8
c00194ad:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c00194b4:	50                   	push   eax
c00194b5:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c00194bc:	50                   	push   eax
c00194bd:	e8 7e 73 fe ff       	call   c0000840 <strcat>
c00194c2:	83 c4 10             	add    esp,0x10
c00194c5:	83 ec 08             	sub    esp,0x8
c00194c8:	68 b6 2e 02 c0       	push   0xc0022eb6
c00194cd:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c00194d4:	50                   	push   eax
c00194d5:	e8 66 73 fe ff       	call   c0000840 <strcat>
c00194da:	83 c4 10             	add    esp,0x10
c00194dd:	83 ec 04             	sub    esp,0x4
c00194e0:	6a 01                	push   0x1
c00194e2:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c00194e9:	50                   	push   eax
c00194ea:	8d 44 24 14          	lea    eax,[esp+0x14]
c00194ee:	50                   	push   eax
c00194ef:	e8 66 a7 fe ff       	call   c0003c5a <f_open>
c00194f4:	83 c4 10             	add    esp,0x10
c00194f7:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c00194fe:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c0019505:	85 c0                	test   eax,eax
c0019507:	74 0b                	je     c0019514 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c0019509:	78 31                	js     c001953c <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001950b:	83 e8 04             	sub    eax,0x4
c001950e:	83 f8 01             	cmp    eax,0x1
c0019511:	77 29                	ja     c001953c <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0019513:	90                   	nop
c0019514:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c001951c:	83 ec 0c             	sub    esp,0xc
c001951f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019523:	50                   	push   eax
c0019524:	e8 00 af fe ff       	call   c0004429 <f_close>
c0019529:	83 c4 10             	add    esp,0x10
c001952c:	90                   	nop
c001952d:	0f b6 84 24 3f 03 00 00 	movzx  eax,BYTE PTR [esp+0x33f]
c0019535:	85 c0                	test   eax,eax
c0019537:	74 43                	je     c001957c <FAT::tryMount(LogicalDisk*, int)+0x20c>
c0019539:	eb 31                	jmp    c001956c <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c001953b:	90                   	nop
c001953c:	83 ec 0c             	sub    esp,0xc
c001953f:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0019546:	e8 8b e5 fe ff       	call   c0007ad6 <rfree>
c001954b:	83 c4 10             	add    esp,0x10
c001954e:	83 ec 04             	sub    esp,0x4
c0019551:	6a 00                	push   0x0
c0019553:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001955a:	50                   	push   eax
c001955b:	6a 00                	push   0x0
c001955d:	e8 96 a6 fe ff       	call   c0003bf8 <f_mount>
c0019562:	83 c4 10             	add    esp,0x10
c0019565:	b0 00                	mov    al,0x0
c0019567:	eb 1b                	jmp    c0019584 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0019569:	8d 76 00             	lea    esi,[esi+0x0]
c001956c:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c0019571:	83 c0 01             	add    eax,0x1
c0019574:	a3 80 c7 02 c0       	mov    ds:0xc002c780,eax
c0019579:	8d 76 00             	lea    esi,[esi+0x0]
c001957c:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c0019583:	90                   	nop
c0019584:	81 c4 4c 03 00 00    	add    esp,0x34c
c001958a:	c3                   	ret    
c001958b:	90                   	nop

c001958c <FAT::allocateSwapfile(char const*, int)>:
c001958c:	55                   	push   ebp
c001958d:	57                   	push   edi
c001958e:	56                   	push   esi
c001958f:	53                   	push   ebx
c0019590:	81 ec 3c 04 00 00    	sub    esp,0x43c
c0019596:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c00195a1:	83 ec 0c             	sub    esp,0xc
c00195a4:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c00195ab:	e8 06 e5 fe ff       	call   c0007ab6 <malloc>
c00195b0:	83 c4 10             	add    esp,0x10
c00195b3:	89 c7                	mov    edi,eax
c00195b5:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c00195ba:	83 ec 04             	sub    esp,0x4
c00195bd:	50                   	push   eax
c00195be:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c00195c5:	57                   	push   edi
c00195c6:	e8 f7 25 ff ff       	call   c000bbc2 <File::File(char const*, Process*)>
c00195cb:	83 c4 10             	add    esp,0x10
c00195ce:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c00195d5:	83 ec 04             	sub    esp,0x4
c00195d8:	8d 44 24 13          	lea    eax,[esp+0x13]
c00195dc:	50                   	push   eax
c00195dd:	8d 44 24 18          	lea    eax,[esp+0x18]
c00195e1:	50                   	push   eax
c00195e2:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00195e9:	e8 f4 28 ff ff       	call   c000bee2 <File::stat(unsigned long long*, bool*)>
c00195ee:	83 c4 10             	add    esp,0x10
c00195f1:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c00195f8:	c1 e0 14             	shl    eax,0x14
c00195fb:	89 c7                	mov    edi,eax
c00195fd:	89 c5                	mov    ebp,eax
c00195ff:	c1 fd 1f             	sar    ebp,0x1f
c0019602:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019606:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001960a:	89 f9                	mov    ecx,edi
c001960c:	31 c1                	xor    ecx,eax
c001960e:	89 cb                	mov    ebx,ecx
c0019610:	89 e9                	mov    ecx,ebp
c0019612:	31 d1                	xor    ecx,edx
c0019614:	89 ce                	mov    esi,ecx
c0019616:	89 f0                	mov    eax,esi
c0019618:	09 d8                	or     eax,ebx
c001961a:	0f 84 9c 00 00 00    	je     c00196bc <FAT::allocateSwapfile(char const*, int)+0x130>
c0019620:	83 ec 0c             	sub    esp,0xc
c0019623:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001962a:	e8 7f 27 ff ff       	call   c000bdae <File::unlink()>
c001962f:	83 c4 10             	add    esp,0x10
c0019632:	83 ec 08             	sub    esp,0x8
c0019635:	6a 12                	push   0x12
c0019637:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001963e:	e8 9d 25 ff ff       	call   c000bbe0 <File::open(FileOpenMode)>
c0019643:	83 c4 10             	add    esp,0x10
c0019646:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001964d:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0019653:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001965a:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0019661:	c1 e0 14             	shl    eax,0x14
c0019664:	83 ec 04             	sub    esp,0x4
c0019667:	6a 01                	push   0x1
c0019669:	50                   	push   eax
c001966a:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c0019671:	e8 3a bc fe ff       	call   c00052b0 <f_expand>
c0019676:	83 c4 10             	add    esp,0x10
c0019679:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0019680:	8b 00                	mov    eax,DWORD PTR [eax]
c0019682:	83 c0 10             	add    eax,0x10
c0019685:	8b 00                	mov    eax,DWORD PTR [eax]
c0019687:	83 ec 0c             	sub    esp,0xc
c001968a:	8d 54 24 24          	lea    edx,[esp+0x24]
c001968e:	52                   	push   edx
c001968f:	8d 54 24 30          	lea    edx,[esp+0x30]
c0019693:	52                   	push   edx
c0019694:	6a 00                	push   0x0
c0019696:	68 00 04 00 00       	push   0x400
c001969b:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c00196a2:	ff d0                	call   eax
c00196a4:	83 c4 20             	add    esp,0x20
c00196a7:	83 ec 0c             	sub    esp,0xc
c00196aa:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00196b1:	e8 88 25 ff ff       	call   c000bc3e <File::close()>
c00196b6:	83 c4 10             	add    esp,0x10
c00196b9:	8d 76 00             	lea    esi,[esi+0x0]
c00196bc:	83 ec 08             	sub    esp,0x8
c00196bf:	6a 01                	push   0x1
c00196c1:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00196c8:	e8 13 25 ff ff       	call   c000bbe0 <File::open(FileOpenMode)>
c00196cd:	83 c4 10             	add    esp,0x10
c00196d0:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c00196d7:	8b 00                	mov    eax,DWORD PTR [eax]
c00196d9:	83 c0 0c             	add    eax,0xc
c00196dc:	8b 00                	mov    eax,DWORD PTR [eax]
c00196de:	83 ec 0c             	sub    esp,0xc
c00196e1:	8d 54 24 24          	lea    edx,[esp+0x24]
c00196e5:	52                   	push   edx
c00196e6:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c00196ea:	52                   	push   edx
c00196eb:	6a 00                	push   0x0
c00196ed:	6a 04                	push   0x4
c00196ef:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c00196f6:	ff d0                	call   eax
c00196f8:	83 c4 20             	add    esp,0x20
c00196fb:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0019702:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0019708:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001970f:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c0019716:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0019719:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c0019720:	83 ec 0c             	sub    esp,0xc
c0019723:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001972a:	e8 0f 25 ff ff       	call   c000bc3e <File::close()>
c001972f:	83 c4 10             	add    esp,0x10
c0019732:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c0019739:	ba 00 00 00 00       	mov    edx,0x0
c001973e:	81 c4 3c 04 00 00    	add    esp,0x43c
c0019744:	5b                   	pop    ebx
c0019745:	5e                   	pop    esi
c0019746:	5f                   	pop    edi
c0019747:	5d                   	pop    ebp
c0019748:	c3                   	ret    
c0019749:	90                   	nop
c001974a:	66 90                	xchg   ax,ax

c001974c <FAT::readDir(void*, unsigned long, void*, int*)>:
c001974c:	57                   	push   edi
c001974d:	56                   	push   esi
c001974e:	53                   	push   ebx
c001974f:	81 ec 50 02 00 00    	sub    esp,0x250
c0019755:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c001975d:	74 0d                	je     c001976c <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c001975f:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c0019767:	75 0f                	jne    c0019778 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c0019769:	8d 76 00             	lea    esi,[esi+0x0]
c001976c:	b8 04 00 00 00       	mov    eax,0x4
c0019771:	e9 3a 01 00 00       	jmp    c00198b0 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c0019776:	66 90                	xchg   ax,ax
c0019778:	83 ec 08             	sub    esp,0x8
c001977b:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0019782:	50                   	push   eax
c0019783:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c001978a:	e8 67 af fe ff       	call   c00046f6 <f_readdir>
c001978f:	83 c4 10             	add    esp,0x10
c0019792:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c0019799:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c00197a0:	83 ec 0c             	sub    esp,0xc
c00197a3:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c00197aa:	83 c0 16             	add    eax,0x16
c00197ad:	50                   	push   eax
c00197ae:	e8 bd 6d fe ff       	call   c0000570 <strlen>
c00197b3:	83 c4 10             	add    esp,0x10
c00197b6:	ba 00 00 00 00       	mov    edx,0x0
c00197bb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00197bf:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00197c3:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c00197ca:	0f b6 c0             	movzx  eax,al
c00197cd:	83 e0 10             	and    eax,0x10
c00197d0:	74 0a                	je     c00197dc <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c00197d2:	b8 02 00 00 00       	mov    eax,0x2
c00197d7:	eb 0b                	jmp    c00197e4 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c00197d9:	8d 76 00             	lea    esi,[esi+0x0]
c00197dc:	b8 01 00 00 00       	mov    eax,0x1
c00197e1:	8d 76 00             	lea    esi,[esi+0x0]
c00197e4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00197e8:	83 ec 08             	sub    esp,0x8
c00197eb:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c00197f2:	83 c0 16             	add    eax,0x16
c00197f5:	50                   	push   eax
c00197f6:	8d 44 24 14          	lea    eax,[esp+0x14]
c00197fa:	83 c0 10             	add    eax,0x10
c00197fd:	50                   	push   eax
c00197fe:	e8 3d 6e fe ff       	call   c0000640 <strcpy>
c0019803:	83 c4 10             	add    esp,0x10
c0019806:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c001980d:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c0019814:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019818:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c001981f:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c0019826:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c001982d:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c0019834:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c001983b:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c0019842:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c0019849:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c0019850:	89 c6                	mov    esi,eax
c0019852:	89 d7                	mov    edi,edx
c0019854:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019856:	89 c8                	mov    eax,ecx
c0019858:	89 fa                	mov    edx,edi
c001985a:	89 f3                	mov    ebx,esi
c001985c:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c0019863:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c001986a:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c0019871:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c0019878:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001987e:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c0019885:	0f be c0             	movsx  eax,al
c0019888:	85 c0                	test   eax,eax
c001988a:	75 08                	jne    c0019894 <FAT::readDir(void*, unsigned long, void*, int*)+0x148>
c001988c:	b8 07 00 00 00       	mov    eax,0x7
c0019891:	eb 1d                	jmp    c00198b0 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c0019893:	90                   	nop
c0019894:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c001989b:	85 c0                	test   eax,eax
c001989d:	75 09                	jne    c00198a8 <FAT::readDir(void*, unsigned long, void*, int*)+0x15c>
c001989f:	b8 00 00 00 00       	mov    eax,0x0
c00198a4:	eb 0a                	jmp    c00198b0 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c00198a6:	66 90                	xchg   ax,ax
c00198a8:	b8 01 00 00 00       	mov    eax,0x1
c00198ad:	8d 76 00             	lea    esi,[esi+0x0]
c00198b0:	81 c4 50 02 00 00    	add    esp,0x250
c00198b6:	5b                   	pop    ebx
c00198b7:	5e                   	pop    esi
c00198b8:	5f                   	pop    edi
c00198b9:	c3                   	ret    
c00198ba:	66 90                	xchg   ax,ax

c00198bc <FAT::read(void*, unsigned long, void*, int*)>:
c00198bc:	83 ec 1c             	sub    esp,0x1c
c00198bf:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00198c4:	74 0a                	je     c00198d0 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c00198c6:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00198cb:	75 0b                	jne    c00198d8 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c00198cd:	8d 76 00             	lea    esi,[esi+0x0]
c00198d0:	b8 04 00 00 00       	mov    eax,0x4
c00198d5:	eb 41                	jmp    c0019918 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c00198d7:	90                   	nop
c00198d8:	8d 44 24 08          	lea    eax,[esp+0x8]
c00198dc:	50                   	push   eax
c00198dd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00198e1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00198e5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00198e9:	e8 2f a6 fe ff       	call   c0003f1d <f_read>
c00198ee:	83 c4 10             	add    esp,0x10
c00198f1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00198f5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00198f9:	89 c2                	mov    edx,eax
c00198fb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00198ff:	89 10                	mov    DWORD PTR [eax],edx
c0019901:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019905:	85 c0                	test   eax,eax
c0019907:	75 07                	jne    c0019910 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c0019909:	b8 00 00 00 00       	mov    eax,0x0
c001990e:	eb 08                	jmp    c0019918 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0019910:	b8 01 00 00 00       	mov    eax,0x1
c0019915:	8d 76 00             	lea    esi,[esi+0x0]
c0019918:	83 c4 1c             	add    esp,0x1c
c001991b:	c3                   	ret    

c001991c <FAT::write(void*, unsigned long, void*, int*)>:
c001991c:	83 ec 1c             	sub    esp,0x1c
c001991f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0019924:	74 0a                	je     c0019930 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c0019926:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001992b:	75 0b                	jne    c0019938 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c001992d:	8d 76 00             	lea    esi,[esi+0x0]
c0019930:	b8 04 00 00 00       	mov    eax,0x4
c0019935:	eb 41                	jmp    c0019978 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0019937:	90                   	nop
c0019938:	8d 44 24 08          	lea    eax,[esp+0x8]
c001993c:	50                   	push   eax
c001993d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019941:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0019945:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019949:	e8 ce a7 fe ff       	call   c000411c <f_write>
c001994e:	83 c4 10             	add    esp,0x10
c0019951:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019955:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019959:	89 c2                	mov    edx,eax
c001995b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001995f:	89 10                	mov    DWORD PTR [eax],edx
c0019961:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019965:	85 c0                	test   eax,eax
c0019967:	75 07                	jne    c0019970 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c0019969:	b8 00 00 00 00       	mov    eax,0x0
c001996e:	eb 08                	jmp    c0019978 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0019970:	b8 01 00 00 00       	mov    eax,0x1
c0019975:	8d 76 00             	lea    esi,[esi+0x0]
c0019978:	83 c4 1c             	add    esp,0x1c
c001997b:	c3                   	ret    

c001997c <FAT::close(void*)>:
c001997c:	83 ec 1c             	sub    esp,0x1c
c001997f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0019984:	75 0a                	jne    c0019990 <FAT::close(void*)+0x14>
c0019986:	b8 04 00 00 00       	mov    eax,0x4
c001998b:	eb 3f                	jmp    c00199cc <FAT::close(void*)+0x50>
c001998d:	8d 76 00             	lea    esi,[esi+0x0]
c0019990:	83 ec 0c             	sub    esp,0xc
c0019993:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019997:	e8 8d aa fe ff       	call   c0004429 <f_close>
c001999c:	83 c4 10             	add    esp,0x10
c001999f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00199a3:	83 ec 0c             	sub    esp,0xc
c00199a6:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00199aa:	e8 17 e1 fe ff       	call   c0007ac6 <free>
c00199af:	83 c4 10             	add    esp,0x10
c00199b2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00199b6:	85 c0                	test   eax,eax
c00199b8:	75 0a                	jne    c00199c4 <FAT::close(void*)+0x48>
c00199ba:	b8 00 00 00 00       	mov    eax,0x0
c00199bf:	eb 0b                	jmp    c00199cc <FAT::close(void*)+0x50>
c00199c1:	8d 76 00             	lea    esi,[esi+0x0]
c00199c4:	b8 01 00 00 00       	mov    eax,0x1
c00199c9:	8d 76 00             	lea    esi,[esi+0x0]
c00199cc:	83 c4 1c             	add    esp,0x1c
c00199cf:	c3                   	ret    

c00199d0 <FAT::closeDir(void*)>:
c00199d0:	83 ec 1c             	sub    esp,0x1c
c00199d3:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00199d8:	75 0a                	jne    c00199e4 <FAT::closeDir(void*)+0x14>
c00199da:	b8 04 00 00 00       	mov    eax,0x4
c00199df:	eb 3f                	jmp    c0019a20 <FAT::closeDir(void*)+0x50>
c00199e1:	8d 76 00             	lea    esi,[esi+0x0]
c00199e4:	83 ec 0c             	sub    esp,0xc
c00199e7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00199eb:	e8 e4 ac fe ff       	call   c00046d4 <f_closedir>
c00199f0:	83 c4 10             	add    esp,0x10
c00199f3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00199f7:	83 ec 0c             	sub    esp,0xc
c00199fa:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00199fe:	e8 c3 e0 fe ff       	call   c0007ac6 <free>
c0019a03:	83 c4 10             	add    esp,0x10
c0019a06:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019a0a:	85 c0                	test   eax,eax
c0019a0c:	75 0a                	jne    c0019a18 <FAT::closeDir(void*)+0x48>
c0019a0e:	b8 00 00 00 00       	mov    eax,0x0
c0019a13:	eb 0b                	jmp    c0019a20 <FAT::closeDir(void*)+0x50>
c0019a15:	8d 76 00             	lea    esi,[esi+0x0]
c0019a18:	b8 01 00 00 00       	mov    eax,0x1
c0019a1d:	8d 76 00             	lea    esi,[esi+0x0]
c0019a20:	83 c4 1c             	add    esp,0x1c
c0019a23:	c3                   	ret    

c0019a24 <FAT::truncate(void*, unsigned long long)>:
c0019a24:	83 ec 2c             	sub    esp,0x2c
c0019a27:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019a2b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019a2f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019a33:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019a37:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0019a3c:	75 0a                	jne    c0019a48 <FAT::truncate(void*, unsigned long long)+0x24>
c0019a3e:	b8 04 00 00 00       	mov    eax,0x4
c0019a43:	eb 47                	jmp    c0019a8c <FAT::truncate(void*, unsigned long long)+0x68>
c0019a45:	8d 76 00             	lea    esi,[esi+0x0]
c0019a48:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019a4c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0019a4f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019a53:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0019a5b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019a5f:	83 ec 08             	sub    esp,0x8
c0019a62:	50                   	push   eax
c0019a63:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0019a67:	e8 ec a9 fe ff       	call   c0004458 <f_lseek>
c0019a6c:	83 c4 10             	add    esp,0x10
c0019a6f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019a73:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019a77:	85 c0                	test   eax,eax
c0019a79:	75 09                	jne    c0019a84 <FAT::truncate(void*, unsigned long long)+0x60>
c0019a7b:	b8 00 00 00 00       	mov    eax,0x0
c0019a80:	eb 0a                	jmp    c0019a8c <FAT::truncate(void*, unsigned long long)+0x68>
c0019a82:	66 90                	xchg   ax,ax
c0019a84:	b8 01 00 00 00       	mov    eax,0x1
c0019a89:	8d 76 00             	lea    esi,[esi+0x0]
c0019a8c:	83 c4 2c             	add    esp,0x2c
c0019a8f:	c3                   	ret    

c0019a90 <FAT::seek(void*, unsigned long long)>:
c0019a90:	83 ec 2c             	sub    esp,0x2c
c0019a93:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019a97:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019a9b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019a9f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019aa3:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0019aa8:	75 0a                	jne    c0019ab4 <FAT::seek(void*, unsigned long long)+0x24>
c0019aaa:	b8 04 00 00 00       	mov    eax,0x4
c0019aaf:	eb 33                	jmp    c0019ae4 <FAT::seek(void*, unsigned long long)+0x54>
c0019ab1:	8d 76 00             	lea    esi,[esi+0x0]
c0019ab4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019ab8:	83 ec 08             	sub    esp,0x8
c0019abb:	50                   	push   eax
c0019abc:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0019ac0:	e8 93 a9 fe ff       	call   c0004458 <f_lseek>
c0019ac5:	83 c4 10             	add    esp,0x10
c0019ac8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019acc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019ad0:	85 c0                	test   eax,eax
c0019ad2:	75 08                	jne    c0019adc <FAT::seek(void*, unsigned long long)+0x4c>
c0019ad4:	b8 00 00 00 00       	mov    eax,0x0
c0019ad9:	eb 09                	jmp    c0019ae4 <FAT::seek(void*, unsigned long long)+0x54>
c0019adb:	90                   	nop
c0019adc:	b8 01 00 00 00       	mov    eax,0x1
c0019ae1:	8d 76 00             	lea    esi,[esi+0x0]
c0019ae4:	83 c4 2c             	add    esp,0x2c
c0019ae7:	c3                   	ret    

c0019ae8 <fatWrapperReadDisk>:
c0019ae8:	53                   	push   ebx
c0019ae9:	83 ec 18             	sub    esp,0x18
c0019aec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019af0:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019af4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019af9:	8b 0c 85 80 b8 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd4780]
c0019b00:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0019b04:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019b08:	ba 00 00 00 00       	mov    edx,0x0
c0019b0d:	83 ec 0c             	sub    esp,0xc
c0019b10:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019b14:	53                   	push   ebx
c0019b15:	52                   	push   edx
c0019b16:	50                   	push   eax
c0019b17:	51                   	push   ecx
c0019b18:	e8 ff 42 ff ff       	call   c000de1c <LogicalDisk::read(unsigned long long, int, void*)>
c0019b1d:	83 c4 20             	add    esp,0x20
c0019b20:	83 c4 18             	add    esp,0x18
c0019b23:	5b                   	pop    ebx
c0019b24:	c3                   	ret    
c0019b25:	8d 76 00             	lea    esi,[esi+0x0]

c0019b28 <fatWrapperWriteDisk>:
c0019b28:	53                   	push   ebx
c0019b29:	83 ec 18             	sub    esp,0x18
c0019b2c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019b30:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019b34:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019b39:	8b 0c 85 80 b8 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd4780]
c0019b40:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0019b44:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019b48:	ba 00 00 00 00       	mov    edx,0x0
c0019b4d:	83 ec 0c             	sub    esp,0xc
c0019b50:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019b54:	53                   	push   ebx
c0019b55:	52                   	push   edx
c0019b56:	50                   	push   eax
c0019b57:	51                   	push   ecx
c0019b58:	e8 2b 43 ff ff       	call   c000de88 <LogicalDisk::write(unsigned long long, int, void*)>
c0019b5d:	83 c4 20             	add    esp,0x20
c0019b60:	83 c4 18             	add    esp,0x18
c0019b63:	5b                   	pop    ebx
c0019b64:	c3                   	ret    
c0019b65:	8d 76 00             	lea    esi,[esi+0x0]

c0019b68 <fatWrapperIoctl>:
c0019b68:	53                   	push   ebx
c0019b69:	83 ec 28             	sub    esp,0x28
c0019b6c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0019b70:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019b74:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0019b78:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0019b7c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019b81:	83 f8 02             	cmp    eax,0x2
c0019b84:	75 32                	jne    c0019bb8 <fatWrapperIoctl+0x50>
c0019b86:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019b8a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019b8e:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019b93:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c0019b9a:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0019ba0:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0019ba6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019baa:	66 89 02             	mov    WORD PTR [edx],ax
c0019bad:	b8 00 00 00 00       	mov    eax,0x0
c0019bb2:	e9 c5 00 00 00       	jmp    c0019c7c <fatWrapperIoctl+0x114>
c0019bb7:	90                   	nop
c0019bb8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019bbd:	83 f8 01             	cmp    eax,0x1
c0019bc0:	75 6a                	jne    c0019c2c <fatWrapperIoctl+0xc4>
c0019bc2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019bc6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019bca:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019bcf:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c0019bd6:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0019bdc:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0019be2:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0019be8:	89 c8                	mov    eax,ecx
c0019bea:	89 da                	mov    edx,ebx
c0019bec:	0f a4 c2 0a          	shld   edx,eax,0xa
c0019bf0:	c1 e0 0a             	shl    eax,0xa
c0019bf3:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0019bf8:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c0019bff:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0019c05:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0019c0b:	89 cb                	mov    ebx,ecx
c0019c0d:	c1 fb 1f             	sar    ebx,0x1f
c0019c10:	53                   	push   ebx
c0019c11:	51                   	push   ecx
c0019c12:	52                   	push   edx
c0019c13:	50                   	push   eax
c0019c14:	e8 77 5b 00 00       	call   c001f790 <__udivdi3>
c0019c19:	83 c4 10             	add    esp,0x10
c0019c1c:	89 c2                	mov    edx,eax
c0019c1e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019c22:	89 10                	mov    DWORD PTR [eax],edx
c0019c24:	b8 00 00 00 00       	mov    eax,0x0
c0019c29:	eb 51                	jmp    c0019c7c <fatWrapperIoctl+0x114>
c0019c2b:	90                   	nop
c0019c2c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019c31:	85 c0                	test   eax,eax
c0019c33:	75 07                	jne    c0019c3c <fatWrapperIoctl+0xd4>
c0019c35:	b8 00 00 00 00       	mov    eax,0x0
c0019c3a:	eb 40                	jmp    c0019c7c <fatWrapperIoctl+0x114>
c0019c3c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019c41:	83 f8 03             	cmp    eax,0x3
c0019c44:	75 1a                	jne    c0019c60 <fatWrapperIoctl+0xf8>
c0019c46:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019c4a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019c4e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019c52:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0019c58:	b8 00 00 00 00       	mov    eax,0x0
c0019c5d:	eb 1d                	jmp    c0019c7c <fatWrapperIoctl+0x114>
c0019c5f:	90                   	nop
c0019c60:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019c65:	83 f8 04             	cmp    eax,0x4
c0019c68:	75 0a                	jne    c0019c74 <fatWrapperIoctl+0x10c>
c0019c6a:	b8 00 00 00 00       	mov    eax,0x0
c0019c6f:	eb 0b                	jmp    c0019c7c <fatWrapperIoctl+0x114>
c0019c71:	8d 76 00             	lea    esi,[esi+0x0]
c0019c74:	b8 04 00 00 00       	mov    eax,0x4
c0019c79:	8d 76 00             	lea    esi,[esi+0x0]
c0019c7c:	83 c4 28             	add    esp,0x28
c0019c7f:	5b                   	pop    ebx
c0019c80:	c3                   	ret    
c0019c81:	90                   	nop
c0019c82:	66 90                	xchg   ax,ax

c0019c84 <FAT::FAT()>:
c0019c84:	83 ec 1c             	sub    esp,0x1c
c0019c87:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019c8b:	83 ec 0c             	sub    esp,0xc
c0019c8e:	50                   	push   eax
c0019c8f:	e8 9c 1b ff ff       	call   c000b830 <Filesystem::Filesystem()>
c0019c94:	83 c4 10             	add    esp,0x10
c0019c97:	ba cc 2e 02 c0       	mov    edx,0xc0022ecc
c0019c9c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019ca0:	89 10                	mov    DWORD PTR [eax],edx
c0019ca2:	c7 05 80 c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c780,0x0
c0019cac:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0019cb4:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0019cb9:	7f 19                	jg     c0019cd4 <FAT::FAT()+0x50>
c0019cbb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019cbf:	c7 04 85 a0 c7 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd3860],0xffffffff
c0019cca:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0019ccf:	eb e3                	jmp    c0019cb4 <FAT::FAT()+0x30>
c0019cd1:	8d 76 00             	lea    esi,[esi+0x0]
c0019cd4:	90                   	nop
c0019cd5:	83 c4 1c             	add    esp,0x1c
c0019cd8:	c3                   	ret    
c0019cd9:	90                   	nop
c0019cda:	66 90                	xchg   ax,ax

c0019cdc <FAT::fixFilepath(char*)>:
c0019cdc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019ce0:	8a 00                	mov    al,BYTE PTR [eax]
c0019ce2:	0f be c0             	movsx  eax,al
c0019ce5:	83 f8 40             	cmp    eax,0x40
c0019ce8:	7e 2e                	jle    c0019d18 <FAT::fixFilepath(char*)+0x3c>
c0019cea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019cee:	8a 00                	mov    al,BYTE PTR [eax]
c0019cf0:	83 e8 41             	sub    eax,0x41
c0019cf3:	88 c2                	mov    dl,al
c0019cf5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019cf9:	88 10                	mov    BYTE PTR [eax],dl
c0019cfb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019cff:	8a 00                	mov    al,BYTE PTR [eax]
c0019d01:	0f be c0             	movsx  eax,al
c0019d04:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c0019d0b:	83 c0 30             	add    eax,0x30
c0019d0e:	88 c2                	mov    dl,al
c0019d10:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019d14:	88 10                	mov    BYTE PTR [eax],dl
c0019d16:	66 90                	xchg   ax,ax
c0019d18:	90                   	nop
c0019d19:	c3                   	ret    
c0019d1a:	66 90                	xchg   ax,ax

c0019d1c <FAT::open(char const*, void**, FileOpenMode)>:
c0019d1c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019d22:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019d2a:	74 0c                	je     c0019d38 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c0019d2c:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0019d34:	75 0e                	jne    c0019d44 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c0019d36:	66 90                	xchg   ax,ax
c0019d38:	b8 04 00 00 00       	mov    eax,0x4
c0019d3d:	e9 46 01 00 00       	jmp    c0019e88 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c0019d42:	66 90                	xchg   ax,ax
c0019d44:	83 ec 08             	sub    esp,0x8
c0019d47:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019d4e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019d52:	50                   	push   eax
c0019d53:	e8 e8 68 fe ff       	call   c0000640 <strcpy>
c0019d58:	83 c4 10             	add    esp,0x10
c0019d5b:	83 ec 08             	sub    esp,0x8
c0019d5e:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019d62:	50                   	push   eax
c0019d63:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019d6a:	e8 6d ff ff ff       	call   c0019cdc <FAT::fixFilepath(char*)>
c0019d6f:	83 c4 10             	add    esp,0x10
c0019d72:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0019d7a:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019d81:	83 e0 01             	and    eax,0x1
c0019d84:	74 12                	je     c0019d98 <FAT::open(char const*, void**, FileOpenMode)+0x7c>
c0019d86:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019d8d:	83 c8 01             	or     eax,0x1
c0019d90:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019d97:	90                   	nop
c0019d98:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019d9f:	83 e0 04             	and    eax,0x4
c0019da2:	74 24                	je     c0019dc8 <FAT::open(char const*, void**, FileOpenMode)+0xac>
c0019da4:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019dab:	83 c8 30             	or     eax,0x30
c0019dae:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019db5:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019dbc:	83 c8 02             	or     eax,0x2
c0019dbf:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019dc6:	66 90                	xchg   ax,ax
c0019dc8:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019dcf:	83 e0 02             	and    eax,0x2
c0019dd2:	74 14                	je     c0019de8 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c0019dd4:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019ddb:	83 c8 02             	or     eax,0x2
c0019dde:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019de5:	8d 76 00             	lea    esi,[esi+0x0]
c0019de8:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019def:	83 e0 08             	and    eax,0x8
c0019df2:	74 14                	je     c0019e08 <FAT::open(char const*, void**, FileOpenMode)+0xec>
c0019df4:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019dfb:	83 c8 04             	or     eax,0x4
c0019dfe:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019e05:	8d 76 00             	lea    esi,[esi+0x0]
c0019e08:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019e0f:	83 e0 10             	and    eax,0x10
c0019e12:	74 14                	je     c0019e28 <FAT::open(char const*, void**, FileOpenMode)+0x10c>
c0019e14:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019e1b:	83 c8 08             	or     eax,0x8
c0019e1e:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019e25:	8d 76 00             	lea    esi,[esi+0x0]
c0019e28:	83 ec 0c             	sub    esp,0xc
c0019e2b:	68 28 02 00 00       	push   0x228
c0019e30:	e8 81 dc fe ff       	call   c0007ab6 <malloc>
c0019e35:	83 c4 10             	add    esp,0x10
c0019e38:	89 c2                	mov    edx,eax
c0019e3a:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019e41:	89 10                	mov    DWORD PTR [eax],edx
c0019e43:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c0019e4b:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019e52:	8b 00                	mov    eax,DWORD PTR [eax]
c0019e54:	83 ec 04             	sub    esp,0x4
c0019e57:	52                   	push   edx
c0019e58:	8d 54 24 10          	lea    edx,[esp+0x10]
c0019e5c:	52                   	push   edx
c0019e5d:	50                   	push   eax
c0019e5e:	e8 f7 9d fe ff       	call   c0003c5a <f_open>
c0019e63:	83 c4 10             	add    esp,0x10
c0019e66:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0019e6d:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0019e75:	74 09                	je     c0019e80 <FAT::open(char const*, void**, FileOpenMode)+0x164>
c0019e77:	b8 01 00 00 00       	mov    eax,0x1
c0019e7c:	eb 0a                	jmp    c0019e88 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c0019e7e:	66 90                	xchg   ax,ax
c0019e80:	b8 00 00 00 00       	mov    eax,0x0
c0019e85:	8d 76 00             	lea    esi,[esi+0x0]
c0019e88:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019e8e:	c3                   	ret    
c0019e8f:	90                   	nop

c0019e90 <FAT::openDir(char const*, void**)>:
c0019e90:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019e96:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019e9e:	74 0c                	je     c0019eac <FAT::openDir(char const*, void**)+0x1c>
c0019ea0:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0019ea8:	75 0e                	jne    c0019eb8 <FAT::openDir(char const*, void**)+0x28>
c0019eaa:	66 90                	xchg   ax,ax
c0019eac:	b8 04 00 00 00       	mov    eax,0x4
c0019eb1:	e9 82 00 00 00       	jmp    c0019f38 <FAT::openDir(char const*, void**)+0xa8>
c0019eb6:	66 90                	xchg   ax,ax
c0019eb8:	83 ec 08             	sub    esp,0x8
c0019ebb:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019ec2:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019ec6:	50                   	push   eax
c0019ec7:	e8 74 67 fe ff       	call   c0000640 <strcpy>
c0019ecc:	83 c4 10             	add    esp,0x10
c0019ecf:	83 ec 08             	sub    esp,0x8
c0019ed2:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019ed6:	50                   	push   eax
c0019ed7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019ede:	e8 f9 fd ff ff       	call   c0019cdc <FAT::fixFilepath(char*)>
c0019ee3:	83 c4 10             	add    esp,0x10
c0019ee6:	83 ec 0c             	sub    esp,0xc
c0019ee9:	6a 30                	push   0x30
c0019eeb:	e8 c6 db fe ff       	call   c0007ab6 <malloc>
c0019ef0:	83 c4 10             	add    esp,0x10
c0019ef3:	89 c2                	mov    edx,eax
c0019ef5:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019efc:	89 10                	mov    DWORD PTR [eax],edx
c0019efe:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019f05:	8b 00                	mov    eax,DWORD PTR [eax]
c0019f07:	83 ec 08             	sub    esp,0x8
c0019f0a:	8d 54 24 14          	lea    edx,[esp+0x14]
c0019f0e:	52                   	push   edx
c0019f0f:	50                   	push   eax
c0019f10:	e8 f4 a6 fe ff       	call   c0004609 <f_opendir>
c0019f15:	83 c4 10             	add    esp,0x10
c0019f18:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0019f1f:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0019f27:	74 07                	je     c0019f30 <FAT::openDir(char const*, void**)+0xa0>
c0019f29:	b8 01 00 00 00       	mov    eax,0x1
c0019f2e:	eb 08                	jmp    c0019f38 <FAT::openDir(char const*, void**)+0xa8>
c0019f30:	b8 00 00 00 00       	mov    eax,0x0
c0019f35:	8d 76 00             	lea    esi,[esi+0x0]
c0019f38:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019f3e:	c3                   	ret    
c0019f3f:	90                   	nop

c0019f40 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0019f40:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0019f46:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0019f4e:	75 0c                	jne    c0019f5c <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c0019f50:	b8 04 00 00 00       	mov    eax,0x4
c0019f55:	e9 d6 00 00 00       	jmp    c001a030 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019f5a:	66 90                	xchg   ax,ax
c0019f5c:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0019f64:	75 0a                	jne    c0019f70 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c0019f66:	b8 04 00 00 00       	mov    eax,0x4
c0019f6b:	e9 c0 00 00 00       	jmp    c001a030 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019f70:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0019f78:	75 0a                	jne    c0019f84 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c0019f7a:	b8 04 00 00 00       	mov    eax,0x4
c0019f7f:	e9 ac 00 00 00       	jmp    c001a030 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019f84:	83 ec 08             	sub    esp,0x8
c0019f87:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019f8e:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0019f95:	50                   	push   eax
c0019f96:	e8 a5 66 fe ff       	call   c0000640 <strcpy>
c0019f9b:	83 c4 10             	add    esp,0x10
c0019f9e:	83 ec 08             	sub    esp,0x8
c0019fa1:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0019fa8:	50                   	push   eax
c0019fa9:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019fb0:	e8 27 fd ff ff       	call   c0019cdc <FAT::fixFilepath(char*)>
c0019fb5:	83 c4 10             	add    esp,0x10
c0019fb8:	83 ec 08             	sub    esp,0x8
c0019fbb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019fbf:	50                   	push   eax
c0019fc0:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0019fc7:	50                   	push   eax
c0019fc8:	e8 bb a7 fe ff       	call   c0004788 <f_stat>
c0019fcd:	83 c4 10             	add    esp,0x10
c0019fd0:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0019fd7:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0019fde:	85 c0                	test   eax,eax
c0019fe0:	74 0a                	je     c0019fec <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c0019fe2:	83 f8 04             	cmp    eax,0x4
c0019fe5:	74 39                	je     c001a020 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c0019fe7:	eb 3f                	jmp    c001a028 <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c0019fe9:	8d 76 00             	lea    esi,[esi+0x0]
c0019fec:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0019ff0:	0f b6 c0             	movzx  eax,al
c0019ff3:	83 e0 10             	and    eax,0x10
c0019ff6:	0f 95 c2             	setne  dl
c0019ff9:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c001a000:	88 10                	mov    BYTE PTR [eax],dl
c001a002:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a006:	ba 00 00 00 00       	mov    edx,0x0
c001a00b:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c001a012:	89 01                	mov    DWORD PTR [ecx],eax
c001a014:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001a017:	b8 00 00 00 00       	mov    eax,0x0
c001a01c:	eb 12                	jmp    c001a030 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001a01e:	66 90                	xchg   ax,ax
c001a020:	b8 02 00 00 00       	mov    eax,0x2
c001a025:	eb 09                	jmp    c001a030 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001a027:	90                   	nop
c001a028:	b8 01 00 00 00       	mov    eax,0x1
c001a02d:	8d 76 00             	lea    esi,[esi+0x0]
c001a030:	81 c4 2c 02 00 00    	add    esp,0x22c
c001a036:	c3                   	ret    
c001a037:	90                   	nop

c001a038 <FAT::unlink(char const*)>:
c001a038:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a03e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001a046:	75 08                	jne    c001a050 <FAT::unlink(char const*)+0x18>
c001a048:	b8 04 00 00 00       	mov    eax,0x4
c001a04d:	eb 61                	jmp    c001a0b0 <FAT::unlink(char const*)+0x78>
c001a04f:	90                   	nop
c001a050:	83 ec 08             	sub    esp,0x8
c001a053:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a05a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a05e:	50                   	push   eax
c001a05f:	e8 dc 65 fe ff       	call   c0000640 <strcpy>
c001a064:	83 c4 10             	add    esp,0x10
c001a067:	83 ec 08             	sub    esp,0x8
c001a06a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a06e:	50                   	push   eax
c001a06f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a076:	e8 61 fc ff ff       	call   c0019cdc <FAT::fixFilepath(char*)>
c001a07b:	83 c4 10             	add    esp,0x10
c001a07e:	83 ec 0c             	sub    esp,0xc
c001a081:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a085:	50                   	push   eax
c001a086:	e8 6f a9 fe ff       	call   c00049fa <f_unlink>
c001a08b:	83 c4 10             	add    esp,0x10
c001a08e:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001a095:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001a09c:	85 c0                	test   eax,eax
c001a09e:	75 08                	jne    c001a0a8 <FAT::unlink(char const*)+0x70>
c001a0a0:	b8 00 00 00 00       	mov    eax,0x0
c001a0a5:	eb 09                	jmp    c001a0b0 <FAT::unlink(char const*)+0x78>
c001a0a7:	90                   	nop
c001a0a8:	b8 01 00 00 00       	mov    eax,0x1
c001a0ad:	8d 76 00             	lea    esi,[esi+0x0]
c001a0b0:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a0b6:	c3                   	ret    
c001a0b7:	90                   	nop

c001a0b8 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c001a0b8:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001a0be:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c001a0c5:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c001a0cc:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001a0d0:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001a0d4:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001a0dc:	75 0a                	jne    c001a0e8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c001a0de:	b8 04 00 00 00       	mov    eax,0x4
c001a0e3:	e9 7c 01 00 00       	jmp    c001a264 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1ac>
c001a0e8:	83 ec 08             	sub    esp,0x8
c001a0eb:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001a0f2:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a0f6:	50                   	push   eax
c001a0f7:	e8 44 65 fe ff       	call   c0000640 <strcpy>
c001a0fc:	83 c4 10             	add    esp,0x10
c001a0ff:	83 ec 08             	sub    esp,0x8
c001a102:	8d 44 24 20          	lea    eax,[esp+0x20]
c001a106:	50                   	push   eax
c001a107:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001a10e:	e8 c9 fb ff ff       	call   c0019cdc <FAT::fixFilepath(char*)>
c001a113:	83 c4 10             	add    esp,0x10
c001a116:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001a11e:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001a126:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a12b:	83 e0 01             	and    eax,0x1
c001a12e:	74 14                	je     c001a144 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x8c>
c001a130:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a137:	83 c8 01             	or     eax,0x1
c001a13a:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001a141:	8d 76 00             	lea    esi,[esi+0x0]
c001a144:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a149:	83 e0 02             	and    eax,0x2
c001a14c:	74 12                	je     c001a160 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa8>
c001a14e:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a155:	83 c8 20             	or     eax,0x20
c001a158:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001a15f:	90                   	nop
c001a160:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a165:	83 e0 04             	and    eax,0x4
c001a168:	74 12                	je     c001a17c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc4>
c001a16a:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a171:	83 c8 04             	or     eax,0x4
c001a174:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001a17b:	90                   	nop
c001a17c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a181:	83 e0 08             	and    eax,0x8
c001a184:	74 12                	je     c001a198 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe0>
c001a186:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a18d:	83 c8 02             	or     eax,0x2
c001a190:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001a197:	90                   	nop
c001a198:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a19d:	83 e0 01             	and    eax,0x1
c001a1a0:	74 12                	je     c001a1b4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfc>
c001a1a2:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001a1a9:	83 c8 01             	or     eax,0x1
c001a1ac:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a1b3:	90                   	nop
c001a1b4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a1b9:	83 e0 02             	and    eax,0x2
c001a1bc:	74 12                	je     c001a1d0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x118>
c001a1be:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001a1c5:	83 c8 20             	or     eax,0x20
c001a1c8:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a1cf:	90                   	nop
c001a1d0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a1d5:	83 e0 04             	and    eax,0x4
c001a1d8:	74 12                	je     c001a1ec <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x134>
c001a1da:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001a1e1:	83 c8 04             	or     eax,0x4
c001a1e4:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a1eb:	90                   	nop
c001a1ec:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a1f1:	83 e0 08             	and    eax,0x8
c001a1f4:	74 12                	je     c001a208 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x150>
c001a1f6:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001a1fd:	83 c8 02             	or     eax,0x2
c001a200:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a207:	90                   	nop
c001a208:	8a 94 24 1e 01 00 00 	mov    dl,BYTE PTR [esp+0x11e]
c001a20f:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a216:	09 d0                	or     eax,edx
c001a218:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a21f:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c001a227:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c001a22f:	83 ec 04             	sub    esp,0x4
c001a232:	52                   	push   edx
c001a233:	50                   	push   eax
c001a234:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a238:	50                   	push   eax
c001a239:	e8 31 ac fe ff       	call   c0004e6f <f_chmod>
c001a23e:	83 c4 10             	add    esp,0x10
c001a241:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001a248:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001a24f:	85 c0                	test   eax,eax
c001a251:	75 09                	jne    c001a25c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1a4>
c001a253:	b8 00 00 00 00       	mov    eax,0x0
c001a258:	eb 0a                	jmp    c001a264 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1ac>
c001a25a:	66 90                	xchg   ax,ax
c001a25c:	b8 01 00 00 00       	mov    eax,0x1
c001a261:	8d 76 00             	lea    esi,[esi+0x0]
c001a264:	81 c4 2c 01 00 00    	add    esp,0x12c
c001a26a:	c3                   	ret    
c001a26b:	90                   	nop

c001a26c <FAT::rename(char const*, char const*)>:
c001a26c:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001a272:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001a27a:	74 0c                	je     c001a288 <FAT::rename(char const*, char const*)+0x1c>
c001a27c:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001a284:	75 0e                	jne    c001a294 <FAT::rename(char const*, char const*)+0x28>
c001a286:	66 90                	xchg   ax,ax
c001a288:	b8 04 00 00 00       	mov    eax,0x4
c001a28d:	e9 9e 00 00 00       	jmp    c001a330 <FAT::rename(char const*, char const*)+0xc4>
c001a292:	66 90                	xchg   ax,ax
c001a294:	83 ec 08             	sub    esp,0x8
c001a297:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001a29e:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001a2a5:	50                   	push   eax
c001a2a6:	e8 95 63 fe ff       	call   c0000640 <strcpy>
c001a2ab:	83 c4 10             	add    esp,0x10
c001a2ae:	83 ec 08             	sub    esp,0x8
c001a2b1:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001a2b8:	50                   	push   eax
c001a2b9:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001a2c0:	e8 17 fa ff ff       	call   c0019cdc <FAT::fixFilepath(char*)>
c001a2c5:	83 c4 10             	add    esp,0x10
c001a2c8:	83 ec 08             	sub    esp,0x8
c001a2cb:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001a2d2:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a2d6:	50                   	push   eax
c001a2d7:	e8 64 63 fe ff       	call   c0000640 <strcpy>
c001a2dc:	83 c4 10             	add    esp,0x10
c001a2df:	83 ec 08             	sub    esp,0x8
c001a2e2:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a2e6:	50                   	push   eax
c001a2e7:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001a2ee:	e8 e9 f9 ff ff       	call   c0019cdc <FAT::fixFilepath(char*)>
c001a2f3:	83 c4 10             	add    esp,0x10
c001a2f6:	83 ec 08             	sub    esp,0x8
c001a2f9:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a2fd:	50                   	push   eax
c001a2fe:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001a305:	50                   	push   eax
c001a306:	e8 ac a9 fe ff       	call   c0004cb7 <f_rename>
c001a30b:	83 c4 10             	add    esp,0x10
c001a30e:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001a315:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001a31c:	85 c0                	test   eax,eax
c001a31e:	75 08                	jne    c001a328 <FAT::rename(char const*, char const*)+0xbc>
c001a320:	b8 00 00 00 00       	mov    eax,0x0
c001a325:	eb 09                	jmp    c001a330 <FAT::rename(char const*, char const*)+0xc4>
c001a327:	90                   	nop
c001a328:	b8 01 00 00 00       	mov    eax,0x1
c001a32d:	8d 76 00             	lea    esi,[esi+0x0]
c001a330:	81 c4 1c 02 00 00    	add    esp,0x21c
c001a336:	c3                   	ret    
c001a337:	90                   	nop

c001a338 <FAT::mkdir(char const*)>:
c001a338:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a33e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001a346:	75 08                	jne    c001a350 <FAT::mkdir(char const*)+0x18>
c001a348:	b8 04 00 00 00       	mov    eax,0x4
c001a34d:	eb 61                	jmp    c001a3b0 <FAT::mkdir(char const*)+0x78>
c001a34f:	90                   	nop
c001a350:	83 ec 08             	sub    esp,0x8
c001a353:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a35a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a35e:	50                   	push   eax
c001a35f:	e8 dc 62 fe ff       	call   c0000640 <strcpy>
c001a364:	83 c4 10             	add    esp,0x10
c001a367:	83 ec 08             	sub    esp,0x8
c001a36a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a36e:	50                   	push   eax
c001a36f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a376:	e8 61 f9 ff ff       	call   c0019cdc <FAT::fixFilepath(char*)>
c001a37b:	83 c4 10             	add    esp,0x10
c001a37e:	83 ec 0c             	sub    esp,0xc
c001a381:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a385:	50                   	push   eax
c001a386:	e8 91 a7 fe ff       	call   c0004b1c <f_mkdir>
c001a38b:	83 c4 10             	add    esp,0x10
c001a38e:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001a395:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001a39c:	85 c0                	test   eax,eax
c001a39e:	75 08                	jne    c001a3a8 <FAT::mkdir(char const*)+0x70>
c001a3a0:	b8 00 00 00 00       	mov    eax,0x0
c001a3a5:	eb 09                	jmp    c001a3b0 <FAT::mkdir(char const*)+0x78>
c001a3a7:	90                   	nop
c001a3a8:	b8 01 00 00 00       	mov    eax,0x1
c001a3ad:	8d 76 00             	lea    esi,[esi+0x0]
c001a3b0:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a3b6:	c3                   	ret    
c001a3b7:	90                   	nop

c001a3b8 <FAT::exists(char const*)>:
c001a3b8:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001a3be:	83 ec 08             	sub    esp,0x8
c001a3c1:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001a3c8:	8d 44 24 10          	lea    eax,[esp+0x10]
c001a3cc:	50                   	push   eax
c001a3cd:	e8 6e 62 fe ff       	call   c0000640 <strcpy>
c001a3d2:	83 c4 10             	add    esp,0x10
c001a3d5:	83 ec 08             	sub    esp,0x8
c001a3d8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001a3dc:	50                   	push   eax
c001a3dd:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001a3e4:	e8 f3 f8 ff ff       	call   c0019cdc <FAT::fixFilepath(char*)>
c001a3e9:	83 c4 10             	add    esp,0x10
c001a3ec:	83 ec 08             	sub    esp,0x8
c001a3ef:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c001a3f6:	50                   	push   eax
c001a3f7:	8d 44 24 10          	lea    eax,[esp+0x10]
c001a3fb:	50                   	push   eax
c001a3fc:	e8 87 a3 fe ff       	call   c0004788 <f_stat>
c001a401:	83 c4 10             	add    esp,0x10
c001a404:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001a40b:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001a412:	85 c0                	test   eax,eax
c001a414:	75 06                	jne    c001a41c <FAT::exists(char const*)+0x64>
c001a416:	b0 01                	mov    al,0x1
c001a418:	eb 06                	jmp    c001a420 <FAT::exists(char const*)+0x68>
c001a41a:	66 90                	xchg   ax,ax
c001a41c:	b0 00                	mov    al,0x0
c001a41e:	66 90                	xchg   ax,ax
c001a420:	81 c4 2c 02 00 00    	add    esp,0x22c
c001a426:	c3                   	ret    
c001a427:	90                   	nop

c001a428 <isoReadDiscSectorHelper>:
c001a428:	83 ec 2c             	sub    esp,0x2c
c001a42b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001a42f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a433:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001a438:	83 e8 41             	sub    eax,0x41
c001a43b:	8b 0c 85 80 b8 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd4780]
c001a442:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a446:	ba 00 00 00 00       	mov    edx,0x0
c001a44b:	83 ec 0c             	sub    esp,0xc
c001a44e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a452:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a456:	52                   	push   edx
c001a457:	50                   	push   eax
c001a458:	51                   	push   ecx
c001a459:	e8 be 39 ff ff       	call   c000de1c <LogicalDisk::read(unsigned long long, int, void*)>
c001a45e:	83 c4 20             	add    esp,0x20
c001a461:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a465:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001a46a:	74 0c                	je     c001a478 <isoReadDiscSectorHelper+0x50>
c001a46c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a470:	c1 e0 0b             	shl    eax,0xb
c001a473:	eb 0b                	jmp    c001a480 <isoReadDiscSectorHelper+0x58>
c001a475:	8d 76 00             	lea    esi,[esi+0x0]
c001a478:	b8 00 00 00 00       	mov    eax,0x0
c001a47d:	8d 76 00             	lea    esi,[esi+0x0]
c001a480:	83 c4 2c             	add    esp,0x2c
c001a483:	c3                   	ret    

c001a484 <iso_kprintf>:
c001a484:	83 ec 0c             	sub    esp,0xc
c001a487:	83 ec 08             	sub    esp,0x8
c001a48a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a48e:	68 7a 2c 02 c0       	push   0xc0022c7a
c001a493:	e8 ad 04 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a498:	83 c4 10             	add    esp,0x10
c001a49b:	90                   	nop
c001a49c:	83 c4 0c             	add    esp,0xc
c001a49f:	c3                   	ret    

c001a4a0 <iso_kprintfd>:
c001a4a0:	83 ec 0c             	sub    esp,0xc
c001a4a3:	83 ec 08             	sub    esp,0x8
c001a4a6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a4aa:	68 5a 13 02 c0       	push   0xc002135a
c001a4af:	e8 91 04 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a4b4:	83 c4 10             	add    esp,0x10
c001a4b7:	90                   	nop
c001a4b8:	83 c4 0c             	add    esp,0xc
c001a4bb:	c3                   	ret    

c001a4bc <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001a4bc:	b8 08 00 00 00       	mov    eax,0x8
c001a4c1:	c3                   	ret    

c001a4c2 <ISO9660::truncate(void*, unsigned long long)>:
c001a4c2:	b8 01 00 00 00       	mov    eax,0x1
c001a4c7:	c3                   	ret    

c001a4c8 <ISO9660::getName()>:
c001a4c8:	b8 30 2f 02 c0       	mov    eax,0xc0022f30
c001a4cd:	c3                   	ret    

c001a4ce <ISO9660::closeDir(void*)>:
c001a4ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a4d2:	8b 00                	mov    eax,DWORD PTR [eax]
c001a4d4:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c001a4d7:	90                   	nop

c001a4d8 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001a4d8:	b8 01 00 00 00       	mov    eax,0x1
c001a4dd:	c3                   	ret    

c001a4de <ISO9660::unlink(char const*)>:
c001a4de:	b8 01 00 00 00       	mov    eax,0x1
c001a4e3:	c3                   	ret    

c001a4e4 <ISO9660::write(void*, unsigned long, void*, int*)>:
c001a4e4:	b8 03 00 00 00       	mov    eax,0x3
c001a4e9:	c3                   	ret    

c001a4ea <ISO9660::rename(char const*, char const*)>:
c001a4ea:	b8 01 00 00 00       	mov    eax,0x1
c001a4ef:	c3                   	ret    

c001a4f0 <ISO9660::mkdir(char const*)>:
c001a4f0:	b8 01 00 00 00       	mov    eax,0x1
c001a4f5:	c3                   	ret    

c001a4f6 <ISO9660::~ISO9660()>:
c001a4f6:	83 ec 0c             	sub    esp,0xc
c001a4f9:	ba 70 30 02 c0       	mov    edx,0xc0023070
c001a4fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a502:	89 10                	mov    DWORD PTR [eax],edx
c001a504:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a508:	83 ec 0c             	sub    esp,0xc
c001a50b:	50                   	push   eax
c001a50c:	e8 43 13 ff ff       	call   c000b854 <Filesystem::~Filesystem()>
c001a511:	83 c4 10             	add    esp,0x10
c001a514:	90                   	nop
c001a515:	83 c4 0c             	add    esp,0xc
c001a518:	c3                   	ret    
c001a519:	90                   	nop

c001a51a <ISO9660::~ISO9660()>:
c001a51a:	83 ec 0c             	sub    esp,0xc
c001a51d:	83 ec 0c             	sub    esp,0xc
c001a520:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a524:	e8 cd ff ff ff       	call   c001a4f6 <ISO9660::~ISO9660()>
c001a529:	83 c4 10             	add    esp,0x10
c001a52c:	83 ec 08             	sub    esp,0x8
c001a52f:	6a 08                	push   0x8
c001a531:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a535:	e8 de 02 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001a53a:	83 c4 10             	add    esp,0x10
c001a53d:	83 c4 0c             	add    esp,0xc
c001a540:	c3                   	ret    
c001a541:	90                   	nop

c001a542 <ISO9660::exists(char const*)>:
c001a542:	83 ec 18             	sub    esp,0x18
c001a545:	68 4b 2f 02 c0       	push   0xc0022f4b
c001a54a:	e8 44 71 ff ff       	call   c0011693 <KePanic(char const*)>
c001a54f:	31 c0                	xor    eax,eax
c001a551:	83 c4 1c             	add    esp,0x1c
c001a554:	c3                   	ret    
c001a555:	90                   	nop

c001a556 <ISO9660::open(char const*, void**, FileOpenMode)>:
c001a556:	56                   	push   esi
c001a557:	53                   	push   ebx
c001a558:	53                   	push   ebx
c001a559:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a55d:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a561:	85 db                	test   ebx,ebx
c001a563:	0f 84 ca 00 00 00    	je     c001a633 <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001a569:	85 f6                	test   esi,esi
c001a56b:	0f 84 c2 00 00 00    	je     c001a633 <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001a571:	b8 03 00 00 00       	mov    eax,0x3
c001a576:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c001a57b:	0f 85 b7 00 00 00    	jne    c001a638 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001a581:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001a583:	0f be 05 80 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c880
c001a58a:	38 0d 80 c8 02 c0    	cmp    BYTE PTR ds:0xc002c880,cl
c001a590:	74 1b                	je     c001a5ad <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c001a592:	85 c0                	test   eax,eax
c001a594:	74 10                	je     c001a5a6 <ISO9660::open(char const*, void**, FileOpenMode)+0x50>
c001a596:	83 ec 0c             	sub    esp,0xc
c001a599:	68 69 2f 02 c0       	push   0xc0022f69
c001a59e:	e8 f0 70 ff ff       	call   c0011693 <KePanic(char const*)>
c001a5a3:	83 c4 10             	add    esp,0x10
c001a5a6:	8a 03                	mov    al,BYTE PTR [ebx]
c001a5a8:	a2 80 c8 02 c0       	mov    ds:0xc002c880,al
c001a5ad:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a5b0:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c001a5b7:	85 c0                	test   eax,eax
c001a5b9:	74 09                	je     c001a5c4 <ISO9660::open(char const*, void**, FileOpenMode)+0x6e>
c001a5bb:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001a5c2:	74 48                	je     c001a60c <ISO9660::open(char const*, void**, FileOpenMode)+0xb6>
c001a5c4:	83 ec 0c             	sub    esp,0xc
c001a5c7:	68 79 2f 02 c0       	push   0xc0022f79
c001a5cc:	e8 74 03 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a5d1:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a5d4:	83 c4 10             	add    esp,0x10
c001a5d7:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c001a5de:	85 c0                	test   eax,eax
c001a5e0:	74 17                	je     c001a5f9 <ISO9660::open(char const*, void**, FileOpenMode)+0xa3>
c001a5e2:	83 ec 0c             	sub    esp,0xc
c001a5e5:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001a5ec:	68 99 2f 02 c0       	push   0xc0022f99
c001a5f1:	e8 4f 03 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a5f6:	83 c4 10             	add    esp,0x10
c001a5f9:	83 ec 0c             	sub    esp,0xc
c001a5fc:	0f be 05 80 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c880
c001a603:	50                   	push   eax
c001a604:	e8 3d c4 fe ff       	call   c0006a46 <init_percd>
c001a609:	83 c4 10             	add    esp,0x10
c001a60c:	83 c3 03             	add    ebx,0x3
c001a60f:	51                   	push   ecx
c001a610:	51                   	push   ecx
c001a611:	6a 00                	push   0x0
c001a613:	53                   	push   ebx
c001a614:	e8 f4 be fe ff       	call   c000650d <iso_open>
c001a619:	83 c4 10             	add    esp,0x10
c001a61c:	89 c2                	mov    edx,eax
c001a61e:	b8 01 00 00 00       	mov    eax,0x1
c001a623:	83 fa ff             	cmp    edx,0xffffffff
c001a626:	74 10                	je     c001a638 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001a628:	83 c2 32             	add    edx,0x32
c001a62b:	31 c0                	xor    eax,eax
c001a62d:	01 d2                	add    edx,edx
c001a62f:	89 16                	mov    DWORD PTR [esi],edx
c001a631:	eb 05                	jmp    c001a638 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001a633:	b8 04 00 00 00       	mov    eax,0x4
c001a638:	5a                   	pop    edx
c001a639:	5b                   	pop    ebx
c001a63a:	5e                   	pop    esi
c001a63b:	c3                   	ret    

c001a63c <ISO9660::read(void*, unsigned long, void*, int*)>:
c001a63c:	53                   	push   ebx
c001a63d:	83 ec 08             	sub    esp,0x8
c001a640:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a644:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a648:	85 c0                	test   eax,eax
c001a64a:	74 2d                	je     c001a679 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001a64c:	85 db                	test   ebx,ebx
c001a64e:	74 29                	je     c001a679 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001a650:	b9 02 00 00 00       	mov    ecx,0x2
c001a655:	52                   	push   edx
c001a656:	99                   	cdq    
c001a657:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a65b:	f7 f9                	idiv   ecx
c001a65d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a661:	83 e8 32             	sub    eax,0x32
c001a664:	50                   	push   eax
c001a665:	e8 4b bf fe ff       	call   c00065b5 <iso_read>
c001a66a:	83 c4 10             	add    esp,0x10
c001a66d:	89 03                	mov    DWORD PTR [ebx],eax
c001a66f:	09 d0                	or     eax,edx
c001a671:	0f 94 c0             	sete   al
c001a674:	0f b6 c0             	movzx  eax,al
c001a677:	eb 05                	jmp    c001a67e <ISO9660::read(void*, unsigned long, void*, int*)+0x42>
c001a679:	b8 04 00 00 00       	mov    eax,0x4
c001a67e:	83 c4 08             	add    esp,0x8
c001a681:	5b                   	pop    ebx
c001a682:	c3                   	ret    
c001a683:	90                   	nop

c001a684 <ISO9660::seek(void*, unsigned long long)>:
c001a684:	57                   	push   edi
c001a685:	56                   	push   esi
c001a686:	b8 04 00 00 00       	mov    eax,0x4
c001a68b:	51                   	push   ecx
c001a68c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a690:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a694:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001a698:	85 d2                	test   edx,edx
c001a69a:	74 26                	je     c001a6c2 <ISO9660::seek(void*, unsigned long long)+0x3e>
c001a69c:	6a 00                	push   0x0
c001a69e:	b9 02 00 00 00       	mov    ecx,0x2
c001a6a3:	57                   	push   edi
c001a6a4:	89 d0                	mov    eax,edx
c001a6a6:	56                   	push   esi
c001a6a7:	99                   	cdq    
c001a6a8:	f7 f9                	idiv   ecx
c001a6aa:	83 e8 32             	sub    eax,0x32
c001a6ad:	50                   	push   eax
c001a6ae:	e8 18 c0 fe ff       	call   c00066cb <iso_seek>
c001a6b3:	83 c4 10             	add    esp,0x10
c001a6b6:	31 f0                	xor    eax,esi
c001a6b8:	31 fa                	xor    edx,edi
c001a6ba:	09 d0                	or     eax,edx
c001a6bc:	0f 95 c0             	setne  al
c001a6bf:	0f b6 c0             	movzx  eax,al
c001a6c2:	5a                   	pop    edx
c001a6c3:	5e                   	pop    esi
c001a6c4:	5f                   	pop    edi
c001a6c5:	c3                   	ret    

c001a6c6 <ISO9660::tell(void*, unsigned long long*)>:
c001a6c6:	53                   	push   ebx
c001a6c7:	83 ec 08             	sub    esp,0x8
c001a6ca:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a6ce:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a6d2:	85 c0                	test   eax,eax
c001a6d4:	74 24                	je     c001a6fa <ISO9660::tell(void*, unsigned long long*)+0x34>
c001a6d6:	85 db                	test   ebx,ebx
c001a6d8:	74 20                	je     c001a6fa <ISO9660::tell(void*, unsigned long long*)+0x34>
c001a6da:	83 ec 0c             	sub    esp,0xc
c001a6dd:	b9 02 00 00 00       	mov    ecx,0x2
c001a6e2:	99                   	cdq    
c001a6e3:	f7 f9                	idiv   ecx
c001a6e5:	83 e8 32             	sub    eax,0x32
c001a6e8:	50                   	push   eax
c001a6e9:	e8 61 c0 fe ff       	call   c000674f <iso_tell>
c001a6ee:	83 c4 10             	add    esp,0x10
c001a6f1:	89 03                	mov    DWORD PTR [ebx],eax
c001a6f3:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c001a6f6:	31 c0                	xor    eax,eax
c001a6f8:	eb 05                	jmp    c001a6ff <ISO9660::tell(void*, unsigned long long*)+0x39>
c001a6fa:	b8 04 00 00 00       	mov    eax,0x4
c001a6ff:	83 c4 08             	add    esp,0x8
c001a702:	5b                   	pop    ebx
c001a703:	c3                   	ret    

c001a704 <ISO9660::stat(void*, unsigned long long*)>:
c001a704:	53                   	push   ebx
c001a705:	83 ec 14             	sub    esp,0x14
c001a708:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001a70c:	68 bd 2f 02 c0       	push   0xc0022fbd
c001a711:	e8 2f 02 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a716:	83 c4 10             	add    esp,0x10
c001a719:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a71e:	74 2c                	je     c001a74c <ISO9660::stat(void*, unsigned long long*)+0x48>
c001a720:	85 db                	test   ebx,ebx
c001a722:	74 28                	je     c001a74c <ISO9660::stat(void*, unsigned long long*)+0x48>
c001a724:	83 ec 0c             	sub    esp,0xc
c001a727:	b9 02 00 00 00       	mov    ecx,0x2
c001a72c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a730:	99                   	cdq    
c001a731:	f7 f9                	idiv   ecx
c001a733:	83 e8 32             	sub    eax,0x32
c001a736:	50                   	push   eax
c001a737:	e8 44 c0 fe ff       	call   c0006780 <iso_total>
c001a73c:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001a743:	89 03                	mov    DWORD PTR [ebx],eax
c001a745:	83 c4 10             	add    esp,0x10
c001a748:	31 c0                	xor    eax,eax
c001a74a:	eb 05                	jmp    c001a751 <ISO9660::stat(void*, unsigned long long*)+0x4d>
c001a74c:	b8 04 00 00 00       	mov    eax,0x4
c001a751:	83 c4 08             	add    esp,0x8
c001a754:	5b                   	pop    ebx
c001a755:	c3                   	ret    

c001a756 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001a756:	55                   	push   ebp
c001a757:	57                   	push   edi
c001a758:	56                   	push   esi
c001a759:	53                   	push   ebx
c001a75a:	83 ec 18             	sub    esp,0x18
c001a75d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001a761:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001a765:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001a769:	68 c5 2f 02 c0       	push   0xc0022fc5
c001a76e:	e8 d2 01 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a773:	83 c4 10             	add    esp,0x10
c001a776:	85 ff                	test   edi,edi
c001a778:	0f 94 c0             	sete   al
c001a77b:	85 f6                	test   esi,esi
c001a77d:	0f 94 c2             	sete   dl
c001a780:	09 d0                	or     eax,edx
c001a782:	a8 01                	test   al,0x1
c001a784:	0f 85 dd 00 00 00    	jne    c001a867 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001a78a:	85 db                	test   ebx,ebx
c001a78c:	0f 84 d5 00 00 00    	je     c001a867 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001a792:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001a795:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c001a79b:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001a7a2:	0f be 05 80 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c880
c001a7a9:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001a7ab:	38 0d 80 c8 02 c0    	cmp    BYTE PTR ds:0xc002c880,cl
c001a7b1:	74 1b                	je     c001a7ce <ISO9660::stat(char const*, unsigned long long*, bool*)+0x78>
c001a7b3:	85 c0                	test   eax,eax
c001a7b5:	74 10                	je     c001a7c7 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x71>
c001a7b7:	83 ec 0c             	sub    esp,0xc
c001a7ba:	68 69 2f 02 c0       	push   0xc0022f69
c001a7bf:	e8 cf 6e ff ff       	call   c0011693 <KePanic(char const*)>
c001a7c4:	83 c4 10             	add    esp,0x10
c001a7c7:	8a 03                	mov    al,BYTE PTR [ebx]
c001a7c9:	a2 80 c8 02 c0       	mov    ds:0xc002c880,al
c001a7ce:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a7d1:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c001a7d8:	85 c0                	test   eax,eax
c001a7da:	74 09                	je     c001a7e5 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8f>
c001a7dc:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001a7e3:	74 51                	je     c001a836 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xe0>
c001a7e5:	83 ec 0c             	sub    esp,0xc
c001a7e8:	68 cd 2f 02 c0       	push   0xc0022fcd
c001a7ed:	e8 53 01 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a7f2:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a7f5:	83 c4 10             	add    esp,0x10
c001a7f8:	83 3c 85 7c b7 02 c0 00 	cmp    DWORD PTR [eax*4-0x3ffd4884],0x0
c001a800:	74 21                	je     c001a823 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xcd>
c001a802:	83 ec 0c             	sub    esp,0xc
c001a805:	68 ed 2f 02 c0       	push   0xc0022fed
c001a80a:	e8 36 01 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a80f:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a812:	83 c4 10             	add    esp,0x10
c001a815:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c001a81c:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001a823:	83 ec 0c             	sub    esp,0xc
c001a826:	0f be 05 80 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c880
c001a82d:	50                   	push   eax
c001a82e:	e8 13 c2 fe ff       	call   c0006a46 <init_percd>
c001a833:	83 c4 10             	add    esp,0x10
c001a836:	83 c3 03             	add    ebx,0x3
c001a839:	52                   	push   edx
c001a83a:	52                   	push   edx
c001a83b:	6a 00                	push   0x0
c001a83d:	53                   	push   ebx
c001a83e:	e8 ca bc fe ff       	call   c000650d <iso_open>
c001a843:	83 c4 10             	add    esp,0x10
c001a846:	89 c5                	mov    ebp,eax
c001a848:	83 f8 ff             	cmp    eax,0xffffffff
c001a84b:	75 21                	jne    c001a86e <ISO9660::stat(char const*, unsigned long long*, bool*)+0x118>
c001a84d:	50                   	push   eax
c001a84e:	50                   	push   eax
c001a84f:	6a 01                	push   0x1
c001a851:	53                   	push   ebx
c001a852:	e8 b6 bc fe ff       	call   c000650d <iso_open>
c001a857:	83 c4 10             	add    esp,0x10
c001a85a:	ba 02 00 00 00       	mov    edx,0x2
c001a85f:	40                   	inc    eax
c001a860:	74 2b                	je     c001a88d <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001a862:	c6 06 01             	mov    BYTE PTR [esi],0x1
c001a865:	eb 24                	jmp    c001a88b <ISO9660::stat(char const*, unsigned long long*, bool*)+0x135>
c001a867:	ba 04 00 00 00       	mov    edx,0x4
c001a86c:	eb 1f                	jmp    c001a88d <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001a86e:	83 ec 0c             	sub    esp,0xc
c001a871:	50                   	push   eax
c001a872:	e8 09 bf fe ff       	call   c0006780 <iso_total>
c001a877:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001a87e:	89 07                	mov    DWORD PTR [edi],eax
c001a880:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001a883:	e8 0f bd fe ff       	call   c0006597 <iso_close>
c001a888:	83 c4 10             	add    esp,0x10
c001a88b:	31 d2                	xor    edx,edx
c001a88d:	83 c4 0c             	add    esp,0xc
c001a890:	89 d0                	mov    eax,edx
c001a892:	5b                   	pop    ebx
c001a893:	5e                   	pop    esi
c001a894:	5f                   	pop    edi
c001a895:	5d                   	pop    ebp
c001a896:	c3                   	ret    
c001a897:	90                   	nop

c001a898 <ISO9660::close(void*)>:
c001a898:	83 ec 0c             	sub    esp,0xc
c001a89b:	b8 04 00 00 00       	mov    eax,0x4
c001a8a0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a8a4:	85 d2                	test   edx,edx
c001a8a6:	74 1b                	je     c001a8c3 <ISO9660::close(void*)+0x2b>
c001a8a8:	83 ec 0c             	sub    esp,0xc
c001a8ab:	b9 02 00 00 00       	mov    ecx,0x2
c001a8b0:	89 d0                	mov    eax,edx
c001a8b2:	99                   	cdq    
c001a8b3:	f7 f9                	idiv   ecx
c001a8b5:	83 e8 32             	sub    eax,0x32
c001a8b8:	50                   	push   eax
c001a8b9:	e8 d9 bc fe ff       	call   c0006597 <iso_close>
c001a8be:	83 c4 10             	add    esp,0x10
c001a8c1:	31 c0                	xor    eax,eax
c001a8c3:	83 c4 0c             	add    esp,0xc
c001a8c6:	c3                   	ret    
c001a8c7:	90                   	nop

c001a8c8 <ISO9660::openDir(char const*, void**)>:
c001a8c8:	56                   	push   esi
c001a8c9:	53                   	push   ebx
c001a8ca:	50                   	push   eax
c001a8cb:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a8cf:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a8d3:	85 db                	test   ebx,ebx
c001a8d5:	0f 84 bd 00 00 00    	je     c001a998 <ISO9660::openDir(char const*, void**)+0xd0>
c001a8db:	85 f6                	test   esi,esi
c001a8dd:	0f 84 b5 00 00 00    	je     c001a998 <ISO9660::openDir(char const*, void**)+0xd0>
c001a8e3:	8a 13                	mov    dl,BYTE PTR [ebx]
c001a8e5:	0f be 05 80 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c880
c001a8ec:	38 15 80 c8 02 c0    	cmp    BYTE PTR ds:0xc002c880,dl
c001a8f2:	74 1b                	je     c001a90f <ISO9660::openDir(char const*, void**)+0x47>
c001a8f4:	85 c0                	test   eax,eax
c001a8f6:	74 10                	je     c001a908 <ISO9660::openDir(char const*, void**)+0x40>
c001a8f8:	83 ec 0c             	sub    esp,0xc
c001a8fb:	68 69 2f 02 c0       	push   0xc0022f69
c001a900:	e8 8e 6d ff ff       	call   c0011693 <KePanic(char const*)>
c001a905:	83 c4 10             	add    esp,0x10
c001a908:	8a 03                	mov    al,BYTE PTR [ebx]
c001a90a:	a2 80 c8 02 c0       	mov    ds:0xc002c880,al
c001a90f:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a912:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c001a919:	85 c0                	test   eax,eax
c001a91b:	74 10                	je     c001a92d <ISO9660::openDir(char const*, void**)+0x65>
c001a91d:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001a924:	74 1a                	je     c001a940 <ISO9660::openDir(char const*, void**)+0x78>
c001a926:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001a92d:	83 ec 0c             	sub    esp,0xc
c001a930:	0f be 05 80 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c880
c001a937:	50                   	push   eax
c001a938:	e8 09 c1 fe ff       	call   c0006a46 <init_percd>
c001a93d:	83 c4 10             	add    esp,0x10
c001a940:	83 c3 03             	add    ebx,0x3
c001a943:	50                   	push   eax
c001a944:	50                   	push   eax
c001a945:	6a 01                	push   0x1
c001a947:	53                   	push   ebx
c001a948:	e8 c0 bb fe ff       	call   c000650d <iso_open>
c001a94d:	83 c4 10             	add    esp,0x10
c001a950:	89 c3                	mov    ebx,eax
c001a952:	83 f8 ff             	cmp    eax,0xffffffff
c001a955:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c001a95a:	75 1c                	jne    c001a978 <ISO9660::openDir(char const*, void**)+0xb0>
c001a95c:	53                   	push   ebx
c001a95d:	53                   	push   ebx
c001a95e:	68 11 30 02 c0       	push   0xc0023011
c001a963:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a969:	e8 38 e1 fe ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001a96e:	83 c4 10             	add    esp,0x10
c001a971:	b8 01 00 00 00       	mov    eax,0x1
c001a976:	eb 25                	jmp    c001a99d <ISO9660::openDir(char const*, void**)+0xd5>
c001a978:	01 db                	add    ebx,ebx
c001a97a:	51                   	push   ecx
c001a97b:	83 c3 65             	add    ebx,0x65
c001a97e:	51                   	push   ecx
c001a97f:	68 24 30 02 c0       	push   0xc0023024
c001a984:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a98a:	e8 17 e1 fe ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001a98f:	89 1e                	mov    DWORD PTR [esi],ebx
c001a991:	83 c4 10             	add    esp,0x10
c001a994:	31 c0                	xor    eax,eax
c001a996:	eb 05                	jmp    c001a99d <ISO9660::openDir(char const*, void**)+0xd5>
c001a998:	b8 04 00 00 00       	mov    eax,0x4
c001a99d:	5a                   	pop    edx
c001a99e:	5b                   	pop    ebx
c001a99f:	5e                   	pop    esi
c001a9a0:	c3                   	ret    
c001a9a1:	90                   	nop

c001a9a2 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001a9a2:	55                   	push   ebp
c001a9a3:	57                   	push   edi
c001a9a4:	56                   	push   esi
c001a9a5:	53                   	push   ebx
c001a9a6:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a9ac:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c001a9b3:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001a9ba:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001a9c2:	0f 84 e7 00 00 00    	je     c001aaaf <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10d>
c001a9c8:	85 db                	test   ebx,ebx
c001a9ca:	0f 84 df 00 00 00    	je     c001aaaf <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10d>
c001a9d0:	83 ec 0c             	sub    esp,0xc
c001a9d3:	68 37 30 02 c0       	push   0xc0023037
c001a9d8:	e8 68 ff fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a9dd:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c001a9e4:	b9 02 00 00 00       	mov    ecx,0x2
c001a9e9:	99                   	cdq    
c001a9ea:	f7 f9                	idiv   ecx
c001a9ec:	83 e8 32             	sub    eax,0x32
c001a9ef:	89 04 24             	mov    DWORD PTR [esp],eax
c001a9f2:	e8 db bd fe ff       	call   c00067d2 <iso_readdir>
c001a9f7:	83 c4 10             	add    esp,0x10
c001a9fa:	89 c6                	mov    esi,eax
c001a9fc:	85 c0                	test   eax,eax
c001a9fe:	75 37                	jne    c001aa37 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x95>
c001aa00:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c001aa05:	56                   	push   esi
c001aa06:	56                   	push   esi
c001aa07:	68 42 30 02 c0       	push   0xc0023042
c001aa0c:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001aa12:	e8 8f e0 fe ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001aa17:	83 c4 0c             	add    esp,0xc
c001aa1a:	68 10 01 00 00       	push   0x110
c001aa1f:	6a 00                	push   0x0
c001aa21:	57                   	push   edi
c001aa22:	e8 c9 5a fe ff       	call   c00004f0 <memset>
c001aa27:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001aa2d:	83 c4 10             	add    esp,0x10
c001aa30:	b8 01 00 00 00       	mov    eax,0x1
c001aa35:	eb 7d                	jmp    c001aab4 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x112>
c001aa37:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001aa3d:	8d 68 08             	lea    ebp,[eax+0x8]
c001aa40:	83 ec 0c             	sub    esp,0xc
c001aa43:	55                   	push   ebp
c001aa44:	e8 27 5b fe ff       	call   c0000570 <strlen>
c001aa49:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001aa51:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001aa55:	83 c4 10             	add    esp,0x10
c001aa58:	83 7e 04 ff          	cmp    DWORD PTR [esi+0x4],0xffffffff
c001aa5c:	75 0a                	jne    c001aa68 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c001aa5e:	b8 02 00 00 00       	mov    eax,0x2
c001aa63:	83 3e ff             	cmp    DWORD PTR [esi],0xffffffff
c001aa66:	74 05                	je     c001aa6d <ISO9660::readDir(void*, unsigned long, void*, int*)+0xcb>
c001aa68:	b8 01 00 00 00       	mov    eax,0x1
c001aa6d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001aa71:	50                   	push   eax
c001aa72:	50                   	push   eax
c001aa73:	55                   	push   ebp
c001aa74:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001aa78:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001aa7c:	50                   	push   eax
c001aa7d:	e8 be 5b fe ff       	call   c0000640 <strcpy>
c001aa82:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001aa89:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001aa8b:	c7 03 10 01 00 00    	mov    DWORD PTR [ebx],0x110
c001aa91:	5a                   	pop    edx
c001aa92:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c001aa97:	59                   	pop    ecx
c001aa98:	68 55 30 02 c0       	push   0xc0023055
c001aa9d:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001aaa3:	e8 fe df fe ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001aaa8:	83 c4 10             	add    esp,0x10
c001aaab:	31 c0                	xor    eax,eax
c001aaad:	eb 05                	jmp    c001aab4 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x112>
c001aaaf:	b8 04 00 00 00       	mov    eax,0x4
c001aab4:	81 c4 1c 01 00 00    	add    esp,0x11c
c001aaba:	5b                   	pop    ebx
c001aabb:	5e                   	pop    esi
c001aabc:	5f                   	pop    edi
c001aabd:	5d                   	pop    ebp
c001aabe:	c3                   	ret    

c001aabf <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001aabf:	57                   	push   edi
c001aac0:	56                   	push   esi
c001aac1:	53                   	push   ebx
c001aac2:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001aac6:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001aaca:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001aace:	39 35 84 c8 02 c0    	cmp    DWORD PTR ds:0xc002c884,esi
c001aad4:	0f be cb             	movsx  ecx,bl
c001aad7:	75 0b                	jne    c001aae4 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x25>
c001aad9:	0f be 05 80 42 02 c0 	movsx  eax,BYTE PTR ds:0xc0024280
c001aae0:	39 c8                	cmp    eax,ecx
c001aae2:	74 47                	je     c001ab2b <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001aae4:	83 ec 0c             	sub    esp,0xc
c001aae7:	31 d2                	xor    edx,edx
c001aae9:	68 a0 c8 02 c0       	push   0xc002c8a0
c001aaee:	6a 01                	push   0x1
c001aaf0:	52                   	push   edx
c001aaf1:	56                   	push   esi
c001aaf2:	ff 34 8d 7c b7 02 c0 	push   DWORD PTR [ecx*4-0x3ffd4884]
c001aaf9:	e8 1e 33 ff ff       	call   c000de1c <LogicalDisk::read(unsigned long long, int, void*)>
c001aafe:	83 c4 20             	add    esp,0x20
c001ab01:	85 c0                	test   eax,eax
c001ab03:	75 0e                	jne    c001ab13 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x54>
c001ab05:	89 35 84 c8 02 c0    	mov    DWORD PTR ds:0xc002c884,esi
c001ab0b:	88 1d 80 42 02 c0    	mov    BYTE PTR ds:0xc0024280,bl
c001ab11:	eb 18                	jmp    c001ab2b <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001ab13:	50                   	push   eax
c001ab14:	68 00 08 00 00       	push   0x800
c001ab19:	6a 00                	push   0x0
c001ab1b:	57                   	push   edi
c001ab1c:	e8 cf 59 fe ff       	call   c00004f0 <memset>
c001ab21:	83 c4 10             	add    esp,0x10
c001ab24:	b8 01 00 00 00       	mov    eax,0x1
c001ab29:	eb 0e                	jmp    c001ab39 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x7a>
c001ab2b:	be a0 c8 02 c0       	mov    esi,0xc002c8a0
c001ab30:	b9 00 08 00 00       	mov    ecx,0x800
c001ab35:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ab37:	31 c0                	xor    eax,eax
c001ab39:	5b                   	pop    ebx
c001ab3a:	5e                   	pop    esi
c001ab3b:	5f                   	pop    edi
c001ab3c:	c3                   	ret    
c001ab3d:	90                   	nop

c001ab3e <ISO9660::tryMount(LogicalDisk*, int)>:
c001ab3e:	53                   	push   ebx
c001ab3f:	81 ec 0c 08 00 00    	sub    esp,0x80c
c001ab45:	c7 05 84 c8 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc002c884,0xdeadbeef
c001ab4f:	8b 84 24 1c 08 00 00 	mov    eax,DWORD PTR [esp+0x81c]
c001ab56:	8d 58 41             	lea    ebx,[eax+0x41]
c001ab59:	0f be db             	movsx  ebx,bl
c001ab5c:	53                   	push   ebx
c001ab5d:	8d 44 24 08          	lea    eax,[esp+0x8]
c001ab61:	50                   	push   eax
c001ab62:	6a 10                	push   0x10
c001ab64:	e8 56 ff ff ff       	call   c001aabf <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001ab69:	83 c4 10             	add    esp,0x10
c001ab6c:	31 d2                	xor    edx,edx
c001ab6e:	85 c0                	test   eax,eax
c001ab70:	75 33                	jne    c001aba5 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001ab72:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001ab77:	75 2c                	jne    c001aba5 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001ab79:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001ab7e:	75 25                	jne    c001aba5 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001ab80:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001ab85:	75 1e                	jne    c001aba5 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001ab87:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001ab8c:	75 17                	jne    c001aba5 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001ab8e:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001ab93:	75 10                	jne    c001aba5 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001ab95:	83 ec 0c             	sub    esp,0xc
c001ab98:	53                   	push   ebx
c001ab99:	e8 a8 be fe ff       	call   c0006a46 <init_percd>
c001ab9e:	83 c4 10             	add    esp,0x10
c001aba1:	40                   	inc    eax
c001aba2:	0f 95 c2             	setne  dl
c001aba5:	88 d0                	mov    al,dl
c001aba7:	81 c4 08 08 00 00    	add    esp,0x808
c001abad:	5b                   	pop    ebx
c001abae:	c3                   	ret    
c001abaf:	90                   	nop

c001abb0 <ISO9660::ISO9660()>:
c001abb0:	83 ec 0c             	sub    esp,0xc
c001abb3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001abb7:	83 ec 0c             	sub    esp,0xc
c001abba:	50                   	push   eax
c001abbb:	e8 70 0c ff ff       	call   c000b830 <Filesystem::Filesystem()>
c001abc0:	83 c4 10             	add    esp,0x10
c001abc3:	ba 70 30 02 c0       	mov    edx,0xc0023070
c001abc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001abcc:	89 10                	mov    DWORD PTR [eax],edx
c001abce:	e8 85 bf fe ff       	call   c0006b58 <fs_iso9660_init>
c001abd3:	90                   	nop
c001abd4:	83 c4 0c             	add    esp,0xc
c001abd7:	c3                   	ret    

c001abd8 <SoundCard::beginPlayback()>:
c001abd8:	c7 44 24 04 d4 30 02 c0 	mov    DWORD PTR [esp+0x4],0xc00230d4
c001abe0:	e9 ae 6a ff ff       	jmp    c0011693 <KePanic(char const*)>
c001abe5:	90                   	nop

c001abe6 <SoundCard::stopPlayback()>:
c001abe6:	c7 44 24 04 d4 30 02 c0 	mov    DWORD PTR [esp+0x4],0xc00230d4
c001abee:	e9 a0 6a ff ff       	jmp    c0011693 <KePanic(char const*)>
c001abf3:	90                   	nop

c001abf4 <SoundCard::SoundCard(char const*)>:
c001abf4:	83 ec 1c             	sub    esp,0x1c
c001abf7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001abfb:	83 ec 08             	sub    esp,0x8
c001abfe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ac02:	50                   	push   eax
c001ac03:	e8 ca 1f ff ff       	call   c000cbd2 <Device::Device(char const*)>
c001ac08:	83 c4 10             	add    esp,0x10
c001ac0b:	ba 20 31 02 c0       	mov    edx,0xc0023120
c001ac10:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ac14:	89 10                	mov    DWORD PTR [eax],edx
c001ac16:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ac1a:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001ac21:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ac25:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c001ac2f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ac33:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c001ac3d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ac41:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c001ac4b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ac4f:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001ac59:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001ac61:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001ac66:	7f 1a                	jg     c001ac82 <SoundCard::SoundCard(char const*)+0x8e>
c001ac68:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ac6c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ac70:	83 c2 54             	add    edx,0x54
c001ac73:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001ac7b:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001ac80:	eb df                	jmp    c001ac61 <SoundCard::SoundCard(char const*)+0x6d>
c001ac82:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ac86:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001ac8d:	90                   	nop
c001ac8e:	83 c4 1c             	add    esp,0x1c
c001ac91:	c3                   	ret    

c001ac92 <SoundCard::~SoundCard()>:
c001ac92:	83 ec 0c             	sub    esp,0xc
c001ac95:	ba 20 31 02 c0       	mov    edx,0xc0023120
c001ac9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac9e:	89 10                	mov    DWORD PTR [eax],edx
c001aca0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aca4:	83 ec 0c             	sub    esp,0xc
c001aca7:	50                   	push   eax
c001aca8:	e8 8f 1c ff ff       	call   c000c93c <Device::~Device()>
c001acad:	83 c4 10             	add    esp,0x10
c001acb0:	90                   	nop
c001acb1:	83 c4 0c             	add    esp,0xc
c001acb4:	c3                   	ret    
c001acb5:	90                   	nop

c001acb6 <SoundCard::~SoundCard()>:
c001acb6:	83 ec 0c             	sub    esp,0xc
c001acb9:	83 ec 0c             	sub    esp,0xc
c001acbc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001acc0:	e8 cd ff ff ff       	call   c001ac92 <SoundCard::~SoundCard()>
c001acc5:	83 c4 10             	add    esp,0x10
c001acc8:	83 ec 08             	sub    esp,0x8
c001accb:	68 e8 01 00 00       	push   0x1e8
c001acd0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001acd4:	e8 3f fb fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001acd9:	83 c4 10             	add    esp,0x10
c001acdc:	83 c4 0c             	add    esp,0xc
c001acdf:	c3                   	ret    

c001ace0 <SoundCard::configureRates(int, int, int)>:
c001ace0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ace4:	31 c0                	xor    eax,eax
c001ace6:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c001aced:	75 20                	jne    c001ad0f <SoundCard::configureRates(int, int, int)+0x2f>
c001acef:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001acf3:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c001acf9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001acfd:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c001ad03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad07:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c001ad0d:	b0 01                	mov    al,0x1
c001ad0f:	c3                   	ret    

c001ad10 <SoundCard::getSamples16(int, short*)>:
c001ad10:	55                   	push   ebp
c001ad11:	57                   	push   edi
c001ad12:	31 ff                	xor    edi,edi
c001ad14:	56                   	push   esi
c001ad15:	53                   	push   ebx
c001ad16:	31 db                	xor    ebx,ebx
c001ad18:	83 ec 10             	sub    esp,0x10
c001ad1b:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001ad1f:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001ad23:	8d 04 36             	lea    eax,[esi+esi*1]
c001ad26:	50                   	push   eax
c001ad27:	6a 00                	push   0x0
c001ad29:	55                   	push   ebp
c001ad2a:	e8 c1 57 fe ff       	call   c00004f0 <memset>
c001ad2f:	83 c4 10             	add    esp,0x10
c001ad32:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ad36:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c001ad3d:	85 c0                	test   eax,eax
c001ad3f:	74 1b                	je     c001ad5c <SoundCard::getSamples16(int, short*)+0x4c>
c001ad41:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001ad45:	75 15                	jne    c001ad5c <SoundCard::getSamples16(int, short*)+0x4c>
c001ad47:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001ad4b:	55                   	push   ebp
c001ad4c:	56                   	push   esi
c001ad4d:	50                   	push   eax
c001ad4e:	e8 f1 02 00 00       	call   c001b044 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c001ad53:	83 c4 10             	add    esp,0x10
c001ad56:	39 c7                	cmp    edi,eax
c001ad58:	7d 02                	jge    c001ad5c <SoundCard::getSamples16(int, short*)+0x4c>
c001ad5a:	89 c7                	mov    edi,eax
c001ad5c:	43                   	inc    ebx
c001ad5d:	83 fb 20             	cmp    ebx,0x20
c001ad60:	75 d0                	jne    c001ad32 <SoundCard::getSamples16(int, short*)+0x22>
c001ad62:	83 c4 0c             	add    esp,0xc
c001ad65:	89 f8                	mov    eax,edi
c001ad67:	5b                   	pop    ebx
c001ad68:	5e                   	pop    esi
c001ad69:	5f                   	pop    edi
c001ad6a:	5d                   	pop    ebp
c001ad6b:	c3                   	ret    

c001ad6c <SoundCard::getSamples32(int, int*)>:
c001ad6c:	55                   	push   ebp
c001ad6d:	57                   	push   edi
c001ad6e:	31 ff                	xor    edi,edi
c001ad70:	56                   	push   esi
c001ad71:	31 f6                	xor    esi,esi
c001ad73:	53                   	push   ebx
c001ad74:	83 ec 10             	sub    esp,0x10
c001ad77:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ad7b:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001ad7f:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001ad83:	c1 e0 02             	shl    eax,0x2
c001ad86:	50                   	push   eax
c001ad87:	6a 00                	push   0x0
c001ad89:	55                   	push   ebp
c001ad8a:	e8 61 57 fe ff       	call   c00004f0 <memset>
c001ad8f:	83 c4 10             	add    esp,0x10
c001ad92:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c001ad99:	85 c0                	test   eax,eax
c001ad9b:	74 1b                	je     c001adb8 <SoundCard::getSamples32(int, int*)+0x4c>
c001ad9d:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001ada1:	75 15                	jne    c001adb8 <SoundCard::getSamples32(int, int*)+0x4c>
c001ada3:	53                   	push   ebx
c001ada4:	55                   	push   ebp
c001ada5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ada9:	50                   	push   eax
c001adaa:	e8 61 03 00 00       	call   c001b110 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c001adaf:	83 c4 10             	add    esp,0x10
c001adb2:	39 c6                	cmp    esi,eax
c001adb4:	7d 02                	jge    c001adb8 <SoundCard::getSamples32(int, int*)+0x4c>
c001adb6:	89 c6                	mov    esi,eax
c001adb8:	47                   	inc    edi
c001adb9:	83 ff 20             	cmp    edi,0x20
c001adbc:	75 d4                	jne    c001ad92 <SoundCard::getSamples32(int, int*)+0x26>
c001adbe:	85 f6                	test   esi,esi
c001adc0:	0f b6 83 d8 01 00 00 	movzx  eax,BYTE PTR [ebx+0x1d8]
c001adc7:	75 0f                	jne    c001add8 <SoundCard::getSamples32(int, int*)+0x6c>
c001adc9:	85 c0                	test   eax,eax
c001adcb:	74 1b                	je     c001ade8 <SoundCard::getSamples32(int, int*)+0x7c>
c001adcd:	83 ec 0c             	sub    esp,0xc
c001add0:	8b 03                	mov    eax,DWORD PTR [ebx]
c001add2:	53                   	push   ebx
c001add3:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001add6:	eb 0d                	jmp    c001ade5 <SoundCard::getSamples32(int, int*)+0x79>
c001add8:	85 c0                	test   eax,eax
c001adda:	75 0c                	jne    c001ade8 <SoundCard::getSamples32(int, int*)+0x7c>
c001addc:	83 ec 0c             	sub    esp,0xc
c001addf:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ade1:	53                   	push   ebx
c001ade2:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001ade5:	83 c4 10             	add    esp,0x10
c001ade8:	83 c4 0c             	add    esp,0xc
c001adeb:	89 f0                	mov    eax,esi
c001aded:	5b                   	pop    ebx
c001adee:	5e                   	pop    esi
c001adef:	5f                   	pop    edi
c001adf0:	5d                   	pop    ebp
c001adf1:	c3                   	ret    

c001adf2 <SoundCard::addChannel(SoundPort*)>:
c001adf2:	83 ec 0c             	sub    esp,0xc
c001adf5:	31 c0                	xor    eax,eax
c001adf7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001adfb:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c001ae03:	74 1b                	je     c001ae20 <SoundCard::addChannel(SoundPort*)+0x2e>
c001ae05:	40                   	inc    eax
c001ae06:	83 f8 20             	cmp    eax,0x20
c001ae09:	75 f0                	jne    c001adfb <SoundCard::addChannel(SoundPort*)+0x9>
c001ae0b:	83 ec 0c             	sub    esp,0xc
c001ae0e:	68 f9 30 02 c0       	push   0xc00230f9
c001ae13:	e8 7b 68 ff ff       	call   c0011693 <KePanic(char const*)>
c001ae18:	83 c4 10             	add    esp,0x10
c001ae1b:	83 c8 ff             	or     eax,0xffffffff
c001ae1e:	eb 0b                	jmp    c001ae2b <SoundCard::addChannel(SoundPort*)+0x39>
c001ae20:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001ae24:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c001ae2b:	83 c4 0c             	add    esp,0xc
c001ae2e:	c3                   	ret    
c001ae2f:	90                   	nop

c001ae30 <SoundCard::removeChannel(int)>:
c001ae30:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ae34:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ae38:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c001ae43:	c3                   	ret    

c001ae44 <SoundPort::SoundPort(int, int, int, int)>:
c001ae44:	83 ec 0c             	sub    esp,0xc
c001ae47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae4b:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001ae52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae56:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001ae5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae5e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ae62:	89 10                	mov    DWORD PTR [eax],edx
c001ae64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae68:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ae6c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ae6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae73:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ae77:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ae7a:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c001ae7f:	75 13                	jne    c001ae94 <SoundPort::SoundPort(int, int, int, int)+0x50>
c001ae81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae85:	8b 00                	mov    eax,DWORD PTR [eax]
c001ae87:	05 a0 0f 00 00       	add    eax,0xfa0
c001ae8c:	01 c0                	add    eax,eax
c001ae8e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001ae92:	66 90                	xchg   ax,ax
c001ae94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae98:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001ae9c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001ae9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aea3:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001aeaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aeae:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001aeb1:	c1 e0 02             	shl    eax,0x2
c001aeb4:	83 ec 0c             	sub    esp,0xc
c001aeb7:	50                   	push   eax
c001aeb8:	e8 f9 cb fe ff       	call   c0007ab6 <malloc>
c001aebd:	83 c4 10             	add    esp,0x10
c001aec0:	89 c2                	mov    edx,eax
c001aec2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aec6:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001aec9:	90                   	nop
c001aeca:	83 c4 0c             	add    esp,0xc
c001aecd:	c3                   	ret    
c001aece:	66 90                	xchg   ax,ax

c001aed0 <SoundPort::~SoundPort()>:
c001aed0:	83 ec 0c             	sub    esp,0xc
c001aed3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aed7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001aeda:	85 c0                	test   eax,eax
c001aedc:	74 1e                	je     c001aefc <SoundPort::~SoundPort()+0x2c>
c001aede:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aee2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001aee5:	83 ec 0c             	sub    esp,0xc
c001aee8:	50                   	push   eax
c001aee9:	e8 d8 cb fe ff       	call   c0007ac6 <free>
c001aeee:	83 c4 10             	add    esp,0x10
c001aef1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aef5:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001aefc:	90                   	nop
c001aefd:	83 c4 0c             	add    esp,0xc
c001af00:	c3                   	ret    
c001af01:	90                   	nop
c001af02:	66 90                	xchg   ax,ax

c001af04 <SoundPort::unpause()>:
c001af04:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001af08:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c001af0c:	c3                   	ret    
c001af0d:	90                   	nop
c001af0e:	66 90                	xchg   ax,ax

c001af10 <SoundPort::pause()>:
c001af10:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001af14:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001af18:	c3                   	ret    
c001af19:	90                   	nop
c001af1a:	66 90                	xchg   ax,ax

c001af1c <SoundPort::getBufferUsed()>:
c001af1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001af20:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001af23:	c3                   	ret    

c001af24 <SoundPort::getBufferSize()>:
c001af24:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001af28:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001af2b:	c3                   	ret    

c001af2c <SoundPort::buffer16(short*, int)>:
c001af2c:	55                   	push   ebp
c001af2d:	57                   	push   edi
c001af2e:	56                   	push   esi
c001af2f:	53                   	push   ebx
c001af30:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001af34:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c001af38:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001af3b:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001af3e:	74 68                	je     c001afa8 <SoundPort::buffer16(short*, int)+0x7c>
c001af40:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001af44:	85 c9                	test   ecx,ecx
c001af46:	7e 60                	jle    c001afa8 <SoundPort::buffer16(short*, int)+0x7c>
c001af48:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c001af4c:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001af4f:	c1 e1 0f             	shl    ecx,0xf
c001af52:	8d 70 01             	lea    esi,[eax+0x1]
c001af55:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001af58:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001af5b:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001af5e:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001af61:	74 4d                	je     c001afb0 <SoundPort::buffer16(short*, int)+0x84>
c001af63:	31 f6                	xor    esi,esi
c001af65:	eb 21                	jmp    c001af88 <SoundPort::buffer16(short*, int)+0x5c>
c001af67:	90                   	nop
c001af68:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c001af6d:	8d 79 01             	lea    edi,[ecx+0x1]
c001af70:	c1 e3 0f             	shl    ebx,0xf
c001af73:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c001af76:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c001af79:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c001af7c:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001af7f:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001af82:	74 1c                	je     c001afa0 <SoundPort::buffer16(short*, int)+0x74>
c001af84:	89 c6                	mov    esi,eax
c001af86:	66 90                	xchg   ax,ax
c001af88:	8d 46 01             	lea    eax,[esi+0x1]
c001af8b:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c001af8f:	75 d7                	jne    c001af68 <SoundPort::buffer16(short*, int)+0x3c>
c001af91:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001af95:	8d 76 00             	lea    esi,[esi+0x0]
c001af98:	5b                   	pop    ebx
c001af99:	5e                   	pop    esi
c001af9a:	5f                   	pop    edi
c001af9b:	5d                   	pop    ebp
c001af9c:	c3                   	ret    
c001af9d:	8d 76 00             	lea    esi,[esi+0x0]
c001afa0:	5b                   	pop    ebx
c001afa1:	8d 46 02             	lea    eax,[esi+0x2]
c001afa4:	5e                   	pop    esi
c001afa5:	5f                   	pop    edi
c001afa6:	5d                   	pop    ebp
c001afa7:	c3                   	ret    
c001afa8:	5b                   	pop    ebx
c001afa9:	31 c0                	xor    eax,eax
c001afab:	5e                   	pop    esi
c001afac:	5f                   	pop    edi
c001afad:	5d                   	pop    ebp
c001afae:	c3                   	ret    
c001afaf:	90                   	nop
c001afb0:	b8 01 00 00 00       	mov    eax,0x1
c001afb5:	eb e1                	jmp    c001af98 <SoundPort::buffer16(short*, int)+0x6c>
c001afb7:	90                   	nop

c001afb8 <SoundPort::buffer32(int*, int)>:
c001afb8:	55                   	push   ebp
c001afb9:	57                   	push   edi
c001afba:	56                   	push   esi
c001afbb:	53                   	push   ebx
c001afbc:	83 ec 04             	sub    esp,0x4
c001afbf:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001afc3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001afc7:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001afca:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001afce:	89 04 24             	mov    DWORD PTR [esp],eax
c001afd1:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001afd4:	74 5a                	je     c001b030 <SoundPort::buffer32(int*, int)+0x78>
c001afd6:	85 c0                	test   eax,eax
c001afd8:	7e 56                	jle    c001b030 <SoundPort::buffer32(int*, int)+0x78>
c001afda:	8d 71 01             	lea    esi,[ecx+0x1]
c001afdd:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001afe0:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001afe3:	8b 37                	mov    esi,DWORD PTR [edi]
c001afe5:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c001afe8:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001afeb:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001afee:	74 4c                	je     c001b03c <SoundPort::buffer32(int*, int)+0x84>
c001aff0:	31 f6                	xor    esi,esi
c001aff2:	eb 1c                	jmp    c001b010 <SoundPort::buffer32(int*, int)+0x58>
c001aff4:	8d 69 01             	lea    ebp,[ecx+0x1]
c001aff7:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c001affa:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c001affd:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001b000:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001b004:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001b007:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001b00a:	74 18                	je     c001b024 <SoundPort::buffer32(int*, int)+0x6c>
c001b00c:	89 de                	mov    esi,ebx
c001b00e:	66 90                	xchg   ax,ax
c001b010:	8d 5e 01             	lea    ebx,[esi+0x1]
c001b013:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c001b016:	75 dc                	jne    c001aff4 <SoundPort::buffer32(int*, int)+0x3c>
c001b018:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001b01b:	90                   	nop
c001b01c:	83 c4 04             	add    esp,0x4
c001b01f:	5b                   	pop    ebx
c001b020:	5e                   	pop    esi
c001b021:	5f                   	pop    edi
c001b022:	5d                   	pop    ebp
c001b023:	c3                   	ret    
c001b024:	83 c4 04             	add    esp,0x4
c001b027:	8d 46 02             	lea    eax,[esi+0x2]
c001b02a:	5b                   	pop    ebx
c001b02b:	5e                   	pop    esi
c001b02c:	5f                   	pop    edi
c001b02d:	5d                   	pop    ebp
c001b02e:	c3                   	ret    
c001b02f:	90                   	nop
c001b030:	83 c4 04             	add    esp,0x4
c001b033:	31 c0                	xor    eax,eax
c001b035:	5b                   	pop    ebx
c001b036:	5e                   	pop    esi
c001b037:	5f                   	pop    edi
c001b038:	5d                   	pop    ebp
c001b039:	c3                   	ret    
c001b03a:	66 90                	xchg   ax,ax
c001b03c:	b8 01 00 00 00       	mov    eax,0x1
c001b041:	eb d9                	jmp    c001b01c <SoundPort::buffer32(int*, int)+0x64>
c001b043:	90                   	nop

c001b044 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c001b044:	57                   	push   edi
c001b045:	56                   	push   esi
c001b046:	53                   	push   ebx
c001b047:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b04b:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001b04f:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c001b055:	39 03                	cmp    DWORD PTR [ebx],eax
c001b057:	74 13                	je     c001b06c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c001b059:	83 ec 0c             	sub    esp,0xc
c001b05c:	68 4c 31 02 c0       	push   0xc002314c
c001b061:	e8 2d 66 ff ff       	call   c0011693 <KePanic(char const*)>
c001b066:	83 c4 10             	add    esp,0x10
c001b069:	8d 76 00             	lea    esi,[esi+0x0]
c001b06c:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c001b072:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001b075:	74 11                	je     c001b088 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c001b077:	83 ec 0c             	sub    esp,0xc
c001b07a:	68 8b 31 02 c0       	push   0xc002318b
c001b07f:	e8 0f 66 ff ff       	call   c0011693 <KePanic(char const*)>
c001b084:	83 c4 10             	add    esp,0x10
c001b087:	90                   	nop
c001b088:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c001b08e:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001b091:	74 11                	je     c001b0a4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c001b093:	83 ec 0c             	sub    esp,0xc
c001b096:	68 8b 31 02 c0       	push   0xc002318b
c001b09b:	e8 f3 65 ff ff       	call   c0011693 <KePanic(char const*)>
c001b0a0:	83 c4 10             	add    esp,0x10
c001b0a3:	90                   	nop
c001b0a4:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c001b0a7:	3b 74 24 14          	cmp    esi,DWORD PTR [esp+0x14]
c001b0ab:	7e 07                	jle    c001b0b4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c001b0ad:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001b0b1:	8d 76 00             	lea    esi,[esi+0x0]
c001b0b4:	85 f6                	test   esi,esi
c001b0b6:	7e 2c                	jle    c001b0e4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa0>
c001b0b8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b0bc:	8d 3c 36             	lea    edi,[esi+esi*1]
c001b0bf:	31 c9                	xor    ecx,ecx
c001b0c1:	01 d7                	add    edi,edx
c001b0c3:	90                   	nop
c001b0c4:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001b0c7:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c001b0ca:	85 c0                	test   eax,eax
c001b0cc:	79 06                	jns    c001b0d4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c001b0ce:	05 ff 7f 00 00       	add    eax,0x7fff
c001b0d3:	90                   	nop
c001b0d4:	c1 f8 0f             	sar    eax,0xf
c001b0d7:	83 c1 04             	add    ecx,0x4
c001b0da:	66 01 02             	add    WORD PTR [edx],ax
c001b0dd:	83 c2 02             	add    edx,0x2
c001b0e0:	39 d7                	cmp    edi,edx
c001b0e2:	75 e0                	jne    c001b0c4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c001b0e4:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001b0e7:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001b0ea:	83 ec 04             	sub    esp,0x4
c001b0ed:	29 f0                	sub    eax,esi
c001b0ef:	c1 e0 02             	shl    eax,0x2
c001b0f2:	50                   	push   eax
c001b0f3:	8d 04 b2             	lea    eax,[edx+esi*4]
c001b0f6:	50                   	push   eax
c001b0f7:	52                   	push   edx
c001b0f8:	e8 d3 52 fe ff       	call   c00003d0 <memmove>
c001b0fd:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001b100:	83 c4 10             	add    esp,0x10
c001b103:	29 f0                	sub    eax,esi
c001b105:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001b108:	89 f0                	mov    eax,esi
c001b10a:	5b                   	pop    ebx
c001b10b:	5e                   	pop    esi
c001b10c:	5f                   	pop    edi
c001b10d:	c3                   	ret    
c001b10e:	66 90                	xchg   ax,ax

c001b110 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c001b110:	57                   	push   edi
c001b111:	56                   	push   esi
c001b112:	53                   	push   ebx
c001b113:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b117:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001b11b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001b11f:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c001b125:	39 06                	cmp    DWORD PTR [esi],eax
c001b127:	74 13                	je     c001b13c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c001b129:	83 ec 0c             	sub    esp,0xc
c001b12c:	68 6c 31 02 c0       	push   0xc002316c
c001b131:	e8 5d 65 ff ff       	call   c0011693 <KePanic(char const*)>
c001b136:	83 c4 10             	add    esp,0x10
c001b139:	8d 76 00             	lea    esi,[esi+0x0]
c001b13c:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c001b142:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c001b145:	74 11                	je     c001b158 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c001b147:	83 ec 0c             	sub    esp,0xc
c001b14a:	68 a7 31 02 c0       	push   0xc00231a7
c001b14f:	e8 3f 65 ff ff       	call   c0011693 <KePanic(char const*)>
c001b154:	83 c4 10             	add    esp,0x10
c001b157:	90                   	nop
c001b158:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c001b15e:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c001b161:	74 11                	je     c001b174 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c001b163:	83 ec 0c             	sub    esp,0xc
c001b166:	68 a7 31 02 c0       	push   0xc00231a7
c001b16b:	e8 23 65 ff ff       	call   c0011693 <KePanic(char const*)>
c001b170:	83 c4 10             	add    esp,0x10
c001b173:	90                   	nop
c001b174:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001b177:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c001b17b:	7e 07                	jle    c001b184 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c001b17d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001b181:	8d 76 00             	lea    esi,[esi+0x0]
c001b184:	85 ff                	test   edi,edi
c001b186:	7e 1c                	jle    c001b1a4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c001b188:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c001b18f:	31 c0                	xor    eax,eax
c001b191:	8d 76 00             	lea    esi,[esi+0x0]
c001b194:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001b197:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001b19a:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c001b19d:	83 c0 04             	add    eax,0x4
c001b1a0:	39 c1                	cmp    ecx,eax
c001b1a2:	75 f0                	jne    c001b194 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c001b1a4:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001b1a7:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001b1aa:	83 ec 04             	sub    esp,0x4
c001b1ad:	29 f8                	sub    eax,edi
c001b1af:	c1 e0 02             	shl    eax,0x2
c001b1b2:	50                   	push   eax
c001b1b3:	8d 04 ba             	lea    eax,[edx+edi*4]
c001b1b6:	50                   	push   eax
c001b1b7:	52                   	push   edx
c001b1b8:	e8 13 52 fe ff       	call   c00003d0 <memmove>
c001b1bd:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001b1c0:	83 c4 10             	add    esp,0x10
c001b1c3:	29 f8                	sub    eax,edi
c001b1c5:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c001b1c8:	89 f8                	mov    eax,edi
c001b1ca:	5b                   	pop    ebx
c001b1cb:	5e                   	pop    esi
c001b1cc:	5f                   	pop    edi
c001b1cd:	c3                   	ret    

c001b1ce <PCI::open(int, int, void*)>:
c001b1ce:	83 ec 18             	sub    esp,0x18
c001b1d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b1d5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001b1d9:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001b1df:	8b 10                	mov    edx,DWORD PTR [eax]
c001b1e1:	50                   	push   eax
c001b1e2:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001b1e5:	31 c0                	xor    eax,eax
c001b1e7:	83 c4 1c             	add    esp,0x1c
c001b1ea:	c3                   	ret    
c001b1eb:	90                   	nop

c001b1ec <PCI::close(int, int, void*)>:
c001b1ec:	31 c0                	xor    eax,eax
c001b1ee:	c3                   	ret    
c001b1ef:	90                   	nop

c001b1f0 <PCI::PCI()>:
c001b1f0:	83 ec 0c             	sub    esp,0xc
c001b1f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b1f7:	83 ec 08             	sub    esp,0x8
c001b1fa:	68 c3 31 02 c0       	push   0xc00231c3
c001b1ff:	50                   	push   eax
c001b200:	e8 97 11 ff ff       	call   c000c39c <Bus::Bus(char const*)>
c001b205:	83 c4 10             	add    esp,0x10
c001b208:	ba 6c 32 02 c0       	mov    edx,0xc002326c
c001b20d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b211:	89 10                	mov    DWORD PTR [eax],edx
c001b213:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b217:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001b221:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b225:	a3 a0 d0 02 c0       	mov    ds:0xc002d0a0,eax
c001b22a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b22e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b234:	0f b6 d0             	movzx  edx,al
c001b237:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b23b:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001b242:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b246:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b24c:	0f b6 d0             	movzx  edx,al
c001b24f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b253:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001b258:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b25c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b262:	8d 50 01             	lea    edx,[eax+0x1]
c001b265:	88 d1                	mov    cl,dl
c001b267:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b26b:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001b271:	0f b6 d0             	movzx  edx,al
c001b274:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b278:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001b27c:	83 c9 c0             	or     ecx,0xffffffc0
c001b27f:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001b283:	90                   	nop
c001b284:	83 c4 0c             	add    esp,0xc
c001b287:	c3                   	ret    

c001b288 <PCI::readBAR8(unsigned int, int)>:
c001b288:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b28c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b290:	f6 c2 01             	test   dl,0x1
c001b293:	74 07                	je     c001b29c <PCI::readBAR8(unsigned int, int)+0x14>
c001b295:	83 e2 fc             	and    edx,0xfffffffc
c001b298:	01 c2                	add    edx,eax
c001b29a:	ec                   	in     al,dx
c001b29b:	c3                   	ret    
c001b29c:	83 e2 f0             	and    edx,0xfffffff0
c001b29f:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001b2a2:	c3                   	ret    
c001b2a3:	90                   	nop

c001b2a4 <PCI::readBAR16(unsigned int, int)>:
c001b2a4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b2a8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b2ac:	f6 c2 01             	test   dl,0x1
c001b2af:	74 08                	je     c001b2b9 <PCI::readBAR16(unsigned int, int)+0x15>
c001b2b1:	83 e2 fc             	and    edx,0xfffffffc
c001b2b4:	01 c2                	add    edx,eax
c001b2b6:	66 ed                	in     ax,dx
c001b2b8:	c3                   	ret    
c001b2b9:	83 e2 f0             	and    edx,0xfffffff0
c001b2bc:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001b2c0:	c3                   	ret    
c001b2c1:	90                   	nop

c001b2c2 <PCI::readBAR32(unsigned int, int)>:
c001b2c2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b2c6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b2ca:	f6 c2 01             	test   dl,0x1
c001b2cd:	74 07                	je     c001b2d6 <PCI::readBAR32(unsigned int, int)+0x14>
c001b2cf:	83 e2 fc             	and    edx,0xfffffffc
c001b2d2:	01 c2                	add    edx,eax
c001b2d4:	ed                   	in     eax,dx
c001b2d5:	c3                   	ret    
c001b2d6:	83 e2 f0             	and    edx,0xfffffff0
c001b2d9:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001b2dc:	c3                   	ret    
c001b2dd:	90                   	nop

c001b2de <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001b2de:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b2e2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b2e6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b2ea:	f6 c2 01             	test   dl,0x1
c001b2ed:	74 07                	je     c001b2f6 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001b2ef:	83 e2 fc             	and    edx,0xfffffffc
c001b2f2:	01 ca                	add    edx,ecx
c001b2f4:	ee                   	out    dx,al
c001b2f5:	c3                   	ret    
c001b2f6:	83 e2 f0             	and    edx,0xfffffff0
c001b2f9:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001b2fc:	c3                   	ret    
c001b2fd:	90                   	nop

c001b2fe <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001b2fe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b302:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b306:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b30a:	f6 c2 01             	test   dl,0x1
c001b30d:	74 08                	je     c001b317 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001b30f:	83 e2 fc             	and    edx,0xfffffffc
c001b312:	01 ca                	add    edx,ecx
c001b314:	66 ef                	out    dx,ax
c001b316:	c3                   	ret    
c001b317:	83 e2 f0             	and    edx,0xfffffff0
c001b31a:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001b31e:	c3                   	ret    
c001b31f:	90                   	nop

c001b320 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001b320:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b324:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b328:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b32c:	f6 c2 01             	test   dl,0x1
c001b32f:	74 07                	je     c001b338 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001b331:	83 e2 fc             	and    edx,0xfffffffc
c001b334:	01 ca                	add    edx,ecx
c001b336:	ef                   	out    dx,eax
c001b337:	c3                   	ret    
c001b338:	83 e2 f0             	and    edx,0xfffffff0
c001b33b:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001b33e:	c3                   	ret    
c001b33f:	90                   	nop

c001b340 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001b340:	55                   	push   ebp
c001b341:	57                   	push   edi
c001b342:	56                   	push   esi
c001b343:	53                   	push   ebx
c001b344:	83 ec 0c             	sub    esp,0xc
c001b347:	0f b6 74 24 2c       	movzx  esi,BYTE PTR [esp+0x2c]
c001b34c:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001b350:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001b354:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001b358:	83 fe 07             	cmp    esi,0x7
c001b35b:	76 10                	jbe    c001b36d <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001b35d:	83 ec 0c             	sub    esp,0xc
c001b360:	68 cb 31 02 c0       	push   0xc00231cb
c001b365:	e8 29 63 ff ff       	call   c0011693 <KePanic(char const*)>
c001b36a:	83 c4 10             	add    esp,0x10
c001b36d:	0f b6 db             	movzx  ebx,bl
c001b370:	83 fb 0f             	cmp    ebx,0xf
c001b373:	76 10                	jbe    c001b385 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x45>
c001b375:	83 ec 0c             	sub    esp,0xc
c001b378:	68 fb 31 02 c0       	push   0xc00231fb
c001b37d:	e8 11 63 ff ff       	call   c0011693 <KePanic(char const*)>
c001b382:	83 c4 10             	add    esp,0x10
c001b385:	8d 04 36             	lea    eax,[esi+esi*1]
c001b388:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b38d:	83 c8 f0             	or     eax,0xfffffff0
c001b390:	ee                   	out    dx,al
c001b391:	ba fa 0c 00 00       	mov    edx,0xcfa
c001b396:	89 e8                	mov    eax,ebp
c001b398:	ee                   	out    dx,al
c001b399:	83 c4 0c             	add    esp,0xc
c001b39c:	89 d8                	mov    eax,ebx
c001b39e:	89 f9                	mov    ecx,edi
c001b3a0:	c1 e0 08             	shl    eax,0x8
c001b3a3:	0f b6 d9             	movzx  ebx,cl
c001b3a6:	83 e3 fc             	and    ebx,0xfffffffc
c001b3a9:	09 d8                	or     eax,ebx
c001b3ab:	5b                   	pop    ebx
c001b3ac:	0d 00 c0 ff ff       	or     eax,0xffffc000
c001b3b1:	5e                   	pop    esi
c001b3b2:	5f                   	pop    edi
c001b3b3:	5d                   	pop    ebp
c001b3b4:	c3                   	ret    
c001b3b5:	90                   	nop

c001b3b6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001b3b6:	57                   	push   edi
c001b3b7:	56                   	push   esi
c001b3b8:	53                   	push   ebx
c001b3b9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b3bd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b3c1:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001b3c7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b3cb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001b3cf:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b3d3:	83 ff 01             	cmp    edi,0x1
c001b3d6:	75 3f                	jne    c001b417 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x61>
c001b3d8:	89 de                	mov    esi,ebx
c001b3da:	0f b6 c0             	movzx  eax,al
c001b3dd:	81 e6 fc 00 00 00    	and    esi,0xfc
c001b3e3:	c1 e0 10             	shl    eax,0x10
c001b3e6:	0f b6 c9             	movzx  ecx,cl
c001b3e9:	09 f0                	or     eax,esi
c001b3eb:	c1 e1 08             	shl    ecx,0x8
c001b3ee:	0f b6 d2             	movzx  edx,dl
c001b3f1:	09 c8                	or     eax,ecx
c001b3f3:	c1 e2 0b             	shl    edx,0xb
c001b3f6:	09 d0                	or     eax,edx
c001b3f8:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b3fd:	0d 00 00 00 80       	or     eax,0x80000000
c001b402:	ef                   	out    dx,eax
c001b403:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b408:	ed                   	in     eax,dx
c001b409:	83 e3 02             	and    ebx,0x2
c001b40c:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001b413:	d3 e8                	shr    eax,cl
c001b415:	eb 44                	jmp    c001b45b <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001b417:	83 ff 02             	cmp    edi,0x2
c001b41a:	75 2d                	jne    c001b449 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x93>
c001b41c:	83 ec 0c             	sub    esp,0xc
c001b41f:	0f b6 c9             	movzx  ecx,cl
c001b422:	0f b6 d2             	movzx  edx,dl
c001b425:	0f b6 fb             	movzx  edi,bl
c001b428:	0f b6 c0             	movzx  eax,al
c001b42b:	57                   	push   edi
c001b42c:	51                   	push   ecx
c001b42d:	52                   	push   edx
c001b42e:	50                   	push   eax
c001b42f:	56                   	push   esi
c001b430:	e8 0b ff ff ff       	call   c001b340 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b435:	89 c2                	mov    edx,eax
c001b437:	ed                   	in     eax,dx
c001b438:	83 e3 02             	and    ebx,0x2
c001b43b:	83 c4 20             	add    esp,0x20
c001b43e:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001b445:	d3 e8                	shr    eax,cl
c001b447:	eb 12                	jmp    c001b45b <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001b449:	83 ec 0c             	sub    esp,0xc
c001b44c:	68 2b 32 02 c0       	push   0xc002322b
c001b451:	e8 3d 62 ff ff       	call   c0011693 <KePanic(char const*)>
c001b456:	83 c4 10             	add    esp,0x10
c001b459:	31 c0                	xor    eax,eax
c001b45b:	5b                   	pop    ebx
c001b45c:	5e                   	pop    esi
c001b45d:	5f                   	pop    edi
c001b45e:	c3                   	ret    
c001b45f:	90                   	nop

c001b460 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001b460:	83 ec 18             	sub    esp,0x18
c001b463:	6a 00                	push   0x0
c001b465:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b46a:	50                   	push   eax
c001b46b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b470:	50                   	push   eax
c001b471:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b476:	50                   	push   eax
c001b477:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b47b:	e8 36 ff ff ff       	call   c001b3b6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b480:	83 c4 2c             	add    esp,0x2c
c001b483:	c3                   	ret    

c001b484 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001b484:	83 ec 18             	sub    esp,0x18
c001b487:	6a 0e                	push   0xe
c001b489:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b48e:	50                   	push   eax
c001b48f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b494:	50                   	push   eax
c001b495:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b49a:	50                   	push   eax
c001b49b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b49f:	e8 12 ff ff ff       	call   c001b3b6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b4a4:	83 c4 2c             	add    esp,0x2c
c001b4a7:	0f b6 c0             	movzx  eax,al
c001b4aa:	c3                   	ret    
c001b4ab:	90                   	nop

c001b4ac <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001b4ac:	55                   	push   ebp
c001b4ad:	57                   	push   edi
c001b4ae:	56                   	push   esi
c001b4af:	53                   	push   ebx
c001b4b0:	83 ec 18             	sub    esp,0x18
c001b4b3:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001b4b8:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001b4bd:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001b4c2:	6a 0a                	push   0xa
c001b4c4:	56                   	push   esi
c001b4c5:	55                   	push   ebp
c001b4c6:	57                   	push   edi
c001b4c7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b4cb:	e8 e6 fe ff ff       	call   c001b3b6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b4d0:	83 c4 14             	add    esp,0x14
c001b4d3:	89 c3                	mov    ebx,eax
c001b4d5:	6a 0a                	push   0xa
c001b4d7:	0f b6 db             	movzx  ebx,bl
c001b4da:	56                   	push   esi
c001b4db:	55                   	push   ebp
c001b4dc:	57                   	push   edi
c001b4dd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b4e1:	e8 d0 fe ff ff       	call   c001b3b6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b4e6:	83 c4 2c             	add    esp,0x2c
c001b4e9:	25 00 ff 00 00       	and    eax,0xff00
c001b4ee:	09 d8                	or     eax,ebx
c001b4f0:	5b                   	pop    ebx
c001b4f1:	5e                   	pop    esi
c001b4f2:	5f                   	pop    edi
c001b4f3:	5d                   	pop    ebp
c001b4f4:	c3                   	ret    
c001b4f5:	90                   	nop

c001b4f6 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001b4f6:	83 ec 18             	sub    esp,0x18
c001b4f9:	6a 08                	push   0x8
c001b4fb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b500:	50                   	push   eax
c001b501:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b506:	50                   	push   eax
c001b507:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b50c:	50                   	push   eax
c001b50d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b511:	e8 a0 fe ff ff       	call   c001b3b6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b516:	83 c4 2c             	add    esp,0x2c
c001b519:	0f b6 c4             	movzx  eax,ah
c001b51c:	c3                   	ret    
c001b51d:	90                   	nop

c001b51e <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001b51e:	83 ec 18             	sub    esp,0x18
c001b521:	6a 08                	push   0x8
c001b523:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b528:	50                   	push   eax
c001b529:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b52e:	50                   	push   eax
c001b52f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b534:	50                   	push   eax
c001b535:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b539:	e8 78 fe ff ff       	call   c001b3b6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b53e:	83 c4 2c             	add    esp,0x2c
c001b541:	c3                   	ret    

c001b542 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001b542:	83 ec 18             	sub    esp,0x18
c001b545:	6a 3c                	push   0x3c
c001b547:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b54c:	50                   	push   eax
c001b54d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b552:	50                   	push   eax
c001b553:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b558:	50                   	push   eax
c001b559:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b55d:	e8 54 fe ff ff       	call   c001b3b6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b562:	83 c4 2c             	add    esp,0x2c
c001b565:	c3                   	ret    

c001b566 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001b566:	83 ec 18             	sub    esp,0x18
c001b569:	6a 18                	push   0x18
c001b56b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b570:	50                   	push   eax
c001b571:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b576:	50                   	push   eax
c001b577:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b57c:	50                   	push   eax
c001b57d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b581:	e8 30 fe ff ff       	call   c001b3b6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b586:	83 c4 2c             	add    esp,0x2c
c001b589:	0f b6 c4             	movzx  eax,ah
c001b58c:	c3                   	ret    
c001b58d:	90                   	nop

c001b58e <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001b58e:	55                   	push   ebp
c001b58f:	57                   	push   edi
c001b590:	56                   	push   esi
c001b591:	53                   	push   ebx
c001b592:	83 ec 28             	sub    esp,0x28
c001b595:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001b599:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001b59e:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001b5a3:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001b5a8:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001b5af:	8d 43 12             	lea    eax,[ebx+0x12]
c001b5b2:	83 c3 10             	add    ebx,0x10
c001b5b5:	0f b6 c0             	movzx  eax,al
c001b5b8:	0f b6 db             	movzx  ebx,bl
c001b5bb:	50                   	push   eax
c001b5bc:	51                   	push   ecx
c001b5bd:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001b5c1:	57                   	push   edi
c001b5c2:	55                   	push   ebp
c001b5c3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001b5c7:	e8 ea fd ff ff       	call   c001b3b6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b5cc:	83 c4 14             	add    esp,0x14
c001b5cf:	89 c6                	mov    esi,eax
c001b5d1:	53                   	push   ebx
c001b5d2:	c1 e6 10             	shl    esi,0x10
c001b5d5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001b5d9:	51                   	push   ecx
c001b5da:	57                   	push   edi
c001b5db:	55                   	push   ebp
c001b5dc:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001b5e0:	e8 d1 fd ff ff       	call   c001b3b6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b5e5:	83 c4 3c             	add    esp,0x3c
c001b5e8:	0f b7 c0             	movzx  eax,ax
c001b5eb:	5b                   	pop    ebx
c001b5ec:	09 f0                	or     eax,esi
c001b5ee:	5e                   	pop    esi
c001b5ef:	5f                   	pop    edi
c001b5f0:	5d                   	pop    ebp
c001b5f1:	c3                   	ret    

c001b5f2 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001b5f2:	55                   	push   ebp
c001b5f3:	57                   	push   edi
c001b5f4:	56                   	push   esi
c001b5f5:	53                   	push   ebx
c001b5f6:	83 ec 0c             	sub    esp,0xc
c001b5f9:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001b5fd:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001b601:	89 f5                	mov    ebp,esi
c001b603:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c001b609:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b60d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b611:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b615:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001b619:	83 f9 01             	cmp    ecx,0x1
c001b61c:	75 5d                	jne    c001b67b <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c001b61e:	0f b6 c8             	movzx  ecx,al
c001b621:	0f b6 d2             	movzx  edx,dl
c001b624:	c1 e1 10             	shl    ecx,0x10
c001b627:	c1 e2 0b             	shl    edx,0xb
c001b62a:	89 f0                	mov    eax,esi
c001b62c:	25 fc 00 00 00       	and    eax,0xfc
c001b631:	09 c1                	or     ecx,eax
c001b633:	89 e8                	mov    eax,ebp
c001b635:	0f b6 c0             	movzx  eax,al
c001b638:	c1 e0 08             	shl    eax,0x8
c001b63b:	09 c1                	or     ecx,eax
c001b63d:	09 d1                	or     ecx,edx
c001b63f:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b644:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001b64a:	89 c8                	mov    eax,ecx
c001b64c:	ef                   	out    dx,eax
c001b64d:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b652:	ed                   	in     eax,dx
c001b653:	0f b7 db             	movzx  ebx,bx
c001b656:	83 e6 02             	and    esi,0x2
c001b659:	74 0a                	je     c001b665 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c001b65b:	0f b7 d0             	movzx  edx,ax
c001b65e:	c1 e3 10             	shl    ebx,0x10
c001b661:	09 d3                	or     ebx,edx
c001b663:	eb 05                	jmp    c001b66a <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c001b665:	66 31 c0             	xor    ax,ax
c001b668:	09 c3                	or     ebx,eax
c001b66a:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b66f:	89 c8                	mov    eax,ecx
c001b671:	ef                   	out    dx,eax
c001b672:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b677:	89 d8                	mov    eax,ebx
c001b679:	eb 41                	jmp    c001b6bc <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001b67b:	83 f9 02             	cmp    ecx,0x2
c001b67e:	75 45                	jne    c001b6c5 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c001b680:	83 ec 0c             	sub    esp,0xc
c001b683:	0f b6 d2             	movzx  edx,dl
c001b686:	89 f1                	mov    ecx,esi
c001b688:	0f b6 c0             	movzx  eax,al
c001b68b:	0f b6 f1             	movzx  esi,cl
c001b68e:	89 e9                	mov    ecx,ebp
c001b690:	56                   	push   esi
c001b691:	0f b6 c9             	movzx  ecx,cl
c001b694:	51                   	push   ecx
c001b695:	52                   	push   edx
c001b696:	50                   	push   eax
c001b697:	57                   	push   edi
c001b698:	e8 a3 fc ff ff       	call   c001b340 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b69d:	89 c2                	mov    edx,eax
c001b69f:	ed                   	in     eax,dx
c001b6a0:	83 c4 20             	add    esp,0x20
c001b6a3:	0f b7 db             	movzx  ebx,bx
c001b6a6:	f6 c2 02             	test   dl,0x2
c001b6a9:	74 0c                	je     c001b6b7 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c001b6ab:	0f b7 c8             	movzx  ecx,ax
c001b6ae:	89 d8                	mov    eax,ebx
c001b6b0:	c1 e0 10             	shl    eax,0x10
c001b6b3:	09 c8                	or     eax,ecx
c001b6b5:	eb 05                	jmp    c001b6bc <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001b6b7:	66 31 c0             	xor    ax,ax
c001b6ba:	09 d8                	or     eax,ebx
c001b6bc:	ef                   	out    dx,eax
c001b6bd:	83 c4 0c             	add    esp,0xc
c001b6c0:	5b                   	pop    ebx
c001b6c1:	5e                   	pop    esi
c001b6c2:	5f                   	pop    edi
c001b6c3:	5d                   	pop    ebp
c001b6c4:	c3                   	ret    
c001b6c5:	c7 44 24 20 2b 32 02 c0 	mov    DWORD PTR [esp+0x20],0xc002322b
c001b6cd:	83 c4 0c             	add    esp,0xc
c001b6d0:	5b                   	pop    ebx
c001b6d1:	5e                   	pop    esi
c001b6d2:	5f                   	pop    edi
c001b6d3:	5d                   	pop    ebp
c001b6d4:	e9 ba 5f ff ff       	jmp    c0011693 <KePanic(char const*)>
c001b6d9:	90                   	nop

c001b6da <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001b6da:	55                   	push   ebp
c001b6db:	57                   	push   edi
c001b6dc:	56                   	push   esi
c001b6dd:	53                   	push   ebx
c001b6de:	81 ec 4c 01 00 00    	sub    esp,0x14c
c001b6e4:	8b ac 24 84 01 00 00 	mov    ebp,DWORD PTR [esp+0x184]
c001b6eb:	80 3d ac d0 02 c0 00 	cmp    BYTE PTR ds:0xc002d0ac,0x0
c001b6f2:	0f 85 bd 00 00 00    	jne    c001b7b5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdb>
c001b6f8:	83 ec 0c             	sub    esp,0xc
c001b6fb:	68 14 01 00 00       	push   0x114
c001b700:	e8 b1 c3 fe ff       	call   c0007ab6 <malloc>
c001b705:	83 c4 0c             	add    esp,0xc
c001b708:	89 c3                	mov    ebx,eax
c001b70a:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c001b710:	68 31 32 02 c0       	push   0xc0023231
c001b715:	50                   	push   eax
c001b716:	e8 a7 04 ff ff       	call   c000bbc2 <File::File(char const*, Process*)>
c001b71b:	83 c4 10             	add    esp,0x10
c001b71e:	85 db                	test   ebx,ebx
c001b720:	0f 84 67 02 00 00    	je     c001b98d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001b726:	56                   	push   esi
c001b727:	56                   	push   esi
c001b728:	6a 01                	push   0x1
c001b72a:	53                   	push   ebx
c001b72b:	e8 b0 04 ff ff       	call   c000bbe0 <File::open(FileOpenMode)>
c001b730:	83 c4 10             	add    esp,0x10
c001b733:	85 c0                	test   eax,eax
c001b735:	0f 85 52 02 00 00    	jne    c001b98d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001b73b:	52                   	push   edx
c001b73c:	8d 44 24 3f          	lea    eax,[esp+0x3f]
c001b740:	50                   	push   eax
c001b741:	8d 44 24 48          	lea    eax,[esp+0x48]
c001b745:	50                   	push   eax
c001b746:	53                   	push   ebx
c001b747:	e8 96 07 ff ff       	call   c000bee2 <File::stat(unsigned long long*, bool*)>
c001b74c:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001b750:	40                   	inc    eax
c001b751:	89 04 24             	mov    DWORD PTR [esp],eax
c001b754:	e8 5d c3 fe ff       	call   c0007ab6 <malloc>
c001b759:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001b75d:	a3 a8 d0 02 c0       	mov    ds:0xc002d0a8,eax
c001b762:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001b766:	59                   	pop    ecx
c001b767:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b769:	8d 4c 24 48          	lea    ecx,[esp+0x48]
c001b76d:	51                   	push   ecx
c001b76e:	50                   	push   eax
c001b76f:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001b773:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001b777:	53                   	push   ebx
c001b778:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b77b:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c001b77f:	83 c4 20             	add    esp,0x20
c001b782:	89 c8                	mov    eax,ecx
c001b784:	99                   	cdq    
c001b785:	3b 54 24 44          	cmp    edx,DWORD PTR [esp+0x44]
c001b789:	0f 85 fe 01 00 00    	jne    c001b98d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001b78f:	3b 4c 24 40          	cmp    ecx,DWORD PTR [esp+0x40]
c001b793:	0f 85 f4 01 00 00    	jne    c001b98d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001b799:	83 ec 0c             	sub    esp,0xc
c001b79c:	53                   	push   ebx
c001b79d:	e8 9c 04 ff ff       	call   c000bc3e <File::close()>
c001b7a2:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001b7a6:	c6 05 ac d0 02 c0 01 	mov    BYTE PTR ds:0xc002d0ac,0x1
c001b7ad:	a3 a4 d0 02 c0       	mov    ds:0xc002d0a4,eax
c001b7b2:	83 c4 10             	add    esp,0x10
c001b7b5:	a1 a4 d0 02 c0       	mov    eax,ds:0xc002d0a4
c001b7ba:	8b 1d a8 d0 02 c0    	mov    ebx,DWORD PTR ds:0xc002d0a8
c001b7c0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b7c4:	31 f6                	xor    esi,esi
c001b7c6:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c001b7ce:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c001b7d5:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c001b7da:	31 c9                	xor    ecx,ecx
c001b7dc:	66 8b 84 24 82 01 00 00 	mov    ax,WORD PTR [esp+0x182]
c001b7e4:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c001b7e9:	0f b6 84 24 60 01 00 00 	movzx  eax,BYTE PTR [esp+0x160]
c001b7f1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001b7f5:	0f b6 84 24 61 01 00 00 	movzx  eax,BYTE PTR [esp+0x161]
c001b7fd:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001b801:	39 74 24 04          	cmp    DWORD PTR [esp+0x4],esi
c001b805:	0f 8e 82 01 00 00    	jle    c001b98d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001b80b:	8a 04 33             	mov    al,BYTE PTR [ebx+esi*1]
c001b80e:	d4 40                	aam    0x40
c001b810:	d5 39                	aad    0x39
c001b812:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001b816:	8a 44 33 01          	mov    al,BYTE PTR [ebx+esi*1+0x1]
c001b81a:	d4 40                	aam    0x40
c001b81c:	d5 39                	aad    0x39
c001b81e:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001b822:	8a 44 33 03          	mov    al,BYTE PTR [ebx+esi*1+0x3]
c001b826:	d4 40                	aam    0x40
c001b828:	d5 39                	aad    0x39
c001b82a:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001b82e:	8a 44 33 04          	mov    al,BYTE PTR [ebx+esi*1+0x4]
c001b832:	d4 40                	aam    0x40
c001b834:	d5 39                	aad    0x39
c001b836:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001b83a:	8a 44 33 06          	mov    al,BYTE PTR [ebx+esi*1+0x6]
c001b83e:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c001b842:	3c 56                	cmp    al,0x56
c001b844:	74 43                	je     c001b889 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1af>
c001b846:	d4 40                	aam    0x40
c001b848:	d5 39                	aad    0x39
c001b84a:	8d 48 d0             	lea    ecx,[eax-0x30]
c001b84d:	8a 44 33 07          	mov    al,BYTE PTR [ebx+esi*1+0x7]
c001b851:	0f b6 c9             	movzx  ecx,cl
c001b854:	c1 e1 04             	shl    ecx,0x4
c001b857:	d4 40                	aam    0x40
c001b859:	d5 39                	aad    0x39
c001b85b:	83 e8 30             	sub    eax,0x30
c001b85e:	0f b6 c0             	movzx  eax,al
c001b861:	09 c1                	or     ecx,eax
c001b863:	8a 44 33 08          	mov    al,BYTE PTR [ebx+esi*1+0x8]
c001b867:	c1 e1 04             	shl    ecx,0x4
c001b86a:	d4 40                	aam    0x40
c001b86c:	d5 39                	aad    0x39
c001b86e:	83 e8 30             	sub    eax,0x30
c001b871:	0f b6 c0             	movzx  eax,al
c001b874:	09 c1                	or     ecx,eax
c001b876:	8a 44 33 09          	mov    al,BYTE PTR [ebx+esi*1+0x9]
c001b87a:	c1 e1 04             	shl    ecx,0x4
c001b87d:	d4 40                	aam    0x40
c001b87f:	d5 39                	aad    0x39
c001b881:	83 e8 30             	sub    eax,0x30
c001b884:	0f b6 c0             	movzx  eax,al
c001b887:	09 c1                	or     ecx,eax
c001b889:	8a 44 33 0b          	mov    al,BYTE PTR [ebx+esi*1+0xb]
c001b88d:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001b891:	3c 58                	cmp    al,0x58
c001b893:	74 47                	je     c001b8dc <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x202>
c001b895:	d4 40                	aam    0x40
c001b897:	d5 39                	aad    0x39
c001b899:	8d 50 d0             	lea    edx,[eax-0x30]
c001b89c:	8a 44 33 0c          	mov    al,BYTE PTR [ebx+esi*1+0xc]
c001b8a0:	0f b6 d2             	movzx  edx,dl
c001b8a3:	c1 e2 04             	shl    edx,0x4
c001b8a6:	d4 40                	aam    0x40
c001b8a8:	d5 39                	aad    0x39
c001b8aa:	83 e8 30             	sub    eax,0x30
c001b8ad:	0f b6 c0             	movzx  eax,al
c001b8b0:	09 c2                	or     edx,eax
c001b8b2:	8a 44 33 0d          	mov    al,BYTE PTR [ebx+esi*1+0xd]
c001b8b6:	c1 e2 04             	shl    edx,0x4
c001b8b9:	d4 40                	aam    0x40
c001b8bb:	d5 39                	aad    0x39
c001b8bd:	83 e8 30             	sub    eax,0x30
c001b8c0:	0f b6 c0             	movzx  eax,al
c001b8c3:	09 c2                	or     edx,eax
c001b8c5:	8a 44 33 0e          	mov    al,BYTE PTR [ebx+esi*1+0xe]
c001b8c9:	c1 e2 04             	shl    edx,0x4
c001b8cc:	d4 40                	aam    0x40
c001b8ce:	d5 39                	aad    0x39
c001b8d0:	83 e8 30             	sub    eax,0x30
c001b8d3:	0f b6 c0             	movzx  eax,al
c001b8d6:	09 c2                	or     edx,eax
c001b8d8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b8dc:	83 c6 10             	add    esi,0x10
c001b8df:	8d 7c 24 40          	lea    edi,[esp+0x40]
c001b8e3:	0f be 14 33          	movsx  edx,BYTE PTR [ebx+esi*1]
c001b8e7:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b8eb:	83 fa 0a             	cmp    edx,0xa
c001b8ee:	74 0b                	je     c001b8fb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x221>
c001b8f0:	47                   	inc    edi
c001b8f1:	39 74 24 04          	cmp    DWORD PTR [esp+0x4],esi
c001b8f5:	75 19                	jne    c001b910 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x236>
c001b8f7:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c001b8fb:	31 c0                	xor    eax,eax
c001b8fd:	83 7c 24 10 0a       	cmp    DWORD PTR [esp+0x10],0xa
c001b902:	0f 94 c0             	sete   al
c001b905:	01 c6                	add    esi,eax
c001b907:	80 7c 24 0a 56       	cmp    BYTE PTR [esp+0xa],0x56
c001b90c:	75 0b                	jne    c001b919 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x23f>
c001b90e:	eb 14                	jmp    c001b924 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x24a>
c001b910:	46                   	inc    esi
c001b911:	88 57 ff             	mov    BYTE PTR [edi-0x1],dl
c001b914:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001b917:	eb ca                	jmp    c001b8e3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x209>
c001b919:	66 3b 4c 24 14       	cmp    cx,WORD PTR [esp+0x14]
c001b91e:	0f 85 dd fe ff ff    	jne    c001b801 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001b924:	80 7c 24 0b 58       	cmp    BYTE PTR [esp+0xb],0x58
c001b929:	74 10                	je     c001b93b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x261>
c001b92b:	66 8b 7c 24 16       	mov    di,WORD PTR [esp+0x16]
c001b930:	66 39 7c 24 0c       	cmp    WORD PTR [esp+0xc],di
c001b935:	0f 85 c6 fe ff ff    	jne    c001b801 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001b93b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b93f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001b943:	83 e8 30             	sub    eax,0x30
c001b946:	83 ef 30             	sub    edi,0x30
c001b949:	c1 e0 04             	shl    eax,0x4
c001b94c:	09 f8                	or     eax,edi
c001b94e:	0f b6 c0             	movzx  eax,al
c001b951:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c001b955:	0f 85 a6 fe ff ff    	jne    c001b801 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001b95b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b95f:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001b963:	83 e8 30             	sub    eax,0x30
c001b966:	83 ef 30             	sub    edi,0x30
c001b969:	c1 e0 04             	shl    eax,0x4
c001b96c:	09 f8                	or     eax,edi
c001b96e:	0f b6 c0             	movzx  eax,al
c001b971:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c001b975:	0f 85 86 fe ff ff    	jne    c001b801 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001b97b:	50                   	push   eax
c001b97c:	50                   	push   eax
c001b97d:	8d 44 24 48          	lea    eax,[esp+0x48]
c001b981:	50                   	push   eax
c001b982:	55                   	push   ebp
c001b983:	e8 b8 4c fe ff       	call   c0000640 <strcpy>
c001b988:	83 c4 10             	add    esp,0x10
c001b98b:	eb 06                	jmp    c001b993 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b9>
c001b98d:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c001b991:	31 ed                	xor    ebp,ebp
c001b993:	81 c4 4c 01 00 00    	add    esp,0x14c
c001b999:	89 e8                	mov    eax,ebp
c001b99b:	5b                   	pop    ebx
c001b99c:	5e                   	pop    esi
c001b99d:	5f                   	pop    edi
c001b99e:	5d                   	pop    ebp
c001b99f:	c3                   	ret    

c001b9a0 <PCI::checkBus(unsigned char)>:
c001b9a0:	56                   	push   esi
c001b9a1:	53                   	push   ebx
c001b9a2:	31 db                	xor    ebx,ebx
c001b9a4:	51                   	push   ecx
c001b9a5:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001b9aa:	52                   	push   edx
c001b9ab:	53                   	push   ebx
c001b9ac:	43                   	inc    ebx
c001b9ad:	56                   	push   esi
c001b9ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b9b2:	e8 03 03 00 00       	call   c001bcba <PCI::checkDevice(unsigned char, unsigned char)>
c001b9b7:	83 c4 10             	add    esp,0x10
c001b9ba:	83 fb 20             	cmp    ebx,0x20
c001b9bd:	75 eb                	jne    c001b9aa <PCI::checkBus(unsigned char)+0xa>
c001b9bf:	58                   	pop    eax
c001b9c0:	5b                   	pop    ebx
c001b9c1:	5e                   	pop    esi
c001b9c2:	c3                   	ret    
c001b9c3:	90                   	nop

c001b9c4 <PCI::foundDevice(PCIDeviceInfo)>:
c001b9c4:	55                   	push   ebp
c001b9c5:	57                   	push   edi
c001b9c6:	56                   	push   esi
c001b9c7:	53                   	push   ebx
c001b9c8:	83 ec 1c             	sub    esp,0x1c
c001b9cb:	0f b7 44 24 36       	movzx  eax,WORD PTR [esp+0x36]
c001b9d0:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001b9d4:	3d ff ff 00 00       	cmp    eax,0xffff
c001b9d9:	0f 84 57 01 00 00    	je     c001bb36 <PCI::foundDevice(PCIDeviceInfo)+0x172>
c001b9df:	0f b7 44 24 34       	movzx  eax,WORD PTR [esp+0x34]
c001b9e4:	66 3d 06 04          	cmp    ax,0x406
c001b9e8:	75 2c                	jne    c001ba16 <PCI::foundDevice(PCIDeviceInfo)+0x52>
c001b9ea:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001b9ef:	50                   	push   eax
c001b9f0:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001b9f5:	50                   	push   eax
c001b9f6:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001b9fb:	50                   	push   eax
c001b9fc:	53                   	push   ebx
c001b9fd:	e8 64 fb ff ff       	call   c001b566 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001ba02:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001ba06:	0f b6 c0             	movzx  eax,al
c001ba09:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001ba0d:	83 c4 2c             	add    esp,0x2c
c001ba10:	5b                   	pop    ebx
c001ba11:	5e                   	pop    esi
c001ba12:	5f                   	pop    edi
c001ba13:	5d                   	pop    ebp
c001ba14:	eb 8a                	jmp    c001b9a0 <PCI::checkBus(unsigned char)>
c001ba16:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001ba1a:	8b 93 cc 00 00 00    	mov    edx,DWORD PTR [ebx+0xcc]
c001ba20:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001ba24:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001ba28:	0f b6 7c 24 54       	movzx  edi,BYTE PTR [esp+0x54]
c001ba2d:	85 d2                	test   edx,edx
c001ba2f:	74 36                	je     c001ba67 <PCI::foundDevice(PCIDeviceInfo)+0xa3>
c001ba31:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001ba34:	85 c9                	test   ecx,ecx
c001ba36:	74 2b                	je     c001ba63 <PCI::foundDevice(PCIDeviceInfo)+0x9f>
c001ba38:	8b b1 18 01 00 00    	mov    esi,DWORD PTR [ecx+0x118]
c001ba3e:	31 ee                	xor    esi,ebp
c001ba40:	81 e6 ff 00 ff ff    	and    esi,0xffff00ff
c001ba46:	75 1b                	jne    c001ba63 <PCI::foundDevice(PCIDeviceInfo)+0x9f>
c001ba48:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c001ba4c:	39 b1 20 01 00 00    	cmp    DWORD PTR [ecx+0x120],esi
c001ba52:	75 0f                	jne    c001ba63 <PCI::foundDevice(PCIDeviceInfo)+0x9f>
c001ba54:	0f b6 89 38 01 00 00 	movzx  ecx,BYTE PTR [ecx+0x138]
c001ba5b:	39 f9                	cmp    ecx,edi
c001ba5d:	0f 84 d3 00 00 00    	je     c001bb36 <PCI::foundDevice(PCIDeviceInfo)+0x172>
c001ba63:	8b 12                	mov    edx,DWORD PTR [edx]
c001ba65:	eb c6                	jmp    c001ba2d <PCI::foundDevice(PCIDeviceInfo)+0x69>
c001ba67:	3d 01 06 00 00       	cmp    eax,0x601
c001ba6c:	75 19                	jne    c001ba87 <PCI::foundDevice(PCIDeviceInfo)+0xc3>
c001ba6e:	83 ec 0c             	sub    esp,0xc
c001ba71:	68 64 01 00 00       	push   0x164
c001ba76:	e8 3b c0 fe ff       	call   c0007ab6 <malloc>
c001ba7b:	89 c5                	mov    ebp,eax
c001ba7d:	89 04 24             	mov    DWORD PTR [esp],eax
c001ba80:	e8 a1 0e 00 00       	call   c001c926 <SATABus::SATABus()>
c001ba85:	eb 1e                	jmp    c001baa5 <PCI::foundDevice(PCIDeviceInfo)+0xe1>
c001ba87:	3d 01 01 00 00       	cmp    eax,0x101
c001ba8c:	75 62                	jne    c001baf0 <PCI::foundDevice(PCIDeviceInfo)+0x12c>
c001ba8e:	83 ec 0c             	sub    esp,0xc
c001ba91:	68 70 02 00 00       	push   0x270
c001ba96:	e8 1b c0 fe ff       	call   c0007ab6 <malloc>
c001ba9b:	89 c5                	mov    ebp,eax
c001ba9d:	89 04 24             	mov    DWORD PTR [esp],eax
c001baa0:	e8 e5 02 00 00       	call   c001bd8a <IDE::IDE()>
c001baa5:	5f                   	pop    edi
c001baa6:	58                   	pop    eax
c001baa7:	55                   	push   ebp
c001baa8:	53                   	push   ebx
c001baa9:	e8 8c 0f ff ff       	call   c000ca3a <Device::addChild(Device*)>
c001baae:	83 ec 1c             	sub    esp,0x1c
c001bab1:	b9 09 00 00 00       	mov    ecx,0x9
c001bab6:	fc                   	cld    
c001bab7:	89 e7                	mov    edi,esp
c001bab9:	8d 74 24 60          	lea    esi,[esp+0x60]
c001babd:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001babf:	55                   	push   ebp
c001bac0:	e8 bb 0e ff ff       	call   c000c980 <Device::preOpenPCI(PCIDeviceInfo)>
c001bac5:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001bac8:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c001bacc:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c001bad4:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c001badc:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c001bae4:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001bae7:	83 c4 4c             	add    esp,0x4c
c001baea:	5b                   	pop    ebx
c001baeb:	5e                   	pop    esi
c001baec:	5f                   	pop    edi
c001baed:	5d                   	pop    ebp
c001baee:	ff e0                	jmp    eax
c001baf0:	83 ec 0c             	sub    esp,0xc
c001baf3:	68 58 01 00 00       	push   0x158
c001baf8:	e8 b9 bf fe ff       	call   c0007ab6 <malloc>
c001bafd:	89 c5                	mov    ebp,eax
c001baff:	58                   	pop    eax
c001bb00:	5a                   	pop    edx
c001bb01:	68 4a 32 02 c0       	push   0xc002324a
c001bb06:	55                   	push   ebp
c001bb07:	e8 cc 11 ff ff       	call   c000ccd8 <DriverlessDevice::DriverlessDevice(char const*)>
c001bb0c:	59                   	pop    ecx
c001bb0d:	5e                   	pop    esi
c001bb0e:	55                   	push   ebp
c001bb0f:	53                   	push   ebx
c001bb10:	e8 25 0f ff ff       	call   c000ca3a <Device::addChild(Device*)>
c001bb15:	83 c4 10             	add    esp,0x10
c001bb18:	b9 09 00 00 00       	mov    ecx,0x9
c001bb1d:	fc                   	cld    
c001bb1e:	8d 7c 24 34          	lea    edi,[esp+0x34]
c001bb22:	89 fe                	mov    esi,edi
c001bb24:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001bb26:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c001bb2a:	83 c4 1c             	add    esp,0x1c
c001bb2d:	5b                   	pop    ebx
c001bb2e:	5e                   	pop    esi
c001bb2f:	5f                   	pop    edi
c001bb30:	5d                   	pop    ebp
c001bb31:	e9 4a 0e ff ff       	jmp    c000c980 <Device::preOpenPCI(PCIDeviceInfo)>
c001bb36:	83 c4 1c             	add    esp,0x1c
c001bb39:	5b                   	pop    ebx
c001bb3a:	5e                   	pop    esi
c001bb3b:	5f                   	pop    edi
c001bb3c:	5d                   	pop    ebp
c001bb3d:	c3                   	ret    

c001bb3e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001bb3e:	55                   	push   ebp
c001bb3f:	57                   	push   edi
c001bb40:	56                   	push   esi
c001bb41:	53                   	push   ebx
c001bb42:	83 ec 68             	sub    esp,0x68
c001bb45:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c001bb49:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001bb50:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001bb54:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001bb5b:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c001bb60:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001bb64:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001bb6b:	0f b6 5c 24 24       	movzx  ebx,BYTE PTR [esp+0x24]
c001bb70:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001bb74:	0f b6 7c 24 28       	movzx  edi,BYTE PTR [esp+0x28]
c001bb79:	6a 0c                	push   0xc
c001bb7b:	57                   	push   edi
c001bb7c:	53                   	push   ebx
c001bb7d:	56                   	push   esi
c001bb7e:	55                   	push   ebp
c001bb7f:	e8 32 f8 ff ff       	call   c001b3b6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bb84:	83 c4 20             	add    esp,0x20
c001bb87:	57                   	push   edi
c001bb88:	53                   	push   ebx
c001bb89:	56                   	push   esi
c001bb8a:	55                   	push   ebp
c001bb8b:	e8 1c f9 ff ff       	call   c001b4ac <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001bb90:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c001bb95:	57                   	push   edi
c001bb96:	53                   	push   ebx
c001bb97:	56                   	push   esi
c001bb98:	55                   	push   ebp
c001bb99:	e8 a4 f9 ff ff       	call   c001b542 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001bb9e:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001bba2:	83 c4 14             	add    esp,0x14
c001bba5:	6a 3c                	push   0x3c
c001bba7:	57                   	push   edi
c001bba8:	53                   	push   ebx
c001bba9:	56                   	push   esi
c001bbaa:	55                   	push   ebp
c001bbab:	e8 06 f8 ff ff       	call   c001b3b6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bbb0:	0f b6 c4             	movzx  eax,ah
c001bbb3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001bbb7:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001bbbb:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001bbbf:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001bbc4:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c001bbca:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c001bbd0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001bbd4:	83 c4 20             	add    esp,0x20
c001bbd7:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c001bbdc:	74 30                	je     c001bc0e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001bbde:	31 c0                	xor    eax,eax
c001bbe0:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001bbe4:	7e 28                	jle    c001bc0e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001bbe6:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c001bbee:	39 cb                	cmp    ebx,ecx
c001bbf0:	75 19                	jne    c001bc0b <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001bbf2:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c001bbfa:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001bbfe:	75 0b                	jne    c001bc0b <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001bc00:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c001bc07:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001bc0b:	40                   	inc    eax
c001bc0c:	eb d2                	jmp    c001bbe0 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c001bc0e:	31 d2                	xor    edx,edx
c001bc10:	83 ec 0c             	sub    esp,0xc
c001bc13:	57                   	push   edi
c001bc14:	53                   	push   ebx
c001bc15:	56                   	push   esi
c001bc16:	52                   	push   edx
c001bc17:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001bc1b:	55                   	push   ebp
c001bc1c:	e8 6d f9 ff ff       	call   c001b58e <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bc21:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001bc25:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001bc29:	42                   	inc    edx
c001bc2a:	83 c4 20             	add    esp,0x20
c001bc2d:	83 fa 06             	cmp    edx,0x6
c001bc30:	75 de                	jne    c001bc10 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c001bc32:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001bc36:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bc3a:	c1 e2 08             	shl    edx,0x8
c001bc3d:	83 ec 0c             	sub    esp,0xc
c001bc40:	0f b6 c4             	movzx  eax,ah
c001bc43:	09 d0                	or     eax,edx
c001bc45:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c001bc4a:	6a 02                	push   0x2
c001bc4c:	57                   	push   edi
c001bc4d:	53                   	push   ebx
c001bc4e:	56                   	push   esi
c001bc4f:	55                   	push   ebp
c001bc50:	e8 61 f7 ff ff       	call   c001b3b6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bc55:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c001bc5a:	83 c4 20             	add    esp,0x20
c001bc5d:	57                   	push   edi
c001bc5e:	53                   	push   ebx
c001bc5f:	56                   	push   esi
c001bc60:	55                   	push   ebp
c001bc61:	e8 90 f8 ff ff       	call   c001b4f6 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001bc66:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001bc6a:	57                   	push   edi
c001bc6b:	53                   	push   ebx
c001bc6c:	56                   	push   esi
c001bc6d:	55                   	push   ebp
c001bc6e:	e8 ed f7 ff ff       	call   c001b460 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001bc73:	b9 09 00 00 00       	mov    ecx,0x9
c001bc78:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c001bc7d:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001bc81:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001bc85:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001bc89:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c001bc8d:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001bc91:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c001bc95:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c001bc99:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c001bc9d:	83 ec 0c             	sub    esp,0xc
c001bca0:	fc                   	cld    
c001bca1:	89 e7                	mov    edi,esp
c001bca3:	8d 74 24 58          	lea    esi,[esp+0x58]
c001bca7:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001bca9:	55                   	push   ebp
c001bcaa:	e8 15 fd ff ff       	call   c001b9c4 <PCI::foundDevice(PCIDeviceInfo)>
c001bcaf:	81 c4 8c 00 00 00    	add    esp,0x8c
c001bcb5:	5b                   	pop    ebx
c001bcb6:	5e                   	pop    esi
c001bcb7:	5f                   	pop    edi
c001bcb8:	5d                   	pop    ebp
c001bcb9:	c3                   	ret    

c001bcba <PCI::checkDevice(unsigned char, unsigned char)>:
c001bcba:	55                   	push   ebp
c001bcbb:	57                   	push   edi
c001bcbc:	56                   	push   esi
c001bcbd:	53                   	push   ebx
c001bcbe:	83 ec 0c             	sub    esp,0xc
c001bcc1:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001bcc5:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001bcca:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001bccf:	6a 00                	push   0x0
c001bcd1:	56                   	push   esi
c001bcd2:	57                   	push   edi
c001bcd3:	55                   	push   ebp
c001bcd4:	e8 87 f7 ff ff       	call   c001b460 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001bcd9:	6a 00                	push   0x0
c001bcdb:	56                   	push   esi
c001bcdc:	57                   	push   edi
c001bcdd:	55                   	push   ebp
c001bcde:	e8 5b fe ff ff       	call   c001bb3e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001bce3:	83 c4 20             	add    esp,0x20
c001bce6:	6a 00                	push   0x0
c001bce8:	56                   	push   esi
c001bce9:	57                   	push   edi
c001bcea:	55                   	push   ebp
c001bceb:	e8 94 f7 ff ff       	call   c001b484 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001bcf0:	83 c4 10             	add    esp,0x10
c001bcf3:	a8 80                	test   al,0x80
c001bcf5:	74 2d                	je     c001bd24 <PCI::checkDevice(unsigned char, unsigned char)+0x6a>
c001bcf7:	bb 01 00 00 00       	mov    ebx,0x1
c001bcfc:	53                   	push   ebx
c001bcfd:	56                   	push   esi
c001bcfe:	57                   	push   edi
c001bcff:	55                   	push   ebp
c001bd00:	e8 5b f7 ff ff       	call   c001b460 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001bd05:	83 c4 10             	add    esp,0x10
c001bd08:	0f b7 c0             	movzx  eax,ax
c001bd0b:	3d ff ff 00 00       	cmp    eax,0xffff
c001bd10:	74 0c                	je     c001bd1e <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001bd12:	53                   	push   ebx
c001bd13:	56                   	push   esi
c001bd14:	57                   	push   edi
c001bd15:	55                   	push   ebp
c001bd16:	e8 23 fe ff ff       	call   c001bb3e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001bd1b:	83 c4 10             	add    esp,0x10
c001bd1e:	43                   	inc    ebx
c001bd1f:	83 fb 08             	cmp    ebx,0x8
c001bd22:	75 d8                	jne    c001bcfc <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001bd24:	83 c4 0c             	add    esp,0xc
c001bd27:	5b                   	pop    ebx
c001bd28:	5e                   	pop    esi
c001bd29:	5f                   	pop    edi
c001bd2a:	5d                   	pop    ebp
c001bd2b:	c3                   	ret    

c001bd2c <PCI::detect()>:
c001bd2c:	56                   	push   esi
c001bd2d:	53                   	push   ebx
c001bd2e:	53                   	push   ebx
c001bd2f:	31 db                	xor    ebx,ebx
c001bd31:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bd35:	6a 00                	push   0x0
c001bd37:	6a 00                	push   0x0
c001bd39:	6a 00                	push   0x0
c001bd3b:	56                   	push   esi
c001bd3c:	e8 43 f7 ff ff       	call   c001b484 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001bd41:	83 c4 10             	add    esp,0x10
c001bd44:	a8 80                	test   al,0x80
c001bd46:	75 21                	jne    c001bd69 <PCI::detect()+0x3d>
c001bd48:	51                   	push   ecx
c001bd49:	51                   	push   ecx
c001bd4a:	6a 00                	push   0x0
c001bd4c:	56                   	push   esi
c001bd4d:	e8 4e fc ff ff       	call   c001b9a0 <PCI::checkBus(unsigned char)>
c001bd52:	83 c4 10             	add    esp,0x10
c001bd55:	eb 2a                	jmp    c001bd81 <PCI::detect()+0x55>
c001bd57:	52                   	push   edx
c001bd58:	52                   	push   edx
c001bd59:	53                   	push   ebx
c001bd5a:	43                   	inc    ebx
c001bd5b:	56                   	push   esi
c001bd5c:	e8 3f fc ff ff       	call   c001b9a0 <PCI::checkBus(unsigned char)>
c001bd61:	83 c4 10             	add    esp,0x10
c001bd64:	83 fb 08             	cmp    ebx,0x8
c001bd67:	74 18                	je     c001bd81 <PCI::detect()+0x55>
c001bd69:	53                   	push   ebx
c001bd6a:	6a 00                	push   0x0
c001bd6c:	6a 00                	push   0x0
c001bd6e:	56                   	push   esi
c001bd6f:	e8 ec f6 ff ff       	call   c001b460 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001bd74:	83 c4 10             	add    esp,0x10
c001bd77:	0f b7 c0             	movzx  eax,ax
c001bd7a:	3d ff ff 00 00       	cmp    eax,0xffff
c001bd7f:	74 d6                	je     c001bd57 <PCI::detect()+0x2b>
c001bd81:	58                   	pop    eax
c001bd82:	5b                   	pop    ebx
c001bd83:	5e                   	pop    esi
c001bd84:	c3                   	ret    
c001bd85:	90                   	nop

c001bd86 <IDE::close(int, int, void*)>:
c001bd86:	83 c8 ff             	or     eax,0xffffffff
c001bd89:	c3                   	ret    

c001bd8a <IDE::IDE()>:
c001bd8a:	83 ec 0c             	sub    esp,0xc
c001bd8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd91:	83 ec 08             	sub    esp,0x8
c001bd94:	68 90 32 02 c0       	push   0xc0023290
c001bd99:	50                   	push   eax
c001bd9a:	e8 dd 0f ff ff       	call   c000cd7c <HardDiskController::HardDiskController(char const*)>
c001bd9f:	83 c4 10             	add    esp,0x10
c001bda2:	ba 20 33 02 c0       	mov    edx,0xc0023320
c001bda7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bdab:	89 10                	mov    DWORD PTR [eax],edx
c001bdad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bdb1:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001bdb8:	90                   	nop
c001bdb9:	83 c4 0c             	add    esp,0xc
c001bdbc:	c3                   	ret    
c001bdbd:	90                   	nop

c001bdbe <IDE::prepareInterrupt(unsigned char)>:
c001bdbe:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001bdc3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001bdc7:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001bdcf:	c3                   	ret    

c001bdd0 <selectDrive(unsigned char, unsigned char)>:
c001bdd0:	c3                   	ret    
c001bdd1:	90                   	nop

c001bdd2 <IDE::getBase(unsigned char)>:
c001bdd2:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001bdd7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bddb:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001bde3:	c3                   	ret    

c001bde4 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001bde4:	55                   	push   ebp
c001bde5:	57                   	push   edi
c001bde6:	56                   	push   esi
c001bde7:	53                   	push   ebx
c001bde8:	83 ec 1c             	sub    esp,0x1c
c001bdeb:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001bdef:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001bdf3:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001bdf6:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001bdfa:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001bdfe:	80 f9 03             	cmp    cl,0x3
c001be01:	77 4f                	ja     c001be52 <IDE::write(unsigned char, unsigned char, unsigned char)+0x6e>
c001be03:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001be07:	0f b6 fa             	movzx  edi,dl
c001be0a:	0f b6 db             	movzx  ebx,bl
c001be0d:	8d 6f 2a             	lea    ebp,[edi+0x2a]
c001be10:	0f b6 54 ee 10       	movzx  edx,BYTE PTR [esi+ebp*8+0x10]
c001be15:	80 ca 80             	or     dl,0x80
c001be18:	52                   	push   edx
c001be19:	6a 0c                	push   0xc
c001be1b:	57                   	push   edi
c001be1c:	56                   	push   esi
c001be1d:	e8 c2 ff ff ff       	call   c001bde4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001be22:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001be27:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001be2b:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001be2f:	ee                   	out    dx,al
c001be30:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001be35:	89 7c 24 44          	mov    DWORD PTR [esp+0x44],edi
c001be39:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001be3d:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001be41:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001be49:	83 c4 2c             	add    esp,0x2c
c001be4c:	5b                   	pop    ebx
c001be4d:	5e                   	pop    esi
c001be4e:	5f                   	pop    edi
c001be4f:	5d                   	pop    ebp
c001be50:	eb 92                	jmp    c001bde4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001be52:	0f b6 cb             	movzx  ecx,bl
c001be55:	83 f9 07             	cmp    ecx,0x7
c001be58:	77 12                	ja     c001be6c <IDE::write(unsigned char, unsigned char, unsigned char)+0x88>
c001be5a:	0f b6 d2             	movzx  edx,dl
c001be5d:	0f b6 db             	movzx  ebx,bl
c001be60:	66 8b 94 d6 5a 01 00 00 	mov    dx,WORD PTR [esi+edx*8+0x15a]
c001be68:	01 da                	add    edx,ebx
c001be6a:	eb 2f                	jmp    c001be9b <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001be6c:	83 f9 0d             	cmp    ecx,0xd
c001be6f:	77 13                	ja     c001be84 <IDE::write(unsigned char, unsigned char, unsigned char)+0xa0>
c001be71:	0f b6 d2             	movzx  edx,dl
c001be74:	0f b6 db             	movzx  ebx,bl
c001be77:	8b 94 d6 5c 01 00 00 	mov    edx,DWORD PTR [esi+edx*8+0x15c]
c001be7e:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001be82:	eb 17                	jmp    c001be9b <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001be84:	83 f9 15             	cmp    ecx,0x15
c001be87:	77 13                	ja     c001be9c <IDE::write(unsigned char, unsigned char, unsigned char)+0xb8>
c001be89:	0f b6 d2             	movzx  edx,dl
c001be8c:	0f b6 db             	movzx  ebx,bl
c001be8f:	66 8b 94 d6 5e 01 00 00 	mov    dx,WORD PTR [esi+edx*8+0x15e]
c001be97:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001be9b:	ee                   	out    dx,al
c001be9c:	83 c4 1c             	add    esp,0x1c
c001be9f:	5b                   	pop    ebx
c001bea0:	5e                   	pop    esi
c001bea1:	5f                   	pop    edi
c001bea2:	5d                   	pop    ebp
c001bea3:	c3                   	ret    

c001bea4 <IDE::read(unsigned char, unsigned char)>:
c001bea4:	55                   	push   ebp
c001bea5:	57                   	push   edi
c001bea6:	56                   	push   esi
c001bea7:	53                   	push   ebx
c001bea8:	83 ec 1c             	sub    esp,0x1c
c001beab:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001beaf:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001beb3:	8d 43 f8             	lea    eax,[ebx-0x8]
c001beb6:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001beba:	3c 03                	cmp    al,0x3
c001bebc:	77 40                	ja     c001befe <IDE::read(unsigned char, unsigned char)+0x5a>
c001bebe:	0f b6 f9             	movzx  edi,cl
c001bec1:	8d 6f 2a             	lea    ebp,[edi+0x2a]
c001bec4:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001bec9:	0c 80                	or     al,0x80
c001becb:	50                   	push   eax
c001becc:	6a 0c                	push   0xc
c001bece:	57                   	push   edi
c001becf:	56                   	push   esi
c001bed0:	e8 0f ff ff ff       	call   c001bde4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bed5:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001beda:	0f b6 d3             	movzx  edx,bl
c001bedd:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001bee1:	ec                   	in     al,dx
c001bee2:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001bee6:	0f b6 54 ee 10       	movzx  edx,BYTE PTR [esi+ebp*8+0x10]
c001beeb:	52                   	push   edx
c001beec:	6a 0c                	push   0xc
c001beee:	57                   	push   edi
c001beef:	56                   	push   esi
c001bef0:	e8 ef fe ff ff       	call   c001bde4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bef5:	83 c4 20             	add    esp,0x20
c001bef8:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001befc:	eb 4c                	jmp    c001bf4a <IDE::read(unsigned char, unsigned char)+0xa6>
c001befe:	0f b6 d3             	movzx  edx,bl
c001bf01:	83 fa 07             	cmp    edx,0x7
c001bf04:	77 12                	ja     c001bf18 <IDE::read(unsigned char, unsigned char)+0x74>
c001bf06:	0f b6 c9             	movzx  ecx,cl
c001bf09:	0f b6 d3             	movzx  edx,bl
c001bf0c:	66 8b 84 ce 5a 01 00 00 	mov    ax,WORD PTR [esi+ecx*8+0x15a]
c001bf14:	01 c2                	add    edx,eax
c001bf16:	eb 31                	jmp    c001bf49 <IDE::read(unsigned char, unsigned char)+0xa5>
c001bf18:	83 fa 0d             	cmp    edx,0xd
c001bf1b:	77 13                	ja     c001bf30 <IDE::read(unsigned char, unsigned char)+0x8c>
c001bf1d:	0f b6 c9             	movzx  ecx,cl
c001bf20:	0f b6 d3             	movzx  edx,bl
c001bf23:	8b 84 ce 5c 01 00 00 	mov    eax,DWORD PTR [esi+ecx*8+0x15c]
c001bf2a:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001bf2e:	eb 19                	jmp    c001bf49 <IDE::read(unsigned char, unsigned char)+0xa5>
c001bf30:	31 c0                	xor    eax,eax
c001bf32:	83 fa 15             	cmp    edx,0x15
c001bf35:	77 13                	ja     c001bf4a <IDE::read(unsigned char, unsigned char)+0xa6>
c001bf37:	0f b6 c9             	movzx  ecx,cl
c001bf3a:	0f b6 d3             	movzx  edx,bl
c001bf3d:	66 8b 84 ce 5e 01 00 00 	mov    ax,WORD PTR [esi+ecx*8+0x15e]
c001bf45:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001bf49:	ec                   	in     al,dx
c001bf4a:	83 c4 1c             	add    esp,0x1c
c001bf4d:	5b                   	pop    ebx
c001bf4e:	5e                   	pop    esi
c001bf4f:	5f                   	pop    edi
c001bf50:	5d                   	pop    ebp
c001bf51:	c3                   	ret    

c001bf52 <IDE::waitInterrupt(unsigned char)>:
c001bf52:	55                   	push   ebp
c001bf53:	57                   	push   edi
c001bf54:	56                   	push   esi
c001bf55:	53                   	push   ebx
c001bf56:	31 db                	xor    ebx,ebx
c001bf58:	83 ec 0c             	sub    esp,0xc
c001bf5b:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001bf5f:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001bf64:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001bf6c:	89 e8                	mov    eax,ebp
c001bf6e:	84 c0                	test   al,al
c001bf70:	75 30                	jne    c001bfa2 <IDE::waitInterrupt(unsigned char)+0x50>
c001bf72:	50                   	push   eax
c001bf73:	6a 0c                	push   0xc
c001bf75:	56                   	push   esi
c001bf76:	57                   	push   edi
c001bf77:	e8 28 ff ff ff       	call   c001bea4 <IDE::read(unsigned char, unsigned char)>
c001bf7c:	83 c4 10             	add    esp,0x10
c001bf7f:	a8 01                	test   al,0x1
c001bf81:	75 27                	jne    c001bfaa <IDE::waitInterrupt(unsigned char)+0x58>
c001bf83:	f6 c3 04             	test   bl,0x4
c001bf86:	75 12                	jne    c001bf9a <IDE::waitInterrupt(unsigned char)+0x48>
c001bf88:	83 fb 32             	cmp    ebx,0x32
c001bf8b:	7e 0d                	jle    c001bf9a <IDE::waitInterrupt(unsigned char)+0x48>
c001bf8d:	83 ec 0c             	sub    esp,0xc
c001bf90:	6a 64                	push   0x64
c001bf92:	e8 b1 a4 ff ff       	call   c0016448 <milliTenthSleep(unsigned int)>
c001bf97:	83 c4 10             	add    esp,0x10
c001bf9a:	83 fb 3c             	cmp    ebx,0x3c
c001bf9d:	74 0b                	je     c001bfaa <IDE::waitInterrupt(unsigned char)+0x58>
c001bf9f:	43                   	inc    ebx
c001bfa0:	eb c2                	jmp    c001bf64 <IDE::waitInterrupt(unsigned char)+0x12>
c001bfa2:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001bfaa:	83 c4 0c             	add    esp,0xc
c001bfad:	89 e8                	mov    eax,ebp
c001bfaf:	5b                   	pop    ebx
c001bfb0:	5e                   	pop    esi
c001bfb1:	5f                   	pop    edi
c001bfb2:	5d                   	pop    ebp
c001bfb3:	c3                   	ret    

c001bfb4 <ideChannel0IRQHandler(regs*, void*)>:
c001bfb4:	83 ec 10             	sub    esp,0x10
c001bfb7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bfbb:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001bfc2:	6a 07                	push   0x7
c001bfc4:	6a 00                	push   0x0
c001bfc6:	50                   	push   eax
c001bfc7:	e8 d8 fe ff ff       	call   c001bea4 <IDE::read(unsigned char, unsigned char)>
c001bfcc:	83 c4 1c             	add    esp,0x1c
c001bfcf:	c3                   	ret    

c001bfd0 <ideChannel1IRQHandler(regs*, void*)>:
c001bfd0:	83 ec 10             	sub    esp,0x10
c001bfd3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bfd7:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001bfde:	6a 07                	push   0x7
c001bfe0:	6a 01                	push   0x1
c001bfe2:	50                   	push   eax
c001bfe3:	e8 bc fe ff ff       	call   c001bea4 <IDE::read(unsigned char, unsigned char)>
c001bfe8:	83 c4 1c             	add    esp,0x1c
c001bfeb:	c3                   	ret    

c001bfec <IDE::enableIRQs(unsigned char, bool)>:
c001bfec:	57                   	push   edi
c001bfed:	b8 02 00 00 00       	mov    eax,0x2
c001bff2:	56                   	push   esi
c001bff3:	53                   	push   ebx
c001bff4:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bff8:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001bffc:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001c001:	74 02                	je     c001c005 <IDE::enableIRQs(unsigned char, bool)+0x19>
c001c003:	31 c0                	xor    eax,eax
c001c005:	0f b6 db             	movzx  ebx,bl
c001c008:	bf 04 00 00 00       	mov    edi,0x4
c001c00d:	88 84 de 60 01 00 00 	mov    BYTE PTR [esi+ebx*8+0x160],al
c001c014:	50                   	push   eax
c001c015:	6a 0c                	push   0xc
c001c017:	53                   	push   ebx
c001c018:	56                   	push   esi
c001c019:	e8 c6 fd ff ff       	call   c001bde4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c01e:	83 c4 10             	add    esp,0x10
c001c021:	50                   	push   eax
c001c022:	6a 0c                	push   0xc
c001c024:	53                   	push   ebx
c001c025:	56                   	push   esi
c001c026:	e8 79 fe ff ff       	call   c001bea4 <IDE::read(unsigned char, unsigned char)>
c001c02b:	83 c4 10             	add    esp,0x10
c001c02e:	4f                   	dec    edi
c001c02f:	75 f0                	jne    c001c021 <IDE::enableIRQs(unsigned char, bool)+0x35>
c001c031:	5b                   	pop    ebx
c001c032:	5e                   	pop    esi
c001c033:	5f                   	pop    edi
c001c034:	c3                   	ret    
c001c035:	90                   	nop

c001c036 <IDE::open(int, int, void*)>:
c001c036:	55                   	push   ebp
c001c037:	57                   	push   edi
c001c038:	56                   	push   esi
c001c039:	53                   	push   ebx
c001c03a:	83 ec 1c             	sub    esp,0x1c
c001c03d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001c041:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001c04a:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001c053:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001c05a:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001c061:	0f 85 de 02 00 00    	jne    c001c345 <IDE::open(int, int, void*)+0x30f>
c001c067:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001c06d:	88 04 24             	mov    BYTE PTR [esp],al
c001c070:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001c073:	83 e0 7f             	and    eax,0x7f
c001c076:	83 f8 05             	cmp    eax,0x5
c001c079:	74 05                	je     c001c080 <IDE::open(int, int, void*)+0x4a>
c001c07b:	83 f8 0f             	cmp    eax,0xf
c001c07e:	75 32                	jne    c001c0b2 <IDE::open(int, int, void*)+0x7c>
c001c080:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001c086:	83 e0 fc             	and    eax,0xfffffffc
c001c089:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001c090:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001c096:	83 e0 fc             	and    eax,0xfffffffc
c001c099:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001c0a0:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001c0a6:	83 e0 fc             	and    eax,0xfffffffc
c001c0a9:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001c0b0:	eb 14                	jmp    c001c0c6 <IDE::open(int, int, void*)+0x90>
c001c0b2:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001c0bc:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001c0c6:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001c0cd:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001c0d4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c0d8:	89 c6                	mov    esi,eax
c001c0da:	bf f8 0c 00 00       	mov    edi,0xcf8
c001c0df:	c1 e6 10             	shl    esi,0x10
c001c0e2:	89 e8                	mov    eax,ebp
c001c0e4:	89 fa                	mov    edx,edi
c001c0e6:	c1 e0 0b             	shl    eax,0xb
c001c0e9:	09 f0                	or     eax,esi
c001c0eb:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c001c0f2:	c1 e6 08             	shl    esi,0x8
c001c0f5:	09 c6                	or     esi,eax
c001c0f7:	89 f0                	mov    eax,esi
c001c0f9:	0d 08 00 00 80       	or     eax,0x80000008
c001c0fe:	ef                   	out    dx,eax
c001c0ff:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c001c104:	89 ca                	mov    edx,ecx
c001c106:	ed                   	in     eax,dx
c001c107:	c1 e8 10             	shr    eax,0x10
c001c10a:	3d ff ff 00 00       	cmp    eax,0xffff
c001c10f:	0f 84 f9 00 00 00    	je     c001c20e <IDE::open(int, int, void*)+0x1d8>
c001c115:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c001c11b:	89 fa                	mov    edx,edi
c001c11d:	89 f0                	mov    eax,esi
c001c11f:	ef                   	out    dx,eax
c001c120:	b0 fe                	mov    al,0xfe
c001c122:	89 ca                	mov    edx,ecx
c001c124:	ee                   	out    dx,al
c001c125:	89 f0                	mov    eax,esi
c001c127:	89 fa                	mov    edx,edi
c001c129:	ef                   	out    dx,eax
c001c12a:	89 ca                	mov    edx,ecx
c001c12c:	ed                   	in     eax,dx
c001c12d:	3c fe                	cmp    al,0xfe
c001c12f:	0f 85 a9 00 00 00    	jne    c001c1de <IDE::open(int, int, void*)+0x1a8>
c001c135:	8b 15 b8 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026eb8
c001c13b:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c001c142:	74 33                	je     c001c177 <IDE::open(int, int, void*)+0x141>
c001c144:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001c14a:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001c14e:	40                   	inc    eax
c001c14f:	83 ec 0c             	sub    esp,0xc
c001c152:	0f b6 c0             	movzx  eax,al
c001c155:	50                   	push   eax
c001c156:	55                   	push   ebp
c001c157:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c15b:	ff b2 68 01 00 00    	push   DWORD PTR [edx+0x168]
c001c161:	51                   	push   ecx
c001c162:	e8 45 38 ff ff       	call   c000f9ac <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001c167:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001c16c:	83 c4 1c             	add    esp,0x1c
c001c16f:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001c175:	eb 0a                	jmp    c001c181 <IDE::open(int, int, void*)+0x14b>
c001c177:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001c181:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001c188:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001c18f:	c1 e1 10             	shl    ecx,0x10
c001c192:	c1 e0 08             	shl    eax,0x8
c001c195:	bf f8 0c 00 00       	mov    edi,0xcf8
c001c19a:	09 c1                	or     ecx,eax
c001c19c:	89 fa                	mov    edx,edi
c001c19e:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001c1a5:	c1 e0 0b             	shl    eax,0xb
c001c1a8:	09 c1                	or     ecx,eax
c001c1aa:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001c1b0:	89 c8                	mov    eax,ecx
c001c1b2:	ef                   	out    dx,eax
c001c1b3:	be fc 0c 00 00       	mov    esi,0xcfc
c001c1b8:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c001c1be:	89 f2                	mov    edx,esi
c001c1c0:	ee                   	out    dx,al
c001c1c1:	89 c8                	mov    eax,ecx
c001c1c3:	89 fa                	mov    edx,edi
c001c1c5:	ef                   	out    dx,eax
c001c1c6:	89 f2                	mov    edx,esi
c001c1c8:	ed                   	in     eax,dx
c001c1c9:	0f b6 c0             	movzx  eax,al
c001c1cc:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c001c1d2:	74 4a                	je     c001c21e <IDE::open(int, int, void*)+0x1e8>
c001c1d4:	83 ec 0c             	sub    esp,0xc
c001c1d7:	68 a8 32 02 c0       	push   0xc00232a8
c001c1dc:	eb 38                	jmp    c001c216 <IDE::open(int, int, void*)+0x1e0>
c001c1de:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001c1e7:	75 1b                	jne    c001c204 <IDE::open(int, int, void*)+0x1ce>
c001c1e9:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c001c1ed:	3d 80 00 00 00       	cmp    eax,0x80
c001c1f2:	74 07                	je     c001c1fb <IDE::open(int, int, void*)+0x1c5>
c001c1f4:	3d 8a 00 00 00       	cmp    eax,0x8a
c001c1f9:	75 09                	jne    c001c204 <IDE::open(int, int, void*)+0x1ce>
c001c1fb:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001c202:	eb 1a                	jmp    c001c21e <IDE::open(int, int, void*)+0x1e8>
c001c204:	83 ec 0c             	sub    esp,0xc
c001c207:	68 b0 32 02 c0       	push   0xc00232b0
c001c20c:	eb 08                	jmp    c001c216 <IDE::open(int, int, void*)+0x1e0>
c001c20e:	83 ec 0c             	sub    esp,0xc
c001c211:	68 e1 32 02 c0       	push   0xc00232e1
c001c216:	e8 78 54 ff ff       	call   c0011693 <KePanic(char const*)>
c001c21b:	83 c4 10             	add    esp,0x10
c001c21e:	f6 83 1f 01 00 00 80 	test   BYTE PTR [ebx+0x11f],0x80
c001c225:	74 1a                	je     c001c241 <IDE::open(int, int, void*)+0x20b>
c001c227:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001c22d:	83 e0 fc             	and    eax,0xfffffffc
c001c230:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001c237:	83 c0 08             	add    eax,0x8
c001c23a:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001c241:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001c247:	89 c2                	mov    edx,eax
c001c249:	83 e2 0f             	and    edx,0xf
c001c24c:	83 fa 08             	cmp    edx,0x8
c001c24f:	75 0a                	jne    c001c25b <IDE::open(int, int, void*)+0x225>
c001c251:	83 e8 02             	sub    eax,0x2
c001c254:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001c25b:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001c261:	89 c2                	mov    edx,eax
c001c263:	83 e2 0f             	and    edx,0xf
c001c266:	83 fa 08             	cmp    edx,0x8
c001c269:	75 0a                	jne    c001c275 <IDE::open(int, int, void*)+0x23f>
c001c26b:	83 e8 02             	sub    eax,0x2
c001c26e:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001c275:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001c27c:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001c283:	89 d0                	mov    eax,edx
c001c285:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001c288:	8d 7a 01             	lea    edi,[edx+0x1]
c001c28b:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001c28f:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001c293:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001c297:	83 e1 3f             	and    ecx,0x3f
c001c29a:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001c29e:	89 f9                	mov    ecx,edi
c001c2a0:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001c2a7:	0f b6 c9             	movzx  ecx,cl
c001c2aa:	8d 78 02             	lea    edi,[eax+0x2]
c001c2ad:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001c2b0:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001c2b4:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001c2b8:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001c2bc:	83 e2 3f             	and    edx,0x3f
c001c2bf:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001c2c3:	89 f9                	mov    ecx,edi
c001c2c5:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001c2cb:	0f b6 d1             	movzx  edx,cl
c001c2ce:	8d 78 03             	lea    edi,[eax+0x3]
c001c2d1:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001c2d4:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001c2d8:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001c2dc:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001c2e0:	83 e1 3f             	and    ecx,0x3f
c001c2e3:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001c2e7:	89 f9                	mov    ecx,edi
c001c2e9:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001c2ef:	0f b6 c9             	movzx  ecx,cl
c001c2f2:	8d 78 04             	lea    edi,[eax+0x4]
c001c2f5:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001c2f8:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001c2fc:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001c300:	89 fa                	mov    edx,edi
c001c302:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001c308:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001c30c:	83 e2 3f             	and    edx,0x3f
c001c30f:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001c313:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001c31a:	66 85 f6             	test   si,si
c001c31d:	74 65                	je     c001c384 <IDE::open(int, int, void*)+0x34e>
c001c31f:	89 f9                	mov    ecx,edi
c001c321:	83 c0 05             	add    eax,0x5
c001c324:	0f b6 d1             	movzx  edx,cl
c001c327:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001c32a:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001c32e:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001c332:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001c338:	8a 44 93 07          	mov    al,BYTE PTR [ebx+edx*4+0x7]
c001c33c:	83 e0 3f             	and    eax,0x3f
c001c33f:	88 44 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],al
c001c343:	eb 3f                	jmp    c001c384 <IDE::open(int, int, void*)+0x34e>
c001c345:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001c34b:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001c352:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001c359:	05 06 02 00 00       	add    eax,0x206
c001c35e:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001c365:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001c36c:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001c373:	05 06 02 00 00       	add    eax,0x206
c001c378:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001c37f:	e9 bd fe ff ff       	jmp    c001c241 <IDE::open(int, int, void*)+0x20b>
c001c384:	50                   	push   eax
c001c385:	50                   	push   eax
c001c386:	6a 00                	push   0x0
c001c388:	53                   	push   ebx
c001c389:	e8 30 fa ff ff       	call   c001bdbe <IDE::prepareInterrupt(unsigned char)>
c001c38e:	5a                   	pop    edx
c001c38f:	59                   	pop    ecx
c001c390:	6a 01                	push   0x1
c001c392:	53                   	push   ebx
c001c393:	e8 26 fa ff ff       	call   c001bdbe <IDE::prepareInterrupt(unsigned char)>
c001c398:	83 c4 0c             	add    esp,0xc
c001c39b:	6a 00                	push   0x0
c001c39d:	6a 00                	push   0x0
c001c39f:	53                   	push   ebx
c001c3a0:	e8 47 fc ff ff       	call   c001bfec <IDE::enableIRQs(unsigned char, bool)>
c001c3a5:	83 c4 0c             	add    esp,0xc
c001c3a8:	6a 00                	push   0x0
c001c3aa:	6a 01                	push   0x1
c001c3ac:	53                   	push   ebx
c001c3ad:	e8 3a fc ff ff       	call   c001bfec <IDE::enableIRQs(unsigned char, bool)>
c001c3b2:	83 c4 10             	add    esp,0x10
c001c3b5:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001c3bc:	74 34                	je     c001c3f2 <IDE::open(int, int, void*)+0x3bc>
c001c3be:	83 ec 0c             	sub    esp,0xc
c001c3c1:	53                   	push   ebx
c001c3c2:	6a 01                	push   0x1
c001c3c4:	68 b4 bf 01 c0       	push   0xc001bfb4
c001c3c9:	6a 0e                	push   0xe
c001c3cb:	53                   	push   ebx
c001c3cc:	e8 15 06 ff ff       	call   c000c9e6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c3d1:	83 c4 14             	add    esp,0x14
c001c3d4:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001c3da:	53                   	push   ebx
c001c3db:	6a 01                	push   0x1
c001c3dd:	68 d0 bf 01 c0       	push   0xc001bfd0
c001c3e2:	6a 0f                	push   0xf
c001c3e4:	53                   	push   ebx
c001c3e5:	e8 fc 05 ff ff       	call   c000c9e6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c3ea:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001c3f0:	eb 38                	jmp    c001c42a <IDE::open(int, int, void*)+0x3f4>
c001c3f2:	83 ec 0c             	sub    esp,0xc
c001c3f5:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001c3ff:	53                   	push   ebx
c001c400:	6a 00                	push   0x0
c001c402:	68 b4 bf 01 c0       	push   0xc001bfb4
c001c407:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001c40d:	53                   	push   ebx
c001c40e:	e8 d3 05 ff ff       	call   c000c9e6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c413:	83 c4 14             	add    esp,0x14
c001c416:	53                   	push   ebx
c001c417:	6a 00                	push   0x0
c001c419:	68 d0 bf 01 c0       	push   0xc001bfd0
c001c41e:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001c424:	53                   	push   ebx
c001c425:	e8 bc 05 ff ff       	call   c000c9e6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c42a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c42c:	83 c4 20             	add    esp,0x20
c001c42f:	83 ec 0c             	sub    esp,0xc
c001c432:	53                   	push   ebx
c001c433:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001c436:	83 c4 0c             	add    esp,0xc
c001c439:	6a 07                	push   0x7
c001c43b:	6a 00                	push   0x0
c001c43d:	53                   	push   ebx
c001c43e:	e8 61 fa ff ff       	call   c001bea4 <IDE::read(unsigned char, unsigned char)>
c001c443:	83 c4 0c             	add    esp,0xc
c001c446:	6a 07                	push   0x7
c001c448:	6a 01                	push   0x1
c001c44a:	53                   	push   ebx
c001c44b:	e8 54 fa ff ff       	call   c001bea4 <IDE::read(unsigned char, unsigned char)>
c001c450:	83 c4 0c             	add    esp,0xc
c001c453:	6a 01                	push   0x1
c001c455:	6a 00                	push   0x0
c001c457:	53                   	push   ebx
c001c458:	e8 8f fb ff ff       	call   c001bfec <IDE::enableIRQs(unsigned char, bool)>
c001c45d:	83 c4 0c             	add    esp,0xc
c001c460:	6a 01                	push   0x1
c001c462:	6a 01                	push   0x1
c001c464:	53                   	push   ebx
c001c465:	e8 82 fb ff ff       	call   c001bfec <IDE::enableIRQs(unsigned char, bool)>
c001c46a:	83 c4 2c             	add    esp,0x2c
c001c46d:	31 c0                	xor    eax,eax
c001c46f:	5b                   	pop    ebx
c001c470:	5e                   	pop    esi
c001c471:	5f                   	pop    edi
c001c472:	5d                   	pop    ebp
c001c473:	c3                   	ret    

c001c474 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001c474:	55                   	push   ebp
c001c475:	57                   	push   edi
c001c476:	56                   	push   esi
c001c477:	53                   	push   ebx
c001c478:	83 ec 1c             	sub    esp,0x1c
c001c47b:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001c47f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001c483:	8d 42 f8             	lea    eax,[edx-0x8]
c001c486:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001c48a:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001c48e:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001c492:	3c 03                	cmp    al,0x3
c001c494:	77 5a                	ja     c001c4f0 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x7c>
c001c496:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001c49a:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001c49e:	0f b6 db             	movzx  ebx,bl
c001c4a1:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001c4a4:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001c4a9:	0c 80                	or     al,0x80
c001c4ab:	50                   	push   eax
c001c4ac:	6a 0c                	push   0xc
c001c4ae:	53                   	push   ebx
c001c4af:	56                   	push   esi
c001c4b0:	e8 2f f9 ff ff       	call   c001bde4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c4b5:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001c4ba:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001c4be:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001c4c2:	0f b6 d2             	movzx  edx,dl
c001c4c5:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001c4c9:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001c4cb:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001c4d0:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001c4d4:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001c4d8:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001c4dc:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001c4e4:	83 c4 2c             	add    esp,0x2c
c001c4e7:	5b                   	pop    ebx
c001c4e8:	5e                   	pop    esi
c001c4e9:	5f                   	pop    edi
c001c4ea:	5d                   	pop    ebp
c001c4eb:	e9 f4 f8 ff ff       	jmp    c001bde4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c4f0:	0f b6 c2             	movzx  eax,dl
c001c4f3:	83 f8 07             	cmp    eax,0x7
c001c4f6:	77 12                	ja     c001c50a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x96>
c001c4f8:	0f b6 c2             	movzx  eax,dl
c001c4fb:	0f b6 db             	movzx  ebx,bl
c001c4fe:	66 8b 94 de 5a 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15a]
c001c506:	01 c2                	add    edx,eax
c001c508:	eb 2f                	jmp    c001c539 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001c50a:	83 f8 0d             	cmp    eax,0xd
c001c50d:	77 13                	ja     c001c522 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xae>
c001c50f:	0f b6 db             	movzx  ebx,bl
c001c512:	0f b6 d2             	movzx  edx,dl
c001c515:	8b 84 de 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*8+0x15c]
c001c51c:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001c520:	eb 17                	jmp    c001c539 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001c522:	83 f8 15             	cmp    eax,0x15
c001c525:	77 14                	ja     c001c53b <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc7>
c001c527:	0f b6 db             	movzx  ebx,bl
c001c52a:	0f b6 d2             	movzx  edx,dl
c001c52d:	66 8b 84 de 5e 01 00 00 	mov    ax,WORD PTR [esi+ebx*8+0x15e]
c001c535:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001c539:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001c53b:	83 c4 1c             	add    esp,0x1c
c001c53e:	5b                   	pop    ebx
c001c53f:	5e                   	pop    esi
c001c540:	5f                   	pop    edi
c001c541:	5d                   	pop    ebp
c001c542:	c3                   	ret    
c001c543:	90                   	nop

c001c544 <IDE::detect()>:
c001c544:	55                   	push   ebp
c001c545:	57                   	push   edi
c001c546:	56                   	push   esi
c001c547:	53                   	push   ebx
c001c548:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001c54e:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001c555:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001c55c:	0f 85 a4 02 00 00    	jne    c001c806 <IDE::detect()+0x2c2>
c001c562:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001c569:	31 f6                	xor    esi,esi
c001c56b:	31 ed                	xor    ebp,ebp
c001c56d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001c575:	89 e8                	mov    eax,ebp
c001c577:	c1 e0 06             	shl    eax,0x6
c001c57a:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001c582:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001c586:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001c58a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c58e:	c1 e0 04             	shl    eax,0x4
c001c591:	83 c8 a0             	or     eax,0xffffffa0
c001c594:	0f b6 c0             	movzx  eax,al
c001c597:	50                   	push   eax
c001c598:	6a 06                	push   0x6
c001c59a:	56                   	push   esi
c001c59b:	53                   	push   ebx
c001c59c:	e8 43 f8 ff ff       	call   c001bde4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c5a1:	83 c4 0c             	add    esp,0xc
c001c5a4:	6a 0c                	push   0xc
c001c5a6:	56                   	push   esi
c001c5a7:	53                   	push   ebx
c001c5a8:	e8 f7 f8 ff ff       	call   c001bea4 <IDE::read(unsigned char, unsigned char)>
c001c5ad:	83 c4 0c             	add    esp,0xc
c001c5b0:	6a 0c                	push   0xc
c001c5b2:	56                   	push   esi
c001c5b3:	53                   	push   ebx
c001c5b4:	e8 eb f8 ff ff       	call   c001bea4 <IDE::read(unsigned char, unsigned char)>
c001c5b9:	83 c4 0c             	add    esp,0xc
c001c5bc:	6a 0c                	push   0xc
c001c5be:	56                   	push   esi
c001c5bf:	53                   	push   ebx
c001c5c0:	e8 df f8 ff ff       	call   c001bea4 <IDE::read(unsigned char, unsigned char)>
c001c5c5:	83 c4 0c             	add    esp,0xc
c001c5c8:	6a 0c                	push   0xc
c001c5ca:	56                   	push   esi
c001c5cb:	53                   	push   ebx
c001c5cc:	e8 d3 f8 ff ff       	call   c001bea4 <IDE::read(unsigned char, unsigned char)>
c001c5d1:	68 ec 00 00 00       	push   0xec
c001c5d6:	6a 07                	push   0x7
c001c5d8:	56                   	push   esi
c001c5d9:	53                   	push   ebx
c001c5da:	e8 05 f8 ff ff       	call   c001bde4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c5df:	83 c4 1c             	add    esp,0x1c
c001c5e2:	6a 0c                	push   0xc
c001c5e4:	56                   	push   esi
c001c5e5:	53                   	push   ebx
c001c5e6:	e8 b9 f8 ff ff       	call   c001bea4 <IDE::read(unsigned char, unsigned char)>
c001c5eb:	83 c4 0c             	add    esp,0xc
c001c5ee:	6a 0c                	push   0xc
c001c5f0:	56                   	push   esi
c001c5f1:	53                   	push   ebx
c001c5f2:	e8 ad f8 ff ff       	call   c001bea4 <IDE::read(unsigned char, unsigned char)>
c001c5f7:	83 c4 0c             	add    esp,0xc
c001c5fa:	6a 0c                	push   0xc
c001c5fc:	56                   	push   esi
c001c5fd:	53                   	push   ebx
c001c5fe:	e8 a1 f8 ff ff       	call   c001bea4 <IDE::read(unsigned char, unsigned char)>
c001c603:	83 c4 0c             	add    esp,0xc
c001c606:	6a 0c                	push   0xc
c001c608:	56                   	push   esi
c001c609:	53                   	push   ebx
c001c60a:	e8 95 f8 ff ff       	call   c001bea4 <IDE::read(unsigned char, unsigned char)>
c001c60f:	83 c4 0c             	add    esp,0xc
c001c612:	6a 0c                	push   0xc
c001c614:	56                   	push   esi
c001c615:	53                   	push   ebx
c001c616:	e8 89 f8 ff ff       	call   c001bea4 <IDE::read(unsigned char, unsigned char)>
c001c61b:	83 c4 10             	add    esp,0x10
c001c61e:	84 c0                	test   al,al
c001c620:	0f 84 60 01 00 00    	je     c001c786 <IDE::detect()+0x242>
c001c626:	31 ff                	xor    edi,edi
c001c628:	50                   	push   eax
c001c629:	6a 0c                	push   0xc
c001c62b:	56                   	push   esi
c001c62c:	53                   	push   ebx
c001c62d:	e8 72 f8 ff ff       	call   c001bea4 <IDE::read(unsigned char, unsigned char)>
c001c632:	83 c4 10             	add    esp,0x10
c001c635:	a8 01                	test   al,0x1
c001c637:	0f 85 6a 01 00 00    	jne    c001c7a7 <IDE::detect()+0x263>
c001c63d:	a8 80                	test   al,0x80
c001c63f:	75 04                	jne    c001c645 <IDE::detect()+0x101>
c001c641:	a8 08                	test   al,0x8
c001c643:	75 23                	jne    c001c668 <IDE::detect()+0x124>
c001c645:	47                   	inc    edi
c001c646:	81 ff 17 01 00 00    	cmp    edi,0x117
c001c64c:	7e da                	jle    c001c628 <IDE::detect()+0xe4>
c001c64e:	83 ec 0c             	sub    esp,0xc
c001c651:	6a 32                	push   0x32
c001c653:	e8 f0 9d ff ff       	call   c0016448 <milliTenthSleep(unsigned int)>
c001c658:	83 c4 10             	add    esp,0x10
c001c65b:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c001c661:	75 c5                	jne    c001c628 <IDE::detect()+0xe4>
c001c663:	e9 3f 01 00 00       	jmp    c001c7a7 <IDE::detect()+0x263>
c001c668:	31 c9                	xor    ecx,ecx
c001c66a:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001c66e:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001c672:	83 ec 0c             	sub    esp,0xc
c001c675:	68 80 00 00 00       	push   0x80
c001c67a:	57                   	push   edi
c001c67b:	6a 00                	push   0x0
c001c67d:	56                   	push   esi
c001c67e:	53                   	push   ebx
c001c67f:	e8 f0 fd ff ff       	call   c001c474 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001c684:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001c689:	89 e8                	mov    eax,ebp
c001c68b:	89 d1                	mov    ecx,edx
c001c68d:	c1 e0 06             	shl    eax,0x6
c001c690:	01 d8                	add    eax,ebx
c001c692:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001c699:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001c6a0:	89 f2                	mov    edx,esi
c001c6a2:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001c6a8:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001c6ac:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001c6b2:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001c6b6:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001c6bd:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001c6c5:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001c6cc:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001c6d4:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001c6da:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001c6e1:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001c6e7:	8d 54 24 58          	lea    edx,[esp+0x58]
c001c6eb:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001c6ef:	83 c4 20             	add    esp,0x20
c001c6f2:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c001c6f5:	83 c0 02             	add    eax,0x2
c001c6f8:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c001c6fe:	83 c7 02             	add    edi,0x2
c001c701:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c001c704:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c001c70a:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c001c70e:	75 e2                	jne    c001c6f2 <IDE::detect()+0x1ae>
c001c710:	89 e8                	mov    eax,ebp
c001c712:	c1 e0 06             	shl    eax,0x6
c001c715:	01 d8                	add    eax,ebx
c001c717:	0f b7 90 74 01 00 00 	movzx  edx,WORD PTR [eax+0x174]
c001c71e:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001c725:	c1 ea 09             	shr    edx,0x9
c001c728:	83 e2 01             	and    edx,0x1
c001c72b:	80 e1 01             	and    cl,0x1
c001c72e:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001c734:	75 22                	jne    c001c758 <IDE::detect()+0x214>
c001c736:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c001c73d:	74 46                	je     c001c785 <IDE::detect()+0x241>
c001c73f:	83 ec 0c             	sub    esp,0xc
c001c742:	68 7c 01 00 00       	push   0x17c
c001c747:	e8 6a b3 fe ff       	call   c0007ab6 <malloc>
c001c74c:	89 c7                	mov    edi,eax
c001c74e:	89 04 24             	mov    DWORD PTR [esp],eax
c001c751:	e8 1a 05 00 00       	call   c001cc70 <ATA::ATA()>
c001c756:	eb 17                	jmp    c001c76f <IDE::detect()+0x22b>
c001c758:	83 ec 0c             	sub    esp,0xc
c001c75b:	68 84 01 00 00       	push   0x184
c001c760:	e8 51 b3 fe ff       	call   c0007ab6 <malloc>
c001c765:	89 c7                	mov    edi,eax
c001c767:	89 04 24             	mov    DWORD PTR [esp],eax
c001c76a:	e8 45 0e 00 00       	call   c001d5b4 <ATAPI::ATAPI()>
c001c76f:	5a                   	pop    edx
c001c770:	59                   	pop    ecx
c001c771:	57                   	push   edi
c001c772:	53                   	push   ebx
c001c773:	e8 c2 02 ff ff       	call   c000ca3a <Device::addChild(Device*)>
c001c778:	8b 07                	mov    eax,DWORD PTR [edi]
c001c77a:	53                   	push   ebx
c001c77b:	55                   	push   ebp
c001c77c:	6a 00                	push   0x0
c001c77e:	57                   	push   edi
c001c77f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c782:	83 c4 20             	add    esp,0x20
c001c785:	45                   	inc    ebp
c001c786:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c001c78b:	74 0d                	je     c001c79a <IDE::detect()+0x256>
c001c78d:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c001c795:	e9 db fd ff ff       	jmp    c001c575 <IDE::detect()+0x31>
c001c79a:	4e                   	dec    esi
c001c79b:	74 69                	je     c001c806 <IDE::detect()+0x2c2>
c001c79d:	be 01 00 00 00       	mov    esi,0x1
c001c7a2:	e9 c6 fd ff ff       	jmp    c001c56d <IDE::detect()+0x29>
c001c7a7:	50                   	push   eax
c001c7a8:	6a 04                	push   0x4
c001c7aa:	56                   	push   esi
c001c7ab:	53                   	push   ebx
c001c7ac:	e8 f3 f6 ff ff       	call   c001bea4 <IDE::read(unsigned char, unsigned char)>
c001c7b1:	83 c4 0c             	add    esp,0xc
c001c7b4:	89 c7                	mov    edi,eax
c001c7b6:	6a 05                	push   0x5
c001c7b8:	56                   	push   esi
c001c7b9:	53                   	push   ebx
c001c7ba:	e8 e5 f6 ff ff       	call   c001bea4 <IDE::read(unsigned char, unsigned char)>
c001c7bf:	83 c4 10             	add    esp,0x10
c001c7c2:	89 f9                	mov    ecx,edi
c001c7c4:	0f b6 c0             	movzx  eax,al
c001c7c7:	0f b6 f9             	movzx  edi,cl
c001c7ca:	83 ff 14             	cmp    edi,0x14
c001c7cd:	75 07                	jne    c001c7d6 <IDE::detect()+0x292>
c001c7cf:	3d eb 00 00 00       	cmp    eax,0xeb
c001c7d4:	eb 0a                	jmp    c001c7e0 <IDE::detect()+0x29c>
c001c7d6:	3d 96 00 00 00       	cmp    eax,0x96
c001c7db:	75 a9                	jne    c001c786 <IDE::detect()+0x242>
c001c7dd:	83 ff 69             	cmp    edi,0x69
c001c7e0:	75 a4                	jne    c001c786 <IDE::detect()+0x242>
c001c7e2:	68 a1 00 00 00       	push   0xa1
c001c7e7:	6a 07                	push   0x7
c001c7e9:	56                   	push   esi
c001c7ea:	53                   	push   ebx
c001c7eb:	e8 f4 f5 ff ff       	call   c001bde4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c7f0:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c001c7f7:	e8 4c 9c ff ff       	call   c0016448 <milliTenthSleep(unsigned int)>
c001c7fc:	83 c4 10             	add    esp,0x10
c001c7ff:	b1 01                	mov    cl,0x1
c001c801:	e9 64 fe ff ff       	jmp    c001c66a <IDE::detect()+0x126>
c001c806:	81 c4 1c 02 00 00    	add    esp,0x21c
c001c80c:	5b                   	pop    ebx
c001c80d:	5e                   	pop    esi
c001c80e:	5f                   	pop    edi
c001c80f:	5d                   	pop    ebp
c001c810:	c3                   	ret    
c001c811:	90                   	nop

c001c812 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001c812:	55                   	push   ebp
c001c813:	57                   	push   edi
c001c814:	56                   	push   esi
c001c815:	53                   	push   ebx
c001c816:	83 ec 1c             	sub    esp,0x1c
c001c819:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c81d:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001c821:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c825:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001c829:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c82d:	88 c3                	mov    bl,al
c001c82f:	25 ff 00 00 00       	and    eax,0xff
c001c834:	0f 84 88 00 00 00    	je     c001c8c2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c83a:	83 ec 0c             	sub    esp,0xc
c001c83d:	89 c7                	mov    edi,eax
c001c83f:	68 0b 33 02 c0       	push   0xc002330b
c001c844:	e8 fc e0 fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001c849:	83 c4 10             	add    esp,0x10
c001c84c:	83 ff 01             	cmp    edi,0x1
c001c84f:	74 6b                	je     c001c8bc <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaa>
c001c851:	83 ff 02             	cmp    edi,0x2
c001c854:	75 58                	jne    c001c8ae <IDE::printError(unsigned char, unsigned char, unsigned char)+0x9c>
c001c856:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c001c85b:	01 ff                	add    edi,edi
c001c85d:	50                   	push   eax
c001c85e:	09 fe                	or     esi,edi
c001c860:	6a 01                	push   0x1
c001c862:	89 f0                	mov    eax,esi
c001c864:	0f b6 f0             	movzx  esi,al
c001c867:	c1 e6 06             	shl    esi,0x6
c001c86a:	0f b6 84 35 6d 01 00 00 	movzx  eax,BYTE PTR [ebp+esi*1+0x16d]
c001c872:	50                   	push   eax
c001c873:	55                   	push   ebp
c001c874:	e8 2b f6 ff ff       	call   c001bea4 <IDE::read(unsigned char, unsigned char)>
c001c879:	83 c4 10             	add    esp,0x10
c001c87c:	a8 01                	test   al,0x1
c001c87e:	74 02                	je     c001c882 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x70>
c001c880:	b3 07                	mov    bl,0x7
c001c882:	a8 02                	test   al,0x2
c001c884:	74 02                	je     c001c888 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x76>
c001c886:	b3 03                	mov    bl,0x3
c001c888:	a8 04                	test   al,0x4
c001c88a:	74 02                	je     c001c88e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7c>
c001c88c:	b3 14                	mov    bl,0x14
c001c88e:	a8 08                	test   al,0x8
c001c890:	74 02                	je     c001c894 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x82>
c001c892:	b3 03                	mov    bl,0x3
c001c894:	a8 10                	test   al,0x10
c001c896:	74 02                	je     c001c89a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x88>
c001c898:	b3 15                	mov    bl,0x15
c001c89a:	a8 20                	test   al,0x20
c001c89c:	74 02                	je     c001c8a0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8e>
c001c89e:	b3 03                	mov    bl,0x3
c001c8a0:	a8 40                	test   al,0x40
c001c8a2:	74 02                	je     c001c8a6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001c8a4:	b3 16                	mov    bl,0x16
c001c8a6:	a8 80                	test   al,0x80
c001c8a8:	74 18                	je     c001c8c2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c8aa:	b3 0d                	mov    bl,0xd
c001c8ac:	eb 14                	jmp    c001c8c2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c8ae:	83 ff 03             	cmp    edi,0x3
c001c8b1:	74 0d                	je     c001c8c0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xae>
c001c8b3:	83 ff 04             	cmp    edi,0x4
c001c8b6:	75 0a                	jne    c001c8c2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c8b8:	b3 08                	mov    bl,0x8
c001c8ba:	eb 06                	jmp    c001c8c2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c8bc:	b3 13                	mov    bl,0x13
c001c8be:	eb 02                	jmp    c001c8c2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c8c0:	b3 17                	mov    bl,0x17
c001c8c2:	83 c4 1c             	add    esp,0x1c
c001c8c5:	88 d8                	mov    al,bl
c001c8c7:	5b                   	pop    ebx
c001c8c8:	5e                   	pop    esi
c001c8c9:	5f                   	pop    edi
c001c8ca:	5d                   	pop    ebp
c001c8cb:	c3                   	ret    

c001c8cc <IDE::polling(unsigned char, unsigned int)>:
c001c8cc:	57                   	push   edi
c001c8cd:	56                   	push   esi
c001c8ce:	53                   	push   ebx
c001c8cf:	bb 04 00 00 00       	mov    ebx,0x4
c001c8d4:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001c8d8:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001c8dd:	52                   	push   edx
c001c8de:	6a 0c                	push   0xc
c001c8e0:	56                   	push   esi
c001c8e1:	57                   	push   edi
c001c8e2:	e8 bd f5 ff ff       	call   c001bea4 <IDE::read(unsigned char, unsigned char)>
c001c8e7:	83 c4 10             	add    esp,0x10
c001c8ea:	4b                   	dec    ebx
c001c8eb:	75 f0                	jne    c001c8dd <IDE::polling(unsigned char, unsigned int)+0x11>
c001c8ed:	bb a0 86 01 00       	mov    ebx,0x186a0
c001c8f2:	50                   	push   eax
c001c8f3:	6a 0c                	push   0xc
c001c8f5:	56                   	push   esi
c001c8f6:	57                   	push   edi
c001c8f7:	e8 a8 f5 ff ff       	call   c001bea4 <IDE::read(unsigned char, unsigned char)>
c001c8fc:	83 c4 10             	add    esp,0x10
c001c8ff:	a8 01                	test   al,0x1
c001c901:	75 17                	jne    c001c91a <IDE::polling(unsigned char, unsigned int)+0x4e>
c001c903:	a8 20                	test   al,0x20
c001c905:	75 0f                	jne    c001c916 <IDE::polling(unsigned char, unsigned int)+0x4a>
c001c907:	4b                   	dec    ebx
c001c908:	74 10                	je     c001c91a <IDE::polling(unsigned char, unsigned int)+0x4e>
c001c90a:	a8 80                	test   al,0x80
c001c90c:	75 e4                	jne    c001c8f2 <IDE::polling(unsigned char, unsigned int)+0x26>
c001c90e:	a8 08                	test   al,0x8
c001c910:	74 e0                	je     c001c8f2 <IDE::polling(unsigned char, unsigned int)+0x26>
c001c912:	31 c0                	xor    eax,eax
c001c914:	eb 06                	jmp    c001c91c <IDE::polling(unsigned char, unsigned int)+0x50>
c001c916:	b0 01                	mov    al,0x1
c001c918:	eb 02                	jmp    c001c91c <IDE::polling(unsigned char, unsigned int)+0x50>
c001c91a:	b0 02                	mov    al,0x2
c001c91c:	5b                   	pop    ebx
c001c91d:	5e                   	pop    esi
c001c91e:	5f                   	pop    edi
c001c91f:	c3                   	ret    

c001c920 <SATABus::close(int, int, void*)>:
c001c920:	31 c0                	xor    eax,eax
c001c922:	c3                   	ret    
c001c923:	90                   	nop

c001c924 <SATABus::detect()>:
c001c924:	c3                   	ret    
c001c925:	90                   	nop

c001c926 <SATABus::SATABus()>:
c001c926:	83 ec 0c             	sub    esp,0xc
c001c929:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c92d:	83 ec 08             	sub    esp,0x8
c001c930:	68 44 33 02 c0       	push   0xc0023344
c001c935:	50                   	push   eax
c001c936:	e8 41 04 ff ff       	call   c000cd7c <HardDiskController::HardDiskController(char const*)>
c001c93b:	83 c4 10             	add    esp,0x10
c001c93e:	ba 70 33 02 c0       	mov    edx,0xc0023370
c001c943:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c947:	89 10                	mov    DWORD PTR [eax],edx
c001c949:	83 ec 0c             	sub    esp,0xc
c001c94c:	6a 50                	push   0x50
c001c94e:	e8 3b b5 fe ff       	call   c0007e8e <Phys::allocateContiguousPages(int)>
c001c953:	83 c4 10             	add    esp,0x10
c001c956:	89 c2                	mov    edx,eax
c001c958:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c95c:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001c962:	83 ec 0c             	sub    esp,0xc
c001c965:	6a 50                	push   0x50
c001c967:	e8 a1 cc fe ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c001c96c:	83 c4 10             	add    esp,0x10
c001c96f:	89 c2                	mov    edx,eax
c001c971:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c975:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001c97b:	a1 b0 6f 02 c0       	mov    eax,ds:0xc0026fb0
c001c980:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c984:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001c98a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c98e:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001c994:	83 ec 0c             	sub    esp,0xc
c001c997:	6a 03                	push   0x3
c001c999:	6a 50                	push   0x50
c001c99b:	51                   	push   ecx
c001c99c:	52                   	push   edx
c001c99d:	50                   	push   eax
c001c99e:	e8 77 d5 fe ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001c9a3:	83 c4 20             	add    esp,0x20
c001c9a6:	90                   	nop
c001c9a7:	83 c4 0c             	add    esp,0xc
c001c9aa:	c3                   	ret    
c001c9ab:	90                   	nop

c001c9ac <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001c9ac:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c9b0:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001c9b3:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001c9b6:	09 c2                	or     edx,eax
c001c9b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c9bc:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001c9c2:	8b 08                	mov    ecx,DWORD PTR [eax]
c001c9c4:	31 c0                	xor    eax,eax
c001c9c6:	c1 e9 08             	shr    ecx,0x8
c001c9c9:	83 e1 0f             	and    ecx,0xf
c001c9cc:	39 c8                	cmp    eax,ecx
c001c9ce:	74 0a                	je     c001c9da <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c001c9d0:	f6 c2 01             	test   dl,0x1
c001c9d3:	74 08                	je     c001c9dd <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001c9d5:	d1 ea                	shr    edx,1
c001c9d7:	40                   	inc    eax
c001c9d8:	eb f2                	jmp    c001c9cc <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c001c9da:	83 c8 ff             	or     eax,0xffffffff
c001c9dd:	c3                   	ret    

c001c9de <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001c9de:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c9e2:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001c9e5:	89 c2                	mov    edx,eax
c001c9e7:	c1 ea 08             	shr    edx,0x8
c001c9ea:	83 e2 0f             	and    edx,0xf
c001c9ed:	4a                   	dec    edx
c001c9ee:	75 32                	jne    c001ca22 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001c9f0:	83 e0 0f             	and    eax,0xf
c001c9f3:	83 f8 03             	cmp    eax,0x3
c001c9f6:	75 2a                	jne    c001ca22 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001c9f8:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001c9fb:	b8 02 00 00 00       	mov    eax,0x2
c001ca00:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001ca06:	74 1c                	je     c001ca24 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001ca08:	b8 04 00 00 00       	mov    eax,0x4
c001ca0d:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001ca13:	74 0f                	je     c001ca24 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001ca15:	31 c0                	xor    eax,eax
c001ca17:	83 fa 03             	cmp    edx,0x3
c001ca1a:	0f 94 c0             	sete   al
c001ca1d:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001ca21:	c3                   	ret    
c001ca22:	31 c0                	xor    eax,eax
c001ca24:	c3                   	ret    
c001ca25:	90                   	nop

c001ca26 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001ca26:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ca2a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001ca2d:	0f ba e2 0f          	bt     edx,0xf
c001ca31:	72 f7                	jb     c001ca2a <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001ca33:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001ca36:	83 ca 10             	or     edx,0x10
c001ca39:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001ca3c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001ca3f:	83 ca 01             	or     edx,0x1
c001ca42:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001ca45:	c3                   	ret    

c001ca46 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001ca46:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ca4a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001ca4d:	83 e2 fe             	and    edx,0xfffffffe
c001ca50:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001ca53:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001ca56:	83 e2 ef             	and    edx,0xffffffef
c001ca59:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001ca5c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001ca5f:	0f ba e2 0e          	bt     edx,0xe
c001ca63:	72 f7                	jb     c001ca5c <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001ca65:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001ca68:	0f ba e2 0f          	bt     edx,0xf
c001ca6c:	72 ee                	jb     c001ca5c <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001ca6e:	c3                   	ret    
c001ca6f:	90                   	nop

c001ca70 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001ca70:	55                   	push   ebp
c001ca71:	57                   	push   edi
c001ca72:	56                   	push   esi
c001ca73:	53                   	push   ebx
c001ca74:	83 ec 1c             	sub    esp,0x1c
c001ca77:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001ca7b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001ca7f:	53                   	push   ebx
c001ca80:	56                   	push   esi
c001ca81:	e8 c0 ff ff ff       	call   c001ca46 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001ca86:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001ca8a:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001ca90:	83 ec 0c             	sub    esp,0xc
c001ca93:	c1 e5 0a             	shl    ebp,0xa
c001ca96:	01 e8                	add    eax,ebp
c001ca98:	89 03                	mov    DWORD PTR [ebx],eax
c001ca9a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ca9c:	68 00 04 00 00       	push   0x400
c001caa1:	6a 00                	push   0x0
c001caa3:	50                   	push   eax
c001caa4:	e8 47 3a fe ff       	call   c00004f0 <memset>
c001caa9:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c001caaf:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001cab3:	01 e8                	add    eax,ebp
c001cab5:	83 c4 1c             	add    esp,0x1c
c001cab8:	89 03                	mov    DWORD PTR [ebx],eax
c001caba:	c1 e2 08             	shl    edx,0x8
c001cabd:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001cac4:	8d ba 00 80 00 00    	lea    edi,[edx+0x8000]
c001caca:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001cad0:	01 f8                	add    eax,edi
c001cad2:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001cad5:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001cad8:	68 00 01 00 00       	push   0x100
c001cadd:	6a 00                	push   0x0
c001cadf:	50                   	push   eax
c001cae0:	e8 0b 3a fe ff       	call   c00004f0 <memset>
c001cae5:	8b 96 5c 01 00 00    	mov    edx,DWORD PTR [esi+0x15c]
c001caeb:	01 fa                	add    edx,edi
c001caed:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001caf1:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c001caf4:	c1 e7 0d             	shl    edi,0xd
c001caf7:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001cafe:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c001cb04:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c001cb0a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001cb0e:	31 ff                	xor    edi,edi
c001cb10:	83 c4 10             	add    esp,0x10
c001cb13:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c001cb19:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cb1d:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001cb23:	83 c5 20             	add    ebp,0x20
c001cb26:	01 f8                	add    eax,edi
c001cb28:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001cb2b:	52                   	push   edx
c001cb2c:	68 00 01 00 00       	push   0x100
c001cb31:	6a 00                	push   0x0
c001cb33:	50                   	push   eax
c001cb34:	e8 b7 39 fe ff       	call   c00004f0 <memset>
c001cb39:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001cb3d:	83 c4 10             	add    esp,0x10
c001cb40:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c001cb46:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c001cb4d:	01 f8                	add    eax,edi
c001cb4f:	81 c7 00 01 00 00    	add    edi,0x100
c001cb55:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001cb58:	81 ff 00 20 00 00    	cmp    edi,0x2000
c001cb5e:	75 b3                	jne    c001cb13 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa3>
c001cb60:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001cb67:	50                   	push   eax
c001cb68:	50                   	push   eax
c001cb69:	53                   	push   ebx
c001cb6a:	56                   	push   esi
c001cb6b:	e8 b6 fe ff ff       	call   c001ca26 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001cb70:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001cb77:	83 c4 2c             	add    esp,0x2c
c001cb7a:	5b                   	pop    ebx
c001cb7b:	5e                   	pop    esi
c001cb7c:	5f                   	pop    edi
c001cb7d:	5d                   	pop    ebp
c001cb7e:	c3                   	ret    
c001cb7f:	90                   	nop

c001cb80 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001cb80:	55                   	push   ebp
c001cb81:	57                   	push   edi
c001cb82:	56                   	push   esi
c001cb83:	53                   	push   ebx
c001cb84:	31 db                	xor    ebx,ebx
c001cb86:	83 ec 0c             	sub    esp,0xc
c001cb89:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cb8d:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001cb91:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c001cb94:	f7 c7 01 00 00 00    	test   edi,0x1
c001cb9a:	74 7a                	je     c001cc16 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001cb9c:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001cba0:	89 d8                	mov    eax,ebx
c001cba2:	c1 e0 07             	shl    eax,0x7
c001cba5:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c001cbac:	55                   	push   ebp
c001cbad:	56                   	push   esi
c001cbae:	e8 2b fe ff ff       	call   c001c9de <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001cbb3:	5a                   	pop    edx
c001cbb4:	83 f8 01             	cmp    eax,0x1
c001cbb7:	59                   	pop    ecx
c001cbb8:	75 21                	jne    c001cbdb <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c001cbba:	50                   	push   eax
c001cbbb:	53                   	push   ebx
c001cbbc:	55                   	push   ebp
c001cbbd:	56                   	push   esi
c001cbbe:	e8 ad fe ff ff       	call   c001ca70 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001cbc3:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001cbca:	e8 e7 ae fe ff       	call   c0007ab6 <malloc>
c001cbcf:	89 c5                	mov    ebp,eax
c001cbd1:	89 04 24             	mov    DWORD PTR [esp],eax
c001cbd4:	e8 99 10 00 00       	call   c001dc72 <SATA::SATA()>
c001cbd9:	eb 24                	jmp    c001cbff <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c001cbdb:	83 f8 04             	cmp    eax,0x4
c001cbde:	75 36                	jne    c001cc16 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001cbe0:	51                   	push   ecx
c001cbe1:	53                   	push   ebx
c001cbe2:	55                   	push   ebp
c001cbe3:	56                   	push   esi
c001cbe4:	e8 87 fe ff ff       	call   c001ca70 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001cbe9:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001cbf0:	e8 c1 ae fe ff       	call   c0007ab6 <malloc>
c001cbf5:	89 c5                	mov    ebp,eax
c001cbf7:	89 04 24             	mov    DWORD PTR [esp],eax
c001cbfa:	e8 d5 17 00 00       	call   c001e3d4 <SATAPI::SATAPI()>
c001cbff:	58                   	pop    eax
c001cc00:	5a                   	pop    edx
c001cc01:	55                   	push   ebp
c001cc02:	56                   	push   esi
c001cc03:	e8 32 fe fe ff       	call   c000ca3a <Device::addChild(Device*)>
c001cc08:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001cc0b:	56                   	push   esi
c001cc0c:	6a 00                	push   0x0
c001cc0e:	53                   	push   ebx
c001cc0f:	55                   	push   ebp
c001cc10:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001cc13:	83 c4 20             	add    esp,0x20
c001cc16:	d1 ef                	shr    edi,1
c001cc18:	43                   	inc    ebx
c001cc19:	83 fb 20             	cmp    ebx,0x20
c001cc1c:	0f 85 72 ff ff ff    	jne    c001cb94 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c001cc22:	83 c4 0c             	add    esp,0xc
c001cc25:	5b                   	pop    ebx
c001cc26:	5e                   	pop    esi
c001cc27:	5f                   	pop    edi
c001cc28:	5d                   	pop    ebp
c001cc29:	c3                   	ret    

c001cc2a <SATABus::open(int, int, void*)>:
c001cc2a:	83 ec 14             	sub    esp,0x14
c001cc2d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cc31:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c001cc37:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001cc3d:	52                   	push   edx
c001cc3e:	50                   	push   eax
c001cc3f:	e8 3c ff ff ff       	call   c001cb80 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001cc44:	31 c0                	xor    eax,eax
c001cc46:	83 c4 1c             	add    esp,0x1c
c001cc49:	c3                   	ret    

c001cc4a <ATA::close(int, int, void*)>:
c001cc4a:	83 ec 0c             	sub    esp,0xc
c001cc4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc51:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001cc57:	85 c0                	test   eax,eax
c001cc59:	74 0c                	je     c001cc67 <ATA::close(int, int, void*)+0x1d>
c001cc5b:	83 ec 0c             	sub    esp,0xc
c001cc5e:	8b 10                	mov    edx,DWORD PTR [eax]
c001cc60:	50                   	push   eax
c001cc61:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001cc64:	83 c4 10             	add    esp,0x10
c001cc67:	31 c0                	xor    eax,eax
c001cc69:	83 c4 0c             	add    esp,0xc
c001cc6c:	c3                   	ret    
c001cc6d:	90                   	nop

c001cc6e <ATA::powerSaving(PowerSavingLevel)>:
c001cc6e:	c3                   	ret    
c001cc6f:	90                   	nop

c001cc70 <ATA::ATA()>:
c001cc70:	83 ec 0c             	sub    esp,0xc
c001cc73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc77:	83 ec 04             	sub    esp,0x4
c001cc7a:	68 00 02 00 00       	push   0x200
c001cc7f:	68 3d 34 02 c0       	push   0xc002343d
c001cc84:	50                   	push   eax
c001cc85:	e8 7c 01 ff ff       	call   c000ce06 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001cc8a:	83 c4 10             	add    esp,0x10
c001cc8d:	ba b0 33 02 c0       	mov    edx,0xc00233b0
c001cc92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc96:	89 10                	mov    DWORD PTR [eax],edx
c001cc98:	90                   	nop
c001cc99:	83 c4 0c             	add    esp,0xc
c001cc9c:	c3                   	ret    
c001cc9d:	90                   	nop

c001cc9e <ATA::flush(bool)>:
c001cc9e:	53                   	push   ebx
c001cc9f:	83 ec 08             	sub    esp,0x8
c001cca2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001cca6:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001ccab:	83 f8 01             	cmp    eax,0x1
c001ccae:	19 c0                	sbb    eax,eax
c001ccb0:	83 e0 fd             	and    eax,0xfffffffd
c001ccb3:	05 ea 00 00 00       	add    eax,0xea
c001ccb8:	50                   	push   eax
c001ccb9:	6a 07                	push   0x7
c001ccbb:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ccc2:	50                   	push   eax
c001ccc3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ccc9:	e8 16 f1 ff ff       	call   c001bde4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ccce:	83 c4 0c             	add    esp,0xc
c001ccd1:	6a 00                	push   0x0
c001ccd3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ccda:	50                   	push   eax
c001ccdb:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cce1:	e8 e6 fb ff ff       	call   c001c8cc <IDE::polling(unsigned char, unsigned int)>
c001cce6:	83 c4 18             	add    esp,0x18
c001cce9:	5b                   	pop    ebx
c001ccea:	c3                   	ret    
c001cceb:	90                   	nop

c001ccec <ATA::readyForCommand()>:
c001ccec:	56                   	push   esi
c001cced:	53                   	push   ebx
c001ccee:	53                   	push   ebx
c001ccef:	31 db                	xor    ebx,ebx
c001ccf1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ccf5:	51                   	push   ecx
c001ccf6:	6a 0c                	push   0xc
c001ccf8:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001ccff:	50                   	push   eax
c001cd00:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001cd06:	e8 99 f1 ff ff       	call   c001bea4 <IDE::read(unsigned char, unsigned char)>
c001cd0b:	83 c4 10             	add    esp,0x10
c001cd0e:	a8 88                	test   al,0x88
c001cd10:	74 1f                	je     c001cd31 <ATA::readyForCommand()+0x45>
c001cd12:	43                   	inc    ebx
c001cd13:	83 fb 63             	cmp    ebx,0x63
c001cd16:	7e dd                	jle    c001ccf5 <ATA::readyForCommand()+0x9>
c001cd18:	83 ec 0c             	sub    esp,0xc
c001cd1b:	6a 0a                	push   0xa
c001cd1d:	e8 26 97 ff ff       	call   c0016448 <milliTenthSleep(unsigned int)>
c001cd22:	83 c4 10             	add    esp,0x10
c001cd25:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001cd2b:	75 c8                	jne    c001ccf5 <ATA::readyForCommand()+0x9>
c001cd2d:	31 c0                	xor    eax,eax
c001cd2f:	eb 02                	jmp    c001cd33 <ATA::readyForCommand()+0x47>
c001cd31:	b0 01                	mov    al,0x1
c001cd33:	5a                   	pop    edx
c001cd34:	5b                   	pop    ebx
c001cd35:	5e                   	pop    esi
c001cd36:	c3                   	ret    
c001cd37:	90                   	nop

c001cd38 <ATA::access(unsigned long long, int, void*, bool)>:
c001cd38:	55                   	push   ebp
c001cd39:	57                   	push   edi
c001cd3a:	56                   	push   esi
c001cd3b:	53                   	push   ebx
c001cd3c:	83 ec 2c             	sub    esp,0x2c
c001cd3f:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001cd43:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001cd47:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001cd4b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001cd4f:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001cd53:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001cd57:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001cd5b:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001cd61:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001cd65:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001cd6b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001cd6f:	c1 e0 06             	shl    eax,0x6
c001cd72:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001cd7a:	74 5d                	je     c001cdd9 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c001cd7c:	89 fa                	mov    edx,edi
c001cd7e:	89 f0                	mov    eax,esi
c001cd80:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001cd84:	c1 ea 1c             	shr    edx,0x1c
c001cd87:	89 d1                	mov    ecx,edx
c001cd89:	09 c1                	or     ecx,eax
c001cd8b:	74 25                	je     c001cdb2 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001cd8d:	31 ed                	xor    ebp,ebp
c001cd8f:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001cd96:	89 fa                	mov    edx,edi
c001cd98:	89 f0                	mov    eax,esi
c001cd9a:	0f ad d0             	shrd   eax,edx,cl
c001cd9d:	d3 ea                	shr    edx,cl
c001cd9f:	f6 c1 20             	test   cl,0x20
c001cda2:	74 02                	je     c001cda6 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001cda4:	89 d0                	mov    eax,edx
c001cda6:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001cdaa:	45                   	inc    ebp
c001cdab:	83 fd 06             	cmp    ebp,0x6
c001cdae:	75 df                	jne    c001cd8f <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001cdb0:	eb 76                	jmp    c001ce28 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c001cdb2:	89 f0                	mov    eax,esi
c001cdb4:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001cdb9:	89 fa                	mov    edx,edi
c001cdbb:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001cdc2:	0f ac d0 10          	shrd   eax,edx,0x10
c001cdc6:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001cdcb:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001cdcf:	c1 ee 18             	shr    esi,0x18
c001cdd2:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001cdd7:	eb 56                	jmp    c001ce2f <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001cdd9:	6a 00                	push   0x0
c001cddb:	6a 3f                	push   0x3f
c001cddd:	57                   	push   edi
c001cdde:	56                   	push   esi
c001cddf:	e8 ac 2a 00 00       	call   c001f890 <__umoddi3>
c001cde4:	83 c4 10             	add    esp,0x10
c001cde7:	40                   	inc    eax
c001cde8:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001cdec:	6a 00                	push   0x0
c001cdee:	68 f0 03 00 00       	push   0x3f0
c001cdf3:	57                   	push   edi
c001cdf4:	56                   	push   esi
c001cdf5:	e8 96 29 00 00       	call   c001f790 <__udivdi3>
c001cdfa:	83 c4 10             	add    esp,0x10
c001cdfd:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001ce02:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001ce09:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001ce0e:	6a 00                	push   0x0
c001ce10:	6a 3f                	push   0x3f
c001ce12:	57                   	push   edi
c001ce13:	56                   	push   esi
c001ce14:	e8 77 29 00 00       	call   c001f790 <__udivdi3>
c001ce19:	83 c4 10             	add    esp,0x10
c001ce1c:	83 e0 0f             	and    eax,0xf
c001ce1f:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001ce24:	89 c6                	mov    esi,eax
c001ce26:	eb 07                	jmp    c001ce2f <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001ce28:	31 f6                	xor    esi,esi
c001ce2a:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c001ce2f:	bf 01 00 00 00       	mov    edi,0x1
c001ce34:	50                   	push   eax
c001ce35:	6a 00                	push   0x0
c001ce37:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ce3e:	50                   	push   eax
c001ce3f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ce43:	e8 a4 f1 ff ff       	call   c001bfec <IDE::enableIRQs(unsigned char, bool)>
c001ce48:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ce4b:	e8 9c fe ff ff       	call   c001ccec <ATA::readyForCommand()>
c001ce50:	83 c4 10             	add    esp,0x10
c001ce53:	84 c0                	test   al,al
c001ce55:	0f 84 69 02 00 00    	je     c001d0c4 <ATA::access(unsigned long long, int, void*, bool)+0x38c>
c001ce5b:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001ce61:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001ce67:	c1 e0 04             	shl    eax,0x4
c001ce6a:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001ce71:	09 c6                	or     esi,eax
c001ce73:	f6 44 24 0e 03       	test   BYTE PTR [esp+0xe],0x3
c001ce78:	75 05                	jne    c001ce7f <ATA::access(unsigned long long, int, void*, bool)+0x147>
c001ce7a:	83 ce a0             	or     esi,0xffffffa0
c001ce7d:	eb 03                	jmp    c001ce82 <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c001ce7f:	83 ce e0             	or     esi,0xffffffe0
c001ce82:	89 f0                	mov    eax,esi
c001ce84:	0f b6 f0             	movzx  esi,al
c001ce87:	56                   	push   esi
c001ce88:	6a 06                	push   0x6
c001ce8a:	51                   	push   ecx
c001ce8b:	52                   	push   edx
c001ce8c:	e8 53 ef ff ff       	call   c001bde4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ce91:	83 c4 10             	add    esp,0x10
c001ce94:	6a 00                	push   0x0
c001ce96:	6a 01                	push   0x1
c001ce98:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ce9f:	50                   	push   eax
c001cea0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cea6:	e8 39 ef ff ff       	call   c001bde4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ceab:	83 c4 10             	add    esp,0x10
c001ceae:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c001ceb3:	83 f8 02             	cmp    eax,0x2
c001ceb6:	75 6e                	jne    c001cf26 <ATA::access(unsigned long long, int, void*, bool)+0x1ee>
c001ceb8:	6a 00                	push   0x0
c001ceba:	6a 08                	push   0x8
c001cebc:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cec3:	50                   	push   eax
c001cec4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ceca:	e8 15 ef ff ff       	call   c001bde4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cecf:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001ced4:	50                   	push   eax
c001ced5:	6a 09                	push   0x9
c001ced7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cede:	50                   	push   eax
c001cedf:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cee5:	e8 fa ee ff ff       	call   c001bde4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ceea:	83 c4 20             	add    esp,0x20
c001ceed:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001cef2:	50                   	push   eax
c001cef3:	6a 0a                	push   0xa
c001cef5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cefc:	50                   	push   eax
c001cefd:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cf03:	e8 dc ee ff ff       	call   c001bde4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cf08:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001cf0d:	50                   	push   eax
c001cf0e:	6a 0b                	push   0xb
c001cf10:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cf17:	50                   	push   eax
c001cf18:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cf1e:	e8 c1 ee ff ff       	call   c001bde4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cf23:	83 c4 20             	add    esp,0x20
c001cf26:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001cf2b:	50                   	push   eax
c001cf2c:	6a 02                	push   0x2
c001cf2e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cf35:	50                   	push   eax
c001cf36:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cf3c:	e8 a3 ee ff ff       	call   c001bde4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cf41:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001cf46:	50                   	push   eax
c001cf47:	6a 03                	push   0x3
c001cf49:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cf50:	50                   	push   eax
c001cf51:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cf57:	e8 88 ee ff ff       	call   c001bde4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cf5c:	83 c4 20             	add    esp,0x20
c001cf5f:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001cf64:	50                   	push   eax
c001cf65:	6a 04                	push   0x4
c001cf67:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cf6e:	50                   	push   eax
c001cf6f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cf75:	e8 6a ee ff ff       	call   c001bde4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cf7a:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cf7f:	50                   	push   eax
c001cf80:	6a 05                	push   0x5
c001cf82:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cf89:	50                   	push   eax
c001cf8a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cf90:	e8 4f ee ff ff       	call   c001bde4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cf95:	83 c4 20             	add    esp,0x20
c001cf98:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001cf9d:	0f b6 54 24 0e       	movzx  edx,BYTE PTR [esp+0xe]
c001cfa2:	74 11                	je     c001cfb5 <ATA::access(unsigned long long, int, void*, bool)+0x27d>
c001cfa4:	b8 30 00 00 00       	mov    eax,0x30
c001cfa9:	83 fa 02             	cmp    edx,0x2
c001cfac:	75 16                	jne    c001cfc4 <ATA::access(unsigned long long, int, void*, bool)+0x28c>
c001cfae:	b8 34 00 00 00       	mov    eax,0x34
c001cfb3:	eb 0f                	jmp    c001cfc4 <ATA::access(unsigned long long, int, void*, bool)+0x28c>
c001cfb5:	b8 20 00 00 00       	mov    eax,0x20
c001cfba:	83 fa 02             	cmp    edx,0x2
c001cfbd:	75 05                	jne    c001cfc4 <ATA::access(unsigned long long, int, void*, bool)+0x28c>
c001cfbf:	b8 24 00 00 00       	mov    eax,0x24
c001cfc4:	50                   	push   eax
c001cfc5:	6a 07                	push   0x7
c001cfc7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cfce:	50                   	push   eax
c001cfcf:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cfd5:	e8 0a ee ff ff       	call   c001bde4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cfda:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001cfde:	83 c4 10             	add    esp,0x10
c001cfe1:	0f b6 6c 24 0f       	movzx  ebp,BYTE PTR [esp+0xf]
c001cfe6:	85 f6                	test   esi,esi
c001cfe8:	0f 84 b3 00 00 00    	je     c001d0a1 <ATA::access(unsigned long long, int, void*, bool)+0x369>
c001cfee:	50                   	push   eax
c001cfef:	6a 01                	push   0x1
c001cff1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cff8:	50                   	push   eax
c001cff9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cfff:	e8 c8 f8 ff ff       	call   c001c8cc <IDE::polling(unsigned char, unsigned int)>
c001d004:	83 c4 10             	add    esp,0x10
c001d007:	0f b6 f8             	movzx  edi,al
c001d00a:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001d010:	85 ff                	test   edi,edi
c001d012:	74 1d                	je     c001d031 <ATA::access(unsigned long long, int, void*, bool)+0x2f9>
c001d014:	57                   	push   edi
c001d015:	0f b6 d2             	movzx  edx,dl
c001d018:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001d01f:	50                   	push   eax
c001d020:	52                   	push   edx
c001d021:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d027:	e8 e6 f7 ff ff       	call   c001c812 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001d02c:	e9 90 00 00 00       	jmp    c001d0c1 <ATA::access(unsigned long long, int, void*, bool)+0x389>
c001d031:	85 ed                	test   ebp,ebp
c001d033:	74 3b                	je     c001d070 <ATA::access(unsigned long long, int, void*, bool)+0x338>
c001d035:	31 c9                	xor    ecx,ecx
c001d037:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001d03b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001d03f:	66 8b 3c 48          	mov    di,WORD PTR [eax+ecx*2]
c001d043:	50                   	push   eax
c001d044:	50                   	push   eax
c001d045:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d04c:	50                   	push   eax
c001d04d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d053:	e8 7a ed ff ff       	call   c001bdd2 <IDE::getBase(unsigned char)>
c001d058:	89 c2                	mov    edx,eax
c001d05a:	89 f8                	mov    eax,edi
c001d05c:	66 ef                	out    dx,ax
c001d05e:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001d062:	83 c4 10             	add    esp,0x10
c001d065:	41                   	inc    ecx
c001d066:	81 f9 00 01 00 00    	cmp    ecx,0x100
c001d06c:	75 c9                	jne    c001d037 <ATA::access(unsigned long long, int, void*, bool)+0x2ff>
c001d06e:	eb 23                	jmp    c001d093 <ATA::access(unsigned long long, int, void*, bool)+0x35b>
c001d070:	0f b6 d2             	movzx  edx,dl
c001d073:	51                   	push   ecx
c001d074:	51                   	push   ecx
c001d075:	52                   	push   edx
c001d076:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d07c:	e8 51 ed ff ff       	call   c001bdd2 <IDE::getBase(unsigned char)>
c001d081:	b9 00 01 00 00       	mov    ecx,0x100
c001d086:	89 c2                	mov    edx,eax
c001d088:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001d08c:	fc                   	cld    
c001d08d:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001d090:	83 c4 10             	add    esp,0x10
c001d093:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001d09b:	4e                   	dec    esi
c001d09c:	e9 45 ff ff ff       	jmp    c001cfe6 <ATA::access(unsigned long long, int, void*, bool)+0x2ae>
c001d0a1:	31 ff                	xor    edi,edi
c001d0a3:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001d0a8:	74 1a                	je     c001d0c4 <ATA::access(unsigned long long, int, void*, bool)+0x38c>
c001d0aa:	50                   	push   eax
c001d0ab:	50                   	push   eax
c001d0ac:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c001d0b1:	83 f8 02             	cmp    eax,0x2
c001d0b4:	0f 94 c0             	sete   al
c001d0b7:	0f b6 c0             	movzx  eax,al
c001d0ba:	50                   	push   eax
c001d0bb:	53                   	push   ebx
c001d0bc:	e8 dd fb ff ff       	call   c001cc9e <ATA::flush(bool)>
c001d0c1:	83 c4 10             	add    esp,0x10
c001d0c4:	83 c4 2c             	add    esp,0x2c
c001d0c7:	89 f8                	mov    eax,edi
c001d0c9:	5b                   	pop    ebx
c001d0ca:	5e                   	pop    esi
c001d0cb:	5f                   	pop    edi
c001d0cc:	5d                   	pop    ebp
c001d0cd:	c3                   	ret    

c001d0ce <ATA::detectCHS()>:
c001d0ce:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d0d2:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001d0d8:	c1 e0 06             	shl    eax,0x6
c001d0db:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001d0e1:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001d0eb:	c7 44 24 04 94 33 02 c0 	mov    DWORD PTR [esp+0x4],0xc0023394
c001d0f3:	e9 9b 45 ff ff       	jmp    c0011693 <KePanic(char const*)>

c001d0f8 <ATA::open(int, int, void*)>:
c001d0f8:	53                   	push   ebx
c001d0f9:	83 ec 08             	sub    esp,0x8
c001d0fc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d100:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d104:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d108:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001d10e:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001d114:	c1 e0 06             	shl    eax,0x6
c001d117:	01 d0                	add    eax,edx
c001d119:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001d120:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001d126:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001d12d:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001d137:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001d13d:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001d144:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001d14b:	75 0c                	jne    c001d159 <ATA::open(int, int, void*)+0x61>
c001d14d:	83 ec 0c             	sub    esp,0xc
c001d150:	53                   	push   ebx
c001d151:	e8 78 ff ff ff       	call   c001d0ce <ATA::detectCHS()>
c001d156:	83 c4 10             	add    esp,0x10
c001d159:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001d15f:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001d165:	c1 e0 06             	shl    eax,0x6
c001d168:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001d16f:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001d179:	d1 e8                	shr    eax,1
c001d17b:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001d181:	6a 04                	push   0x4
c001d183:	6a 0c                	push   0xc
c001d185:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d18c:	50                   	push   eax
c001d18d:	52                   	push   edx
c001d18e:	e8 51 ec ff ff       	call   c001bde4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d193:	90                   	nop
c001d194:	90                   	nop
c001d195:	6a 00                	push   0x0
c001d197:	6a 0c                	push   0xc
c001d199:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d1a0:	50                   	push   eax
c001d1a1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d1a7:	e8 38 ec ff ff       	call   c001bde4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d1ac:	83 c4 14             	add    esp,0x14
c001d1af:	53                   	push   ebx
c001d1b0:	e8 b9 fc fe ff       	call   c000ce6e <PhysicalDisk::startCache()>
c001d1b5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d1b8:	e8 f5 0e ff ff       	call   c000e0b2 <createPartitionsForDisk(PhysicalDisk*)>
c001d1bd:	31 c0                	xor    eax,eax
c001d1bf:	83 c4 18             	add    esp,0x18
c001d1c2:	5b                   	pop    ebx
c001d1c3:	c3                   	ret    

c001d1c4 <combineCharAndColour(char, unsigned char)>:
c001d1c4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001d1c9:	66 0f be 54 24 04    	movsx  dx,BYTE PTR [esp+0x4]
c001d1cf:	c1 e0 08             	shl    eax,0x8
c001d1d2:	09 d0                	or     eax,edx
c001d1d4:	c3                   	ret    

c001d1d5 <combineColours(unsigned char, unsigned char)>:
c001d1d5:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001d1da:	c1 e0 04             	shl    eax,0x4
c001d1dd:	0b 44 24 04          	or     eax,DWORD PTR [esp+0x4]
c001d1e1:	c3                   	ret    

c001d1e2 <ATA::read(unsigned long long, int, void*)>:
c001d1e2:	55                   	push   ebp
c001d1e3:	57                   	push   edi
c001d1e4:	56                   	push   esi
c001d1e5:	be 04 00 00 00       	mov    esi,0x4
c001d1ea:	53                   	push   ebx
c001d1eb:	83 ec 0c             	sub    esp,0xc
c001d1ee:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001d1f2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d1f6:	8d 7b ff             	lea    edi,[ebx-0x1]
c001d1f9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d1fd:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001d201:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001d207:	0f 87 a1 01 00 00    	ja     c001d3ae <ATA::read(unsigned long long, int, void*)+0x1cc>
c001d20d:	be 06 00 00 00       	mov    esi,0x6
c001d212:	85 c9                	test   ecx,ecx
c001d214:	0f 84 94 01 00 00    	je     c001d3ae <ATA::read(unsigned long long, int, void*)+0x1cc>
c001d21a:	55                   	push   ebp
c001d21b:	55                   	push   ebp
c001d21c:	6a 00                	push   0x0
c001d21e:	51                   	push   ecx
c001d21f:	53                   	push   ebx
c001d220:	52                   	push   edx
c001d221:	50                   	push   eax
c001d222:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d226:	e8 0d fb ff ff       	call   c001cd38 <ATA::access(unsigned long long, int, void*, bool)>
c001d22b:	83 c4 20             	add    esp,0x20
c001d22e:	89 c6                	mov    esi,eax
c001d230:	85 c0                	test   eax,eax
c001d232:	0f 85 71 01 00 00    	jne    c001d3a9 <ATA::read(unsigned long long, int, void*)+0x1c7>
c001d238:	03 1d b4 d0 02 c0    	add    ebx,DWORD PTR ds:0xc002d0b4
c001d23e:	89 da                	mov    edx,ebx
c001d240:	50                   	push   eax
c001d241:	bd 10 27 00 00       	mov    ebp,0x2710
c001d246:	50                   	push   eax
c001d247:	89 1d b4 d0 02 c0    	mov    DWORD PTR ds:0xc002d0b4,ebx
c001d24d:	6a 0f                	push   0xf
c001d24f:	6a 00                	push   0x0
c001d251:	e8 7f ff ff ff       	call   c001d1d5 <combineColours(unsigned char, unsigned char)>
c001d256:	59                   	pop    ecx
c001d257:	b9 0a 00 00 00       	mov    ecx,0xa
c001d25c:	5b                   	pop    ebx
c001d25d:	0f b6 d8             	movzx  ebx,al
c001d260:	89 d0                	mov    eax,edx
c001d262:	53                   	push   ebx
c001d263:	99                   	cdq    
c001d264:	f7 fd                	idiv   ebp
c001d266:	99                   	cdq    
c001d267:	f7 f9                	idiv   ecx
c001d269:	83 c2 30             	add    edx,0x30
c001d26c:	0f b6 d2             	movzx  edx,dl
c001d26f:	52                   	push   edx
c001d270:	e8 4f ff ff ff       	call   c001d1c4 <combineCharAndColour(char, unsigned char)>
c001d275:	5f                   	pop    edi
c001d276:	bf e8 03 00 00       	mov    edi,0x3e8
c001d27b:	5a                   	pop    edx
c001d27c:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001d282:	53                   	push   ebx
c001d283:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d288:	99                   	cdq    
c001d289:	f7 ff                	idiv   edi
c001d28b:	99                   	cdq    
c001d28c:	f7 f9                	idiv   ecx
c001d28e:	8d 42 30             	lea    eax,[edx+0x30]
c001d291:	0f b6 c0             	movzx  eax,al
c001d294:	50                   	push   eax
c001d295:	e8 2a ff ff ff       	call   c001d1c4 <combineCharAndColour(char, unsigned char)>
c001d29a:	5f                   	pop    edi
c001d29b:	bf 64 00 00 00       	mov    edi,0x64
c001d2a0:	5a                   	pop    edx
c001d2a1:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001d2a7:	53                   	push   ebx
c001d2a8:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d2ad:	99                   	cdq    
c001d2ae:	f7 ff                	idiv   edi
c001d2b0:	99                   	cdq    
c001d2b1:	f7 f9                	idiv   ecx
c001d2b3:	8d 42 30             	lea    eax,[edx+0x30]
c001d2b6:	0f b6 c0             	movzx  eax,al
c001d2b9:	50                   	push   eax
c001d2ba:	e8 05 ff ff ff       	call   c001d1c4 <combineCharAndColour(char, unsigned char)>
c001d2bf:	5a                   	pop    edx
c001d2c0:	5a                   	pop    edx
c001d2c1:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001d2c7:	53                   	push   ebx
c001d2c8:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d2cd:	99                   	cdq    
c001d2ce:	f7 f9                	idiv   ecx
c001d2d0:	99                   	cdq    
c001d2d1:	f7 f9                	idiv   ecx
c001d2d3:	8d 42 30             	lea    eax,[edx+0x30]
c001d2d6:	0f b6 c0             	movzx  eax,al
c001d2d9:	50                   	push   eax
c001d2da:	e8 e5 fe ff ff       	call   c001d1c4 <combineCharAndColour(char, unsigned char)>
c001d2df:	5a                   	pop    edx
c001d2e0:	5a                   	pop    edx
c001d2e1:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001d2e7:	53                   	push   ebx
c001d2e8:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d2ed:	99                   	cdq    
c001d2ee:	f7 f9                	idiv   ecx
c001d2f0:	83 c2 30             	add    edx,0x30
c001d2f3:	0f b6 d2             	movzx  edx,dl
c001d2f6:	52                   	push   edx
c001d2f7:	e8 c8 fe ff ff       	call   c001d1c4 <combineCharAndColour(char, unsigned char)>
c001d2fc:	5a                   	pop    edx
c001d2fd:	5a                   	pop    edx
c001d2fe:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001d304:	53                   	push   ebx
c001d305:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d30a:	99                   	cdq    
c001d30b:	f7 fd                	idiv   ebp
c001d30d:	99                   	cdq    
c001d30e:	f7 f9                	idiv   ecx
c001d310:	8d 42 30             	lea    eax,[edx+0x30]
c001d313:	0f b6 c0             	movzx  eax,al
c001d316:	50                   	push   eax
c001d317:	e8 a8 fe ff ff       	call   c001d1c4 <combineCharAndColour(char, unsigned char)>
c001d31c:	5d                   	pop    ebp
c001d31d:	bd e8 03 00 00       	mov    ebp,0x3e8
c001d322:	5a                   	pop    edx
c001d323:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001d329:	53                   	push   ebx
c001d32a:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d32f:	99                   	cdq    
c001d330:	f7 fd                	idiv   ebp
c001d332:	99                   	cdq    
c001d333:	f7 f9                	idiv   ecx
c001d335:	8d 42 30             	lea    eax,[edx+0x30]
c001d338:	0f b6 c0             	movzx  eax,al
c001d33b:	50                   	push   eax
c001d33c:	e8 83 fe ff ff       	call   c001d1c4 <combineCharAndColour(char, unsigned char)>
c001d341:	5d                   	pop    ebp
c001d342:	5a                   	pop    edx
c001d343:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001d349:	53                   	push   ebx
c001d34a:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d34f:	99                   	cdq    
c001d350:	f7 ff                	idiv   edi
c001d352:	99                   	cdq    
c001d353:	f7 f9                	idiv   ecx
c001d355:	8d 42 30             	lea    eax,[edx+0x30]
c001d358:	0f b6 c0             	movzx  eax,al
c001d35b:	50                   	push   eax
c001d35c:	e8 63 fe ff ff       	call   c001d1c4 <combineCharAndColour(char, unsigned char)>
c001d361:	5f                   	pop    edi
c001d362:	5d                   	pop    ebp
c001d363:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001d369:	53                   	push   ebx
c001d36a:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d36f:	99                   	cdq    
c001d370:	f7 f9                	idiv   ecx
c001d372:	99                   	cdq    
c001d373:	f7 f9                	idiv   ecx
c001d375:	8d 42 30             	lea    eax,[edx+0x30]
c001d378:	0f b6 c0             	movzx  eax,al
c001d37b:	50                   	push   eax
c001d37c:	e8 43 fe ff ff       	call   c001d1c4 <combineCharAndColour(char, unsigned char)>
c001d381:	5a                   	pop    edx
c001d382:	5f                   	pop    edi
c001d383:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001d389:	53                   	push   ebx
c001d38a:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d38f:	99                   	cdq    
c001d390:	f7 f9                	idiv   ecx
c001d392:	83 c2 30             	add    edx,0x30
c001d395:	0f b6 d2             	movzx  edx,dl
c001d398:	52                   	push   edx
c001d399:	e8 26 fe ff ff       	call   c001d1c4 <combineCharAndColour(char, unsigned char)>
c001d39e:	83 c4 10             	add    esp,0x10
c001d3a1:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001d3a7:	eb 05                	jmp    c001d3ae <ATA::read(unsigned long long, int, void*)+0x1cc>
c001d3a9:	be 01 00 00 00       	mov    esi,0x1
c001d3ae:	83 c4 0c             	add    esp,0xc
c001d3b1:	89 f0                	mov    eax,esi
c001d3b3:	5b                   	pop    ebx
c001d3b4:	5e                   	pop    esi
c001d3b5:	5f                   	pop    edi
c001d3b6:	5d                   	pop    ebp
c001d3b7:	c3                   	ret    

c001d3b8 <ATA::write(unsigned long long, int, void*)>:
c001d3b8:	55                   	push   ebp
c001d3b9:	57                   	push   edi
c001d3ba:	56                   	push   esi
c001d3bb:	be 04 00 00 00       	mov    esi,0x4
c001d3c0:	53                   	push   ebx
c001d3c1:	83 ec 0c             	sub    esp,0xc
c001d3c4:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001d3c8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d3cc:	8d 7b ff             	lea    edi,[ebx-0x1]
c001d3cf:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d3d3:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001d3d7:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001d3dd:	0f 87 9c 01 00 00    	ja     c001d57f <ATA::write(unsigned long long, int, void*)+0x1c7>
c001d3e3:	be 06 00 00 00       	mov    esi,0x6
c001d3e8:	85 c9                	test   ecx,ecx
c001d3ea:	0f 84 8f 01 00 00    	je     c001d57f <ATA::write(unsigned long long, int, void*)+0x1c7>
c001d3f0:	55                   	push   ebp
c001d3f1:	55                   	push   ebp
c001d3f2:	6a 01                	push   0x1
c001d3f4:	51                   	push   ecx
c001d3f5:	53                   	push   ebx
c001d3f6:	52                   	push   edx
c001d3f7:	50                   	push   eax
c001d3f8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d3fc:	e8 37 f9 ff ff       	call   c001cd38 <ATA::access(unsigned long long, int, void*, bool)>
c001d401:	83 c4 20             	add    esp,0x20
c001d404:	89 c6                	mov    esi,eax
c001d406:	85 c0                	test   eax,eax
c001d408:	0f 85 6c 01 00 00    	jne    c001d57a <ATA::write(unsigned long long, int, void*)+0x1c2>
c001d40e:	01 1d b0 d0 02 c0    	add    DWORD PTR ds:0xc002d0b0,ebx
c001d414:	bd 10 27 00 00       	mov    ebp,0x2710
c001d419:	50                   	push   eax
c001d41a:	50                   	push   eax
c001d41b:	6a 0f                	push   0xf
c001d41d:	6a 00                	push   0x0
c001d41f:	e8 b1 fd ff ff       	call   c001d1d5 <combineColours(unsigned char, unsigned char)>
c001d424:	5a                   	pop    edx
c001d425:	0f b6 d8             	movzx  ebx,al
c001d428:	59                   	pop    ecx
c001d429:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d42e:	53                   	push   ebx
c001d42f:	b9 0a 00 00 00       	mov    ecx,0xa
c001d434:	99                   	cdq    
c001d435:	f7 fd                	idiv   ebp
c001d437:	99                   	cdq    
c001d438:	f7 f9                	idiv   ecx
c001d43a:	8d 42 30             	lea    eax,[edx+0x30]
c001d43d:	0f b6 c0             	movzx  eax,al
c001d440:	50                   	push   eax
c001d441:	e8 7e fd ff ff       	call   c001d1c4 <combineCharAndColour(char, unsigned char)>
c001d446:	5f                   	pop    edi
c001d447:	bf e8 03 00 00       	mov    edi,0x3e8
c001d44c:	5a                   	pop    edx
c001d44d:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001d453:	53                   	push   ebx
c001d454:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d459:	99                   	cdq    
c001d45a:	f7 ff                	idiv   edi
c001d45c:	99                   	cdq    
c001d45d:	f7 f9                	idiv   ecx
c001d45f:	8d 42 30             	lea    eax,[edx+0x30]
c001d462:	0f b6 c0             	movzx  eax,al
c001d465:	50                   	push   eax
c001d466:	e8 59 fd ff ff       	call   c001d1c4 <combineCharAndColour(char, unsigned char)>
c001d46b:	5f                   	pop    edi
c001d46c:	bf 64 00 00 00       	mov    edi,0x64
c001d471:	5a                   	pop    edx
c001d472:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001d478:	53                   	push   ebx
c001d479:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d47e:	99                   	cdq    
c001d47f:	f7 ff                	idiv   edi
c001d481:	99                   	cdq    
c001d482:	f7 f9                	idiv   ecx
c001d484:	8d 42 30             	lea    eax,[edx+0x30]
c001d487:	0f b6 c0             	movzx  eax,al
c001d48a:	50                   	push   eax
c001d48b:	e8 34 fd ff ff       	call   c001d1c4 <combineCharAndColour(char, unsigned char)>
c001d490:	5a                   	pop    edx
c001d491:	5a                   	pop    edx
c001d492:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001d498:	53                   	push   ebx
c001d499:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d49e:	99                   	cdq    
c001d49f:	f7 f9                	idiv   ecx
c001d4a1:	99                   	cdq    
c001d4a2:	f7 f9                	idiv   ecx
c001d4a4:	8d 42 30             	lea    eax,[edx+0x30]
c001d4a7:	0f b6 c0             	movzx  eax,al
c001d4aa:	50                   	push   eax
c001d4ab:	e8 14 fd ff ff       	call   c001d1c4 <combineCharAndColour(char, unsigned char)>
c001d4b0:	5a                   	pop    edx
c001d4b1:	5a                   	pop    edx
c001d4b2:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001d4b8:	53                   	push   ebx
c001d4b9:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d4be:	99                   	cdq    
c001d4bf:	f7 f9                	idiv   ecx
c001d4c1:	8d 42 30             	lea    eax,[edx+0x30]
c001d4c4:	0f b6 c0             	movzx  eax,al
c001d4c7:	50                   	push   eax
c001d4c8:	e8 f7 fc ff ff       	call   c001d1c4 <combineCharAndColour(char, unsigned char)>
c001d4cd:	5a                   	pop    edx
c001d4ce:	5a                   	pop    edx
c001d4cf:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001d4d5:	53                   	push   ebx
c001d4d6:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d4db:	99                   	cdq    
c001d4dc:	f7 fd                	idiv   ebp
c001d4de:	99                   	cdq    
c001d4df:	f7 f9                	idiv   ecx
c001d4e1:	8d 42 30             	lea    eax,[edx+0x30]
c001d4e4:	0f b6 c0             	movzx  eax,al
c001d4e7:	50                   	push   eax
c001d4e8:	e8 d7 fc ff ff       	call   c001d1c4 <combineCharAndColour(char, unsigned char)>
c001d4ed:	5d                   	pop    ebp
c001d4ee:	bd e8 03 00 00       	mov    ebp,0x3e8
c001d4f3:	5a                   	pop    edx
c001d4f4:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001d4fa:	53                   	push   ebx
c001d4fb:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d500:	99                   	cdq    
c001d501:	f7 fd                	idiv   ebp
c001d503:	99                   	cdq    
c001d504:	f7 f9                	idiv   ecx
c001d506:	8d 42 30             	lea    eax,[edx+0x30]
c001d509:	0f b6 c0             	movzx  eax,al
c001d50c:	50                   	push   eax
c001d50d:	e8 b2 fc ff ff       	call   c001d1c4 <combineCharAndColour(char, unsigned char)>
c001d512:	5d                   	pop    ebp
c001d513:	5a                   	pop    edx
c001d514:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001d51a:	53                   	push   ebx
c001d51b:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d520:	99                   	cdq    
c001d521:	f7 ff                	idiv   edi
c001d523:	99                   	cdq    
c001d524:	f7 f9                	idiv   ecx
c001d526:	8d 42 30             	lea    eax,[edx+0x30]
c001d529:	0f b6 c0             	movzx  eax,al
c001d52c:	50                   	push   eax
c001d52d:	e8 92 fc ff ff       	call   c001d1c4 <combineCharAndColour(char, unsigned char)>
c001d532:	5f                   	pop    edi
c001d533:	5d                   	pop    ebp
c001d534:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001d53a:	53                   	push   ebx
c001d53b:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d540:	99                   	cdq    
c001d541:	f7 f9                	idiv   ecx
c001d543:	99                   	cdq    
c001d544:	f7 f9                	idiv   ecx
c001d546:	8d 42 30             	lea    eax,[edx+0x30]
c001d549:	0f b6 c0             	movzx  eax,al
c001d54c:	50                   	push   eax
c001d54d:	e8 72 fc ff ff       	call   c001d1c4 <combineCharAndColour(char, unsigned char)>
c001d552:	5a                   	pop    edx
c001d553:	5f                   	pop    edi
c001d554:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001d55a:	53                   	push   ebx
c001d55b:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d560:	99                   	cdq    
c001d561:	f7 f9                	idiv   ecx
c001d563:	83 c2 30             	add    edx,0x30
c001d566:	0f b6 d2             	movzx  edx,dl
c001d569:	52                   	push   edx
c001d56a:	e8 55 fc ff ff       	call   c001d1c4 <combineCharAndColour(char, unsigned char)>
c001d56f:	83 c4 10             	add    esp,0x10
c001d572:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001d578:	eb 05                	jmp    c001d57f <ATA::write(unsigned long long, int, void*)+0x1c7>
c001d57a:	be 01 00 00 00       	mov    esi,0x1
c001d57f:	83 c4 0c             	add    esp,0xc
c001d582:	89 f0                	mov    eax,esi
c001d584:	5b                   	pop    ebx
c001d585:	5e                   	pop    esi
c001d586:	5f                   	pop    edi
c001d587:	5d                   	pop    ebp
c001d588:	c3                   	ret    
c001d589:	90                   	nop

c001d58a <ATAPI::write(unsigned long long, int, void*)>:
c001d58a:	b8 03 00 00 00       	mov    eax,0x3
c001d58f:	c3                   	ret    

c001d590 <ATAPI::close(int, int, void*)>:
c001d590:	83 ec 0c             	sub    esp,0xc
c001d593:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d597:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d59d:	85 c0                	test   eax,eax
c001d59f:	74 0c                	je     c001d5ad <ATAPI::close(int, int, void*)+0x1d>
c001d5a1:	83 ec 0c             	sub    esp,0xc
c001d5a4:	8b 10                	mov    edx,DWORD PTR [eax]
c001d5a6:	50                   	push   eax
c001d5a7:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001d5aa:	83 c4 10             	add    esp,0x10
c001d5ad:	31 c0                	xor    eax,eax
c001d5af:	83 c4 0c             	add    esp,0xc
c001d5b2:	c3                   	ret    
c001d5b3:	90                   	nop

c001d5b4 <ATAPI::ATAPI()>:
c001d5b4:	83 ec 0c             	sub    esp,0xc
c001d5b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d5bb:	83 ec 04             	sub    esp,0x4
c001d5be:	68 00 08 00 00       	push   0x800
c001d5c3:	68 dd 34 02 c0       	push   0xc00234dd
c001d5c8:	50                   	push   eax
c001d5c9:	e8 38 f8 fe ff       	call   c000ce06 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001d5ce:	83 c4 10             	add    esp,0x10
c001d5d1:	ba f8 33 02 c0       	mov    edx,0xc00233f8
c001d5d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d5da:	89 10                	mov    DWORD PTR [eax],edx
c001d5dc:	90                   	nop
c001d5dd:	83 c4 0c             	add    esp,0xc
c001d5e0:	c3                   	ret    
c001d5e1:	90                   	nop

c001d5e2 <ATAPI::readyForCommand()>:
c001d5e2:	56                   	push   esi
c001d5e3:	53                   	push   ebx
c001d5e4:	53                   	push   ebx
c001d5e5:	31 db                	xor    ebx,ebx
c001d5e7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d5eb:	51                   	push   ecx
c001d5ec:	6a 0c                	push   0xc
c001d5ee:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001d5f5:	50                   	push   eax
c001d5f6:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001d5fc:	e8 a3 e8 ff ff       	call   c001bea4 <IDE::read(unsigned char, unsigned char)>
c001d601:	83 c4 10             	add    esp,0x10
c001d604:	a8 88                	test   al,0x88
c001d606:	74 25                	je     c001d62d <ATAPI::readyForCommand()+0x4b>
c001d608:	43                   	inc    ebx
c001d609:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001d60f:	7e da                	jle    c001d5eb <ATAPI::readyForCommand()+0x9>
c001d611:	83 ec 0c             	sub    esp,0xc
c001d614:	68 5e 01 00 00       	push   0x15e
c001d619:	e8 2a 8e ff ff       	call   c0016448 <milliTenthSleep(unsigned int)>
c001d61e:	83 c4 10             	add    esp,0x10
c001d621:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001d627:	75 c2                	jne    c001d5eb <ATAPI::readyForCommand()+0x9>
c001d629:	31 c0                	xor    eax,eax
c001d62b:	eb 02                	jmp    c001d62f <ATAPI::readyForCommand()+0x4d>
c001d62d:	b0 01                	mov    al,0x1
c001d62f:	5a                   	pop    edx
c001d630:	5b                   	pop    ebx
c001d631:	5e                   	pop    esi
c001d632:	c3                   	ret    
c001d633:	90                   	nop

c001d634 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001d634:	55                   	push   ebp
c001d635:	57                   	push   edi
c001d636:	56                   	push   esi
c001d637:	53                   	push   ebx
c001d638:	83 ec 20             	sub    esp,0x20
c001d63b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001d63f:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001d643:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001d647:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001d64b:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001d64f:	6a 01                	push   0x1
c001d651:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d658:	50                   	push   eax
c001d659:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d65f:	e8 88 e9 ff ff       	call   c001bfec <IDE::enableIRQs(unsigned char, bool)>
c001d664:	5e                   	pop    esi
c001d665:	58                   	pop    eax
c001d666:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d66d:	50                   	push   eax
c001d66e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d674:	e8 45 e7 ff ff       	call   c001bdbe <IDE::prepareInterrupt(unsigned char)>
c001d679:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d67c:	e8 61 ff ff ff       	call   c001d5e2 <ATAPI::readyForCommand()>
c001d681:	83 c4 10             	add    esp,0x10
c001d684:	84 c0                	test   al,al
c001d686:	75 0a                	jne    c001d692 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001d688:	bb 01 00 00 00       	mov    ebx,0x1
c001d68d:	e9 60 02 00 00       	jmp    c001d8f2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c001d692:	8b 87 74 01 00 00    	mov    eax,DWORD PTR [edi+0x174]
c001d698:	c1 e0 04             	shl    eax,0x4
c001d69b:	0f b6 c0             	movzx  eax,al
c001d69e:	50                   	push   eax
c001d69f:	6a 06                	push   0x6
c001d6a1:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d6a8:	50                   	push   eax
c001d6a9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d6af:	e8 30 e7 ff ff       	call   c001bde4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d6b4:	6a 00                	push   0x0
c001d6b6:	6a 01                	push   0x1
c001d6b8:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d6bf:	50                   	push   eax
c001d6c0:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d6c6:	e8 19 e7 ff ff       	call   c001bde4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d6cb:	83 c4 20             	add    esp,0x20
c001d6ce:	0f b6 c3             	movzx  eax,bl
c001d6d1:	0f b6 df             	movzx  ebx,bh
c001d6d4:	50                   	push   eax
c001d6d5:	6a 04                	push   0x4
c001d6d7:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d6de:	50                   	push   eax
c001d6df:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d6e5:	e8 fa e6 ff ff       	call   c001bde4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d6ea:	53                   	push   ebx
c001d6eb:	6a 05                	push   0x5
c001d6ed:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d6f4:	50                   	push   eax
c001d6f5:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d6fb:	e8 e4 e6 ff ff       	call   c001bde4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d700:	83 c4 20             	add    esp,0x20
c001d703:	68 a0 00 00 00       	push   0xa0
c001d708:	6a 07                	push   0x7
c001d70a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d711:	50                   	push   eax
c001d712:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d718:	e8 c7 e6 ff ff       	call   c001bde4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d71d:	83 c4 0c             	add    esp,0xc
c001d720:	6a 01                	push   0x1
c001d722:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d729:	50                   	push   eax
c001d72a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d730:	e8 97 f1 ff ff       	call   c001c8cc <IDE::polling(unsigned char, unsigned int)>
c001d735:	83 c4 10             	add    esp,0x10
c001d738:	0f b6 d8             	movzx  ebx,al
c001d73b:	8b 87 70 01 00 00    	mov    eax,DWORD PTR [edi+0x170]
c001d741:	85 db                	test   ebx,ebx
c001d743:	74 20                	je     c001d765 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001d745:	53                   	push   ebx
c001d746:	0f b6 c0             	movzx  eax,al
c001d749:	0f b6 97 74 01 00 00 	movzx  edx,BYTE PTR [edi+0x174]
c001d750:	52                   	push   edx
c001d751:	50                   	push   eax
c001d752:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d758:	e8 b5 f0 ff ff       	call   c001c812 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001d75d:	83 c4 10             	add    esp,0x10
c001d760:	e9 8d 01 00 00       	jmp    c001d8f2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c001d765:	0f b6 c0             	movzx  eax,al
c001d768:	53                   	push   ebx
c001d769:	53                   	push   ebx
c001d76a:	50                   	push   eax
c001d76b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d771:	e8 5c e6 ff ff       	call   c001bdd2 <IDE::getBase(unsigned char)>
c001d776:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001d77a:	b9 06 00 00 00       	mov    ecx,0x6
c001d77f:	89 c2                	mov    edx,eax
c001d781:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001d784:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001d788:	83 c4 10             	add    esp,0x10
c001d78b:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001d790:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d794:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d79a:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d7a1:	85 db                	test   ebx,ebx
c001d7a3:	0f 84 ec 00 00 00    	je     c001d895 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x261>
c001d7a9:	51                   	push   ecx
c001d7aa:	51                   	push   ecx
c001d7ab:	52                   	push   edx
c001d7ac:	50                   	push   eax
c001d7ad:	e8 a0 e7 ff ff       	call   c001bf52 <IDE::waitInterrupt(unsigned char)>
c001d7b2:	83 c4 10             	add    esp,0x10
c001d7b5:	84 c0                	test   al,al
c001d7b7:	0f 84 cb fe ff ff    	je     c001d688 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001d7bd:	56                   	push   esi
c001d7be:	56                   	push   esi
c001d7bf:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d7c6:	50                   	push   eax
c001d7c7:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d7cd:	e8 ec e5 ff ff       	call   c001bdbe <IDE::prepareInterrupt(unsigned char)>
c001d7d2:	83 c4 0c             	add    esp,0xc
c001d7d5:	6a 04                	push   0x4
c001d7d7:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d7de:	50                   	push   eax
c001d7df:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d7e5:	e8 ba e6 ff ff       	call   c001bea4 <IDE::read(unsigned char, unsigned char)>
c001d7ea:	83 c4 0c             	add    esp,0xc
c001d7ed:	89 c6                	mov    esi,eax
c001d7ef:	6a 05                	push   0x5
c001d7f1:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d7f8:	50                   	push   eax
c001d7f9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d7ff:	e8 a0 e6 ff ff       	call   c001bea4 <IDE::read(unsigned char, unsigned char)>
c001d804:	89 f1                	mov    ecx,esi
c001d806:	0f b6 c0             	movzx  eax,al
c001d809:	0f b6 f1             	movzx  esi,cl
c001d80c:	c1 e0 08             	shl    eax,0x8
c001d80f:	09 c6                	or     esi,eax
c001d811:	d1 fe                	sar    esi,1
c001d813:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001d817:	83 c4 10             	add    esp,0x10
c001d81a:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001d81f:	74 41                	je     c001d862 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x22e>
c001d821:	31 c9                	xor    ecx,ecx
c001d823:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d829:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d830:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001d834:	75 0a                	jne    c001d840 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x20c>
c001d836:	01 c9                	add    ecx,ecx
c001d838:	01 cd                	add    ebp,ecx
c001d83a:	4b                   	dec    ebx
c001d83b:	e9 54 ff ff ff       	jmp    c001d794 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x160>
c001d840:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001d845:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001d849:	51                   	push   ecx
c001d84a:	51                   	push   ecx
c001d84b:	52                   	push   edx
c001d84c:	50                   	push   eax
c001d84d:	e8 80 e5 ff ff       	call   c001bdd2 <IDE::getBase(unsigned char)>
c001d852:	89 c2                	mov    edx,eax
c001d854:	89 f0                	mov    eax,esi
c001d856:	66 ef                	out    dx,ax
c001d858:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d85c:	83 c4 10             	add    esp,0x10
c001d85f:	41                   	inc    ecx
c001d860:	eb c1                	jmp    c001d823 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1ef>
c001d862:	31 f6                	xor    esi,esi
c001d864:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d86a:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d871:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001d875:	75 06                	jne    c001d87d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x249>
c001d877:	01 f6                	add    esi,esi
c001d879:	01 f5                	add    ebp,esi
c001d87b:	eb bd                	jmp    c001d83a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x206>
c001d87d:	51                   	push   ecx
c001d87e:	51                   	push   ecx
c001d87f:	52                   	push   edx
c001d880:	50                   	push   eax
c001d881:	e8 4c e5 ff ff       	call   c001bdd2 <IDE::getBase(unsigned char)>
c001d886:	89 c2                	mov    edx,eax
c001d888:	66 ed                	in     ax,dx
c001d88a:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001d88f:	83 c4 10             	add    esp,0x10
c001d892:	46                   	inc    esi
c001d893:	eb cf                	jmp    c001d864 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x230>
c001d895:	51                   	push   ecx
c001d896:	51                   	push   ecx
c001d897:	52                   	push   edx
c001d898:	50                   	push   eax
c001d899:	e8 b4 e6 ff ff       	call   c001bf52 <IDE::waitInterrupt(unsigned char)>
c001d89e:	83 c4 10             	add    esp,0x10
c001d8a1:	84 c0                	test   al,al
c001d8a3:	0f 84 df fd ff ff    	je     c001d688 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001d8a9:	bb a0 86 01 00       	mov    ebx,0x186a0
c001d8ae:	52                   	push   edx
c001d8af:	52                   	push   edx
c001d8b0:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d8b7:	50                   	push   eax
c001d8b8:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d8be:	e8 fb e4 ff ff       	call   c001bdbe <IDE::prepareInterrupt(unsigned char)>
c001d8c3:	83 c4 10             	add    esp,0x10
c001d8c6:	50                   	push   eax
c001d8c7:	50                   	push   eax
c001d8c8:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d8cf:	50                   	push   eax
c001d8d0:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d8d6:	e8 f7 e4 ff ff       	call   c001bdd2 <IDE::getBase(unsigned char)>
c001d8db:	8d 50 07             	lea    edx,[eax+0x7]
c001d8de:	ec                   	in     al,dx
c001d8df:	83 c4 10             	add    esp,0x10
c001d8e2:	a8 88                	test   al,0x88
c001d8e4:	74 0a                	je     c001d8f0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2bc>
c001d8e6:	4b                   	dec    ebx
c001d8e7:	75 dd                	jne    c001d8c6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x292>
c001d8e9:	bb 02 00 00 00       	mov    ebx,0x2
c001d8ee:	eb 02                	jmp    c001d8f2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c001d8f0:	31 db                	xor    ebx,ebx
c001d8f2:	83 c4 1c             	add    esp,0x1c
c001d8f5:	89 d8                	mov    eax,ebx
c001d8f7:	5b                   	pop    ebx
c001d8f8:	5e                   	pop    esi
c001d8f9:	5f                   	pop    edi
c001d8fa:	5d                   	pop    ebp
c001d8fb:	c3                   	ret    

c001d8fc <ATAPI::diskRemoved()>:
c001d8fc:	53                   	push   ebx
c001d8fd:	83 ec 14             	sub    esp,0x14
c001d900:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001d904:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001d90b:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001d911:	e8 8c 04 ff ff       	call   c000dda2 <LogicalDisk::unmount()>
c001d916:	58                   	pop    eax
c001d917:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001d91d:	e8 62 0e ff ff       	call   c000e784 <VCache::writeWriteBuffer()>
c001d922:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001d928:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d92c:	83 c4 18             	add    esp,0x18
c001d92f:	5b                   	pop    ebx
c001d930:	e9 3f 0e ff ff       	jmp    c000e774 <VCache::invalidateReadBuffer()>
c001d935:	90                   	nop

c001d936 <ATAPI::eject()>:
c001d936:	57                   	push   edi
c001d937:	b9 03 00 00 00       	mov    ecx,0x3
c001d93c:	53                   	push   ebx
c001d93d:	83 ec 14             	sub    esp,0x14
c001d940:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d944:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001d948:	fc                   	cld    
c001d949:	31 c0                	xor    eax,eax
c001d94b:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d94d:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001d952:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001d957:	50                   	push   eax
c001d958:	50                   	push   eax
c001d959:	6a 00                	push   0x0
c001d95b:	6a 00                	push   0x0
c001d95d:	6a 00                	push   0x0
c001d95f:	6a 02                	push   0x2
c001d961:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d965:	50                   	push   eax
c001d966:	53                   	push   ebx
c001d967:	e8 c8 fc ff ff       	call   c001d634 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d96c:	83 c4 14             	add    esp,0x14
c001d96f:	53                   	push   ebx
c001d970:	e8 87 ff ff ff       	call   c001d8fc <ATAPI::diskRemoved()>
c001d975:	83 c4 24             	add    esp,0x24
c001d978:	31 c0                	xor    eax,eax
c001d97a:	5b                   	pop    ebx
c001d97b:	5f                   	pop    edi
c001d97c:	c3                   	ret    
c001d97d:	90                   	nop

c001d97e <ATAPI::diskInserted()>:
c001d97e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d982:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001d989:	c3                   	ret    

c001d98a <ATAPI::detectMedia()>:
c001d98a:	56                   	push   esi
c001d98b:	53                   	push   ebx
c001d98c:	83 ec 28             	sub    esp,0x28
c001d98f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001d993:	6a 0c                	push   0xc
c001d995:	6a 00                	push   0x0
c001d997:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001d99b:	56                   	push   esi
c001d99c:	e8 4f 2b fe ff       	call   c00004f0 <memset>
c001d9a1:	58                   	pop    eax
c001d9a2:	5a                   	pop    edx
c001d9a3:	6a 00                	push   0x0
c001d9a5:	6a 00                	push   0x0
c001d9a7:	6a 00                	push   0x0
c001d9a9:	6a 00                	push   0x0
c001d9ab:	56                   	push   esi
c001d9ac:	53                   	push   ebx
c001d9ad:	e8 82 fc ff ff       	call   c001d634 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d9b2:	83 c4 1c             	add    esp,0x1c
c001d9b5:	6a 0c                	push   0xc
c001d9b7:	6a 00                	push   0x0
c001d9b9:	56                   	push   esi
c001d9ba:	e8 31 2b fe ff       	call   c00004f0 <memset>
c001d9bf:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001d9c4:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001d9c9:	59                   	pop    ecx
c001d9ca:	58                   	pop    eax
c001d9cb:	6a 01                	push   0x1
c001d9cd:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001d9d1:	50                   	push   eax
c001d9d2:	6a 00                	push   0x0
c001d9d4:	6a 12                	push   0x12
c001d9d6:	56                   	push   esi
c001d9d7:	53                   	push   ebx
c001d9d8:	e8 57 fc ff ff       	call   c001d634 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d9dd:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001d9e1:	83 c4 20             	add    esp,0x20
c001d9e4:	83 e0 7f             	and    eax,0x7f
c001d9e7:	83 f8 70             	cmp    eax,0x70
c001d9ea:	74 15                	je     c001da01 <ATAPI::detectMedia()+0x77>
c001d9ec:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d9f3:	75 0c                	jne    c001da01 <ATAPI::detectMedia()+0x77>
c001d9f5:	83 ec 0c             	sub    esp,0xc
c001d9f8:	53                   	push   ebx
c001d9f9:	e8 80 ff ff ff       	call   c001d97e <ATAPI::diskInserted()>
c001d9fe:	83 c4 10             	add    esp,0x10
c001da01:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001da05:	83 e0 0f             	and    eax,0xf
c001da08:	83 f8 02             	cmp    eax,0x2
c001da0b:	75 1b                	jne    c001da28 <ATAPI::detectMedia()+0x9e>
c001da0d:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001da12:	75 2d                	jne    c001da41 <ATAPI::detectMedia()+0xb7>
c001da14:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001da1b:	74 24                	je     c001da41 <ATAPI::detectMedia()+0xb7>
c001da1d:	83 ec 0c             	sub    esp,0xc
c001da20:	53                   	push   ebx
c001da21:	e8 d6 fe ff ff       	call   c001d8fc <ATAPI::diskRemoved()>
c001da26:	eb 16                	jmp    c001da3e <ATAPI::detectMedia()+0xb4>
c001da28:	85 c0                	test   eax,eax
c001da2a:	75 15                	jne    c001da41 <ATAPI::detectMedia()+0xb7>
c001da2c:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001da33:	75 0c                	jne    c001da41 <ATAPI::detectMedia()+0xb7>
c001da35:	83 ec 0c             	sub    esp,0xc
c001da38:	53                   	push   ebx
c001da39:	e8 40 ff ff ff       	call   c001d97e <ATAPI::diskInserted()>
c001da3e:	83 c4 10             	add    esp,0x10
c001da41:	83 c4 24             	add    esp,0x24
c001da44:	5b                   	pop    ebx
c001da45:	5e                   	pop    esi
c001da46:	c3                   	ret    
c001da47:	90                   	nop

c001da48 <ATAPI::open(int, int, void*)>:
c001da48:	56                   	push   esi
c001da49:	53                   	push   ebx
c001da4a:	50                   	push   eax
c001da4b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001da4f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001da53:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001da57:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001da5d:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001da63:	c1 e0 06             	shl    eax,0x6
c001da66:	01 d0                	add    eax,edx
c001da68:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001da6f:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001da75:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001da7c:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001da86:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001da8c:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001da93:	6a 04                	push   0x4
c001da95:	6a 0c                	push   0xc
c001da97:	51                   	push   ecx
c001da98:	52                   	push   edx
c001da99:	e8 46 e3 ff ff       	call   c001bde4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001da9e:	90                   	nop
c001da9f:	90                   	nop
c001daa0:	6a 00                	push   0x0
c001daa2:	6a 0c                	push   0xc
c001daa4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001daab:	50                   	push   eax
c001daac:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001dab2:	e8 2d e3 ff ff       	call   c001bde4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001dab7:	83 c4 14             	add    esp,0x14
c001daba:	68 78 01 00 00       	push   0x178
c001dabf:	e8 f2 9f fe ff       	call   c0007ab6 <malloc>
c001dac4:	83 c4 0c             	add    esp,0xc
c001dac7:	89 c6                	mov    esi,eax
c001dac9:	6a 00                	push   0x0
c001dacb:	68 ff ff ff 7f       	push   0x7fffffff
c001dad0:	6a 00                	push   0x0
c001dad2:	6a 00                	push   0x0
c001dad4:	53                   	push   ebx
c001dad5:	68 8f 35 02 c0       	push   0xc002358f
c001dada:	50                   	push   eax
c001dadb:	e8 00 01 ff ff       	call   c000dbe0 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001dae0:	83 c4 14             	add    esp,0x14
c001dae3:	56                   	push   esi
c001dae4:	e8 b7 01 ff ff       	call   c000dca0 <LogicalDisk::assignDriveLetter()>
c001dae9:	5a                   	pop    edx
c001daea:	0f be c0             	movsx  eax,al
c001daed:	59                   	pop    ecx
c001daee:	50                   	push   eax
c001daef:	68 e0 33 02 c0       	push   0xc00233e0
c001daf4:	e8 4c ce fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001daf9:	58                   	pop    eax
c001dafa:	5a                   	pop    edx
c001dafb:	56                   	push   esi
c001dafc:	53                   	push   ebx
c001dafd:	e8 38 ef fe ff       	call   c000ca3a <Device::addChild(Device*)>
c001db02:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c001db08:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001db0b:	e8 5e f3 fe ff       	call   c000ce6e <PhysicalDisk::startCache()>
c001db10:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001db17:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001db1a:	e8 6b fe ff ff       	call   c001d98a <ATAPI::detectMedia()>
c001db1f:	83 c4 14             	add    esp,0x14
c001db22:	31 c0                	xor    eax,eax
c001db24:	5b                   	pop    ebx
c001db25:	5e                   	pop    esi
c001db26:	c3                   	ret    
c001db27:	90                   	nop

c001db28 <ATAPI::read(unsigned long long, int, void*)>:
c001db28:	55                   	push   ebp
c001db29:	57                   	push   edi
c001db2a:	56                   	push   esi
c001db2b:	53                   	push   ebx
c001db2c:	83 ec 1c             	sub    esp,0x1c
c001db2f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001db33:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001db37:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001db3b:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001db42:	74 3c                	je     c001db80 <ATAPI::read(unsigned long long, int, void*)+0x58>
c001db44:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001db48:	b9 03 00 00 00       	mov    ecx,0x3
c001db4d:	fc                   	cld    
c001db4e:	31 c0                	xor    eax,eax
c001db50:	0f ce                	bswap  esi
c001db52:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001db54:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001db59:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001db5d:	89 e8                	mov    eax,ebp
c001db5f:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001db63:	50                   	push   eax
c001db64:	50                   	push   eax
c001db65:	55                   	push   ebp
c001db66:	c1 e5 0b             	shl    ebp,0xb
c001db69:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001db6d:	6a 00                	push   0x0
c001db6f:	55                   	push   ebp
c001db70:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001db74:	50                   	push   eax
c001db75:	53                   	push   ebx
c001db76:	e8 b9 fa ff ff       	call   c001d634 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001db7b:	83 c4 20             	add    esp,0x20
c001db7e:	eb 1a                	jmp    c001db9a <ATAPI::read(unsigned long long, int, void*)+0x72>
c001db80:	83 ec 0c             	sub    esp,0xc
c001db83:	53                   	push   ebx
c001db84:	e8 01 fe ff ff       	call   c001d98a <ATAPI::detectMedia()>
c001db89:	83 c4 10             	add    esp,0x10
c001db8c:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001db93:	75 af                	jne    c001db44 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001db95:	b8 02 00 00 00       	mov    eax,0x2
c001db9a:	83 c4 1c             	add    esp,0x1c
c001db9d:	5b                   	pop    ebx
c001db9e:	5e                   	pop    esi
c001db9f:	5f                   	pop    edi
c001dba0:	5d                   	pop    ebp
c001dba1:	c3                   	ret    

c001dba2 <SATA::close(int, int, void*)>:
c001dba2:	83 ec 0c             	sub    esp,0xc
c001dba5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dba9:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001dbaf:	85 c0                	test   eax,eax
c001dbb1:	74 0c                	je     c001dbbf <SATA::close(int, int, void*)+0x1d>
c001dbb3:	83 ec 0c             	sub    esp,0xc
c001dbb6:	8b 10                	mov    edx,DWORD PTR [eax]
c001dbb8:	50                   	push   eax
c001dbb9:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001dbbc:	83 c4 10             	add    esp,0x10
c001dbbf:	31 c0                	xor    eax,eax
c001dbc1:	83 c4 0c             	add    esp,0xc
c001dbc4:	c3                   	ret    
c001dbc5:	90                   	nop

c001dbc6 <SATA::powerSaving(PowerSavingLevel)>:
c001dbc6:	c3                   	ret    
c001dbc7:	90                   	nop

c001dbc8 <SATA::open(int, int, void*)>:
c001dbc8:	56                   	push   esi
c001dbc9:	53                   	push   ebx
c001dbca:	50                   	push   eax
c001dbcb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001dbcf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001dbd3:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001dbdd:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001dbe3:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001dbed:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001dbf1:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001dbfb:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001dc01:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001dc08:	e8 b2 a1 fe ff       	call   c0007dbf <Phys::allocatePage()>
c001dc0d:	89 c6                	mov    esi,eax
c001dc0f:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001dc15:	81 c6 00 10 00 00    	add    esi,0x1000
c001dc1b:	e8 9f a1 fe ff       	call   c0007dbf <Phys::allocatePage()>
c001dc20:	39 c6                	cmp    esi,eax
c001dc22:	74 10                	je     c001dc34 <SATA::open(int, int, void*)+0x6c>
c001dc24:	83 ec 0c             	sub    esp,0xc
c001dc27:	68 28 34 02 c0       	push   0xc0023428
c001dc2c:	e8 62 3a ff ff       	call   c0011693 <KePanic(char const*)>
c001dc31:	83 c4 10             	add    esp,0x10
c001dc34:	83 ec 0c             	sub    esp,0xc
c001dc37:	6a 02                	push   0x2
c001dc39:	e8 cf b9 fe ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c001dc3e:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001dc44:	6a 03                	push   0x3
c001dc46:	50                   	push   eax
c001dc47:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001dc4d:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c001dc53:	e8 c8 c0 fe ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c001dc58:	83 c4 14             	add    esp,0x14
c001dc5b:	53                   	push   ebx
c001dc5c:	e8 0d f2 fe ff       	call   c000ce6e <PhysicalDisk::startCache()>
c001dc61:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001dc64:	e8 49 04 ff ff       	call   c000e0b2 <createPartitionsForDisk(PhysicalDisk*)>
c001dc69:	83 c4 14             	add    esp,0x14
c001dc6c:	31 c0                	xor    eax,eax
c001dc6e:	5b                   	pop    ebx
c001dc6f:	5e                   	pop    esi
c001dc70:	c3                   	ret    
c001dc71:	90                   	nop

c001dc72 <SATA::SATA()>:
c001dc72:	83 ec 0c             	sub    esp,0xc
c001dc75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc79:	83 ec 04             	sub    esp,0x4
c001dc7c:	68 00 02 00 00       	push   0x200
c001dc81:	68 3c 34 02 c0       	push   0xc002343c
c001dc86:	50                   	push   eax
c001dc87:	e8 7a f1 fe ff       	call   c000ce06 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001dc8c:	83 c4 10             	add    esp,0x10
c001dc8f:	ba ac 34 02 c0       	mov    edx,0xc00234ac
c001dc94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc98:	89 10                	mov    DWORD PTR [eax],edx
c001dc9a:	90                   	nop
c001dc9b:	83 c4 0c             	add    esp,0xc
c001dc9e:	c3                   	ret    
c001dc9f:	90                   	nop

c001dca0 <SATA::access(unsigned long long, int, void*, bool)>:
c001dca0:	55                   	push   ebp
c001dca1:	57                   	push   edi
c001dca2:	56                   	push   esi
c001dca3:	53                   	push   ebx
c001dca4:	83 ec 2c             	sub    esp,0x2c
c001dca7:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001dcab:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001dcaf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001dcb3:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001dcb7:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001dcbb:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001dcc0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001dcc4:	7e 10                	jle    c001dcd6 <SATA::access(unsigned long long, int, void*, bool)+0x36>
c001dcc6:	83 ec 0c             	sub    esp,0xc
c001dcc9:	68 4c 34 02 c0       	push   0xc002344c
c001dcce:	e8 c0 39 ff ff       	call   c0011693 <KePanic(char const*)>
c001dcd3:	83 c4 10             	add    esp,0x10
c001dcd6:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001dcdc:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001dce2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001dce8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001dcec:	89 d0                	mov    eax,edx
c001dcee:	c1 e0 07             	shl    eax,0x7
c001dcf1:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001dcf5:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001dcff:	51                   	push   ecx
c001dd00:	8d 42 02             	lea    eax,[edx+0x2]
c001dd03:	51                   	push   ecx
c001dd04:	c1 e0 07             	shl    eax,0x7
c001dd07:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001dd0b:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001dd0f:	50                   	push   eax
c001dd10:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001dd16:	e8 91 ec ff ff       	call   c001c9ac <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001dd1b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001dd1f:	83 c4 10             	add    esp,0x10
c001dd22:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001dd27:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001dd2b:	0f 84 57 01 00 00    	je     c001de88 <SATA::access(unsigned long long, int, void*, bool)+0x1e8>
c001dd31:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001dd35:	c1 e0 09             	shl    eax,0x9
c001dd38:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001dd3d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001dd41:	74 0e                	je     c001dd51 <SATA::access(unsigned long long, int, void*, bool)+0xb1>
c001dd43:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001dd49:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001dd4d:	89 c1                	mov    ecx,eax
c001dd4f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001dd51:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001dd57:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001dd5b:	8d 42 02             	lea    eax,[edx+0x2]
c001dd5e:	c1 e0 07             	shl    eax,0x7
c001dd61:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001dd65:	8b 00                	mov    eax,DWORD PTR [eax]
c001dd67:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001dd6d:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001dd73:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001dd77:	c1 e1 05             	shl    ecx,0x5
c001dd7a:	01 c8                	add    eax,ecx
c001dd7c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001dd80:	83 e1 01             	and    ecx,0x1
c001dd83:	89 ce                	mov    esi,ecx
c001dd85:	8a 08                	mov    cl,BYTE PTR [eax]
c001dd87:	c1 e6 06             	shl    esi,0x6
c001dd8a:	83 e1 bf             	and    ecx,0xffffffbf
c001dd8d:	09 f1                	or     ecx,esi
c001dd8f:	88 08                	mov    BYTE PTR [eax],cl
c001dd91:	8b 08                	mov    ecx,DWORD PTR [eax]
c001dd93:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001dd99:	81 c9 05 00 01 00    	or     ecx,0x10005
c001dd9f:	89 08                	mov    DWORD PTR [eax],ecx
c001dda1:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001dda7:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001ddad:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001ddb3:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001ddb6:	50                   	push   eax
c001ddb7:	68 90 00 00 00       	push   0x90
c001ddbc:	6a 00                	push   0x0
c001ddbe:	56                   	push   esi
c001ddbf:	e8 2c 27 fe ff       	call   c00004f0 <memset>
c001ddc4:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001ddca:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001ddd0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ddd4:	83 c4 10             	add    esp,0x10
c001ddd7:	48                   	dec    eax
c001ddd8:	25 ff ff 3f 00       	and    eax,0x3fffff
c001dddd:	89 c1                	mov    ecx,eax
c001dddf:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001dde5:	25 00 00 c0 ff       	and    eax,0xffc00000
c001ddea:	09 c8                	or     eax,ecx
c001ddec:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001ddf2:	8a 86 8f 00 00 00    	mov    al,BYTE PTR [esi+0x8f]
c001ddf8:	83 c8 80             	or     eax,0xffffff80
c001ddfb:	88 86 8f 00 00 00    	mov    BYTE PTR [esi+0x8f],al
c001de01:	66 8b 06             	mov    ax,WORD PTR [esi]
c001de04:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001de08:	25 00 7f 00 00       	and    eax,0x7f00
c001de0d:	0d 27 80 ff ff       	or     eax,0xffff8027
c001de12:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001de17:	66 89 06             	mov    WORD PTR [esi],ax
c001de1a:	b0 35                	mov    al,0x35
c001de1c:	75 02                	jne    c001de20 <SATA::access(unsigned long long, int, void*, bool)+0x180>
c001de1e:	b0 25                	mov    al,0x25
c001de20:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001de23:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c001de27:	89 e8                	mov    eax,ebp
c001de29:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001de2d:	c1 e8 10             	shr    eax,0x10
c001de30:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001de33:	89 e8                	mov    eax,ebp
c001de35:	c1 e8 18             	shr    eax,0x18
c001de38:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001de3b:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001de3f:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001de42:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001de46:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001de49:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001de4d:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001de51:	89 d6                	mov    esi,edx
c001de53:	31 c0                	xor    eax,eax
c001de55:	c1 e6 07             	shl    esi,0x7
c001de58:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001de5c:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001de62:	80 e1 88             	and    cl,0x88
c001de65:	74 0a                	je     c001de71 <SATA::access(unsigned long long, int, void*, bool)+0x1d1>
c001de67:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001de6c:	74 0a                	je     c001de78 <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c001de6e:	40                   	inc    eax
c001de6f:	eb eb                	jmp    c001de5c <SATA::access(unsigned long long, int, void*, bool)+0x1bc>
c001de71:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001de76:	75 17                	jne    c001de8f <SATA::access(unsigned long long, int, void*, bool)+0x1ef>
c001de78:	83 ec 0c             	sub    esp,0xc
c001de7b:	68 85 34 02 c0       	push   0xc0023485
c001de80:	e8 c0 ca fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001de85:	83 c4 10             	add    esp,0x10
c001de88:	b8 01 00 00 00       	mov    eax,0x1
c001de8d:	eb 5d                	jmp    c001deec <SATA::access(unsigned long long, int, void*, bool)+0x24c>
c001de8f:	b8 01 00 00 00       	mov    eax,0x1
c001de94:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001de98:	c1 e2 07             	shl    edx,0x7
c001de9b:	d3 e0                	shl    eax,cl
c001de9d:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c001dea1:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001dea7:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001dead:	85 c8                	test   eax,ecx
c001deaf:	74 16                	je     c001dec7 <SATA::access(unsigned long long, int, void*, bool)+0x227>
c001deb1:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001deb7:	0f ba e1 1e          	bt     ecx,0x1e
c001debb:	73 ea                	jae    c001dea7 <SATA::access(unsigned long long, int, void*, bool)+0x207>
c001debd:	83 ec 0c             	sub    esp,0xc
c001dec0:	68 93 34 02 c0       	push   0xc0023493
c001dec5:	eb b9                	jmp    c001de80 <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001dec7:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001decd:	0f ba e0 1e          	bt     eax,0x1e
c001ded1:	72 b5                	jb     c001de88 <SATA::access(unsigned long long, int, void*, bool)+0x1e8>
c001ded3:	31 c0                	xor    eax,eax
c001ded5:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001deda:	75 10                	jne    c001deec <SATA::access(unsigned long long, int, void*, bool)+0x24c>
c001dedc:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001dee2:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001dee6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001deea:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001deec:	83 c4 2c             	add    esp,0x2c
c001deef:	5b                   	pop    ebx
c001def0:	5e                   	pop    esi
c001def1:	5f                   	pop    edi
c001def2:	5d                   	pop    ebp
c001def3:	c3                   	ret    

c001def4 <SATA::read(unsigned long long, int, void*)>:
c001def4:	55                   	push   ebp
c001def5:	57                   	push   edi
c001def6:	56                   	push   esi
c001def7:	be 04 00 00 00       	mov    esi,0x4
c001defc:	53                   	push   ebx
c001defd:	83 ec 0c             	sub    esp,0xc
c001df00:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001df04:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001df08:	8d 7b ff             	lea    edi,[ebx-0x1]
c001df0b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001df0f:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001df13:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001df19:	0f 87 1a 02 00 00    	ja     c001e139 <SATA::read(unsigned long long, int, void*)+0x245>
c001df1f:	be 06 00 00 00       	mov    esi,0x6
c001df24:	85 c9                	test   ecx,ecx
c001df26:	0f 84 0d 02 00 00    	je     c001e139 <SATA::read(unsigned long long, int, void*)+0x245>
c001df2c:	56                   	push   esi
c001df2d:	56                   	push   esi
c001df2e:	6a 00                	push   0x0
c001df30:	51                   	push   ecx
c001df31:	53                   	push   ebx
c001df32:	52                   	push   edx
c001df33:	50                   	push   eax
c001df34:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001df38:	e8 63 fd ff ff       	call   c001dca0 <SATA::access(unsigned long long, int, void*, bool)>
c001df3d:	83 c4 20             	add    esp,0x20
c001df40:	89 c6                	mov    esi,eax
c001df42:	85 c0                	test   eax,eax
c001df44:	0f 85 ea 01 00 00    	jne    c001e134 <SATA::read(unsigned long long, int, void*)+0x240>
c001df4a:	01 1d b4 d0 02 c0    	add    DWORD PTR ds:0xc002d0b4,ebx
c001df50:	bb 0a 00 00 00       	mov    ebx,0xa
c001df55:	50                   	push   eax
c001df56:	50                   	push   eax
c001df57:	6a 0f                	push   0xf
c001df59:	6a 00                	push   0x0
c001df5b:	e8 75 f2 ff ff       	call   c001d1d5 <combineColours(unsigned char, unsigned char)>
c001df60:	5a                   	pop    edx
c001df61:	0f b6 c0             	movzx  eax,al
c001df64:	59                   	pop    ecx
c001df65:	b9 10 27 00 00       	mov    ecx,0x2710
c001df6a:	50                   	push   eax
c001df6b:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001df70:	99                   	cdq    
c001df71:	f7 f9                	idiv   ecx
c001df73:	99                   	cdq    
c001df74:	f7 fb                	idiv   ebx
c001df76:	8d 42 30             	lea    eax,[edx+0x30]
c001df79:	0f b6 c0             	movzx  eax,al
c001df7c:	50                   	push   eax
c001df7d:	e8 42 f2 ff ff       	call   c001d1c4 <combineCharAndColour(char, unsigned char)>
c001df82:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001df88:	5f                   	pop    edi
c001df89:	5d                   	pop    ebp
c001df8a:	bd e8 03 00 00       	mov    ebp,0x3e8
c001df8f:	6a 0f                	push   0xf
c001df91:	6a 00                	push   0x0
c001df93:	e8 3d f2 ff ff       	call   c001d1d5 <combineColours(unsigned char, unsigned char)>
c001df98:	5a                   	pop    edx
c001df99:	0f b6 c0             	movzx  eax,al
c001df9c:	59                   	pop    ecx
c001df9d:	50                   	push   eax
c001df9e:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001dfa3:	99                   	cdq    
c001dfa4:	f7 fd                	idiv   ebp
c001dfa6:	99                   	cdq    
c001dfa7:	f7 fb                	idiv   ebx
c001dfa9:	8d 42 30             	lea    eax,[edx+0x30]
c001dfac:	0f b6 c0             	movzx  eax,al
c001dfaf:	50                   	push   eax
c001dfb0:	e8 0f f2 ff ff       	call   c001d1c4 <combineCharAndColour(char, unsigned char)>
c001dfb5:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001dfbb:	5f                   	pop    edi
c001dfbc:	bf 64 00 00 00       	mov    edi,0x64
c001dfc1:	58                   	pop    eax
c001dfc2:	6a 0f                	push   0xf
c001dfc4:	6a 00                	push   0x0
c001dfc6:	e8 0a f2 ff ff       	call   c001d1d5 <combineColours(unsigned char, unsigned char)>
c001dfcb:	5a                   	pop    edx
c001dfcc:	0f b6 c0             	movzx  eax,al
c001dfcf:	59                   	pop    ecx
c001dfd0:	50                   	push   eax
c001dfd1:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001dfd6:	99                   	cdq    
c001dfd7:	f7 ff                	idiv   edi
c001dfd9:	99                   	cdq    
c001dfda:	f7 fb                	idiv   ebx
c001dfdc:	8d 42 30             	lea    eax,[edx+0x30]
c001dfdf:	0f b6 c0             	movzx  eax,al
c001dfe2:	50                   	push   eax
c001dfe3:	e8 dc f1 ff ff       	call   c001d1c4 <combineCharAndColour(char, unsigned char)>
c001dfe8:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001dfee:	58                   	pop    eax
c001dfef:	5a                   	pop    edx
c001dff0:	6a 0f                	push   0xf
c001dff2:	6a 00                	push   0x0
c001dff4:	e8 dc f1 ff ff       	call   c001d1d5 <combineColours(unsigned char, unsigned char)>
c001dff9:	59                   	pop    ecx
c001dffa:	0f b6 c0             	movzx  eax,al
c001dffd:	5a                   	pop    edx
c001dffe:	50                   	push   eax
c001dfff:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e004:	99                   	cdq    
c001e005:	f7 fb                	idiv   ebx
c001e007:	99                   	cdq    
c001e008:	f7 fb                	idiv   ebx
c001e00a:	8d 42 30             	lea    eax,[edx+0x30]
c001e00d:	0f b6 c0             	movzx  eax,al
c001e010:	50                   	push   eax
c001e011:	e8 ae f1 ff ff       	call   c001d1c4 <combineCharAndColour(char, unsigned char)>
c001e016:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001e01c:	59                   	pop    ecx
c001e01d:	58                   	pop    eax
c001e01e:	6a 0f                	push   0xf
c001e020:	6a 00                	push   0x0
c001e022:	e8 ae f1 ff ff       	call   c001d1d5 <combineColours(unsigned char, unsigned char)>
c001e027:	5a                   	pop    edx
c001e028:	0f b6 c0             	movzx  eax,al
c001e02b:	59                   	pop    ecx
c001e02c:	50                   	push   eax
c001e02d:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e032:	99                   	cdq    
c001e033:	f7 fb                	idiv   ebx
c001e035:	8d 42 30             	lea    eax,[edx+0x30]
c001e038:	0f b6 c0             	movzx  eax,al
c001e03b:	50                   	push   eax
c001e03c:	e8 83 f1 ff ff       	call   c001d1c4 <combineCharAndColour(char, unsigned char)>
c001e041:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001e047:	58                   	pop    eax
c001e048:	5a                   	pop    edx
c001e049:	6a 0f                	push   0xf
c001e04b:	6a 00                	push   0x0
c001e04d:	e8 83 f1 ff ff       	call   c001d1d5 <combineColours(unsigned char, unsigned char)>
c001e052:	59                   	pop    ecx
c001e053:	0f b6 c0             	movzx  eax,al
c001e056:	5a                   	pop    edx
c001e057:	b9 10 27 00 00       	mov    ecx,0x2710
c001e05c:	50                   	push   eax
c001e05d:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e062:	99                   	cdq    
c001e063:	f7 f9                	idiv   ecx
c001e065:	99                   	cdq    
c001e066:	f7 fb                	idiv   ebx
c001e068:	8d 42 30             	lea    eax,[edx+0x30]
c001e06b:	0f b6 c0             	movzx  eax,al
c001e06e:	50                   	push   eax
c001e06f:	e8 50 f1 ff ff       	call   c001d1c4 <combineCharAndColour(char, unsigned char)>
c001e074:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001e07a:	59                   	pop    ecx
c001e07b:	58                   	pop    eax
c001e07c:	6a 0f                	push   0xf
c001e07e:	6a 00                	push   0x0
c001e080:	e8 50 f1 ff ff       	call   c001d1d5 <combineColours(unsigned char, unsigned char)>
c001e085:	5a                   	pop    edx
c001e086:	0f b6 c0             	movzx  eax,al
c001e089:	59                   	pop    ecx
c001e08a:	50                   	push   eax
c001e08b:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e090:	99                   	cdq    
c001e091:	f7 fd                	idiv   ebp
c001e093:	99                   	cdq    
c001e094:	f7 fb                	idiv   ebx
c001e096:	8d 42 30             	lea    eax,[edx+0x30]
c001e099:	0f b6 c0             	movzx  eax,al
c001e09c:	50                   	push   eax
c001e09d:	e8 22 f1 ff ff       	call   c001d1c4 <combineCharAndColour(char, unsigned char)>
c001e0a2:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001e0a8:	5d                   	pop    ebp
c001e0a9:	58                   	pop    eax
c001e0aa:	6a 0f                	push   0xf
c001e0ac:	6a 00                	push   0x0
c001e0ae:	e8 22 f1 ff ff       	call   c001d1d5 <combineColours(unsigned char, unsigned char)>
c001e0b3:	5a                   	pop    edx
c001e0b4:	0f b6 c0             	movzx  eax,al
c001e0b7:	59                   	pop    ecx
c001e0b8:	50                   	push   eax
c001e0b9:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e0be:	99                   	cdq    
c001e0bf:	f7 ff                	idiv   edi
c001e0c1:	99                   	cdq    
c001e0c2:	f7 fb                	idiv   ebx
c001e0c4:	8d 42 30             	lea    eax,[edx+0x30]
c001e0c7:	0f b6 c0             	movzx  eax,al
c001e0ca:	50                   	push   eax
c001e0cb:	e8 f4 f0 ff ff       	call   c001d1c4 <combineCharAndColour(char, unsigned char)>
c001e0d0:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001e0d6:	5f                   	pop    edi
c001e0d7:	5d                   	pop    ebp
c001e0d8:	6a 0f                	push   0xf
c001e0da:	6a 00                	push   0x0
c001e0dc:	e8 f4 f0 ff ff       	call   c001d1d5 <combineColours(unsigned char, unsigned char)>
c001e0e1:	5a                   	pop    edx
c001e0e2:	0f b6 c0             	movzx  eax,al
c001e0e5:	59                   	pop    ecx
c001e0e6:	50                   	push   eax
c001e0e7:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e0ec:	99                   	cdq    
c001e0ed:	f7 fb                	idiv   ebx
c001e0ef:	99                   	cdq    
c001e0f0:	f7 fb                	idiv   ebx
c001e0f2:	8d 42 30             	lea    eax,[edx+0x30]
c001e0f5:	0f b6 c0             	movzx  eax,al
c001e0f8:	50                   	push   eax
c001e0f9:	e8 c6 f0 ff ff       	call   c001d1c4 <combineCharAndColour(char, unsigned char)>
c001e0fe:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001e104:	5f                   	pop    edi
c001e105:	5d                   	pop    ebp
c001e106:	6a 0f                	push   0xf
c001e108:	6a 00                	push   0x0
c001e10a:	e8 c6 f0 ff ff       	call   c001d1d5 <combineColours(unsigned char, unsigned char)>
c001e10f:	5a                   	pop    edx
c001e110:	0f b6 c0             	movzx  eax,al
c001e113:	59                   	pop    ecx
c001e114:	50                   	push   eax
c001e115:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e11a:	99                   	cdq    
c001e11b:	f7 fb                	idiv   ebx
c001e11d:	83 c2 30             	add    edx,0x30
c001e120:	0f b6 d2             	movzx  edx,dl
c001e123:	52                   	push   edx
c001e124:	e8 9b f0 ff ff       	call   c001d1c4 <combineCharAndColour(char, unsigned char)>
c001e129:	83 c4 10             	add    esp,0x10
c001e12c:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001e132:	eb 05                	jmp    c001e139 <SATA::read(unsigned long long, int, void*)+0x245>
c001e134:	be 01 00 00 00       	mov    esi,0x1
c001e139:	83 c4 0c             	add    esp,0xc
c001e13c:	89 f0                	mov    eax,esi
c001e13e:	5b                   	pop    ebx
c001e13f:	5e                   	pop    esi
c001e140:	5f                   	pop    edi
c001e141:	5d                   	pop    ebp
c001e142:	c3                   	ret    
c001e143:	90                   	nop

c001e144 <SATA::write(unsigned long long, int, void*)>:
c001e144:	55                   	push   ebp
c001e145:	b8 04 00 00 00       	mov    eax,0x4
c001e14a:	57                   	push   edi
c001e14b:	56                   	push   esi
c001e14c:	53                   	push   ebx
c001e14d:	83 ec 1c             	sub    esp,0x1c
c001e150:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001e154:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001e158:	8d 75 ff             	lea    esi,[ebp-0x1]
c001e15b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001e15f:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c001e163:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001e169:	0f 87 32 02 00 00    	ja     c001e3a1 <SATA::write(unsigned long long, int, void*)+0x25d>
c001e16f:	b8 06 00 00 00       	mov    eax,0x6
c001e174:	85 ff                	test   edi,edi
c001e176:	0f 84 25 02 00 00    	je     c001e3a1 <SATA::write(unsigned long long, int, void*)+0x25d>
c001e17c:	89 ee                	mov    esi,ebp
c001e17e:	c1 e6 09             	shl    esi,0x9
c001e181:	01 fe                	add    esi,edi
c001e183:	89 c8                	mov    eax,ecx
c001e185:	89 da                	mov    edx,ebx
c001e187:	83 c0 01             	add    eax,0x1
c001e18a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e18e:	83 d2 00             	adc    edx,0x0
c001e191:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e195:	50                   	push   eax
c001e196:	50                   	push   eax
c001e197:	6a 01                	push   0x1
c001e199:	57                   	push   edi
c001e19a:	81 c7 00 02 00 00    	add    edi,0x200
c001e1a0:	6a 01                	push   0x1
c001e1a2:	53                   	push   ebx
c001e1a3:	51                   	push   ecx
c001e1a4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001e1a8:	e8 f3 fa ff ff       	call   c001dca0 <SATA::access(unsigned long long, int, void*, bool)>
c001e1ad:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001e1b1:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001e1b5:	83 c4 20             	add    esp,0x20
c001e1b8:	39 f7                	cmp    edi,esi
c001e1ba:	75 c7                	jne    c001e183 <SATA::write(unsigned long long, int, void*)+0x3f>
c001e1bc:	bb 0a 00 00 00       	mov    ebx,0xa
c001e1c1:	01 2d b0 d0 02 c0    	add    DWORD PTR ds:0xc002d0b0,ebp
c001e1c7:	bd 10 27 00 00       	mov    ebp,0x2710
c001e1cc:	50                   	push   eax
c001e1cd:	50                   	push   eax
c001e1ce:	6a 0f                	push   0xf
c001e1d0:	6a 00                	push   0x0
c001e1d2:	e8 fe ef ff ff       	call   c001d1d5 <combineColours(unsigned char, unsigned char)>
c001e1d7:	5a                   	pop    edx
c001e1d8:	0f b6 c0             	movzx  eax,al
c001e1db:	59                   	pop    ecx
c001e1dc:	50                   	push   eax
c001e1dd:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e1e2:	99                   	cdq    
c001e1e3:	f7 fd                	idiv   ebp
c001e1e5:	99                   	cdq    
c001e1e6:	f7 fb                	idiv   ebx
c001e1e8:	8d 42 30             	lea    eax,[edx+0x30]
c001e1eb:	0f b6 c0             	movzx  eax,al
c001e1ee:	50                   	push   eax
c001e1ef:	e8 d0 ef ff ff       	call   c001d1c4 <combineCharAndColour(char, unsigned char)>
c001e1f4:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001e1fa:	5e                   	pop    esi
c001e1fb:	5f                   	pop    edi
c001e1fc:	bf e8 03 00 00       	mov    edi,0x3e8
c001e201:	6a 0f                	push   0xf
c001e203:	6a 00                	push   0x0
c001e205:	e8 cb ef ff ff       	call   c001d1d5 <combineColours(unsigned char, unsigned char)>
c001e20a:	5a                   	pop    edx
c001e20b:	0f b6 c0             	movzx  eax,al
c001e20e:	59                   	pop    ecx
c001e20f:	50                   	push   eax
c001e210:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e215:	99                   	cdq    
c001e216:	f7 ff                	idiv   edi
c001e218:	99                   	cdq    
c001e219:	f7 fb                	idiv   ebx
c001e21b:	8d 42 30             	lea    eax,[edx+0x30]
c001e21e:	0f b6 c0             	movzx  eax,al
c001e221:	50                   	push   eax
c001e222:	e8 9d ef ff ff       	call   c001d1c4 <combineCharAndColour(char, unsigned char)>
c001e227:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001e22d:	5e                   	pop    esi
c001e22e:	be 64 00 00 00       	mov    esi,0x64
c001e233:	58                   	pop    eax
c001e234:	6a 0f                	push   0xf
c001e236:	6a 00                	push   0x0
c001e238:	e8 98 ef ff ff       	call   c001d1d5 <combineColours(unsigned char, unsigned char)>
c001e23d:	5a                   	pop    edx
c001e23e:	0f b6 c0             	movzx  eax,al
c001e241:	59                   	pop    ecx
c001e242:	50                   	push   eax
c001e243:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e248:	99                   	cdq    
c001e249:	f7 fe                	idiv   esi
c001e24b:	99                   	cdq    
c001e24c:	f7 fb                	idiv   ebx
c001e24e:	8d 42 30             	lea    eax,[edx+0x30]
c001e251:	0f b6 c0             	movzx  eax,al
c001e254:	50                   	push   eax
c001e255:	e8 6a ef ff ff       	call   c001d1c4 <combineCharAndColour(char, unsigned char)>
c001e25a:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001e260:	58                   	pop    eax
c001e261:	5a                   	pop    edx
c001e262:	6a 0f                	push   0xf
c001e264:	6a 00                	push   0x0
c001e266:	e8 6a ef ff ff       	call   c001d1d5 <combineColours(unsigned char, unsigned char)>
c001e26b:	59                   	pop    ecx
c001e26c:	0f b6 c0             	movzx  eax,al
c001e26f:	5a                   	pop    edx
c001e270:	50                   	push   eax
c001e271:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e276:	99                   	cdq    
c001e277:	f7 fb                	idiv   ebx
c001e279:	99                   	cdq    
c001e27a:	f7 fb                	idiv   ebx
c001e27c:	8d 42 30             	lea    eax,[edx+0x30]
c001e27f:	0f b6 c0             	movzx  eax,al
c001e282:	50                   	push   eax
c001e283:	e8 3c ef ff ff       	call   c001d1c4 <combineCharAndColour(char, unsigned char)>
c001e288:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001e28e:	59                   	pop    ecx
c001e28f:	58                   	pop    eax
c001e290:	6a 0f                	push   0xf
c001e292:	6a 00                	push   0x0
c001e294:	e8 3c ef ff ff       	call   c001d1d5 <combineColours(unsigned char, unsigned char)>
c001e299:	5a                   	pop    edx
c001e29a:	0f b6 c0             	movzx  eax,al
c001e29d:	59                   	pop    ecx
c001e29e:	50                   	push   eax
c001e29f:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e2a4:	99                   	cdq    
c001e2a5:	f7 fb                	idiv   ebx
c001e2a7:	83 c2 30             	add    edx,0x30
c001e2aa:	0f b6 d2             	movzx  edx,dl
c001e2ad:	52                   	push   edx
c001e2ae:	e8 11 ef ff ff       	call   c001d1c4 <combineCharAndColour(char, unsigned char)>
c001e2b3:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001e2b9:	58                   	pop    eax
c001e2ba:	5a                   	pop    edx
c001e2bb:	6a 0f                	push   0xf
c001e2bd:	6a 00                	push   0x0
c001e2bf:	e8 11 ef ff ff       	call   c001d1d5 <combineColours(unsigned char, unsigned char)>
c001e2c4:	59                   	pop    ecx
c001e2c5:	0f b6 c0             	movzx  eax,al
c001e2c8:	5a                   	pop    edx
c001e2c9:	50                   	push   eax
c001e2ca:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e2cf:	99                   	cdq    
c001e2d0:	f7 fd                	idiv   ebp
c001e2d2:	99                   	cdq    
c001e2d3:	f7 fb                	idiv   ebx
c001e2d5:	8d 42 30             	lea    eax,[edx+0x30]
c001e2d8:	0f b6 c0             	movzx  eax,al
c001e2db:	50                   	push   eax
c001e2dc:	e8 e3 ee ff ff       	call   c001d1c4 <combineCharAndColour(char, unsigned char)>
c001e2e1:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001e2e7:	59                   	pop    ecx
c001e2e8:	5d                   	pop    ebp
c001e2e9:	6a 0f                	push   0xf
c001e2eb:	6a 00                	push   0x0
c001e2ed:	e8 e3 ee ff ff       	call   c001d1d5 <combineColours(unsigned char, unsigned char)>
c001e2f2:	5a                   	pop    edx
c001e2f3:	0f b6 c0             	movzx  eax,al
c001e2f6:	59                   	pop    ecx
c001e2f7:	50                   	push   eax
c001e2f8:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e2fd:	99                   	cdq    
c001e2fe:	f7 ff                	idiv   edi
c001e300:	99                   	cdq    
c001e301:	f7 fb                	idiv   ebx
c001e303:	8d 42 30             	lea    eax,[edx+0x30]
c001e306:	0f b6 c0             	movzx  eax,al
c001e309:	50                   	push   eax
c001e30a:	e8 b5 ee ff ff       	call   c001d1c4 <combineCharAndColour(char, unsigned char)>
c001e30f:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001e315:	5f                   	pop    edi
c001e316:	5d                   	pop    ebp
c001e317:	6a 0f                	push   0xf
c001e319:	6a 00                	push   0x0
c001e31b:	e8 b5 ee ff ff       	call   c001d1d5 <combineColours(unsigned char, unsigned char)>
c001e320:	5a                   	pop    edx
c001e321:	0f b6 c0             	movzx  eax,al
c001e324:	59                   	pop    ecx
c001e325:	50                   	push   eax
c001e326:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e32b:	99                   	cdq    
c001e32c:	f7 fe                	idiv   esi
c001e32e:	99                   	cdq    
c001e32f:	f7 fb                	idiv   ebx
c001e331:	8d 42 30             	lea    eax,[edx+0x30]
c001e334:	0f b6 c0             	movzx  eax,al
c001e337:	50                   	push   eax
c001e338:	e8 87 ee ff ff       	call   c001d1c4 <combineCharAndColour(char, unsigned char)>
c001e33d:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001e343:	5e                   	pop    esi
c001e344:	5f                   	pop    edi
c001e345:	6a 0f                	push   0xf
c001e347:	6a 00                	push   0x0
c001e349:	e8 87 ee ff ff       	call   c001d1d5 <combineColours(unsigned char, unsigned char)>
c001e34e:	5d                   	pop    ebp
c001e34f:	0f b6 c0             	movzx  eax,al
c001e352:	5a                   	pop    edx
c001e353:	50                   	push   eax
c001e354:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e359:	99                   	cdq    
c001e35a:	f7 fb                	idiv   ebx
c001e35c:	99                   	cdq    
c001e35d:	f7 fb                	idiv   ebx
c001e35f:	8d 42 30             	lea    eax,[edx+0x30]
c001e362:	0f b6 c0             	movzx  eax,al
c001e365:	50                   	push   eax
c001e366:	e8 59 ee ff ff       	call   c001d1c4 <combineCharAndColour(char, unsigned char)>
c001e36b:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001e371:	59                   	pop    ecx
c001e372:	5e                   	pop    esi
c001e373:	6a 0f                	push   0xf
c001e375:	6a 00                	push   0x0
c001e377:	e8 59 ee ff ff       	call   c001d1d5 <combineColours(unsigned char, unsigned char)>
c001e37c:	5f                   	pop    edi
c001e37d:	0f b6 c0             	movzx  eax,al
c001e380:	5d                   	pop    ebp
c001e381:	50                   	push   eax
c001e382:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e387:	99                   	cdq    
c001e388:	f7 fb                	idiv   ebx
c001e38a:	83 c2 30             	add    edx,0x30
c001e38d:	0f b6 d2             	movzx  edx,dl
c001e390:	52                   	push   edx
c001e391:	e8 2e ee ff ff       	call   c001d1c4 <combineCharAndColour(char, unsigned char)>
c001e396:	83 c4 10             	add    esp,0x10
c001e399:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001e39f:	31 c0                	xor    eax,eax
c001e3a1:	83 c4 1c             	add    esp,0x1c
c001e3a4:	5b                   	pop    ebx
c001e3a5:	5e                   	pop    esi
c001e3a6:	5f                   	pop    edi
c001e3a7:	5d                   	pop    ebp
c001e3a8:	c3                   	ret    
c001e3a9:	90                   	nop

c001e3aa <SATAPI::write(unsigned long long, int, void*)>:
c001e3aa:	b8 03 00 00 00       	mov    eax,0x3
c001e3af:	c3                   	ret    

c001e3b0 <SATAPI::close(int, int, void*)>:
c001e3b0:	83 ec 0c             	sub    esp,0xc
c001e3b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e3b7:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001e3bd:	85 c0                	test   eax,eax
c001e3bf:	74 0c                	je     c001e3cd <SATAPI::close(int, int, void*)+0x1d>
c001e3c1:	83 ec 0c             	sub    esp,0xc
c001e3c4:	8b 10                	mov    edx,DWORD PTR [eax]
c001e3c6:	50                   	push   eax
c001e3c7:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001e3ca:	83 c4 10             	add    esp,0x10
c001e3cd:	31 c0                	xor    eax,eax
c001e3cf:	83 c4 0c             	add    esp,0xc
c001e3d2:	c3                   	ret    
c001e3d3:	90                   	nop

c001e3d4 <SATAPI::SATAPI()>:
c001e3d4:	83 ec 0c             	sub    esp,0xc
c001e3d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e3db:	83 ec 04             	sub    esp,0x4
c001e3de:	68 00 08 00 00       	push   0x800
c001e3e3:	68 dc 34 02 c0       	push   0xc00234dc
c001e3e8:	50                   	push   eax
c001e3e9:	e8 18 ea fe ff       	call   c000ce06 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001e3ee:	83 c4 10             	add    esp,0x10
c001e3f1:	ba d0 35 02 c0       	mov    edx,0xc00235d0
c001e3f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e3fa:	89 10                	mov    DWORD PTR [eax],edx
c001e3fc:	90                   	nop
c001e3fd:	83 c4 0c             	add    esp,0xc
c001e400:	c3                   	ret    
c001e401:	90                   	nop

c001e402 <SATAPI::diskRemoved()>:
c001e402:	c3                   	ret    
c001e403:	90                   	nop

c001e404 <SATAPI::diskInserted()>:
c001e404:	83 ec 18             	sub    esp,0x18
c001e407:	68 e8 34 02 c0       	push   0xc00234e8
c001e40c:	e8 34 c5 fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001e411:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e415:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c001e41c:	83 c4 1c             	add    esp,0x1c
c001e41f:	c3                   	ret    

c001e420 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001e420:	55                   	push   ebp
c001e421:	57                   	push   edi
c001e422:	56                   	push   esi
c001e423:	53                   	push   ebx
c001e424:	83 ec 34             	sub    esp,0x34
c001e427:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001e42b:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001e42f:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001e433:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001e437:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c001e43b:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001e441:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001e447:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001e44b:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001e451:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001e455:	83 c0 02             	add    eax,0x2
c001e458:	c1 e0 07             	shl    eax,0x7
c001e45b:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001e45f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e463:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e467:	c1 e0 07             	shl    eax,0x7
c001e46a:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001e46e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001e472:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001e47c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001e480:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001e486:	e8 21 e5 ff ff       	call   c001c9ac <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001e48b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001e48f:	83 c4 10             	add    esp,0x10
c001e492:	b8 01 00 00 00       	mov    eax,0x1
c001e497:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001e49c:	0f 84 53 02 00 00    	je     c001e6f5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d5>
c001e4a2:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001e4a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e4ac:	8b 00                	mov    eax,DWORD PTR [eax]
c001e4ae:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001e4b4:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001e4ba:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e4be:	c1 e1 05             	shl    ecx,0x5
c001e4c1:	01 c8                	add    eax,ecx
c001e4c3:	8b 08                	mov    ecx,DWORD PTR [eax]
c001e4c5:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001e4cb:	81 c9 25 00 01 00    	or     ecx,0x10025
c001e4d1:	89 08                	mov    DWORD PTR [eax],ecx
c001e4d3:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001e4d9:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001e4df:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001e4e5:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001e4e8:	8d 7b 40             	lea    edi,[ebx+0x40]
c001e4eb:	50                   	push   eax
c001e4ec:	68 90 00 00 00       	push   0x90
c001e4f1:	6a 00                	push   0x0
c001e4f3:	53                   	push   ebx
c001e4f4:	e8 f7 1f fe ff       	call   c00004f0 <memset>
c001e4f9:	b9 0c 00 00 00       	mov    ecx,0xc
c001e4fe:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001e502:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e504:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c001e50a:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001e50e:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001e514:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001e518:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001e51c:	48                   	dec    eax
c001e51d:	25 ff ff 3f 00       	and    eax,0x3fffff
c001e522:	89 c1                	mov    ecx,eax
c001e524:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001e52a:	25 00 00 c0 ff       	and    eax,0xffc00000
c001e52f:	09 c8                	or     eax,ecx
c001e531:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001e537:	8a 83 8f 00 00 00    	mov    al,BYTE PTR [ebx+0x8f]
c001e53d:	83 c8 80             	or     eax,0xffffff80
c001e540:	88 83 8f 00 00 00    	mov    BYTE PTR [ebx+0x8f],al
c001e546:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001e549:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001e54d:	25 00 7f 00 00       	and    eax,0x7f00
c001e552:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c001e556:	0d 27 80 ff ff       	or     eax,0xffff8027
c001e55b:	66 89 03             	mov    WORD PTR [ebx],ax
c001e55e:	89 d0                	mov    eax,edx
c001e560:	c1 ea 18             	shr    edx,0x18
c001e563:	c1 e8 10             	shr    eax,0x10
c001e566:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c001e569:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001e56c:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001e570:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001e573:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e577:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001e57a:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001e57e:	83 c4 10             	add    esp,0x10
c001e581:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001e585:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e589:	31 c0                	xor    eax,eax
c001e58b:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c001e591:	80 e1 88             	and    cl,0x88
c001e594:	74 0a                	je     c001e5a0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x180>
c001e596:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001e59b:	74 0a                	je     c001e5a7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x187>
c001e59d:	40                   	inc    eax
c001e59e:	eb eb                	jmp    c001e58b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c001e5a0:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001e5a5:	75 43                	jne    c001e5ea <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ca>
c001e5a7:	83 ec 0c             	sub    esp,0xc
c001e5aa:	68 00 35 02 c0       	push   0xc0023500
c001e5af:	e8 91 c3 fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001e5b4:	58                   	pop    eax
c001e5b5:	5a                   	pop    edx
c001e5b6:	68 15 35 02 c0       	push   0xc0023515
c001e5bb:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c001e5c1:	e8 e0 a4 fe ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001e5c6:	59                   	pop    ecx
c001e5c7:	5b                   	pop    ebx
c001e5c8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001e5cc:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001e5d2:	e8 6f e4 ff ff       	call   c001ca46 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001e5d7:	5e                   	pop    esi
c001e5d8:	5f                   	pop    edi
c001e5d9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001e5dd:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001e5e3:	e8 3e e4 ff ff       	call   c001ca26 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001e5e8:	eb 48                	jmp    c001e632 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x212>
c001e5ea:	be 01 00 00 00       	mov    esi,0x1
c001e5ef:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001e5f3:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001e5f7:	d3 e6                	shl    esi,cl
c001e5f9:	c1 e7 07             	shl    edi,0x7
c001e5fc:	89 b2 38 01 00 00    	mov    DWORD PTR [edx+0x138],esi
c001e602:	bb a8 e4 ff ff       	mov    ebx,0xffffe4a8
c001e607:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c001e60b:	8b 87 38 01 00 00    	mov    eax,DWORD PTR [edi+0x138]
c001e611:	85 c6                	test   esi,eax
c001e613:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c001e619:	0f 84 a3 00 00 00    	je     c001e6c2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2a2>
c001e61f:	0f ba e0 1e          	bt     eax,0x1e
c001e623:	73 1a                	jae    c001e63f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21f>
c001e625:	83 ec 0c             	sub    esp,0xc
c001e628:	68 27 35 02 c0       	push   0xc0023527
c001e62d:	e8 13 c3 fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001e632:	83 c4 10             	add    esp,0x10
c001e635:	b8 01 00 00 00       	mov    eax,0x1
c001e63a:	e9 b6 00 00 00       	jmp    c001e6f5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d5>
c001e63f:	8d 83 70 17 00 00    	lea    eax,[ebx+0x1770]
c001e645:	83 f8 0d             	cmp    eax,0xd
c001e648:	77 0a                	ja     c001e654 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x234>
c001e64a:	83 ec 0c             	sub    esp,0xc
c001e64d:	68 c8 00 00 00       	push   0xc8
c001e652:	eb 28                	jmp    c001e67c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25c>
c001e654:	8d 83 88 13 00 00    	lea    eax,[ebx+0x1388]
c001e65a:	83 f8 0d             	cmp    eax,0xd
c001e65d:	77 0a                	ja     c001e669 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x249>
c001e65f:	83 ec 0c             	sub    esp,0xc
c001e662:	68 58 02 00 00       	push   0x258
c001e667:	eb 13                	jmp    c001e67c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25c>
c001e669:	8d 83 a0 0f 00 00    	lea    eax,[ebx+0xfa0]
c001e66f:	83 f8 06             	cmp    eax,0x6
c001e672:	77 10                	ja     c001e684 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001e674:	83 ec 0c             	sub    esp,0xc
c001e677:	68 dc 05 00 00       	push   0x5dc
c001e67c:	e8 c7 7d ff ff       	call   c0016448 <milliTenthSleep(unsigned int)>
c001e681:	83 c4 10             	add    esp,0x10
c001e684:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001e688:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c001e68b:	75 06                	jne    c001e693 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x273>
c001e68d:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c001e691:	74 15                	je     c001e6a8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x288>
c001e693:	83 fb 06             	cmp    ebx,0x6
c001e696:	77 10                	ja     c001e6a8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x288>
c001e698:	83 ec 0c             	sub    esp,0xc
c001e69b:	68 c4 09 00 00       	push   0x9c4
c001e6a0:	e8 a3 7d ff ff       	call   c0016448 <milliTenthSleep(unsigned int)>
c001e6a5:	83 c4 10             	add    esp,0x10
c001e6a8:	43                   	inc    ebx
c001e6a9:	81 fb b9 0b 00 00    	cmp    ebx,0xbb9
c001e6af:	0f 85 56 ff ff ff    	jne    c001e60b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1eb>
c001e6b5:	83 ec 0c             	sub    esp,0xc
c001e6b8:	68 3a 35 02 c0       	push   0xc002353a
c001e6bd:	e9 6b ff ff ff       	jmp    c001e62d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20d>
c001e6c2:	0f ba e0 1e          	bt     eax,0x1e
c001e6c6:	73 0d                	jae    c001e6d5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2b5>
c001e6c8:	83 ec 0c             	sub    esp,0xc
c001e6cb:	68 4e 35 02 c0       	push   0xc002354e
c001e6d0:	e9 58 ff ff ff       	jmp    c001e62d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20d>
c001e6d5:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001e6da:	74 17                	je     c001e6f3 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d3>
c001e6dc:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001e6e1:	74 10                	je     c001e6f3 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d3>
c001e6e3:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c001e6e9:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001e6ed:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001e6f1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e6f3:	31 c0                	xor    eax,eax
c001e6f5:	83 c4 2c             	add    esp,0x2c
c001e6f8:	5b                   	pop    ebx
c001e6f9:	5e                   	pop    esi
c001e6fa:	5f                   	pop    edi
c001e6fb:	5d                   	pop    ebp
c001e6fc:	c3                   	ret    
c001e6fd:	90                   	nop

c001e6fe <SATAPI::eject()>:
c001e6fe:	57                   	push   edi
c001e6ff:	b9 03 00 00 00       	mov    ecx,0x3
c001e704:	83 ec 18             	sub    esp,0x18
c001e707:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001e70b:	fc                   	cld    
c001e70c:	31 c0                	xor    eax,eax
c001e70e:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e710:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001e715:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001e71a:	50                   	push   eax
c001e71b:	6a 00                	push   0x0
c001e71d:	6a 00                	push   0x0
c001e71f:	6a 00                	push   0x0
c001e721:	6a 00                	push   0x0
c001e723:	6a 02                	push   0x2
c001e725:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001e729:	50                   	push   eax
c001e72a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001e72e:	e8 ed fc ff ff       	call   c001e420 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001e733:	31 c0                	xor    eax,eax
c001e735:	83 c4 38             	add    esp,0x38
c001e738:	5f                   	pop    edi
c001e739:	c3                   	ret    

c001e73a <SATAPI::detectMedia()>:
c001e73a:	53                   	push   ebx
c001e73b:	83 ec 14             	sub    esp,0x14
c001e73e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001e742:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001e748:	e8 37 00 ff ff       	call   c000e784 <VCache::writeWriteBuffer()>
c001e74d:	59                   	pop    ecx
c001e74e:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001e754:	e8 1b 00 ff ff       	call   c000e774 <VCache::invalidateReadBuffer()>
c001e759:	c7 04 24 63 35 02 c0 	mov    DWORD PTR [esp],0xc0023563
c001e760:	e8 e0 c1 fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001e765:	83 c4 10             	add    esp,0x10
c001e768:	31 c0                	xor    eax,eax
c001e76a:	8b 14 85 80 b8 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd4780]
c001e771:	85 d2                	test   edx,edx
c001e773:	74 0f                	je     c001e784 <SATAPI::detectMedia()+0x4a>
c001e775:	39 9a 6c 01 00 00    	cmp    DWORD PTR [edx+0x16c],ebx
c001e77b:	75 07                	jne    c001e784 <SATAPI::detectMedia()+0x4a>
c001e77d:	c6 82 70 01 00 00 01 	mov    BYTE PTR [edx+0x170],0x1
c001e784:	40                   	inc    eax
c001e785:	83 f8 1a             	cmp    eax,0x1a
c001e788:	75 e0                	jne    c001e76a <SATAPI::detectMedia()+0x30>
c001e78a:	83 c4 08             	add    esp,0x8
c001e78d:	5b                   	pop    ebx
c001e78e:	c3                   	ret    
c001e78f:	90                   	nop

c001e790 <SATAPI::open(int, int, void*)>:
c001e790:	56                   	push   esi
c001e791:	53                   	push   ebx
c001e792:	51                   	push   ecx
c001e793:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e797:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e79b:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001e7a5:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001e7ab:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001e7b5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e7b9:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001e7c3:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001e7c9:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001e7d0:	e8 ea 95 fe ff       	call   c0007dbf <Phys::allocatePage()>
c001e7d5:	89 c6                	mov    esi,eax
c001e7d7:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001e7dd:	81 c6 00 10 00 00    	add    esi,0x1000
c001e7e3:	e8 d7 95 fe ff       	call   c0007dbf <Phys::allocatePage()>
c001e7e8:	39 c6                	cmp    esi,eax
c001e7ea:	74 10                	je     c001e7fc <SATAPI::open(int, int, void*)+0x6c>
c001e7ec:	83 ec 0c             	sub    esp,0xc
c001e7ef:	68 78 35 02 c0       	push   0xc0023578
c001e7f4:	e8 9a 2e ff ff       	call   c0011693 <KePanic(char const*)>
c001e7f9:	83 c4 10             	add    esp,0x10
c001e7fc:	83 ec 0c             	sub    esp,0xc
c001e7ff:	6a 02                	push   0x2
c001e801:	e8 07 ae fe ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c001e806:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001e80c:	6a 03                	push   0x3
c001e80e:	50                   	push   eax
c001e80f:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001e815:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c001e81b:	e8 00 b5 fe ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c001e820:	83 c4 14             	add    esp,0x14
c001e823:	68 78 01 00 00       	push   0x178
c001e828:	e8 89 92 fe ff       	call   c0007ab6 <malloc>
c001e82d:	83 c4 0c             	add    esp,0xc
c001e830:	89 c6                	mov    esi,eax
c001e832:	6a 00                	push   0x0
c001e834:	68 ff ff ff 7f       	push   0x7fffffff
c001e839:	6a 00                	push   0x0
c001e83b:	6a 00                	push   0x0
c001e83d:	53                   	push   ebx
c001e83e:	68 8e 35 02 c0       	push   0xc002358e
c001e843:	50                   	push   eax
c001e844:	e8 97 f3 fe ff       	call   c000dbe0 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001e849:	83 c4 14             	add    esp,0x14
c001e84c:	56                   	push   esi
c001e84d:	e8 4e f4 fe ff       	call   c000dca0 <LogicalDisk::assignDriveLetter()>
c001e852:	5a                   	pop    edx
c001e853:	0f be c0             	movsx  eax,al
c001e856:	59                   	pop    ecx
c001e857:	50                   	push   eax
c001e858:	68 e0 33 02 c0       	push   0xc00233e0
c001e85d:	e8 e3 c0 fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001e862:	58                   	pop    eax
c001e863:	5a                   	pop    edx
c001e864:	56                   	push   esi
c001e865:	53                   	push   ebx
c001e866:	e8 cf e1 fe ff       	call   c000ca3a <Device::addChild(Device*)>
c001e86b:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c001e871:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e874:	e8 f5 e5 fe ff       	call   c000ce6e <PhysicalDisk::startCache()>
c001e879:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001e880:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e883:	e8 b2 fe ff ff       	call   c001e73a <SATAPI::detectMedia()>
c001e888:	83 c4 14             	add    esp,0x14
c001e88b:	31 c0                	xor    eax,eax
c001e88d:	5b                   	pop    ebx
c001e88e:	5e                   	pop    esi
c001e88f:	c3                   	ret    

c001e890 <SATAPI::read(unsigned long long, int, void*)>:
c001e890:	57                   	push   edi
c001e891:	56                   	push   esi
c001e892:	53                   	push   ebx
c001e893:	83 ec 30             	sub    esp,0x30
c001e896:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001e89a:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c001e89e:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c001e8a2:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001e8a6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e8aa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e8ae:	83 fe 04             	cmp    esi,0x4
c001e8b1:	7e 10                	jle    c001e8c3 <SATAPI::read(unsigned long long, int, void*)+0x33>
c001e8b3:	83 ec 0c             	sub    esp,0xc
c001e8b6:	68 9c 35 02 c0       	push   0xc002359c
c001e8bb:	e8 d3 2d ff ff       	call   c0011693 <KePanic(char const*)>
c001e8c0:	83 c4 10             	add    esp,0x10
c001e8c3:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001e8c9:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001e8cf:	51                   	push   ecx
c001e8d0:	50                   	push   eax
c001e8d1:	83 c0 02             	add    eax,0x2
c001e8d4:	c1 e0 07             	shl    eax,0x7
c001e8d7:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c001e8dd:	50                   	push   eax
c001e8de:	52                   	push   edx
c001e8df:	e8 8c e1 ff ff       	call   c001ca70 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001e8e4:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001e8e8:	b9 03 00 00 00       	mov    ecx,0x3
c001e8ed:	fc                   	cld    
c001e8ee:	31 c0                	xor    eax,eax
c001e8f0:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e8f2:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c001e8f7:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c001e8fc:	83 c4 0c             	add    esp,0xc
c001e8ff:	6a 00                	push   0x0
c001e901:	6a 00                	push   0x0
c001e903:	6a 00                	push   0x0
c001e905:	6a 00                	push   0x0
c001e907:	6a 02                	push   0x2
c001e909:	8d 44 24 30          	lea    eax,[esp+0x30]
c001e90d:	50                   	push   eax
c001e90e:	53                   	push   ebx
c001e90f:	e8 0c fb ff ff       	call   c001e420 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001e914:	83 c4 20             	add    esp,0x20
c001e917:	85 c0                	test   eax,eax
c001e919:	75 44                	jne    c001e95f <SATAPI::read(unsigned long long, int, void*)+0xcf>
c001e91b:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001e91f:	b9 03 00 00 00       	mov    ecx,0x3
c001e924:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e926:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e92a:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c001e92f:	0f c8                	bswap  eax
c001e931:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c001e935:	89 f0                	mov    eax,esi
c001e937:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001e93b:	50                   	push   eax
c001e93c:	56                   	push   esi
c001e93d:	c1 e6 0b             	shl    esi,0xb
c001e940:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001e944:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e948:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e94c:	56                   	push   esi
c001e94d:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001e951:	50                   	push   eax
c001e952:	53                   	push   ebx
c001e953:	e8 c8 fa ff ff       	call   c001e420 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001e958:	83 c4 20             	add    esp,0x20
c001e95b:	85 c0                	test   eax,eax
c001e95d:	74 14                	je     c001e973 <SATAPI::read(unsigned long long, int, void*)+0xe3>
c001e95f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e963:	83 ec 0c             	sub    esp,0xc
c001e966:	53                   	push   ebx
c001e967:	e8 ce fd ff ff       	call   c001e73a <SATAPI::detectMedia()>
c001e96c:	83 c4 10             	add    esp,0x10
c001e96f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e973:	83 c4 30             	add    esp,0x30
c001e976:	5b                   	pop    ebx
c001e977:	5e                   	pop    esi
c001e978:	5f                   	pop    edi
c001e979:	c3                   	ret    

c001e97a <IOAPIC::close(int, int, void*)>:
c001e97a:	b8 00 00 00 00       	mov    eax,0x0
c001e97f:	c3                   	ret    

c001e980 <apicGetBase()>:
c001e980:	55                   	push   ebp
c001e981:	89 e5                	mov    ebp,esp
c001e983:	83 ec 18             	sub    esp,0x18
c001e986:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001e98b:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001e991:	83 e0 08             	and    eax,0x8
c001e994:	0f b6 c0             	movzx  eax,al
c001e997:	85 c0                	test   eax,eax
c001e999:	75 07                	jne    c001e9a2 <apicGetBase()+0x22>
c001e99b:	b8 00 00 00 00       	mov    eax,0x0
c001e9a0:	eb 21                	jmp    c001e9c3 <apicGetBase()+0x43>
c001e9a2:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001e9a7:	83 ec 08             	sub    esp,0x8
c001e9aa:	6a 1b                	push   0x1b
c001e9ac:	50                   	push   eax
c001e9ad:	e8 0e 87 fe ff       	call   c00070c0 <Computer::rdmsr(unsigned int)>
c001e9b2:	83 c4 10             	add    esp,0x10
c001e9b5:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001e9b8:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001e9bb:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e9be:	25 00 00 ff ff       	and    eax,0xffff0000
c001e9c3:	c9                   	leave  
c001e9c4:	c3                   	ret    
c001e9c5:	90                   	nop

c001e9c6 <IOAPIC::IOAPIC()>:
c001e9c6:	83 ec 0c             	sub    esp,0xc
c001e9c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9cd:	83 ec 08             	sub    esp,0x8
c001e9d0:	68 00 36 02 c0       	push   0xc0023600
c001e9d5:	50                   	push   eax
c001e9d6:	e8 f7 e1 fe ff       	call   c000cbd2 <Device::Device(char const*)>
c001e9db:	83 c4 10             	add    esp,0x10
c001e9de:	ba 10 36 02 c0       	mov    edx,0xc0023610
c001e9e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9e7:	89 10                	mov    DWORD PTR [eax],edx
c001e9e9:	90                   	nop
c001e9ea:	83 c4 0c             	add    esp,0xc
c001e9ed:	c3                   	ret    

c001e9ee <apicOpen()>:
c001e9ee:	55                   	push   ebp
c001e9ef:	89 e5                	mov    ebp,esp
c001e9f1:	53                   	push   ebx
c001e9f2:	83 ec 34             	sub    esp,0x34
c001e9f5:	a0 00 d1 02 c0       	mov    al,ds:0xc002d100
c001e9fa:	83 f0 01             	xor    eax,0x1
c001e9fd:	0f b6 c0             	movzx  eax,al
c001ea00:	85 c0                	test   eax,eax
c001ea02:	0f 84 a3 00 00 00    	je     c001eaab <apicOpen()+0xbd>
c001ea08:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001ea0c:	a0 e0 bb 02 c0       	mov    al,ds:0xc002bbe0
c001ea11:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001ea15:	0f b6 c0             	movzx  eax,al
c001ea18:	39 c2                	cmp    edx,eax
c001ea1a:	0f 83 84 00 00 00    	jae    c001eaa4 <apicOpen()+0xb6>
c001ea20:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c001ea27:	83 ec 0c             	sub    esp,0xc
c001ea2a:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001ea2d:	e8 84 90 fe ff       	call   c0007ab6 <malloc>
c001ea32:	83 c4 10             	add    esp,0x10
c001ea35:	89 c3                	mov    ebx,eax
c001ea37:	83 ec 0c             	sub    esp,0xc
c001ea3a:	53                   	push   ebx
c001ea3b:	e8 86 ff ff ff       	call   c001e9c6 <IOAPIC::IOAPIC()>
c001ea40:	83 c4 10             	add    esp,0x10
c001ea43:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001ea46:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c001ea4a:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001ea4d:	89 14 85 e0 d0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2f20],edx
c001ea54:	a1 c0 d0 02 c0       	mov    eax,ds:0xc002d0c0
c001ea59:	83 c0 01             	add    eax,0x1
c001ea5c:	a3 c0 d0 02 c0       	mov    ds:0xc002d0c0,eax
c001ea61:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001ea66:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c001ea6c:	83 ec 08             	sub    esp,0x8
c001ea6f:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001ea72:	50                   	push   eax
c001ea73:	e8 c2 df fe ff       	call   c000ca3a <Device::addChild(Device*)>
c001ea78:	83 c4 10             	add    esp,0x10
c001ea7b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001ea7e:	8b 00                	mov    eax,DWORD PTR [eax]
c001ea80:	83 c0 08             	add    eax,0x8
c001ea83:	8b 00                	mov    eax,DWORD PTR [eax]
c001ea85:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001ea89:	6a 00                	push   0x0
c001ea8b:	6a 00                	push   0x0
c001ea8d:	52                   	push   edx
c001ea8e:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001ea91:	ff d0                	call   eax
c001ea93:	83 c4 10             	add    esp,0x10
c001ea96:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001ea99:	83 c0 01             	add    eax,0x1
c001ea9c:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
c001ea9f:	e9 68 ff ff ff       	jmp    c001ea0c <apicOpen()+0x1e>
c001eaa4:	c6 05 00 d1 02 c0 01 	mov    BYTE PTR ds:0xc002d100,0x1
c001eaab:	e8 d0 fe ff ff       	call   c001e980 <apicGetBase()>
c001eab0:	05 f0 00 00 00       	add    eax,0xf0
c001eab5:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001eab8:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001eabb:	8b 00                	mov    eax,DWORD PTR [eax]
c001eabd:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001eac0:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c001eac7:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c001eace:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001ead1:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001ead4:	89 10                	mov    DWORD PTR [eax],edx
c001ead6:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001eadd:	a1 30 bb 02 c0       	mov    eax,ds:0xc002bb30
c001eae2:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001eae5:	7d 7c                	jge    c001eb63 <apicOpen()+0x175>
c001eae7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001eaea:	8b 04 85 40 bb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd44c0]
c001eaf1:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c001eaf4:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001eaf7:	8b 04 85 40 bb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd44c0]
c001eafe:	c1 e8 08             	shr    eax,0x8
c001eb01:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001eb05:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001eb08:	8b 04 85 40 bb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd44c0]
c001eb0f:	c1 e8 18             	shr    eax,0x18
c001eb12:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001eb15:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c001eb19:	3d ff 00 00 00       	cmp    eax,0xff
c001eb1e:	75 3a                	jne    c001eb5a <apicOpen()+0x16c>
c001eb20:	e8 5b fe ff ff       	call   c001e980 <apicGetBase()>
c001eb25:	0f b6 55 df          	movzx  edx,BYTE PTR [ebp-0x21]
c001eb29:	83 fa 01             	cmp    edx,0x1
c001eb2c:	75 07                	jne    c001eb35 <apicOpen()+0x147>
c001eb2e:	ba 60 03 00 00       	mov    edx,0x360
c001eb33:	eb 05                	jmp    c001eb3a <apicOpen()+0x14c>
c001eb35:	ba 50 03 00 00       	mov    edx,0x350
c001eb3a:	01 d0                	add    eax,edx
c001eb3c:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001eb3f:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001eb42:	8b 00                	mov    eax,DWORD PTR [eax]
c001eb44:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001eb47:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c001eb4e:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c001eb52:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001eb55:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001eb58:	89 10                	mov    DWORD PTR [eax],edx
c001eb5a:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c001eb5e:	e9 7a ff ff ff       	jmp    c001eadd <apicOpen()+0xef>
c001eb63:	90                   	nop
c001eb64:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001eb67:	c9                   	leave  
c001eb68:	c3                   	ret    
c001eb69:	90                   	nop

c001eb6a <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001eb6a:	55                   	push   ebp
c001eb6b:	89 e5                	mov    ebp,esp
c001eb6d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eb70:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001eb76:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001eb79:	72 1d                	jb     c001eb98 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001eb7b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eb7e:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001eb84:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eb87:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001eb8d:	01 d0                	add    eax,edx
c001eb8f:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001eb92:	73 04                	jae    c001eb98 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001eb94:	b0 01                	mov    al,0x1
c001eb96:	eb 02                	jmp    c001eb9a <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001eb98:	b0 00                	mov    al,0x0
c001eb9a:	5d                   	pop    ebp
c001eb9b:	c3                   	ret    

c001eb9c <IOAPIC::read(int)>:
c001eb9c:	55                   	push   ebp
c001eb9d:	89 e5                	mov    ebp,esp
c001eb9f:	83 ec 10             	sub    esp,0x10
c001eba2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eba5:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001ebab:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001ebae:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001ebb1:	0f b6 d0             	movzx  edx,al
c001ebb4:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001ebb7:	89 10                	mov    DWORD PTR [eax],edx
c001ebb9:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001ebbc:	83 c0 10             	add    eax,0x10
c001ebbf:	8b 00                	mov    eax,DWORD PTR [eax]
c001ebc1:	c9                   	leave  
c001ebc2:	c3                   	ret    
c001ebc3:	90                   	nop

c001ebc4 <IOAPIC::open(int, int, void*)>:
c001ebc4:	55                   	push   ebp
c001ebc5:	89 e5                	mov    ebp,esp
c001ebc7:	57                   	push   edi
c001ebc8:	56                   	push   esi
c001ebc9:	53                   	push   ebx
c001ebca:	83 ec 04             	sub    esp,0x4
c001ebcd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ebd0:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001ebd3:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001ebd9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ebdc:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001ebe2:	8b 14 85 20 bc 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd43e0]
c001ebe9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ebec:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001ebf2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ebf5:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001ebfb:	8b 14 85 a0 bc 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd4360]
c001ec02:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ec05:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001ec0b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ec0e:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001ec14:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ec17:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001ec1d:	0f b6 f0             	movzx  esi,al
c001ec20:	89 d0                	mov    eax,edx
c001ec22:	ba 00 00 00 00       	mov    edx,0x0
c001ec27:	89 c7                	mov    edi,eax
c001ec29:	83 e7 ff             	and    edi,0xffffffff
c001ec2c:	89 f9                	mov    ecx,edi
c001ec2e:	0f b6 da             	movzx  ebx,dl
c001ec31:	89 c8                	mov    eax,ecx
c001ec33:	89 da                	mov    edx,ebx
c001ec35:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001ec38:	8d 5e 08             	lea    ebx,[esi+0x8]
c001ec3b:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001ec3f:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001ec43:	83 e0 00             	and    eax,0x0
c001ec46:	09 d0                	or     eax,edx
c001ec48:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001ec4c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ec4f:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001ec55:	8d 50 01             	lea    edx,[eax+0x1]
c001ec58:	88 d1                	mov    cl,dl
c001ec5a:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001ec5d:	88 8a c5 00 00 00    	mov    BYTE PTR [edx+0xc5],cl
c001ec63:	0f b6 d0             	movzx  edx,al
c001ec66:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ec69:	83 c2 08             	add    edx,0x8
c001ec6c:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001ec70:	0f b6 c9             	movzx  ecx,cl
c001ec73:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001ec79:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001ec7d:	6a 01                	push   0x1
c001ec7f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ec82:	e8 15 ff ff ff       	call   c001eb9c <IOAPIC::read(int)>
c001ec87:	83 c4 08             	add    esp,0x8
c001ec8a:	c1 f8 10             	sar    eax,0x10
c001ec8d:	0f b6 c0             	movzx  eax,al
c001ec90:	8d 50 01             	lea    edx,[eax+0x1]
c001ec93:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ec96:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001ec9c:	b8 00 00 00 00       	mov    eax,0x0
c001eca1:	8d 65 f4             	lea    esp,[ebp-0xc]
c001eca4:	5b                   	pop    ebx
c001eca5:	5e                   	pop    esi
c001eca6:	5f                   	pop    edi
c001eca7:	5d                   	pop    ebp
c001eca8:	c3                   	ret    
c001eca9:	90                   	nop

c001ecaa <IOAPIC::write(int, int)>:
c001ecaa:	55                   	push   ebp
c001ecab:	89 e5                	mov    ebp,esp
c001ecad:	83 ec 10             	sub    esp,0x10
c001ecb0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ecb3:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001ecb9:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001ecbc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001ecbf:	0f b6 d0             	movzx  edx,al
c001ecc2:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001ecc5:	89 10                	mov    DWORD PTR [eax],edx
c001ecc7:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001ecca:	8d 50 10             	lea    edx,[eax+0x10]
c001eccd:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001ecd0:	89 02                	mov    DWORD PTR [edx],eax
c001ecd2:	90                   	nop
c001ecd3:	c9                   	leave  
c001ecd4:	c3                   	ret    
c001ecd5:	90                   	nop

c001ecd6 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c001ecd6:	55                   	push   ebp
c001ecd7:	89 e5                	mov    ebp,esp
c001ecd9:	53                   	push   ebx
c001ecda:	83 ec 2c             	sub    esp,0x2c
c001ecdd:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001ece0:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001ece3:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c001ece6:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c001ece9:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001ecec:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001ecef:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001ecf2:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001ecf5:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001ecf8:	88 d8                	mov    al,bl
c001ecfa:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c001ecfd:	88 c8                	mov    al,cl
c001ecff:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c001ed02:	88 d0                	mov    al,dl
c001ed04:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c001ed07:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001ed0b:	83 c0 08             	add    eax,0x8
c001ed0e:	01 c0                	add    eax,eax
c001ed10:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001ed13:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001ed17:	83 c0 08             	add    eax,0x8
c001ed1a:	01 c0                	add    eax,eax
c001ed1c:	83 c0 01             	add    eax,0x1
c001ed1f:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001ed22:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001ed25:	50                   	push   eax
c001ed26:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ed29:	e8 6e fe ff ff       	call   c001eb9c <IOAPIC::read(int)>
c001ed2e:	83 c4 08             	add    esp,0x8
c001ed31:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001ed34:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c001ed3b:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001ed3e:	c1 e0 18             	shl    eax,0x18
c001ed41:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c001ed44:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001ed47:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001ed4a:	52                   	push   edx
c001ed4b:	50                   	push   eax
c001ed4c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ed4f:	e8 56 ff ff ff       	call   c001ecaa <IOAPIC::write(int, int)>
c001ed54:	83 c4 0c             	add    esp,0xc
c001ed57:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001ed5a:	50                   	push   eax
c001ed5b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ed5e:	e8 39 fe ff ff       	call   c001eb9c <IOAPIC::read(int)>
c001ed63:	83 c4 08             	add    esp,0x8
c001ed66:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001ed69:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c001ed70:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c001ed77:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c001ed7e:	0f b6 45 d4          	movzx  eax,BYTE PTR [ebp-0x2c]
c001ed82:	85 c0                	test   eax,eax
c001ed84:	74 09                	je     c001ed8f <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb9>
c001ed86:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c001ed8d:	eb 07                	jmp    c001ed96 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc0>
c001ed8f:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c001ed96:	0f b6 45 d0          	movzx  eax,BYTE PTR [ebp-0x30]
c001ed9a:	85 c0                	test   eax,eax
c001ed9c:	74 09                	je     c001eda7 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd1>
c001ed9e:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c001eda5:	eb 07                	jmp    c001edae <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd8>
c001eda7:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c001edae:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c001edb5:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c001edb9:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001edbc:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001edbf:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001edc2:	52                   	push   edx
c001edc3:	50                   	push   eax
c001edc4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001edc7:	e8 de fe ff ff       	call   c001ecaa <IOAPIC::write(int, int)>
c001edcc:	83 c4 0c             	add    esp,0xc
c001edcf:	90                   	nop
c001edd0:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001edd3:	c9                   	leave  
c001edd4:	c3                   	ret    
c001edd5:	66 90                	xchg   ax,ax
c001edd7:	90                   	nop

c001edd8 <APICTimer::close(int, int, void*)>:
c001edd8:	b8 00 00 00 00       	mov    eax,0x0
c001eddd:	c3                   	ret    
c001edde:	66 90                	xchg   ax,ax

c001ede0 <apicTimerHandler(regs*, void*)>:
c001ede0:	83 ec 0c             	sub    esp,0xc
c001ede3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ede7:	8b 08                	mov    ecx,DWORD PTR [eax]
c001ede9:	b8 10 27 00 00       	mov    eax,0x2710
c001edee:	ba 00 00 00 00       	mov    edx,0x0
c001edf3:	f7 f1                	div    ecx
c001edf5:	83 ec 0c             	sub    esp,0xc
c001edf8:	50                   	push   eax
c001edf9:	e8 9e f6 fe ff       	call   c000e49c <timerHandler(unsigned int)>
c001edfe:	83 c4 10             	add    esp,0x10
c001ee01:	90                   	nop
c001ee02:	83 c4 0c             	add    esp,0xc
c001ee05:	c3                   	ret    
c001ee06:	66 90                	xchg   ax,ax

c001ee08 <APICTimer::open(int, int, void*)>:
c001ee08:	83 ec 0c             	sub    esp,0xc
c001ee0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee0f:	8b 00                	mov    eax,DWORD PTR [eax]
c001ee11:	83 c0 24             	add    eax,0x24
c001ee14:	8b 00                	mov    eax,DWORD PTR [eax]
c001ee16:	83 ec 08             	sub    esp,0x8
c001ee19:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ee1d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ee21:	ff d0                	call   eax
c001ee23:	83 c4 10             	add    esp,0x10
c001ee26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee2a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ee2e:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001ee34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee38:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ee3c:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001ee42:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ee46:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001ee4c:	83 ec 0c             	sub    esp,0xc
c001ee4f:	51                   	push   ecx
c001ee50:	6a 01                	push   0x1
c001ee52:	68 e0 ed 01 c0       	push   0xc001ede0
c001ee57:	52                   	push   edx
c001ee58:	50                   	push   eax
c001ee59:	e8 88 db fe ff       	call   c000c9e6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ee5e:	83 c4 20             	add    esp,0x20
c001ee61:	89 c2                	mov    edx,eax
c001ee63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee67:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001ee6d:	b8 00 00 00 00       	mov    eax,0x0
c001ee72:	83 c4 0c             	add    esp,0xc
c001ee75:	c3                   	ret    
c001ee76:	66 90                	xchg   ax,ax

c001ee78 <APICTimer::write(int)>:
c001ee78:	83 ec 0c             	sub    esp,0xc
c001ee7b:	83 ec 0c             	sub    esp,0xc
c001ee7e:	68 34 36 02 c0       	push   0xc0023634
c001ee83:	e8 0b 28 ff ff       	call   c0011693 <KePanic(char const*)>
c001ee88:	83 c4 10             	add    esp,0x10
c001ee8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee8f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ee93:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001ee99:	90                   	nop
c001ee9a:	83 c4 0c             	add    esp,0xc
c001ee9d:	c3                   	ret    
c001ee9e:	66 90                	xchg   ax,ax

c001eea0 <APICTimer::APICTimer()>:
c001eea0:	83 ec 0c             	sub    esp,0xc
c001eea3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eea7:	83 ec 08             	sub    esp,0x8
c001eeaa:	68 44 36 02 c0       	push   0xc0023644
c001eeaf:	50                   	push   eax
c001eeb0:	e8 1b f5 fe ff       	call   c000e3d0 <Timer::Timer(char const*)>
c001eeb5:	83 c4 10             	add    esp,0x10
c001eeb8:	ba 58 36 02 c0       	mov    edx,0xc0023658
c001eebd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eec1:	89 10                	mov    DWORD PTR [eax],edx
c001eec3:	90                   	nop
c001eec4:	83 c4 0c             	add    esp,0xc
c001eec7:	c3                   	ret    

c001eec8 <PIT::write(int)>:
c001eec8:	83 ec 10             	sub    esp,0x10
c001eecb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001eecf:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001eed3:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001eed9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001eedd:	a3 04 d1 02 c0       	mov    ds:0xc002d104,eax
c001eee2:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001eee7:	89 c2                	mov    edx,eax
c001eee9:	c1 fa 1f             	sar    edx,0x1f
c001eeec:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001eef0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001eef4:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001eefb:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001ef00:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001ef04:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001ef09:	ee                   	out    dx,al
c001ef0a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ef0e:	0f b6 c0             	movzx  eax,al
c001ef11:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001ef18:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001ef1c:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001ef20:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001ef25:	ee                   	out    dx,al
c001ef26:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ef2a:	c1 f8 08             	sar    eax,0x8
c001ef2d:	0f b6 c0             	movzx  eax,al
c001ef30:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001ef37:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001ef3b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001ef3f:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001ef44:	ee                   	out    dx,al
c001ef45:	90                   	nop
c001ef46:	83 c4 10             	add    esp,0x10
c001ef49:	c3                   	ret    
c001ef4a:	66 90                	xchg   ax,ax

c001ef4c <pitHandler(regs*, void*)>:
c001ef4c:	83 ec 0c             	sub    esp,0xc
c001ef4f:	8b 0d 04 d1 02 c0    	mov    ecx,DWORD PTR ds:0xc002d104
c001ef55:	b8 10 27 00 00       	mov    eax,0x2710
c001ef5a:	89 c2                	mov    edx,eax
c001ef5c:	c1 fa 1f             	sar    edx,0x1f
c001ef5f:	f7 f9                	idiv   ecx
c001ef61:	83 ec 0c             	sub    esp,0xc
c001ef64:	50                   	push   eax
c001ef65:	e8 32 f5 fe ff       	call   c000e49c <timerHandler(unsigned int)>
c001ef6a:	83 c4 10             	add    esp,0x10
c001ef6d:	90                   	nop
c001ef6e:	83 c4 0c             	add    esp,0xc
c001ef71:	c3                   	ret    
c001ef72:	66 90                	xchg   ax,ax

c001ef74 <PIT::open(int, int, void*)>:
c001ef74:	83 ec 0c             	sub    esp,0xc
c001ef77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef7b:	8b 00                	mov    eax,DWORD PTR [eax]
c001ef7d:	83 c0 24             	add    eax,0x24
c001ef80:	8b 00                	mov    eax,DWORD PTR [eax]
c001ef82:	83 ec 08             	sub    esp,0x8
c001ef85:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ef89:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ef8d:	ff d0                	call   eax
c001ef8f:	83 c4 10             	add    esp,0x10
c001ef92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef96:	83 ec 0c             	sub    esp,0xc
c001ef99:	6a 00                	push   0x0
c001ef9b:	6a 01                	push   0x1
c001ef9d:	68 4c ef 01 c0       	push   0xc001ef4c
c001efa2:	6a 00                	push   0x0
c001efa4:	50                   	push   eax
c001efa5:	e8 3c da fe ff       	call   c000c9e6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001efaa:	83 c4 20             	add    esp,0x20
c001efad:	89 c2                	mov    edx,eax
c001efaf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efb3:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001efb9:	b8 00 00 00 00       	mov    eax,0x0
c001efbe:	83 c4 0c             	add    esp,0xc
c001efc1:	c3                   	ret    
c001efc2:	66 90                	xchg   ax,ax

c001efc4 <PIT::close(int, int, void*)>:
c001efc4:	83 ec 0c             	sub    esp,0xc
c001efc7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efcb:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001efd5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efd9:	6a 01                	push   0x1
c001efdb:	68 4c ef 01 c0       	push   0xc001ef4c
c001efe0:	6a 00                	push   0x0
c001efe2:	50                   	push   eax
c001efe3:	e8 34 da fe ff       	call   c000ca1c <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001efe8:	83 c4 10             	add    esp,0x10
c001efeb:	b8 00 00 00 00       	mov    eax,0x0
c001eff0:	83 c4 0c             	add    esp,0xc
c001eff3:	c3                   	ret    

c001eff4 <PIT::PIT()>:
c001eff4:	83 ec 0c             	sub    esp,0xc
c001eff7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001effb:	83 ec 08             	sub    esp,0x8
c001effe:	68 80 36 02 c0       	push   0xc0023680
c001f003:	50                   	push   eax
c001f004:	e8 c7 f3 fe ff       	call   c000e3d0 <Timer::Timer(char const*)>
c001f009:	83 c4 10             	add    esp,0x10
c001f00c:	ba a8 36 02 c0       	mov    edx,0xc00236a8
c001f011:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f015:	89 10                	mov    DWORD PTR [eax],edx
c001f017:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f01b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001f021:	0f b6 d0             	movzx  edx,al
c001f024:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f028:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001f02f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f033:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001f039:	0f b6 d0             	movzx  edx,al
c001f03c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f040:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001f045:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f049:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001f04f:	8d 50 01             	lea    edx,[eax+0x1]
c001f052:	88 d1                	mov    cl,dl
c001f054:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f058:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001f05e:	0f b6 d0             	movzx  edx,al
c001f061:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f065:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001f069:	83 e1 3f             	and    ecx,0x3f
c001f06c:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001f070:	90                   	nop
c001f071:	83 c4 0c             	add    esp,0xc
c001f074:	c3                   	ret    
c001f075:	66 90                	xchg   ax,ax
c001f077:	66 90                	xchg   ax,ax
c001f079:	66 90                	xchg   ax,ax
c001f07b:	66 90                	xchg   ax,ax
c001f07d:	66 90                	xchg   ax,ax
c001f07f:	90                   	nop

c001f080 <avxDetect>:
c001f080:	b8 01 00 00 00       	mov    eax,0x1
c001f085:	0f a2                	cpuid  
c001f087:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c001f08d:	74 15                	je     c001f0a4 <avxDetect.noAVX>
c001f08f:	b8 01 00 00 00       	mov    eax,0x1
c001f094:	0f a2                	cpuid  
c001f096:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c001f09c:	74 06                	je     c001f0a4 <avxDetect.noAVX>
c001f09e:	b8 01 00 00 00       	mov    eax,0x1
c001f0a3:	c3                   	ret    

c001f0a4 <avxDetect.noAVX>:
c001f0a4:	b8 00 00 00 00       	mov    eax,0x0
c001f0a9:	c3                   	ret    

c001f0aa <avxSave>:
c001f0aa:	53                   	push   ebx
c001f0ab:	52                   	push   edx
c001f0ac:	31 c0                	xor    eax,eax
c001f0ae:	48                   	dec    eax
c001f0af:	89 c2                	mov    edx,eax
c001f0b1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f0b5:	0f ae 23             	xsave  [ebx]
c001f0b8:	5a                   	pop    edx
c001f0b9:	5b                   	pop    ebx
c001f0ba:	c3                   	ret    

c001f0bb <avxLoad>:
c001f0bb:	53                   	push   ebx
c001f0bc:	52                   	push   edx
c001f0bd:	31 c0                	xor    eax,eax
c001f0bf:	48                   	dec    eax
c001f0c0:	89 c2                	mov    edx,eax
c001f0c2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f0c6:	0f ae 2b             	xrstor [ebx]
c001f0c9:	5a                   	pop    edx
c001f0ca:	5b                   	pop    ebx
c001f0cb:	c3                   	ret    

c001f0cc <avxInit>:
c001f0cc:	e8 67 03 00 00       	call   c001f438 <sseInit>
c001f0d1:	50                   	push   eax
c001f0d2:	51                   	push   ecx
c001f0d3:	0f 20 e0             	mov    eax,cr4
c001f0d6:	0d 00 00 04 00       	or     eax,0x40000
c001f0db:	0f 22 e0             	mov    cr4,eax
c001f0de:	31 c9                	xor    ecx,ecx
c001f0e0:	0f 01 d0             	xgetbv 
c001f0e3:	0d 07 00 00 00       	or     eax,0x7
c001f0e8:	0f 01 d1             	xsetbv 
c001f0eb:	59                   	pop    ecx
c001f0ec:	58                   	pop    eax
c001f0ed:	c3                   	ret    

c001f0ee <avxClose>:
c001f0ee:	c3                   	ret    

c001f0ef <wouldSheSayYes>:
c001f0ef:	c3                   	ret    
c001f0f0:	49                   	dec    ecx
c001f0f1:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c001f0f5:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c001f0f9:	75 20                	jne    c001f11b <isr0+0xb>
c001f0fb:	4e                   	dec    esi
c001f0fc:	79 61                	jns    c001f15f <isr7+0x3>
c001f0fe:	68 2e 2e 2e 00       	push   0x2e2e2e
c001f103:	66 90                	xchg   ax,ax
c001f105:	66 90                	xchg   ax,ax
c001f107:	66 90                	xchg   ax,ax
c001f109:	66 90                	xchg   ax,ax
c001f10b:	66 90                	xchg   ax,ax
c001f10d:	66 90                	xchg   ax,ax
c001f10f:	90                   	nop

c001f110 <isr0>:
c001f110:	fa                   	cli    
c001f111:	68 00 00 00 00       	push   0x0
c001f116:	68 00 00 00 00       	push   0x0
c001f11b:	e9 56 01 00 00       	jmp    c001f276 <int_common_stub>

c001f120 <isr1>:
c001f120:	fa                   	cli    
c001f121:	6a 00                	push   0x0
c001f123:	6a 01                	push   0x1
c001f125:	e9 4c 01 00 00       	jmp    c001f276 <int_common_stub>

c001f12a <isr2>:
c001f12a:	fa                   	cli    
c001f12b:	6a 00                	push   0x0
c001f12d:	6a 02                	push   0x2
c001f12f:	e9 42 01 00 00       	jmp    c001f276 <int_common_stub>

c001f134 <isr3>:
c001f134:	fa                   	cli    
c001f135:	6a 00                	push   0x0
c001f137:	6a 03                	push   0x3
c001f139:	e9 38 01 00 00       	jmp    c001f276 <int_common_stub>

c001f13e <isr4>:
c001f13e:	fa                   	cli    
c001f13f:	6a 00                	push   0x0
c001f141:	6a 04                	push   0x4
c001f143:	e9 2e 01 00 00       	jmp    c001f276 <int_common_stub>

c001f148 <isr5>:
c001f148:	fa                   	cli    
c001f149:	6a 00                	push   0x0
c001f14b:	6a 05                	push   0x5
c001f14d:	e9 24 01 00 00       	jmp    c001f276 <int_common_stub>

c001f152 <isr6>:
c001f152:	fa                   	cli    
c001f153:	6a 00                	push   0x0
c001f155:	6a 06                	push   0x6
c001f157:	e9 1a 01 00 00       	jmp    c001f276 <int_common_stub>

c001f15c <isr7>:
c001f15c:	fa                   	cli    
c001f15d:	6a 00                	push   0x0
c001f15f:	6a 07                	push   0x7
c001f161:	e9 10 01 00 00       	jmp    c001f276 <int_common_stub>

c001f166 <isr8>:
c001f166:	fa                   	cli    
c001f167:	6a 08                	push   0x8
c001f169:	e9 08 01 00 00       	jmp    c001f276 <int_common_stub>

c001f16e <isr9>:
c001f16e:	fa                   	cli    
c001f16f:	6a 00                	push   0x0
c001f171:	6a 09                	push   0x9
c001f173:	e9 fe 00 00 00       	jmp    c001f276 <int_common_stub>

c001f178 <isr10>:
c001f178:	fa                   	cli    
c001f179:	6a 0a                	push   0xa
c001f17b:	e9 f6 00 00 00       	jmp    c001f276 <int_common_stub>

c001f180 <isr11>:
c001f180:	fa                   	cli    
c001f181:	6a 0b                	push   0xb
c001f183:	e9 ee 00 00 00       	jmp    c001f276 <int_common_stub>

c001f188 <isr12>:
c001f188:	fa                   	cli    
c001f189:	6a 0c                	push   0xc
c001f18b:	e9 e6 00 00 00       	jmp    c001f276 <int_common_stub>

c001f190 <isr13>:
c001f190:	fa                   	cli    
c001f191:	6a 0d                	push   0xd
c001f193:	53                   	push   ebx
c001f194:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f198:	81 fb 66 f3 01 c0    	cmp    ebx,0xc001f366
c001f19e:	5b                   	pop    ebx
c001f19f:	0f 84 c3 01 00 00    	je     c001f368 <finishSignal2>
c001f1a5:	e9 cc 00 00 00       	jmp    c001f276 <int_common_stub>

c001f1aa <isr14>:
c001f1aa:	fa                   	cli    
c001f1ab:	6a 0e                	push   0xe
c001f1ad:	e9 c4 00 00 00       	jmp    c001f276 <int_common_stub>

c001f1b2 <isr15>:
c001f1b2:	fa                   	cli    
c001f1b3:	6a 00                	push   0x0
c001f1b5:	6a 0f                	push   0xf
c001f1b7:	e9 ba 00 00 00       	jmp    c001f276 <int_common_stub>

c001f1bc <isr16>:
c001f1bc:	fa                   	cli    
c001f1bd:	6a 00                	push   0x0
c001f1bf:	6a 10                	push   0x10
c001f1c1:	e9 b0 00 00 00       	jmp    c001f276 <int_common_stub>

c001f1c6 <isr17>:
c001f1c6:	fa                   	cli    
c001f1c7:	6a 00                	push   0x0
c001f1c9:	6a 11                	push   0x11
c001f1cb:	e9 a6 00 00 00       	jmp    c001f276 <int_common_stub>

c001f1d0 <isr18>:
c001f1d0:	fa                   	cli    
c001f1d1:	6a 00                	push   0x0
c001f1d3:	6a 12                	push   0x12
c001f1d5:	e9 9c 00 00 00       	jmp    c001f276 <int_common_stub>

c001f1da <irq3>:
c001f1da:	fa                   	cli    
c001f1db:	6a 00                	push   0x0
c001f1dd:	6a 23                	push   0x23
c001f1df:	e9 92 00 00 00       	jmp    c001f276 <int_common_stub>

c001f1e4 <irq4>:
c001f1e4:	fa                   	cli    
c001f1e5:	6a 00                	push   0x0
c001f1e7:	6a 24                	push   0x24
c001f1e9:	e9 88 00 00 00       	jmp    c001f276 <int_common_stub>

c001f1ee <irq5>:
c001f1ee:	fa                   	cli    
c001f1ef:	6a 00                	push   0x0
c001f1f1:	6a 25                	push   0x25
c001f1f3:	e9 7e 00 00 00       	jmp    c001f276 <int_common_stub>

c001f1f8 <irq6>:
c001f1f8:	fa                   	cli    
c001f1f9:	6a 00                	push   0x0
c001f1fb:	6a 26                	push   0x26
c001f1fd:	e9 74 00 00 00       	jmp    c001f276 <int_common_stub>

c001f202 <irq7>:
c001f202:	fa                   	cli    
c001f203:	6a 00                	push   0x0
c001f205:	6a 27                	push   0x27
c001f207:	e9 6a 00 00 00       	jmp    c001f276 <int_common_stub>

c001f20c <irq8>:
c001f20c:	fa                   	cli    
c001f20d:	6a 00                	push   0x0
c001f20f:	6a 28                	push   0x28
c001f211:	e9 60 00 00 00       	jmp    c001f276 <int_common_stub>

c001f216 <irq9>:
c001f216:	fa                   	cli    
c001f217:	6a 00                	push   0x0
c001f219:	6a 29                	push   0x29
c001f21b:	e9 56 00 00 00       	jmp    c001f276 <int_common_stub>

c001f220 <irq10>:
c001f220:	fa                   	cli    
c001f221:	6a 00                	push   0x0
c001f223:	6a 2a                	push   0x2a
c001f225:	e9 4c 00 00 00       	jmp    c001f276 <int_common_stub>

c001f22a <irq11>:
c001f22a:	fa                   	cli    
c001f22b:	6a 00                	push   0x0
c001f22d:	6a 2b                	push   0x2b
c001f22f:	e9 42 00 00 00       	jmp    c001f276 <int_common_stub>

c001f234 <irq12>:
c001f234:	fa                   	cli    
c001f235:	6a 00                	push   0x0
c001f237:	6a 2c                	push   0x2c
c001f239:	e9 38 00 00 00       	jmp    c001f276 <int_common_stub>

c001f23e <irq13>:
c001f23e:	fa                   	cli    
c001f23f:	6a 00                	push   0x0
c001f241:	6a 2d                	push   0x2d
c001f243:	e9 2e 00 00 00       	jmp    c001f276 <int_common_stub>

c001f248 <irq14>:
c001f248:	fa                   	cli    
c001f249:	6a 00                	push   0x0
c001f24b:	6a 2e                	push   0x2e
c001f24d:	e9 24 00 00 00       	jmp    c001f276 <int_common_stub>

c001f252 <irq15>:
c001f252:	fa                   	cli    
c001f253:	6a 00                	push   0x0
c001f255:	6a 2f                	push   0x2f
c001f257:	e9 1a 00 00 00       	jmp    c001f276 <int_common_stub>

c001f25c <irq1>:
c001f25c:	fa                   	cli    
c001f25d:	6a 00                	push   0x0
c001f25f:	6a 21                	push   0x21
c001f261:	eb 13                	jmp    c001f276 <int_common_stub>

c001f263 <irq2>:
c001f263:	fa                   	cli    
c001f264:	6a 00                	push   0x0
c001f266:	6a 22                	push   0x22
c001f268:	eb 0c                	jmp    c001f276 <int_common_stub>

c001f26a <isr96>:
c001f26a:	6a 00                	push   0x0
c001f26c:	6a 60                	push   0x60
c001f26e:	fb                   	sti    
c001f26f:	eb 37                	jmp    c001f2a8 <syscall_common_stub>

c001f271 <irq0>:
c001f271:	fa                   	cli    
c001f272:	6a 00                	push   0x0
c001f274:	6a 20                	push   0x20

c001f276 <int_common_stub>:
c001f276:	60                   	pusha  
c001f277:	1e                   	push   ds
c001f278:	06                   	push   es
c001f279:	0f a0                	push   fs
c001f27b:	0f a8                	push   gs
c001f27d:	66 b8 10 00          	mov    ax,0x10
c001f281:	66 8e d8             	mov    ds,ax
c001f284:	66 8e c0             	mov    es,ax
c001f287:	66 8e e0             	mov    fs,ax
c001f28a:	66 8e e8             	mov    gs,ax
c001f28d:	54                   	push   esp
c001f28e:	fc                   	cld    
c001f28f:	e8 50 dc fe ff       	call   c000cee4 <int_handler>
c001f294:	81 c4 04 00 00 00    	add    esp,0x4
c001f29a:	0f a9                	pop    gs
c001f29c:	0f a1                	pop    fs
c001f29e:	07                   	pop    es
c001f29f:	1f                   	pop    ds
c001f2a0:	61                   	popa   
c001f2a1:	81 c4 08 00 00 00    	add    esp,0x8
c001f2a7:	cf                   	iret   

c001f2a8 <syscall_common_stub>:
c001f2a8:	60                   	pusha  
c001f2a9:	1e                   	push   ds
c001f2aa:	06                   	push   es
c001f2ab:	0f a0                	push   fs
c001f2ad:	0f a8                	push   gs
c001f2af:	66 b8 10 00          	mov    ax,0x10
c001f2b3:	66 8e d8             	mov    ds,ax
c001f2b6:	66 8e c0             	mov    es,ax
c001f2b9:	66 8e e0             	mov    fs,ax
c001f2bc:	66 8e e8             	mov    gs,ax
c001f2bf:	54                   	push   esp
c001f2c0:	fc                   	cld    
c001f2c1:	e8 1e dc fe ff       	call   c000cee4 <int_handler>
c001f2c6:	81 c4 04 00 00 00    	add    esp,0x4
c001f2cc:	0f a9                	pop    gs
c001f2ce:	0f a1                	pop    fs
c001f2d0:	07                   	pop    es
c001f2d1:	1f                   	pop    ds
c001f2d2:	e8 d3 29 ff ff       	call   c0011caa <KiCheckSignalZ>
c001f2d7:	3d 00 00 00 00       	cmp    eax,0x0
c001f2dc:	0f 84 c0 00 00 00    	je     c001f3a2 <skipSignals>
c001f2e2:	a3 08 20 00 c2       	mov    ds:0xc2002008,eax
c001f2e7:	61                   	popa   
c001f2e8:	53                   	push   ebx
c001f2e9:	8b 1d 08 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002008
c001f2ef:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c001f2f2:	5b                   	pop    ebx
c001f2f3:	a1 08 20 00 c2       	mov    eax,ds:0xc2002008
c001f2f8:	89 58 10             	mov    DWORD PTR [eax+0x10],ebx
c001f2fb:	89 48 14             	mov    DWORD PTR [eax+0x14],ecx
c001f2fe:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f301:	89 70 1c             	mov    DWORD PTR [eax+0x1c],esi
c001f304:	89 78 20             	mov    DWORD PTR [eax+0x20],edi
c001f307:	89 68 24             	mov    DWORD PTR [eax+0x24],ebp
c001f30a:	81 c4 08 00 00 00    	add    esp,0x8
c001f310:	5e                   	pop    esi
c001f311:	5b                   	pop    ebx
c001f312:	59                   	pop    ecx
c001f313:	5a                   	pop    edx
c001f314:	89 70 2c             	mov    DWORD PTR [eax+0x2c],esi
c001f317:	89 48 30             	mov    DWORD PTR [eax+0x30],ecx
c001f31a:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001f31d:	52                   	push   edx
c001f31e:	51                   	push   ecx
c001f31f:	53                   	push   ebx
c001f320:	56                   	push   esi
c001f321:	81 ec 08 00 00 00    	sub    esp,0x8
c001f327:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c001f32a:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001f32d:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
c001f330:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f333:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001f336:	60                   	pusha  
c001f337:	8b 35 08 20 00 c2    	mov    esi,DWORD PTR ds:0xc2002008
c001f33d:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c001f340:	89 e3                	mov    ebx,esp
c001f342:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c001f345:	52                   	push   edx
c001f346:	68 66 f3 01 c0       	push   0xc001f366
c001f34b:	89 63 34             	mov    DWORD PTR [ebx+0x34],esp
c001f34e:	89 dc                	mov    esp,ebx
c001f350:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c001f353:	68 23 00 00 00       	push   0x23
c001f358:	51                   	push   ecx
c001f359:	68 02 02 00 00       	push   0x202
c001f35e:	68 1b 00 00 00       	push   0x1b
c001f363:	ff 36                	push   DWORD PTR [esi]
c001f365:	cf                   	iret   

c001f366 <finishSignal>:
c001f366:	cd 0f                	int    0xf

c001f368 <finishSignal2>:
c001f368:	ff 35 08 20 00 c2    	push   DWORD PTR ds:0xc2002008
c001f36e:	e8 b4 29 ff ff       	call   c0011d27 <KiFinishSignalZ>
c001f373:	8b 2d 08 20 00 c2    	mov    ebp,DWORD PTR ds:0xc2002008
c001f379:	68 23 00 00 00       	push   0x23
c001f37e:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001f381:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c001f384:	68 1b 00 00 00       	push   0x1b
c001f389:	ff 75 2c             	push   DWORD PTR [ebp+0x2c]
c001f38c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001f38f:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c001f392:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c001f395:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001f398:	8b 75 1c             	mov    esi,DWORD PTR [ebp+0x1c]
c001f39b:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c001f39e:	8b 6d 24             	mov    ebp,DWORD PTR [ebp+0x24]
c001f3a1:	cf                   	iret   

c001f3a2 <skipSignals>:
c001f3a2:	61                   	popa   
c001f3a3:	81 c4 08 00 00 00    	add    esp,0x8
c001f3a9:	cf                   	iret   
c001f3aa:	90                   	nop
c001f3ab:	90                   	nop

c001f3ac <irq16>:
c001f3ac:	fa                   	cli    
c001f3ad:	6a 00                	push   0x0
c001f3af:	6a 30                	push   0x30
c001f3b1:	e9 c0 fe ff ff       	jmp    c001f276 <int_common_stub>

c001f3b6 <irq17>:
c001f3b6:	fa                   	cli    
c001f3b7:	6a 00                	push   0x0
c001f3b9:	6a 31                	push   0x31
c001f3bb:	e9 b6 fe ff ff       	jmp    c001f276 <int_common_stub>

c001f3c0 <irq18>:
c001f3c0:	fa                   	cli    
c001f3c1:	6a 00                	push   0x0
c001f3c3:	6a 32                	push   0x32
c001f3c5:	e9 ac fe ff ff       	jmp    c001f276 <int_common_stub>

c001f3ca <irq19>:
c001f3ca:	fa                   	cli    
c001f3cb:	6a 00                	push   0x0
c001f3cd:	6a 33                	push   0x33
c001f3cf:	e9 a2 fe ff ff       	jmp    c001f276 <int_common_stub>

c001f3d4 <irq20>:
c001f3d4:	fa                   	cli    
c001f3d5:	6a 00                	push   0x0
c001f3d7:	6a 34                	push   0x34
c001f3d9:	e9 98 fe ff ff       	jmp    c001f276 <int_common_stub>

c001f3de <irq21>:
c001f3de:	fa                   	cli    
c001f3df:	6a 00                	push   0x0
c001f3e1:	6a 35                	push   0x35
c001f3e3:	e9 8e fe ff ff       	jmp    c001f276 <int_common_stub>

c001f3e8 <irq22>:
c001f3e8:	fa                   	cli    
c001f3e9:	6a 00                	push   0x0
c001f3eb:	6a 36                	push   0x36
c001f3ed:	e9 84 fe ff ff       	jmp    c001f276 <int_common_stub>

c001f3f2 <irq23>:
c001f3f2:	fa                   	cli    
c001f3f3:	6a 00                	push   0x0
c001f3f5:	6a 37                	push   0x37
c001f3f7:	e9 7a fe ff ff       	jmp    c001f276 <int_common_stub>
c001f3fc:	66 90                	xchg   ax,ax
c001f3fe:	66 90                	xchg   ax,ax

c001f400 <i386GetRDRAND>:
c001f400:	b9 64 00 00 00       	mov    ecx,0x64

c001f405 <retry>:
c001f405:	0f c7 f0             	rdrand eax
c001f408:	72 05                	jb     c001f40f <retry.done>
c001f40a:	e2 f9                	loop   c001f405 <retry>

c001f40c <retry.fail>:
c001f40c:	31 c0                	xor    eax,eax
c001f40e:	c3                   	ret    

c001f40f <retry.done>:
c001f40f:	c3                   	ret    

c001f410 <absolutelyNoChanceInHell>:
c001f410:	b8 01 00 00 00       	mov    eax,0x1
c001f415:	0f a2                	cpuid  
c001f417:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001f41d:	74 06                	je     c001f425 <sseDetect.noSSE>
c001f41f:	b8 01 00 00 00       	mov    eax,0x1
c001f424:	c3                   	ret    

c001f425 <sseDetect.noSSE>:
c001f425:	31 c0                	xor    eax,eax
c001f427:	c3                   	ret    

c001f428 <sseSave>:
c001f428:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f42c:	0f ae 00             	fxsave [eax]
c001f42f:	c3                   	ret    

c001f430 <sseLoad>:
c001f430:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f434:	0f ae 08             	fxrstor [eax]
c001f437:	c3                   	ret    

c001f438 <sseInit>:
c001f438:	e8 42 00 00 00       	call   c001f47f <x87Init>
c001f43d:	0f 20 e0             	mov    eax,cr4
c001f440:	66 0d 00 06          	or     ax,0x600
c001f444:	0f 22 e0             	mov    cr4,eax
c001f447:	c3                   	ret    

c001f448 <sseClose>:
c001f448:	c3                   	ret    
c001f449:	66 90                	xchg   ax,ax
c001f44b:	66 90                	xchg   ax,ax
c001f44d:	66 90                	xchg   ax,ax
c001f44f:	90                   	nop

c001f450 <value_37F>:
c001f450:	7f 03                	jg     c001f455 <value_37A+0x1>

c001f452 <value_37E>:
c001f452:	7e 03                	jle    c001f457 <x87Detect+0x1>

c001f454 <value_37A>:
c001f454:	7a 03                	jp     c001f459 <x87Detect+0x3>

c001f456 <x87Detect>:
c001f456:	b8 01 00 00 00       	mov    eax,0x1
c001f45b:	0f a2                	cpuid  
c001f45d:	f7 c2 01 00 00 00    	test   edx,0x1
c001f463:	74 06                	je     c001f46b <x87Detect.nox87>
c001f465:	b8 01 00 00 00       	mov    eax,0x1
c001f46a:	c3                   	ret    

c001f46b <x87Detect.nox87>:
c001f46b:	b8 00 00 00 00       	mov    eax,0x0
c001f470:	c3                   	ret    

c001f471 <x87Save>:
c001f471:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f475:	dd 30                	fnsave [eax]
c001f477:	c3                   	ret    

c001f478 <x87Load>:
c001f478:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f47c:	dd 20                	frstor [eax]
c001f47e:	c3                   	ret    

c001f47f <x87Init>:
c001f47f:	0f 20 c0             	mov    eax,cr0
c001f482:	66 25 fb ff          	and    ax,0xfffb
c001f486:	66 0d 22 00          	or     ax,0x22
c001f48a:	0f 22 c0             	mov    cr0,eax
c001f48d:	db e3                	fninit 
c001f48f:	0f 06                	clts   
c001f491:	d9 2d 54 f4 01 c0    	fldcw  WORD PTR ds:0xc001f454
c001f497:	c3                   	ret    

c001f498 <x87Close>:
c001f498:	c3                   	ret    
c001f499:	66 90                	xchg   ax,ax
c001f49b:	90                   	nop

c001f49c <__do_global_ctors_aux>:
c001f49c:	a1 50 04 02 c0       	mov    eax,ds:0xc0020450
c001f4a1:	83 f8 ff             	cmp    eax,0xffffffff
c001f4a4:	74 1a                	je     c001f4c0 <__do_global_ctors_aux+0x24>
c001f4a6:	55                   	push   ebp
c001f4a7:	89 e5                	mov    ebp,esp
c001f4a9:	53                   	push   ebx
c001f4aa:	52                   	push   edx
c001f4ab:	bb 50 04 02 c0       	mov    ebx,0xc0020450
c001f4b0:	ff d0                	call   eax
c001f4b2:	83 eb 04             	sub    ebx,0x4
c001f4b5:	8b 03                	mov    eax,DWORD PTR [ebx]
c001f4b7:	83 f8 ff             	cmp    eax,0xffffffff
c001f4ba:	75 f4                	jne    c001f4b0 <__do_global_ctors_aux+0x14>
c001f4bc:	58                   	pop    eax
c001f4bd:	5b                   	pop    ebx
c001f4be:	5d                   	pop    ebp
c001f4bf:	c3                   	ret    
c001f4c0:	c3                   	ret    
c001f4c1:	66 90                	xchg   ax,ax
c001f4c3:	90                   	nop

c001f4c4 <__divdi3>:
c001f4c4:	55                   	push   ebp
c001f4c5:	57                   	push   edi
c001f4c6:	56                   	push   esi
c001f4c7:	53                   	push   ebx
c001f4c8:	83 ec 1c             	sub    esp,0x1c
c001f4cb:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001f4cf:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f4d3:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001f4d6:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001f4da:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001f4de:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001f4e2:	85 db                	test   ebx,ebx
c001f4e4:	0f 88 8e 00 00 00    	js     c001f578 <__divdi3+0xb4>
c001f4ea:	89 dd                	mov    ebp,ebx
c001f4ec:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001f4f4:	89 d3                	mov    ebx,edx
c001f4f6:	85 d2                	test   edx,edx
c001f4f8:	79 0d                	jns    c001f507 <__divdi3+0x43>
c001f4fa:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001f4fe:	f7 d8                	neg    eax
c001f500:	83 d2 00             	adc    edx,0x0
c001f503:	f7 da                	neg    edx
c001f505:	89 d3                	mov    ebx,edx
c001f507:	89 c7                	mov    edi,eax
c001f509:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001f50c:	85 db                	test   ebx,ebx
c001f50e:	75 48                	jne    c001f558 <__divdi3+0x94>
c001f510:	39 ef                	cmp    edi,ebp
c001f512:	76 24                	jbe    c001f538 <__divdi3+0x74>
c001f514:	89 ea                	mov    edx,ebp
c001f516:	f7 f7                	div    edi
c001f518:	89 c1                	mov    ecx,eax
c001f51a:	31 f6                	xor    esi,esi
c001f51c:	89 c8                	mov    eax,ecx
c001f51e:	89 f2                	mov    edx,esi
c001f520:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f524:	85 c9                	test   ecx,ecx
c001f526:	74 07                	je     c001f52f <__divdi3+0x6b>
c001f528:	f7 d8                	neg    eax
c001f52a:	83 d2 00             	adc    edx,0x0
c001f52d:	f7 da                	neg    edx
c001f52f:	83 c4 1c             	add    esp,0x1c
c001f532:	5b                   	pop    ebx
c001f533:	5e                   	pop    esi
c001f534:	5f                   	pop    edi
c001f535:	5d                   	pop    ebp
c001f536:	c3                   	ret    
c001f537:	90                   	nop
c001f538:	85 ff                	test   edi,edi
c001f53a:	75 0b                	jne    c001f547 <__divdi3+0x83>
c001f53c:	b8 01 00 00 00       	mov    eax,0x1
c001f541:	31 d2                	xor    edx,edx
c001f543:	f7 f3                	div    ebx
c001f545:	89 c7                	mov    edi,eax
c001f547:	31 d2                	xor    edx,edx
c001f549:	89 e8                	mov    eax,ebp
c001f54b:	f7 f7                	div    edi
c001f54d:	89 c6                	mov    esi,eax
c001f54f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001f552:	f7 f7                	div    edi
c001f554:	89 c1                	mov    ecx,eax
c001f556:	eb c4                	jmp    c001f51c <__divdi3+0x58>
c001f558:	39 eb                	cmp    ebx,ebp
c001f55a:	77 3c                	ja     c001f598 <__divdi3+0xd4>
c001f55c:	0f bd f3             	bsr    esi,ebx
c001f55f:	83 f6 1f             	xor    esi,0x1f
c001f562:	75 40                	jne    c001f5a4 <__divdi3+0xe0>
c001f564:	39 eb                	cmp    ebx,ebp
c001f566:	72 09                	jb     c001f571 <__divdi3+0xad>
c001f568:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001f56b:	0f 87 97 00 00 00    	ja     c001f608 <__divdi3+0x144>
c001f571:	b9 01 00 00 00       	mov    ecx,0x1
c001f576:	eb a4                	jmp    c001f51c <__divdi3+0x58>
c001f578:	f7 d9                	neg    ecx
c001f57a:	83 d3 00             	adc    ebx,0x0
c001f57d:	f7 db                	neg    ebx
c001f57f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001f582:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001f586:	89 dd                	mov    ebp,ebx
c001f588:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001f590:	e9 5f ff ff ff       	jmp    c001f4f4 <__divdi3+0x30>
c001f595:	8d 76 00             	lea    esi,[esi+0x0]
c001f598:	31 f6                	xor    esi,esi
c001f59a:	31 c9                	xor    ecx,ecx
c001f59c:	e9 7b ff ff ff       	jmp    c001f51c <__divdi3+0x58>
c001f5a1:	8d 76 00             	lea    esi,[esi+0x0]
c001f5a4:	b8 20 00 00 00       	mov    eax,0x20
c001f5a9:	29 f0                	sub    eax,esi
c001f5ab:	89 f1                	mov    ecx,esi
c001f5ad:	d3 e3                	shl    ebx,cl
c001f5af:	89 fa                	mov    edx,edi
c001f5b1:	88 c1                	mov    cl,al
c001f5b3:	d3 ea                	shr    edx,cl
c001f5b5:	09 da                	or     edx,ebx
c001f5b7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001f5bb:	89 f1                	mov    ecx,esi
c001f5bd:	d3 e7                	shl    edi,cl
c001f5bf:	89 eb                	mov    ebx,ebp
c001f5c1:	88 c1                	mov    cl,al
c001f5c3:	d3 eb                	shr    ebx,cl
c001f5c5:	89 f1                	mov    ecx,esi
c001f5c7:	d3 e5                	shl    ebp,cl
c001f5c9:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001f5cc:	88 c1                	mov    cl,al
c001f5ce:	d3 ea                	shr    edx,cl
c001f5d0:	09 d5                	or     ebp,edx
c001f5d2:	89 e8                	mov    eax,ebp
c001f5d4:	89 da                	mov    edx,ebx
c001f5d6:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001f5da:	89 d3                	mov    ebx,edx
c001f5dc:	89 c5                	mov    ebp,eax
c001f5de:	f7 e7                	mul    edi
c001f5e0:	39 d3                	cmp    ebx,edx
c001f5e2:	72 18                	jb     c001f5fc <__divdi3+0x138>
c001f5e4:	74 0a                	je     c001f5f0 <__divdi3+0x12c>
c001f5e6:	89 e9                	mov    ecx,ebp
c001f5e8:	31 f6                	xor    esi,esi
c001f5ea:	e9 2d ff ff ff       	jmp    c001f51c <__divdi3+0x58>
c001f5ef:	90                   	nop
c001f5f0:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001f5f3:	89 f1                	mov    ecx,esi
c001f5f5:	d3 e7                	shl    edi,cl
c001f5f7:	39 c7                	cmp    edi,eax
c001f5f9:	73 eb                	jae    c001f5e6 <__divdi3+0x122>
c001f5fb:	90                   	nop
c001f5fc:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001f5ff:	31 f6                	xor    esi,esi
c001f601:	e9 16 ff ff ff       	jmp    c001f51c <__divdi3+0x58>
c001f606:	66 90                	xchg   ax,ax
c001f608:	31 c9                	xor    ecx,ecx
c001f60a:	e9 0d ff ff ff       	jmp    c001f51c <__divdi3+0x58>
c001f60f:	90                   	nop

c001f610 <__moddi3>:
c001f610:	55                   	push   ebp
c001f611:	57                   	push   edi
c001f612:	56                   	push   esi
c001f613:	53                   	push   ebx
c001f614:	83 ec 2c             	sub    esp,0x2c
c001f617:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001f61b:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001f61f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001f623:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001f627:	85 db                	test   ebx,ebx
c001f629:	0f 88 85 00 00 00    	js     c001f6b4 <__moddi3+0xa4>
c001f62f:	89 de                	mov    esi,ebx
c001f631:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001f639:	89 d7                	mov    edi,edx
c001f63b:	85 d2                	test   edx,edx
c001f63d:	79 09                	jns    c001f648 <__moddi3+0x38>
c001f63f:	f7 d8                	neg    eax
c001f641:	83 d2 00             	adc    edx,0x0
c001f644:	f7 da                	neg    edx
c001f646:	89 d7                	mov    edi,edx
c001f648:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f64c:	89 cd                	mov    ebp,ecx
c001f64e:	85 ff                	test   edi,edi
c001f650:	75 52                	jne    c001f6a4 <__moddi3+0x94>
c001f652:	89 c3                	mov    ebx,eax
c001f654:	39 f0                	cmp    eax,esi
c001f656:	76 24                	jbe    c001f67c <__moddi3+0x6c>
c001f658:	89 c8                	mov    eax,ecx
c001f65a:	89 f2                	mov    edx,esi
c001f65c:	f7 f3                	div    ebx
c001f65e:	89 d6                	mov    esi,edx
c001f660:	89 f0                	mov    eax,esi
c001f662:	31 d2                	xor    edx,edx
c001f664:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f668:	85 c9                	test   ecx,ecx
c001f66a:	74 07                	je     c001f673 <__moddi3+0x63>
c001f66c:	f7 d8                	neg    eax
c001f66e:	83 d2 00             	adc    edx,0x0
c001f671:	f7 da                	neg    edx
c001f673:	83 c4 2c             	add    esp,0x2c
c001f676:	5b                   	pop    ebx
c001f677:	5e                   	pop    esi
c001f678:	5f                   	pop    edi
c001f679:	5d                   	pop    ebp
c001f67a:	c3                   	ret    
c001f67b:	90                   	nop
c001f67c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f680:	85 db                	test   ebx,ebx
c001f682:	75 0d                	jne    c001f691 <__moddi3+0x81>
c001f684:	b8 01 00 00 00       	mov    eax,0x1
c001f689:	31 d2                	xor    edx,edx
c001f68b:	f7 f7                	div    edi
c001f68d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f691:	89 f0                	mov    eax,esi
c001f693:	31 d2                	xor    edx,edx
c001f695:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001f699:	f7 f7                	div    edi
c001f69b:	89 e8                	mov    eax,ebp
c001f69d:	f7 f7                	div    edi
c001f69f:	89 d6                	mov    esi,edx
c001f6a1:	eb bd                	jmp    c001f660 <__moddi3+0x50>
c001f6a3:	90                   	nop
c001f6a4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001f6a8:	39 f7                	cmp    edi,esi
c001f6aa:	76 20                	jbe    c001f6cc <__moddi3+0xbc>
c001f6ac:	89 c8                	mov    eax,ecx
c001f6ae:	89 f2                	mov    edx,esi
c001f6b0:	eb b2                	jmp    c001f664 <__moddi3+0x54>
c001f6b2:	66 90                	xchg   ax,ax
c001f6b4:	f7 d9                	neg    ecx
c001f6b6:	83 d3 00             	adc    ebx,0x0
c001f6b9:	f7 db                	neg    ebx
c001f6bb:	89 de                	mov    esi,ebx
c001f6bd:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001f6c5:	e9 6f ff ff ff       	jmp    c001f639 <__moddi3+0x29>
c001f6ca:	66 90                	xchg   ax,ax
c001f6cc:	0f bd c7             	bsr    eax,edi
c001f6cf:	83 f0 1f             	xor    eax,0x1f
c001f6d2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001f6d6:	75 24                	jne    c001f6fc <__moddi3+0xec>
c001f6d8:	39 f7                	cmp    edi,esi
c001f6da:	72 06                	jb     c001f6e2 <__moddi3+0xd2>
c001f6dc:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001f6e0:	77 0c                	ja     c001f6ee <__moddi3+0xde>
c001f6e2:	89 e9                	mov    ecx,ebp
c001f6e4:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001f6e8:	19 fe                	sbb    esi,edi
c001f6ea:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001f6ee:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f6f2:	89 f2                	mov    edx,esi
c001f6f4:	e9 6b ff ff ff       	jmp    c001f664 <__moddi3+0x54>
c001f6f9:	8d 76 00             	lea    esi,[esi+0x0]
c001f6fc:	b8 20 00 00 00       	mov    eax,0x20
c001f701:	89 c2                	mov    edx,eax
c001f703:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001f707:	29 da                	sub    edx,ebx
c001f709:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001f70d:	88 d9                	mov    cl,bl
c001f70f:	d3 e7                	shl    edi,cl
c001f711:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f715:	88 d1                	mov    cl,dl
c001f717:	d3 e8                	shr    eax,cl
c001f719:	09 c7                	or     edi,eax
c001f71b:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001f71f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001f723:	89 d8                	mov    eax,ebx
c001f725:	88 d9                	mov    cl,bl
c001f727:	d3 e7                	shl    edi,cl
c001f729:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f72d:	89 f3                	mov    ebx,esi
c001f72f:	88 d1                	mov    cl,dl
c001f731:	d3 eb                	shr    ebx,cl
c001f733:	89 c7                	mov    edi,eax
c001f735:	88 c1                	mov    cl,al
c001f737:	d3 e6                	shl    esi,cl
c001f739:	89 e8                	mov    eax,ebp
c001f73b:	88 d1                	mov    cl,dl
c001f73d:	d3 e8                	shr    eax,cl
c001f73f:	09 f0                	or     eax,esi
c001f741:	89 f9                	mov    ecx,edi
c001f743:	d3 e5                	shl    ebp,cl
c001f745:	89 da                	mov    edx,ebx
c001f747:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001f74b:	89 d3                	mov    ebx,edx
c001f74d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f751:	89 c6                	mov    esi,eax
c001f753:	89 d1                	mov    ecx,edx
c001f755:	39 d3                	cmp    ebx,edx
c001f757:	72 27                	jb     c001f780 <__moddi3+0x170>
c001f759:	74 21                	je     c001f77c <__moddi3+0x16c>
c001f75b:	29 f5                	sub    ebp,esi
c001f75d:	19 cb                	sbb    ebx,ecx
c001f75f:	89 de                	mov    esi,ebx
c001f761:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001f765:	d3 e6                	shl    esi,cl
c001f767:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001f76b:	89 f9                	mov    ecx,edi
c001f76d:	d3 ed                	shr    ebp,cl
c001f76f:	09 ee                	or     esi,ebp
c001f771:	89 f0                	mov    eax,esi
c001f773:	d3 eb                	shr    ebx,cl
c001f775:	89 da                	mov    edx,ebx
c001f777:	e9 e8 fe ff ff       	jmp    c001f664 <__moddi3+0x54>
c001f77c:	39 c5                	cmp    ebp,eax
c001f77e:	73 db                	jae    c001f75b <__moddi3+0x14b>
c001f780:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001f784:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001f788:	89 d1                	mov    ecx,edx
c001f78a:	89 c6                	mov    esi,eax
c001f78c:	eb cd                	jmp    c001f75b <__moddi3+0x14b>
c001f78e:	66 90                	xchg   ax,ax

c001f790 <__udivdi3>:
c001f790:	55                   	push   ebp
c001f791:	57                   	push   edi
c001f792:	56                   	push   esi
c001f793:	53                   	push   ebx
c001f794:	83 ec 1c             	sub    esp,0x1c
c001f797:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001f79b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001f79f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001f7a3:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001f7a7:	85 d2                	test   edx,edx
c001f7a9:	75 41                	jne    c001f7ec <__udivdi3+0x5c>
c001f7ab:	39 f7                	cmp    edi,esi
c001f7ad:	76 15                	jbe    c001f7c4 <__udivdi3+0x34>
c001f7af:	89 e8                	mov    eax,ebp
c001f7b1:	89 f2                	mov    edx,esi
c001f7b3:	f7 f7                	div    edi
c001f7b5:	31 db                	xor    ebx,ebx
c001f7b7:	89 da                	mov    edx,ebx
c001f7b9:	83 c4 1c             	add    esp,0x1c
c001f7bc:	5b                   	pop    ebx
c001f7bd:	5e                   	pop    esi
c001f7be:	5f                   	pop    edi
c001f7bf:	5d                   	pop    ebp
c001f7c0:	c3                   	ret    
c001f7c1:	8d 76 00             	lea    esi,[esi+0x0]
c001f7c4:	89 f9                	mov    ecx,edi
c001f7c6:	85 ff                	test   edi,edi
c001f7c8:	75 0b                	jne    c001f7d5 <__udivdi3+0x45>
c001f7ca:	b8 01 00 00 00       	mov    eax,0x1
c001f7cf:	31 d2                	xor    edx,edx
c001f7d1:	f7 f7                	div    edi
c001f7d3:	89 c1                	mov    ecx,eax
c001f7d5:	31 d2                	xor    edx,edx
c001f7d7:	89 f0                	mov    eax,esi
c001f7d9:	f7 f1                	div    ecx
c001f7db:	89 c3                	mov    ebx,eax
c001f7dd:	89 e8                	mov    eax,ebp
c001f7df:	f7 f1                	div    ecx
c001f7e1:	89 da                	mov    edx,ebx
c001f7e3:	83 c4 1c             	add    esp,0x1c
c001f7e6:	5b                   	pop    ebx
c001f7e7:	5e                   	pop    esi
c001f7e8:	5f                   	pop    edi
c001f7e9:	5d                   	pop    ebp
c001f7ea:	c3                   	ret    
c001f7eb:	90                   	nop
c001f7ec:	39 f2                	cmp    edx,esi
c001f7ee:	77 1c                	ja     c001f80c <__udivdi3+0x7c>
c001f7f0:	0f bd da             	bsr    ebx,edx
c001f7f3:	83 f3 1f             	xor    ebx,0x1f
c001f7f6:	75 24                	jne    c001f81c <__udivdi3+0x8c>
c001f7f8:	39 f2                	cmp    edx,esi
c001f7fa:	72 08                	jb     c001f804 <__udivdi3+0x74>
c001f7fc:	39 ef                	cmp    edi,ebp
c001f7fe:	0f 87 84 00 00 00    	ja     c001f888 <__udivdi3+0xf8>
c001f804:	b8 01 00 00 00       	mov    eax,0x1
c001f809:	eb ac                	jmp    c001f7b7 <__udivdi3+0x27>
c001f80b:	90                   	nop
c001f80c:	31 db                	xor    ebx,ebx
c001f80e:	31 c0                	xor    eax,eax
c001f810:	89 da                	mov    edx,ebx
c001f812:	83 c4 1c             	add    esp,0x1c
c001f815:	5b                   	pop    ebx
c001f816:	5e                   	pop    esi
c001f817:	5f                   	pop    edi
c001f818:	5d                   	pop    ebp
c001f819:	c3                   	ret    
c001f81a:	66 90                	xchg   ax,ax
c001f81c:	b8 20 00 00 00       	mov    eax,0x20
c001f821:	29 d8                	sub    eax,ebx
c001f823:	88 d9                	mov    cl,bl
c001f825:	d3 e2                	shl    edx,cl
c001f827:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001f82b:	89 fa                	mov    edx,edi
c001f82d:	88 c1                	mov    cl,al
c001f82f:	d3 ea                	shr    edx,cl
c001f831:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f835:	09 d1                	or     ecx,edx
c001f837:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001f83b:	88 d9                	mov    cl,bl
c001f83d:	d3 e7                	shl    edi,cl
c001f83f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f843:	89 f7                	mov    edi,esi
c001f845:	88 c1                	mov    cl,al
c001f847:	d3 ef                	shr    edi,cl
c001f849:	88 d9                	mov    cl,bl
c001f84b:	d3 e6                	shl    esi,cl
c001f84d:	89 ea                	mov    edx,ebp
c001f84f:	88 c1                	mov    cl,al
c001f851:	d3 ea                	shr    edx,cl
c001f853:	09 d6                	or     esi,edx
c001f855:	89 f0                	mov    eax,esi
c001f857:	89 fa                	mov    edx,edi
c001f859:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001f85d:	89 d7                	mov    edi,edx
c001f85f:	89 c6                	mov    esi,eax
c001f861:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f865:	39 d7                	cmp    edi,edx
c001f867:	72 13                	jb     c001f87c <__udivdi3+0xec>
c001f869:	74 09                	je     c001f874 <__udivdi3+0xe4>
c001f86b:	89 f0                	mov    eax,esi
c001f86d:	31 db                	xor    ebx,ebx
c001f86f:	e9 43 ff ff ff       	jmp    c001f7b7 <__udivdi3+0x27>
c001f874:	88 d9                	mov    cl,bl
c001f876:	d3 e5                	shl    ebp,cl
c001f878:	39 c5                	cmp    ebp,eax
c001f87a:	73 ef                	jae    c001f86b <__udivdi3+0xdb>
c001f87c:	8d 46 ff             	lea    eax,[esi-0x1]
c001f87f:	31 db                	xor    ebx,ebx
c001f881:	e9 31 ff ff ff       	jmp    c001f7b7 <__udivdi3+0x27>
c001f886:	66 90                	xchg   ax,ax
c001f888:	31 c0                	xor    eax,eax
c001f88a:	e9 28 ff ff ff       	jmp    c001f7b7 <__udivdi3+0x27>
c001f88f:	90                   	nop

c001f890 <__umoddi3>:
c001f890:	55                   	push   ebp
c001f891:	57                   	push   edi
c001f892:	56                   	push   esi
c001f893:	53                   	push   ebx
c001f894:	83 ec 1c             	sub    esp,0x1c
c001f897:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001f89b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f89f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001f8a3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001f8a7:	89 da                	mov    edx,ebx
c001f8a9:	85 c0                	test   eax,eax
c001f8ab:	75 37                	jne    c001f8e4 <__umoddi3+0x54>
c001f8ad:	39 df                	cmp    edi,ebx
c001f8af:	76 13                	jbe    c001f8c4 <__umoddi3+0x34>
c001f8b1:	89 f0                	mov    eax,esi
c001f8b3:	f7 f7                	div    edi
c001f8b5:	89 d0                	mov    eax,edx
c001f8b7:	31 d2                	xor    edx,edx
c001f8b9:	83 c4 1c             	add    esp,0x1c
c001f8bc:	5b                   	pop    ebx
c001f8bd:	5e                   	pop    esi
c001f8be:	5f                   	pop    edi
c001f8bf:	5d                   	pop    ebp
c001f8c0:	c3                   	ret    
c001f8c1:	8d 76 00             	lea    esi,[esi+0x0]
c001f8c4:	89 fd                	mov    ebp,edi
c001f8c6:	85 ff                	test   edi,edi
c001f8c8:	75 0b                	jne    c001f8d5 <__umoddi3+0x45>
c001f8ca:	b8 01 00 00 00       	mov    eax,0x1
c001f8cf:	31 d2                	xor    edx,edx
c001f8d1:	f7 f7                	div    edi
c001f8d3:	89 c5                	mov    ebp,eax
c001f8d5:	89 d8                	mov    eax,ebx
c001f8d7:	31 d2                	xor    edx,edx
c001f8d9:	f7 f5                	div    ebp
c001f8db:	89 f0                	mov    eax,esi
c001f8dd:	f7 f5                	div    ebp
c001f8df:	89 d0                	mov    eax,edx
c001f8e1:	eb d4                	jmp    c001f8b7 <__umoddi3+0x27>
c001f8e3:	90                   	nop
c001f8e4:	89 f1                	mov    ecx,esi
c001f8e6:	39 d8                	cmp    eax,ebx
c001f8e8:	76 0a                	jbe    c001f8f4 <__umoddi3+0x64>
c001f8ea:	89 f0                	mov    eax,esi
c001f8ec:	83 c4 1c             	add    esp,0x1c
c001f8ef:	5b                   	pop    ebx
c001f8f0:	5e                   	pop    esi
c001f8f1:	5f                   	pop    edi
c001f8f2:	5d                   	pop    ebp
c001f8f3:	c3                   	ret    
c001f8f4:	0f bd e8             	bsr    ebp,eax
c001f8f7:	83 f5 1f             	xor    ebp,0x1f
c001f8fa:	75 1c                	jne    c001f918 <__umoddi3+0x88>
c001f8fc:	39 d8                	cmp    eax,ebx
c001f8fe:	72 04                	jb     c001f904 <__umoddi3+0x74>
c001f900:	39 f7                	cmp    edi,esi
c001f902:	77 08                	ja     c001f90c <__umoddi3+0x7c>
c001f904:	89 da                	mov    edx,ebx
c001f906:	29 fe                	sub    esi,edi
c001f908:	19 c2                	sbb    edx,eax
c001f90a:	89 f1                	mov    ecx,esi
c001f90c:	89 c8                	mov    eax,ecx
c001f90e:	83 c4 1c             	add    esp,0x1c
c001f911:	5b                   	pop    ebx
c001f912:	5e                   	pop    esi
c001f913:	5f                   	pop    edi
c001f914:	5d                   	pop    ebp
c001f915:	c3                   	ret    
c001f916:	66 90                	xchg   ax,ax
c001f918:	ba 20 00 00 00       	mov    edx,0x20
c001f91d:	29 ea                	sub    edx,ebp
c001f91f:	89 e9                	mov    ecx,ebp
c001f921:	d3 e0                	shl    eax,cl
c001f923:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f927:	89 f8                	mov    eax,edi
c001f929:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001f92d:	88 d1                	mov    cl,dl
c001f92f:	d3 e8                	shr    eax,cl
c001f931:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f935:	09 c1                	or     ecx,eax
c001f937:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001f93b:	89 e9                	mov    ecx,ebp
c001f93d:	d3 e7                	shl    edi,cl
c001f93f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f943:	89 d8                	mov    eax,ebx
c001f945:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f949:	88 d1                	mov    cl,dl
c001f94b:	d3 e8                	shr    eax,cl
c001f94d:	89 c7                	mov    edi,eax
c001f94f:	89 e9                	mov    ecx,ebp
c001f951:	d3 e3                	shl    ebx,cl
c001f953:	89 f0                	mov    eax,esi
c001f955:	88 d1                	mov    cl,dl
c001f957:	d3 e8                	shr    eax,cl
c001f959:	09 d8                	or     eax,ebx
c001f95b:	89 e9                	mov    ecx,ebp
c001f95d:	d3 e6                	shl    esi,cl
c001f95f:	89 f3                	mov    ebx,esi
c001f961:	89 fa                	mov    edx,edi
c001f963:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001f967:	89 d1                	mov    ecx,edx
c001f969:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f96d:	89 c6                	mov    esi,eax
c001f96f:	89 d7                	mov    edi,edx
c001f971:	39 d1                	cmp    ecx,edx
c001f973:	72 27                	jb     c001f99c <__umoddi3+0x10c>
c001f975:	74 21                	je     c001f998 <__umoddi3+0x108>
c001f977:	89 ca                	mov    edx,ecx
c001f979:	29 f3                	sub    ebx,esi
c001f97b:	19 fa                	sbb    edx,edi
c001f97d:	89 d0                	mov    eax,edx
c001f97f:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001f983:	d3 e0                	shl    eax,cl
c001f985:	89 e9                	mov    ecx,ebp
c001f987:	d3 eb                	shr    ebx,cl
c001f989:	09 d8                	or     eax,ebx
c001f98b:	d3 ea                	shr    edx,cl
c001f98d:	83 c4 1c             	add    esp,0x1c
c001f990:	5b                   	pop    ebx
c001f991:	5e                   	pop    esi
c001f992:	5f                   	pop    edi
c001f993:	5d                   	pop    ebp
c001f994:	c3                   	ret    
c001f995:	8d 76 00             	lea    esi,[esi+0x0]
c001f998:	39 c3                	cmp    ebx,eax
c001f99a:	73 db                	jae    c001f977 <__umoddi3+0xe7>
c001f99c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001f9a0:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001f9a4:	89 d7                	mov    edi,edx
c001f9a6:	89 c6                	mov    esi,eax
c001f9a8:	eb cd                	jmp    c001f977 <__umoddi3+0xe7>

Disassembly of section .init:

c001f9aa <_init>:
c001f9aa:	55                   	push   ebp
c001f9ab:	89 e5                	mov    ebp,esp
c001f9ad:	e8 42 07 fe ff       	call   c00000f4 <frame_dummy>
c001f9b2:	e8 e5 fa ff ff       	call   c001f49c <__do_global_ctors_aux>
c001f9b7:	5d                   	pop    ebp
c001f9b8:	c3                   	ret    

Disassembly of section .fini:

c001f9b9 <_fini>:
c001f9b9:	55                   	push   ebp
c001f9ba:	89 e5                	mov    ebp,esp
c001f9bc:	e8 c3 06 fe ff       	call   c0000084 <__do_global_dtors_aux>
c001f9c1:	5d                   	pop    ebp
c001f9c2:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001f9c4 <Computer::~Computer()>:
c001f9c4:	83 ec 0c             	sub    esp,0xc
c001f9c7:	ba d4 0c 02 c0       	mov    edx,0xc0020cd4
c001f9cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9d0:	89 10                	mov    DWORD PTR [eax],edx
c001f9d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9d6:	83 ec 0c             	sub    esp,0xc
c001f9d9:	50                   	push   eax
c001f9da:	e8 5d cf fe ff       	call   c000c93c <Device::~Device()>
c001f9df:	83 c4 10             	add    esp,0x10
c001f9e2:	90                   	nop
c001f9e3:	83 c4 0c             	add    esp,0xc
c001f9e6:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001f9e8 <Computer::~Computer()>:
c001f9e8:	83 ec 0c             	sub    esp,0xc
c001f9eb:	83 ec 0c             	sub    esp,0xc
c001f9ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f9f2:	e8 cd ff ff ff       	call   c001f9c4 <Computer::~Computer()>
c001f9f7:	83 c4 10             	add    esp,0x10
c001f9fa:	83 ec 08             	sub    esp,0x8
c001f9fd:	68 70 01 00 00       	push   0x170
c001fa02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fa06:	e8 0d ae fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001fa0b:	83 c4 10             	add    esp,0x10
c001fa0e:	83 c4 0c             	add    esp,0xc
c001fa11:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001fa12 <idleCommon()>:
c001fa12:	83 ec 0c             	sub    esp,0xc
c001fa15:	fa                   	cli    
c001fa16:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c001fa1c:	e8 f7 66 ff ff       	call   c0016118 <schedule()>
c001fa21:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001fa26:	48                   	dec    eax
c001fa27:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c001fa2c:	75 01                	jne    c001fa2f <idleCommon()+0x1d>
c001fa2e:	fb                   	sti    
c001fa2f:	83 c4 0c             	add    esp,0xc
c001fa32:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001fa34 <LinkedList<UnixFile>::~LinkedList()>:
c001fa34:	90                   	nop
c001fa35:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001fa36 <LinkedList<UnixFile>::LinkedList()>:
c001fa36:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa3a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fa40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa44:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fa4b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa4f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fa56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa5a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fa60:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa64:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fa6b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa6f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fa76:	90                   	nop
c001fa77:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001fa78 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001fa78:	83 ec 0c             	sub    esp,0xc
c001fa7b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001fa80:	75 10                	jne    c001fa92 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001fa82:	83 ec 0c             	sub    esp,0xc
c001fa85:	68 e8 0e 02 c0       	push   0xc0020ee8
c001fa8a:	e8 04 1c ff ff       	call   c0011693 <KePanic(char const*)>
c001fa8f:	83 c4 10             	add    esp,0x10
c001fa92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa96:	8b 00                	mov    eax,DWORD PTR [eax]
c001fa98:	85 c0                	test   eax,eax
c001fa9a:	74 34                	je     c001fad0 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001fa9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001faa0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001faa3:	85 c0                	test   eax,eax
c001faa5:	74 29                	je     c001fad0 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001faa7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001faab:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001faae:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fab2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fab5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fab9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fabd:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fac0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fac4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fac7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001face:	eb 65                	jmp    c001fb35 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001fad0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fad4:	8b 00                	mov    eax,DWORD PTR [eax]
c001fad6:	85 c0                	test   eax,eax
c001fad8:	75 4b                	jne    c001fb25 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001fada:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fade:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fae1:	85 c0                	test   eax,eax
c001fae3:	75 40                	jne    c001fb25 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001fae5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fae9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001faed:	89 10                	mov    DWORD PTR [eax],edx
c001faef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001faf3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001faf7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fafa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fafe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fb01:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fb08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb0c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fb0f:	85 c0                	test   eax,eax
c001fb11:	74 22                	je     c001fb35 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001fb13:	83 ec 0c             	sub    esp,0xc
c001fb16:	68 0a 0f 02 c0       	push   0xc0020f0a
c001fb1b:	e8 73 1b ff ff       	call   c0011693 <KePanic(char const*)>
c001fb20:	83 c4 10             	add    esp,0x10
c001fb23:	eb 10                	jmp    c001fb35 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001fb25:	83 ec 0c             	sub    esp,0xc
c001fb28:	68 14 0f 02 c0       	push   0xc0020f14
c001fb2d:	e8 61 1b ff ff       	call   c0011693 <KePanic(char const*)>
c001fb32:	83 c4 10             	add    esp,0x10
c001fb35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb39:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fb3c:	8d 50 01             	lea    edx,[eax+0x1]
c001fb3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb43:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fb46:	90                   	nop
c001fb47:	83 c4 0c             	add    esp,0xc
c001fb4a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001fb4c <LinkedList<UnixFile>::getFirstElement()>:
c001fb4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb50:	8b 00                	mov    eax,DWORD PTR [eax]
c001fb52:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001fb54 <LinkedList<UnixFile>::removeFirst()>:
c001fb54:	83 ec 0c             	sub    esp,0xc
c001fb57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb5b:	8b 00                	mov    eax,DWORD PTR [eax]
c001fb5d:	85 c0                	test   eax,eax
c001fb5f:	75 12                	jne    c001fb73 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001fb61:	83 ec 0c             	sub    esp,0xc
c001fb64:	68 20 0f 02 c0       	push   0xc0020f20
c001fb69:	e8 25 1b ff ff       	call   c0011693 <KePanic(char const*)>
c001fb6e:	83 c4 10             	add    esp,0x10
c001fb71:	eb 7e                	jmp    c001fbf1 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001fb73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb77:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fb7a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fb7d:	85 c0                	test   eax,eax
c001fb7f:	74 10                	je     c001fb91 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001fb81:	83 ec 0c             	sub    esp,0xc
c001fb84:	68 6b 0f 02 c0       	push   0xc0020f6b
c001fb89:	e8 05 1b ff ff       	call   c0011693 <KePanic(char const*)>
c001fb8e:	83 c4 10             	add    esp,0x10
c001fb91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb95:	8b 00                	mov    eax,DWORD PTR [eax]
c001fb97:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fb9a:	85 c0                	test   eax,eax
c001fb9c:	75 33                	jne    c001fbd1 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001fb9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fba2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fba8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbac:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fbb3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbb7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fbba:	83 f8 01             	cmp    eax,0x1
c001fbbd:	74 21                	je     c001fbe0 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001fbbf:	83 ec 0c             	sub    esp,0xc
c001fbc2:	68 44 0f 02 c0       	push   0xc0020f44
c001fbc7:	e8 c7 1a ff ff       	call   c0011693 <KePanic(char const*)>
c001fbcc:	83 c4 10             	add    esp,0x10
c001fbcf:	eb 0f                	jmp    c001fbe0 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001fbd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbd5:	8b 00                	mov    eax,DWORD PTR [eax]
c001fbd7:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001fbda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbde:	89 10                	mov    DWORD PTR [eax],edx
c001fbe0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbe4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fbe7:	8d 50 ff             	lea    edx,[eax-0x1]
c001fbea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbee:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fbf1:	83 c4 0c             	add    esp,0xc
c001fbf4:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001fbf6 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001fbf6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fbfa:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fbfd:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001fbfe <DriverlessDevice::~DriverlessDevice()>:
c001fbfe:	ba fc 1b 02 c0       	mov    edx,0xc0021bfc
c001fc03:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fc07:	89 10                	mov    DWORD PTR [eax],edx
c001fc09:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fc0d:	50                   	push   eax
c001fc0e:	e8 29 cd fe ff       	call   c000c93c <Device::~Device()>
c001fc13:	83 c4 04             	add    esp,0x4
c001fc16:	90                   	nop
c001fc17:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001fc18 <DriverlessDevice::~DriverlessDevice()>:
c001fc18:	83 ec 0c             	sub    esp,0xc
c001fc1b:	83 ec 0c             	sub    esp,0xc
c001fc1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fc22:	e8 d7 ff ff ff       	call   c001fbfe <DriverlessDevice::~DriverlessDevice()>
c001fc27:	83 c4 10             	add    esp,0x10
c001fc2a:	83 ec 08             	sub    esp,0x8
c001fc2d:	68 58 01 00 00       	push   0x158
c001fc32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fc36:	e8 dd ab fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001fc3b:	83 c4 10             	add    esp,0x10
c001fc3e:	83 c4 0c             	add    esp,0xc
c001fc41:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001fc42 <LinkedList<Device>::addElement(Device*)>:
c001fc42:	83 ec 0c             	sub    esp,0xc
c001fc45:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001fc4a:	75 10                	jne    c001fc5c <LinkedList<Device>::addElement(Device*)+0x1a>
c001fc4c:	83 ec 0c             	sub    esp,0xc
c001fc4f:	68 e8 0e 02 c0       	push   0xc0020ee8
c001fc54:	e8 3a 1a ff ff       	call   c0011693 <KePanic(char const*)>
c001fc59:	83 c4 10             	add    esp,0x10
c001fc5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc60:	8b 00                	mov    eax,DWORD PTR [eax]
c001fc62:	85 c0                	test   eax,eax
c001fc64:	74 3a                	je     c001fca0 <LinkedList<Device>::addElement(Device*)+0x5e>
c001fc66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc6a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fc6d:	85 c0                	test   eax,eax
c001fc6f:	74 2f                	je     c001fca0 <LinkedList<Device>::addElement(Device*)+0x5e>
c001fc71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc75:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fc78:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fc7c:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001fc82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc86:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fc8a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fc8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc91:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fc94:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001fc9e:	eb 68                	jmp    c001fd08 <LinkedList<Device>::addElement(Device*)+0xc6>
c001fca0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fca4:	8b 00                	mov    eax,DWORD PTR [eax]
c001fca6:	85 c0                	test   eax,eax
c001fca8:	75 4e                	jne    c001fcf8 <LinkedList<Device>::addElement(Device*)+0xb6>
c001fcaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcae:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fcb1:	85 c0                	test   eax,eax
c001fcb3:	75 43                	jne    c001fcf8 <LinkedList<Device>::addElement(Device*)+0xb6>
c001fcb5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcb9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fcbd:	89 10                	mov    DWORD PTR [eax],edx
c001fcbf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcc3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fcc7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fcca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcce:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fcd1:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001fcdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcdf:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fce2:	85 c0                	test   eax,eax
c001fce4:	74 22                	je     c001fd08 <LinkedList<Device>::addElement(Device*)+0xc6>
c001fce6:	83 ec 0c             	sub    esp,0xc
c001fce9:	68 0a 0f 02 c0       	push   0xc0020f0a
c001fcee:	e8 a0 19 ff ff       	call   c0011693 <KePanic(char const*)>
c001fcf3:	83 c4 10             	add    esp,0x10
c001fcf6:	eb 10                	jmp    c001fd08 <LinkedList<Device>::addElement(Device*)+0xc6>
c001fcf8:	83 ec 0c             	sub    esp,0xc
c001fcfb:	68 14 0f 02 c0       	push   0xc0020f14
c001fd00:	e8 8e 19 ff ff       	call   c0011693 <KePanic(char const*)>
c001fd05:	83 c4 10             	add    esp,0x10
c001fd08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd0c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fd0f:	8d 50 01             	lea    edx,[eax+0x1]
c001fd12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd16:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fd19:	90                   	nop
c001fd1a:	83 c4 0c             	add    esp,0xc
c001fd1d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001fd1e <LinkedList<Device>::LinkedList()>:
c001fd1e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd22:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fd28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd2c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fd33:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd37:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fd3e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd42:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fd48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd4c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fd53:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd57:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fd5e:	90                   	nop
c001fd5f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001fd60 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001fd60:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd64:	8b 00                	mov    eax,DWORD PTR [eax]
c001fd66:	85 c0                	test   eax,eax
c001fd68:	75 0e                	jne    c001fd78 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001fd6a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd6e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fd71:	85 c0                	test   eax,eax
c001fd73:	75 03                	jne    c001fd78 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001fd75:	b0 01                	mov    al,0x1
c001fd77:	c3                   	ret    
c001fd78:	b0 00                	mov    al,0x0
c001fd7a:	90                   	nop
c001fd7b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001fd7c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001fd7c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd80:	8b 00                	mov    eax,DWORD PTR [eax]
c001fd82:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001fd84 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001fd84:	83 ec 0c             	sub    esp,0xc
c001fd87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd8b:	8b 00                	mov    eax,DWORD PTR [eax]
c001fd8d:	85 c0                	test   eax,eax
c001fd8f:	75 17                	jne    c001fda8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c001fd91:	83 ec 0c             	sub    esp,0xc
c001fd94:	68 20 0f 02 c0       	push   0xc0020f20
c001fd99:	e8 f5 18 ff ff       	call   c0011693 <KePanic(char const*)>
c001fd9e:	83 c4 10             	add    esp,0x10
c001fda1:	e9 96 00 00 00       	jmp    c001fe3c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb8>
c001fda6:	66 90                	xchg   ax,ax
c001fda8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdac:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fdaf:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001fdb2:	85 c0                	test   eax,eax
c001fdb4:	0f 95 c0             	setne  al
c001fdb7:	0f b6 c0             	movzx  eax,al
c001fdba:	85 c0                	test   eax,eax
c001fdbc:	74 12                	je     c001fdd0 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x4c>
c001fdbe:	83 ec 0c             	sub    esp,0xc
c001fdc1:	68 6b 0f 02 c0       	push   0xc0020f6b
c001fdc6:	e8 c8 18 ff ff       	call   c0011693 <KePanic(char const*)>
c001fdcb:	83 c4 10             	add    esp,0x10
c001fdce:	66 90                	xchg   ax,ax
c001fdd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdd4:	8b 00                	mov    eax,DWORD PTR [eax]
c001fdd6:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001fdd9:	85 c0                	test   eax,eax
c001fddb:	0f 94 c0             	sete   al
c001fdde:	0f b6 c0             	movzx  eax,al
c001fde1:	85 c0                	test   eax,eax
c001fde3:	74 33                	je     c001fe18 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x94>
c001fde5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fde9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fdef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdf3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fdfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdfe:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fe01:	83 f8 01             	cmp    eax,0x1
c001fe04:	74 22                	je     c001fe28 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c001fe06:	83 ec 0c             	sub    esp,0xc
c001fe09:	68 44 0f 02 c0       	push   0xc0020f44
c001fe0e:	e8 80 18 ff ff       	call   c0011693 <KePanic(char const*)>
c001fe13:	83 c4 10             	add    esp,0x10
c001fe16:	eb 10                	jmp    c001fe28 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c001fe18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe1c:	8b 00                	mov    eax,DWORD PTR [eax]
c001fe1e:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001fe21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe25:	89 10                	mov    DWORD PTR [eax],edx
c001fe27:	90                   	nop
c001fe28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe2c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fe2f:	8d 50 ff             	lea    edx,[eax-0x1]
c001fe32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe36:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fe39:	8d 76 00             	lea    esi,[esi+0x0]
c001fe3c:	83 c4 0c             	add    esp,0xc
c001fe3f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001fe40 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001fe40:	83 ec 0c             	sub    esp,0xc
c001fe43:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001fe48:	75 12                	jne    c001fe5c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c001fe4a:	83 ec 0c             	sub    esp,0xc
c001fe4d:	68 e8 0e 02 c0       	push   0xc0020ee8
c001fe52:	e8 3c 18 ff ff       	call   c0011693 <KePanic(char const*)>
c001fe57:	83 c4 10             	add    esp,0x10
c001fe5a:	66 90                	xchg   ax,ax
c001fe5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe60:	8b 00                	mov    eax,DWORD PTR [eax]
c001fe62:	85 c0                	test   eax,eax
c001fe64:	74 36                	je     c001fe9c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001fe66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe6a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fe6d:	85 c0                	test   eax,eax
c001fe6f:	74 2b                	je     c001fe9c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001fe71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe75:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fe78:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fe7c:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001fe7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe83:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fe87:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fe8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe8e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fe91:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001fe98:	eb 6a                	jmp    c001ff04 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001fe9a:	66 90                	xchg   ax,ax
c001fe9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fea0:	8b 00                	mov    eax,DWORD PTR [eax]
c001fea2:	85 c0                	test   eax,eax
c001fea4:	75 4e                	jne    c001fef4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001fea6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001feaa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fead:	85 c0                	test   eax,eax
c001feaf:	75 43                	jne    c001fef4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001feb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001feb5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001feb9:	89 10                	mov    DWORD PTR [eax],edx
c001febb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001febf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fec3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fec6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001feca:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fecd:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001fed4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fed8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fedb:	85 c0                	test   eax,eax
c001fedd:	74 25                	je     c001ff04 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001fedf:	83 ec 0c             	sub    esp,0xc
c001fee2:	68 0a 0f 02 c0       	push   0xc0020f0a
c001fee7:	e8 a7 17 ff ff       	call   c0011693 <KePanic(char const*)>
c001feec:	83 c4 10             	add    esp,0x10
c001feef:	eb 13                	jmp    c001ff04 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001fef1:	8d 76 00             	lea    esi,[esi+0x0]
c001fef4:	83 ec 0c             	sub    esp,0xc
c001fef7:	68 14 0f 02 c0       	push   0xc0020f14
c001fefc:	e8 92 17 ff ff       	call   c0011693 <KePanic(char const*)>
c001ff01:	83 c4 10             	add    esp,0x10
c001ff04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff08:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ff0b:	8d 50 01             	lea    edx,[eax+0x1]
c001ff0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff12:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ff15:	90                   	nop
c001ff16:	83 c4 0c             	add    esp,0xc
c001ff19:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001ff1c <ACPI::~ACPI()>:
c001ff1c:	83 ec 0c             	sub    esp,0xc
c001ff1f:	ba e4 21 02 c0       	mov    edx,0xc00221e4
c001ff24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff28:	89 10                	mov    DWORD PTR [eax],edx
c001ff2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff2e:	83 ec 0c             	sub    esp,0xc
c001ff31:	50                   	push   eax
c001ff32:	e8 05 ca fe ff       	call   c000c93c <Device::~Device()>
c001ff37:	83 c4 10             	add    esp,0x10
c001ff3a:	90                   	nop
c001ff3b:	83 c4 0c             	add    esp,0xc
c001ff3e:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001ff40 <ACPI::~ACPI()>:
c001ff40:	83 ec 0c             	sub    esp,0xc
c001ff43:	83 ec 0c             	sub    esp,0xc
c001ff46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff4a:	e8 cd ff ff ff       	call   c001ff1c <ACPI::~ACPI()>
c001ff4f:	83 c4 10             	add    esp,0x10
c001ff52:	83 ec 08             	sub    esp,0x8
c001ff55:	68 64 12 00 00       	push   0x1264
c001ff5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff5e:	e8 b5 a8 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001ff63:	83 c4 10             	add    esp,0x10
c001ff66:	83 c4 0c             	add    esp,0xc
c001ff69:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c001ff6c <LinkedList<Device>::~LinkedList()>:
c001ff6c:	90                   	nop
c001ff6d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c001ff70 <LinkedList<Device>::isEmpty()>:
c001ff70:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ff74:	8b 00                	mov    eax,DWORD PTR [eax]
c001ff76:	85 c0                	test   eax,eax
c001ff78:	75 0e                	jne    c001ff88 <LinkedList<Device>::isEmpty()+0x18>
c001ff7a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ff7e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ff81:	85 c0                	test   eax,eax
c001ff83:	75 03                	jne    c001ff88 <LinkedList<Device>::isEmpty()+0x18>
c001ff85:	b0 01                	mov    al,0x1
c001ff87:	c3                   	ret    
c001ff88:	b0 00                	mov    al,0x0
c001ff8a:	90                   	nop
c001ff8b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c001ff8c <LinkedList<Device>::getFirstElement()>:
c001ff8c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ff90:	8b 00                	mov    eax,DWORD PTR [eax]
c001ff92:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c001ff94 <LinkedList<Device>::removeFirst()>:
c001ff94:	83 ec 0c             	sub    esp,0xc
c001ff97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff9b:	8b 00                	mov    eax,DWORD PTR [eax]
c001ff9d:	85 c0                	test   eax,eax
c001ff9f:	75 17                	jne    c001ffb8 <LinkedList<Device>::removeFirst()+0x24>
c001ffa1:	83 ec 0c             	sub    esp,0xc
c001ffa4:	68 20 0f 02 c0       	push   0xc0020f20
c001ffa9:	e8 e5 16 ff ff       	call   c0011693 <KePanic(char const*)>
c001ffae:	83 c4 10             	add    esp,0x10
c001ffb1:	e9 92 00 00 00       	jmp    c0020048 <LinkedList<Device>::removeFirst()+0xb4>
c001ffb6:	66 90                	xchg   ax,ax
c001ffb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffbc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ffbf:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001ffc5:	85 c0                	test   eax,eax
c001ffc7:	74 13                	je     c001ffdc <LinkedList<Device>::removeFirst()+0x48>
c001ffc9:	83 ec 0c             	sub    esp,0xc
c001ffcc:	68 6b 0f 02 c0       	push   0xc0020f6b
c001ffd1:	e8 bd 16 ff ff       	call   c0011693 <KePanic(char const*)>
c001ffd6:	83 c4 10             	add    esp,0x10
c001ffd9:	8d 76 00             	lea    esi,[esi+0x0]
c001ffdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffe0:	8b 00                	mov    eax,DWORD PTR [eax]
c001ffe2:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001ffe8:	85 c0                	test   eax,eax
c001ffea:	75 34                	jne    c0020020 <LinkedList<Device>::removeFirst()+0x8c>
c001ffec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fff0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fff6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fffa:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0020001:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020005:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0020008:	83 f8 01             	cmp    eax,0x1
c002000b:	74 27                	je     c0020034 <LinkedList<Device>::removeFirst()+0xa0>
c002000d:	83 ec 0c             	sub    esp,0xc
c0020010:	68 44 0f 02 c0       	push   0xc0020f44
c0020015:	e8 79 16 ff ff       	call   c0011693 <KePanic(char const*)>
c002001a:	83 c4 10             	add    esp,0x10
c002001d:	eb 15                	jmp    c0020034 <LinkedList<Device>::removeFirst()+0xa0>
c002001f:	90                   	nop
c0020020:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020024:	8b 00                	mov    eax,DWORD PTR [eax]
c0020026:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c002002c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020030:	89 10                	mov    DWORD PTR [eax],edx
c0020032:	66 90                	xchg   ax,ax
c0020034:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020038:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002003b:	8d 50 ff             	lea    edx,[eax-0x1]
c002003e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020042:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0020045:	8d 76 00             	lea    esi,[esi+0x0]
c0020048:	83 c4 0c             	add    esp,0xc
c002004b:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c002004c <CPU::~CPU()>:
c002004c:	83 ec 0c             	sub    esp,0xc
c002004f:	ba 8c 23 02 c0       	mov    edx,0xc002238c
c0020054:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020058:	89 10                	mov    DWORD PTR [eax],edx
c002005a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002005e:	83 ec 0c             	sub    esp,0xc
c0020061:	50                   	push   eax
c0020062:	e8 d5 c8 fe ff       	call   c000c93c <Device::~Device()>
c0020067:	83 c4 10             	add    esp,0x10
c002006a:	90                   	nop
c002006b:	83 c4 0c             	add    esp,0xc
c002006e:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0020070 <CPU::~CPU()>:
c0020070:	83 ec 0c             	sub    esp,0xc
c0020073:	83 ec 0c             	sub    esp,0xc
c0020076:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002007a:	e8 cd ff ff ff       	call   c002004c <CPU::~CPU()>
c002007f:	83 c4 10             	add    esp,0x10
c0020082:	83 ec 08             	sub    esp,0x8
c0020085:	68 94 11 00 00       	push   0x1194
c002008a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002008e:	e8 85 a7 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c0020093:	83 c4 10             	add    esp,0x10
c0020096:	83 c4 0c             	add    esp,0xc
c0020099:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c002009c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c002009c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00200a0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00200a3:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c00200a4 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c00200a4:	90                   	nop
c00200a5:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c00200a8 <ThreadControlBlock::ThreadControlBlock()>:
c00200a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00200ac:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00200b3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00200b7:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c00200be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00200c2:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c00200c9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00200cd:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c00200d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00200d8:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c00200df:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00200e3:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c00200e7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00200eb:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c00200ef:	90                   	nop
c00200f0:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c00200f4 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c00200f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00200f8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00200fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020102:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0020109:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002010d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0020114:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020118:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002011e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020122:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0020129:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002012d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0020134:	90                   	nop
c0020135:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c0020136 <PCI::~PCI()>:
c0020136:	83 ec 0c             	sub    esp,0xc
c0020139:	ba 6c 32 02 c0       	mov    edx,0xc002326c
c002013e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020142:	89 10                	mov    DWORD PTR [eax],edx
c0020144:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020148:	83 ec 0c             	sub    esp,0xc
c002014b:	50                   	push   eax
c002014c:	e8 83 c2 fe ff       	call   c000c3d4 <Bus::~Bus()>
c0020151:	83 c4 10             	add    esp,0x10
c0020154:	90                   	nop
c0020155:	83 c4 0c             	add    esp,0xc
c0020158:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c002015a <PCI::~PCI()>:
c002015a:	83 ec 0c             	sub    esp,0xc
c002015d:	83 ec 0c             	sub    esp,0xc
c0020160:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020164:	e8 cd ff ff ff       	call   c0020136 <PCI::~PCI()>
c0020169:	83 c4 10             	add    esp,0x10
c002016c:	83 ec 08             	sub    esp,0x8
c002016f:	68 5c 01 00 00       	push   0x15c
c0020174:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020178:	e8 9b a6 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c002017d:	83 c4 10             	add    esp,0x10
c0020180:	83 c4 0c             	add    esp,0xc
c0020183:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0020184 <IDE::~IDE()>:
c0020184:	83 ec 0c             	sub    esp,0xc
c0020187:	ba 20 33 02 c0       	mov    edx,0xc0023320
c002018c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020190:	89 10                	mov    DWORD PTR [eax],edx
c0020192:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020196:	83 ec 0c             	sub    esp,0xc
c0020199:	50                   	push   eax
c002019a:	e8 15 cc fe ff       	call   c000cdb4 <HardDiskController::~HardDiskController()>
c002019f:	83 c4 10             	add    esp,0x10
c00201a2:	90                   	nop
c00201a3:	83 c4 0c             	add    esp,0xc
c00201a6:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c00201a8 <IDE::~IDE()>:
c00201a8:	83 ec 0c             	sub    esp,0xc
c00201ab:	83 ec 0c             	sub    esp,0xc
c00201ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00201b2:	e8 cd ff ff ff       	call   c0020184 <IDE::~IDE()>
c00201b7:	83 c4 10             	add    esp,0x10
c00201ba:	83 ec 08             	sub    esp,0x8
c00201bd:	68 70 02 00 00       	push   0x270
c00201c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00201c6:	e8 4d a6 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c00201cb:	83 c4 10             	add    esp,0x10
c00201ce:	83 c4 0c             	add    esp,0xc
c00201d1:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c00201d2 <SATABus::~SATABus()>:
c00201d2:	83 ec 0c             	sub    esp,0xc
c00201d5:	ba 70 33 02 c0       	mov    edx,0xc0023370
c00201da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201de:	89 10                	mov    DWORD PTR [eax],edx
c00201e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201e4:	83 ec 0c             	sub    esp,0xc
c00201e7:	50                   	push   eax
c00201e8:	e8 c7 cb fe ff       	call   c000cdb4 <HardDiskController::~HardDiskController()>
c00201ed:	83 c4 10             	add    esp,0x10
c00201f0:	90                   	nop
c00201f1:	83 c4 0c             	add    esp,0xc
c00201f4:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c00201f6 <SATABus::~SATABus()>:
c00201f6:	83 ec 0c             	sub    esp,0xc
c00201f9:	83 ec 0c             	sub    esp,0xc
c00201fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020200:	e8 cd ff ff ff       	call   c00201d2 <SATABus::~SATABus()>
c0020205:	83 c4 10             	add    esp,0x10
c0020208:	83 ec 08             	sub    esp,0x8
c002020b:	68 64 01 00 00       	push   0x164
c0020210:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020214:	e8 ff a5 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c0020219:	83 c4 10             	add    esp,0x10
c002021c:	83 c4 0c             	add    esp,0xc
c002021f:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0020220 <ATA::~ATA()>:
c0020220:	83 ec 0c             	sub    esp,0xc
c0020223:	ba b0 33 02 c0       	mov    edx,0xc00233b0
c0020228:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002022c:	89 10                	mov    DWORD PTR [eax],edx
c002022e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020232:	83 ec 0c             	sub    esp,0xc
c0020235:	50                   	push   eax
c0020236:	e8 5b cc fe ff       	call   c000ce96 <PhysicalDisk::~PhysicalDisk()>
c002023b:	83 c4 10             	add    esp,0x10
c002023e:	90                   	nop
c002023f:	83 c4 0c             	add    esp,0xc
c0020242:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0020244 <ATA::~ATA()>:
c0020244:	83 ec 0c             	sub    esp,0xc
c0020247:	83 ec 0c             	sub    esp,0xc
c002024a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002024e:	e8 cd ff ff ff       	call   c0020220 <ATA::~ATA()>
c0020253:	83 c4 10             	add    esp,0x10
c0020256:	83 ec 08             	sub    esp,0x8
c0020259:	68 7c 01 00 00       	push   0x17c
c002025e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020262:	e8 b1 a5 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c0020267:	83 c4 10             	add    esp,0x10
c002026a:	83 c4 0c             	add    esp,0xc
c002026d:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c002026e <ATAPI::~ATAPI()>:
c002026e:	83 ec 0c             	sub    esp,0xc
c0020271:	ba f8 33 02 c0       	mov    edx,0xc00233f8
c0020276:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002027a:	89 10                	mov    DWORD PTR [eax],edx
c002027c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020280:	83 ec 0c             	sub    esp,0xc
c0020283:	50                   	push   eax
c0020284:	e8 0d cc fe ff       	call   c000ce96 <PhysicalDisk::~PhysicalDisk()>
c0020289:	83 c4 10             	add    esp,0x10
c002028c:	90                   	nop
c002028d:	83 c4 0c             	add    esp,0xc
c0020290:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0020292 <ATAPI::~ATAPI()>:
c0020292:	83 ec 0c             	sub    esp,0xc
c0020295:	83 ec 0c             	sub    esp,0xc
c0020298:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002029c:	e8 cd ff ff ff       	call   c002026e <ATAPI::~ATAPI()>
c00202a1:	83 c4 10             	add    esp,0x10
c00202a4:	83 ec 08             	sub    esp,0x8
c00202a7:	68 84 01 00 00       	push   0x184
c00202ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00202b0:	e8 63 a5 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c00202b5:	83 c4 10             	add    esp,0x10
c00202b8:	83 c4 0c             	add    esp,0xc
c00202bb:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c00202bc <SATA::~SATA()>:
c00202bc:	83 ec 0c             	sub    esp,0xc
c00202bf:	ba ac 34 02 c0       	mov    edx,0xc00234ac
c00202c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00202c8:	89 10                	mov    DWORD PTR [eax],edx
c00202ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00202ce:	83 ec 0c             	sub    esp,0xc
c00202d1:	50                   	push   eax
c00202d2:	e8 bf cb fe ff       	call   c000ce96 <PhysicalDisk::~PhysicalDisk()>
c00202d7:	83 c4 10             	add    esp,0x10
c00202da:	90                   	nop
c00202db:	83 c4 0c             	add    esp,0xc
c00202de:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c00202e0 <SATA::~SATA()>:
c00202e0:	83 ec 0c             	sub    esp,0xc
c00202e3:	83 ec 0c             	sub    esp,0xc
c00202e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00202ea:	e8 cd ff ff ff       	call   c00202bc <SATA::~SATA()>
c00202ef:	83 c4 10             	add    esp,0x10
c00202f2:	83 ec 08             	sub    esp,0x8
c00202f5:	68 7c 01 00 00       	push   0x17c
c00202fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00202fe:	e8 15 a5 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c0020303:	83 c4 10             	add    esp,0x10
c0020306:	83 c4 0c             	add    esp,0xc
c0020309:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c002030a <SATAPI::~SATAPI()>:
c002030a:	83 ec 0c             	sub    esp,0xc
c002030d:	ba d0 35 02 c0       	mov    edx,0xc00235d0
c0020312:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020316:	89 10                	mov    DWORD PTR [eax],edx
c0020318:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002031c:	83 ec 0c             	sub    esp,0xc
c002031f:	50                   	push   eax
c0020320:	e8 71 cb fe ff       	call   c000ce96 <PhysicalDisk::~PhysicalDisk()>
c0020325:	83 c4 10             	add    esp,0x10
c0020328:	90                   	nop
c0020329:	83 c4 0c             	add    esp,0xc
c002032c:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c002032e <SATAPI::~SATAPI()>:
c002032e:	83 ec 0c             	sub    esp,0xc
c0020331:	83 ec 0c             	sub    esp,0xc
c0020334:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020338:	e8 cd ff ff ff       	call   c002030a <SATAPI::~SATAPI()>
c002033d:	83 c4 10             	add    esp,0x10
c0020340:	83 ec 08             	sub    esp,0x8
c0020343:	68 84 01 00 00       	push   0x184
c0020348:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002034c:	e8 c7 a4 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c0020351:	83 c4 10             	add    esp,0x10
c0020354:	83 c4 0c             	add    esp,0xc
c0020357:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0020358 <IOAPIC::~IOAPIC()>:
c0020358:	83 ec 0c             	sub    esp,0xc
c002035b:	ba 10 36 02 c0       	mov    edx,0xc0023610
c0020360:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020364:	89 10                	mov    DWORD PTR [eax],edx
c0020366:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002036a:	83 ec 0c             	sub    esp,0xc
c002036d:	50                   	push   eax
c002036e:	e8 c9 c5 fe ff       	call   c000c93c <Device::~Device()>
c0020373:	83 c4 10             	add    esp,0x10
c0020376:	90                   	nop
c0020377:	83 c4 0c             	add    esp,0xc
c002037a:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c002037c <IOAPIC::~IOAPIC()>:
c002037c:	83 ec 0c             	sub    esp,0xc
c002037f:	83 ec 0c             	sub    esp,0xc
c0020382:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020386:	e8 cd ff ff ff       	call   c0020358 <IOAPIC::~IOAPIC()>
c002038b:	83 c4 10             	add    esp,0x10
c002038e:	83 ec 08             	sub    esp,0x8
c0020391:	68 68 01 00 00       	push   0x168
c0020396:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002039a:	e8 79 a4 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c002039f:	83 c4 10             	add    esp,0x10
c00203a2:	83 c4 0c             	add    esp,0xc
c00203a5:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c00203a8 <APICTimer::~APICTimer()>:
c00203a8:	83 ec 0c             	sub    esp,0xc
c00203ab:	ba 58 36 02 c0       	mov    edx,0xc0023658
c00203b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00203b4:	89 10                	mov    DWORD PTR [eax],edx
c00203b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00203ba:	83 ec 0c             	sub    esp,0xc
c00203bd:	50                   	push   eax
c00203be:	e8 45 e0 fe ff       	call   c000e408 <Timer::~Timer()>
c00203c3:	83 c4 10             	add    esp,0x10
c00203c6:	90                   	nop
c00203c7:	83 c4 0c             	add    esp,0xc
c00203ca:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c00203cc <APICTimer::~APICTimer()>:
c00203cc:	83 ec 0c             	sub    esp,0xc
c00203cf:	83 ec 0c             	sub    esp,0xc
c00203d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00203d6:	e8 cd ff ff ff       	call   c00203a8 <APICTimer::~APICTimer()>
c00203db:	83 c4 10             	add    esp,0x10
c00203de:	83 ec 08             	sub    esp,0x8
c00203e1:	68 60 01 00 00       	push   0x160
c00203e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00203ea:	e8 29 a4 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c00203ef:	83 c4 10             	add    esp,0x10
c00203f2:	83 c4 0c             	add    esp,0xc
c00203f5:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c00203f8 <PIT::~PIT()>:
c00203f8:	83 ec 0c             	sub    esp,0xc
c00203fb:	ba a8 36 02 c0       	mov    edx,0xc00236a8
c0020400:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020404:	89 10                	mov    DWORD PTR [eax],edx
c0020406:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002040a:	83 ec 0c             	sub    esp,0xc
c002040d:	50                   	push   eax
c002040e:	e8 f5 df fe ff       	call   c000e408 <Timer::~Timer()>
c0020413:	83 c4 10             	add    esp,0x10
c0020416:	90                   	nop
c0020417:	83 c4 0c             	add    esp,0xc
c002041a:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c002041c <PIT::~PIT()>:
c002041c:	83 ec 0c             	sub    esp,0xc
c002041f:	83 ec 0c             	sub    esp,0xc
c0020422:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020426:	e8 cd ff ff ff       	call   c00203f8 <PIT::~PIT()>
c002042b:	83 c4 10             	add    esp,0x10
c002042e:	83 ec 08             	sub    esp,0x8
c0020431:	68 5c 01 00 00       	push   0x15c
c0020436:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002043a:	e8 d9 a3 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c002043f:	83 c4 10             	add    esp,0x10
c0020442:	83 c4 0c             	add    esp,0xc
c0020445:	c3                   	ret    

Disassembly of section userkernel:

c0025000 <KiDefaultSignalHandlerAbort(int)>:
c0025000:	57                   	push   edi
c0025001:	b9 07 00 00 00       	mov    ecx,0x7
c0025006:	56                   	push   esi
c0025007:	be bd 24 02 c0       	mov    esi,0xc00224bd
c002500c:	83 ec 24             	sub    esp,0x24
c002500f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025013:	fc                   	cld    
c0025014:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0025016:	8d 44 24 04          	lea    eax,[esp+0x4]
c002501a:	50                   	push   eax
c002501b:	6a 00                	push   0x0
c002501d:	6a 38                	push   0x38
c002501f:	6a 01                	push   0x1
c0025021:	e8 2c 00 00 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0025026:	83 c4 34             	add    esp,0x34
c0025029:	5e                   	pop    esi
c002502a:	5f                   	pop    edi
c002502b:	c3                   	ret    

c002502c <KiDefaultSignalHandlerTerminate(int)>:
c002502c:	57                   	push   edi
c002502d:	b9 08 00 00 00       	mov    ecx,0x8
c0025032:	56                   	push   esi
c0025033:	be d9 24 02 c0       	mov    esi,0xc00224d9
c0025038:	83 ec 24             	sub    esp,0x24
c002503b:	89 e7                	mov    edi,esp
c002503d:	fc                   	cld    
c002503e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0025040:	54                   	push   esp
c0025041:	6a 00                	push   0x0
c0025043:	6a 37                	push   0x37
c0025045:	6a 01                	push   0x1
c0025047:	e8 06 00 00 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c002504c:	83 c4 34             	add    esp,0x34
c002504f:	5e                   	pop    esi
c0025050:	5f                   	pop    edi
c0025051:	c3                   	ret    

c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c0025052:	53                   	push   ebx
c0025053:	83 ec 10             	sub    esp,0x10
c0025056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002505a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c002505e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0025062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0025066:	cd 60                	int    0x60
c0025068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002506c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0025070:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0025074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0025078:	83 c4 10             	add    esp,0x10
c002507b:	5b                   	pop    ebx
c002507c:	c3                   	ret    

Disassembly of section align_previous:

c0026000 <DO_NOT_DELETE()>:
c0026000:	c3                   	ret    
