
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 20 7b 00 00       	call   c0007b40 <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 a4 43 02 c0       	mov    eax,0xc00243a4
c0000025:	3d a4 43 02 c0       	cmp    eax,0xc00243a4
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 a4 43 02 c0       	push   0xc00243a4
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 a4 43 02 c0       	mov    eax,0xc00243a4
c0000051:	2d a4 43 02 c0       	sub    eax,0xc00243a4
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 a4 43 02 c0       	push   0xc00243a4
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d c0 60 02 c0 00 	cmp    BYTE PTR ds:0xc00260c0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb ec 04 02 c0       	mov    ebx,0xc00204ec
c0000097:	81 eb e8 04 02 c0    	sub    ebx,0xc00204e8
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be e8 04 02 c0       	mov    esi,0xc00204e8
c00000a6:	a1 c4 60 02 c0       	mov    eax,ds:0xc00260c4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 c4 60 02 c0       	mov    ds:0xc00260c4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 c4 60 02 c0       	mov    eax,ds:0xc00260c4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 a4 43 02 c0       	push   0xc00243a4
c00000d8:	e8 23 ff ff 3f       	call   0 <SIG_STATE_STRUCT>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 c0 60 02 c0 01 	mov    BYTE PTR ds:0xc00260c0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 c8 60 02 c0       	push   0xc00260c8
c0000108:	68 a4 43 02 c0       	push   0xc00243a4
c000010d:	e8 ee fe ff 3f       	call   0 <SIG_STATE_STRUCT>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000297:	0f 20 d9             	mov    ecx,cr3
c000029a:	39 c8                	cmp    eax,ecx
c000029c:	74 03                	je     c00002a1 <commonThreadSwitch.doneVAS>
c000029e:	0f 22 d8             	mov    cr3,eax

c00002a1 <commonThreadSwitch.doneVAS>:
c00002a1:	85 d2                	test   edx,edx
c00002a3:	75 11                	jne    c00002b6 <commonThreadSwitch.firstTime>
c00002a5:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a8:	e8 33 57 01 00       	call   c00159e0 <changeTSS>
c00002ad:	5d                   	pop    ebp
c00002ae:	5f                   	pop    edi
c00002af:	5e                   	pop    esi
c00002b0:	5a                   	pop    edx
c00002b1:	59                   	pop    ecx
c00002b2:	5b                   	pop    ebx
c00002b3:	58                   	pop    eax
c00002b4:	9d                   	popf   
c00002b5:	c3                   	ret    

c00002b6 <commonThreadSwitch.firstTime>:
c00002b6:	fa                   	cli    
c00002b7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002ba:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002bf:	60                   	pusha  
c00002c0:	e8 38 a4 00 00       	call   c000a6fd <mapVASFirstTime>
c00002c5:	61                   	popa   
c00002c6:	89 c4                	mov    esp,eax
c00002c8:	56                   	push   esi
c00002c9:	52                   	push   edx
c00002ca:	e8 11 57 01 00       	call   c00159e0 <changeTSS>
c00002cf:	5a                   	pop    edx
c00002d0:	5e                   	pop    esi
c00002d1:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	59                   	pop    ecx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	81 c4 04 00 00 00    	add    esp,0x4
c00002e5:	6a 02                	push   0x2
c00002e7:	9d                   	popf   
c00002e8:	52                   	push   edx
c00002e9:	e8 1e 5c 01 00       	call   c0015f0c <taskStartupFunction>
c00002ee:	5a                   	pop    edx
c00002ef:	50                   	push   eax
c00002f0:	ff d2                	call   edx
c00002f2:	e8 dd 62 01 00       	call   c00165d4 <taskReturned>
c00002f7:	e9 fb ff ff ff       	jmp    c00002f7 <commonThreadSwitch.firstTime+0x41>

c00002fc <asmQuickAcquireLock>:
c00002fc:	55                   	push   ebp
c00002fd:	89 e5                	mov    ebp,esp
c00002ff:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000302 <asmQuickAcquireLock.retry>:
c0000302:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000307:	72 02                	jb     c000030b <asmQuickAcquireLock.spin_with_pause>
c0000309:	fa                   	cli    
c000030a:	c3                   	ret    

c000030b <asmQuickAcquireLock.spin_with_pause>:
c000030b:	f3 90                	pause  
c000030d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000313:	75 f6                	jne    c000030b <asmQuickAcquireLock.spin_with_pause>
c0000315:	e9 e8 ff ff ff       	jmp    c0000302 <asmQuickAcquireLock.retry>

c000031a <asmQuickReleaseLock>:
c000031a:	55                   	push   ebp
c000031b:	89 e5                	mov    ebp,esp
c000031d:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000324:	5d                   	pop    ebp
c0000325:	c3                   	ret    

c0000326 <asmAcquireLock>:
c0000326:	55                   	push   ebp
c0000327:	89 e5                	mov    ebp,esp
c0000329:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032c <asmAcquireLock.retry>:
c000032c:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000331:	72 05                	jb     c0000338 <asmAcquireLock.spin_with_pause>
c0000333:	9c                   	pushf  
c0000334:	58                   	pop    eax
c0000335:	fa                   	cli    
c0000336:	5d                   	pop    ebp
c0000337:	c3                   	ret    

c0000338 <asmAcquireLock.spin_with_pause>:
c0000338:	f3 90                	pause  
c000033a:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000340:	75 f6                	jne    c0000338 <asmAcquireLock.spin_with_pause>
c0000342:	e9 e5 ff ff ff       	jmp    c000032c <asmAcquireLock.retry>

c0000347 <asmReleaseLock>:
c0000347:	55                   	push   ebp
c0000348:	89 e5                	mov    ebp,esp
c000034a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000034d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000350:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000356:	52                   	push   edx
c0000357:	9d                   	popf   
c0000358:	5d                   	pop    ebp
c0000359:	c3                   	ret    

c000035a <loadGDT>:
c000035a:	0f 01 15 c0 6e 02 c0 	lgdtd  ds:0xc0026ec0
c0000361:	66 b8 10 00          	mov    ax,0x10
c0000365:	66 8e d8             	mov    ds,ax
c0000368:	66 8e c0             	mov    es,ax
c000036b:	66 8e e0             	mov    fs,ax
c000036e:	66 8e e8             	mov    gs,ax
c0000371:	66 8e d0             	mov    ss,ax
c0000374:	e9 00 00 00 00       	jmp    c0000379 <flush2>

c0000379 <flush2>:
c0000379:	c3                   	ret    

c000037a <memcpy>:
c000037a:	e9 33 13 01 00       	jmp    c00116b2 <__not_memcpy>
c000037f:	90                   	nop

c0000380 <memcmp>:
c0000380:	56                   	push   esi
c0000381:	53                   	push   ebx
c0000382:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000386:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000038a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000038e:	85 f6                	test   esi,esi
c0000390:	74 21                	je     c00003b3 <memcmp+0x33>
c0000392:	8a 08                	mov    cl,BYTE PTR [eax]
c0000394:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000397:	38 d9                	cmp    cl,bl
c0000399:	75 25                	jne    c00003c0 <memcmp+0x40>
c000039b:	01 c6                	add    esi,eax
c000039d:	eb 0a                	jmp    c00003a9 <memcmp+0x29>
c000039f:	90                   	nop
c00003a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00003a5:	38 cb                	cmp    bl,cl
c00003a7:	75 17                	jne    c00003c0 <memcmp+0x40>
c00003a9:	83 c0 01             	add    eax,0x1
c00003ac:	83 c2 01             	add    edx,0x1
c00003af:	39 f0                	cmp    eax,esi
c00003b1:	75 ed                	jne    c00003a0 <memcmp+0x20>
c00003b3:	31 c0                	xor    eax,eax
c00003b5:	5b                   	pop    ebx
c00003b6:	5e                   	pop    esi
c00003b7:	c3                   	ret    
c00003b8:	90                   	nop
c00003b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00003c0:	0f b6 c1             	movzx  eax,cl
c00003c3:	29 d8                	sub    eax,ebx
c00003c5:	5b                   	pop    ebx
c00003c6:	5e                   	pop    esi
c00003c7:	c3                   	ret    
c00003c8:	90                   	nop
c00003c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]

c00003d0 <memmove>:
c00003d0:	55                   	push   ebp
c00003d1:	57                   	push   edi
c00003d2:	56                   	push   esi
c00003d3:	53                   	push   ebx
c00003d4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003d8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003e0:	39 dd                	cmp    ebp,ebx
c00003e2:	0f 83 a8 00 00 00    	jae    c0000490 <memmove+0xc0>
c00003e8:	85 d2                	test   edx,edx
c00003ea:	0f 84 8c 00 00 00    	je     c000047c <memmove+0xac>
c00003f0:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00003f3:	8d 75 04             	lea    esi,[ebp+0x4]
c00003f6:	39 cd                	cmp    ebp,ecx
c00003f8:	0f 93 c1             	setae  cl
c00003fb:	39 f3                	cmp    ebx,esi
c00003fd:	0f 93 c0             	setae  al
c0000400:	89 c6                	mov    esi,eax
c0000402:	31 c0                	xor    eax,eax
c0000404:	09 f1                	or     ecx,esi
c0000406:	8d 72 ff             	lea    esi,[edx-0x1]
c0000409:	83 fe 0c             	cmp    esi,0xc
c000040c:	0f 97 c0             	seta   al
c000040f:	89 c6                	mov    esi,eax
c0000411:	85 ce                	test   esi,ecx
c0000413:	0f 84 a7 00 00 00    	je     c00004c0 <memmove+0xf0>
c0000419:	89 e9                	mov    ecx,ebp
c000041b:	09 d9                	or     ecx,ebx
c000041d:	80 e1 03             	and    cl,0x3
c0000420:	0f 85 9a 00 00 00    	jne    c00004c0 <memmove+0xf0>
c0000426:	89 d7                	mov    edi,edx
c0000428:	89 d9                	mov    ecx,ebx
c000042a:	83 e7 fc             	and    edi,0xfffffffc
c000042d:	89 ee                	mov    esi,ebp
c000042f:	01 df                	add    edi,ebx
c0000431:	eb 0d                	jmp    c0000440 <memmove+0x70>
c0000433:	90                   	nop
c0000434:	90                   	nop
c0000435:	90                   	nop
c0000436:	90                   	nop
c0000437:	90                   	nop
c0000438:	90                   	nop
c0000439:	90                   	nop
c000043a:	90                   	nop
c000043b:	90                   	nop
c000043c:	90                   	nop
c000043d:	90                   	nop
c000043e:	90                   	nop
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c6 04             	add    esi,0x4
c0000445:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000448:	83 c1 04             	add    ecx,0x4
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x70>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0xac>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0xac>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0xac>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0xac>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0xac>
c0000496:	83 eb 01             	sub    ebx,0x1
c0000499:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000049c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	83 ea 01             	sub    edx,0x1
c00004a9:	75 f5                	jne    c00004a0 <memmove+0xd0>
c00004ab:	5b                   	pop    ebx
c00004ac:	89 e8                	mov    eax,ebp
c00004ae:	5e                   	pop    esi
c00004af:	5f                   	pop    edi
c00004b0:	5d                   	pop    ebp
c00004b1:	c3                   	ret    
c00004b2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00004b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00004c0:	01 ea                	add    edx,ebp
c00004c2:	89 e9                	mov    ecx,ebp
c00004c4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ca:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004d0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004d2:	83 c1 01             	add    ecx,0x1
c00004d5:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004d8:	83 c3 01             	add    ebx,0x1
c00004db:	39 d1                	cmp    ecx,edx
c00004dd:	75 f1                	jne    c00004d0 <memmove+0x100>
c00004df:	eb 9b                	jmp    c000047c <memmove+0xac>
c00004e1:	eb 0d                	jmp    c00004f0 <memset>
c00004e3:	90                   	nop
c00004e4:	90                   	nop
c00004e5:	90                   	nop
c00004e6:	90                   	nop
c00004e7:	90                   	nop
c00004e8:	90                   	nop
c00004e9:	90                   	nop
c00004ea:	90                   	nop
c00004eb:	90                   	nop
c00004ec:	90                   	nop
c00004ed:	90                   	nop
c00004ee:	90                   	nop
c00004ef:	90                   	nop

c00004f0 <memset>:
c00004f0:	57                   	push   edi
c00004f1:	56                   	push   esi
c00004f2:	53                   	push   ebx
c00004f3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00004f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00004fb:	85 d2                	test   edx,edx
c00004fd:	74 1d                	je     c000051c <memset+0x2c>
c00004ff:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0000504:	89 f7                	mov    edi,esi
c0000506:	83 fa 04             	cmp    edx,0x4
c0000509:	73 25                	jae    c0000530 <memset+0x40>
c000050b:	83 e2 03             	and    edx,0x3
c000050e:	74 0c                	je     c000051c <memset+0x2c>
c0000510:	31 c0                	xor    eax,eax
c0000512:	88 1c 07             	mov    BYTE PTR [edi+eax*1],bl
c0000515:	83 c0 01             	add    eax,0x1
c0000518:	39 d0                	cmp    eax,edx
c000051a:	72 f6                	jb     c0000512 <memset+0x22>
c000051c:	89 f0                	mov    eax,esi
c000051e:	5b                   	pop    ebx
c000051f:	5e                   	pop    esi
c0000520:	5f                   	pop    edi
c0000521:	c3                   	ret    
c0000522:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000529:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000530:	0f b6 c3             	movzx  eax,bl
c0000533:	88 c4                	mov    ah,al
c0000535:	89 c1                	mov    ecx,eax
c0000537:	c1 e1 10             	shl    ecx,0x10
c000053a:	09 c8                	or     eax,ecx
c000053c:	f7 c6 01 00 00 00    	test   esi,0x1
c0000542:	75 12                	jne    c0000556 <memset+0x66>
c0000544:	f7 c7 02 00 00 00    	test   edi,0x2
c000054a:	75 14                	jne    c0000560 <memset+0x70>
c000054c:	89 d1                	mov    ecx,edx
c000054e:	c1 e9 02             	shr    ecx,0x2
c0000551:	fc                   	cld    
c0000552:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000554:	eb b5                	jmp    c000050b <memset+0x1b>
c0000556:	88 06                	mov    BYTE PTR [esi],al
c0000558:	8d 7e 01             	lea    edi,[esi+0x1]
c000055b:	83 ea 01             	sub    edx,0x1
c000055e:	eb e4                	jmp    c0000544 <memset+0x54>
c0000560:	66 89 07             	mov    WORD PTR [edi],ax
c0000563:	83 ea 02             	sub    edx,0x2
c0000566:	83 c7 02             	add    edi,0x2
c0000569:	eb e1                	jmp    c000054c <memset+0x5c>
c000056b:	90                   	nop
c000056c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]

c0000570 <strlen>:
c0000570:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000574:	31 c0                	xor    eax,eax
c0000576:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000579:	74 15                	je     c0000590 <strlen+0x20>
c000057b:	90                   	nop
c000057c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000580:	83 c0 01             	add    eax,0x1
c0000583:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000587:	75 f7                	jne    c0000580 <strlen+0x10>
c0000589:	c3                   	ret    
c000058a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000590:	c3                   	ret    
c0000591:	eb 0d                	jmp    c00005a0 <strpbrk>
c0000593:	90                   	nop
c0000594:	90                   	nop
c0000595:	90                   	nop
c0000596:	90                   	nop
c0000597:	90                   	nop
c0000598:	90                   	nop
c0000599:	90                   	nop
c000059a:	90                   	nop
c000059b:	90                   	nop
c000059c:	90                   	nop
c000059d:	90                   	nop
c000059e:	90                   	nop
c000059f:	90                   	nop

c00005a0 <strpbrk>:
c00005a0:	57                   	push   edi
c00005a1:	56                   	push   esi
c00005a2:	53                   	push   ebx
c00005a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00005a7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00005ab:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005ae:	85 db                	test   ebx,ebx
c00005b0:	74 36                	je     c00005e8 <strpbrk+0x48>
c00005b2:	0f be 37             	movsx  esi,BYTE PTR [edi]
c00005b5:	85 f6                	test   esi,esi
c00005b7:	74 25                	je     c00005de <strpbrk+0x3e>
c00005b9:	39 de                	cmp    esi,ebx
c00005bb:	74 2d                	je     c00005ea <strpbrk+0x4a>
c00005bd:	89 fa                	mov    edx,edi
c00005bf:	eb 13                	jmp    c00005d4 <strpbrk+0x34>
c00005c1:	eb 0d                	jmp    c00005d0 <strpbrk+0x30>
c00005c3:	90                   	nop
c00005c4:	90                   	nop
c00005c5:	90                   	nop
c00005c6:	90                   	nop
c00005c7:	90                   	nop
c00005c8:	90                   	nop
c00005c9:	90                   	nop
c00005ca:	90                   	nop
c00005cb:	90                   	nop
c00005cc:	90                   	nop
c00005cd:	90                   	nop
c00005ce:	90                   	nop
c00005cf:	90                   	nop
c00005d0:	39 d9                	cmp    ecx,ebx
c00005d2:	74 16                	je     c00005ea <strpbrk+0x4a>
c00005d4:	83 c2 01             	add    edx,0x1
c00005d7:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c00005da:	85 c9                	test   ecx,ecx
c00005dc:	75 f2                	jne    c00005d0 <strpbrk+0x30>
c00005de:	83 c0 01             	add    eax,0x1
c00005e1:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005e4:	85 db                	test   ebx,ebx
c00005e6:	75 cd                	jne    c00005b5 <strpbrk+0x15>
c00005e8:	31 c0                	xor    eax,eax
c00005ea:	5b                   	pop    ebx
c00005eb:	5e                   	pop    esi
c00005ec:	5f                   	pop    edi
c00005ed:	c3                   	ret    
c00005ee:	66 90                	xchg   ax,ax

c00005f0 <strtok>:
c00005f0:	56                   	push   esi
c00005f1:	53                   	push   ebx
c00005f2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00005f6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00005fa:	85 db                	test   ebx,ebx
c00005fc:	75 09                	jne    c0000607 <strtok+0x17>
c00005fe:	eb 30                	jmp    c0000630 <strtok+0x40>
c0000600:	83 c3 01             	add    ebx,0x1
c0000603:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000607:	56                   	push   esi
c0000608:	53                   	push   ebx
c0000609:	e8 92 ff ff ff       	call   c00005a0 <strpbrk>
c000060e:	5a                   	pop    edx
c000060f:	a3 e0 60 02 c0       	mov    ds:0xc00260e0,eax
c0000614:	59                   	pop    ecx
c0000615:	39 d8                	cmp    eax,ebx
c0000617:	74 e7                	je     c0000600 <strtok+0x10>
c0000619:	85 c0                	test   eax,eax
c000061b:	74 1d                	je     c000063a <strtok+0x4a>
c000061d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000620:	8d 50 01             	lea    edx,[eax+0x1]
c0000623:	89 d8                	mov    eax,ebx
c0000625:	89 15 e0 60 02 c0    	mov    DWORD PTR ds:0xc00260e0,edx
c000062b:	5b                   	pop    ebx
c000062c:	5e                   	pop    esi
c000062d:	c3                   	ret    
c000062e:	66 90                	xchg   ax,ax
c0000630:	8b 1d e0 60 02 c0    	mov    ebx,DWORD PTR ds:0xc00260e0
c0000636:	85 db                	test   ebx,ebx
c0000638:	75 cd                	jne    c0000607 <strtok+0x17>
c000063a:	31 c0                	xor    eax,eax
c000063c:	5b                   	pop    ebx
c000063d:	5e                   	pop    esi
c000063e:	c3                   	ret    
c000063f:	90                   	nop

c0000640 <strcpy>:
c0000640:	53                   	push   ebx
c0000641:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000645:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000649:	89 c3                	mov    ebx,eax
c000064b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000064d:	84 d2                	test   dl,dl
c000064f:	74 1d                	je     c000066e <strcpy+0x2e>
c0000651:	eb 0d                	jmp    c0000660 <strcpy+0x20>
c0000653:	90                   	nop
c0000654:	90                   	nop
c0000655:	90                   	nop
c0000656:	90                   	nop
c0000657:	90                   	nop
c0000658:	90                   	nop
c0000659:	90                   	nop
c000065a:	90                   	nop
c000065b:	90                   	nop
c000065c:	90                   	nop
c000065d:	90                   	nop
c000065e:	90                   	nop
c000065f:	90                   	nop
c0000660:	88 13                	mov    BYTE PTR [ebx],dl
c0000662:	83 c1 01             	add    ecx,0x1
c0000665:	83 c3 01             	add    ebx,0x1
c0000668:	8a 11                	mov    dl,BYTE PTR [ecx]
c000066a:	84 d2                	test   dl,dl
c000066c:	75 f2                	jne    c0000660 <strcpy+0x20>
c000066e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000671:	5b                   	pop    ebx
c0000672:	c3                   	ret    
c0000673:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000679:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000680 <strncpy>:
c0000680:	57                   	push   edi
c0000681:	56                   	push   esi
c0000682:	53                   	push   ebx
c0000683:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000687:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000068b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000068f:	85 f6                	test   esi,esi
c0000691:	74 44                	je     c00006d7 <strncpy+0x57>
c0000693:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000695:	8d 46 ff             	lea    eax,[esi-0x1]
c0000698:	8d 7a 01             	lea    edi,[edx+0x1]
c000069b:	88 0a                	mov    BYTE PTR [edx],cl
c000069d:	84 c9                	test   cl,cl
c000069f:	74 3f                	je     c00006e0 <strncpy+0x60>
c00006a1:	85 c0                	test   eax,eax
c00006a3:	74 32                	je     c00006d7 <strncpy+0x57>
c00006a5:	8d 4b 02             	lea    ecx,[ebx+0x2]
c00006a8:	8d 46 fe             	lea    eax,[esi-0x2]
c00006ab:	8a 5b 01             	mov    bl,BYTE PTR [ebx+0x1]
c00006ae:	8d 7a 02             	lea    edi,[edx+0x2]
c00006b1:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c00006b4:	84 db                	test   bl,bl
c00006b6:	75 1b                	jne    c00006d3 <strncpy+0x53>
c00006b8:	eb 26                	jmp    c00006e0 <strncpy+0x60>
c00006ba:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00006c0:	83 c1 01             	add    ecx,0x1
c00006c3:	83 c7 01             	add    edi,0x1
c00006c6:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00006c9:	83 e8 01             	sub    eax,0x1
c00006cc:	88 5f ff             	mov    BYTE PTR [edi-0x1],bl
c00006cf:	84 db                	test   bl,bl
c00006d1:	74 0d                	je     c00006e0 <strncpy+0x60>
c00006d3:	85 c0                	test   eax,eax
c00006d5:	75 e9                	jne    c00006c0 <strncpy+0x40>
c00006d7:	5b                   	pop    ebx
c00006d8:	89 d0                	mov    eax,edx
c00006da:	5e                   	pop    esi
c00006db:	5f                   	pop    edi
c00006dc:	c3                   	ret    
c00006dd:	8d 76 00             	lea    esi,[esi+0x0]
c00006e0:	85 c0                	test   eax,eax
c00006e2:	74 f3                	je     c00006d7 <strncpy+0x57>
c00006e4:	89 c3                	mov    ebx,eax
c00006e6:	83 f8 04             	cmp    eax,0x4
c00006e9:	73 25                	jae    c0000710 <strncpy+0x90>
c00006eb:	f6 c3 02             	test   bl,0x2
c00006ee:	74 08                	je     c00006f8 <strncpy+0x78>
c00006f0:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c00006f5:	83 c7 02             	add    edi,0x2
c00006f8:	80 e3 01             	and    bl,0x1
c00006fb:	74 da                	je     c00006d7 <strncpy+0x57>
c00006fd:	c6 07 00             	mov    BYTE PTR [edi],0x0
c0000700:	89 d0                	mov    eax,edx
c0000702:	5b                   	pop    ebx
c0000703:	5e                   	pop    esi
c0000704:	5f                   	pop    edi
c0000705:	c3                   	ret    
c0000706:	8d 76 00             	lea    esi,[esi+0x0]
c0000709:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000710:	f7 c7 01 00 00 00    	test   edi,0x1
c0000716:	75 14                	jne    c000072c <strncpy+0xac>
c0000718:	f7 c7 02 00 00 00    	test   edi,0x2
c000071e:	75 17                	jne    c0000737 <strncpy+0xb7>
c0000720:	89 d9                	mov    ecx,ebx
c0000722:	c1 e9 02             	shr    ecx,0x2
c0000725:	fc                   	cld    
c0000726:	31 c0                	xor    eax,eax
c0000728:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c000072a:	eb bf                	jmp    c00006eb <strncpy+0x6b>
c000072c:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000072f:	83 eb 01             	sub    ebx,0x1
c0000732:	83 c7 01             	add    edi,0x1
c0000735:	eb e1                	jmp    c0000718 <strncpy+0x98>
c0000737:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c000073c:	83 eb 02             	sub    ebx,0x2
c000073f:	83 c7 02             	add    edi,0x2
c0000742:	eb dc                	jmp    c0000720 <strncpy+0xa0>
c0000744:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000074a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000750 <strcmp>:
c0000750:	57                   	push   edi
c0000751:	56                   	push   esi
c0000752:	53                   	push   ebx
c0000753:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0000757:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000075b:	8a 17                	mov    dl,BYTE PTR [edi]
c000075d:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0000760:	38 c2                	cmp    dl,al
c0000762:	75 32                	jne    c0000796 <strcmp+0x46>
c0000764:	85 c0                	test   eax,eax
c0000766:	74 28                	je     c0000790 <strcmp+0x40>
c0000768:	b8 01 00 00 00       	mov    eax,0x1
c000076d:	eb 08                	jmp    c0000777 <strcmp+0x27>
c000076f:	90                   	nop
c0000770:	83 c0 01             	add    eax,0x1
c0000773:	85 db                	test   ebx,ebx
c0000775:	74 19                	je     c0000790 <strcmp+0x40>
c0000777:	0f be 1c 07          	movsx  ebx,BYTE PTR [edi+eax*1]
c000077b:	8a 0c 06             	mov    cl,BYTE PTR [esi+eax*1]
c000077e:	89 da                	mov    edx,ebx
c0000780:	38 d9                	cmp    cl,bl
c0000782:	74 ec                	je     c0000770 <strcmp+0x20>
c0000784:	5b                   	pop    ebx
c0000785:	0f b6 c2             	movzx  eax,dl
c0000788:	0f b6 c9             	movzx  ecx,cl
c000078b:	5e                   	pop    esi
c000078c:	29 c8                	sub    eax,ecx
c000078e:	5f                   	pop    edi
c000078f:	c3                   	ret    
c0000790:	5b                   	pop    ebx
c0000791:	31 c0                	xor    eax,eax
c0000793:	5e                   	pop    esi
c0000794:	5f                   	pop    edi
c0000795:	c3                   	ret    
c0000796:	89 c1                	mov    ecx,eax
c0000798:	eb ea                	jmp    c0000784 <strcmp+0x34>
c000079a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00007a0 <strchr>:
c00007a0:	53                   	push   ebx
c00007a1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00007a5:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00007a8:	85 db                	test   ebx,ebx
c00007aa:	74 22                	je     c00007ce <strchr+0x2e>
c00007ac:	0f be 54 24 0c       	movsx  edx,BYTE PTR [esp+0xc]
c00007b1:	39 d3                	cmp    ebx,edx
c00007b3:	74 1b                	je     c00007d0 <strchr+0x30>
c00007b5:	89 d1                	mov    ecx,edx
c00007b7:	eb 0b                	jmp    c00007c4 <strchr+0x24>
c00007b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007c0:	39 ca                	cmp    edx,ecx
c00007c2:	74 0c                	je     c00007d0 <strchr+0x30>
c00007c4:	83 c0 01             	add    eax,0x1
c00007c7:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00007ca:	85 d2                	test   edx,edx
c00007cc:	75 f2                	jne    c00007c0 <strchr+0x20>
c00007ce:	31 c0                	xor    eax,eax
c00007d0:	5b                   	pop    ebx
c00007d1:	c3                   	ret    
c00007d2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007d9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00007e0 <strncmp>:
c00007e0:	55                   	push   ebp
c00007e1:	57                   	push   edi
c00007e2:	56                   	push   esi
c00007e3:	53                   	push   ebx
c00007e4:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00007e8:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00007ec:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00007f0:	85 f6                	test   esi,esi
c00007f2:	74 35                	je     c0000829 <strncmp+0x49>
c00007f4:	8a 17                	mov    dl,BYTE PTR [edi]
c00007f6:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c00007f9:	89 e9                	mov    ecx,ebp
c00007fb:	38 ca                	cmp    dl,cl
c00007fd:	75 31                	jne    c0000830 <strncmp+0x50>
c00007ff:	8d 47 01             	lea    eax,[edi+0x1]
c0000802:	85 ed                	test   ebp,ebp
c0000804:	74 23                	je     c0000829 <strncmp+0x49>
c0000806:	01 f7                	add    edi,esi
c0000808:	eb 18                	jmp    c0000822 <strncmp+0x42>
c000080a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000810:	0f be 30             	movsx  esi,BYTE PTR [eax]
c0000813:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000815:	89 f2                	mov    edx,esi
c0000817:	38 d1                	cmp    cl,dl
c0000819:	75 15                	jne    c0000830 <strncmp+0x50>
c000081b:	83 c0 01             	add    eax,0x1
c000081e:	85 f6                	test   esi,esi
c0000820:	74 07                	je     c0000829 <strncmp+0x49>
c0000822:	83 c3 01             	add    ebx,0x1
c0000825:	39 c7                	cmp    edi,eax
c0000827:	75 e7                	jne    c0000810 <strncmp+0x30>
c0000829:	5b                   	pop    ebx
c000082a:	31 c0                	xor    eax,eax
c000082c:	5e                   	pop    esi
c000082d:	5f                   	pop    edi
c000082e:	5d                   	pop    ebp
c000082f:	c3                   	ret    
c0000830:	5b                   	pop    ebx
c0000831:	0f b6 c2             	movzx  eax,dl
c0000834:	5e                   	pop    esi
c0000835:	0f b6 c9             	movzx  ecx,cl
c0000838:	5f                   	pop    edi
c0000839:	29 c8                	sub    eax,ecx
c000083b:	5d                   	pop    ebp
c000083c:	c3                   	ret    
c000083d:	8d 76 00             	lea    esi,[esi+0x0]

c0000840 <strcat>:
c0000840:	56                   	push   esi
c0000841:	53                   	push   ebx
c0000842:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000846:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000084a:	89 c3                	mov    ebx,eax
c000084c:	eb 04                	jmp    c0000852 <strcat+0x12>
c000084e:	66 90                	xchg   ax,ax
c0000850:	89 d3                	mov    ebx,edx
c0000852:	8d 53 01             	lea    edx,[ebx+0x1]
c0000855:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000859:	75 f5                	jne    c0000850 <strcat+0x10>
c000085b:	31 d2                	xor    edx,edx
c000085d:	8d 76 00             	lea    esi,[esi+0x0]
c0000860:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000863:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000866:	83 c2 01             	add    edx,0x1
c0000869:	84 c9                	test   cl,cl
c000086b:	75 f3                	jne    c0000860 <strcat+0x20>
c000086d:	5b                   	pop    ebx
c000086e:	5e                   	pop    esi
c000086f:	c3                   	ret    

c0000870 <strncat>:
c0000870:	56                   	push   esi
c0000871:	53                   	push   ebx
c0000872:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000876:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000087a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000087e:	85 f6                	test   esi,esi
c0000880:	74 32                	je     c00008b4 <strncat+0x44>
c0000882:	89 c2                	mov    edx,eax
c0000884:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000088a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000890:	83 c2 01             	add    edx,0x1
c0000893:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000897:	75 f7                	jne    c0000890 <strncat+0x20>
c0000899:	01 ce                	add    esi,ecx
c000089b:	eb 0a                	jmp    c00008a7 <strncat+0x37>
c000089d:	8d 76 00             	lea    esi,[esi+0x0]
c00008a0:	39 f1                	cmp    ecx,esi
c00008a2:	74 1c                	je     c00008c0 <strncat+0x50>
c00008a4:	83 c2 01             	add    edx,0x1
c00008a7:	83 c1 01             	add    ecx,0x1
c00008aa:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008ad:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008b0:	84 db                	test   bl,bl
c00008b2:	75 ec                	jne    c00008a0 <strncat+0x30>
c00008b4:	5b                   	pop    ebx
c00008b5:	5e                   	pop    esi
c00008b6:	c3                   	ret    
c00008b7:	89 f6                	mov    esi,esi
c00008b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00008c0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008c3:	5b                   	pop    ebx
c00008c4:	5e                   	pop    esi
c00008c5:	c3                   	ret    
c00008c6:	8d 76 00             	lea    esi,[esi+0x0]
c00008c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008d0 <strstr>:
c00008d0:	57                   	push   edi
c00008d1:	56                   	push   esi
c00008d2:	53                   	push   ebx
c00008d3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008d7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00008db:	57                   	push   edi
c00008dc:	e8 8f fc ff ff       	call   c0000570 <strlen>
c00008e1:	59                   	pop    ecx
c00008e2:	85 c0                	test   eax,eax
c00008e4:	74 3a                	je     c0000920 <strstr+0x50>
c00008e6:	89 c6                	mov    esi,eax
c00008e8:	eb 18                	jmp    c0000902 <strstr+0x32>
c00008ea:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00008f0:	56                   	push   esi
c00008f1:	57                   	push   edi
c00008f2:	53                   	push   ebx
c00008f3:	e8 88 fa ff ff       	call   c0000380 <memcmp>
c00008f8:	83 c4 0c             	add    esp,0xc
c00008fb:	85 c0                	test   eax,eax
c00008fd:	74 21                	je     c0000920 <strstr+0x50>
c00008ff:	83 c3 01             	add    ebx,0x1
c0000902:	53                   	push   ebx
c0000903:	e8 68 fc ff ff       	call   c0000570 <strlen>
c0000908:	5a                   	pop    edx
c0000909:	39 f0                	cmp    eax,esi
c000090b:	73 e3                	jae    c00008f0 <strstr+0x20>
c000090d:	5b                   	pop    ebx
c000090e:	31 c0                	xor    eax,eax
c0000910:	5e                   	pop    esi
c0000911:	5f                   	pop    edi
c0000912:	c3                   	ret    
c0000913:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000919:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000920:	89 d8                	mov    eax,ebx
c0000922:	5b                   	pop    ebx
c0000923:	5e                   	pop    esi
c0000924:	5f                   	pop    edi
c0000925:	c3                   	ret    
c0000926:	8d 76 00             	lea    esi,[esi+0x0]
c0000929:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000930 <toupper>:
c0000930:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000934:	0f b6 d0             	movzx  edx,al
c0000937:	f6 82 00 05 02 c0 02 	test   BYTE PTR [edx-0x3ffdfb00],0x2
c000093e:	74 03                	je     c0000943 <toupper+0x13>
c0000940:	83 e8 20             	sub    eax,0x20
c0000943:	c3                   	ret    
c0000944:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000094a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000950 <tolower>:
c0000950:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000954:	0f b6 d0             	movzx  edx,al
c0000957:	f6 82 00 05 02 c0 01 	test   BYTE PTR [edx-0x3ffdfb00],0x1
c000095e:	74 03                	je     c0000963 <tolower+0x13>
c0000960:	83 c0 20             	add    eax,0x20
c0000963:	c3                   	ret    
c0000964:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000096a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000970 <simple_strtoul>:
c0000970:	55                   	push   ebp
c0000971:	57                   	push   edi
c0000972:	56                   	push   esi
c0000973:	53                   	push   ebx
c0000974:	83 ec 08             	sub    esp,0x8
c0000977:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000097b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000097f:	eb 12                	jmp    c0000993 <simple_strtoul+0x23>
c0000981:	eb 0d                	jmp    c0000990 <simple_strtoul+0x20>
c0000983:	90                   	nop
c0000984:	90                   	nop
c0000985:	90                   	nop
c0000986:	90                   	nop
c0000987:	90                   	nop
c0000988:	90                   	nop
c0000989:	90                   	nop
c000098a:	90                   	nop
c000098b:	90                   	nop
c000098c:	90                   	nop
c000098d:	90                   	nop
c000098e:	90                   	nop
c000098f:	90                   	nop
c0000990:	83 c3 01             	add    ebx,0x1
c0000993:	0f b6 13             	movzx  edx,BYTE PTR [ebx]
c0000996:	f6 82 00 05 02 c0 08 	test   BYTE PTR [edx-0x3ffdfb00],0x8
c000099d:	75 f1                	jne    c0000990 <simple_strtoul+0x20>
c000099f:	0f be c2             	movsx  eax,dl
c00009a2:	83 f8 09             	cmp    eax,0x9
c00009a5:	74 e9                	je     c0000990 <simple_strtoul+0x20>
c00009a7:	83 f8 2d             	cmp    eax,0x2d
c00009aa:	0f 84 60 01 00 00    	je     c0000b10 <simple_strtoul+0x1a0>
c00009b0:	83 f8 2b             	cmp    eax,0x2b
c00009b3:	0f 84 e7 00 00 00    	je     c0000aa0 <simple_strtoul+0x130>
c00009b9:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00009c1:	85 f6                	test   esi,esi
c00009c3:	0f 85 ea 00 00 00    	jne    c0000ab3 <simple_strtoul+0x143>
c00009c9:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c00009cc:	89 d1                	mov    ecx,edx
c00009ce:	83 fa 30             	cmp    edx,0x30
c00009d1:	0f 84 90 01 00 00    	je     c0000b67 <simple_strtoul+0x1f7>
c00009d7:	be 0a 00 00 00       	mov    esi,0xa
c00009dc:	85 d2                	test   edx,edx
c00009de:	0f 84 c5 01 00 00    	je     c0000ba9 <simple_strtoul+0x239>
c00009e4:	31 ed                	xor    ebp,ebp
c00009e6:	31 ff                	xor    edi,edi
c00009e8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00009ef:	eb 3e                	jmp    c0000a2f <simple_strtoul+0xbf>
c00009f1:	eb 0d                	jmp    c0000a00 <simple_strtoul+0x90>
c00009f3:	90                   	nop
c00009f4:	90                   	nop
c00009f5:	90                   	nop
c00009f6:	90                   	nop
c00009f7:	90                   	nop
c00009f8:	90                   	nop
c00009f9:	90                   	nop
c00009fa:	90                   	nop
c00009fb:	90                   	nop
c00009fc:	90                   	nop
c00009fd:	90                   	nop
c00009fe:	90                   	nop
c00009ff:	90                   	nop
c0000a00:	83 e9 30             	sub    ecx,0x30
c0000a03:	39 f1                	cmp    ecx,esi
c0000a05:	73 59                	jae    c0000a60 <simple_strtoul+0xf0>
c0000a07:	31 d2                	xor    edx,edx
c0000a09:	89 c8                	mov    eax,ecx
c0000a0b:	f7 d0                	not    eax
c0000a0d:	f7 f6                	div    esi
c0000a0f:	39 f8                	cmp    eax,edi
c0000a11:	0f 82 d9 00 00 00    	jb     c0000af0 <simple_strtoul+0x180>
c0000a17:	0f af fe             	imul   edi,esi
c0000a1a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000a21:	01 cf                	add    edi,ecx
c0000a23:	83 c3 01             	add    ebx,0x1
c0000a26:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a29:	89 d1                	mov    ecx,edx
c0000a2b:	85 d2                	test   edx,edx
c0000a2d:	74 31                	je     c0000a60 <simple_strtoul+0xf0>
c0000a2f:	0f b6 c9             	movzx  ecx,cl
c0000a32:	f6 81 00 05 02 c0 04 	test   BYTE PTR [ecx-0x3ffdfb00],0x4
c0000a39:	75 c5                	jne    c0000a00 <simple_strtoul+0x90>
c0000a3b:	52                   	push   edx
c0000a3c:	e8 ef fe ff ff       	call   c0000930 <toupper>
c0000a41:	59                   	pop    ecx
c0000a42:	0f b6 d0             	movzx  edx,al
c0000a45:	f6 82 00 05 02 c0 01 	test   BYTE PTR [edx-0x3ffdfb00],0x1
c0000a4c:	74 12                	je     c0000a60 <simple_strtoul+0xf0>
c0000a4e:	8d 48 c9             	lea    ecx,[eax-0x37]
c0000a51:	39 f1                	cmp    ecx,esi
c0000a53:	72 b2                	jb     c0000a07 <simple_strtoul+0x97>
c0000a55:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a59:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000a60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a64:	85 c0                	test   eax,eax
c0000a66:	74 18                	je     c0000a80 <simple_strtoul+0x110>
c0000a68:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000a6b:	09 f8                	or     eax,edi
c0000a6d:	0f 85 8d 00 00 00    	jne    c0000b00 <simple_strtoul+0x190>
c0000a73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a77:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000a7b:	31 ff                	xor    edi,edi
c0000a7d:	89 30                	mov    DWORD PTR [eax],esi
c0000a7f:	90                   	nop
c0000a80:	83 fd 01             	cmp    ebp,0x1
c0000a83:	75 05                	jne    c0000a8a <simple_strtoul+0x11a>
c0000a85:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000a8a:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a8f:	75 02                	jne    c0000a93 <simple_strtoul+0x123>
c0000a91:	f7 df                	neg    edi
c0000a93:	83 c4 08             	add    esp,0x8
c0000a96:	89 f8                	mov    eax,edi
c0000a98:	5b                   	pop    ebx
c0000a99:	5e                   	pop    esi
c0000a9a:	5f                   	pop    edi
c0000a9b:	5d                   	pop    ebp
c0000a9c:	c3                   	ret    
c0000a9d:	8d 76 00             	lea    esi,[esi+0x0]
c0000aa0:	83 c3 01             	add    ebx,0x1
c0000aa3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000aab:	85 f6                	test   esi,esi
c0000aad:	0f 84 16 ff ff ff    	je     c00009c9 <simple_strtoul+0x59>
c0000ab3:	8d 46 fe             	lea    eax,[esi-0x2]
c0000ab6:	83 f8 22             	cmp    eax,0x22
c0000ab9:	0f 87 8b 00 00 00    	ja     c0000b4a <simple_strtoul+0x1da>
c0000abf:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000ac1:	83 fe 08             	cmp    esi,0x8
c0000ac4:	0f 84 c8 00 00 00    	je     c0000b92 <simple_strtoul+0x222>
c0000aca:	83 fe 10             	cmp    esi,0x10
c0000acd:	0f 85 0d 01 00 00    	jne    c0000be0 <simple_strtoul+0x270>
c0000ad3:	0f be d1             	movsx  edx,cl
c0000ad6:	83 fa 30             	cmp    edx,0x30
c0000ad9:	74 45                	je     c0000b20 <simple_strtoul+0x1b0>
c0000adb:	be 10 00 00 00       	mov    esi,0x10
c0000ae0:	e9 f7 fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000ae5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000ae9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000af0:	bd 01 00 00 00       	mov    ebp,0x1
c0000af5:	31 ff                	xor    edi,edi
c0000af7:	e9 27 ff ff ff       	jmp    c0000a23 <simple_strtoul+0xb3>
c0000afc:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b04:	89 18                	mov    DWORD PTR [eax],ebx
c0000b06:	e9 75 ff ff ff       	jmp    c0000a80 <simple_strtoul+0x110>
c0000b0b:	90                   	nop
c0000b0c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b10:	83 c3 01             	add    ebx,0x1
c0000b13:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b1b:	e9 a1 fe ff ff       	jmp    c00009c1 <simple_strtoul+0x51>
c0000b20:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b24:	52                   	push   edx
c0000b25:	89 d1                	mov    ecx,edx
c0000b27:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b2b:	e8 20 fe ff ff       	call   c0000950 <tolower>
c0000b30:	5e                   	pop    esi
c0000b31:	83 f8 78             	cmp    eax,0x78
c0000b34:	0f 84 93 00 00 00    	je     c0000bcd <simple_strtoul+0x25d>
c0000b3a:	83 c3 01             	add    ebx,0x1
c0000b3d:	be 10 00 00 00       	mov    esi,0x10
c0000b42:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b45:	e9 92 fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000b4a:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000b4e:	85 ff                	test   edi,edi
c0000b50:	74 69                	je     c0000bbb <simple_strtoul+0x24b>
c0000b52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b56:	85 db                	test   ebx,ebx
c0000b58:	75 5b                	jne    c0000bb5 <simple_strtoul+0x245>
c0000b5a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000b60:	31 ff                	xor    edi,edi
c0000b62:	e9 23 ff ff ff       	jmp    c0000a8a <simple_strtoul+0x11a>
c0000b67:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b6b:	52                   	push   edx
c0000b6c:	89 d1                	mov    ecx,edx
c0000b6e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b72:	e8 d9 fd ff ff       	call   c0000950 <tolower>
c0000b77:	5d                   	pop    ebp
c0000b78:	83 f8 78             	cmp    eax,0x78
c0000b7b:	74 45                	je     c0000bc2 <simple_strtoul+0x252>
c0000b7d:	83 c3 01             	add    ebx,0x1
c0000b80:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b83:	83 fa 30             	cmp    edx,0x30
c0000b86:	74 16                	je     c0000b9e <simple_strtoul+0x22e>
c0000b88:	be 08 00 00 00       	mov    esi,0x8
c0000b8d:	e9 4a fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000b92:	0f be d1             	movsx  edx,cl
c0000b95:	83 fa 30             	cmp    edx,0x30
c0000b98:	0f 85 3e fe ff ff    	jne    c00009dc <simple_strtoul+0x6c>
c0000b9e:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000ba2:	83 c3 01             	add    ebx,0x1
c0000ba5:	89 d1                	mov    ecx,edx
c0000ba7:	eb df                	jmp    c0000b88 <simple_strtoul+0x218>
c0000ba9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000bad:	85 d2                	test   edx,edx
c0000baf:	74 0a                	je     c0000bbb <simple_strtoul+0x24b>
c0000bb1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000bb5:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000bb9:	89 30                	mov    DWORD PTR [eax],esi
c0000bbb:	31 ff                	xor    edi,edi
c0000bbd:	e9 c8 fe ff ff       	jmp    c0000a8a <simple_strtoul+0x11a>
c0000bc2:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0000bc5:	83 c3 02             	add    ebx,0x2
c0000bc8:	e9 06 ff ff ff       	jmp    c0000ad3 <simple_strtoul+0x163>
c0000bcd:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0000bd1:	be 10 00 00 00       	mov    esi,0x10
c0000bd6:	89 d1                	mov    ecx,edx
c0000bd8:	83 c3 02             	add    ebx,0x2
c0000bdb:	e9 fc fd ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000be0:	0f be d1             	movsx  edx,cl
c0000be3:	e9 f4 fd ff ff       	jmp    c00009dc <simple_strtoul+0x6c>

c0000be8 <largebin_index>:
c0000be8:	89 c2                	mov    edx,eax
c0000bea:	c1 ea 08             	shr    edx,0x8
c0000bed:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000bf3:	77 10                	ja     c0000c05 <largebin_index+0x1d>
c0000bf5:	0f bd d2             	bsr    edx,edx
c0000bf8:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000bfb:	d3 e8                	shr    eax,cl
c0000bfd:	83 e0 03             	and    eax,0x3
c0000c00:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c04:	c3                   	ret    
c0000c05:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c0a:	c3                   	ret    

c0000c0b <malloc_init_state>:
c0000c0b:	53                   	push   ebx
c0000c0c:	8d 50 34             	lea    edx,[eax+0x34]
c0000c0f:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c15:	89 d1                	mov    ecx,edx
c0000c17:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c1a:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c1d:	83 c2 08             	add    edx,0x8
c0000c20:	39 da                	cmp    edx,ebx
c0000c22:	75 f3                	jne    c0000c17 <malloc_init_state+0xc>
c0000c24:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c26:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c30:	83 e2 03             	and    edx,0x3
c0000c33:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000c3d:	83 ca 48             	or     edx,0x48
c0000c40:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c4a:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c54:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c5b:	89 10                	mov    DWORD PTR [eax],edx
c0000c5d:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000c60:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000c6a:	5b                   	pop    ebx
c0000c6b:	c3                   	ret    

c0000c6c <malloc_consolidate>:
c0000c6c:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c6e:	85 d2                	test   edx,edx
c0000c70:	0f 84 d8 00 00 00    	je     c0000d4e <malloc_consolidate+0xe2>
c0000c76:	55                   	push   ebp
c0000c77:	83 e2 fd             	and    edx,0xfffffffd
c0000c7a:	57                   	push   edi
c0000c7b:	89 c5                	mov    ebp,eax
c0000c7d:	56                   	push   esi
c0000c7e:	8d 78 34             	lea    edi,[eax+0x34]
c0000c81:	53                   	push   ebx
c0000c82:	83 ec 10             	sub    esp,0x10
c0000c85:	89 10                	mov    DWORD PTR [eax],edx
c0000c87:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000c8b:	c1 ea 03             	shr    edx,0x3
c0000c8e:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000c92:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000c96:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000c99:	85 d2                	test   edx,edx
c0000c9b:	0f 84 98 00 00 00    	je     c0000d39 <malloc_consolidate+0xcd>
c0000ca1:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000ca8:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cab:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000cae:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000cb2:	89 f9                	mov    ecx,edi
c0000cb4:	83 e1 fe             	and    ecx,0xfffffffe
c0000cb7:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000cba:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cbd:	83 e3 fc             	and    ebx,0xfffffffc
c0000cc0:	83 e7 01             	and    edi,0x1
c0000cc3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000cc6:	75 14                	jne    c0000cdc <malloc_consolidate+0x70>
c0000cc8:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000cca:	29 fa                	sub    edx,edi
c0000ccc:	01 f9                	add    ecx,edi
c0000cce:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000cd1:	89 fb                	mov    ebx,edi
c0000cd3:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000cd6:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000cd9:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000cdc:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000cdf:	74 40                	je     c0000d21 <malloc_consolidate+0xb5>
c0000ce1:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000ce4:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000ce7:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000ceb:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000cee:	83 e7 01             	and    edi,0x1
c0000cf1:	75 0e                	jne    c0000d01 <malloc_consolidate+0x95>
c0000cf3:	01 d9                	add    ecx,ebx
c0000cf5:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000cf8:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000cfb:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000cfe:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d01:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d04:	89 ce                	mov    esi,ecx
c0000d06:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d09:	83 ce 01             	or     esi,0x1
c0000d0c:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d0f:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d12:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d15:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d19:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d1c:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d1f:	eb 0c                	jmp    c0000d2d <malloc_consolidate+0xc1>
c0000d21:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d24:	83 c9 01             	or     ecx,0x1
c0000d27:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d2a:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d2d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d31:	85 d2                	test   edx,edx
c0000d33:	0f 85 6f ff ff ff    	jne    c0000ca8 <malloc_consolidate+0x3c>
c0000d39:	83 c5 04             	add    ebp,0x4
c0000d3c:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d40:	0f 85 50 ff ff ff    	jne    c0000c96 <malloc_consolidate+0x2a>
c0000d46:	83 c4 10             	add    esp,0x10
c0000d49:	5b                   	pop    ebx
c0000d4a:	5e                   	pop    esi
c0000d4b:	5f                   	pop    edi
c0000d4c:	5d                   	pop    ebp
c0000d4d:	c3                   	ret    
c0000d4e:	e9 b8 fe ff ff       	jmp    c0000c0b <malloc_init_state>

c0000d53 <dlfree>:
c0000d53:	57                   	push   edi
c0000d54:	56                   	push   esi
c0000d55:	53                   	push   ebx
c0000d56:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000d5a:	85 db                	test   ebx,ebx
c0000d5c:	0f 84 e2 00 00 00    	je     c0000e44 <dlfree+0xf1>
c0000d62:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000d65:	8b 0d 00 61 02 c0    	mov    ecx,DWORD PTR ds:0xc0026100
c0000d6b:	89 f0                	mov    eax,esi
c0000d6d:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000d70:	83 e0 fc             	and    eax,0xfffffffc
c0000d73:	39 c1                	cmp    ecx,eax
c0000d75:	72 24                	jb     c0000d9b <dlfree+0x48>
c0000d77:	83 c9 03             	or     ecx,0x3
c0000d7a:	c1 e8 03             	shr    eax,0x3
c0000d7d:	89 0d 00 61 02 c0    	mov    DWORD PTR ds:0xc0026100,ecx
c0000d83:	83 e8 02             	sub    eax,0x2
c0000d86:	8b 0c 85 04 61 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd9efc]
c0000d8d:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000d8f:	89 14 85 04 61 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9efc],edx
c0000d96:	e9 a9 00 00 00       	jmp    c0000e44 <dlfree+0xf1>
c0000d9b:	83 e6 02             	and    esi,0x2
c0000d9e:	0f 85 a0 00 00 00    	jne    c0000e44 <dlfree+0xf1>
c0000da4:	83 c9 01             	or     ecx,0x1
c0000da7:	8d 34 02             	lea    esi,[edx+eax*1]
c0000daa:	89 0d 00 61 02 c0    	mov    DWORD PTR ds:0xc0026100,ecx
c0000db0:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000db3:	83 e1 fc             	and    ecx,0xfffffffc
c0000db6:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000dba:	75 13                	jne    c0000dcf <dlfree+0x7c>
c0000dbc:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000dbf:	29 da                	sub    edx,ebx
c0000dc1:	01 d8                	add    eax,ebx
c0000dc3:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000dc6:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000dc9:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000dcc:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000dcf:	39 35 2c 61 02 c0    	cmp    DWORD PTR ds:0xc002612c,esi
c0000dd5:	74 40                	je     c0000e17 <dlfree+0xc4>
c0000dd7:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000ddb:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000dde:	80 e3 01             	and    bl,0x1
c0000de1:	75 0e                	jne    c0000df1 <dlfree+0x9e>
c0000de3:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000de6:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000de9:	01 c8                	add    eax,ecx
c0000deb:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000dee:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000df1:	8b 0d 3c 61 02 c0    	mov    ecx,DWORD PTR ds:0xc002613c
c0000df7:	c7 42 0c 34 61 02 c0 	mov    DWORD PTR [edx+0xc],0xc0026134
c0000dfe:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e01:	89 15 3c 61 02 c0    	mov    DWORD PTR ds:0xc002613c,edx
c0000e07:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e0a:	89 c1                	mov    ecx,eax
c0000e0c:	83 c9 01             	or     ecx,0x1
c0000e0f:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e12:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e15:	eb 10                	jmp    c0000e27 <dlfree+0xd4>
c0000e17:	01 c8                	add    eax,ecx
c0000e19:	89 c1                	mov    ecx,eax
c0000e1b:	83 c9 01             	or     ecx,0x1
c0000e1e:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e21:	89 15 2c 61 02 c0    	mov    DWORD PTR ds:0xc002612c,edx
c0000e27:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e2c:	76 16                	jbe    c0000e44 <dlfree+0xf1>
c0000e2e:	f6 05 00 61 02 c0 02 	test   BYTE PTR ds:0xc0026100,0x2
c0000e35:	74 0d                	je     c0000e44 <dlfree+0xf1>
c0000e37:	5b                   	pop    ebx
c0000e38:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0000e3d:	5e                   	pop    esi
c0000e3e:	5f                   	pop    edi
c0000e3f:	e9 28 fe ff ff       	jmp    c0000c6c <malloc_consolidate>
c0000e44:	5b                   	pop    ebx
c0000e45:	5e                   	pop    esi
c0000e46:	5f                   	pop    edi
c0000e47:	c3                   	ret    

c0000e48 <sYSMALLOc>:
c0000e48:	55                   	push   ebp
c0000e49:	57                   	push   edi
c0000e4a:	56                   	push   esi
c0000e4b:	53                   	push   ebx
c0000e4c:	89 d3                	mov    ebx,edx
c0000e4e:	83 ec 2c             	sub    esp,0x2c
c0000e51:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000e55:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000e5b:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000e5e:	8d 42 ff             	lea    eax,[edx-0x1]
c0000e61:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0000e65:	74 1f                	je     c0000e86 <sYSMALLOc+0x3e>
c0000e67:	89 d8                	mov    eax,ebx
c0000e69:	e8 fe fd ff ff       	call   c0000c6c <malloc_consolidate>
c0000e6e:	83 ec 0c             	sub    esp,0xc
c0000e71:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000e75:	83 e8 07             	sub    eax,0x7
c0000e78:	50                   	push   eax
c0000e79:	e8 2d 02 00 00       	call   c00010ab <dlmalloc>
c0000e7e:	83 c4 10             	add    esp,0x10
c0000e81:	e9 1d 02 00 00       	jmp    c00010a3 <sYSMALLOc+0x25b>
c0000e86:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000e89:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000e8f:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000e92:	83 e0 fc             	and    eax,0xfffffffc
c0000e95:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000e99:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000e9d:	83 c0 10             	add    eax,0x10
c0000ea0:	01 c1                	add    ecx,eax
c0000ea2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0000ea6:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000ead:	74 04                	je     c0000eb3 <sYSMALLOc+0x6b>
c0000eaf:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000eb3:	f7 da                	neg    edx
c0000eb5:	03 4c 24 14          	add    ecx,DWORD PTR [esp+0x14]
c0000eb9:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0000ebd:	21 d1                	and    ecx,edx
c0000ebf:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000ec3:	7f 07                	jg     c0000ecc <sYSMALLOc+0x84>
c0000ec5:	31 c0                	xor    eax,eax
c0000ec7:	e9 d7 01 00 00       	jmp    c00010a3 <sYSMALLOc+0x25b>
c0000ecc:	83 ec 0c             	sub    esp,0xc
c0000ecf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000ed3:	e8 e0 6a 00 00       	call   c00079b8 <sbrk>
c0000ed8:	83 c4 10             	add    esp,0x10
c0000edb:	89 c6                	mov    esi,eax
c0000edd:	83 f8 ff             	cmp    eax,0xffffffff
c0000ee0:	74 e3                	je     c0000ec5 <sYSMALLOc+0x7d>
c0000ee2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000ee6:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000ee9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000eed:	03 83 68 03 00 00    	add    eax,DWORD PTR [ebx+0x368]
c0000ef3:	39 f1                	cmp    ecx,esi
c0000ef5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000ef9:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000eff:	75 13                	jne    c0000f14 <sYSMALLOc+0xcc>
c0000f01:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f05:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f09:	83 c8 01             	or     eax,0x1
c0000f0c:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f0f:	e9 37 01 00 00       	jmp    c000104b <sYSMALLOc+0x203>
c0000f14:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000f1a:	89 d5                	mov    ebp,edx
c0000f1c:	83 e5 01             	and    ebp,0x1
c0000f1f:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f24:	0f 95 c0             	setne  al
c0000f27:	21 e8                	and    eax,ebp
c0000f29:	39 f1                	cmp    ecx,esi
c0000f2b:	76 12                	jbe    c0000f3f <sYSMALLOc+0xf7>
c0000f2d:	85 c0                	test   eax,eax
c0000f2f:	74 0e                	je     c0000f3f <sYSMALLOc+0xf7>
c0000f31:	83 e2 fe             	and    edx,0xfffffffe
c0000f34:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000f3a:	e9 82 00 00 00       	jmp    c0000fc1 <sYSMALLOc+0x179>
c0000f3f:	85 ed                	test   ebp,ebp
c0000f41:	74 7e                	je     c0000fc1 <sYSMALLOc+0x179>
c0000f43:	85 c0                	test   eax,eax
c0000f45:	74 0e                	je     c0000f55 <sYSMALLOc+0x10d>
c0000f47:	89 f0                	mov    eax,esi
c0000f49:	29 c8                	sub    eax,ecx
c0000f4b:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0000f4f:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000f55:	89 f2                	mov    edx,esi
c0000f57:	83 e2 07             	and    edx,0x7
c0000f5a:	74 0c                	je     c0000f68 <sYSMALLOc+0x120>
c0000f5c:	b8 08 00 00 00       	mov    eax,0x8
c0000f61:	29 d0                	sub    eax,edx
c0000f63:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000f66:	eb 04                	jmp    c0000f6c <sYSMALLOc+0x124>
c0000f68:	89 f5                	mov    ebp,esi
c0000f6a:	31 c0                	xor    eax,eax
c0000f6c:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f70:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000f74:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0000f78:	01 c1                	add    ecx,eax
c0000f7a:	83 ec 0c             	sub    esp,0xc
c0000f7d:	01 f1                	add    ecx,esi
c0000f7f:	01 ca                	add    edx,ecx
c0000f81:	29 c8                	sub    eax,ecx
c0000f83:	23 54 24 24          	and    edx,DWORD PTR [esp+0x24]
c0000f87:	01 c2                	add    edx,eax
c0000f89:	52                   	push   edx
c0000f8a:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000f8e:	e8 25 6a 00 00       	call   c00079b8 <sbrk>
c0000f93:	83 c4 10             	add    esp,0x10
c0000f96:	83 f8 ff             	cmp    eax,0xffffffff
c0000f99:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000f9d:	75 0f                	jne    c0000fae <sYSMALLOc+0x166>
c0000f9f:	83 ec 0c             	sub    esp,0xc
c0000fa2:	6a 00                	push   0x0
c0000fa4:	e8 0f 6a 00 00       	call   c00079b8 <sbrk>
c0000fa9:	83 c4 10             	add    esp,0x10
c0000fac:	eb 30                	jmp    c0000fde <sYSMALLOc+0x196>
c0000fae:	39 c6                	cmp    esi,eax
c0000fb0:	76 33                	jbe    c0000fe5 <sYSMALLOc+0x19d>
c0000fb2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000fb6:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000fbd:	01 f0                	add    eax,esi
c0000fbf:	eb 1d                	jmp    c0000fde <sYSMALLOc+0x196>
c0000fc1:	83 ec 0c             	sub    esp,0xc
c0000fc4:	89 f5                	mov    ebp,esi
c0000fc6:	6a 00                	push   0x0
c0000fc8:	e8 eb 69 00 00       	call   c00079b8 <sbrk>
c0000fcd:	89 c2                	mov    edx,eax
c0000fcf:	29 f2                	sub    edx,esi
c0000fd1:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000fd5:	83 c4 10             	add    esp,0x10
c0000fd8:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000fde:	31 d2                	xor    edx,edx
c0000fe0:	83 f8 ff             	cmp    eax,0xffffffff
c0000fe3:	74 66                	je     c000104b <sYSMALLOc+0x203>
c0000fe5:	29 e8                	sub    eax,ebp
c0000fe7:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000fea:	01 d0                	add    eax,edx
c0000fec:	83 c8 01             	or     eax,0x1
c0000fef:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000ff2:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000ff8:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000ffd:	74 4c                	je     c000104b <sYSMALLOc+0x203>
c0000fff:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001003:	83 e8 0c             	sub    eax,0xc
c0001006:	83 e0 f8             	and    eax,0xfffffff8
c0001009:	89 c2                	mov    edx,eax
c000100b:	83 ca 01             	or     edx,0x1
c000100e:	83 f8 0f             	cmp    eax,0xf
c0001011:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001014:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c000101c:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001024:	76 25                	jbe    c000104b <sYSMALLOc+0x203>
c0001026:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c000102c:	83 ec 0c             	sub    esp,0xc
c000102f:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0001039:	83 c7 08             	add    edi,0x8
c000103c:	57                   	push   edi
c000103d:	e8 11 fd ff ff       	call   c0000d53 <dlfree>
c0001042:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0001048:	83 c4 10             	add    esp,0x10
c000104b:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0001051:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0001057:	73 06                	jae    c000105f <sYSMALLOc+0x217>
c0001059:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c000105f:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0001065:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c000106b:	73 06                	jae    c0001073 <sYSMALLOc+0x22b>
c000106d:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0001073:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0001076:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001079:	83 e2 fc             	and    edx,0xfffffffc
c000107c:	3b 54 24 1c          	cmp    edx,DWORD PTR [esp+0x1c]
c0001080:	0f 82 3f fe ff ff    	jb     c0000ec5 <sYSMALLOc+0x7d>
c0001086:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000108a:	8d 0c 38             	lea    ecx,[eax+edi*1]
c000108d:	29 fa                	sub    edx,edi
c000108f:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0001092:	83 ca 01             	or     edx,0x1
c0001095:	89 fb                	mov    ebx,edi
c0001097:	83 c0 08             	add    eax,0x8
c000109a:	83 cb 01             	or     ebx,0x1
c000109d:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c00010a0:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00010a3:	83 c4 2c             	add    esp,0x2c
c00010a6:	5b                   	pop    ebx
c00010a7:	5e                   	pop    esi
c00010a8:	5f                   	pop    edi
c00010a9:	5d                   	pop    ebp
c00010aa:	c3                   	ret    

c00010ab <dlmalloc>:
c00010ab:	55                   	push   ebp
c00010ac:	57                   	push   edi
c00010ad:	56                   	push   esi
c00010ae:	53                   	push   ebx
c00010af:	83 ec 1c             	sub    esp,0x1c
c00010b2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00010b6:	83 f8 df             	cmp    eax,0xffffffdf
c00010b9:	0f 87 70 03 00 00    	ja     c000142f <dlmalloc+0x384>
c00010bf:	83 c0 0b             	add    eax,0xb
c00010c2:	be 10 00 00 00       	mov    esi,0x10
c00010c7:	83 f8 0f             	cmp    eax,0xf
c00010ca:	76 05                	jbe    c00010d1 <dlmalloc+0x26>
c00010cc:	83 e0 f8             	and    eax,0xfffffff8
c00010cf:	89 c6                	mov    esi,eax
c00010d1:	8b 3d 00 61 02 c0    	mov    edi,DWORD PTR ds:0xc0026100
c00010d7:	f7 c7 01 00 00 00    	test   edi,0x1
c00010dd:	75 17                	jne    c00010f6 <dlmalloc+0x4b>
c00010df:	85 ff                	test   edi,edi
c00010e1:	0f 85 05 03 00 00    	jne    c00013ec <dlmalloc+0x341>
c00010e7:	b8 00 61 02 c0       	mov    eax,0xc0026100
c00010ec:	e8 7b fb ff ff       	call   c0000c6c <malloc_consolidate>
c00010f1:	e9 f6 02 00 00       	jmp    c00013ec <dlmalloc+0x341>
c00010f6:	39 f7                	cmp    edi,esi
c00010f8:	72 1f                	jb     c0001119 <dlmalloc+0x6e>
c00010fa:	89 f2                	mov    edx,esi
c00010fc:	c1 ea 03             	shr    edx,0x3
c00010ff:	83 ea 02             	sub    edx,0x2
c0001102:	8b 04 95 04 61 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd9efc]
c0001109:	85 c0                	test   eax,eax
c000110b:	74 0c                	je     c0001119 <dlmalloc+0x6e>
c000110d:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001110:	89 0c 95 04 61 02 c0 	mov    DWORD PTR [edx*4-0x3ffd9efc],ecx
c0001117:	eb 30                	jmp    c0001149 <dlmalloc+0x9e>
c0001119:	89 f0                	mov    eax,esi
c000111b:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001121:	77 2e                	ja     c0001151 <dlmalloc+0xa6>
c0001123:	c1 e8 03             	shr    eax,0x3
c0001126:	8d 14 c5 34 61 02 c0 	lea    edx,[eax*8-0x3ffd9ecc]
c000112d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001131:	8d 5a f8             	lea    ebx,[edx-0x8]
c0001134:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0001137:	39 c3                	cmp    ebx,eax
c0001139:	74 2e                	je     c0001169 <dlmalloc+0xbe>
c000113b:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c000113e:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0001143:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0001146:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0001149:	83 c0 08             	add    eax,0x8
c000114c:	e9 e0 02 00 00       	jmp    c0001431 <dlmalloc+0x386>
c0001151:	e8 92 fa ff ff       	call   c0000be8 <largebin_index>
c0001156:	83 e7 02             	and    edi,0x2
c0001159:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000115d:	74 0a                	je     c0001169 <dlmalloc+0xbe>
c000115f:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001164:	e8 03 fb ff ff       	call   c0000c6c <malloc_consolidate>
c0001169:	8d 46 10             	lea    eax,[esi+0x10]
c000116c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001170:	8b 1d 40 61 02 c0    	mov    ebx,DWORD PTR ds:0xc0026140
c0001176:	81 fb 34 61 02 c0    	cmp    ebx,0xc0026134
c000117c:	0f 84 13 01 00 00    	je     c0001295 <dlmalloc+0x1ea>
c0001182:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0001185:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0001188:	83 e7 fc             	and    edi,0xfffffffc
c000118b:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001191:	77 4c                	ja     c00011df <dlmalloc+0x134>
c0001193:	3d 34 61 02 c0       	cmp    eax,0xc0026134
c0001198:	75 45                	jne    c00011df <dlmalloc+0x134>
c000119a:	39 1d 30 61 02 c0    	cmp    DWORD PTR ds:0xc0026130,ebx
c00011a0:	75 3d                	jne    c00011df <dlmalloc+0x134>
c00011a2:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00011a6:	73 37                	jae    c00011df <dlmalloc+0x134>
c00011a8:	8d 04 33             	lea    eax,[ebx+esi*1]
c00011ab:	89 fa                	mov    edx,edi
c00011ad:	a3 3c 61 02 c0       	mov    ds:0xc002613c,eax
c00011b2:	a3 40 61 02 c0       	mov    ds:0xc0026140,eax
c00011b7:	a3 30 61 02 c0       	mov    ds:0xc0026130,eax
c00011bc:	29 f2                	sub    edx,esi
c00011be:	c7 40 08 34 61 02 c0 	mov    DWORD PTR [eax+0x8],0xc0026134
c00011c5:	c7 40 0c 34 61 02 c0 	mov    DWORD PTR [eax+0xc],0xc0026134
c00011cc:	83 ce 01             	or     esi,0x1
c00011cf:	89 d1                	mov    ecx,edx
c00011d1:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c00011d4:	83 c9 01             	or     ecx,0x1
c00011d7:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c00011da:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c00011dd:	eb 15                	jmp    c00011f4 <dlmalloc+0x149>
c00011df:	a3 40 61 02 c0       	mov    ds:0xc0026140,eax
c00011e4:	39 fe                	cmp    esi,edi
c00011e6:	c7 40 08 34 61 02 c0 	mov    DWORD PTR [eax+0x8],0xc0026134
c00011ed:	75 0d                	jne    c00011fc <dlmalloc+0x151>
c00011ef:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c00011f4:	8d 43 08             	lea    eax,[ebx+0x8]
c00011f7:	e9 35 02 00 00       	jmp    c0001431 <dlmalloc+0x386>
c00011fc:	89 f8                	mov    eax,edi
c00011fe:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001204:	77 19                	ja     c000121f <dlmalloc+0x174>
c0001206:	c1 e8 03             	shr    eax,0x3
c0001209:	8d 14 00             	lea    edx,[eax+eax*1]
c000120c:	83 c2 0d             	add    edx,0xd
c000120f:	8d 2c 95 f8 60 02 c0 	lea    ebp,[edx*4-0x3ffd9f08]
c0001216:	8b 14 95 00 61 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9f00]
c000121d:	eb 46                	jmp    c0001265 <dlmalloc+0x1ba>
c000121f:	e8 c4 f9 ff ff       	call   c0000be8 <largebin_index>
c0001224:	8d 14 00             	lea    edx,[eax+eax*1]
c0001227:	83 c2 0d             	add    edx,0xd
c000122a:	8d 0c 95 00 61 02 c0 	lea    ecx,[edx*4-0x3ffd9f00]
c0001231:	8b 14 95 00 61 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9f00]
c0001238:	8d 69 f8             	lea    ebp,[ecx-0x8]
c000123b:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c000123f:	89 d5                	mov    ebp,edx
c0001241:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0001245:	74 1e                	je     c0001265 <dlmalloc+0x1ba>
c0001247:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c000124a:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c000124d:	77 12                	ja     c0001261 <dlmalloc+0x1b6>
c000124f:	83 cf 01             	or     edi,0x1
c0001252:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c0001255:	76 05                	jbe    c000125c <dlmalloc+0x1b1>
c0001257:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000125a:	eb f6                	jmp    c0001252 <dlmalloc+0x1a7>
c000125c:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c000125f:	eb 04                	jmp    c0001265 <dlmalloc+0x1ba>
c0001261:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001265:	89 c7                	mov    edi,eax
c0001267:	88 c1                	mov    cl,al
c0001269:	c1 ff 05             	sar    edi,0x5
c000126c:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0001270:	bf 01 00 00 00       	mov    edi,0x1
c0001275:	d3 e7                	shl    edi,cl
c0001277:	89 f8                	mov    eax,edi
c0001279:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000127d:	09 04 bd 34 64 02 c0 	or     DWORD PTR [edi*4-0x3ffd9bcc],eax
c0001284:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c0001287:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000128a:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c000128d:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c0001290:	e9 db fe ff ff       	jmp    c0001170 <dlmalloc+0xc5>
c0001295:	81 fe ff 00 00 00    	cmp    esi,0xff
c000129b:	76 78                	jbe    c0001315 <dlmalloc+0x26a>
c000129d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00012a1:	8d 04 c5 34 61 02 c0 	lea    eax,[eax*8-0x3ffd9ecc]
c00012a8:	8d 48 f8             	lea    ecx,[eax-0x8]
c00012ab:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00012ae:	39 ca                	cmp    edx,ecx
c00012b0:	74 63                	je     c0001315 <dlmalloc+0x26a>
c00012b2:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00012b5:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00012b8:	83 e3 fc             	and    ebx,0xfffffffc
c00012bb:	39 de                	cmp    esi,ebx
c00012bd:	77 52                	ja     c0001311 <dlmalloc+0x266>
c00012bf:	89 df                	mov    edi,ebx
c00012c1:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c00012c4:	29 f7                	sub    edi,esi
c00012c6:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c00012c9:	01 d3                	add    ebx,edx
c00012cb:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c00012ce:	83 ff 0f             	cmp    edi,0xf
c00012d1:	8d 42 08             	lea    eax,[edx+0x8]
c00012d4:	77 09                	ja     c00012df <dlmalloc+0x234>
c00012d6:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c00012da:	e9 52 01 00 00       	jmp    c0001431 <dlmalloc+0x386>
c00012df:	8d 0c 32             	lea    ecx,[edx+esi*1]
c00012e2:	83 ce 01             	or     esi,0x1
c00012e5:	89 0d 3c 61 02 c0    	mov    DWORD PTR ds:0xc002613c,ecx
c00012eb:	89 0d 40 61 02 c0    	mov    DWORD PTR ds:0xc0026140,ecx
c00012f1:	c7 41 08 34 61 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0026134
c00012f8:	c7 41 0c 34 61 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0026134
c00012ff:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001302:	89 fa                	mov    edx,edi
c0001304:	83 ca 01             	or     edx,0x1
c0001307:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000130a:	89 3b                	mov    DWORD PTR [ebx],edi
c000130c:	e9 20 01 00 00       	jmp    c0001431 <dlmalloc+0x386>
c0001311:	89 c2                	mov    edx,eax
c0001313:	eb 99                	jmp    c00012ae <dlmalloc+0x203>
c0001315:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001319:	b8 01 00 00 00       	mov    eax,0x1
c000131e:	41                   	inc    ecx
c000131f:	89 cb                	mov    ebx,ecx
c0001321:	8d 14 cd 2c 61 02 c0 	lea    edx,[ecx*8-0x3ffd9ed4]
c0001328:	c1 eb 05             	shr    ebx,0x5
c000132b:	d3 e0                	shl    eax,cl
c000132d:	8b 3c 9d 34 64 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd9bcc]
c0001334:	39 f8                	cmp    eax,edi
c0001336:	77 04                	ja     c000133c <dlmalloc+0x291>
c0001338:	85 c0                	test   eax,eax
c000133a:	75 26                	jne    c0001362 <dlmalloc+0x2b7>
c000133c:	43                   	inc    ebx
c000133d:	83 fb 02             	cmp    ebx,0x2
c0001340:	0f 87 a6 00 00 00    	ja     c00013ec <dlmalloc+0x341>
c0001346:	8b 3c 9d 34 64 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd9bcc]
c000134d:	85 ff                	test   edi,edi
c000134f:	74 eb                	je     c000133c <dlmalloc+0x291>
c0001351:	89 d8                	mov    eax,ebx
c0001353:	c1 e0 06             	shl    eax,0x6
c0001356:	8d 14 85 2c 61 02 c0 	lea    edx,[eax*4-0x3ffd9ed4]
c000135d:	b8 01 00 00 00       	mov    eax,0x1
c0001362:	85 f8                	test   eax,edi
c0001364:	75 07                	jne    c000136d <dlmalloc+0x2c2>
c0001366:	83 c2 08             	add    edx,0x8
c0001369:	01 c0                	add    eax,eax
c000136b:	eb f5                	jmp    c0001362 <dlmalloc+0x2b7>
c000136d:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0001370:	39 ca                	cmp    edx,ecx
c0001372:	75 14                	jne    c0001388 <dlmalloc+0x2dd>
c0001374:	89 c1                	mov    ecx,eax
c0001376:	83 c2 08             	add    edx,0x8
c0001379:	f7 d1                	not    ecx
c000137b:	01 c0                	add    eax,eax
c000137d:	21 cf                	and    edi,ecx
c000137f:	89 3c 9d 34 64 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd9bcc],edi
c0001386:	eb ac                	jmp    c0001334 <dlmalloc+0x289>
c0001388:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c000138b:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c000138e:	83 e0 fc             	and    eax,0xfffffffc
c0001391:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001394:	89 c3                	mov    ebx,eax
c0001396:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001399:	29 f3                	sub    ebx,esi
c000139b:	8d 14 01             	lea    edx,[ecx+eax*1]
c000139e:	83 fb 0f             	cmp    ebx,0xf
c00013a1:	8d 41 08             	lea    eax,[ecx+0x8]
c00013a4:	77 09                	ja     c00013af <dlmalloc+0x304>
c00013a6:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00013aa:	e9 82 00 00 00       	jmp    c0001431 <dlmalloc+0x386>
c00013af:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00013b2:	81 fe ff 00 00 00    	cmp    esi,0xff
c00013b8:	89 3d 3c 61 02 c0    	mov    DWORD PTR ds:0xc002613c,edi
c00013be:	89 3d 40 61 02 c0    	mov    DWORD PTR ds:0xc0026140,edi
c00013c4:	c7 47 08 34 61 02 c0 	mov    DWORD PTR [edi+0x8],0xc0026134
c00013cb:	c7 47 0c 34 61 02 c0 	mov    DWORD PTR [edi+0xc],0xc0026134
c00013d2:	77 06                	ja     c00013da <dlmalloc+0x32f>
c00013d4:	89 3d 30 61 02 c0    	mov    DWORD PTR ds:0xc0026130,edi
c00013da:	83 ce 01             	or     esi,0x1
c00013dd:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c00013e0:	89 d9                	mov    ecx,ebx
c00013e2:	83 c9 01             	or     ecx,0x1
c00013e5:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c00013e8:	89 1a                	mov    DWORD PTR [edx],ebx
c00013ea:	eb 45                	jmp    c0001431 <dlmalloc+0x386>
c00013ec:	a1 2c 61 02 c0       	mov    eax,ds:0xc002612c
c00013f1:	8d 4e 10             	lea    ecx,[esi+0x10]
c00013f4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00013f7:	83 e2 fc             	and    edx,0xfffffffc
c00013fa:	39 d1                	cmp    ecx,edx
c00013fc:	77 1e                	ja     c000141c <dlmalloc+0x371>
c00013fe:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001401:	89 f3                	mov    ebx,esi
c0001403:	89 0d 2c 61 02 c0    	mov    DWORD PTR ds:0xc002612c,ecx
c0001409:	83 cb 01             	or     ebx,0x1
c000140c:	29 f2                	sub    edx,esi
c000140e:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001411:	83 ca 01             	or     edx,0x1
c0001414:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001417:	e9 2d fd ff ff       	jmp    c0001149 <dlmalloc+0x9e>
c000141c:	83 c4 1c             	add    esp,0x1c
c000141f:	89 f0                	mov    eax,esi
c0001421:	5b                   	pop    ebx
c0001422:	ba 00 61 02 c0       	mov    edx,0xc0026100
c0001427:	5e                   	pop    esi
c0001428:	5f                   	pop    edi
c0001429:	5d                   	pop    ebp
c000142a:	e9 19 fa ff ff       	jmp    c0000e48 <sYSMALLOc>
c000142f:	31 c0                	xor    eax,eax
c0001431:	83 c4 1c             	add    esp,0x1c
c0001434:	5b                   	pop    ebx
c0001435:	5e                   	pop    esi
c0001436:	5f                   	pop    edi
c0001437:	5d                   	pop    ebp
c0001438:	c3                   	ret    

c0001439 <iALLOc>:
c0001439:	55                   	push   ebp
c000143a:	89 c5                	mov    ebp,eax
c000143c:	57                   	push   edi
c000143d:	56                   	push   esi
c000143e:	53                   	push   ebx
c000143f:	83 ec 2c             	sub    esp,0x2c
c0001442:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0001446:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000144a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000144e:	83 3d 00 61 02 c0 00 	cmp    DWORD PTR ds:0xc0026100,0x0
c0001455:	75 12                	jne    c0001469 <iALLOc+0x30>
c0001457:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000145b:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001460:	e8 07 f8 ff ff       	call   c0000c6c <malloc_consolidate>
c0001465:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001469:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000146e:	74 12                	je     c0001482 <iALLOc+0x49>
c0001470:	85 ed                	test   ebp,ebp
c0001472:	0f 84 64 01 00 00    	je     c00015dc <iALLOc+0x1a3>
c0001478:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0001480:	eb 33                	jmp    c00014b5 <iALLOc+0x7c>
c0001482:	85 ed                	test   ebp,ebp
c0001484:	75 14                	jne    c000149a <iALLOc+0x61>
c0001486:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c000148e:	83 c4 2c             	add    esp,0x2c
c0001491:	5b                   	pop    ebx
c0001492:	5e                   	pop    esi
c0001493:	5f                   	pop    edi
c0001494:	5d                   	pop    ebp
c0001495:	e9 11 fc ff ff       	jmp    c00010ab <dlmalloc>
c000149a:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00014a1:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00014a9:	83 f8 0f             	cmp    eax,0xf
c00014ac:	76 07                	jbe    c00014b5 <iALLOc+0x7c>
c00014ae:	83 e0 f8             	and    eax,0xfffffff8
c00014b1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00014b5:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c00014ba:	75 09                	jne    c00014c5 <iALLOc+0x8c>
c00014bc:	89 d0                	mov    eax,edx
c00014be:	8d 3c aa             	lea    edi,[edx+ebp*4]
c00014c1:	31 f6                	xor    esi,esi
c00014c3:	eb 3b                	jmp    c0001500 <iALLOc+0xc7>
c00014c5:	8b 02                	mov    eax,DWORD PTR [edx]
c00014c7:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c00014cf:	83 c0 0b             	add    eax,0xb
c00014d2:	83 f8 0f             	cmp    eax,0xf
c00014d5:	76 07                	jbe    c00014de <iALLOc+0xa5>
c00014d7:	83 e0 f8             	and    eax,0xfffffff8
c00014da:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00014de:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00014e2:	0f af f5             	imul   esi,ebp
c00014e5:	eb 25                	jmp    c000150c <iALLOc+0xd3>
c00014e7:	8b 18                	mov    ebx,DWORD PTR [eax]
c00014e9:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c00014ec:	bb 10 00 00 00       	mov    ebx,0x10
c00014f1:	83 f9 0f             	cmp    ecx,0xf
c00014f4:	76 05                	jbe    c00014fb <iALLOc+0xc2>
c00014f6:	83 e1 f8             	and    ecx,0xfffffff8
c00014f9:	89 cb                	mov    ebx,ecx
c00014fb:	01 de                	add    esi,ebx
c00014fd:	83 c0 04             	add    eax,0x4
c0001500:	39 c7                	cmp    edi,eax
c0001502:	75 e3                	jne    c00014e7 <iALLOc+0xae>
c0001504:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000150c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001510:	8b 1d 54 64 02 c0    	mov    ebx,DWORD PTR ds:0xc0026454
c0001516:	83 ec 0c             	sub    esp,0xc
c0001519:	c7 05 54 64 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026454,0x0
c0001523:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001527:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c000152b:	50                   	push   eax
c000152c:	e8 7a fb ff ff       	call   c00010ab <dlmalloc>
c0001531:	83 c4 10             	add    esp,0x10
c0001534:	89 1d 54 64 02 c0    	mov    DWORD PTR ds:0xc0026454,ebx
c000153a:	85 c0                	test   eax,eax
c000153c:	0f 84 92 00 00 00    	je     c00015d4 <iALLOc+0x19b>
c0001542:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c0001545:	8d 78 f8             	lea    edi,[eax-0x8]
c0001548:	83 e3 fc             	and    ebx,0xfffffffc
c000154b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000154f:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0001554:	74 1e                	je     c0001574 <iALLOc+0x13b>
c0001556:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000155a:	89 d9                	mov    ecx,ebx
c000155c:	52                   	push   edx
c000155d:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0001561:	83 e9 04             	sub    ecx,0x4
c0001564:	51                   	push   ecx
c0001565:	6a 00                	push   0x0
c0001567:	50                   	push   eax
c0001568:	e8 83 ef ff ff       	call   c00004f0 <memset>
c000156d:	83 c4 10             	add    esp,0x10
c0001570:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001574:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0001579:	75 14                	jne    c000158f <iALLOc+0x156>
c000157b:	8d 04 37             	lea    eax,[edi+esi*1]
c000157e:	29 f3                	sub    ebx,esi
c0001580:	8d 48 08             	lea    ecx,[eax+0x8]
c0001583:	83 cb 01             	or     ebx,0x1
c0001586:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000158a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000158d:	89 f3                	mov    ebx,esi
c000158f:	31 c0                	xor    eax,eax
c0001591:	4d                   	dec    ebp
c0001592:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001595:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001599:	39 c5                	cmp    ebp,eax
c000159b:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c000159e:	74 2c                	je     c00015cc <iALLOc+0x193>
c00015a0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00015a4:	85 c9                	test   ecx,ecx
c00015a6:	75 15                	jne    c00015bd <iALLOc+0x184>
c00015a8:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00015ab:	8d 71 0b             	lea    esi,[ecx+0xb]
c00015ae:	b9 10 00 00 00       	mov    ecx,0x10
c00015b3:	83 fe 0f             	cmp    esi,0xf
c00015b6:	76 05                	jbe    c00015bd <iALLOc+0x184>
c00015b8:	83 e6 f8             	and    esi,0xfffffff8
c00015bb:	89 f1                	mov    ecx,esi
c00015bd:	89 ce                	mov    esi,ecx
c00015bf:	29 cb                	sub    ebx,ecx
c00015c1:	83 ce 01             	or     esi,0x1
c00015c4:	40                   	inc    eax
c00015c5:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c00015c8:	01 cf                	add    edi,ecx
c00015ca:	eb c6                	jmp    c0001592 <iALLOc+0x159>
c00015cc:	83 cb 01             	or     ebx,0x1
c00015cf:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c00015d2:	eb 08                	jmp    c00015dc <iALLOc+0x1a3>
c00015d4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00015dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00015e0:	83 c4 2c             	add    esp,0x2c
c00015e3:	5b                   	pop    ebx
c00015e4:	5e                   	pop    esi
c00015e5:	5f                   	pop    edi
c00015e6:	5d                   	pop    ebp
c00015e7:	c3                   	ret    

c00015e8 <dlrealloc>:
c00015e8:	55                   	push   ebp
c00015e9:	57                   	push   edi
c00015ea:	56                   	push   esi
c00015eb:	53                   	push   ebx
c00015ec:	83 ec 1c             	sub    esp,0x1c
c00015ef:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00015f3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00015f7:	85 db                	test   ebx,ebx
c00015f9:	75 10                	jne    c000160b <dlrealloc+0x23>
c00015fb:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00015ff:	83 c4 1c             	add    esp,0x1c
c0001602:	5b                   	pop    ebx
c0001603:	5e                   	pop    esi
c0001604:	5f                   	pop    edi
c0001605:	5d                   	pop    ebp
c0001606:	e9 a0 fa ff ff       	jmp    c00010ab <dlmalloc>
c000160b:	83 f8 df             	cmp    eax,0xffffffdf
c000160e:	76 07                	jbe    c0001617 <dlrealloc+0x2f>
c0001610:	31 db                	xor    ebx,ebx
c0001612:	e9 6a 01 00 00       	jmp    c0001781 <dlrealloc+0x199>
c0001617:	83 c0 0b             	add    eax,0xb
c000161a:	bd 10 00 00 00       	mov    ebp,0x10
c000161f:	83 f8 0f             	cmp    eax,0xf
c0001622:	76 05                	jbe    c0001629 <dlrealloc+0x41>
c0001624:	83 e0 f8             	and    eax,0xfffffff8
c0001627:	89 c5                	mov    ebp,eax
c0001629:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c000162c:	8d 7b f8             	lea    edi,[ebx-0x8]
c000162f:	89 c6                	mov    esi,eax
c0001631:	83 e6 fc             	and    esi,0xfffffffc
c0001634:	a8 02                	test   al,0x2
c0001636:	75 d8                	jne    c0001610 <dlrealloc+0x28>
c0001638:	39 f5                	cmp    ebp,esi
c000163a:	0f 86 04 01 00 00    	jbe    c0001744 <dlrealloc+0x15c>
c0001640:	8d 14 37             	lea    edx,[edi+esi*1]
c0001643:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0001646:	39 15 2c 61 02 c0    	cmp    DWORD PTR ds:0xc002612c,edx
c000164c:	75 33                	jne    c0001681 <dlrealloc+0x99>
c000164e:	83 e1 fc             	and    ecx,0xfffffffc
c0001651:	01 f1                	add    ecx,esi
c0001653:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001657:	8d 4d 10             	lea    ecx,[ebp+0x10]
c000165a:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c000165e:	77 49                	ja     c00016a9 <dlrealloc+0xc1>
c0001660:	01 ef                	add    edi,ebp
c0001662:	83 e0 01             	and    eax,0x1
c0001665:	09 e8                	or     eax,ebp
c0001667:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c000166a:	89 3d 2c 61 02 c0    	mov    DWORD PTR ds:0xc002612c,edi
c0001670:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001674:	29 e8                	sub    eax,ebp
c0001676:	83 c8 01             	or     eax,0x1
c0001679:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c000167c:	e9 00 01 00 00       	jmp    c0001781 <dlrealloc+0x199>
c0001681:	89 c8                	mov    eax,ecx
c0001683:	83 e0 fe             	and    eax,0xfffffffe
c0001686:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c000168b:	75 1c                	jne    c00016a9 <dlrealloc+0xc1>
c000168d:	83 e1 fc             	and    ecx,0xfffffffc
c0001690:	01 f1                	add    ecx,esi
c0001692:	39 cd                	cmp    ebp,ecx
c0001694:	77 13                	ja     c00016a9 <dlrealloc+0xc1>
c0001696:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001699:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000169c:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c000169f:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00016a2:	89 ce                	mov    esi,ecx
c00016a4:	e9 9b 00 00 00       	jmp    c0001744 <dlrealloc+0x15c>
c00016a9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00016ad:	8d 45 f9             	lea    eax,[ebp-0x7]
c00016b0:	83 ec 0c             	sub    esp,0xc
c00016b3:	50                   	push   eax
c00016b4:	e8 f2 f9 ff ff       	call   c00010ab <dlmalloc>
c00016b9:	83 c4 10             	add    esp,0x10
c00016bc:	85 c0                	test   eax,eax
c00016be:	0f 84 4c ff ff ff    	je     c0001610 <dlrealloc+0x28>
c00016c4:	8d 48 f8             	lea    ecx,[eax-0x8]
c00016c7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00016cb:	39 ca                	cmp    edx,ecx
c00016cd:	75 0a                	jne    c00016d9 <dlrealloc+0xf1>
c00016cf:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c00016d2:	83 e0 fc             	and    eax,0xfffffffc
c00016d5:	01 c6                	add    esi,eax
c00016d7:	eb 6b                	jmp    c0001744 <dlrealloc+0x15c>
c00016d9:	8d 4e fc             	lea    ecx,[esi-0x4]
c00016dc:	83 f9 27             	cmp    ecx,0x27
c00016df:	76 08                	jbe    c00016e9 <dlrealloc+0x101>
c00016e1:	89 de                	mov    esi,ebx
c00016e3:	89 c7                	mov    edi,eax
c00016e5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00016e7:	eb 43                	jmp    c000172c <dlrealloc+0x144>
c00016e9:	8b 13                	mov    edx,DWORD PTR [ebx]
c00016eb:	83 f9 13             	cmp    ecx,0x13
c00016ee:	89 10                	mov    DWORD PTR [eax],edx
c00016f0:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00016f3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00016f6:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00016f9:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00016fc:	76 2e                	jbe    c000172c <dlrealloc+0x144>
c00016fe:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001701:	83 f9 1b             	cmp    ecx,0x1b
c0001704:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001707:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000170a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000170d:	76 1d                	jbe    c000172c <dlrealloc+0x144>
c000170f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0001712:	83 f9 23             	cmp    ecx,0x23
c0001715:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001718:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000171b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000171e:	76 0c                	jbe    c000172c <dlrealloc+0x144>
c0001720:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0001723:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0001726:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001729:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000172c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001730:	83 ec 0c             	sub    esp,0xc
c0001733:	53                   	push   ebx
c0001734:	e8 1a f6 ff ff       	call   c0000d53 <dlfree>
c0001739:	83 c4 10             	add    esp,0x10
c000173c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001740:	89 c3                	mov    ebx,eax
c0001742:	eb 3d                	jmp    c0001781 <dlrealloc+0x199>
c0001744:	89 f2                	mov    edx,esi
c0001746:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001749:	29 ea                	sub    edx,ebp
c000174b:	83 e1 01             	and    ecx,0x1
c000174e:	8d 04 37             	lea    eax,[edi+esi*1]
c0001751:	83 fa 0f             	cmp    edx,0xf
c0001754:	77 0b                	ja     c0001761 <dlrealloc+0x179>
c0001756:	09 ce                	or     esi,ecx
c0001758:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c000175b:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c000175f:	eb 20                	jmp    c0001781 <dlrealloc+0x199>
c0001761:	01 ef                	add    edi,ebp
c0001763:	83 ec 0c             	sub    esp,0xc
c0001766:	09 cd                	or     ebp,ecx
c0001768:	83 ca 01             	or     edx,0x1
c000176b:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c000176e:	83 c7 08             	add    edi,0x8
c0001771:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c0001774:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001778:	57                   	push   edi
c0001779:	e8 d5 f5 ff ff       	call   c0000d53 <dlfree>
c000177e:	83 c4 10             	add    esp,0x10
c0001781:	83 c4 1c             	add    esp,0x1c
c0001784:	89 d8                	mov    eax,ebx
c0001786:	5b                   	pop    ebx
c0001787:	5e                   	pop    esi
c0001788:	5f                   	pop    edi
c0001789:	5d                   	pop    ebp
c000178a:	c3                   	ret    

c000178b <dlmemalign>:
c000178b:	55                   	push   ebp
c000178c:	57                   	push   edi
c000178d:	56                   	push   esi
c000178e:	53                   	push   ebx
c000178f:	83 ec 0c             	sub    esp,0xc
c0001792:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0001796:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000179a:	83 fa 08             	cmp    edx,0x8
c000179d:	77 10                	ja     c00017af <dlmemalign+0x24>
c000179f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00017a3:	83 c4 0c             	add    esp,0xc
c00017a6:	5b                   	pop    ebx
c00017a7:	5e                   	pop    esi
c00017a8:	5f                   	pop    edi
c00017a9:	5d                   	pop    ebp
c00017aa:	e9 fc f8 ff ff       	jmp    c00010ab <dlmalloc>
c00017af:	bf 10 00 00 00       	mov    edi,0x10
c00017b4:	83 fa 0f             	cmp    edx,0xf
c00017b7:	76 13                	jbe    c00017cc <dlmemalign+0x41>
c00017b9:	8d 4a ff             	lea    ecx,[edx-0x1]
c00017bc:	85 d1                	test   ecx,edx
c00017be:	75 04                	jne    c00017c4 <dlmemalign+0x39>
c00017c0:	89 d7                	mov    edi,edx
c00017c2:	eb 08                	jmp    c00017cc <dlmemalign+0x41>
c00017c4:	39 d7                	cmp    edi,edx
c00017c6:	73 04                	jae    c00017cc <dlmemalign+0x41>
c00017c8:	01 ff                	add    edi,edi
c00017ca:	eb f8                	jmp    c00017c4 <dlmemalign+0x39>
c00017cc:	83 f8 df             	cmp    eax,0xffffffdf
c00017cf:	76 07                	jbe    c00017d8 <dlmemalign+0x4d>
c00017d1:	31 c0                	xor    eax,eax
c00017d3:	e9 ce 00 00 00       	jmp    c00018a6 <dlmemalign+0x11b>
c00017d8:	83 c0 0b             	add    eax,0xb
c00017db:	bd 10 00 00 00       	mov    ebp,0x10
c00017e0:	83 f8 0f             	cmp    eax,0xf
c00017e3:	76 05                	jbe    c00017ea <dlmemalign+0x5f>
c00017e5:	83 e0 f8             	and    eax,0xfffffff8
c00017e8:	89 c5                	mov    ebp,eax
c00017ea:	83 ec 0c             	sub    esp,0xc
c00017ed:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c00017f1:	50                   	push   eax
c00017f2:	e8 b4 f8 ff ff       	call   c00010ab <dlmalloc>
c00017f7:	83 c4 10             	add    esp,0x10
c00017fa:	89 c1                	mov    ecx,eax
c00017fc:	85 c0                	test   eax,eax
c00017fe:	74 d1                	je     c00017d1 <dlmemalign+0x46>
c0001800:	31 d2                	xor    edx,edx
c0001802:	8d 70 f8             	lea    esi,[eax-0x8]
c0001805:	f7 f7                	div    edi
c0001807:	85 d2                	test   edx,edx
c0001809:	74 62                	je     c000186d <dlmemalign+0xe2>
c000180b:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c000180f:	89 f8                	mov    eax,edi
c0001811:	f7 d8                	neg    eax
c0001813:	21 c3                	and    ebx,eax
c0001815:	83 eb 08             	sub    ebx,0x8
c0001818:	89 d8                	mov    eax,ebx
c000181a:	29 f0                	sub    eax,esi
c000181c:	83 f8 0f             	cmp    eax,0xf
c000181f:	77 02                	ja     c0001823 <dlmemalign+0x98>
c0001821:	01 fb                	add    ebx,edi
c0001823:	89 d8                	mov    eax,ebx
c0001825:	29 f0                	sub    eax,esi
c0001827:	89 c6                	mov    esi,eax
c0001829:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000182c:	89 c2                	mov    edx,eax
c000182e:	83 e2 fc             	and    edx,0xfffffffc
c0001831:	29 f2                	sub    edx,esi
c0001833:	a8 02                	test   al,0x2
c0001835:	74 10                	je     c0001847 <dlmemalign+0xbc>
c0001837:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c000183a:	83 ca 02             	or     edx,0x2
c000183d:	8d 43 08             	lea    eax,[ebx+0x8]
c0001840:	89 33                	mov    DWORD PTR [ebx],esi
c0001842:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001845:	eb 5f                	jmp    c00018a6 <dlmemalign+0x11b>
c0001847:	83 ec 0c             	sub    esp,0xc
c000184a:	89 d0                	mov    eax,edx
c000184c:	83 c8 01             	or     eax,0x1
c000184f:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0001852:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001857:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000185a:	83 e0 01             	and    eax,0x1
c000185d:	09 f0                	or     eax,esi
c000185f:	89 de                	mov    esi,ebx
c0001861:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c0001864:	51                   	push   ecx
c0001865:	e8 e9 f4 ff ff       	call   c0000d53 <dlfree>
c000186a:	83 c4 10             	add    esp,0x10
c000186d:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001870:	a8 02                	test   al,0x2
c0001872:	75 2f                	jne    c00018a3 <dlmemalign+0x118>
c0001874:	83 e0 fc             	and    eax,0xfffffffc
c0001877:	8d 55 10             	lea    edx,[ebp+0x10]
c000187a:	39 c2                	cmp    edx,eax
c000187c:	73 25                	jae    c00018a3 <dlmemalign+0x118>
c000187e:	8d 14 2e             	lea    edx,[esi+ebp*1]
c0001881:	83 ec 0c             	sub    esp,0xc
c0001884:	29 e8                	sub    eax,ebp
c0001886:	83 c2 08             	add    edx,0x8
c0001889:	83 c8 01             	or     eax,0x1
c000188c:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c000188f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001892:	83 e0 01             	and    eax,0x1
c0001895:	09 c5                	or     ebp,eax
c0001897:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c000189a:	52                   	push   edx
c000189b:	e8 b3 f4 ff ff       	call   c0000d53 <dlfree>
c00018a0:	83 c4 10             	add    esp,0x10
c00018a3:	8d 46 08             	lea    eax,[esi+0x8]
c00018a6:	83 c4 0c             	add    esp,0xc
c00018a9:	5b                   	pop    ebx
c00018aa:	5e                   	pop    esi
c00018ab:	5f                   	pop    edi
c00018ac:	5d                   	pop    ebp
c00018ad:	c3                   	ret    

c00018ae <dlcalloc>:
c00018ae:	53                   	push   ebx
c00018af:	83 ec 14             	sub    esp,0x14
c00018b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00018b6:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c00018bb:	50                   	push   eax
c00018bc:	e8 ea f7 ff ff       	call   c00010ab <dlmalloc>
c00018c1:	83 c4 10             	add    esp,0x10
c00018c4:	89 c3                	mov    ebx,eax
c00018c6:	85 c0                	test   eax,eax
c00018c8:	74 77                	je     c0001941 <dlcalloc+0x93>
c00018ca:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c00018cd:	89 d0                	mov    eax,edx
c00018cf:	83 e0 fc             	and    eax,0xfffffffc
c00018d2:	80 e2 02             	and    dl,0x2
c00018d5:	75 5a                	jne    c0001931 <dlcalloc+0x83>
c00018d7:	83 e8 04             	sub    eax,0x4
c00018da:	83 f8 27             	cmp    eax,0x27
c00018dd:	76 03                	jbe    c00018e2 <dlcalloc+0x34>
c00018df:	51                   	push   ecx
c00018e0:	eb 53                	jmp    c0001935 <dlcalloc+0x87>
c00018e2:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00018e8:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00018ef:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00018f6:	83 f8 13             	cmp    eax,0x13
c00018f9:	76 46                	jbe    c0001941 <dlcalloc+0x93>
c00018fb:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001902:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001909:	83 f8 1b             	cmp    eax,0x1b
c000190c:	76 33                	jbe    c0001941 <dlcalloc+0x93>
c000190e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001915:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000191c:	83 f8 23             	cmp    eax,0x23
c000191f:	76 20                	jbe    c0001941 <dlcalloc+0x93>
c0001921:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001928:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000192f:	eb 10                	jmp    c0001941 <dlcalloc+0x93>
c0001931:	83 e8 08             	sub    eax,0x8
c0001934:	52                   	push   edx
c0001935:	50                   	push   eax
c0001936:	6a 00                	push   0x0
c0001938:	53                   	push   ebx
c0001939:	e8 b2 eb ff ff       	call   c00004f0 <memset>
c000193e:	83 c4 10             	add    esp,0x10
c0001941:	89 d8                	mov    eax,ebx
c0001943:	83 c4 08             	add    esp,0x8
c0001946:	5b                   	pop    ebx
c0001947:	c3                   	ret    

c0001948 <dlcfree>:
c0001948:	e9 06 f4 ff ff       	jmp    c0000d53 <dlfree>

c000194d <dlindependent_calloc>:
c000194d:	83 ec 28             	sub    esp,0x28
c0001950:	b9 03 00 00 00       	mov    ecx,0x3
c0001955:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001959:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000195d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0001961:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0001965:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001969:	e8 cb fa ff ff       	call   c0001439 <iALLOc>
c000196e:	83 c4 2c             	add    esp,0x2c
c0001971:	c3                   	ret    

c0001972 <dlindependent_comalloc>:
c0001972:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001976:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000197a:	31 c9                	xor    ecx,ecx
c000197c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001980:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001984:	e9 b0 fa ff ff       	jmp    c0001439 <iALLOc>

c0001989 <dlvalloc>:
c0001989:	83 ec 0c             	sub    esp,0xc
c000198c:	83 3d 00 61 02 c0 00 	cmp    DWORD PTR ds:0xc0026100,0x0
c0001993:	75 0a                	jne    c000199f <dlvalloc+0x16>
c0001995:	b8 00 61 02 c0       	mov    eax,0xc0026100
c000199a:	e8 cd f2 ff ff       	call   c0000c6c <malloc_consolidate>
c000199f:	50                   	push   eax
c00019a0:	50                   	push   eax
c00019a1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00019a5:	ff 35 5c 64 02 c0    	push   DWORD PTR ds:0xc002645c
c00019ab:	e8 db fd ff ff       	call   c000178b <dlmemalign>
c00019b0:	83 c4 1c             	add    esp,0x1c
c00019b3:	c3                   	ret    

c00019b4 <dlpvalloc>:
c00019b4:	83 ec 0c             	sub    esp,0xc
c00019b7:	83 3d 00 61 02 c0 00 	cmp    DWORD PTR ds:0xc0026100,0x0
c00019be:	75 0a                	jne    c00019ca <dlpvalloc+0x16>
c00019c0:	b8 00 61 02 c0       	mov    eax,0xc0026100
c00019c5:	e8 a2 f2 ff ff       	call   c0000c6c <malloc_consolidate>
c00019ca:	a1 5c 64 02 c0       	mov    eax,ds:0xc002645c
c00019cf:	89 c1                	mov    ecx,eax
c00019d1:	52                   	push   edx
c00019d2:	f7 d9                	neg    ecx
c00019d4:	52                   	push   edx
c00019d5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00019d9:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c00019dd:	21 ca                	and    edx,ecx
c00019df:	52                   	push   edx
c00019e0:	50                   	push   eax
c00019e1:	e8 a5 fd ff ff       	call   c000178b <dlmemalign>
c00019e6:	83 c4 1c             	add    esp,0x1c
c00019e9:	c3                   	ret    

c00019ea <dlmalloc_trim>:
c00019ea:	b8 00 61 02 c0       	mov    eax,0xc0026100
c00019ef:	e8 78 f2 ff ff       	call   c0000c6c <malloc_consolidate>
c00019f4:	31 c0                	xor    eax,eax
c00019f6:	c3                   	ret    

c00019f7 <dlmalloc_usable_size>:
c00019f7:	53                   	push   ebx
c00019f8:	31 c0                	xor    eax,eax
c00019fa:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00019fe:	85 c9                	test   ecx,ecx
c0001a00:	74 24                	je     c0001a26 <dlmalloc_usable_size+0x2f>
c0001a02:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a05:	f6 c2 02             	test   dl,0x2
c0001a08:	74 08                	je     c0001a12 <dlmalloc_usable_size+0x1b>
c0001a0a:	83 e2 fc             	and    edx,0xfffffffc
c0001a0d:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a10:	eb 14                	jmp    c0001a26 <dlmalloc_usable_size+0x2f>
c0001a12:	89 d3                	mov    ebx,edx
c0001a14:	31 c0                	xor    eax,eax
c0001a16:	83 e3 fe             	and    ebx,0xfffffffe
c0001a19:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a1e:	74 06                	je     c0001a26 <dlmalloc_usable_size+0x2f>
c0001a20:	83 e2 fc             	and    edx,0xfffffffc
c0001a23:	8d 42 fc             	lea    eax,[edx-0x4]
c0001a26:	5b                   	pop    ebx
c0001a27:	c3                   	ret    

c0001a28 <dlmallinfo>:
c0001a28:	55                   	push   ebp
c0001a29:	57                   	push   edi
c0001a2a:	56                   	push   esi
c0001a2b:	53                   	push   ebx
c0001a2c:	83 ec 08             	sub    esp,0x8
c0001a2f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001a33:	83 3d 2c 61 02 c0 00 	cmp    DWORD PTR ds:0xc002612c,0x0
c0001a3a:	75 0a                	jne    c0001a46 <dlmallinfo+0x1e>
c0001a3c:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001a41:	e8 26 f2 ff ff       	call   c0000c6c <malloc_consolidate>
c0001a46:	a1 2c 61 02 c0       	mov    eax,ds:0xc002612c
c0001a4b:	31 ed                	xor    ebp,ebp
c0001a4d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001a50:	31 c9                	xor    ecx,ecx
c0001a52:	83 e0 fc             	and    eax,0xfffffffc
c0001a55:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a59:	31 c0                	xor    eax,eax
c0001a5b:	8b 14 85 04 61 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9efc]
c0001a62:	85 d2                	test   edx,edx
c0001a64:	74 0e                	je     c0001a74 <dlmallinfo+0x4c>
c0001a66:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001a69:	45                   	inc    ebp
c0001a6a:	83 e6 fc             	and    esi,0xfffffffc
c0001a6d:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001a70:	01 f1                	add    ecx,esi
c0001a72:	eb ee                	jmp    c0001a62 <dlmallinfo+0x3a>
c0001a74:	40                   	inc    eax
c0001a75:	83 f8 0a             	cmp    eax,0xa
c0001a78:	75 e1                	jne    c0001a5b <dlmallinfo+0x33>
c0001a7a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a7e:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001a85:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001a88:	b8 34 61 02 c0       	mov    eax,0xc0026134
c0001a8d:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001a90:	39 f0                	cmp    eax,esi
c0001a92:	74 10                	je     c0001aa4 <dlmallinfo+0x7c>
c0001a94:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001a97:	ff 04 24             	inc    DWORD PTR [esp]
c0001a9a:	83 e7 fc             	and    edi,0xfffffffc
c0001a9d:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001aa0:	01 fa                	add    edx,edi
c0001aa2:	eb ec                	jmp    c0001a90 <dlmallinfo+0x68>
c0001aa4:	83 c0 08             	add    eax,0x8
c0001aa7:	3d 2c 64 02 c0       	cmp    eax,0xc002642c
c0001aac:	75 df                	jne    c0001a8d <dlmallinfo+0x65>
c0001aae:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001ab1:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001ab4:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001ab7:	a1 68 64 02 c0       	mov    eax,ds:0xc0026468
c0001abc:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001abf:	89 03                	mov    DWORD PTR [ebx],eax
c0001ac1:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001ac4:	8b 35 50 64 02 c0    	mov    esi,DWORD PTR ds:0xc0026450
c0001aca:	29 d0                	sub    eax,edx
c0001acc:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001acf:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001ad2:	8b 35 64 64 02 c0    	mov    esi,DWORD PTR ds:0xc0026464
c0001ad8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001adc:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001adf:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001ae2:	8b 35 74 64 02 c0    	mov    esi,DWORD PTR ds:0xc0026474
c0001ae8:	89 d8                	mov    eax,ebx
c0001aea:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001aed:	83 c4 08             	add    esp,0x8
c0001af0:	5b                   	pop    ebx
c0001af1:	5e                   	pop    esi
c0001af2:	5f                   	pop    edi
c0001af3:	5d                   	pop    ebp
c0001af4:	c2 04 00             	ret    0x4

c0001af7 <dlmalloc_stats>:
c0001af7:	83 ec 30             	sub    esp,0x30
c0001afa:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001afe:	50                   	push   eax
c0001aff:	e8 24 ff ff ff       	call   c0001a28 <dlmallinfo>
c0001b04:	83 c4 30             	add    esp,0x30
c0001b07:	c3                   	ret    

c0001b08 <dlmallopt>:
c0001b08:	56                   	push   esi
c0001b09:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001b0e:	53                   	push   ebx
c0001b0f:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b13:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b17:	e8 50 f1 ff ff       	call   c0000c6c <malloc_consolidate>
c0001b1c:	8d 46 04             	lea    eax,[esi+0x4]
c0001b1f:	83 f8 05             	cmp    eax,0x5
c0001b22:	77 67                	ja     c0001b8b <dlmallopt+0x83>
c0001b24:	ff 24 85 04 06 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdf9fc]
c0001b2b:	83 fb 50             	cmp    ebx,0x50
c0001b2e:	77 5b                	ja     c0001b8b <dlmallopt+0x83>
c0001b30:	ba 08 00 00 00       	mov    edx,0x8
c0001b35:	85 db                	test   ebx,ebx
c0001b37:	74 12                	je     c0001b4b <dlmallopt+0x43>
c0001b39:	83 c3 0b             	add    ebx,0xb
c0001b3c:	ba 10 00 00 00       	mov    edx,0x10
c0001b41:	83 fb 0f             	cmp    ebx,0xf
c0001b44:	76 05                	jbe    c0001b4b <dlmallopt+0x43>
c0001b46:	89 da                	mov    edx,ebx
c0001b48:	83 e2 f8             	and    edx,0xfffffff8
c0001b4b:	a1 00 61 02 c0       	mov    eax,ds:0xc0026100
c0001b50:	83 e0 03             	and    eax,0x3
c0001b53:	09 d0                	or     eax,edx
c0001b55:	a3 00 61 02 c0       	mov    ds:0xc0026100,eax
c0001b5a:	eb 31                	jmp    c0001b8d <dlmallopt+0x85>
c0001b5c:	89 1d 44 64 02 c0    	mov    DWORD PTR ds:0xc0026444,ebx
c0001b62:	eb 06                	jmp    c0001b6a <dlmallopt+0x62>
c0001b64:	89 1d 48 64 02 c0    	mov    DWORD PTR ds:0xc0026448,ebx
c0001b6a:	be 01 00 00 00       	mov    esi,0x1
c0001b6f:	eb 1c                	jmp    c0001b8d <dlmallopt+0x85>
c0001b71:	89 1d 4c 64 02 c0    	mov    DWORD PTR ds:0xc002644c,ebx
c0001b77:	eb f1                	jmp    c0001b6a <dlmallopt+0x62>
c0001b79:	31 f6                	xor    esi,esi
c0001b7b:	85 db                	test   ebx,ebx
c0001b7d:	75 0e                	jne    c0001b8d <dlmallopt+0x85>
c0001b7f:	c7 05 54 64 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026454,0x0
c0001b89:	eb df                	jmp    c0001b6a <dlmallopt+0x62>
c0001b8b:	31 f6                	xor    esi,esi
c0001b8d:	89 f0                	mov    eax,esi
c0001b8f:	5b                   	pop    ebx
c0001b90:	5e                   	pop    esi
c0001b91:	c3                   	ret    
c0001b92:	66 90                	xchg   ax,ax

c0001b94 <isblank>:
c0001b94:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001b99:	74 09                	je     c0001ba4 <isblank+0x10>
c0001b9b:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001ba0:	75 0a                	jne    c0001bac <isblank+0x18>
c0001ba2:	66 90                	xchg   ax,ax
c0001ba4:	b8 01 00 00 00       	mov    eax,0x1
c0001ba9:	c3                   	ret    
c0001baa:	66 90                	xchg   ax,ax
c0001bac:	b8 00 00 00 00       	mov    eax,0x0
c0001bb1:	c3                   	ret    
c0001bb2:	66 90                	xchg   ax,ax

c0001bb4 <iscntrl>:
c0001bb4:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001bb9:	7e 09                	jle    c0001bc4 <iscntrl+0x10>
c0001bbb:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001bc0:	75 0a                	jne    c0001bcc <iscntrl+0x18>
c0001bc2:	66 90                	xchg   ax,ax
c0001bc4:	b8 01 00 00 00       	mov    eax,0x1
c0001bc9:	c3                   	ret    
c0001bca:	66 90                	xchg   ax,ax
c0001bcc:	b8 00 00 00 00       	mov    eax,0x0
c0001bd1:	c3                   	ret    
c0001bd2:	66 90                	xchg   ax,ax

c0001bd4 <isdigit>:
c0001bd4:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001bd9:	7e 0d                	jle    c0001be8 <isdigit+0x14>
c0001bdb:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001be0:	7f 06                	jg     c0001be8 <isdigit+0x14>
c0001be2:	b8 01 00 00 00       	mov    eax,0x1
c0001be7:	c3                   	ret    
c0001be8:	b8 00 00 00 00       	mov    eax,0x0
c0001bed:	c3                   	ret    
c0001bee:	66 90                	xchg   ax,ax

c0001bf0 <islower>:
c0001bf0:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001bf5:	7e 0d                	jle    c0001c04 <islower+0x14>
c0001bf7:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001bfc:	7f 06                	jg     c0001c04 <islower+0x14>
c0001bfe:	b8 01 00 00 00       	mov    eax,0x1
c0001c03:	c3                   	ret    
c0001c04:	b8 00 00 00 00       	mov    eax,0x0
c0001c09:	c3                   	ret    
c0001c0a:	66 90                	xchg   ax,ax

c0001c0c <isspace>:
c0001c0c:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001c11:	7c 19                	jl     c0001c2c <isspace+0x20>
c0001c13:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001c18:	7e 0a                	jle    c0001c24 <isspace+0x18>
c0001c1a:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001c1f:	75 0b                	jne    c0001c2c <isspace+0x20>
c0001c21:	8d 76 00             	lea    esi,[esi+0x0]
c0001c24:	b8 01 00 00 00       	mov    eax,0x1
c0001c29:	c3                   	ret    
c0001c2a:	66 90                	xchg   ax,ax
c0001c2c:	b8 00 00 00 00       	mov    eax,0x0
c0001c31:	c3                   	ret    
c0001c32:	66 90                	xchg   ax,ax

c0001c34 <isupper>:
c0001c34:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001c39:	7e 0d                	jle    c0001c48 <isupper+0x14>
c0001c3b:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001c40:	7f 06                	jg     c0001c48 <isupper+0x14>
c0001c42:	b8 01 00 00 00       	mov    eax,0x1
c0001c47:	c3                   	ret    
c0001c48:	b8 00 00 00 00       	mov    eax,0x0
c0001c4d:	c3                   	ret    
c0001c4e:	66 90                	xchg   ax,ax

c0001c50 <isalpha>:
c0001c50:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c54:	e8 db ff ff ff       	call   c0001c34 <isupper>
c0001c59:	83 c4 04             	add    esp,0x4
c0001c5c:	85 c0                	test   eax,eax
c0001c5e:	75 10                	jne    c0001c70 <isalpha+0x20>
c0001c60:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c64:	e8 87 ff ff ff       	call   c0001bf0 <islower>
c0001c69:	83 c4 04             	add    esp,0x4
c0001c6c:	85 c0                	test   eax,eax
c0001c6e:	74 08                	je     c0001c78 <isalpha+0x28>
c0001c70:	b8 01 00 00 00       	mov    eax,0x1
c0001c75:	c3                   	ret    
c0001c76:	66 90                	xchg   ax,ax
c0001c78:	b8 00 00 00 00       	mov    eax,0x0
c0001c7d:	c3                   	ret    
c0001c7e:	66 90                	xchg   ax,ax

c0001c80 <isalnum>:
c0001c80:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c84:	e8 c7 ff ff ff       	call   c0001c50 <isalpha>
c0001c89:	83 c4 04             	add    esp,0x4
c0001c8c:	85 c0                	test   eax,eax
c0001c8e:	75 10                	jne    c0001ca0 <isalnum+0x20>
c0001c90:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c94:	e8 3b ff ff ff       	call   c0001bd4 <isdigit>
c0001c99:	83 c4 04             	add    esp,0x4
c0001c9c:	85 c0                	test   eax,eax
c0001c9e:	74 08                	je     c0001ca8 <isalnum+0x28>
c0001ca0:	b8 01 00 00 00       	mov    eax,0x1
c0001ca5:	c3                   	ret    
c0001ca6:	66 90                	xchg   ax,ax
c0001ca8:	b8 00 00 00 00       	mov    eax,0x0
c0001cad:	c3                   	ret    
c0001cae:	66 90                	xchg   ax,ax

c0001cb0 <ispunct>:
c0001cb0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cb4:	e8 c7 ff ff ff       	call   c0001c80 <isalnum>
c0001cb9:	83 c4 04             	add    esp,0x4
c0001cbc:	85 c0                	test   eax,eax
c0001cbe:	75 28                	jne    c0001ce8 <ispunct+0x38>
c0001cc0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cc4:	e8 43 ff ff ff       	call   c0001c0c <isspace>
c0001cc9:	83 c4 04             	add    esp,0x4
c0001ccc:	85 c0                	test   eax,eax
c0001cce:	75 18                	jne    c0001ce8 <ispunct+0x38>
c0001cd0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cd4:	e8 db fe ff ff       	call   c0001bb4 <iscntrl>
c0001cd9:	83 c4 04             	add    esp,0x4
c0001cdc:	85 c0                	test   eax,eax
c0001cde:	75 08                	jne    c0001ce8 <ispunct+0x38>
c0001ce0:	b8 01 00 00 00       	mov    eax,0x1
c0001ce5:	c3                   	ret    
c0001ce6:	66 90                	xchg   ax,ax
c0001ce8:	b8 00 00 00 00       	mov    eax,0x0
c0001ced:	c3                   	ret    
c0001cee:	66 90                	xchg   ax,ax

c0001cf0 <isgraph>:
c0001cf0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cf4:	e8 87 ff ff ff       	call   c0001c80 <isalnum>
c0001cf9:	83 c4 04             	add    esp,0x4
c0001cfc:	85 c0                	test   eax,eax
c0001cfe:	75 10                	jne    c0001d10 <isgraph+0x20>
c0001d00:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d04:	e8 a7 ff ff ff       	call   c0001cb0 <ispunct>
c0001d09:	83 c4 04             	add    esp,0x4
c0001d0c:	85 c0                	test   eax,eax
c0001d0e:	74 08                	je     c0001d18 <isgraph+0x28>
c0001d10:	b8 01 00 00 00       	mov    eax,0x1
c0001d15:	c3                   	ret    
c0001d16:	66 90                	xchg   ax,ax
c0001d18:	b8 00 00 00 00       	mov    eax,0x0
c0001d1d:	c3                   	ret    
c0001d1e:	66 90                	xchg   ax,ax

c0001d20 <isprint>:
c0001d20:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d24:	e8 c7 ff ff ff       	call   c0001cf0 <isgraph>
c0001d29:	83 c4 04             	add    esp,0x4
c0001d2c:	85 c0                	test   eax,eax
c0001d2e:	75 08                	jne    c0001d38 <isprint+0x18>
c0001d30:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001d35:	75 09                	jne    c0001d40 <isprint+0x20>
c0001d37:	90                   	nop
c0001d38:	b8 01 00 00 00       	mov    eax,0x1
c0001d3d:	c3                   	ret    
c0001d3e:	66 90                	xchg   ax,ax
c0001d40:	b8 00 00 00 00       	mov    eax,0x0
c0001d45:	c3                   	ret    
c0001d46:	66 90                	xchg   ax,ax

c0001d48 <isxdigit>:
c0001d48:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d4c:	e8 83 fe ff ff       	call   c0001bd4 <isdigit>
c0001d51:	83 c4 04             	add    esp,0x4
c0001d54:	85 c0                	test   eax,eax
c0001d56:	75 20                	jne    c0001d78 <isxdigit+0x30>
c0001d58:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001d5d:	7e 09                	jle    c0001d68 <isxdigit+0x20>
c0001d5f:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001d64:	7e 12                	jle    c0001d78 <isxdigit+0x30>
c0001d66:	66 90                	xchg   ax,ax
c0001d68:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001d6d:	7e 11                	jle    c0001d80 <isxdigit+0x38>
c0001d6f:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001d74:	7f 0a                	jg     c0001d80 <isxdigit+0x38>
c0001d76:	66 90                	xchg   ax,ax
c0001d78:	b8 01 00 00 00       	mov    eax,0x1
c0001d7d:	c3                   	ret    
c0001d7e:	66 90                	xchg   ax,ax
c0001d80:	b8 00 00 00 00       	mov    eax,0x0
c0001d85:	c3                   	ret    

c0001d86 <disk_status>:
c0001d86:	31 c0                	xor    eax,eax
c0001d88:	c3                   	ret    

c0001d89 <disk_initialize>:
c0001d89:	31 c0                	xor    eax,eax
c0001d8b:	c3                   	ret    

c0001d8c <disk_read>:
c0001d8c:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001d91:	0f b6 04 85 20 c8 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd37e0]
c0001d99:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001d9d:	e9 da 7d 01 00       	jmp    c0019b7c <fatWrapperReadDisk>

c0001da2 <disk_write>:
c0001da2:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001da7:	0f b6 04 85 20 c8 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd37e0]
c0001daf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001db3:	e9 04 7e 01 00       	jmp    c0019bbc <fatWrapperWriteDisk>

c0001db8 <disk_ioctl>:
c0001db8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001dbd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001dc1:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001dc6:	0f b6 04 85 20 c8 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd37e0]
c0001dce:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001dd2:	e9 25 7e 01 00       	jmp    c0019bfc <fatWrapperIoctl>

c0001dd7 <ld_word>:
c0001dd7:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001ddb:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001dde:	c1 e2 08             	shl    edx,0x8
c0001de1:	09 d0                	or     eax,edx
c0001de3:	c3                   	ret    

c0001de4 <ld_dword>:
c0001de4:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001de8:	89 d1                	mov    ecx,edx
c0001dea:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001dee:	c1 e1 08             	shl    ecx,0x8
c0001df1:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001df4:	09 ca                	or     edx,ecx
c0001df6:	c1 e2 08             	shl    edx,0x8
c0001df9:	09 d0                	or     eax,edx
c0001dfb:	c3                   	ret    

c0001dfc <st_word>:
c0001dfc:	66 89 10             	mov    WORD PTR [eax],dx
c0001dff:	c3                   	ret    

c0001e00 <st_dword>:
c0001e00:	89 10                	mov    DWORD PTR [eax],edx
c0001e02:	c3                   	ret    

c0001e03 <mem_cpy>:
c0001e03:	85 c9                	test   ecx,ecx
c0001e05:	74 10                	je     c0001e17 <mem_cpy+0x14>
c0001e07:	57                   	push   edi
c0001e08:	01 c1                	add    ecx,eax
c0001e0a:	56                   	push   esi
c0001e0b:	89 c7                	mov    edi,eax
c0001e0d:	89 d6                	mov    esi,edx
c0001e0f:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001e10:	39 f9                	cmp    ecx,edi
c0001e12:	75 fb                	jne    c0001e0f <mem_cpy+0xc>
c0001e14:	5e                   	pop    esi
c0001e15:	5f                   	pop    edi
c0001e16:	c3                   	ret    
c0001e17:	c3                   	ret    

c0001e18 <mem_set>:
c0001e18:	01 c1                	add    ecx,eax
c0001e1a:	40                   	inc    eax
c0001e1b:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001e1e:	39 c8                	cmp    eax,ecx
c0001e20:	75 f8                	jne    c0001e1a <mem_set+0x2>
c0001e22:	c3                   	ret    

c0001e23 <mem_cmp>:
c0001e23:	57                   	push   edi
c0001e24:	56                   	push   esi
c0001e25:	89 c6                	mov    esi,eax
c0001e27:	53                   	push   ebx
c0001e28:	46                   	inc    esi
c0001e29:	42                   	inc    edx
c0001e2a:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001e2e:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001e32:	29 fb                	sub    ebx,edi
c0001e34:	89 cf                	mov    edi,ecx
c0001e36:	29 f7                	sub    edi,esi
c0001e38:	01 c7                	add    edi,eax
c0001e3a:	74 04                	je     c0001e40 <mem_cmp+0x1d>
c0001e3c:	85 db                	test   ebx,ebx
c0001e3e:	74 e8                	je     c0001e28 <mem_cmp+0x5>
c0001e40:	89 d8                	mov    eax,ebx
c0001e42:	5b                   	pop    ebx
c0001e43:	5e                   	pop    esi
c0001e44:	5f                   	pop    edi
c0001e45:	c3                   	ret    

c0001e46 <chk_chr>:
c0001e46:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001e49:	85 c9                	test   ecx,ecx
c0001e4b:	74 07                	je     c0001e54 <chk_chr+0xe>
c0001e4d:	39 d1                	cmp    ecx,edx
c0001e4f:	74 03                	je     c0001e54 <chk_chr+0xe>
c0001e51:	40                   	inc    eax
c0001e52:	eb f2                	jmp    c0001e46 <chk_chr>
c0001e54:	89 c8                	mov    eax,ecx
c0001e56:	c3                   	ret    

c0001e57 <dbc_1st>:
c0001e57:	31 c0                	xor    eax,eax
c0001e59:	c3                   	ret    

c0001e5a <dbc_2nd>:
c0001e5a:	31 c0                	xor    eax,eax
c0001e5c:	c3                   	ret    

c0001e5d <tchar2uni>:
c0001e5d:	57                   	push   edi
c0001e5e:	56                   	push   esi
c0001e5f:	53                   	push   ebx
c0001e60:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001e62:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001e64:	8d 73 01             	lea    esi,[ebx+0x1]
c0001e67:	f6 c1 80             	test   cl,0x80
c0001e6a:	75 0a                	jne    c0001e76 <tchar2uni+0x19>
c0001e6c:	0f b6 d1             	movzx  edx,cl
c0001e6f:	89 f3                	mov    ebx,esi
c0001e71:	e9 b2 00 00 00       	jmp    c0001f28 <tchar2uni+0xcb>
c0001e76:	89 ca                	mov    edx,ecx
c0001e78:	81 e2 e0 00 00 00    	and    edx,0xe0
c0001e7e:	81 fa c0 00 00 00    	cmp    edx,0xc0
c0001e84:	89 ca                	mov    edx,ecx
c0001e86:	75 0a                	jne    c0001e92 <tchar2uni+0x35>
c0001e88:	83 e2 1f             	and    edx,0x1f
c0001e8b:	b9 01 00 00 00       	mov    ecx,0x1
c0001e90:	eb 37                	jmp    c0001ec9 <tchar2uni+0x6c>
c0001e92:	81 e2 f0 00 00 00    	and    edx,0xf0
c0001e98:	81 fa e0 00 00 00    	cmp    edx,0xe0
c0001e9e:	75 0c                	jne    c0001eac <tchar2uni+0x4f>
c0001ea0:	89 ca                	mov    edx,ecx
c0001ea2:	b9 02 00 00 00       	mov    ecx,0x2
c0001ea7:	83 e2 0f             	and    edx,0xf
c0001eaa:	eb 1d                	jmp    c0001ec9 <tchar2uni+0x6c>
c0001eac:	89 cf                	mov    edi,ecx
c0001eae:	83 ca ff             	or     edx,0xffffffff
c0001eb1:	81 e7 f8 00 00 00    	and    edi,0xf8
c0001eb7:	81 ff f0 00 00 00    	cmp    edi,0xf0
c0001ebd:	75 70                	jne    c0001f2f <tchar2uni+0xd2>
c0001ebf:	89 ca                	mov    edx,ecx
c0001ec1:	b9 03 00 00 00       	mov    ecx,0x3
c0001ec6:	83 e2 07             	and    edx,0x7
c0001ec9:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001ecd:	46                   	inc    esi
c0001ece:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001ed1:	89 cf                	mov    edi,ecx
c0001ed3:	81 e7 c0 00 00 00    	and    edi,0xc0
c0001ed9:	83 c7 80             	add    edi,0xffffff80
c0001edc:	75 4e                	jne    c0001f2c <tchar2uni+0xcf>
c0001ede:	c1 e2 06             	shl    edx,0x6
c0001ee1:	83 e1 3f             	and    ecx,0x3f
c0001ee4:	09 ca                	or     edx,ecx
c0001ee6:	39 de                	cmp    esi,ebx
c0001ee8:	75 e3                	jne    c0001ecd <tchar2uni+0x70>
c0001eea:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001eed:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001ef3:	77 37                	ja     c0001f2c <tchar2uni+0xcf>
c0001ef5:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001efb:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001f01:	76 29                	jbe    c0001f2c <tchar2uni+0xcf>
c0001f03:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001f09:	76 1d                	jbe    c0001f28 <tchar2uni+0xcb>
c0001f0b:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001f11:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001f17:	c1 e1 06             	shl    ecx,0x6
c0001f1a:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001f20:	09 ca                	or     edx,ecx
c0001f22:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001f28:	89 18                	mov    DWORD PTR [eax],ebx
c0001f2a:	eb 03                	jmp    c0001f2f <tchar2uni+0xd2>
c0001f2c:	83 ca ff             	or     edx,0xffffffff
c0001f2f:	5b                   	pop    ebx
c0001f30:	89 d0                	mov    eax,edx
c0001f32:	5e                   	pop    esi
c0001f33:	5f                   	pop    edi
c0001f34:	c3                   	ret    

c0001f35 <put_utf>:
c0001f35:	53                   	push   ebx
c0001f36:	83 f8 7f             	cmp    eax,0x7f
c0001f39:	89 c3                	mov    ebx,eax
c0001f3b:	b0 00                	mov    al,0x0
c0001f3d:	77 11                	ja     c0001f50 <put_utf+0x1b>
c0001f3f:	85 c9                	test   ecx,ecx
c0001f41:	0f 84 e5 00 00 00    	je     c000202c <put_utf+0xf7>
c0001f47:	88 1a                	mov    BYTE PTR [edx],bl
c0001f49:	b0 01                	mov    al,0x1
c0001f4b:	e9 dc 00 00 00       	jmp    c000202c <put_utf+0xf7>
c0001f50:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001f56:	77 23                	ja     c0001f7b <put_utf+0x46>
c0001f58:	83 f9 01             	cmp    ecx,0x1
c0001f5b:	0f 86 cb 00 00 00    	jbe    c000202c <put_utf+0xf7>
c0001f61:	89 d8                	mov    eax,ebx
c0001f63:	83 e3 3f             	and    ebx,0x3f
c0001f66:	c1 e8 06             	shr    eax,0x6
c0001f69:	83 cb 80             	or     ebx,0xffffff80
c0001f6c:	83 c8 c0             	or     eax,0xffffffc0
c0001f6f:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001f72:	88 02                	mov    BYTE PTR [edx],al
c0001f74:	b0 02                	mov    al,0x2
c0001f76:	e9 b1 00 00 00       	jmp    c000202c <put_utf+0xf7>
c0001f7b:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001f81:	77 40                	ja     c0001fc3 <put_utf+0x8e>
c0001f83:	83 f9 02             	cmp    ecx,0x2
c0001f86:	0f 86 a0 00 00 00    	jbe    c000202c <put_utf+0xf7>
c0001f8c:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001f92:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001f98:	0f 86 8e 00 00 00    	jbe    c000202c <put_utf+0xf7>
c0001f9e:	89 d8                	mov    eax,ebx
c0001fa0:	c1 e8 0c             	shr    eax,0xc
c0001fa3:	83 c8 e0             	or     eax,0xffffffe0
c0001fa6:	88 02                	mov    BYTE PTR [edx],al
c0001fa8:	89 d8                	mov    eax,ebx
c0001faa:	83 e3 3f             	and    ebx,0x3f
c0001fad:	c1 e8 06             	shr    eax,0x6
c0001fb0:	83 cb 80             	or     ebx,0xffffff80
c0001fb3:	83 e0 3f             	and    eax,0x3f
c0001fb6:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001fb9:	83 c8 80             	or     eax,0xffffff80
c0001fbc:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001fbf:	b0 03                	mov    al,0x3
c0001fc1:	eb 69                	jmp    c000202c <put_utf+0xf7>
c0001fc3:	83 f9 03             	cmp    ecx,0x3
c0001fc6:	76 64                	jbe    c000202c <put_utf+0xf7>
c0001fc8:	89 d9                	mov    ecx,ebx
c0001fca:	0f b7 c3             	movzx  eax,bx
c0001fcd:	66 31 c9             	xor    cx,cx
c0001fd0:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001fd6:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001fdc:	c1 e9 06             	shr    ecx,0x6
c0001fdf:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001fe5:	77 43                	ja     c000202a <put_utf+0xf5>
c0001fe7:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001fed:	77 3b                	ja     c000202a <put_utf+0xf5>
c0001fef:	09 cb                	or     ebx,ecx
c0001ff1:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001ff7:	89 d8                	mov    eax,ebx
c0001ff9:	c1 e8 12             	shr    eax,0x12
c0001ffc:	83 c8 f0             	or     eax,0xfffffff0
c0001fff:	88 02                	mov    BYTE PTR [edx],al
c0002001:	89 d8                	mov    eax,ebx
c0002003:	c1 e8 0c             	shr    eax,0xc
c0002006:	83 e0 3f             	and    eax,0x3f
c0002009:	83 c8 80             	or     eax,0xffffff80
c000200c:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c000200f:	89 d8                	mov    eax,ebx
c0002011:	83 e3 3f             	and    ebx,0x3f
c0002014:	c1 e8 06             	shr    eax,0x6
c0002017:	83 cb 80             	or     ebx,0xffffff80
c000201a:	83 e0 3f             	and    eax,0x3f
c000201d:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0002020:	83 c8 80             	or     eax,0xffffff80
c0002023:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0002026:	b0 04                	mov    al,0x4
c0002028:	eb 02                	jmp    c000202c <put_utf+0xf7>
c000202a:	31 c0                	xor    eax,eax
c000202c:	5b                   	pop    ebx
c000202d:	c3                   	ret    

c000202e <clst2sect>:
c000202e:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002031:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0002034:	83 ea 02             	sub    edx,0x2
c0002037:	39 ca                	cmp    edx,ecx
c0002039:	76 0d                	jbe    c0002048 <clst2sect+0x1a>
c000203b:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c000203f:	0f af d1             	imul   edx,ecx
c0002042:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c0002045:	89 d0                	mov    eax,edx
c0002047:	c3                   	ret    
c0002048:	31 c0                	xor    eax,eax
c000204a:	c3                   	ret    

c000204b <pick_lfn>:
c000204b:	55                   	push   ebp
c000204c:	57                   	push   edi
c000204d:	89 c7                	mov    edi,eax
c000204f:	56                   	push   esi
c0002050:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002053:	53                   	push   ebx
c0002054:	89 d3                	mov    ebx,edx
c0002056:	e8 7c fd ff ff       	call   c0001dd7 <ld_word>
c000205b:	66 85 c0             	test   ax,ax
c000205e:	74 04                	je     c0002064 <pick_lfn+0x19>
c0002060:	31 c0                	xor    eax,eax
c0002062:	eb 62                	jmp    c00020c6 <pick_lfn+0x7b>
c0002064:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0002067:	bd 01 00 00 00       	mov    ebp,0x1
c000206c:	83 e1 bf             	and    ecx,0xffffffbf
c000206f:	31 f6                	xor    esi,esi
c0002071:	49                   	dec    ecx
c0002072:	6b c9 0d             	imul   ecx,ecx,0xd
c0002075:	0f b6 86 60 07 02 c0 	movzx  eax,BYTE PTR [esi-0x3ffdf8a0]
c000207c:	01 d8                	add    eax,ebx
c000207e:	e8 54 fd ff ff       	call   c0001dd7 <ld_word>
c0002083:	66 85 ed             	test   bp,bp
c0002086:	74 11                	je     c0002099 <pick_lfn+0x4e>
c0002088:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c000208e:	77 d0                	ja     c0002060 <pick_lfn+0x15>
c0002090:	66 89 04 4f          	mov    WORD PTR [edi+ecx*2],ax
c0002094:	89 c5                	mov    ebp,eax
c0002096:	41                   	inc    ecx
c0002097:	eb 0a                	jmp    c00020a3 <pick_lfn+0x58>
c0002099:	0f b7 c0             	movzx  eax,ax
c000209c:	3d ff ff 00 00       	cmp    eax,0xffff
c00020a1:	75 bd                	jne    c0002060 <pick_lfn+0x15>
c00020a3:	46                   	inc    esi
c00020a4:	83 fe 0d             	cmp    esi,0xd
c00020a7:	75 cc                	jne    c0002075 <pick_lfn+0x2a>
c00020a9:	f6 03 40             	test   BYTE PTR [ebx],0x40
c00020ac:	74 13                	je     c00020c1 <pick_lfn+0x76>
c00020ae:	66 85 ed             	test   bp,bp
c00020b1:	74 0e                	je     c00020c1 <pick_lfn+0x76>
c00020b3:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00020b9:	77 a5                	ja     c0002060 <pick_lfn+0x15>
c00020bb:	66 c7 04 4f 00 00    	mov    WORD PTR [edi+ecx*2],0x0
c00020c1:	b8 01 00 00 00       	mov    eax,0x1
c00020c6:	5b                   	pop    ebx
c00020c7:	5e                   	pop    esi
c00020c8:	5f                   	pop    edi
c00020c9:	5d                   	pop    ebp
c00020ca:	c3                   	ret    

c00020cb <put_lfn>:
c00020cb:	55                   	push   ebp
c00020cc:	57                   	push   edi
c00020cd:	89 d7                	mov    edi,edx
c00020cf:	56                   	push   esi
c00020d0:	31 f6                	xor    esi,esi
c00020d2:	53                   	push   ebx
c00020d3:	83 ec 0c             	sub    esp,0xc
c00020d6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00020da:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00020de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00020e2:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c00020e8:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c00020eb:	8d 42 1a             	lea    eax,[edx+0x1a]
c00020ee:	31 d2                	xor    edx,edx
c00020f0:	e8 07 fd ff ff       	call   c0001dfc <st_word>
c00020f5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00020fc:	0f b6 d9             	movzx  ebx,cl
c00020ff:	4b                   	dec    ebx
c0002100:	6b db 0d             	imul   ebx,ebx,0xd
c0002103:	0f b7 c6             	movzx  eax,si
c0002106:	3d ff ff 00 00       	cmp    eax,0xffff
c000210b:	74 09                	je     c0002116 <put_lfn+0x4b>
c000210d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002111:	0f b7 34 58          	movzx  esi,WORD PTR [eax+ebx*2]
c0002115:	43                   	inc    ebx
c0002116:	0f b7 ee             	movzx  ebp,si
c0002119:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000211c:	89 ea                	mov    edx,ebp
c000211e:	0f b6 80 60 07 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdf8a0]
c0002125:	01 f8                	add    eax,edi
c0002127:	e8 d0 fc ff ff       	call   c0001dfc <st_word>
c000212c:	85 ed                	test   ebp,ebp
c000212e:	75 05                	jne    c0002135 <put_lfn+0x6a>
c0002130:	be ff ff 00 00       	mov    esi,0xffff
c0002135:	ff 04 24             	inc    DWORD PTR [esp]
c0002138:	83 3c 24 0d          	cmp    DWORD PTR [esp],0xd
c000213c:	75 c5                	jne    c0002103 <put_lfn+0x38>
c000213e:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0002144:	74 0b                	je     c0002151 <put_lfn+0x86>
c0002146:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000214a:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c000214f:	75 07                	jne    c0002158 <put_lfn+0x8d>
c0002151:	83 c9 40             	or     ecx,0x40
c0002154:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002158:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000215c:	88 07                	mov    BYTE PTR [edi],al
c000215e:	83 c4 0c             	add    esp,0xc
c0002161:	5b                   	pop    ebx
c0002162:	5e                   	pop    esi
c0002163:	5f                   	pop    edi
c0002164:	5d                   	pop    ebp
c0002165:	c3                   	ret    

c0002166 <gen_numname>:
c0002166:	57                   	push   edi
c0002167:	89 cf                	mov    edi,ecx
c0002169:	56                   	push   esi
c000216a:	b9 0b 00 00 00       	mov    ecx,0xb
c000216f:	53                   	push   ebx
c0002170:	89 c6                	mov    esi,eax
c0002172:	83 ec 10             	sub    esp,0x10
c0002175:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002179:	e8 85 fc ff ff       	call   c0001e03 <mem_cpy>
c000217e:	83 fb 05             	cmp    ebx,0x5
c0002181:	76 30                	jbe    c00021b3 <gen_numname+0x4d>
c0002183:	66 8b 07             	mov    ax,WORD PTR [edi]
c0002186:	66 85 c0             	test   ax,ax
c0002189:	74 28                	je     c00021b3 <gen_numname+0x4d>
c000218b:	83 c7 02             	add    edi,0x2
c000218e:	ba 10 00 00 00       	mov    edx,0x10
c0002193:	01 db                	add    ebx,ebx
c0002195:	89 c1                	mov    ecx,eax
c0002197:	c1 e0 10             	shl    eax,0x10
c000219a:	83 e1 01             	and    ecx,0x1
c000219d:	c1 e8 11             	shr    eax,0x11
c00021a0:	01 cb                	add    ebx,ecx
c00021a2:	0f ba e3 10          	bt     ebx,0x10
c00021a6:	73 06                	jae    c00021ae <gen_numname+0x48>
c00021a8:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00021ae:	4a                   	dec    edx
c00021af:	75 e2                	jne    c0002193 <gen_numname+0x2d>
c00021b1:	eb d0                	jmp    c0002183 <gen_numname+0x1d>
c00021b3:	b8 07 00 00 00       	mov    eax,0x7
c00021b8:	89 d9                	mov    ecx,ebx
c00021ba:	83 e1 0f             	and    ecx,0xf
c00021bd:	8d 79 30             	lea    edi,[ecx+0x30]
c00021c0:	89 fa                	mov    edx,edi
c00021c2:	83 ff 39             	cmp    edi,0x39
c00021c5:	76 03                	jbe    c00021ca <gen_numname+0x64>
c00021c7:	8d 51 37             	lea    edx,[ecx+0x37]
c00021ca:	8d 48 ff             	lea    ecx,[eax-0x1]
c00021cd:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00021d1:	89 da                	mov    edx,ebx
c00021d3:	c1 ea 04             	shr    edx,0x4
c00021d6:	83 fb 0f             	cmp    ebx,0xf
c00021d9:	76 06                	jbe    c00021e1 <gen_numname+0x7b>
c00021db:	89 c8                	mov    eax,ecx
c00021dd:	89 d3                	mov    ebx,edx
c00021df:	eb d7                	jmp    c00021b8 <gen_numname+0x52>
c00021e1:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00021e6:	31 d2                	xor    edx,edx
c00021e8:	8d 58 fe             	lea    ebx,[eax-0x2]
c00021eb:	8d 04 16             	lea    eax,[esi+edx*1]
c00021ee:	39 ca                	cmp    edx,ecx
c00021f0:	73 19                	jae    c000220b <gen_numname+0xa5>
c00021f2:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00021f5:	83 f8 20             	cmp    eax,0x20
c00021f8:	74 11                	je     c000220b <gen_numname+0xa5>
c00021fa:	e8 58 fc ff ff       	call   c0001e57 <dbc_1st>
c00021ff:	85 c0                	test   eax,eax
c0002201:	74 05                	je     c0002208 <gen_numname+0xa2>
c0002203:	39 d3                	cmp    ebx,edx
c0002205:	74 04                	je     c000220b <gen_numname+0xa5>
c0002207:	42                   	inc    edx
c0002208:	42                   	inc    edx
c0002209:	eb e0                	jmp    c00021eb <gen_numname+0x85>
c000220b:	b0 20                	mov    al,0x20
c000220d:	83 f9 07             	cmp    ecx,0x7
c0002210:	77 05                	ja     c0002217 <gen_numname+0xb1>
c0002212:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0002216:	41                   	inc    ecx
c0002217:	42                   	inc    edx
c0002218:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c000221c:	83 fa 07             	cmp    edx,0x7
c000221f:	76 ea                	jbe    c000220b <gen_numname+0xa5>
c0002221:	83 c4 10             	add    esp,0x10
c0002224:	5b                   	pop    ebx
c0002225:	5e                   	pop    esi
c0002226:	5f                   	pop    edi
c0002227:	c3                   	ret    

c0002228 <sum_sfn>:
c0002228:	53                   	push   ebx
c0002229:	31 c9                	xor    ecx,ecx
c000222b:	31 db                	xor    ebx,ebx
c000222d:	0f b6 d1             	movzx  edx,cl
c0002230:	c1 e1 07             	shl    ecx,0x7
c0002233:	d1 ea                	shr    edx,1
c0002235:	09 ca                	or     edx,ecx
c0002237:	8a 0c 18             	mov    cl,BYTE PTR [eax+ebx*1]
c000223a:	43                   	inc    ebx
c000223b:	01 ca                	add    edx,ecx
c000223d:	83 fb 0b             	cmp    ebx,0xb
c0002240:	88 d1                	mov    cl,dl
c0002242:	75 e9                	jne    c000222d <sum_sfn+0x5>
c0002244:	88 d0                	mov    al,dl
c0002246:	5b                   	pop    ebx
c0002247:	c3                   	ret    

c0002248 <get_ldnumber>:
c0002248:	8b 10                	mov    edx,DWORD PTR [eax]
c000224a:	85 d2                	test   edx,edx
c000224c:	74 14                	je     c0002262 <get_ldnumber+0x1a>
c000224e:	56                   	push   esi
c000224f:	53                   	push   ebx
c0002250:	89 d3                	mov    ebx,edx
c0002252:	43                   	inc    ebx
c0002253:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002256:	80 f9 1f             	cmp    cl,0x1f
c0002259:	76 0d                	jbe    c0002268 <get_ldnumber+0x20>
c000225b:	80 f9 3a             	cmp    cl,0x3a
c000225e:	75 f2                	jne    c0002252 <get_ldnumber+0xa>
c0002260:	eb 0a                	jmp    c000226c <get_ldnumber+0x24>
c0002262:	83 c9 ff             	or     ecx,0xffffffff
c0002265:	89 c8                	mov    eax,ecx
c0002267:	c3                   	ret    
c0002268:	31 c9                	xor    ecx,ecx
c000226a:	eb 24                	jmp    c0002290 <get_ldnumber+0x48>
c000226c:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c000226f:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002272:	80 f9 09             	cmp    cl,0x9
c0002275:	77 16                	ja     c000228d <get_ldnumber+0x45>
c0002277:	83 c2 02             	add    edx,0x2
c000227a:	83 c9 ff             	or     ecx,0xffffffff
c000227d:	39 d3                	cmp    ebx,edx
c000227f:	75 0f                	jne    c0002290 <get_ldnumber+0x48>
c0002281:	89 f2                	mov    edx,esi
c0002283:	89 18                	mov    DWORD PTR [eax],ebx
c0002285:	0f be ca             	movsx  ecx,dl
c0002288:	83 e9 30             	sub    ecx,0x30
c000228b:	eb 03                	jmp    c0002290 <get_ldnumber+0x48>
c000228d:	83 c9 ff             	or     ecx,0xffffffff
c0002290:	89 c8                	mov    eax,ecx
c0002292:	5b                   	pop    ebx
c0002293:	5e                   	pop    esi
c0002294:	c3                   	ret    

c0002295 <validate>:
c0002295:	56                   	push   esi
c0002296:	53                   	push   ebx
c0002297:	89 d6                	mov    esi,edx
c0002299:	51                   	push   ecx
c000229a:	85 c0                	test   eax,eax
c000229c:	75 09                	jne    c00022a7 <validate+0x12>
c000229e:	b8 09 00 00 00       	mov    eax,0x9
c00022a3:	31 c9                	xor    ecx,ecx
c00022a5:	eb 2e                	jmp    c00022d5 <validate+0x40>
c00022a7:	89 c3                	mov    ebx,eax
c00022a9:	8b 00                	mov    eax,DWORD PTR [eax]
c00022ab:	85 c0                	test   eax,eax
c00022ad:	74 ef                	je     c000229e <validate+0x9>
c00022af:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00022b2:	74 ea                	je     c000229e <validate+0x9>
c00022b4:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00022b7:	66 39 50 06          	cmp    WORD PTR [eax+0x6],dx
c00022bb:	75 e1                	jne    c000229e <validate+0x9>
c00022bd:	83 ec 0c             	sub    esp,0xc
c00022c0:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00022c4:	50                   	push   eax
c00022c5:	e8 bc fa ff ff       	call   c0001d86 <disk_status>
c00022ca:	83 c4 10             	add    esp,0x10
c00022cd:	a8 01                	test   al,0x1
c00022cf:	75 cd                	jne    c000229e <validate+0x9>
c00022d1:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00022d3:	31 c0                	xor    eax,eax
c00022d5:	89 0e                	mov    DWORD PTR [esi],ecx
c00022d7:	5a                   	pop    edx
c00022d8:	5b                   	pop    ebx
c00022d9:	5e                   	pop    esi
c00022da:	c3                   	ret    

c00022db <sync_window>:
c00022db:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00022df:	74 58                	je     c0002339 <sync_window+0x5e>
c00022e1:	56                   	push   esi
c00022e2:	53                   	push   ebx
c00022e3:	8d 70 34             	lea    esi,[eax+0x34]
c00022e6:	51                   	push   ecx
c00022e7:	89 c3                	mov    ebx,eax
c00022e9:	6a 01                	push   0x1
c00022eb:	ff 70 30             	push   DWORD PTR [eax+0x30]
c00022ee:	56                   	push   esi
c00022ef:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00022f3:	50                   	push   eax
c00022f4:	e8 a9 fa ff ff       	call   c0001da2 <disk_write>
c00022f9:	83 c4 10             	add    esp,0x10
c00022fc:	ba 01 00 00 00       	mov    edx,0x1
c0002301:	85 c0                	test   eax,eax
c0002303:	75 2e                	jne    c0002333 <sync_window+0x58>
c0002305:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0002308:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000230b:	89 c1                	mov    ecx,eax
c000230d:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0002311:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c0002314:	39 d1                	cmp    ecx,edx
c0002316:	73 19                	jae    c0002331 <sync_window+0x56>
c0002318:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c000231c:	75 13                	jne    c0002331 <sync_window+0x56>
c000231e:	6a 01                	push   0x1
c0002320:	01 d0                	add    eax,edx
c0002322:	50                   	push   eax
c0002323:	56                   	push   esi
c0002324:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002328:	50                   	push   eax
c0002329:	e8 74 fa ff ff       	call   c0001da2 <disk_write>
c000232e:	83 c4 10             	add    esp,0x10
c0002331:	31 d2                	xor    edx,edx
c0002333:	89 d0                	mov    eax,edx
c0002335:	5a                   	pop    edx
c0002336:	5b                   	pop    ebx
c0002337:	5e                   	pop    esi
c0002338:	c3                   	ret    
c0002339:	31 d2                	xor    edx,edx
c000233b:	89 d0                	mov    eax,edx
c000233d:	c3                   	ret    

c000233e <move_window>:
c000233e:	57                   	push   edi
c000233f:	56                   	push   esi
c0002340:	31 f6                	xor    esi,esi
c0002342:	53                   	push   ebx
c0002343:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c0002346:	74 32                	je     c000237a <move_window+0x3c>
c0002348:	89 c3                	mov    ebx,eax
c000234a:	89 d7                	mov    edi,edx
c000234c:	e8 8a ff ff ff       	call   c00022db <sync_window>
c0002351:	89 c6                	mov    esi,eax
c0002353:	85 c0                	test   eax,eax
c0002355:	75 23                	jne    c000237a <move_window+0x3c>
c0002357:	6a 01                	push   0x1
c0002359:	8d 43 34             	lea    eax,[ebx+0x34]
c000235c:	57                   	push   edi
c000235d:	50                   	push   eax
c000235e:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002362:	50                   	push   eax
c0002363:	e8 24 fa ff ff       	call   c0001d8c <disk_read>
c0002368:	83 c4 10             	add    esp,0x10
c000236b:	85 c0                	test   eax,eax
c000236d:	74 08                	je     c0002377 <move_window+0x39>
c000236f:	be 01 00 00 00       	mov    esi,0x1
c0002374:	83 cf ff             	or     edi,0xffffffff
c0002377:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c000237a:	89 f0                	mov    eax,esi
c000237c:	5b                   	pop    ebx
c000237d:	5e                   	pop    esi
c000237e:	5f                   	pop    edi
c000237f:	c3                   	ret    

c0002380 <check_fs>:
c0002380:	53                   	push   ebx
c0002381:	89 c3                	mov    ebx,eax
c0002383:	83 ec 08             	sub    esp,0x8
c0002386:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c000238a:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c0002391:	e8 a8 ff ff ff       	call   c000233e <move_window>
c0002396:	ba 04 00 00 00       	mov    edx,0x4
c000239b:	85 c0                	test   eax,eax
c000239d:	75 68                	jne    c0002407 <check_fs+0x87>
c000239f:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c00023a5:	e8 2d fa ff ff       	call   c0001dd7 <ld_word>
c00023aa:	ba 03 00 00 00       	mov    edx,0x3
c00023af:	66 3d 55 aa          	cmp    ax,0xaa55
c00023b3:	75 52                	jne    c0002407 <check_fs+0x87>
c00023b5:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00023b8:	8d 50 18             	lea    edx,[eax+0x18]
c00023bb:	80 fa 01             	cmp    dl,0x1
c00023be:	76 09                	jbe    c00023c9 <check_fs+0x49>
c00023c0:	ba 02 00 00 00       	mov    edx,0x2
c00023c5:	3c eb                	cmp    al,0xeb
c00023c7:	75 3e                	jne    c0002407 <check_fs+0x87>
c00023c9:	ba b8 2f 02 c0       	mov    edx,0xc0022fb8
c00023ce:	8d 43 6a             	lea    eax,[ebx+0x6a]
c00023d1:	b9 03 00 00 00       	mov    ecx,0x3
c00023d6:	e8 48 fa ff ff       	call   c0001e23 <mem_cmp>
c00023db:	31 d2                	xor    edx,edx
c00023dd:	85 c0                	test   eax,eax
c00023df:	74 26                	je     c0002407 <check_fs+0x87>
c00023e1:	ba 1c 06 02 c0       	mov    edx,0xc002061c
c00023e6:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c00023ec:	b9 05 00 00 00       	mov    ecx,0x5
c00023f1:	e8 2d fa ff ff       	call   c0001e23 <mem_cmp>
c00023f6:	31 d2                	xor    edx,edx
c00023f8:	85 c0                	test   eax,eax
c00023fa:	74 0b                	je     c0002407 <check_fs+0x87>
c00023fc:	31 d2                	xor    edx,edx
c00023fe:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c0002402:	0f 95 c2             	setne  dl
c0002405:	01 d2                	add    edx,edx
c0002407:	89 d0                	mov    eax,edx
c0002409:	83 c4 08             	add    esp,0x8
c000240c:	5b                   	pop    ebx
c000240d:	c3                   	ret    

c000240e <find_volume>:
c000240e:	55                   	push   ebp
c000240f:	57                   	push   edi
c0002410:	56                   	push   esi
c0002411:	89 c6                	mov    esi,eax
c0002413:	53                   	push   ebx
c0002414:	89 d3                	mov    ebx,edx
c0002416:	83 ec 2c             	sub    esp,0x2c
c0002419:	31 d2                	xor    edx,edx
c000241b:	e8 60 ff ff ff       	call   c0002380 <check_fs>
c0002420:	83 f8 02             	cmp    eax,0x2
c0002423:	74 06                	je     c000242b <find_volume+0x1d>
c0002425:	77 62                	ja     c0002489 <find_volume+0x7b>
c0002427:	85 db                	test   ebx,ebx
c0002429:	74 5e                	je     c0002489 <find_volume+0x7b>
c000242b:	8d 4c 24 10          	lea    ecx,[esp+0x10]
c000242f:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c0002435:	8d ae fa 01 00 00    	lea    ebp,[esi+0x1fa]
c000243b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000243f:	89 cf                	mov    edi,ecx
c0002441:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002445:	89 e8                	mov    eax,ebp
c0002447:	83 c5 10             	add    ebp,0x10
c000244a:	e8 95 f9 ff ff       	call   c0001de4 <ld_dword>
c000244f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002453:	89 01                	mov    DWORD PTR [ecx],eax
c0002455:	83 c1 04             	add    ecx,0x4
c0002458:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c000245c:	75 e3                	jne    c0002441 <find_volume+0x33>
c000245e:	31 ed                	xor    ebp,ebp
c0002460:	85 db                	test   ebx,ebx
c0002462:	74 03                	je     c0002467 <find_volume+0x59>
c0002464:	8d 6b ff             	lea    ebp,[ebx-0x1]
c0002467:	8b 14 af             	mov    edx,DWORD PTR [edi+ebp*4]
c000246a:	b8 03 00 00 00       	mov    eax,0x3
c000246f:	85 d2                	test   edx,edx
c0002471:	74 0c                	je     c000247f <find_volume+0x71>
c0002473:	89 f0                	mov    eax,esi
c0002475:	e8 06 ff ff ff       	call   c0002380 <check_fs>
c000247a:	83 f8 01             	cmp    eax,0x1
c000247d:	76 0a                	jbe    c0002489 <find_volume+0x7b>
c000247f:	85 db                	test   ebx,ebx
c0002481:	75 06                	jne    c0002489 <find_volume+0x7b>
c0002483:	45                   	inc    ebp
c0002484:	83 fd 03             	cmp    ebp,0x3
c0002487:	76 de                	jbe    c0002467 <find_volume+0x59>
c0002489:	83 c4 2c             	add    esp,0x2c
c000248c:	5b                   	pop    ebx
c000248d:	5e                   	pop    esi
c000248e:	5f                   	pop    edi
c000248f:	5d                   	pop    ebp
c0002490:	c3                   	ret    

c0002491 <mount_volume>:
c0002491:	55                   	push   ebp
c0002492:	89 d5                	mov    ebp,edx
c0002494:	57                   	push   edi
c0002495:	89 cf                	mov    edi,ecx
c0002497:	56                   	push   esi
c0002498:	53                   	push   ebx
c0002499:	bb 0b 00 00 00       	mov    ebx,0xb
c000249e:	83 ec 1c             	sub    esp,0x1c
c00024a1:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00024a7:	e8 9c fd ff ff       	call   c0002248 <get_ldnumber>
c00024ac:	85 c0                	test   eax,eax
c00024ae:	0f 88 c4 02 00 00    	js     c0002778 <mount_volume+0x2e7>
c00024b4:	8b 34 85 a0 64 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd9b60]
c00024bb:	89 c2                	mov    edx,eax
c00024bd:	bb 0c 00 00 00       	mov    ebx,0xc
c00024c2:	85 f6                	test   esi,esi
c00024c4:	0f 84 ae 02 00 00    	je     c0002778 <mount_volume+0x2e7>
c00024ca:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c00024cd:	83 e7 fe             	and    edi,0xfffffffe
c00024d0:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00024d3:	74 3a                	je     c000250f <mount_volume+0x7e>
c00024d5:	89 04 24             	mov    DWORD PTR [esp],eax
c00024d8:	83 ec 0c             	sub    esp,0xc
c00024db:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00024df:	50                   	push   eax
c00024e0:	e8 a1 f8 ff ff       	call   c0001d86 <disk_status>
c00024e5:	83 c4 10             	add    esp,0x10
c00024e8:	a8 01                	test   al,0x1
c00024ea:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00024ed:	75 20                	jne    c000250f <mount_volume+0x7e>
c00024ef:	31 db                	xor    ebx,ebx
c00024f1:	81 e7 fe 00 00 00    	and    edi,0xfe
c00024f7:	0f 84 7b 02 00 00    	je     c0002778 <mount_volume+0x2e7>
c00024fd:	a8 04                	test   al,0x4
c00024ff:	0f 84 73 02 00 00    	je     c0002778 <mount_volume+0x2e7>
c0002505:	bb 0a 00 00 00       	mov    ebx,0xa
c000250a:	e9 69 02 00 00       	jmp    c0002778 <mount_volume+0x2e7>
c000250f:	83 ec 0c             	sub    esp,0xc
c0002512:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0002515:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c0002518:	0f b6 c2             	movzx  eax,dl
c000251b:	bb 03 00 00 00       	mov    ebx,0x3
c0002520:	50                   	push   eax
c0002521:	e8 63 f8 ff ff       	call   c0001d89 <disk_initialize>
c0002526:	83 c4 10             	add    esp,0x10
c0002529:	a8 01                	test   al,0x1
c000252b:	0f 85 47 02 00 00    	jne    c0002778 <mount_volume+0x2e7>
c0002531:	81 e7 fe 00 00 00    	and    edi,0xfe
c0002537:	74 04                	je     c000253d <mount_volume+0xac>
c0002539:	a8 04                	test   al,0x4
c000253b:	75 c8                	jne    c0002505 <mount_volume+0x74>
c000253d:	31 d2                	xor    edx,edx
c000253f:	89 f0                	mov    eax,esi
c0002541:	bb 01 00 00 00       	mov    ebx,0x1
c0002546:	e8 c3 fe ff ff       	call   c000240e <find_volume>
c000254b:	83 f8 04             	cmp    eax,0x4
c000254e:	0f 84 24 02 00 00    	je     c0002778 <mount_volume+0x2e7>
c0002554:	83 f8 01             	cmp    eax,0x1
c0002557:	76 0a                	jbe    c0002563 <mount_volume+0xd2>
c0002559:	bb 0d 00 00 00       	mov    ebx,0xd
c000255e:	e9 15 02 00 00       	jmp    c0002778 <mount_volume+0x2e7>
c0002563:	8d 46 3f             	lea    eax,[esi+0x3f]
c0002566:	e8 6c f8 ff ff       	call   c0001dd7 <ld_word>
c000256b:	66 3d 00 02          	cmp    ax,0x200
c000256f:	75 e8                	jne    c0002559 <mount_volume+0xc8>
c0002571:	8d 46 4a             	lea    eax,[esi+0x4a]
c0002574:	e8 5e f8 ff ff       	call   c0001dd7 <ld_word>
c0002579:	0f b7 c0             	movzx  eax,ax
c000257c:	89 04 24             	mov    DWORD PTR [esp],eax
c000257f:	85 c0                	test   eax,eax
c0002581:	75 0b                	jne    c000258e <mount_volume+0xfd>
c0002583:	8d 46 58             	lea    eax,[esi+0x58]
c0002586:	e8 59 f8 ff ff       	call   c0001de4 <ld_dword>
c000258b:	89 04 24             	mov    DWORD PTR [esp],eax
c000258e:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c0002591:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002595:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002598:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c000259b:	8a 46 44             	mov    al,BYTE PTR [esi+0x44]
c000259e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00025a2:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00025a5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00025a9:	48                   	dec    eax
c00025aa:	3c 01                	cmp    al,0x1
c00025ac:	77 ab                	ja     c0002559 <mount_volume+0xc8>
c00025ae:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c00025b2:	89 c3                	mov    ebx,eax
c00025b4:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00025b8:	66 85 c0             	test   ax,ax
c00025bb:	74 9c                	je     c0002559 <mount_volume+0xc8>
c00025bd:	8d 40 ff             	lea    eax,[eax-0x1]
c00025c0:	85 d8                	test   eax,ebx
c00025c2:	75 95                	jne    c0002559 <mount_volume+0xc8>
c00025c4:	8d 46 45             	lea    eax,[esi+0x45]
c00025c7:	e8 0b f8 ff ff       	call   c0001dd7 <ld_word>
c00025cc:	89 c7                	mov    edi,eax
c00025ce:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c00025d2:	a8 0f                	test   al,0xf
c00025d4:	75 83                	jne    c0002559 <mount_volume+0xc8>
c00025d6:	8d 46 47             	lea    eax,[esi+0x47]
c00025d9:	e8 f9 f7 ff ff       	call   c0001dd7 <ld_word>
c00025de:	0f b7 e8             	movzx  ebp,ax
c00025e1:	85 ed                	test   ebp,ebp
c00025e3:	75 0a                	jne    c00025ef <mount_volume+0x15e>
c00025e5:	8d 46 54             	lea    eax,[esi+0x54]
c00025e8:	e8 f7 f7 ff ff       	call   c0001de4 <ld_dword>
c00025ed:	89 c5                	mov    ebp,eax
c00025ef:	8d 46 42             	lea    eax,[esi+0x42]
c00025f2:	e8 e0 f7 ff ff       	call   c0001dd7 <ld_word>
c00025f7:	0f b7 c8             	movzx  ecx,ax
c00025fa:	85 c9                	test   ecx,ecx
c00025fc:	0f 84 57 ff ff ff    	je     c0002559 <mount_volume+0xc8>
c0002602:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0002607:	0f af 04 24          	imul   eax,DWORD PTR [esp]
c000260b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000260f:	0f b7 c7             	movzx  eax,di
c0002612:	c1 e8 04             	shr    eax,0x4
c0002615:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0002619:	01 c8                	add    eax,ecx
c000261b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000261f:	39 c5                	cmp    ebp,eax
c0002621:	0f 82 32 ff ff ff    	jb     c0002559 <mount_volume+0xc8>
c0002627:	29 c5                	sub    ebp,eax
c0002629:	31 d2                	xor    edx,edx
c000262b:	89 e8                	mov    eax,ebp
c000262d:	f7 f3                	div    ebx
c000262f:	39 dd                	cmp    ebp,ebx
c0002631:	0f 82 22 ff ff ff    	jb     c0002559 <mount_volume+0xc8>
c0002637:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c000263c:	0f 87 17 ff ff ff    	ja     c0002559 <mount_volume+0xc8>
c0002642:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002647:	0f 86 1c 01 00 00    	jbe    c0002769 <mount_volume+0x2d8>
c000264d:	bb 03 00 00 00       	mov    ebx,0x3
c0002652:	8d 68 02             	lea    ebp,[eax+0x2]
c0002655:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002659:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000265d:	03 54 24 04          	add    edx,DWORD PTR [esp+0x4]
c0002661:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c0002664:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c0002667:	01 c8                	add    eax,ecx
c0002669:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c000266c:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c000266f:	83 fb 03             	cmp    ebx,0x3
c0002672:	75 23                	jne    c0002697 <mount_volume+0x206>
c0002674:	8d 46 5e             	lea    eax,[esi+0x5e]
c0002677:	e8 5b f7 ff ff       	call   c0001dd7 <ld_word>
c000267c:	09 c7                	or     edi,eax
c000267e:	66 85 ff             	test   di,di
c0002681:	0f 85 d2 fe ff ff    	jne    c0002559 <mount_volume+0xc8>
c0002687:	8d 46 60             	lea    eax,[esi+0x60]
c000268a:	c1 e5 02             	shl    ebp,0x2
c000268d:	e8 52 f7 ff ff       	call   c0001de4 <ld_dword>
c0002692:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c0002695:	eb 24                	jmp    c00026bb <mount_volume+0x22a>
c0002697:	66 85 ff             	test   di,di
c000269a:	0f 84 b9 fe ff ff    	je     c0002559 <mount_volume+0xc8>
c00026a0:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00026a4:	83 fb 02             	cmp    ebx,0x2
c00026a7:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00026aa:	75 04                	jne    c00026b0 <mount_volume+0x21f>
c00026ac:	01 ed                	add    ebp,ebp
c00026ae:	eb 0b                	jmp    c00026bb <mount_volume+0x22a>
c00026b0:	8d 44 6d 00          	lea    eax,[ebp+ebp*2+0x0]
c00026b4:	83 e5 01             	and    ebp,0x1
c00026b7:	d1 e8                	shr    eax,1
c00026b9:	01 c5                	add    ebp,eax
c00026bb:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c00026c1:	c1 ed 09             	shr    ebp,0x9
c00026c4:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c00026c7:	0f 87 8c fe ff ff    	ja     c0002559 <mount_volume+0xc8>
c00026cd:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c00026d4:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c00026db:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c00026df:	83 fb 03             	cmp    ebx,0x3
c00026e2:	75 6e                	jne    c0002752 <mount_volume+0x2c1>
c00026e4:	8d 46 64             	lea    eax,[esi+0x64]
c00026e7:	e8 eb f6 ff ff       	call   c0001dd7 <ld_word>
c00026ec:	66 48                	dec    ax
c00026ee:	75 62                	jne    c0002752 <mount_volume+0x2c1>
c00026f0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00026f4:	89 f0                	mov    eax,esi
c00026f6:	42                   	inc    edx
c00026f7:	e8 42 fc ff ff       	call   c000233e <move_window>
c00026fc:	85 c0                	test   eax,eax
c00026fe:	75 52                	jne    c0002752 <mount_volume+0x2c1>
c0002700:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c0002704:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c000270a:	e8 c8 f6 ff ff       	call   c0001dd7 <ld_word>
c000270f:	66 3d 55 aa          	cmp    ax,0xaa55
c0002713:	75 3d                	jne    c0002752 <mount_volume+0x2c1>
c0002715:	8d 46 34             	lea    eax,[esi+0x34]
c0002718:	e8 c7 f6 ff ff       	call   c0001de4 <ld_dword>
c000271d:	3d 52 52 61 41       	cmp    eax,0x41615252
c0002722:	75 2e                	jne    c0002752 <mount_volume+0x2c1>
c0002724:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c000272a:	e8 b5 f6 ff ff       	call   c0001de4 <ld_dword>
c000272f:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002734:	75 1c                	jne    c0002752 <mount_volume+0x2c1>
c0002736:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c000273c:	e8 a3 f6 ff ff       	call   c0001de4 <ld_dword>
c0002741:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0002744:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c000274a:	e8 95 f6 ff ff       	call   c0001de4 <ld_dword>
c000274f:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0002752:	66 a1 80 64 02 c0    	mov    ax,ds:0xc0026480
c0002758:	88 1e                	mov    BYTE PTR [esi],bl
c000275a:	40                   	inc    eax
c000275b:	31 db                	xor    ebx,ebx
c000275d:	66 a3 80 64 02 c0    	mov    ds:0xc0026480,ax
c0002763:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c0002767:	eb 0f                	jmp    c0002778 <mount_volume+0x2e7>
c0002769:	3d f6 0f 00 00       	cmp    eax,0xff6
c000276e:	19 db                	sbb    ebx,ebx
c0002770:	83 c3 02             	add    ebx,0x2
c0002773:	e9 da fe ff ff       	jmp    c0002652 <mount_volume+0x1c1>
c0002778:	83 c4 1c             	add    esp,0x1c
c000277b:	89 d8                	mov    eax,ebx
c000277d:	5b                   	pop    ebx
c000277e:	5e                   	pop    esi
c000277f:	5f                   	pop    edi
c0002780:	5d                   	pop    ebp
c0002781:	c3                   	ret    

c0002782 <put_fat>:
c0002782:	55                   	push   ebp
c0002783:	bd 02 00 00 00       	mov    ebp,0x2
c0002788:	57                   	push   edi
c0002789:	56                   	push   esi
c000278a:	53                   	push   ebx
c000278b:	83 ec 1c             	sub    esp,0x1c
c000278e:	83 fa 01             	cmp    edx,0x1
c0002791:	0f 86 38 01 00 00    	jbe    c00028cf <put_fat+0x14d>
c0002797:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c000279a:	0f 86 2f 01 00 00    	jbe    c00028cf <put_fat+0x14d>
c00027a0:	89 c6                	mov    esi,eax
c00027a2:	89 cf                	mov    edi,ecx
c00027a4:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00027a7:	89 d3                	mov    ebx,edx
c00027a9:	83 f8 02             	cmp    eax,0x2
c00027ac:	0f 84 b1 00 00 00    	je     c0002863 <put_fat+0xe1>
c00027b2:	83 f8 03             	cmp    eax,0x3
c00027b5:	0f 84 d5 00 00 00    	je     c0002890 <put_fat+0x10e>
c00027bb:	48                   	dec    eax
c00027bc:	0f 85 0d 01 00 00    	jne    c00028cf <put_fat+0x14d>
c00027c2:	89 d1                	mov    ecx,edx
c00027c4:	89 f0                	mov    eax,esi
c00027c6:	d1 e9                	shr    ecx,1
c00027c8:	01 d1                	add    ecx,edx
c00027ca:	89 ca                	mov    edx,ecx
c00027cc:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00027d0:	c1 ea 09             	shr    edx,0x9
c00027d3:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00027d6:	e8 63 fb ff ff       	call   c000233e <move_window>
c00027db:	89 c5                	mov    ebp,eax
c00027dd:	85 c0                	test   eax,eax
c00027df:	0f 85 ea 00 00 00    	jne    c00028cf <put_fat+0x14d>
c00027e5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00027e9:	8d 46 34             	lea    eax,[esi+0x34]
c00027ec:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00027f0:	8d 41 01             	lea    eax,[ecx+0x1]
c00027f3:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c00027f9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00027fd:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002801:	89 f8                	mov    eax,edi
c0002803:	83 e3 01             	and    ebx,0x1
c0002806:	74 11                	je     c0002819 <put_fat+0x97>
c0002808:	8a 11                	mov    dl,BYTE PTR [ecx]
c000280a:	89 f8                	mov    eax,edi
c000280c:	83 e2 0f             	and    edx,0xf
c000280f:	c1 e0 04             	shl    eax,0x4
c0002812:	25 f0 0f 00 00       	and    eax,0xff0
c0002817:	09 d0                	or     eax,edx
c0002819:	88 01                	mov    BYTE PTR [ecx],al
c000281b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000281f:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002823:	c1 ea 09             	shr    edx,0x9
c0002826:	89 f0                	mov    eax,esi
c0002828:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000282b:	e8 0e fb ff ff       	call   c000233e <move_window>
c0002830:	89 c5                	mov    ebp,eax
c0002832:	85 c0                	test   eax,eax
c0002834:	0f 85 95 00 00 00    	jne    c00028cf <put_fat+0x14d>
c000283a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000283e:	25 ff 01 00 00       	and    eax,0x1ff
c0002843:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002847:	85 db                	test   ebx,ebx
c0002849:	74 07                	je     c0002852 <put_fat+0xd0>
c000284b:	c1 ef 04             	shr    edi,0x4
c000284e:	89 f9                	mov    ecx,edi
c0002850:	eb 0d                	jmp    c000285f <put_fat+0xdd>
c0002852:	8a 08                	mov    cl,BYTE PTR [eax]
c0002854:	c1 ef 08             	shr    edi,0x8
c0002857:	83 e1 f0             	and    ecx,0xfffffff0
c000285a:	83 e7 0f             	and    edi,0xf
c000285d:	09 f9                	or     ecx,edi
c000285f:	88 08                	mov    BYTE PTR [eax],cl
c0002861:	eb 27                	jmp    c000288a <put_fat+0x108>
c0002863:	c1 ea 08             	shr    edx,0x8
c0002866:	89 f0                	mov    eax,esi
c0002868:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000286b:	e8 ce fa ff ff       	call   c000233e <move_window>
c0002870:	89 c5                	mov    ebp,eax
c0002872:	85 c0                	test   eax,eax
c0002874:	75 59                	jne    c00028cf <put_fat+0x14d>
c0002876:	01 db                	add    ebx,ebx
c0002878:	0f b7 d7             	movzx  edx,di
c000287b:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002881:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0002885:	e8 72 f5 ff ff       	call   c0001dfc <st_word>
c000288a:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c000288e:	eb 3f                	jmp    c00028cf <put_fat+0x14d>
c0002890:	c1 ea 07             	shr    edx,0x7
c0002893:	89 f0                	mov    eax,esi
c0002895:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002898:	e8 a1 fa ff ff       	call   c000233e <move_window>
c000289d:	89 c5                	mov    ebp,eax
c000289f:	85 c0                	test   eax,eax
c00028a1:	75 2c                	jne    c00028cf <put_fat+0x14d>
c00028a3:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c00028a9:	c1 e3 02             	shl    ebx,0x2
c00028ac:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c00028b2:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c00028b6:	89 d8                	mov    eax,ebx
c00028b8:	e8 27 f5 ff ff       	call   c0001de4 <ld_dword>
c00028bd:	25 00 00 00 f0       	and    eax,0xf0000000
c00028c2:	09 f8                	or     eax,edi
c00028c4:	89 c2                	mov    edx,eax
c00028c6:	89 d8                	mov    eax,ebx
c00028c8:	e8 33 f5 ff ff       	call   c0001e00 <st_dword>
c00028cd:	eb bb                	jmp    c000288a <put_fat+0x108>
c00028cf:	83 c4 1c             	add    esp,0x1c
c00028d2:	89 e8                	mov    eax,ebp
c00028d4:	5b                   	pop    ebx
c00028d5:	5e                   	pop    esi
c00028d6:	5f                   	pop    edi
c00028d7:	5d                   	pop    ebp
c00028d8:	c3                   	ret    

c00028d9 <dir_clear>:
c00028d9:	55                   	push   ebp
c00028da:	57                   	push   edi
c00028db:	56                   	push   esi
c00028dc:	89 c6                	mov    esi,eax
c00028de:	53                   	push   ebx
c00028df:	83 ec 1c             	sub    esp,0x1c
c00028e2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00028e6:	e8 f0 f9 ff ff       	call   c00022db <sync_window>
c00028eb:	85 c0                	test   eax,eax
c00028ed:	0f 85 c0 00 00 00    	jne    c00029b3 <dir_clear+0xda>
c00028f3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028f7:	89 f0                	mov    eax,esi
c00028f9:	e8 30 f7 ff ff       	call   c000202e <clst2sect>
c00028fe:	31 d2                	xor    edx,edx
c0002900:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002903:	89 c5                	mov    ebp,eax
c0002905:	b9 00 02 00 00       	mov    ecx,0x200
c000290a:	8d 46 34             	lea    eax,[esi+0x34]
c000290d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002911:	e8 02 f5 ff ff       	call   c0001e18 <mem_set>
c0002916:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000291a:	c1 e3 09             	shl    ebx,0x9
c000291d:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002923:	76 1b                	jbe    c0002940 <dir_clear+0x67>
c0002925:	bb 00 80 00 00       	mov    ebx,0x8000
c000292a:	eb 14                	jmp    c0002940 <dir_clear+0x67>
c000292c:	83 ec 0c             	sub    esp,0xc
c000292f:	53                   	push   ebx
c0002930:	e8 eb 32 00 00       	call   c0005c20 <ff_memalloc>
c0002935:	83 c4 10             	add    esp,0x10
c0002938:	89 c7                	mov    edi,eax
c000293a:	85 c0                	test   eax,eax
c000293c:	75 7c                	jne    c00029ba <dir_clear+0xe1>
c000293e:	d1 eb                	shr    ebx,1
c0002940:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002946:	77 e4                	ja     c000292c <dir_clear+0x53>
c0002948:	31 db                	xor    ebx,ebx
c000294a:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000294e:	39 d8                	cmp    eax,ebx
c0002950:	76 53                	jbe    c00029a5 <dir_clear+0xcc>
c0002952:	6a 01                	push   0x1
c0002954:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002957:	50                   	push   eax
c0002958:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000295c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002960:	50                   	push   eax
c0002961:	e8 3c f4 ff ff       	call   c0001da2 <disk_write>
c0002966:	83 c4 10             	add    esp,0x10
c0002969:	85 c0                	test   eax,eax
c000296b:	75 38                	jne    c00029a5 <dir_clear+0xcc>
c000296d:	43                   	inc    ebx
c000296e:	eb da                	jmp    c000294a <dir_clear+0x71>
c0002970:	52                   	push   edx
c0002971:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002974:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0002978:	50                   	push   eax
c0002979:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000297d:	57                   	push   edi
c000297e:	50                   	push   eax
c000297f:	e8 1e f4 ff ff       	call   c0001da2 <disk_write>
c0002984:	83 c4 10             	add    esp,0x10
c0002987:	85 c0                	test   eax,eax
c0002989:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000298d:	75 0a                	jne    c0002999 <dir_clear+0xc0>
c000298f:	01 d3                	add    ebx,edx
c0002991:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002995:	39 d8                	cmp    eax,ebx
c0002997:	77 d7                	ja     c0002970 <dir_clear+0x97>
c0002999:	83 ec 0c             	sub    esp,0xc
c000299c:	57                   	push   edi
c000299d:	e8 96 32 00 00       	call   c0005c38 <ff_memfree>
c00029a2:	83 c4 10             	add    esp,0x10
c00029a5:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00029a9:	39 d8                	cmp    eax,ebx
c00029ab:	0f 95 c0             	setne  al
c00029ae:	0f b6 c0             	movzx  eax,al
c00029b1:	eb 19                	jmp    c00029cc <dir_clear+0xf3>
c00029b3:	b8 01 00 00 00       	mov    eax,0x1
c00029b8:	eb 12                	jmp    c00029cc <dir_clear+0xf3>
c00029ba:	89 d9                	mov    ecx,ebx
c00029bc:	31 d2                	xor    edx,edx
c00029be:	e8 55 f4 ff ff       	call   c0001e18 <mem_set>
c00029c3:	89 da                	mov    edx,ebx
c00029c5:	31 db                	xor    ebx,ebx
c00029c7:	c1 ea 09             	shr    edx,0x9
c00029ca:	eb c5                	jmp    c0002991 <dir_clear+0xb8>
c00029cc:	83 c4 1c             	add    esp,0x1c
c00029cf:	5b                   	pop    ebx
c00029d0:	5e                   	pop    esi
c00029d1:	5f                   	pop    edi
c00029d2:	5d                   	pop    ebp
c00029d3:	c3                   	ret    

c00029d4 <create_name>:
c00029d4:	55                   	push   ebp
c00029d5:	57                   	push   edi
c00029d6:	89 d7                	mov    edi,edx
c00029d8:	56                   	push   esi
c00029d9:	31 f6                	xor    esi,esi
c00029db:	53                   	push   ebx
c00029dc:	83 ec 3c             	sub    esp,0x3c
c00029df:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00029e3:	8b 02                	mov    eax,DWORD PTR [edx]
c00029e5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00029e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029ed:	8b 00                	mov    eax,DWORD PTR [eax]
c00029ef:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00029f2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00029f6:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00029fa:	e8 5e f4 ff ff       	call   c0001e5d <tchar2uni>
c00029ff:	89 c3                	mov    ebx,eax
c0002a01:	83 f8 ff             	cmp    eax,0xffffffff
c0002a04:	75 0a                	jne    c0002a10 <create_name+0x3c>
c0002a06:	b8 06 00 00 00       	mov    eax,0x6
c0002a0b:	e9 93 02 00 00       	jmp    c0002ca3 <create_name+0x2cf>
c0002a10:	3d ff ff 00 00       	cmp    eax,0xffff
c0002a15:	76 0c                	jbe    c0002a23 <create_name+0x4f>
c0002a17:	c1 e8 10             	shr    eax,0x10
c0002a1a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002a1e:	66 89 04 72          	mov    WORD PTR [edx+esi*2],ax
c0002a22:	46                   	inc    esi
c0002a23:	0f b7 d3             	movzx  edx,bx
c0002a26:	83 fa 1f             	cmp    edx,0x1f
c0002a29:	76 4a                	jbe    c0002a75 <create_name+0xa1>
c0002a2b:	83 fa 5c             	cmp    edx,0x5c
c0002a2e:	74 30                	je     c0002a60 <create_name+0x8c>
c0002a30:	83 fa 2f             	cmp    edx,0x2f
c0002a33:	74 2b                	je     c0002a60 <create_name+0x8c>
c0002a35:	83 fa 7f             	cmp    edx,0x7f
c0002a38:	77 0e                	ja     c0002a48 <create_name+0x74>
c0002a3a:	b8 22 06 02 c0       	mov    eax,0xc0020622
c0002a3f:	e8 02 f4 ff ff       	call   c0001e46 <chk_chr>
c0002a44:	85 c0                	test   eax,eax
c0002a46:	75 be                	jne    c0002a06 <create_name+0x32>
c0002a48:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0002a4e:	77 b6                	ja     c0002a06 <create_name+0x32>
c0002a50:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a54:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002a58:	46                   	inc    esi
c0002a59:	eb 9b                	jmp    c00029f6 <create_name+0x22>
c0002a5b:	40                   	inc    eax
c0002a5c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002a60:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002a64:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0002a67:	83 fa 2f             	cmp    edx,0x2f
c0002a6a:	74 ef                	je     c0002a5b <create_name+0x87>
c0002a6c:	83 fa 5c             	cmp    edx,0x5c
c0002a6f:	74 ea                	je     c0002a5b <create_name+0x87>
c0002a71:	31 db                	xor    ebx,ebx
c0002a73:	eb 02                	jmp    c0002a77 <create_name+0xa3>
c0002a75:	b3 04                	mov    bl,0x4
c0002a77:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002a7b:	89 07                	mov    DWORD PTR [edi],eax
c0002a7d:	85 f6                	test   esi,esi
c0002a7f:	74 16                	je     c0002a97 <create_name+0xc3>
c0002a81:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a85:	0f b7 44 70 fe       	movzx  eax,WORD PTR [eax+esi*2-0x2]
c0002a8a:	83 f8 20             	cmp    eax,0x20
c0002a8d:	74 05                	je     c0002a94 <create_name+0xc0>
c0002a8f:	83 f8 2e             	cmp    eax,0x2e
c0002a92:	75 03                	jne    c0002a97 <create_name+0xc3>
c0002a94:	4e                   	dec    esi
c0002a95:	eb e6                	jmp    c0002a7d <create_name+0xa9>
c0002a97:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a9b:	31 ff                	xor    edi,edi
c0002a9d:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0002aa3:	85 f6                	test   esi,esi
c0002aa5:	0f 84 5b ff ff ff    	je     c0002a06 <create_name+0x32>
c0002aab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002aaf:	8d 57 01             	lea    edx,[edi+0x1]
c0002ab2:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002ab6:	83 f8 20             	cmp    eax,0x20
c0002ab9:	75 04                	jne    c0002abf <create_name+0xeb>
c0002abb:	89 d7                	mov    edi,edx
c0002abd:	eb ec                	jmp    c0002aab <create_name+0xd7>
c0002abf:	85 ff                	test   edi,edi
c0002ac1:	75 05                	jne    c0002ac8 <create_name+0xf4>
c0002ac3:	83 f8 2e             	cmp    eax,0x2e
c0002ac6:	75 08                	jne    c0002ad0 <create_name+0xfc>
c0002ac8:	83 cb 03             	or     ebx,0x3
c0002acb:	eb 03                	jmp    c0002ad0 <create_name+0xfc>
c0002acd:	4e                   	dec    esi
c0002ace:	74 0c                	je     c0002adc <create_name+0x108>
c0002ad0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002ad4:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0002ada:	75 f1                	jne    c0002acd <create_name+0xf9>
c0002adc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002ae0:	b9 0b 00 00 00       	mov    ecx,0xb
c0002ae5:	83 c0 20             	add    eax,0x20
c0002ae8:	ba 20 00 00 00       	mov    edx,0x20
c0002aed:	31 ed                	xor    ebp,ebp
c0002aef:	e8 24 f3 ff ff       	call   c0001e18 <mem_set>
c0002af4:	b9 08 00 00 00       	mov    ecx,0x8
c0002af9:	c6 44 24 08 00       	mov    BYTE PTR [esp+0x8],0x0
c0002afe:	8d 47 01             	lea    eax,[edi+0x1]
c0002b01:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002b05:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002b09:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002b0d:	89 c7                	mov    edi,eax
c0002b0f:	85 c0                	test   eax,eax
c0002b11:	0f 84 25 01 00 00    	je     c0002c3c <create_name+0x268>
c0002b17:	83 f8 20             	cmp    eax,0x20
c0002b1a:	74 0f                	je     c0002b2b <create_name+0x157>
c0002b1c:	83 f8 2e             	cmp    eax,0x2e
c0002b1f:	75 13                	jne    c0002b34 <create_name+0x160>
c0002b21:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002b25:	0f 84 6a 01 00 00    	je     c0002c95 <create_name+0x2c1>
c0002b2b:	83 cb 03             	or     ebx,0x3
c0002b2e:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0002b32:	eb ca                	jmp    c0002afe <create_name+0x12a>
c0002b34:	39 cd                	cmp    ebp,ecx
c0002b36:	73 0b                	jae    c0002b43 <create_name+0x16f>
c0002b38:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002b3c:	75 3f                	jne    c0002b7d <create_name+0x1a9>
c0002b3e:	e9 52 01 00 00       	jmp    c0002c95 <create_name+0x2c1>
c0002b43:	83 f9 0b             	cmp    ecx,0xb
c0002b46:	75 0d                	jne    c0002b55 <create_name+0x181>
c0002b48:	83 cb 03             	or     ebx,0x3
c0002b4b:	b9 0b 00 00 00       	mov    ecx,0xb
c0002b50:	e9 e7 00 00 00       	jmp    c0002c3c <create_name+0x268>
c0002b55:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002b59:	74 0d                	je     c0002b68 <create_name+0x194>
c0002b5b:	83 cb 03             	or     ebx,0x3
c0002b5e:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002b62:	0f 87 d4 00 00 00    	ja     c0002c3c <create_name+0x268>
c0002b68:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002b6d:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0002b71:	b9 0b 00 00 00       	mov    ecx,0xb
c0002b76:	bd 08 00 00 00       	mov    ebp,0x8
c0002b7b:	eb b1                	jmp    c0002b2e <create_name+0x15a>
c0002b7d:	83 f8 7f             	cmp    eax,0x7f
c0002b80:	76 66                	jbe    c0002be8 <create_name+0x214>
c0002b82:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002b86:	89 d9                	mov    ecx,ebx
c0002b88:	83 c9 02             	or     ecx,0x2
c0002b8b:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002b8f:	52                   	push   edx
c0002b90:	52                   	push   edx
c0002b91:	68 b5 01 00 00       	push   0x1b5
c0002b96:	50                   	push   eax
c0002b97:	e8 b4 30 00 00       	call   c0005c50 <ff_uni2oem>
c0002b9c:	83 c4 10             	add    esp,0x10
c0002b9f:	89 c7                	mov    edi,eax
c0002ba1:	a8 80                	test   al,0x80
c0002ba3:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002ba7:	74 0c                	je     c0002bb5 <create_name+0x1e1>
c0002ba9:	83 e7 7f             	and    edi,0x7f
c0002bac:	0f b6 bf e0 06 02 c0 	movzx  edi,BYTE PTR [edi-0x3ffdf920]
c0002bb3:	eb 2a                	jmp    c0002bdf <create_name+0x20b>
c0002bb5:	0f b7 c0             	movzx  eax,ax
c0002bb8:	3d ff 00 00 00       	cmp    eax,0xff
c0002bbd:	76 20                	jbe    c0002bdf <create_name+0x20b>
c0002bbf:	8d 51 ff             	lea    edx,[ecx-0x1]
c0002bc2:	39 ea                	cmp    edx,ebp
c0002bc4:	77 0a                	ja     c0002bd0 <create_name+0x1fc>
c0002bc6:	83 cb 03             	or     ebx,0x3
c0002bc9:	89 cd                	mov    ebp,ecx
c0002bcb:	e9 5e ff ff ff       	jmp    c0002b2e <create_name+0x15a>
c0002bd0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0002bd4:	88 64 2b 20          	mov    BYTE PTR [ebx+ebp*1+0x20],ah
c0002bd8:	45                   	inc    ebp
c0002bd9:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002bdd:	eb 4d                	jmp    c0002c2c <create_name+0x258>
c0002bdf:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002be3:	66 85 ff             	test   di,di
c0002be6:	74 19                	je     c0002c01 <create_name+0x22d>
c0002be8:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002bec:	0f b7 d7             	movzx  edx,di
c0002bef:	b8 2b 06 02 c0       	mov    eax,0xc002062b
c0002bf4:	e8 4d f2 ff ff       	call   c0001e46 <chk_chr>
c0002bf9:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002bfd:	85 c0                	test   eax,eax
c0002bff:	74 0a                	je     c0002c0b <create_name+0x237>
c0002c01:	83 cb 03             	or     ebx,0x3
c0002c04:	bf 5f 00 00 00       	mov    edi,0x5f
c0002c09:	eb 21                	jmp    c0002c2c <create_name+0x258>
c0002c0b:	8d 47 bf             	lea    eax,[edi-0x41]
c0002c0e:	66 83 f8 19          	cmp    ax,0x19
c0002c12:	77 07                	ja     c0002c1b <create_name+0x247>
c0002c14:	83 4c 24 08 02       	or     DWORD PTR [esp+0x8],0x2
c0002c19:	eb 11                	jmp    c0002c2c <create_name+0x258>
c0002c1b:	8d 47 9f             	lea    eax,[edi-0x61]
c0002c1e:	66 83 f8 19          	cmp    ax,0x19
c0002c22:	77 08                	ja     c0002c2c <create_name+0x258>
c0002c24:	83 4c 24 08 01       	or     DWORD PTR [esp+0x8],0x1
c0002c29:	83 ef 20             	sub    edi,0x20
c0002c2c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0002c30:	89 f8                	mov    eax,edi
c0002c32:	88 44 2a 20          	mov    BYTE PTR [edx+ebp*1+0x20],al
c0002c36:	45                   	inc    ebp
c0002c37:	e9 f2 fe ff ff       	jmp    c0002b2e <create_name+0x15a>
c0002c3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002c40:	80 78 20 e5          	cmp    BYTE PTR [eax+0x20],0xe5
c0002c44:	75 04                	jne    c0002c4a <create_name+0x276>
c0002c46:	c6 40 20 05          	mov    BYTE PTR [eax+0x20],0x5
c0002c4a:	83 f9 08             	cmp    ecx,0x8
c0002c4d:	75 05                	jne    c0002c54 <create_name+0x280>
c0002c4f:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002c54:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c58:	83 e0 0c             	and    eax,0xc
c0002c5b:	83 f8 0c             	cmp    eax,0xc
c0002c5e:	74 0c                	je     c0002c6c <create_name+0x298>
c0002c60:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c64:	83 e0 03             	and    eax,0x3
c0002c67:	83 f8 03             	cmp    eax,0x3
c0002c6a:	75 05                	jne    c0002c71 <create_name+0x29d>
c0002c6c:	83 cb 02             	or     ebx,0x2
c0002c6f:	eb 19                	jmp    c0002c8a <create_name+0x2b6>
c0002c71:	f6 c3 02             	test   bl,0x2
c0002c74:	75 14                	jne    c0002c8a <create_name+0x2b6>
c0002c76:	f6 44 24 08 01       	test   BYTE PTR [esp+0x8],0x1
c0002c7b:	74 03                	je     c0002c80 <create_name+0x2ac>
c0002c7d:	83 cb 10             	or     ebx,0x10
c0002c80:	f6 44 24 08 04       	test   BYTE PTR [esp+0x8],0x4
c0002c85:	74 03                	je     c0002c8a <create_name+0x2b6>
c0002c87:	83 cb 08             	or     ebx,0x8
c0002c8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002c8e:	88 58 2b             	mov    BYTE PTR [eax+0x2b],bl
c0002c91:	31 c0                	xor    eax,eax
c0002c93:	eb 0e                	jmp    c0002ca3 <create_name+0x2cf>
c0002c95:	83 f9 0b             	cmp    ecx,0xb
c0002c98:	0f 85 ca fe ff ff    	jne    c0002b68 <create_name+0x194>
c0002c9e:	e9 a5 fe ff ff       	jmp    c0002b48 <create_name+0x174>
c0002ca3:	83 c4 3c             	add    esp,0x3c
c0002ca6:	5b                   	pop    ebx
c0002ca7:	5e                   	pop    esi
c0002ca8:	5f                   	pop    edi
c0002ca9:	5d                   	pop    ebp
c0002caa:	c3                   	ret    

c0002cab <cmp_lfn>:
c0002cab:	55                   	push   ebp
c0002cac:	57                   	push   edi
c0002cad:	89 d7                	mov    edi,edx
c0002caf:	56                   	push   esi
c0002cb0:	53                   	push   ebx
c0002cb1:	83 ec 1c             	sub    esp,0x1c
c0002cb4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002cb8:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002cbb:	e8 17 f1 ff ff       	call   c0001dd7 <ld_word>
c0002cc0:	66 85 c0             	test   ax,ax
c0002cc3:	74 07                	je     c0002ccc <cmp_lfn+0x21>
c0002cc5:	31 c0                	xor    eax,eax
c0002cc7:	e9 a1 00 00 00       	jmp    c0002d6d <cmp_lfn+0xc2>
c0002ccc:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002cce:	bd 01 00 00 00       	mov    ebp,0x1
c0002cd3:	83 e3 3f             	and    ebx,0x3f
c0002cd6:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002cde:	4b                   	dec    ebx
c0002cdf:	6b db 0d             	imul   ebx,ebx,0xd
c0002ce2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002ce6:	0f b6 80 60 07 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdf8a0]
c0002ced:	01 f8                	add    eax,edi
c0002cef:	e8 e3 f0 ff ff       	call   c0001dd7 <ld_word>
c0002cf4:	66 85 ed             	test   bp,bp
c0002cf7:	89 c6                	mov    esi,eax
c0002cf9:	74 3c                	je     c0002d37 <cmp_lfn+0x8c>
c0002cfb:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002d01:	77 c2                	ja     c0002cc5 <cmp_lfn+0x1a>
c0002d03:	83 ec 0c             	sub    esp,0xc
c0002d06:	0f b7 c0             	movzx  eax,ax
c0002d09:	50                   	push   eax
c0002d0a:	e8 59 30 00 00       	call   c0005d68 <ff_wtoupper>
c0002d0f:	89 c5                	mov    ebp,eax
c0002d11:	8d 43 01             	lea    eax,[ebx+0x1]
c0002d14:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002d18:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002d1c:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002d20:	89 04 24             	mov    DWORD PTR [esp],eax
c0002d23:	e8 40 30 00 00       	call   c0005d68 <ff_wtoupper>
c0002d28:	83 c4 10             	add    esp,0x10
c0002d2b:	39 c5                	cmp    ebp,eax
c0002d2d:	75 96                	jne    c0002cc5 <cmp_lfn+0x1a>
c0002d2f:	89 f5                	mov    ebp,esi
c0002d31:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0002d35:	eb 0b                	jmp    c0002d42 <cmp_lfn+0x97>
c0002d37:	0f b7 c8             	movzx  ecx,ax
c0002d3a:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c0002d40:	75 83                	jne    c0002cc5 <cmp_lfn+0x1a>
c0002d42:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0002d46:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0002d4b:	75 95                	jne    c0002ce2 <cmp_lfn+0x37>
c0002d4d:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002d50:	74 16                	je     c0002d68 <cmp_lfn+0xbd>
c0002d52:	66 85 ed             	test   bp,bp
c0002d55:	74 11                	je     c0002d68 <cmp_lfn+0xbd>
c0002d57:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002d5b:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002d60:	0f 94 c0             	sete   al
c0002d63:	0f b6 c0             	movzx  eax,al
c0002d66:	eb 05                	jmp    c0002d6d <cmp_lfn+0xc2>
c0002d68:	b8 01 00 00 00       	mov    eax,0x1
c0002d6d:	83 c4 1c             	add    esp,0x1c
c0002d70:	5b                   	pop    ebx
c0002d71:	5e                   	pop    esi
c0002d72:	5f                   	pop    edi
c0002d73:	5d                   	pop    ebp
c0002d74:	c3                   	ret    

c0002d75 <sync_fs>:
c0002d75:	56                   	push   esi
c0002d76:	53                   	push   ebx
c0002d77:	53                   	push   ebx
c0002d78:	89 c3                	mov    ebx,eax
c0002d7a:	e8 5c f5 ff ff       	call   c00022db <sync_window>
c0002d7f:	85 c0                	test   eax,eax
c0002d81:	0f 85 9a 00 00 00    	jne    c0002e21 <sync_fs+0xac>
c0002d87:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002d8a:	75 7b                	jne    c0002e07 <sync_fs+0x92>
c0002d8c:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002d90:	75 75                	jne    c0002e07 <sync_fs+0x92>
c0002d92:	b9 00 02 00 00       	mov    ecx,0x200
c0002d97:	8d 73 34             	lea    esi,[ebx+0x34]
c0002d9a:	31 d2                	xor    edx,edx
c0002d9c:	89 f0                	mov    eax,esi
c0002d9e:	e8 75 f0 ff ff       	call   c0001e18 <mem_set>
c0002da3:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002da9:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002dae:	e8 49 f0 ff ff       	call   c0001dfc <st_word>
c0002db3:	ba 52 52 61 41       	mov    edx,0x41615252
c0002db8:	89 f0                	mov    eax,esi
c0002dba:	e8 41 f0 ff ff       	call   c0001e00 <st_dword>
c0002dbf:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002dc5:	ba 72 72 41 61       	mov    edx,0x61417272
c0002dca:	e8 31 f0 ff ff       	call   c0001e00 <st_dword>
c0002dcf:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002dd2:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002dd8:	e8 23 f0 ff ff       	call   c0001e00 <st_dword>
c0002ddd:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002de0:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002de6:	e8 15 f0 ff ff       	call   c0001e00 <st_dword>
c0002deb:	6a 01                	push   0x1
c0002ded:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002df0:	40                   	inc    eax
c0002df1:	50                   	push   eax
c0002df2:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002df5:	56                   	push   esi
c0002df6:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002dfa:	50                   	push   eax
c0002dfb:	e8 a2 ef ff ff       	call   c0001da2 <disk_write>
c0002e00:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002e04:	83 c4 10             	add    esp,0x10
c0002e07:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002e0b:	51                   	push   ecx
c0002e0c:	6a 00                	push   0x0
c0002e0e:	6a 00                	push   0x0
c0002e10:	50                   	push   eax
c0002e11:	e8 a2 ef ff ff       	call   c0001db8 <disk_ioctl>
c0002e16:	83 c4 10             	add    esp,0x10
c0002e19:	85 c0                	test   eax,eax
c0002e1b:	0f 95 c0             	setne  al
c0002e1e:	0f b6 c0             	movzx  eax,al
c0002e21:	5a                   	pop    edx
c0002e22:	5b                   	pop    ebx
c0002e23:	5e                   	pop    esi
c0002e24:	c3                   	ret    

c0002e25 <create_partition>:
c0002e25:	55                   	push   ebp
c0002e26:	0f b6 c0             	movzx  eax,al
c0002e29:	57                   	push   edi
c0002e2a:	56                   	push   esi
c0002e2b:	53                   	push   ebx
c0002e2c:	83 ec 40             	sub    esp,0x40
c0002e2f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002e33:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0002e37:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002e3b:	8d 44 24 30          	lea    eax,[esp+0x30]
c0002e3f:	50                   	push   eax
c0002e40:	6a 01                	push   0x1
c0002e42:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0002e46:	e8 6d ef ff ff       	call   c0001db8 <disk_ioctl>
c0002e4b:	83 c4 10             	add    esp,0x10
c0002e4e:	85 c0                	test   eax,eax
c0002e50:	0f 85 6a 01 00 00    	jne    c0002fc0 <create_partition+0x19b>
c0002e56:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002e5a:	b9 05 00 00 00       	mov    ecx,0x5
c0002e5f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002e63:	be 08 00 00 00       	mov    esi,0x8
c0002e68:	89 f0                	mov    eax,esi
c0002e6a:	31 d2                	xor    edx,edx
c0002e6c:	0f b6 d8             	movzx  ebx,al
c0002e6f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002e73:	f7 f3                	div    ebx
c0002e75:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0002e7a:	76 0a                	jbe    c0002e86 <create_partition+0x61>
c0002e7c:	d1 e6                	shl    esi,1
c0002e7e:	49                   	dec    ecx
c0002e7f:	75 e7                	jne    c0002e68 <create_partition+0x43>
c0002e81:	be ff ff ff ff       	mov    esi,0xffffffff
c0002e86:	b9 00 02 00 00       	mov    ecx,0x200
c0002e8b:	31 d2                	xor    edx,edx
c0002e8d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002e91:	e8 82 ef ff ff       	call   c0001e18 <mem_set>
c0002e96:	b9 64 00 00 00       	mov    ecx,0x64
c0002e9b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002e9f:	31 d2                	xor    edx,edx
c0002ea1:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002ea9:	f7 f1                	div    ecx
c0002eab:	b9 3f 00 00 00       	mov    ecx,0x3f
c0002eb0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002eb4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002eb8:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c0002ebe:	89 f0                	mov    eax,esi
c0002ec0:	0f b6 c0             	movzx  eax,al
c0002ec3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002ec7:	85 c9                	test   ecx,ecx
c0002ec9:	75 34                	jne    c0002eff <create_partition+0xda>
c0002ecb:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002ecf:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002ed4:	05 fe 01 00 00       	add    eax,0x1fe
c0002ed9:	e8 1e ef ff ff       	call   c0001dfc <st_word>
c0002ede:	6a 01                	push   0x1
c0002ee0:	6a 00                	push   0x0
c0002ee2:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0002ee6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0002eea:	e8 b3 ee ff ff       	call   c0001da2 <disk_write>
c0002eef:	83 c4 10             	add    esp,0x10
c0002ef2:	85 c0                	test   eax,eax
c0002ef4:	0f 95 c0             	setne  al
c0002ef7:	0f b6 c0             	movzx  eax,al
c0002efa:	e9 c6 00 00 00       	jmp    c0002fc5 <create_partition+0x1a0>
c0002eff:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c0002f03:	76 c6                	jbe    c0002ecb <create_partition+0xa6>
c0002f05:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002f09:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0002f0d:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c0002f10:	83 fe 64             	cmp    esi,0x64
c0002f13:	77 0d                	ja     c0002f22 <create_partition+0xfd>
c0002f15:	74 07                	je     c0002f1e <create_partition+0xf9>
c0002f17:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0002f1c:	eb 04                	jmp    c0002f22 <create_partition+0xfd>
c0002f1e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002f22:	31 c0                	xor    eax,eax
c0002f24:	89 f2                	mov    edx,esi
c0002f26:	01 ca                	add    edx,ecx
c0002f28:	0f 92 c0             	setb   al
c0002f2b:	3b 54 24 04          	cmp    edx,DWORD PTR [esp+0x4]
c0002f2f:	77 04                	ja     c0002f35 <create_partition+0x110>
c0002f31:	85 c0                	test   eax,eax
c0002f33:	74 08                	je     c0002f3d <create_partition+0x118>
c0002f35:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002f39:	29 ce                	sub    esi,ecx
c0002f3b:	eb 04                	jmp    c0002f41 <create_partition+0x11c>
c0002f3d:	85 f6                	test   esi,esi
c0002f3f:	74 8a                	je     c0002ecb <create_partition+0xa6>
c0002f41:	89 ca                	mov    edx,ecx
c0002f43:	89 d8                	mov    eax,ebx
c0002f45:	bf 3f 00 00 00       	mov    edi,0x3f
c0002f4a:	e8 b1 ee ff ff       	call   c0001e00 <st_dword>
c0002f4f:	8d 43 04             	lea    eax,[ebx+0x4]
c0002f52:	89 f2                	mov    edx,esi
c0002f54:	83 c3 10             	add    ebx,0x10
c0002f57:	e8 a4 ee ff ff       	call   c0001e00 <st_dword>
c0002f5c:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0002f60:	31 d2                	xor    edx,edx
c0002f62:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c0002f65:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002f69:	89 c8                	mov    eax,ecx
c0002f6b:	01 f1                	add    ecx,esi
c0002f6d:	f7 f7                	div    edi
c0002f6f:	89 d5                	mov    ebp,edx
c0002f71:	31 d2                	xor    edx,edx
c0002f73:	45                   	inc    ebp
c0002f74:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0002f78:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0002f7b:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0002f7e:	89 c2                	mov    edx,eax
c0002f80:	8d 41 ff             	lea    eax,[ecx-0x1]
c0002f83:	c1 ea 02             	shr    edx,0x2
c0002f86:	83 e2 c0             	and    edx,0xffffffc0
c0002f89:	09 ea                	or     edx,ebp
c0002f8b:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c0002f8e:	31 d2                	xor    edx,edx
c0002f90:	f7 f7                	div    edi
c0002f92:	89 d6                	mov    esi,edx
c0002f94:	31 d2                	xor    edx,edx
c0002f96:	46                   	inc    esi
c0002f97:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0002f9b:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c0002f9e:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c0002fa1:	89 c7                	mov    edi,eax
c0002fa3:	c1 ef 02             	shr    edi,0x2
c0002fa6:	83 e7 c0             	and    edi,0xffffffc0
c0002fa9:	09 fe                	or     esi,edi
c0002fab:	89 f2                	mov    edx,esi
c0002fad:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0002fb0:	83 7c 24 08 04       	cmp    DWORD PTR [esp+0x8],0x4
c0002fb5:	0f 85 0c ff ff ff    	jne    c0002ec7 <create_partition+0xa2>
c0002fbb:	e9 0b ff ff ff       	jmp    c0002ecb <create_partition+0xa6>
c0002fc0:	b8 01 00 00 00       	mov    eax,0x1
c0002fc5:	83 c4 3c             	add    esp,0x3c
c0002fc8:	5b                   	pop    ebx
c0002fc9:	5e                   	pop    esi
c0002fca:	5f                   	pop    edi
c0002fcb:	5d                   	pop    ebp
c0002fcc:	c3                   	ret    

c0002fcd <get_fileinfo>:
c0002fcd:	55                   	push   ebp
c0002fce:	57                   	push   edi
c0002fcf:	56                   	push   esi
c0002fd0:	53                   	push   ebx
c0002fd1:	83 ec 1c             	sub    esp,0x1c
c0002fd4:	8b 30                	mov    esi,DWORD PTR [eax]
c0002fd6:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c0002fda:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0002fde:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c0002fe2:	0f 84 d3 01 00 00    	je     c00031bb <get_fileinfo+0x1ee>
c0002fe8:	89 d3                	mov    ebx,edx
c0002fea:	89 c6                	mov    esi,eax
c0002fec:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c0002ff0:	74 72                	je     c0003064 <get_fileinfo+0x97>
c0002ff2:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002ffa:	31 ed                	xor    ebp,ebp
c0002ffc:	31 ff                	xor    edi,edi
c0002ffe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003002:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0003006:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003009:	0f b7 04 08          	movzx  eax,WORD PTR [eax+ecx*1]
c000300d:	89 c2                	mov    edx,eax
c000300f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003013:	85 c0                	test   eax,eax
c0003015:	74 41                	je     c0003058 <get_fileinfo+0x8b>
c0003017:	0f b7 c5             	movzx  eax,bp
c000301a:	85 c0                	test   eax,eax
c000301c:	75 0d                	jne    c000302b <get_fileinfo+0x5e>
c000301e:	8d 8a 00 28 00 00    	lea    ecx,[edx+0x2800]
c0003024:	66 81 f9 ff 07       	cmp    cx,0x7ff
c0003029:	76 22                	jbe    c000304d <get_fileinfo+0x80>
c000302b:	c1 e0 10             	shl    eax,0x10
c000302e:	b9 ff 00 00 00       	mov    ecx,0xff
c0003033:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0003037:	29 f9                	sub    ecx,edi
c0003039:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c000303d:	e8 f3 ee ff ff       	call   c0001f35 <put_utf>
c0003042:	0f b6 c0             	movzx  eax,al
c0003045:	85 c0                	test   eax,eax
c0003047:	74 0d                	je     c0003056 <get_fileinfo+0x89>
c0003049:	01 c7                	add    edi,eax
c000304b:	31 d2                	xor    edx,edx
c000304d:	83 44 24 04 02       	add    DWORD PTR [esp+0x4],0x2
c0003052:	89 d5                	mov    ebp,edx
c0003054:	eb a8                	jmp    c0002ffe <get_fileinfo+0x31>
c0003056:	31 ff                	xor    edi,edi
c0003058:	66 85 ed             	test   bp,bp
c000305b:	74 02                	je     c000305f <get_fileinfo+0x92>
c000305d:	31 ff                	xor    edi,edi
c000305f:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c0003064:	31 ff                	xor    edi,edi
c0003066:	31 c9                	xor    ecx,ecx
c0003068:	83 f9 0a             	cmp    ecx,0xa
c000306b:	0f 87 ac 00 00 00    	ja     c000311d <get_fileinfo+0x150>
c0003071:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003074:	8d 69 01             	lea    ebp,[ecx+0x1]
c0003077:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c000307b:	89 c2                	mov    edx,eax
c000307d:	83 f8 20             	cmp    eax,0x20
c0003080:	0f 84 90 00 00 00    	je     c0003116 <get_fileinfo+0x149>
c0003086:	83 f8 05             	cmp    eax,0x5
c0003089:	75 05                	jne    c0003090 <get_fileinfo+0xc3>
c000308b:	ba e5 00 00 00       	mov    edx,0xe5
c0003090:	83 ff 0b             	cmp    edi,0xb
c0003093:	77 0b                	ja     c00030a0 <get_fileinfo+0xd3>
c0003095:	83 fd 09             	cmp    ebp,0x9
c0003098:	75 06                	jne    c00030a0 <get_fileinfo+0xd3>
c000309a:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c000309f:	47                   	inc    edi
c00030a0:	0f b7 c2             	movzx  eax,dx
c00030a3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00030a7:	e8 ab ed ff ff       	call   c0001e57 <dbc_1st>
c00030ac:	85 c0                	test   eax,eax
c00030ae:	74 2f                	je     c00030df <get_fileinfo+0x112>
c00030b0:	83 fd 08             	cmp    ebp,0x8
c00030b3:	74 2a                	je     c00030df <get_fileinfo+0x112>
c00030b5:	83 fd 0b             	cmp    ebp,0xb
c00030b8:	74 25                	je     c00030df <get_fileinfo+0x112>
c00030ba:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030bd:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c00030c1:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00030c5:	e8 90 ed ff ff       	call   c0001e5a <dbc_2nd>
c00030ca:	85 c0                	test   eax,eax
c00030cc:	74 11                	je     c00030df <get_fileinfo+0x112>
c00030ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00030d2:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c00030d7:	c1 e0 08             	shl    eax,0x8
c00030da:	8d 69 02             	lea    ebp,[ecx+0x2]
c00030dd:	09 c2                	or     edx,eax
c00030df:	0f b7 d2             	movzx  edx,dx
c00030e2:	50                   	push   eax
c00030e3:	50                   	push   eax
c00030e4:	68 b5 01 00 00       	push   0x1b5
c00030e9:	52                   	push   edx
c00030ea:	e8 01 2c 00 00       	call   c0005cf0 <ff_oem2uni>
c00030ef:	83 c4 10             	add    esp,0x10
c00030f2:	0f b7 c0             	movzx  eax,ax
c00030f5:	85 c0                	test   eax,eax
c00030f7:	75 04                	jne    c00030fd <get_fileinfo+0x130>
c00030f9:	31 ff                	xor    edi,edi
c00030fb:	eb 20                	jmp    c000311d <get_fileinfo+0x150>
c00030fd:	b9 0c 00 00 00       	mov    ecx,0xc
c0003102:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c0003106:	29 f9                	sub    ecx,edi
c0003108:	e8 28 ee ff ff       	call   c0001f35 <put_utf>
c000310d:	0f b6 c0             	movzx  eax,al
c0003110:	85 c0                	test   eax,eax
c0003112:	74 e5                	je     c00030f9 <get_fileinfo+0x12c>
c0003114:	01 c7                	add    edi,eax
c0003116:	89 e9                	mov    ecx,ebp
c0003118:	e9 4b ff ff ff       	jmp    c0003068 <get_fileinfo+0x9b>
c000311d:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c0003122:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c0003126:	75 5f                	jne    c0003187 <get_fileinfo+0x1ba>
c0003128:	85 ff                	test   edi,edi
c000312a:	75 0b                	jne    c0003137 <get_fileinfo+0x16a>
c000312c:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c0003130:	ba 01 00 00 00       	mov    edx,0x1
c0003135:	eb 3e                	jmp    c0003175 <get_fileinfo+0x1a8>
c0003137:	bf 08 00 00 00       	mov    edi,0x8
c000313c:	31 d2                	xor    edx,edx
c000313e:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c0003144:	84 c0                	test   al,al
c0003146:	74 2d                	je     c0003175 <get_fileinfo+0x1a8>
c0003148:	66 83 f8 2e          	cmp    ax,0x2e
c000314c:	74 1b                	je     c0003169 <get_fileinfo+0x19c>
c000314e:	8d 48 bf             	lea    ecx,[eax-0x41]
c0003151:	66 83 f9 19          	cmp    cx,0x19
c0003155:	77 17                	ja     c000316e <get_fileinfo+0x1a1>
c0003157:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c000315a:	8a 49 0c             	mov    cl,BYTE PTR [ecx+0xc]
c000315d:	21 f9                	and    ecx,edi
c000315f:	80 e1 18             	and    cl,0x18
c0003162:	74 0a                	je     c000316e <get_fileinfo+0x1a1>
c0003164:	83 c0 20             	add    eax,0x20
c0003167:	eb 05                	jmp    c000316e <get_fileinfo+0x1a1>
c0003169:	bf 10 00 00 00       	mov    edi,0x10
c000316e:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c0003172:	42                   	inc    edx
c0003173:	eb c9                	jmp    c000313e <get_fileinfo+0x171>
c0003175:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c000317a:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000317d:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0003181:	75 04                	jne    c0003187 <get_fileinfo+0x1ba>
c0003183:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c0003187:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000318a:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c000318d:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0003190:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003193:	83 c0 1c             	add    eax,0x1c
c0003196:	e8 49 ec ff ff       	call   c0001de4 <ld_dword>
c000319b:	89 03                	mov    DWORD PTR [ebx],eax
c000319d:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031a0:	83 c0 16             	add    eax,0x16
c00031a3:	e8 2f ec ff ff       	call   c0001dd7 <ld_word>
c00031a8:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c00031ac:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031af:	83 c0 18             	add    eax,0x18
c00031b2:	e8 20 ec ff ff       	call   c0001dd7 <ld_word>
c00031b7:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00031bb:	83 c4 1c             	add    esp,0x1c
c00031be:	5b                   	pop    ebx
c00031bf:	5e                   	pop    esi
c00031c0:	5f                   	pop    edi
c00031c1:	5d                   	pop    ebp
c00031c2:	c3                   	ret    

c00031c3 <ld_clust.isra.0>:
c00031c3:	56                   	push   esi
c00031c4:	89 c6                	mov    esi,eax
c00031c6:	53                   	push   ebx
c00031c7:	8d 42 1a             	lea    eax,[edx+0x1a]
c00031ca:	89 d3                	mov    ebx,edx
c00031cc:	e8 06 ec ff ff       	call   c0001dd7 <ld_word>
c00031d1:	0f b7 c8             	movzx  ecx,ax
c00031d4:	89 f0                	mov    eax,esi
c00031d6:	3c 03                	cmp    al,0x3
c00031d8:	75 0d                	jne    c00031e7 <ld_clust.isra.0+0x24>
c00031da:	8d 43 14             	lea    eax,[ebx+0x14]
c00031dd:	e8 f5 eb ff ff       	call   c0001dd7 <ld_word>
c00031e2:	c1 e0 10             	shl    eax,0x10
c00031e5:	09 c1                	or     ecx,eax
c00031e7:	89 c8                	mov    eax,ecx
c00031e9:	5b                   	pop    ebx
c00031ea:	5e                   	pop    esi
c00031eb:	c3                   	ret    

c00031ec <st_clust.isra.1>:
c00031ec:	56                   	push   esi
c00031ed:	89 c6                	mov    esi,eax
c00031ef:	53                   	push   ebx
c00031f0:	89 d3                	mov    ebx,edx
c00031f2:	0f b7 d1             	movzx  edx,cx
c00031f5:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00031f8:	e8 ff eb ff ff       	call   c0001dfc <st_word>
c00031fd:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0003200:	75 0f                	jne    c0003211 <st_clust.isra.1+0x25>
c0003202:	c1 e9 10             	shr    ecx,0x10
c0003205:	8d 43 14             	lea    eax,[ebx+0x14]
c0003208:	89 ca                	mov    edx,ecx
c000320a:	5b                   	pop    ebx
c000320b:	5e                   	pop    esi
c000320c:	e9 eb eb ff ff       	jmp    c0001dfc <st_word>
c0003211:	5b                   	pop    ebx
c0003212:	5e                   	pop    esi
c0003213:	c3                   	ret    

c0003214 <get_fat.isra.2>:
c0003214:	b9 01 00 00 00       	mov    ecx,0x1
c0003219:	83 fa 01             	cmp    edx,0x1
c000321c:	0f 86 f3 00 00 00    	jbe    c0003315 <get_fat.isra.2+0x101>
c0003222:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c0003225:	0f 83 ea 00 00 00    	jae    c0003315 <get_fat.isra.2+0x101>
c000322b:	55                   	push   ebp
c000322c:	57                   	push   edi
c000322d:	89 c7                	mov    edi,eax
c000322f:	56                   	push   esi
c0003230:	89 d6                	mov    esi,edx
c0003232:	53                   	push   ebx
c0003233:	83 ec 0c             	sub    esp,0xc
c0003236:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0003239:	83 f8 02             	cmp    eax,0x2
c000323c:	74 78                	je     c00032b6 <get_fat.isra.2+0xa2>
c000323e:	83 f8 03             	cmp    eax,0x3
c0003241:	0f 84 96 00 00 00    	je     c00032dd <get_fat.isra.2+0xc9>
c0003247:	48                   	dec    eax
c0003248:	0f 85 bd 00 00 00    	jne    c000330b <get_fat.isra.2+0xf7>
c000324e:	89 d3                	mov    ebx,edx
c0003250:	89 f8                	mov    eax,edi
c0003252:	d1 eb                	shr    ebx,1
c0003254:	01 d3                	add    ebx,edx
c0003256:	89 da                	mov    edx,ebx
c0003258:	c1 ea 09             	shr    edx,0x9
c000325b:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c000325e:	e8 db f0 ff ff       	call   c000233e <move_window>
c0003263:	85 c0                	test   eax,eax
c0003265:	74 08                	je     c000326f <get_fat.isra.2+0x5b>
c0003267:	83 c9 ff             	or     ecx,0xffffffff
c000326a:	e9 9c 00 00 00       	jmp    c000330b <get_fat.isra.2+0xf7>
c000326f:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0003272:	89 f8                	mov    eax,edi
c0003274:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c000327a:	89 ea                	mov    edx,ebp
c000327c:	8a 5c 1f 34          	mov    bl,BYTE PTR [edi+ebx*1+0x34]
c0003280:	c1 ea 09             	shr    edx,0x9
c0003283:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003286:	e8 b3 f0 ff ff       	call   c000233e <move_window>
c000328b:	85 c0                	test   eax,eax
c000328d:	75 d8                	jne    c0003267 <get_fat.isra.2+0x53>
c000328f:	0f b6 c3             	movzx  eax,bl
c0003292:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003298:	0f b6 5c 2f 34       	movzx  ebx,BYTE PTR [edi+ebp*1+0x34]
c000329d:	c1 e3 08             	shl    ebx,0x8
c00032a0:	09 c3                	or     ebx,eax
c00032a2:	89 d9                	mov    ecx,ebx
c00032a4:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c00032aa:	83 e6 01             	and    esi,0x1
c00032ad:	74 5c                	je     c000330b <get_fat.isra.2+0xf7>
c00032af:	89 d9                	mov    ecx,ebx
c00032b1:	c1 e9 04             	shr    ecx,0x4
c00032b4:	eb 55                	jmp    c000330b <get_fat.isra.2+0xf7>
c00032b6:	c1 ea 08             	shr    edx,0x8
c00032b9:	89 f8                	mov    eax,edi
c00032bb:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00032be:	e8 7b f0 ff ff       	call   c000233e <move_window>
c00032c3:	85 c0                	test   eax,eax
c00032c5:	75 a0                	jne    c0003267 <get_fat.isra.2+0x53>
c00032c7:	01 f6                	add    esi,esi
c00032c9:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00032cf:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00032d3:	e8 ff ea ff ff       	call   c0001dd7 <ld_word>
c00032d8:	0f b7 c8             	movzx  ecx,ax
c00032db:	eb 2e                	jmp    c000330b <get_fat.isra.2+0xf7>
c00032dd:	c1 ea 07             	shr    edx,0x7
c00032e0:	89 f8                	mov    eax,edi
c00032e2:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00032e5:	e8 54 f0 ff ff       	call   c000233e <move_window>
c00032ea:	85 c0                	test   eax,eax
c00032ec:	0f 85 75 ff ff ff    	jne    c0003267 <get_fat.isra.2+0x53>
c00032f2:	c1 e6 02             	shl    esi,0x2
c00032f5:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00032fb:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00032ff:	e8 e0 ea ff ff       	call   c0001de4 <ld_dword>
c0003304:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003309:	89 c1                	mov    ecx,eax
c000330b:	83 c4 0c             	add    esp,0xc
c000330e:	89 c8                	mov    eax,ecx
c0003310:	5b                   	pop    ebx
c0003311:	5e                   	pop    esi
c0003312:	5f                   	pop    edi
c0003313:	5d                   	pop    ebp
c0003314:	c3                   	ret    
c0003315:	89 c8                	mov    eax,ecx
c0003317:	c3                   	ret    

c0003318 <dir_sdi>:
c0003318:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c000331e:	0f 87 b6 00 00 00    	ja     c00033da <dir_sdi+0xc2>
c0003324:	55                   	push   ebp
c0003325:	57                   	push   edi
c0003326:	56                   	push   esi
c0003327:	53                   	push   ebx
c0003328:	89 d3                	mov    ebx,edx
c000332a:	83 ec 1c             	sub    esp,0x1c
c000332d:	f6 c2 1f             	test   dl,0x1f
c0003330:	74 0a                	je     c000333c <dir_sdi+0x24>
c0003332:	b8 02 00 00 00       	mov    eax,0x2
c0003337:	e9 96 00 00 00       	jmp    c00033d2 <dir_sdi+0xba>
c000333c:	89 c6                	mov    esi,eax
c000333e:	8b 38                	mov    edi,DWORD PTR [eax]
c0003340:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c0003343:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0003346:	85 c9                	test   ecx,ecx
c0003348:	75 23                	jne    c000336d <dir_sdi+0x55>
c000334a:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c000334d:	76 07                	jbe    c0003356 <dir_sdi+0x3e>
c000334f:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c0003352:	85 c0                	test   eax,eax
c0003354:	75 15                	jne    c000336b <dir_sdi+0x53>
c0003356:	89 da                	mov    edx,ebx
c0003358:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c000335c:	c1 ea 05             	shr    edx,0x5
c000335f:	39 c2                	cmp    edx,eax
c0003361:	73 cf                	jae    c0003332 <dir_sdi+0x1a>
c0003363:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c0003366:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003369:	eb 3d                	jmp    c00033a8 <dir_sdi+0x90>
c000336b:	89 c1                	mov    ecx,eax
c000336d:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0003371:	c1 e5 09             	shl    ebp,0x9
c0003374:	89 ca                	mov    edx,ecx
c0003376:	39 eb                	cmp    ebx,ebp
c0003378:	72 1c                	jb     c0003396 <dir_sdi+0x7e>
c000337a:	8b 06                	mov    eax,DWORD PTR [esi]
c000337c:	e8 93 fe ff ff       	call   c0003214 <get_fat.isra.2>
c0003381:	89 c1                	mov    ecx,eax
c0003383:	83 f8 ff             	cmp    eax,0xffffffff
c0003386:	74 45                	je     c00033cd <dir_sdi+0xb5>
c0003388:	83 f8 01             	cmp    eax,0x1
c000338b:	76 a5                	jbe    c0003332 <dir_sdi+0x1a>
c000338d:	39 47 18             	cmp    DWORD PTR [edi+0x18],eax
c0003390:	76 a0                	jbe    c0003332 <dir_sdi+0x1a>
c0003392:	29 eb                	sub    ebx,ebp
c0003394:	eb de                	jmp    c0003374 <dir_sdi+0x5c>
c0003396:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000339a:	89 f8                	mov    eax,edi
c000339c:	e8 8d ec ff ff       	call   c000202e <clst2sect>
c00033a1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00033a5:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00033a8:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c00033ab:	89 4e 14             	mov    DWORD PTR [esi+0x14],ecx
c00033ae:	85 d2                	test   edx,edx
c00033b0:	74 80                	je     c0003332 <dir_sdi+0x1a>
c00033b2:	89 d8                	mov    eax,ebx
c00033b4:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00033ba:	c1 e8 09             	shr    eax,0x9
c00033bd:	01 d0                	add    eax,edx
c00033bf:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00033c2:	8d 44 1f 34          	lea    eax,[edi+ebx*1+0x34]
c00033c6:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00033c9:	31 c0                	xor    eax,eax
c00033cb:	eb 05                	jmp    c00033d2 <dir_sdi+0xba>
c00033cd:	b8 01 00 00 00       	mov    eax,0x1
c00033d2:	83 c4 1c             	add    esp,0x1c
c00033d5:	5b                   	pop    ebx
c00033d6:	5e                   	pop    esi
c00033d7:	5f                   	pop    edi
c00033d8:	5d                   	pop    ebp
c00033d9:	c3                   	ret    
c00033da:	b8 02 00 00 00       	mov    eax,0x2
c00033df:	c3                   	ret    

c00033e0 <create_chain>:
c00033e0:	55                   	push   ebp
c00033e1:	89 c5                	mov    ebp,eax
c00033e3:	57                   	push   edi
c00033e4:	89 d7                	mov    edi,edx
c00033e6:	56                   	push   esi
c00033e7:	53                   	push   ebx
c00033e8:	83 ec 1c             	sub    esp,0x1c
c00033eb:	85 d2                	test   edx,edx
c00033ed:	8b 30                	mov    esi,DWORD PTR [eax]
c00033ef:	75 0e                	jne    c00033ff <create_chain+0x1f>
c00033f1:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c00033f4:	85 c9                	test   ecx,ecx
c00033f6:	74 34                	je     c000342c <create_chain+0x4c>
c00033f8:	39 4e 18             	cmp    DWORD PTR [esi+0x18],ecx
c00033fb:	77 34                	ja     c0003431 <create_chain+0x51>
c00033fd:	eb 2d                	jmp    c000342c <create_chain+0x4c>
c00033ff:	89 f0                	mov    eax,esi
c0003401:	e8 0e fe ff ff       	call   c0003214 <get_fat.isra.2>
c0003406:	89 c3                	mov    ebx,eax
c0003408:	83 f8 01             	cmp    eax,0x1
c000340b:	77 0a                	ja     c0003417 <create_chain+0x37>
c000340d:	bb 01 00 00 00       	mov    ebx,0x1
c0003412:	e9 fe 00 00 00       	jmp    c0003515 <create_chain+0x135>
c0003417:	83 f8 ff             	cmp    eax,0xffffffff
c000341a:	0f 84 f2 00 00 00    	je     c0003512 <create_chain+0x132>
c0003420:	89 f9                	mov    ecx,edi
c0003422:	39 46 18             	cmp    DWORD PTR [esi+0x18],eax
c0003425:	76 0a                	jbe    c0003431 <create_chain+0x51>
c0003427:	e9 e9 00 00 00       	jmp    c0003515 <create_chain+0x135>
c000342c:	b9 01 00 00 00       	mov    ecx,0x1
c0003431:	83 7e 14 00          	cmp    DWORD PTR [esi+0x14],0x0
c0003435:	75 07                	jne    c000343e <create_chain+0x5e>
c0003437:	31 db                	xor    ebx,ebx
c0003439:	e9 d7 00 00 00       	jmp    c0003515 <create_chain+0x135>
c000343e:	39 f9                	cmp    ecx,edi
c0003440:	75 46                	jne    c0003488 <create_chain+0xa8>
c0003442:	8d 59 01             	lea    ebx,[ecx+0x1]
c0003445:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003448:	77 05                	ja     c000344f <create_chain+0x6f>
c000344a:	bb 02 00 00 00       	mov    ebx,0x2
c000344f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003453:	89 da                	mov    edx,ebx
c0003455:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003458:	e8 b7 fd ff ff       	call   c0003214 <get_fat.isra.2>
c000345d:	83 f8 01             	cmp    eax,0x1
c0003460:	74 ab                	je     c000340d <create_chain+0x2d>
c0003462:	83 f8 ff             	cmp    eax,0xffffffff
c0003465:	0f 84 a7 00 00 00    	je     c0003512 <create_chain+0x132>
c000346b:	85 c0                	test   eax,eax
c000346d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003471:	74 11                	je     c0003484 <create_chain+0xa4>
c0003473:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0003476:	83 f8 01             	cmp    eax,0x1
c0003479:	76 0d                	jbe    c0003488 <create_chain+0xa8>
c000347b:	3b 46 18             	cmp    eax,DWORD PTR [esi+0x18]
c000347e:	73 08                	jae    c0003488 <create_chain+0xa8>
c0003480:	89 c1                	mov    ecx,eax
c0003482:	eb 04                	jmp    c0003488 <create_chain+0xa8>
c0003484:	85 db                	test   ebx,ebx
c0003486:	75 3d                	jne    c00034c5 <create_chain+0xe5>
c0003488:	89 cb                	mov    ebx,ecx
c000348a:	43                   	inc    ebx
c000348b:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c000348e:	77 0a                	ja     c000349a <create_chain+0xba>
c0003490:	83 f9 01             	cmp    ecx,0x1
c0003493:	76 a2                	jbe    c0003437 <create_chain+0x57>
c0003495:	bb 02 00 00 00       	mov    ebx,0x2
c000349a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000349e:	89 da                	mov    edx,ebx
c00034a0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00034a3:	e8 6c fd ff ff       	call   c0003214 <get_fat.isra.2>
c00034a8:	85 c0                	test   eax,eax
c00034aa:	74 19                	je     c00034c5 <create_chain+0xe5>
c00034ac:	83 f8 01             	cmp    eax,0x1
c00034af:	0f 84 58 ff ff ff    	je     c000340d <create_chain+0x2d>
c00034b5:	40                   	inc    eax
c00034b6:	74 5a                	je     c0003512 <create_chain+0x132>
c00034b8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00034bc:	39 cb                	cmp    ebx,ecx
c00034be:	75 ca                	jne    c000348a <create_chain+0xaa>
c00034c0:	e9 72 ff ff ff       	jmp    c0003437 <create_chain+0x57>
c00034c5:	83 c9 ff             	or     ecx,0xffffffff
c00034c8:	89 da                	mov    edx,ebx
c00034ca:	89 f0                	mov    eax,esi
c00034cc:	e8 b1 f2 ff ff       	call   c0002782 <put_fat>
c00034d1:	85 c0                	test   eax,eax
c00034d3:	75 36                	jne    c000350b <create_chain+0x12b>
c00034d5:	85 ff                	test   edi,edi
c00034d7:	75 16                	jne    c00034ef <create_chain+0x10f>
c00034d9:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00034dc:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c00034df:	89 5e 10             	mov    DWORD PTR [esi+0x10],ebx
c00034e2:	8d 57 fe             	lea    edx,[edi-0x2]
c00034e5:	39 d0                	cmp    eax,edx
c00034e7:	77 17                	ja     c0003500 <create_chain+0x120>
c00034e9:	48                   	dec    eax
c00034ea:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00034ed:	eb 11                	jmp    c0003500 <create_chain+0x120>
c00034ef:	89 d9                	mov    ecx,ebx
c00034f1:	89 fa                	mov    edx,edi
c00034f3:	89 f0                	mov    eax,esi
c00034f5:	e8 88 f2 ff ff       	call   c0002782 <put_fat>
c00034fa:	85 c0                	test   eax,eax
c00034fc:	74 db                	je     c00034d9 <create_chain+0xf9>
c00034fe:	eb 0b                	jmp    c000350b <create_chain+0x12b>
c0003500:	8a 46 04             	mov    al,BYTE PTR [esi+0x4]
c0003503:	83 c8 01             	or     eax,0x1
c0003506:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c0003509:	eb 0a                	jmp    c0003515 <create_chain+0x135>
c000350b:	48                   	dec    eax
c000350c:	0f 85 fb fe ff ff    	jne    c000340d <create_chain+0x2d>
c0003512:	83 cb ff             	or     ebx,0xffffffff
c0003515:	83 c4 1c             	add    esp,0x1c
c0003518:	89 d8                	mov    eax,ebx
c000351a:	5b                   	pop    ebx
c000351b:	5e                   	pop    esi
c000351c:	5f                   	pop    edi
c000351d:	5d                   	pop    ebp
c000351e:	c3                   	ret    

c000351f <remove_chain>:
c000351f:	55                   	push   ebp
c0003520:	57                   	push   edi
c0003521:	56                   	push   esi
c0003522:	89 d6                	mov    esi,edx
c0003524:	53                   	push   ebx
c0003525:	83 ec 0c             	sub    esp,0xc
c0003528:	83 fa 01             	cmp    edx,0x1
c000352b:	8b 18                	mov    ebx,DWORD PTR [eax]
c000352d:	76 6a                	jbe    c0003599 <remove_chain+0x7a>
c000352f:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c0003532:	76 65                	jbe    c0003599 <remove_chain+0x7a>
c0003534:	89 c5                	mov    ebp,eax
c0003536:	89 ca                	mov    edx,ecx
c0003538:	85 c9                	test   ecx,ecx
c000353a:	74 0e                	je     c000354a <remove_chain+0x2b>
c000353c:	83 c9 ff             	or     ecx,0xffffffff
c000353f:	89 d8                	mov    eax,ebx
c0003541:	e8 3c f2 ff ff       	call   c0002782 <put_fat>
c0003546:	85 c0                	test   eax,eax
c0003548:	75 5b                	jne    c00035a5 <remove_chain+0x86>
c000354a:	89 f2                	mov    edx,esi
c000354c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000354f:	e8 c0 fc ff ff       	call   c0003214 <get_fat.isra.2>
c0003554:	89 c7                	mov    edi,eax
c0003556:	85 c0                	test   eax,eax
c0003558:	75 04                	jne    c000355e <remove_chain+0x3f>
c000355a:	31 c0                	xor    eax,eax
c000355c:	eb 47                	jmp    c00035a5 <remove_chain+0x86>
c000355e:	83 f8 01             	cmp    eax,0x1
c0003561:	74 36                	je     c0003599 <remove_chain+0x7a>
c0003563:	83 f8 ff             	cmp    eax,0xffffffff
c0003566:	74 38                	je     c00035a0 <remove_chain+0x81>
c0003568:	31 c9                	xor    ecx,ecx
c000356a:	89 f2                	mov    edx,esi
c000356c:	89 d8                	mov    eax,ebx
c000356e:	e8 0f f2 ff ff       	call   c0002782 <put_fat>
c0003573:	85 c0                	test   eax,eax
c0003575:	75 2e                	jne    c00035a5 <remove_chain+0x86>
c0003577:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000357a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000357d:	8d 4a fe             	lea    ecx,[edx-0x2]
c0003580:	39 c8                	cmp    eax,ecx
c0003582:	73 0d                	jae    c0003591 <remove_chain+0x72>
c0003584:	40                   	inc    eax
c0003585:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0003588:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c000358b:	83 c8 01             	or     eax,0x1
c000358e:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c0003591:	89 fe                	mov    esi,edi
c0003593:	39 fa                	cmp    edx,edi
c0003595:	77 b3                	ja     c000354a <remove_chain+0x2b>
c0003597:	eb c1                	jmp    c000355a <remove_chain+0x3b>
c0003599:	b8 02 00 00 00       	mov    eax,0x2
c000359e:	eb 05                	jmp    c00035a5 <remove_chain+0x86>
c00035a0:	b8 01 00 00 00       	mov    eax,0x1
c00035a5:	83 c4 0c             	add    esp,0xc
c00035a8:	5b                   	pop    ebx
c00035a9:	5e                   	pop    esi
c00035aa:	5f                   	pop    edi
c00035ab:	5d                   	pop    ebp
c00035ac:	c3                   	ret    

c00035ad <dir_next>:
c00035ad:	55                   	push   ebp
c00035ae:	57                   	push   edi
c00035af:	56                   	push   esi
c00035b0:	53                   	push   ebx
c00035b1:	83 ec 1c             	sub    esp,0x1c
c00035b4:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00035b7:	8b 28                	mov    ebp,DWORD PTR [eax]
c00035b9:	83 c7 20             	add    edi,0x20
c00035bc:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00035c2:	76 07                	jbe    c00035cb <dir_next+0x1e>
c00035c4:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00035cb:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c00035ce:	b9 04 00 00 00       	mov    ecx,0x4
c00035d3:	85 f6                	test   esi,esi
c00035d5:	0f 84 cd 00 00 00    	je     c00036a8 <dir_next+0xfb>
c00035db:	89 c3                	mov    ebx,eax
c00035dd:	89 d1                	mov    ecx,edx
c00035df:	89 f8                	mov    eax,edi
c00035e1:	25 ff 01 00 00       	and    eax,0x1ff
c00035e6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00035ea:	0f 85 a8 00 00 00    	jne    c0003698 <dir_next+0xeb>
c00035f0:	46                   	inc    esi
c00035f1:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00035f4:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c00035f7:	85 d2                	test   edx,edx
c00035f9:	75 22                	jne    c000361d <dir_next+0x70>
c00035fb:	89 fa                	mov    edx,edi
c00035fd:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003601:	c1 ea 05             	shr    edx,0x5
c0003604:	39 c2                	cmp    edx,eax
c0003606:	0f 82 8c 00 00 00    	jb     c0003698 <dir_next+0xeb>
c000360c:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003613:	b9 04 00 00 00       	mov    ecx,0x4
c0003618:	e9 8b 00 00 00       	jmp    c00036a8 <dir_next+0xfb>
c000361d:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0003621:	89 fe                	mov    esi,edi
c0003623:	48                   	dec    eax
c0003624:	c1 ee 09             	shr    esi,0x9
c0003627:	85 f0                	test   eax,esi
c0003629:	75 6d                	jne    c0003698 <dir_next+0xeb>
c000362b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000362f:	89 e8                	mov    eax,ebp
c0003631:	e8 de fb ff ff       	call   c0003214 <get_fat.isra.2>
c0003636:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000363a:	89 c6                	mov    esi,eax
c000363c:	83 f8 01             	cmp    eax,0x1
c000363f:	77 07                	ja     c0003648 <dir_next+0x9b>
c0003641:	b9 02 00 00 00       	mov    ecx,0x2
c0003646:	eb 60                	jmp    c00036a8 <dir_next+0xfb>
c0003648:	83 f8 ff             	cmp    eax,0xffffffff
c000364b:	75 07                	jne    c0003654 <dir_next+0xa7>
c000364d:	b9 01 00 00 00       	mov    ecx,0x1
c0003652:	eb 54                	jmp    c00036a8 <dir_next+0xfb>
c0003654:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003657:	77 30                	ja     c0003689 <dir_next+0xdc>
c0003659:	85 c9                	test   ecx,ecx
c000365b:	74 af                	je     c000360c <dir_next+0x5f>
c000365d:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003660:	89 d8                	mov    eax,ebx
c0003662:	e8 79 fd ff ff       	call   c00033e0 <create_chain>
c0003667:	b9 07 00 00 00       	mov    ecx,0x7
c000366c:	89 c6                	mov    esi,eax
c000366e:	85 c0                	test   eax,eax
c0003670:	74 36                	je     c00036a8 <dir_next+0xfb>
c0003672:	83 f8 01             	cmp    eax,0x1
c0003675:	74 ca                	je     c0003641 <dir_next+0x94>
c0003677:	83 f8 ff             	cmp    eax,0xffffffff
c000367a:	74 d1                	je     c000364d <dir_next+0xa0>
c000367c:	89 c2                	mov    edx,eax
c000367e:	89 e8                	mov    eax,ebp
c0003680:	e8 54 f2 ff ff       	call   c00028d9 <dir_clear>
c0003685:	85 c0                	test   eax,eax
c0003687:	75 c4                	jne    c000364d <dir_next+0xa0>
c0003689:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000368c:	89 f2                	mov    edx,esi
c000368e:	89 e8                	mov    eax,ebp
c0003690:	e8 99 e9 ff ff       	call   c000202e <clst2sect>
c0003695:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003698:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000369c:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c000369f:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c00036a3:	31 c9                	xor    ecx,ecx
c00036a5:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00036a8:	83 c4 1c             	add    esp,0x1c
c00036ab:	89 c8                	mov    eax,ecx
c00036ad:	5b                   	pop    ebx
c00036ae:	5e                   	pop    esi
c00036af:	5f                   	pop    edi
c00036b0:	5d                   	pop    ebp
c00036b1:	c3                   	ret    

c00036b2 <dir_alloc>:
c00036b2:	55                   	push   ebp
c00036b3:	89 c5                	mov    ebp,eax
c00036b5:	57                   	push   edi
c00036b6:	89 d7                	mov    edi,edx
c00036b8:	56                   	push   esi
c00036b9:	31 d2                	xor    edx,edx
c00036bb:	53                   	push   ebx
c00036bc:	83 ec 0c             	sub    esp,0xc
c00036bf:	8b 30                	mov    esi,DWORD PTR [eax]
c00036c1:	e8 52 fc ff ff       	call   c0003318 <dir_sdi>
c00036c6:	85 c0                	test   eax,eax
c00036c8:	75 3b                	jne    c0003705 <dir_alloc+0x53>
c00036ca:	31 db                	xor    ebx,ebx
c00036cc:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00036cf:	89 f0                	mov    eax,esi
c00036d1:	e8 68 ec ff ff       	call   c000233e <move_window>
c00036d6:	85 c0                	test   eax,eax
c00036d8:	75 2b                	jne    c0003705 <dir_alloc+0x53>
c00036da:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c00036dd:	0f b6 12             	movzx  edx,BYTE PTR [edx]
c00036e0:	85 d2                	test   edx,edx
c00036e2:	74 08                	je     c00036ec <dir_alloc+0x3a>
c00036e4:	81 fa e5 00 00 00    	cmp    edx,0xe5
c00036ea:	75 07                	jne    c00036f3 <dir_alloc+0x41>
c00036ec:	43                   	inc    ebx
c00036ed:	39 fb                	cmp    ebx,edi
c00036ef:	75 04                	jne    c00036f5 <dir_alloc+0x43>
c00036f1:	eb 1c                	jmp    c000370f <dir_alloc+0x5d>
c00036f3:	31 db                	xor    ebx,ebx
c00036f5:	ba 01 00 00 00       	mov    edx,0x1
c00036fa:	89 e8                	mov    eax,ebp
c00036fc:	e8 ac fe ff ff       	call   c00035ad <dir_next>
c0003701:	85 c0                	test   eax,eax
c0003703:	74 c7                	je     c00036cc <dir_alloc+0x1a>
c0003705:	83 f8 04             	cmp    eax,0x4
c0003708:	75 05                	jne    c000370f <dir_alloc+0x5d>
c000370a:	b8 07 00 00 00       	mov    eax,0x7
c000370f:	83 c4 0c             	add    esp,0xc
c0003712:	5b                   	pop    ebx
c0003713:	5e                   	pop    esi
c0003714:	5f                   	pop    edi
c0003715:	5d                   	pop    ebp
c0003716:	c3                   	ret    

c0003717 <dir_read>:
c0003717:	55                   	push   ebp
c0003718:	57                   	push   edi
c0003719:	bf ff ff ff ff       	mov    edi,0xffffffff
c000371e:	56                   	push   esi
c000371f:	be 04 00 00 00       	mov    esi,0x4
c0003724:	53                   	push   ebx
c0003725:	89 c3                	mov    ebx,eax
c0003727:	83 ec 1c             	sub    esp,0x1c
c000372a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000372e:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003730:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003735:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003738:	85 d2                	test   edx,edx
c000373a:	0f 84 e3 00 00 00    	je     c0003823 <dir_read+0x10c>
c0003740:	89 e8                	mov    eax,ebp
c0003742:	e8 f7 eb ff ff       	call   c000233e <move_window>
c0003747:	89 c6                	mov    esi,eax
c0003749:	85 c0                	test   eax,eax
c000374b:	0f 85 dd 00 00 00    	jne    c000382e <dir_read+0x117>
c0003751:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003754:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0003757:	88 04 24             	mov    BYTE PTR [esp],al
c000375a:	85 c0                	test   eax,eax
c000375c:	0f 84 c7 00 00 00    	je     c0003829 <dir_read+0x112>
c0003762:	8a 4a 0b             	mov    cl,BYTE PTR [edx+0xb]
c0003765:	83 e1 3f             	and    ecx,0x3f
c0003768:	83 f8 2e             	cmp    eax,0x2e
c000376b:	88 4b 06             	mov    BYTE PTR [ebx+0x6],cl
c000376e:	0f 84 95 00 00 00    	je     c0003809 <dir_read+0xf2>
c0003774:	3d e5 00 00 00       	cmp    eax,0xe5
c0003779:	0f 84 8a 00 00 00    	je     c0003809 <dir_read+0xf2>
c000377f:	0f b6 c9             	movzx  ecx,cl
c0003782:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003786:	83 e1 df             	and    ecx,0xffffffdf
c0003789:	83 f9 08             	cmp    ecx,0x8
c000378c:	0f 94 c1             	sete   cl
c000378f:	0f b6 c9             	movzx  ecx,cl
c0003792:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c0003796:	75 71                	jne    c0003809 <dir_read+0xf2>
c0003798:	83 7c 24 08 0f       	cmp    DWORD PTR [esp+0x8],0xf
c000379d:	75 4a                	jne    c00037e9 <dir_read+0xd2>
c000379f:	f6 04 24 40          	test   BYTE PTR [esp],0x40
c00037a3:	74 16                	je     c00037bb <dir_read+0xa4>
c00037a5:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00037a8:	81 24 24 bf 00 00 00 	and    DWORD PTR [esp],0xbf
c00037af:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00037b3:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00037b6:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00037b9:	eb 0e                	jmp    c00037c9 <dir_read+0xb2>
c00037bb:	89 f9                	mov    ecx,edi
c00037bd:	bf ff ff ff ff       	mov    edi,0xffffffff
c00037c2:	0f b6 c9             	movzx  ecx,cl
c00037c5:	39 c1                	cmp    ecx,eax
c00037c7:	75 45                	jne    c000380e <dir_read+0xf7>
c00037c9:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00037cd:	bf ff ff ff ff       	mov    edi,0xffffffff
c00037d2:	3a 42 0d             	cmp    al,BYTE PTR [edx+0xd]
c00037d5:	75 37                	jne    c000380e <dir_read+0xf7>
c00037d7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00037da:	e8 6c e8 ff ff       	call   c000204b <pick_lfn>
c00037df:	85 c0                	test   eax,eax
c00037e1:	74 2b                	je     c000380e <dir_read+0xf7>
c00037e3:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00037e6:	4f                   	dec    edi
c00037e7:	eb 25                	jmp    c000380e <dir_read+0xf7>
c00037e9:	89 f8                	mov    eax,edi
c00037eb:	84 c0                	test   al,al
c00037ed:	75 11                	jne    c0003800 <dir_read+0xe9>
c00037ef:	89 d0                	mov    eax,edx
c00037f1:	e8 32 ea ff ff       	call   c0002228 <sum_sfn>
c00037f6:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c00037fa:	75 04                	jne    c0003800 <dir_read+0xe9>
c00037fc:	31 f6                	xor    esi,esi
c00037fe:	eb 35                	jmp    c0003835 <dir_read+0x11e>
c0003800:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003807:	eb 2c                	jmp    c0003835 <dir_read+0x11e>
c0003809:	bf ff ff ff ff       	mov    edi,0xffffffff
c000380e:	31 d2                	xor    edx,edx
c0003810:	89 d8                	mov    eax,ebx
c0003812:	e8 96 fd ff ff       	call   c00035ad <dir_next>
c0003817:	89 c6                	mov    esi,eax
c0003819:	85 c0                	test   eax,eax
c000381b:	0f 84 14 ff ff ff    	je     c0003735 <dir_read+0x1e>
c0003821:	eb 0b                	jmp    c000382e <dir_read+0x117>
c0003823:	85 f6                	test   esi,esi
c0003825:	74 d5                	je     c00037fc <dir_read+0xe5>
c0003827:	eb 05                	jmp    c000382e <dir_read+0x117>
c0003829:	be 04 00 00 00       	mov    esi,0x4
c000382e:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003835:	83 c4 1c             	add    esp,0x1c
c0003838:	89 f0                	mov    eax,esi
c000383a:	5b                   	pop    ebx
c000383b:	5e                   	pop    esi
c000383c:	5f                   	pop    edi
c000383d:	5d                   	pop    ebp
c000383e:	c3                   	ret    

c000383f <dir_remove>:
c000383f:	57                   	push   edi
c0003840:	56                   	push   esi
c0003841:	53                   	push   ebx
c0003842:	89 c3                	mov    ebx,eax
c0003844:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003847:	8b 30                	mov    esi,DWORD PTR [eax]
c0003849:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000384c:	83 fa ff             	cmp    edx,0xffffffff
c000384f:	74 09                	je     c000385a <dir_remove+0x1b>
c0003851:	e8 c2 fa ff ff       	call   c0003318 <dir_sdi>
c0003856:	85 c0                	test   eax,eax
c0003858:	75 34                	jne    c000388e <dir_remove+0x4f>
c000385a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000385d:	89 f0                	mov    eax,esi
c000385f:	e8 da ea ff ff       	call   c000233e <move_window>
c0003864:	85 c0                	test   eax,eax
c0003866:	75 1c                	jne    c0003884 <dir_remove+0x45>
c0003868:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000386b:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c000386e:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003872:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c0003875:	73 17                	jae    c000388e <dir_remove+0x4f>
c0003877:	31 d2                	xor    edx,edx
c0003879:	89 d8                	mov    eax,ebx
c000387b:	e8 2d fd ff ff       	call   c00035ad <dir_next>
c0003880:	85 c0                	test   eax,eax
c0003882:	74 d6                	je     c000385a <dir_remove+0x1b>
c0003884:	83 f8 04             	cmp    eax,0x4
c0003887:	75 05                	jne    c000388e <dir_remove+0x4f>
c0003889:	b8 02 00 00 00       	mov    eax,0x2
c000388e:	5b                   	pop    ebx
c000388f:	5e                   	pop    esi
c0003890:	5f                   	pop    edi
c0003891:	c3                   	ret    

c0003892 <dir_find>:
c0003892:	55                   	push   ebp
c0003893:	31 d2                	xor    edx,edx
c0003895:	57                   	push   edi
c0003896:	56                   	push   esi
c0003897:	53                   	push   ebx
c0003898:	89 c3                	mov    ebx,eax
c000389a:	83 ec 1c             	sub    esp,0x1c
c000389d:	8b 00                	mov    eax,DWORD PTR [eax]
c000389f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00038a3:	89 d8                	mov    eax,ebx
c00038a5:	e8 6e fa ff ff       	call   c0003318 <dir_sdi>
c00038aa:	89 c6                	mov    esi,eax
c00038ac:	85 c0                	test   eax,eax
c00038ae:	0f 85 1d 01 00 00    	jne    c00039d1 <dir_find+0x13f>
c00038b4:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00038bb:	c6 44 24 0b ff       	mov    BYTE PTR [esp+0xb],0xff
c00038c0:	bf ff ff ff ff       	mov    edi,0xffffffff
c00038c5:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00038c8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00038cc:	e8 6d ea ff ff       	call   c000233e <move_window>
c00038d1:	89 c6                	mov    esi,eax
c00038d3:	85 c0                	test   eax,eax
c00038d5:	0f 85 f6 00 00 00    	jne    c00039d1 <dir_find+0x13f>
c00038db:	8b 6b 1c             	mov    ebp,DWORD PTR [ebx+0x1c]
c00038de:	0f b6 4d 00          	movzx  ecx,BYTE PTR [ebp+0x0]
c00038e2:	88 4c 24 04          	mov    BYTE PTR [esp+0x4],cl
c00038e6:	85 c9                	test   ecx,ecx
c00038e8:	0f 84 de 00 00 00    	je     c00039cc <dir_find+0x13a>
c00038ee:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c00038f1:	89 d0                	mov    eax,edx
c00038f3:	83 e0 3f             	and    eax,0x3f
c00038f6:	81 f9 e5 00 00 00    	cmp    ecx,0xe5
c00038fc:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00038ff:	0f 84 a6 00 00 00    	je     c00039ab <dir_find+0x119>
c0003905:	80 e2 08             	and    dl,0x8
c0003908:	0f b6 c0             	movzx  eax,al
c000390b:	74 0b                	je     c0003918 <dir_find+0x86>
c000390d:	83 f8 0f             	cmp    eax,0xf
c0003910:	0f 85 95 00 00 00    	jne    c00039ab <dir_find+0x119>
c0003916:	eb 05                	jmp    c000391d <dir_find+0x8b>
c0003918:	83 f8 0f             	cmp    eax,0xf
c000391b:	75 62                	jne    c000397f <dir_find+0xed>
c000391d:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c0003921:	0f 85 90 00 00 00    	jne    c00039b7 <dir_find+0x125>
c0003927:	f6 44 24 04 40       	test   BYTE PTR [esp+0x4],0x40
c000392c:	74 17                	je     c0003945 <dir_find+0xb3>
c000392e:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003931:	81 64 24 04 bf 00 00 00 	and    DWORD PTR [esp+0x4],0xbf
c0003939:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000393d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003940:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003943:	eb 13                	jmp    c0003958 <dir_find+0xc6>
c0003945:	89 f8                	mov    eax,edi
c0003947:	bf ff ff ff ff       	mov    edi,0xffffffff
c000394c:	0f b6 d0             	movzx  edx,al
c000394f:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0003954:	39 c2                	cmp    edx,eax
c0003956:	75 5f                	jne    c00039b7 <dir_find+0x125>
c0003958:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000395c:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003961:	3a 45 0d             	cmp    al,BYTE PTR [ebp+0xd]
c0003964:	75 51                	jne    c00039b7 <dir_find+0x125>
c0003966:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000396a:	89 ea                	mov    edx,ebp
c000396c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000396f:	e8 37 f3 ff ff       	call   c0002cab <cmp_lfn>
c0003974:	85 c0                	test   eax,eax
c0003976:	74 3f                	je     c00039b7 <dir_find+0x125>
c0003978:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000397c:	4f                   	dec    edi
c000397d:	eb 38                	jmp    c00039b7 <dir_find+0x125>
c000397f:	89 f8                	mov    eax,edi
c0003981:	84 c0                	test   al,al
c0003983:	75 0d                	jne    c0003992 <dir_find+0x100>
c0003985:	89 e8                	mov    eax,ebp
c0003987:	e8 9c e8 ff ff       	call   c0002228 <sum_sfn>
c000398c:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c0003990:	74 3f                	je     c00039d1 <dir_find+0x13f>
c0003992:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c0003996:	75 13                	jne    c00039ab <dir_find+0x119>
c0003998:	8d 53 20             	lea    edx,[ebx+0x20]
c000399b:	b9 0b 00 00 00       	mov    ecx,0xb
c00039a0:	89 e8                	mov    eax,ebp
c00039a2:	e8 7c e4 ff ff       	call   c0001e23 <mem_cmp>
c00039a7:	85 c0                	test   eax,eax
c00039a9:	74 26                	je     c00039d1 <dir_find+0x13f>
c00039ab:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00039b2:	bf ff ff ff ff       	mov    edi,0xffffffff
c00039b7:	31 d2                	xor    edx,edx
c00039b9:	89 d8                	mov    eax,ebx
c00039bb:	e8 ed fb ff ff       	call   c00035ad <dir_next>
c00039c0:	89 c6                	mov    esi,eax
c00039c2:	85 c0                	test   eax,eax
c00039c4:	0f 84 fb fe ff ff    	je     c00038c5 <dir_find+0x33>
c00039ca:	eb 05                	jmp    c00039d1 <dir_find+0x13f>
c00039cc:	be 04 00 00 00       	mov    esi,0x4
c00039d1:	83 c4 1c             	add    esp,0x1c
c00039d4:	89 f0                	mov    eax,esi
c00039d6:	5b                   	pop    ebx
c00039d7:	5e                   	pop    esi
c00039d8:	5f                   	pop    edi
c00039d9:	5d                   	pop    ebp
c00039da:	c3                   	ret    

c00039db <follow_path>:
c00039db:	56                   	push   esi
c00039dc:	53                   	push   ebx
c00039dd:	89 c3                	mov    ebx,eax
c00039df:	83 ec 14             	sub    esp,0x14
c00039e2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00039e6:	8b 30                	mov    esi,DWORD PTR [eax]
c00039e8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00039ec:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00039ef:	83 fa 5c             	cmp    edx,0x5c
c00039f2:	75 07                	jne    c00039fb <follow_path+0x20>
c00039f4:	40                   	inc    eax
c00039f5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00039f9:	eb ed                	jmp    c00039e8 <follow_path+0xd>
c00039fb:	83 fa 2f             	cmp    edx,0x2f
c00039fe:	74 f4                	je     c00039f4 <follow_path+0x19>
c0003a00:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0003a07:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0003a0a:	77 3e                	ja     c0003a4a <follow_path+0x6f>
c0003a0c:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c0003a10:	31 d2                	xor    edx,edx
c0003a12:	89 d8                	mov    eax,ebx
c0003a14:	e8 ff f8 ff ff       	call   c0003318 <dir_sdi>
c0003a19:	eb 4f                	jmp    c0003a6a <follow_path+0x8f>
c0003a1b:	89 d8                	mov    eax,ebx
c0003a1d:	e8 70 fe ff ff       	call   c0003892 <dir_find>
c0003a22:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c0003a25:	85 c0                	test   eax,eax
c0003a27:	75 32                	jne    c0003a5b <follow_path+0x80>
c0003a29:	80 e2 04             	and    dl,0x4
c0003a2c:	75 3c                	jne    c0003a6a <follow_path+0x8f>
c0003a2e:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0003a32:	74 31                	je     c0003a65 <follow_path+0x8a>
c0003a34:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003a37:	25 ff 01 00 00       	and    eax,0x1ff
c0003a3c:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003a40:	8a 06                	mov    al,BYTE PTR [esi]
c0003a42:	e8 7c f7 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0003a47:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003a4a:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003a4e:	89 d8                	mov    eax,ebx
c0003a50:	e8 7f ef ff ff       	call   c00029d4 <create_name>
c0003a55:	85 c0                	test   eax,eax
c0003a57:	74 c2                	je     c0003a1b <follow_path+0x40>
c0003a59:	eb 0f                	jmp    c0003a6a <follow_path+0x8f>
c0003a5b:	83 f8 04             	cmp    eax,0x4
c0003a5e:	75 0a                	jne    c0003a6a <follow_path+0x8f>
c0003a60:	80 e2 04             	and    dl,0x4
c0003a63:	75 05                	jne    c0003a6a <follow_path+0x8f>
c0003a65:	b8 05 00 00 00       	mov    eax,0x5
c0003a6a:	83 c4 14             	add    esp,0x14
c0003a6d:	5b                   	pop    ebx
c0003a6e:	5e                   	pop    esi
c0003a6f:	c3                   	ret    

c0003a70 <dir_register>:
c0003a70:	55                   	push   ebp
c0003a71:	57                   	push   edi
c0003a72:	56                   	push   esi
c0003a73:	be 06 00 00 00       	mov    esi,0x6
c0003a78:	53                   	push   ebx
c0003a79:	83 ec 2c             	sub    esp,0x2c
c0003a7c:	8a 50 2b             	mov    dl,BYTE PTR [eax+0x2b]
c0003a7f:	80 e2 a0             	and    dl,0xa0
c0003a82:	0f 85 66 01 00 00    	jne    c0003bee <dir_register+0x17e>
c0003a88:	8b 38                	mov    edi,DWORD PTR [eax]
c0003a8a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003a92:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003a95:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003a99:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003a9e:	74 06                	je     c0003aa6 <dir_register+0x36>
c0003aa0:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003aa4:	eb ef                	jmp    c0003a95 <dir_register+0x25>
c0003aa6:	89 c3                	mov    ebx,eax
c0003aa8:	b9 0c 00 00 00       	mov    ecx,0xc
c0003aad:	8d 40 20             	lea    eax,[eax+0x20]
c0003ab0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003ab4:	89 c2                	mov    edx,eax
c0003ab6:	8d 44 24 14          	lea    eax,[esp+0x14]
c0003aba:	e8 44 e3 ff ff       	call   c0001e03 <mem_cpy>
c0003abf:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003ac4:	74 48                	je     c0003b0e <dir_register+0x9e>
c0003ac6:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c0003aca:	bd 01 00 00 00       	mov    ebp,0x1
c0003acf:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003ad2:	55                   	push   ebp
c0003ad3:	8d 54 24 18          	lea    edx,[esp+0x18]
c0003ad7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003adb:	e8 86 e6 ff ff       	call   c0002166 <gen_numname>
c0003ae0:	58                   	pop    eax
c0003ae1:	89 d8                	mov    eax,ebx
c0003ae3:	e8 aa fd ff ff       	call   c0003892 <dir_find>
c0003ae8:	89 c6                	mov    esi,eax
c0003aea:	85 c0                	test   eax,eax
c0003aec:	75 10                	jne    c0003afe <dir_register+0x8e>
c0003aee:	45                   	inc    ebp
c0003aef:	83 fd 64             	cmp    ebp,0x64
c0003af2:	75 db                	jne    c0003acf <dir_register+0x5f>
c0003af4:	be 07 00 00 00       	mov    esi,0x7
c0003af9:	e9 f0 00 00 00       	jmp    c0003bee <dir_register+0x17e>
c0003afe:	83 f8 04             	cmp    eax,0x4
c0003b01:	0f 85 e7 00 00 00    	jne    c0003bee <dir_register+0x17e>
c0003b07:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0003b0b:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c0003b0e:	bd 01 00 00 00       	mov    ebp,0x1
c0003b13:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0003b18:	74 13                	je     c0003b2d <dir_register+0xbd>
c0003b1a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b1e:	b9 0d 00 00 00       	mov    ecx,0xd
c0003b23:	83 c0 0c             	add    eax,0xc
c0003b26:	31 d2                	xor    edx,edx
c0003b28:	f7 f1                	div    ecx
c0003b2a:	8d 68 01             	lea    ebp,[eax+0x1]
c0003b2d:	89 ea                	mov    edx,ebp
c0003b2f:	89 d8                	mov    eax,ebx
c0003b31:	e8 7c fb ff ff       	call   c00036b2 <dir_alloc>
c0003b36:	89 c6                	mov    esi,eax
c0003b38:	85 c0                	test   eax,eax
c0003b3a:	0f 85 ae 00 00 00    	jne    c0003bee <dir_register+0x17e>
c0003b40:	4d                   	dec    ebp
c0003b41:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0003b45:	74 67                	je     c0003bae <dir_register+0x13e>
c0003b47:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003b4a:	89 e8                	mov    eax,ebp
c0003b4c:	c1 e0 05             	shl    eax,0x5
c0003b4f:	29 c2                	sub    edx,eax
c0003b51:	89 d8                	mov    eax,ebx
c0003b53:	e8 c0 f7 ff ff       	call   c0003318 <dir_sdi>
c0003b58:	89 c6                	mov    esi,eax
c0003b5a:	85 c0                	test   eax,eax
c0003b5c:	0f 85 8c 00 00 00    	jne    c0003bee <dir_register+0x17e>
c0003b62:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003b66:	e8 bd e6 ff ff       	call   c0002228 <sum_sfn>
c0003b6b:	0f b6 e8             	movzx  ebp,al
c0003b6e:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003b71:	89 f8                	mov    eax,edi
c0003b73:	e8 c6 e7 ff ff       	call   c000233e <move_window>
c0003b78:	89 c6                	mov    esi,eax
c0003b7a:	85 c0                	test   eax,eax
c0003b7c:	75 70                	jne    c0003bee <dir_register+0x17e>
c0003b7e:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0003b83:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003b86:	83 ec 0c             	sub    esp,0xc
c0003b89:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003b8c:	55                   	push   ebp
c0003b8d:	e8 39 e5 ff ff       	call   c00020cb <put_lfn>
c0003b92:	31 d2                	xor    edx,edx
c0003b94:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003b98:	89 d8                	mov    eax,ebx
c0003b9a:	e8 0e fa ff ff       	call   c00035ad <dir_next>
c0003b9f:	83 c4 10             	add    esp,0x10
c0003ba2:	89 c6                	mov    esi,eax
c0003ba4:	85 c0                	test   eax,eax
c0003ba6:	75 46                	jne    c0003bee <dir_register+0x17e>
c0003ba8:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0003bac:	75 c0                	jne    c0003b6e <dir_register+0xfe>
c0003bae:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003bb1:	89 f8                	mov    eax,edi
c0003bb3:	e8 86 e7 ff ff       	call   c000233e <move_window>
c0003bb8:	89 c6                	mov    esi,eax
c0003bba:	85 c0                	test   eax,eax
c0003bbc:	75 30                	jne    c0003bee <dir_register+0x17e>
c0003bbe:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003bc1:	b9 20 00 00 00       	mov    ecx,0x20
c0003bc6:	31 d2                	xor    edx,edx
c0003bc8:	e8 4b e2 ff ff       	call   c0001e18 <mem_set>
c0003bcd:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003bd0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003bd4:	b9 0b 00 00 00       	mov    ecx,0xb
c0003bd9:	e8 25 e2 ff ff       	call   c0001e03 <mem_cpy>
c0003bde:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003be1:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003be4:	83 e0 18             	and    eax,0x18
c0003be7:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003bea:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003bee:	83 c4 2c             	add    esp,0x2c
c0003bf1:	89 f0                	mov    eax,esi
c0003bf3:	5b                   	pop    ebx
c0003bf4:	5e                   	pop    esi
c0003bf5:	5f                   	pop    edi
c0003bf6:	5d                   	pop    ebp
c0003bf7:	c3                   	ret    

c0003bf8 <f_mount>:
c0003bf8:	53                   	push   ebx
c0003bf9:	83 ec 18             	sub    esp,0x18
c0003bfc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003c00:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003c04:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003c08:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003c0c:	e8 37 e6 ff ff       	call   c0002248 <get_ldnumber>
c0003c11:	89 c2                	mov    edx,eax
c0003c13:	b8 0b 00 00 00       	mov    eax,0xb
c0003c18:	85 d2                	test   edx,edx
c0003c1a:	78 39                	js     c0003c55 <f_mount+0x5d>
c0003c1c:	8b 04 95 a0 64 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd9b60]
c0003c23:	85 c0                	test   eax,eax
c0003c25:	74 03                	je     c0003c2a <f_mount+0x32>
c0003c27:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003c2a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003c2e:	85 c0                	test   eax,eax
c0003c30:	74 03                	je     c0003c35 <f_mount+0x3d>
c0003c32:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003c35:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003c39:	89 04 95 a0 64 02 c0 	mov    DWORD PTR [edx*4-0x3ffd9b60],eax
c0003c40:	31 c0                	xor    eax,eax
c0003c42:	84 db                	test   bl,bl
c0003c44:	74 0f                	je     c0003c55 <f_mount+0x5d>
c0003c46:	31 c9                	xor    ecx,ecx
c0003c48:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003c4c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003c50:	e8 3c e8 ff ff       	call   c0002491 <mount_volume>
c0003c55:	83 c4 18             	add    esp,0x18
c0003c58:	5b                   	pop    ebx
c0003c59:	c3                   	ret    

c0003c5a <f_open>:
c0003c5a:	55                   	push   ebp
c0003c5b:	b8 09 00 00 00       	mov    eax,0x9
c0003c60:	57                   	push   edi
c0003c61:	56                   	push   esi
c0003c62:	53                   	push   ebx
c0003c63:	83 ec 5c             	sub    esp,0x5c
c0003c66:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003c6a:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003c6e:	85 db                	test   ebx,ebx
c0003c70:	0f 84 9f 02 00 00    	je     c0003f15 <f_open+0x2bb>
c0003c76:	89 fd                	mov    ebp,edi
c0003c78:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003c7c:	83 e5 3f             	and    ebp,0x3f
c0003c7f:	89 e8                	mov    eax,ebp
c0003c81:	89 ee                	mov    esi,ebp
c0003c83:	0f b6 c8             	movzx  ecx,al
c0003c86:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003c8a:	e8 02 e8 ff ff       	call   c0002491 <mount_volume>
c0003c8f:	85 c0                	test   eax,eax
c0003c91:	0f 85 78 02 00 00    	jne    c0003f0f <f_open+0x2b5>
c0003c97:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c9b:	83 ec 0c             	sub    esp,0xc
c0003c9e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003ca2:	68 00 02 00 00       	push   0x200
c0003ca7:	e8 74 1f 00 00       	call   c0005c20 <ff_memalloc>
c0003cac:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0003cb0:	83 c4 10             	add    esp,0x10
c0003cb3:	b8 11 00 00 00       	mov    eax,0x11
c0003cb8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003cbd:	0f 84 52 02 00 00    	je     c0003f15 <f_open+0x2bb>
c0003cc3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003cc7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003ccb:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003ccf:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0003cd2:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003cd6:	e8 00 fd ff ff       	call   c00039db <follow_path>
c0003cdb:	85 c0                	test   eax,eax
c0003cdd:	75 0c                	jne    c0003ceb <f_open+0x91>
c0003cdf:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0003ce4:	74 05                	je     c0003ceb <f_open+0x91>
c0003ce6:	b8 06 00 00 00       	mov    eax,0x6
c0003ceb:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003cf1:	0f 84 d5 00 00 00    	je     c0003dcc <f_open+0x172>
c0003cf7:	85 c0                	test   eax,eax
c0003cf9:	74 21                	je     c0003d1c <f_open+0xc2>
c0003cfb:	83 f8 04             	cmp    eax,0x4
c0003cfe:	0f 85 f0 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003d04:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003d08:	e8 63 fd ff ff       	call   c0003a70 <dir_register>
c0003d0d:	85 c0                	test   eax,eax
c0003d0f:	0f 85 df 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003d15:	83 cd 08             	or     ebp,0x8
c0003d18:	89 ee                	mov    esi,ebp
c0003d1a:	eb 2c                	jmp    c0003d48 <f_open+0xee>
c0003d1c:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003d20:	b8 07 00 00 00       	mov    eax,0x7
c0003d25:	80 e2 11             	and    dl,0x11
c0003d28:	0f 85 c6 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003d2e:	b8 08 00 00 00       	mov    eax,0x8
c0003d33:	f7 c7 04 00 00 00    	test   edi,0x4
c0003d39:	0f 85 b5 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003d3f:	83 e7 08             	and    edi,0x8
c0003d42:	0f 84 b1 00 00 00    	je     c0003df9 <f_open+0x19f>
c0003d48:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0003d4c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d50:	89 ea                	mov    edx,ebp
c0003d52:	8a 00                	mov    al,BYTE PTR [eax]
c0003d54:	e8 6a f4 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0003d59:	ba 00 00 21 50       	mov    edx,0x50210000
c0003d5e:	89 c7                	mov    edi,eax
c0003d60:	8d 45 0e             	lea    eax,[ebp+0xe]
c0003d63:	e8 98 e0 ff ff       	call   c0001e00 <st_dword>
c0003d68:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003d6c:	31 c9                	xor    ecx,ecx
c0003d6e:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003d72:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d76:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003d7a:	e8 6d f4 ff ff       	call   c00031ec <st_clust.isra.1>
c0003d7f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003d83:	31 d2                	xor    edx,edx
c0003d85:	83 c0 1c             	add    eax,0x1c
c0003d88:	e8 73 e0 ff ff       	call   c0001e00 <st_dword>
c0003d8d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d91:	85 ff                	test   edi,edi
c0003d93:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003d97:	74 60                	je     c0003df9 <f_open+0x19f>
c0003d99:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d9d:	31 c9                	xor    ecx,ecx
c0003d9f:	8b 68 30             	mov    ebp,DWORD PTR [eax+0x30]
c0003da2:	89 fa                	mov    edx,edi
c0003da4:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003da8:	e8 72 f7 ff ff       	call   c000351f <remove_chain>
c0003dad:	85 c0                	test   eax,eax
c0003daf:	0f 85 3f 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003db5:	89 ea                	mov    edx,ebp
c0003db7:	4f                   	dec    edi
c0003db8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003dbc:	e8 7d e5 ff ff       	call   c000233e <move_window>
c0003dc1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003dc5:	85 c0                	test   eax,eax
c0003dc7:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003dca:	eb 27                	jmp    c0003df3 <f_open+0x199>
c0003dcc:	85 c0                	test   eax,eax
c0003dce:	0f 85 20 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003dd4:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003dd8:	b8 04 00 00 00       	mov    eax,0x4
c0003ddd:	f6 c2 10             	test   dl,0x10
c0003de0:	0f 85 0e 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003de6:	83 e7 02             	and    edi,0x2
c0003de9:	74 0e                	je     c0003df9 <f_open+0x19f>
c0003deb:	b8 07 00 00 00       	mov    eax,0x7
c0003df0:	80 e2 01             	and    dl,0x1
c0003df3:	0f 85 fb 00 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003df9:	f7 c6 08 00 00 00    	test   esi,0x8
c0003dff:	74 03                	je     c0003e04 <f_open+0x1aa>
c0003e01:	83 ce 40             	or     esi,0x40
c0003e04:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0003e08:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003e0c:	8b 45 30             	mov    eax,DWORD PTR [ebp+0x30]
c0003e0f:	89 fa                	mov    edx,edi
c0003e11:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0003e14:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0003e17:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0003e1a:	e8 a4 f3 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0003e1f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003e22:	8d 47 1c             	lea    eax,[edi+0x1c]
c0003e25:	8d 7b 28             	lea    edi,[ebx+0x28]
c0003e28:	e8 b7 df ff ff       	call   c0001de4 <ld_dword>
c0003e2d:	89 2b                	mov    DWORD PTR [ebx],ebp
c0003e2f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003e32:	31 d2                	xor    edx,edx
c0003e34:	66 8b 45 06          	mov    ax,WORD PTR [ebp+0x6]
c0003e38:	b9 00 02 00 00       	mov    ecx,0x200
c0003e3d:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0003e41:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0003e45:	89 f0                	mov    eax,esi
c0003e47:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0003e4e:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0003e51:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0003e58:	89 f8                	mov    eax,edi
c0003e5a:	e8 b9 df ff ff       	call   c0001e18 <mem_set>
c0003e5f:	83 e6 20             	and    esi,0x20
c0003e62:	75 07                	jne    c0003e6b <f_open+0x211>
c0003e64:	31 c0                	xor    eax,eax
c0003e66:	e9 89 00 00 00       	jmp    c0003ef4 <f_open+0x29a>
c0003e6b:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0003e6e:	85 ed                	test   ebp,ebp
c0003e70:	74 f2                	je     c0003e64 <f_open+0x20a>
c0003e72:	89 6b 14             	mov    DWORD PTR [ebx+0x14],ebp
c0003e75:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e79:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0003e7c:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0003e80:	c1 e6 09             	shl    esi,0x9
c0003e83:	39 ee                	cmp    esi,ebp
c0003e85:	73 1c                	jae    c0003ea3 <f_open+0x249>
c0003e87:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003e89:	29 f5                	sub    ebp,esi
c0003e8b:	e8 84 f3 ff ff       	call   c0003214 <get_fat.isra.2>
c0003e90:	89 c2                	mov    edx,eax
c0003e92:	83 f8 01             	cmp    eax,0x1
c0003e95:	76 10                	jbe    c0003ea7 <f_open+0x24d>
c0003e97:	83 f8 ff             	cmp    eax,0xffffffff
c0003e9a:	75 e7                	jne    c0003e83 <f_open+0x229>
c0003e9c:	b8 01 00 00 00       	mov    eax,0x1
c0003ea1:	eb 09                	jmp    c0003eac <f_open+0x252>
c0003ea3:	31 c0                	xor    eax,eax
c0003ea5:	eb 05                	jmp    c0003eac <f_open+0x252>
c0003ea7:	b8 02 00 00 00       	mov    eax,0x2
c0003eac:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0003eaf:	85 c0                	test   eax,eax
c0003eb1:	75 41                	jne    c0003ef4 <f_open+0x29a>
c0003eb3:	f7 c5 ff 01 00 00    	test   ebp,0x1ff
c0003eb9:	74 a9                	je     c0003e64 <f_open+0x20a>
c0003ebb:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0003ebf:	89 f0                	mov    eax,esi
c0003ec1:	e8 68 e1 ff ff       	call   c000202e <clst2sect>
c0003ec6:	89 c2                	mov    edx,eax
c0003ec8:	b8 02 00 00 00       	mov    eax,0x2
c0003ecd:	85 d2                	test   edx,edx
c0003ecf:	74 23                	je     c0003ef4 <f_open+0x29a>
c0003ed1:	c1 ed 09             	shr    ebp,0x9
c0003ed4:	8d 44 15 00          	lea    eax,[ebp+edx*1+0x0]
c0003ed8:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003edb:	6a 01                	push   0x1
c0003edd:	50                   	push   eax
c0003ede:	57                   	push   edi
c0003edf:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003ee3:	50                   	push   eax
c0003ee4:	e8 a3 de ff ff       	call   c0001d8c <disk_read>
c0003ee9:	83 c4 10             	add    esp,0x10
c0003eec:	85 c0                	test   eax,eax
c0003eee:	0f 95 c0             	setne  al
c0003ef1:	0f b6 c0             	movzx  eax,al
c0003ef4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003ef8:	83 ec 0c             	sub    esp,0xc
c0003efb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0003eff:	e8 34 1d 00 00       	call   c0005c38 <ff_memfree>
c0003f04:	83 c4 10             	add    esp,0x10
c0003f07:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003f0b:	85 c0                	test   eax,eax
c0003f0d:	74 06                	je     c0003f15 <f_open+0x2bb>
c0003f0f:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0003f15:	83 c4 5c             	add    esp,0x5c
c0003f18:	5b                   	pop    ebx
c0003f19:	5e                   	pop    esi
c0003f1a:	5f                   	pop    edi
c0003f1b:	5d                   	pop    ebp
c0003f1c:	c3                   	ret    

c0003f1d <f_read>:
c0003f1d:	55                   	push   ebp
c0003f1e:	57                   	push   edi
c0003f1f:	56                   	push   esi
c0003f20:	53                   	push   ebx
c0003f21:	83 ec 2c             	sub    esp,0x2c
c0003f24:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003f28:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003f2c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003f32:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0003f36:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003f3a:	89 d8                	mov    eax,ebx
c0003f3c:	e8 54 e3 ff ff       	call   c0002295 <validate>
c0003f41:	89 c5                	mov    ebp,eax
c0003f43:	85 c0                	test   eax,eax
c0003f45:	0f 85 c7 01 00 00    	jne    c0004112 <f_read+0x1f5>
c0003f4b:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0003f4f:	85 ed                	test   ebp,ebp
c0003f51:	0f 85 bb 01 00 00    	jne    c0004112 <f_read+0x1f5>
c0003f57:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0003f5b:	0f 84 ac 01 00 00    	je     c000410d <f_read+0x1f0>
c0003f61:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0003f64:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0003f67:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003f6b:	39 f0                	cmp    eax,esi
c0003f6d:	0f 86 b0 00 00 00    	jbe    c0004023 <f_read+0x106>
c0003f73:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0003f77:	e9 a7 00 00 00       	jmp    c0004023 <f_read+0x106>
c0003f7c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003f7f:	a9 ff 01 00 00       	test   eax,0x1ff
c0003f84:	0f 85 56 01 00 00    	jne    c00040e0 <f_read+0x1c3>
c0003f8a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003f8e:	0f b7 7a 0a          	movzx  edi,WORD PTR [edx+0xa]
c0003f92:	89 c2                	mov    edx,eax
c0003f94:	4f                   	dec    edi
c0003f95:	c1 ea 09             	shr    edx,0x9
c0003f98:	21 d7                	and    edi,edx
c0003f9a:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0003f9e:	0f 84 8f 00 00 00    	je     c0004033 <f_read+0x116>
c0003fa4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003fa8:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003fab:	89 c8                	mov    eax,ecx
c0003fad:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003fb1:	e8 78 e0 ff ff       	call   c000202e <clst2sect>
c0003fb6:	85 c0                	test   eax,eax
c0003fb8:	0f 84 8d 00 00 00    	je     c000404b <f_read+0x12e>
c0003fbe:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003fc2:	81 7c 24 04 ff 01 00 00 	cmp    DWORD PTR [esp+0x4],0x1ff
c0003fca:	8d 3c 01             	lea    edi,[ecx+eax*1]
c0003fcd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003fd1:	0f 86 bf 00 00 00    	jbe    c0004096 <f_read+0x179>
c0003fd7:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0003fdb:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0003fdf:	c1 ee 09             	shr    esi,0x9
c0003fe2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003fe6:	01 f2                	add    edx,esi
c0003fe8:	39 c2                	cmp    edx,eax
c0003fea:	76 06                	jbe    c0003ff2 <f_read+0xd5>
c0003fec:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0003ff0:	89 c6                	mov    esi,eax
c0003ff2:	56                   	push   esi
c0003ff3:	57                   	push   edi
c0003ff4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0003ff8:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003ffc:	50                   	push   eax
c0003ffd:	e8 8a dd ff ff       	call   c0001d8c <disk_read>
c0004002:	83 c4 10             	add    esp,0x10
c0004005:	85 c0                	test   eax,eax
c0004007:	75 55                	jne    c000405e <f_read+0x141>
c0004009:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c000400d:	75 65                	jne    c0004074 <f_read+0x157>
c000400f:	c1 e6 09             	shl    esi,0x9
c0004012:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004016:	29 74 24 04          	sub    DWORD PTR [esp+0x4],esi
c000401a:	01 30                	add    DWORD PTR [eax],esi
c000401c:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004020:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004023:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0004028:	0f 85 4e ff ff ff    	jne    c0003f7c <f_read+0x5f>
c000402e:	e9 df 00 00 00       	jmp    c0004112 <f_read+0x1f5>
c0004033:	85 c0                	test   eax,eax
c0004035:	75 05                	jne    c000403c <f_read+0x11f>
c0004037:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000403a:	eb 0a                	jmp    c0004046 <f_read+0x129>
c000403c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000403f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004041:	e8 ce f1 ff ff       	call   c0003214 <get_fat.isra.2>
c0004046:	83 f8 01             	cmp    eax,0x1
c0004049:	77 0e                	ja     c0004059 <f_read+0x13c>
c000404b:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c000404f:	bd 02 00 00 00       	mov    ebp,0x2
c0004054:	e9 b9 00 00 00       	jmp    c0004112 <f_read+0x1f5>
c0004059:	83 f8 ff             	cmp    eax,0xffffffff
c000405c:	75 0e                	jne    c000406c <f_read+0x14f>
c000405e:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004062:	bd 01 00 00 00       	mov    ebp,0x1
c0004067:	e9 a6 00 00 00       	jmp    c0004112 <f_read+0x1f5>
c000406c:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000406f:	e9 30 ff ff ff       	jmp    c0003fa4 <f_read+0x87>
c0004074:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004077:	29 f8                	sub    eax,edi
c0004079:	39 f0                	cmp    eax,esi
c000407b:	73 92                	jae    c000400f <f_read+0xf2>
c000407d:	c1 e0 09             	shl    eax,0x9
c0004080:	8d 53 28             	lea    edx,[ebx+0x28]
c0004083:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0004087:	b9 00 02 00 00       	mov    ecx,0x200
c000408c:	e8 72 dd ff ff       	call   c0001e03 <mem_cpy>
c0004091:	e9 79 ff ff ff       	jmp    c000400f <f_read+0xf2>
c0004096:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004099:	39 f8                	cmp    eax,edi
c000409b:	74 40                	je     c00040dd <f_read+0x1c0>
c000409d:	8d 73 28             	lea    esi,[ebx+0x28]
c00040a0:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00040a4:	74 1e                	je     c00040c4 <f_read+0x1a7>
c00040a6:	6a 01                	push   0x1
c00040a8:	50                   	push   eax
c00040a9:	56                   	push   esi
c00040aa:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00040ae:	50                   	push   eax
c00040af:	e8 ee dc ff ff       	call   c0001da2 <disk_write>
c00040b4:	83 c4 10             	add    esp,0x10
c00040b7:	85 c0                	test   eax,eax
c00040b9:	75 a3                	jne    c000405e <f_read+0x141>
c00040bb:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00040be:	83 e0 7f             	and    eax,0x7f
c00040c1:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00040c4:	6a 01                	push   0x1
c00040c6:	57                   	push   edi
c00040c7:	56                   	push   esi
c00040c8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00040cc:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00040d0:	50                   	push   eax
c00040d1:	e8 b6 dc ff ff       	call   c0001d8c <disk_read>
c00040d6:	83 c4 10             	add    esp,0x10
c00040d9:	85 c0                	test   eax,eax
c00040db:	75 81                	jne    c000405e <f_read+0x141>
c00040dd:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c00040e0:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00040e3:	ba 00 02 00 00       	mov    edx,0x200
c00040e8:	25 ff 01 00 00       	and    eax,0x1ff
c00040ed:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c00040f1:	29 c2                	sub    edx,eax
c00040f3:	39 d6                	cmp    esi,edx
c00040f5:	76 02                	jbe    c00040f9 <f_read+0x1dc>
c00040f7:	89 d6                	mov    esi,edx
c00040f9:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c00040fd:	89 f1                	mov    ecx,esi
c00040ff:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0004103:	e8 fb dc ff ff       	call   c0001e03 <mem_cpy>
c0004108:	e9 05 ff ff ff       	jmp    c0004012 <f_read+0xf5>
c000410d:	bd 07 00 00 00       	mov    ebp,0x7
c0004112:	83 c4 2c             	add    esp,0x2c
c0004115:	89 e8                	mov    eax,ebp
c0004117:	5b                   	pop    ebx
c0004118:	5e                   	pop    esi
c0004119:	5f                   	pop    edi
c000411a:	5d                   	pop    ebp
c000411b:	c3                   	ret    

c000411c <f_write>:
c000411c:	55                   	push   ebp
c000411d:	57                   	push   edi
c000411e:	56                   	push   esi
c000411f:	53                   	push   ebx
c0004120:	83 ec 2c             	sub    esp,0x2c
c0004123:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004127:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000412b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0004131:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004135:	89 d8                	mov    eax,ebx
c0004137:	e8 59 e1 ff ff       	call   c0002295 <validate>
c000413c:	89 c5                	mov    ebp,eax
c000413e:	85 c0                	test   eax,eax
c0004140:	0f 85 14 02 00 00    	jne    c000435a <f_write+0x23e>
c0004146:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c000414a:	85 ed                	test   ebp,ebp
c000414c:	0f 85 08 02 00 00    	jne    c000435a <f_write+0x23e>
c0004152:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004156:	0f 84 f9 01 00 00    	je     c0004355 <f_write+0x239>
c000415c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000415f:	89 c7                	mov    edi,eax
c0004161:	03 7c 24 48          	add    edi,DWORD PTR [esp+0x48]
c0004165:	0f 83 ef 00 00 00    	jae    c000425a <f_write+0x13e>
c000416b:	f7 d0                	not    eax
c000416d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0004171:	e9 e4 00 00 00       	jmp    c000425a <f_write+0x13e>
c0004176:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004179:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c000417f:	0f 85 9a 01 00 00    	jne    c000431f <f_write+0x203>
c0004185:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004189:	89 d1                	mov    ecx,edx
c000418b:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000418f:	c1 e9 09             	shr    ecx,0x9
c0004192:	48                   	dec    eax
c0004193:	21 c8                	and    eax,ecx
c0004195:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004199:	0f 84 c8 00 00 00    	je     c0004267 <f_write+0x14b>
c000419f:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00041a3:	0f 85 22 01 00 00    	jne    c00042cb <f_write+0x1af>
c00041a9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00041ad:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00041b0:	89 c8                	mov    eax,ecx
c00041b2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00041b6:	e8 73 de ff ff       	call   c000202e <clst2sect>
c00041bb:	85 c0                	test   eax,eax
c00041bd:	0f 84 d2 00 00 00    	je     c0004295 <f_write+0x179>
c00041c3:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00041c7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00041cb:	01 c7                	add    edi,eax
c00041cd:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00041d5:	0f 86 1c 01 00 00    	jbe    c00042f7 <f_write+0x1db>
c00041db:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00041df:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00041e3:	c1 ee 09             	shr    esi,0x9
c00041e6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00041ea:	01 f2                	add    edx,esi
c00041ec:	39 c2                	cmp    edx,eax
c00041ee:	76 06                	jbe    c00041f6 <f_write+0xda>
c00041f0:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00041f4:	89 c6                	mov    esi,eax
c00041f6:	56                   	push   esi
c00041f7:	57                   	push   edi
c00041f8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00041fc:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004200:	50                   	push   eax
c0004201:	e8 9c db ff ff       	call   c0001da2 <disk_write>
c0004206:	83 c4 10             	add    esp,0x10
c0004209:	85 c0                	test   eax,eax
c000420b:	0f 85 97 00 00 00    	jne    c00042a8 <f_write+0x18c>
c0004211:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0004214:	29 fa                	sub    edx,edi
c0004216:	39 f2                	cmp    edx,esi
c0004218:	73 1d                	jae    c0004237 <f_write+0x11b>
c000421a:	8d 43 28             	lea    eax,[ebx+0x28]
c000421d:	c1 e2 09             	shl    edx,0x9
c0004220:	b9 00 02 00 00       	mov    ecx,0x200
c0004225:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c0004229:	e8 d5 db ff ff       	call   c0001e03 <mem_cpy>
c000422e:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004231:	83 e0 7f             	and    eax,0x7f
c0004234:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004237:	c1 e6 09             	shl    esi,0x9
c000423a:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000423e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004242:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004246:	01 30                	add    DWORD PTR [eax],esi
c0004248:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000424b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000424e:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0004251:	39 f0                	cmp    eax,esi
c0004253:	73 02                	jae    c0004257 <f_write+0x13b>
c0004255:	89 f0                	mov    eax,esi
c0004257:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000425a:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000425f:	0f 85 11 ff ff ff    	jne    c0004176 <f_write+0x5a>
c0004265:	eb 1b                	jmp    c0004282 <f_write+0x166>
c0004267:	85 d2                	test   edx,edx
c0004269:	75 09                	jne    c0004274 <f_write+0x158>
c000426b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000426e:	85 c0                	test   eax,eax
c0004270:	75 1e                	jne    c0004290 <f_write+0x174>
c0004272:	eb 03                	jmp    c0004277 <f_write+0x15b>
c0004274:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004277:	89 d8                	mov    eax,ebx
c0004279:	e8 62 f1 ff ff       	call   c00033e0 <create_chain>
c000427e:	85 c0                	test   eax,eax
c0004280:	75 0e                	jne    c0004290 <f_write+0x174>
c0004282:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004285:	83 c8 40             	or     eax,0x40
c0004288:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000428b:	e9 ca 00 00 00       	jmp    c000435a <f_write+0x23e>
c0004290:	83 f8 01             	cmp    eax,0x1
c0004293:	75 0e                	jne    c00042a3 <f_write+0x187>
c0004295:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004299:	bd 02 00 00 00       	mov    ebp,0x2
c000429e:	e9 b7 00 00 00       	jmp    c000435a <f_write+0x23e>
c00042a3:	83 f8 ff             	cmp    eax,0xffffffff
c00042a6:	75 0e                	jne    c00042b6 <f_write+0x19a>
c00042a8:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00042ac:	bd 01 00 00 00       	mov    ebp,0x1
c00042b1:	e9 a4 00 00 00       	jmp    c000435a <f_write+0x23e>
c00042b6:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00042b9:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00042bd:	0f 85 dc fe ff ff    	jne    c000419f <f_write+0x83>
c00042c3:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00042c6:	e9 d4 fe ff ff       	jmp    c000419f <f_write+0x83>
c00042cb:	6a 01                	push   0x1
c00042cd:	8d 43 28             	lea    eax,[ebx+0x28]
c00042d0:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00042d3:	50                   	push   eax
c00042d4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00042d8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00042dc:	50                   	push   eax
c00042dd:	e8 c0 da ff ff       	call   c0001da2 <disk_write>
c00042e2:	83 c4 10             	add    esp,0x10
c00042e5:	85 c0                	test   eax,eax
c00042e7:	75 bf                	jne    c00042a8 <f_write+0x18c>
c00042e9:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00042ec:	83 e0 7f             	and    eax,0x7f
c00042ef:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00042f2:	e9 b2 fe ff ff       	jmp    c00041a9 <f_write+0x8d>
c00042f7:	39 7b 1c             	cmp    DWORD PTR [ebx+0x1c],edi
c00042fa:	74 20                	je     c000431c <f_write+0x200>
c00042fc:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00042ff:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0004302:	76 18                	jbe    c000431c <f_write+0x200>
c0004304:	6a 01                	push   0x1
c0004306:	8d 43 28             	lea    eax,[ebx+0x28]
c0004309:	57                   	push   edi
c000430a:	50                   	push   eax
c000430b:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000430f:	50                   	push   eax
c0004310:	e8 77 da ff ff       	call   c0001d8c <disk_read>
c0004315:	83 c4 10             	add    esp,0x10
c0004318:	85 c0                	test   eax,eax
c000431a:	75 8c                	jne    c00042a8 <f_write+0x18c>
c000431c:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c000431f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004322:	ba 00 02 00 00       	mov    edx,0x200
c0004327:	25 ff 01 00 00       	and    eax,0x1ff
c000432c:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0004330:	29 c2                	sub    edx,eax
c0004332:	39 d6                	cmp    esi,edx
c0004334:	76 02                	jbe    c0004338 <f_write+0x21c>
c0004336:	89 d6                	mov    esi,edx
c0004338:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c000433c:	89 f1                	mov    ecx,esi
c000433e:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0004342:	e8 bc da ff ff       	call   c0001e03 <mem_cpy>
c0004347:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000434a:	83 c8 80             	or     eax,0xffffff80
c000434d:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004350:	e9 e5 fe ff ff       	jmp    c000423a <f_write+0x11e>
c0004355:	bd 07 00 00 00       	mov    ebp,0x7
c000435a:	83 c4 2c             	add    esp,0x2c
c000435d:	89 e8                	mov    eax,ebp
c000435f:	5b                   	pop    ebx
c0004360:	5e                   	pop    esi
c0004361:	5f                   	pop    edi
c0004362:	5d                   	pop    ebp
c0004363:	c3                   	ret    

c0004364 <f_sync>:
c0004364:	56                   	push   esi
c0004365:	53                   	push   ebx
c0004366:	83 ec 14             	sub    esp,0x14
c0004369:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000436d:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004371:	89 d8                	mov    eax,ebx
c0004373:	e8 1d df ff ff       	call   c0002295 <validate>
c0004378:	85 c0                	test   eax,eax
c000437a:	0f 85 a3 00 00 00    	jne    c0004423 <f_sync+0xbf>
c0004380:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004383:	f6 c2 40             	test   dl,0x40
c0004386:	0f 84 97 00 00 00    	je     c0004423 <f_sync+0xbf>
c000438c:	80 e2 80             	and    dl,0x80
c000438f:	74 2e                	je     c00043bf <f_sync+0x5b>
c0004391:	6a 01                	push   0x1
c0004393:	8d 43 28             	lea    eax,[ebx+0x28]
c0004396:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004399:	50                   	push   eax
c000439a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000439e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00043a2:	50                   	push   eax
c00043a3:	e8 fa d9 ff ff       	call   c0001da2 <disk_write>
c00043a8:	83 c4 10             	add    esp,0x10
c00043ab:	89 c2                	mov    edx,eax
c00043ad:	b8 01 00 00 00       	mov    eax,0x1
c00043b2:	85 d2                	test   edx,edx
c00043b4:	75 6d                	jne    c0004423 <f_sync+0xbf>
c00043b6:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00043b9:	83 e0 7f             	and    eax,0x7f
c00043bc:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00043bf:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00043c2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00043c6:	e8 73 df ff ff       	call   c000233e <move_window>
c00043cb:	85 c0                	test   eax,eax
c00043cd:	75 54                	jne    c0004423 <f_sync+0xbf>
c00043cf:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00043d2:	8a 46 0b             	mov    al,BYTE PTR [esi+0xb]
c00043d5:	89 f2                	mov    edx,esi
c00043d7:	83 c8 20             	or     eax,0x20
c00043da:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c00043dd:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00043e0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00043e2:	e8 05 ee ff ff       	call   c00031ec <st_clust.isra.1>
c00043e7:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00043ea:	8d 46 1c             	lea    eax,[esi+0x1c]
c00043ed:	e8 0e da ff ff       	call   c0001e00 <st_dword>
c00043f2:	8d 46 16             	lea    eax,[esi+0x16]
c00043f5:	ba 00 00 21 50       	mov    edx,0x50210000
c00043fa:	e8 01 da ff ff       	call   c0001e00 <st_dword>
c00043ff:	31 d2                	xor    edx,edx
c0004401:	8d 46 12             	lea    eax,[esi+0x12]
c0004404:	e8 f3 d9 ff ff       	call   c0001dfc <st_word>
c0004409:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000440d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004411:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004415:	e8 5b e9 ff ff       	call   c0002d75 <sync_fs>
c000441a:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000441d:	83 e2 bf             	and    edx,0xffffffbf
c0004420:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004423:	83 c4 14             	add    esp,0x14
c0004426:	5b                   	pop    ebx
c0004427:	5e                   	pop    esi
c0004428:	c3                   	ret    

c0004429 <f_close>:
c0004429:	53                   	push   ebx
c000442a:	83 ec 24             	sub    esp,0x24
c000442d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0004431:	53                   	push   ebx
c0004432:	e8 2d ff ff ff       	call   c0004364 <f_sync>
c0004437:	83 c4 10             	add    esp,0x10
c000443a:	85 c0                	test   eax,eax
c000443c:	75 15                	jne    c0004453 <f_close+0x2a>
c000443e:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004442:	89 d8                	mov    eax,ebx
c0004444:	e8 4c de ff ff       	call   c0002295 <validate>
c0004449:	85 c0                	test   eax,eax
c000444b:	75 06                	jne    c0004453 <f_close+0x2a>
c000444d:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0004453:	83 c4 18             	add    esp,0x18
c0004456:	5b                   	pop    ebx
c0004457:	c3                   	ret    

c0004458 <f_lseek>:
c0004458:	55                   	push   ebp
c0004459:	57                   	push   edi
c000445a:	56                   	push   esi
c000445b:	53                   	push   ebx
c000445c:	83 ec 2c             	sub    esp,0x2c
c000445f:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004463:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0004467:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000446b:	89 d8                	mov    eax,ebx
c000446d:	e8 23 de ff ff       	call   c0002295 <validate>
c0004472:	89 c5                	mov    ebp,eax
c0004474:	85 c0                	test   eax,eax
c0004476:	0f 85 83 01 00 00    	jne    c00045ff <f_lseek+0x1a7>
c000447c:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004480:	85 ed                	test   ebp,ebp
c0004482:	0f 85 77 01 00 00    	jne    c00045ff <f_lseek+0x1a7>
c0004488:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000448b:	39 f0                	cmp    eax,esi
c000448d:	73 08                	jae    c0004497 <f_lseek+0x3f>
c000448f:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004493:	75 02                	jne    c0004497 <f_lseek+0x3f>
c0004495:	89 c6                	mov    esi,eax
c0004497:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000449a:	85 f6                	test   esi,esi
c000449c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00044a3:	75 07                	jne    c00044ac <f_lseek+0x54>
c00044a5:	31 f6                	xor    esi,esi
c00044a7:	e9 e2 00 00 00       	jmp    c000458e <f_lseek+0x136>
c00044ac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044b0:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c00044b4:	c1 e7 09             	shl    edi,0x9
c00044b7:	85 c9                	test   ecx,ecx
c00044b9:	74 28                	je     c00044e3 <f_lseek+0x8b>
c00044bb:	49                   	dec    ecx
c00044bc:	31 d2                	xor    edx,edx
c00044be:	8d 46 ff             	lea    eax,[esi-0x1]
c00044c1:	f7 f7                	div    edi
c00044c3:	31 d2                	xor    edx,edx
c00044c5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00044c9:	89 c8                	mov    eax,ecx
c00044cb:	f7 f7                	div    edi
c00044cd:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00044d1:	72 10                	jb     c00044e3 <f_lseek+0x8b>
c00044d3:	89 f8                	mov    eax,edi
c00044d5:	f7 d8                	neg    eax
c00044d7:	21 c1                	and    ecx,eax
c00044d9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00044dc:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c00044df:	29 ce                	sub    esi,ecx
c00044e1:	eb 3c                	jmp    c000451f <f_lseek+0xc7>
c00044e3:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00044e6:	85 c0                	test   eax,eax
c00044e8:	75 32                	jne    c000451c <f_lseek+0xc4>
c00044ea:	31 d2                	xor    edx,edx
c00044ec:	89 d8                	mov    eax,ebx
c00044ee:	e8 ed ee ff ff       	call   c00033e0 <create_chain>
c00044f3:	83 f8 01             	cmp    eax,0x1
c00044f6:	75 0e                	jne    c0004506 <f_lseek+0xae>
c00044f8:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00044fc:	bd 02 00 00 00       	mov    ebp,0x2
c0004501:	e9 f9 00 00 00       	jmp    c00045ff <f_lseek+0x1a7>
c0004506:	83 f8 ff             	cmp    eax,0xffffffff
c0004509:	75 0e                	jne    c0004519 <f_lseek+0xc1>
c000450b:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c000450f:	bd 01 00 00 00       	mov    ebp,0x1
c0004514:	e9 e6 00 00 00       	jmp    c00045ff <f_lseek+0x1a7>
c0004519:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000451c:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000451f:	85 c0                	test   eax,eax
c0004521:	74 82                	je     c00044a5 <f_lseek+0x4d>
c0004523:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004526:	39 fe                	cmp    esi,edi
c0004528:	76 3d                	jbe    c0004567 <f_lseek+0x10f>
c000452a:	01 fa                	add    edx,edi
c000452c:	29 fe                	sub    esi,edi
c000452e:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c0004531:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004535:	89 c2                	mov    edx,eax
c0004537:	74 0d                	je     c0004546 <f_lseek+0xee>
c0004539:	89 d8                	mov    eax,ebx
c000453b:	e8 a0 ee ff ff       	call   c00033e0 <create_chain>
c0004540:	85 c0                	test   eax,eax
c0004542:	75 09                	jne    c000454d <f_lseek+0xf5>
c0004544:	eb 1f                	jmp    c0004565 <f_lseek+0x10d>
c0004546:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004548:	e8 c7 ec ff ff       	call   c0003214 <get_fat.isra.2>
c000454d:	83 f8 ff             	cmp    eax,0xffffffff
c0004550:	74 b9                	je     c000450b <f_lseek+0xb3>
c0004552:	83 f8 01             	cmp    eax,0x1
c0004555:	76 a1                	jbe    c00044f8 <f_lseek+0xa0>
c0004557:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000455b:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c000455e:	76 98                	jbe    c00044f8 <f_lseek+0xa0>
c0004560:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004563:	eb be                	jmp    c0004523 <f_lseek+0xcb>
c0004565:	31 f6                	xor    esi,esi
c0004567:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c000456a:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004570:	0f 84 2f ff ff ff    	je     c00044a5 <f_lseek+0x4d>
c0004576:	89 c2                	mov    edx,eax
c0004578:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000457c:	e8 ad da ff ff       	call   c000202e <clst2sect>
c0004581:	85 c0                	test   eax,eax
c0004583:	0f 84 6f ff ff ff    	je     c00044f8 <f_lseek+0xa0>
c0004589:	c1 ee 09             	shr    esi,0x9
c000458c:	01 c6                	add    esi,eax
c000458e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004591:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004594:	76 0c                	jbe    c00045a2 <f_lseek+0x14a>
c0004596:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004599:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000459c:	83 ca 40             	or     edx,0x40
c000459f:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00045a2:	a9 ff 01 00 00       	test   eax,0x1ff
c00045a7:	74 56                	je     c00045ff <f_lseek+0x1a7>
c00045a9:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00045ac:	39 f0                	cmp    eax,esi
c00045ae:	74 4f                	je     c00045ff <f_lseek+0x1a7>
c00045b0:	8d 7b 28             	lea    edi,[ebx+0x28]
c00045b3:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00045b7:	74 26                	je     c00045df <f_lseek+0x187>
c00045b9:	6a 01                	push   0x1
c00045bb:	50                   	push   eax
c00045bc:	57                   	push   edi
c00045bd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00045c1:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00045c5:	50                   	push   eax
c00045c6:	e8 d7 d7 ff ff       	call   c0001da2 <disk_write>
c00045cb:	83 c4 10             	add    esp,0x10
c00045ce:	85 c0                	test   eax,eax
c00045d0:	0f 85 35 ff ff ff    	jne    c000450b <f_lseek+0xb3>
c00045d6:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00045d9:	83 e0 7f             	and    eax,0x7f
c00045dc:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00045df:	6a 01                	push   0x1
c00045e1:	56                   	push   esi
c00045e2:	57                   	push   edi
c00045e3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00045e7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00045eb:	50                   	push   eax
c00045ec:	e8 9b d7 ff ff       	call   c0001d8c <disk_read>
c00045f1:	83 c4 10             	add    esp,0x10
c00045f4:	85 c0                	test   eax,eax
c00045f6:	0f 85 0f ff ff ff    	jne    c000450b <f_lseek+0xb3>
c00045fc:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c00045ff:	83 c4 2c             	add    esp,0x2c
c0004602:	89 e8                	mov    eax,ebp
c0004604:	5b                   	pop    ebx
c0004605:	5e                   	pop    esi
c0004606:	5f                   	pop    edi
c0004607:	5d                   	pop    ebp
c0004608:	c3                   	ret    

c0004609 <f_opendir>:
c0004609:	56                   	push   esi
c000460a:	b8 09 00 00 00       	mov    eax,0x9
c000460f:	53                   	push   ebx
c0004610:	83 ec 24             	sub    esp,0x24
c0004613:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004617:	85 db                	test   ebx,ebx
c0004619:	0f 84 af 00 00 00    	je     c00046ce <f_opendir+0xc5>
c000461f:	31 c9                	xor    ecx,ecx
c0004621:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004625:	8d 44 24 34          	lea    eax,[esp+0x34]
c0004629:	e8 63 de ff ff       	call   c0002491 <mount_volume>
c000462e:	85 c0                	test   eax,eax
c0004630:	0f 85 92 00 00 00    	jne    c00046c8 <f_opendir+0xbf>
c0004636:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000463a:	83 ec 0c             	sub    esp,0xc
c000463d:	89 03                	mov    DWORD PTR [ebx],eax
c000463f:	68 00 02 00 00       	push   0x200
c0004644:	e8 d7 15 00 00       	call   c0005c20 <ff_memalloc>
c0004649:	83 c4 10             	add    esp,0x10
c000464c:	89 c6                	mov    esi,eax
c000464e:	b8 11 00 00 00       	mov    eax,0x11
c0004653:	85 f6                	test   esi,esi
c0004655:	74 77                	je     c00046ce <f_opendir+0xc5>
c0004657:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000465b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000465f:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004662:	89 d8                	mov    eax,ebx
c0004664:	e8 72 f3 ff ff       	call   c00039db <follow_path>
c0004669:	85 c0                	test   eax,eax
c000466b:	75 37                	jne    c00046a4 <f_opendir+0x9b>
c000466d:	f6 43 2b 80          	test   BYTE PTR [ebx+0x2b],0x80
c0004671:	75 1c                	jne    c000468f <f_opendir+0x86>
c0004673:	b8 05 00 00 00       	mov    eax,0x5
c0004678:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c000467c:	74 26                	je     c00046a4 <f_opendir+0x9b>
c000467e:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0004681:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004685:	8a 00                	mov    al,BYTE PTR [eax]
c0004687:	e8 37 eb ff ff       	call   c00031c3 <ld_clust.isra.0>
c000468c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000468f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004693:	31 d2                	xor    edx,edx
c0004695:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0004699:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000469d:	89 d8                	mov    eax,ebx
c000469f:	e8 74 ec ff ff       	call   c0003318 <dir_sdi>
c00046a4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00046a8:	83 ec 0c             	sub    esp,0xc
c00046ab:	56                   	push   esi
c00046ac:	e8 87 15 00 00       	call   c0005c38 <ff_memfree>
c00046b1:	83 c4 10             	add    esp,0x10
c00046b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00046b8:	83 f8 04             	cmp    eax,0x4
c00046bb:	74 06                	je     c00046c3 <f_opendir+0xba>
c00046bd:	85 c0                	test   eax,eax
c00046bf:	74 0d                	je     c00046ce <f_opendir+0xc5>
c00046c1:	eb 05                	jmp    c00046c8 <f_opendir+0xbf>
c00046c3:	b8 05 00 00 00       	mov    eax,0x5
c00046c8:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00046ce:	83 c4 24             	add    esp,0x24
c00046d1:	5b                   	pop    ebx
c00046d2:	5e                   	pop    esi
c00046d3:	c3                   	ret    

c00046d4 <f_closedir>:
c00046d4:	53                   	push   ebx
c00046d5:	83 ec 18             	sub    esp,0x18
c00046d8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00046dc:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00046e0:	89 d8                	mov    eax,ebx
c00046e2:	e8 ae db ff ff       	call   c0002295 <validate>
c00046e7:	85 c0                	test   eax,eax
c00046e9:	75 06                	jne    c00046f1 <f_closedir+0x1d>
c00046eb:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00046f1:	83 c4 18             	add    esp,0x18
c00046f4:	5b                   	pop    ebx
c00046f5:	c3                   	ret    

c00046f6 <f_readdir>:
c00046f6:	57                   	push   edi
c00046f7:	56                   	push   esi
c00046f8:	53                   	push   ebx
c00046f9:	83 ec 20             	sub    esp,0x20
c00046fc:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004700:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0004704:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004708:	89 d8                	mov    eax,ebx
c000470a:	e8 86 db ff ff       	call   c0002295 <validate>
c000470f:	85 c0                	test   eax,eax
c0004711:	75 6e                	jne    c0004781 <f_readdir+0x8b>
c0004713:	85 ff                	test   edi,edi
c0004715:	75 0b                	jne    c0004722 <f_readdir+0x2c>
c0004717:	31 d2                	xor    edx,edx
c0004719:	89 d8                	mov    eax,ebx
c000471b:	e8 f8 eb ff ff       	call   c0003318 <dir_sdi>
c0004720:	eb 5f                	jmp    c0004781 <f_readdir+0x8b>
c0004722:	83 ec 0c             	sub    esp,0xc
c0004725:	68 00 02 00 00       	push   0x200
c000472a:	e8 f1 14 00 00       	call   c0005c20 <ff_memalloc>
c000472f:	83 c4 10             	add    esp,0x10
c0004732:	89 c6                	mov    esi,eax
c0004734:	b8 11 00 00 00       	mov    eax,0x11
c0004739:	85 f6                	test   esi,esi
c000473b:	74 44                	je     c0004781 <f_readdir+0x8b>
c000473d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004741:	31 d2                	xor    edx,edx
c0004743:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004746:	89 d8                	mov    eax,ebx
c0004748:	e8 ca ef ff ff       	call   c0003717 <dir_read>
c000474d:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0004752:	75 19                	jne    c000476d <f_readdir+0x77>
c0004754:	89 fa                	mov    edx,edi
c0004756:	89 d8                	mov    eax,ebx
c0004758:	e8 70 e8 ff ff       	call   c0002fcd <get_fileinfo>
c000475d:	31 d2                	xor    edx,edx
c000475f:	89 d8                	mov    eax,ebx
c0004761:	e8 47 ee ff ff       	call   c00035ad <dir_next>
c0004766:	83 f8 04             	cmp    eax,0x4
c0004769:	75 02                	jne    c000476d <f_readdir+0x77>
c000476b:	31 c0                	xor    eax,eax
c000476d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004771:	83 ec 0c             	sub    esp,0xc
c0004774:	56                   	push   esi
c0004775:	e8 be 14 00 00       	call   c0005c38 <ff_memfree>
c000477a:	83 c4 10             	add    esp,0x10
c000477d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004781:	83 c4 20             	add    esp,0x20
c0004784:	5b                   	pop    ebx
c0004785:	5e                   	pop    esi
c0004786:	5f                   	pop    edi
c0004787:	c3                   	ret    

c0004788 <f_stat>:
c0004788:	57                   	push   edi
c0004789:	31 c9                	xor    ecx,ecx
c000478b:	56                   	push   esi
c000478c:	53                   	push   ebx
c000478d:	83 ec 30             	sub    esp,0x30
c0004790:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0004794:	89 e2                	mov    edx,esp
c0004796:	8d 44 24 40          	lea    eax,[esp+0x40]
c000479a:	e8 f2 dc ff ff       	call   c0002491 <mount_volume>
c000479f:	89 c3                	mov    ebx,eax
c00047a1:	85 c0                	test   eax,eax
c00047a3:	75 59                	jne    c00047fe <f_stat+0x76>
c00047a5:	83 ec 0c             	sub    esp,0xc
c00047a8:	bb 11 00 00 00       	mov    ebx,0x11
c00047ad:	68 00 02 00 00       	push   0x200
c00047b2:	e8 69 14 00 00       	call   c0005c20 <ff_memalloc>
c00047b7:	83 c4 10             	add    esp,0x10
c00047ba:	89 c6                	mov    esi,eax
c00047bc:	85 c0                	test   eax,eax
c00047be:	74 3e                	je     c00047fe <f_stat+0x76>
c00047c0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00047c3:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00047c7:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00047ca:	89 e0                	mov    eax,esp
c00047cc:	e8 0a f2 ff ff       	call   c00039db <follow_path>
c00047d1:	89 c3                	mov    ebx,eax
c00047d3:	85 c0                	test   eax,eax
c00047d5:	75 1b                	jne    c00047f2 <f_stat+0x6a>
c00047d7:	f6 44 24 2b 80       	test   BYTE PTR [esp+0x2b],0x80
c00047dc:	75 0f                	jne    c00047ed <f_stat+0x65>
c00047de:	85 ff                	test   edi,edi
c00047e0:	74 10                	je     c00047f2 <f_stat+0x6a>
c00047e2:	89 fa                	mov    edx,edi
c00047e4:	89 e0                	mov    eax,esp
c00047e6:	e8 e2 e7 ff ff       	call   c0002fcd <get_fileinfo>
c00047eb:	eb 05                	jmp    c00047f2 <f_stat+0x6a>
c00047ed:	bb 06 00 00 00       	mov    ebx,0x6
c00047f2:	83 ec 0c             	sub    esp,0xc
c00047f5:	56                   	push   esi
c00047f6:	e8 3d 14 00 00       	call   c0005c38 <ff_memfree>
c00047fb:	83 c4 10             	add    esp,0x10
c00047fe:	83 c4 30             	add    esp,0x30
c0004801:	89 d8                	mov    eax,ebx
c0004803:	5b                   	pop    ebx
c0004804:	5e                   	pop    esi
c0004805:	5f                   	pop    edi
c0004806:	c3                   	ret    

c0004807 <f_getfree>:
c0004807:	55                   	push   ebp
c0004808:	31 c9                	xor    ecx,ecx
c000480a:	57                   	push   edi
c000480b:	56                   	push   esi
c000480c:	53                   	push   ebx
c000480d:	83 ec 2c             	sub    esp,0x2c
c0004810:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004814:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004818:	e8 74 dc ff ff       	call   c0002491 <mount_volume>
c000481d:	89 c7                	mov    edi,eax
c000481f:	85 c0                	test   eax,eax
c0004821:	0f 85 df 00 00 00    	jne    c0004906 <f_getfree+0xff>
c0004827:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000482b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000482f:	89 30                	mov    DWORD PTR [eax],esi
c0004831:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0004834:	8b 6e 18             	mov    ebp,DWORD PTR [esi+0x18]
c0004837:	8d 55 fe             	lea    edx,[ebp-0x2]
c000483a:	39 d0                	cmp    eax,edx
c000483c:	77 0b                	ja     c0004849 <f_getfree+0x42>
c000483e:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0004842:	89 01                	mov    DWORD PTR [ecx],eax
c0004844:	e9 bd 00 00 00       	jmp    c0004906 <f_getfree+0xff>
c0004849:	80 3e 01             	cmp    BYTE PTR [esi],0x1
c000484c:	75 29                	jne    c0004877 <f_getfree+0x70>
c000484e:	bd 02 00 00 00       	mov    ebp,0x2
c0004853:	31 db                	xor    ebx,ebx
c0004855:	89 ea                	mov    edx,ebp
c0004857:	89 f0                	mov    eax,esi
c0004859:	e8 b6 e9 ff ff       	call   c0003214 <get_fat.isra.2>
c000485e:	83 f8 ff             	cmp    eax,0xffffffff
c0004861:	74 7d                	je     c00048e0 <f_getfree+0xd9>
c0004863:	83 f8 01             	cmp    eax,0x1
c0004866:	74 7f                	je     c00048e7 <f_getfree+0xe0>
c0004868:	83 d3 00             	adc    ebx,0x0
c000486b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000486f:	45                   	inc    ebp
c0004870:	39 68 18             	cmp    DWORD PTR [eax+0x18],ebp
c0004873:	77 e0                	ja     c0004855 <f_getfree+0x4e>
c0004875:	eb 79                	jmp    c00048f0 <f_getfree+0xe9>
c0004877:	8b 56 24             	mov    edx,DWORD PTR [esi+0x24]
c000487a:	31 db                	xor    ebx,ebx
c000487c:	31 f6                	xor    esi,esi
c000487e:	85 f6                	test   esi,esi
c0004880:	75 18                	jne    c000489a <f_getfree+0x93>
c0004882:	8d 42 01             	lea    eax,[edx+0x1]
c0004885:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004889:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000488d:	e8 ac da ff ff       	call   c000233e <move_window>
c0004892:	85 c0                	test   eax,eax
c0004894:	75 58                	jne    c00048ee <f_getfree+0xe7>
c0004896:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000489a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000489e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00048a2:	8d 44 31 34          	lea    eax,[ecx+esi*1+0x34]
c00048a6:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c00048a9:	75 13                	jne    c00048be <f_getfree+0xb7>
c00048ab:	e8 27 d5 ff ff       	call   c0001dd7 <ld_word>
c00048b0:	0f b7 c0             	movzx  eax,ax
c00048b3:	83 f8 01             	cmp    eax,0x1
c00048b6:	83 d3 00             	adc    ebx,0x0
c00048b9:	83 c6 02             	add    esi,0x2
c00048bc:	eb 13                	jmp    c00048d1 <f_getfree+0xca>
c00048be:	e8 21 d5 ff ff       	call   c0001de4 <ld_dword>
c00048c3:	25 ff ff ff 0f       	and    eax,0xfffffff
c00048c8:	83 f8 01             	cmp    eax,0x1
c00048cb:	83 d3 00             	adc    ebx,0x0
c00048ce:	83 c6 04             	add    esi,0x4
c00048d1:	81 e6 ff 01 00 00    	and    esi,0x1ff
c00048d7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00048db:	4d                   	dec    ebp
c00048dc:	75 a0                	jne    c000487e <f_getfree+0x77>
c00048de:	eb 10                	jmp    c00048f0 <f_getfree+0xe9>
c00048e0:	bf 01 00 00 00       	mov    edi,0x1
c00048e5:	eb 09                	jmp    c00048f0 <f_getfree+0xe9>
c00048e7:	bf 02 00 00 00       	mov    edi,0x2
c00048ec:	eb 02                	jmp    c00048f0 <f_getfree+0xe9>
c00048ee:	89 c7                	mov    edi,eax
c00048f0:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00048f4:	89 18                	mov    DWORD PTR [eax],ebx
c00048f6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048fa:	8a 50 04             	mov    dl,BYTE PTR [eax+0x4]
c00048fd:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c0004900:	83 ca 01             	or     edx,0x1
c0004903:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c0004906:	83 c4 2c             	add    esp,0x2c
c0004909:	89 f8                	mov    eax,edi
c000490b:	5b                   	pop    ebx
c000490c:	5e                   	pop    esi
c000490d:	5f                   	pop    edi
c000490e:	5d                   	pop    ebp
c000490f:	c3                   	ret    

c0004910 <f_truncate>:
c0004910:	56                   	push   esi
c0004911:	53                   	push   ebx
c0004912:	83 ec 14             	sub    esp,0x14
c0004915:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004919:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000491d:	89 d8                	mov    eax,ebx
c000491f:	e8 71 d9 ff ff       	call   c0002295 <validate>
c0004924:	89 c6                	mov    esi,eax
c0004926:	85 c0                	test   eax,eax
c0004928:	0f 85 c4 00 00 00    	jne    c00049f2 <f_truncate+0xe2>
c000492e:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0004932:	85 f6                	test   esi,esi
c0004934:	0f 85 b8 00 00 00    	jne    c00049f2 <f_truncate+0xe2>
c000493a:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000493e:	0f 84 a9 00 00 00    	je     c00049ed <f_truncate+0xdd>
c0004944:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004947:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000494a:	0f 83 a2 00 00 00    	jae    c00049f2 <f_truncate+0xe2>
c0004950:	85 c0                	test   eax,eax
c0004952:	75 15                	jne    c0004969 <f_truncate+0x59>
c0004954:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004957:	31 c9                	xor    ecx,ecx
c0004959:	89 d8                	mov    eax,ebx
c000495b:	e8 bf eb ff ff       	call   c000351f <remove_chain>
c0004960:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004967:	eb 35                	jmp    c000499e <f_truncate+0x8e>
c0004969:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000496c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000496e:	e8 a1 e8 ff ff       	call   c0003214 <get_fat.isra.2>
c0004973:	89 c2                	mov    edx,eax
c0004975:	b8 01 00 00 00       	mov    eax,0x1
c000497a:	83 fa ff             	cmp    edx,0xffffffff
c000497d:	74 1f                	je     c000499e <f_truncate+0x8e>
c000497f:	b8 02 00 00 00       	mov    eax,0x2
c0004984:	83 fa 01             	cmp    edx,0x1
c0004987:	74 15                	je     c000499e <f_truncate+0x8e>
c0004989:	31 c0                	xor    eax,eax
c000498b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000498f:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004992:	76 0a                	jbe    c000499e <f_truncate+0x8e>
c0004994:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c0004997:	89 d8                	mov    eax,ebx
c0004999:	e8 81 eb ff ff       	call   c000351f <remove_chain>
c000499e:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00049a1:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00049a4:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00049a7:	83 ca 40             	or     edx,0x40
c00049aa:	85 c0                	test   eax,eax
c00049ac:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00049af:	75 35                	jne    c00049e6 <f_truncate+0xd6>
c00049b1:	80 e2 80             	and    dl,0x80
c00049b4:	74 3c                	je     c00049f2 <f_truncate+0xe2>
c00049b6:	6a 01                	push   0x1
c00049b8:	8d 43 28             	lea    eax,[ebx+0x28]
c00049bb:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00049be:	50                   	push   eax
c00049bf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00049c3:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00049c7:	50                   	push   eax
c00049c8:	e8 d5 d3 ff ff       	call   c0001da2 <disk_write>
c00049cd:	83 c4 10             	add    esp,0x10
c00049d0:	85 c0                	test   eax,eax
c00049d2:	75 0d                	jne    c00049e1 <f_truncate+0xd1>
c00049d4:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00049d7:	31 f6                	xor    esi,esi
c00049d9:	83 e0 7f             	and    eax,0x7f
c00049dc:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00049df:	eb 11                	jmp    c00049f2 <f_truncate+0xe2>
c00049e1:	b8 01 00 00 00       	mov    eax,0x1
c00049e6:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c00049e9:	89 c6                	mov    esi,eax
c00049eb:	eb 05                	jmp    c00049f2 <f_truncate+0xe2>
c00049ed:	be 07 00 00 00       	mov    esi,0x7
c00049f2:	89 f0                	mov    eax,esi
c00049f4:	83 c4 14             	add    esp,0x14
c00049f7:	5b                   	pop    ebx
c00049f8:	5e                   	pop    esi
c00049f9:	c3                   	ret    

c00049fa <f_unlink>:
c00049fa:	55                   	push   ebp
c00049fb:	b9 02 00 00 00       	mov    ecx,0x2
c0004a00:	57                   	push   edi
c0004a01:	56                   	push   esi
c0004a02:	53                   	push   ebx
c0004a03:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004a09:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004a0d:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c0004a14:	e8 78 da ff ff       	call   c0002491 <mount_volume>
c0004a19:	85 c0                	test   eax,eax
c0004a1b:	0f 85 f0 00 00 00    	jne    c0004b11 <f_unlink+0x117>
c0004a21:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a25:	83 ec 0c             	sub    esp,0xc
c0004a28:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004a2c:	68 00 02 00 00       	push   0x200
c0004a31:	e8 ea 11 00 00       	call   c0005c20 <ff_memalloc>
c0004a36:	83 c4 10             	add    esp,0x10
c0004a39:	89 c3                	mov    ebx,eax
c0004a3b:	b8 11 00 00 00       	mov    eax,0x11
c0004a40:	85 db                	test   ebx,ebx
c0004a42:	0f 84 c9 00 00 00    	je     c0004b11 <f_unlink+0x117>
c0004a48:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a4c:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c0004a53:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004a56:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004a5a:	e8 7c ef ff ff       	call   c00039db <follow_path>
c0004a5f:	85 c0                	test   eax,eax
c0004a61:	0f 85 96 00 00 00    	jne    c0004afd <f_unlink+0x103>
c0004a67:	b8 06 00 00 00       	mov    eax,0x6
c0004a6c:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0004a71:	0f 85 86 00 00 00    	jne    c0004afd <f_unlink+0x103>
c0004a77:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c0004a7c:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004a82:	74 07                	je     c0004a8b <f_unlink+0x91>
c0004a84:	b8 07 00 00 00       	mov    eax,0x7
c0004a89:	eb 72                	jmp    c0004afd <f_unlink+0x103>
c0004a8b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004a8f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004a93:	8a 07                	mov    al,BYTE PTR [edi]
c0004a95:	e8 29 e7 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0004a9a:	83 e5 10             	and    ebp,0x10
c0004a9d:	89 c6                	mov    esi,eax
c0004a9f:	75 0f                	jne    c0004ab0 <f_unlink+0xb6>
c0004aa1:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004aa5:	e8 95 ed ff ff       	call   c000383f <dir_remove>
c0004aaa:	85 c0                	test   eax,eax
c0004aac:	74 2f                	je     c0004add <f_unlink+0xe3>
c0004aae:	eb 4d                	jmp    c0004afd <f_unlink+0x103>
c0004ab0:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004ab4:	31 d2                	xor    edx,edx
c0004ab6:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0004aba:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004abe:	e8 55 e8 ff ff       	call   c0003318 <dir_sdi>
c0004ac3:	85 c0                	test   eax,eax
c0004ac5:	75 36                	jne    c0004afd <f_unlink+0x103>
c0004ac7:	31 d2                	xor    edx,edx
c0004ac9:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004acd:	e8 45 ec ff ff       	call   c0003717 <dir_read>
c0004ad2:	85 c0                	test   eax,eax
c0004ad4:	74 ae                	je     c0004a84 <f_unlink+0x8a>
c0004ad6:	83 f8 04             	cmp    eax,0x4
c0004ad9:	75 22                	jne    c0004afd <f_unlink+0x103>
c0004adb:	eb c4                	jmp    c0004aa1 <f_unlink+0xa7>
c0004add:	85 f6                	test   esi,esi
c0004adf:	75 0b                	jne    c0004aec <f_unlink+0xf2>
c0004ae1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ae5:	e8 8b e2 ff ff       	call   c0002d75 <sync_fs>
c0004aea:	eb 11                	jmp    c0004afd <f_unlink+0x103>
c0004aec:	31 c9                	xor    ecx,ecx
c0004aee:	89 f2                	mov    edx,esi
c0004af0:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004af4:	e8 26 ea ff ff       	call   c000351f <remove_chain>
c0004af9:	85 c0                	test   eax,eax
c0004afb:	74 e4                	je     c0004ae1 <f_unlink+0xe7>
c0004afd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004b01:	83 ec 0c             	sub    esp,0xc
c0004b04:	53                   	push   ebx
c0004b05:	e8 2e 11 00 00       	call   c0005c38 <ff_memfree>
c0004b0a:	83 c4 10             	add    esp,0x10
c0004b0d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b11:	81 c4 8c 00 00 00    	add    esp,0x8c
c0004b17:	5b                   	pop    ebx
c0004b18:	5e                   	pop    esi
c0004b19:	5f                   	pop    edi
c0004b1a:	5d                   	pop    ebp
c0004b1b:	c3                   	ret    

c0004b1c <f_mkdir>:
c0004b1c:	57                   	push   edi
c0004b1d:	b9 02 00 00 00       	mov    ecx,0x2
c0004b22:	56                   	push   esi
c0004b23:	53                   	push   ebx
c0004b24:	83 ec 50             	sub    esp,0x50
c0004b27:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004b2b:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004b2f:	e8 5d d9 ff ff       	call   c0002491 <mount_volume>
c0004b34:	89 c3                	mov    ebx,eax
c0004b36:	85 c0                	test   eax,eax
c0004b38:	0f 85 70 01 00 00    	jne    c0004cae <f_mkdir+0x192>
c0004b3e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b42:	bb 11 00 00 00       	mov    ebx,0x11
c0004b47:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004b4b:	83 ec 0c             	sub    esp,0xc
c0004b4e:	68 00 02 00 00       	push   0x200
c0004b53:	e8 c8 10 00 00       	call   c0005c20 <ff_memalloc>
c0004b58:	83 c4 10             	add    esp,0x10
c0004b5b:	89 c7                	mov    edi,eax
c0004b5d:	85 c0                	test   eax,eax
c0004b5f:	0f 84 49 01 00 00    	je     c0004cae <f_mkdir+0x192>
c0004b65:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b69:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004b6d:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004b70:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004b74:	e8 62 ee ff ff       	call   c00039db <follow_path>
c0004b79:	89 c3                	mov    ebx,eax
c0004b7b:	85 c0                	test   eax,eax
c0004b7d:	74 3e                	je     c0004bbd <f_mkdir+0xa1>
c0004b7f:	83 f8 04             	cmp    eax,0x4
c0004b82:	75 3e                	jne    c0004bc2 <f_mkdir+0xa6>
c0004b84:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b88:	31 d2                	xor    edx,edx
c0004b8a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004b8e:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004b92:	e8 49 e8 ff ff       	call   c00033e0 <create_chain>
c0004b97:	89 c6                	mov    esi,eax
c0004b99:	85 c0                	test   eax,eax
c0004b9b:	74 0c                	je     c0004ba9 <f_mkdir+0x8d>
c0004b9d:	bb 02 00 00 00       	mov    ebx,0x2
c0004ba2:	83 f8 01             	cmp    eax,0x1
c0004ba5:	74 07                	je     c0004bae <f_mkdir+0x92>
c0004ba7:	eb 2a                	jmp    c0004bd3 <f_mkdir+0xb7>
c0004ba9:	bb 07 00 00 00       	mov    ebx,0x7
c0004bae:	31 c9                	xor    ecx,ecx
c0004bb0:	89 f2                	mov    edx,esi
c0004bb2:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004bb6:	e8 64 e9 ff ff       	call   c000351f <remove_chain>
c0004bbb:	eb 05                	jmp    c0004bc2 <f_mkdir+0xa6>
c0004bbd:	bb 08 00 00 00       	mov    ebx,0x8
c0004bc2:	83 ec 0c             	sub    esp,0xc
c0004bc5:	57                   	push   edi
c0004bc6:	e8 6d 10 00 00       	call   c0005c38 <ff_memfree>
c0004bcb:	83 c4 10             	add    esp,0x10
c0004bce:	e9 db 00 00 00       	jmp    c0004cae <f_mkdir+0x192>
c0004bd3:	bb 01 00 00 00       	mov    ebx,0x1
c0004bd8:	83 f8 ff             	cmp    eax,0xffffffff
c0004bdb:	74 d1                	je     c0004bae <f_mkdir+0x92>
c0004bdd:	89 f2                	mov    edx,esi
c0004bdf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004be3:	e8 f1 dc ff ff       	call   c00028d9 <dir_clear>
c0004be8:	89 c3                	mov    ebx,eax
c0004bea:	85 c0                	test   eax,eax
c0004bec:	75 c0                	jne    c0004bae <f_mkdir+0x92>
c0004bee:	b9 0b 00 00 00       	mov    ecx,0xb
c0004bf3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004bf7:	ba 20 00 00 00       	mov    edx,0x20
c0004bfc:	83 c0 34             	add    eax,0x34
c0004bff:	e8 14 d2 ff ff       	call   c0001e18 <mem_set>
c0004c04:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c08:	ba 00 00 21 50       	mov    edx,0x50210000
c0004c0d:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004c11:	c6 40 3f 10          	mov    BYTE PTR [eax+0x3f],0x10
c0004c15:	83 c0 4a             	add    eax,0x4a
c0004c18:	e8 e3 d1 ff ff       	call   c0001e00 <st_dword>
c0004c1d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c21:	89 f1                	mov    ecx,esi
c0004c23:	8d 50 34             	lea    edx,[eax+0x34]
c0004c26:	e8 c1 e5 ff ff       	call   c00031ec <st_clust.isra.1>
c0004c2b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c2f:	b9 20 00 00 00       	mov    ecx,0x20
c0004c34:	8d 50 34             	lea    edx,[eax+0x34]
c0004c37:	83 c0 54             	add    eax,0x54
c0004c3a:	e8 c4 d1 ff ff       	call   c0001e03 <mem_cpy>
c0004c3f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c43:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004c47:	8d 50 54             	lea    edx,[eax+0x54]
c0004c4a:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004c4e:	e8 99 e5 ff ff       	call   c00031ec <st_clust.isra.1>
c0004c53:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c57:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c5b:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c5f:	e8 0c ee ff ff       	call   c0003a70 <dir_register>
c0004c64:	89 c3                	mov    ebx,eax
c0004c66:	85 c0                	test   eax,eax
c0004c68:	0f 85 40 ff ff ff    	jne    c0004bae <f_mkdir+0x92>
c0004c6e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004c72:	ba 00 00 21 50       	mov    edx,0x50210000
c0004c77:	83 c0 16             	add    eax,0x16
c0004c7a:	e8 81 d1 ff ff       	call   c0001e00 <st_dword>
c0004c7f:	89 f1                	mov    ecx,esi
c0004c81:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004c85:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c89:	e8 5e e5 ff ff       	call   c00031ec <st_clust.isra.1>
c0004c8e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004c92:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004c96:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c9a:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c9e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ca2:	e8 ce e0 ff ff       	call   c0002d75 <sync_fs>
c0004ca7:	89 c3                	mov    ebx,eax
c0004ca9:	e9 14 ff ff ff       	jmp    c0004bc2 <f_mkdir+0xa6>
c0004cae:	83 c4 50             	add    esp,0x50
c0004cb1:	89 d8                	mov    eax,ebx
c0004cb3:	5b                   	pop    ebx
c0004cb4:	5e                   	pop    esi
c0004cb5:	5f                   	pop    edi
c0004cb6:	c3                   	ret    

c0004cb7 <f_rename>:
c0004cb7:	57                   	push   edi
c0004cb8:	56                   	push   esi
c0004cb9:	53                   	push   ebx
c0004cba:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004cc0:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004cc7:	e8 7c d5 ff ff       	call   c0002248 <get_ldnumber>
c0004ccc:	b9 02 00 00 00       	mov    ecx,0x2
c0004cd1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004cd5:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004cdc:	e8 b0 d7 ff ff       	call   c0002491 <mount_volume>
c0004ce1:	85 c0                	test   eax,eax
c0004ce3:	0f 85 7c 01 00 00    	jne    c0004e65 <f_rename+0x1ae>
c0004ce9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ced:	83 ec 0c             	sub    esp,0xc
c0004cf0:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004cf4:	68 00 02 00 00       	push   0x200
c0004cf9:	e8 22 0f 00 00       	call   c0005c20 <ff_memalloc>
c0004cfe:	83 c4 10             	add    esp,0x10
c0004d01:	89 c6                	mov    esi,eax
c0004d03:	b8 11 00 00 00       	mov    eax,0x11
c0004d08:	85 f6                	test   esi,esi
c0004d0a:	0f 84 55 01 00 00    	je     c0004e65 <f_rename+0x1ae>
c0004d10:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d14:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004d1b:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004d1e:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004d22:	e8 b4 ec ff ff       	call   c00039db <follow_path>
c0004d27:	85 c0                	test   eax,eax
c0004d29:	0f 85 22 01 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004d2f:	8a 54 24 6b          	mov    dl,BYTE PTR [esp+0x6b]
c0004d33:	b8 06 00 00 00       	mov    eax,0x6
c0004d38:	80 e2 a0             	and    dl,0xa0
c0004d3b:	0f 85 10 01 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004d41:	b9 20 00 00 00       	mov    ecx,0x20
c0004d46:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004d4a:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d4e:	e8 b0 d0 ff ff       	call   c0001e03 <mem_cpy>
c0004d53:	b9 30 00 00 00       	mov    ecx,0x30
c0004d58:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004d5c:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004d60:	e8 9e d0 ff ff       	call   c0001e03 <mem_cpy>
c0004d65:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004d6c:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004d70:	e8 66 ec ff ff       	call   c00039db <follow_path>
c0004d75:	85 c0                	test   eax,eax
c0004d77:	75 20                	jne    c0004d99 <f_rename+0xe2>
c0004d79:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004d7d:	b8 08 00 00 00       	mov    eax,0x8
c0004d82:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004d86:	0f 85 c5 00 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004d8c:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004d90:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004d97:	eb 03                	jmp    c0004d9c <f_rename+0xe5>
c0004d99:	83 f8 04             	cmp    eax,0x4
c0004d9c:	0f 85 af 00 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004da2:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004da6:	e8 c5 ec ff ff       	call   c0003a70 <dir_register>
c0004dab:	85 c0                	test   eax,eax
c0004dad:	0f 85 9e 00 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004db3:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004dba:	b9 13 00 00 00       	mov    ecx,0x13
c0004dbf:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004dc2:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004dc6:	e8 38 d0 ff ff       	call   c0001e03 <mem_cpy>
c0004dcb:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004dcf:	a8 10                	test   al,0x10
c0004dd1:	75 03                	jne    c0004dd6 <f_rename+0x11f>
c0004dd3:	83 c8 20             	or     eax,0x20
c0004dd6:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004dd9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ddd:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004de1:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004de5:	74 54                	je     c0004e3b <f_rename+0x184>
c0004de7:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004deb:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004def:	74 4a                	je     c0004e3b <f_rename+0x184>
c0004df1:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004df5:	89 da                	mov    edx,ebx
c0004df7:	8a 07                	mov    al,BYTE PTR [edi]
c0004df9:	e8 c5 e3 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0004dfe:	89 c2                	mov    edx,eax
c0004e00:	89 f8                	mov    eax,edi
c0004e02:	e8 27 d2 ff ff       	call   c000202e <clst2sect>
c0004e07:	89 c2                	mov    edx,eax
c0004e09:	b8 02 00 00 00       	mov    eax,0x2
c0004e0e:	85 d2                	test   edx,edx
c0004e10:	74 3f                	je     c0004e51 <f_rename+0x19a>
c0004e12:	89 f8                	mov    eax,edi
c0004e14:	e8 25 d5 ff ff       	call   c000233e <move_window>
c0004e19:	85 c0                	test   eax,eax
c0004e1b:	75 34                	jne    c0004e51 <f_rename+0x19a>
c0004e1d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e21:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c0004e25:	75 14                	jne    c0004e3b <f_rename+0x184>
c0004e27:	8d 50 54             	lea    edx,[eax+0x54]
c0004e2a:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0004e2e:	e8 b9 e3 ff ff       	call   c00031ec <st_clust.isra.1>
c0004e33:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e37:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e3b:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004e3f:	e8 fb e9 ff ff       	call   c000383f <dir_remove>
c0004e44:	85 c0                	test   eax,eax
c0004e46:	75 09                	jne    c0004e51 <f_rename+0x19a>
c0004e48:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e4c:	e8 24 df ff ff       	call   c0002d75 <sync_fs>
c0004e51:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e55:	83 ec 0c             	sub    esp,0xc
c0004e58:	56                   	push   esi
c0004e59:	e8 da 0d 00 00       	call   c0005c38 <ff_memfree>
c0004e5e:	83 c4 10             	add    esp,0x10
c0004e61:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e65:	81 c4 a0 00 00 00    	add    esp,0xa0
c0004e6b:	5b                   	pop    ebx
c0004e6c:	5e                   	pop    esi
c0004e6d:	5f                   	pop    edi
c0004e6e:	c3                   	ret    

c0004e6f <f_chmod>:
c0004e6f:	57                   	push   edi
c0004e70:	b9 02 00 00 00       	mov    ecx,0x2
c0004e75:	56                   	push   esi
c0004e76:	53                   	push   ebx
c0004e77:	83 ec 50             	sub    esp,0x50
c0004e7a:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0004e7e:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c0004e82:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004e86:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004e8a:	e8 02 d6 ff ff       	call   c0002491 <mount_volume>
c0004e8f:	85 c0                	test   eax,eax
c0004e91:	0f 85 81 00 00 00    	jne    c0004f18 <f_chmod+0xa9>
c0004e97:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e9b:	83 ec 0c             	sub    esp,0xc
c0004e9e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004ea2:	68 00 02 00 00       	push   0x200
c0004ea7:	e8 74 0d 00 00       	call   c0005c20 <ff_memalloc>
c0004eac:	83 c4 10             	add    esp,0x10
c0004eaf:	89 c6                	mov    esi,eax
c0004eb1:	b8 11 00 00 00       	mov    eax,0x11
c0004eb6:	85 f6                	test   esi,esi
c0004eb8:	74 5e                	je     c0004f18 <f_chmod+0xa9>
c0004eba:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ebe:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004ec2:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004ec5:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004ec9:	e8 0d eb ff ff       	call   c00039db <follow_path>
c0004ece:	85 c0                	test   eax,eax
c0004ed0:	75 32                	jne    c0004f04 <f_chmod+0x95>
c0004ed2:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0004ed6:	b8 06 00 00 00       	mov    eax,0x6
c0004edb:	80 e2 a0             	and    dl,0xa0
c0004ede:	75 24                	jne    c0004f04 <f_chmod+0x95>
c0004ee0:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004ee4:	8a 50 0b             	mov    dl,BYTE PTR [eax+0xb]
c0004ee7:	31 d7                	xor    edi,edx
c0004ee9:	21 fb                	and    ebx,edi
c0004eeb:	83 e3 27             	and    ebx,0x27
c0004eee:	31 d3                	xor    ebx,edx
c0004ef0:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c0004ef3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ef7:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004efb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004eff:	e8 71 de ff ff       	call   c0002d75 <sync_fs>
c0004f04:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f08:	83 ec 0c             	sub    esp,0xc
c0004f0b:	56                   	push   esi
c0004f0c:	e8 27 0d 00 00       	call   c0005c38 <ff_memfree>
c0004f11:	83 c4 10             	add    esp,0x10
c0004f14:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004f18:	83 c4 50             	add    esp,0x50
c0004f1b:	5b                   	pop    ebx
c0004f1c:	5e                   	pop    esi
c0004f1d:	5f                   	pop    edi
c0004f1e:	c3                   	ret    

c0004f1f <f_utime>:
c0004f1f:	56                   	push   esi
c0004f20:	b9 02 00 00 00       	mov    ecx,0x2
c0004f25:	53                   	push   ebx
c0004f26:	83 ec 54             	sub    esp,0x54
c0004f29:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0004f2d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004f31:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004f35:	e8 57 d5 ff ff       	call   c0002491 <mount_volume>
c0004f3a:	85 c0                	test   eax,eax
c0004f3c:	0f 85 87 00 00 00    	jne    c0004fc9 <f_utime+0xaa>
c0004f42:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f46:	83 ec 0c             	sub    esp,0xc
c0004f49:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004f4d:	68 00 02 00 00       	push   0x200
c0004f52:	e8 c9 0c 00 00       	call   c0005c20 <ff_memalloc>
c0004f57:	83 c4 10             	add    esp,0x10
c0004f5a:	89 c3                	mov    ebx,eax
c0004f5c:	b8 11 00 00 00       	mov    eax,0x11
c0004f61:	85 db                	test   ebx,ebx
c0004f63:	74 64                	je     c0004fc9 <f_utime+0xaa>
c0004f65:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f69:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004f6d:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004f70:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004f74:	e8 62 ea ff ff       	call   c00039db <follow_path>
c0004f79:	85 c0                	test   eax,eax
c0004f7b:	75 38                	jne    c0004fb5 <f_utime+0x96>
c0004f7d:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0004f81:	b8 06 00 00 00       	mov    eax,0x6
c0004f86:	80 e2 a0             	and    dl,0xa0
c0004f89:	75 2a                	jne    c0004fb5 <f_utime+0x96>
c0004f8b:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0004f8f:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0004f93:	c1 e2 10             	shl    edx,0x10
c0004f96:	09 c2                	or     edx,eax
c0004f98:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004f9c:	83 c0 16             	add    eax,0x16
c0004f9f:	e8 5c ce ff ff       	call   c0001e00 <st_dword>
c0004fa4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fa8:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004fac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fb0:	e8 c0 dd ff ff       	call   c0002d75 <sync_fs>
c0004fb5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004fb9:	83 ec 0c             	sub    esp,0xc
c0004fbc:	53                   	push   ebx
c0004fbd:	e8 76 0c 00 00       	call   c0005c38 <ff_memfree>
c0004fc2:	83 c4 10             	add    esp,0x10
c0004fc5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004fc9:	83 c4 54             	add    esp,0x54
c0004fcc:	5b                   	pop    ebx
c0004fcd:	5e                   	pop    esi
c0004fce:	c3                   	ret    

c0004fcf <f_getlabel>:
c0004fcf:	55                   	push   ebp
c0004fd0:	31 c9                	xor    ecx,ecx
c0004fd2:	57                   	push   edi
c0004fd3:	56                   	push   esi
c0004fd4:	53                   	push   ebx
c0004fd5:	83 ec 5c             	sub    esp,0x5c
c0004fd8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004fdc:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004fe0:	e8 ac d4 ff ff       	call   c0002491 <mount_volume>
c0004fe5:	89 c6                	mov    esi,eax
c0004fe7:	85 c0                	test   eax,eax
c0004fe9:	0f 85 27 01 00 00    	jne    c0005116 <f_getlabel+0x147>
c0004fef:	83 7c 24 74 00       	cmp    DWORD PTR [esp+0x74],0x0
c0004ff4:	0f 84 d0 00 00 00    	je     c00050ca <f_getlabel+0xfb>
c0004ffa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ffe:	31 d2                	xor    edx,edx
c0005000:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005004:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000500c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005010:	e8 03 e3 ff ff       	call   c0003318 <dir_sdi>
c0005015:	85 c0                	test   eax,eax
c0005017:	0f 85 a1 00 00 00    	jne    c00050be <f_getlabel+0xef>
c000501d:	ba 01 00 00 00       	mov    edx,0x1
c0005022:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005026:	e8 ec e6 ff ff       	call   c0003717 <dir_read>
c000502b:	85 c0                	test   eax,eax
c000502d:	0f 85 8b 00 00 00    	jne    c00050be <f_getlabel+0xef>
c0005033:	31 db                	xor    ebx,ebx
c0005035:	31 c9                	xor    ecx,ecx
c0005037:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000503b:	8d 79 01             	lea    edi,[ecx+0x1]
c000503e:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0005043:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0005048:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000504c:	e8 06 ce ff ff       	call   c0001e57 <dbc_1st>
c0005051:	85 c0                	test   eax,eax
c0005053:	74 16                	je     c000506b <f_getlabel+0x9c>
c0005055:	83 ff 0b             	cmp    edi,0xb
c0005058:	74 11                	je     c000506b <f_getlabel+0x9c>
c000505a:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c000505f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005063:	8d 79 02             	lea    edi,[ecx+0x2]
c0005066:	c1 e0 08             	shl    eax,0x8
c0005069:	09 c2                	or     edx,eax
c000506b:	0f b7 d2             	movzx  edx,dx
c000506e:	50                   	push   eax
c000506f:	50                   	push   eax
c0005070:	68 b5 01 00 00       	push   0x1b5
c0005075:	52                   	push   edx
c0005076:	e8 75 0c 00 00       	call   c0005cf0 <ff_oem2uni>
c000507b:	83 c4 10             	add    esp,0x10
c000507e:	0f b7 c0             	movzx  eax,ax
c0005081:	85 c0                	test   eax,eax
c0005083:	74 22                	je     c00050a7 <f_getlabel+0xd8>
c0005085:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0005089:	b9 04 00 00 00       	mov    ecx,0x4
c000508e:	01 da                	add    edx,ebx
c0005090:	e8 a0 ce ff ff       	call   c0001f35 <put_utf>
c0005095:	0f b6 c0             	movzx  eax,al
c0005098:	85 c0                	test   eax,eax
c000509a:	74 0b                	je     c00050a7 <f_getlabel+0xd8>
c000509c:	01 c3                	add    ebx,eax
c000509e:	83 ff 0b             	cmp    edi,0xb
c00050a1:	74 06                	je     c00050a9 <f_getlabel+0xda>
c00050a3:	89 f9                	mov    ecx,edi
c00050a5:	eb 90                	jmp    c0005037 <f_getlabel+0x68>
c00050a7:	31 db                	xor    ebx,ebx
c00050a9:	03 5c 24 74          	add    ebx,DWORD PTR [esp+0x74]
c00050ad:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00050b0:	39 5c 24 74          	cmp    DWORD PTR [esp+0x74],ebx
c00050b4:	74 14                	je     c00050ca <f_getlabel+0xfb>
c00050b6:	4b                   	dec    ebx
c00050b7:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c00050ba:	74 f1                	je     c00050ad <f_getlabel+0xde>
c00050bc:	eb 0c                	jmp    c00050ca <f_getlabel+0xfb>
c00050be:	83 f8 04             	cmp    eax,0x4
c00050c1:	75 51                	jne    c0005114 <f_getlabel+0x145>
c00050c3:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00050c7:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00050ca:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c00050cf:	74 45                	je     c0005116 <f_getlabel+0x147>
c00050d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050d5:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00050d8:	e8 61 d2 ff ff       	call   c000233e <move_window>
c00050dd:	89 c6                	mov    esi,eax
c00050df:	85 c0                	test   eax,eax
c00050e1:	75 33                	jne    c0005116 <f_getlabel+0x147>
c00050e3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00050e7:	b8 43 00 00 00       	mov    eax,0x43
c00050ec:	0f b6 0a             	movzx  ecx,BYTE PTR [edx]
c00050ef:	83 f9 03             	cmp    ecx,0x3
c00050f2:	74 0f                	je     c0005103 <f_getlabel+0x134>
c00050f4:	31 c0                	xor    eax,eax
c00050f6:	83 f9 04             	cmp    ecx,0x4
c00050f9:	0f 94 c0             	sete   al
c00050fc:	48                   	dec    eax
c00050fd:	83 e0 c3             	and    eax,0xffffffc3
c0005100:	83 c0 64             	add    eax,0x64
c0005103:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0005107:	e8 d8 cc ff ff       	call   c0001de4 <ld_dword>
c000510c:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0005110:	89 07                	mov    DWORD PTR [edi],eax
c0005112:	eb 02                	jmp    c0005116 <f_getlabel+0x147>
c0005114:	89 c6                	mov    esi,eax
c0005116:	83 c4 5c             	add    esp,0x5c
c0005119:	89 f0                	mov    eax,esi
c000511b:	5b                   	pop    ebx
c000511c:	5e                   	pop    esi
c000511d:	5f                   	pop    edi
c000511e:	5d                   	pop    ebp
c000511f:	c3                   	ret    

c0005120 <f_setlabel>:
c0005120:	57                   	push   edi
c0005121:	b9 02 00 00 00       	mov    ecx,0x2
c0005126:	56                   	push   esi
c0005127:	53                   	push   ebx
c0005128:	83 ec 50             	sub    esp,0x50
c000512b:	8d 54 24 04          	lea    edx,[esp+0x4]
c000512f:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005133:	e8 59 d3 ff ff       	call   c0002491 <mount_volume>
c0005138:	89 c6                	mov    esi,eax
c000513a:	85 c0                	test   eax,eax
c000513c:	0f 85 65 01 00 00    	jne    c00052a7 <f_setlabel+0x187>
c0005142:	b9 0b 00 00 00       	mov    ecx,0xb
c0005147:	ba 20 00 00 00       	mov    edx,0x20
c000514c:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0005150:	31 db                	xor    ebx,ebx
c0005152:	e8 c1 cc ff ff       	call   c0001e18 <mem_set>
c0005157:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000515b:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c000515e:	76 5d                	jbe    c00051bd <f_setlabel+0x9d>
c0005160:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005164:	e8 f4 cc ff ff       	call   c0001e5d <tchar2uni>
c0005169:	3d ff ff 00 00       	cmp    eax,0xffff
c000516e:	76 0a                	jbe    c000517a <f_setlabel+0x5a>
c0005170:	be 06 00 00 00       	mov    esi,0x6
c0005175:	e9 2d 01 00 00       	jmp    c00052a7 <f_setlabel+0x187>
c000517a:	83 ec 0c             	sub    esp,0xc
c000517d:	50                   	push   eax
c000517e:	e8 e5 0b 00 00       	call   c0005d68 <ff_wtoupper>
c0005183:	5a                   	pop    edx
c0005184:	59                   	pop    ecx
c0005185:	68 b5 01 00 00       	push   0x1b5
c000518a:	50                   	push   eax
c000518b:	e8 c0 0a 00 00       	call   c0005c50 <ff_uni2oem>
c0005190:	83 c4 10             	add    esp,0x10
c0005193:	0f b7 f0             	movzx  esi,ax
c0005196:	89 f7                	mov    edi,esi
c0005198:	85 f6                	test   esi,esi
c000519a:	74 d4                	je     c0005170 <f_setlabel+0x50>
c000519c:	89 f2                	mov    edx,esi
c000519e:	b8 b0 06 02 c0       	mov    eax,0xc00206b0
c00051a3:	e8 9e cc ff ff       	call   c0001e46 <chk_chr>
c00051a8:	85 c0                	test   eax,eax
c00051aa:	75 c4                	jne    c0005170 <f_setlabel+0x50>
c00051ac:	81 fe ff 00 00 00    	cmp    esi,0xff
c00051b2:	0f 87 c9 00 00 00    	ja     c0005281 <f_setlabel+0x161>
c00051b8:	e9 e0 00 00 00       	jmp    c000529d <f_setlabel+0x17d>
c00051bd:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c00051c2:	74 ac                	je     c0005170 <f_setlabel+0x50>
c00051c4:	85 db                	test   ebx,ebx
c00051c6:	74 0e                	je     c00051d6 <f_setlabel+0xb6>
c00051c8:	8d 43 ff             	lea    eax,[ebx-0x1]
c00051cb:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c00051d0:	75 04                	jne    c00051d6 <f_setlabel+0xb6>
c00051d2:	89 c3                	mov    ebx,eax
c00051d4:	eb ee                	jmp    c00051c4 <f_setlabel+0xa4>
c00051d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00051da:	31 d2                	xor    edx,edx
c00051dc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00051e0:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00051e8:	8d 44 24 20          	lea    eax,[esp+0x20]
c00051ec:	e8 27 e1 ff ff       	call   c0003318 <dir_sdi>
c00051f1:	89 c6                	mov    esi,eax
c00051f3:	85 c0                	test   eax,eax
c00051f5:	0f 85 ac 00 00 00    	jne    c00052a7 <f_setlabel+0x187>
c00051fb:	ba 01 00 00 00       	mov    edx,0x1
c0005200:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005204:	e8 0e e5 ff ff       	call   c0003717 <dir_read>
c0005209:	85 c0                	test   eax,eax
c000520b:	75 18                	jne    c0005225 <f_setlabel+0x105>
c000520d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005211:	85 db                	test   ebx,ebx
c0005213:	74 0b                	je     c0005220 <f_setlabel+0x100>
c0005215:	b9 0b 00 00 00       	mov    ecx,0xb
c000521a:	8d 54 24 0a          	lea    edx,[esp+0xa]
c000521e:	eb 47                	jmp    c0005267 <f_setlabel+0x147>
c0005220:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0005223:	eb 47                	jmp    c000526c <f_setlabel+0x14c>
c0005225:	83 f8 04             	cmp    eax,0x4
c0005228:	75 53                	jne    c000527d <f_setlabel+0x15d>
c000522a:	85 db                	test   ebx,ebx
c000522c:	74 79                	je     c00052a7 <f_setlabel+0x187>
c000522e:	ba 01 00 00 00       	mov    edx,0x1
c0005233:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005237:	e8 76 e4 ff ff       	call   c00036b2 <dir_alloc>
c000523c:	89 c6                	mov    esi,eax
c000523e:	85 c0                	test   eax,eax
c0005240:	75 65                	jne    c00052a7 <f_setlabel+0x187>
c0005242:	b9 20 00 00 00       	mov    ecx,0x20
c0005247:	31 d2                	xor    edx,edx
c0005249:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000524d:	e8 c6 cb ff ff       	call   c0001e18 <mem_set>
c0005252:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005256:	b9 0b 00 00 00       	mov    ecx,0xb
c000525b:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c000525f:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005263:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005267:	e8 97 cb ff ff       	call   c0001e03 <mem_cpy>
c000526c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005270:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005274:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005278:	e8 f8 da ff ff       	call   c0002d75 <sync_fs>
c000527d:	89 c6                	mov    esi,eax
c000527f:	eb 26                	jmp    c00052a7 <f_setlabel+0x187>
c0005281:	83 fb 09             	cmp    ebx,0x9
c0005284:	0f 87 e6 fe ff ff    	ja     c0005170 <f_setlabel+0x50>
c000528a:	89 f0                	mov    eax,esi
c000528c:	88 64 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],ah
c0005290:	43                   	inc    ebx
c0005291:	89 f8                	mov    eax,edi
c0005293:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c0005297:	43                   	inc    ebx
c0005298:	e9 ba fe ff ff       	jmp    c0005157 <f_setlabel+0x37>
c000529d:	83 fb 0a             	cmp    ebx,0xa
c00052a0:	76 ef                	jbe    c0005291 <f_setlabel+0x171>
c00052a2:	e9 c9 fe ff ff       	jmp    c0005170 <f_setlabel+0x50>
c00052a7:	83 c4 50             	add    esp,0x50
c00052aa:	89 f0                	mov    eax,esi
c00052ac:	5b                   	pop    ebx
c00052ad:	5e                   	pop    esi
c00052ae:	5f                   	pop    edi
c00052af:	c3                   	ret    

c00052b0 <f_expand>:
c00052b0:	55                   	push   ebp
c00052b1:	57                   	push   edi
c00052b2:	56                   	push   esi
c00052b3:	53                   	push   ebx
c00052b4:	83 ec 2c             	sub    esp,0x2c
c00052b7:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00052bb:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00052bf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00052c3:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00052c7:	89 d8                	mov    eax,ebx
c00052c9:	e8 c7 cf ff ff       	call   c0002295 <validate>
c00052ce:	89 c6                	mov    esi,eax
c00052d0:	85 c0                	test   eax,eax
c00052d2:	0f 85 3b 01 00 00    	jne    c0005413 <f_expand+0x163>
c00052d8:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c00052dc:	85 f6                	test   esi,esi
c00052de:	0f 85 2f 01 00 00    	jne    c0005413 <f_expand+0x163>
c00052e4:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c00052e9:	75 0a                	jne    c00052f5 <f_expand+0x45>
c00052eb:	be 07 00 00 00       	mov    esi,0x7
c00052f0:	e9 1e 01 00 00       	jmp    c0005413 <f_expand+0x163>
c00052f5:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c00052f9:	75 f0                	jne    c00052eb <f_expand+0x3b>
c00052fb:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00052ff:	74 ea                	je     c00052eb <f_expand+0x3b>
c0005301:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0005305:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c0005309:	c1 e1 09             	shl    ecx,0x9
c000530c:	8d 41 ff             	lea    eax,[ecx-0x1]
c000530f:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c0005313:	0f 95 c0             	setne  al
c0005316:	31 d2                	xor    edx,edx
c0005318:	0f b6 c0             	movzx  eax,al
c000531b:	89 c7                	mov    edi,eax
c000531d:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005321:	f7 f1                	div    ecx
c0005323:	01 f8                	add    eax,edi
c0005325:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
c0005328:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000532c:	83 ff 01             	cmp    edi,0x1
c000532f:	76 05                	jbe    c0005336 <f_expand+0x86>
c0005331:	39 7d 18             	cmp    DWORD PTR [ebp+0x18],edi
c0005334:	77 05                	ja     c000533b <f_expand+0x8b>
c0005336:	bf 02 00 00 00       	mov    edi,0x2
c000533b:	89 3c 24             	mov    DWORD PTR [esp],edi
c000533e:	89 fd                	mov    ebp,edi
c0005340:	31 c9                	xor    ecx,ecx
c0005342:	89 ea                	mov    edx,ebp
c0005344:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005348:	8b 03                	mov    eax,DWORD PTR [ebx]
c000534a:	45                   	inc    ebp
c000534b:	e8 c4 de ff ff       	call   c0003214 <get_fat.isra.2>
c0005350:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005354:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005358:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c000535b:	77 05                	ja     c0005362 <f_expand+0xb2>
c000535d:	bd 02 00 00 00       	mov    ebp,0x2
c0005362:	83 f8 01             	cmp    eax,0x1
c0005365:	74 20                	je     c0005387 <f_expand+0xd7>
c0005367:	83 f8 ff             	cmp    eax,0xffffffff
c000536a:	74 25                	je     c0005391 <f_expand+0xe1>
c000536c:	85 c0                	test   eax,eax
c000536e:	75 09                	jne    c0005379 <f_expand+0xc9>
c0005370:	41                   	inc    ecx
c0005371:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c0005375:	75 07                	jne    c000537e <f_expand+0xce>
c0005377:	eb 1f                	jmp    c0005398 <f_expand+0xe8>
c0005379:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000537c:	31 c9                	xor    ecx,ecx
c000537e:	39 fd                	cmp    ebp,edi
c0005380:	75 c0                	jne    c0005342 <f_expand+0x92>
c0005382:	e9 64 ff ff ff       	jmp    c00052eb <f_expand+0x3b>
c0005387:	be 02 00 00 00       	mov    esi,0x2
c000538c:	e9 82 00 00 00       	jmp    c0005413 <f_expand+0x163>
c0005391:	be 01 00 00 00       	mov    esi,0x1
c0005396:	eb 7b                	jmp    c0005413 <f_expand+0x163>
c0005398:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000539d:	74 2b                	je     c00053ca <f_expand+0x11a>
c000539f:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00053a2:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c00053a6:	85 ed                	test   ebp,ebp
c00053a8:	74 24                	je     c00053ce <f_expand+0x11e>
c00053aa:	83 c9 ff             	or     ecx,0xffffffff
c00053ad:	83 fd 01             	cmp    ebp,0x1
c00053b0:	74 03                	je     c00053b5 <f_expand+0x105>
c00053b2:	8d 4f 01             	lea    ecx,[edi+0x1]
c00053b5:	89 fa                	mov    edx,edi
c00053b7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00053bb:	e8 c2 d3 ff ff       	call   c0002782 <put_fat>
c00053c0:	85 c0                	test   eax,eax
c00053c2:	75 4d                	jne    c0005411 <f_expand+0x161>
c00053c4:	89 f8                	mov    eax,edi
c00053c6:	4d                   	dec    ebp
c00053c7:	47                   	inc    edi
c00053c8:	eb dc                	jmp    c00053a6 <f_expand+0xf6>
c00053ca:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00053cd:	48                   	dec    eax
c00053ce:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00053d2:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00053d7:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c00053da:	74 37                	je     c0005413 <f_expand+0x163>
c00053dc:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00053df:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00053e2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00053e6:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00053e9:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00053ec:	83 c8 40             	or     eax,0x40
c00053ef:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00053f2:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00053f5:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c00053f8:	8d 4b fe             	lea    ecx,[ebx-0x2]
c00053fb:	39 c8                	cmp    eax,ecx
c00053fd:	77 14                	ja     c0005413 <f_expand+0x163>
c00053ff:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0005403:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0005406:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0005409:	83 c8 01             	or     eax,0x1
c000540c:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c000540f:	eb 02                	jmp    c0005413 <f_expand+0x163>
c0005411:	89 c6                	mov    esi,eax
c0005413:	83 c4 2c             	add    esp,0x2c
c0005416:	89 f0                	mov    eax,esi
c0005418:	5b                   	pop    ebx
c0005419:	5e                   	pop    esi
c000541a:	5f                   	pop    edi
c000541b:	5d                   	pop    ebp
c000541c:	c3                   	ret    

c000541d <f_mkfs>:
c000541d:	55                   	push   ebp
c000541e:	57                   	push   edi
c000541f:	56                   	push   esi
c0005420:	be 0b 00 00 00       	mov    esi,0xb
c0005425:	53                   	push   ebx
c0005426:	83 ec 5c             	sub    esp,0x5c
c0005429:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000542d:	8b 6c 24 78          	mov    ebp,DWORD PTR [esp+0x78]
c0005431:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005435:	e8 0e ce ff ff       	call   c0002248 <get_ldnumber>
c000543a:	85 c0                	test   eax,eax
c000543c:	0f 88 d1 07 00 00    	js     c0005c13 <f_mkfs+0x7f6>
c0005442:	8b 14 85 a0 64 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9b60]
c0005449:	85 d2                	test   edx,edx
c000544b:	74 03                	je     c0005450 <f_mkfs+0x33>
c000544d:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0005450:	85 db                	test   ebx,ebx
c0005452:	75 05                	jne    c0005459 <f_mkfs+0x3c>
c0005454:	bb a0 06 02 c0       	mov    ebx,0xc00206a0
c0005459:	83 ec 0c             	sub    esp,0xc
c000545c:	0f b6 c0             	movzx  eax,al
c000545f:	be 03 00 00 00       	mov    esi,0x3
c0005464:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005468:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000546c:	e8 18 c9 ff ff       	call   c0001d89 <disk_initialize>
c0005471:	83 c4 10             	add    esp,0x10
c0005474:	a8 01                	test   al,0x1
c0005476:	0f 85 97 07 00 00    	jne    c0005c13 <f_mkfs+0x7f6>
c000547c:	be 0a 00 00 00       	mov    esi,0xa
c0005481:	a8 04                	test   al,0x4
c0005483:	0f 85 8a 07 00 00    	jne    c0005c13 <f_mkfs+0x7f6>
c0005489:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000548c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0005490:	85 c0                	test   eax,eax
c0005492:	75 20                	jne    c00054b4 <f_mkfs+0x97>
c0005494:	51                   	push   ecx
c0005495:	8d 44 24 44          	lea    eax,[esp+0x44]
c0005499:	50                   	push   eax
c000549a:	6a 03                	push   0x3
c000549c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00054a0:	e8 13 c9 ff ff       	call   c0001db8 <disk_ioctl>
c00054a5:	83 c4 10             	add    esp,0x10
c00054a8:	85 c0                	test   eax,eax
c00054aa:	74 08                	je     c00054b4 <f_mkfs+0x97>
c00054ac:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00054b4:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00054b8:	8d 42 ff             	lea    eax,[edx-0x1]
c00054bb:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00054c0:	77 04                	ja     c00054c6 <f_mkfs+0xa9>
c00054c2:	85 c2                	test   edx,eax
c00054c4:	74 08                	je     c00054ce <f_mkfs+0xb1>
c00054c6:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00054ce:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00054d1:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00054d5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00054d9:	48                   	dec    eax
c00054da:	3c 01                	cmp    al,0x1
c00054dc:	76 05                	jbe    c00054e3 <f_mkfs+0xc6>
c00054de:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c00054e3:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00054e6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00054ea:	48                   	dec    eax
c00054eb:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00054f0:	77 07                	ja     c00054f9 <f_mkfs+0xdc>
c00054f2:	f6 44 24 14 0f       	test   BYTE PTR [esp+0x14],0xf
c00054f7:	74 08                	je     c0005501 <f_mkfs+0xe4>
c00054f9:	c7 44 24 14 00 02 00 00 	mov    DWORD PTR [esp+0x14],0x200
c0005501:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0005504:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c000550a:	77 07                	ja     c0005513 <f_mkfs+0xf6>
c000550c:	8d 47 ff             	lea    eax,[edi-0x1]
c000550f:	85 f8                	test   eax,edi
c0005511:	74 02                	je     c0005515 <f_mkfs+0xf8>
c0005513:	31 ff                	xor    edi,edi
c0005515:	81 7c 24 7c ff 01 00 00 	cmp    DWORD PTR [esp+0x7c],0x1ff
c000551d:	77 0a                	ja     c0005529 <f_mkfs+0x10c>
c000551f:	be 11 00 00 00       	mov    esi,0x11
c0005524:	e9 ea 06 00 00       	jmp    c0005c13 <f_mkfs+0x7f6>
c0005529:	8b 33                	mov    esi,DWORD PTR [ebx]
c000552b:	85 ed                	test   ebp,ebp
c000552d:	89 eb                	mov    ebx,ebp
c000552f:	75 1e                	jne    c000554f <f_mkfs+0x132>
c0005531:	83 ec 0c             	sub    esp,0xc
c0005534:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c000553b:	25 00 fe ff ff       	and    eax,0xfffffe00
c0005540:	50                   	push   eax
c0005541:	e8 da 06 00 00       	call   c0005c20 <ff_memalloc>
c0005546:	83 c4 10             	add    esp,0x10
c0005549:	89 c3                	mov    ebx,eax
c000554b:	85 c0                	test   eax,eax
c000554d:	74 d0                	je     c000551f <f_mkfs+0x102>
c000554f:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0005557:	52                   	push   edx
c0005558:	8d 44 24 48          	lea    eax,[esp+0x48]
c000555c:	50                   	push   eax
c000555d:	6a 01                	push   0x1
c000555f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005563:	e8 50 c8 ff ff       	call   c0001db8 <disk_ioctl>
c0005568:	83 c4 10             	add    esp,0x10
c000556b:	85 c0                	test   eax,eax
c000556d:	0f 85 49 06 00 00    	jne    c0005bbc <f_mkfs+0x79f>
c0005573:	89 f0                	mov    eax,esi
c0005575:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000557d:	83 e0 08             	and    eax,0x8
c0005580:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0005584:	75 18                	jne    c000559e <f_mkfs+0x181>
c0005586:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000558a:	83 f8 3f             	cmp    eax,0x3f
c000558d:	76 0f                	jbe    c000559e <f_mkfs+0x181>
c000558f:	83 e8 3f             	sub    eax,0x3f
c0005592:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c000559a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000559e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055a2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00055a6:	83 f8 7f             	cmp    eax,0x7f
c00055a9:	0f 86 5b 02 00 00    	jbe    c000580a <f_mkfs+0x3ed>
c00055af:	b9 80 00 00 00       	mov    ecx,0x80
c00055b4:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c00055ba:	77 05                	ja     c00055c1 <f_mkfs+0x1a4>
c00055bc:	c1 ef 09             	shr    edi,0x9
c00055bf:	89 f9                	mov    ecx,edi
c00055c1:	89 f0                	mov    eax,esi
c00055c3:	89 f7                	mov    edi,esi
c00055c5:	83 e0 01             	and    eax,0x1
c00055c8:	83 e7 02             	and    edi,0x2
c00055cb:	0f b6 c0             	movzx  eax,al
c00055ce:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c00055d2:	74 0a                	je     c00055de <f_mkfs+0x1c1>
c00055d4:	85 c0                	test   eax,eax
c00055d6:	0f 84 4f 01 00 00    	je     c000572b <f_mkfs+0x30e>
c00055dc:	eb 37                	jmp    c0005615 <f_mkfs+0x1f8>
c00055de:	be 13 00 00 00       	mov    esi,0x13
c00055e3:	85 c0                	test   eax,eax
c00055e5:	75 2e                	jne    c0005615 <f_mkfs+0x1f8>
c00055e7:	e9 e7 05 00 00       	jmp    c0005bd3 <f_mkfs+0x7b6>
c00055ec:	83 f8 02             	cmp    eax,0x2
c00055ef:	0f 85 0d 02 00 00    	jne    c0005802 <f_mkfs+0x3e5>
c00055f5:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c00055fb:	0f 86 e4 01 00 00    	jbe    c00057e5 <f_mkfs+0x3c8>
c0005601:	85 c9                	test   ecx,ecx
c0005603:	0f 85 dc 05 00 00    	jne    c0005be5 <f_mkfs+0x7c8>
c0005609:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c000560c:	83 f9 40             	cmp    ecx,0x40
c000560f:	0f 87 e0 05 00 00    	ja     c0005bf5 <f_mkfs+0x7d8>
c0005615:	89 cf                	mov    edi,ecx
c0005617:	85 c9                	test   ecx,ecx
c0005619:	75 1c                	jne    c0005637 <f_mkfs+0x21a>
c000561b:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000561f:	b8 80 06 02 c0       	mov    eax,0xc0020680
c0005624:	c1 ee 0c             	shr    esi,0xc
c0005627:	bf 01 00 00 00       	mov    edi,0x1
c000562c:	0f b7 10             	movzx  edx,WORD PTR [eax]
c000562f:	85 d2                	test   edx,edx
c0005631:	0f 85 63 01 00 00    	jne    c000579a <f_mkfs+0x37d>
c0005637:	31 d2                	xor    edx,edx
c0005639:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000563d:	f7 f7                	div    edi
c000563f:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005644:	0f 86 62 01 00 00    	jbe    c00057ac <f_mkfs+0x38f>
c000564a:	83 c0 02             	add    eax,0x2
c000564d:	c6 44 24 0b 02       	mov    BYTE PTR [esp+0xb],0x2
c0005652:	01 c0                	add    eax,eax
c0005654:	05 ff 01 00 00       	add    eax,0x1ff
c0005659:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0005661:	c1 e8 09             	shr    eax,0x9
c0005664:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005668:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000566c:	c1 e0 05             	shl    eax,0x5
c000566f:	c1 e8 09             	shr    eax,0x9
c0005672:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0005676:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c000567b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000567f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005683:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c0005687:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000568b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000568f:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c0005694:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0005698:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c000569c:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00056a0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00056a4:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00056a8:	8d 74 10 ff          	lea    esi,[eax+edx*1-0x1]
c00056ac:	f7 d8                	neg    eax
c00056ae:	21 c6                	and    esi,eax
c00056b0:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00056b5:	29 d6                	sub    esi,edx
c00056b7:	83 f8 03             	cmp    eax,0x3
c00056ba:	0f 85 ff 00 00 00    	jne    c00057bf <f_mkfs+0x3a2>
c00056c0:	01 74 24 24          	add    DWORD PTR [esp+0x24],esi
c00056c4:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c00056c8:	89 f8                	mov    eax,edi
c00056ca:	c1 e0 04             	shl    eax,0x4
c00056cd:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c00056d1:	03 44 24 34          	add    eax,DWORD PTR [esp+0x34]
c00056d5:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c00056d9:	0f 82 2b 01 00 00    	jb     c000580a <f_mkfs+0x3ed>
c00056df:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00056e3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00056e7:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c00056eb:	0f af 54 24 28       	imul   edx,DWORD PTR [esp+0x28]
c00056f0:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c00056f4:	29 d0                	sub    eax,edx
c00056f6:	31 d2                	xor    edx,edx
c00056f8:	f7 f7                	div    edi
c00056fa:	89 c6                	mov    esi,eax
c00056fc:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005701:	83 f8 03             	cmp    eax,0x3
c0005704:	0f 85 e2 fe ff ff    	jne    c00055ec <f_mkfs+0x1cf>
c000570a:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005710:	0f 87 03 01 00 00    	ja     c0005819 <f_mkfs+0x3fc>
c0005716:	85 c9                	test   ecx,ecx
c0005718:	0f 85 ec 00 00 00    	jne    c000580a <f_mkfs+0x3ed>
c000571e:	83 ff 01             	cmp    edi,0x1
c0005721:	0f 86 e3 00 00 00    	jbe    c000580a <f_mkfs+0x3ed>
c0005727:	d1 ef                	shr    edi,1
c0005729:	89 f9                	mov    ecx,edi
c000572b:	89 ce                	mov    esi,ecx
c000572d:	85 c9                	test   ecx,ecx
c000572f:	75 25                	jne    c0005756 <f_mkfs+0x339>
c0005731:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005735:	b8 90 06 02 c0       	mov    eax,0xc0020690
c000573a:	c1 ee 11             	shr    esi,0x11
c000573d:	b9 01 00 00 00       	mov    ecx,0x1
c0005742:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0005745:	85 d2                	test   edx,edx
c0005747:	74 0b                	je     c0005754 <f_mkfs+0x337>
c0005749:	83 c0 02             	add    eax,0x2
c000574c:	39 f2                	cmp    edx,esi
c000574e:	77 04                	ja     c0005754 <f_mkfs+0x337>
c0005750:	01 c9                	add    ecx,ecx
c0005752:	eb ee                	jmp    c0005742 <f_mkfs+0x325>
c0005754:	31 f6                	xor    esi,esi
c0005756:	31 d2                	xor    edx,edx
c0005758:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000575c:	f7 f1                	div    ecx
c000575e:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0005765:	2d f6 ff 00 00       	sub    eax,0xfff6
c000576a:	c1 ea 09             	shr    edx,0x9
c000576d:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0005772:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0005776:	0f 87 8e 00 00 00    	ja     c000580a <f_mkfs+0x3ed>
c000577c:	89 cf                	mov    edi,ecx
c000577e:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c0005786:	89 f1                	mov    ecx,esi
c0005788:	c7 44 24 24 20 00 00 00 	mov    DWORD PTR [esp+0x24],0x20
c0005790:	c6 44 24 0b 03       	mov    BYTE PTR [esp+0xb],0x3
c0005795:	e9 dc fe ff ff       	jmp    c0005676 <f_mkfs+0x259>
c000579a:	83 c0 02             	add    eax,0x2
c000579d:	39 f2                	cmp    edx,esi
c000579f:	0f 87 92 fe ff ff    	ja     c0005637 <f_mkfs+0x21a>
c00057a5:	01 ff                	add    edi,edi
c00057a7:	e9 80 fe ff ff       	jmp    c000562c <f_mkfs+0x20f>
c00057ac:	8d 04 40             	lea    eax,[eax+eax*2]
c00057af:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c00057b4:	40                   	inc    eax
c00057b5:	d1 e8                	shr    eax,1
c00057b7:	83 c0 03             	add    eax,0x3
c00057ba:	e9 95 fe ff ff       	jmp    c0005654 <f_mkfs+0x237>
c00057bf:	31 d2                	xor    edx,edx
c00057c1:	89 f0                	mov    eax,esi
c00057c3:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00057c7:	85 d2                	test   edx,edx
c00057c9:	74 09                	je     c00057d4 <f_mkfs+0x3b7>
c00057cb:	4e                   	dec    esi
c00057cc:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c00057d0:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c00057d4:	89 f0                	mov    eax,esi
c00057d6:	31 d2                	xor    edx,edx
c00057d8:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00057dc:	01 44 24 18          	add    DWORD PTR [esp+0x18],eax
c00057e0:	e9 e3 fe ff ff       	jmp    c00056c8 <f_mkfs+0x2ab>
c00057e5:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c00057eb:	77 2c                	ja     c0005819 <f_mkfs+0x3fc>
c00057ed:	85 c9                	test   ecx,ecx
c00057ef:	75 19                	jne    c000580a <f_mkfs+0x3ed>
c00057f1:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c00057f4:	81 f9 80 00 00 00    	cmp    ecx,0x80
c00057fa:	0f 86 15 fe ff ff    	jbe    c0005615 <f_mkfs+0x1f8>
c0005800:	eb 08                	jmp    c000580a <f_mkfs+0x3ed>
c0005802:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c0005808:	76 0a                	jbe    c0005814 <f_mkfs+0x3f7>
c000580a:	be 0e 00 00 00       	mov    esi,0xe
c000580f:	e9 bf 03 00 00       	jmp    c0005bd3 <f_mkfs+0x7b6>
c0005814:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c0005819:	31 d2                	xor    edx,edx
c000581b:	b9 00 02 00 00       	mov    ecx,0x200
c0005820:	89 d8                	mov    eax,ebx
c0005822:	e8 f1 c5 ff ff       	call   c0001e18 <mem_set>
c0005827:	b9 0b 00 00 00       	mov    ecx,0xb
c000582c:	ba 32 06 02 c0       	mov    edx,0xc0020632
c0005831:	89 d8                	mov    eax,ebx
c0005833:	e8 cb c5 ff ff       	call   c0001e03 <mem_cpy>
c0005838:	8d 43 0b             	lea    eax,[ebx+0xb]
c000583b:	ba 00 02 00 00       	mov    edx,0x200
c0005840:	e8 b7 c5 ff ff       	call   c0001dfc <st_word>
c0005845:	89 f8                	mov    eax,edi
c0005847:	0f b7 54 24 24       	movzx  edx,WORD PTR [esp+0x24]
c000584c:	88 43 0d             	mov    BYTE PTR [ebx+0xd],al
c000584f:	8d 43 0e             	lea    eax,[ebx+0xe]
c0005852:	e8 a5 c5 ff ff       	call   c0001dfc <st_word>
c0005857:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c000585b:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000585e:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005863:	83 f8 03             	cmp    eax,0x3
c0005866:	75 08                	jne    c0005870 <f_mkfs+0x453>
c0005868:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005870:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005874:	8d 43 11             	lea    eax,[ebx+0x11]
c0005877:	e8 80 c5 ff ff       	call   c0001dfc <st_word>
c000587c:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0005880:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0005886:	77 0a                	ja     c0005892 <f_mkfs+0x475>
c0005888:	8d 43 13             	lea    eax,[ebx+0x13]
c000588b:	e8 6c c5 ff ff       	call   c0001dfc <st_word>
c0005890:	eb 08                	jmp    c000589a <f_mkfs+0x47d>
c0005892:	8d 43 20             	lea    eax,[ebx+0x20]
c0005895:	e8 66 c5 ff ff       	call   c0001e00 <st_dword>
c000589a:	8d 43 18             	lea    eax,[ebx+0x18]
c000589d:	ba 3f 00 00 00       	mov    edx,0x3f
c00058a2:	c6 43 15 f8          	mov    BYTE PTR [ebx+0x15],0xf8
c00058a6:	e8 51 c5 ff ff       	call   c0001dfc <st_word>
c00058ab:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00058ae:	ba ff 00 00 00       	mov    edx,0xff
c00058b3:	e8 44 c5 ff ff       	call   c0001dfc <st_word>
c00058b8:	8d 43 1c             	lea    eax,[ebx+0x1c]
c00058bb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00058bf:	e8 3c c5 ff ff       	call   c0001e00 <st_dword>
c00058c4:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00058c9:	83 f8 03             	cmp    eax,0x3
c00058cc:	75 57                	jne    c0005925 <f_mkfs+0x508>
c00058ce:	8d 43 43             	lea    eax,[ebx+0x43]
c00058d1:	ba 00 00 21 50       	mov    edx,0x50210000
c00058d6:	e8 25 c5 ff ff       	call   c0001e00 <st_dword>
c00058db:	8d 43 24             	lea    eax,[ebx+0x24]
c00058de:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00058e2:	e8 19 c5 ff ff       	call   c0001e00 <st_dword>
c00058e7:	8d 43 2c             	lea    eax,[ebx+0x2c]
c00058ea:	ba 02 00 00 00       	mov    edx,0x2
c00058ef:	e8 0c c5 ff ff       	call   c0001e00 <st_dword>
c00058f4:	8d 43 30             	lea    eax,[ebx+0x30]
c00058f7:	ba 01 00 00 00       	mov    edx,0x1
c00058fc:	e8 fb c4 ff ff       	call   c0001dfc <st_word>
c0005901:	8d 43 32             	lea    eax,[ebx+0x32]
c0005904:	ba 06 00 00 00       	mov    edx,0x6
c0005909:	e8 ee c4 ff ff       	call   c0001dfc <st_word>
c000590e:	c6 43 40 80          	mov    BYTE PTR [ebx+0x40],0x80
c0005912:	c6 43 42 29          	mov    BYTE PTR [ebx+0x42],0x29
c0005916:	8d 43 47             	lea    eax,[ebx+0x47]
c0005919:	b9 13 00 00 00       	mov    ecx,0x13
c000591e:	ba 3e 06 02 c0       	mov    edx,0xc002063e
c0005923:	eb 2f                	jmp    c0005954 <f_mkfs+0x537>
c0005925:	8d 43 27             	lea    eax,[ebx+0x27]
c0005928:	ba 00 00 21 50       	mov    edx,0x50210000
c000592d:	e8 ce c4 ff ff       	call   c0001e00 <st_dword>
c0005932:	0f b7 54 24 18       	movzx  edx,WORD PTR [esp+0x18]
c0005937:	8d 43 16             	lea    eax,[ebx+0x16]
c000593a:	e8 bd c4 ff ff       	call   c0001dfc <st_word>
c000593f:	c6 43 24 80          	mov    BYTE PTR [ebx+0x24],0x80
c0005943:	c6 43 26 29          	mov    BYTE PTR [ebx+0x26],0x29
c0005947:	8d 43 2b             	lea    eax,[ebx+0x2b]
c000594a:	b9 13 00 00 00       	mov    ecx,0x13
c000594f:	ba 52 06 02 c0       	mov    edx,0xc0020652
c0005954:	e8 aa c4 ff ff       	call   c0001e03 <mem_cpy>
c0005959:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c000595f:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005964:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005968:	e8 8f c4 ff ff       	call   c0001dfc <st_word>
c000596d:	6a 01                	push   0x1
c000596f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005973:	53                   	push   ebx
c0005974:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005978:	e8 25 c4 ff ff       	call   c0001da2 <disk_write>
c000597d:	83 c4 10             	add    esp,0x10
c0005980:	85 c0                	test   eax,eax
c0005982:	0f 85 34 02 00 00    	jne    c0005bbc <f_mkfs+0x79f>
c0005988:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c000598d:	83 f8 03             	cmp    eax,0x3
c0005990:	0f 85 98 00 00 00    	jne    c0005a2e <f_mkfs+0x611>
c0005996:	6a 01                	push   0x1
c0005998:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000599c:	83 c0 06             	add    eax,0x6
c000599f:	50                   	push   eax
c00059a0:	53                   	push   ebx
c00059a1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00059a5:	e8 f8 c3 ff ff       	call   c0001da2 <disk_write>
c00059aa:	b9 00 02 00 00       	mov    ecx,0x200
c00059af:	31 d2                	xor    edx,edx
c00059b1:	89 d8                	mov    eax,ebx
c00059b3:	e8 60 c4 ff ff       	call   c0001e18 <mem_set>
c00059b8:	ba 52 52 61 41       	mov    edx,0x41615252
c00059bd:	89 d8                	mov    eax,ebx
c00059bf:	e8 3c c4 ff ff       	call   c0001e00 <st_dword>
c00059c4:	8d 83 e4 01 00 00    	lea    eax,[ebx+0x1e4]
c00059ca:	ba 72 72 41 61       	mov    edx,0x61417272
c00059cf:	e8 2c c4 ff ff       	call   c0001e00 <st_dword>
c00059d4:	8d 56 ff             	lea    edx,[esi-0x1]
c00059d7:	8d 83 e8 01 00 00    	lea    eax,[ebx+0x1e8]
c00059dd:	e8 1e c4 ff ff       	call   c0001e00 <st_dword>
c00059e2:	8d 83 ec 01 00 00    	lea    eax,[ebx+0x1ec]
c00059e8:	ba 02 00 00 00       	mov    edx,0x2
c00059ed:	e8 0e c4 ff ff       	call   c0001e00 <st_dword>
c00059f2:	ba 55 aa 00 00       	mov    edx,0xaa55
c00059f7:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c00059fd:	e8 fa c3 ff ff       	call   c0001dfc <st_word>
c0005a02:	6a 01                	push   0x1
c0005a04:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005a08:	83 c0 07             	add    eax,0x7
c0005a0b:	50                   	push   eax
c0005a0c:	53                   	push   ebx
c0005a0d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0005a11:	e8 8c c3 ff ff       	call   c0001da2 <disk_write>
c0005a16:	83 c4 20             	add    esp,0x20
c0005a19:	6a 01                	push   0x1
c0005a1b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005a1f:	40                   	inc    eax
c0005a20:	50                   	push   eax
c0005a21:	53                   	push   ebx
c0005a22:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005a26:	e8 77 c3 ff ff       	call   c0001da2 <disk_write>
c0005a2b:	83 c4 10             	add    esp,0x10
c0005a2e:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0005a32:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0005a36:	c1 e8 09             	shr    eax,0x9
c0005a39:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0005a3f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005a43:	31 d2                	xor    edx,edx
c0005a45:	89 d8                	mov    eax,ebx
c0005a47:	e8 cc c3 ff ff       	call   c0001e18 <mem_set>
c0005a4c:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005a51:	31 c9                	xor    ecx,ecx
c0005a53:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0005a5b:	83 f8 01             	cmp    eax,0x1
c0005a5e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005a62:	0f 94 c1             	sete   cl
c0005a65:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0005a69:	ff 4c 24 14          	dec    DWORD PTR [esp+0x14]
c0005a6d:	81 64 24 14 00 00 00 ff 	and    DWORD PTR [esp+0x14],0xff000000
c0005a75:	81 44 24 14 f8 ff ff 00 	add    DWORD PTR [esp+0x14],0xfffff8
c0005a7d:	83 7c 24 2c 03       	cmp    DWORD PTR [esp+0x2c],0x3
c0005a82:	75 21                	jne    c0005aa5 <f_mkfs+0x688>
c0005a84:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005a89:	89 d8                	mov    eax,ebx
c0005a8b:	e8 70 c3 ff ff       	call   c0001e00 <st_dword>
c0005a90:	8d 43 04             	lea    eax,[ebx+0x4]
c0005a93:	83 ca ff             	or     edx,0xffffffff
c0005a96:	e8 65 c3 ff ff       	call   c0001e00 <st_dword>
c0005a9b:	8d 43 08             	lea    eax,[ebx+0x8]
c0005a9e:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0005aa3:	eb 06                	jmp    c0005aab <f_mkfs+0x68e>
c0005aa5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005aa9:	89 d8                	mov    eax,ebx
c0005aab:	e8 50 c3 ff ff       	call   c0001e00 <st_dword>
c0005ab0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005ab4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0005ab8:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005abc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005ac0:	39 ce                	cmp    esi,ecx
c0005ac2:	76 02                	jbe    c0005ac6 <f_mkfs+0x6a9>
c0005ac4:	89 ce                	mov    esi,ecx
c0005ac6:	56                   	push   esi
c0005ac7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005acb:	53                   	push   ebx
c0005acc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005ad0:	e8 cd c2 ff ff       	call   c0001da2 <disk_write>
c0005ad5:	83 c4 10             	add    esp,0x10
c0005ad8:	85 c0                	test   eax,eax
c0005ada:	0f 85 dc 00 00 00    	jne    c0005bbc <f_mkfs+0x79f>
c0005ae0:	31 d2                	xor    edx,edx
c0005ae2:	b9 00 02 00 00       	mov    ecx,0x200
c0005ae7:	89 d8                	mov    eax,ebx
c0005ae9:	e8 2a c3 ff ff       	call   c0001e18 <mem_set>
c0005aee:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005af2:	29 74 24 1c          	sub    DWORD PTR [esp+0x1c],esi
c0005af6:	75 c0                	jne    c0005ab8 <f_mkfs+0x69b>
c0005af8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005afc:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0005b04:	40                   	inc    eax
c0005b05:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c0005b09:	0f 87 6e ff ff ff    	ja     c0005a7d <f_mkfs+0x660>
c0005b0f:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b14:	83 f8 03             	cmp    eax,0x3
c0005b17:	74 04                	je     c0005b1d <f_mkfs+0x700>
c0005b19:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0005b1d:	89 fe                	mov    esi,edi
c0005b1f:	3b 7c 24 10          	cmp    edi,DWORD PTR [esp+0x10]
c0005b23:	76 04                	jbe    c0005b29 <f_mkfs+0x70c>
c0005b25:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005b29:	56                   	push   esi
c0005b2a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005b2e:	53                   	push   ebx
c0005b2f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b33:	e8 6a c2 ff ff       	call   c0001da2 <disk_write>
c0005b38:	83 c4 10             	add    esp,0x10
c0005b3b:	85 c0                	test   eax,eax
c0005b3d:	75 7d                	jne    c0005bbc <f_mkfs+0x79f>
c0005b3f:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005b43:	29 f7                	sub    edi,esi
c0005b45:	75 d6                	jne    c0005b1d <f_mkfs+0x700>
c0005b47:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b4c:	b9 0c 00 00 00       	mov    ecx,0xc
c0005b51:	83 f8 03             	cmp    eax,0x3
c0005b54:	74 1e                	je     c0005b74 <f_mkfs+0x757>
c0005b56:	b9 06 00 00 00       	mov    ecx,0x6
c0005b5b:	81 7c 24 44 ff ff 00 00 	cmp    DWORD PTR [esp+0x44],0xffff
c0005b63:	77 0f                	ja     c0005b74 <f_mkfs+0x757>
c0005b65:	b9 04 00 00 00       	mov    ecx,0x4
c0005b6a:	83 f8 02             	cmp    eax,0x2
c0005b6d:	74 05                	je     c0005b74 <f_mkfs+0x757>
c0005b6f:	b9 01 00 00 00       	mov    ecx,0x1
c0005b74:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c0005b79:	75 2a                	jne    c0005ba5 <f_mkfs+0x788>
c0005b7b:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005b7f:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0005b87:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005b8b:	83 ec 0c             	sub    esp,0xc
c0005b8e:	53                   	push   ebx
c0005b8f:	8d 54 24 58          	lea    edx,[esp+0x58]
c0005b93:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005b97:	e8 89 d2 ff ff       	call   c0002e25 <create_partition>
c0005b9c:	83 c4 10             	add    esp,0x10
c0005b9f:	89 c6                	mov    esi,eax
c0005ba1:	85 c0                	test   eax,eax
c0005ba3:	75 2e                	jne    c0005bd3 <f_mkfs+0x7b6>
c0005ba5:	31 f6                	xor    esi,esi
c0005ba7:	50                   	push   eax
c0005ba8:	6a 00                	push   0x0
c0005baa:	6a 00                	push   0x0
c0005bac:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005bb0:	e8 03 c2 ff ff       	call   c0001db8 <disk_ioctl>
c0005bb5:	83 c4 10             	add    esp,0x10
c0005bb8:	85 c0                	test   eax,eax
c0005bba:	74 17                	je     c0005bd3 <f_mkfs+0x7b6>
c0005bbc:	85 ed                	test   ebp,ebp
c0005bbe:	75 0c                	jne    c0005bcc <f_mkfs+0x7af>
c0005bc0:	83 ec 0c             	sub    esp,0xc
c0005bc3:	53                   	push   ebx
c0005bc4:	e8 6f 00 00 00       	call   c0005c38 <ff_memfree>
c0005bc9:	83 c4 10             	add    esp,0x10
c0005bcc:	be 01 00 00 00       	mov    esi,0x1
c0005bd1:	eb 40                	jmp    c0005c13 <f_mkfs+0x7f6>
c0005bd3:	85 ed                	test   ebp,ebp
c0005bd5:	75 3c                	jne    c0005c13 <f_mkfs+0x7f6>
c0005bd7:	83 ec 0c             	sub    esp,0xc
c0005bda:	53                   	push   ebx
c0005bdb:	e8 58 00 00 00       	call   c0005c38 <ff_memfree>
c0005be0:	83 c4 10             	add    esp,0x10
c0005be3:	eb 2e                	jmp    c0005c13 <f_mkfs+0x7f6>
c0005be5:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005bea:	0f 85 3b fb ff ff    	jne    c000572b <f_mkfs+0x30e>
c0005bf0:	e9 15 fc ff ff       	jmp    c000580a <f_mkfs+0x3ed>
c0005bf5:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005bfa:	0f 85 31 fb ff ff    	jne    c0005731 <f_mkfs+0x314>
c0005c00:	89 cf                	mov    edi,ecx
c0005c02:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005c08:	0f 86 29 fa ff ff    	jbe    c0005637 <f_mkfs+0x21a>
c0005c0e:	e9 f7 fb ff ff       	jmp    c000580a <f_mkfs+0x3ed>
c0005c13:	83 c4 5c             	add    esp,0x5c
c0005c16:	89 f0                	mov    eax,esi
c0005c18:	5b                   	pop    ebx
c0005c19:	5e                   	pop    esi
c0005c1a:	5f                   	pop    edi
c0005c1b:	5d                   	pop    ebp
c0005c1c:	c3                   	ret    
c0005c1d:	66 90                	xchg   ax,ax
c0005c1f:	90                   	nop

c0005c20 <ff_memalloc>:
c0005c20:	83 ec 0c             	sub    esp,0xc
c0005c23:	83 ec 0c             	sub    esp,0xc
c0005c26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c2a:	e8 b7 1e 00 00       	call   c0007ae6 <malloc>
c0005c2f:	83 c4 10             	add    esp,0x10
c0005c32:	83 c4 0c             	add    esp,0xc
c0005c35:	c3                   	ret    
c0005c36:	66 90                	xchg   ax,ax

c0005c38 <ff_memfree>:
c0005c38:	83 ec 0c             	sub    esp,0xc
c0005c3b:	83 ec 0c             	sub    esp,0xc
c0005c3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c42:	e8 af 1e 00 00       	call   c0007af6 <free>
c0005c47:	83 c4 10             	add    esp,0x10
c0005c4a:	90                   	nop
c0005c4b:	83 c4 0c             	add    esp,0xc
c0005c4e:	c3                   	ret    
c0005c4f:	90                   	nop

c0005c50 <ff_uni2oem>:
c0005c50:	83 ec 14             	sub    esp,0x14
c0005c53:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005c57:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005c5b:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005c62:	c7 44 24 0c 80 0a 02 c0 	mov    DWORD PTR [esp+0xc],0xc0020a80
c0005c6a:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005c6f:	77 0b                	ja     c0005c7c <ff_uni2oem+0x2c>
c0005c71:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005c75:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005c7a:	eb 68                	jmp    c0005ce4 <ff_uni2oem+0x94>
c0005c7c:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005c84:	77 5e                	ja     c0005ce4 <ff_uni2oem+0x94>
c0005c86:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005c8a:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005c8f:	75 53                	jne    c0005ce4 <ff_uni2oem+0x94>
c0005c91:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005c98:	eb 12                	jmp    c0005cac <ff_uni2oem+0x5c>
c0005c9a:	66 90                	xchg   ax,ax
c0005c9c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ca1:	83 c0 01             	add    eax,0x1
c0005ca4:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ca9:	8d 76 00             	lea    esi,[esi+0x0]
c0005cac:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005cb1:	83 f8 7f             	cmp    eax,0x7f
c0005cb4:	77 1e                	ja     c0005cd4 <ff_uni2oem+0x84>
c0005cb6:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005cbb:	01 c0                	add    eax,eax
c0005cbd:	89 c2                	mov    edx,eax
c0005cbf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005cc3:	01 d0                	add    eax,edx
c0005cc5:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005cc8:	0f b7 c0             	movzx  eax,ax
c0005ccb:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005ccf:	75 cb                	jne    c0005c9c <ff_uni2oem+0x4c>
c0005cd1:	8d 76 00             	lea    esi,[esi+0x0]
c0005cd4:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005cd9:	83 e8 80             	sub    eax,0xffffff80
c0005cdc:	0f b6 c0             	movzx  eax,al
c0005cdf:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ce4:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ce9:	83 c4 14             	add    esp,0x14
c0005cec:	c3                   	ret    
c0005ced:	8d 76 00             	lea    esi,[esi+0x0]

c0005cf0 <ff_oem2uni>:
c0005cf0:	83 ec 18             	sub    esp,0x18
c0005cf3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005cf7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005cfb:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005d00:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005d04:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005d0b:	c7 44 24 10 80 0a 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020a80
c0005d13:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d18:	83 f8 7f             	cmp    eax,0x7f
c0005d1b:	77 0b                	ja     c0005d28 <ff_oem2uni+0x38>
c0005d1d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005d21:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005d26:	eb 34                	jmp    c0005d5c <ff_oem2uni+0x6c>
c0005d28:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005d2c:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005d31:	75 29                	jne    c0005d5c <ff_oem2uni+0x6c>
c0005d33:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d38:	3d ff 00 00 00       	cmp    eax,0xff
c0005d3d:	77 1d                	ja     c0005d5c <ff_oem2uni+0x6c>
c0005d3f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d44:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005d49:	01 c0                	add    eax,eax
c0005d4b:	89 c2                	mov    edx,eax
c0005d4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005d51:	01 d0                	add    eax,edx
c0005d53:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005d56:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005d5b:	90                   	nop
c0005d5c:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005d61:	83 c4 18             	add    esp,0x18
c0005d64:	c3                   	ret    
c0005d65:	8d 76 00             	lea    esi,[esi+0x0]

c0005d68 <ff_wtoupper>:
c0005d68:	83 ec 10             	sub    esp,0x10
c0005d6b:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005d73:	0f 87 ab 01 00 00    	ja     c0005f24 <ff_wtoupper+0x1bc>
c0005d79:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005d7d:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005d82:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005d87:	3d ff 0f 00 00       	cmp    eax,0xfff
c0005d8c:	77 0a                	ja     c0005d98 <ff_wtoupper+0x30>
c0005d8e:	b8 80 08 02 c0       	mov    eax,0xc0020880
c0005d93:	eb 0b                	jmp    c0005da0 <ff_wtoupper+0x38>
c0005d95:	8d 76 00             	lea    esi,[esi+0x0]
c0005d98:	b8 c0 07 02 c0       	mov    eax,0xc00207c0
c0005d9d:	8d 76 00             	lea    esi,[esi+0x0]
c0005da0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005da4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005da8:	8d 50 02             	lea    edx,[eax+0x2]
c0005dab:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005daf:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005db2:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005db7:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005dbc:	85 c0                	test   eax,eax
c0005dbe:	0f 84 54 01 00 00    	je     c0005f18 <ff_wtoupper+0x1b0>
c0005dc4:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005dc9:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005dce:	39 c2                	cmp    edx,eax
c0005dd0:	0f 82 42 01 00 00    	jb     c0005f18 <ff_wtoupper+0x1b0>
c0005dd6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005dda:	8d 50 02             	lea    edx,[eax+0x2]
c0005ddd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005de1:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005de4:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005de9:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005dee:	c1 e8 08             	shr    eax,0x8
c0005df1:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005df6:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005dfb:	0f b6 c0             	movzx  eax,al
c0005dfe:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005e03:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005e08:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0005e0d:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0005e12:	01 ca                	add    edx,ecx
c0005e14:	39 d0                	cmp    eax,edx
c0005e16:	0f 8d d8 00 00 00    	jge    c0005ef4 <ff_wtoupper+0x18c>
c0005e1c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005e21:	83 f8 08             	cmp    eax,0x8
c0005e24:	0f 87 ea 00 00 00    	ja     c0005f14 <ff_wtoupper+0x1ac>
c0005e2a:	8b 04 85 80 07 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdf880]
c0005e31:	ff e0                	jmp    eax
c0005e33:	90                   	nop
c0005e34:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005e39:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005e3e:	29 c2                	sub    edx,eax
c0005e40:	89 d0                	mov    eax,edx
c0005e42:	01 c0                	add    eax,eax
c0005e44:	89 c2                	mov    edx,eax
c0005e46:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e4a:	01 d0                	add    eax,edx
c0005e4c:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005e4f:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e54:	e9 97 00 00 00       	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005e59:	8d 76 00             	lea    esi,[esi+0x0]
c0005e5c:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0005e61:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005e65:	89 d1                	mov    ecx,edx
c0005e67:	29 c1                	sub    ecx,eax
c0005e69:	89 c8                	mov    eax,ecx
c0005e6b:	83 e0 01             	and    eax,0x1
c0005e6e:	89 c2                	mov    edx,eax
c0005e70:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005e75:	29 d0                	sub    eax,edx
c0005e77:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e7c:	eb 72                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005e7e:	66 90                	xchg   ax,ax
c0005e80:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005e85:	83 e8 10             	sub    eax,0x10
c0005e88:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e8d:	eb 61                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005e8f:	90                   	nop
c0005e90:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005e95:	83 e8 20             	sub    eax,0x20
c0005e98:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e9d:	eb 51                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005e9f:	90                   	nop
c0005ea0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ea5:	83 e8 30             	sub    eax,0x30
c0005ea8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ead:	eb 41                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005eaf:	90                   	nop
c0005eb0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005eb5:	83 e8 1a             	sub    eax,0x1a
c0005eb8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ebd:	eb 31                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005ebf:	90                   	nop
c0005ec0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ec5:	83 c0 08             	add    eax,0x8
c0005ec8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ecd:	eb 21                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005ecf:	90                   	nop
c0005ed0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ed5:	83 e8 50             	sub    eax,0x50
c0005ed8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005edd:	eb 11                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005edf:	90                   	nop
c0005ee0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ee5:	2d 60 1c 00 00       	sub    eax,0x1c60
c0005eea:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005eef:	90                   	nop
c0005ef0:	eb 22                	jmp    c0005f14 <ff_wtoupper+0x1ac>
c0005ef2:	66 90                	xchg   ax,ax
c0005ef4:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005ef9:	85 c0                	test   eax,eax
c0005efb:	0f 85 a3 fe ff ff    	jne    c0005da4 <ff_wtoupper+0x3c>
c0005f01:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005f06:	01 c0                	add    eax,eax
c0005f08:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0005f0c:	e9 93 fe ff ff       	jmp    c0005da4 <ff_wtoupper+0x3c>
c0005f11:	8d 76 00             	lea    esi,[esi+0x0]
c0005f14:	90                   	nop
c0005f15:	8d 76 00             	lea    esi,[esi+0x0]
c0005f18:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005f1d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005f21:	8d 76 00             	lea    esi,[esi+0x0]
c0005f24:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005f28:	83 c4 10             	add    esp,0x10
c0005f2b:	c3                   	ret    

c0005f2c <utf2ucs>:
c0005f2c:	57                   	push   edi
c0005f2d:	31 c9                	xor    ecx,ecx
c0005f2f:	56                   	push   esi
c0005f30:	89 d7                	mov    edi,edx
c0005f32:	53                   	push   ebx
c0005f33:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c0005f37:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0005f3b:	89 de                	mov    esi,ebx
c0005f3d:	c1 fe 08             	sar    esi,0x8
c0005f40:	89 f2                	mov    edx,esi
c0005f42:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c0005f45:	41                   	inc    ecx
c0005f46:	85 db                	test   ebx,ebx
c0005f48:	75 e9                	jne    c0005f33 <utf2ucs+0x7>
c0005f4a:	5b                   	pop    ebx
c0005f4b:	5e                   	pop    esi
c0005f4c:	5f                   	pop    edi
c0005f4d:	c3                   	ret    

c0005f4e <ucs2utfn>:
c0005f4e:	83 e1 fe             	and    ecx,0xfffffffe
c0005f51:	01 d1                	add    ecx,edx
c0005f53:	39 d1                	cmp    ecx,edx
c0005f55:	75 04                	jne    c0005f5b <ucs2utfn+0xd>
c0005f57:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005f5a:	c3                   	ret    
c0005f5b:	57                   	push   edi
c0005f5c:	56                   	push   esi
c0005f5d:	53                   	push   ebx
c0005f5e:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c0005f61:	83 c2 02             	add    edx,0x2
c0005f64:	89 de                	mov    esi,ebx
c0005f66:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c0005f6a:	c1 e6 08             	shl    esi,0x8
c0005f6d:	09 f3                	or     ebx,esi
c0005f6f:	83 fb 3b             	cmp    ebx,0x3b
c0005f72:	74 50                	je     c0005fc4 <ucs2utfn+0x76>
c0005f74:	83 fb 7f             	cmp    ebx,0x7f
c0005f77:	7f 05                	jg     c0005f7e <ucs2utfn+0x30>
c0005f79:	88 18                	mov    BYTE PTR [eax],bl
c0005f7b:	40                   	inc    eax
c0005f7c:	eb 42                	jmp    c0005fc0 <ucs2utfn+0x72>
c0005f7e:	89 de                	mov    esi,ebx
c0005f80:	89 df                	mov    edi,ebx
c0005f82:	c1 fe 06             	sar    esi,0x6
c0005f85:	83 e7 3f             	and    edi,0x3f
c0005f88:	83 cf 80             	or     edi,0xffffff80
c0005f8b:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0005f91:	7f 12                	jg     c0005fa5 <ucs2utfn+0x57>
c0005f93:	83 ce c0             	or     esi,0xffffffc0
c0005f96:	83 c0 02             	add    eax,0x2
c0005f99:	89 f3                	mov    ebx,esi
c0005f9b:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005f9e:	89 fb                	mov    ebx,edi
c0005fa0:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005fa3:	eb 1b                	jmp    c0005fc0 <ucs2utfn+0x72>
c0005fa5:	c1 fb 0c             	sar    ebx,0xc
c0005fa8:	83 e6 3f             	and    esi,0x3f
c0005fab:	83 cb e0             	or     ebx,0xffffffe0
c0005fae:	83 ce 80             	or     esi,0xffffff80
c0005fb1:	88 18                	mov    BYTE PTR [eax],bl
c0005fb3:	89 f3                	mov    ebx,esi
c0005fb5:	83 c0 03             	add    eax,0x3
c0005fb8:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005fbb:	89 fb                	mov    ebx,edi
c0005fbd:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005fc0:	39 d1                	cmp    ecx,edx
c0005fc2:	75 9a                	jne    c0005f5e <ucs2utfn+0x10>
c0005fc4:	5b                   	pop    ebx
c0005fc5:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005fc8:	5e                   	pop    esi
c0005fc9:	5f                   	pop    edi
c0005fca:	c3                   	ret    

c0005fcb <isjoliet>:
c0005fcb:	31 d2                	xor    edx,edx
c0005fcd:	80 38 25             	cmp    BYTE PTR [eax],0x25
c0005fd0:	75 26                	jne    c0005ff8 <isjoliet+0x2d>
c0005fd2:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c0005fd6:	75 20                	jne    c0005ff8 <isjoliet+0x2d>
c0005fd8:	0f be 40 02          	movsx  eax,BYTE PTR [eax+0x2]
c0005fdc:	ba 02 00 00 00       	mov    edx,0x2
c0005fe1:	83 f8 43             	cmp    eax,0x43
c0005fe4:	74 12                	je     c0005ff8 <isjoliet+0x2d>
c0005fe6:	ba 03 00 00 00       	mov    edx,0x3
c0005feb:	83 f8 45             	cmp    eax,0x45
c0005fee:	74 08                	je     c0005ff8 <isjoliet+0x2d>
c0005ff0:	31 d2                	xor    edx,edx
c0005ff2:	83 f8 40             	cmp    eax,0x40
c0005ff5:	0f 94 c2             	sete   dl
c0005ff8:	89 d0                	mov    eax,edx
c0005ffa:	c3                   	ret    

c0005ffb <htohl_32>:
c0005ffb:	8b 00                	mov    eax,DWORD PTR [eax]
c0005ffd:	c3                   	ret    

c0005ffe <iso_733>:
c0005ffe:	eb fb                	jmp    c0005ffb <htohl_32>

c0006000 <bgrad_cache>:
c0006000:	83 fa 0e             	cmp    edx,0xe
c0006003:	77 16                	ja     c000601b <bgrad_cache+0x1b>
c0006005:	53                   	push   ebx
c0006006:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c0006009:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c000600d:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c0006010:	42                   	inc    edx
c0006011:	83 fa 0f             	cmp    edx,0xf
c0006014:	75 f3                	jne    c0006009 <bgrad_cache+0x9>
c0006016:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0006019:	5b                   	pop    ebx
c000601a:	c3                   	ret    
c000601b:	c3                   	ret    

c000601c <ucscompare>:
c000601c:	55                   	push   ebp
c000601d:	57                   	push   edi
c000601e:	89 c7                	mov    edi,eax
c0006020:	56                   	push   esi
c0006021:	89 d6                	mov    esi,edx
c0006023:	53                   	push   ebx
c0006024:	31 d2                	xor    edx,edx
c0006026:	83 ec 1c             	sub    esp,0x1c
c0006029:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c000602d:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c0006032:	c1 e3 08             	shl    ebx,0x8
c0006035:	09 c3                	or     ebx,eax
c0006037:	39 ca                	cmp    edx,ecx
c0006039:	7d 42                	jge    c000607d <ucscompare+0x61>
c000603b:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c000603f:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c0006044:	c1 e0 08             	shl    eax,0x8
c0006047:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000604b:	09 e8                	or     eax,ebp
c000604d:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0006051:	83 f8 3b             	cmp    eax,0x3b
c0006054:	74 27                	je     c000607d <ucscompare+0x61>
c0006056:	83 ec 0c             	sub    esp,0xc
c0006059:	50                   	push   eax
c000605a:	e8 f1 a8 ff ff       	call   c0000950 <tolower>
c000605f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006062:	89 c5                	mov    ebp,eax
c0006064:	e8 e7 a8 ff ff       	call   c0000950 <tolower>
c0006069:	83 c4 10             	add    esp,0x10
c000606c:	39 c5                	cmp    ebp,eax
c000606e:	75 20                	jne    c0006090 <ucscompare+0x74>
c0006070:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006074:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006078:	83 c2 02             	add    edx,0x2
c000607b:	eb ac                	jmp    c0006029 <ucscompare+0xd>
c000607d:	85 db                	test   ebx,ebx
c000607f:	0f 95 c2             	setne  dl
c0006082:	31 c0                	xor    eax,eax
c0006084:	83 fb 2f             	cmp    ebx,0x2f
c0006087:	0f 95 c0             	setne  al
c000608a:	21 d0                	and    eax,edx
c000608c:	f7 d8                	neg    eax
c000608e:	eb 03                	jmp    c0006093 <ucscompare+0x77>
c0006090:	83 c8 ff             	or     eax,0xffffffff
c0006093:	83 c4 1c             	add    esp,0x1c
c0006096:	5b                   	pop    ebx
c0006097:	5e                   	pop    esi
c0006098:	5f                   	pop    edi
c0006099:	5d                   	pop    ebp
c000609a:	c3                   	ret    

c000609b <fncompare>:
c000609b:	55                   	push   ebp
c000609c:	57                   	push   edi
c000609d:	89 c7                	mov    edi,eax
c000609f:	56                   	push   esi
c00060a0:	89 ce                	mov    esi,ecx
c00060a2:	53                   	push   ebx
c00060a3:	31 db                	xor    ebx,ebx
c00060a5:	83 ec 1c             	sub    esp,0x1c
c00060a8:	39 d3                	cmp    ebx,edx
c00060aa:	7d 45                	jge    c00060f1 <fncompare+0x56>
c00060ac:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c00060b0:	83 f8 3b             	cmp    eax,0x3b
c00060b3:	74 3c                	je     c00060f1 <fncompare+0x56>
c00060b5:	83 f8 2e             	cmp    eax,0x2e
c00060b8:	75 0e                	jne    c00060c8 <fncompare+0x2d>
c00060ba:	8d 4a ff             	lea    ecx,[edx-0x1]
c00060bd:	39 d9                	cmp    ecx,ebx
c00060bf:	74 30                	je     c00060f1 <fncompare+0x56>
c00060c1:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c00060c6:	74 29                	je     c00060f1 <fncompare+0x56>
c00060c8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00060cc:	83 ec 0c             	sub    esp,0xc
c00060cf:	50                   	push   eax
c00060d0:	e8 7b a8 ff ff       	call   c0000950 <tolower>
c00060d5:	89 c5                	mov    ebp,eax
c00060d7:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c00060db:	89 04 24             	mov    DWORD PTR [esp],eax
c00060de:	e8 6d a8 ff ff       	call   c0000950 <tolower>
c00060e3:	83 c4 10             	add    esp,0x10
c00060e6:	39 c5                	cmp    ebp,eax
c00060e8:	75 1e                	jne    c0006108 <fncompare+0x6d>
c00060ea:	43                   	inc    ebx
c00060eb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00060ef:	eb b7                	jmp    c00060a8 <fncompare+0xd>
c00060f1:	0f be 14 1e          	movsx  edx,BYTE PTR [esi+ebx*1]
c00060f5:	85 d2                	test   edx,edx
c00060f7:	0f 95 c1             	setne  cl
c00060fa:	31 c0                	xor    eax,eax
c00060fc:	83 fa 2f             	cmp    edx,0x2f
c00060ff:	0f 95 c0             	setne  al
c0006102:	21 c8                	and    eax,ecx
c0006104:	f7 d8                	neg    eax
c0006106:	eb 03                	jmp    c000610b <fncompare+0x70>
c0006108:	83 c8 ff             	or     eax,0xffffffff
c000610b:	83 c4 1c             	add    esp,0x1c
c000610e:	5b                   	pop    ebx
c000610f:	5e                   	pop    esi
c0006110:	5f                   	pop    edi
c0006111:	5d                   	pop    ebp
c0006112:	c3                   	ret    

c0006113 <bclear_cache>:
c0006113:	83 ec 18             	sub    esp,0x18
c0006116:	68 80 0b 02 c0       	push   0xc0020b80
c000611b:	e8 f8 43 01 00       	call   c001a518 <iso_kprintf>
c0006120:	83 c4 10             	add    esp,0x10
c0006123:	31 c0                	xor    eax,eax
c0006125:	8b 14 85 20 60 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9fe0]
c000612c:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0006132:	8b 14 85 80 60 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9f80]
c0006139:	40                   	inc    eax
c000613a:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0006140:	83 f8 10             	cmp    eax,0x10
c0006143:	75 e0                	jne    c0006125 <bclear_cache+0x12>
c0006145:	83 c4 0c             	add    esp,0xc
c0006148:	c3                   	ret    

c0006149 <bclear>:
c0006149:	eb c8                	jmp    c0006113 <bclear_cache>

c000614b <iso_break_all>:
c000614b:	83 ec 18             	sub    esp,0x18
c000614e:	68 8e 0b 02 c0       	push   0xc0020b8e
c0006153:	e8 c0 43 01 00       	call   c001a518 <iso_kprintf>
c0006158:	83 c4 10             	add    esp,0x10
c000615b:	31 c0                	xor    eax,eax
c000615d:	c7 80 d0 65 02 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffd9a30],0x1
c0006167:	05 94 00 00 00       	add    eax,0x94
c000616c:	3d 40 09 00 00       	cmp    eax,0x940
c0006171:	75 ea                	jne    c000615d <iso_break_all+0x12>
c0006173:	83 c4 0c             	add    esp,0xc
c0006176:	c3                   	ret    

c0006177 <isoReadDiscSector>:
c0006177:	83 ec 0c             	sub    esp,0xc
c000617a:	0f be 05 60 60 02 c0 	movsx  eax,BYTE PTR ds:0xc0026060
c0006181:	50                   	push   eax
c0006182:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006186:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000618a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000618e:	e8 29 43 01 00       	call   c001a4bc <isoReadDiscSectorHelper>
c0006193:	83 c4 1c             	add    esp,0x1c
c0006196:	c3                   	ret    

c0006197 <bread_cache>:
c0006197:	55                   	push   ebp
c0006198:	57                   	push   edi
c0006199:	89 d7                	mov    edi,edx
c000619b:	56                   	push   esi
c000619c:	ba 0f 00 00 00       	mov    edx,0xf
c00061a1:	53                   	push   ebx
c00061a2:	89 c6                	mov    esi,eax
c00061a4:	83 ec 0c             	sub    esp,0xc
c00061a7:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c00061aa:	39 38                	cmp    DWORD PTR [eax],edi
c00061ac:	74 3c                	je     c00061ea <bread_cache+0x53>
c00061ae:	4a                   	dec    edx
c00061af:	83 fa ff             	cmp    edx,0xffffffff
c00061b2:	75 f3                	jne    c00061a7 <bread_cache+0x10>
c00061b4:	31 db                	xor    ebx,ebx
c00061b6:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c00061b9:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c00061bc:	74 08                	je     c00061c6 <bread_cache+0x2f>
c00061be:	43                   	inc    ebx
c00061bf:	83 fb 10             	cmp    ebx,0x10
c00061c2:	75 f2                	jne    c00061b6 <bread_cache+0x1f>
c00061c4:	31 db                	xor    ebx,ebx
c00061c6:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c00061c9:	50                   	push   eax
c00061ca:	6a 01                	push   0x1
c00061cc:	57                   	push   edi
c00061cd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00061d0:	83 c0 04             	add    eax,0x4
c00061d3:	50                   	push   eax
c00061d4:	e8 9e ff ff ff       	call   c0006177 <isoReadDiscSector>
c00061d9:	83 c4 10             	add    esp,0x10
c00061dc:	83 c9 ff             	or     ecx,0xffffffff
c00061df:	85 c0                	test   eax,eax
c00061e1:	78 13                	js     c00061f6 <bread_cache+0x5f>
c00061e3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00061e6:	89 da                	mov    edx,ebx
c00061e8:	89 38                	mov    DWORD PTR [eax],edi
c00061ea:	89 f0                	mov    eax,esi
c00061ec:	e8 0f fe ff ff       	call   c0006000 <bgrad_cache>
c00061f1:	b9 0f 00 00 00       	mov    ecx,0xf
c00061f6:	83 c4 0c             	add    esp,0xc
c00061f9:	89 c8                	mov    eax,ecx
c00061fb:	5b                   	pop    ebx
c00061fc:	5e                   	pop    esi
c00061fd:	5f                   	pop    edi
c00061fe:	5d                   	pop    ebp
c00061ff:	c3                   	ret    

c0006200 <biread>:
c0006200:	89 c2                	mov    edx,eax
c0006202:	b8 80 60 02 c0       	mov    eax,0xc0026080
c0006207:	eb 8e                	jmp    c0006197 <bread_cache>

c0006209 <bdread>:
c0006209:	89 c2                	mov    edx,eax
c000620b:	b8 20 60 02 c0       	mov    eax,0xc0026020
c0006210:	eb 85                	jmp    c0006197 <bread_cache>

c0006212 <strnicmp>:
c0006212:	55                   	push   ebp
c0006213:	57                   	push   edi
c0006214:	31 ff                	xor    edi,edi
c0006216:	56                   	push   esi
c0006217:	53                   	push   ebx
c0006218:	83 ec 0c             	sub    esp,0xc
c000621b:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000621f:	3b 7c 24 28          	cmp    edi,DWORD PTR [esp+0x28]
c0006223:	74 43                	je     c0006268 <strnicmp+0x56>
c0006225:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006229:	0f be 04 38          	movsx  eax,BYTE PTR [eax+edi*1]
c000622d:	85 c0                	test   eax,eax
c000622f:	74 37                	je     c0006268 <strnicmp+0x56>
c0006231:	0f be 14 3e          	movsx  edx,BYTE PTR [esi+edi*1]
c0006235:	85 d2                	test   edx,edx
c0006237:	74 2f                	je     c0006268 <strnicmp+0x56>
c0006239:	39 d0                	cmp    eax,edx
c000623b:	8d 6f 01             	lea    ebp,[edi+0x1]
c000623e:	75 04                	jne    c0006244 <strnicmp+0x32>
c0006240:	89 ef                	mov    edi,ebp
c0006242:	eb db                	jmp    c000621f <strnicmp+0xd>
c0006244:	83 ec 0c             	sub    esp,0xc
c0006247:	50                   	push   eax
c0006248:	e8 03 a7 ff ff       	call   c0000950 <tolower>
c000624d:	89 c3                	mov    ebx,eax
c000624f:	0f be 04 3e          	movsx  eax,BYTE PTR [esi+edi*1]
c0006253:	89 ef                	mov    edi,ebp
c0006255:	89 04 24             	mov    DWORD PTR [esp],eax
c0006258:	e8 f3 a6 ff ff       	call   c0000950 <tolower>
c000625d:	83 c4 10             	add    esp,0x10
c0006260:	29 c3                	sub    ebx,eax
c0006262:	89 d8                	mov    eax,ebx
c0006264:	74 b9                	je     c000621f <strnicmp+0xd>
c0006266:	eb 02                	jmp    c000626a <strnicmp+0x58>
c0006268:	31 c0                	xor    eax,eax
c000626a:	83 c4 0c             	add    esp,0xc
c000626d:	5b                   	pop    ebx
c000626e:	5e                   	pop    esi
c000626f:	5f                   	pop    edi
c0006270:	5d                   	pop    ebp
c0006271:	c3                   	ret    

c0006272 <find_object>:
c0006272:	55                   	push   ebp
c0006273:	57                   	push   edi
c0006274:	89 c7                	mov    edi,eax
c0006276:	56                   	push   esi
c0006277:	53                   	push   ebx
c0006278:	89 d3                	mov    ebx,edx
c000627a:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0006280:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0006287:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000628b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000628f:	83 3d b4 6e 02 c0 00 	cmp    DWORD PTR ds:0xc0026eb4,0x0
c0006296:	74 0b                	je     c00062a3 <find_object+0x31>
c0006298:	89 fa                	mov    edx,edi
c000629a:	8d 44 24 20          	lea    eax,[esp+0x20]
c000629e:	e8 89 fc ff ff       	call   c0005f2c <utf2ucs>
c00062a3:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c00062a6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062aa:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00062af:	7e 11                	jle    c00062c2 <find_object+0x50>
c00062b1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00062b5:	e8 46 ff ff ff       	call   c0006200 <biread>
c00062ba:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00062be:	85 c0                	test   eax,eax
c00062c0:	79 07                	jns    c00062c9 <find_object+0x57>
c00062c2:	31 db                	xor    ebx,ebx
c00062c4:	e9 56 01 00 00       	jmp    c000641f <find_object+0x1ad>
c00062c9:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00062d1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00062d5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00062d9:	8b 04 85 80 60 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9f80]
c00062e0:	8d 5c 08 04          	lea    ebx,[eax+ecx*1+0x4]
c00062e4:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c00062e7:	85 f6                	test   esi,esi
c00062e9:	75 0e                	jne    c00062f9 <find_object+0x87>
c00062eb:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00062ef:	81 6c 24 0c 00 08 00 00 	sub    DWORD PTR [esp+0xc],0x800
c00062f7:	eb b1                	jmp    c00062aa <find_object+0x38>
c00062f9:	8b 2d b4 6e 02 c0    	mov    ebp,DWORD PTR ds:0xc0026eb4
c00062ff:	0f b6 4b 20          	movzx  ecx,BYTE PTR [ebx+0x20]
c0006303:	85 ed                	test   ebp,ebp
c0006305:	89 c8                	mov    eax,ecx
c0006307:	74 2b                	je     c0006334 <find_object+0xc2>
c0006309:	8d 43 21             	lea    eax,[ebx+0x21]
c000630c:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006310:	e8 07 fd ff ff       	call   c000601c <ucscompare>
c0006315:	85 c0                	test   eax,eax
c0006317:	0f 84 bf 00 00 00    	je     c00063dc <find_object+0x16a>
c000631d:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c0006320:	01 44 24 08          	add    DWORD PTR [esp+0x8],eax
c0006324:	81 7c 24 08 ff 07 00 00 	cmp    DWORD PTR [esp+0x8],0x7ff
c000632c:	0f 8e da 00 00 00    	jle    c000640c <find_object+0x19a>
c0006332:	eb b7                	jmp    c00062eb <find_object+0x79>
c0006334:	29 ce                	sub    esi,ecx
c0006336:	8d 54 0b 21          	lea    edx,[ebx+ecx*1+0x21]
c000633a:	a8 01                	test   al,0x1
c000633c:	74 05                	je     c0006343 <find_object+0xd1>
c000633e:	83 ee 21             	sub    esi,0x21
c0006341:	eb 5a                	jmp    c000639d <find_object+0x12b>
c0006343:	42                   	inc    edx
c0006344:	83 ee 22             	sub    esi,0x22
c0006347:	eb 54                	jmp    c000639d <find_object+0x12b>
c0006349:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c000634c:	48                   	dec    eax
c000634d:	3c 01                	cmp    al,0x1
c000634f:	77 51                	ja     c00063a2 <find_object+0x130>
c0006351:	50                   	push   eax
c0006352:	6a 02                	push   0x2
c0006354:	68 9d 0b 02 c0       	push   0xc0020b9d
c0006359:	52                   	push   edx
c000635a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000635e:	e8 7d a4 ff ff       	call   c00007e0 <strncmp>
c0006363:	83 c4 10             	add    esp,0x10
c0006366:	85 c0                	test   eax,eax
c0006368:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000636c:	75 27                	jne    c0006395 <find_object+0x123>
c000636e:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006372:	8d 68 fb             	lea    ebp,[eax-0x5]
c0006375:	50                   	push   eax
c0006376:	8d 42 05             	lea    eax,[edx+0x5]
c0006379:	55                   	push   ebp
c000637a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000637e:	50                   	push   eax
c000637f:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0006383:	50                   	push   eax
c0006384:	e8 f7 a2 ff ff       	call   c0000680 <strncpy>
c0006389:	c6 44 2c 30 00       	mov    BYTE PTR [esp+ebp*1+0x30],0x0
c000638e:	83 c4 10             	add    esp,0x10
c0006391:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006395:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006399:	29 c6                	sub    esi,eax
c000639b:	01 c2                	add    edx,eax
c000639d:	83 fe 03             	cmp    esi,0x3
c00063a0:	7f a7                	jg     c0006349 <find_object+0xd7>
c00063a2:	85 ed                	test   ebp,ebp
c00063a4:	7e 40                	jle    c00063e6 <find_object+0x174>
c00063a6:	51                   	push   ecx
c00063a7:	51                   	push   ecx
c00063a8:	6a 2f                	push   0x2f
c00063aa:	57                   	push   edi
c00063ab:	e8 f0 a3 ff ff       	call   c00007a0 <strchr>
c00063b0:	83 c4 10             	add    esp,0x10
c00063b3:	85 c0                	test   eax,eax
c00063b5:	74 04                	je     c00063bb <find_object+0x149>
c00063b7:	29 f8                	sub    eax,edi
c00063b9:	eb 0c                	jmp    c00063c7 <find_object+0x155>
c00063bb:	83 ec 0c             	sub    esp,0xc
c00063be:	57                   	push   edi
c00063bf:	e8 ac a1 ff ff       	call   c0000570 <strlen>
c00063c4:	83 c4 10             	add    esp,0x10
c00063c7:	52                   	push   edx
c00063c8:	50                   	push   eax
c00063c9:	57                   	push   edi
c00063ca:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00063ce:	50                   	push   eax
c00063cf:	e8 3e fe ff ff       	call   c0006212 <strnicmp>
c00063d4:	83 c4 10             	add    esp,0x10
c00063d7:	e9 39 ff ff ff       	jmp    c0006315 <find_object+0xa3>
c00063dc:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00063e0:	3b 44 24 10          	cmp    eax,DWORD PTR [esp+0x10]
c00063e4:	eb 1e                	jmp    c0006404 <find_object+0x192>
c00063e6:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c00063ea:	8d 43 21             	lea    eax,[ebx+0x21]
c00063ed:	89 f9                	mov    ecx,edi
c00063ef:	e8 a7 fc ff ff       	call   c000609b <fncompare>
c00063f4:	85 c0                	test   eax,eax
c00063f6:	0f 85 21 ff ff ff    	jne    c000631d <find_object+0xab>
c00063fc:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c0006400:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0006404:	0f 85 13 ff ff ff    	jne    c000631d <find_object+0xab>
c000640a:	eb 13                	jmp    c000641f <find_object+0x1ad>
c000640c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006410:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0006414:	0f 8f b7 fe ff ff    	jg     c00062d1 <find_object+0x5f>
c000641a:	e9 cc fe ff ff       	jmp    c00062eb <find_object+0x79>
c000641f:	81 c4 2c 01 00 00    	add    esp,0x12c
c0006425:	89 d8                	mov    eax,ebx
c0006427:	5b                   	pop    ebx
c0006428:	5e                   	pop    esi
c0006429:	5f                   	pop    edi
c000642a:	5d                   	pop    ebp
c000642b:	c3                   	ret    

c000642c <find_object_path>:
c000642c:	55                   	push   ebp
c000642d:	57                   	push   edi
c000642e:	89 d7                	mov    edi,edx
c0006430:	56                   	push   esi
c0006431:	89 c6                	mov    esi,eax
c0006433:	53                   	push   ebx
c0006434:	89 cb                	mov    ebx,ecx
c0006436:	83 ec 0c             	sub    esp,0xc
c0006439:	50                   	push   eax
c000643a:	50                   	push   eax
c000643b:	6a 2f                	push   0x2f
c000643d:	56                   	push   esi
c000643e:	e8 5d a3 ff ff       	call   c00007a0 <strchr>
c0006443:	83 c4 10             	add    esp,0x10
c0006446:	89 c5                	mov    ebp,eax
c0006448:	85 c0                	test   eax,eax
c000644a:	74 3a                	je     c0006486 <find_object_path+0x5a>
c000644c:	39 ee                	cmp    esi,ebp
c000644e:	74 31                	je     c0006481 <find_object_path+0x55>
c0006450:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006453:	e8 a6 fb ff ff       	call   c0005ffe <iso_733>
c0006458:	89 c2                	mov    edx,eax
c000645a:	8d 43 02             	lea    eax,[ebx+0x2]
c000645d:	e8 9c fb ff ff       	call   c0005ffe <iso_733>
c0006462:	83 ec 0c             	sub    esp,0xc
c0006465:	89 c1                	mov    ecx,eax
c0006467:	52                   	push   edx
c0006468:	89 f0                	mov    eax,esi
c000646a:	ba 01 00 00 00       	mov    edx,0x1
c000646f:	e8 fe fd ff ff       	call   c0006272 <find_object>
c0006474:	83 c4 10             	add    esp,0x10
c0006477:	89 c3                	mov    ebx,eax
c0006479:	85 c0                	test   eax,eax
c000647b:	75 04                	jne    c0006481 <find_object_path+0x55>
c000647d:	31 db                	xor    ebx,ebx
c000647f:	eb 36                	jmp    c00064b7 <find_object_path+0x8b>
c0006481:	8d 75 01             	lea    esi,[ebp+0x1]
c0006484:	eb b3                	jmp    c0006439 <find_object_path+0xd>
c0006486:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006489:	74 28                	je     c00064b3 <find_object_path+0x87>
c000648b:	8d 43 0a             	lea    eax,[ebx+0xa]
c000648e:	e8 6b fb ff ff       	call   c0005ffe <iso_733>
c0006493:	89 c2                	mov    edx,eax
c0006495:	8d 43 02             	lea    eax,[ebx+0x2]
c0006498:	e8 61 fb ff ff       	call   c0005ffe <iso_733>
c000649d:	83 ec 0c             	sub    esp,0xc
c00064a0:	89 c1                	mov    ecx,eax
c00064a2:	52                   	push   edx
c00064a3:	89 f0                	mov    eax,esi
c00064a5:	89 fa                	mov    edx,edi
c00064a7:	e8 c6 fd ff ff       	call   c0006272 <find_object>
c00064ac:	83 c4 10             	add    esp,0x10
c00064af:	89 c3                	mov    ebx,eax
c00064b1:	eb 04                	jmp    c00064b7 <find_object_path+0x8b>
c00064b3:	85 ff                	test   edi,edi
c00064b5:	74 c6                	je     c000647d <find_object_path+0x51>
c00064b7:	83 c4 0c             	add    esp,0xc
c00064ba:	89 d8                	mov    eax,ebx
c00064bc:	5b                   	pop    ebx
c00064bd:	5e                   	pop    esi
c00064be:	5f                   	pop    edi
c00064bf:	5d                   	pop    ebp
c00064c0:	c3                   	ret    

c00064c1 <stricmp>:
c00064c1:	57                   	push   edi
c00064c2:	56                   	push   esi
c00064c3:	31 f6                	xor    esi,esi
c00064c5:	53                   	push   ebx
c00064c6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00064ca:	83 ec 0c             	sub    esp,0xc
c00064cd:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00064d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064d5:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00064d9:	50                   	push   eax
c00064da:	e8 51 a4 ff ff       	call   c0000930 <toupper>
c00064df:	89 04 24             	mov    DWORD PTR [esp],eax
c00064e2:	e8 69 a4 ff ff       	call   c0000950 <tolower>
c00064e7:	89 3c 24             	mov    DWORD PTR [esp],edi
c00064ea:	89 c3                	mov    ebx,eax
c00064ec:	e8 3f a4 ff ff       	call   c0000930 <toupper>
c00064f1:	89 04 24             	mov    DWORD PTR [esp],eax
c00064f4:	e8 57 a4 ff ff       	call   c0000950 <tolower>
c00064f9:	83 c4 10             	add    esp,0x10
c00064fc:	39 c3                	cmp    ebx,eax
c00064fe:	75 05                	jne    c0006505 <stricmp+0x44>
c0006500:	46                   	inc    esi
c0006501:	85 db                	test   ebx,ebx
c0006503:	75 c1                	jne    c00064c6 <stricmp+0x5>
c0006505:	29 c3                	sub    ebx,eax
c0006507:	89 d8                	mov    eax,ebx
c0006509:	5b                   	pop    ebx
c000650a:	5e                   	pop    esi
c000650b:	5f                   	pop    edi
c000650c:	c3                   	ret    

c000650d <iso_open>:
c000650d:	57                   	push   edi
c000650e:	31 c0                	xor    eax,eax
c0006510:	56                   	push   esi
c0006511:	b9 80 6e 02 c0       	mov    ecx,0xc0026e80
c0006516:	53                   	push   ebx
c0006517:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000651c:	0f 95 c0             	setne  al
c000651f:	89 c2                	mov    edx,eax
c0006521:	89 c6                	mov    esi,eax
c0006523:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006527:	e8 00 ff ff ff       	call   c000642c <find_object_path>
c000652c:	83 ca ff             	or     edx,0xffffffff
c000652f:	85 c0                	test   eax,eax
c0006531:	74 5e                	je     c0006591 <iso_open+0x84>
c0006533:	89 c1                	mov    ecx,eax
c0006535:	31 d2                	xor    edx,edx
c0006537:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c000653d:	83 bf 40 65 02 c0 00 	cmp    DWORD PTR [edi-0x3ffd9ac0],0x0
c0006544:	75 42                	jne    c0006588 <iso_open+0x7b>
c0006546:	8d 41 02             	lea    eax,[ecx+0x2]
c0006549:	c7 87 40 65 02 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffd9ac0],0xffffffff
c0006553:	e8 a6 fa ff ff       	call   c0005ffe <iso_733>
c0006558:	89 b7 44 65 02 c0    	mov    DWORD PTR [edi-0x3ffd9abc],esi
c000655e:	89 87 40 65 02 c0    	mov    DWORD PTR [edi-0x3ffd9ac0],eax
c0006564:	c7 87 48 65 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffd9ab8],0x0
c000656e:	8d 41 0a             	lea    eax,[ecx+0xa]
c0006571:	e8 88 fa ff ff       	call   c0005ffe <iso_733>
c0006576:	c7 87 d0 65 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffd9a30],0x0
c0006580:	89 87 4c 65 02 c0    	mov    DWORD PTR [edi-0x3ffd9ab4],eax
c0006586:	eb 09                	jmp    c0006591 <iso_open+0x84>
c0006588:	42                   	inc    edx
c0006589:	83 fa 10             	cmp    edx,0x10
c000658c:	75 a9                	jne    c0006537 <iso_open+0x2a>
c000658e:	83 ca ff             	or     edx,0xffffffff
c0006591:	5b                   	pop    ebx
c0006592:	89 d0                	mov    eax,edx
c0006594:	5e                   	pop    esi
c0006595:	5f                   	pop    edi
c0006596:	c3                   	ret    

c0006597 <iso_close>:
c0006597:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000659b:	83 f8 0f             	cmp    eax,0xf
c000659e:	7f 10                	jg     c00065b0 <iso_close+0x19>
c00065a0:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c00065a6:	c7 80 40 65 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9ac0],0x0
c00065b0:	e9 5e fb ff ff       	jmp    c0006113 <bclear_cache>

c00065b5 <iso_read>:
c00065b5:	55                   	push   ebp
c00065b6:	57                   	push   edi
c00065b7:	56                   	push   esi
c00065b8:	53                   	push   ebx
c00065b9:	83 ec 1c             	sub    esp,0x1c
c00065bc:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00065c0:	83 fd 0f             	cmp    ebp,0xf
c00065c3:	7e 0a                	jle    c00065cf <iso_read+0x1a>
c00065c5:	83 c8 ff             	or     eax,0xffffffff
c00065c8:	89 c2                	mov    edx,eax
c00065ca:	e9 f4 00 00 00       	jmp    c00066c3 <iso_read+0x10e>
c00065cf:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00065d5:	83 bd 40 65 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffd9ac0],0x0
c00065dc:	74 e7                	je     c00065c5 <iso_read+0x10>
c00065de:	8b 95 d0 65 02 c0    	mov    edx,DWORD PTR [ebp-0x3ffd9a30]
c00065e4:	85 d2                	test   edx,edx
c00065e6:	75 dd                	jne    c00065c5 <iso_read+0x10>
c00065e8:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00065ed:	0f 84 cd 00 00 00    	je     c00066c0 <iso_read+0x10b>
c00065f3:	8b 85 48 65 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffd9ab8]
c00065f9:	8b 8d 4c 65 02 c0    	mov    ecx,DWORD PTR [ebp-0x3ffd9ab4]
c00065ff:	29 c1                	sub    ecx,eax
c0006601:	3b 4c 24 38          	cmp    ecx,DWORD PTR [esp+0x38]
c0006605:	76 04                	jbe    c000660b <iso_read+0x56>
c0006607:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000660b:	85 c9                	test   ecx,ecx
c000660d:	0f 84 ad 00 00 00    	je     c00066c0 <iso_read+0x10b>
c0006613:	89 c6                	mov    esi,eax
c0006615:	bb 00 08 00 00       	mov    ebx,0x800
c000661a:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006620:	c1 e8 0b             	shr    eax,0xb
c0006623:	29 f3                	sub    ebx,esi
c0006625:	03 85 40 65 02 c0    	add    eax,DWORD PTR [ebp-0x3ffd9ac0]
c000662b:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006631:	7e 3f                	jle    c0006672 <iso_read+0xbd>
c0006633:	81 fb 00 08 00 00    	cmp    ebx,0x800
c0006639:	75 37                	jne    c0006672 <iso_read+0xbd>
c000663b:	be 20 00 00 00       	mov    esi,0x20
c0006640:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c0006646:	7f 05                	jg     c000664d <iso_read+0x98>
c0006648:	89 ce                	mov    esi,ecx
c000664a:	c1 fe 0b             	sar    esi,0xb
c000664d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006651:	89 f3                	mov    ebx,esi
c0006653:	c1 e3 0b             	shl    ebx,0xb
c0006656:	52                   	push   edx
c0006657:	56                   	push   esi
c0006658:	50                   	push   eax
c0006659:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000665d:	e8 15 fb ff ff       	call   c0006177 <isoReadDiscSector>
c0006662:	83 c4 10             	add    esp,0x10
c0006665:	85 c0                	test   eax,eax
c0006667:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000666b:	7f 3e                	jg     c00066ab <iso_read+0xf6>
c000666d:	e9 53 ff ff ff       	jmp    c00065c5 <iso_read+0x10>
c0006672:	39 cb                	cmp    ebx,ecx
c0006674:	7e 02                	jle    c0006678 <iso_read+0xc3>
c0006676:	89 cb                	mov    ebx,ecx
c0006678:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000667c:	e8 88 fb ff ff       	call   c0006209 <bdread>
c0006681:	85 c0                	test   eax,eax
c0006683:	0f 88 3c ff ff ff    	js     c00065c5 <iso_read+0x10>
c0006689:	8b 0c 85 20 60 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd9fe0]
c0006690:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0006694:	8b 85 48 65 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffd9ab8]
c000669a:	25 ff 07 00 00       	and    eax,0x7ff
c000669f:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c00066a3:	89 d9                	mov    ecx,ebx
c00066a5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00066a7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00066ab:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c00066af:	01 9d 48 65 02 c0    	add    DWORD PTR [ebp-0x3ffd9ab8],ebx
c00066b5:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c00066b9:	01 da                	add    edx,ebx
c00066bb:	e9 28 ff ff ff       	jmp    c00065e8 <iso_read+0x33>
c00066c0:	89 d0                	mov    eax,edx
c00066c2:	99                   	cdq    
c00066c3:	83 c4 1c             	add    esp,0x1c
c00066c6:	5b                   	pop    ebx
c00066c7:	5e                   	pop    esi
c00066c8:	5f                   	pop    edi
c00066c9:	5d                   	pop    ebp
c00066ca:	c3                   	ret    

c00066cb <iso_seek>:
c00066cb:	55                   	push   ebp
c00066cc:	83 c8 ff             	or     eax,0xffffffff
c00066cf:	57                   	push   edi
c00066d0:	89 c2                	mov    edx,eax
c00066d2:	56                   	push   esi
c00066d3:	53                   	push   ebx
c00066d4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00066d8:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00066dc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00066e0:	83 fe 0f             	cmp    esi,0xf
c00066e3:	7f 65                	jg     c000674a <iso_seek+0x7f>
c00066e5:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c00066eb:	8d 8d 40 65 02 c0    	lea    ecx,[ebp-0x3ffd9ac0]
c00066f1:	83 bd 40 65 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffd9ac0],0x0
c00066f8:	74 50                	je     c000674a <iso_seek+0x7f>
c00066fa:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c0006701:	75 47                	jne    c000674a <iso_seek+0x7f>
c0006703:	83 fb 01             	cmp    ebx,0x1
c0006706:	74 0e                	je     c0006716 <iso_seek+0x4b>
c0006708:	83 fb 02             	cmp    ebx,0x2
c000670b:	74 0e                	je     c000671b <iso_seek+0x50>
c000670d:	85 db                	test   ebx,ebx
c000670f:	75 39                	jne    c000674a <iso_seek+0x7f>
c0006711:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0006714:	eb 0d                	jmp    c0006723 <iso_seek+0x58>
c0006716:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c0006719:	eb 08                	jmp    c0006723 <iso_seek+0x58>
c000671b:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c000671e:	01 f8                	add    eax,edi
c0006720:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0006723:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c0006729:	8b 88 4c 65 02 c0    	mov    ecx,DWORD PTR [eax-0x3ffd9ab4]
c000672f:	05 40 65 02 c0       	add    eax,0xc0026540
c0006734:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c0006737:	76 03                	jbe    c000673c <iso_seek+0x71>
c0006739:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000673c:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c0006742:	8b 82 48 65 02 c0    	mov    eax,DWORD PTR [edx-0x3ffd9ab8]
c0006748:	31 d2                	xor    edx,edx
c000674a:	5b                   	pop    ebx
c000674b:	5e                   	pop    esi
c000674c:	5f                   	pop    edi
c000674d:	5d                   	pop    ebp
c000674e:	c3                   	ret    

c000674f <iso_tell>:
c000674f:	83 c8 ff             	or     eax,0xffffffff
c0006752:	53                   	push   ebx
c0006753:	89 c2                	mov    edx,eax
c0006755:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006759:	83 f9 0f             	cmp    ecx,0xf
c000675c:	7f 20                	jg     c000677e <iso_tell+0x2f>
c000675e:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c0006764:	83 bb 40 65 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffd9ac0],0x0
c000676b:	74 11                	je     c000677e <iso_tell+0x2f>
c000676d:	83 bb d0 65 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffd9a30],0x0
c0006774:	75 08                	jne    c000677e <iso_tell+0x2f>
c0006776:	8b 83 48 65 02 c0    	mov    eax,DWORD PTR [ebx-0x3ffd9ab8]
c000677c:	31 d2                	xor    edx,edx
c000677e:	5b                   	pop    ebx
c000677f:	c3                   	ret    

c0006780 <iso_total>:
c0006780:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006784:	83 c8 ff             	or     eax,0xffffffff
c0006787:	83 fa 0f             	cmp    edx,0xf
c000678a:	7f 1e                	jg     c00067aa <iso_total+0x2a>
c000678c:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c0006792:	83 ba 40 65 02 c0 00 	cmp    DWORD PTR [edx-0x3ffd9ac0],0x0
c0006799:	74 0f                	je     c00067aa <iso_total+0x2a>
c000679b:	83 ba d0 65 02 c0 00 	cmp    DWORD PTR [edx-0x3ffd9a30],0x0
c00067a2:	75 06                	jne    c00067aa <iso_total+0x2a>
c00067a4:	8b 82 4c 65 02 c0    	mov    eax,DWORD PTR [edx-0x3ffd9ab4]
c00067aa:	c3                   	ret    

c00067ab <fn_postprocess>:
c00067ab:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00067af:	89 d0                	mov    eax,edx
c00067b1:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c00067b4:	83 f9 3b             	cmp    ecx,0x3b
c00067b7:	74 07                	je     c00067c0 <fn_postprocess+0x15>
c00067b9:	85 c9                	test   ecx,ecx
c00067bb:	74 03                	je     c00067c0 <fn_postprocess+0x15>
c00067bd:	40                   	inc    eax
c00067be:	eb f1                	jmp    c00067b1 <fn_postprocess+0x6>
c00067c0:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00067c3:	39 d0                	cmp    eax,edx
c00067c5:	76 0a                	jbe    c00067d1 <fn_postprocess+0x26>
c00067c7:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00067cb:	75 04                	jne    c00067d1 <fn_postprocess+0x26>
c00067cd:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00067d1:	c3                   	ret    

c00067d2 <iso_readdir>:
c00067d2:	55                   	push   ebp
c00067d3:	57                   	push   edi
c00067d4:	56                   	push   esi
c00067d5:	53                   	push   ebx
c00067d6:	83 ec 1c             	sub    esp,0x1c
c00067d9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00067dd:	83 fb 0f             	cmp    ebx,0xf
c00067e0:	7f 28                	jg     c000680a <iso_readdir+0x38>
c00067e2:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c00067e8:	8d b8 40 65 02 c0    	lea    edi,[eax-0x3ffd9ac0]
c00067ee:	83 b8 40 65 02 c0 00 	cmp    DWORD PTR [eax-0x3ffd9ac0],0x0
c00067f5:	74 13                	je     c000680a <iso_readdir+0x38>
c00067f7:	83 7f 04 00          	cmp    DWORD PTR [edi+0x4],0x0
c00067fb:	74 0d                	je     c000680a <iso_readdir+0x38>
c00067fd:	83 bf 90 00 00 00 00 	cmp    DWORD PTR [edi+0x90],0x0
c0006804:	0f 84 b1 00 00 00    	je     c00068bb <iso_readdir+0xe9>
c000680a:	83 ec 0c             	sub    esp,0xc
c000680d:	68 a0 0b 02 c0       	push   0xc0020ba0
c0006812:	e8 01 3d 01 00       	call   c001a518 <iso_kprintf>
c0006817:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000681a:	e8 15 3d 01 00       	call   c001a534 <iso_kprintfd>
c000681f:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006825:	c7 04 24 a5 0b 02 c0 	mov    DWORD PTR [esp],0xc0020ba5
c000682c:	e8 e7 3c 01 00       	call   c001a518 <iso_kprintf>
c0006831:	5d                   	pop    ebp
c0006832:	ff b3 40 65 02 c0    	push   DWORD PTR [ebx-0x3ffd9ac0]
c0006838:	e8 f7 3c 01 00       	call   c001a534 <iso_kprintfd>
c000683d:	c7 04 24 ab 0b 02 c0 	mov    DWORD PTR [esp],0xc0020bab
c0006844:	e8 cf 3c 01 00       	call   c001a518 <iso_kprintf>
c0006849:	58                   	pop    eax
c000684a:	ff b3 44 65 02 c0    	push   DWORD PTR [ebx-0x3ffd9abc]
c0006850:	e8 df 3c 01 00       	call   c001a534 <iso_kprintfd>
c0006855:	c7 04 24 b1 0b 02 c0 	mov    DWORD PTR [esp],0xc0020bb1
c000685c:	e8 b7 3c 01 00       	call   c001a518 <iso_kprintf>
c0006861:	58                   	pop    eax
c0006862:	ff b3 d0 65 02 c0    	push   DWORD PTR [ebx-0x3ffd9a30]
c0006868:	e8 c7 3c 01 00       	call   c001a534 <iso_kprintfd>
c000686d:	83 c4 10             	add    esp,0x10
c0006870:	eb 42                	jmp    c00068b4 <iso_readdir+0xe2>
c0006872:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006875:	8b 34 85 80 60 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd9f80]
c000687c:	89 d1                	mov    ecx,edx
c000687e:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0006884:	8d 74 0e 04          	lea    esi,[esi+ecx*1+0x4]
c0006888:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c000688b:	75 35                	jne    c00068c2 <iso_readdir+0xf0>
c000688d:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c0006893:	81 c2 00 08 00 00    	add    edx,0x800
c0006899:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c000689c:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000689f:	3b 57 0c             	cmp    edx,DWORD PTR [edi+0xc]
c00068a2:	73 1e                	jae    c00068c2 <iso_readdir+0xf0>
c00068a4:	c1 ea 0b             	shr    edx,0xb
c00068a7:	8b 07                	mov    eax,DWORD PTR [edi]
c00068a9:	01 d0                	add    eax,edx
c00068ab:	e8 50 f9 ff ff       	call   c0006200 <biread>
c00068b0:	85 c0                	test   eax,eax
c00068b2:	79 be                	jns    c0006872 <iso_readdir+0xa0>
c00068b4:	31 c0                	xor    eax,eax
c00068b6:	e9 66 01 00 00       	jmp    c0006a21 <iso_readdir+0x24f>
c00068bb:	31 f6                	xor    esi,esi
c00068bd:	83 c8 ff             	or     eax,0xffffffff
c00068c0:	eb da                	jmp    c000689c <iso_readdir+0xca>
c00068c2:	69 d3 94 00 00 00    	imul   edx,ebx,0x94
c00068c8:	8b ba 48 65 02 c0    	mov    edi,DWORD PTR [edx-0x3ffd9ab8]
c00068ce:	81 c2 40 65 02 c0    	add    edx,0xc0026540
c00068d4:	3b 7a 0c             	cmp    edi,DWORD PTR [edx+0xc]
c00068d7:	73 db                	jae    c00068b4 <iso_readdir+0xe2>
c00068d9:	80 7e 21 00          	cmp    BYTE PTR [esi+0x21],0x0
c00068dd:	75 34                	jne    c0006913 <iso_readdir+0x141>
c00068df:	80 7e 20 01          	cmp    BYTE PTR [esi+0x20],0x1
c00068e3:	75 2e                	jne    c0006913 <iso_readdir+0x141>
c00068e5:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c00068e8:	8b 34 85 80 60 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd9f80]
c00068ef:	01 f9                	add    ecx,edi
c00068f1:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c00068f4:	89 c8                	mov    eax,ecx
c00068f6:	25 ff 07 00 00       	and    eax,0x7ff
c00068fb:	0f b6 44 06 04       	movzx  eax,BYTE PTR [esi+eax*1+0x4]
c0006900:	01 c8                	add    eax,ecx
c0006902:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0006905:	25 ff 07 00 00       	and    eax,0x7ff
c000690a:	8d 74 06 04          	lea    esi,[esi+eax*1+0x4]
c000690e:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006911:	74 a1                	je     c00068b4 <iso_readdir+0xe2>
c0006913:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006919:	0f b6 4e 20          	movzx  ecx,BYTE PTR [esi+0x20]
c000691d:	8d 56 21             	lea    edx,[esi+0x21]
c0006920:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006924:	8d a8 58 65 02 c0    	lea    ebp,[eax-0x3ffd9aa8]
c000692a:	83 3d b4 6e 02 c0 00 	cmp    DWORD PTR ds:0xc0026eb4,0x0
c0006931:	74 0c                	je     c000693f <iso_readdir+0x16d>
c0006933:	89 e8                	mov    eax,ebp
c0006935:	e8 14 f6 ff ff       	call   c0005f4e <ucs2utfn>
c000693a:	e9 a6 00 00 00       	jmp    c00069e5 <iso_readdir+0x213>
c000693f:	57                   	push   edi
c0006940:	51                   	push   ecx
c0006941:	52                   	push   edx
c0006942:	55                   	push   ebp
c0006943:	e8 38 9d ff ff       	call   c0000680 <strncpy>
c0006948:	0f b6 46 20          	movzx  eax,BYTE PTR [esi+0x20]
c000694c:	69 cb 94 00 00 00    	imul   ecx,ebx,0x94
c0006952:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0006955:	c6 84 01 58 65 02 c0 00 	mov    BYTE PTR [ecx+eax*1-0x3ffd9aa8],0x0
c000695d:	e8 49 fe ff ff       	call   c00067ab <fn_postprocess>
c0006962:	0f b6 56 20          	movzx  edx,BYTE PTR [esi+0x20]
c0006966:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006969:	83 c4 10             	add    esp,0x10
c000696c:	29 d0                	sub    eax,edx
c000696e:	8d 7c 16 21          	lea    edi,[esi+edx*1+0x21]
c0006972:	f6 46 20 01          	test   BYTE PTR [esi+0x20],0x1
c0006976:	74 05                	je     c000697d <iso_readdir+0x1ab>
c0006978:	83 e8 21             	sub    eax,0x21
c000697b:	eb 04                	jmp    c0006981 <iso_readdir+0x1af>
c000697d:	47                   	inc    edi
c000697e:	83 e8 22             	sub    eax,0x22
c0006981:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006985:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c000698b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000698f:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c0006994:	7e 4f                	jle    c00069e5 <iso_readdir+0x213>
c0006996:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c0006999:	48                   	dec    eax
c000699a:	3c 01                	cmp    al,0x1
c000699c:	77 47                	ja     c00069e5 <iso_readdir+0x213>
c000699e:	52                   	push   edx
c000699f:	6a 02                	push   0x2
c00069a1:	68 9d 0b 02 c0       	push   0xc0020b9d
c00069a6:	57                   	push   edi
c00069a7:	e8 34 9e ff ff       	call   c00007e0 <strncmp>
c00069ac:	83 c4 10             	add    esp,0x10
c00069af:	85 c0                	test   eax,eax
c00069b1:	75 26                	jne    c00069d9 <iso_readdir+0x207>
c00069b3:	50                   	push   eax
c00069b4:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c00069b8:	83 e8 05             	sub    eax,0x5
c00069bb:	50                   	push   eax
c00069bc:	8d 47 05             	lea    eax,[edi+0x5]
c00069bf:	50                   	push   eax
c00069c0:	55                   	push   ebp
c00069c1:	e8 ba 9c ff ff       	call   c0000680 <strncpy>
c00069c6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00069ca:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c00069ce:	83 c4 10             	add    esp,0x10
c00069d1:	c6 84 08 53 65 02 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffd9aad],0x0
c00069d9:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c00069dd:	29 44 24 04          	sub    DWORD PTR [esp+0x4],eax
c00069e1:	01 c7                	add    edi,eax
c00069e3:	eb aa                	jmp    c000698f <iso_readdir+0x1bd>
c00069e5:	83 c8 ff             	or     eax,0xffffffff
c00069e8:	f6 46 19 02          	test   BYTE PTR [esi+0x19],0x2
c00069ec:	89 c2                	mov    edx,eax
c00069ee:	75 0a                	jne    c00069fa <iso_readdir+0x228>
c00069f0:	8d 46 0a             	lea    eax,[esi+0xa]
c00069f3:	e8 06 f6 ff ff       	call   c0005ffe <iso_733>
c00069f8:	31 d2                	xor    edx,edx
c00069fa:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006a00:	89 83 50 65 02 c0    	mov    DWORD PTR [ebx-0x3ffd9ab0],eax
c0006a06:	89 93 54 65 02 c0    	mov    DWORD PTR [ebx-0x3ffd9aac],edx
c0006a0c:	81 c3 40 65 02 c0    	add    ebx,0xc0026540
c0006a12:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006a15:	01 43 08             	add    DWORD PTR [ebx+0x8],eax
c0006a18:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006a1c:	05 50 65 02 c0       	add    eax,0xc0026550
c0006a21:	83 c4 1c             	add    esp,0x1c
c0006a24:	5b                   	pop    ebx
c0006a25:	5e                   	pop    esi
c0006a26:	5f                   	pop    edi
c0006a27:	5d                   	pop    ebp
c0006a28:	c3                   	ret    

c0006a29 <iso_reset>:
c0006a29:	83 ec 18             	sub    esp,0x18
c0006a2c:	68 ba 0b 02 c0       	push   0xc0020bba
c0006a31:	e8 e2 3a 01 00       	call   c001a518 <iso_kprintf>
c0006a36:	e8 10 f7 ff ff       	call   c000614b <iso_break_all>
c0006a3b:	e8 09 f7 ff ff       	call   c0006149 <bclear>
c0006a40:	31 c0                	xor    eax,eax
c0006a42:	83 c4 1c             	add    esp,0x1c
c0006a45:	c3                   	ret    

c0006a46 <init_percd>:
c0006a46:	57                   	push   edi
c0006a47:	56                   	push   esi
c0006a48:	53                   	push   ebx
c0006a49:	bb 01 00 00 00       	mov    ebx,0x1
c0006a4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a52:	a2 60 60 02 c0       	mov    ds:0xc0026060,al
c0006a57:	e8 cd ff ff ff       	call   c0006a29 <iso_reset>
c0006a5c:	c7 05 b4 6e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026eb4,0x0
c0006a66:	a1 ac 6e 02 c0       	mov    eax,ds:0xc0026eac
c0006a6b:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c0006a6f:	e8 8c f7 ff ff       	call   c0006200 <biread>
c0006a74:	89 c6                	mov    esi,eax
c0006a76:	85 c0                	test   eax,eax
c0006a78:	0f 88 ba 00 00 00    	js     c0006b38 <init_percd+0xf2>
c0006a7e:	8b 04 85 80 60 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9f80]
c0006a85:	83 c0 04             	add    eax,0x4
c0006a88:	52                   	push   edx
c0006a89:	6a 06                	push   0x6
c0006a8b:	68 c5 0b 02 c0       	push   0xc0020bc5
c0006a90:	50                   	push   eax
c0006a91:	e8 ea 98 ff ff       	call   c0000380 <memcmp>
c0006a96:	83 c4 10             	add    esp,0x10
c0006a99:	85 c0                	test   eax,eax
c0006a9b:	74 08                	je     c0006aa5 <init_percd+0x5f>
c0006a9d:	43                   	inc    ebx
c0006a9e:	83 fb 04             	cmp    ebx,0x4
c0006aa1:	75 c3                	jne    c0006a66 <init_percd+0x20>
c0006aa3:	eb 1a                	jmp    c0006abf <init_percd+0x79>
c0006aa5:	8b 04 b5 80 60 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffd9f80]
c0006aac:	83 c0 5c             	add    eax,0x5c
c0006aaf:	e8 17 f5 ff ff       	call   c0005fcb <isjoliet>
c0006ab4:	a3 b4 6e 02 c0       	mov    ds:0xc0026eb4,eax
c0006ab9:	85 c0                	test   eax,eax
c0006abb:	74 e0                	je     c0006a9d <init_percd+0x57>
c0006abd:	eb 3e                	jmp    c0006afd <init_percd+0xb7>
c0006abf:	83 3d b4 6e 02 c0 00 	cmp    DWORD PTR ds:0xc0026eb4,0x0
c0006ac6:	75 35                	jne    c0006afd <init_percd+0xb7>
c0006ac8:	a1 ac 6e 02 c0       	mov    eax,ds:0xc0026eac
c0006acd:	83 c0 10             	add    eax,0x10
c0006ad0:	e8 2b f7 ff ff       	call   c0006200 <biread>
c0006ad5:	89 c6                	mov    esi,eax
c0006ad7:	85 c0                	test   eax,eax
c0006ad9:	78 5f                	js     c0006b3a <init_percd+0xf4>
c0006adb:	83 cb ff             	or     ebx,0xffffffff
c0006ade:	50                   	push   eax
c0006adf:	8b 04 b5 80 60 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffd9f80]
c0006ae6:	6a 06                	push   0x6
c0006ae8:	83 c0 04             	add    eax,0x4
c0006aeb:	68 cc 0b 02 c0       	push   0xc0020bcc
c0006af0:	50                   	push   eax
c0006af1:	e8 8a 98 ff ff       	call   c0000380 <memcmp>
c0006af6:	83 c4 10             	add    esp,0x10
c0006af9:	85 c0                	test   eax,eax
c0006afb:	75 3d                	jne    c0006b3a <init_percd+0xf4>
c0006afd:	8b 34 b5 80 60 02 c0 	mov    esi,DWORD PTR [esi*4-0x3ffd9f80]
c0006b04:	bf 80 6e 02 c0       	mov    edi,0xc0026e80
c0006b09:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006b0f:	b9 22 00 00 00       	mov    ecx,0x22
c0006b14:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006b16:	b8 82 6e 02 c0       	mov    eax,0xc0026e82
c0006b1b:	31 db                	xor    ebx,ebx
c0006b1d:	e8 dc f4 ff ff       	call   c0005ffe <iso_733>
c0006b22:	a3 a8 6e 02 c0       	mov    ds:0xc0026ea8,eax
c0006b27:	b8 8a 6e 02 c0       	mov    eax,0xc0026e8a
c0006b2c:	e8 cd f4 ff ff       	call   c0005ffe <iso_733>
c0006b31:	a3 a4 6e 02 c0       	mov    ds:0xc0026ea4,eax
c0006b36:	eb 02                	jmp    c0006b3a <init_percd+0xf4>
c0006b38:	89 c3                	mov    ebx,eax
c0006b3a:	89 d8                	mov    eax,ebx
c0006b3c:	5b                   	pop    ebx
c0006b3d:	5e                   	pop    esi
c0006b3e:	5f                   	pop    edi
c0006b3f:	c3                   	ret    

c0006b40 <iso_ioctl>:
c0006b40:	83 ec 18             	sub    esp,0x18
c0006b43:	68 d3 0b 02 c0       	push   0xc0020bd3
c0006b48:	e8 cb 39 01 00       	call   c001a518 <iso_kprintf>
c0006b4d:	e8 d7 fe ff ff       	call   c0006a29 <iso_reset>
c0006b52:	31 c0                	xor    eax,eax
c0006b54:	83 c4 1c             	add    esp,0x1c
c0006b57:	c3                   	ret    

c0006b58 <fs_iso9660_init>:
c0006b58:	53                   	push   ebx
c0006b59:	31 db                	xor    ebx,ebx
c0006b5b:	83 ec 14             	sub    esp,0x14
c0006b5e:	68 de 0b 02 c0       	push   0xc0020bde
c0006b63:	e8 b0 39 01 00       	call   c001a518 <iso_kprintf>
c0006b68:	83 c4 0c             	add    esp,0xc
c0006b6b:	68 40 09 00 00       	push   0x940
c0006b70:	6a 00                	push   0x0
c0006b72:	68 40 65 02 c0       	push   0xc0026540
c0006b77:	e8 74 99 ff ff       	call   c00004f0 <memset>
c0006b7c:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006b83:	c7 05 40 65 02 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0026540,0xffffffff
c0006b8d:	e8 54 0f 00 00       	call   c0007ae6 <malloc>
c0006b92:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006b99:	a3 b0 6e 02 c0       	mov    ds:0xc0026eb0,eax
c0006b9e:	e8 43 0f 00 00       	call   c0007ae6 <malloc>
c0006ba3:	83 c4 10             	add    esp,0x10
c0006ba6:	a3 20 65 02 c0       	mov    ds:0xc0026520,eax
c0006bab:	83 ec 0c             	sub    esp,0xc
c0006bae:	68 04 08 00 00       	push   0x804
c0006bb3:	e8 2e 0f 00 00       	call   c0007ae6 <malloc>
c0006bb8:	89 04 9d 80 60 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd9f80],eax
c0006bbf:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006bc5:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006bcc:	e8 15 0f 00 00       	call   c0007ae6 <malloc>
c0006bd1:	83 c4 10             	add    esp,0x10
c0006bd4:	89 04 9d 20 60 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd9fe0],eax
c0006bdb:	43                   	inc    ebx
c0006bdc:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006be2:	83 fb 10             	cmp    ebx,0x10
c0006be5:	75 c4                	jne    c0006bab <fs_iso9660_init+0x53>
c0006be7:	31 c0                	xor    eax,eax
c0006be9:	83 c4 08             	add    esp,0x8
c0006bec:	5b                   	pop    ebx
c0006bed:	c3                   	ret    

c0006bee <fs_iso9660_shutdown>:
c0006bee:	53                   	push   ebx
c0006bef:	31 db                	xor    ebx,ebx
c0006bf1:	83 ec 08             	sub    esp,0x8
c0006bf4:	83 ec 0c             	sub    esp,0xc
c0006bf7:	ff 34 9d 80 60 02 c0 	push   DWORD PTR [ebx*4-0x3ffd9f80]
c0006bfe:	e8 f3 0e 00 00       	call   c0007af6 <free>
c0006c03:	58                   	pop    eax
c0006c04:	ff 34 9d 20 60 02 c0 	push   DWORD PTR [ebx*4-0x3ffd9fe0]
c0006c0b:	43                   	inc    ebx
c0006c0c:	e8 e5 0e 00 00       	call   c0007af6 <free>
c0006c11:	83 c4 10             	add    esp,0x10
c0006c14:	83 fb 10             	cmp    ebx,0x10
c0006c17:	75 db                	jne    c0006bf4 <fs_iso9660_shutdown+0x6>
c0006c19:	a1 b0 6e 02 c0       	mov    eax,ds:0xc0026eb0
c0006c1e:	85 c0                	test   eax,eax
c0006c20:	74 0c                	je     c0006c2e <fs_iso9660_shutdown+0x40>
c0006c22:	83 ec 0c             	sub    esp,0xc
c0006c25:	50                   	push   eax
c0006c26:	e8 cb 0e 00 00       	call   c0007af6 <free>
c0006c2b:	83 c4 10             	add    esp,0x10
c0006c2e:	a1 20 65 02 c0       	mov    eax,ds:0xc0026520
c0006c33:	85 c0                	test   eax,eax
c0006c35:	74 0c                	je     c0006c43 <fs_iso9660_shutdown+0x55>
c0006c37:	83 ec 0c             	sub    esp,0xc
c0006c3a:	50                   	push   eax
c0006c3b:	e8 b6 0e 00 00       	call   c0007af6 <free>
c0006c40:	83 c4 10             	add    esp,0x10
c0006c43:	c7 05 20 65 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026520,0x0
c0006c4d:	c7 05 b0 6e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026eb0,0x0
c0006c57:	31 c0                	xor    eax,eax
c0006c59:	83 c4 08             	add    esp,0x8
c0006c5c:	5b                   	pop    ebx
c0006c5d:	c3                   	ret    

c0006c5e <Computer::close(int, int, void*)>:
c0006c5e:	57                   	push   edi
c0006c5f:	56                   	push   esi
c0006c60:	53                   	push   ebx
c0006c61:	83 ec 1c             	sub    esp,0x1c
c0006c64:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0006c68:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006c6c:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0006c70:	68 ef 0b 02 c0       	push   0xc0020bef
c0006c75:	e8 fb 3c 00 00       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c0006c7a:	e8 69 a2 00 00       	call   c0010ee8 <KeExecuteAtexit()>
c0006c7f:	c7 04 24 fd 0b 02 c0 	mov    DWORD PTR [esp],0xc0020bfd
c0006c86:	e8 ea 3c 00 00       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c0006c8b:	58                   	pop    eax
c0006c8c:	8b 97 68 01 00 00    	mov    edx,DWORD PTR [edi+0x168]
c0006c92:	52                   	push   edx
c0006c93:	e8 7c 5e 00 00       	call   c000cb14 <Device::closeAll()>
c0006c98:	c7 04 24 0a 0c 02 c0 	mov    DWORD PTR [esp],0xc0020c0a
c0006c9f:	e8 d1 3c 00 00       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c0006ca4:	8b 87 68 01 00 00    	mov    eax,DWORD PTR [edi+0x168]
c0006caa:	8b 10                	mov    edx,DWORD PTR [eax]
c0006cac:	56                   	push   esi
c0006cad:	68 0f 27 00 00       	push   0x270f
c0006cb2:	53                   	push   ebx
c0006cb3:	50                   	push   eax
c0006cb4:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0006cb7:	83 c4 14             	add    esp,0x14
c0006cba:	56                   	push   esi
c0006cbb:	68 0f 27 00 00       	push   0x270f
c0006cc0:	53                   	push   ebx
c0006cc1:	50                   	push   eax
c0006cc2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0006cc6:	68 30 0d 02 c0       	push   0xc0020d30
c0006ccb:	e8 a5 3c 00 00       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c0006cd0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0006cd4:	83 c4 30             	add    esp,0x30
c0006cd7:	5b                   	pop    ebx
c0006cd8:	5e                   	pop    esi
c0006cd9:	5f                   	pop    edi
c0006cda:	c3                   	ret    

c0006cdb <Krnl::firstTask()>:
c0006cdb:	53                   	push   ebx
c0006cdc:	83 ec 14             	sub    esp,0x14
c0006cdf:	fb                   	sti    
c0006ce0:	68 19 0c 02 c0       	push   0xc0020c19
c0006ce5:	e8 dd a2 00 00       	call   c0010fc7 <KeSetBootMessage(char const*)>
c0006cea:	c7 04 24 24 07 00 00 	mov    DWORD PTR [esp],0x724
c0006cf1:	e8 f0 0d 00 00       	call   c0007ae6 <malloc>
c0006cf6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0006cfd:	89 c3                	mov    ebx,eax
c0006cff:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0006d04:	50                   	push   eax
c0006d05:	68 32 0c 02 c0       	push   0xc0020c32
c0006d0a:	6a 01                	push   0x1
c0006d0c:	53                   	push   ebx
c0006d0d:	e8 26 f0 00 00       	call   c0015d38 <Process::Process(bool, char const*, Process*, char**)>
c0006d12:	83 c4 20             	add    esp,0x20
c0006d15:	68 ff 00 00 00       	push   0xff
c0006d1a:	6a 00                	push   0x0
c0006d1c:	68 2f 75 00 c0       	push   0xc000752f
c0006d21:	53                   	push   ebx
c0006d22:	e8 35 f2 00 00       	call   c0015f5c <Process::createThread(void (*)(void*), void*, int)>
c0006d27:	8b 15 f0 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6f0
c0006d2d:	6a 7a                	push   0x7a
c0006d2f:	6a 00                	push   0x0
c0006d31:	68 44 6a 01 c0       	push   0xc0016a44
c0006d36:	52                   	push   edx
c0006d37:	e8 20 f2 00 00       	call   c0015f5c <Process::createThread(void (*)(void*), void*, int)>
c0006d3c:	83 c4 14             	add    esp,0x14
c0006d3f:	a3 a8 c6 02 c0       	mov    ds:0xc002c6a8,eax
c0006d44:	68 58 0d 02 c0       	push   0xc0020d58
c0006d49:	e8 79 a2 00 00       	call   c0010fc7 <KeSetBootMessage(char const*)>
c0006d4e:	c6 05 bd 6e 02 c0 01 	mov    BYTE PTR ds:0xc0026ebd,0x1
c0006d55:	e8 26 ab 00 00       	call   c0011880 <KeInitRand()>
c0006d5a:	e8 08 01 01 00       	call   c0016e67 <Vm::initialise8086()>
c0006d5f:	e8 f6 4a 00 00       	call   c000b85a <Fs::initVFS()>
c0006d64:	c7 04 24 3f 0c 02 c0 	mov    DWORD PTR [esp],0xc0020c3f
c0006d6b:	e8 57 a2 00 00       	call   c0010fc7 <KeSetBootMessage(char const*)>
c0006d70:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0006d75:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006d7b:	8b 10                	mov    edx,DWORD PTR [eax]
c0006d7d:	6a 00                	push   0x0
c0006d7f:	6a 00                	push   0x0
c0006d81:	6a 00                	push   0x0
c0006d83:	50                   	push   eax
c0006d84:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0006d87:	83 c4 14             	add    esp,0x14
c0006d8a:	68 58 0d 02 c0       	push   0xc0020d58
c0006d8f:	e8 33 a2 00 00       	call   c0010fc7 <KeSetBootMessage(char const*)>
c0006d94:	e8 5b 42 00 00       	call   c000aff4 <KeInitialiseSymlinks()>
c0006d99:	e8 8c a7 00 00       	call   c001152a <KeLoadSystemEnv()>
c0006d9e:	e8 e9 a9 00 00       	call   c001178c <KeSetupPowerManager()>
c0006da3:	83 c4 0c             	add    esp,0xc
c0006da6:	6a 3a                	push   0x3a
c0006da8:	68 59 0c 02 c0       	push   0xc0020c59
c0006dad:	68 62 0c 02 c0       	push   0xc0020c62
c0006db2:	e8 59 d1 00 00       	call   c0013f10 <Reg::readIntWithDefault(char*, char*, int)>
c0006db7:	89 04 24             	mov    DWORD PTR [esp],eax
c0006dba:	e8 b5 56 00 00       	call   c000c474 <User::loadClockSettings(int)>
c0006dbf:	c7 04 24 7c 0d 02 c0 	mov    DWORD PTR [esp],0xc0020d7c
c0006dc6:	e8 fc a1 00 00       	call   c0010fc7 <KeSetBootMessage(char const*)>
c0006dcb:	59                   	pop    ecx
c0006dcc:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0006dd1:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c0006dd7:	53                   	push   ebx
c0006dd8:	e8 35 5d 00 00       	call   c000cb12 <Device::loadDriversForAll()>
c0006ddd:	c7 04 24 6a 0c 02 c0 	mov    DWORD PTR [esp],0xc0020c6a
c0006de4:	e8 de a1 00 00       	call   c0010fc7 <KeSetBootMessage(char const*)>
c0006de9:	58                   	pop    eax
c0006dea:	8b 1d b8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb8
c0006df0:	5a                   	pop    edx
c0006df1:	6a 01                	push   0x1
c0006df3:	68 7b 0c 02 c0       	push   0xc0020c7b
c0006df8:	e8 50 e9 00 00       	call   c001574d <Thr::loadDLL(char const*, bool)>
c0006dfd:	59                   	pop    ecx
c0006dfe:	5a                   	pop    edx
c0006dff:	53                   	push   ebx
c0006e00:	50                   	push   eax
c0006e01:	e8 78 eb 00 00       	call   c001597e <Thr::executeDLL(unsigned long, void*)>
c0006e06:	83 c4 10             	add    esp,0x10
c0006e09:	83 ec 0c             	sub    esp,0xc
c0006e0c:	6a 02                	push   0x2
c0006e0e:	e8 ad f5 00 00       	call   c00163c0 <blockTask(TaskState)>
c0006e13:	83 c4 10             	add    esp,0x10
c0006e16:	eb f1                	jmp    c0006e09 <Krnl::firstTask()+0x12e>

c0006e18 <Computer::Computer()>:
c0006e18:	83 ec 0c             	sub    esp,0xc
c0006e1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e1f:	83 ec 08             	sub    esp,0x8
c0006e22:	68 97 0c 02 c0       	push   0xc0020c97
c0006e27:	50                   	push   eax
c0006e28:	e8 61 5d 00 00       	call   c000cb8e <Device::Device(char const*)>
c0006e2d:	83 c4 10             	add    esp,0x10
c0006e30:	ba c8 0d 02 c0       	mov    edx,0xc0020dc8
c0006e35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e39:	89 10                	mov    DWORD PTR [eax],edx
c0006e3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e3f:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0006e49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e4d:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0006e57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e5b:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0006e61:	83 ca 04             	or     edx,0x4
c0006e64:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0006e6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e6e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e74:	0f b6 d0             	movzx  edx,al
c0006e77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e7b:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0006e82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e86:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e8c:	0f b6 d0             	movzx  edx,al
c0006e8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e93:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0006e98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e9c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006ea2:	8d 50 01             	lea    edx,[eax+0x1]
c0006ea5:	88 d1                	mov    cl,dl
c0006ea7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006eab:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c0006eb1:	0f b6 d0             	movzx  edx,al
c0006eb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006eb8:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0006ebc:	83 e1 3f             	and    ecx,0x3f
c0006ebf:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0006ec3:	90                   	nop
c0006ec4:	83 c4 0c             	add    esp,0xc
c0006ec7:	c3                   	ret    

c0006ec8 <Computer::setBootMessage(char const*)>:
c0006ec8:	c3                   	ret    
c0006ec9:	90                   	nop

c0006eca <Computer::detectFeatures()>:
c0006eca:	55                   	push   ebp
c0006ecb:	57                   	push   edi
c0006ecc:	56                   	push   esi
c0006ecd:	53                   	push   ebx
c0006ece:	83 ec 1c             	sub    esp,0x1c
c0006ed1:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006ed5:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0006edb:	81 e2 04 00 fc ff    	and    edx,0xfffc0004
c0006ee1:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0006ee7:	e8 0d 93 ff ff       	call   c00001f9 <detectCPUID>
c0006eec:	31 d2                	xor    edx,edx
c0006eee:	85 c0                	test   eax,eax
c0006ef0:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006ef6:	0f 95 c2             	setne  dl
c0006ef9:	83 e0 fd             	and    eax,0xfffffffd
c0006efc:	d1 e2                	shl    edx,1
c0006efe:	09 d0                	or     eax,edx
c0006f00:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f06:	a8 02                	test   al,0x2
c0006f08:	75 51                	jne    c0006f5b <Computer::detectFeatures()+0x91>
c0006f0a:	f6 05 d1 6e 02 c0 04 	test   BYTE PTR ds:0xc0026ed1,0x4
c0006f11:	74 0f                	je     c0006f22 <Computer::detectFeatures()+0x58>
c0006f13:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f19:	83 e0 fb             	and    eax,0xfffffffb
c0006f1c:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f22:	e8 bf 85 01 00       	call   c001f4e6 <x87Detect>
c0006f27:	83 e0 01             	and    eax,0x1
c0006f2a:	c1 e0 04             	shl    eax,0x4
c0006f2d:	89 c2                	mov    edx,eax
c0006f2f:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f35:	83 e0 ef             	and    eax,0xffffffef
c0006f38:	09 d0                	or     eax,edx
c0006f3a:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f40:	88 c2                	mov    dl,al
c0006f42:	a8 10                	test   al,0x10
c0006f44:	0f 85 33 01 00 00    	jne    c000707d <Computer::detectFeatures()+0x1b3>
c0006f4a:	80 e2 80             	and    dl,0x80
c0006f4d:	0f 85 4c 01 00 00    	jne    c000709f <Computer::detectFeatures()+0x1d5>
c0006f53:	83 c4 1c             	add    esp,0x1c
c0006f56:	5b                   	pop    ebx
c0006f57:	5e                   	pop    esi
c0006f58:	5f                   	pop    edi
c0006f59:	5d                   	pop    ebp
c0006f5a:	c3                   	ret    
c0006f5b:	83 ec 0c             	sub    esp,0xc
c0006f5e:	6a 20                	push   0x20
c0006f60:	e8 9b 94 00 00       	call   c0010400 <CPU::cpuidCheckEDX(unsigned int)>
c0006f65:	83 e0 01             	and    eax,0x1
c0006f68:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0006f6f:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f75:	83 e0 f7             	and    eax,0xfffffff7
c0006f78:	09 d0                	or     eax,edx
c0006f7a:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f80:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0006f87:	e8 74 94 00 00       	call   c0010400 <CPU::cpuidCheckEDX(unsigned int)>
c0006f8c:	89 c2                	mov    edx,eax
c0006f8e:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006f94:	83 e2 01             	and    edx,0x1
c0006f97:	83 e0 fe             	and    eax,0xfffffffe
c0006f9a:	09 d0                	or     eax,edx
c0006f9c:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006fa2:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0006fa9:	e8 52 94 00 00       	call   c0010400 <CPU::cpuidCheckEDX(unsigned int)>
c0006fae:	89 c2                	mov    edx,eax
c0006fb0:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006fb6:	c1 e2 07             	shl    edx,0x7
c0006fb9:	83 e0 7f             	and    eax,0x7f
c0006fbc:	09 d0                	or     eax,edx
c0006fbe:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006fc4:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0006fcb:	e8 30 94 00 00       	call   c0010400 <CPU::cpuidCheckEDX(unsigned int)>
c0006fd0:	83 c4 10             	add    esp,0x10
c0006fd3:	83 e0 01             	and    eax,0x1
c0006fd6:	c1 e0 05             	shl    eax,0x5
c0006fd9:	89 c2                	mov    edx,eax
c0006fdb:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006fe1:	83 e0 df             	and    eax,0xffffffdf
c0006fe4:	09 d0                	or     eax,edx
c0006fe6:	f7 05 d0 6e 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0026ed0,0x401
c0006ff0:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006ff6:	0f 84 c9 00 00 00    	je     c00070c5 <Computer::detectFeatures()+0x1fb>
c0006ffc:	83 e0 fe             	and    eax,0xfffffffe
c0006fff:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0007005:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c000700b:	89 c2                	mov    edx,eax
c000700d:	83 e2 09             	and    edx,0x9
c0007010:	83 fa 01             	cmp    edx,0x1
c0007013:	75 09                	jne    c000701e <Computer::detectFeatures()+0x154>
c0007015:	83 e0 fe             	and    eax,0xfffffffe
c0007018:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c000701e:	83 ec 0c             	sub    esp,0xc
c0007021:	8d 44 24 18          	lea    eax,[esp+0x18]
c0007025:	50                   	push   eax
c0007026:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000702a:	55                   	push   ebp
c000702b:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000702f:	57                   	push   edi
c0007030:	8d 74 24 18          	lea    esi,[esp+0x18]
c0007034:	56                   	push   esi
c0007035:	68 00 00 00 80       	push   0x80000000
c000703a:	e8 3d 93 00 00       	call   c001037c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000703f:	83 c4 20             	add    esp,0x20
c0007042:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c0007049:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000704d:	0f 86 b7 fe ff ff    	jbe    c0006f0a <Computer::detectFeatures()+0x40>
c0007053:	83 ec 0c             	sub    esp,0xc
c0007056:	50                   	push   eax
c0007057:	55                   	push   ebp
c0007058:	57                   	push   edi
c0007059:	56                   	push   esi
c000705a:	68 01 00 00 80       	push   0x80000001
c000705f:	e8 18 93 00 00       	call   c001037c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0007064:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c000706a:	83 c4 20             	add    esp,0x20
c000706d:	25 bf ff fc ff       	and    eax,0xfffcffbf
c0007072:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0007078:	e9 8d fe ff ff       	jmp    c0006f0a <Computer::detectFeatures()+0x40>
c000707d:	e8 1e 84 01 00       	call   c001f4a0 <absolutelyNoChanceInHell>
c0007082:	8a 93 6c 01 00 00    	mov    dl,BYTE PTR [ebx+0x16c]
c0007088:	c1 e0 07             	shl    eax,0x7
c000708b:	83 e2 7f             	and    edx,0x7f
c000708e:	09 c2                	or     edx,eax
c0007090:	88 93 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],dl
c0007096:	80 e2 80             	and    dl,0x80
c0007099:	0f 84 b4 fe ff ff    	je     c0006f53 <Computer::detectFeatures()+0x89>
c000709f:	e8 6c 80 01 00       	call   c001f110 <avxDetect>
c00070a4:	83 e0 01             	and    eax,0x1
c00070a7:	c1 e0 05             	shl    eax,0x5
c00070aa:	89 c2                	mov    edx,eax
c00070ac:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c00070b2:	83 e0 df             	and    eax,0xffffffdf
c00070b5:	09 d0                	or     eax,edx
c00070b7:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c00070bd:	83 c4 1c             	add    esp,0x1c
c00070c0:	5b                   	pop    ebx
c00070c1:	5e                   	pop    esi
c00070c2:	5f                   	pop    edi
c00070c3:	5d                   	pop    ebp
c00070c4:	c3                   	ret    
c00070c5:	83 ec 0c             	sub    esp,0xc
c00070c8:	68 00 02 00 00       	push   0x200
c00070cd:	e8 2e 93 00 00       	call   c0010400 <CPU::cpuidCheckEDX(unsigned int)>
c00070d2:	83 c4 10             	add    esp,0x10
c00070d5:	89 c2                	mov    edx,eax
c00070d7:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c00070dd:	83 e2 01             	and    edx,0x1
c00070e0:	83 e0 fe             	and    eax,0xfffffffe
c00070e3:	09 d0                	or     eax,edx
c00070e5:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00070eb:	e9 15 ff ff ff       	jmp    c0007005 <Computer::detectFeatures()+0x13b>

c00070f0 <Computer::displayFeatures()>:
c00070f0:	c3                   	ret    
c00070f1:	90                   	nop

c00070f2 <Computer::rdmsr(unsigned int)>:
c00070f2:	83 ec 0c             	sub    esp,0xc
c00070f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00070f9:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0007100:	74 0a                	je     c000710c <Computer::rdmsr(unsigned int)+0x1a>
c0007102:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007106:	0f 32                	rdmsr  
c0007108:	83 c4 0c             	add    esp,0xc
c000710b:	c3                   	ret    
c000710c:	83 ec 0c             	sub    esp,0xc
c000710f:	68 a0 0c 02 c0       	push   0xc0020ca0
c0007114:	e8 ae a5 00 00       	call   c00116c7 <KePanic(char const*)>
c0007119:	83 c4 10             	add    esp,0x10
c000711c:	eb e4                	jmp    c0007102 <Computer::rdmsr(unsigned int)+0x10>

c000711e <Computer::wrmsr(unsigned int, unsigned long long)>:
c000711e:	57                   	push   edi
c000711f:	56                   	push   esi
c0007120:	83 ec 04             	sub    esp,0x4
c0007123:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007127:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000712b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000712f:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0007136:	74 10                	je     c0007148 <Computer::wrmsr(unsigned int, unsigned long long)+0x2a>
c0007138:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000713c:	89 f0                	mov    eax,esi
c000713e:	89 fa                	mov    edx,edi
c0007140:	0f 30                	wrmsr  
c0007142:	83 c4 04             	add    esp,0x4
c0007145:	5e                   	pop    esi
c0007146:	5f                   	pop    edi
c0007147:	c3                   	ret    
c0007148:	83 ec 0c             	sub    esp,0xc
c000714b:	68 a6 0c 02 c0       	push   0xc0020ca6
c0007150:	e8 72 a5 00 00       	call   c00116c7 <KePanic(char const*)>
c0007155:	83 c4 10             	add    esp,0x10
c0007158:	eb de                	jmp    c0007138 <Computer::wrmsr(unsigned int, unsigned long long)+0x1a>

c000715a <Computer::shutdown()>:
c000715a:	83 ec 0c             	sub    esp,0xc
c000715d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007161:	8b 10                	mov    edx,DWORD PTR [eax]
c0007163:	6a 00                	push   0x0
c0007165:	6a 00                	push   0x0
c0007167:	6a 00                	push   0x0
c0007169:	50                   	push   eax
c000716a:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000716d:	83 c4 1c             	add    esp,0x1c
c0007170:	c3                   	ret    
c0007171:	90                   	nop

c0007172 <Computer::restart()>:
c0007172:	83 ec 0c             	sub    esp,0xc
c0007175:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007179:	8b 10                	mov    edx,DWORD PTR [eax]
c000717b:	6a 00                	push   0x0
c000717d:	6a 00                	push   0x0
c000717f:	6a 01                	push   0x1
c0007181:	50                   	push   eax
c0007182:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0007185:	83 c4 1c             	add    esp,0x1c
c0007188:	c3                   	ret    
c0007189:	90                   	nop

c000718a <Computer::sleep()>:
c000718a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000718e:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0007194:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0007198:	e9 7b 8c 00 00       	jmp    c000fe18 <ACPI::sleep()>
c000719d:	90                   	nop

c000719e <Computer::nmiEnabled()>:
c000719e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00071a2:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c00071a8:	c3                   	ret    
c00071a9:	90                   	nop

c00071aa <Computer::readCMOS(unsigned char)>:
c00071aa:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00071ae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00071b2:	80 ba 58 01 00 00 00 	cmp    BYTE PTR [edx+0x158],0x0
c00071b9:	75 09                	jne    c00071c4 <Computer::readCMOS(unsigned char)+0x1a>
c00071bb:	b2 80                	mov    dl,0x80
c00071bd:	09 d0                	or     eax,edx
c00071bf:	e6 70                	out    0x70,al
c00071c1:	e4 71                	in     al,0x71
c00071c3:	c3                   	ret    
c00071c4:	31 d2                	xor    edx,edx
c00071c6:	eb f5                	jmp    c00071bd <Computer::readCMOS(unsigned char)+0x13>

c00071c8 <Computer::enableNMI(bool)>:
c00071c8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00071cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00071d0:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c00071d6:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c00071de:	eb ca                	jmp    c00071aa <Computer::readCMOS(unsigned char)>

c00071e0 <Computer::open(int, int, void*)>:
c00071e0:	56                   	push   esi
c00071e1:	53                   	push   ebx
c00071e2:	83 ec 10             	sub    esp,0x10
c00071e5:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00071e9:	f6 05 d0 6e 02 c0 04 	test   BYTE PTR ds:0xc0026ed0,0x4
c00071f0:	68 ac 0c 02 c0       	push   0xc0020cac
c00071f5:	0f 94 05 00 38 02 c0 	sete   BYTE PTR ds:0xc0023800
c00071fc:	e8 c6 9d 00 00       	call   c0010fc7 <KeSetBootMessage(char const*)>
c0007201:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c0007208:	e8 d9 08 00 00       	call   c0007ae6 <malloc>
c000720d:	89 04 24             	mov    DWORD PTR [esp],eax
c0007210:	89 c6                	mov    esi,eax
c0007212:	e8 75 87 00 00       	call   c000f98c <ACPI::ACPI()>
c0007217:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c000721d:	58                   	pop    eax
c000721e:	5a                   	pop    edx
c000721f:	56                   	push   esi
c0007220:	53                   	push   ebx
c0007221:	e8 d0 57 00 00       	call   c000c9f6 <Device::addChild(Device*)>
c0007226:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007229:	e8 9c fc ff ff       	call   c0006eca <Computer::detectFeatures()>
c000722e:	59                   	pop    ecx
c000722f:	5e                   	pop    esi
c0007230:	6a 01                	push   0x1
c0007232:	53                   	push   ebx
c0007233:	e8 90 ff ff ff       	call   c00071c8 <Computer::enableNMI(bool)>
c0007238:	c7 04 24 c4 0c 02 c0 	mov    DWORD PTR [esp],0xc0020cc4
c000723f:	e8 83 9d 00 00       	call   c0010fc7 <KeSetBootMessage(char const*)>
c0007244:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c000724b:	e8 96 08 00 00       	call   c0007ae6 <malloc>
c0007250:	89 04 24             	mov    DWORD PTR [esp],eax
c0007253:	89 c6                	mov    esi,eax
c0007255:	e8 5e 92 00 00       	call   c00104b8 <CPU::CPU()>
c000725a:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c0007260:	58                   	pop    eax
c0007261:	5a                   	pop    edx
c0007262:	56                   	push   esi
c0007263:	53                   	push   ebx
c0007264:	e8 8d 57 00 00       	call   c000c9f6 <Device::addChild(Device*)>
c0007269:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000726f:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0007273:	8b 10                	mov    edx,DWORD PTR [eax]
c0007275:	51                   	push   ecx
c0007276:	6a 00                	push   0x0
c0007278:	6a 00                	push   0x0
c000727a:	50                   	push   eax
c000727b:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000727e:	83 c4 14             	add    esp,0x14
c0007281:	68 9c 0d 02 c0       	push   0xc0020d9c
c0007286:	e8 3c 9d 00 00       	call   c0010fc7 <KeSetBootMessage(char const*)>
c000728b:	e8 14 0e 01 00       	call   c00180a4 <HalInitialiseCoprocessor()>
c0007290:	c7 04 24 de 0c 02 c0 	mov    DWORD PTR [esp],0xc0020cde
c0007297:	e8 2b 9d 00 00       	call   c0010fc7 <KeSetBootMessage(char const*)>
c000729c:	c7 04 24 db 6c 00 c0 	mov    DWORD PTR [esp],0xc0006cdb
c00072a3:	e8 e0 ed 00 00       	call   c0016088 <setupMultitasking(void (*)())>
c00072a8:	83 c4 14             	add    esp,0x14
c00072ab:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00072b0:	5b                   	pop    ebx
c00072b1:	5e                   	pop    esi
c00072b2:	c3                   	ret    
c00072b3:	90                   	nop

c00072b4 <Computer::disableNMI()>:
c00072b4:	6a 00                	push   0x0
c00072b6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00072ba:	50                   	push   eax
c00072bb:	e8 08 ff ff ff       	call   c00071c8 <Computer::enableNMI(bool)>
c00072c0:	5a                   	pop    edx
c00072c1:	59                   	pop    ecx
c00072c2:	c3                   	ret    
c00072c3:	90                   	nop

c00072c4 <Computer::writeCMOS(unsigned char, unsigned char)>:
c00072c4:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00072c8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00072cc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00072d0:	80 b9 58 01 00 00 00 	cmp    BYTE PTR [ecx+0x158],0x0
c00072d7:	75 0b                	jne    c00072e4 <Computer::writeCMOS(unsigned char, unsigned char)+0x20>
c00072d9:	b1 80                	mov    cl,0x80
c00072db:	09 c8                	or     eax,ecx
c00072dd:	e6 70                	out    0x70,al
c00072df:	88 d0                	mov    al,dl
c00072e1:	e6 71                	out    0x71,al
c00072e3:	c3                   	ret    
c00072e4:	31 c9                	xor    ecx,ecx
c00072e6:	eb f3                	jmp    c00072db <Computer::writeCMOS(unsigned char, unsigned char)+0x17>

c00072e8 <Computer::handleNMI()>:
c00072e8:	56                   	push   esi
c00072e9:	53                   	push   ebx
c00072ea:	83 ec 10             	sub    esp,0x10
c00072ed:	e4 92                	in     al,0x92
c00072ef:	89 c6                	mov    esi,eax
c00072f1:	e4 61                	in     al,0x61
c00072f3:	68 f9 0c 02 c0       	push   0xc0020cf9
c00072f8:	88 c3                	mov    bl,al
c00072fa:	e8 76 36 00 00       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c00072ff:	83 c4 10             	add    esp,0x10
c0007302:	83 e6 10             	and    esi,0x10
c0007305:	75 10                	jne    c0007317 <Computer::handleNMI()+0x2f>
c0007307:	f6 c3 40             	test   bl,0x40
c000730a:	75 20                	jne    c000732c <Computer::handleNMI()+0x44>
c000730c:	80 e3 80             	and    bl,0x80
c000730f:	75 30                	jne    c0007341 <Computer::handleNMI()+0x59>
c0007311:	83 c4 04             	add    esp,0x4
c0007314:	5b                   	pop    ebx
c0007315:	5e                   	pop    esi
c0007316:	c3                   	ret    
c0007317:	83 ec 0c             	sub    esp,0xc
c000731a:	68 0a 0d 02 c0       	push   0xc0020d0a
c000731f:	e8 a3 a3 00 00       	call   c00116c7 <KePanic(char const*)>
c0007324:	83 c4 10             	add    esp,0x10
c0007327:	f6 c3 40             	test   bl,0x40
c000732a:	74 e0                	je     c000730c <Computer::handleNMI()+0x24>
c000732c:	83 ec 0c             	sub    esp,0xc
c000732f:	68 17 0d 02 c0       	push   0xc0020d17
c0007334:	e8 8e a3 00 00       	call   c00116c7 <KePanic(char const*)>
c0007339:	83 c4 10             	add    esp,0x10
c000733c:	80 e3 80             	and    bl,0x80
c000733f:	74 d0                	je     c0007311 <Computer::handleNMI()+0x29>
c0007341:	c7 44 24 10 21 0d 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020d21
c0007349:	83 c4 04             	add    esp,0x4
c000734c:	5b                   	pop    ebx
c000734d:	5e                   	pop    esi
c000734e:	e9 74 a3 00 00       	jmp    c00116c7 <KePanic(char const*)>
c0007353:	90                   	nop

c0007354 <GDTEntry::setBase(unsigned int)>:
c0007354:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007358:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000735c:	89 c1                	mov    ecx,eax
c000735e:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0007362:	c1 e9 10             	shr    ecx,0x10
c0007365:	c1 e8 18             	shr    eax,0x18
c0007368:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000736b:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000736e:	c3                   	ret    
c000736f:	90                   	nop

c0007370 <GDTEntry::setLimit(unsigned int)>:
c0007370:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007374:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007378:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000737b:	66 89 01             	mov    WORD PTR [ecx],ax
c000737e:	83 e2 f0             	and    edx,0xfffffff0
c0007381:	c1 e8 10             	shr    eax,0x10
c0007384:	83 e0 0f             	and    eax,0xf
c0007387:	09 d0                	or     eax,edx
c0007389:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000738c:	c3                   	ret    
c000738d:	90                   	nop

c000738e <GDT::GDT()>:
c000738e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007392:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007398:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000739c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00073a2:	90                   	nop
c00073a3:	c3                   	ret    

c00073a4 <GDT::addEntry(GDTEntry)>:
c00073a4:	53                   	push   ebx
c00073a5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00073a9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00073ad:	8b 02                	mov    eax,DWORD PTR [edx]
c00073af:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00073b3:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c00073b7:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c00073bb:	8d 48 01             	lea    ecx,[eax+0x1]
c00073be:	c1 e0 03             	shl    eax,0x3
c00073c1:	89 0a                	mov    DWORD PTR [edx],ecx
c00073c3:	5b                   	pop    ebx
c00073c4:	c3                   	ret    
c00073c5:	90                   	nop

c00073c6 <GDT::getNumberOfEntries()>:
c00073c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00073ca:	8b 00                	mov    eax,DWORD PTR [eax]
c00073cc:	c3                   	ret    
c00073cd:	90                   	nop

c00073ce <GDT::flush()>:
c00073ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00073d2:	8b 10                	mov    edx,DWORD PTR [eax]
c00073d4:	83 c0 04             	add    eax,0x4
c00073d7:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c00073de:	a3 c2 6e 02 c0       	mov    ds:0xc0026ec2,eax
c00073e3:	66 89 15 c0 6e 02 c0 	mov    WORD PTR ds:0xc0026ec0,dx
c00073ea:	e9 6b 8f ff ff       	jmp    c000035a <loadGDT>
c00073ef:	90                   	nop

c00073f0 <GDT::setup()>:
c00073f0:	57                   	push   edi
c00073f1:	56                   	push   esi
c00073f2:	53                   	push   ebx
c00073f3:	83 ec 30             	sub    esp,0x30
c00073f6:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00073fa:	6a 00                	push   0x0
c00073fc:	8d 74 24 14          	lea    esi,[esp+0x14]
c0007400:	56                   	push   esi
c0007401:	e8 4e ff ff ff       	call   c0007354 <GDTEntry::setBase(unsigned int)>
c0007406:	6a 00                	push   0x0
c0007408:	56                   	push   esi
c0007409:	e8 62 ff ff ff       	call   c0007370 <GDTEntry::setLimit(unsigned int)>
c000740e:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c0007416:	6a 00                	push   0x0
c0007418:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c000741c:	56                   	push   esi
c000741d:	e8 32 ff ff ff       	call   c0007354 <GDTEntry::setBase(unsigned int)>
c0007422:	68 ff ff ff 00       	push   0xffffff
c0007427:	56                   	push   esi
c0007428:	e8 43 ff ff ff       	call   c0007370 <GDTEntry::setLimit(unsigned int)>
c000742d:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0007431:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0007435:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007439:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c000743d:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c0007442:	0d 00 9a c0 00       	or     eax,0xc09a00
c0007447:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000744b:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000744f:	89 f8                	mov    eax,edi
c0007451:	89 fa                	mov    edx,edi
c0007453:	80 e4 f7             	and    ah,0xf7
c0007456:	80 ce 60             	or     dh,0x60
c0007459:	89 c7                	mov    edi,eax
c000745b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000745f:	80 cc 60             	or     ah,0x60
c0007462:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0007466:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000746a:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000746e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007472:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007476:	83 c4 20             	add    esp,0x20
c0007479:	6a 00                	push   0x0
c000747b:	8d 44 24 24          	lea    eax,[esp+0x24]
c000747f:	50                   	push   eax
c0007480:	e8 cf fe ff ff       	call   c0007354 <GDTEntry::setBase(unsigned int)>
c0007485:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0007489:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000748d:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c0007491:	83 e0 3f             	and    eax,0x3f
c0007494:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c0007498:	6a 00                	push   0x0
c000749a:	8d 44 24 34          	lea    eax,[esp+0x34]
c000749e:	50                   	push   eax
c000749f:	e8 b0 fe ff ff       	call   c0007354 <GDTEntry::setBase(unsigned int)>
c00074a4:	8a 44 24 3e          	mov    al,BYTE PTR [esp+0x3e]
c00074a8:	83 e0 3f             	and    eax,0x3f
c00074ab:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c00074af:	83 c4 0c             	add    esp,0xc
c00074b2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074b6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074ba:	53                   	push   ebx
c00074bb:	e8 e4 fe ff ff       	call   c00073a4 <GDT::addEntry(GDTEntry)>
c00074c0:	83 c4 0c             	add    esp,0xc
c00074c3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00074c7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00074cb:	53                   	push   ebx
c00074cc:	e8 d3 fe ff ff       	call   c00073a4 <GDT::addEntry(GDTEntry)>
c00074d1:	83 c4 0c             	add    esp,0xc
c00074d4:	57                   	push   edi
c00074d5:	56                   	push   esi
c00074d6:	53                   	push   ebx
c00074d7:	e8 c8 fe ff ff       	call   c00073a4 <GDT::addEntry(GDTEntry)>
c00074dc:	83 c4 0c             	add    esp,0xc
c00074df:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00074e3:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00074e7:	53                   	push   ebx
c00074e8:	e8 b7 fe ff ff       	call   c00073a4 <GDT::addEntry(GDTEntry)>
c00074ed:	83 c4 0c             	add    esp,0xc
c00074f0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00074f4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00074f8:	53                   	push   ebx
c00074f9:	e8 a6 fe ff ff       	call   c00073a4 <GDT::addEntry(GDTEntry)>
c00074fe:	83 c4 0c             	add    esp,0xc
c0007501:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007505:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007509:	53                   	push   ebx
c000750a:	e8 95 fe ff ff       	call   c00073a4 <GDT::addEntry(GDTEntry)>
c000750f:	83 c4 0c             	add    esp,0xc
c0007512:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0007516:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000751a:	53                   	push   ebx
c000751b:	e8 84 fe ff ff       	call   c00073a4 <GDT::addEntry(GDTEntry)>
c0007520:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007523:	e8 a6 fe ff ff       	call   c00073ce <GDT::flush()>
c0007528:	83 c4 40             	add    esp,0x40
c000752b:	5b                   	pop    ebx
c000752c:	5e                   	pop    esi
c000752d:	5f                   	pop    edi
c000752e:	c3                   	ret    

c000752f <idleFunction(void*)>:
c000752f:	83 ec 0c             	sub    esp,0xc
c0007532:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0007537:	48                   	dec    eax
c0007538:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000753d:	75 01                	jne    c0007540 <idleFunction(void*)+0x11>
c000753f:	fb                   	sti    
c0007540:	e8 2b 08 01 00       	call   c0017d70 <HalSystemIdle()>
c0007545:	e8 58 85 01 00       	call   c001faa2 <idleCommon()>
c000754a:	eb f4                	jmp    c0007540 <idleFunction(void*)+0x11>

c000754c <IDTEntry::IDTEntry(bool)>:
c000754c:	53                   	push   ebx
c000754d:	83 ec 04             	sub    esp,0x4
c0007550:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007554:	88 04 24             	mov    BYTE PTR [esp],al
c0007557:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000755b:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c0007561:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007565:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0007569:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000756d:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007570:	83 e2 f0             	and    edx,0xfffffff0
c0007573:	83 ca 0e             	or     edx,0xe
c0007576:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007579:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000757d:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007580:	83 e2 ef             	and    edx,0xffffffef
c0007583:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007586:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c000758a:	85 c0                	test   eax,eax
c000758c:	74 06                	je     c0007594 <IDTEntry::IDTEntry(bool)+0x48>
c000758e:	b2 03                	mov    dl,0x3
c0007590:	eb 06                	jmp    c0007598 <IDTEntry::IDTEntry(bool)+0x4c>
c0007592:	66 90                	xchg   ax,ax
c0007594:	b2 00                	mov    dl,0x0
c0007596:	66 90                	xchg   ax,ax
c0007598:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000759c:	83 e2 03             	and    edx,0x3
c000759f:	89 d3                	mov    ebx,edx
c00075a1:	c1 e3 05             	shl    ebx,0x5
c00075a4:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c00075a7:	83 e2 9f             	and    edx,0xffffff9f
c00075aa:	88 d1                	mov    cl,dl
c00075ac:	88 da                	mov    dl,bl
c00075ae:	09 ca                	or     edx,ecx
c00075b0:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00075b3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00075b7:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c00075ba:	83 ca 80             	or     edx,0xffffff80
c00075bd:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00075c0:	90                   	nop
c00075c1:	83 c4 04             	add    esp,0x4
c00075c4:	5b                   	pop    ebx
c00075c5:	c3                   	ret    

c00075c6 <IDTEntry::setOffset(unsigned int)>:
c00075c6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00075ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00075ce:	66 89 02             	mov    WORD PTR [edx],ax
c00075d1:	c1 e8 10             	shr    eax,0x10
c00075d4:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c00075d8:	c3                   	ret    
c00075d9:	90                   	nop
c00075da:	66 90                	xchg   ax,ax

c00075dc <IDT::IDT()>:
c00075dc:	90                   	nop
c00075dd:	c3                   	ret    

c00075de <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c00075de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00075e2:	83 c0 30             	add    eax,0x30
c00075e5:	c3                   	ret    

c00075e6 <IDT::addEntry(IDTEntry, int)>:
c00075e6:	53                   	push   ebx
c00075e7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00075eb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00075ef:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00075f3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00075f7:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c00075fa:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c00075fe:	5b                   	pop    ebx
c00075ff:	c3                   	ret    

c0007600 <IDT::addEntry(int, void (*)(), bool)>:
c0007600:	53                   	push   ebx
c0007601:	83 ec 10             	sub    esp,0x10
c0007604:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c0007609:	50                   	push   eax
c000760a:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000760e:	53                   	push   ebx
c000760f:	e8 38 ff ff ff       	call   c000754c <IDTEntry::IDTEntry(bool)>
c0007614:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007618:	53                   	push   ebx
c0007619:	e8 a8 ff ff ff       	call   c00075c6 <IDTEntry::setOffset(unsigned int)>
c000761e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0007622:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007626:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000762a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000762e:	e8 b3 ff ff ff       	call   c00075e6 <IDT::addEntry(IDTEntry, int)>
c0007633:	83 c4 30             	add    esp,0x30
c0007636:	5b                   	pop    ebx
c0007637:	c3                   	ret    

c0007638 <IDT::flush()>:
c0007638:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000763c:	66 c7 05 c8 6e 02 c0 ff 07 	mov    WORD PTR ds:0xc0026ec8,0x7ff
c0007645:	a3 ca 6e 02 c0       	mov    ds:0xc0026eca,eax
c000764a:	0f 01 1d c8 6e 02 c0 	lidtd  ds:0xc0026ec8
c0007651:	c3                   	ret    

c0007652 <IDT::setup()>:
c0007652:	57                   	push   edi
c0007653:	56                   	push   esi
c0007654:	53                   	push   ebx
c0007655:	83 ec 10             	sub    esp,0x10
c0007658:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000765c:	6a 00                	push   0x0
c000765e:	68 a0 f1 01 c0       	push   0xc001f1a0
c0007663:	6a 00                	push   0x0
c0007665:	53                   	push   ebx
c0007666:	e8 95 ff ff ff       	call   c0007600 <IDT::addEntry(int, void (*)(), bool)>
c000766b:	6a 00                	push   0x0
c000766d:	68 b0 f1 01 c0       	push   0xc001f1b0
c0007672:	6a 01                	push   0x1
c0007674:	53                   	push   ebx
c0007675:	e8 86 ff ff ff       	call   c0007600 <IDT::addEntry(int, void (*)(), bool)>
c000767a:	83 c4 20             	add    esp,0x20
c000767d:	6a 00                	push   0x0
c000767f:	68 ba f1 01 c0       	push   0xc001f1ba
c0007684:	6a 02                	push   0x2
c0007686:	53                   	push   ebx
c0007687:	e8 74 ff ff ff       	call   c0007600 <IDT::addEntry(int, void (*)(), bool)>
c000768c:	6a 00                	push   0x0
c000768e:	68 c4 f1 01 c0       	push   0xc001f1c4
c0007693:	6a 03                	push   0x3
c0007695:	53                   	push   ebx
c0007696:	e8 65 ff ff ff       	call   c0007600 <IDT::addEntry(int, void (*)(), bool)>
c000769b:	83 c4 20             	add    esp,0x20
c000769e:	6a 00                	push   0x0
c00076a0:	68 ce f1 01 c0       	push   0xc001f1ce
c00076a5:	6a 04                	push   0x4
c00076a7:	53                   	push   ebx
c00076a8:	e8 53 ff ff ff       	call   c0007600 <IDT::addEntry(int, void (*)(), bool)>
c00076ad:	6a 00                	push   0x0
c00076af:	68 d8 f1 01 c0       	push   0xc001f1d8
c00076b4:	6a 05                	push   0x5
c00076b6:	53                   	push   ebx
c00076b7:	e8 44 ff ff ff       	call   c0007600 <IDT::addEntry(int, void (*)(), bool)>
c00076bc:	83 c4 20             	add    esp,0x20
c00076bf:	6a 00                	push   0x0
c00076c1:	68 e2 f1 01 c0       	push   0xc001f1e2
c00076c6:	6a 06                	push   0x6
c00076c8:	53                   	push   ebx
c00076c9:	e8 32 ff ff ff       	call   c0007600 <IDT::addEntry(int, void (*)(), bool)>
c00076ce:	6a 00                	push   0x0
c00076d0:	68 ec f1 01 c0       	push   0xc001f1ec
c00076d5:	6a 07                	push   0x7
c00076d7:	53                   	push   ebx
c00076d8:	e8 23 ff ff ff       	call   c0007600 <IDT::addEntry(int, void (*)(), bool)>
c00076dd:	83 c4 20             	add    esp,0x20
c00076e0:	6a 00                	push   0x0
c00076e2:	68 f6 f1 01 c0       	push   0xc001f1f6
c00076e7:	6a 08                	push   0x8
c00076e9:	53                   	push   ebx
c00076ea:	e8 11 ff ff ff       	call   c0007600 <IDT::addEntry(int, void (*)(), bool)>
c00076ef:	6a 00                	push   0x0
c00076f1:	68 fe f1 01 c0       	push   0xc001f1fe
c00076f6:	6a 09                	push   0x9
c00076f8:	53                   	push   ebx
c00076f9:	e8 02 ff ff ff       	call   c0007600 <IDT::addEntry(int, void (*)(), bool)>
c00076fe:	83 c4 20             	add    esp,0x20
c0007701:	6a 00                	push   0x0
c0007703:	68 08 f2 01 c0       	push   0xc001f208
c0007708:	6a 0a                	push   0xa
c000770a:	53                   	push   ebx
c000770b:	e8 f0 fe ff ff       	call   c0007600 <IDT::addEntry(int, void (*)(), bool)>
c0007710:	6a 00                	push   0x0
c0007712:	68 10 f2 01 c0       	push   0xc001f210
c0007717:	6a 0b                	push   0xb
c0007719:	53                   	push   ebx
c000771a:	e8 e1 fe ff ff       	call   c0007600 <IDT::addEntry(int, void (*)(), bool)>
c000771f:	83 c4 20             	add    esp,0x20
c0007722:	6a 00                	push   0x0
c0007724:	68 18 f2 01 c0       	push   0xc001f218
c0007729:	6a 0c                	push   0xc
c000772b:	53                   	push   ebx
c000772c:	e8 cf fe ff ff       	call   c0007600 <IDT::addEntry(int, void (*)(), bool)>
c0007731:	6a 00                	push   0x0
c0007733:	68 20 f2 01 c0       	push   0xc001f220
c0007738:	6a 0d                	push   0xd
c000773a:	53                   	push   ebx
c000773b:	e8 c0 fe ff ff       	call   c0007600 <IDT::addEntry(int, void (*)(), bool)>
c0007740:	83 c4 20             	add    esp,0x20
c0007743:	6a 00                	push   0x0
c0007745:	68 3a f2 01 c0       	push   0xc001f23a
c000774a:	6a 0e                	push   0xe
c000774c:	53                   	push   ebx
c000774d:	e8 ae fe ff ff       	call   c0007600 <IDT::addEntry(int, void (*)(), bool)>
c0007752:	6a 00                	push   0x0
c0007754:	68 42 f2 01 c0       	push   0xc001f242
c0007759:	6a 0f                	push   0xf
c000775b:	53                   	push   ebx
c000775c:	e8 9f fe ff ff       	call   c0007600 <IDT::addEntry(int, void (*)(), bool)>
c0007761:	83 c4 20             	add    esp,0x20
c0007764:	6a 00                	push   0x0
c0007766:	68 4c f2 01 c0       	push   0xc001f24c
c000776b:	6a 10                	push   0x10
c000776d:	53                   	push   ebx
c000776e:	e8 8d fe ff ff       	call   c0007600 <IDT::addEntry(int, void (*)(), bool)>
c0007773:	6a 00                	push   0x0
c0007775:	68 56 f2 01 c0       	push   0xc001f256
c000777a:	6a 11                	push   0x11
c000777c:	53                   	push   ebx
c000777d:	e8 7e fe ff ff       	call   c0007600 <IDT::addEntry(int, void (*)(), bool)>
c0007782:	83 c4 20             	add    esp,0x20
c0007785:	6a 00                	push   0x0
c0007787:	68 60 f2 01 c0       	push   0xc001f260
c000778c:	6a 12                	push   0x12
c000778e:	53                   	push   ebx
c000778f:	e8 6c fe ff ff       	call   c0007600 <IDT::addEntry(int, void (*)(), bool)>
c0007794:	6a 01                	push   0x1
c0007796:	68 fa f2 01 c0       	push   0xc001f2fa
c000779b:	6a 60                	push   0x60
c000779d:	53                   	push   ebx
c000779e:	e8 5d fe ff ff       	call   c0007600 <IDT::addEntry(int, void (*)(), bool)>
c00077a3:	83 c4 20             	add    esp,0x20
c00077a6:	6a 00                	push   0x0
c00077a8:	68 01 f3 01 c0       	push   0xc001f301
c00077ad:	6a 20                	push   0x20
c00077af:	53                   	push   ebx
c00077b0:	e8 4b fe ff ff       	call   c0007600 <IDT::addEntry(int, void (*)(), bool)>
c00077b5:	6a 00                	push   0x0
c00077b7:	68 ec f2 01 c0       	push   0xc001f2ec
c00077bc:	6a 21                	push   0x21
c00077be:	53                   	push   ebx
c00077bf:	e8 3c fe ff ff       	call   c0007600 <IDT::addEntry(int, void (*)(), bool)>
c00077c4:	83 c4 20             	add    esp,0x20
c00077c7:	6a 00                	push   0x0
c00077c9:	68 f3 f2 01 c0       	push   0xc001f2f3
c00077ce:	6a 22                	push   0x22
c00077d0:	53                   	push   ebx
c00077d1:	e8 2a fe ff ff       	call   c0007600 <IDT::addEntry(int, void (*)(), bool)>
c00077d6:	6a 00                	push   0x0
c00077d8:	68 6a f2 01 c0       	push   0xc001f26a
c00077dd:	6a 23                	push   0x23
c00077df:	53                   	push   ebx
c00077e0:	e8 1b fe ff ff       	call   c0007600 <IDT::addEntry(int, void (*)(), bool)>
c00077e5:	83 c4 20             	add    esp,0x20
c00077e8:	6a 00                	push   0x0
c00077ea:	68 74 f2 01 c0       	push   0xc001f274
c00077ef:	6a 24                	push   0x24
c00077f1:	53                   	push   ebx
c00077f2:	e8 09 fe ff ff       	call   c0007600 <IDT::addEntry(int, void (*)(), bool)>
c00077f7:	6a 00                	push   0x0
c00077f9:	68 7e f2 01 c0       	push   0xc001f27e
c00077fe:	6a 25                	push   0x25
c0007800:	53                   	push   ebx
c0007801:	e8 fa fd ff ff       	call   c0007600 <IDT::addEntry(int, void (*)(), bool)>
c0007806:	83 c4 20             	add    esp,0x20
c0007809:	6a 00                	push   0x0
c000780b:	68 88 f2 01 c0       	push   0xc001f288
c0007810:	6a 26                	push   0x26
c0007812:	53                   	push   ebx
c0007813:	e8 e8 fd ff ff       	call   c0007600 <IDT::addEntry(int, void (*)(), bool)>
c0007818:	6a 00                	push   0x0
c000781a:	68 92 f2 01 c0       	push   0xc001f292
c000781f:	6a 27                	push   0x27
c0007821:	53                   	push   ebx
c0007822:	e8 d9 fd ff ff       	call   c0007600 <IDT::addEntry(int, void (*)(), bool)>
c0007827:	83 c4 20             	add    esp,0x20
c000782a:	6a 00                	push   0x0
c000782c:	68 9c f2 01 c0       	push   0xc001f29c
c0007831:	6a 28                	push   0x28
c0007833:	53                   	push   ebx
c0007834:	e8 c7 fd ff ff       	call   c0007600 <IDT::addEntry(int, void (*)(), bool)>
c0007839:	6a 00                	push   0x0
c000783b:	68 a6 f2 01 c0       	push   0xc001f2a6
c0007840:	6a 29                	push   0x29
c0007842:	53                   	push   ebx
c0007843:	e8 b8 fd ff ff       	call   c0007600 <IDT::addEntry(int, void (*)(), bool)>
c0007848:	83 c4 20             	add    esp,0x20
c000784b:	6a 00                	push   0x0
c000784d:	68 b0 f2 01 c0       	push   0xc001f2b0
c0007852:	6a 2a                	push   0x2a
c0007854:	53                   	push   ebx
c0007855:	e8 a6 fd ff ff       	call   c0007600 <IDT::addEntry(int, void (*)(), bool)>
c000785a:	6a 00                	push   0x0
c000785c:	68 ba f2 01 c0       	push   0xc001f2ba
c0007861:	6a 2b                	push   0x2b
c0007863:	53                   	push   ebx
c0007864:	e8 97 fd ff ff       	call   c0007600 <IDT::addEntry(int, void (*)(), bool)>
c0007869:	83 c4 20             	add    esp,0x20
c000786c:	6a 00                	push   0x0
c000786e:	68 c4 f2 01 c0       	push   0xc001f2c4
c0007873:	6a 2c                	push   0x2c
c0007875:	53                   	push   ebx
c0007876:	e8 85 fd ff ff       	call   c0007600 <IDT::addEntry(int, void (*)(), bool)>
c000787b:	6a 00                	push   0x0
c000787d:	68 ce f2 01 c0       	push   0xc001f2ce
c0007882:	6a 2d                	push   0x2d
c0007884:	53                   	push   ebx
c0007885:	e8 76 fd ff ff       	call   c0007600 <IDT::addEntry(int, void (*)(), bool)>
c000788a:	83 c4 20             	add    esp,0x20
c000788d:	6a 00                	push   0x0
c000788f:	68 d8 f2 01 c0       	push   0xc001f2d8
c0007894:	6a 2e                	push   0x2e
c0007896:	53                   	push   ebx
c0007897:	e8 64 fd ff ff       	call   c0007600 <IDT::addEntry(int, void (*)(), bool)>
c000789c:	6a 00                	push   0x0
c000789e:	68 e2 f2 01 c0       	push   0xc001f2e2
c00078a3:	6a 2f                	push   0x2f
c00078a5:	53                   	push   ebx
c00078a6:	e8 55 fd ff ff       	call   c0007600 <IDT::addEntry(int, void (*)(), bool)>
c00078ab:	83 c4 20             	add    esp,0x20
c00078ae:	6a 00                	push   0x0
c00078b0:	68 3c f4 01 c0       	push   0xc001f43c
c00078b5:	6a 30                	push   0x30
c00078b7:	53                   	push   ebx
c00078b8:	e8 43 fd ff ff       	call   c0007600 <IDT::addEntry(int, void (*)(), bool)>
c00078bd:	6a 00                	push   0x0
c00078bf:	68 46 f4 01 c0       	push   0xc001f446
c00078c4:	6a 31                	push   0x31
c00078c6:	53                   	push   ebx
c00078c7:	e8 34 fd ff ff       	call   c0007600 <IDT::addEntry(int, void (*)(), bool)>
c00078cc:	83 c4 20             	add    esp,0x20
c00078cf:	6a 00                	push   0x0
c00078d1:	68 50 f4 01 c0       	push   0xc001f450
c00078d6:	6a 32                	push   0x32
c00078d8:	53                   	push   ebx
c00078d9:	e8 22 fd ff ff       	call   c0007600 <IDT::addEntry(int, void (*)(), bool)>
c00078de:	6a 00                	push   0x0
c00078e0:	68 5a f4 01 c0       	push   0xc001f45a
c00078e5:	6a 33                	push   0x33
c00078e7:	53                   	push   ebx
c00078e8:	e8 13 fd ff ff       	call   c0007600 <IDT::addEntry(int, void (*)(), bool)>
c00078ed:	83 c4 20             	add    esp,0x20
c00078f0:	6a 00                	push   0x0
c00078f2:	68 64 f4 01 c0       	push   0xc001f464
c00078f7:	6a 34                	push   0x34
c00078f9:	53                   	push   ebx
c00078fa:	e8 01 fd ff ff       	call   c0007600 <IDT::addEntry(int, void (*)(), bool)>
c00078ff:	6a 00                	push   0x0
c0007901:	68 6e f4 01 c0       	push   0xc001f46e
c0007906:	6a 35                	push   0x35
c0007908:	53                   	push   ebx
c0007909:	e8 f2 fc ff ff       	call   c0007600 <IDT::addEntry(int, void (*)(), bool)>
c000790e:	83 c4 20             	add    esp,0x20
c0007911:	6a 00                	push   0x0
c0007913:	68 78 f4 01 c0       	push   0xc001f478
c0007918:	6a 36                	push   0x36
c000791a:	53                   	push   ebx
c000791b:	e8 e0 fc ff ff       	call   c0007600 <IDT::addEntry(int, void (*)(), bool)>
c0007920:	6a 00                	push   0x0
c0007922:	68 82 f4 01 c0       	push   0xc001f482
c0007927:	6a 37                	push   0x37
c0007929:	53                   	push   ebx
c000792a:	e8 d1 fc ff ff       	call   c0007600 <IDT::addEntry(int, void (*)(), bool)>
c000792f:	83 c4 1c             	add    esp,0x1c
c0007932:	6a 03                	push   0x3
c0007934:	6a 02                	push   0x2
c0007936:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c000793c:	e8 13 25 00 00       	call   c0009e54 <VAS::allocatePages(int, int)>
c0007941:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0007948:	89 c6                	mov    esi,eax
c000794a:	e8 97 01 00 00       	call   c0007ae6 <malloc>
c000794f:	81 c6 00 20 00 00    	add    esi,0x2000
c0007955:	89 04 24             	mov    DWORD PTR [esp],eax
c0007958:	89 c7                	mov    edi,eax
c000795a:	e8 15 16 00 00       	call   c0008f74 <TSS::TSS()>
c000795f:	83 c4 0c             	add    esp,0xc
c0007962:	68 f6 f1 01 c0       	push   0xc001f1f6
c0007967:	56                   	push   esi
c0007968:	57                   	push   edi
c0007969:	e8 4a 16 00 00       	call   c0008fb8 <TSS::setup(unsigned long, unsigned long)>
c000796e:	89 c6                	mov    esi,eax
c0007970:	58                   	pop    eax
c0007971:	5a                   	pop    edx
c0007972:	6a 00                	push   0x0
c0007974:	8d 44 24 14          	lea    eax,[esp+0x14]
c0007978:	50                   	push   eax
c0007979:	e8 ce fb ff ff       	call   c000754c <IDTEntry::IDTEntry(bool)>
c000797e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007982:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0007987:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000798e:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c0007994:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007998:	80 ce 05             	or     dh,0x5
c000799b:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000799e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00079a2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00079a6:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c00079a9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00079ac:	e8 87 fc ff ff       	call   c0007638 <IDT::flush()>
c00079b1:	83 c4 20             	add    esp,0x20
c00079b4:	5b                   	pop    ebx
c00079b5:	5e                   	pop    esi
c00079b6:	5f                   	pop    edi
c00079b7:	c3                   	ret    

c00079b8 <sbrk>:
c00079b8:	55                   	push   ebp
c00079b9:	57                   	push   edi
c00079ba:	56                   	push   esi
c00079bb:	53                   	push   ebx
c00079bc:	83 ec 1c             	sub    esp,0x1c
c00079bf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00079c3:	85 c0                	test   eax,eax
c00079c5:	74 61                	je     c0007a28 <sbrk+0x70>
c00079c7:	78 66                	js     c0007a2f <sbrk+0x77>
c00079c9:	8b 15 e8 37 02 c0    	mov    edx,DWORD PTR ds:0xc00237e8
c00079cf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00079d3:	05 ff 0f 00 00       	add    eax,0xfff
c00079d8:	89 c5                	mov    ebp,eax
c00079da:	78 6b                	js     c0007a47 <sbrk+0x8f>
c00079dc:	c1 fd 0c             	sar    ebp,0xc
c00079df:	bb 00 00 00 00       	mov    ebx,0x0
c00079e4:	8b 35 b0 6f 02 c0    	mov    esi,DWORD PTR ds:0xc0026fb0
c00079ea:	8b 3d e8 37 02 c0    	mov    edi,DWORD PTR ds:0xc00237e8
c00079f0:	e8 fa 03 00 00       	call   c0007def <Phys::allocatePage()>
c00079f5:	68 01 04 00 00       	push   0x401
c00079fa:	57                   	push   edi
c00079fb:	50                   	push   eax
c00079fc:	56                   	push   esi
c00079fd:	e8 4e 23 00 00       	call   c0009d50 <VAS::mapPage(unsigned long, unsigned long, int)>
c0007a02:	81 05 e8 37 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc00237e8,0x1000
c0007a0c:	83 c3 01             	add    ebx,0x1
c0007a0f:	83 c4 10             	add    esp,0x10
c0007a12:	39 dd                	cmp    ebp,ebx
c0007a14:	75 ce                	jne    c00079e4 <sbrk+0x2c>
c0007a16:	0f 20 d8             	mov    eax,cr3
c0007a19:	0f 22 d8             	mov    cr3,eax
c0007a1c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007a20:	83 c4 1c             	add    esp,0x1c
c0007a23:	5b                   	pop    ebx
c0007a24:	5e                   	pop    esi
c0007a25:	5f                   	pop    edi
c0007a26:	5d                   	pop    ebp
c0007a27:	c3                   	ret    
c0007a28:	a1 e8 37 02 c0       	mov    eax,ds:0xc00237e8
c0007a2d:	eb f1                	jmp    c0007a20 <sbrk+0x68>
c0007a2f:	83 ec 08             	sub    esp,0x8
c0007a32:	50                   	push   eax
c0007a33:	68 ec 0d 02 c0       	push   0xc0020dec
c0007a38:	e8 38 2f 00 00       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c0007a3d:	83 c4 10             	add    esp,0x10
c0007a40:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0007a45:	eb d9                	jmp    c0007a20 <sbrk+0x68>
c0007a47:	8d a8 ff 0f 00 00    	lea    ebp,[eax+0xfff]
c0007a4d:	eb 8d                	jmp    c00079dc <sbrk+0x24>

c0007a4f <mmap>:
c0007a4f:	83 ec 18             	sub    esp,0x18
c0007a52:	68 1c 0e 02 c0       	push   0xc0020e1c
c0007a57:	e8 6b 9c 00 00       	call   c00116c7 <KePanic(char const*)>
c0007a5c:	b8 00 00 00 00       	mov    eax,0x0
c0007a61:	83 c4 1c             	add    esp,0x1c
c0007a64:	c3                   	ret    

c0007a65 <munmap>:
c0007a65:	83 ec 18             	sub    esp,0x18
c0007a68:	68 21 0e 02 c0       	push   0xc0020e21
c0007a6d:	e8 55 9c 00 00       	call   c00116c7 <KePanic(char const*)>
c0007a72:	b8 00 00 00 00       	mov    eax,0x0
c0007a77:	83 c4 1c             	add    esp,0x1c
c0007a7a:	c3                   	ret    

c0007a7b <liballoc_lock()>:
c0007a7b:	fa                   	cli    
c0007a7c:	83 05 c8 c6 02 c0 01 	add    DWORD PTR ds:0xc002c6c8,0x1
c0007a83:	b8 00 00 00 00       	mov    eax,0x0
c0007a88:	c3                   	ret    

c0007a89 <liballoc_unlock()>:
c0007a89:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0007a8e:	83 e8 01             	sub    eax,0x1
c0007a91:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0007a96:	75 01                	jne    c0007a99 <liballoc_unlock()+0x10>
c0007a98:	fb                   	sti    
c0007a99:	b8 00 00 00 00       	mov    eax,0x0
c0007a9e:	c3                   	ret    

c0007a9f <liballoc_alloc(int)>:
c0007a9f:	83 ec 10             	sub    esp,0x10
c0007aa2:	6a 01                	push   0x1
c0007aa4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007aa8:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c0007aae:	e8 a1 23 00 00       	call   c0009e54 <VAS::allocatePages(int, int)>
c0007ab3:	83 c4 1c             	add    esp,0x1c
c0007ab6:	c3                   	ret    

c0007ab7 <liballoc_free(void*, int)>:
c0007ab7:	83 ec 14             	sub    esp,0x14
c0007aba:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007abe:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c0007ac4:	e8 cf 1f 00 00       	call   c0009a98 <VAS::freeAllocatedPages(unsigned long)>
c0007ac9:	b8 00 00 00 00       	mov    eax,0x0
c0007ace:	83 c4 1c             	add    esp,0x1c
c0007ad1:	c3                   	ret    

c0007ad2 <realloc>:
c0007ad2:	83 ec 14             	sub    esp,0x14
c0007ad5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ad9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007add:	e8 06 9b ff ff       	call   c00015e8 <dlrealloc>
c0007ae2:	83 c4 1c             	add    esp,0x1c
c0007ae5:	c3                   	ret    

c0007ae6 <malloc>:
c0007ae6:	83 ec 18             	sub    esp,0x18
c0007ae9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007aed:	e8 b9 95 ff ff       	call   c00010ab <dlmalloc>
c0007af2:	83 c4 1c             	add    esp,0x1c
c0007af5:	c3                   	ret    

c0007af6 <free>:
c0007af6:	83 ec 18             	sub    esp,0x18
c0007af9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007afd:	e8 51 92 ff ff       	call   c0000d53 <dlfree>
c0007b02:	83 c4 1c             	add    esp,0x1c
c0007b05:	c3                   	ret    

c0007b06 <rfree>:
c0007b06:	83 ec 18             	sub    esp,0x18
c0007b09:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007b0d:	e8 41 92 ff ff       	call   c0000d53 <dlfree>
c0007b12:	83 c4 1c             	add    esp,0x1c
c0007b15:	c3                   	ret    

c0007b16 <calloc>:
c0007b16:	56                   	push   esi
c0007b17:	53                   	push   ebx
c0007b18:	83 ec 10             	sub    esp,0x10
c0007b1b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007b1f:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c0007b24:	53                   	push   ebx
c0007b25:	e8 bc ff ff ff       	call   c0007ae6 <malloc>
c0007b2a:	89 c6                	mov    esi,eax
c0007b2c:	83 c4 0c             	add    esp,0xc
c0007b2f:	53                   	push   ebx
c0007b30:	6a 00                	push   0x0
c0007b32:	50                   	push   eax
c0007b33:	e8 b8 89 ff ff       	call   c00004f0 <memset>
c0007b38:	89 f0                	mov    eax,esi
c0007b3a:	83 c4 14             	add    esp,0x14
c0007b3d:	5b                   	pop    ebx
c0007b3e:	5e                   	pop    esi
c0007b3f:	c3                   	ret    

c0007b40 <KeEntryPoint>:
c0007b40:	57                   	push   edi
c0007b41:	bf f9 03 00 00       	mov    edi,0x3f9
c0007b46:	56                   	push   esi
c0007b47:	89 fa                	mov    edx,edi
c0007b49:	53                   	push   ebx
c0007b4a:	31 f6                	xor    esi,esi
c0007b4c:	83 ec 2c             	sub    esp,0x2c
c0007b4f:	a1 00 05 00 00       	mov    eax,ds:0x500
c0007b54:	a3 d0 6e 02 c0       	mov    ds:0xc0026ed0,eax
c0007b59:	89 f0                	mov    eax,esi
c0007b5b:	ee                   	out    dx,al
c0007b5c:	bb fb 03 00 00       	mov    ebx,0x3fb
c0007b61:	b0 80                	mov    al,0x80
c0007b63:	89 da                	mov    edx,ebx
c0007b65:	ee                   	out    dx,al
c0007b66:	b1 03                	mov    cl,0x3
c0007b68:	ba f8 03 00 00       	mov    edx,0x3f8
c0007b6d:	88 c8                	mov    al,cl
c0007b6f:	ee                   	out    dx,al
c0007b70:	89 f0                	mov    eax,esi
c0007b72:	89 fa                	mov    edx,edi
c0007b74:	ee                   	out    dx,al
c0007b75:	88 c8                	mov    al,cl
c0007b77:	89 da                	mov    edx,ebx
c0007b79:	ee                   	out    dx,al
c0007b7a:	b0 c7                	mov    al,0xc7
c0007b7c:	ba fa 03 00 00       	mov    edx,0x3fa
c0007b81:	ee                   	out    dx,al
c0007b82:	b0 0b                	mov    al,0xb
c0007b84:	ba fc 03 00 00       	mov    edx,0x3fc
c0007b89:	ee                   	out    dx,al
c0007b8a:	68 28 0e 02 c0       	push   0xc0020e28
c0007b8f:	e8 e1 2d 00 00       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c0007b94:	e8 b2 93 00 00       	call   c0010f4b <KeDisplaySplashScreen()>
c0007b99:	a1 24 05 00 00       	mov    eax,ds:0x524
c0007b9e:	05 ff 0f 00 00       	add    eax,0xfff
c0007ba3:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007ba8:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bab:	e8 ad 03 00 00       	call   c0007f5d <Phys::physicalMemorySetup(unsigned int)>
c0007bb0:	e8 66 1c 00 00       	call   c000981b <Virt::virtualMemorySetup()>
c0007bb5:	e8 db 92 00 00       	call   c0010e95 <KeInitialiseAtexit()>
c0007bba:	58                   	pop    eax
c0007bbb:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c0007bbf:	53                   	push   ebx
c0007bc0:	e8 53 1f 00 00       	call   c0009b18 <VAS::VAS()>
c0007bc5:	89 1d b0 6f 02 c0    	mov    DWORD PTR ds:0xc0026fb0,ebx
c0007bcb:	e8 6a 7e 01 00       	call   c001fa3a <_init>
c0007bd0:	c7 04 24 70 01 00 00 	mov    DWORD PTR [esp],0x170
c0007bd7:	e8 0a ff ff ff       	call   c0007ae6 <malloc>
c0007bdc:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bdf:	89 c6                	mov    esi,eax
c0007be1:	e8 32 f2 ff ff       	call   c0006e18 <Computer::Computer()>
c0007be6:	53                   	push   ebx
c0007be7:	89 35 b8 6e 02 c0    	mov    DWORD PTR ds:0xc0026eb8,esi
c0007bed:	6a 00                	push   0x0
c0007bef:	6a 00                	push   0x0
c0007bf1:	56                   	push   esi
c0007bf2:	e8 e9 f5 ff ff       	call   c00071e0 <Computer::open(int, int, void*)>
c0007bf7:	83 c4 14             	add    esp,0x14
c0007bfa:	53                   	push   ebx
c0007bfb:	e8 e2 1f 00 00       	call   c0009be2 <VAS::~VAS()>
c0007c00:	83 c4 30             	add    esp,0x30
c0007c03:	5b                   	pop    ebx
c0007c04:	5e                   	pop    esi
c0007c05:	5f                   	pop    edi
c0007c06:	c3                   	ret    

c0007c07 <Phys::allocateDMA(unsigned long)>:
c0007c07:	55                   	push   ebp
c0007c08:	31 ed                	xor    ebp,ebp
c0007c0a:	57                   	push   edi
c0007c0b:	56                   	push   esi
c0007c0c:	53                   	push   ebx
c0007c0d:	31 db                	xor    ebx,ebx
c0007c0f:	83 ec 1c             	sub    esp,0x1c
c0007c12:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007c16:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0007c1e:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c0007c24:	31 c0                	xor    eax,eax
c0007c26:	c1 ef 0c             	shr    edi,0xc
c0007c29:	eb 1b                	jmp    c0007c46 <Phys::allocateDMA(unsigned long)+0x3f>
c0007c2b:	85 c0                	test   eax,eax
c0007c2d:	75 06                	jne    c0007c35 <Phys::allocateDMA(unsigned long)+0x2e>
c0007c2f:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007c33:	89 dd                	mov    ebp,ebx
c0007c35:	8d 70 01             	lea    esi,[eax+0x1]
c0007c38:	39 f7                	cmp    edi,esi
c0007c3a:	74 37                	je     c0007c73 <Phys::allocateDMA(unsigned long)+0x6c>
c0007c3c:	89 f0                	mov    eax,esi
c0007c3e:	83 c3 01             	add    ebx,0x1
c0007c41:	83 fb 0f             	cmp    ebx,0xf
c0007c44:	7f 13                	jg     c0007c59 <Phys::allocateDMA(unsigned long)+0x52>
c0007c46:	80 bb ec 6e 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffd9114],0x0
c0007c4d:	74 dc                	je     c0007c2b <Phys::allocateDMA(unsigned long)+0x24>
c0007c4f:	31 c0                	xor    eax,eax
c0007c51:	83 c3 01             	add    ebx,0x1
c0007c54:	83 fb 0f             	cmp    ebx,0xf
c0007c57:	7e ed                	jle    c0007c46 <Phys::allocateDMA(unsigned long)+0x3f>
c0007c59:	83 ec 0c             	sub    esp,0xc
c0007c5c:	68 40 0e 02 c0       	push   0xc0020e40
c0007c61:	e8 61 9a 00 00       	call   c00116c7 <KePanic(char const*)>
c0007c66:	83 c4 10             	add    esp,0x10
c0007c69:	31 c0                	xor    eax,eax
c0007c6b:	83 c4 1c             	add    esp,0x1c
c0007c6e:	5b                   	pop    ebx
c0007c6f:	5e                   	pop    esi
c0007c70:	5f                   	pop    edi
c0007c71:	5d                   	pop    ebp
c0007c72:	c3                   	ret    
c0007c73:	89 e9                	mov    ecx,ebp
c0007c75:	c1 f9 04             	sar    ecx,0x4
c0007c78:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007c7c:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c0007c80:	89 ca                	mov    edx,ecx
c0007c82:	83 ea 01             	sub    edx,0x1
c0007c85:	79 03                	jns    c0007c8a <Phys::allocateDMA(unsigned long)+0x83>
c0007c87:	8d 51 0e             	lea    edx,[ecx+0xe]
c0007c8a:	c1 fa 04             	sar    edx,0x4
c0007c8d:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c0007c91:	74 08                	je     c0007c9b <Phys::allocateDMA(unsigned long)+0x94>
c0007c93:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007c97:	31 c0                	xor    eax,eax
c0007c99:	eb b6                	jmp    c0007c51 <Phys::allocateDMA(unsigned long)+0x4a>
c0007c9b:	85 f6                	test   esi,esi
c0007c9d:	74 17                	je     c0007cb6 <Phys::allocateDMA(unsigned long)+0xaf>
c0007c9f:	8d 95 ec 6e 02 c0    	lea    edx,[ebp-0x3ffd9114]
c0007ca5:	8d 84 05 ed 6e 02 c0 	lea    eax,[ebp+eax*1-0x3ffd9113]
c0007cac:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0007caf:	83 c2 01             	add    edx,0x1
c0007cb2:	39 d0                	cmp    eax,edx
c0007cb4:	75 f6                	jne    c0007cac <Phys::allocateDMA(unsigned long)+0xa5>
c0007cb6:	a1 e4 6e 02 c0       	mov    eax,ds:0xc0026ee4
c0007cbb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007cbf:	01 f8                	add    eax,edi
c0007cc1:	85 d2                	test   edx,edx
c0007cc3:	a3 e4 6e 02 c0       	mov    ds:0xc0026ee4,eax
c0007cc8:	74 17                	je     c0007ce1 <Phys::allocateDMA(unsigned long)+0xda>
c0007cca:	83 ec 0c             	sub    esp,0xc
c0007ccd:	68 40 0e 02 c0       	push   0xc0020e40
c0007cd2:	e8 f0 99 00 00       	call   c00116c7 <KePanic(char const*)>
c0007cd7:	83 c4 10             	add    esp,0x10
c0007cda:	89 f0                	mov    eax,esi
c0007cdc:	e9 5d ff ff ff       	jmp    c0007c3e <Phys::allocateDMA(unsigned long)+0x37>
c0007ce1:	c1 e5 0c             	shl    ebp,0xc
c0007ce4:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c0007cea:	e9 7c ff ff ff       	jmp    c0007c6b <Phys::allocateDMA(unsigned long)+0x64>

c0007cef <Phys::freeDMA(unsigned long, unsigned long)>:
c0007cef:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007cf3:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c0007cf9:	a1 e4 6e 02 c0       	mov    eax,ds:0xc0026ee4
c0007cfe:	c1 ea 0c             	shr    edx,0xc
c0007d01:	29 d0                	sub    eax,edx
c0007d03:	a3 e4 6e 02 c0       	mov    ds:0xc0026ee4,eax
c0007d08:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007d0c:	05 00 00 ff 3d       	add    eax,0x3dff0000
c0007d11:	c1 e8 0c             	shr    eax,0xc
c0007d14:	85 d2                	test   edx,edx
c0007d16:	74 11                	je     c0007d29 <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c0007d18:	05 ec 6e 02 c0       	add    eax,0xc0026eec
c0007d1d:	01 c2                	add    edx,eax
c0007d1f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0007d22:	83 c0 01             	add    eax,0x1
c0007d25:	39 d0                	cmp    eax,edx
c0007d27:	75 f6                	jne    c0007d1f <Phys::freeDMA(unsigned long, unsigned long)+0x30>
c0007d29:	c3                   	ret    

c0007d2a <Phys::setPageState(unsigned long, bool)>:
c0007d2a:	57                   	push   edi
c0007d2b:	56                   	push   esi
c0007d2c:	8b 35 ec 37 02 c0    	mov    esi,DWORD PTR ds:0xc00237ec
c0007d32:	53                   	push   ebx
c0007d33:	bb fe ff ff ff       	mov    ebx,0xfffffffe
c0007d38:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007d3c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0007d40:	0f b6 c0             	movzx  eax,al
c0007d43:	89 ca                	mov    edx,ecx
c0007d45:	83 e1 07             	and    ecx,0x7
c0007d48:	c1 ea 03             	shr    edx,0x3
c0007d4b:	d3 c3                	rol    ebx,cl
c0007d4d:	01 d6                	add    esi,edx
c0007d4f:	d3 e0                	shl    eax,cl
c0007d51:	0f b6 3e             	movzx  edi,BYTE PTR [esi]
c0007d54:	21 fb                	and    ebx,edi
c0007d56:	88 1e                	mov    BYTE PTR [esi],bl
c0007d58:	8b 1d ec 37 02 c0    	mov    ebx,DWORD PTR ds:0xc00237ec
c0007d5e:	01 da                	add    edx,ebx
c0007d60:	8a 0a                	mov    cl,BYTE PTR [edx]
c0007d62:	09 c8                	or     eax,ecx
c0007d64:	88 02                	mov    BYTE PTR [edx],al
c0007d66:	5b                   	pop    ebx
c0007d67:	5e                   	pop    esi
c0007d68:	5f                   	pop    edi
c0007d69:	c3                   	ret    

c0007d6a <Phys::getPageState(unsigned long)>:
c0007d6a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007d6e:	8b 15 ec 37 02 c0    	mov    edx,DWORD PTR ds:0xc00237ec
c0007d74:	89 c8                	mov    eax,ecx
c0007d76:	83 e1 07             	and    ecx,0x7
c0007d79:	c1 e8 03             	shr    eax,0x3
c0007d7c:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c0007d80:	d3 f8                	sar    eax,cl
c0007d82:	83 e0 01             	and    eax,0x1
c0007d85:	c3                   	ret    

c0007d86 <Phys::freePage(unsigned long)>:
c0007d86:	53                   	push   ebx
c0007d87:	83 ec 08             	sub    esp,0x8
c0007d8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d8e:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c0007d94:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0007d9a:	76 41                	jbe    c0007ddd <Phys::freePage(unsigned long)+0x57>
c0007d9c:	c1 e8 0c             	shr    eax,0xc
c0007d9f:	50                   	push   eax
c0007da0:	89 c3                	mov    ebx,eax
c0007da2:	e8 c3 ff ff ff       	call   c0007d6a <Phys::getPageState(unsigned long)>
c0007da7:	5a                   	pop    edx
c0007da8:	84 c0                	test   al,al
c0007daa:	74 20                	je     c0007dcc <Phys::freePage(unsigned long)+0x46>
c0007dac:	83 ec 08             	sub    esp,0x8
c0007daf:	a1 e4 6e 02 c0       	mov    eax,ds:0xc0026ee4
c0007db4:	6a 00                	push   0x0
c0007db6:	83 e8 01             	sub    eax,0x1
c0007db9:	53                   	push   ebx
c0007dba:	a3 e4 6e 02 c0       	mov    ds:0xc0026ee4,eax
c0007dbf:	e8 66 ff ff ff       	call   c0007d2a <Phys::setPageState(unsigned long, bool)>
c0007dc4:	83 c4 10             	add    esp,0x10
c0007dc7:	83 c4 08             	add    esp,0x8
c0007dca:	5b                   	pop    ebx
c0007dcb:	c3                   	ret    
c0007dcc:	c7 44 24 10 e5 0e 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020ee5
c0007dd4:	83 c4 08             	add    esp,0x8
c0007dd7:	5b                   	pop    ebx
c0007dd8:	e9 ea 98 00 00       	jmp    c00116c7 <KePanic(char const*)>
c0007ddd:	68 00 10 00 00       	push   0x1000
c0007de2:	50                   	push   eax
c0007de3:	e8 07 ff ff ff       	call   c0007cef <Phys::freeDMA(unsigned long, unsigned long)>
c0007de8:	59                   	pop    ecx
c0007de9:	5b                   	pop    ebx
c0007dea:	83 c4 08             	add    esp,0x8
c0007ded:	5b                   	pop    ebx
c0007dee:	c3                   	ret    

c0007def <Phys::allocatePage()>:
c0007def:	56                   	push   esi
c0007df0:	53                   	push   ebx
c0007df1:	83 ec 14             	sub    esp,0x14
c0007df4:	8b 35 d8 6e 02 c0    	mov    esi,DWORD PTR ds:0xc0026ed8
c0007dfa:	89 f3                	mov    ebx,esi
c0007dfc:	eb 0a                	jmp    c0007e08 <Phys::allocatePage()+0x19>
c0007dfe:	89 1d d8 6e 02 c0    	mov    DWORD PTR ds:0xc0026ed8,ebx
c0007e04:	39 de                	cmp    esi,ebx
c0007e06:	74 26                	je     c0007e2e <Phys::allocatePage()+0x3f>
c0007e08:	53                   	push   ebx
c0007e09:	e8 5c ff ff ff       	call   c0007d6a <Phys::getPageState(unsigned long)>
c0007e0e:	5a                   	pop    edx
c0007e0f:	84 c0                	test   al,al
c0007e11:	74 67                	je     c0007e7a <Phys::allocatePage()+0x8b>
c0007e13:	83 c3 01             	add    ebx,0x1
c0007e16:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007e1c:	75 e0                	jne    c0007dfe <Phys::allocatePage()+0xf>
c0007e1e:	31 db                	xor    ebx,ebx
c0007e20:	c7 05 d8 6e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026ed8,0x0
c0007e2a:	39 de                	cmp    esi,ebx
c0007e2c:	75 da                	jne    c0007e08 <Phys::allocatePage()+0x19>
c0007e2e:	83 ec 0c             	sub    esp,0xc
c0007e31:	a0 fc 6e 02 c0       	mov    al,ds:0xc0026efc
c0007e36:	83 f0 01             	xor    eax,0x1
c0007e39:	a2 fc 6e 02 c0       	mov    ds:0xc0026efc,al
c0007e3e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0007e43:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0007e46:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0007e4c:	50                   	push   eax
c0007e4d:	e8 a8 27 00 00       	call   c000a5fa <VAS::scanForEviction()>
c0007e52:	83 c4 10             	add    esp,0x10
c0007e55:	85 c0                	test   eax,eax
c0007e57:	75 48                	jne    c0007ea1 <Phys::allocatePage()+0xb2>
c0007e59:	83 ec 0c             	sub    esp,0xc
c0007e5c:	68 68 0e 02 c0       	push   0xc0020e68
c0007e61:	e8 61 98 00 00       	call   c00116c7 <KePanic(char const*)>
c0007e66:	83 c4 10             	add    esp,0x10
c0007e69:	8b 1d d8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026ed8
c0007e6f:	53                   	push   ebx
c0007e70:	e8 f5 fe ff ff       	call   c0007d6a <Phys::getPageState(unsigned long)>
c0007e75:	5a                   	pop    edx
c0007e76:	84 c0                	test   al,al
c0007e78:	75 99                	jne    c0007e13 <Phys::allocatePage()+0x24>
c0007e7a:	6a 01                	push   0x1
c0007e7c:	53                   	push   ebx
c0007e7d:	e8 a8 fe ff ff       	call   c0007d2a <Phys::setPageState(unsigned long, bool)>
c0007e82:	8b 15 e4 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026ee4
c0007e88:	a1 d8 6e 02 c0       	mov    eax,ds:0xc0026ed8
c0007e8d:	83 c2 01             	add    edx,0x1
c0007e90:	59                   	pop    ecx
c0007e91:	89 15 e4 6e 02 c0    	mov    DWORD PTR ds:0xc0026ee4,edx
c0007e97:	c1 e0 0c             	shl    eax,0xc
c0007e9a:	5b                   	pop    ebx
c0007e9b:	83 c4 14             	add    esp,0x14
c0007e9e:	5b                   	pop    ebx
c0007e9f:	5e                   	pop    esi
c0007ea0:	c3                   	ret    
c0007ea1:	83 ec 08             	sub    esp,0x8
c0007ea4:	89 c2                	mov    edx,eax
c0007ea6:	6a 01                	push   0x1
c0007ea8:	c1 ea 0c             	shr    edx,0xc
c0007eab:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007eaf:	52                   	push   edx
c0007eb0:	e8 75 fe ff ff       	call   c0007d2a <Phys::setPageState(unsigned long, bool)>
c0007eb5:	83 c4 10             	add    esp,0x10
c0007eb8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007ebc:	eb dd                	jmp    c0007e9b <Phys::allocatePage()+0xac>

c0007ebe <Phys::allocateContiguousPages(int)>:
c0007ebe:	57                   	push   edi
c0007ebf:	56                   	push   esi
c0007ec0:	53                   	push   ebx
c0007ec1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007ec5:	fa                   	cli    
c0007ec6:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0007ecb:	31 db                	xor    ebx,ebx
c0007ecd:	83 c0 01             	add    eax,0x1
c0007ed0:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0007ed5:	85 db                	test   ebx,ebx
c0007ed7:	75 11                	jne    c0007eea <Phys::allocateContiguousPages(int)+0x2c>
c0007ed9:	e8 11 ff ff ff       	call   c0007def <Phys::allocatePage()>
c0007ede:	83 fe 01             	cmp    esi,0x1
c0007ee1:	89 c7                	mov    edi,eax
c0007ee3:	74 21                	je     c0007f06 <Phys::allocateContiguousPages(int)+0x48>
c0007ee5:	bb 01 00 00 00       	mov    ebx,0x1
c0007eea:	e8 00 ff ff ff       	call   c0007def <Phys::allocatePage()>
c0007eef:	89 da                	mov    edx,ebx
c0007ef1:	c1 e2 0c             	shl    edx,0xc
c0007ef4:	01 fa                	add    edx,edi
c0007ef6:	39 c2                	cmp    edx,eax
c0007ef8:	74 22                	je     c0007f1c <Phys::allocateContiguousPages(int)+0x5e>
c0007efa:	bb 01 00 00 00       	mov    ebx,0x1
c0007eff:	89 c7                	mov    edi,eax
c0007f01:	83 fe 01             	cmp    esi,0x1
c0007f04:	75 e4                	jne    c0007eea <Phys::allocateContiguousPages(int)+0x2c>
c0007f06:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0007f0b:	83 e8 01             	sub    eax,0x1
c0007f0e:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0007f13:	75 01                	jne    c0007f16 <Phys::allocateContiguousPages(int)+0x58>
c0007f15:	fb                   	sti    
c0007f16:	89 f8                	mov    eax,edi
c0007f18:	5b                   	pop    ebx
c0007f19:	5e                   	pop    esi
c0007f1a:	5f                   	pop    edi
c0007f1b:	c3                   	ret    
c0007f1c:	83 c3 01             	add    ebx,0x1
c0007f1f:	39 f3                	cmp    ebx,esi
c0007f21:	75 b2                	jne    c0007ed5 <Phys::allocateContiguousPages(int)+0x17>
c0007f23:	eb e1                	jmp    c0007f06 <Phys::allocateContiguousPages(int)+0x48>

c0007f25 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0007f25:	56                   	push   esi
c0007f26:	53                   	push   ebx
c0007f27:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007f2b:	39 1d dc 6e 02 c0    	cmp    DWORD PTR ds:0xc0026edc,ebx
c0007f31:	73 06                	jae    c0007f39 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0007f33:	89 1d dc 6e 02 c0    	mov    DWORD PTR ds:0xc0026edc,ebx
c0007f39:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007f3d:	c1 eb 0c             	shr    ebx,0xc
c0007f40:	c1 e8 0c             	shr    eax,0xc
c0007f43:	39 d8                	cmp    eax,ebx
c0007f45:	73 13                	jae    c0007f5a <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0007f47:	6a 00                	push   0x0
c0007f49:	8d 70 01             	lea    esi,[eax+0x1]
c0007f4c:	50                   	push   eax
c0007f4d:	e8 d8 fd ff ff       	call   c0007d2a <Phys::setPageState(unsigned long, bool)>
c0007f52:	5a                   	pop    edx
c0007f53:	89 f0                	mov    eax,esi
c0007f55:	59                   	pop    ecx
c0007f56:	39 f3                	cmp    ebx,esi
c0007f58:	75 ed                	jne    c0007f47 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0007f5a:	5b                   	pop    ebx
c0007f5b:	5e                   	pop    esi
c0007f5c:	c3                   	ret    

c0007f5d <Phys::physicalMemorySetup(unsigned int)>:
c0007f5d:	55                   	push   ebp
c0007f5e:	57                   	push   edi
c0007f5f:	56                   	push   esi
c0007f60:	53                   	push   ebx
c0007f61:	83 ec 40             	sub    esp,0x40
c0007f64:	6a 10                	push   0x10
c0007f66:	6a 00                	push   0x0
c0007f68:	68 ec 6e 02 c0       	push   0xc0026eec
c0007f6d:	e8 7e 85 ff ff       	call   c00004f0 <memset>
c0007f72:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007f76:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007f7b:	05 00 10 00 00       	add    eax,0x1000
c0007f80:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0007f84:	5b                   	pop    ebx
c0007f85:	31 db                	xor    ebx,ebx
c0007f87:	5e                   	pop    esi
c0007f88:	50                   	push   eax
c0007f89:	68 fb 0e 02 c0       	push   0xc0020efb
c0007f8e:	e8 e2 29 00 00       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c0007f93:	83 c4 10             	add    esp,0x10
c0007f96:	83 ec 08             	sub    esp,0x8
c0007f99:	6a 01                	push   0x1
c0007f9b:	53                   	push   ebx
c0007f9c:	83 c3 01             	add    ebx,0x1
c0007f9f:	e8 86 fd ff ff       	call   c0007d2a <Phys::setPageState(unsigned long, bool)>
c0007fa4:	83 c4 10             	add    esp,0x10
c0007fa7:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007fad:	75 e7                	jne    c0007f96 <Phys::physicalMemorySetup(unsigned int)+0x39>
c0007faf:	0f b6 05 14 05 00 c2 	movzx  eax,BYTE PTR ds:0xc2000514
c0007fb6:	0f b6 15 13 05 00 c2 	movzx  edx,BYTE PTR ds:0xc2000513
c0007fbd:	c1 e0 08             	shl    eax,0x8
c0007fc0:	09 c2                	or     edx,eax
c0007fc2:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0007fc6:	0f 84 98 01 00 00    	je     c0008164 <Phys::physicalMemorySetup(unsigned int)+0x207>
c0007fcc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0007fd0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007fd8:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0007fdd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007fe1:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0007fe9:	eb 1c                	jmp    c0008007 <Phys::physicalMemorySetup(unsigned int)+0xaa>
c0007feb:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0007fef:	83 c3 18             	add    ebx,0x18
c0007ff2:	83 c6 01             	add    esi,0x1
c0007ff5:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0007ff9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007ffd:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0008001:	0f 84 6d 01 00 00    	je     c0008174 <Phys::physicalMemorySetup(unsigned int)+0x217>
c0008007:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000800a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000800d:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0008010:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008014:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008018:	8b 33                	mov    esi,DWORD PTR [ebx]
c000801a:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000801d:	01 f0                	add    eax,esi
c000801f:	55                   	push   ebp
c0008020:	11 fa                	adc    edx,edi
c0008022:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008026:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000802a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000802e:	51                   	push   ecx
c000802f:	56                   	push   esi
c0008030:	68 98 0e 02 c0       	push   0xc0020e98
c0008035:	e8 3b 29 00 00       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c000803a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000803e:	83 c4 10             	add    esp,0x10
c0008041:	09 f8                	or     eax,edi
c0008043:	0f 85 2b 01 00 00    	jne    c0008174 <Phys::physicalMemorySetup(unsigned int)+0x217>
c0008049:	83 fd 01             	cmp    ebp,0x1
c000804c:	75 9d                	jne    c0007feb <Phys::physicalMemorySetup(unsigned int)+0x8e>
c000804e:	ba 00 00 08 00       	mov    edx,0x80000
c0008053:	89 c1                	mov    ecx,eax
c0008055:	39 f2                	cmp    edx,esi
c0008057:	19 f9                	sbb    ecx,edi
c0008059:	0f 82 ab 00 00 00    	jb     c000810a <Phys::physicalMemorySetup(unsigned int)+0x1ad>
c000805f:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0008063:	89 c1                	mov    ecx,eax
c0008065:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c0008069:	0f 83 9b 00 00 00    	jae    c000810a <Phys::physicalMemorySetup(unsigned int)+0x1ad>
c000806f:	ba 00 00 0a 00       	mov    edx,0xa0000
c0008074:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008078:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000807c:	39 fa                	cmp    edx,edi
c000807e:	19 e8                	sbb    eax,ebp
c0008080:	0f 82 b0 01 00 00    	jb     c0008236 <Phys::physicalMemorySetup(unsigned int)+0x2d9>
c0008086:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000808a:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000808e:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c0008094:	ba ff 1f 00 00       	mov    edx,0x1fff
c0008099:	83 d5 ff             	adc    ebp,0xffffffff
c000809c:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c00080a0:	31 c0                	xor    eax,eax
c00080a2:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c00080a6:	39 fa                	cmp    edx,edi
c00080a8:	89 c1                	mov    ecx,eax
c00080aa:	19 e9                	sbb    ecx,ebp
c00080ac:	0f 83 39 ff ff ff    	jae    c0007feb <Phys::physicalMemorySetup(unsigned int)+0x8e>
c00080b2:	be 00 00 08 00       	mov    esi,0x80000
c00080b7:	83 ec 04             	sub    esp,0x4
c00080ba:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00080be:	57                   	push   edi
c00080bf:	56                   	push   esi
c00080c0:	68 bc 0e 02 c0       	push   0xc0020ebc
c00080c5:	e8 ab 28 00 00       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c00080ca:	5d                   	pop    ebp
c00080cb:	58                   	pop    eax
c00080cc:	57                   	push   edi
c00080cd:	56                   	push   esi
c00080ce:	e8 52 fe ff ff       	call   c0007f25 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c00080d3:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00080d7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00080db:	83 c4 0c             	add    esp,0xc
c00080de:	0f ac d0 0c          	shrd   eax,edx,0xc
c00080e2:	8b 15 e8 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026ee8
c00080e8:	01 d0                	add    eax,edx
c00080ea:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00080f1:	a3 e8 6e 02 c0       	mov    ds:0xc0026ee8,eax
c00080f6:	52                   	push   edx
c00080f7:	50                   	push   eax
c00080f8:	68 21 0f 02 c0       	push   0xc0020f21
c00080fd:	e8 73 28 00 00       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c0008102:	83 c4 10             	add    esp,0x10
c0008105:	e9 e1 fe ff ff       	jmp    c0007feb <Phys::physicalMemorySetup(unsigned int)+0x8e>
c000810a:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000810e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008112:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008116:	39 ea                	cmp    edx,ebp
c0008118:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c000811c:	0f 82 c9 fe ff ff    	jb     c0007feb <Phys::physicalMemorySetup(unsigned int)+0x8e>
c0008122:	ba ff 1f 00 00       	mov    edx,0x1fff
c0008127:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c000812b:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c000812f:	0f 83 b6 fe ff ff    	jae    c0007feb <Phys::physicalMemorySetup(unsigned int)+0x8e>
c0008135:	39 ee                	cmp    esi,ebp
c0008137:	89 f8                	mov    eax,edi
c0008139:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c000813d:	0f 83 74 ff ff ff    	jae    c00080b7 <Phys::physicalMemorySetup(unsigned int)+0x15a>
c0008143:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008147:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000814b:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000814f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008153:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c0008157:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000815b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000815f:	e9 53 ff ff ff       	jmp    c00080b7 <Phys::physicalMemorySetup(unsigned int)+0x15a>
c0008164:	83 ec 0c             	sub    esp,0xc
c0008167:	68 13 0f 02 c0       	push   0xc0020f13
c000816c:	e8 56 95 00 00       	call   c00116c7 <KePanic(char const*)>
c0008171:	83 c4 10             	add    esp,0x10
c0008174:	83 ec 08             	sub    esp,0x8
c0008177:	bb 60 00 00 00       	mov    ebx,0x60
c000817c:	6a 00                	push   0x0
c000817e:	6a 06                	push   0x6
c0008180:	e8 a5 fb ff ff       	call   c0007d2a <Phys::setPageState(unsigned long, bool)>
c0008185:	58                   	pop    eax
c0008186:	5a                   	pop    edx
c0008187:	6a 00                	push   0x0
c0008189:	6a 07                	push   0x7
c000818b:	e8 9a fb ff ff       	call   c0007d2a <Phys::setPageState(unsigned long, bool)>
c0008190:	8b 0d e8 6e 02 c0    	mov    ecx,DWORD PTR ds:0xc0026ee8
c0008196:	83 c4 10             	add    esp,0x10
c0008199:	83 c1 02             	add    ecx,0x2
c000819c:	89 0d e8 6e 02 c0    	mov    DWORD PTR ds:0xc0026ee8,ecx
c00081a2:	83 ec 08             	sub    esp,0x8
c00081a5:	6a 00                	push   0x0
c00081a7:	53                   	push   ebx
c00081a8:	83 c3 01             	add    ebx,0x1
c00081ab:	e8 7a fb ff ff       	call   c0007d2a <Phys::setPageState(unsigned long, bool)>
c00081b0:	83 c4 10             	add    esp,0x10
c00081b3:	81 fb 80 00 00 00    	cmp    ebx,0x80
c00081b9:	75 e7                	jne    c00081a2 <Phys::physicalMemorySetup(unsigned int)+0x245>
c00081bb:	a1 e8 6e 02 c0       	mov    eax,ds:0xc0026ee8
c00081c0:	bb 40 01 00 00       	mov    ebx,0x140
c00081c5:	83 c0 20             	add    eax,0x20
c00081c8:	a3 e8 6e 02 c0       	mov    ds:0xc0026ee8,eax
c00081cd:	eb 26                	jmp    c00081f5 <Phys::physicalMemorySetup(unsigned int)+0x298>
c00081cf:	83 ec 08             	sub    esp,0x8
c00081d2:	6a 00                	push   0x0
c00081d4:	53                   	push   ebx
c00081d5:	83 c3 01             	add    ebx,0x1
c00081d8:	e8 4d fb ff ff       	call   c0007d2a <Phys::setPageState(unsigned long, bool)>
c00081dd:	a1 e8 6e 02 c0       	mov    eax,ds:0xc0026ee8
c00081e2:	83 c4 10             	add    esp,0x10
c00081e5:	83 c0 01             	add    eax,0x1
c00081e8:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c00081ee:	a3 e8 6e 02 c0       	mov    ds:0xc0026ee8,eax
c00081f3:	74 07                	je     c00081fc <Phys::physicalMemorySetup(unsigned int)+0x29f>
c00081f5:	3d ff 03 00 00       	cmp    eax,0x3ff
c00081fa:	7e d3                	jle    c00081cf <Phys::physicalMemorySetup(unsigned int)+0x272>
c00081fc:	bb d0 01 00 00       	mov    ebx,0x1d0
c0008201:	3d ff 07 00 00       	cmp    eax,0x7ff
c0008206:	7f 26                	jg     c000822e <Phys::physicalMemorySetup(unsigned int)+0x2d1>
c0008208:	83 ec 08             	sub    esp,0x8
c000820b:	6a 00                	push   0x0
c000820d:	53                   	push   ebx
c000820e:	83 c3 01             	add    ebx,0x1
c0008211:	e8 14 fb ff ff       	call   c0007d2a <Phys::setPageState(unsigned long, bool)>
c0008216:	a1 e8 6e 02 c0       	mov    eax,ds:0xc0026ee8
c000821b:	83 c4 10             	add    esp,0x10
c000821e:	83 c0 01             	add    eax,0x1
c0008221:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c0008227:	a3 e8 6e 02 c0       	mov    ds:0xc0026ee8,eax
c000822c:	75 d3                	jne    c0008201 <Phys::physicalMemorySetup(unsigned int)+0x2a4>
c000822e:	83 c4 3c             	add    esp,0x3c
c0008231:	5b                   	pop    ebx
c0008232:	5e                   	pop    esi
c0008233:	5f                   	pop    edi
c0008234:	5d                   	pop    ebp
c0008235:	c3                   	ret    
c0008236:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c000823e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0008246:	e9 3b fe ff ff       	jmp    c0008086 <Phys::physicalMemorySetup(unsigned int)+0x129>
c000824b:	90                   	nop

c000824c <Pipe::isAtty()>:
c000824c:	31 c0                	xor    eax,eax
c000824e:	c3                   	ret    
c000824f:	90                   	nop

c0008250 <Pipe::~Pipe()>:
c0008250:	83 ec 0c             	sub    esp,0xc
c0008253:	ba 80 0f 02 c0       	mov    edx,0xc0020f80
c0008258:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000825c:	89 10                	mov    DWORD PTR [eax],edx
c000825e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008262:	83 ec 0c             	sub    esp,0xc
c0008265:	50                   	push   eax
c0008266:	e8 69 11 00 00       	call   c00093d4 <UnixFile::~UnixFile()>
c000826b:	83 c4 10             	add    esp,0x10
c000826e:	90                   	nop
c000826f:	83 c4 0c             	add    esp,0xc
c0008272:	c3                   	ret    
c0008273:	90                   	nop

c0008274 <Pipe::~Pipe()>:
c0008274:	83 ec 0c             	sub    esp,0xc
c0008277:	83 ec 0c             	sub    esp,0xc
c000827a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000827e:	e8 cd ff ff ff       	call   c0008250 <Pipe::~Pipe()>
c0008283:	83 c4 10             	add    esp,0x10
c0008286:	83 ec 08             	sub    esp,0x8
c0008289:	6a 20                	push   0x20
c000828b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000828f:	e8 b4 25 00 00       	call   c000a848 <operator delete(void*, unsigned long)>
c0008294:	83 c4 10             	add    esp,0x10
c0008297:	83 c4 0c             	add    esp,0xc
c000829a:	c3                   	ret    
c000829b:	90                   	nop

c000829c <Pipe::write(unsigned long long, void*, int*)>:
c000829c:	55                   	push   ebp
c000829d:	57                   	push   edi
c000829e:	56                   	push   esi
c000829f:	53                   	push   ebx
c00082a0:	83 ec 1c             	sub    esp,0x1c
c00082a3:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00082a7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00082ab:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c00082ae:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00082b2:	89 04 24             	mov    DWORD PTR [esp],eax
c00082b5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00082b9:	89 d8                	mov    eax,ebx
c00082bb:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00082be:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00082c2:	89 d6                	mov    esi,edx
c00082c4:	89 d7                	mov    edi,edx
c00082c6:	c1 ff 1f             	sar    edi,0x1f
c00082c9:	03 34 24             	add    esi,DWORD PTR [esp]
c00082cc:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00082d0:	c1 f8 1f             	sar    eax,0x1f
c00082d3:	39 f3                	cmp    ebx,esi
c00082d5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00082d9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00082dd:	19 f8                	sbb    eax,edi
c00082df:	b8 01 00 00 00       	mov    eax,0x1
c00082e4:	72 6e                	jb     c0008354 <Pipe::write(unsigned long long, void*, int*)+0xb8>
c00082e6:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00082e9:	01 d0                	add    eax,edx
c00082eb:	99                   	cdq    
c00082ec:	f7 fb                	idiv   ebx
c00082ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00082f2:	29 d3                	sub    ebx,edx
c00082f4:	89 d7                	mov    edi,edx
c00082f6:	89 de                	mov    esi,ebx
c00082f8:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00082fb:	c1 fb 1f             	sar    ebx,0x1f
c00082fe:	39 f2                	cmp    edx,esi
c0008300:	19 d8                	sbb    eax,ebx
c0008302:	b8 00 00 00 00       	mov    eax,0x0
c0008307:	72 04                	jb     c000830d <Pipe::write(unsigned long long, void*, int*)+0x71>
c0008309:	89 d0                	mov    eax,edx
c000830b:	29 f0                	sub    eax,esi
c000830d:	89 d3                	mov    ebx,edx
c000830f:	29 c3                	sub    ebx,eax
c0008311:	74 0b                	je     c000831e <Pipe::write(unsigned long long, void*, int*)+0x82>
c0008313:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c0008316:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000831a:	89 d9                	mov    ecx,ebx
c000831c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000831e:	85 c0                	test   eax,eax
c0008320:	74 0d                	je     c000832f <Pipe::write(unsigned long long, void*, int*)+0x93>
c0008322:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0008326:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0008329:	89 de                	mov    esi,ebx
c000832b:	89 c1                	mov    ecx,eax
c000832d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000832f:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c0008332:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008337:	75 10                	jne    c0008349 <Pipe::write(unsigned long long, void*, int*)+0xad>
c0008339:	83 ec 0c             	sub    esp,0xc
c000833c:	68 3d 0f 02 c0       	push   0xc0020f3d
c0008341:	e8 81 93 00 00       	call   c00116c7 <KePanic(char const*)>
c0008346:	83 c4 10             	add    esp,0x10
c0008349:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000834d:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008350:	89 08                	mov    DWORD PTR [eax],ecx
c0008352:	31 c0                	xor    eax,eax
c0008354:	83 c4 1c             	add    esp,0x1c
c0008357:	5b                   	pop    ebx
c0008358:	5e                   	pop    esi
c0008359:	5f                   	pop    edi
c000835a:	5d                   	pop    ebp
c000835b:	c3                   	ret    

c000835c <Pipe::read(unsigned long long, void*, int*)>:
c000835c:	55                   	push   ebp
c000835d:	57                   	push   edi
c000835e:	56                   	push   esi
c000835f:	53                   	push   ebx
c0008360:	83 ec 1c             	sub    esp,0x1c
c0008363:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0008367:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000836b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000836f:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0008372:	89 c8                	mov    eax,ecx
c0008374:	99                   	cdq    
c0008375:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0008379:	74 24                	je     c000839f <Pipe::read(unsigned long long, void*, int*)+0x43>
c000837b:	39 f9                	cmp    ecx,edi
c000837d:	89 d1                	mov    ecx,edx
c000837f:	19 f1                	sbb    ecx,esi
c0008381:	73 1c                	jae    c000839f <Pipe::read(unsigned long long, void*, int*)+0x43>
c0008383:	fa                   	cli    
c0008384:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c000838a:	e8 1d de 00 00       	call   c00161ac <schedule()>
c000838f:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0008394:	48                   	dec    eax
c0008395:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000839a:	75 d3                	jne    c000836f <Pipe::read(unsigned long long, void*, int*)+0x13>
c000839c:	fb                   	sti    
c000839d:	eb d0                	jmp    c000836f <Pipe::read(unsigned long long, void*, int*)+0x13>
c000839f:	39 f8                	cmp    eax,edi
c00083a1:	89 d1                	mov    ecx,edx
c00083a3:	89 3c 24             	mov    DWORD PTR [esp],edi
c00083a6:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c00083aa:	19 f1                	sbb    ecx,esi
c00083ac:	73 07                	jae    c00083b5 <Pipe::read(unsigned long long, void*, int*)+0x59>
c00083ae:	89 04 24             	mov    DWORD PTR [esp],eax
c00083b1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00083b5:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c00083b8:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c00083bb:	29 f7                	sub    edi,esi
c00083bd:	89 f8                	mov    eax,edi
c00083bf:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00083c3:	99                   	cdq    
c00083c4:	39 3c 24             	cmp    DWORD PTR [esp],edi
c00083c7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00083cb:	19 d0                	sbb    eax,edx
c00083cd:	73 07                	jae    c00083d6 <Pipe::read(unsigned long long, void*, int*)+0x7a>
c00083cf:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00083d2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00083d6:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c00083d9:	89 ea                	mov    edx,ebp
c00083db:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c00083df:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00083e4:	74 0d                	je     c00083f3 <Pipe::read(unsigned long long, void*, int*)+0x97>
c00083e6:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00083e9:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00083ed:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00083f1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00083f3:	85 d2                	test   edx,edx
c00083f5:	74 11                	je     c0008408 <Pipe::read(unsigned long long, void*, int*)+0xac>
c00083f7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083fb:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c00083fe:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0008402:	89 d1                	mov    ecx,edx
c0008404:	89 c7                	mov    edi,eax
c0008406:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008408:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000840b:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c000840e:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c0008411:	99                   	cdq    
c0008412:	89 f7                	mov    edi,esi
c0008414:	03 04 24             	add    eax,DWORD PTR [esp]
c0008417:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000841b:	c1 ff 1f             	sar    edi,0x1f
c000841e:	57                   	push   edi
c000841f:	56                   	push   esi
c0008420:	52                   	push   edx
c0008421:	50                   	push   eax
c0008422:	e8 f9 74 01 00       	call   c001f920 <__umoddi3>
c0008427:	83 c4 10             	add    esp,0x10
c000842a:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000842d:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008432:	75 10                	jne    c0008444 <Pipe::read(unsigned long long, void*, int*)+0xe8>
c0008434:	83 ec 0c             	sub    esp,0xc
c0008437:	68 5a 0f 02 c0       	push   0xc0020f5a
c000843c:	e8 86 92 00 00       	call   c00116c7 <KePanic(char const*)>
c0008441:	83 c4 10             	add    esp,0x10
c0008444:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0008448:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000844b:	89 10                	mov    DWORD PTR [eax],edx
c000844d:	83 c4 1c             	add    esp,0x1c
c0008450:	31 c0                	xor    eax,eax
c0008452:	5b                   	pop    ebx
c0008453:	5e                   	pop    esi
c0008454:	5f                   	pop    edi
c0008455:	5d                   	pop    ebp
c0008456:	c3                   	ret    
c0008457:	90                   	nop

c0008458 <Pipe::Pipe(int)>:
c0008458:	83 ec 0c             	sub    esp,0xc
c000845b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000845f:	83 ec 08             	sub    esp,0x8
c0008462:	6a 00                	push   0x0
c0008464:	50                   	push   eax
c0008465:	e8 84 0d 00 00       	call   c00091ee <UnixFile::UnixFile(int)>
c000846a:	83 c4 10             	add    esp,0x10
c000846d:	ba 80 0f 02 c0       	mov    edx,0xc0020f80
c0008472:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008476:	89 10                	mov    DWORD PTR [eax],edx
c0008478:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000847c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008480:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0008483:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008487:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000848e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008492:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0008499:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000849d:	83 ec 0c             	sub    esp,0xc
c00084a0:	50                   	push   eax
c00084a1:	e8 40 f6 ff ff       	call   c0007ae6 <malloc>
c00084a6:	83 c4 10             	add    esp,0x10
c00084a9:	89 c2                	mov    edx,eax
c00084ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00084af:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00084b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00084b6:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c00084ba:	90                   	nop
c00084bb:	83 c4 0c             	add    esp,0xc
c00084be:	c3                   	ret    
c00084bf:	90                   	nop

c00084c0 <VgaText::isAtty()>:
c00084c0:	b0 01                	mov    al,0x1
c00084c2:	c3                   	ret    
c00084c3:	90                   	nop

c00084c4 <VgaText::~VgaText()>:
c00084c4:	83 ec 0c             	sub    esp,0xc
c00084c7:	ba c8 0f 02 c0       	mov    edx,0xc0020fc8
c00084cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00084d0:	89 10                	mov    DWORD PTR [eax],edx
c00084d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00084d6:	83 ec 0c             	sub    esp,0xc
c00084d9:	50                   	push   eax
c00084da:	e8 f5 0e 00 00       	call   c00093d4 <UnixFile::~UnixFile()>
c00084df:	83 c4 10             	add    esp,0x10
c00084e2:	90                   	nop
c00084e3:	83 c4 0c             	add    esp,0xc
c00084e6:	c3                   	ret    
c00084e7:	90                   	nop

c00084e8 <VgaText::~VgaText()>:
c00084e8:	83 ec 0c             	sub    esp,0xc
c00084eb:	83 ec 0c             	sub    esp,0xc
c00084ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084f2:	e8 cd ff ff ff       	call   c00084c4 <VgaText::~VgaText()>
c00084f7:	83 c4 10             	add    esp,0x10
c00084fa:	83 ec 08             	sub    esp,0x8
c00084fd:	68 84 01 00 00       	push   0x184
c0008502:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008506:	e8 3d 23 00 00       	call   c000a848 <operator delete(void*, unsigned long)>
c000850b:	83 c4 10             	add    esp,0x10
c000850e:	83 c4 0c             	add    esp,0xc
c0008511:	c3                   	ret    

c0008512 <VgaText::read(unsigned long long, void*, int*)>:
c0008512:	83 ec 10             	sub    esp,0x10
c0008515:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008519:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000851d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008521:	e8 aa 53 00 00       	call   c000d8d0 <readKeyboard(VgaText*, char*, unsigned long)>
c0008526:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000852a:	89 02                	mov    DWORD PTR [edx],eax
c000852c:	31 c0                	xor    eax,eax
c000852e:	83 c4 1c             	add    esp,0x1c
c0008531:	c3                   	ret    

c0008532 <setTerminalScrollLock(bool)>:
c0008532:	c3                   	ret    

c0008533 <doTerminalCycle()>:
c0008533:	c3                   	ret    

c0008534 <addToTerminalCycle(VgaText*)>:
c0008534:	c3                   	ret    

c0008535 <scrollTerminalScrollLock(int)>:
c0008535:	c3                   	ret    

c0008536 <VgaText::updateTitle()>:
c0008536:	c3                   	ret    
c0008537:	90                   	nop

c0008538 <VgaText::load()>:
c0008538:	c3                   	ret    
c0008539:	90                   	nop

c000853a <VgaText::updateCursor()>:
c000853a:	83 ec 14             	sub    esp,0x14
c000853d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008541:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0008544:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0008547:	e8 18 0a 01 00       	call   c0018f64 <HalConsoleCursorUpdate(int, int)>
c000854c:	83 c4 1c             	add    esp,0x1c
c000854f:	c3                   	ret    

c0008550 <VgaText::doANSI_SGR(int)>:
c0008550:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008554:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008558:	85 d2                	test   edx,edx
c000855a:	75 0b                	jne    c0008567 <VgaText::doANSI_SGR(int)+0x17>
c000855c:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000855f:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008562:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0008565:	eb 59                	jmp    c00085c0 <VgaText::doANSI_SGR(int)+0x70>
c0008567:	83 fa 07             	cmp    edx,0x7
c000856a:	75 0b                	jne    c0008577 <VgaText::doANSI_SGR(int)+0x27>
c000856c:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c000856f:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0008572:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c0008575:	eb 49                	jmp    c00085c0 <VgaText::doANSI_SGR(int)+0x70>
c0008577:	83 fa 1b             	cmp    edx,0x1b
c000857a:	74 e0                	je     c000855c <VgaText::doANSI_SGR(int)+0xc>
c000857c:	8d 4a e2             	lea    ecx,[edx-0x1e]
c000857f:	83 f9 07             	cmp    ecx,0x7
c0008582:	77 09                	ja     c000858d <VgaText::doANSI_SGR(int)+0x3d>
c0008584:	8b 14 8d 20 38 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdc7e0]
c000858b:	eb 20                	jmp    c00085ad <VgaText::doANSI_SGR(int)+0x5d>
c000858d:	8d 4a d8             	lea    ecx,[edx-0x28]
c0008590:	83 f9 07             	cmp    ecx,0x7
c0008593:	77 09                	ja     c000859e <VgaText::doANSI_SGR(int)+0x4e>
c0008595:	8b 14 8d 20 38 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdc7e0]
c000859c:	eb 22                	jmp    c00085c0 <VgaText::doANSI_SGR(int)+0x70>
c000859e:	8d 4a a6             	lea    ecx,[edx-0x5a]
c00085a1:	83 f9 07             	cmp    ecx,0x7
c00085a4:	77 0b                	ja     c00085b1 <VgaText::doANSI_SGR(int)+0x61>
c00085a6:	8b 14 95 d8 36 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdc928]
c00085ad:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00085b0:	c3                   	ret    
c00085b1:	8d 4a 9c             	lea    ecx,[edx-0x64]
c00085b4:	83 f9 07             	cmp    ecx,0x7
c00085b7:	77 0a                	ja     c00085c3 <VgaText::doANSI_SGR(int)+0x73>
c00085b9:	8b 14 95 b0 36 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdc950]
c00085c0:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00085c3:	c3                   	ret    

c00085c4 <VgaText::setDefaultBgColour(VgaColour)>:
c00085c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085c8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085cc:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00085cf:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00085d2:	c3                   	ret    
c00085d3:	90                   	nop

c00085d4 <VgaText::setDefaultFgColour(VgaColour)>:
c00085d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085d8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085dc:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00085df:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00085e2:	c3                   	ret    
c00085e3:	90                   	nop

c00085e4 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c00085e4:	53                   	push   ebx
c00085e5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00085e9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00085ed:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00085f1:	51                   	push   ecx
c00085f2:	e8 cd ff ff ff       	call   c00085c4 <VgaText::setDefaultBgColour(VgaColour)>
c00085f7:	58                   	pop    eax
c00085f8:	5a                   	pop    edx
c00085f9:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00085fd:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0008601:	5b                   	pop    ebx
c0008602:	eb d0                	jmp    c00085d4 <VgaText::setDefaultFgColour(VgaColour)>

c0008604 <VgaText::setTitleTextColour(VgaColour)>:
c0008604:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008608:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000860c:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c000860f:	c3                   	ret    

c0008610 <VgaText::setTitleColour(VgaColour)>:
c0008610:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008614:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008618:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000861b:	c3                   	ret    

c000861c <VgaText::setTitle(char*)>:
c000861c:	c3                   	ret    
c000861d:	90                   	nop

c000861e <VgaText::combineColours(unsigned char, unsigned char)>:
c000861e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008622:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0008627:	83 e0 0f             	and    eax,0xf
c000862a:	c1 e2 04             	shl    edx,0x4
c000862d:	09 d0                	or     eax,edx
c000862f:	c3                   	ret    

c0008630 <VgaText::scrollScreen()>:
c0008630:	55                   	push   ebp
c0008631:	57                   	push   edi
c0008632:	56                   	push   esi
c0008633:	be 01 00 00 00       	mov    esi,0x1
c0008638:	53                   	push   ebx
c0008639:	83 ec 0c             	sub    esp,0xc
c000863c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008640:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0008643:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c0008649:	31 ff                	xor    edi,edi
c000864b:	01 e9                	add    ecx,ebp
c000864d:	8a 01                	mov    al,BYTE PTR [ecx]
c000864f:	83 fe 18             	cmp    esi,0x18
c0008652:	88 81 60 ff ff ff    	mov    BYTE PTR [ecx-0xa0],al
c0008658:	75 20                	jne    c000867a <VgaText::scrollScreen()+0x4a>
c000865a:	f7 c7 01 00 00 00    	test   edi,0x1
c0008660:	74 15                	je     c0008677 <VgaText::scrollScreen()+0x47>
c0008662:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0008666:	50                   	push   eax
c0008667:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c000866b:	50                   	push   eax
c000866c:	e8 ad ff ff ff       	call   c000861e <VgaText::combineColours(unsigned char, unsigned char)>
c0008671:	5a                   	pop    edx
c0008672:	5a                   	pop    edx
c0008673:	88 01                	mov    BYTE PTR [ecx],al
c0008675:	eb 03                	jmp    c000867a <VgaText::scrollScreen()+0x4a>
c0008677:	c6 01 20             	mov    BYTE PTR [ecx],0x20
c000867a:	47                   	inc    edi
c000867b:	41                   	inc    ecx
c000867c:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0008682:	75 c9                	jne    c000864d <VgaText::scrollScreen()+0x1d>
c0008684:	46                   	inc    esi
c0008685:	83 fe 19             	cmp    esi,0x19
c0008688:	75 b9                	jne    c0008643 <VgaText::scrollScreen()+0x13>
c000868a:	39 1d 04 6f 02 c0    	cmp    DWORD PTR ds:0xc0026f04,ebx
c0008690:	75 1f                	jne    c00086b1 <VgaText::scrollScreen()+0x81>
c0008692:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0008696:	74 05                	je     c000869d <VgaText::scrollScreen()+0x6d>
c0008698:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c000869b:	eb 14                	jmp    c00086b1 <VgaText::scrollScreen()+0x81>
c000869d:	50                   	push   eax
c000869e:	50                   	push   eax
c000869f:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c00086a3:	50                   	push   eax
c00086a4:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c00086a8:	50                   	push   eax
c00086a9:	e8 4a 07 01 00       	call   c0018df8 <HalConsoleScroll(int, int)>
c00086ae:	83 c4 10             	add    esp,0x10
c00086b1:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00086b5:	83 c4 0c             	add    esp,0xc
c00086b8:	5b                   	pop    ebx
c00086b9:	5e                   	pop    esi
c00086ba:	5f                   	pop    edi
c00086bb:	5d                   	pop    ebp
c00086bc:	e9 79 fe ff ff       	jmp    c000853a <VgaText::updateCursor()>
c00086c1:	90                   	nop

c00086c2 <VgaText::combineCharAndColour(char, unsigned char)>:
c00086c2:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00086c7:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c00086cc:	c1 e0 08             	shl    eax,0x8
c00086cf:	09 d0                	or     eax,edx
c00086d1:	c3                   	ret    

c00086d2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00086d2:	55                   	push   ebp
c00086d3:	57                   	push   edi
c00086d4:	56                   	push   esi
c00086d5:	53                   	push   ebx
c00086d6:	83 ec 1c             	sub    esp,0x1c
c00086d9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00086dd:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00086e1:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00086e5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00086e9:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00086ed:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00086f1:	0f b6 c3             	movzx  eax,bl
c00086f4:	50                   	push   eax
c00086f5:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c00086fa:	50                   	push   eax
c00086fb:	e8 1e ff ff ff       	call   c000861e <VgaText::combineColours(unsigned char, unsigned char)>
c0008700:	5a                   	pop    edx
c0008701:	0f b6 c0             	movzx  eax,al
c0008704:	59                   	pop    ecx
c0008705:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c000870a:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000870e:	50                   	push   eax
c000870f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008713:	e8 aa ff ff ff       	call   c00086c2 <VgaText::combineCharAndColour(char, unsigned char)>
c0008718:	5a                   	pop    edx
c0008719:	6b d7 50             	imul   edx,edi,0x50
c000871c:	59                   	pop    ecx
c000871d:	01 f2                	add    edx,esi
c000871f:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0008722:	0f b7 d2             	movzx  edx,dx
c0008725:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c0008729:	39 2d 04 6f 02 c0    	cmp    DWORD PTR ds:0xc0026f04,ebp
c000872f:	75 28                	jne    c0008759 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x87>
c0008731:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008735:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0008739:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c000873d:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c0008741:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0008745:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008749:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000874d:	83 c4 1c             	add    esp,0x1c
c0008750:	5b                   	pop    ebx
c0008751:	5e                   	pop    esi
c0008752:	5f                   	pop    edi
c0008753:	5d                   	pop    ebp
c0008754:	e9 a7 07 01 00       	jmp    c0018f00 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0008759:	83 c4 1c             	add    esp,0x1c
c000875c:	5b                   	pop    ebx
c000875d:	5e                   	pop    esi
c000875e:	5f                   	pop    edi
c000875f:	5d                   	pop    ebp
c0008760:	c3                   	ret    
c0008761:	90                   	nop

c0008762 <VgaText::getCursorX()>:
c0008762:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008766:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0008769:	c3                   	ret    

c000876a <VgaText::getCursorY()>:
c000876a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000876e:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0008771:	c3                   	ret    

c0008772 <VgaText::setCursor(int, int)>:
c0008772:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008776:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000877a:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c000877d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008781:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0008784:	e9 b1 fd ff ff       	jmp    c000853a <VgaText::updateCursor()>

c0008789 <setActiveTerminal(VgaText*)>:
c0008789:	53                   	push   ebx
c000878a:	83 ec 08             	sub    esp,0x8
c000878d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008791:	85 db                	test   ebx,ebx
c0008793:	75 11                	jne    c00087a6 <setActiveTerminal(VgaText*)+0x1d>
c0008795:	c7 44 24 10 94 0f 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020f94
c000879d:	83 c4 08             	add    esp,0x8
c00087a0:	5b                   	pop    ebx
c00087a1:	e9 21 8f 00 00       	jmp    c00116c7 <KePanic(char const*)>
c00087a6:	a1 04 6f 02 c0       	mov    eax,ds:0xc0026f04
c00087ab:	85 c0                	test   eax,eax
c00087ad:	74 0c                	je     c00087bb <setActiveTerminal(VgaText*)+0x32>
c00087af:	83 ec 0c             	sub    esp,0xc
c00087b2:	50                   	push   eax
c00087b3:	e8 82 fd ff ff       	call   c000853a <VgaText::updateCursor()>
c00087b8:	83 c4 10             	add    esp,0x10
c00087bb:	89 1d 04 6f 02 c0    	mov    DWORD PTR ds:0xc0026f04,ebx
c00087c1:	50                   	push   eax
c00087c2:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00087c5:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00087c8:	53                   	push   ebx
c00087c9:	e8 a4 ff ff ff       	call   c0008772 <VgaText::setCursor(int, int)>
c00087ce:	83 c4 18             	add    esp,0x18
c00087d1:	5b                   	pop    ebx
c00087d2:	c3                   	ret    
c00087d3:	90                   	nop

c00087d4 <VgaText::clearScreen()>:
c00087d4:	57                   	push   edi
c00087d5:	56                   	push   esi
c00087d6:	31 f6                	xor    esi,esi
c00087d8:	53                   	push   ebx
c00087d9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00087dd:	52                   	push   edx
c00087de:	6a 00                	push   0x0
c00087e0:	6a 00                	push   0x0
c00087e2:	53                   	push   ebx
c00087e3:	e8 8a ff ff ff       	call   c0008772 <VgaText::setCursor(int, int)>
c00087e8:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00087ef:	83 c4 10             	add    esp,0x10
c00087f2:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c00087f5:	7e 20                	jle    c0008817 <VgaText::clearScreen()+0x43>
c00087f7:	31 ff                	xor    edi,edi
c00087f9:	50                   	push   eax
c00087fa:	50                   	push   eax
c00087fb:	56                   	push   esi
c00087fc:	57                   	push   edi
c00087fd:	47                   	inc    edi
c00087fe:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008801:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008804:	6a 20                	push   0x20
c0008806:	53                   	push   ebx
c0008807:	e8 c6 fe ff ff       	call   c00086d2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000880c:	83 c4 20             	add    esp,0x20
c000880f:	83 ff 50             	cmp    edi,0x50
c0008812:	75 e5                	jne    c00087f9 <VgaText::clearScreen()+0x25>
c0008814:	46                   	inc    esi
c0008815:	eb db                	jmp    c00087f2 <VgaText::clearScreen()+0x1e>
c0008817:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c000881e:	5b                   	pop    ebx
c000881f:	5e                   	pop    esi
c0008820:	5f                   	pop    edi
c0008821:	c3                   	ret    

c0008822 <VgaText::setCursorX(int)>:
c0008822:	83 ec 10             	sub    esp,0x10
c0008825:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008829:	ff 70 18             	push   DWORD PTR [eax+0x18]
c000882c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008830:	50                   	push   eax
c0008831:	e8 3c ff ff ff       	call   c0008772 <VgaText::setCursor(int, int)>
c0008836:	83 c4 1c             	add    esp,0x1c
c0008839:	c3                   	ret    

c000883a <VgaText::setCursorY(int)>:
c000883a:	83 ec 10             	sub    esp,0x10
c000883d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008841:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008845:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0008848:	50                   	push   eax
c0008849:	e8 24 ff ff ff       	call   c0008772 <VgaText::setCursor(int, int)>
c000884e:	83 c4 1c             	add    esp,0x1c
c0008851:	c3                   	ret    

c0008852 <VgaText::incrementCursor(bool)>:
c0008852:	56                   	push   esi
c0008853:	53                   	push   ebx
c0008854:	51                   	push   ecx
c0008855:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008859:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000885d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0008860:	40                   	inc    eax
c0008861:	83 f8 50             	cmp    eax,0x50
c0008864:	74 05                	je     c000886b <VgaText::incrementCursor(bool)+0x19>
c0008866:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0008869:	eb 24                	jmp    c000888f <VgaText::incrementCursor(bool)+0x3d>
c000886b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000886e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008875:	8d 50 01             	lea    edx,[eax+0x1]
c0008878:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000887b:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c000887e:	75 0f                	jne    c000888f <VgaText::incrementCursor(bool)+0x3d>
c0008880:	83 ec 0c             	sub    esp,0xc
c0008883:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008886:	53                   	push   ebx
c0008887:	e8 a4 fd ff ff       	call   c0008630 <VgaText::scrollScreen()>
c000888c:	83 c4 10             	add    esp,0x10
c000888f:	89 f0                	mov    eax,esi
c0008891:	84 c0                	test   al,al
c0008893:	74 0c                	je     c00088a1 <VgaText::incrementCursor(bool)+0x4f>
c0008895:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008899:	5a                   	pop    edx
c000889a:	5b                   	pop    ebx
c000889b:	5e                   	pop    esi
c000889c:	e9 99 fc ff ff       	jmp    c000853a <VgaText::updateCursor()>
c00088a1:	58                   	pop    eax
c00088a2:	5b                   	pop    ebx
c00088a3:	5e                   	pop    esi
c00088a4:	c3                   	ret    
c00088a5:	90                   	nop

c00088a6 <VgaText::decrementCursor(bool)>:
c00088a6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00088aa:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00088ae:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00088b1:	85 c0                	test   eax,eax
c00088b3:	74 04                	je     c00088b9 <VgaText::decrementCursor(bool)+0x13>
c00088b5:	48                   	dec    eax
c00088b6:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00088b9:	84 c9                	test   cl,cl
c00088bb:	74 09                	je     c00088c6 <VgaText::decrementCursor(bool)+0x20>
c00088bd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00088c1:	e9 74 fc ff ff       	jmp    c000853a <VgaText::updateCursor()>
c00088c6:	c3                   	ret    
c00088c7:	90                   	nop

c00088c8 <VgaText::putchar(char, VgaColour, VgaColour)>:
c00088c8:	53                   	push   ebx
c00088c9:	83 ec 08             	sub    esp,0x8
c00088cc:	0f be 44 24 14       	movsx  eax,BYTE PTR [esp+0x14]
c00088d1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00088d5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00088d9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00088dd:	83 f8 07             	cmp    eax,0x7
c00088e0:	75 21                	jne    c0008903 <VgaText::putchar(char, VgaColour, VgaColour)+0x3b>
c00088e2:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00088ea:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c00088f2:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c00088fa:	83 c4 08             	add    esp,0x8
c00088fd:	5b                   	pop    ebx
c00088fe:	e9 18 3b 00 00       	jmp    c000c41b <Krnl::beep(int, int, bool)>
c0008903:	83 f8 0d             	cmp    eax,0xd
c0008906:	75 09                	jne    c0008911 <VgaText::putchar(char, VgaColour, VgaColour)+0x49>
c0008908:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000890f:	eb 2d                	jmp    c000893e <VgaText::putchar(char, VgaColour, VgaColour)+0x76>
c0008911:	83 f8 0a             	cmp    eax,0xa
c0008914:	75 31                	jne    c0008947 <VgaText::putchar(char, VgaColour, VgaColour)+0x7f>
c0008916:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008919:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008920:	8d 50 01             	lea    edx,[eax+0x1]
c0008923:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0008926:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0008929:	75 0f                	jne    c000893a <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c000892b:	83 ec 0c             	sub    esp,0xc
c000892e:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008931:	53                   	push   ebx
c0008932:	e8 f9 fc ff ff       	call   c0008630 <VgaText::scrollScreen()>
c0008937:	83 c4 10             	add    esp,0x10
c000893a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000893e:	83 c4 08             	add    esp,0x8
c0008941:	5b                   	pop    ebx
c0008942:	e9 f3 fb ff ff       	jmp    c000853a <VgaText::updateCursor()>
c0008947:	83 f8 08             	cmp    eax,0x8
c000894a:	75 25                	jne    c0008971 <VgaText::putchar(char, VgaColour, VgaColour)+0xa9>
c000894c:	50                   	push   eax
c000894d:	50                   	push   eax
c000894e:	6a 01                	push   0x1
c0008950:	53                   	push   ebx
c0008951:	e8 50 ff ff ff       	call   c00088a6 <VgaText::decrementCursor(bool)>
c0008956:	5a                   	pop    edx
c0008957:	59                   	pop    ecx
c0008958:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000895b:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000895e:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008961:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008964:	6a 20                	push   0x20
c0008966:	53                   	push   ebx
c0008967:	e8 66 fd ff ff       	call   c00086d2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000896c:	83 c4 28             	add    esp,0x28
c000896f:	5b                   	pop    ebx
c0008970:	c3                   	ret    
c0008971:	83 ec 08             	sub    esp,0x8
c0008974:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008977:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000897a:	51                   	push   ecx
c000897b:	52                   	push   edx
c000897c:	50                   	push   eax
c000897d:	53                   	push   ebx
c000897e:	e8 4f fd ff ff       	call   c00086d2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008983:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0008987:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c000898f:	83 c4 28             	add    esp,0x28
c0008992:	5b                   	pop    ebx
c0008993:	e9 ba fe ff ff       	jmp    c0008852 <VgaText::incrementCursor(bool)>

c0008998 <VgaText::putchar(char)>:
c0008998:	57                   	push   edi
c0008999:	56                   	push   esi
c000899a:	53                   	push   ebx
c000899b:	83 ec 10             	sub    esp,0x10
c000899e:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00089a2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00089a6:	89 f8                	mov    eax,edi
c00089a8:	0f be c0             	movsx  eax,al
c00089ab:	83 f8 5b             	cmp    eax,0x5b
c00089ae:	75 18                	jne    c00089c8 <VgaText::putchar(char)+0x30>
c00089b0:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c00089b4:	74 20                	je     c00089d6 <VgaText::putchar(char)+0x3e>
c00089b6:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c00089bc:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c00089c3:	e9 c1 00 00 00       	jmp    c0008a89 <VgaText::putchar(char)+0xf1>
c00089c8:	83 f8 1b             	cmp    eax,0x1b
c00089cb:	75 09                	jne    c00089d6 <VgaText::putchar(char)+0x3e>
c00089cd:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c00089d1:	e9 b3 00 00 00       	jmp    c0008a89 <VgaText::putchar(char)+0xf1>
c00089d6:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c00089d9:	84 c9                	test   cl,cl
c00089db:	0f 84 98 00 00 00    	je     c0008a79 <VgaText::putchar(char)+0xe1>
c00089e1:	8d 77 c0             	lea    esi,[edi-0x40]
c00089e4:	89 f2                	mov    edx,esi
c00089e6:	80 fa 3e             	cmp    dl,0x3e
c00089e9:	77 78                	ja     c0008a63 <VgaText::putchar(char)+0xcb>
c00089eb:	83 f8 6d             	cmp    eax,0x6d
c00089ee:	75 47                	jne    c0008a37 <VgaText::putchar(char)+0x9f>
c00089f0:	31 f6                	xor    esi,esi
c00089f2:	31 d2                	xor    edx,edx
c00089f4:	31 c0                	xor    eax,eax
c00089f6:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c00089f9:	7e 2d                	jle    c0008a28 <VgaText::putchar(char)+0x90>
c00089fb:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c0008a00:	83 fa 3b             	cmp    edx,0x3b
c0008a03:	75 17                	jne    c0008a1c <VgaText::putchar(char)+0x84>
c0008a05:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0008a09:	50                   	push   eax
c0008a0a:	53                   	push   ebx
c0008a0b:	e8 40 fb ff ff       	call   c0008550 <VgaText::doANSI_SGR(int)>
c0008a10:	59                   	pop    ecx
c0008a11:	31 d2                	xor    edx,edx
c0008a13:	5f                   	pop    edi
c0008a14:	31 c0                	xor    eax,eax
c0008a16:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0008a1a:	eb 09                	jmp    c0008a25 <VgaText::putchar(char)+0x8d>
c0008a1c:	6b c0 0a             	imul   eax,eax,0xa
c0008a1f:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0008a23:	88 ca                	mov    dl,cl
c0008a25:	46                   	inc    esi
c0008a26:	eb ce                	jmp    c00089f6 <VgaText::putchar(char)+0x5e>
c0008a28:	84 d2                	test   dl,dl
c0008a2a:	74 2f                	je     c0008a5b <VgaText::putchar(char)+0xc3>
c0008a2c:	50                   	push   eax
c0008a2d:	53                   	push   ebx
c0008a2e:	e8 1d fb ff ff       	call   c0008550 <VgaText::doANSI_SGR(int)>
c0008a33:	58                   	pop    eax
c0008a34:	5a                   	pop    edx
c0008a35:	eb 24                	jmp    c0008a5b <VgaText::putchar(char)+0xc3>
c0008a37:	83 f8 4a             	cmp    eax,0x4a
c0008a3a:	75 1f                	jne    c0008a5b <VgaText::putchar(char)+0xc3>
c0008a3c:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0008a40:	75 19                	jne    c0008a5b <VgaText::putchar(char)+0xc3>
c0008a42:	83 ec 0c             	sub    esp,0xc
c0008a45:	53                   	push   ebx
c0008a46:	e8 89 fd ff ff       	call   c00087d4 <VgaText::clearScreen()>
c0008a4b:	83 c4 0c             	add    esp,0xc
c0008a4e:	6a 00                	push   0x0
c0008a50:	6a 00                	push   0x0
c0008a52:	53                   	push   ebx
c0008a53:	e8 1a fd ff ff       	call   c0008772 <VgaText::setCursor(int, int)>
c0008a58:	83 c4 10             	add    esp,0x10
c0008a5b:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0008a61:	eb 26                	jmp    c0008a89 <VgaText::putchar(char)+0xf1>
c0008a63:	8b 43 54             	mov    eax,DWORD PTR [ebx+0x54]
c0008a66:	83 f8 0e             	cmp    eax,0xe
c0008a69:	7f 1e                	jg     c0008a89 <VgaText::putchar(char)+0xf1>
c0008a6b:	8d 48 01             	lea    ecx,[eax+0x1]
c0008a6e:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0008a71:	89 f9                	mov    ecx,edi
c0008a73:	88 4c 03 42          	mov    BYTE PTR [ebx+eax*1+0x42],cl
c0008a77:	eb 10                	jmp    c0008a89 <VgaText::putchar(char)+0xf1>
c0008a79:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008a7c:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008a7f:	50                   	push   eax
c0008a80:	53                   	push   ebx
c0008a81:	e8 42 fe ff ff       	call   c00088c8 <VgaText::putchar(char, VgaColour, VgaColour)>
c0008a86:	83 c4 10             	add    esp,0x10
c0008a89:	83 c4 10             	add    esp,0x10
c0008a8c:	5b                   	pop    ebx
c0008a8d:	5e                   	pop    esi
c0008a8e:	5f                   	pop    edi
c0008a8f:	c3                   	ret    

c0008a90 <VgaText::putx(unsigned int)>:
c0008a90:	57                   	push   edi
c0008a91:	b9 11 00 00 00       	mov    ecx,0x11
c0008a96:	56                   	push   esi
c0008a97:	be a2 0f 02 c0       	mov    esi,0xc0020fa2
c0008a9c:	53                   	push   ebx
c0008a9d:	83 ec 20             	sub    esp,0x20
c0008aa0:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008aa4:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0008aa8:	fc                   	cld    
c0008aa9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008aab:	be 08 00 00 00       	mov    esi,0x8
c0008ab0:	50                   	push   eax
c0008ab1:	50                   	push   eax
c0008ab2:	89 d8                	mov    eax,ebx
c0008ab4:	c1 e3 04             	shl    ebx,0x4
c0008ab7:	c1 e8 1c             	shr    eax,0x1c
c0008aba:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0008abf:	50                   	push   eax
c0008ac0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0008ac4:	e8 cf fe ff ff       	call   c0008998 <VgaText::putchar(char)>
c0008ac9:	83 c4 10             	add    esp,0x10
c0008acc:	4e                   	dec    esi
c0008acd:	75 e1                	jne    c0008ab0 <VgaText::putx(unsigned int)+0x20>
c0008acf:	83 c4 20             	add    esp,0x20
c0008ad2:	5b                   	pop    ebx
c0008ad3:	5e                   	pop    esi
c0008ad4:	5f                   	pop    edi
c0008ad5:	c3                   	ret    

c0008ad6 <VgaText::puts(char const*)>:
c0008ad6:	53                   	push   ebx
c0008ad7:	83 ec 08             	sub    esp,0x8
c0008ada:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0008ade:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0008ae1:	85 c0                	test   eax,eax
c0008ae3:	74 12                	je     c0008af7 <VgaText::puts(char const*)+0x21>
c0008ae5:	43                   	inc    ebx
c0008ae6:	51                   	push   ecx
c0008ae7:	51                   	push   ecx
c0008ae8:	50                   	push   eax
c0008ae9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008aed:	e8 a6 fe ff ff       	call   c0008998 <VgaText::putchar(char)>
c0008af2:	83 c4 10             	add    esp,0x10
c0008af5:	eb e7                	jmp    c0008ade <VgaText::puts(char const*)+0x8>
c0008af7:	83 c4 08             	add    esp,0x8
c0008afa:	5b                   	pop    ebx
c0008afb:	c3                   	ret    

c0008afc <VgaText::write(unsigned long long, void*, int*)>:
c0008afc:	55                   	push   ebp
c0008afd:	57                   	push   edi
c0008afe:	56                   	push   esi
c0008aff:	53                   	push   ebx
c0008b00:	83 ec 0c             	sub    esp,0xc
c0008b03:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0008b07:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008b0b:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0008b0f:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0008b16:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0008b19:	39 eb                	cmp    ebx,ebp
c0008b1b:	74 13                	je     c0008b30 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0008b1d:	43                   	inc    ebx
c0008b1e:	50                   	push   eax
c0008b1f:	50                   	push   eax
c0008b20:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0008b24:	50                   	push   eax
c0008b25:	56                   	push   esi
c0008b26:	e8 6d fe ff ff       	call   c0008998 <VgaText::putchar(char)>
c0008b2b:	83 c4 10             	add    esp,0x10
c0008b2e:	eb e9                	jmp    c0008b19 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0008b30:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0008b37:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008b3b:	89 38                	mov    DWORD PTR [eax],edi
c0008b3d:	83 c4 0c             	add    esp,0xc
c0008b40:	31 c0                	xor    eax,eax
c0008b42:	5b                   	pop    ebx
c0008b43:	5e                   	pop    esi
c0008b44:	5f                   	pop    edi
c0008b45:	5d                   	pop    ebp
c0008b46:	c3                   	ret    
c0008b47:	90                   	nop

c0008b48 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0008b48:	55                   	push   ebp
c0008b49:	57                   	push   edi
c0008b4a:	56                   	push   esi
c0008b4b:	53                   	push   ebx
c0008b4c:	83 ec 0c             	sub    esp,0xc
c0008b4f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008b53:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008b58:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0008b5f:	50                   	push   eax
c0008b60:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008b65:	50                   	push   eax
c0008b66:	e8 b3 fa ff ff       	call   c000861e <VgaText::combineColours(unsigned char, unsigned char)>
c0008b6b:	5a                   	pop    edx
c0008b6c:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008b70:	59                   	pop    ecx
c0008b71:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008b74:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008b78:	0f b7 f6             	movzx  esi,si
c0008b7b:	0f b6 e8             	movzx  ebp,al
c0008b7e:	01 f6                	add    esi,esi
c0008b80:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008b83:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0008b86:	85 c0                	test   eax,eax
c0008b88:	0f 84 ef 00 00 00    	je     c0008c7d <VgaText::puts(char const*, VgaColour, VgaColour)+0x135>
c0008b8e:	83 f8 0d             	cmp    eax,0xd
c0008b91:	75 0c                	jne    c0008b9f <VgaText::puts(char const*, VgaColour, VgaColour)+0x57>
c0008b93:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008b9a:	e9 d8 00 00 00       	jmp    c0008c77 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008b9f:	83 f8 0a             	cmp    eax,0xa
c0008ba2:	75 44                	jne    c0008be8 <VgaText::puts(char const*, VgaColour, VgaColour)+0xa0>
c0008ba4:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008ba7:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008bae:	8d 48 01             	lea    ecx,[eax+0x1]
c0008bb1:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0008bb4:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c0008bb7:	75 0f                	jne    c0008bc8 <VgaText::puts(char const*, VgaColour, VgaColour)+0x80>
c0008bb9:	83 ec 0c             	sub    esp,0xc
c0008bbc:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008bbf:	53                   	push   ebx
c0008bc0:	e8 6b fa ff ff       	call   c0008630 <VgaText::scrollScreen()>
c0008bc5:	83 c4 10             	add    esp,0x10
c0008bc8:	83 ec 0c             	sub    esp,0xc
c0008bcb:	53                   	push   ebx
c0008bcc:	e8 69 f9 ff ff       	call   c000853a <VgaText::updateCursor()>
c0008bd1:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008bd5:	83 c4 10             	add    esp,0x10
c0008bd8:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008bdb:	0f b7 f6             	movzx  esi,si
c0008bde:	01 f6                	add    esi,esi
c0008be0:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008be3:	e9 8f 00 00 00       	jmp    c0008c77 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008be8:	83 f8 08             	cmp    eax,0x8
c0008beb:	75 34                	jne    c0008c21 <VgaText::puts(char const*, VgaColour, VgaColour)+0xd9>
c0008bed:	51                   	push   ecx
c0008bee:	51                   	push   ecx
c0008bef:	6a 01                	push   0x1
c0008bf1:	53                   	push   ebx
c0008bf2:	e8 af fc ff ff       	call   c00088a6 <VgaText::decrementCursor(bool)>
c0008bf7:	5e                   	pop    esi
c0008bf8:	58                   	pop    eax
c0008bf9:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008bfc:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008bff:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008c02:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008c05:	6a 20                	push   0x20
c0008c07:	53                   	push   ebx
c0008c08:	e8 c5 fa ff ff       	call   c00086d2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008c0d:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008c11:	83 c4 20             	add    esp,0x20
c0008c14:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008c17:	0f b7 f6             	movzx  esi,si
c0008c1a:	01 f6                	add    esi,esi
c0008c1c:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008c1f:	eb 56                	jmp    c0008c77 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008c21:	52                   	push   edx
c0008c22:	52                   	push   edx
c0008c23:	55                   	push   ebp
c0008c24:	50                   	push   eax
c0008c25:	e8 98 fa ff ff       	call   c00086c2 <VgaText::combineCharAndColour(char, unsigned char)>
c0008c2a:	83 c4 10             	add    esp,0x10
c0008c2d:	66 89 06             	mov    WORD PTR [esi],ax
c0008c30:	39 1d 04 6f 02 c0    	cmp    DWORD PTR ds:0xc0026f04,ebx
c0008c36:	75 1d                	jne    c0008c55 <VgaText::puts(char const*, VgaColour, VgaColour)+0x10d>
c0008c38:	83 ec 0c             	sub    esp,0xc
c0008c3b:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008c3e:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008c41:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008c45:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008c49:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0008c4c:	50                   	push   eax
c0008c4d:	e8 ae 02 01 00       	call   c0018f00 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0008c52:	83 c4 20             	add    esp,0x20
c0008c55:	83 c6 02             	add    esi,0x2
c0008c58:	50                   	push   eax
c0008c59:	50                   	push   eax
c0008c5a:	6a 00                	push   0x0
c0008c5c:	53                   	push   ebx
c0008c5d:	e8 f0 fb ff ff       	call   c0008852 <VgaText::incrementCursor(bool)>
c0008c62:	83 c4 10             	add    esp,0x10
c0008c65:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0008c69:	75 0c                	jne    c0008c77 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008c6b:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008c6f:	0f b7 f6             	movzx  esi,si
c0008c72:	01 f6                	add    esi,esi
c0008c74:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008c77:	47                   	inc    edi
c0008c78:	e9 06 ff ff ff       	jmp    c0008b83 <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c0008c7d:	83 ec 0c             	sub    esp,0xc
c0008c80:	53                   	push   ebx
c0008c81:	e8 b4 f8 ff ff       	call   c000853a <VgaText::updateCursor()>
c0008c86:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0008c8d:	83 c4 1c             	add    esp,0x1c
c0008c90:	5b                   	pop    ebx
c0008c91:	5e                   	pop    esi
c0008c92:	5f                   	pop    edi
c0008c93:	5d                   	pop    ebp
c0008c94:	c3                   	ret    
c0008c95:	90                   	nop

c0008c96 <VgaText::VgaText(char const*)>:
c0008c96:	56                   	push   esi
c0008c97:	53                   	push   ebx
c0008c98:	83 ec 04             	sub    esp,0x4
c0008c9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c9f:	83 ec 08             	sub    esp,0x8
c0008ca2:	6a 00                	push   0x0
c0008ca4:	50                   	push   eax
c0008ca5:	e8 44 05 00 00       	call   c00091ee <UnixFile::UnixFile(int)>
c0008caa:	83 c4 10             	add    esp,0x10
c0008cad:	ba c8 0f 02 c0       	mov    edx,0xc0020fc8
c0008cb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cb6:	89 10                	mov    DWORD PTR [eax],edx
c0008cb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cbc:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0008cc3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cc7:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0008cce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cd2:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c0008cd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cda:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0008cde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ce2:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c0008ce9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ced:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0008cf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cf8:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0008cff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d03:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0008d0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d0e:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c0008d15:	83 ec 0c             	sub    esp,0xc
c0008d18:	6a 01                	push   0x1
c0008d1a:	e8 1e 09 00 00       	call   c000963d <Virt::allocateKernelVirtualPages(int)>
c0008d1f:	83 c4 10             	add    esp,0x10
c0008d22:	89 c2                	mov    edx,eax
c0008d24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d28:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008d2b:	8b 1d b0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fb0
c0008d31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d35:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008d38:	89 c6                	mov    esi,eax
c0008d3a:	e8 b0 f0 ff ff       	call   c0007def <Phys::allocatePage()>
c0008d3f:	68 05 0c 00 00       	push   0xc05
c0008d44:	56                   	push   esi
c0008d45:	50                   	push   eax
c0008d46:	53                   	push   ebx
c0008d47:	e8 04 10 00 00       	call   c0009d50 <VAS::mapPage(unsigned long, unsigned long, int)>
c0008d4c:	83 c4 10             	add    esp,0x10
c0008d4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d53:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008d56:	83 ec 04             	sub    esp,0x4
c0008d59:	68 a0 0f 00 00       	push   0xfa0
c0008d5e:	6a 00                	push   0x0
c0008d60:	50                   	push   eax
c0008d61:	e8 8a 77 ff ff       	call   c00004f0 <memset>
c0008d66:	83 c4 10             	add    esp,0x10
c0008d69:	83 ec 04             	sub    esp,0x4
c0008d6c:	6a 00                	push   0x0
c0008d6e:	6a 07                	push   0x7
c0008d70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d74:	e8 6b f8 ff ff       	call   c00085e4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0008d79:	83 c4 10             	add    esp,0x10
c0008d7c:	83 ec 04             	sub    esp,0x4
c0008d7f:	6a 00                	push   0x0
c0008d81:	6a 00                	push   0x0
c0008d83:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d87:	e8 e6 f9 ff ff       	call   c0008772 <VgaText::setCursor(int, int)>
c0008d8c:	83 c4 10             	add    esp,0x10
c0008d8f:	83 ec 0c             	sub    esp,0xc
c0008d92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d96:	e8 39 fa ff ff       	call   c00087d4 <VgaText::clearScreen()>
c0008d9b:	83 c4 10             	add    esp,0x10
c0008d9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008da2:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0008da6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008daa:	05 82 00 00 00       	add    eax,0x82
c0008daf:	83 ec 04             	sub    esp,0x4
c0008db2:	68 80 00 00 00       	push   0x80
c0008db7:	6a 00                	push   0x0
c0008db9:	50                   	push   eax
c0008dba:	e8 31 77 ff ff       	call   c00004f0 <memset>
c0008dbf:	83 c4 10             	add    esp,0x10
c0008dc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008dc6:	05 02 01 00 00       	add    eax,0x102
c0008dcb:	83 ec 04             	sub    esp,0x4
c0008dce:	68 80 00 00 00       	push   0x80
c0008dd3:	6a 00                	push   0x0
c0008dd5:	50                   	push   eax
c0008dd6:	e8 15 77 ff ff       	call   c00004f0 <memset>
c0008ddb:	83 c4 10             	add    esp,0x10
c0008dde:	90                   	nop
c0008ddf:	83 c4 04             	add    esp,0x4
c0008de2:	5b                   	pop    ebx
c0008de3:	5e                   	pop    esi
c0008de4:	c3                   	ret    
c0008de5:	90                   	nop

c0008de6 <VgaText::receiveKey(unsigned char)>:
c0008de6:	55                   	push   ebp
c0008de7:	57                   	push   edi
c0008de8:	56                   	push   esi
c0008de9:	53                   	push   ebx
c0008dea:	83 ec 2c             	sub    esp,0x2c
c0008ded:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0008df1:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0008df5:	89 ef                	mov    edi,ebp
c0008df7:	81 e7 ff 00 00 00    	and    edi,0xff
c0008dfd:	0f 84 66 01 00 00    	je     c0008f69 <VgaText::receiveKey(unsigned char)+0x183>
c0008e03:	8d b3 82 00 00 00    	lea    esi,[ebx+0x82]
c0008e09:	83 ff 08             	cmp    edi,0x8
c0008e0c:	75 73                	jne    c0008e81 <VgaText::receiveKey(unsigned char)+0x9b>
c0008e0e:	83 ec 0c             	sub    esp,0xc
c0008e11:	56                   	push   esi
c0008e12:	e8 59 77 ff ff       	call   c0000570 <strlen>
c0008e17:	83 c4 10             	add    esp,0x10
c0008e1a:	85 c0                	test   eax,eax
c0008e1c:	0f 84 02 01 00 00    	je     c0008f24 <VgaText::receiveKey(unsigned char)+0x13e>
c0008e22:	50                   	push   eax
c0008e23:	50                   	push   eax
c0008e24:	6a 08                	push   0x8
c0008e26:	53                   	push   ebx
c0008e27:	e8 6c fb ff ff       	call   c0008998 <VgaText::putchar(char)>
c0008e2c:	89 34 24             	mov    DWORD PTR [esp],esi
c0008e2f:	e8 3c 77 ff ff       	call   c0000570 <strlen>
c0008e34:	83 c4 10             	add    esp,0x10
c0008e37:	0f be 94 03 81 00 00 00 	movsx  edx,BYTE PTR [ebx+eax*1+0x81]
c0008e3f:	83 fa 0d             	cmp    edx,0xd
c0008e42:	89 d0                	mov    eax,edx
c0008e44:	0f 95 c1             	setne  cl
c0008e47:	83 fa 1f             	cmp    edx,0x1f
c0008e4a:	0f 9e c2             	setle  dl
c0008e4d:	0f b6 d2             	movzx  edx,dl
c0008e50:	85 ca                	test   edx,ecx
c0008e52:	74 17                	je     c0008e6b <VgaText::receiveKey(unsigned char)+0x85>
c0008e54:	83 e8 08             	sub    eax,0x8
c0008e57:	3c 02                	cmp    al,0x2
c0008e59:	76 10                	jbe    c0008e6b <VgaText::receiveKey(unsigned char)+0x85>
c0008e5b:	55                   	push   ebp
c0008e5c:	55                   	push   ebp
c0008e5d:	68 b3 0f 02 c0       	push   0xc0020fb3
c0008e62:	53                   	push   ebx
c0008e63:	e8 6e fc ff ff       	call   c0008ad6 <VgaText::puts(char const*)>
c0008e68:	83 c4 10             	add    esp,0x10
c0008e6b:	83 ec 0c             	sub    esp,0xc
c0008e6e:	56                   	push   esi
c0008e6f:	e8 fc 76 ff ff       	call   c0000570 <strlen>
c0008e74:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c0008e7c:	e9 a0 00 00 00       	jmp    c0008f21 <VgaText::receiveKey(unsigned char)+0x13b>
c0008e81:	83 ec 0c             	sub    esp,0xc
c0008e84:	8d 83 02 01 00 00    	lea    eax,[ebx+0x102]
c0008e8a:	50                   	push   eax
c0008e8b:	e8 e0 76 ff ff       	call   c0000570 <strlen>
c0008e90:	89 34 24             	mov    DWORD PTR [esp],esi
c0008e93:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008e97:	e8 d4 76 ff ff       	call   c0000570 <strlen>
c0008e9c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008ea0:	83 c4 10             	add    esp,0x10
c0008ea3:	8d 44 02 03          	lea    eax,[edx+eax*1+0x3]
c0008ea7:	3d 80 00 00 00       	cmp    eax,0x80
c0008eac:	0f 87 b7 00 00 00    	ja     c0008f69 <VgaText::receiveKey(unsigned char)+0x183>
c0008eb2:	8d 45 ff             	lea    eax,[ebp-0x1]
c0008eb5:	8d 55 f7             	lea    edx,[ebp-0x9]
c0008eb8:	3c 1e                	cmp    al,0x1e
c0008eba:	0f 96 c0             	setbe  al
c0008ebd:	80 fa 01             	cmp    dl,0x1
c0008ec0:	0f 97 c2             	seta   dl
c0008ec3:	0f b6 d2             	movzx  edx,dl
c0008ec6:	85 c2                	test   edx,eax
c0008ec8:	74 2e                	je     c0008ef8 <VgaText::receiveKey(unsigned char)+0x112>
c0008eca:	83 ff 0d             	cmp    edi,0xd
c0008ecd:	74 29                	je     c0008ef8 <VgaText::receiveKey(unsigned char)+0x112>
c0008ecf:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008ed2:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008ed5:	68 b9 0f 02 c0       	push   0xc0020fb9
c0008eda:	53                   	push   ebx
c0008edb:	e8 68 fc ff ff       	call   c0008b48 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0008ee0:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008ee3:	8d 45 40             	lea    eax,[ebp+0x40]
c0008ee6:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008ee9:	0f b6 c0             	movzx  eax,al
c0008eec:	50                   	push   eax
c0008eed:	53                   	push   ebx
c0008eee:	e8 d5 f9 ff ff       	call   c00088c8 <VgaText::putchar(char, VgaColour, VgaColour)>
c0008ef3:	83 c4 20             	add    esp,0x20
c0008ef6:	eb 11                	jmp    c0008f09 <VgaText::receiveKey(unsigned char)+0x123>
c0008ef8:	89 e8                	mov    eax,ebp
c0008efa:	51                   	push   ecx
c0008efb:	0f be c0             	movsx  eax,al
c0008efe:	51                   	push   ecx
c0008eff:	50                   	push   eax
c0008f00:	53                   	push   ebx
c0008f01:	e8 92 fa ff ff       	call   c0008998 <VgaText::putchar(char)>
c0008f06:	83 c4 10             	add    esp,0x10
c0008f09:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0008f0e:	89 e8                	mov    eax,ebp
c0008f10:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0008f14:	52                   	push   edx
c0008f15:	52                   	push   edx
c0008f16:	8d 44 24 26          	lea    eax,[esp+0x26]
c0008f1a:	50                   	push   eax
c0008f1b:	56                   	push   esi
c0008f1c:	e8 1f 79 ff ff       	call   c0000840 <strcat>
c0008f21:	83 c4 10             	add    esp,0x10
c0008f24:	8a 93 80 00 00 00    	mov    dl,BYTE PTR [ebx+0x80]
c0008f2a:	b0 01                	mov    al,0x1
c0008f2c:	83 ff 1c             	cmp    edi,0x1c
c0008f2f:	77 0e                	ja     c0008f3f <VgaText::receiveKey(unsigned char)+0x159>
c0008f31:	b8 08 04 00 10       	mov    eax,0x10000408
c0008f36:	89 f9                	mov    ecx,edi
c0008f38:	d3 e8                	shr    eax,cl
c0008f3a:	f7 d0                	not    eax
c0008f3c:	83 e0 01             	and    eax,0x1
c0008f3f:	84 c0                	test   al,al
c0008f41:	74 04                	je     c0008f47 <VgaText::receiveKey(unsigned char)+0x161>
c0008f43:	84 d2                	test   dl,dl
c0008f45:	74 22                	je     c0008f69 <VgaText::receiveKey(unsigned char)+0x183>
c0008f47:	81 c3 02 01 00 00    	add    ebx,0x102
c0008f4d:	50                   	push   eax
c0008f4e:	50                   	push   eax
c0008f4f:	56                   	push   esi
c0008f50:	53                   	push   ebx
c0008f51:	e8 ea 78 ff ff       	call   c0000840 <strcat>
c0008f56:	83 c4 0c             	add    esp,0xc
c0008f59:	68 80 00 00 00       	push   0x80
c0008f5e:	6a 00                	push   0x0
c0008f60:	56                   	push   esi
c0008f61:	e8 8a 75 ff ff       	call   c00004f0 <memset>
c0008f66:	83 c4 10             	add    esp,0x10
c0008f69:	83 c4 2c             	add    esp,0x2c
c0008f6c:	5b                   	pop    ebx
c0008f6d:	5e                   	pop    esi
c0008f6e:	5f                   	pop    edi
c0008f6f:	5d                   	pop    ebp
c0008f70:	c3                   	ret    
c0008f71:	90                   	nop

c0008f72 <VgaText::doUpdate()>:
c0008f72:	c3                   	ret    
c0008f73:	90                   	nop

c0008f74 <TSS::TSS()>:
c0008f74:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008f78:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0008f7f:	90                   	nop
c0008f80:	c3                   	ret    
c0008f81:	90                   	nop
c0008f82:	66 90                	xchg   ax,ax

c0008f84 <TSS::setESP(unsigned long)>:
c0008f84:	55                   	push   ebp
c0008f85:	89 e5                	mov    ebp,esp
c0008f87:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f8a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008f8d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008f90:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008f93:	90                   	nop
c0008f94:	5d                   	pop    ebp
c0008f95:	c3                   	ret    
c0008f96:	66 90                	xchg   ax,ax

c0008f98 <TSS::flush()>:
c0008f98:	55                   	push   ebp
c0008f99:	89 e5                	mov    ebp,esp
c0008f9b:	83 ec 10             	sub    esp,0x10
c0008f9e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fa1:	8b 00                	mov    eax,DWORD PTR [eax]
c0008fa3:	83 c8 03             	or     eax,0x3
c0008fa6:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0008faa:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0008fae:	66 89 d0             	mov    ax,dx
c0008fb1:	0f 00 d8             	ltr    ax
c0008fb4:	90                   	nop
c0008fb5:	c9                   	leave  
c0008fb6:	c3                   	ret    
c0008fb7:	90                   	nop

c0008fb8 <TSS::setup(unsigned long, unsigned long)>:
c0008fb8:	55                   	push   ebp
c0008fb9:	89 e5                	mov    ebp,esp
c0008fbb:	83 ec 18             	sub    esp,0x18
c0008fbe:	83 ec 0c             	sub    esp,0xc
c0008fc1:	6a 68                	push   0x68
c0008fc3:	e8 1e eb ff ff       	call   c0007ae6 <malloc>
c0008fc8:	83 c4 10             	add    esp,0x10
c0008fcb:	89 c2                	mov    edx,eax
c0008fcd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fd0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008fd3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fd6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fd9:	83 ec 04             	sub    esp,0x4
c0008fdc:	6a 68                	push   0x68
c0008fde:	6a 00                	push   0x0
c0008fe0:	50                   	push   eax
c0008fe1:	e8 0a 75 ff ff       	call   c00004f0 <memset>
c0008fe6:	83 c4 10             	add    esp,0x10
c0008fe9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fef:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0008ff5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ff8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008ffb:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0009001:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009004:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009007:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000900a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000900d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009010:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009013:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0009019:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000901c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000901f:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0009025:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009028:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000902b:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0009031:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009034:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009037:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c000903d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009040:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009043:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0009049:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000904c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000904f:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0009055:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009058:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000905b:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000905e:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0009061:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009064:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009067:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000906a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000906d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009070:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009073:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c000907a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000907d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009080:	0f 20 da             	mov    edx,cr3
c0009083:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0009086:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0009089:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000908c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000908f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009092:	83 ec 08             	sub    esp,0x8
c0009095:	50                   	push   eax
c0009096:	8d 45 ec             	lea    eax,[ebp-0x14]
c0009099:	50                   	push   eax
c000909a:	e8 b5 e2 ff ff       	call   c0007354 <GDTEntry::setBase(unsigned int)>
c000909f:	83 c4 10             	add    esp,0x10
c00090a2:	83 ec 08             	sub    esp,0x8
c00090a5:	6a 68                	push   0x68
c00090a7:	8d 45 ec             	lea    eax,[ebp-0x14]
c00090aa:	50                   	push   eax
c00090ab:	e8 c0 e2 ff ff       	call   c0007370 <GDTEntry::setLimit(unsigned int)>
c00090b0:	83 c4 10             	add    esp,0x10
c00090b3:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c00090b7:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c00090ba:	83 e0 0f             	and    eax,0xf
c00090bd:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c00090c0:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c00090c3:	83 c8 40             	or     eax,0x40
c00090c6:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c00090c9:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c00090ce:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00090d4:	05 78 01 00 00       	add    eax,0x178
c00090d9:	83 ec 04             	sub    esp,0x4
c00090dc:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00090df:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c00090e2:	50                   	push   eax
c00090e3:	e8 bc e2 ff ff       	call   c00073a4 <GDT::addEntry(GDTEntry)>
c00090e8:	83 c4 10             	add    esp,0x10
c00090eb:	89 c2                	mov    edx,eax
c00090ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00090f0:	89 10                	mov    DWORD PTR [eax],edx
c00090f2:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c00090f7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00090fd:	05 78 01 00 00       	add    eax,0x178
c0009102:	83 ec 0c             	sub    esp,0xc
c0009105:	50                   	push   eax
c0009106:	e8 c3 e2 ff ff       	call   c00073ce <GDT::flush()>
c000910b:	83 c4 10             	add    esp,0x10
c000910e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009111:	8b 00                	mov    eax,DWORD PTR [eax]
c0009113:	c9                   	leave  
c0009114:	c3                   	ret    
c0009115:	90                   	nop

c0009116 <ReservedFilename::read(unsigned long long, void*, int*)>:
c0009116:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000911a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000911e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009121:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0009126:	75 08                	jne    c0009130 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0009128:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000912e:	eb 38                	jmp    c0009168 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0009130:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0009135:	75 17                	jne    c000914e <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0009137:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000913c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000913f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0009145:	8b 10                	mov    edx,DWORD PTR [eax]
c0009147:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000914b:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c000914e:	89 c1                	mov    ecx,eax
c0009150:	83 e1 fd             	and    ecx,0xfffffffd
c0009153:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0009159:	74 cd                	je     c0009128 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c000915b:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0009160:	83 e0 ef             	and    eax,0xffffffef
c0009163:	83 f8 08             	cmp    eax,0x8
c0009166:	76 c0                	jbe    c0009128 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0009168:	31 c0                	xor    eax,eax
c000916a:	c3                   	ret    
c000916b:	90                   	nop

c000916c <ReservedFilename::isAtty()>:
c000916c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009170:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009173:	31 c0                	xor    eax,eax
c0009175:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c000917b:	74 09                	je     c0009186 <ReservedFilename::isAtty()+0x1a>
c000917d:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0009183:	0f 94 c0             	sete   al
c0009186:	c3                   	ret    
c0009187:	90                   	nop

c0009188 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0009188:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000918c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009190:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009193:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009197:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000919c:	75 08                	jne    c00091a6 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c000919e:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00091a4:	eb 3d                	jmp    c00091e3 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c00091a6:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00091ab:	75 17                	jne    c00091c4 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c00091ad:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00091b2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00091b5:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00091bb:	8b 10                	mov    edx,DWORD PTR [eax]
c00091bd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00091c1:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c00091c4:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00091c9:	75 04                	jne    c00091cf <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c00091cb:	89 0a                	mov    DWORD PTR [edx],ecx
c00091cd:	eb 14                	jmp    c00091e3 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c00091cf:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c00091d4:	74 c8                	je     c000919e <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00091d6:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00091db:	83 e0 ef             	and    eax,0xffffffef
c00091de:	83 f8 08             	cmp    eax,0x8
c00091e1:	76 bb                	jbe    c000919e <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00091e3:	31 c0                	xor    eax,eax
c00091e5:	c3                   	ret    

c00091e6 <UnixFile::getFileDescriptor()>:
c00091e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00091ea:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00091ed:	c3                   	ret    

c00091ee <UnixFile::UnixFile(int)>:
c00091ee:	53                   	push   ebx
c00091ef:	83 ec 28             	sub    esp,0x28
c00091f2:	ba 90 10 02 c0       	mov    edx,0xc0021090
c00091f7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00091fb:	89 10                	mov    DWORD PTR [eax],edx
c00091fd:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0009205:	0f 8f 90 01 00 00    	jg     c000939b <UnixFile::UnixFile(int)+0x1ad>
c000920b:	a1 60 38 02 c0       	mov    eax,ds:0xc0023860
c0009210:	8d 50 01             	lea    edx,[eax+0x1]
c0009213:	89 15 60 38 02 c0    	mov    DWORD PTR ds:0xc0023860,edx
c0009219:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000921d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0009220:	83 ec 08             	sub    esp,0x8
c0009223:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0009227:	68 98 6f 02 c0       	push   0xc0026f98
c000922c:	e8 d7 68 01 00       	call   c001fb08 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0009231:	83 c4 10             	add    esp,0x10
c0009234:	a0 94 6f 02 c0       	mov    al,ds:0xc0026f94
c0009239:	83 f0 01             	xor    eax,0x1
c000923c:	0f b6 c0             	movzx  eax,al
c000923f:	85 c0                	test   eax,eax
c0009241:	0f 84 55 01 00 00    	je     c000939c <UnixFile::UnixFile(int)+0x1ae>
c0009247:	c6 05 94 6f 02 c0 01 	mov    BYTE PTR ds:0xc0026f94,0x1
c000924e:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0009256:	83 ec 0c             	sub    esp,0xc
c0009259:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000925d:	e8 84 e8 ff ff       	call   c0007ae6 <malloc>
c0009262:	83 c4 10             	add    esp,0x10
c0009265:	89 c3                	mov    ebx,eax
c0009267:	83 ec 08             	sub    esp,0x8
c000926a:	68 03 ff ff 0f       	push   0xfffff03
c000926f:	53                   	push   ebx
c0009270:	e8 2d 01 00 00       	call   c00093a2 <ReservedFilename::ReservedFilename(int)>
c0009275:	83 c4 10             	add    esp,0x10
c0009278:	89 1d 8c 6f 02 c0    	mov    DWORD PTR ds:0xc0026f8c,ebx
c000927e:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0009286:	83 ec 0c             	sub    esp,0xc
c0009289:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000928d:	e8 54 e8 ff ff       	call   c0007ae6 <malloc>
c0009292:	83 c4 10             	add    esp,0x10
c0009295:	89 c3                	mov    ebx,eax
c0009297:	83 ec 08             	sub    esp,0x8
c000929a:	68 01 ff ff 0f       	push   0xfffff01
c000929f:	53                   	push   ebx
c00092a0:	e8 fd 00 00 00       	call   c00093a2 <ReservedFilename::ReservedFilename(int)>
c00092a5:	83 c4 10             	add    esp,0x10
c00092a8:	89 1d 90 6f 02 c0    	mov    DWORD PTR ds:0xc0026f90,ebx
c00092ae:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c00092b6:	83 ec 0c             	sub    esp,0xc
c00092b9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00092bd:	e8 24 e8 ff ff       	call   c0007ae6 <malloc>
c00092c2:	83 c4 10             	add    esp,0x10
c00092c5:	89 c3                	mov    ebx,eax
c00092c7:	83 ec 08             	sub    esp,0x8
c00092ca:	68 00 ff ff 0f       	push   0xfffff00
c00092cf:	53                   	push   ebx
c00092d0:	e8 cd 00 00 00       	call   c00093a2 <ReservedFilename::ReservedFilename(int)>
c00092d5:	83 c4 10             	add    esp,0x10
c00092d8:	89 1d 84 6f 02 c0    	mov    DWORD PTR ds:0xc0026f84,ebx
c00092de:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c00092e6:	83 ec 0c             	sub    esp,0xc
c00092e9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092ed:	e8 f4 e7 ff ff       	call   c0007ae6 <malloc>
c00092f2:	83 c4 10             	add    esp,0x10
c00092f5:	89 c3                	mov    ebx,eax
c00092f7:	83 ec 08             	sub    esp,0x8
c00092fa:	68 02 ff ff 0f       	push   0xfffff02
c00092ff:	53                   	push   ebx
c0009300:	e8 9d 00 00 00       	call   c00093a2 <ReservedFilename::ReservedFilename(int)>
c0009305:	83 c4 10             	add    esp,0x10
c0009308:	89 1d 88 6f 02 c0    	mov    DWORD PTR ds:0xc0026f88,ebx
c000930e:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0009316:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c000931b:	7f 7f                	jg     c000939c <UnixFile::UnixFile(int)+0x1ae>
c000931d:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0009325:	83 ec 0c             	sub    esp,0xc
c0009328:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000932c:	e8 b5 e7 ff ff       	call   c0007ae6 <malloc>
c0009331:	83 c4 10             	add    esp,0x10
c0009334:	89 c3                	mov    ebx,eax
c0009336:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000933a:	05 10 ff ff 0f       	add    eax,0xfffff10
c000933f:	83 ec 08             	sub    esp,0x8
c0009342:	50                   	push   eax
c0009343:	53                   	push   ebx
c0009344:	e8 59 00 00 00       	call   c00093a2 <ReservedFilename::ReservedFilename(int)>
c0009349:	83 c4 10             	add    esp,0x10
c000934c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009350:	89 1c 85 60 6f 02 c0 	mov    DWORD PTR [eax*4-0x3ffd90a0],ebx
c0009357:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c000935f:	83 ec 0c             	sub    esp,0xc
c0009362:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009366:	e8 7b e7 ff ff       	call   c0007ae6 <malloc>
c000936b:	83 c4 10             	add    esp,0x10
c000936e:	89 c3                	mov    ebx,eax
c0009370:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009374:	05 20 ff ff 0f       	add    eax,0xfffff20
c0009379:	83 ec 08             	sub    esp,0x8
c000937c:	50                   	push   eax
c000937d:	53                   	push   ebx
c000937e:	e8 1f 00 00 00       	call   c00093a2 <ReservedFilename::ReservedFilename(int)>
c0009383:	83 c4 10             	add    esp,0x10
c0009386:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000938a:	89 1c 85 20 6f 02 c0 	mov    DWORD PTR [eax*4-0x3ffd90e0],ebx
c0009391:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009396:	e9 7b ff ff ff       	jmp    c0009316 <UnixFile::UnixFile(int)+0x128>
c000939b:	90                   	nop
c000939c:	83 c4 28             	add    esp,0x28
c000939f:	5b                   	pop    ebx
c00093a0:	c3                   	ret    
c00093a1:	90                   	nop

c00093a2 <ReservedFilename::ReservedFilename(int)>:
c00093a2:	83 ec 0c             	sub    esp,0xc
c00093a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00093a9:	83 ec 08             	sub    esp,0x8
c00093ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00093b0:	50                   	push   eax
c00093b1:	e8 38 fe ff ff       	call   c00091ee <UnixFile::UnixFile(int)>
c00093b6:	83 c4 10             	add    esp,0x10
c00093b9:	ba ac 10 02 c0       	mov    edx,0xc00210ac
c00093be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00093c2:	89 10                	mov    DWORD PTR [eax],edx
c00093c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00093c8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00093cc:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00093cf:	90                   	nop
c00093d0:	83 c4 0c             	add    esp,0xc
c00093d3:	c3                   	ret    

c00093d4 <UnixFile::~UnixFile()>:
c00093d4:	83 ec 1c             	sub    esp,0x1c
c00093d7:	ba 90 10 02 c0       	mov    edx,0xc0021090
c00093dc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00093e0:	89 10                	mov    DWORD PTR [eax],edx
c00093e2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00093e6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00093e9:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c00093ee:	7f 76                	jg     c0009466 <UnixFile::~UnixFile()+0x92>
c00093f0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00093f8:	83 ec 0c             	sub    esp,0xc
c00093fb:	68 98 6f 02 c0       	push   0xc0026f98
c0009400:	e8 d7 67 01 00       	call   c001fbdc <LinkedList<UnixFile>::getFirstElement()>
c0009405:	83 c4 10             	add    esp,0x10
c0009408:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000940c:	83 ec 0c             	sub    esp,0xc
c000940f:	68 98 6f 02 c0       	push   0xc0026f98
c0009414:	e8 cb 67 01 00       	call   c001fbe4 <LinkedList<UnixFile>::removeFirst()>
c0009419:	83 c4 10             	add    esp,0x10
c000941c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009420:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0009424:	74 43                	je     c0009469 <UnixFile::~UnixFile()+0x95>
c0009426:	83 ec 08             	sub    esp,0x8
c0009429:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000942d:	68 98 6f 02 c0       	push   0xc0026f98
c0009432:	e8 d1 66 01 00       	call   c001fb08 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0009437:	83 c4 10             	add    esp,0x10
c000943a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000943e:	8d 50 01             	lea    edx,[eax+0x1]
c0009441:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009445:	3d 20 a1 07 00       	cmp    eax,0x7a120
c000944a:	0f 94 c0             	sete   al
c000944d:	0f b6 c0             	movzx  eax,al
c0009450:	85 c0                	test   eax,eax
c0009452:	74 a4                	je     c00093f8 <UnixFile::~UnixFile()+0x24>
c0009454:	83 ec 0c             	sub    esp,0xc
c0009457:	68 68 10 02 c0       	push   0xc0021068
c000945c:	e8 66 82 00 00       	call   c00116c7 <KePanic(char const*)>
c0009461:	83 c4 10             	add    esp,0x10
c0009464:	eb 92                	jmp    c00093f8 <UnixFile::~UnixFile()+0x24>
c0009466:	90                   	nop
c0009467:	eb 01                	jmp    c000946a <UnixFile::~UnixFile()+0x96>
c0009469:	90                   	nop
c000946a:	90                   	nop
c000946b:	83 c4 1c             	add    esp,0x1c
c000946e:	c3                   	ret    
c000946f:	90                   	nop

c0009470 <UnixFile::~UnixFile()>:
c0009470:	83 ec 0c             	sub    esp,0xc
c0009473:	83 ec 0c             	sub    esp,0xc
c0009476:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000947a:	e8 55 ff ff ff       	call   c00093d4 <UnixFile::~UnixFile()>
c000947f:	83 c4 10             	add    esp,0x10
c0009482:	83 ec 08             	sub    esp,0x8
c0009485:	6a 0c                	push   0xc
c0009487:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000948b:	e8 b8 13 00 00       	call   c000a848 <operator delete(void*, unsigned long)>
c0009490:	83 c4 10             	add    esp,0x10
c0009493:	83 c4 0c             	add    esp,0xc
c0009496:	c3                   	ret    
c0009497:	90                   	nop

c0009498 <ReservedFilename::~ReservedFilename()>:
c0009498:	83 ec 0c             	sub    esp,0xc
c000949b:	ba ac 10 02 c0       	mov    edx,0xc00210ac
c00094a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00094a4:	89 10                	mov    DWORD PTR [eax],edx
c00094a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00094aa:	83 ec 0c             	sub    esp,0xc
c00094ad:	50                   	push   eax
c00094ae:	e8 21 ff ff ff       	call   c00093d4 <UnixFile::~UnixFile()>
c00094b3:	83 c4 10             	add    esp,0x10
c00094b6:	90                   	nop
c00094b7:	83 c4 0c             	add    esp,0xc
c00094ba:	c3                   	ret    
c00094bb:	90                   	nop

c00094bc <ReservedFilename::~ReservedFilename()>:
c00094bc:	83 ec 0c             	sub    esp,0xc
c00094bf:	83 ec 0c             	sub    esp,0xc
c00094c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00094c6:	e8 cd ff ff ff       	call   c0009498 <ReservedFilename::~ReservedFilename()>
c00094cb:	83 c4 10             	add    esp,0x10
c00094ce:	83 ec 08             	sub    esp,0x8
c00094d1:	6a 0c                	push   0xc
c00094d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00094d7:	e8 6c 13 00 00       	call   c000a848 <operator delete(void*, unsigned long)>
c00094dc:	83 c4 10             	add    esp,0x10
c00094df:	83 c4 0c             	add    esp,0xc
c00094e2:	c3                   	ret    

c00094e3 <KeGetFileFromDescriptor(int)>:
c00094e3:	53                   	push   ebx
c00094e4:	83 ec 08             	sub    esp,0x8
c00094e7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00094eb:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c00094f1:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c00094f7:	7f 2c                	jg     c0009525 <KeGetFileFromDescriptor(int)+0x42>
c00094f9:	83 ec 0c             	sub    esp,0xc
c00094fc:	68 98 6f 02 c0       	push   0xc0026f98
c0009501:	e8 d6 66 01 00       	call   c001fbdc <LinkedList<UnixFile>::getFirstElement()>
c0009506:	83 c4 10             	add    esp,0x10
c0009509:	85 c0                	test   eax,eax
c000950b:	75 04                	jne    c0009511 <KeGetFileFromDescriptor(int)+0x2e>
c000950d:	31 c0                	xor    eax,eax
c000950f:	eb 6e                	jmp    c000957f <KeGetFileFromDescriptor(int)+0x9c>
c0009511:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0009514:	74 69                	je     c000957f <KeGetFileFromDescriptor(int)+0x9c>
c0009516:	52                   	push   edx
c0009517:	52                   	push   edx
c0009518:	50                   	push   eax
c0009519:	68 98 6f 02 c0       	push   0xc0026f98
c000951e:	e8 63 67 01 00       	call   c001fc86 <LinkedList<UnixFile>::getNext(UnixFile*)>
c0009523:	eb e1                	jmp    c0009506 <KeGetFileFromDescriptor(int)+0x23>
c0009525:	a1 8c 6f 02 c0       	mov    eax,ds:0xc0026f8c
c000952a:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0009530:	74 4d                	je     c000957f <KeGetFileFromDescriptor(int)+0x9c>
c0009532:	a1 90 6f 02 c0       	mov    eax,ds:0xc0026f90
c0009537:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c000953d:	74 40                	je     c000957f <KeGetFileFromDescriptor(int)+0x9c>
c000953f:	a1 88 6f 02 c0       	mov    eax,ds:0xc0026f88
c0009544:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c000954a:	74 33                	je     c000957f <KeGetFileFromDescriptor(int)+0x9c>
c000954c:	a1 84 6f 02 c0       	mov    eax,ds:0xc0026f84
c0009551:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0009557:	74 26                	je     c000957f <KeGetFileFromDescriptor(int)+0x9c>
c0009559:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c000955f:	83 f8 08             	cmp    eax,0x8
c0009562:	77 09                	ja     c000956d <KeGetFileFromDescriptor(int)+0x8a>
c0009564:	8b 04 85 60 6f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd90a0]
c000956b:	eb 12                	jmp    c000957f <KeGetFileFromDescriptor(int)+0x9c>
c000956d:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0009573:	83 fb 08             	cmp    ebx,0x8
c0009576:	77 95                	ja     c000950d <KeGetFileFromDescriptor(int)+0x2a>
c0009578:	8b 04 9d 20 6f 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd90e0]
c000957f:	83 c4 08             	add    esp,0x8
c0009582:	5b                   	pop    ebx
c0009583:	c3                   	ret    

c0009584 <__static_initialization_and_destruction_0(int, int)>:
c0009584:	83 ec 0c             	sub    esp,0xc
c0009587:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000958c:	75 34                	jne    c00095c2 <__static_initialization_and_destruction_0(int, int)+0x3e>
c000958e:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0009596:	75 2a                	jne    c00095c2 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0009598:	83 ec 0c             	sub    esp,0xc
c000959b:	68 98 6f 02 c0       	push   0xc0026f98
c00095a0:	e8 21 65 01 00       	call   c001fac6 <LinkedList<UnixFile>::LinkedList()>
c00095a5:	83 c4 10             	add    esp,0x10
c00095a8:	83 ec 04             	sub    esp,0x4
c00095ab:	68 e4 37 02 c0       	push   0xc00237e4
c00095b0:	68 98 6f 02 c0       	push   0xc0026f98
c00095b5:	68 c4 fa 01 c0       	push   0xc001fac4
c00095ba:	e8 39 12 00 00       	call   c000a7f8 <__cxa_atexit>
c00095bf:	83 c4 10             	add    esp,0x10
c00095c2:	90                   	nop
c00095c3:	83 c4 0c             	add    esp,0xc
c00095c6:	c3                   	ret    

c00095c7 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c00095c7:	83 ec 0c             	sub    esp,0xc
c00095ca:	83 ec 08             	sub    esp,0x8
c00095cd:	68 ff ff 00 00       	push   0xffff
c00095d2:	6a 01                	push   0x1
c00095d4:	e8 ab ff ff ff       	call   c0009584 <__static_initialization_and_destruction_0(int, int)>
c00095d9:	83 c4 10             	add    esp,0x10
c00095dc:	83 c4 0c             	add    esp,0xc
c00095df:	c3                   	ret    

c00095e0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c00095e0:	53                   	push   ebx
c00095e1:	8b 15 68 38 02 c0    	mov    edx,DWORD PTR ds:0xc0023868
c00095e7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00095eb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00095ef:	8d 98 00 80 f3 ff    	lea    ebx,[eax-0xc8000]
c00095f5:	89 d8                	mov    eax,ebx
c00095f7:	d1 e8                	shr    eax,1
c00095f9:	01 d0                	add    eax,edx
c00095fb:	80 e3 01             	and    bl,0x1
c00095fe:	8a 10                	mov    dl,BYTE PTR [eax]
c0009600:	75 09                	jne    c000960b <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x2b>
c0009602:	83 e2 f0             	and    edx,0xfffffff0
c0009605:	09 ca                	or     edx,ecx
c0009607:	88 10                	mov    BYTE PTR [eax],dl
c0009609:	5b                   	pop    ebx
c000960a:	c3                   	ret    
c000960b:	83 e2 0f             	and    edx,0xf
c000960e:	0f b6 c9             	movzx  ecx,cl
c0009611:	c1 e1 04             	shl    ecx,0x4
c0009614:	09 ca                	or     edx,ecx
c0009616:	88 10                	mov    BYTE PTR [eax],dl
c0009618:	5b                   	pop    ebx
c0009619:	c3                   	ret    

c000961a <Virt::getPageState(unsigned long)>:
c000961a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000961e:	8b 0d 68 38 02 c0    	mov    ecx,DWORD PTR ds:0xc0023868
c0009624:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c000962a:	89 d0                	mov    eax,edx
c000962c:	d1 e8                	shr    eax,1
c000962e:	80 e2 01             	and    dl,0x1
c0009631:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0009634:	74 03                	je     c0009639 <Virt::getPageState(unsigned long)+0x1f>
c0009636:	c1 e8 04             	shr    eax,0x4
c0009639:	83 e0 0f             	and    eax,0xf
c000963c:	c3                   	ret    

c000963d <Virt::allocateKernelVirtualPages(int)>:
c000963d:	55                   	push   ebp
c000963e:	31 ed                	xor    ebp,ebp
c0009640:	57                   	push   edi
c0009641:	31 ff                	xor    edi,edi
c0009643:	56                   	push   esi
c0009644:	53                   	push   ebx
c0009645:	31 db                	xor    ebx,ebx
c0009647:	83 ec 0c             	sub    esp,0xc
c000964a:	8b 35 64 38 02 c0    	mov    esi,DWORD PTR ds:0xc0023864
c0009650:	56                   	push   esi
c0009651:	e8 c4 ff ff ff       	call   c000961a <Virt::getPageState(unsigned long)>
c0009656:	5a                   	pop    edx
c0009657:	84 c0                	test   al,al
c0009659:	75 41                	jne    c000969c <Virt::allocateKernelVirtualPages(int)+0x5f>
c000965b:	85 db                	test   ebx,ebx
c000965d:	75 02                	jne    c0009661 <Virt::allocateKernelVirtualPages(int)+0x24>
c000965f:	89 f5                	mov    ebp,esi
c0009661:	83 c3 01             	add    ebx,0x1
c0009664:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0009668:	74 5f                	je     c00096c9 <Virt::allocateKernelVirtualPages(int)+0x8c>
c000966a:	83 c6 01             	add    esi,0x1
c000966d:	81 fe ff ff 0e 00    	cmp    esi,0xeffff
c0009673:	76 34                	jbe    c00096a9 <Virt::allocateKernelVirtualPages(int)+0x6c>
c0009675:	c7 05 64 38 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0023864,0xc8000
c000967f:	f7 c7 01 00 00 00    	test   edi,0x1
c0009685:	75 2a                	jne    c00096b1 <Virt::allocateKernelVirtualPages(int)+0x74>
c0009687:	be 00 80 0c 00       	mov    esi,0xc8000
c000968c:	bf 01 00 00 00       	mov    edi,0x1
c0009691:	56                   	push   esi
c0009692:	e8 83 ff ff ff       	call   c000961a <Virt::getPageState(unsigned long)>
c0009697:	5a                   	pop    edx
c0009698:	84 c0                	test   al,al
c000969a:	74 bf                	je     c000965b <Virt::allocateKernelVirtualPages(int)+0x1e>
c000969c:	31 db                	xor    ebx,ebx
c000969e:	83 c6 01             	add    esi,0x1
c00096a1:	81 fe ff ff 0e 00    	cmp    esi,0xeffff
c00096a7:	77 cc                	ja     c0009675 <Virt::allocateKernelVirtualPages(int)+0x38>
c00096a9:	89 35 64 38 02 c0    	mov    DWORD PTR ds:0xc0023864,esi
c00096af:	eb 9f                	jmp    c0009650 <Virt::allocateKernelVirtualPages(int)+0x13>
c00096b1:	83 ec 0c             	sub    esp,0xc
c00096b4:	68 c0 10 02 c0       	push   0xc00210c0
c00096b9:	e8 09 80 00 00       	call   c00116c7 <KePanic(char const*)>
c00096be:	8b 35 64 38 02 c0    	mov    esi,DWORD PTR ds:0xc0023864
c00096c4:	83 c4 10             	add    esp,0x10
c00096c7:	eb 87                	jmp    c0009650 <Virt::allocateKernelVirtualPages(int)+0x13>
c00096c9:	89 2d 64 38 02 c0    	mov    DWORD PTR ds:0xc0023864,ebp
c00096cf:	83 fb 01             	cmp    ebx,0x1
c00096d2:	74 6f                	je     c0009743 <Virt::allocateKernelVirtualPages(int)+0x106>
c00096d4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00096d8:	85 c9                	test   ecx,ecx
c00096da:	74 49                	je     c0009725 <Virt::allocateKernelVirtualPages(int)+0xe8>
c00096dc:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00096e0:	89 e8                	mov    eax,ebp
c00096e2:	31 db                	xor    ebx,ebx
c00096e4:	8d 79 ff             	lea    edi,[ecx-0x1]
c00096e7:	eb 18                	jmp    c0009701 <Virt::allocateKernelVirtualPages(int)+0xc4>
c00096e9:	6a 01                	push   0x1
c00096eb:	83 c3 01             	add    ebx,0x1
c00096ee:	50                   	push   eax
c00096ef:	e8 ec fe ff ff       	call   c00095e0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096f4:	58                   	pop    eax
c00096f5:	5a                   	pop    edx
c00096f6:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c00096fa:	74 29                	je     c0009725 <Virt::allocateKernelVirtualPages(int)+0xe8>
c00096fc:	a1 64 38 02 c0       	mov    eax,ds:0xc0023864
c0009701:	8d 50 01             	lea    edx,[eax+0x1]
c0009704:	85 db                	test   ebx,ebx
c0009706:	89 15 64 38 02 c0    	mov    DWORD PTR ds:0xc0023864,edx
c000970c:	74 24                	je     c0009732 <Virt::allocateKernelVirtualPages(int)+0xf5>
c000970e:	39 df                	cmp    edi,ebx
c0009710:	75 d7                	jne    c00096e9 <Virt::allocateKernelVirtualPages(int)+0xac>
c0009712:	6a 03                	push   0x3
c0009714:	83 c3 01             	add    ebx,0x1
c0009717:	50                   	push   eax
c0009718:	e8 c3 fe ff ff       	call   c00095e0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000971d:	59                   	pop    ecx
c000971e:	5e                   	pop    esi
c000971f:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0009723:	75 d7                	jne    c00096fc <Virt::allocateKernelVirtualPages(int)+0xbf>
c0009725:	83 c4 0c             	add    esp,0xc
c0009728:	89 e8                	mov    eax,ebp
c000972a:	5b                   	pop    ebx
c000972b:	c1 e0 0c             	shl    eax,0xc
c000972e:	5e                   	pop    esi
c000972f:	5f                   	pop    edi
c0009730:	5d                   	pop    ebp
c0009731:	c3                   	ret    
c0009732:	6a 02                	push   0x2
c0009734:	bb 01 00 00 00       	mov    ebx,0x1
c0009739:	50                   	push   eax
c000973a:	e8 a1 fe ff ff       	call   c00095e0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000973f:	58                   	pop    eax
c0009740:	5a                   	pop    edx
c0009741:	eb b9                	jmp    c00096fc <Virt::allocateKernelVirtualPages(int)+0xbf>
c0009743:	6a 04                	push   0x4
c0009745:	8d 45 01             	lea    eax,[ebp+0x1]
c0009748:	55                   	push   ebp
c0009749:	a3 64 38 02 c0       	mov    ds:0xc0023864,eax
c000974e:	e8 8d fe ff ff       	call   c00095e0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009753:	5b                   	pop    ebx
c0009754:	89 e8                	mov    eax,ebp
c0009756:	5e                   	pop    esi
c0009757:	c1 e0 0c             	shl    eax,0xc
c000975a:	83 c4 0c             	add    esp,0xc
c000975d:	5b                   	pop    ebx
c000975e:	5e                   	pop    esi
c000975f:	5f                   	pop    edi
c0009760:	5d                   	pop    ebp
c0009761:	c3                   	ret    

c0009762 <Virt::freeSwapfilePage(unsigned long)>:
c0009762:	53                   	push   ebx
c0009763:	8b 15 ac 6f 02 c0    	mov    edx,DWORD PTR ds:0xc0026fac
c0009769:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000976d:	b8 01 00 00 00       	mov    eax,0x1
c0009772:	89 cb                	mov    ebx,ecx
c0009774:	d3 e0                	shl    eax,cl
c0009776:	c1 eb 05             	shr    ebx,0x5
c0009779:	f7 d0                	not    eax
c000977b:	8b 0c 9a             	mov    ecx,DWORD PTR [edx+ebx*4]
c000977e:	21 c1                	and    ecx,eax
c0009780:	89 0c 9a             	mov    DWORD PTR [edx+ebx*4],ecx
c0009783:	5b                   	pop    ebx
c0009784:	c3                   	ret    

c0009785 <Virt::swapIDToSector(unsigned long)>:
c0009785:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009789:	8b 15 6c 38 02 c0    	mov    edx,DWORD PTR ds:0xc002386c
c000978f:	8b 0d 74 38 02 c0    	mov    ecx,DWORD PTR ds:0xc0023874
c0009795:	0f af c2             	imul   eax,edx
c0009798:	01 c8                	add    eax,ecx
c000979a:	c3                   	ret    

c000979b <Virt::allocateSwapfilePage()>:
c000979b:	55                   	push   ebp
c000979c:	31 d2                	xor    edx,edx
c000979e:	57                   	push   edi
c000979f:	56                   	push   esi
c00097a0:	53                   	push   ebx
c00097a1:	83 ec 0c             	sub    esp,0xc
c00097a4:	8b 0d 6c 38 02 c0    	mov    ecx,DWORD PTR ds:0xc002386c
c00097aa:	a1 70 38 02 c0       	mov    eax,ds:0xc0023870
c00097af:	f7 f1                	div    ecx
c00097b1:	39 0d 70 38 02 c0    	cmp    DWORD PTR ds:0xc0023870,ecx
c00097b7:	72 2f                	jb     c00097e8 <Virt::allocateSwapfilePage()+0x4d>
c00097b9:	8b 35 ac 6f 02 c0    	mov    esi,DWORD PTR ds:0xc0026fac
c00097bf:	8b 16                	mov    edx,DWORD PTR [esi]
c00097c1:	f6 c2 01             	test   dl,0x1
c00097c4:	74 3e                	je     c0009804 <Virt::allocateSwapfilePage()+0x69>
c00097c6:	31 c9                	xor    ecx,ecx
c00097c8:	bf 01 00 00 00       	mov    edi,0x1
c00097cd:	eb 12                	jmp    c00097e1 <Virt::allocateSwapfilePage()+0x46>
c00097cf:	89 fd                	mov    ebp,edi
c00097d1:	89 ca                	mov    edx,ecx
c00097d3:	d3 e5                	shl    ebp,cl
c00097d5:	c1 ea 05             	shr    edx,0x5
c00097d8:	8d 1c 96             	lea    ebx,[esi+edx*4]
c00097db:	8b 13                	mov    edx,DWORD PTR [ebx]
c00097dd:	85 ea                	test   edx,ebp
c00097df:	74 2c                	je     c000980d <Virt::allocateSwapfilePage()+0x72>
c00097e1:	83 c1 01             	add    ecx,0x1
c00097e4:	39 c8                	cmp    eax,ecx
c00097e6:	77 e7                	ja     c00097cf <Virt::allocateSwapfilePage()+0x34>
c00097e8:	83 ec 0c             	sub    esp,0xc
c00097eb:	68 54 13 02 c0       	push   0xc0021354
c00097f0:	e8 d2 7e 00 00       	call   c00116c7 <KePanic(char const*)>
c00097f5:	83 c4 10             	add    esp,0x10
c00097f8:	31 c9                	xor    ecx,ecx
c00097fa:	83 c4 0c             	add    esp,0xc
c00097fd:	89 c8                	mov    eax,ecx
c00097ff:	5b                   	pop    ebx
c0009800:	5e                   	pop    esi
c0009801:	5f                   	pop    edi
c0009802:	5d                   	pop    ebp
c0009803:	c3                   	ret    
c0009804:	89 f3                	mov    ebx,esi
c0009806:	bd 01 00 00 00       	mov    ebp,0x1
c000980b:	31 c9                	xor    ecx,ecx
c000980d:	09 ea                	or     edx,ebp
c000980f:	89 c8                	mov    eax,ecx
c0009811:	89 13                	mov    DWORD PTR [ebx],edx
c0009813:	83 c4 0c             	add    esp,0xc
c0009816:	5b                   	pop    ebx
c0009817:	5e                   	pop    esi
c0009818:	5f                   	pop    edi
c0009819:	5d                   	pop    ebp
c000981a:	c3                   	ret    

c000981b <Virt::virtualMemorySetup()>:
c000981b:	53                   	push   ebx
c000981c:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0009821:	6a 0f                	push   0xf
c0009823:	53                   	push   ebx
c0009824:	83 c3 01             	add    ebx,0x1
c0009827:	e8 b4 fd ff ff       	call   c00095e0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000982c:	58                   	pop    eax
c000982d:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0009833:	5a                   	pop    edx
c0009834:	75 eb                	jne    c0009821 <Virt::virtualMemorySetup()+0x6>
c0009836:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000983b:	6a 00                	push   0x0
c000983d:	53                   	push   ebx
c000983e:	83 c3 01             	add    ebx,0x1
c0009841:	e8 9a fd ff ff       	call   c00095e0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009846:	59                   	pop    ecx
c0009847:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000984d:	58                   	pop    eax
c000984e:	75 eb                	jne    c000983b <Virt::virtualMemorySetup()+0x20>
c0009850:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0009855:	6a 0f                	push   0xf
c0009857:	53                   	push   ebx
c0009858:	83 c3 01             	add    ebx,0x1
c000985b:	e8 80 fd ff ff       	call   c00095e0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009860:	58                   	pop    eax
c0009861:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0009867:	5a                   	pop    edx
c0009868:	75 eb                	jne    c0009855 <Virt::virtualMemorySetup()+0x3a>
c000986a:	5b                   	pop    ebx
c000986b:	c3                   	ret    

c000986c <Virt::setupPageSwapping(int)>:
c000986c:	53                   	push   ebx
c000986d:	83 ec 0c             	sub    esp,0xc
c0009870:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0009874:	a1 88 b8 02 c0       	mov    eax,ds:0xc002b888
c0009879:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000987f:	8b 10                	mov    edx,DWORD PTR [eax]
c0009881:	53                   	push   ebx
c0009882:	c1 e3 0b             	shl    ebx,0xb
c0009885:	68 6b 13 02 c0       	push   0xc002136b
c000988a:	50                   	push   eax
c000988b:	ff 52 60             	call   DWORD PTR [edx+0x60]
c000988e:	89 1d 70 38 02 c0    	mov    DWORD PTR ds:0xc0023870,ebx
c0009894:	c6 05 78 38 02 c0 43 	mov    BYTE PTR ds:0xc0023878,0x43
c000989b:	c1 eb 08             	shr    ebx,0x8
c000989e:	a3 74 38 02 c0       	mov    ds:0xc0023874,eax
c00098a3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00098a6:	c7 05 6c 38 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002386c,0x8
c00098b0:	e8 31 e2 ff ff       	call   c0007ae6 <malloc>
c00098b5:	83 c4 0c             	add    esp,0xc
c00098b8:	89 c1                	mov    ecx,eax
c00098ba:	a3 ac 6f 02 c0       	mov    ds:0xc0026fac,eax
c00098bf:	31 d2                	xor    edx,edx
c00098c1:	a1 70 38 02 c0       	mov    eax,ds:0xc0023870
c00098c6:	f7 35 6c 38 02 c0    	div    DWORD PTR ds:0xc002386c
c00098cc:	c1 e8 05             	shr    eax,0x5
c00098cf:	50                   	push   eax
c00098d0:	6a 00                	push   0x0
c00098d2:	51                   	push   ecx
c00098d3:	e8 18 6c ff ff       	call   c00004f0 <memset>
c00098d8:	83 c4 18             	add    esp,0x18
c00098db:	5b                   	pop    ebx
c00098dc:	c3                   	ret    
c00098dd:	90                   	nop

c00098de <VAS::setCPUSpecific(unsigned long)>:
c00098de:	c3                   	ret    
c00098df:	90                   	nop

c00098e0 <VAS::VAS(VAS*)>:
c00098e0:	83 ec 0c             	sub    esp,0xc
c00098e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00098e7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00098ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00098f2:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00098f9:	83 ec 0c             	sub    esp,0xc
c00098fc:	68 e0 10 02 c0       	push   0xc00210e0
c0009901:	e8 c1 7d 00 00       	call   c00116c7 <KePanic(char const*)>
c0009906:	83 c4 10             	add    esp,0x10
c0009909:	90                   	nop
c000990a:	83 c4 0c             	add    esp,0xc
c000990d:	c3                   	ret    

c000990e <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c000990e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009912:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c0009917:	89 c2                	mov    edx,eax
c0009919:	c1 e8 0a             	shr    eax,0xa
c000991c:	c1 ea 16             	shr    edx,0x16
c000991f:	83 f9 01             	cmp    ecx,0x1
c0009922:	19 c9                	sbb    ecx,ecx
c0009924:	c1 e2 0c             	shl    edx,0xc
c0009927:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c000992d:	25 fc 0f 00 00       	and    eax,0xffc
c0009932:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0009939:	01 d0                	add    eax,edx
c000993b:	c3                   	ret    

c000993c <VAS::getPageTableEntry(unsigned long)>:
c000993c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009940:	89 ca                	mov    edx,ecx
c0009942:	c1 e9 0a             	shr    ecx,0xa
c0009945:	c1 ea 16             	shr    edx,0x16
c0009948:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c000994e:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0009954:	c1 e0 0c             	shl    eax,0xc
c0009957:	8d 04 08             	lea    eax,[eax+ecx*1]
c000995a:	c3                   	ret    

c000995b <Virt::freeKernelVirtualPages(unsigned long)>:
c000995b:	55                   	push   ebp
c000995c:	57                   	push   edi
c000995d:	bf 01 00 00 00       	mov    edi,0x1
c0009962:	56                   	push   esi
c0009963:	53                   	push   ebx
c0009964:	83 ec 1c             	sub    esp,0x1c
c0009967:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000996b:	c1 ee 0c             	shr    esi,0xc
c000996e:	eb 48                	jmp    c00099b8 <Virt::freeKernelVirtualPages(unsigned long)+0x5d>
c0009970:	83 ec 08             	sub    esp,0x8
c0009973:	a1 b0 6f 02 c0       	mov    eax,ds:0xc0026fb0
c0009978:	55                   	push   ebp
c0009979:	50                   	push   eax
c000997a:	e8 bd ff ff ff       	call   c000993c <VAS::getPageTableEntry(unsigned long)>
c000997f:	83 c4 10             	add    esp,0x10
c0009982:	8b 10                	mov    edx,DWORD PTR [eax]
c0009984:	f6 c6 04             	test   dh,0x4
c0009987:	75 70                	jne    c00099f9 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c0009989:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000998f:	83 fb 04             	cmp    ebx,0x4
c0009992:	0f 84 8a 00 00 00    	je     c0009a22 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0009998:	83 fb 02             	cmp    ebx,0x2
c000999b:	0f 84 9a 00 00 00    	je     c0009a3b <Virt::freeKernelVirtualPages(unsigned long)+0xe0>
c00099a1:	83 fb 03             	cmp    ebx,0x3
c00099a4:	0f 84 be 00 00 00    	je     c0009a68 <Virt::freeKernelVirtualPages(unsigned long)+0x10d>
c00099aa:	83 fb 01             	cmp    ebx,0x1
c00099ad:	0f 84 a2 00 00 00    	je     c0009a55 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c00099b3:	83 c6 01             	add    esi,0x1
c00099b6:	31 ff                	xor    edi,edi
c00099b8:	56                   	push   esi
c00099b9:	89 f5                	mov    ebp,esi
c00099bb:	e8 5a fc ff ff       	call   c000961a <Virt::getPageState(unsigned long)>
c00099c0:	c1 e5 0c             	shl    ebp,0xc
c00099c3:	0f b6 d8             	movzx  ebx,al
c00099c6:	5a                   	pop    edx
c00099c7:	85 db                	test   ebx,ebx
c00099c9:	75 a5                	jne    c0009970 <Virt::freeKernelVirtualPages(unsigned long)+0x15>
c00099cb:	83 ec 0c             	sub    esp,0xc
c00099ce:	68 82 13 02 c0       	push   0xc0021382
c00099d3:	e8 ef 7c 00 00       	call   c00116c7 <KePanic(char const*)>
c00099d8:	5a                   	pop    edx
c00099d9:	59                   	pop    ecx
c00099da:	55                   	push   ebp
c00099db:	8b 2d b0 6f 02 c0    	mov    ebp,DWORD PTR ds:0xc0026fb0
c00099e1:	55                   	push   ebp
c00099e2:	e8 55 ff ff ff       	call   c000993c <VAS::getPageTableEntry(unsigned long)>
c00099e7:	83 c4 10             	add    esp,0x10
c00099ea:	8b 10                	mov    edx,DWORD PTR [eax]
c00099ec:	f6 c6 04             	test   dh,0x4
c00099ef:	75 08                	jne    c00099f9 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c00099f1:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00099f7:	eb ba                	jmp    c00099b3 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c00099f9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00099fd:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0009a03:	83 ec 0c             	sub    esp,0xc
c0009a06:	52                   	push   edx
c0009a07:	e8 7a e3 ff ff       	call   c0007d86 <Phys::freePage(unsigned long)>
c0009a0c:	83 c4 10             	add    esp,0x10
c0009a0f:	83 fb 04             	cmp    ebx,0x4
c0009a12:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009a16:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0009a1c:	0f 85 76 ff ff ff    	jne    c0009998 <Virt::freeKernelVirtualPages(unsigned long)+0x3d>
c0009a22:	83 e7 01             	and    edi,0x1
c0009a25:	75 46                	jne    c0009a6d <Virt::freeKernelVirtualPages(unsigned long)+0x112>
c0009a27:	c7 44 24 30 04 11 02 c0 	mov    DWORD PTR [esp+0x30],0xc0021104
c0009a2f:	83 c4 1c             	add    esp,0x1c
c0009a32:	5b                   	pop    ebx
c0009a33:	5e                   	pop    esi
c0009a34:	5f                   	pop    edi
c0009a35:	5d                   	pop    ebp
c0009a36:	e9 8c 7c 00 00       	jmp    c00116c7 <KePanic(char const*)>
c0009a3b:	83 e7 01             	and    edi,0x1
c0009a3e:	75 15                	jne    c0009a55 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c0009a40:	83 ec 0c             	sub    esp,0xc
c0009a43:	68 9e 13 02 c0       	push   0xc002139e
c0009a48:	e8 7a 7c 00 00       	call   c00116c7 <KePanic(char const*)>
c0009a4d:	83 c4 10             	add    esp,0x10
c0009a50:	e9 5e ff ff ff       	jmp    c00099b3 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0009a55:	83 ec 08             	sub    esp,0x8
c0009a58:	6a 00                	push   0x0
c0009a5a:	56                   	push   esi
c0009a5b:	e8 80 fb ff ff       	call   c00095e0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a60:	83 c4 10             	add    esp,0x10
c0009a63:	e9 4b ff ff ff       	jmp    c00099b3 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0009a68:	83 e7 01             	and    edi,0x1
c0009a6b:	75 16                	jne    c0009a83 <Virt::freeKernelVirtualPages(unsigned long)+0x128>
c0009a6d:	83 ec 08             	sub    esp,0x8
c0009a70:	6a 00                	push   0x0
c0009a72:	56                   	push   esi
c0009a73:	e8 68 fb ff ff       	call   c00095e0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a78:	83 c4 10             	add    esp,0x10
c0009a7b:	83 c4 1c             	add    esp,0x1c
c0009a7e:	5b                   	pop    ebx
c0009a7f:	5e                   	pop    esi
c0009a80:	5f                   	pop    edi
c0009a81:	5d                   	pop    ebp
c0009a82:	c3                   	ret    
c0009a83:	c7 44 24 30 ba 13 02 c0 	mov    DWORD PTR [esp+0x30],0xc00213ba
c0009a8b:	83 c4 1c             	add    esp,0x1c
c0009a8e:	5b                   	pop    ebx
c0009a8f:	5e                   	pop    esi
c0009a90:	5f                   	pop    edi
c0009a91:	5d                   	pop    ebp
c0009a92:	e9 30 7c 00 00       	jmp    c00116c7 <KePanic(char const*)>
c0009a97:	90                   	nop

c0009a98 <VAS::freeAllocatedPages(unsigned long)>:
c0009a98:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009a9c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009aa0:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0009aa4:	74 09                	je     c0009aaf <VAS::freeAllocatedPages(unsigned long)+0x17>
c0009aa6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009aaa:	e9 ac fe ff ff       	jmp    c000995b <Virt::freeKernelVirtualPages(unsigned long)>
c0009aaf:	c7 44 24 04 28 11 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021128
c0009ab7:	e9 b9 0e 00 00       	jmp    c000a975 <Dbg::kprintf(char const*, ...)>

c0009abc <VAS::virtualToPhysical(unsigned long)>:
c0009abc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009ac0:	50                   	push   eax
c0009ac1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009ac5:	52                   	push   edx
c0009ac6:	e8 71 fe ff ff       	call   c000993c <VAS::getPageTableEntry(unsigned long)>
c0009acb:	59                   	pop    ecx
c0009acc:	8b 00                	mov    eax,DWORD PTR [eax]
c0009ace:	5a                   	pop    edx
c0009acf:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009ad4:	c3                   	ret    
c0009ad5:	90                   	nop

c0009ad6 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>:
c0009ad6:	55                   	push   ebp
c0009ad7:	57                   	push   edi
c0009ad8:	56                   	push   esi
c0009ad9:	53                   	push   ebx
c0009ada:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009ade:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0009ae2:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0009ae6:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0009aea:	85 db                	test   ebx,ebx
c0009aec:	7e 24                	jle    c0009b12 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x3c>
c0009aee:	c1 e3 0c             	shl    ebx,0xc
c0009af1:	01 f3                	add    ebx,esi
c0009af3:	56                   	push   esi
c0009af4:	81 c6 00 10 00 00    	add    esi,0x1000
c0009afa:	55                   	push   ebp
c0009afb:	e8 3c fe ff ff       	call   c000993c <VAS::getPageTableEntry(unsigned long)>
c0009b00:	5a                   	pop    edx
c0009b01:	59                   	pop    ecx
c0009b02:	8b 08                	mov    ecx,DWORD PTR [eax]
c0009b04:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0009b08:	21 f9                	and    ecx,edi
c0009b0a:	09 d1                	or     ecx,edx
c0009b0c:	39 f3                	cmp    ebx,esi
c0009b0e:	89 08                	mov    DWORD PTR [eax],ecx
c0009b10:	75 e1                	jne    c0009af3 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x1d>
c0009b12:	5b                   	pop    ebx
c0009b13:	5e                   	pop    esi
c0009b14:	5f                   	pop    edi
c0009b15:	5d                   	pop    ebp
c0009b16:	c3                   	ret    
c0009b17:	90                   	nop

c0009b18 <VAS::VAS()>:
c0009b18:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b1c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009b23:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b27:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009b2e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b32:	a3 b0 6f 02 c0       	mov    ds:0xc0026fb0,eax
c0009b37:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b3b:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0009b3f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b43:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0009b46:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b4a:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0009b51:	ba 7d 50 02 c0       	mov    edx,0xc002507d
c0009b56:	b8 00 50 02 c0       	mov    eax,0xc0025000
c0009b5b:	29 c2                	sub    edx,eax
c0009b5d:	89 d0                	mov    eax,edx
c0009b5f:	05 ff 0f 00 00       	add    eax,0xfff
c0009b64:	c1 e8 0c             	shr    eax,0xc
c0009b67:	89 c2                	mov    edx,eax
c0009b69:	b8 00 50 02 c0       	mov    eax,0xc0025000
c0009b6e:	6a 04                	push   0x4
c0009b70:	6a ff                	push   0xffffffff
c0009b72:	52                   	push   edx
c0009b73:	50                   	push   eax
c0009b74:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b78:	e8 59 ff ff ff       	call   c0009ad6 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0009b7d:	83 c4 14             	add    esp,0x14
c0009b80:	90                   	nop
c0009b81:	c3                   	ret    

c0009b82 <VAS::setToWriteCombining(unsigned long, int)>:
c0009b82:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0009b87:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009b8d:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c0009b94:	75 01                	jne    c0009b97 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0009b96:	c3                   	ret    
c0009b97:	68 80 00 00 00       	push   0x80
c0009b9c:	6a ff                	push   0xffffffff
c0009b9e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009ba2:	50                   	push   eax
c0009ba3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009ba7:	52                   	push   edx
c0009ba8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0009bac:	51                   	push   ecx
c0009bad:	e8 24 ff ff ff       	call   c0009ad6 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0009bb2:	83 c4 14             	add    esp,0x14
c0009bb5:	c3                   	ret    

c0009bb6 <VAS::mapOtherVASIn(bool, VAS*)>:
c0009bb6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009bba:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0009bbd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009bc1:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0009bc4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0009bc9:	83 f8 01             	cmp    eax,0x1
c0009bcc:	19 c0                	sbb    eax,eax
c0009bce:	83 ca 03             	or     edx,0x3
c0009bd1:	83 e0 fc             	and    eax,0xfffffffc
c0009bd4:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0009bdb:	0f 20 d8             	mov    eax,cr3
c0009bde:	0f 22 d8             	mov    cr3,eax
c0009be1:	c3                   	ret    

c0009be2 <VAS::~VAS()>:
c0009be2:	83 ec 2c             	sub    esp,0x2c
c0009be5:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0009bed:	fa                   	cli    
c0009bee:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0009bf3:	83 c0 01             	add    eax,0x1
c0009bf6:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0009bfb:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009c00:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c02:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009c05:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009c0b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009c0f:	6a 01                	push   0x1
c0009c11:	50                   	push   eax
c0009c12:	e8 9f ff ff ff       	call   c0009bb6 <VAS::mapOtherVASIn(bool, VAS*)>
c0009c17:	83 c4 0c             	add    esp,0xc
c0009c1a:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0009c22:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0009c2a:	0f 8f d8 00 00 00    	jg     c0009d08 <VAS::~VAS()+0x126>
c0009c30:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009c34:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009c37:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009c3b:	c1 e2 02             	shl    edx,0x2
c0009c3e:	01 d0                	add    eax,edx
c0009c40:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c42:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009c46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009c4a:	83 e0 01             	and    eax,0x1
c0009c4d:	0f 84 ab 00 00 00    	je     c0009cfe <VAS::~VAS()+0x11c>
c0009c53:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009c5b:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0009c63:	7f 74                	jg     c0009cd9 <VAS::~VAS()+0xf7>
c0009c65:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009c69:	c1 e0 0a             	shl    eax,0xa
c0009c6c:	89 c2                	mov    edx,eax
c0009c6e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009c72:	01 d0                	add    eax,edx
c0009c74:	c1 e0 0c             	shl    eax,0xc
c0009c77:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009c7b:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009c80:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c82:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009c85:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009c8b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009c8f:	6a 01                	push   0x1
c0009c91:	50                   	push   eax
c0009c92:	e8 77 fc ff ff       	call   c000990e <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0009c97:	83 c4 0c             	add    esp,0xc
c0009c9a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009c9e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009ca2:	8b 00                	mov    eax,DWORD PTR [eax]
c0009ca4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009ca8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009cac:	25 01 04 00 00       	and    eax,0x401
c0009cb1:	3d 01 04 00 00       	cmp    eax,0x401
c0009cb6:	75 1a                	jne    c0009cd2 <VAS::~VAS()+0xf0>
c0009cb8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009cbc:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009cc1:	83 ec 0c             	sub    esp,0xc
c0009cc4:	50                   	push   eax
c0009cc5:	e8 bc e0 ff ff       	call   c0007d86 <Phys::freePage(unsigned long)>
c0009cca:	83 c4 10             	add    esp,0x10
c0009ccd:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009cd2:	83 44 24 14 01       	add    DWORD PTR [esp+0x14],0x1
c0009cd7:	eb 82                	jmp    c0009c5b <VAS::~VAS()+0x79>
c0009cd9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009cdd:	25 00 04 00 00       	and    eax,0x400
c0009ce2:	74 1a                	je     c0009cfe <VAS::~VAS()+0x11c>
c0009ce4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009ce8:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009ced:	83 ec 0c             	sub    esp,0xc
c0009cf0:	50                   	push   eax
c0009cf1:	e8 90 e0 ff ff       	call   c0007d86 <Phys::freePage(unsigned long)>
c0009cf6:	83 c4 10             	add    esp,0x10
c0009cf9:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009cfe:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c0009d03:	e9 1a ff ff ff       	jmp    c0009c22 <VAS::~VAS()+0x40>
c0009d08:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009d0c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009d0f:	83 ec 0c             	sub    esp,0xc
c0009d12:	50                   	push   eax
c0009d13:	e8 43 fc ff ff       	call   c000995b <Virt::freeKernelVirtualPages(unsigned long)>
c0009d18:	83 c4 10             	add    esp,0x10
c0009d1b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009d1f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009d22:	83 ec 0c             	sub    esp,0xc
c0009d25:	50                   	push   eax
c0009d26:	e8 5b e0 ff ff       	call   c0007d86 <Phys::freePage(unsigned long)>
c0009d2b:	83 c4 10             	add    esp,0x10
c0009d2e:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009d33:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0009d38:	83 e8 01             	sub    eax,0x1
c0009d3b:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0009d40:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0009d45:	85 c0                	test   eax,eax
c0009d47:	75 01                	jne    c0009d4a <VAS::~VAS()+0x168>
c0009d49:	fb                   	sti    
c0009d4a:	90                   	nop
c0009d4b:	83 c4 2c             	add    esp,0x2c
c0009d4e:	c3                   	ret    
c0009d4f:	90                   	nop

c0009d50 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0009d50:	55                   	push   ebp
c0009d51:	57                   	push   edi
c0009d52:	56                   	push   esi
c0009d53:	53                   	push   ebx
c0009d54:	83 ec 1c             	sub    esp,0x1c
c0009d57:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0009d5b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009d5f:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0009d65:	77 08                	ja     c0009d6f <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c0009d67:	0f 20 d8             	mov    eax,cr3
c0009d6a:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c0009d6d:	75 49                	jne    c0009db8 <VAS::mapPage(unsigned long, unsigned long, int)+0x68>
c0009d6f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009d73:	09 d8                	or     eax,ebx
c0009d75:	a9 ff 0f 00 00       	test   eax,0xfff
c0009d7a:	75 59                	jne    c0009dd5 <VAS::mapPage(unsigned long, unsigned long, int)+0x85>
c0009d7c:	89 de                	mov    esi,ebx
c0009d7e:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009d81:	c1 ee 16             	shr    esi,0x16
c0009d84:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0009d8b:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0009d8f:	74 56                	je     c0009de7 <VAS::mapPage(unsigned long, unsigned long, int)+0x97>
c0009d91:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009d95:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009d99:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0009d9f:	c1 eb 0a             	shr    ebx,0xa
c0009da2:	c1 e6 0c             	shl    esi,0xc
c0009da5:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0009dab:	09 d0                	or     eax,edx
c0009dad:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0009db0:	83 c4 1c             	add    esp,0x1c
c0009db3:	5b                   	pop    ebx
c0009db4:	5e                   	pop    esi
c0009db5:	5f                   	pop    edi
c0009db6:	5d                   	pop    ebp
c0009db7:	c3                   	ret    
c0009db8:	83 ec 0c             	sub    esp,0xc
c0009dbb:	68 4c 11 02 c0       	push   0xc002114c
c0009dc0:	e8 b0 0b 00 00       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c0009dc5:	83 c4 10             	add    esp,0x10
c0009dc8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009dcc:	09 d8                	or     eax,ebx
c0009dce:	a9 ff 0f 00 00       	test   eax,0xfff
c0009dd3:	74 a7                	je     c0009d7c <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0009dd5:	83 ec 0c             	sub    esp,0xc
c0009dd8:	68 b4 11 02 c0       	push   0xc00211b4
c0009ddd:	e8 e5 78 00 00       	call   c00116c7 <KePanic(char const*)>
c0009de2:	83 c4 10             	add    esp,0x10
c0009de5:	eb 95                	jmp    c0009d7c <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0009de7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009deb:	e8 ff df ff ff       	call   c0007def <Phys::allocatePage()>
c0009df0:	83 ec 0c             	sub    esp,0xc
c0009df3:	89 c5                	mov    ebp,eax
c0009df5:	8b 0d b0 6f 02 c0    	mov    ecx,DWORD PTR ds:0xc0026fb0
c0009dfb:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0009dff:	6a 01                	push   0x1
c0009e01:	e8 37 f8 ff ff       	call   c000963d <Virt::allocateKernelVirtualPages(int)>
c0009e06:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0009e0d:	6a 01                	push   0x1
c0009e0f:	50                   	push   eax
c0009e10:	55                   	push   ebp
c0009e11:	81 cd 07 04 00 00    	or     ebp,0x407
c0009e17:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0009e1b:	51                   	push   ecx
c0009e1c:	e8 29 01 00 00       	call   c0009f4a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009e21:	83 c4 1c             	add    esp,0x1c
c0009e24:	68 00 10 00 00       	push   0x1000
c0009e29:	6a 00                	push   0x0
c0009e2b:	50                   	push   eax
c0009e2c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009e30:	e8 bb 66 ff ff       	call   c00004f0 <memset>
c0009e35:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0009e39:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009e3c:	e8 1a fb ff ff       	call   c000995b <Virt::freeKernelVirtualPages(unsigned long)>
c0009e41:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009e45:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009e48:	83 c4 10             	add    esp,0x10
c0009e4b:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0009e4e:	e9 3e ff ff ff       	jmp    c0009d91 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>
c0009e53:	90                   	nop

c0009e54 <VAS::allocatePages(int, int)>:
c0009e54:	55                   	push   ebp
c0009e55:	57                   	push   edi
c0009e56:	56                   	push   esi
c0009e57:	53                   	push   ebx
c0009e58:	83 ec 1c             	sub    esp,0x1c
c0009e5b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0009e5f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0009e63:	80 7e 01 00          	cmp    BYTE PTR [esi+0x1],0x0
c0009e67:	75 71                	jne    c0009eda <VAS::allocatePages(int, int)+0x86>
c0009e69:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0009e6c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009e70:	85 c0                	test   eax,eax
c0009e72:	74 4d                	je     c0009ec1 <VAS::allocatePages(int, int)+0x6d>
c0009e74:	89 dd                	mov    ebp,ebx
c0009e76:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009e7a:	c1 e5 0c             	shl    ebp,0xc
c0009e7d:	01 c5                	add    ebp,eax
c0009e7f:	85 db                	test   ebx,ebx
c0009e81:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0009e84:	7e 29                	jle    c0009eaf <VAS::allocatePages(int, int)+0x5b>
c0009e86:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009e8a:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009e8e:	81 cf 00 04 00 00    	or     edi,0x400
c0009e94:	e8 56 df ff ff       	call   c0007def <Phys::allocatePage()>
c0009e99:	57                   	push   edi
c0009e9a:	53                   	push   ebx
c0009e9b:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009ea1:	50                   	push   eax
c0009ea2:	56                   	push   esi
c0009ea3:	e8 a8 fe ff ff       	call   c0009d50 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009ea8:	83 c4 10             	add    esp,0x10
c0009eab:	39 dd                	cmp    ebp,ebx
c0009ead:	75 e5                	jne    c0009e94 <VAS::allocatePages(int, int)+0x40>
c0009eaf:	0f 20 d8             	mov    eax,cr3
c0009eb2:	0f 22 d8             	mov    cr3,eax
c0009eb5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009eb9:	83 c4 1c             	add    esp,0x1c
c0009ebc:	5b                   	pop    ebx
c0009ebd:	5e                   	pop    esi
c0009ebe:	5f                   	pop    edi
c0009ebf:	5d                   	pop    ebp
c0009ec0:	c3                   	ret    
c0009ec1:	83 ec 0c             	sub    esp,0xc
c0009ec4:	68 d8 11 02 c0       	push   0xc00211d8
c0009ec9:	e8 f9 77 00 00       	call   c00116c7 <KePanic(char const*)>
c0009ece:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0009ed1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009ed5:	83 c4 10             	add    esp,0x10
c0009ed8:	eb 9a                	jmp    c0009e74 <VAS::allocatePages(int, int)+0x20>
c0009eda:	83 ec 0c             	sub    esp,0xc
c0009edd:	53                   	push   ebx
c0009ede:	e8 5a f7 ff ff       	call   c000963d <Virt::allocateKernelVirtualPages(int)>
c0009ee3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009ee7:	83 c4 10             	add    esp,0x10
c0009eea:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0009eef:	77 37                	ja     c0009f28 <VAS::allocatePages(int, int)+0xd4>
c0009ef1:	85 db                	test   ebx,ebx
c0009ef3:	7e ba                	jle    c0009eaf <VAS::allocatePages(int, int)+0x5b>
c0009ef5:	c1 e3 0c             	shl    ebx,0xc
c0009ef8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009efc:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009f00:	8d 2c 03             	lea    ebp,[ebx+eax*1]
c0009f03:	81 cf 00 04 00 00    	or     edi,0x400
c0009f09:	89 c3                	mov    ebx,eax
c0009f0b:	e8 df de ff ff       	call   c0007def <Phys::allocatePage()>
c0009f10:	57                   	push   edi
c0009f11:	53                   	push   ebx
c0009f12:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009f18:	50                   	push   eax
c0009f19:	56                   	push   esi
c0009f1a:	e8 31 fe ff ff       	call   c0009d50 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009f1f:	83 c4 10             	add    esp,0x10
c0009f22:	39 dd                	cmp    ebp,ebx
c0009f24:	75 e5                	jne    c0009f0b <VAS::allocatePages(int, int)+0xb7>
c0009f26:	eb 87                	jmp    c0009eaf <VAS::allocatePages(int, int)+0x5b>
c0009f28:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0009f2d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009f33:	f6 80 8c 11 00 00 10 	test   BYTE PTR [eax+0x118c],0x10
c0009f3a:	74 b5                	je     c0009ef1 <VAS::allocatePages(int, int)+0x9d>
c0009f3c:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0009f40:	80 ce 01             	or     dh,0x1
c0009f43:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0009f47:	eb a8                	jmp    c0009ef1 <VAS::allocatePages(int, int)+0x9d>
c0009f49:	90                   	nop

c0009f4a <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0009f4a:	55                   	push   ebp
c0009f4b:	57                   	push   edi
c0009f4c:	56                   	push   esi
c0009f4d:	53                   	push   ebx
c0009f4e:	83 ec 0c             	sub    esp,0xc
c0009f51:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0009f55:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0009f59:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0009f5d:	85 db                	test   ebx,ebx
c0009f5f:	7e 2f                	jle    c0009f90 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x46>
c0009f61:	c1 e3 0c             	shl    ebx,0xc
c0009f64:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0009f68:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0009f6c:	01 d3                	add    ebx,edx
c0009f6e:	55                   	push   ebp
c0009f6f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0009f73:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009f77:	29 c2                	sub    edx,eax
c0009f79:	01 f2                	add    edx,esi
c0009f7b:	52                   	push   edx
c0009f7c:	56                   	push   esi
c0009f7d:	81 c6 00 10 00 00    	add    esi,0x1000
c0009f83:	57                   	push   edi
c0009f84:	e8 c7 fd ff ff       	call   c0009d50 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009f89:	83 c4 10             	add    esp,0x10
c0009f8c:	39 de                	cmp    esi,ebx
c0009f8e:	75 de                	jne    c0009f6e <VAS::mapRange(unsigned long, unsigned long, int, int)+0x24>
c0009f90:	0f 20 d8             	mov    eax,cr3
c0009f93:	0f 22 d8             	mov    cr3,eax
c0009f96:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009f9a:	83 c4 0c             	add    esp,0xc
c0009f9d:	5b                   	pop    ebx
c0009f9e:	5e                   	pop    esi
c0009f9f:	5f                   	pop    edi
c0009fa0:	5d                   	pop    ebp
c0009fa1:	c3                   	ret    

c0009fa2 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0009fa2:	55                   	push   ebp
c0009fa3:	57                   	push   edi
c0009fa4:	56                   	push   esi
c0009fa5:	53                   	push   ebx
c0009fa6:	83 ec 1c             	sub    esp,0x1c
c0009fa9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009fad:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0009fb1:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009fb5:	09 f8                	or     eax,edi
c0009fb7:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009fbb:	a9 ff 0f 00 00       	test   eax,0xfff
c0009fc0:	75 4f                	jne    c000a011 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x6f>
c0009fc2:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0009fc6:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0009fc9:	c1 eb 16             	shr    ebx,0x16
c0009fcc:	8d 3c 9d 00 00 00 00 	lea    edi,[ebx*4+0x0]
c0009fd3:	f6 04 38 01          	test   BYTE PTR [eax+edi*1],0x1
c0009fd7:	74 52                	je     c000a02b <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x89>
c0009fd9:	0f b6 f2             	movzx  esi,dl
c0009fdc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009fe0:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0009fe4:	c1 e8 0a             	shr    eax,0xa
c0009fe7:	83 fe 01             	cmp    esi,0x1
c0009fea:	19 d2                	sbb    edx,edx
c0009fec:	c1 e3 0c             	shl    ebx,0xc
c0009fef:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0009ff5:	25 fc 0f 00 00       	and    eax,0xffc
c0009ffa:	01 d8                	add    eax,ebx
c0009ffc:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000a000:	09 d9                	or     ecx,ebx
c000a002:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c000a009:	83 c4 1c             	add    esp,0x1c
c000a00c:	5b                   	pop    ebx
c000a00d:	5e                   	pop    esi
c000a00e:	5f                   	pop    edi
c000a00f:	5d                   	pop    ebp
c000a010:	c3                   	ret    
c000a011:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000a015:	83 ec 0c             	sub    esp,0xc
c000a018:	68 04 12 02 c0       	push   0xc0021204
c000a01d:	e8 a5 76 00 00       	call   c00116c7 <KePanic(char const*)>
c000a022:	83 c4 10             	add    esp,0x10
c000a025:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a029:	eb 97                	jmp    c0009fc2 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x20>
c000a02b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a02f:	e8 bb dd ff ff       	call   c0007def <Phys::allocatePage()>
c000a034:	83 ec 0c             	sub    esp,0xc
c000a037:	89 c5                	mov    ebp,eax
c000a039:	8b 0d b0 6f 02 c0    	mov    ecx,DWORD PTR ds:0xc0026fb0
c000a03f:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000a043:	6a 01                	push   0x1
c000a045:	e8 f3 f5 ff ff       	call   c000963d <Virt::allocateKernelVirtualPages(int)>
c000a04a:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000a051:	6a 01                	push   0x1
c000a053:	50                   	push   eax
c000a054:	55                   	push   ebp
c000a055:	81 cd 07 04 00 00    	or     ebp,0x407
c000a05b:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000a05f:	51                   	push   ecx
c000a060:	e8 e5 fe ff ff       	call   c0009f4a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a065:	83 c4 1c             	add    esp,0x1c
c000a068:	68 00 10 00 00       	push   0x1000
c000a06d:	6a 00                	push   0x0
c000a06f:	50                   	push   eax
c000a070:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a074:	e8 77 64 ff ff       	call   c00004f0 <memset>
c000a079:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000a07d:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a080:	e8 d6 f8 ff ff       	call   c000995b <Virt::freeKernelVirtualPages(unsigned long)>
c000a085:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a088:	83 c4 10             	add    esp,0x10
c000a08b:	89 2c 38             	mov    DWORD PTR [eax+edi*1],ebp
c000a08e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a092:	e9 42 ff ff ff       	jmp    c0009fd9 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x37>
c000a097:	90                   	nop

c000a098 <VAS::VAS(bool)>:
c000a098:	53                   	push   ebx
c000a099:	83 ec 28             	sub    esp,0x28
c000a09c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a0a0:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000a0a4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0a8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000a0af:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0b3:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000a0ba:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0be:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000a0c2:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000a0c5:	e8 25 dd ff ff       	call   c0007def <Phys::allocatePage()>
c000a0ca:	89 c2                	mov    edx,eax
c000a0cc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0d0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000a0d3:	8b 1d b0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fb0
c000a0d9:	83 ec 0c             	sub    esp,0xc
c000a0dc:	6a 01                	push   0x1
c000a0de:	e8 5a f5 ff ff       	call   c000963d <Virt::allocateKernelVirtualPages(int)>
c000a0e3:	83 c4 10             	add    esp,0x10
c000a0e6:	89 c2                	mov    edx,eax
c000a0e8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0ec:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a0ef:	83 ec 0c             	sub    esp,0xc
c000a0f2:	6a 03                	push   0x3
c000a0f4:	6a 01                	push   0x1
c000a0f6:	52                   	push   edx
c000a0f7:	50                   	push   eax
c000a0f8:	53                   	push   ebx
c000a0f9:	e8 4c fe ff ff       	call   c0009f4a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a0fe:	83 c4 20             	add    esp,0x20
c000a101:	89 c2                	mov    edx,eax
c000a103:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a107:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a10a:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000a112:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000a11a:	7f 1d                	jg     c000a139 <VAS::VAS(bool)+0xa1>
c000a11c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a120:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a123:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a127:	c1 e2 02             	shl    edx,0x2
c000a12a:	01 d0                	add    eax,edx
c000a12c:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a132:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000a137:	eb d9                	jmp    c000a112 <VAS::VAS(bool)+0x7a>
c000a139:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000a141:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000a149:	7f 7e                	jg     c000a1c9 <VAS::VAS(bool)+0x131>
c000a14b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a14f:	2d 00 02 00 00       	sub    eax,0x200
c000a154:	c1 e0 0c             	shl    eax,0xc
c000a157:	83 c8 05             	or     eax,0x5
c000a15a:	89 c2                	mov    edx,eax
c000a15c:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000a161:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a167:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a16d:	83 e0 10             	and    eax,0x10
c000a170:	0f b6 c0             	movzx  eax,al
c000a173:	85 c0                	test   eax,eax
c000a175:	74 07                	je     c000a17e <VAS::VAS(bool)+0xe6>
c000a177:	b8 00 01 00 00       	mov    eax,0x100
c000a17c:	eb 05                	jmp    c000a183 <VAS::VAS(bool)+0xeb>
c000a17e:	b8 00 00 00 00       	mov    eax,0x0
c000a183:	09 d0                	or     eax,edx
c000a185:	89 c1                	mov    ecx,eax
c000a187:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a18b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a18e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a192:	c1 e2 02             	shl    edx,0x2
c000a195:	01 d0                	add    eax,edx
c000a197:	89 ca                	mov    edx,ecx
c000a199:	89 10                	mov    DWORD PTR [eax],edx
c000a19b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a19f:	2d 40 03 00 00       	sub    eax,0x340
c000a1a4:	83 f8 7f             	cmp    eax,0x7f
c000a1a7:	77 16                	ja     c000a1bf <VAS::VAS(bool)+0x127>
c000a1a9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a1ad:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a1b0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a1b4:	c1 e2 02             	shl    edx,0x2
c000a1b7:	01 d0                	add    eax,edx
c000a1b9:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a1bf:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000a1c4:	e9 78 ff ff ff       	jmp    c000a141 <VAS::VAS(bool)+0xa9>
c000a1c9:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000a1ce:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a1d4:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a1da:	83 e0 10             	and    eax,0x10
c000a1dd:	0f b6 c0             	movzx  eax,al
c000a1e0:	85 c0                	test   eax,eax
c000a1e2:	74 07                	je     c000a1eb <VAS::VAS(bool)+0x153>
c000a1e4:	b8 03 41 00 00       	mov    eax,0x4103
c000a1e9:	eb 05                	jmp    c000a1f0 <VAS::VAS(bool)+0x158>
c000a1eb:	b8 03 40 00 00       	mov    eax,0x4003
c000a1f0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000a1f4:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000a1f7:	81 c2 20 0c 00 00    	add    edx,0xc20
c000a1fd:	89 02                	mov    DWORD PTR [edx],eax
c000a1ff:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a203:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000a206:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000a20b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a211:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a217:	83 e0 10             	and    eax,0x10
c000a21a:	0f b6 c0             	movzx  eax,al
c000a21d:	85 c0                	test   eax,eax
c000a21f:	74 07                	je     c000a228 <VAS::VAS(bool)+0x190>
c000a221:	b8 00 01 00 00       	mov    eax,0x100
c000a226:	eb 05                	jmp    c000a22d <VAS::VAS(bool)+0x195>
c000a228:	b8 00 00 00 00       	mov    eax,0x0
c000a22d:	09 c2                	or     edx,eax
c000a22f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a233:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a236:	05 fc 0f 00 00       	add    eax,0xffc
c000a23b:	83 ca 03             	or     edx,0x3
c000a23e:	89 10                	mov    DWORD PTR [eax],edx
c000a240:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000a245:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a24b:	83 ec 0c             	sub    esp,0xc
c000a24e:	50                   	push   eax
c000a24f:	e8 36 2a 00 00       	call   c000cc8a <Device::getName()>
c000a254:	83 c4 10             	add    esp,0x10
c000a257:	83 ec 08             	sub    esp,0x8
c000a25a:	68 d4 13 02 c0       	push   0xc00213d4
c000a25f:	50                   	push   eax
c000a260:	e8 eb 64 ff ff       	call   c0000750 <strcmp>
c000a265:	83 c4 10             	add    esp,0x10
c000a268:	85 c0                	test   eax,eax
c000a26a:	0f 94 c0             	sete   al
c000a26d:	0f b6 c0             	movzx  eax,al
c000a270:	85 c0                	test   eax,eax
c000a272:	74 68                	je     c000a2dc <VAS::VAS(bool)+0x244>
c000a274:	fa                   	cli    
c000a275:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000a27a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a280:	05 7c 09 00 00       	add    eax,0x97c
c000a285:	83 ec 0c             	sub    esp,0xc
c000a288:	50                   	push   eax
c000a289:	e8 50 d3 ff ff       	call   c00075de <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a28e:	83 c4 10             	add    esp,0x10
c000a291:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a296:	89 c3                	mov    ebx,eax
c000a298:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000a29d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a2a3:	05 7c 09 00 00       	add    eax,0x97c
c000a2a8:	83 ec 0c             	sub    esp,0xc
c000a2ab:	50                   	push   eax
c000a2ac:	e8 2d d3 ff ff       	call   c00075de <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a2b1:	83 c4 10             	add    esp,0x10
c000a2b4:	83 ec 08             	sub    esp,0x8
c000a2b7:	50                   	push   eax
c000a2b8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a2bc:	e8 7b f6 ff ff       	call   c000993c <VAS::getPageTableEntry(unsigned long)>
c000a2c1:	83 c4 10             	add    esp,0x10
c000a2c4:	8b 00                	mov    eax,DWORD PTR [eax]
c000a2c6:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a2cb:	6a 11                	push   0x11
c000a2cd:	53                   	push   ebx
c000a2ce:	50                   	push   eax
c000a2cf:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a2d3:	e8 78 fa ff ff       	call   c0009d50 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a2d8:	83 c4 10             	add    esp,0x10
c000a2db:	fb                   	sti    
c000a2dc:	90                   	nop
c000a2dd:	83 c4 28             	add    esp,0x28
c000a2e0:	5b                   	pop    ebx
c000a2e1:	c3                   	ret    

c000a2e2 <VAS::evict(unsigned long)>:
c000a2e2:	55                   	push   ebp
c000a2e3:	57                   	push   edi
c000a2e4:	56                   	push   esi
c000a2e5:	53                   	push   ebx
c000a2e6:	83 ec 1c             	sub    esp,0x1c
c000a2e9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a2ed:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a2f1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a2f5:	e8 a1 f4 ff ff       	call   c000979b <Virt::allocateSwapfilePage()>
c000a2fa:	89 c7                	mov    edi,eax
c000a2fc:	a1 6c 38 02 c0       	mov    eax,ds:0xc002386c
c000a301:	85 c0                	test   eax,eax
c000a303:	7e 40                	jle    c000a345 <VAS::evict(unsigned long)+0x63>
c000a305:	89 ee                	mov    esi,ebp
c000a307:	31 db                	xor    ebx,ebx
c000a309:	83 ec 0c             	sub    esp,0xc
c000a30c:	57                   	push   edi
c000a30d:	e8 73 f4 ff ff       	call   c0009785 <Virt::swapIDToSector(unsigned long)>
c000a312:	89 34 24             	mov    DWORD PTR [esp],esi
c000a315:	01 d8                	add    eax,ebx
c000a317:	6a 01                	push   0x1
c000a319:	31 d2                	xor    edx,edx
c000a31b:	83 c3 01             	add    ebx,0x1
c000a31e:	52                   	push   edx
c000a31f:	81 c6 00 02 00 00    	add    esi,0x200
c000a325:	50                   	push   eax
c000a326:	0f be 05 78 38 02 c0 	movsx  eax,BYTE PTR ds:0xc0023878
c000a32d:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c000a334:	50                   	push   eax
c000a335:	e8 0a 3b 00 00       	call   c000de44 <LogicalDisk::write(unsigned long long, int, void*)>
c000a33a:	83 c4 20             	add    esp,0x20
c000a33d:	39 1d 6c 38 02 c0    	cmp    DWORD PTR ds:0xc002386c,ebx
c000a343:	7f c4                	jg     c000a309 <VAS::evict(unsigned long)+0x27>
c000a345:	83 ec 08             	sub    esp,0x8
c000a348:	c1 e7 0c             	shl    edi,0xc
c000a34b:	55                   	push   ebp
c000a34c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a350:	50                   	push   eax
c000a351:	e8 e6 f5 ff ff       	call   c000993c <VAS::getPageTableEntry(unsigned long)>
c000a356:	8b 10                	mov    edx,DWORD PTR [eax]
c000a358:	89 d3                	mov    ebx,edx
c000a35a:	81 e2 fe 07 00 00    	and    edx,0x7fe
c000a360:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a366:	09 d7                	or     edi,edx
c000a368:	89 38                	mov    DWORD PTR [eax],edi
c000a36a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000a36d:	8b 15 a8 6f 02 c0    	mov    edx,DWORD PTR ds:0xc0026fa8
c000a373:	83 c2 01             	add    edx,0x1
c000a376:	89 15 a8 6f 02 c0    	mov    DWORD PTR ds:0xc0026fa8,edx
c000a37c:	e8 05 da ff ff       	call   c0007d86 <Phys::freePage(unsigned long)>
c000a381:	0f 20 d8             	mov    eax,cr3
c000a384:	0f 22 d8             	mov    cr3,eax
c000a387:	8b 0d a8 6f 02 c0    	mov    ecx,DWORD PTR ds:0xc0026fa8
c000a38d:	51                   	push   ecx
c000a38e:	55                   	push   ebp
c000a38f:	53                   	push   ebx
c000a390:	68 28 12 02 c0       	push   0xc0021228
c000a395:	e8 db 05 00 00       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c000a39a:	a1 a4 6f 02 c0       	mov    eax,ds:0xc0026fa4
c000a39f:	c7 44 24 50 e2 13 02 c0 	mov    DWORD PTR [esp+0x50],0xc00213e2
c000a3a7:	8d 50 01             	lea    edx,[eax+0x1]
c000a3aa:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000a3ae:	89 15 a4 6f 02 c0    	mov    DWORD PTR ds:0xc0026fa4,edx
c000a3b4:	83 c4 3c             	add    esp,0x3c
c000a3b7:	5b                   	pop    ebx
c000a3b8:	5e                   	pop    esi
c000a3b9:	5f                   	pop    edi
c000a3ba:	5d                   	pop    ebp
c000a3bb:	e9 b5 05 00 00       	jmp    c000a975 <Dbg::kprintf(char const*, ...)>

c000a3c0 <VAS::tryLoadBackOffDisk(unsigned long)>:
c000a3c0:	55                   	push   ebp
c000a3c1:	57                   	push   edi
c000a3c2:	56                   	push   esi
c000a3c3:	53                   	push   ebx
c000a3c4:	81 ec 1c 10 00 00    	sub    esp,0x101c
c000a3ca:	8b b4 24 34 10 00 00 	mov    esi,DWORD PTR [esp+0x1034]
c000a3d1:	89 f3                	mov    ebx,esi
c000a3d3:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a3d9:	81 fe ff ff bf ff    	cmp    esi,0xffbfffff
c000a3df:	77 22                	ja     c000a403 <VAS::tryLoadBackOffDisk(unsigned long)+0x43>
c000a3e1:	83 ec 08             	sub    esp,0x8
c000a3e4:	56                   	push   esi
c000a3e5:	68 05 14 02 c0       	push   0xc0021405
c000a3ea:	e8 86 05 00 00       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c000a3ef:	83 c4 10             	add    esp,0x10
c000a3f2:	85 db                	test   ebx,ebx
c000a3f4:	75 2a                	jne    c000a420 <VAS::tryLoadBackOffDisk(unsigned long)+0x60>
c000a3f6:	31 c0                	xor    eax,eax
c000a3f8:	81 c4 1c 10 00 00    	add    esp,0x101c
c000a3fe:	5b                   	pop    ebx
c000a3ff:	5e                   	pop    esi
c000a400:	5f                   	pop    edi
c000a401:	5d                   	pop    ebp
c000a402:	c3                   	ret    
c000a403:	83 ec 0c             	sub    esp,0xc
c000a406:	68 f3 13 02 c0       	push   0xc00213f3
c000a40b:	e8 b7 72 00 00       	call   c00116c7 <KePanic(char const*)>
c000a410:	5f                   	pop    edi
c000a411:	5d                   	pop    ebp
c000a412:	56                   	push   esi
c000a413:	68 05 14 02 c0       	push   0xc0021405
c000a418:	e8 58 05 00 00       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c000a41d:	83 c4 10             	add    esp,0x10
c000a420:	83 ec 08             	sub    esp,0x8
c000a423:	53                   	push   ebx
c000a424:	8b 8c 24 3c 10 00 00 	mov    ecx,DWORD PTR [esp+0x103c]
c000a42b:	51                   	push   ecx
c000a42c:	e8 0b f5 ff ff       	call   c000993c <VAS::getPageTableEntry(unsigned long)>
c000a431:	83 c4 10             	add    esp,0x10
c000a434:	89 c2                	mov    edx,eax
c000a436:	85 c0                	test   eax,eax
c000a438:	74 bc                	je     c000a3f6 <VAS::tryLoadBackOffDisk(unsigned long)+0x36>
c000a43a:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a43c:	f7 c5 00 02 00 00    	test   ebp,0x200
c000a442:	0f 85 c0 00 00 00    	jne    c000a508 <VAS::tryLoadBackOffDisk(unsigned long)+0x148>
c000a448:	89 e8                	mov    eax,ebp
c000a44a:	25 01 04 00 00       	and    eax,0x401
c000a44f:	3d 00 04 00 00       	cmp    eax,0x400
c000a454:	75 a0                	jne    c000a3f6 <VAS::tryLoadBackOffDisk(unsigned long)+0x36>
c000a456:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a45a:	c1 ed 0c             	shr    ebp,0xc
c000a45d:	e8 8d d9 ff ff       	call   c0007def <Phys::allocatePage()>
c000a462:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a466:	8b 0a                	mov    ecx,DWORD PTR [edx]
c000a468:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c000a46e:	09 c1                	or     ecx,eax
c000a470:	81 c9 01 08 00 00    	or     ecx,0x801
c000a476:	89 0a                	mov    DWORD PTR [edx],ecx
c000a478:	8b 15 6c 38 02 c0    	mov    edx,DWORD PTR ds:0xc002386c
c000a47e:	85 d2                	test   edx,edx
c000a480:	7e 40                	jle    c000a4c2 <VAS::tryLoadBackOffDisk(unsigned long)+0x102>
c000a482:	89 df                	mov    edi,ebx
c000a484:	31 f6                	xor    esi,esi
c000a486:	83 ec 0c             	sub    esp,0xc
c000a489:	55                   	push   ebp
c000a48a:	e8 f6 f2 ff ff       	call   c0009785 <Virt::swapIDToSector(unsigned long)>
c000a48f:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a492:	01 f0                	add    eax,esi
c000a494:	6a 01                	push   0x1
c000a496:	31 d2                	xor    edx,edx
c000a498:	83 c6 01             	add    esi,0x1
c000a49b:	52                   	push   edx
c000a49c:	81 c7 00 02 00 00    	add    edi,0x200
c000a4a2:	50                   	push   eax
c000a4a3:	0f be 05 78 38 02 c0 	movsx  eax,BYTE PTR ds:0xc0023878
c000a4aa:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c000a4b1:	50                   	push   eax
c000a4b2:	e8 21 39 00 00       	call   c000ddd8 <LogicalDisk::read(unsigned long long, int, void*)>
c000a4b7:	83 c4 20             	add    esp,0x20
c000a4ba:	39 35 6c 38 02 c0    	cmp    DWORD PTR ds:0xc002386c,esi
c000a4c0:	7f c4                	jg     c000a486 <VAS::tryLoadBackOffDisk(unsigned long)+0xc6>
c000a4c2:	83 ec 04             	sub    esp,0x4
c000a4c5:	a1 a8 6f 02 c0       	mov    eax,ds:0xc0026fa8
c000a4ca:	83 e8 01             	sub    eax,0x1
c000a4cd:	50                   	push   eax
c000a4ce:	a3 a8 6f 02 c0       	mov    ds:0xc0026fa8,eax
c000a4d3:	53                   	push   ebx
c000a4d4:	68 18 14 02 c0       	push   0xc0021418
c000a4d9:	e8 97 04 00 00       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c000a4de:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000a4e1:	e8 7c f2 ff ff       	call   c0009762 <Virt::freeSwapfilePage(unsigned long)>
c000a4e6:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000a4eb:	83 c4 10             	add    esp,0x10
c000a4ee:	83 e8 01             	sub    eax,0x1
c000a4f1:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000a4f6:	85 c0                	test   eax,eax
c000a4f8:	75 01                	jne    c000a4fb <VAS::tryLoadBackOffDisk(unsigned long)+0x13b>
c000a4fa:	fb                   	sti    
c000a4fb:	0f 20 d8             	mov    eax,cr3
c000a4fe:	0f 22 d8             	mov    cr3,eax
c000a501:	b0 01                	mov    al,0x1
c000a503:	e9 f0 fe ff ff       	jmp    c000a3f8 <VAS::tryLoadBackOffDisk(unsigned long)+0x38>
c000a508:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a50c:	bd 00 10 00 00       	mov    ebp,0x1000
c000a511:	83 ec 0c             	sub    esp,0xc
c000a514:	89 de                	mov    esi,ebx
c000a516:	68 58 12 02 c0       	push   0xc0021258
c000a51b:	e8 55 04 00 00       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c000a520:	8d 7c 24 20          	lea    edi,[esp+0x20]
c000a524:	e8 c6 d8 ff ff       	call   c0007def <Phys::allocatePage()>
c000a529:	89 e9                	mov    ecx,ebp
c000a52b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a52d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a531:	8b 0a                	mov    ecx,DWORD PTR [edx]
c000a533:	81 e1 ff 0d 00 00    	and    ecx,0xdff
c000a539:	09 c8                	or     eax,ecx
c000a53b:	83 c8 02             	or     eax,0x2
c000a53e:	89 02                	mov    DWORD PTR [edx],eax
c000a540:	0f 20 d8             	mov    eax,cr3
c000a543:	0f 22 d8             	mov    cr3,eax
c000a546:	8d 74 24 20          	lea    esi,[esp+0x20]
c000a54a:	89 df                	mov    edi,ebx
c000a54c:	89 e9                	mov    ecx,ebp
c000a54e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a550:	b0 01                	mov    al,0x1
c000a552:	83 c4 10             	add    esp,0x10
c000a555:	e9 9e fe ff ff       	jmp    c000a3f8 <VAS::tryLoadBackOffDisk(unsigned long)+0x38>

c000a55a <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)>:
c000a55a:	55                   	push   ebp
c000a55b:	57                   	push   edi
c000a55c:	56                   	push   esi
c000a55d:	53                   	push   ebx
c000a55e:	83 ec 28             	sub    esp,0x28
c000a561:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000a565:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a569:	50                   	push   eax
c000a56a:	e8 ce f0 ff ff       	call   c000963d <Virt::allocateKernelVirtualPages(int)>
c000a56f:	83 c4 0c             	add    esp,0xc
c000a572:	89 c5                	mov    ebp,eax
c000a574:	6a 07                	push   0x7
c000a576:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000a57a:	52                   	push   edx
c000a57b:	56                   	push   esi
c000a57c:	e8 d3 f8 ff ff       	call   c0009e54 <VAS::allocatePages(int, int)>
c000a581:	83 c4 10             	add    esp,0x10
c000a584:	89 c7                	mov    edi,eax
c000a586:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000a58a:	85 c9                	test   ecx,ecx
c000a58c:	74 2f                	je     c000a5bd <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x63>
c000a58e:	31 db                	xor    ebx,ebx
c000a590:	e8 5a d8 ff ff       	call   c0007def <Phys::allocatePage()>
c000a595:	83 c3 01             	add    ebx,0x1
c000a598:	6a 03                	push   0x3
c000a59a:	55                   	push   ebp
c000a59b:	50                   	push   eax
c000a59c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a5a0:	56                   	push   esi
c000a5a1:	e8 aa f7 ff ff       	call   c0009d50 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a5a6:	6a 07                	push   0x7
c000a5a8:	57                   	push   edi
c000a5a9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a5ad:	50                   	push   eax
c000a5ae:	56                   	push   esi
c000a5af:	e8 9c f7 ff ff       	call   c0009d50 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a5b4:	83 c4 20             	add    esp,0x20
c000a5b7:	39 5c 24 34          	cmp    DWORD PTR [esp+0x34],ebx
c000a5bb:	75 d3                	jne    c000a590 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x36>
c000a5bd:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a5c1:	89 28                	mov    DWORD PTR [eax],ebp
c000a5c3:	83 c4 1c             	add    esp,0x1c
c000a5c6:	89 f8                	mov    eax,edi
c000a5c8:	5b                   	pop    ebx
c000a5c9:	5e                   	pop    esi
c000a5ca:	5f                   	pop    edi
c000a5cb:	5d                   	pop    ebp
c000a5cc:	c3                   	ret    
c000a5cd:	90                   	nop

c000a5ce <VAS::freeSharedMemoryWithKernel(unsigned long, unsigned long)>:
c000a5ce:	53                   	push   ebx
c000a5cf:	83 ec 14             	sub    esp,0x14
c000a5d2:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c000a5d6:	68 78 12 02 c0       	push   0xc0021278
c000a5db:	e8 95 03 00 00       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c000a5e0:	c7 04 24 d8 12 02 c0 	mov    DWORD PTR [esp],0xc00212d8
c000a5e7:	e8 89 03 00 00       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c000a5ec:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000a5f0:	83 c4 18             	add    esp,0x18
c000a5f3:	5b                   	pop    ebx
c000a5f4:	e9 62 f3 ff ff       	jmp    c000995b <Virt::freeKernelVirtualPages(unsigned long)>
c000a5f9:	90                   	nop

c000a5fa <VAS::scanForEviction()>:
c000a5fa:	57                   	push   edi
c000a5fb:	56                   	push   esi
c000a5fc:	31 f6                	xor    esi,esi
c000a5fe:	53                   	push   ebx
c000a5ff:	83 ec 10             	sub    esp,0x10
c000a602:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000a606:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000a609:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a60f:	75 0e                	jne    c000a61f <VAS::scanForEviction()+0x25>
c000a611:	89 da                	mov    edx,ebx
c000a613:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a616:	c1 ea 16             	shr    edx,0x16
c000a619:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a61d:	74 57                	je     c000a676 <VAS::scanForEviction()+0x7c>
c000a61f:	53                   	push   ebx
c000a620:	57                   	push   edi
c000a621:	e8 16 f3 ff ff       	call   c000993c <VAS::getPageTableEntry(unsigned long)>
c000a626:	5a                   	pop    edx
c000a627:	8b 10                	mov    edx,DWORD PTR [eax]
c000a629:	59                   	pop    ecx
c000a62a:	89 d1                	mov    ecx,edx
c000a62c:	c1 e9 0c             	shr    ecx,0xc
c000a62f:	74 10                	je     c000a641 <VAS::scanForEviction()+0x47>
c000a631:	89 d1                	mov    ecx,edx
c000a633:	81 e1 01 08 00 00    	and    ecx,0x801
c000a639:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000a63f:	74 40                	je     c000a681 <VAS::scanForEviction()+0x87>
c000a641:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a647:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000a64d:	76 2d                	jbe    c000a67c <VAS::scanForEviction()+0x82>
c000a64f:	83 c6 01             	add    esi,0x1
c000a652:	c7 47 08 00 00 00 00 	mov    DWORD PTR [edi+0x8],0x0
c000a659:	83 fe 03             	cmp    esi,0x3
c000a65c:	74 32                	je     c000a690 <VAS::scanForEviction()+0x96>
c000a65e:	31 db                	xor    ebx,ebx
c000a660:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a666:	75 b7                	jne    c000a61f <VAS::scanForEviction()+0x25>
c000a668:	89 da                	mov    edx,ebx
c000a66a:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a66d:	c1 ea 16             	shr    edx,0x16
c000a670:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a674:	75 a9                	jne    c000a61f <VAS::scanForEviction()+0x25>
c000a676:	81 c3 00 00 40 00    	add    ebx,0x400000
c000a67c:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c000a67f:	eb 88                	jmp    c000a609 <VAS::scanForEviction()+0xf>
c000a681:	f6 c2 20             	test   dl,0x20
c000a684:	74 13                	je     c000a699 <VAS::scanForEviction()+0x9f>
c000a686:	83 e2 df             	and    edx,0xffffffdf
c000a689:	89 10                	mov    DWORD PTR [eax],edx
c000a68b:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000a68e:	eb b1                	jmp    c000a641 <VAS::scanForEviction()+0x47>
c000a690:	83 c4 10             	add    esp,0x10
c000a693:	31 c0                	xor    eax,eax
c000a695:	5b                   	pop    ebx
c000a696:	5e                   	pop    esi
c000a697:	5f                   	pop    edi
c000a698:	c3                   	ret    
c000a699:	83 ec 08             	sub    esp,0x8
c000a69c:	89 d0                	mov    eax,edx
c000a69e:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a6a3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000a6a7:	53                   	push   ebx
c000a6a8:	68 2d 14 02 c0       	push   0xc002142d
c000a6ad:	e8 c3 02 00 00       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c000a6b2:	58                   	pop    eax
c000a6b3:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c000a6b6:	5a                   	pop    edx
c000a6b7:	51                   	push   ecx
c000a6b8:	57                   	push   edi
c000a6b9:	e8 24 fc ff ff       	call   c000a2e2 <VAS::evict(unsigned long)>
c000a6be:	5b                   	pop    ebx
c000a6bf:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000a6c2:	5e                   	pop    esi
c000a6c3:	50                   	push   eax
c000a6c4:	68 41 14 02 c0       	push   0xc0021441
c000a6c9:	e8 a7 02 00 00       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c000a6ce:	58                   	pop    eax
c000a6cf:	5a                   	pop    edx
c000a6d0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a6d4:	50                   	push   eax
c000a6d5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a6d9:	68 54 14 02 c0       	push   0xc0021454
c000a6de:	e8 92 02 00 00       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c000a6e3:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c000a6e6:	83 c4 10             	add    esp,0x10
c000a6e9:	81 c1 00 10 00 00    	add    ecx,0x1000
c000a6ef:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a6f3:	89 4f 08             	mov    DWORD PTR [edi+0x8],ecx
c000a6f6:	83 c4 10             	add    esp,0x10
c000a6f9:	5b                   	pop    ebx
c000a6fa:	5e                   	pop    esi
c000a6fb:	5f                   	pop    edi
c000a6fc:	c3                   	ret    

c000a6fd <mapVASFirstTime>:
c000a6fd:	55                   	push   ebp
c000a6fe:	57                   	push   edi
c000a6ff:	56                   	push   esi
c000a700:	53                   	push   ebx
c000a701:	83 ec 0c             	sub    esp,0xc
c000a704:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a709:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a70c:	83 fa 01             	cmp    edx,0x1
c000a70f:	0f 84 cb 00 00 00    	je     c000a7e0 <mapVASFirstTime+0xe3>
c000a715:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000a718:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000a71b:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000a720:	c1 e5 15             	shl    ebp,0x15
c000a723:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000a728:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000a72e:	29 eb                	sub    ebx,ebp
c000a730:	29 ef                	sub    edi,ebp
c000a732:	e8 b8 d6 ff ff       	call   c0007def <Phys::allocatePage()>
c000a737:	83 ec 0c             	sub    esp,0xc
c000a73a:	68 03 04 00 00       	push   0x403
c000a73f:	6a 01                	push   0x1
c000a741:	53                   	push   ebx
c000a742:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a748:	50                   	push   eax
c000a749:	56                   	push   esi
c000a74a:	e8 fb f7 ff ff       	call   c0009f4a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a74f:	83 c4 20             	add    esp,0x20
c000a752:	39 fb                	cmp    ebx,edi
c000a754:	75 dc                	jne    c000a732 <mapVASFirstTime+0x35>
c000a756:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000a75b:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000a760:	29 eb                	sub    ebx,ebp
c000a762:	29 ef                	sub    edi,ebp
c000a764:	e8 86 d6 ff ff       	call   c0007def <Phys::allocatePage()>
c000a769:	0f b6 56 01          	movzx  edx,BYTE PTR [esi+0x1]
c000a76d:	83 fa 01             	cmp    edx,0x1
c000a770:	19 d2                	sbb    edx,edx
c000a772:	83 ec 0c             	sub    esp,0xc
c000a775:	83 e2 04             	and    edx,0x4
c000a778:	81 c2 03 04 00 00    	add    edx,0x403
c000a77e:	52                   	push   edx
c000a77f:	6a 01                	push   0x1
c000a781:	53                   	push   ebx
c000a782:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a788:	50                   	push   eax
c000a789:	56                   	push   esi
c000a78a:	e8 bb f7 ff ff       	call   c0009f4a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a78f:	83 c4 20             	add    esp,0x20
c000a792:	39 df                	cmp    edi,ebx
c000a794:	75 ce                	jne    c000a764 <mapVASFirstTime+0x67>
c000a796:	83 ec 0c             	sub    esp,0xc
c000a799:	bb 7c 60 02 c0       	mov    ebx,0xc002607c
c000a79e:	6a 04                	push   0x4
c000a7a0:	81 eb 00 50 02 c0    	sub    ebx,0xc0025000
c000a7a6:	6a ff                	push   0xffffffff
c000a7a8:	c1 eb 0c             	shr    ebx,0xc
c000a7ab:	53                   	push   ebx
c000a7ac:	68 00 50 02 c0       	push   0xc0025000
c000a7b1:	56                   	push   esi
c000a7b2:	e8 1f f3 ff ff       	call   c0009ad6 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c000a7b7:	83 c4 14             	add    esp,0x14
c000a7ba:	a1 b0 6f 02 c0       	mov    eax,ds:0xc0026fb0
c000a7bf:	6a 04                	push   0x4
c000a7c1:	6a ff                	push   0xffffffff
c000a7c3:	53                   	push   ebx
c000a7c4:	68 00 50 02 c0       	push   0xc0025000
c000a7c9:	50                   	push   eax
c000a7ca:	e8 07 f3 ff ff       	call   c0009ad6 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c000a7cf:	0f 20 d8             	mov    eax,cr3
c000a7d2:	0f 22 d8             	mov    cr3,eax
c000a7d5:	83 c4 20             	add    esp,0x20
c000a7d8:	83 c4 0c             	add    esp,0xc
c000a7db:	5b                   	pop    ebx
c000a7dc:	5e                   	pop    esi
c000a7dd:	5f                   	pop    edi
c000a7de:	5d                   	pop    ebp
c000a7df:	c3                   	ret    
c000a7e0:	83 ec 0c             	sub    esp,0xc
c000a7e3:	68 61 14 02 c0       	push   0xc0021461
c000a7e8:	e8 88 01 00 00       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c000a7ed:	83 c4 10             	add    esp,0x10
c000a7f0:	83 c4 0c             	add    esp,0xc
c000a7f3:	5b                   	pop    ebx
c000a7f4:	5e                   	pop    esi
c000a7f5:	5f                   	pop    edi
c000a7f6:	5d                   	pop    ebp
c000a7f7:	c3                   	ret    

c000a7f8 <__cxa_atexit>:
c000a7f8:	31 c0                	xor    eax,eax
c000a7fa:	c3                   	ret    

c000a7fb <__cxa_finalize>:
c000a7fb:	c3                   	ret    

c000a7fc <__stack_chk_fail>:
c000a7fc:	55                   	push   ebp
c000a7fd:	89 e5                	mov    ebp,esp
c000a7ff:	83 ec 10             	sub    esp,0x10
c000a802:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000a805:	68 7a 14 02 c0       	push   0xc002147a
c000a80a:	e8 66 01 00 00       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c000a80f:	58                   	pop    eax
c000a810:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000a813:	5a                   	pop    edx
c000a814:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000a817:	68 7a 14 02 c0       	push   0xc002147a
c000a81c:	e8 54 01 00 00       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c000a821:	c7 04 24 82 14 02 c0 	mov    DWORD PTR [esp],0xc0021482
c000a828:	e8 9a 6e 00 00       	call   c00116c7 <KePanic(char const*)>
c000a82d:	83 c4 10             	add    esp,0x10
c000a830:	c9                   	leave  
c000a831:	c3                   	ret    

c000a832 <__cxa_pure_virtual>:
c000a832:	83 ec 18             	sub    esp,0x18
c000a835:	68 9a 14 02 c0       	push   0xc002149a
c000a83a:	e8 88 6e 00 00       	call   c00116c7 <KePanic(char const*)>
c000a83f:	83 c4 1c             	add    esp,0x1c
c000a842:	c3                   	ret    

c000a843 <operator new[](unsigned long)>:
c000a843:	e9 9e d2 ff ff       	jmp    c0007ae6 <malloc>

c000a848 <operator delete(void*, unsigned long)>:
c000a848:	e9 b9 d2 ff ff       	jmp    c0007b06 <rfree>

c000a84d <operator delete[](void*)>:
c000a84d:	e9 b4 d2 ff ff       	jmp    c0007b06 <rfree>

c000a852 <operator delete[](void*, unsigned long)>:
c000a852:	e9 af d2 ff ff       	jmp    c0007b06 <rfree>

c000a857 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000a857:	55                   	push   ebp
c000a858:	57                   	push   edi
c000a859:	56                   	push   esi
c000a85a:	be a3 0f 02 c0       	mov    esi,0xc0020fa3
c000a85f:	53                   	push   ebx
c000a860:	83 ec 20             	sub    esp,0x20
c000a863:	a0 a2 0f 02 c0       	mov    al,ds:0xc0020fa2
c000a868:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000a86c:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000a870:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a874:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000a878:	b8 10 00 00 00       	mov    eax,0x10
c000a87d:	f7 c7 02 00 00 00    	test   edi,0x2
c000a883:	75 60                	jne    c000a8e5 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x8e>
c000a885:	89 c1                	mov    ecx,eax
c000a887:	c1 e9 02             	shr    ecx,0x2
c000a88a:	fc                   	cld    
c000a88b:	31 d2                	xor    edx,edx
c000a88d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000a88f:	a8 02                	test   al,0x2
c000a891:	74 0b                	je     c000a89e <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x47>
c000a893:	66 8b 16             	mov    dx,WORD PTR [esi]
c000a896:	66 89 17             	mov    WORD PTR [edi],dx
c000a899:	ba 02 00 00 00       	mov    edx,0x2
c000a89e:	a8 01                	test   al,0x1
c000a8a0:	74 06                	je     c000a8a8 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x51>
c000a8a2:	8a 04 16             	mov    al,BYTE PTR [esi+edx*1]
c000a8a5:	88 04 17             	mov    BYTE PTR [edi+edx*1],al
c000a8a8:	89 ee                	mov    esi,ebp
c000a8aa:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000a8ae:	eb 02                	jmp    c000a8b2 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x5b>
c000a8b0:	89 c6                	mov    esi,eax
c000a8b2:	31 d2                	xor    edx,edx
c000a8b4:	83 c1 01             	add    ecx,0x1
c000a8b7:	89 f0                	mov    eax,esi
c000a8b9:	f7 f3                	div    ebx
c000a8bb:	39 de                	cmp    esi,ebx
c000a8bd:	73 f1                	jae    c000a8b0 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x59>
c000a8bf:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000a8c2:	eb 02                	jmp    c000a8c6 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x6f>
c000a8c4:	89 c5                	mov    ebp,eax
c000a8c6:	31 d2                	xor    edx,edx
c000a8c8:	83 e9 01             	sub    ecx,0x1
c000a8cb:	89 e8                	mov    eax,ebp
c000a8cd:	f7 f3                	div    ebx
c000a8cf:	39 dd                	cmp    ebp,ebx
c000a8d1:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000a8d5:	88 11                	mov    BYTE PTR [ecx],dl
c000a8d7:	73 eb                	jae    c000a8c4 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x6d>
c000a8d9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a8dd:	83 c4 20             	add    esp,0x20
c000a8e0:	5b                   	pop    ebx
c000a8e1:	5e                   	pop    esi
c000a8e2:	5f                   	pop    edi
c000a8e3:	5d                   	pop    ebp
c000a8e4:	c3                   	ret    
c000a8e5:	66 8b 16             	mov    dx,WORD PTR [esi]
c000a8e8:	83 c7 02             	add    edi,0x2
c000a8eb:	66 89 57 fe          	mov    WORD PTR [edi-0x2],dx
c000a8ef:	83 c6 02             	add    esi,0x2
c000a8f2:	83 e8 02             	sub    eax,0x2
c000a8f5:	eb 8e                	jmp    c000a885 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x2e>

c000a8f7 <Dbg::logc(char)>:
c000a8f7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a8fb:	f6 05 d0 6e 02 c0 10 	test   BYTE PTR ds:0xc0026ed0,0x10
c000a902:	75 12                	jne    c000a916 <Dbg::logc(char)+0x1f>
c000a904:	ba fd 03 00 00       	mov    edx,0x3fd
c000a909:	ec                   	in     al,dx
c000a90a:	a8 20                	test   al,0x20
c000a90c:	74 fb                	je     c000a909 <Dbg::logc(char)+0x12>
c000a90e:	ba f8 03 00 00       	mov    edx,0x3f8
c000a913:	88 c8                	mov    al,cl
c000a915:	ee                   	out    dx,al
c000a916:	c3                   	ret    

c000a917 <Dbg::logs(char*)>:
c000a917:	53                   	push   ebx
c000a918:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a91c:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a91f:	85 c0                	test   eax,eax
c000a921:	74 11                	je     c000a934 <Dbg::logs(char*)+0x1d>
c000a923:	83 c3 01             	add    ebx,0x1
c000a926:	50                   	push   eax
c000a927:	e8 cb ff ff ff       	call   c000a8f7 <Dbg::logc(char)>
c000a92c:	58                   	pop    eax
c000a92d:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a930:	85 c0                	test   eax,eax
c000a932:	75 ef                	jne    c000a923 <Dbg::logs(char*)+0xc>
c000a934:	5b                   	pop    ebx
c000a935:	c3                   	ret    

c000a936 <Dbg::logWriteInt(unsigned int)>:
c000a936:	83 ec 10             	sub    esp,0x10
c000a939:	6a 0a                	push   0xa
c000a93b:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a93f:	50                   	push   eax
c000a940:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a944:	50                   	push   eax
c000a945:	e8 0d ff ff ff       	call   c000a857 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a94a:	50                   	push   eax
c000a94b:	e8 c7 ff ff ff       	call   c000a917 <Dbg::logs(char*)>
c000a950:	83 c4 20             	add    esp,0x20
c000a953:	c3                   	ret    

c000a954 <Dbg::logWriteIntBase(unsigned int, int)>:
c000a954:	83 ec 10             	sub    esp,0x10
c000a957:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a95b:	50                   	push   eax
c000a95c:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a960:	50                   	push   eax
c000a961:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a965:	52                   	push   edx
c000a966:	e8 ec fe ff ff       	call   c000a857 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a96b:	50                   	push   eax
c000a96c:	e8 a6 ff ff ff       	call   c000a917 <Dbg::logs(char*)>
c000a971:	83 c4 20             	add    esp,0x20
c000a974:	c3                   	ret    

c000a975 <Dbg::kprintf(char const*, ...)>:
c000a975:	55                   	push   ebp
c000a976:	57                   	push   edi
c000a977:	56                   	push   esi
c000a978:	53                   	push   ebx
c000a979:	83 ec 0c             	sub    esp,0xc
c000a97c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000a980:	f6 05 d0 6e 02 c0 10 	test   BYTE PTR ds:0xc0026ed0,0x10
c000a987:	74 08                	je     c000a991 <Dbg::kprintf(char const*, ...)+0x1c>
c000a989:	83 c4 0c             	add    esp,0xc
c000a98c:	5b                   	pop    ebx
c000a98d:	5e                   	pop    esi
c000a98e:	5f                   	pop    edi
c000a98f:	5d                   	pop    ebp
c000a990:	c3                   	ret    
c000a991:	8d 44 24 24          	lea    eax,[esp+0x24]
c000a995:	31 ff                	xor    edi,edi
c000a997:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a99b:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a99e:	85 c0                	test   eax,eax
c000a9a0:	74 e7                	je     c000a989 <Dbg::kprintf(char const*, ...)+0x14>
c000a9a2:	8d 77 01             	lea    esi,[edi+0x1]
c000a9a5:	83 f8 25             	cmp    eax,0x25
c000a9a8:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a9ab:	75 47                	jne    c000a9f4 <Dbg::kprintf(char const*, ...)+0x7f>
c000a9ad:	83 c7 02             	add    edi,0x2
c000a9b0:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000a9b3:	8d 34 3b             	lea    esi,[ebx+edi*1]
c000a9b6:	83 e8 25             	sub    eax,0x25
c000a9b9:	0f b6 c0             	movzx  eax,al
c000a9bc:	83 f8 53             	cmp    eax,0x53
c000a9bf:	0f 87 ce 00 00 00    	ja     c000aa93 <Dbg::kprintf(char const*, ...)+0x11e>
c000a9c5:	ff 24 85 b0 14 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdeb50]
c000a9cc:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a9d0:	89 c8                	mov    eax,ecx
c000a9d2:	83 c1 04             	add    ecx,0x4
c000a9d5:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a9d9:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a9db:	55                   	push   ebp
c000a9dc:	e8 55 ff ff ff       	call   c000a936 <Dbg::logWriteInt(unsigned int)>
c000a9e1:	58                   	pop    eax
c000a9e2:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000a9e5:	85 c0                	test   eax,eax
c000a9e7:	74 a0                	je     c000a989 <Dbg::kprintf(char const*, ...)+0x14>
c000a9e9:	8d 77 01             	lea    esi,[edi+0x1]
c000a9ec:	83 f8 25             	cmp    eax,0x25
c000a9ef:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a9f2:	74 b9                	je     c000a9ad <Dbg::kprintf(char const*, ...)+0x38>
c000a9f4:	50                   	push   eax
c000a9f5:	89 f7                	mov    edi,esi
c000a9f7:	e8 fb fe ff ff       	call   c000a8f7 <Dbg::logc(char)>
c000a9fc:	89 ee                	mov    esi,ebp
c000a9fe:	58                   	pop    eax
c000a9ff:	eb e1                	jmp    c000a9e2 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa01:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000aa05:	89 c8                	mov    eax,ecx
c000aa07:	83 c1 04             	add    ecx,0x4
c000aa0a:	8b 00                	mov    eax,DWORD PTR [eax]
c000aa0c:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000aa10:	50                   	push   eax
c000aa11:	e8 01 ff ff ff       	call   c000a917 <Dbg::logs(char*)>
c000aa16:	58                   	pop    eax
c000aa17:	eb c9                	jmp    c000a9e2 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa19:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000aa1d:	89 d0                	mov    eax,edx
c000aa1f:	83 c2 04             	add    edx,0x4
c000aa22:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa26:	8b 00                	mov    eax,DWORD PTR [eax]
c000aa28:	50                   	push   eax
c000aa29:	e8 08 ff ff ff       	call   c000a936 <Dbg::logWriteInt(unsigned int)>
c000aa2e:	58                   	pop    eax
c000aa2f:	eb b1                	jmp    c000a9e2 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa31:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000aa35:	89 d0                	mov    eax,edx
c000aa37:	83 c2 04             	add    edx,0x4
c000aa3a:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000aa3d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa41:	50                   	push   eax
c000aa42:	e8 b0 fe ff ff       	call   c000a8f7 <Dbg::logc(char)>
c000aa47:	58                   	pop    eax
c000aa48:	eb 98                	jmp    c000a9e2 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa4a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000aa4e:	89 c8                	mov    eax,ecx
c000aa50:	83 c1 04             	add    ecx,0x4
c000aa53:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000aa57:	6a 10                	push   0x10
c000aa59:	8b 08                	mov    ecx,DWORD PTR [eax]
c000aa5b:	51                   	push   ecx
c000aa5c:	e8 f3 fe ff ff       	call   c000a954 <Dbg::logWriteIntBase(unsigned int, int)>
c000aa61:	5d                   	pop    ebp
c000aa62:	58                   	pop    eax
c000aa63:	e9 7a ff ff ff       	jmp    c000a9e2 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa68:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000aa6c:	89 d0                	mov    eax,edx
c000aa6e:	83 c2 08             	add    edx,0x8
c000aa71:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa75:	6a 10                	push   0x10
c000aa77:	8b 00                	mov    eax,DWORD PTR [eax]
c000aa79:	50                   	push   eax
c000aa7a:	e8 d5 fe ff ff       	call   c000a954 <Dbg::logWriteIntBase(unsigned int, int)>
c000aa7f:	58                   	pop    eax
c000aa80:	5a                   	pop    edx
c000aa81:	e9 5c ff ff ff       	jmp    c000a9e2 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa86:	6a 25                	push   0x25
c000aa88:	e8 6a fe ff ff       	call   c000a8f7 <Dbg::logc(char)>
c000aa8d:	5a                   	pop    edx
c000aa8e:	e9 4f ff ff ff       	jmp    c000a9e2 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa93:	6a 25                	push   0x25
c000aa95:	e8 5d fe ff ff       	call   c000a8f7 <Dbg::logc(char)>
c000aa9a:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000aa9e:	50                   	push   eax
c000aa9f:	e8 53 fe ff ff       	call   c000a8f7 <Dbg::logc(char)>
c000aaa4:	5a                   	pop    edx
c000aaa5:	59                   	pop    ecx
c000aaa6:	e9 37 ff ff ff       	jmp    c000a9e2 <Dbg::kprintf(char const*, ...)+0x6d>
c000aaab:	90                   	nop

c000aaac <KiUbsanPrintDetails(char const*, void*)>:
c000aaac:	83 ec 1c             	sub    esp,0x1c
c000aaaf:	83 ec 08             	sub    esp,0x8
c000aab2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000aab6:	68 00 16 02 c0       	push   0xc0021600
c000aabb:	e8 b5 fe ff ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c000aac0:	83 c4 10             	add    esp,0x10
c000aac3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000aac7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000aacb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aacf:	8b 00                	mov    eax,DWORD PTR [eax]
c000aad1:	83 ec 08             	sub    esp,0x8
c000aad4:	50                   	push   eax
c000aad5:	68 14 16 02 c0       	push   0xc0021614
c000aada:	e8 96 fe ff ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c000aadf:	83 c4 10             	add    esp,0x10
c000aae2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aae6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000aae9:	83 ec 08             	sub    esp,0x8
c000aaec:	50                   	push   eax
c000aaed:	68 1e 16 02 c0       	push   0xc002161e
c000aaf2:	e8 7e fe ff ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c000aaf7:	83 c4 10             	add    esp,0x10
c000aafa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aafe:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ab01:	83 ec 08             	sub    esp,0x8
c000ab04:	50                   	push   eax
c000ab05:	68 28 16 02 c0       	push   0xc0021628
c000ab0a:	e8 66 fe ff ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c000ab0f:	83 c4 10             	add    esp,0x10
c000ab12:	90                   	nop
c000ab13:	83 c4 1c             	add    esp,0x1c
c000ab16:	c3                   	ret    
c000ab17:	90                   	nop

c000ab18 <__ubsan_handle_type_mismatch_v1>:
c000ab18:	83 ec 0c             	sub    esp,0xc
c000ab1b:	83 ec 08             	sub    esp,0x8
c000ab1e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ab22:	68 6c 17 02 c0       	push   0xc002176c
c000ab27:	e8 80 ff ff ff       	call   c000aaac <KiUbsanPrintDetails(char const*, void*)>
c000ab2c:	83 c4 10             	add    esp,0x10
c000ab2f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000ab34:	75 16                	jne    c000ab4c <__ubsan_handle_type_mismatch_v1+0x34>
c000ab36:	83 ec 0c             	sub    esp,0xc
c000ab39:	68 32 16 02 c0       	push   0xc0021632
c000ab3e:	e8 32 fe ff ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c000ab43:	83 c4 10             	add    esp,0x10
c000ab46:	e9 91 00 00 00       	jmp    c000abdc <__ubsan_handle_type_mismatch_v1+0xc4>
c000ab4b:	90                   	nop
c000ab4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab50:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000ab53:	85 c0                	test   eax,eax
c000ab55:	74 29                	je     c000ab80 <__ubsan_handle_type_mismatch_v1+0x68>
c000ab57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab5b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000ab5e:	83 e8 01             	sub    eax,0x1
c000ab61:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c000ab65:	75 19                	jne    c000ab80 <__ubsan_handle_type_mismatch_v1+0x68>
c000ab67:	83 ec 08             	sub    esp,0x8
c000ab6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab6e:	68 8c 17 02 c0       	push   0xc002178c
c000ab73:	e8 fd fd ff ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c000ab78:	83 c4 10             	add    esp,0x10
c000ab7b:	eb 5f                	jmp    c000abdc <__ubsan_handle_type_mismatch_v1+0xc4>
c000ab7d:	8d 76 00             	lea    esi,[esi+0x0]
c000ab80:	83 ec 0c             	sub    esp,0xc
c000ab83:	68 47 16 02 c0       	push   0xc0021647
c000ab88:	e8 e8 fd ff ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c000ab8d:	83 c4 10             	add    esp,0x10
c000ab90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab94:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000ab97:	0f b6 c0             	movzx  eax,al
c000ab9a:	83 ec 08             	sub    esp,0x8
c000ab9d:	50                   	push   eax
c000ab9e:	68 61 16 02 c0       	push   0xc0021661
c000aba3:	e8 cd fd ff ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c000aba8:	83 c4 10             	add    esp,0x10
c000abab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000abaf:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000abb2:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c000abb5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000abb9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000abbd:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000abc0:	0f b6 c0             	movzx  eax,al
c000abc3:	8b 04 85 80 38 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc780]
c000abca:	51                   	push   ecx
c000abcb:	52                   	push   edx
c000abcc:	50                   	push   eax
c000abcd:	68 b4 17 02 c0       	push   0xc00217b4
c000abd2:	e8 9e fd ff ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c000abd7:	83 c4 10             	add    esp,0x10
c000abda:	66 90                	xchg   ax,ax
c000abdc:	83 ec 0c             	sub    esp,0xc
c000abdf:	68 6c 17 02 c0       	push   0xc002176c
c000abe4:	e8 de 6a 00 00       	call   c00116c7 <KePanic(char const*)>
c000abe9:	83 c4 10             	add    esp,0x10
c000abec:	90                   	nop
c000abed:	83 c4 0c             	add    esp,0xc
c000abf0:	c3                   	ret    
c000abf1:	8d 76 00             	lea    esi,[esi+0x0]

c000abf4 <__ubsan_handle_pointer_overflow>:
c000abf4:	83 ec 0c             	sub    esp,0xc
c000abf7:	83 ec 08             	sub    esp,0x8
c000abfa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000abfe:	68 fc 17 02 c0       	push   0xc00217fc
c000ac03:	e8 a4 fe ff ff       	call   c000aaac <KiUbsanPrintDetails(char const*, void*)>
c000ac08:	83 c4 10             	add    esp,0x10
c000ac0b:	83 ec 0c             	sub    esp,0xc
c000ac0e:	68 fc 17 02 c0       	push   0xc00217fc
c000ac13:	e8 af 6a 00 00       	call   c00116c7 <KePanic(char const*)>
c000ac18:	83 c4 10             	add    esp,0x10
c000ac1b:	90                   	nop
c000ac1c:	83 c4 0c             	add    esp,0xc
c000ac1f:	c3                   	ret    

c000ac20 <__ubsan_handle_out_of_bounds>:
c000ac20:	83 ec 0c             	sub    esp,0xc
c000ac23:	83 ec 08             	sub    esp,0x8
c000ac26:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac2a:	68 6c 16 02 c0       	push   0xc002166c
c000ac2f:	e8 78 fe ff ff       	call   c000aaac <KiUbsanPrintDetails(char const*, void*)>
c000ac34:	83 c4 10             	add    esp,0x10
c000ac37:	83 ec 0c             	sub    esp,0xc
c000ac3a:	68 6c 16 02 c0       	push   0xc002166c
c000ac3f:	e8 83 6a 00 00       	call   c00116c7 <KePanic(char const*)>
c000ac44:	83 c4 10             	add    esp,0x10
c000ac47:	90                   	nop
c000ac48:	83 c4 0c             	add    esp,0xc
c000ac4b:	c3                   	ret    

c000ac4c <__ubsan_handle_add_overflow>:
c000ac4c:	83 ec 0c             	sub    esp,0xc
c000ac4f:	83 ec 08             	sub    esp,0x8
c000ac52:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac56:	68 89 16 02 c0       	push   0xc0021689
c000ac5b:	e8 4c fe ff ff       	call   c000aaac <KiUbsanPrintDetails(char const*, void*)>
c000ac60:	83 c4 10             	add    esp,0x10
c000ac63:	83 ec 0c             	sub    esp,0xc
c000ac66:	68 89 16 02 c0       	push   0xc0021689
c000ac6b:	e8 57 6a 00 00       	call   c00116c7 <KePanic(char const*)>
c000ac70:	83 c4 10             	add    esp,0x10
c000ac73:	90                   	nop
c000ac74:	83 c4 0c             	add    esp,0xc
c000ac77:	c3                   	ret    

c000ac78 <__ubsan_handle_load_invalid_value>:
c000ac78:	83 ec 0c             	sub    esp,0xc
c000ac7b:	83 ec 08             	sub    esp,0x8
c000ac7e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac82:	68 1c 18 02 c0       	push   0xc002181c
c000ac87:	e8 20 fe ff ff       	call   c000aaac <KiUbsanPrintDetails(char const*, void*)>
c000ac8c:	83 c4 10             	add    esp,0x10
c000ac8f:	83 ec 0c             	sub    esp,0xc
c000ac92:	68 1c 18 02 c0       	push   0xc002181c
c000ac97:	e8 2b 6a 00 00       	call   c00116c7 <KePanic(char const*)>
c000ac9c:	83 c4 10             	add    esp,0x10
c000ac9f:	90                   	nop
c000aca0:	83 c4 0c             	add    esp,0xc
c000aca3:	c3                   	ret    

c000aca4 <__ubsan_handle_divrem_overflow>:
c000aca4:	83 ec 0c             	sub    esp,0xc
c000aca7:	83 ec 08             	sub    esp,0x8
c000acaa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000acae:	68 40 18 02 c0       	push   0xc0021840
c000acb3:	e8 f4 fd ff ff       	call   c000aaac <KiUbsanPrintDetails(char const*, void*)>
c000acb8:	83 c4 10             	add    esp,0x10
c000acbb:	83 ec 0c             	sub    esp,0xc
c000acbe:	68 40 18 02 c0       	push   0xc0021840
c000acc3:	e8 ff 69 00 00       	call   c00116c7 <KePanic(char const*)>
c000acc8:	83 c4 10             	add    esp,0x10
c000accb:	90                   	nop
c000accc:	83 c4 0c             	add    esp,0xc
c000accf:	c3                   	ret    

c000acd0 <__ubsan_handle_mul_overflow>:
c000acd0:	83 ec 0c             	sub    esp,0xc
c000acd3:	83 ec 08             	sub    esp,0x8
c000acd6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000acda:	68 a5 16 02 c0       	push   0xc00216a5
c000acdf:	e8 c8 fd ff ff       	call   c000aaac <KiUbsanPrintDetails(char const*, void*)>
c000ace4:	83 c4 10             	add    esp,0x10
c000ace7:	83 ec 0c             	sub    esp,0xc
c000acea:	68 a5 16 02 c0       	push   0xc00216a5
c000acef:	e8 d3 69 00 00       	call   c00116c7 <KePanic(char const*)>
c000acf4:	83 c4 10             	add    esp,0x10
c000acf7:	90                   	nop
c000acf8:	83 c4 0c             	add    esp,0xc
c000acfb:	c3                   	ret    

c000acfc <__ubsan_handle_sub_overflow>:
c000acfc:	83 ec 0c             	sub    esp,0xc
c000acff:	83 ec 08             	sub    esp,0x8
c000ad02:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ad06:	68 c1 16 02 c0       	push   0xc00216c1
c000ad0b:	e8 9c fd ff ff       	call   c000aaac <KiUbsanPrintDetails(char const*, void*)>
c000ad10:	83 c4 10             	add    esp,0x10
c000ad13:	83 ec 0c             	sub    esp,0xc
c000ad16:	68 c1 16 02 c0       	push   0xc00216c1
c000ad1b:	e8 a7 69 00 00       	call   c00116c7 <KePanic(char const*)>
c000ad20:	83 c4 10             	add    esp,0x10
c000ad23:	90                   	nop
c000ad24:	83 c4 0c             	add    esp,0xc
c000ad27:	c3                   	ret    

c000ad28 <__ubsan_handle_shift_out_of_bounds>:
c000ad28:	83 ec 0c             	sub    esp,0xc
c000ad2b:	83 ec 08             	sub    esp,0x8
c000ad2e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ad32:	68 60 18 02 c0       	push   0xc0021860
c000ad37:	e8 70 fd ff ff       	call   c000aaac <KiUbsanPrintDetails(char const*, void*)>
c000ad3c:	83 c4 10             	add    esp,0x10
c000ad3f:	83 ec 0c             	sub    esp,0xc
c000ad42:	68 60 18 02 c0       	push   0xc0021860
c000ad47:	e8 7b 69 00 00       	call   c00116c7 <KePanic(char const*)>
c000ad4c:	83 c4 10             	add    esp,0x10
c000ad4f:	90                   	nop
c000ad50:	83 c4 0c             	add    esp,0xc
c000ad53:	c3                   	ret    

c000ad54 <__ubsan_handle_negate_overflow>:
c000ad54:	83 ec 0c             	sub    esp,0xc
c000ad57:	83 ec 08             	sub    esp,0x8
c000ad5a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ad5e:	68 84 18 02 c0       	push   0xc0021884
c000ad63:	e8 44 fd ff ff       	call   c000aaac <KiUbsanPrintDetails(char const*, void*)>
c000ad68:	83 c4 10             	add    esp,0x10
c000ad6b:	83 ec 0c             	sub    esp,0xc
c000ad6e:	68 84 18 02 c0       	push   0xc0021884
c000ad73:	e8 4f 69 00 00       	call   c00116c7 <KePanic(char const*)>
c000ad78:	83 c4 10             	add    esp,0x10
c000ad7b:	90                   	nop
c000ad7c:	83 c4 0c             	add    esp,0xc
c000ad7f:	c3                   	ret    

c000ad80 <KiIsHashInTable(unsigned short)>:
c000ad80:	0f b7 d0             	movzx  edx,ax
c000ad83:	83 e0 07             	and    eax,0x7
c000ad86:	c1 fa 03             	sar    edx,0x3
c000ad89:	88 c1                	mov    cl,al
c000ad8b:	0f b6 92 00 74 02 c0 	movzx  edx,BYTE PTR [edx-0x3ffd8c00]
c000ad92:	d3 fa                	sar    edx,cl
c000ad94:	89 d0                	mov    eax,edx
c000ad96:	83 e0 01             	and    eax,0x1
c000ad99:	c3                   	ret    

c000ad9a <KiSetHashInTable(unsigned short, bool)>:
c000ad9a:	56                   	push   esi
c000ad9b:	53                   	push   ebx
c000ad9c:	0f b7 d8             	movzx  ebx,ax
c000ad9f:	83 e0 07             	and    eax,0x7
c000ada2:	c1 fb 03             	sar    ebx,0x3
c000ada5:	89 c1                	mov    ecx,eax
c000ada7:	0f b6 b3 00 74 02 c0 	movzx  esi,BYTE PTR [ebx-0x3ffd8c00]
c000adae:	b8 01 00 00 00       	mov    eax,0x1
c000adb3:	d3 e0                	shl    eax,cl
c000adb5:	84 d2                	test   dl,dl
c000adb7:	74 04                	je     c000adbd <KiSetHashInTable(unsigned short, bool)+0x23>
c000adb9:	09 f0                	or     eax,esi
c000adbb:	eb 04                	jmp    c000adc1 <KiSetHashInTable(unsigned short, bool)+0x27>
c000adbd:	f7 d0                	not    eax
c000adbf:	21 f0                	and    eax,esi
c000adc1:	88 83 00 74 02 c0    	mov    BYTE PTR [ebx-0x3ffd8c00],al
c000adc7:	5b                   	pop    ebx
c000adc8:	5e                   	pop    esi
c000adc9:	c3                   	ret    

c000adca <KiFlushSymlinkChanges()>:
c000adca:	57                   	push   edi
c000adcb:	56                   	push   esi
c000adcc:	53                   	push   ebx
c000adcd:	83 ec 1c             	sub    esp,0x1c
c000add0:	68 14 01 00 00       	push   0x114
c000add5:	e8 0c cd ff ff       	call   c0007ae6 <malloc>
c000adda:	83 c4 0c             	add    esp,0xc
c000addd:	89 c3                	mov    ebx,eax
c000addf:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000ade5:	68 a3 18 02 c0       	push   0xc00218a3
c000adea:	50                   	push   eax
c000adeb:	e8 8c 0d 00 00       	call   c000bb7c <File::File(char const*, Process*)>
c000adf0:	83 c4 10             	add    esp,0x10
c000adf3:	85 db                	test   ebx,ebx
c000adf5:	75 10                	jne    c000ae07 <KiFlushSymlinkChanges()+0x3d>
c000adf7:	83 ec 0c             	sub    esp,0xc
c000adfa:	68 c1 18 02 c0       	push   0xc00218c1
c000adff:	e8 c3 68 00 00       	call   c00116c7 <KePanic(char const*)>
c000ae04:	83 c4 10             	add    esp,0x10
c000ae07:	50                   	push   eax
c000ae08:	50                   	push   eax
c000ae09:	6a 06                	push   0x6
c000ae0b:	53                   	push   ebx
c000ae0c:	e8 89 0d 00 00       	call   c000bb9a <File::open(FileOpenMode)>
c000ae11:	83 c4 10             	add    esp,0x10
c000ae14:	85 c0                	test   eax,eax
c000ae16:	74 10                	je     c000ae28 <KiFlushSymlinkChanges()+0x5e>
c000ae18:	83 ec 0c             	sub    esp,0xc
c000ae1b:	68 db 18 02 c0       	push   0xc00218db
c000ae20:	e8 a2 68 00 00       	call   c00116c7 <KePanic(char const*)>
c000ae25:	83 c4 10             	add    esp,0x10
c000ae28:	31 f6                	xor    esi,esi
c000ae2a:	39 35 c0 6f 02 c0    	cmp    DWORD PTR ds:0xc0026fc0,esi
c000ae30:	7e 70                	jle    c000aea2 <KiFlushSymlinkChanges()+0xd8>
c000ae32:	83 ec 0c             	sub    esp,0xc
c000ae35:	8b 13                	mov    edx,DWORD PTR [ebx]
c000ae37:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000ae3b:	89 f0                	mov    eax,esi
c000ae3d:	57                   	push   edi
c000ae3e:	c1 e0 08             	shl    eax,0x8
c000ae41:	05 00 70 02 c0       	add    eax,0xc0027000
c000ae46:	50                   	push   eax
c000ae47:	6a 00                	push   0x0
c000ae49:	68 00 01 00 00       	push   0x100
c000ae4e:	53                   	push   ebx
c000ae4f:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000ae52:	83 c4 20             	add    esp,0x20
c000ae55:	81 7c 24 0c 00 01 00 00 	cmp    DWORD PTR [esp+0xc],0x100
c000ae5d:	74 10                	je     c000ae6f <KiFlushSymlinkChanges()+0xa5>
c000ae5f:	83 ec 0c             	sub    esp,0xc
c000ae62:	68 f5 18 02 c0       	push   0xc00218f5
c000ae67:	e8 5b 68 00 00       	call   c00116c7 <KePanic(char const*)>
c000ae6c:	83 c4 10             	add    esp,0x10
c000ae6f:	83 ec 0c             	sub    esp,0xc
c000ae72:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ae74:	8d 14 f5 e0 6f 02 c0 	lea    edx,[esi*8-0x3ffd9020]
c000ae7b:	57                   	push   edi
c000ae7c:	52                   	push   edx
c000ae7d:	6a 00                	push   0x0
c000ae7f:	6a 08                	push   0x8
c000ae81:	53                   	push   ebx
c000ae82:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000ae85:	83 c4 20             	add    esp,0x20
c000ae88:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000ae8d:	74 10                	je     c000ae9f <KiFlushSymlinkChanges()+0xd5>
c000ae8f:	83 ec 0c             	sub    esp,0xc
c000ae92:	68 0f 19 02 c0       	push   0xc002190f
c000ae97:	e8 2b 68 00 00       	call   c00116c7 <KePanic(char const*)>
c000ae9c:	83 c4 10             	add    esp,0x10
c000ae9f:	46                   	inc    esi
c000aea0:	eb 88                	jmp    c000ae2a <KiFlushSymlinkChanges()+0x60>
c000aea2:	83 ec 0c             	sub    esp,0xc
c000aea5:	53                   	push   ebx
c000aea6:	e8 4d 0d 00 00       	call   c000bbf8 <File::close()>
c000aeab:	83 c4 10             	add    esp,0x10
c000aeae:	85 db                	test   ebx,ebx
c000aeb0:	74 0c                	je     c000aebe <KiFlushSymlinkChanges()+0xf4>
c000aeb2:	83 ec 0c             	sub    esp,0xc
c000aeb5:	8b 03                	mov    eax,DWORD PTR [ebx]
c000aeb7:	53                   	push   ebx
c000aeb8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000aebb:	83 c4 10             	add    esp,0x10
c000aebe:	c7 05 c0 6f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026fc0,0x0
c000aec8:	83 c4 10             	add    esp,0x10
c000aecb:	5b                   	pop    ebx
c000aecc:	5e                   	pop    esi
c000aecd:	5f                   	pop    edi
c000aece:	c3                   	ret    

c000aecf <KiDeinitialiseSymlinks(void*)>:
c000aecf:	e9 f6 fe ff ff       	jmp    c000adca <KiFlushSymlinkChanges()>

c000aed4 <KiGetSymlinkHash(char const*)>:
c000aed4:	53                   	push   ebx
c000aed5:	89 c3                	mov    ebx,eax
c000aed7:	83 ec 14             	sub    esp,0x14
c000aeda:	50                   	push   eax
c000aedb:	e8 90 56 ff ff       	call   c0000570 <strlen>
c000aee0:	5a                   	pop    edx
c000aee1:	59                   	pop    ecx
c000aee2:	50                   	push   eax
c000aee3:	53                   	push   ebx
c000aee4:	e8 60 61 00 00       	call   c0011049 <KeCalculateCRC32(unsigned char*, int)>
c000aee9:	83 c4 18             	add    esp,0x18
c000aeec:	89 c2                	mov    edx,eax
c000aeee:	5b                   	pop    ebx
c000aeef:	c1 ea 10             	shr    edx,0x10
c000aef2:	31 d0                	xor    eax,edx
c000aef4:	c3                   	ret    

c000aef5 <KiCreateSymlinkID()>:
c000aef5:	55                   	push   ebp
c000aef6:	57                   	push   edi
c000aef7:	56                   	push   esi
c000aef8:	53                   	push   ebx
c000aef9:	31 db                	xor    ebx,ebx
c000aefb:	83 ec 1c             	sub    esp,0x1c
c000aefe:	e8 12 69 00 00       	call   c0011815 <KeRand()>
c000af03:	43                   	inc    ebx
c000af04:	8b 2d 00 94 02 c0    	mov    ebp,DWORD PTR ds:0xc0029400
c000af0a:	31 d2                	xor    edx,edx
c000af0c:	8d 4d 01             	lea    ecx,[ebp+0x1]
c000af0f:	0f a4 c2 1f          	shld   edx,eax,0x1f
c000af13:	89 0d 00 94 02 c0    	mov    DWORD PTR ds:0xc0029400,ecx
c000af19:	c1 e0 1f             	shl    eax,0x1f
c000af1c:	89 d7                	mov    edi,edx
c000af1e:	89 c6                	mov    esi,eax
c000af20:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c000af24:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000af2c:	81 fb 9a 02 00 00    	cmp    ebx,0x29a
c000af32:	75 10                	jne    c000af44 <KiCreateSymlinkID()+0x4f>
c000af34:	83 ec 0c             	sub    esp,0xc
c000af37:	68 29 19 02 c0       	push   0xc0021929
c000af3c:	e8 86 67 00 00       	call   c00116c7 <KePanic(char const*)>
c000af41:	83 c4 10             	add    esp,0x10
c000af44:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000af48:	75 04                	jne    c000af4e <KiCreateSymlinkID()+0x59>
c000af4a:	39 f5                	cmp    ebp,esi
c000af4c:	74 b0                	je     c000aefe <KiCreateSymlinkID()+0x9>
c000af4e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000af52:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000af56:	31 f0                	xor    eax,esi
c000af58:	83 c4 1c             	add    esp,0x1c
c000af5b:	31 fa                	xor    edx,edi
c000af5d:	5b                   	pop    ebx
c000af5e:	5e                   	pop    esi
c000af5f:	5f                   	pop    edi
c000af60:	5d                   	pop    ebp
c000af61:	c3                   	ret    

c000af62 <KeRegisterSymlink(char const*, unsigned long long)>:
c000af62:	53                   	push   ebx
c000af63:	83 ec 0c             	sub    esp,0xc
c000af66:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000af6a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000af6e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000af72:	a1 c0 6f 02 c0       	mov    eax,ds:0xc0026fc0
c000af77:	68 00 01 00 00       	push   0x100
c000af7c:	89 0c c5 e4 6f 02 c0 	mov    DWORD PTR [eax*8-0x3ffd901c],ecx
c000af83:	6a 00                	push   0x0
c000af85:	89 14 c5 e0 6f 02 c0 	mov    DWORD PTR [eax*8-0x3ffd9020],edx
c000af8c:	c1 e0 08             	shl    eax,0x8
c000af8f:	05 00 70 02 c0       	add    eax,0xc0027000
c000af94:	50                   	push   eax
c000af95:	e8 56 55 ff ff       	call   c00004f0 <memset>
c000af9a:	58                   	pop    eax
c000af9b:	a1 c0 6f 02 c0       	mov    eax,ds:0xc0026fc0
c000afa0:	5a                   	pop    edx
c000afa1:	c1 e0 08             	shl    eax,0x8
c000afa4:	53                   	push   ebx
c000afa5:	05 00 70 02 c0       	add    eax,0xc0027000
c000afaa:	50                   	push   eax
c000afab:	e8 90 56 ff ff       	call   c0000640 <strcpy>
c000afb0:	89 d8                	mov    eax,ebx
c000afb2:	e8 1d ff ff ff       	call   c000aed4 <KiGetSymlinkHash(char const*)>
c000afb7:	59                   	pop    ecx
c000afb8:	0f b7 d8             	movzx  ebx,ax
c000afbb:	58                   	pop    eax
c000afbc:	53                   	push   ebx
c000afbd:	68 32 19 02 c0       	push   0xc0021932
c000afc2:	e8 ae f9 ff ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c000afc7:	89 d8                	mov    eax,ebx
c000afc9:	ba 01 00 00 00       	mov    edx,0x1
c000afce:	e8 c7 fd ff ff       	call   c000ad9a <KiSetHashInTable(unsigned short, bool)>
c000afd3:	a1 c0 6f 02 c0       	mov    eax,ds:0xc0026fc0
c000afd8:	83 c4 10             	add    esp,0x10
c000afdb:	40                   	inc    eax
c000afdc:	a3 c0 6f 02 c0       	mov    ds:0xc0026fc0,eax
c000afe1:	83 f8 03             	cmp    eax,0x3
c000afe4:	7e 09                	jle    c000afef <KeRegisterSymlink(char const*, unsigned long long)+0x8d>
c000afe6:	83 c4 08             	add    esp,0x8
c000afe9:	5b                   	pop    ebx
c000afea:	e9 db fd ff ff       	jmp    c000adca <KiFlushSymlinkChanges()>
c000afef:	83 c4 08             	add    esp,0x8
c000aff2:	5b                   	pop    ebx
c000aff3:	c3                   	ret    

c000aff4 <KeInitialiseSymlinks()>:
c000aff4:	57                   	push   edi
c000aff5:	56                   	push   esi
c000aff6:	53                   	push   ebx
c000aff7:	81 ec 14 01 00 00    	sub    esp,0x114
c000affd:	c7 05 00 94 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029400,0x0
c000b007:	68 00 20 00 00       	push   0x2000
c000b00c:	c7 05 c0 6f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026fc0,0x0
c000b016:	6a 00                	push   0x0
c000b018:	68 00 74 02 c0       	push   0xc0027400
c000b01d:	e8 ce 54 ff ff       	call   c00004f0 <memset>
c000b022:	59                   	pop    ecx
c000b023:	5b                   	pop    ebx
c000b024:	ff 35 00 94 02 c0    	push   DWORD PTR ds:0xc0029400
c000b02a:	68 46 19 02 c0       	push   0xc0021946
c000b02f:	e8 41 f9 ff ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c000b034:	5e                   	pop    esi
c000b035:	5f                   	pop    edi
c000b036:	6a 00                	push   0x0
c000b038:	68 cf ae 00 c0       	push   0xc000aecf
c000b03d:	e8 72 5e 00 00       	call   c0010eb4 <KeRegisterAtexit(void (*)(void*), void*)>
c000b042:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c000b049:	e8 98 ca ff ff       	call   c0007ae6 <malloc>
c000b04e:	83 c4 0c             	add    esp,0xc
c000b051:	89 c3                	mov    ebx,eax
c000b053:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000b059:	68 a3 18 02 c0       	push   0xc00218a3
c000b05e:	50                   	push   eax
c000b05f:	e8 18 0b 00 00       	call   c000bb7c <File::File(char const*, Process*)>
c000b064:	83 c4 10             	add    esp,0x10
c000b067:	85 db                	test   ebx,ebx
c000b069:	75 10                	jne    c000b07b <KeInitialiseSymlinks()+0x87>
c000b06b:	83 ec 0c             	sub    esp,0xc
c000b06e:	68 63 19 02 c0       	push   0xc0021963
c000b073:	e8 4f 66 00 00       	call   c00116c7 <KePanic(char const*)>
c000b078:	83 c4 10             	add    esp,0x10
c000b07b:	83 ec 0c             	sub    esp,0xc
c000b07e:	53                   	push   ebx
c000b07f:	e8 da 0d 00 00       	call   c000be5e <File::exists()>
c000b084:	83 c4 10             	add    esp,0x10
c000b087:	84 c0                	test   al,al
c000b089:	75 3a                	jne    c000b0c5 <KeInitialiseSymlinks()+0xd1>
c000b08b:	52                   	push   edx
c000b08c:	52                   	push   edx
c000b08d:	6a 12                	push   0x12
c000b08f:	53                   	push   ebx
c000b090:	e8 05 0b 00 00       	call   c000bb9a <File::open(FileOpenMode)>
c000b095:	83 c4 10             	add    esp,0x10
c000b098:	85 c0                	test   eax,eax
c000b09a:	74 10                	je     c000b0ac <KeInitialiseSymlinks()+0xb8>
c000b09c:	83 ec 0c             	sub    esp,0xc
c000b09f:	68 80 19 02 c0       	push   0xc0021980
c000b0a4:	e8 1e 66 00 00       	call   c00116c7 <KePanic(char const*)>
c000b0a9:	83 c4 10             	add    esp,0x10
c000b0ac:	83 ec 0c             	sub    esp,0xc
c000b0af:	53                   	push   ebx
c000b0b0:	e8 43 0b 00 00       	call   c000bbf8 <File::close()>
c000b0b5:	83 c4 10             	add    esp,0x10
c000b0b8:	85 db                	test   ebx,ebx
c000b0ba:	0f 84 9e 00 00 00    	je     c000b15e <KeInitialiseSymlinks()+0x16a>
c000b0c0:	e9 8d 00 00 00       	jmp    c000b152 <KeInitialiseSymlinks()+0x15e>
c000b0c5:	50                   	push   eax
c000b0c6:	50                   	push   eax
c000b0c7:	6a 01                	push   0x1
c000b0c9:	53                   	push   ebx
c000b0ca:	e8 cb 0a 00 00       	call   c000bb9a <File::open(FileOpenMode)>
c000b0cf:	83 c4 10             	add    esp,0x10
c000b0d2:	85 c0                	test   eax,eax
c000b0d4:	74 10                	je     c000b0e6 <KeInitialiseSymlinks()+0xf2>
c000b0d6:	83 ec 0c             	sub    esp,0xc
c000b0d9:	68 9d 19 02 c0       	push   0xc002199d
c000b0de:	e8 e4 65 00 00       	call   c00116c7 <KePanic(char const*)>
c000b0e3:	83 c4 10             	add    esp,0x10
c000b0e6:	83 ec 0c             	sub    esp,0xc
c000b0e9:	ff 05 00 94 02 c0    	inc    DWORD PTR ds:0xc0029400
c000b0ef:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000b0f3:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b0f5:	57                   	push   edi
c000b0f6:	8d 74 24 20          	lea    esi,[esp+0x20]
c000b0fa:	56                   	push   esi
c000b0fb:	6a 00                	push   0x0
c000b0fd:	68 00 01 00 00       	push   0x100
c000b102:	53                   	push   ebx
c000b103:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b106:	83 c4 20             	add    esp,0x20
c000b109:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c000b111:	75 33                	jne    c000b146 <KeInitialiseSymlinks()+0x152>
c000b113:	83 ec 0c             	sub    esp,0xc
c000b116:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b118:	57                   	push   edi
c000b119:	8d 54 24 18          	lea    edx,[esp+0x18]
c000b11d:	52                   	push   edx
c000b11e:	6a 00                	push   0x0
c000b120:	6a 08                	push   0x8
c000b122:	53                   	push   ebx
c000b123:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b126:	83 c4 20             	add    esp,0x20
c000b129:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000b12e:	75 16                	jne    c000b146 <KeInitialiseSymlinks()+0x152>
c000b130:	89 f0                	mov    eax,esi
c000b132:	e8 9d fd ff ff       	call   c000aed4 <KiGetSymlinkHash(char const*)>
c000b137:	ba 01 00 00 00       	mov    edx,0x1
c000b13c:	0f b7 c0             	movzx  eax,ax
c000b13f:	e8 56 fc ff ff       	call   c000ad9a <KiSetHashInTable(unsigned short, bool)>
c000b144:	eb a0                	jmp    c000b0e6 <KeInitialiseSymlinks()+0xf2>
c000b146:	83 ec 0c             	sub    esp,0xc
c000b149:	53                   	push   ebx
c000b14a:	e8 a9 0a 00 00       	call   c000bbf8 <File::close()>
c000b14f:	83 c4 10             	add    esp,0x10
c000b152:	83 ec 0c             	sub    esp,0xc
c000b155:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b157:	53                   	push   ebx
c000b158:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b15b:	83 c4 10             	add    esp,0x10
c000b15e:	81 c4 10 01 00 00    	add    esp,0x110
c000b164:	5b                   	pop    ebx
c000b165:	5e                   	pop    esi
c000b166:	5f                   	pop    edi
c000b167:	c3                   	ret    

c000b168 <KiIsSymlinkRegistered(char const*)>:
c000b168:	55                   	push   ebp
c000b169:	57                   	push   edi
c000b16a:	56                   	push   esi
c000b16b:	53                   	push   ebx
c000b16c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c000b172:	8b b4 24 30 01 00 00 	mov    esi,DWORD PTR [esp+0x130]
c000b179:	89 f0                	mov    eax,esi
c000b17b:	e8 54 fd ff ff       	call   c000aed4 <KiGetSymlinkHash(char const*)>
c000b180:	0f b7 c0             	movzx  eax,ax
c000b183:	53                   	push   ebx
c000b184:	56                   	push   esi
c000b185:	50                   	push   eax
c000b186:	68 b8 19 02 c0       	push   0xc00219b8
c000b18b:	e8 e5 f7 ff ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c000b190:	89 f0                	mov    eax,esi
c000b192:	e8 3d fd ff ff       	call   c000aed4 <KiGetSymlinkHash(char const*)>
c000b197:	0f b7 c0             	movzx  eax,ax
c000b19a:	e8 e1 fb ff ff       	call   c000ad80 <KiIsHashInTable(unsigned short)>
c000b19f:	83 c4 10             	add    esp,0x10
c000b1a2:	88 c1                	mov    cl,al
c000b1a4:	31 d2                	xor    edx,edx
c000b1a6:	31 c0                	xor    eax,eax
c000b1a8:	84 c9                	test   cl,cl
c000b1aa:	0f 84 31 01 00 00    	je     c000b2e1 <KiIsSymlinkRegistered(char const*)+0x179>
c000b1b0:	31 db                	xor    ebx,ebx
c000b1b2:	39 1d c0 6f 02 c0    	cmp    DWORD PTR ds:0xc0026fc0,ebx
c000b1b8:	7e 30                	jle    c000b1ea <KiIsSymlinkRegistered(char const*)+0x82>
c000b1ba:	89 d8                	mov    eax,ebx
c000b1bc:	51                   	push   ecx
c000b1bd:	c1 e0 08             	shl    eax,0x8
c000b1c0:	51                   	push   ecx
c000b1c1:	05 00 70 02 c0       	add    eax,0xc0027000
c000b1c6:	50                   	push   eax
c000b1c7:	56                   	push   esi
c000b1c8:	e8 83 55 ff ff       	call   c0000750 <strcmp>
c000b1cd:	83 c4 10             	add    esp,0x10
c000b1d0:	85 c0                	test   eax,eax
c000b1d2:	75 13                	jne    c000b1e7 <KiIsSymlinkRegistered(char const*)+0x7f>
c000b1d4:	8b 04 dd e0 6f 02 c0 	mov    eax,DWORD PTR [ebx*8-0x3ffd9020]
c000b1db:	8b 14 dd e4 6f 02 c0 	mov    edx,DWORD PTR [ebx*8-0x3ffd901c]
c000b1e2:	e9 fa 00 00 00       	jmp    c000b2e1 <KiIsSymlinkRegistered(char const*)+0x179>
c000b1e7:	43                   	inc    ebx
c000b1e8:	eb c8                	jmp    c000b1b2 <KiIsSymlinkRegistered(char const*)+0x4a>
c000b1ea:	83 ec 0c             	sub    esp,0xc
c000b1ed:	68 14 01 00 00       	push   0x114
c000b1f2:	e8 ef c8 ff ff       	call   c0007ae6 <malloc>
c000b1f7:	83 c4 0c             	add    esp,0xc
c000b1fa:	89 c3                	mov    ebx,eax
c000b1fc:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000b202:	68 a3 18 02 c0       	push   0xc00218a3
c000b207:	50                   	push   eax
c000b208:	e8 6f 09 00 00       	call   c000bb7c <File::File(char const*, Process*)>
c000b20d:	83 c4 10             	add    esp,0x10
c000b210:	85 db                	test   ebx,ebx
c000b212:	75 12                	jne    c000b226 <KiIsSymlinkRegistered(char const*)+0xbe>
c000b214:	83 ec 0c             	sub    esp,0xc
c000b217:	68 cd 19 02 c0       	push   0xc00219cd
c000b21c:	e8 a6 64 00 00       	call   c00116c7 <KePanic(char const*)>
c000b221:	83 c4 10             	add    esp,0x10
c000b224:	eb 10                	jmp    c000b236 <KiIsSymlinkRegistered(char const*)+0xce>
c000b226:	83 ec 0c             	sub    esp,0xc
c000b229:	53                   	push   ebx
c000b22a:	e8 2f 0c 00 00       	call   c000be5e <File::exists()>
c000b22f:	83 c4 10             	add    esp,0x10
c000b232:	84 c0                	test   al,al
c000b234:	74 de                	je     c000b214 <KiIsSymlinkRegistered(char const*)+0xac>
c000b236:	52                   	push   edx
c000b237:	52                   	push   edx
c000b238:	6a 01                	push   0x1
c000b23a:	53                   	push   ebx
c000b23b:	e8 5a 09 00 00       	call   c000bb9a <File::open(FileOpenMode)>
c000b240:	83 c4 10             	add    esp,0x10
c000b243:	85 c0                	test   eax,eax
c000b245:	74 10                	je     c000b257 <KiIsSymlinkRegistered(char const*)+0xef>
c000b247:	83 ec 0c             	sub    esp,0xc
c000b24a:	68 e8 19 02 c0       	push   0xc00219e8
c000b24f:	e8 73 64 00 00       	call   c00116c7 <KePanic(char const*)>
c000b254:	83 c4 10             	add    esp,0x10
c000b257:	83 ec 0c             	sub    esp,0xc
c000b25a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b25c:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c000b260:	55                   	push   ebp
c000b261:	8d 7c 24 20          	lea    edi,[esp+0x20]
c000b265:	57                   	push   edi
c000b266:	6a 00                	push   0x0
c000b268:	68 00 01 00 00       	push   0x100
c000b26d:	53                   	push   ebx
c000b26e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b271:	83 c4 20             	add    esp,0x20
c000b274:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c000b27c:	75 4b                	jne    c000b2c9 <KiIsSymlinkRegistered(char const*)+0x161>
c000b27e:	83 ec 0c             	sub    esp,0xc
c000b281:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b283:	55                   	push   ebp
c000b284:	8d 54 24 18          	lea    edx,[esp+0x18]
c000b288:	52                   	push   edx
c000b289:	6a 00                	push   0x0
c000b28b:	6a 08                	push   0x8
c000b28d:	53                   	push   ebx
c000b28e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b291:	83 c4 20             	add    esp,0x20
c000b294:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000b299:	75 2e                	jne    c000b2c9 <KiIsSymlinkRegistered(char const*)+0x161>
c000b29b:	50                   	push   eax
c000b29c:	50                   	push   eax
c000b29d:	57                   	push   edi
c000b29e:	56                   	push   esi
c000b29f:	e8 ac 54 ff ff       	call   c0000750 <strcmp>
c000b2a4:	83 c4 10             	add    esp,0x10
c000b2a7:	85 c0                	test   eax,eax
c000b2a9:	75 ac                	jne    c000b257 <KiIsSymlinkRegistered(char const*)+0xef>
c000b2ab:	83 ec 0c             	sub    esp,0xc
c000b2ae:	53                   	push   ebx
c000b2af:	e8 44 09 00 00       	call   c000bbf8 <File::close()>
c000b2b4:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b2b6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b2b9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b2bc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b2c0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000b2c4:	83 c4 10             	add    esp,0x10
c000b2c7:	eb 18                	jmp    c000b2e1 <KiIsSymlinkRegistered(char const*)+0x179>
c000b2c9:	83 ec 0c             	sub    esp,0xc
c000b2cc:	53                   	push   ebx
c000b2cd:	e8 26 09 00 00       	call   c000bbf8 <File::close()>
c000b2d2:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b2d4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b2d7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b2da:	83 c4 10             	add    esp,0x10
c000b2dd:	31 c0                	xor    eax,eax
c000b2df:	31 d2                	xor    edx,edx
c000b2e1:	81 c4 1c 01 00 00    	add    esp,0x11c
c000b2e7:	5b                   	pop    ebx
c000b2e8:	5e                   	pop    esi
c000b2e9:	5f                   	pop    edi
c000b2ea:	5d                   	pop    ebp
c000b2eb:	c3                   	ret    

c000b2ec <KeDereferenceSymlink(char const*, char*)>:
c000b2ec:	55                   	push   ebp
c000b2ed:	57                   	push   edi
c000b2ee:	56                   	push   esi
c000b2ef:	53                   	push   ebx
c000b2f0:	83 ec 48             	sub    esp,0x48
c000b2f3:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c000b2f7:	56                   	push   esi
c000b2f8:	e8 6b fe ff ff       	call   c000b168 <KiIsSymlinkRegistered(char const*)>
c000b2fd:	83 c4 10             	add    esp,0x10
c000b300:	89 c7                	mov    edi,eax
c000b302:	89 d0                	mov    eax,edx
c000b304:	09 f8                	or     eax,edi
c000b306:	75 07                	jne    c000b30f <KeDereferenceSymlink(char const*, char*)+0x23>
c000b308:	31 c0                	xor    eax,eax
c000b30a:	e9 7c 01 00 00       	jmp    c000b48b <KeDereferenceSymlink(char const*, char*)+0x19f>
c000b30f:	83 ec 0c             	sub    esp,0xc
c000b312:	89 d5                	mov    ebp,edx
c000b314:	68 14 01 00 00       	push   0x114
c000b319:	e8 c8 c7 ff ff       	call   c0007ae6 <malloc>
c000b31e:	83 c4 0c             	add    esp,0xc
c000b321:	89 c3                	mov    ebx,eax
c000b323:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000b329:	56                   	push   esi
c000b32a:	50                   	push   eax
c000b32b:	e8 4c 08 00 00       	call   c000bb7c <File::File(char const*, Process*)>
c000b330:	83 c4 10             	add    esp,0x10
c000b333:	85 db                	test   ebx,ebx
c000b335:	0f 84 32 01 00 00    	je     c000b46d <KeDereferenceSymlink(char const*, char*)+0x181>
c000b33b:	56                   	push   esi
c000b33c:	56                   	push   esi
c000b33d:	6a 01                	push   0x1
c000b33f:	53                   	push   ebx
c000b340:	e8 55 08 00 00       	call   c000bb9a <File::open(FileOpenMode)>
c000b345:	83 c4 10             	add    esp,0x10
c000b348:	85 c0                	test   eax,eax
c000b34a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b34c:	74 09                	je     c000b357 <KeDereferenceSymlink(char const*, char*)+0x6b>
c000b34e:	83 ec 0c             	sub    esp,0xc
c000b351:	53                   	push   ebx
c000b352:	e9 10 01 00 00       	jmp    c000b467 <KeDereferenceSymlink(char const*, char*)+0x17b>
c000b357:	83 ec 0c             	sub    esp,0xc
c000b35a:	8d 74 24 18          	lea    esi,[esp+0x18]
c000b35e:	56                   	push   esi
c000b35f:	8d 54 24 37          	lea    edx,[esp+0x37]
c000b363:	52                   	push   edx
c000b364:	6a 00                	push   0x0
c000b366:	6a 08                	push   0x8
c000b368:	53                   	push   ebx
c000b369:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b36c:	83 c4 20             	add    esp,0x20
c000b36f:	85 c0                	test   eax,eax
c000b371:	0f 85 e2 00 00 00    	jne    c000b459 <KeDereferenceSymlink(char const*, char*)+0x16d>
c000b377:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000b37c:	0f 85 d7 00 00 00    	jne    c000b459 <KeDereferenceSymlink(char const*, char*)+0x16d>
c000b382:	83 ec 0c             	sub    esp,0xc
c000b385:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b387:	56                   	push   esi
c000b388:	8d 54 24 20          	lea    edx,[esp+0x20]
c000b38c:	52                   	push   edx
c000b38d:	6a 00                	push   0x0
c000b38f:	6a 08                	push   0x8
c000b391:	53                   	push   ebx
c000b392:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b395:	83 c4 20             	add    esp,0x20
c000b398:	85 c0                	test   eax,eax
c000b39a:	0f 85 b9 00 00 00    	jne    c000b459 <KeDereferenceSymlink(char const*, char*)+0x16d>
c000b3a0:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000b3a5:	0f 85 ae 00 00 00    	jne    c000b459 <KeDereferenceSymlink(char const*, char*)+0x16d>
c000b3ab:	39 6c 24 14          	cmp    DWORD PTR [esp+0x14],ebp
c000b3af:	0f 85 53 ff ff ff    	jne    c000b308 <KeDereferenceSymlink(char const*, char*)+0x1c>
c000b3b5:	39 7c 24 10          	cmp    DWORD PTR [esp+0x10],edi
c000b3b9:	0f 85 49 ff ff ff    	jne    c000b308 <KeDereferenceSymlink(char const*, char*)+0x1c>
c000b3bf:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000b3c7:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000b3cf:	51                   	push   ecx
c000b3d0:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000b3d4:	50                   	push   eax
c000b3d5:	8d 44 24 20          	lea    eax,[esp+0x20]
c000b3d9:	50                   	push   eax
c000b3da:	53                   	push   ebx
c000b3db:	e8 bc 0a 00 00       	call   c000be9c <File::stat(unsigned long long*, bool*)>
c000b3e0:	83 c4 10             	add    esp,0x10
c000b3e3:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000b3e8:	75 6f                	jne    c000b459 <KeDereferenceSymlink(char const*, char*)+0x16d>
c000b3ea:	31 c9                	xor    ecx,ecx
c000b3ec:	bf 0f 00 00 00       	mov    edi,0xf
c000b3f1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b3f5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000b3f9:	39 c7                	cmp    edi,eax
c000b3fb:	89 cf                	mov    edi,ecx
c000b3fd:	19 d7                	sbb    edi,edx
c000b3ff:	73 58                	jae    c000b459 <KeDereferenceSymlink(char const*, char*)+0x16d>
c000b401:	83 c0 f0             	add    eax,0xfffffff0
c000b404:	bf ff 00 00 00       	mov    edi,0xff
c000b409:	83 d2 ff             	adc    edx,0xffffffff
c000b40c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b410:	39 c7                	cmp    edi,eax
c000b412:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b416:	19 d1                	sbb    ecx,edx
c000b418:	72 53                	jb     c000b46d <KeDereferenceSymlink(char const*, char*)+0x181>
c000b41a:	40                   	inc    eax
c000b41b:	52                   	push   edx
c000b41c:	50                   	push   eax
c000b41d:	6a 00                	push   0x0
c000b41f:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c000b423:	e8 c8 50 ff ff       	call   c00004f0 <memset>
c000b428:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b42a:	89 34 24             	mov    DWORD PTR [esp],esi
c000b42d:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000b431:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b435:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b439:	53                   	push   ebx
c000b43a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b43d:	83 c4 20             	add    esp,0x20
c000b440:	85 c0                	test   eax,eax
c000b442:	75 15                	jne    c000b459 <KeDereferenceSymlink(char const*, char*)+0x16d>
c000b444:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b448:	89 c7                	mov    edi,eax
c000b44a:	c1 ff 1f             	sar    edi,0x1f
c000b44d:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000b451:	75 06                	jne    c000b459 <KeDereferenceSymlink(char const*, char*)+0x16d>
c000b453:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c000b457:	74 19                	je     c000b472 <KeDereferenceSymlink(char const*, char*)+0x186>
c000b459:	83 ec 0c             	sub    esp,0xc
c000b45c:	53                   	push   ebx
c000b45d:	e8 96 07 00 00       	call   c000bbf8 <File::close()>
c000b462:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b464:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b467:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b46a:	83 c4 10             	add    esp,0x10
c000b46d:	83 c8 ff             	or     eax,0xffffffff
c000b470:	eb 19                	jmp    c000b48b <KeDereferenceSymlink(char const*, char*)+0x19f>
c000b472:	83 ec 0c             	sub    esp,0xc
c000b475:	53                   	push   ebx
c000b476:	e8 7d 07 00 00       	call   c000bbf8 <File::close()>
c000b47b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b47d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b480:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b483:	83 c4 10             	add    esp,0x10
c000b486:	b8 01 00 00 00       	mov    eax,0x1
c000b48b:	83 c4 3c             	add    esp,0x3c
c000b48e:	5b                   	pop    ebx
c000b48f:	5e                   	pop    esi
c000b490:	5f                   	pop    edi
c000b491:	5d                   	pop    ebp
c000b492:	c3                   	ret    

c000b493 <KeCreateSymlink(char const*, char const*)>:
c000b493:	55                   	push   ebp
c000b494:	57                   	push   edi
c000b495:	56                   	push   esi
c000b496:	53                   	push   ebx
c000b497:	83 ec 38             	sub    esp,0x38
c000b49a:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c000b49e:	68 14 01 00 00       	push   0x114
c000b4a3:	e8 3e c6 ff ff       	call   c0007ae6 <malloc>
c000b4a8:	6a 00                	push   0x0
c000b4aa:	89 c3                	mov    ebx,eax
c000b4ac:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000b4b2:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000b4b6:	50                   	push   eax
c000b4b7:	e8 e2 05 00 00       	call   c000ba9e <File::File(char const*, Process*, bool)>
c000b4bc:	83 c4 20             	add    esp,0x20
c000b4bf:	b8 01 00 00 00       	mov    eax,0x1
c000b4c4:	85 db                	test   ebx,ebx
c000b4c6:	0f 84 19 01 00 00    	je     c000b5e5 <KeCreateSymlink(char const*, char const*)+0x152>
c000b4cc:	52                   	push   edx
c000b4cd:	52                   	push   edx
c000b4ce:	6a 12                	push   0x12
c000b4d0:	53                   	push   ebx
c000b4d1:	e8 c4 06 00 00       	call   c000bb9a <File::open(FileOpenMode)>
c000b4d6:	83 c4 10             	add    esp,0x10
c000b4d9:	85 c0                	test   eax,eax
c000b4db:	74 0b                	je     c000b4e8 <KeCreateSymlink(char const*, char const*)+0x55>
c000b4dd:	83 ec 0c             	sub    esp,0xc
c000b4e0:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b4e2:	53                   	push   ebx
c000b4e3:	e9 f2 00 00 00       	jmp    c000b5da <KeCreateSymlink(char const*, char const*)+0x147>
c000b4e8:	8d 7c 24 17          	lea    edi,[esp+0x17]
c000b4ec:	be 35 1a 02 c0       	mov    esi,0xc0021a35
c000b4f1:	b9 09 00 00 00       	mov    ecx,0x9
c000b4f6:	fc                   	cld    
c000b4f7:	83 ec 0c             	sub    esp,0xc
c000b4fa:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b4fc:	8d 74 24 10          	lea    esi,[esp+0x10]
c000b500:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b502:	56                   	push   esi
c000b503:	8d 54 24 27          	lea    edx,[esp+0x27]
c000b507:	52                   	push   edx
c000b508:	6a 00                	push   0x0
c000b50a:	6a 08                	push   0x8
c000b50c:	53                   	push   ebx
c000b50d:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b510:	83 c4 20             	add    esp,0x20
c000b513:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000b518:	0f 85 ae 00 00 00    	jne    c000b5cc <KeCreateSymlink(char const*, char const*)+0x139>
c000b51e:	85 c0                	test   eax,eax
c000b520:	0f 85 a6 00 00 00    	jne    c000b5cc <KeCreateSymlink(char const*, char const*)+0x139>
c000b526:	e8 ca f9 ff ff       	call   c000aef5 <KiCreateSymlinkID()>
c000b52b:	83 ec 0c             	sub    esp,0xc
c000b52e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b532:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b536:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b538:	56                   	push   esi
c000b539:	8d 54 24 18          	lea    edx,[esp+0x18]
c000b53d:	52                   	push   edx
c000b53e:	6a 00                	push   0x0
c000b540:	6a 08                	push   0x8
c000b542:	53                   	push   ebx
c000b543:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b546:	83 c4 20             	add    esp,0x20
c000b549:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000b54e:	75 7c                	jne    c000b5cc <KeCreateSymlink(char const*, char const*)+0x139>
c000b550:	85 c0                	test   eax,eax
c000b552:	75 78                	jne    c000b5cc <KeCreateSymlink(char const*, char const*)+0x139>
c000b554:	83 ec 0c             	sub    esp,0xc
c000b557:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b559:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000b55c:	55                   	push   ebp
c000b55d:	e8 0e 50 ff ff       	call   c0000570 <strlen>
c000b562:	89 34 24             	mov    DWORD PTR [esp],esi
c000b565:	31 d2                	xor    edx,edx
c000b567:	55                   	push   ebp
c000b568:	52                   	push   edx
c000b569:	50                   	push   eax
c000b56a:	53                   	push   ebx
c000b56b:	ff d7                	call   edi
c000b56d:	83 c4 14             	add    esp,0x14
c000b570:	89 c6                	mov    esi,eax
c000b572:	55                   	push   ebp
c000b573:	e8 f8 4f ff ff       	call   c0000570 <strlen>
c000b578:	83 c4 10             	add    esp,0x10
c000b57b:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c000b57f:	75 4b                	jne    c000b5cc <KeCreateSymlink(char const*, char const*)+0x139>
c000b581:	85 f6                	test   esi,esi
c000b583:	75 47                	jne    c000b5cc <KeCreateSymlink(char const*, char const*)+0x139>
c000b585:	50                   	push   eax
c000b586:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000b58a:	55                   	push   ebp
c000b58b:	68 03 1a 02 c0       	push   0xc0021a03
c000b590:	e8 e0 f3 ff ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c000b595:	83 c4 0c             	add    esp,0xc
c000b598:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b59c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b5a0:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c000b5a4:	e8 b9 f9 ff ff       	call   c000af62 <KeRegisterSymlink(char const*, unsigned long long)>
c000b5a9:	c7 04 24 28 1a 02 c0 	mov    DWORD PTR [esp],0xc0021a28
c000b5b0:	e8 c0 f3 ff ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c000b5b5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b5b8:	e8 3b 06 00 00       	call   c000bbf8 <File::close()>
c000b5bd:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b5bf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b5c2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b5c5:	83 c4 10             	add    esp,0x10
c000b5c8:	31 c0                	xor    eax,eax
c000b5ca:	eb 19                	jmp    c000b5e5 <KeCreateSymlink(char const*, char const*)+0x152>
c000b5cc:	83 ec 0c             	sub    esp,0xc
c000b5cf:	53                   	push   ebx
c000b5d0:	e8 23 06 00 00       	call   c000bbf8 <File::close()>
c000b5d5:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b5d7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b5da:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b5dd:	83 c4 10             	add    esp,0x10
c000b5e0:	b8 01 00 00 00       	mov    eax,0x1
c000b5e5:	83 c4 2c             	add    esp,0x2c
c000b5e8:	5b                   	pop    ebx
c000b5e9:	5e                   	pop    esi
c000b5ea:	5f                   	pop    edi
c000b5eb:	5d                   	pop    ebp
c000b5ec:	c3                   	ret    
c000b5ed:	90                   	nop

c000b5ee <File::read(unsigned long long, void*, int*)>:
c000b5ee:	53                   	push   ebx
c000b5ef:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b5f3:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b5f7:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000b5fe:	83 f8 19             	cmp    eax,0x19
c000b601:	77 35                	ja     c000b638 <File::read(unsigned long long, void*, int*)+0x4a>
c000b603:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000b60a:	85 c0                	test   eax,eax
c000b60c:	74 2a                	je     c000b638 <File::read(unsigned long long, void*, int*)+0x4a>
c000b60e:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b614:	85 c0                	test   eax,eax
c000b616:	74 20                	je     c000b638 <File::read(unsigned long long, void*, int*)+0x4a>
c000b618:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b61c:	74 21                	je     c000b63f <File::read(unsigned long long, void*, int*)+0x51>
c000b61e:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b620:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b624:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000b62a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b62e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b632:	5b                   	pop    ebx
c000b633:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000b636:	ff e0                	jmp    eax
c000b638:	b8 0b 00 00 00       	mov    eax,0xb
c000b63d:	eb 05                	jmp    c000b644 <File::read(unsigned long long, void*, int*)+0x56>
c000b63f:	b8 05 00 00 00       	mov    eax,0x5
c000b644:	5b                   	pop    ebx
c000b645:	c3                   	ret    

c000b646 <File::write(unsigned long long, void*, int*)>:
c000b646:	53                   	push   ebx
c000b647:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b64b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b64f:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000b656:	83 f8 19             	cmp    eax,0x19
c000b659:	77 35                	ja     c000b690 <File::write(unsigned long long, void*, int*)+0x4a>
c000b65b:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000b662:	85 c0                	test   eax,eax
c000b664:	74 2a                	je     c000b690 <File::write(unsigned long long, void*, int*)+0x4a>
c000b666:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b66c:	85 c0                	test   eax,eax
c000b66e:	74 20                	je     c000b690 <File::write(unsigned long long, void*, int*)+0x4a>
c000b670:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b674:	74 21                	je     c000b697 <File::write(unsigned long long, void*, int*)+0x51>
c000b676:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b678:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b67c:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000b682:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b686:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b68a:	5b                   	pop    ebx
c000b68b:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000b68e:	ff e0                	jmp    eax
c000b690:	b8 0b 00 00 00       	mov    eax,0xb
c000b695:	eb 05                	jmp    c000b69c <File::write(unsigned long long, void*, int*)+0x56>
c000b697:	b8 05 00 00 00       	mov    eax,0x5
c000b69c:	5b                   	pop    ebx
c000b69d:	c3                   	ret    

c000b69e <Directory::read(unsigned long long, void*, int*)>:
c000b69e:	53                   	push   ebx
c000b69f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b6a3:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b6a7:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000b6ae:	83 f8 19             	cmp    eax,0x19
c000b6b1:	77 35                	ja     c000b6e8 <Directory::read(unsigned long long, void*, int*)+0x4a>
c000b6b3:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000b6ba:	85 c0                	test   eax,eax
c000b6bc:	74 2a                	je     c000b6e8 <Directory::read(unsigned long long, void*, int*)+0x4a>
c000b6be:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b6c4:	85 c0                	test   eax,eax
c000b6c6:	74 20                	je     c000b6e8 <Directory::read(unsigned long long, void*, int*)+0x4a>
c000b6c8:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b6cc:	74 21                	je     c000b6ef <Directory::read(unsigned long long, void*, int*)+0x51>
c000b6ce:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b6d0:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b6d4:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000b6da:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b6de:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b6e2:	5b                   	pop    ebx
c000b6e3:	8b 41 54             	mov    eax,DWORD PTR [ecx+0x54]
c000b6e6:	ff e0                	jmp    eax
c000b6e8:	b8 0b 00 00 00       	mov    eax,0xb
c000b6ed:	eb 05                	jmp    c000b6f4 <Directory::read(unsigned long long, void*, int*)+0x56>
c000b6ef:	b8 05 00 00 00       	mov    eax,0x5
c000b6f4:	5b                   	pop    ebx
c000b6f5:	c3                   	ret    

c000b6f6 <Directory::write(unsigned long long, void*, int*)>:
c000b6f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b6fa:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000b701:	b8 0b 00 00 00       	mov    eax,0xb
c000b706:	83 fa 19             	cmp    edx,0x19
c000b709:	77 18                	ja     c000b723 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000b70b:	8b 14 95 80 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4780]
c000b712:	85 d2                	test   edx,edx
c000b714:	74 0d                	je     c000b723 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000b716:	83 ba 74 01 00 00 01 	cmp    DWORD PTR [edx+0x174],0x1
c000b71d:	19 c0                	sbb    eax,eax
c000b71f:	83 e0 0a             	and    eax,0xa
c000b722:	40                   	inc    eax
c000b723:	c3                   	ret    

c000b724 <File::isAtty()>:
c000b724:	31 c0                	xor    eax,eax
c000b726:	c3                   	ret    
c000b727:	90                   	nop

c000b728 <Directory::isAtty()>:
c000b728:	31 c0                	xor    eax,eax
c000b72a:	c3                   	ret    
c000b72b:	90                   	nop

c000b72c <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000b72c:	b8 0a 00 00 00       	mov    eax,0xa
c000b731:	c3                   	ret    

c000b732 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000b732:	b8 0a 00 00 00       	mov    eax,0xa
c000b737:	c3                   	ret    

c000b738 <Filesystem::allocateSwapfile(char const*, int)>:
c000b738:	31 c0                	xor    eax,eax
c000b73a:	31 d2                	xor    edx,edx
c000b73c:	c3                   	ret    
c000b73d:	90                   	nop

c000b73e <File::~File()>:
c000b73e:	83 ec 0c             	sub    esp,0xc
c000b741:	ba f4 1a 02 c0       	mov    edx,0xc0021af4
c000b746:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b74a:	89 10                	mov    DWORD PTR [eax],edx
c000b74c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b750:	83 ec 0c             	sub    esp,0xc
c000b753:	50                   	push   eax
c000b754:	e8 7b dc ff ff       	call   c00093d4 <UnixFile::~UnixFile()>
c000b759:	83 c4 10             	add    esp,0x10
c000b75c:	90                   	nop
c000b75d:	83 c4 0c             	add    esp,0xc
c000b760:	c3                   	ret    
c000b761:	90                   	nop

c000b762 <File::~File()>:
c000b762:	83 ec 0c             	sub    esp,0xc
c000b765:	83 ec 0c             	sub    esp,0xc
c000b768:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b76c:	e8 cd ff ff ff       	call   c000b73e <File::~File()>
c000b771:	83 c4 10             	add    esp,0x10
c000b774:	83 ec 08             	sub    esp,0x8
c000b777:	68 14 01 00 00       	push   0x114
c000b77c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b780:	e8 c3 f0 ff ff       	call   c000a848 <operator delete(void*, unsigned long)>
c000b785:	83 c4 10             	add    esp,0x10
c000b788:	83 c4 0c             	add    esp,0xc
c000b78b:	c3                   	ret    

c000b78c <Directory::~Directory()>:
c000b78c:	83 ec 0c             	sub    esp,0xc
c000b78f:	ba 10 1b 02 c0       	mov    edx,0xc0021b10
c000b794:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b798:	89 10                	mov    DWORD PTR [eax],edx
c000b79a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b79e:	83 ec 0c             	sub    esp,0xc
c000b7a1:	50                   	push   eax
c000b7a2:	e8 2d dc ff ff       	call   c00093d4 <UnixFile::~UnixFile()>
c000b7a7:	83 c4 10             	add    esp,0x10
c000b7aa:	90                   	nop
c000b7ab:	83 c4 0c             	add    esp,0xc
c000b7ae:	c3                   	ret    
c000b7af:	90                   	nop

c000b7b0 <Directory::~Directory()>:
c000b7b0:	83 ec 0c             	sub    esp,0xc
c000b7b3:	83 ec 0c             	sub    esp,0xc
c000b7b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7ba:	e8 cd ff ff ff       	call   c000b78c <Directory::~Directory()>
c000b7bf:	83 c4 10             	add    esp,0x10
c000b7c2:	83 ec 08             	sub    esp,0x8
c000b7c5:	68 14 01 00 00       	push   0x114
c000b7ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7ce:	e8 75 f0 ff ff       	call   c000a848 <operator delete(void*, unsigned long)>
c000b7d3:	83 c4 10             	add    esp,0x10
c000b7d6:	83 c4 0c             	add    esp,0xc
c000b7d9:	c3                   	ret    

c000b7da <Filesystem::Filesystem()>:
c000b7da:	ba 88 1a 02 c0       	mov    edx,0xc0021a88
c000b7df:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7e3:	89 10                	mov    DWORD PTR [eax],edx
c000b7e5:	8b 15 04 94 02 c0    	mov    edx,DWORD PTR ds:0xc0029404
c000b7eb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7ef:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b7f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7f6:	a3 04 94 02 c0       	mov    ds:0xc0029404,eax
c000b7fb:	90                   	nop
c000b7fc:	c3                   	ret    
c000b7fd:	90                   	nop

c000b7fe <Filesystem::~Filesystem()>:
c000b7fe:	ba 88 1a 02 c0       	mov    edx,0xc0021a88
c000b803:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b807:	89 10                	mov    DWORD PTR [eax],edx
c000b809:	90                   	nop
c000b80a:	c3                   	ret    
c000b80b:	90                   	nop

c000b80c <Filesystem::~Filesystem()>:
c000b80c:	83 ec 0c             	sub    esp,0xc
c000b80f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b813:	e8 e6 ff ff ff       	call   c000b7fe <Filesystem::~Filesystem()>
c000b818:	83 c4 04             	add    esp,0x4
c000b81b:	83 ec 08             	sub    esp,0x8
c000b81e:	6a 08                	push   0x8
c000b820:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b824:	e8 1f f0 ff ff       	call   c000a848 <operator delete(void*, unsigned long)>
c000b829:	83 c4 10             	add    esp,0x10
c000b82c:	83 c4 0c             	add    esp,0xc
c000b82f:	c3                   	ret    

c000b830 <Fs::getcwd(Process*, char*, int)>:
c000b830:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b834:	31 c0                	xor    eax,eax
c000b836:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000b839:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000b83d:	7d 15                	jge    c000b854 <Fs::getcwd(Process*, char*, int)+0x24>
c000b83f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000b843:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000b84a:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000b84d:	84 c9                	test   cl,cl
c000b84f:	74 06                	je     c000b857 <Fs::getcwd(Process*, char*, int)+0x27>
c000b851:	40                   	inc    eax
c000b852:	eb e2                	jmp    c000b836 <Fs::getcwd(Process*, char*, int)+0x6>
c000b854:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000b857:	31 c0                	xor    eax,eax
c000b859:	c3                   	ret    

c000b85a <Fs::initVFS()>:
c000b85a:	83 ec 18             	sub    esp,0x18
c000b85d:	6a 08                	push   0x8
c000b85f:	e8 82 c2 ff ff       	call   c0007ae6 <malloc>
c000b864:	89 04 24             	mov    DWORD PTR [esp],eax
c000b867:	e8 ac e4 00 00       	call   c0019d18 <FAT::FAT()>
c000b86c:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000b873:	e8 6e c2 ff ff       	call   c0007ae6 <malloc>
c000b878:	89 04 24             	mov    DWORD PTR [esp],eax
c000b87b:	e8 c4 f3 00 00       	call   c001ac44 <ISO9660::ISO9660()>
c000b880:	83 c4 1c             	add    esp,0x1c
c000b883:	c3                   	ret    

c000b884 <Fs::standardiseFiles(char*, char const*, char const*, bool)>:
c000b884:	55                   	push   ebp
c000b885:	57                   	push   edi
c000b886:	56                   	push   esi
c000b887:	53                   	push   ebx
c000b888:	81 ec 10 04 00 00    	sub    esp,0x410
c000b88e:	8b ac 24 28 04 00 00 	mov    ebp,DWORD PTR [esp+0x428]
c000b895:	8b b4 24 24 04 00 00 	mov    esi,DWORD PTR [esp+0x424]
c000b89c:	0f b6 9c 24 30 04 00 00 	movzx  ebx,BYTE PTR [esp+0x430]
c000b8a4:	68 00 04 00 00       	push   0x400
c000b8a9:	6a 00                	push   0x0
c000b8ab:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c000b8af:	57                   	push   edi
c000b8b0:	e8 3b 4c ff ff       	call   c00004f0 <memset>
c000b8b5:	83 c4 10             	add    esp,0x10
c000b8b8:	80 7d 01 3a          	cmp    BYTE PTR [ebp+0x1],0x3a
c000b8bc:	75 0b                	jne    c000b8c9 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x45>
c000b8be:	50                   	push   eax
c000b8bf:	50                   	push   eax
c000b8c0:	55                   	push   ebp
c000b8c1:	57                   	push   edi
c000b8c2:	e8 79 4d ff ff       	call   c0000640 <strcpy>
c000b8c7:	eb 51                	jmp    c000b91a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x96>
c000b8c9:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000b8cd:	83 f8 5c             	cmp    eax,0x5c
c000b8d0:	74 05                	je     c000b8d7 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x53>
c000b8d2:	83 f8 2f             	cmp    eax,0x2f
c000b8d5:	75 1e                	jne    c000b8f5 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x71>
c000b8d7:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c000b8de:	8a 00                	mov    al,BYTE PTR [eax]
c000b8e0:	3c 60                	cmp    al,0x60
c000b8e2:	7e 03                	jle    c000b8e7 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x63>
c000b8e4:	83 e8 20             	sub    eax,0x20
c000b8e7:	88 04 24             	mov    BYTE PTR [esp],al
c000b8ea:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000b8f1:	50                   	push   eax
c000b8f2:	50                   	push   eax
c000b8f3:	eb 1e                	jmp    c000b913 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x8f>
c000b8f5:	50                   	push   eax
c000b8f6:	50                   	push   eax
c000b8f7:	ff b4 24 30 04 00 00 	push   DWORD PTR [esp+0x430]
c000b8fe:	57                   	push   edi
c000b8ff:	e8 3c 4d ff ff       	call   c0000640 <strcpy>
c000b904:	58                   	pop    eax
c000b905:	5a                   	pop    edx
c000b906:	68 d7 2a 02 c0       	push   0xc0022ad7
c000b90b:	57                   	push   edi
c000b90c:	e8 2f 4f ff ff       	call   c0000840 <strcat>
c000b911:	59                   	pop    ecx
c000b912:	58                   	pop    eax
c000b913:	55                   	push   ebp
c000b914:	57                   	push   edi
c000b915:	e8 26 4f ff ff       	call   c0000840 <strcat>
c000b91a:	83 c4 10             	add    esp,0x10
c000b91d:	8a 04 24             	mov    al,BYTE PTR [esp]
c000b920:	3c 60                	cmp    al,0x60
c000b922:	7e 03                	jle    c000b927 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xa3>
c000b924:	83 e8 20             	sub    eax,0x20
c000b927:	88 04 24             	mov    BYTE PTR [esp],al
c000b92a:	88 06                	mov    BYTE PTR [esi],al
c000b92c:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000b933:	66 c7 46 01 3a 2f    	mov    WORD PTR [esi+0x1],0x2f3a
c000b939:	c6 46 03 00          	mov    BYTE PTR [esi+0x3],0x0
c000b93d:	bf 03 00 00 00       	mov    edi,0x3
c000b942:	b8 03 00 00 00       	mov    eax,0x3
c000b947:	0f be 2c 3c          	movsx  ebp,BYTE PTR [esp+edi*1]
c000b94b:	89 e9                	mov    ecx,ebp
c000b94d:	85 ed                	test   ebp,ebp
c000b94f:	0f 84 97 00 00 00    	je     c000b9ec <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x168>
c000b955:	8d 57 01             	lea    edx,[edi+0x1]
c000b958:	83 fd 5c             	cmp    ebp,0x5c
c000b95b:	74 05                	je     c000b962 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xde>
c000b95d:	83 fd 2f             	cmp    ebp,0x2f
c000b960:	75 12                	jne    c000b974 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c000b962:	89 c5                	mov    ebp,eax
c000b964:	80 7c 06 ff 2f       	cmp    BYTE PTR [esi+eax*1-0x1],0x2f
c000b969:	74 09                	je     c000b974 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c000b96b:	40                   	inc    eax
c000b96c:	c6 04 2e 2f          	mov    BYTE PTR [esi+ebp*1],0x2f
c000b970:	89 d7                	mov    edi,edx
c000b972:	eb d3                	jmp    c000b947 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xc3>
c000b974:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000b979:	0f be e9             	movsx  ebp,cl
c000b97c:	75 5e                	jne    c000b9dc <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x158>
c000b97e:	83 fd 2e             	cmp    ebp,0x2e
c000b981:	75 59                	jne    c000b9dc <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x158>
c000b983:	80 3c 14 2e          	cmp    BYTE PTR [esp+edx*1],0x2e
c000b987:	0f be 6c 3c 02       	movsx  ebp,BYTE PTR [esp+edi*1+0x2]
c000b98c:	74 18                	je     c000b9a6 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x122>
c000b98e:	83 fd 2e             	cmp    ebp,0x2e
c000b991:	74 53                	je     c000b9e6 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x162>
c000b993:	89 fa                	mov    edx,edi
c000b995:	42                   	inc    edx
c000b996:	0f be 0c 14          	movsx  ecx,BYTE PTR [esp+edx*1]
c000b99a:	83 f9 2f             	cmp    ecx,0x2f
c000b99d:	74 f6                	je     c000b995 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x111>
c000b99f:	83 f9 5c             	cmp    ecx,0x5c
c000b9a2:	74 f1                	je     c000b995 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x111>
c000b9a4:	eb ca                	jmp    c000b970 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c000b9a6:	83 fd 2e             	cmp    ebp,0x2e
c000b9a9:	74 3b                	je     c000b9e6 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x162>
c000b9ab:	83 f8 03             	cmp    eax,0x3
c000b9ae:	74 c0                	je     c000b970 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c000b9b0:	42                   	inc    edx
c000b9b1:	0f be 0c 14          	movsx  ecx,BYTE PTR [esp+edx*1]
c000b9b5:	83 f9 5c             	cmp    ecx,0x5c
c000b9b8:	74 f6                	je     c000b9b0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x12c>
c000b9ba:	83 f9 2f             	cmp    ecx,0x2f
c000b9bd:	74 f1                	je     c000b9b0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x12c>
c000b9bf:	48                   	dec    eax
c000b9c0:	80 3c 06 2f          	cmp    BYTE PTR [esi+eax*1],0x2f
c000b9c4:	75 06                	jne    c000b9cc <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x148>
c000b9c6:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c000b9ca:	eb f3                	jmp    c000b9bf <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x13b>
c000b9cc:	80 3c 06 2f          	cmp    BYTE PTR [esi+eax*1],0x2f
c000b9d0:	74 07                	je     c000b9d9 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x155>
c000b9d2:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c000b9d6:	48                   	dec    eax
c000b9d7:	eb f3                	jmp    c000b9cc <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x148>
c000b9d9:	40                   	inc    eax
c000b9da:	eb 94                	jmp    c000b970 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c000b9dc:	83 fd 5c             	cmp    ebp,0x5c
c000b9df:	74 8f                	je     c000b970 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c000b9e1:	83 fd 2f             	cmp    ebp,0x2f
c000b9e4:	74 8a                	je     c000b970 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c000b9e6:	88 0c 06             	mov    BYTE PTR [esi+eax*1],cl
c000b9e9:	40                   	inc    eax
c000b9ea:	eb 84                	jmp    c000b970 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c000b9ec:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c000b9f0:	83 ec 0c             	sub    esp,0xc
c000b9f3:	56                   	push   esi
c000b9f4:	e8 77 4b ff ff       	call   c0000570 <strlen>
c000b9f9:	83 c4 10             	add    esp,0x10
c000b9fc:	80 7c 06 ff 2e       	cmp    BYTE PTR [esi+eax*1-0x1],0x2e
c000ba01:	74 17                	je     c000ba1a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x196>
c000ba03:	83 ec 0c             	sub    esp,0xc
c000ba06:	56                   	push   esi
c000ba07:	e8 64 4b ff ff       	call   c0000570 <strlen>
c000ba0c:	83 c4 10             	add    esp,0x10
c000ba0f:	80 7c 06 ff 2f       	cmp    BYTE PTR [esi+eax*1-0x1],0x2f
c000ba14:	74 04                	je     c000ba1a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x196>
c000ba16:	31 ff                	xor    edi,edi
c000ba18:	eb 5c                	jmp    c000ba76 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1f2>
c000ba1a:	83 ec 0c             	sub    esp,0xc
c000ba1d:	56                   	push   esi
c000ba1e:	e8 4d 4b ff ff       	call   c0000570 <strlen>
c000ba23:	83 c4 10             	add    esp,0x10
c000ba26:	80 7c 06 fe 3a       	cmp    BYTE PTR [esi+eax*1-0x2],0x3a
c000ba2b:	74 e9                	je     c000ba16 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x192>
c000ba2d:	83 ec 0c             	sub    esp,0xc
c000ba30:	56                   	push   esi
c000ba31:	e8 3a 4b ff ff       	call   c0000570 <strlen>
c000ba36:	83 c4 10             	add    esp,0x10
c000ba39:	c6 44 06 ff 00       	mov    BYTE PTR [esi+eax*1-0x1],0x0
c000ba3e:	eb b0                	jmp    c000b9f0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x16c>
c000ba40:	52                   	push   edx
c000ba41:	52                   	push   edx
c000ba42:	56                   	push   esi
c000ba43:	8d 6c 24 0c          	lea    ebp,[esp+0xc]
c000ba47:	55                   	push   ebp
c000ba48:	e8 f3 4b ff ff       	call   c0000640 <strcpy>
c000ba4d:	59                   	pop    ecx
c000ba4e:	58                   	pop    eax
c000ba4f:	56                   	push   esi
c000ba50:	55                   	push   ebp
c000ba51:	e8 96 f8 ff ff       	call   c000b2ec <KeDereferenceSymlink(char const*, char*)>
c000ba56:	83 c4 10             	add    esp,0x10
c000ba59:	48                   	dec    eax
c000ba5a:	75 37                	jne    c000ba93 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x20f>
c000ba5c:	50                   	push   eax
c000ba5d:	56                   	push   esi
c000ba5e:	55                   	push   ebp
c000ba5f:	68 3e 1a 02 c0       	push   0xc0021a3e
c000ba64:	e8 0c ef ff ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c000ba69:	83 c4 10             	add    esp,0x10
c000ba6c:	8d 47 01             	lea    eax,[edi+0x1]
c000ba6f:	83 ff 14             	cmp    edi,0x14
c000ba72:	74 08                	je     c000ba7c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1f8>
c000ba74:	89 c7                	mov    edi,eax
c000ba76:	85 db                	test   ebx,ebx
c000ba78:	75 c6                	jne    c000ba40 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1bc>
c000ba7a:	eb 17                	jmp    c000ba93 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x20f>
c000ba7c:	83 ec 0c             	sub    esp,0xc
c000ba7f:	bf 15 00 00 00       	mov    edi,0x15
c000ba84:	68 59 1a 02 c0       	push   0xc0021a59
c000ba89:	e8 39 5c 00 00       	call   c00116c7 <KePanic(char const*)>
c000ba8e:	83 c4 10             	add    esp,0x10
c000ba91:	eb e3                	jmp    c000ba76 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1f2>
c000ba93:	81 c4 0c 04 00 00    	add    esp,0x40c
c000ba99:	5b                   	pop    ebx
c000ba9a:	5e                   	pop    esi
c000ba9b:	5f                   	pop    edi
c000ba9c:	5d                   	pop    ebp
c000ba9d:	c3                   	ret    

c000ba9e <File::File(char const*, Process*, bool)>:
c000ba9e:	83 ec 1c             	sub    esp,0x1c
c000baa1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000baa5:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000baa9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000baad:	83 ec 08             	sub    esp,0x8
c000bab0:	6a 00                	push   0x0
c000bab2:	50                   	push   eax
c000bab3:	e8 36 d7 ff ff       	call   c00091ee <UnixFile::UnixFile(int)>
c000bab8:	83 c4 10             	add    esp,0x10
c000babb:	ba f4 1a 02 c0       	mov    edx,0xc0021af4
c000bac0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bac4:	89 10                	mov    DWORD PTR [eax],edx
c000bac6:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000bacb:	85 c0                	test   eax,eax
c000bacd:	74 0f                	je     c000bade <File::File(char const*, Process*, bool)+0x40>
c000bacf:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c000bad4:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c000bad8:	74 04                	je     c000bade <File::File(char const*, Process*, bool)+0x40>
c000bada:	b0 01                	mov    al,0x1
c000badc:	eb 02                	jmp    c000bae0 <File::File(char const*, Process*, bool)+0x42>
c000bade:	b0 00                	mov    al,0x0
c000bae0:	0f b6 c0             	movzx  eax,al
c000bae3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000bae7:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c000baed:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000baf1:	83 c2 0d             	add    edx,0xd
c000baf4:	50                   	push   eax
c000baf5:	51                   	push   ecx
c000baf6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bafa:	52                   	push   edx
c000bafb:	e8 84 fd ff ff       	call   c000b884 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c000bb00:	83 c4 10             	add    esp,0x10
c000bb03:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb07:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000bb0a:	83 e8 41             	sub    eax,0x41
c000bb0d:	88 c2                	mov    dl,al
c000bb0f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb13:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000bb19:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb1d:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000bb21:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb25:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000bb2b:	0f b6 c0             	movzx  eax,al
c000bb2e:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000bb35:	85 c0                	test   eax,eax
c000bb37:	74 3e                	je     c000bb77 <File::File(char const*, Process*, bool)+0xd9>
c000bb39:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb3d:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000bb43:	0f b6 c0             	movzx  eax,al
c000bb46:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000bb4d:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000bb53:	85 c0                	test   eax,eax
c000bb55:	75 20                	jne    c000bb77 <File::File(char const*, Process*, bool)+0xd9>
c000bb57:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb5b:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000bb61:	0f b6 c0             	movzx  eax,al
c000bb64:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000bb6b:	83 ec 0c             	sub    esp,0xc
c000bb6e:	50                   	push   eax
c000bb6f:	e8 a2 21 00 00       	call   c000dd16 <LogicalDisk::mount()>
c000bb74:	83 c4 10             	add    esp,0x10
c000bb77:	90                   	nop
c000bb78:	83 c4 1c             	add    esp,0x1c
c000bb7b:	c3                   	ret    

c000bb7c <File::File(char const*, Process*)>:
c000bb7c:	83 ec 0c             	sub    esp,0xc
c000bb7f:	6a 01                	push   0x1
c000bb81:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb85:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb89:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb8d:	e8 0c ff ff ff       	call   c000ba9e <File::File(char const*, Process*, bool)>
c000bb92:	83 c4 10             	add    esp,0x10
c000bb95:	90                   	nop
c000bb96:	83 c4 0c             	add    esp,0xc
c000bb99:	c3                   	ret    

c000bb9a <File::open(FileOpenMode)>:
c000bb9a:	53                   	push   ebx
c000bb9b:	b8 0b 00 00 00       	mov    eax,0xb
c000bba0:	83 ec 08             	sub    esp,0x8
c000bba3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bba7:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000bbae:	83 fa 19             	cmp    edx,0x19
c000bbb1:	77 40                	ja     c000bbf3 <File::open(FileOpenMode)+0x59>
c000bbb3:	8b 14 95 80 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4780]
c000bbba:	85 d2                	test   edx,edx
c000bbbc:	74 35                	je     c000bbf3 <File::open(FileOpenMode)+0x59>
c000bbbe:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000bbc4:	85 d2                	test   edx,edx
c000bbc6:	74 2b                	je     c000bbf3 <File::open(FileOpenMode)+0x59>
c000bbc8:	b8 06 00 00 00       	mov    eax,0x6
c000bbcd:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000bbd1:	75 20                	jne    c000bbf3 <File::open(FileOpenMode)+0x59>
c000bbd3:	8b 02                	mov    eax,DWORD PTR [edx]
c000bbd5:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000bbdb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bbdf:	51                   	push   ecx
c000bbe0:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000bbe3:	51                   	push   ecx
c000bbe4:	52                   	push   edx
c000bbe5:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000bbe8:	83 c4 10             	add    esp,0x10
c000bbeb:	85 c0                	test   eax,eax
c000bbed:	75 04                	jne    c000bbf3 <File::open(FileOpenMode)+0x59>
c000bbef:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000bbf3:	83 c4 08             	add    esp,0x8
c000bbf6:	5b                   	pop    ebx
c000bbf7:	c3                   	ret    

c000bbf8 <File::close()>:
c000bbf8:	53                   	push   ebx
c000bbf9:	b8 0b 00 00 00       	mov    eax,0xb
c000bbfe:	83 ec 08             	sub    esp,0x8
c000bc01:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bc05:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bc0c:	83 f9 19             	cmp    ecx,0x19
c000bc0f:	77 41                	ja     c000bc52 <File::close()+0x5a>
c000bc11:	8b 1c 8d 80 b8 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd4780]
c000bc18:	85 db                	test   ebx,ebx
c000bc1a:	74 36                	je     c000bc52 <File::close()+0x5a>
c000bc1c:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000bc23:	74 2d                	je     c000bc52 <File::close()+0x5a>
c000bc25:	b8 05 00 00 00       	mov    eax,0x5
c000bc2a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bc2e:	74 22                	je     c000bc52 <File::close()+0x5a>
c000bc30:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c000bc34:	8b 04 8d 80 b8 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd4780]
c000bc3b:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000bc41:	53                   	push   ebx
c000bc42:	53                   	push   ebx
c000bc43:	8b 08                	mov    ecx,DWORD PTR [eax]
c000bc45:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000bc4b:	50                   	push   eax
c000bc4c:	ff 51 1c             	call   DWORD PTR [ecx+0x1c]
c000bc4f:	83 c4 10             	add    esp,0x10
c000bc52:	83 c4 08             	add    esp,0x8
c000bc55:	5b                   	pop    ebx
c000bc56:	c3                   	ret    
c000bc57:	90                   	nop

c000bc58 <File::seek(unsigned long long)>:
c000bc58:	56                   	push   esi
c000bc59:	53                   	push   ebx
c000bc5a:	b8 0b 00 00 00       	mov    eax,0xb
c000bc5f:	51                   	push   ecx
c000bc60:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000bc64:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bc68:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000bc6f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000bc73:	83 fa 19             	cmp    edx,0x19
c000bc76:	77 31                	ja     c000bca9 <File::seek(unsigned long long)+0x51>
c000bc78:	8b 14 95 80 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4780]
c000bc7f:	85 d2                	test   edx,edx
c000bc81:	74 26                	je     c000bca9 <File::seek(unsigned long long)+0x51>
c000bc83:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000bc89:	85 d2                	test   edx,edx
c000bc8b:	74 1c                	je     c000bca9 <File::seek(unsigned long long)+0x51>
c000bc8d:	b8 05 00 00 00       	mov    eax,0x5
c000bc92:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000bc96:	74 11                	je     c000bca9 <File::seek(unsigned long long)+0x51>
c000bc98:	8b 02                	mov    eax,DWORD PTR [edx]
c000bc9a:	53                   	push   ebx
c000bc9b:	51                   	push   ecx
c000bc9c:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000bca2:	52                   	push   edx
c000bca3:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000bca6:	83 c4 10             	add    esp,0x10
c000bca9:	5a                   	pop    edx
c000bcaa:	5b                   	pop    ebx
c000bcab:	5e                   	pop    esi
c000bcac:	c3                   	ret    
c000bcad:	90                   	nop

c000bcae <File::truncate(unsigned long long)>:
c000bcae:	56                   	push   esi
c000bcaf:	53                   	push   ebx
c000bcb0:	b8 0b 00 00 00       	mov    eax,0xb
c000bcb5:	51                   	push   ecx
c000bcb6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000bcba:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bcbe:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000bcc5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000bcc9:	83 fa 19             	cmp    edx,0x19
c000bccc:	77 31                	ja     c000bcff <File::truncate(unsigned long long)+0x51>
c000bcce:	8b 14 95 80 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4780]
c000bcd5:	85 d2                	test   edx,edx
c000bcd7:	74 26                	je     c000bcff <File::truncate(unsigned long long)+0x51>
c000bcd9:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000bcdf:	85 d2                	test   edx,edx
c000bce1:	74 1c                	je     c000bcff <File::truncate(unsigned long long)+0x51>
c000bce3:	b8 05 00 00 00       	mov    eax,0x5
c000bce8:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000bcec:	74 11                	je     c000bcff <File::truncate(unsigned long long)+0x51>
c000bcee:	8b 02                	mov    eax,DWORD PTR [edx]
c000bcf0:	53                   	push   ebx
c000bcf1:	51                   	push   ecx
c000bcf2:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000bcf8:	52                   	push   edx
c000bcf9:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000bcfc:	83 c4 10             	add    esp,0x10
c000bcff:	5a                   	pop    edx
c000bd00:	5b                   	pop    ebx
c000bd01:	5e                   	pop    esi
c000bd02:	c3                   	ret    
c000bd03:	90                   	nop

c000bd04 <File::tell(unsigned long long*)>:
c000bd04:	83 ec 0c             	sub    esp,0xc
c000bd07:	b8 0b 00 00 00       	mov    eax,0xb
c000bd0c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000bd10:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000bd17:	83 fa 19             	cmp    edx,0x19
c000bd1a:	77 34                	ja     c000bd50 <File::tell(unsigned long long*)+0x4c>
c000bd1c:	8b 14 95 80 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4780]
c000bd23:	85 d2                	test   edx,edx
c000bd25:	74 29                	je     c000bd50 <File::tell(unsigned long long*)+0x4c>
c000bd27:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000bd2d:	85 d2                	test   edx,edx
c000bd2f:	74 1f                	je     c000bd50 <File::tell(unsigned long long*)+0x4c>
c000bd31:	b8 05 00 00 00       	mov    eax,0x5
c000bd36:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000bd3a:	74 14                	je     c000bd50 <File::tell(unsigned long long*)+0x4c>
c000bd3c:	50                   	push   eax
c000bd3d:	8b 02                	mov    eax,DWORD PTR [edx]
c000bd3f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bd43:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000bd49:	52                   	push   edx
c000bd4a:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000bd4d:	83 c4 10             	add    esp,0x10
c000bd50:	83 c4 0c             	add    esp,0xc
c000bd53:	c3                   	ret    

c000bd54 <File::rewind()>:
c000bd54:	83 ec 10             	sub    esp,0x10
c000bd57:	6a 00                	push   0x0
c000bd59:	6a 00                	push   0x0
c000bd5b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd5f:	e8 f4 fe ff ff       	call   c000bc58 <File::seek(unsigned long long)>
c000bd64:	83 c4 1c             	add    esp,0x1c
c000bd67:	c3                   	ret    

c000bd68 <File::unlink()>:
c000bd68:	83 ec 0c             	sub    esp,0xc
c000bd6b:	b8 0b 00 00 00       	mov    eax,0xb
c000bd70:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bd74:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bd7b:	83 f9 19             	cmp    ecx,0x19
c000bd7e:	77 2f                	ja     c000bdaf <File::unlink()+0x47>
c000bd80:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000bd87:	85 c9                	test   ecx,ecx
c000bd89:	74 24                	je     c000bdaf <File::unlink()+0x47>
c000bd8b:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bd91:	85 c9                	test   ecx,ecx
c000bd93:	74 1a                	je     c000bdaf <File::unlink()+0x47>
c000bd95:	b8 06 00 00 00       	mov    eax,0x6
c000bd9a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bd9e:	75 0f                	jne    c000bdaf <File::unlink()+0x47>
c000bda0:	83 c2 0d             	add    edx,0xd
c000bda3:	50                   	push   eax
c000bda4:	50                   	push   eax
c000bda5:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bda7:	52                   	push   edx
c000bda8:	51                   	push   ecx
c000bda9:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000bdac:	83 c4 10             	add    esp,0x10
c000bdaf:	83 c4 0c             	add    esp,0xc
c000bdb2:	c3                   	ret    
c000bdb3:	90                   	nop

c000bdb4 <File::rename(char const*)>:
c000bdb4:	83 ec 0c             	sub    esp,0xc
c000bdb7:	b8 0b 00 00 00       	mov    eax,0xb
c000bdbc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bdc0:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bdc7:	83 f9 19             	cmp    ecx,0x19
c000bdca:	77 32                	ja     c000bdfe <File::rename(char const*)+0x4a>
c000bdcc:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000bdd3:	85 c9                	test   ecx,ecx
c000bdd5:	74 27                	je     c000bdfe <File::rename(char const*)+0x4a>
c000bdd7:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bddd:	85 c9                	test   ecx,ecx
c000bddf:	74 1d                	je     c000bdfe <File::rename(char const*)+0x4a>
c000bde1:	b8 06 00 00 00       	mov    eax,0x6
c000bde6:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bdea:	75 12                	jne    c000bdfe <File::rename(char const*)+0x4a>
c000bdec:	83 c2 0d             	add    edx,0xd
c000bdef:	50                   	push   eax
c000bdf0:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bdf2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bdf6:	52                   	push   edx
c000bdf7:	51                   	push   ecx
c000bdf8:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000bdfb:	83 c4 10             	add    esp,0x10
c000bdfe:	83 c4 0c             	add    esp,0xc
c000be01:	c3                   	ret    

c000be02 <File::chfatattr(unsigned char, unsigned char)>:
c000be02:	57                   	push   edi
c000be03:	b8 0b 00 00 00       	mov    eax,0xb
c000be08:	56                   	push   esi
c000be09:	53                   	push   ebx
c000be0a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000be0e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000be12:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000be19:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000be1d:	83 f9 19             	cmp    ecx,0x19
c000be20:	77 37                	ja     c000be59 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000be22:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000be29:	85 c9                	test   ecx,ecx
c000be2b:	74 2c                	je     c000be59 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000be2d:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000be33:	85 c9                	test   ecx,ecx
c000be35:	74 22                	je     c000be59 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000be37:	b8 06 00 00 00       	mov    eax,0x6
c000be3c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000be40:	75 17                	jne    c000be59 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000be42:	8b 39                	mov    edi,DWORD PTR [ecx]
c000be44:	89 f0                	mov    eax,esi
c000be46:	83 c2 0d             	add    edx,0xd
c000be49:	0f b6 f0             	movzx  esi,al
c000be4c:	0f b6 db             	movzx  ebx,bl
c000be4f:	56                   	push   esi
c000be50:	53                   	push   ebx
c000be51:	52                   	push   edx
c000be52:	51                   	push   ecx
c000be53:	ff 57 38             	call   DWORD PTR [edi+0x38]
c000be56:	83 c4 10             	add    esp,0x10
c000be59:	5b                   	pop    ebx
c000be5a:	5e                   	pop    esi
c000be5b:	5f                   	pop    edi
c000be5c:	c3                   	ret    
c000be5d:	90                   	nop

c000be5e <File::exists()>:
c000be5e:	83 ec 0c             	sub    esp,0xc
c000be61:	31 c0                	xor    eax,eax
c000be63:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000be67:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000be6e:	83 f9 19             	cmp    ecx,0x19
c000be71:	77 24                	ja     c000be97 <File::exists()+0x39>
c000be73:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000be7a:	85 c9                	test   ecx,ecx
c000be7c:	74 19                	je     c000be97 <File::exists()+0x39>
c000be7e:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000be84:	85 c9                	test   ecx,ecx
c000be86:	74 0f                	je     c000be97 <File::exists()+0x39>
c000be88:	83 c2 0d             	add    edx,0xd
c000be8b:	50                   	push   eax
c000be8c:	50                   	push   eax
c000be8d:	8b 01                	mov    eax,DWORD PTR [ecx]
c000be8f:	52                   	push   edx
c000be90:	51                   	push   ecx
c000be91:	ff 50 48             	call   DWORD PTR [eax+0x48]
c000be94:	83 c4 10             	add    esp,0x10
c000be97:	83 c4 0c             	add    esp,0xc
c000be9a:	c3                   	ret    
c000be9b:	90                   	nop

c000be9c <File::stat(unsigned long long*, bool*)>:
c000be9c:	56                   	push   esi
c000be9d:	53                   	push   ebx
c000be9e:	50                   	push   eax
c000be9f:	b8 0b 00 00 00       	mov    eax,0xb
c000bea4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bea8:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000beac:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000beb3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000beb7:	83 f9 19             	cmp    ecx,0x19
c000beba:	77 3d                	ja     c000bef9 <File::stat(unsigned long long*, bool*)+0x5d>
c000bebc:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000bec3:	85 c9                	test   ecx,ecx
c000bec5:	74 32                	je     c000bef9 <File::stat(unsigned long long*, bool*)+0x5d>
c000bec7:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000becd:	85 c9                	test   ecx,ecx
c000becf:	74 28                	je     c000bef9 <File::stat(unsigned long long*, bool*)+0x5d>
c000bed1:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bed3:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bed7:	74 13                	je     c000beec <File::stat(unsigned long long*, bool*)+0x50>
c000bed9:	83 ec 04             	sub    esp,0x4
c000bedc:	56                   	push   esi
c000bedd:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000bee3:	51                   	push   ecx
c000bee4:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000bee7:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000beea:	eb 0a                	jmp    c000bef6 <File::stat(unsigned long long*, bool*)+0x5a>
c000beec:	53                   	push   ebx
c000beed:	83 c2 0d             	add    edx,0xd
c000bef0:	56                   	push   esi
c000bef1:	52                   	push   edx
c000bef2:	51                   	push   ecx
c000bef3:	ff 50 34             	call   DWORD PTR [eax+0x34]
c000bef6:	83 c4 10             	add    esp,0x10
c000bef9:	5a                   	pop    edx
c000befa:	5b                   	pop    ebx
c000befb:	5e                   	pop    esi
c000befc:	c3                   	ret    

c000befd <Fs::setcwd(Process*, char*)>:
c000befd:	55                   	push   ebp
c000befe:	57                   	push   edi
c000beff:	56                   	push   esi
c000bf00:	53                   	push   ebx
c000bf01:	81 ec 1c 02 00 00    	sub    esp,0x21c
c000bf07:	8b ac 24 30 02 00 00 	mov    ebp,DWORD PTR [esp+0x230]
c000bf0e:	6a 00                	push   0x0
c000bf10:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000bf16:	57                   	push   edi
c000bf17:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000bf1e:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000bf22:	56                   	push   esi
c000bf23:	e8 5c f9 ff ff       	call   c000b884 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c000bf28:	89 34 24             	mov    DWORD PTR [esp],esi
c000bf2b:	e8 40 46 ff ff       	call   c0000570 <strlen>
c000bf30:	83 c4 10             	add    esp,0x10
c000bf33:	83 f8 02             	cmp    eax,0x2
c000bf36:	77 15                	ja     c000bf4d <Fs::setcwd(Process*, char*)+0x50>
c000bf38:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000bf3d:	83 eb 41             	sub    ebx,0x41
c000bf40:	8b 04 9d 80 b8 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd4780]
c000bf47:	85 c0                	test   eax,eax
c000bf49:	75 1c                	jne    c000bf67 <Fs::setcwd(Process*, char*)+0x6a>
c000bf4b:	eb 2f                	jmp    c000bf7c <Fs::setcwd(Process*, char*)+0x7f>
c000bf4d:	83 ec 0c             	sub    esp,0xc
c000bf50:	56                   	push   esi
c000bf51:	e8 1a 46 ff ff       	call   c0000570 <strlen>
c000bf56:	83 c4 10             	add    esp,0x10
c000bf59:	83 f8 03             	cmp    eax,0x3
c000bf5c:	75 57                	jne    c000bfb5 <Fs::setcwd(Process*, char*)+0xb8>
c000bf5e:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000bf63:	75 50                	jne    c000bfb5 <Fs::setcwd(Process*, char*)+0xb8>
c000bf65:	eb d1                	jmp    c000bf38 <Fs::setcwd(Process*, char*)+0x3b>
c000bf67:	83 b8 74 01 00 00 00 	cmp    DWORD PTR [eax+0x174],0x0
c000bf6e:	75 0c                	jne    c000bf7c <Fs::setcwd(Process*, char*)+0x7f>
c000bf70:	83 ec 0c             	sub    esp,0xc
c000bf73:	50                   	push   eax
c000bf74:	e8 9d 1d 00 00       	call   c000dd16 <LogicalDisk::mount()>
c000bf79:	83 c4 10             	add    esp,0x10
c000bf7c:	b8 03 00 00 00       	mov    eax,0x3
c000bf81:	83 fb 19             	cmp    ebx,0x19
c000bf84:	0f 87 c6 00 00 00    	ja     c000c050 <Fs::setcwd(Process*, char*)+0x153>
c000bf8a:	8b 14 9d 80 b8 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffd4780]
c000bf91:	b8 05 00 00 00       	mov    eax,0x5
c000bf96:	85 d2                	test   edx,edx
c000bf98:	0f 84 b2 00 00 00    	je     c000c050 <Fs::setcwd(Process*, char*)+0x153>
c000bf9e:	b8 06 00 00 00       	mov    eax,0x6
c000bfa3:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c000bfaa:	0f 85 92 00 00 00    	jne    c000c042 <Fs::setcwd(Process*, char*)+0x145>
c000bfb0:	e9 9b 00 00 00       	jmp    c000c050 <Fs::setcwd(Process*, char*)+0x153>
c000bfb5:	83 ec 0c             	sub    esp,0xc
c000bfb8:	68 14 01 00 00       	push   0x114
c000bfbd:	e8 24 bb ff ff       	call   c0007ae6 <malloc>
c000bfc2:	83 c4 0c             	add    esp,0xc
c000bfc5:	89 c3                	mov    ebx,eax
c000bfc7:	55                   	push   ebp
c000bfc8:	56                   	push   esi
c000bfc9:	50                   	push   eax
c000bfca:	e8 ad fb ff ff       	call   c000bb7c <File::File(char const*, Process*)>
c000bfcf:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000bfd4:	83 c4 0c             	add    esp,0xc
c000bfd7:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000bfdb:	50                   	push   eax
c000bfdc:	8d 44 24 10          	lea    eax,[esp+0x10]
c000bfe0:	50                   	push   eax
c000bfe1:	53                   	push   ebx
c000bfe2:	e8 b5 fe ff ff       	call   c000be9c <File::stat(unsigned long long*, bool*)>
c000bfe7:	83 c4 10             	add    esp,0x10
c000bfea:	83 f8 02             	cmp    eax,0x2
c000bfed:	74 27                	je     c000c016 <Fs::setcwd(Process*, char*)+0x119>
c000bfef:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000bff4:	75 1c                	jne    c000c012 <Fs::setcwd(Process*, char*)+0x115>
c000bff6:	b8 02 00 00 00       	mov    eax,0x2
c000bffb:	85 db                	test   ebx,ebx
c000bffd:	74 51                	je     c000c050 <Fs::setcwd(Process*, char*)+0x153>
c000bfff:	83 ec 0c             	sub    esp,0xc
c000c002:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c004:	53                   	push   ebx
c000c005:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000c008:	83 c4 10             	add    esp,0x10
c000c00b:	b8 02 00 00 00       	mov    eax,0x2
c000c010:	eb 3e                	jmp    c000c050 <Fs::setcwd(Process*, char*)+0x153>
c000c012:	85 c0                	test   eax,eax
c000c014:	74 1c                	je     c000c032 <Fs::setcwd(Process*, char*)+0x135>
c000c016:	b8 01 00 00 00       	mov    eax,0x1
c000c01b:	85 db                	test   ebx,ebx
c000c01d:	74 31                	je     c000c050 <Fs::setcwd(Process*, char*)+0x153>
c000c01f:	83 ec 0c             	sub    esp,0xc
c000c022:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c024:	53                   	push   ebx
c000c025:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000c028:	83 c4 10             	add    esp,0x10
c000c02b:	b8 01 00 00 00       	mov    eax,0x1
c000c030:	eb 1e                	jmp    c000c050 <Fs::setcwd(Process*, char*)+0x153>
c000c032:	85 db                	test   ebx,ebx
c000c034:	74 0c                	je     c000c042 <Fs::setcwd(Process*, char*)+0x145>
c000c036:	83 ec 0c             	sub    esp,0xc
c000c039:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c03b:	53                   	push   ebx
c000c03c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000c03f:	83 c4 10             	add    esp,0x10
c000c042:	50                   	push   eax
c000c043:	50                   	push   eax
c000c044:	56                   	push   esi
c000c045:	57                   	push   edi
c000c046:	e8 f5 45 ff ff       	call   c0000640 <strcpy>
c000c04b:	83 c4 10             	add    esp,0x10
c000c04e:	31 c0                	xor    eax,eax
c000c050:	81 c4 1c 02 00 00    	add    esp,0x21c
c000c056:	5b                   	pop    ebx
c000c057:	5e                   	pop    esi
c000c058:	5f                   	pop    edi
c000c059:	5d                   	pop    ebp
c000c05a:	c3                   	ret    
c000c05b:	90                   	nop

c000c05c <Directory::Directory(char const*, Process*)>:
c000c05c:	83 ec 0c             	sub    esp,0xc
c000c05f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c063:	83 ec 08             	sub    esp,0x8
c000c066:	6a 00                	push   0x0
c000c068:	50                   	push   eax
c000c069:	e8 80 d1 ff ff       	call   c00091ee <UnixFile::UnixFile(int)>
c000c06e:	83 c4 10             	add    esp,0x10
c000c071:	ba 10 1b 02 c0       	mov    edx,0xc0021b10
c000c076:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c07a:	89 10                	mov    DWORD PTR [eax],edx
c000c07c:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c000c081:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000c085:	0f 95 c0             	setne  al
c000c088:	0f b6 c0             	movzx  eax,al
c000c08b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c08f:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c000c095:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c099:	83 c2 0d             	add    edx,0xd
c000c09c:	50                   	push   eax
c000c09d:	51                   	push   ecx
c000c09e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0a2:	52                   	push   edx
c000c0a3:	e8 dc f7 ff ff       	call   c000b884 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c000c0a8:	83 c4 10             	add    esp,0x10
c000c0ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0af:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000c0b2:	83 e8 41             	sub    eax,0x41
c000c0b5:	88 c2                	mov    dl,al
c000c0b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0bb:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000c0c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0c5:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000c0c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0cd:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000c0d3:	0f b6 c0             	movzx  eax,al
c000c0d6:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000c0dd:	85 c0                	test   eax,eax
c000c0df:	74 3e                	je     c000c11f <Directory::Directory(char const*, Process*)+0xc3>
c000c0e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0e5:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000c0eb:	0f b6 c0             	movzx  eax,al
c000c0ee:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000c0f5:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000c0fb:	85 c0                	test   eax,eax
c000c0fd:	75 20                	jne    c000c11f <Directory::Directory(char const*, Process*)+0xc3>
c000c0ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c103:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000c109:	0f b6 c0             	movzx  eax,al
c000c10c:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000c113:	83 ec 0c             	sub    esp,0xc
c000c116:	50                   	push   eax
c000c117:	e8 fa 1b 00 00       	call   c000dd16 <LogicalDisk::mount()>
c000c11c:	83 c4 10             	add    esp,0x10
c000c11f:	90                   	nop
c000c120:	83 c4 0c             	add    esp,0xc
c000c123:	c3                   	ret    

c000c124 <Directory::open()>:
c000c124:	53                   	push   ebx
c000c125:	b8 0b 00 00 00       	mov    eax,0xb
c000c12a:	83 ec 08             	sub    esp,0x8
c000c12d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c131:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000c138:	83 fa 19             	cmp    edx,0x19
c000c13b:	77 3d                	ja     c000c17a <Directory::open()+0x56>
c000c13d:	8b 14 95 80 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4780]
c000c144:	85 d2                	test   edx,edx
c000c146:	74 32                	je     c000c17a <Directory::open()+0x56>
c000c148:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000c14e:	85 d2                	test   edx,edx
c000c150:	74 28                	je     c000c17a <Directory::open()+0x56>
c000c152:	b8 06 00 00 00       	mov    eax,0x6
c000c157:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000c15b:	75 1d                	jne    c000c17a <Directory::open()+0x56>
c000c15d:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000c163:	50                   	push   eax
c000c164:	8b 02                	mov    eax,DWORD PTR [edx]
c000c166:	51                   	push   ecx
c000c167:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000c16a:	51                   	push   ecx
c000c16b:	52                   	push   edx
c000c16c:	ff 50 50             	call   DWORD PTR [eax+0x50]
c000c16f:	83 c4 10             	add    esp,0x10
c000c172:	85 c0                	test   eax,eax
c000c174:	75 04                	jne    c000c17a <Directory::open()+0x56>
c000c176:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000c17a:	83 c4 08             	add    esp,0x8
c000c17d:	5b                   	pop    ebx
c000c17e:	c3                   	ret    
c000c17f:	90                   	nop

c000c180 <Directory::close()>:
c000c180:	53                   	push   ebx
c000c181:	b8 0b 00 00 00       	mov    eax,0xb
c000c186:	83 ec 08             	sub    esp,0x8
c000c189:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c18d:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c194:	83 f9 19             	cmp    ecx,0x19
c000c197:	77 41                	ja     c000c1da <Directory::close()+0x5a>
c000c199:	8b 1c 8d 80 b8 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd4780]
c000c1a0:	85 db                	test   ebx,ebx
c000c1a2:	74 36                	je     c000c1da <Directory::close()+0x5a>
c000c1a4:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000c1ab:	74 2d                	je     c000c1da <Directory::close()+0x5a>
c000c1ad:	b8 05 00 00 00       	mov    eax,0x5
c000c1b2:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000c1b6:	74 22                	je     c000c1da <Directory::close()+0x5a>
c000c1b8:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c000c1bc:	8b 04 8d 80 b8 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd4780]
c000c1c3:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000c1c9:	53                   	push   ebx
c000c1ca:	53                   	push   ebx
c000c1cb:	8b 08                	mov    ecx,DWORD PTR [eax]
c000c1cd:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000c1d3:	50                   	push   eax
c000c1d4:	ff 51 20             	call   DWORD PTR [ecx+0x20]
c000c1d7:	83 c4 10             	add    esp,0x10
c000c1da:	83 c4 08             	add    esp,0x8
c000c1dd:	5b                   	pop    ebx
c000c1de:	c3                   	ret    
c000c1df:	90                   	nop

c000c1e0 <Directory::unlink()>:
c000c1e0:	83 ec 0c             	sub    esp,0xc
c000c1e3:	b8 0b 00 00 00       	mov    eax,0xb
c000c1e8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c1ec:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c1f3:	83 f9 19             	cmp    ecx,0x19
c000c1f6:	77 2f                	ja     c000c227 <Directory::unlink()+0x47>
c000c1f8:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000c1ff:	85 c9                	test   ecx,ecx
c000c201:	74 24                	je     c000c227 <Directory::unlink()+0x47>
c000c203:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000c209:	85 c9                	test   ecx,ecx
c000c20b:	74 1a                	je     c000c227 <Directory::unlink()+0x47>
c000c20d:	b8 06 00 00 00       	mov    eax,0x6
c000c212:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000c216:	75 0f                	jne    c000c227 <Directory::unlink()+0x47>
c000c218:	83 c2 0d             	add    edx,0xd
c000c21b:	50                   	push   eax
c000c21c:	50                   	push   eax
c000c21d:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c21f:	52                   	push   edx
c000c220:	51                   	push   ecx
c000c221:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000c224:	83 c4 10             	add    esp,0x10
c000c227:	83 c4 0c             	add    esp,0xc
c000c22a:	c3                   	ret    
c000c22b:	90                   	nop

c000c22c <Directory::rename(char const*)>:
c000c22c:	83 ec 0c             	sub    esp,0xc
c000c22f:	b8 0b 00 00 00       	mov    eax,0xb
c000c234:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c238:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c23f:	83 f9 19             	cmp    ecx,0x19
c000c242:	77 32                	ja     c000c276 <Directory::rename(char const*)+0x4a>
c000c244:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000c24b:	85 c9                	test   ecx,ecx
c000c24d:	74 27                	je     c000c276 <Directory::rename(char const*)+0x4a>
c000c24f:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000c255:	85 c9                	test   ecx,ecx
c000c257:	74 1d                	je     c000c276 <Directory::rename(char const*)+0x4a>
c000c259:	b8 06 00 00 00       	mov    eax,0x6
c000c25e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000c262:	75 12                	jne    c000c276 <Directory::rename(char const*)+0x4a>
c000c264:	83 c2 0d             	add    edx,0xd
c000c267:	50                   	push   eax
c000c268:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c26a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c26e:	52                   	push   edx
c000c26f:	51                   	push   ecx
c000c270:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000c273:	83 c4 10             	add    esp,0x10
c000c276:	83 c4 0c             	add    esp,0xc
c000c279:	c3                   	ret    

c000c27a <Directory::exists()>:
c000c27a:	83 ec 0c             	sub    esp,0xc
c000c27d:	31 c0                	xor    eax,eax
c000c27f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c283:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c28a:	83 f9 19             	cmp    ecx,0x19
c000c28d:	77 24                	ja     c000c2b3 <Directory::exists()+0x39>
c000c28f:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000c296:	85 c9                	test   ecx,ecx
c000c298:	74 19                	je     c000c2b3 <Directory::exists()+0x39>
c000c29a:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000c2a0:	85 c9                	test   ecx,ecx
c000c2a2:	74 0f                	je     c000c2b3 <Directory::exists()+0x39>
c000c2a4:	83 c2 0d             	add    edx,0xd
c000c2a7:	50                   	push   eax
c000c2a8:	50                   	push   eax
c000c2a9:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c2ab:	52                   	push   edx
c000c2ac:	51                   	push   ecx
c000c2ad:	ff 50 48             	call   DWORD PTR [eax+0x48]
c000c2b0:	83 c4 10             	add    esp,0x10
c000c2b3:	83 c4 0c             	add    esp,0xc
c000c2b6:	c3                   	ret    
c000c2b7:	90                   	nop

c000c2b8 <Directory::read(dirent*)>:
c000c2b8:	83 ec 1c             	sub    esp,0x1c
c000c2bb:	b8 0b 00 00 00       	mov    eax,0xb
c000c2c0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000c2c4:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c2cb:	83 f9 19             	cmp    ecx,0x19
c000c2ce:	77 30                	ja     c000c300 <Directory::read(dirent*)+0x48>
c000c2d0:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000c2d7:	85 c9                	test   ecx,ecx
c000c2d9:	74 25                	je     c000c300 <Directory::read(dirent*)+0x48>
c000c2db:	83 b9 74 01 00 00 00 	cmp    DWORD PTR [ecx+0x174],0x0
c000c2e2:	74 1c                	je     c000c300 <Directory::read(dirent*)+0x48>
c000c2e4:	83 ec 0c             	sub    esp,0xc
c000c2e7:	8b 02                	mov    eax,DWORD PTR [edx]
c000c2e9:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000c2ed:	51                   	push   ecx
c000c2ee:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c2f2:	6a 00                	push   0x0
c000c2f4:	68 10 01 00 00       	push   0x110
c000c2f9:	52                   	push   edx
c000c2fa:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000c2fd:	83 c4 20             	add    esp,0x20
c000c300:	83 c4 1c             	add    esp,0x1c
c000c303:	c3                   	ret    

c000c304 <Directory::create()>:
c000c304:	83 ec 0c             	sub    esp,0xc
c000c307:	b8 0b 00 00 00       	mov    eax,0xb
c000c30c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c310:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c317:	83 f9 19             	cmp    ecx,0x19
c000c31a:	77 2f                	ja     c000c34b <Directory::create()+0x47>
c000c31c:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000c323:	85 c9                	test   ecx,ecx
c000c325:	74 24                	je     c000c34b <Directory::create()+0x47>
c000c327:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000c32d:	85 c9                	test   ecx,ecx
c000c32f:	74 1a                	je     c000c34b <Directory::create()+0x47>
c000c331:	b8 06 00 00 00       	mov    eax,0x6
c000c336:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000c33a:	75 0f                	jne    c000c34b <Directory::create()+0x47>
c000c33c:	83 c2 0d             	add    edx,0xd
c000c33f:	50                   	push   eax
c000c340:	50                   	push   eax
c000c341:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c343:	52                   	push   edx
c000c344:	51                   	push   ecx
c000c345:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000c348:	83 c4 10             	add    esp,0x10
c000c34b:	83 c4 0c             	add    esp,0xc
c000c34e:	c3                   	ret    
c000c34f:	90                   	nop

c000c350 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000c350:	b8 0a 00 00 00       	mov    eax,0xa
c000c355:	c3                   	ret    
c000c356:	66 90                	xchg   ax,ax

c000c358 <Bus::Bus(char const*)>:
c000c358:	83 ec 0c             	sub    esp,0xc
c000c35b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c35f:	83 ec 08             	sub    esp,0x8
c000c362:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c366:	50                   	push   eax
c000c367:	e8 22 08 00 00       	call   c000cb8e <Device::Device(char const*)>
c000c36c:	83 c4 10             	add    esp,0x10
c000c36f:	ba 2c 1b 02 c0       	mov    edx,0xc0021b2c
c000c374:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c378:	89 10                	mov    DWORD PTR [eax],edx
c000c37a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c37e:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000c388:	90                   	nop
c000c389:	83 c4 0c             	add    esp,0xc
c000c38c:	c3                   	ret    
c000c38d:	90                   	nop
c000c38e:	66 90                	xchg   ax,ax

c000c390 <Bus::~Bus()>:
c000c390:	83 ec 0c             	sub    esp,0xc
c000c393:	ba 2c 1b 02 c0       	mov    edx,0xc0021b2c
c000c398:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c39c:	89 10                	mov    DWORD PTR [eax],edx
c000c39e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c3a2:	83 ec 0c             	sub    esp,0xc
c000c3a5:	50                   	push   eax
c000c3a6:	e8 4d 05 00 00       	call   c000c8f8 <Device::~Device()>
c000c3ab:	83 c4 10             	add    esp,0x10
c000c3ae:	90                   	nop
c000c3af:	83 c4 0c             	add    esp,0xc
c000c3b2:	c3                   	ret    
c000c3b3:	90                   	nop

c000c3b4 <Bus::~Bus()>:
c000c3b4:	83 ec 0c             	sub    esp,0xc
c000c3b7:	83 ec 0c             	sub    esp,0xc
c000c3ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3be:	e8 cd ff ff ff       	call   c000c390 <Bus::~Bus()>
c000c3c3:	83 c4 10             	add    esp,0x10
c000c3c6:	83 ec 08             	sub    esp,0x8
c000c3c9:	68 58 01 00 00       	push   0x158
c000c3ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3d2:	e8 71 e4 ff ff       	call   c000a848 <operator delete(void*, unsigned long)>
c000c3d7:	83 c4 10             	add    esp,0x10
c000c3da:	83 c4 0c             	add    esp,0xc
c000c3dd:	c3                   	ret    

c000c3de <beepThread(void*)>:
c000c3de:	83 ec 0c             	sub    esp,0xc
c000c3e1:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000c3e6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c3ea:	48                   	dec    eax
c000c3eb:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000c3f0:	75 01                	jne    c000c3f3 <beepThread(void*)+0x15>
c000c3f2:	fb                   	sti    
c000c3f3:	83 ec 0c             	sub    esp,0xc
c000c3f6:	6b c2 0a             	imul   eax,edx,0xa
c000c3f9:	50                   	push   eax
c000c3fa:	e8 dd a0 00 00       	call   c00164dc <milliTenthSleep(unsigned int)>
c000c3ff:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000c406:	e8 2c c0 00 00       	call   c0018437 <HalMakeBeep(int)>
c000c40b:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000c413:	83 c4 1c             	add    esp,0x1c
c000c416:	e9 a5 9f 00 00       	jmp    c00163c0 <blockTask(TaskState)>

c000c41b <Krnl::beep(int, int, bool)>:
c000c41b:	56                   	push   esi
c000c41c:	53                   	push   ebx
c000c41d:	83 ec 10             	sub    esp,0x10
c000c420:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000c424:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000c428:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c42c:	e8 06 c0 00 00       	call   c0018437 <HalMakeBeep(int)>
c000c431:	83 c4 10             	add    esp,0x10
c000c434:	89 f0                	mov    eax,esi
c000c436:	84 c0                	test   al,al
c000c438:	74 1e                	je     c000c458 <Krnl::beep(int, int, bool)+0x3d>
c000c43a:	83 ec 0c             	sub    esp,0xc
c000c43d:	6b db 0a             	imul   ebx,ebx,0xa
c000c440:	53                   	push   ebx
c000c441:	e8 96 a0 00 00       	call   c00164dc <milliTenthSleep(unsigned int)>
c000c446:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000c44e:	83 c4 14             	add    esp,0x14
c000c451:	5b                   	pop    ebx
c000c452:	5e                   	pop    esi
c000c453:	e9 df bf 00 00       	jmp    c0018437 <HalMakeBeep(int)>
c000c458:	68 e6 00 00 00       	push   0xe6
c000c45d:	53                   	push   ebx
c000c45e:	68 de c3 00 c0       	push   0xc000c3de
c000c463:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000c469:	e8 ee 9a 00 00       	call   c0015f5c <Process::createThread(void (*)(void*), void*, int)>
c000c46e:	83 c4 14             	add    esp,0x14
c000c471:	5b                   	pop    ebx
c000c472:	5e                   	pop    esi
c000c473:	c3                   	ret    

c000c474 <User::loadClockSettings(int)>:
c000c474:	53                   	push   ebx
c000c475:	83 ec 14             	sub    esp,0x14
c000c478:	68 14 01 00 00       	push   0x114
c000c47d:	e8 64 b6 ff ff       	call   c0007ae6 <malloc>
c000c482:	83 c4 0c             	add    esp,0xc
c000c485:	89 c3                	mov    ebx,eax
c000c487:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000c48d:	68 50 1b 02 c0       	push   0xc0021b50
c000c492:	50                   	push   eax
c000c493:	e8 e4 f6 ff ff       	call   c000bb7c <File::File(char const*, Process*)>
c000c498:	58                   	pop    eax
c000c499:	5a                   	pop    edx
c000c49a:	6a 01                	push   0x1
c000c49c:	53                   	push   ebx
c000c49d:	e8 f8 f6 ff ff       	call   c000bb9a <File::open(FileOpenMode)>
c000c4a2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000c4a5:	e8 4e f7 ff ff       	call   c000bbf8 <File::close()>
c000c4aa:	83 c4 10             	add    esp,0x10
c000c4ad:	85 db                	test   ebx,ebx
c000c4af:	74 0f                	je     c000c4c0 <User::loadClockSettings(int)+0x4c>
c000c4b1:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c4b3:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000c4b7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000c4ba:	83 c4 08             	add    esp,0x8
c000c4bd:	5b                   	pop    ebx
c000c4be:	ff e0                	jmp    eax
c000c4c0:	83 c4 08             	add    esp,0x8
c000c4c3:	5b                   	pop    ebx
c000c4c4:	c3                   	ret    
c000c4c5:	90                   	nop

c000c4c6 <Clock::Clock(char const*)>:
c000c4c6:	83 ec 0c             	sub    esp,0xc
c000c4c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c4cd:	83 ec 08             	sub    esp,0x8
c000c4d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c4d4:	50                   	push   eax
c000c4d5:	e8 b4 06 00 00       	call   c000cb8e <Device::Device(char const*)>
c000c4da:	83 c4 10             	add    esp,0x10
c000c4dd:	ba 78 1b 02 c0       	mov    edx,0xc0021b78
c000c4e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c4e6:	89 10                	mov    DWORD PTR [eax],edx
c000c4e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c4ec:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000c4f6:	90                   	nop
c000c4f7:	83 c4 0c             	add    esp,0xc
c000c4fa:	c3                   	ret    
c000c4fb:	90                   	nop

c000c4fc <Clock::~Clock()>:
c000c4fc:	83 ec 0c             	sub    esp,0xc
c000c4ff:	ba 78 1b 02 c0       	mov    edx,0xc0021b78
c000c504:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c508:	89 10                	mov    DWORD PTR [eax],edx
c000c50a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c50e:	83 ec 0c             	sub    esp,0xc
c000c511:	50                   	push   eax
c000c512:	e8 e1 03 00 00       	call   c000c8f8 <Device::~Device()>
c000c517:	83 c4 10             	add    esp,0x10
c000c51a:	90                   	nop
c000c51b:	83 c4 0c             	add    esp,0xc
c000c51e:	c3                   	ret    
c000c51f:	90                   	nop

c000c520 <Clock::~Clock()>:
c000c520:	83 ec 0c             	sub    esp,0xc
c000c523:	83 ec 0c             	sub    esp,0xc
c000c526:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c52a:	e8 cd ff ff ff       	call   c000c4fc <Clock::~Clock()>
c000c52f:	83 c4 10             	add    esp,0x10
c000c532:	83 ec 08             	sub    esp,0x8
c000c535:	68 58 01 00 00       	push   0x158
c000c53a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c53e:	e8 05 e3 ff ff       	call   c000a848 <operator delete(void*, unsigned long)>
c000c543:	83 c4 10             	add    esp,0x10
c000c546:	83 c4 0c             	add    esp,0xc
c000c549:	c3                   	ret    

c000c54a <Clock::timeInSecondsLocal()>:
c000c54a:	53                   	push   ebx
c000c54b:	83 ec 14             	sub    esp,0x14
c000c54e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c552:	8b 10                	mov    edx,DWORD PTR [eax]
c000c554:	50                   	push   eax
c000c555:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000c558:	0f b6 0d 08 94 02 c0 	movzx  ecx,BYTE PTR ds:0xc0029408
c000c55f:	03 0d 0c 94 02 c0    	add    ecx,DWORD PTR ds:0xc002940c
c000c565:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000c56b:	89 cb                	mov    ebx,ecx
c000c56d:	c1 fb 1f             	sar    ebx,0x1f
c000c570:	01 c8                	add    eax,ecx
c000c572:	11 da                	adc    edx,ebx
c000c574:	83 c4 10             	add    esp,0x10
c000c577:	31 c9                	xor    ecx,ecx
c000c579:	80 3d 09 94 02 c0 00 	cmp    BYTE PTR ds:0xc0029409,0x0
c000c580:	74 05                	je     c000c587 <Clock::timeInSecondsLocal()+0x3d>
c000c582:	b9 08 07 00 00       	mov    ecx,0x708
c000c587:	31 db                	xor    ebx,ebx
c000c589:	01 c8                	add    eax,ecx
c000c58b:	11 da                	adc    edx,ebx
c000c58d:	83 c4 08             	add    esp,0x8
c000c590:	5b                   	pop    ebx
c000c591:	c3                   	ret    

c000c592 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000c592:	57                   	push   edi
c000c593:	56                   	push   esi
c000c594:	53                   	push   ebx
c000c595:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c599:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c59d:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c59f:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000c5a3:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000c5a6:	0f b6 05 08 94 02 c0 	movzx  eax,BYTE PTR ds:0xc0029408
c000c5ad:	03 05 0c 94 02 c0    	add    eax,DWORD PTR ds:0xc002940c
c000c5b3:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000c5b9:	99                   	cdq    
c000c5ba:	29 c6                	sub    esi,eax
c000c5bc:	19 d7                	sbb    edi,edx
c000c5be:	89 f0                	mov    eax,esi
c000c5c0:	89 fa                	mov    edx,edi
c000c5c2:	31 f6                	xor    esi,esi
c000c5c4:	80 3d 09 94 02 c0 00 	cmp    BYTE PTR ds:0xc0029409,0x0
c000c5cb:	74 05                	je     c000c5d2 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000c5cd:	be 08 07 00 00       	mov    esi,0x708
c000c5d2:	31 ff                	xor    edi,edi
c000c5d4:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000c5d8:	29 f0                	sub    eax,esi
c000c5da:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c5de:	19 fa                	sbb    edx,edi
c000c5e0:	89 d8                	mov    eax,ebx
c000c5e2:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c5e6:	5b                   	pop    ebx
c000c5e7:	5e                   	pop    esi
c000c5e8:	5f                   	pop    edi
c000c5e9:	ff e0                	jmp    eax

c000c5eb <datetimeToSeconds(datetime_t)>:
c000c5eb:	55                   	push   ebp
c000c5ec:	57                   	push   edi
c000c5ed:	56                   	push   esi
c000c5ee:	53                   	push   ebx
c000c5ef:	83 ec 0c             	sub    esp,0xc
c000c5f2:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000c5f6:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c000c5fa:	89 d6                	mov    esi,edx
c000c5fc:	0f b6 c7             	movzx  eax,bh
c000c5ff:	c1 ee 10             	shr    esi,0x10
c000c602:	6b e8 3c             	imul   ebp,eax,0x3c
c000c605:	81 ee 6c 07 00 00    	sub    esi,0x76c
c000c60b:	0f b6 ce             	movzx  ecx,dh
c000c60e:	89 df                	mov    edi,ebx
c000c610:	49                   	dec    ecx
c000c611:	c1 ef 10             	shr    edi,0x10
c000c614:	0f b6 db             	movzx  ebx,bl
c000c617:	89 f8                	mov    eax,edi
c000c619:	69 db 10 0e 00 00    	imul   ebx,ebx,0xe10
c000c61f:	0f b6 f8             	movzx  edi,al
c000c622:	0f b6 d2             	movzx  edx,dl
c000c625:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c000c629:	01 d8                	add    eax,ebx
c000c62b:	0f b7 de             	movzx  ebx,si
c000c62e:	89 04 24             	mov    DWORD PTR [esp],eax
c000c631:	c1 f8 1f             	sar    eax,0x1f
c000c634:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c638:	0f b6 c1             	movzx  eax,cl
c000c63b:	8b 0c 85 c0 1b 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffde440]
c000c642:	83 f8 01             	cmp    eax,0x1
c000c645:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c000c649:	76 27                	jbe    c000c672 <datetimeToSeconds(datetime_t)+0x87>
c000c64b:	83 e6 03             	and    esi,0x3
c000c64e:	75 22                	jne    c000c672 <datetimeToSeconds(datetime_t)+0x87>
c000c650:	31 d2                	xor    edx,edx
c000c652:	be 64 00 00 00       	mov    esi,0x64
c000c657:	89 d8                	mov    eax,ebx
c000c659:	f7 f6                	div    esi
c000c65b:	85 d2                	test   edx,edx
c000c65d:	75 12                	jne    c000c671 <datetimeToSeconds(datetime_t)+0x86>
c000c65f:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000c665:	be 90 01 00 00       	mov    esi,0x190
c000c66a:	99                   	cdq    
c000c66b:	f7 fe                	idiv   esi
c000c66d:	85 d2                	test   edx,edx
c000c66f:	75 01                	jne    c000c672 <datetimeToSeconds(datetime_t)+0x87>
c000c671:	41                   	inc    ecx
c000c672:	83 fb 46             	cmp    ebx,0x46
c000c675:	76 48                	jbe    c000c6bf <datetimeToSeconds(datetime_t)+0xd4>
c000c677:	be 46 00 00 00       	mov    esi,0x46
c000c67c:	bf 64 00 00 00       	mov    edi,0x64
c000c681:	bd 90 01 00 00       	mov    ebp,0x190
c000c686:	b8 6d 01 00 00       	mov    eax,0x16d
c000c68b:	f7 c6 03 00 00 00    	test   esi,0x3
c000c691:	75 23                	jne    c000c6b6 <datetimeToSeconds(datetime_t)+0xcb>
c000c693:	89 f0                	mov    eax,esi
c000c695:	99                   	cdq    
c000c696:	f7 ff                	idiv   edi
c000c698:	b8 6e 01 00 00       	mov    eax,0x16e
c000c69d:	85 d2                	test   edx,edx
c000c69f:	75 15                	jne    c000c6b6 <datetimeToSeconds(datetime_t)+0xcb>
c000c6a1:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000c6a7:	99                   	cdq    
c000c6a8:	f7 fd                	idiv   ebp
c000c6aa:	83 fa 01             	cmp    edx,0x1
c000c6ad:	19 c0                	sbb    eax,eax
c000c6af:	f7 d0                	not    eax
c000c6b1:	05 6e 01 00 00       	add    eax,0x16e
c000c6b6:	01 c1                	add    ecx,eax
c000c6b8:	46                   	inc    esi
c000c6b9:	39 de                	cmp    esi,ebx
c000c6bb:	7c c9                	jl     c000c686 <datetimeToSeconds(datetime_t)+0x9b>
c000c6bd:	eb 34                	jmp    c000c6f3 <datetimeToSeconds(datetime_t)+0x108>
c000c6bf:	74 32                	je     c000c6f3 <datetimeToSeconds(datetime_t)+0x108>
c000c6c1:	b8 45 00 00 00       	mov    eax,0x45
c000c6c6:	89 c2                	mov    edx,eax
c000c6c8:	83 e2 03             	and    edx,0x3
c000c6cb:	39 d8                	cmp    eax,ebx
c000c6cd:	7e 0f                	jle    c000c6de <datetimeToSeconds(datetime_t)+0xf3>
c000c6cf:	83 fa 01             	cmp    edx,0x1
c000c6d2:	19 d2                	sbb    edx,edx
c000c6d4:	48                   	dec    eax
c000c6d5:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c000c6dc:	eb e8                	jmp    c000c6c6 <datetimeToSeconds(datetime_t)+0xdb>
c000c6de:	b8 6d 01 00 00       	mov    eax,0x16d
c000c6e3:	85 d2                	test   edx,edx
c000c6e5:	75 0a                	jne    c000c6f1 <datetimeToSeconds(datetime_t)+0x106>
c000c6e7:	83 fb 01             	cmp    ebx,0x1
c000c6ea:	19 c0                	sbb    eax,eax
c000c6ec:	05 6e 01 00 00       	add    eax,0x16e
c000c6f1:	29 c1                	sub    ecx,eax
c000c6f3:	b8 80 51 01 00       	mov    eax,0x15180
c000c6f8:	f7 e9                	imul   ecx
c000c6fa:	03 04 24             	add    eax,DWORD PTR [esp]
c000c6fd:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000c701:	83 c4 0c             	add    esp,0xc
c000c704:	5b                   	pop    ebx
c000c705:	5e                   	pop    esi
c000c706:	5f                   	pop    edi
c000c707:	5d                   	pop    ebp
c000c708:	c3                   	ret    
c000c709:	90                   	nop

c000c70a <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000c70a:	57                   	push   edi
c000c70b:	56                   	push   esi
c000c70c:	53                   	push   ebx
c000c70d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000c711:	8b 06                	mov    eax,DWORD PTR [esi]
c000c713:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000c716:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c71a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c71e:	e8 c8 fe ff ff       	call   c000c5eb <datetimeToSeconds(datetime_t)>
c000c723:	59                   	pop    ecx
c000c724:	0f b6 0d 08 94 02 c0 	movzx  ecx,BYTE PTR ds:0xc0029408
c000c72b:	5b                   	pop    ebx
c000c72c:	03 0d 0c 94 02 c0    	add    ecx,DWORD PTR ds:0xc002940c
c000c732:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000c738:	89 cb                	mov    ebx,ecx
c000c73a:	c1 fb 1f             	sar    ebx,0x1f
c000c73d:	29 c8                	sub    eax,ecx
c000c73f:	19 da                	sbb    edx,ebx
c000c741:	31 c9                	xor    ecx,ecx
c000c743:	80 3d 09 94 02 c0 00 	cmp    BYTE PTR ds:0xc0029409,0x0
c000c74a:	74 05                	je     c000c751 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000c74c:	b9 08 07 00 00       	mov    ecx,0x708
c000c751:	31 db                	xor    ebx,ebx
c000c753:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000c757:	29 c8                	sub    eax,ecx
c000c759:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c75d:	19 da                	sbb    edx,ebx
c000c75f:	89 f8                	mov    eax,edi
c000c761:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c765:	5b                   	pop    ebx
c000c766:	5e                   	pop    esi
c000c767:	5f                   	pop    edi
c000c768:	ff e0                	jmp    eax

c000c76a <secondsToDatetime(unsigned long long)>:
c000c76a:	55                   	push   ebp
c000c76b:	57                   	push   edi
c000c76c:	56                   	push   esi
c000c76d:	53                   	push   ebx
c000c76e:	83 ec 1c             	sub    esp,0x1c
c000c771:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000c775:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000c779:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000c77d:	6a 00                	push   0x0
c000c77f:	68 80 51 01 00       	push   0x15180
c000c784:	55                   	push   ebp
c000c785:	57                   	push   edi
c000c786:	e8 95 30 01 00       	call   c001f820 <__udivdi3>
c000c78b:	83 c4 10             	add    esp,0x10
c000c78e:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000c794:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c798:	6a 00                	push   0x0
c000c79a:	68 80 51 01 00       	push   0x15180
c000c79f:	55                   	push   ebp
c000c7a0:	57                   	push   edi
c000c7a1:	bf 10 0e 00 00       	mov    edi,0xe10
c000c7a6:	e8 75 31 01 00       	call   c001f920 <__umoddi3>
c000c7ab:	83 c4 10             	add    esp,0x10
c000c7ae:	99                   	cdq    
c000c7af:	f7 ff                	idiv   edi
c000c7b1:	bf 3c 00 00 00       	mov    edi,0x3c
c000c7b6:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000c7b9:	89 d0                	mov    eax,edx
c000c7bb:	99                   	cdq    
c000c7bc:	f7 ff                	idiv   edi
c000c7be:	85 db                	test   ebx,ebx
c000c7c0:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000c7c3:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000c7c6:	79 11                	jns    c000c7d9 <secondsToDatetime(unsigned long long)+0x6f>
c000c7c8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c7cc:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000c7d2:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000c7d7:	eb 07                	jmp    c000c7e0 <secondsToDatetime(unsigned long long)+0x76>
c000c7d9:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000c7de:	89 d8                	mov    eax,ebx
c000c7e0:	bf b4 05 00 00       	mov    edi,0x5b4
c000c7e5:	99                   	cdq    
c000c7e6:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000c7eb:	f7 f9                	idiv   ecx
c000c7ed:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000c7f2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c7f6:	31 d2                	xor    edx,edx
c000c7f8:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000c800:	01 c3                	add    ebx,eax
c000c802:	89 d8                	mov    eax,ebx
c000c804:	f7 f1                	div    ecx
c000c806:	31 d2                	xor    edx,edx
c000c808:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000c80b:	89 d8                	mov    eax,ebx
c000c80d:	f7 f7                	div    edi
c000c80f:	31 d2                	xor    edx,edx
c000c811:	29 c1                	sub    ecx,eax
c000c813:	89 d8                	mov    eax,ebx
c000c815:	f7 f5                	div    ebp
c000c817:	bd 6d 01 00 00       	mov    ebp,0x16d
c000c81c:	29 c1                	sub    ecx,eax
c000c81e:	31 d2                	xor    edx,edx
c000c820:	89 c8                	mov    eax,ecx
c000c822:	f7 f5                	div    ebp
c000c824:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000c829:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c82d:	31 d2                	xor    edx,edx
c000c82f:	89 c8                	mov    eax,ecx
c000c831:	f7 f5                	div    ebp
c000c833:	31 d2                	xor    edx,edx
c000c835:	01 c3                	add    ebx,eax
c000c837:	89 c8                	mov    eax,ecx
c000c839:	f7 f7                	div    edi
c000c83b:	bf 99 00 00 00       	mov    edi,0x99
c000c840:	29 c3                	sub    ebx,eax
c000c842:	31 d2                	xor    edx,edx
c000c844:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000c84c:	29 c3                	sub    ebx,eax
c000c84e:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000c851:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000c854:	bb 05 00 00 00       	mov    ebx,0x5
c000c859:	83 c1 02             	add    ecx,0x2
c000c85c:	89 c8                	mov    eax,ecx
c000c85e:	f7 f7                	div    edi
c000c860:	31 d2                	xor    edx,edx
c000c862:	89 c7                	mov    edi,eax
c000c864:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000c86a:	83 c0 02             	add    eax,0x2
c000c86d:	f7 f3                	div    ebx
c000c86f:	89 eb                	mov    ebx,ebp
c000c871:	29 c3                	sub    ebx,eax
c000c873:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000c879:	88 1e                	mov    BYTE PTR [esi],bl
c000c87b:	19 c0                	sbb    eax,eax
c000c87d:	31 d2                	xor    edx,edx
c000c87f:	83 e0 0c             	and    eax,0xc
c000c882:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000c886:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000c88e:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000c892:	83 f9 01             	cmp    ecx,0x1
c000c895:	0f 96 c2             	setbe  dl
c000c898:	41                   	inc    ecx
c000c899:	01 d0                	add    eax,edx
c000c89b:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000c89e:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000c8a2:	83 c4 1c             	add    esp,0x1c
c000c8a5:	89 f0                	mov    eax,esi
c000c8a7:	5b                   	pop    ebx
c000c8a8:	5e                   	pop    esi
c000c8a9:	5f                   	pop    edi
c000c8aa:	5d                   	pop    ebp
c000c8ab:	c2 04 00             	ret    0x4

c000c8ae <Clock::timeInDatetimeLocal()>:
c000c8ae:	53                   	push   ebx
c000c8af:	83 ec 14             	sub    esp,0x14
c000c8b2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c8b6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000c8ba:	e8 8b fc ff ff       	call   c000c54a <Clock::timeInSecondsLocal()>
c000c8bf:	83 c4 0c             	add    esp,0xc
c000c8c2:	52                   	push   edx
c000c8c3:	50                   	push   eax
c000c8c4:	53                   	push   ebx
c000c8c5:	e8 a0 fe ff ff       	call   c000c76a <secondsToDatetime(unsigned long long)>
c000c8ca:	89 d8                	mov    eax,ebx
c000c8cc:	83 c4 14             	add    esp,0x14
c000c8cf:	5b                   	pop    ebx
c000c8d0:	c2 04 00             	ret    0x4
c000c8d3:	90                   	nop

c000c8d4 <Device::hibernate()>:
c000c8d4:	c3                   	ret    
c000c8d5:	90                   	nop

c000c8d6 <Device::wake()>:
c000c8d6:	c3                   	ret    
c000c8d7:	90                   	nop

c000c8d8 <Device::detect()>:
c000c8d8:	c3                   	ret    
c000c8d9:	90                   	nop

c000c8da <Device::disableLegacy()>:
c000c8da:	c3                   	ret    
c000c8db:	90                   	nop

c000c8dc <Device::powerSaving(PowerSavingLevel)>:
c000c8dc:	c3                   	ret    
c000c8dd:	90                   	nop

c000c8de <DriverlessDevice::close(int, int, void*)>:
c000c8de:	31 c0                	xor    eax,eax
c000c8e0:	c3                   	ret    
c000c8e1:	90                   	nop

c000c8e2 <DriverlessDevice::detect()>:
c000c8e2:	c3                   	ret    
c000c8e3:	90                   	nop

c000c8e4 <DriverlessDevice::open(int, int, void*)>:
c000c8e4:	83 ec 18             	sub    esp,0x18
c000c8e7:	68 f0 1b 02 c0       	push   0xc0021bf0
c000c8ec:	e8 d6 4d 00 00       	call   c00116c7 <KePanic(char const*)>
c000c8f1:	83 c8 ff             	or     eax,0xffffffff
c000c8f4:	83 c4 1c             	add    esp,0x1c
c000c8f7:	c3                   	ret    

c000c8f8 <Device::~Device()>:
c000c8f8:	ba 50 1c 02 c0       	mov    edx,0xc0021c50
c000c8fd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c901:	89 10                	mov    DWORD PTR [eax],edx
c000c903:	90                   	nop
c000c904:	c3                   	ret    
c000c905:	90                   	nop

c000c906 <Device::~Device()>:
c000c906:	83 ec 0c             	sub    esp,0xc
c000c909:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000c90d:	e8 e6 ff ff ff       	call   c000c8f8 <Device::~Device()>
c000c912:	83 c4 04             	add    esp,0x4
c000c915:	83 ec 08             	sub    esp,0x8
c000c918:	68 58 01 00 00       	push   0x158
c000c91d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c921:	e8 22 df ff ff       	call   c000a848 <operator delete(void*, unsigned long)>
c000c926:	83 c4 10             	add    esp,0x10
c000c929:	83 c4 0c             	add    esp,0xc
c000c92c:	c3                   	ret    
c000c92d:	90                   	nop

c000c92e <Device::findAndLoadDriver()>:
c000c92e:	c7 44 24 04 0e 1c 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021c0e
c000c936:	e9 3a e0 ff ff       	jmp    c000a975 <Dbg::kprintf(char const*, ...)>
c000c93b:	90                   	nop

c000c93c <Device::preOpenPCI(PCIDeviceInfo)>:
c000c93c:	57                   	push   edi
c000c93d:	b9 09 00 00 00       	mov    ecx,0x9
c000c942:	56                   	push   esi
c000c943:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000c947:	8d 74 24 10          	lea    esi,[esp+0x10]
c000c94b:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000c955:	81 c7 18 01 00 00    	add    edi,0x118
c000c95b:	fc                   	cld    
c000c95c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000c95e:	5e                   	pop    esi
c000c95f:	5f                   	pop    edi
c000c960:	c3                   	ret    
c000c961:	90                   	nop

c000c962 <Device::preOpenACPI(void*, char*, char*)>:
c000c962:	57                   	push   edi
c000c963:	b9 1e 00 00 00       	mov    ecx,0x1e
c000c968:	56                   	push   esi
c000c969:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c96d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c971:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000c97b:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000c981:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000c987:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c98b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c98d:	b9 0e 00 00 00       	mov    ecx,0xe
c000c992:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000c998:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000c99c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c99e:	5e                   	pop    esi
c000c99f:	5f                   	pop    edi
c000c9a0:	c3                   	ret    
c000c9a1:	90                   	nop

c000c9a2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000c9a2:	53                   	push   ebx
c000c9a3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c9a7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c9ab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c9af:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000c9b3:	0f b6 c0             	movzx  eax,al
c000c9b6:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000c9ba:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c9be:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000c9c2:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c9c6:	5b                   	pop    ebx
c000c9c7:	e9 a8 05 00 00       	jmp    c000cf74 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c000c9cc <Device::getParent()>:
c000c9cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c9d0:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000c9d6:	c3                   	ret    
c000c9d7:	90                   	nop

c000c9d8 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000c9d8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c9dc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c9e0:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c000c9e5:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c9e9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000c9ed:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c9f1:	e9 e6 06 00 00       	jmp    c000d0dc <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c000c9f6 <Device::addChild(Device*)>:
c000c9f6:	53                   	push   ebx
c000c9f7:	83 ec 08             	sub    esp,0x8
c000c9fa:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c9fe:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ca02:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000ca08:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000ca0e:	8b 13                	mov    edx,DWORD PTR [ebx]
c000ca10:	85 d2                	test   edx,edx
c000ca12:	74 04                	je     c000ca18 <Device::addChild(Device*)+0x22>
c000ca14:	89 d3                	mov    ebx,edx
c000ca16:	eb f6                	jmp    c000ca0e <Device::addChild(Device*)+0x18>
c000ca18:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000ca1b:	83 ec 0c             	sub    esp,0xc
c000ca1e:	6a 08                	push   0x8
c000ca20:	e8 c1 b0 ff ff       	call   c0007ae6 <malloc>
c000ca25:	89 03                	mov    DWORD PTR [ebx],eax
c000ca27:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ca2d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000ca34:	83 c4 18             	add    esp,0x18
c000ca37:	5b                   	pop    ebx
c000ca38:	c3                   	ret    
c000ca39:	90                   	nop

c000ca3a <Device::removeAllChildren()>:
c000ca3a:	56                   	push   esi
c000ca3b:	53                   	push   ebx
c000ca3c:	52                   	push   edx
c000ca3d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ca41:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000ca47:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ca4a:	74 17                	je     c000ca63 <Device::removeAllChildren()+0x29>
c000ca4c:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ca4f:	85 c0                	test   eax,eax
c000ca51:	74 0c                	je     c000ca5f <Device::removeAllChildren()+0x25>
c000ca53:	83 ec 0c             	sub    esp,0xc
c000ca56:	8b 10                	mov    edx,DWORD PTR [eax]
c000ca58:	50                   	push   eax
c000ca59:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000ca5c:	83 c4 10             	add    esp,0x10
c000ca5f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000ca61:	eb e4                	jmp    c000ca47 <Device::removeAllChildren()+0xd>
c000ca63:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000ca69:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ca6f:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000ca75:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000ca7c:	58                   	pop    eax
c000ca7d:	5b                   	pop    ebx
c000ca7e:	5e                   	pop    esi
c000ca7f:	c3                   	ret    

c000ca80 <Device::hibernateAll()>:
c000ca80:	53                   	push   ebx
c000ca81:	83 ec 14             	sub    esp,0x14
c000ca84:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ca88:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ca8a:	53                   	push   ebx
c000ca8b:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000ca8e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000ca94:	83 c4 10             	add    esp,0x10
c000ca97:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ca9a:	74 0f                	je     c000caab <Device::hibernateAll()+0x2b>
c000ca9c:	83 ec 0c             	sub    esp,0xc
c000ca9f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000caa2:	e8 d9 ff ff ff       	call   c000ca80 <Device::hibernateAll()>
c000caa7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000caa9:	eb e9                	jmp    c000ca94 <Device::hibernateAll()+0x14>
c000caab:	83 c4 08             	add    esp,0x8
c000caae:	5b                   	pop    ebx
c000caaf:	c3                   	ret    

c000cab0 <Device::wakeAll()>:
c000cab0:	53                   	push   ebx
c000cab1:	83 ec 14             	sub    esp,0x14
c000cab4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000cab8:	8b 03                	mov    eax,DWORD PTR [ebx]
c000caba:	53                   	push   ebx
c000cabb:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000cabe:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000cac4:	83 c4 10             	add    esp,0x10
c000cac7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000caca:	74 0f                	je     c000cadb <Device::wakeAll()+0x2b>
c000cacc:	83 ec 0c             	sub    esp,0xc
c000cacf:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000cad2:	e8 d9 ff ff ff       	call   c000cab0 <Device::wakeAll()>
c000cad7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000cad9:	eb e9                	jmp    c000cac4 <Device::wakeAll()+0x14>
c000cadb:	83 c4 08             	add    esp,0x8
c000cade:	5b                   	pop    ebx
c000cadf:	c3                   	ret    

c000cae0 <Device::detectAll()>:
c000cae0:	53                   	push   ebx
c000cae1:	83 ec 14             	sub    esp,0x14
c000cae4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000cae8:	8b 03                	mov    eax,DWORD PTR [ebx]
c000caea:	53                   	push   ebx
c000caeb:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000caee:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000caf4:	83 c4 10             	add    esp,0x10
c000caf7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000cafa:	74 0f                	je     c000cb0b <Device::detectAll()+0x2b>
c000cafc:	83 ec 0c             	sub    esp,0xc
c000caff:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000cb02:	e8 d9 ff ff ff       	call   c000cae0 <Device::detectAll()>
c000cb07:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000cb09:	eb e9                	jmp    c000caf4 <Device::detectAll()+0x14>
c000cb0b:	83 c4 08             	add    esp,0x8
c000cb0e:	5b                   	pop    ebx
c000cb0f:	c3                   	ret    

c000cb10 <Device::disableLegacyAll()>:
c000cb10:	c3                   	ret    
c000cb11:	90                   	nop

c000cb12 <Device::loadDriversForAll()>:
c000cb12:	c3                   	ret    
c000cb13:	90                   	nop

c000cb14 <Device::closeAll()>:
c000cb14:	53                   	push   ebx
c000cb15:	83 ec 08             	sub    esp,0x8
c000cb18:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cb1c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000cb1e:	6a 00                	push   0x0
c000cb20:	6a 00                	push   0x0
c000cb22:	6a 00                	push   0x0
c000cb24:	53                   	push   ebx
c000cb25:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000cb28:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000cb2e:	83 c4 10             	add    esp,0x10
c000cb31:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000cb34:	74 0f                	je     c000cb45 <Device::closeAll()+0x31>
c000cb36:	83 ec 0c             	sub    esp,0xc
c000cb39:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000cb3c:	e8 d3 ff ff ff       	call   c000cb14 <Device::closeAll()>
c000cb41:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000cb43:	eb e9                	jmp    c000cb2e <Device::closeAll()+0x1a>
c000cb45:	83 c4 08             	add    esp,0x8
c000cb48:	5b                   	pop    ebx
c000cb49:	c3                   	ret    

c000cb4a <Device::powerSavingAll(PowerSavingLevel)>:
c000cb4a:	56                   	push   esi
c000cb4b:	53                   	push   ebx
c000cb4c:	83 ec 0c             	sub    esp,0xc
c000cb4f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000cb53:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000cb57:	8b 03                	mov    eax,DWORD PTR [ebx]
c000cb59:	56                   	push   esi
c000cb5a:	53                   	push   ebx
c000cb5b:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000cb5e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000cb64:	83 c4 10             	add    esp,0x10
c000cb67:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000cb6a:	74 0f                	je     c000cb7b <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000cb6c:	52                   	push   edx
c000cb6d:	52                   	push   edx
c000cb6e:	56                   	push   esi
c000cb6f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000cb72:	e8 d3 ff ff ff       	call   c000cb4a <Device::powerSavingAll(PowerSavingLevel)>
c000cb77:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000cb79:	eb e9                	jmp    c000cb64 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000cb7b:	58                   	pop    eax
c000cb7c:	5b                   	pop    ebx
c000cb7d:	5e                   	pop    esi
c000cb7e:	c3                   	ret    
c000cb7f:	90                   	nop

c000cb80 <Device::setName(char const*)>:
c000cb80:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000cb88:	e9 b3 3a ff ff       	jmp    c0000640 <strcpy>
c000cb8d:	90                   	nop

c000cb8e <Device::Device(char const*)>:
c000cb8e:	83 ec 1c             	sub    esp,0x1c
c000cb91:	ba 50 1c 02 c0       	mov    edx,0xc0021c50
c000cb96:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb9a:	89 10                	mov    DWORD PTR [eax],edx
c000cb9c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cba0:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000cbaa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cbae:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000cbb8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cbbc:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000cbc6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cbca:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000cbd4:	83 ec 08             	sub    esp,0x8
c000cbd7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbdb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbdf:	e8 9c ff ff ff       	call   c000cb80 <Device::setName(char const*)>
c000cbe4:	83 c4 10             	add    esp,0x10
c000cbe7:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000cbef:	83 ec 0c             	sub    esp,0xc
c000cbf2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cbf6:	e8 eb ae ff ff       	call   c0007ae6 <malloc>
c000cbfb:	83 c4 10             	add    esp,0x10
c000cbfe:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000cc04:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000cc0b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000cc0f:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000cc15:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cc19:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000cc1f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000cc25:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cc29:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000cc2f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000cc36:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cc3a:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000cc41:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cc45:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000cc4c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cc50:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000cc5a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cc5e:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000cc68:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cc6c:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000cc76:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cc7a:	c7 80 10 01 00 00 14 00 00 00 	mov    DWORD PTR [eax+0x110],0x14
c000cc84:	90                   	nop
c000cc85:	83 c4 1c             	add    esp,0x1c
c000cc88:	c3                   	ret    
c000cc89:	90                   	nop

c000cc8a <Device::getName()>:
c000cc8a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cc8e:	05 d0 00 00 00       	add    eax,0xd0
c000cc93:	c3                   	ret    

c000cc94 <DriverlessDevice::DriverlessDevice(char const*)>:
c000cc94:	83 ec 0c             	sub    esp,0xc
c000cc97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cc9b:	83 ec 08             	sub    esp,0x8
c000cc9e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cca2:	50                   	push   eax
c000cca3:	e8 e6 fe ff ff       	call   c000cb8e <Device::Device(char const*)>
c000cca8:	83 c4 10             	add    esp,0x10
c000ccab:	ba 7c 1c 02 c0       	mov    edx,0xc0021c7c
c000ccb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ccb4:	89 10                	mov    DWORD PTR [eax],edx
c000ccb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ccba:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000ccc4:	90                   	nop
c000ccc5:	83 c4 0c             	add    esp,0xc
c000ccc8:	c3                   	ret    
c000ccc9:	90                   	nop

c000ccca <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000ccca:	57                   	push   edi
c000cccb:	56                   	push   esi
c000cccc:	53                   	push   ebx
c000cccd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ccd1:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000ccd5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ccd9:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000ccdf:	75 0c                	jne    c000cced <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000cce1:	52                   	push   edx
c000cce2:	52                   	push   edx
c000cce3:	53                   	push   ebx
c000cce4:	56                   	push   esi
c000cce5:	e8 e8 2f 01 00       	call   c001fcd2 <LinkedList<Device>::addElement(Device*)>
c000ccea:	83 c4 10             	add    esp,0x10
c000cced:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000ccf3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ccf6:	74 12                	je     c000cd0a <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000ccf8:	50                   	push   eax
c000ccf9:	57                   	push   edi
c000ccfa:	56                   	push   esi
c000ccfb:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000ccfe:	e8 c7 ff ff ff       	call   c000ccca <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000cd03:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000cd05:	83 c4 10             	add    esp,0x10
c000cd08:	eb e9                	jmp    c000ccf3 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000cd0a:	5b                   	pop    ebx
c000cd0b:	5e                   	pop    esi
c000cd0c:	5f                   	pop    edi
c000cd0d:	c3                   	ret    

c000cd0e <getDevicesOfType(DeviceType)>:
c000cd0e:	53                   	push   ebx
c000cd0f:	83 ec 14             	sub    esp,0x14
c000cd12:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000cd16:	53                   	push   ebx
c000cd17:	e8 92 30 01 00       	call   c001fdae <LinkedList<Device>::LinkedList()>
c000cd1c:	83 c4 0c             	add    esp,0xc
c000cd1f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cd23:	53                   	push   ebx
c000cd24:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c000cd2a:	e8 9b ff ff ff       	call   c000ccca <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000cd2f:	89 d8                	mov    eax,ebx
c000cd31:	83 c4 18             	add    esp,0x18
c000cd34:	5b                   	pop    ebx
c000cd35:	c2 04 00             	ret    0x4

c000cd38 <HardDiskController::HardDiskController(char const*)>:
c000cd38:	83 ec 0c             	sub    esp,0xc
c000cd3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd3f:	83 ec 08             	sub    esp,0x8
c000cd42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd46:	50                   	push   eax
c000cd47:	e8 42 fe ff ff       	call   c000cb8e <Device::Device(char const*)>
c000cd4c:	83 c4 10             	add    esp,0x10
c000cd4f:	ba a8 1c 02 c0       	mov    edx,0xc0021ca8
c000cd54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd58:	89 10                	mov    DWORD PTR [eax],edx
c000cd5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd5e:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000cd68:	90                   	nop
c000cd69:	83 c4 0c             	add    esp,0xc
c000cd6c:	c3                   	ret    
c000cd6d:	90                   	nop
c000cd6e:	66 90                	xchg   ax,ax

c000cd70 <HardDiskController::~HardDiskController()>:
c000cd70:	83 ec 0c             	sub    esp,0xc
c000cd73:	ba a8 1c 02 c0       	mov    edx,0xc0021ca8
c000cd78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd7c:	89 10                	mov    DWORD PTR [eax],edx
c000cd7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd82:	83 ec 0c             	sub    esp,0xc
c000cd85:	50                   	push   eax
c000cd86:	e8 6d fb ff ff       	call   c000c8f8 <Device::~Device()>
c000cd8b:	83 c4 10             	add    esp,0x10
c000cd8e:	90                   	nop
c000cd8f:	83 c4 0c             	add    esp,0xc
c000cd92:	c3                   	ret    
c000cd93:	90                   	nop

c000cd94 <HardDiskController::~HardDiskController()>:
c000cd94:	83 ec 0c             	sub    esp,0xc
c000cd97:	83 ec 0c             	sub    esp,0xc
c000cd9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd9e:	e8 cd ff ff ff       	call   c000cd70 <HardDiskController::~HardDiskController()>
c000cda3:	83 c4 10             	add    esp,0x10
c000cda6:	83 ec 08             	sub    esp,0x8
c000cda9:	68 58 01 00 00       	push   0x158
c000cdae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cdb2:	e8 91 da ff ff       	call   c000a848 <operator delete(void*, unsigned long)>
c000cdb7:	83 c4 10             	add    esp,0x10
c000cdba:	83 c4 0c             	add    esp,0xc
c000cdbd:	c3                   	ret    

c000cdbe <PhysicalDisk::eject()>:
c000cdbe:	83 c8 ff             	or     eax,0xffffffff
c000cdc1:	c3                   	ret    

c000cdc2 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000cdc2:	83 ec 0c             	sub    esp,0xc
c000cdc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cdc9:	83 ec 08             	sub    esp,0x8
c000cdcc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cdd0:	50                   	push   eax
c000cdd1:	e8 b8 fd ff ff       	call   c000cb8e <Device::Device(char const*)>
c000cdd6:	83 c4 10             	add    esp,0x10
c000cdd9:	ba d4 1c 02 c0       	mov    edx,0xc0021cd4
c000cdde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cde2:	89 10                	mov    DWORD PTR [eax],edx
c000cde4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cde8:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000cdef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cdf3:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000cdfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cdfe:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000ce08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce0c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ce10:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000ce16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce1a:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000ce24:	90                   	nop
c000ce25:	83 c4 0c             	add    esp,0xc
c000ce28:	c3                   	ret    
c000ce29:	90                   	nop

c000ce2a <PhysicalDisk::startCache()>:
c000ce2a:	56                   	push   esi
c000ce2b:	53                   	push   ebx
c000ce2c:	83 ec 10             	sub    esp,0x10
c000ce2f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ce33:	6a 44                	push   0x44
c000ce35:	e8 ac ac ff ff       	call   c0007ae6 <malloc>
c000ce3a:	89 c6                	mov    esi,eax
c000ce3c:	58                   	pop    eax
c000ce3d:	5a                   	pop    edx
c000ce3e:	53                   	push   ebx
c000ce3f:	56                   	push   esi
c000ce40:	e8 7b 17 00 00       	call   c000e5c0 <VCache::VCache(PhysicalDisk*)>
c000ce45:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000ce4b:	83 c4 14             	add    esp,0x14
c000ce4e:	5b                   	pop    ebx
c000ce4f:	5e                   	pop    esi
c000ce50:	c3                   	ret    
c000ce51:	90                   	nop

c000ce52 <PhysicalDisk::~PhysicalDisk()>:
c000ce52:	83 ec 0c             	sub    esp,0xc
c000ce55:	ba d4 1c 02 c0       	mov    edx,0xc0021cd4
c000ce5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce5e:	89 10                	mov    DWORD PTR [eax],edx
c000ce60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce64:	83 ec 0c             	sub    esp,0xc
c000ce67:	50                   	push   eax
c000ce68:	e8 8b fa ff ff       	call   c000c8f8 <Device::~Device()>
c000ce6d:	83 c4 10             	add    esp,0x10
c000ce70:	90                   	nop
c000ce71:	83 c4 0c             	add    esp,0xc
c000ce74:	c3                   	ret    
c000ce75:	90                   	nop

c000ce76 <PhysicalDisk::~PhysicalDisk()>:
c000ce76:	83 ec 0c             	sub    esp,0xc
c000ce79:	83 ec 0c             	sub    esp,0xc
c000ce7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce80:	e8 cd ff ff ff       	call   c000ce52 <PhysicalDisk::~PhysicalDisk()>
c000ce85:	83 c4 10             	add    esp,0x10
c000ce88:	83 ec 08             	sub    esp,0x8
c000ce8b:	68 6c 01 00 00       	push   0x16c
c000ce90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce94:	e8 af d9 ff ff       	call   c000a848 <operator delete(void*, unsigned long)>
c000ce99:	83 c4 10             	add    esp,0x10
c000ce9c:	83 c4 0c             	add    esp,0xc
c000ce9f:	c3                   	ret    

c000cea0 <int_handler>:
c000cea0:	55                   	push   ebp
c000cea1:	57                   	push   edi
c000cea2:	56                   	push   esi
c000cea3:	53                   	push   ebx
c000cea4:	83 ec 0c             	sub    esp,0xc
c000cea7:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000ceab:	80 3d 88 be 02 c0 00 	cmp    BYTE PTR ds:0xc002be88,0x0
c000ceb2:	74 0b                	je     c000cebf <int_handler+0x1f>
c000ceb4:	fa                   	cli    
c000ceb5:	f4                   	hlt    
c000ceb6:	80 3d 88 be 02 c0 00 	cmp    BYTE PTR ds:0xc002be88,0x0
c000cebd:	75 f5                	jne    c000ceb4 <int_handler+0x14>
c000cebf:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c000cec2:	8d 46 e0             	lea    eax,[esi-0x20]
c000cec5:	83 f8 17             	cmp    eax,0x17
c000cec8:	76 40                	jbe    c000cf0a <int_handler+0x6a>
c000ceca:	c1 e6 04             	shl    esi,0x4
c000cecd:	31 db                	xor    ebx,ebx
c000cecf:	8d ae 20 a4 02 c0    	lea    ebp,[esi-0x3ffd5be0]
c000ced5:	81 c6 20 94 02 c0    	add    esi,0xc0029420
c000cedb:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000cedf:	85 c0                	test   eax,eax
c000cee1:	74 13                	je     c000cef6 <int_handler+0x56>
c000cee3:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c000cee6:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c000ceea:	74 2c                	je     c000cf18 <int_handler+0x78>
c000ceec:	83 ec 08             	sub    esp,0x8
c000ceef:	52                   	push   edx
c000cef0:	57                   	push   edi
c000cef1:	ff d0                	call   eax
c000cef3:	83 c4 10             	add    esp,0x10
c000cef6:	83 c3 01             	add    ebx,0x1
c000cef9:	83 fb 04             	cmp    ebx,0x4
c000cefc:	75 dd                	jne    c000cedb <int_handler+0x3b>
c000cefe:	83 c4 0c             	add    esp,0xc
c000cf01:	31 c0                	xor    eax,eax
c000cf03:	5b                   	pop    ebx
c000cf04:	31 d2                	xor    edx,edx
c000cf06:	5e                   	pop    esi
c000cf07:	5f                   	pop    edi
c000cf08:	5d                   	pop    ebp
c000cf09:	c3                   	ret    
c000cf0a:	83 ec 0c             	sub    esp,0xc
c000cf0d:	50                   	push   eax
c000cf0e:	e8 61 b5 00 00       	call   c0018474 <HalEndOfInterrupt(int)>
c000cf13:	83 c4 10             	add    esp,0x10
c000cf16:	eb b2                	jmp    c000ceca <int_handler+0x2a>
c000cf18:	83 ec 08             	sub    esp,0x8
c000cf1b:	52                   	push   edx
c000cf1c:	57                   	push   edi
c000cf1d:	ff d0                	call   eax
c000cf1f:	83 c4 10             	add    esp,0x10
c000cf22:	83 c4 0c             	add    esp,0xc
c000cf25:	5b                   	pop    ebx
c000cf26:	5e                   	pop    esi
c000cf27:	5f                   	pop    edi
c000cf28:	5d                   	pop    ebp
c000cf29:	c3                   	ret    

c000cf2a <installISRHandler(int, void (*)(regs*, void*), void*)>:
c000cf2a:	56                   	push   esi
c000cf2b:	31 c0                	xor    eax,eax
c000cf2d:	53                   	push   ebx
c000cf2e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000cf32:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cf36:	89 ca                	mov    edx,ecx
c000cf38:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000cf3c:	c1 e2 04             	shl    edx,0x4
c000cf3f:	83 bc 82 20 a4 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffd5be0],0x0
c000cf47:	74 17                	je     c000cf60 <installISRHandler(int, void (*)(regs*, void*), void*)+0x36>
c000cf49:	83 c0 01             	add    eax,0x1
c000cf4c:	83 f8 04             	cmp    eax,0x4
c000cf4f:	75 ee                	jne    c000cf3f <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c000cf51:	c7 44 24 0c 04 1d 02 c0 	mov    DWORD PTR [esp+0xc],0xc0021d04
c000cf59:	5b                   	pop    ebx
c000cf5a:	5e                   	pop    esi
c000cf5b:	e9 67 47 00 00       	jmp    c00116c7 <KePanic(char const*)>
c000cf60:	8d 04 88             	lea    eax,[eax+ecx*4]
c000cf63:	89 1c 85 20 a4 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5be0],ebx
c000cf6a:	89 34 85 20 94 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6be0],esi
c000cf71:	5b                   	pop    ebx
c000cf72:	5e                   	pop    esi
c000cf73:	c3                   	ret    

c000cf74 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000cf74:	57                   	push   edi
c000cf75:	8b 15 b8 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026eb8
c000cf7b:	56                   	push   esi
c000cf7c:	53                   	push   ebx
c000cf7d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000cf81:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000cf85:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000cf8c:	74 54                	je     c000cfe2 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x6e>
c000cf8e:	89 c7                	mov    edi,eax
c000cf90:	84 c0                	test   al,al
c000cf92:	74 1d                	je     c000cfb1 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3d>
c000cf94:	83 fe 0f             	cmp    esi,0xf
c000cf97:	0f 8f d5 00 00 00    	jg     c000d072 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xfe>
c000cf9d:	0f b6 b6 a8 38 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffdc758]
c000cfa4:	0f b7 bc 36 c0 bb 02 c0 	movzx  edi,WORD PTR [esi+esi*1-0x3ffd4440]
c000cfac:	d1 ef                	shr    edi,1
c000cfae:	83 e7 01             	and    edi,0x1
c000cfb1:	83 ec 08             	sub    esp,0x8
c000cfb4:	a1 c0 d0 02 c0       	mov    eax,ds:0xc002d0c0
c000cfb9:	31 db                	xor    ebx,ebx
c000cfbb:	50                   	push   eax
c000cfbc:	68 11 1d 02 c0       	push   0xc0021d11
c000cfc1:	e8 af d9 ff ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c000cfc6:	83 c4 10             	add    esp,0x10
c000cfc9:	a1 c0 d0 02 c0       	mov    eax,ds:0xc002d0c0
c000cfce:	85 c0                	test   eax,eax
c000cfd0:	7f 55                	jg     c000d027 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb3>
c000cfd2:	83 ec 0c             	sub    esp,0xc
c000cfd5:	68 28 1d 02 c0       	push   0xc0021d28
c000cfda:	e8 e8 46 00 00       	call   c00116c7 <KePanic(char const*)>
c000cfdf:	83 c4 10             	add    esp,0x10
c000cfe2:	8d 7e 20             	lea    edi,[esi+0x20]
c000cfe5:	89 f8                	mov    eax,edi
c000cfe7:	31 d2                	xor    edx,edx
c000cfe9:	c1 e0 04             	shl    eax,0x4
c000cfec:	8b 8c 90 20 a4 02 c0 	mov    ecx,DWORD PTR [eax+edx*4-0x3ffd5be0]
c000cff3:	85 c9                	test   ecx,ecx
c000cff5:	0f 84 8e 00 00 00    	je     c000d089 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x115>
c000cffb:	83 c2 01             	add    edx,0x1
c000cffe:	83 fa 04             	cmp    edx,0x4
c000d001:	75 e9                	jne    c000cfec <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x78>
c000d003:	83 ec 0c             	sub    esp,0xc
c000d006:	68 7c 1d 02 c0       	push   0xc0021d7c
c000d00b:	e8 b7 46 00 00       	call   c00116c7 <KePanic(char const*)>
c000d010:	83 c4 10             	add    esp,0x10
c000d013:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000d018:	5b                   	pop    ebx
c000d019:	5e                   	pop    esi
c000d01a:	5f                   	pop    edi
c000d01b:	c3                   	ret    
c000d01c:	83 c3 01             	add    ebx,0x1
c000d01f:	39 1d c0 d0 02 c0    	cmp    DWORD PTR ds:0xc002d0c0,ebx
c000d025:	7e ab                	jle    c000cfd2 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x5e>
c000d027:	83 ec 08             	sub    esp,0x8
c000d02a:	8b 04 9d e0 d0 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd2f20]
c000d031:	56                   	push   esi
c000d032:	50                   	push   eax
c000d033:	e8 c6 1b 01 00       	call   c001ebfe <IOAPIC::handlesGSIWithNumber(unsigned int)>
c000d038:	83 c4 10             	add    esp,0x10
c000d03b:	84 c0                	test   al,al
c000d03d:	74 dd                	je     c000d01c <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xa8>
c000d03f:	83 ec 04             	sub    esp,0x4
c000d042:	89 f8                	mov    eax,edi
c000d044:	8b 1c 9d e0 d0 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd2f20]
c000d04b:	0f b6 f8             	movzx  edi,al
c000d04e:	57                   	push   edi
c000d04f:	8d 7e 20             	lea    edi,[esi+0x20]
c000d052:	6a 00                	push   0x0
c000d054:	89 f8                	mov    eax,edi
c000d056:	0f b6 c0             	movzx  eax,al
c000d059:	50                   	push   eax
c000d05a:	89 f0                	mov    eax,esi
c000d05c:	6a 00                	push   0x0
c000d05e:	0f b6 c0             	movzx  eax,al
c000d061:	6a 00                	push   0x0
c000d063:	50                   	push   eax
c000d064:	53                   	push   ebx
c000d065:	e8 00 1d 01 00       	call   c001ed6a <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c000d06a:	83 c4 20             	add    esp,0x20
c000d06d:	e9 73 ff ff ff       	jmp    c000cfe5 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x71>
c000d072:	83 ec 0c             	sub    esp,0xc
c000d075:	31 ff                	xor    edi,edi
c000d077:	68 44 1d 02 c0       	push   0xc0021d44
c000d07c:	e8 46 46 00 00       	call   c00116c7 <KePanic(char const*)>
c000d081:	83 c4 10             	add    esp,0x10
c000d084:	e9 28 ff ff ff       	jmp    c000cfb1 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3d>
c000d089:	8d 04 ba             	lea    eax,[edx+edi*4]
c000d08c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d090:	89 14 85 20 a4 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5be0],edx
c000d097:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d09b:	5b                   	pop    ebx
c000d09c:	89 14 85 20 94 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6be0],edx
c000d0a3:	89 f0                	mov    eax,esi
c000d0a5:	5e                   	pop    esi
c000d0a6:	5f                   	pop    edi
c000d0a7:	c3                   	ret    

c000d0a8 <uninstallISRHandler(int, void (*)(regs*, void*))>:
c000d0a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d0ac:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d0b0:	c1 e0 04             	shl    eax,0x4
c000d0b3:	8d 50 10             	lea    edx,[eax+0x10]
c000d0b6:	39 88 20 a4 02 c0    	cmp    DWORD PTR [eax-0x3ffd5be0],ecx
c000d0bc:	74 08                	je     c000d0c6 <uninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c000d0be:	83 c0 04             	add    eax,0x4
c000d0c1:	39 d0                	cmp    eax,edx
c000d0c3:	75 f1                	jne    c000d0b6 <uninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c000d0c5:	c3                   	ret    
c000d0c6:	c7 80 20 a4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5be0],0x0
c000d0d0:	c7 80 20 94 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6be0],0x0
c000d0da:	eb e2                	jmp    c000d0be <uninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c000d0dc <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000d0dc:	53                   	push   ebx
c000d0dd:	83 ec 08             	sub    esp,0x8
c000d0e0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000d0e4:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000d0e9:	74 0e                	je     c000d0f9 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000d0eb:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000d0f0:	f6 80 6c 01 00 00 01 	test   BYTE PTR [eax+0x16c],0x1
c000d0f7:	75 37                	jne    c000d130 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x54>
c000d0f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d0fd:	83 c0 20             	add    eax,0x20
c000d100:	c1 e0 04             	shl    eax,0x4
c000d103:	8d 50 10             	lea    edx,[eax+0x10]
c000d106:	39 98 20 a4 02 c0    	cmp    DWORD PTR [eax-0x3ffd5be0],ebx
c000d10c:	74 0c                	je     c000d11a <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x3e>
c000d10e:	83 c0 04             	add    eax,0x4
c000d111:	39 d0                	cmp    eax,edx
c000d113:	75 f1                	jne    c000d106 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2a>
c000d115:	83 c4 08             	add    esp,0x8
c000d118:	5b                   	pop    ebx
c000d119:	c3                   	ret    
c000d11a:	c7 80 20 a4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5be0],0x0
c000d124:	c7 80 20 94 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6be0],0x0
c000d12e:	eb de                	jmp    c000d10e <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x32>
c000d130:	83 7c 24 10 0f       	cmp    DWORD PTR [esp+0x10],0xf
c000d135:	7f 11                	jg     c000d148 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x6c>
c000d137:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d13b:	0f b6 80 a8 38 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdc758]
c000d142:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d146:	eb b1                	jmp    c000d0f9 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000d148:	83 ec 0c             	sub    esp,0xc
c000d14b:	68 35 1d 02 c0       	push   0xc0021d35
c000d150:	e8 72 45 00 00       	call   c00116c7 <KePanic(char const*)>
c000d155:	83 c4 10             	add    esp,0x10
c000d158:	eb 9f                	jmp    c000d0f9 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>

c000d15a <setupINTS()>:
c000d15a:	31 c0                	xor    eax,eax
c000d15c:	c7 80 20 a4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5be0],0x0
c000d166:	c7 80 20 94 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6be0],0x0
c000d170:	c7 80 24 a4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5bdc],0x0
c000d17a:	c7 80 24 94 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6bdc],0x0
c000d184:	c7 80 28 a4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5bd8],0x0
c000d18e:	c7 80 28 94 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6bd8],0x0
c000d198:	c7 80 2c a4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5bd4],0x0
c000d1a2:	c7 80 2c 94 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6bd4],0x0
c000d1ac:	83 c0 10             	add    eax,0x10
c000d1af:	3d 00 10 00 00       	cmp    eax,0x1000
c000d1b4:	75 a6                	jne    c000d15c <setupINTS()+0x2>
c000d1b6:	c3                   	ret    

c000d1b7 <convertLegacyIRQNumber(int)>:
c000d1b7:	83 ec 0c             	sub    esp,0xc
c000d1ba:	8b 15 b8 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026eb8
c000d1c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1c4:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000d1cb:	74 0c                	je     c000d1d9 <convertLegacyIRQNumber(int)+0x22>
c000d1cd:	83 f8 0f             	cmp    eax,0xf
c000d1d0:	7f 0b                	jg     c000d1dd <convertLegacyIRQNumber(int)+0x26>
c000d1d2:	0f b6 80 a8 38 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdc758]
c000d1d9:	83 c4 0c             	add    esp,0xc
c000d1dc:	c3                   	ret    
c000d1dd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d1e1:	83 ec 0c             	sub    esp,0xc
c000d1e4:	68 44 1d 02 c0       	push   0xc0021d44
c000d1e9:	e8 d9 44 00 00       	call   c00116c7 <KePanic(char const*)>
c000d1ee:	83 c4 10             	add    esp,0x10
c000d1f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1f5:	83 c4 0c             	add    esp,0xc
c000d1f8:	c3                   	ret    
c000d1f9:	90                   	nop

c000d1fa <startGUI(void*)>:
c000d1fa:	55                   	push   ebp
c000d1fb:	89 e5                	mov    ebp,esp
c000d1fd:	53                   	push   ebx
c000d1fe:	83 ec 04             	sub    esp,0x4
c000d201:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d206:	83 e8 01             	sub    eax,0x1
c000d209:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000d20e:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d213:	85 c0                	test   eax,eax
c000d215:	75 01                	jne    c000d218 <startGUI(void*)+0x1e>
c000d217:	fb                   	sti    
c000d218:	8b 1d b8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb8
c000d21e:	83 ec 08             	sub    esp,0x8
c000d221:	6a 01                	push   0x1
c000d223:	68 a1 1d 02 c0       	push   0xc0021da1
c000d228:	e8 20 85 00 00       	call   c001574d <Thr::loadDLL(char const*, bool)>
c000d22d:	83 c4 10             	add    esp,0x10
c000d230:	83 ec 08             	sub    esp,0x8
c000d233:	53                   	push   ebx
c000d234:	50                   	push   eax
c000d235:	e8 44 87 00 00       	call   c001597e <Thr::executeDLL(unsigned long, void*)>
c000d23a:	83 c4 10             	add    esp,0x10
c000d23d:	8b 1d b8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb8
c000d243:	83 ec 08             	sub    esp,0x8
c000d246:	6a 01                	push   0x1
c000d248:	68 bb 1d 02 c0       	push   0xc0021dbb
c000d24d:	e8 fb 84 00 00       	call   c001574d <Thr::loadDLL(char const*, bool)>
c000d252:	83 c4 10             	add    esp,0x10
c000d255:	83 ec 08             	sub    esp,0x8
c000d258:	53                   	push   ebx
c000d259:	50                   	push   eax
c000d25a:	e8 1f 87 00 00       	call   c001597e <Thr::executeDLL(unsigned long, void*)>
c000d25f:	83 c4 10             	add    esp,0x10
c000d262:	90                   	nop
c000d263:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000d266:	c9                   	leave  
c000d267:	c3                   	ret    

c000d268 <startGUIVESA(void*)>:
c000d268:	55                   	push   ebp
c000d269:	89 e5                	mov    ebp,esp
c000d26b:	53                   	push   ebx
c000d26c:	83 ec 04             	sub    esp,0x4
c000d26f:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d274:	83 e8 01             	sub    eax,0x1
c000d277:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000d27c:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d281:	85 c0                	test   eax,eax
c000d283:	75 01                	jne    c000d286 <startGUIVESA(void*)+0x1e>
c000d285:	fb                   	sti    
c000d286:	8b 1d b8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb8
c000d28c:	83 ec 08             	sub    esp,0x8
c000d28f:	6a 01                	push   0x1
c000d291:	68 d9 1d 02 c0       	push   0xc0021dd9
c000d296:	e8 b2 84 00 00       	call   c001574d <Thr::loadDLL(char const*, bool)>
c000d29b:	83 c4 10             	add    esp,0x10
c000d29e:	83 ec 08             	sub    esp,0x8
c000d2a1:	53                   	push   ebx
c000d2a2:	50                   	push   eax
c000d2a3:	e8 d6 86 00 00       	call   c001597e <Thr::executeDLL(unsigned long, void*)>
c000d2a8:	83 c4 10             	add    esp,0x10
c000d2ab:	8b 1d b8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb8
c000d2b1:	83 ec 08             	sub    esp,0x8
c000d2b4:	6a 01                	push   0x1
c000d2b6:	68 bb 1d 02 c0       	push   0xc0021dbb
c000d2bb:	e8 8d 84 00 00       	call   c001574d <Thr::loadDLL(char const*, bool)>
c000d2c0:	83 c4 10             	add    esp,0x10
c000d2c3:	83 ec 08             	sub    esp,0x8
c000d2c6:	53                   	push   ebx
c000d2c7:	50                   	push   eax
c000d2c8:	e8 b1 86 00 00       	call   c001597e <Thr::executeDLL(unsigned long, void*)>
c000d2cd:	83 c4 10             	add    esp,0x10
c000d2d0:	90                   	nop
c000d2d1:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000d2d4:	c9                   	leave  
c000d2d5:	c3                   	ret    

c000d2d6 <sendKeyToTerminal(unsigned char)>:
c000d2d6:	55                   	push   ebp
c000d2d7:	89 e5                	mov    ebp,esp
c000d2d9:	83 ec 28             	sub    esp,0x28
c000d2dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d2df:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000d2e2:	a1 04 6f 02 c0       	mov    eax,ds:0xc0026f04
c000d2e7:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c000d2eb:	83 ec 08             	sub    esp,0x8
c000d2ee:	52                   	push   edx
c000d2ef:	50                   	push   eax
c000d2f0:	e8 f1 ba ff ff       	call   c0008de6 <VgaText::receiveKey(unsigned char)>
c000d2f5:	83 c4 10             	add    esp,0x10
c000d2f8:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000d2fc:	83 f8 0a             	cmp    eax,0xa
c000d2ff:	74 16                	je     c000d317 <sendKeyToTerminal(unsigned char)+0x41>
c000d301:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000d305:	83 f8 03             	cmp    eax,0x3
c000d308:	74 0d                	je     c000d317 <sendKeyToTerminal(unsigned char)+0x41>
c000d30a:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000d30e:	83 f8 1c             	cmp    eax,0x1c
c000d311:	0f 85 97 00 00 00    	jne    c000d3ae <sendKeyToTerminal(unsigned char)+0xd8>
c000d317:	fa                   	cli    
c000d318:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d31d:	83 c0 01             	add    eax,0x1
c000d320:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000d325:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c000d32a:	83 c0 01             	add    eax,0x1
c000d32d:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c000d332:	a1 20 b4 02 c0       	mov    eax,ds:0xc002b420
c000d337:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000d33a:	c7 05 20 b4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b420,0x0
c000d344:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000d348:	74 1f                	je     c000d369 <sendKeyToTerminal(unsigned char)+0x93>
c000d34a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000d34d:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000d350:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000d353:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000d356:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000d359:	83 ec 0c             	sub    esp,0xc
c000d35c:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000d35f:	e8 60 93 00 00       	call   c00166c4 <unblockTask(ThreadControlBlock*)>
c000d364:	83 c4 10             	add    esp,0x10
c000d367:	eb db                	jmp    c000d344 <sendKeyToTerminal(unsigned char)+0x6e>
c000d369:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c000d36e:	83 e8 01             	sub    eax,0x1
c000d371:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c000d376:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c000d37b:	85 c0                	test   eax,eax
c000d37d:	75 18                	jne    c000d397 <sendKeyToTerminal(unsigned char)+0xc1>
c000d37f:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c000d384:	85 c0                	test   eax,eax
c000d386:	74 0f                	je     c000d397 <sendKeyToTerminal(unsigned char)+0xc1>
c000d388:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c000d392:	e8 15 8e 00 00       	call   c00161ac <schedule()>
c000d397:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d39c:	83 e8 01             	sub    eax,0x1
c000d39f:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000d3a4:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d3a9:	85 c0                	test   eax,eax
c000d3ab:	75 01                	jne    c000d3ae <sendKeyToTerminal(unsigned char)+0xd8>
c000d3ad:	fb                   	sti    
c000d3ae:	90                   	nop
c000d3af:	c9                   	leave  
c000d3b0:	c3                   	ret    

c000d3b1 <sendKeyboardToken(KeyboardToken)>:
c000d3b1:	55                   	push   ebp
c000d3b2:	89 e5                	mov    ebp,esp
c000d3b4:	83 ec 18             	sub    esp,0x18
c000d3b7:	e8 5b 43 00 00       	call   c0011717 <KeUserIOReceived()>
c000d3bc:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000d3bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d3c2:	0f b7 c0             	movzx  eax,ax
c000d3c5:	83 f2 01             	xor    edx,0x1
c000d3c8:	88 90 40 b4 02 c0    	mov    BYTE PTR [eax-0x3ffd4bc0],dl
c000d3ce:	a1 28 b4 02 c0       	mov    eax,ds:0xc002b428
c000d3d3:	85 c0                	test   eax,eax
c000d3d5:	74 24                	je     c000d3fb <sendKeyboardToken(KeyboardToken)+0x4a>
c000d3d7:	8b 0d 28 b4 02 c0    	mov    ecx,DWORD PTR ds:0xc002b428
c000d3dd:	83 ec 04             	sub    esp,0x4
c000d3e0:	68 40 b4 02 c0       	push   0xc002b440
c000d3e5:	83 ec 08             	sub    esp,0x8
c000d3e8:	89 e2                	mov    edx,esp
c000d3ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d3ed:	89 02                	mov    DWORD PTR [edx],eax
c000d3ef:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000d3f2:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000d3f6:	ff d1                	call   ecx
c000d3f8:	83 c4 10             	add    esp,0x10
c000d3fb:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000d3ff:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000d402:	a0 48 b8 02 c0       	mov    al,ds:0xc002b848
c000d407:	0f b6 d2             	movzx  edx,dl
c000d40a:	0f b6 c0             	movzx  eax,al
c000d40d:	39 c2                	cmp    edx,eax
c000d40f:	74 1c                	je     c000d42d <sendKeyboardToken(KeyboardToken)+0x7c>
c000d411:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000d414:	a2 48 b8 02 c0       	mov    ds:0xc002b848,al
c000d419:	a0 48 b8 02 c0       	mov    al,ds:0xc002b848
c000d41e:	0f b6 c0             	movzx  eax,al
c000d421:	83 ec 0c             	sub    esp,0xc
c000d424:	50                   	push   eax
c000d425:	e8 08 b1 ff ff       	call   c0008532 <setTerminalScrollLock(bool)>
c000d42a:	83 c4 10             	add    esp,0x10
c000d42d:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000d430:	0f b6 c0             	movzx  eax,al
c000d433:	85 c0                	test   eax,eax
c000d435:	0f 84 da 00 00 00    	je     c000d515 <sendKeyboardToken(KeyboardToken)+0x164>
c000d43b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d43e:	0f b7 c0             	movzx  eax,ax
c000d441:	3d 18 03 00 00       	cmp    eax,0x318
c000d446:	75 06                	jne    c000d44e <sendKeyboardToken(KeyboardToken)+0x9d>
c000d448:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000d44e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d451:	0f b7 c0             	movzx  eax,ax
c000d454:	3d 19 03 00 00       	cmp    eax,0x319
c000d459:	75 06                	jne    c000d461 <sendKeyboardToken(KeyboardToken)+0xb0>
c000d45b:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000d461:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d464:	0f b7 c0             	movzx  eax,ax
c000d467:	3d 1a 03 00 00       	cmp    eax,0x31a
c000d46c:	75 06                	jne    c000d474 <sendKeyboardToken(KeyboardToken)+0xc3>
c000d46e:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000d474:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d477:	0f b7 c0             	movzx  eax,ax
c000d47a:	3d 1b 03 00 00       	cmp    eax,0x31b
c000d47f:	75 06                	jne    c000d487 <sendKeyboardToken(KeyboardToken)+0xd6>
c000d481:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000d487:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d48a:	0f b7 c0             	movzx  eax,ax
c000d48d:	3d 1c 03 00 00       	cmp    eax,0x31c
c000d492:	75 06                	jne    c000d49a <sendKeyboardToken(KeyboardToken)+0xe9>
c000d494:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000d49a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d49d:	0f b7 c0             	movzx  eax,ax
c000d4a0:	3d 1d 03 00 00       	cmp    eax,0x31d
c000d4a5:	75 06                	jne    c000d4ad <sendKeyboardToken(KeyboardToken)+0xfc>
c000d4a7:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000d4ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4b0:	0f b7 c0             	movzx  eax,ax
c000d4b3:	3d 1e 03 00 00       	cmp    eax,0x31e
c000d4b8:	75 06                	jne    c000d4c0 <sendKeyboardToken(KeyboardToken)+0x10f>
c000d4ba:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000d4c0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4c3:	0f b7 c0             	movzx  eax,ax
c000d4c6:	3d 1f 03 00 00       	cmp    eax,0x31f
c000d4cb:	75 06                	jne    c000d4d3 <sendKeyboardToken(KeyboardToken)+0x122>
c000d4cd:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000d4d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4d6:	0f b7 c0             	movzx  eax,ax
c000d4d9:	3d 20 03 00 00       	cmp    eax,0x320
c000d4de:	75 06                	jne    c000d4e6 <sendKeyboardToken(KeyboardToken)+0x135>
c000d4e0:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000d4e6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4e9:	0f b7 c0             	movzx  eax,ax
c000d4ec:	3d 21 03 00 00       	cmp    eax,0x321
c000d4f1:	75 06                	jne    c000d4f9 <sendKeyboardToken(KeyboardToken)+0x148>
c000d4f3:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000d4f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4fc:	0f b7 c0             	movzx  eax,ax
c000d4ff:	3d 22 03 00 00       	cmp    eax,0x322
c000d504:	0f 85 f1 00 00 00    	jne    c000d5fb <sendKeyboardToken(KeyboardToken)+0x24a>
c000d50a:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000d510:	e9 e6 00 00 00       	jmp    c000d5fb <sendKeyboardToken(KeyboardToken)+0x24a>
c000d515:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d518:	0f b7 c0             	movzx  eax,ax
c000d51b:	3d 18 03 00 00       	cmp    eax,0x318
c000d520:	75 0a                	jne    c000d52c <sendKeyboardToken(KeyboardToken)+0x17b>
c000d522:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000d528:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d52c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d52f:	0f b7 c0             	movzx  eax,ax
c000d532:	3d 19 03 00 00       	cmp    eax,0x319
c000d537:	75 0a                	jne    c000d543 <sendKeyboardToken(KeyboardToken)+0x192>
c000d539:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000d53f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d543:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d546:	0f b7 c0             	movzx  eax,ax
c000d549:	3d 1a 03 00 00       	cmp    eax,0x31a
c000d54e:	75 0a                	jne    c000d55a <sendKeyboardToken(KeyboardToken)+0x1a9>
c000d550:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000d556:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d55a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d55d:	0f b7 c0             	movzx  eax,ax
c000d560:	3d 1b 03 00 00       	cmp    eax,0x31b
c000d565:	75 0a                	jne    c000d571 <sendKeyboardToken(KeyboardToken)+0x1c0>
c000d567:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000d56d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d571:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d574:	0f b7 c0             	movzx  eax,ax
c000d577:	3d 1c 03 00 00       	cmp    eax,0x31c
c000d57c:	75 0a                	jne    c000d588 <sendKeyboardToken(KeyboardToken)+0x1d7>
c000d57e:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000d584:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d588:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d58b:	0f b7 c0             	movzx  eax,ax
c000d58e:	3d 1d 03 00 00       	cmp    eax,0x31d
c000d593:	75 0a                	jne    c000d59f <sendKeyboardToken(KeyboardToken)+0x1ee>
c000d595:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000d59b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d59f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d5a2:	0f b7 c0             	movzx  eax,ax
c000d5a5:	3d 1e 03 00 00       	cmp    eax,0x31e
c000d5aa:	75 0a                	jne    c000d5b6 <sendKeyboardToken(KeyboardToken)+0x205>
c000d5ac:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000d5b2:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d5b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d5b9:	0f b7 c0             	movzx  eax,ax
c000d5bc:	3d 1f 03 00 00       	cmp    eax,0x31f
c000d5c1:	75 0a                	jne    c000d5cd <sendKeyboardToken(KeyboardToken)+0x21c>
c000d5c3:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000d5c9:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d5cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d5d0:	0f b7 c0             	movzx  eax,ax
c000d5d3:	3d 20 03 00 00       	cmp    eax,0x320
c000d5d8:	75 0a                	jne    c000d5e4 <sendKeyboardToken(KeyboardToken)+0x233>
c000d5da:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000d5e0:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d5e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d5e7:	0f b7 c0             	movzx  eax,ax
c000d5ea:	3d 21 03 00 00       	cmp    eax,0x321
c000d5ef:	75 0a                	jne    c000d5fb <sendKeyboardToken(KeyboardToken)+0x24a>
c000d5f1:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000d5f7:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d5fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d5fe:	0f b7 c0             	movzx  eax,ax
c000d601:	3d 00 02 00 00       	cmp    eax,0x200
c000d606:	75 2f                	jne    c000d637 <sendKeyboardToken(KeyboardToken)+0x286>
c000d608:	a0 40 b8 02 c0       	mov    al,ds:0xc002b840
c000d60d:	83 f0 01             	xor    eax,0x1
c000d610:	0f b6 c0             	movzx  eax,al
c000d613:	85 c0                	test   eax,eax
c000d615:	74 20                	je     c000d637 <sendKeyboardToken(KeyboardToken)+0x286>
c000d617:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c000d61c:	6a 01                	push   0x1
c000d61e:	6a 00                	push   0x0
c000d620:	68 fa d1 00 c0       	push   0xc000d1fa
c000d625:	50                   	push   eax
c000d626:	e8 31 89 00 00       	call   c0015f5c <Process::createThread(void (*)(void*), void*, int)>
c000d62b:	83 c4 10             	add    esp,0x10
c000d62e:	c6 05 40 b8 02 c0 01 	mov    BYTE PTR ds:0xc002b840,0x1
c000d635:	eb 3a                	jmp    c000d671 <sendKeyboardToken(KeyboardToken)+0x2c0>
c000d637:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d63a:	0f b7 c0             	movzx  eax,ax
c000d63d:	3d 01 02 00 00       	cmp    eax,0x201
c000d642:	75 2d                	jne    c000d671 <sendKeyboardToken(KeyboardToken)+0x2c0>
c000d644:	a0 40 b8 02 c0       	mov    al,ds:0xc002b840
c000d649:	83 f0 01             	xor    eax,0x1
c000d64c:	0f b6 c0             	movzx  eax,al
c000d64f:	85 c0                	test   eax,eax
c000d651:	74 1e                	je     c000d671 <sendKeyboardToken(KeyboardToken)+0x2c0>
c000d653:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c000d658:	6a 01                	push   0x1
c000d65a:	6a 00                	push   0x0
c000d65c:	68 68 d2 00 c0       	push   0xc000d268
c000d661:	50                   	push   eax
c000d662:	e8 f5 88 00 00       	call   c0015f5c <Process::createThread(void (*)(void*), void*, int)>
c000d667:	83 c4 10             	add    esp,0x10
c000d66a:	c6 05 40 b8 02 c0 01 	mov    BYTE PTR ds:0xc002b840,0x1
c000d671:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d674:	0f b7 c0             	movzx  eax,ax
c000d677:	3d 25 03 00 00       	cmp    eax,0x325
c000d67c:	75 06                	jne    c000d684 <sendKeyboardToken(KeyboardToken)+0x2d3>
c000d67e:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000d684:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d687:	0f b7 c0             	movzx  eax,ax
c000d68a:	3d 24 03 00 00       	cmp    eax,0x324
c000d68f:	75 06                	jne    c000d697 <sendKeyboardToken(KeyboardToken)+0x2e6>
c000d691:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000d697:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d69a:	0f b7 c0             	movzx  eax,ax
c000d69d:	3d 23 03 00 00       	cmp    eax,0x323
c000d6a2:	75 06                	jne    c000d6aa <sendKeyboardToken(KeyboardToken)+0x2f9>
c000d6a4:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000d6aa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d6ad:	0f b7 c0             	movzx  eax,ax
c000d6b0:	3d 26 03 00 00       	cmp    eax,0x326
c000d6b5:	75 06                	jne    c000d6bd <sendKeyboardToken(KeyboardToken)+0x30c>
c000d6b7:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000d6bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d6c0:	0f b7 c0             	movzx  eax,ax
c000d6c3:	3d 27 03 00 00       	cmp    eax,0x327
c000d6c8:	75 06                	jne    c000d6d0 <sendKeyboardToken(KeyboardToken)+0x31f>
c000d6ca:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000d6d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d6d3:	0f b7 c0             	movzx  eax,ax
c000d6d6:	3d 22 03 00 00       	cmp    eax,0x322
c000d6db:	75 06                	jne    c000d6e3 <sendKeyboardToken(KeyboardToken)+0x332>
c000d6dd:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000d6e3:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000d6e7:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d6ea:	83 f0 01             	xor    eax,0x1
c000d6ed:	0f b6 c0             	movzx  eax,al
c000d6f0:	85 c0                	test   eax,eax
c000d6f2:	74 7c                	je     c000d770 <sendKeyboardToken(KeyboardToken)+0x3bf>
c000d6f4:	a0 41 b5 02 c0       	mov    al,ds:0xc002b541
c000d6f9:	0f b6 c0             	movzx  eax,al
c000d6fc:	85 c0                	test   eax,eax
c000d6fe:	74 43                	je     c000d743 <sendKeyboardToken(KeyboardToken)+0x392>
c000d700:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000d704:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c000d708:	85 c0                	test   eax,eax
c000d70a:	74 2b                	je     c000d737 <sendKeyboardToken(KeyboardToken)+0x386>
c000d70c:	8b 15 44 b8 02 c0    	mov    edx,DWORD PTR ds:0xc002b844
c000d712:	89 d0                	mov    eax,edx
c000d714:	c1 e0 02             	shl    eax,0x2
c000d717:	01 d0                	add    eax,edx
c000d719:	01 c0                	add    eax,eax
c000d71b:	a3 44 b8 02 c0       	mov    ds:0xc002b844,eax
c000d720:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d723:	0f b7 c0             	movzx  eax,ax
c000d726:	8d 50 d0             	lea    edx,[eax-0x30]
c000d729:	a1 44 b8 02 c0       	mov    eax,ds:0xc002b844
c000d72e:	01 d0                	add    eax,edx
c000d730:	a3 44 b8 02 c0       	mov    ds:0xc002b844,eax
c000d735:	eb 71                	jmp    c000d7a8 <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d737:	c7 05 44 b8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b844,0x0
c000d741:	eb 65                	jmp    c000d7a8 <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d743:	a1 44 b8 02 c0       	mov    eax,ds:0xc002b844
c000d748:	85 c0                	test   eax,eax
c000d74a:	74 18                	je     c000d764 <sendKeyboardToken(KeyboardToken)+0x3b3>
c000d74c:	a1 44 b8 02 c0       	mov    eax,ds:0xc002b844
c000d751:	0f b6 c0             	movzx  eax,al
c000d754:	83 ec 0c             	sub    esp,0xc
c000d757:	50                   	push   eax
c000d758:	e8 79 fb ff ff       	call   c000d2d6 <sendKeyToTerminal(unsigned char)>
c000d75d:	83 c4 10             	add    esp,0x10
c000d760:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000d764:	c7 05 44 b8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b844,0x0
c000d76e:	eb 38                	jmp    c000d7a8 <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d770:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d773:	0f b7 c0             	movzx  eax,ax
c000d776:	3d 01 01 00 00       	cmp    eax,0x101
c000d77b:	75 2b                	jne    c000d7a8 <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d77d:	a1 44 b8 02 c0       	mov    eax,ds:0xc002b844
c000d782:	85 c0                	test   eax,eax
c000d784:	74 18                	je     c000d79e <sendKeyboardToken(KeyboardToken)+0x3ed>
c000d786:	a1 44 b8 02 c0       	mov    eax,ds:0xc002b844
c000d78b:	0f b6 c0             	movzx  eax,al
c000d78e:	83 ec 0c             	sub    esp,0xc
c000d791:	50                   	push   eax
c000d792:	e8 3f fb ff ff       	call   c000d2d6 <sendKeyToTerminal(unsigned char)>
c000d797:	83 c4 10             	add    esp,0x10
c000d79a:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000d79e:	c7 05 44 b8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b844,0x0
c000d7a8:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000d7ab:	83 f0 01             	xor    eax,0x1
c000d7ae:	0f b6 c0             	movzx  eax,al
c000d7b1:	85 c0                	test   eax,eax
c000d7b3:	74 5a                	je     c000d80f <sendKeyboardToken(KeyboardToken)+0x45e>
c000d7b5:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d7b8:	83 f0 01             	xor    eax,0x1
c000d7bb:	0f b6 c0             	movzx  eax,al
c000d7be:	85 c0                	test   eax,eax
c000d7c0:	74 4d                	je     c000d80f <sendKeyboardToken(KeyboardToken)+0x45e>
c000d7c2:	a0 40 b5 02 c0       	mov    al,ds:0xc002b540
c000d7c7:	83 f0 01             	xor    eax,0x1
c000d7ca:	0f b6 c0             	movzx  eax,al
c000d7cd:	85 c0                	test   eax,eax
c000d7cf:	74 3e                	je     c000d80f <sendKeyboardToken(KeyboardToken)+0x45e>
c000d7d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d7d4:	0f b7 c0             	movzx  eax,ax
c000d7d7:	83 f8 1f             	cmp    eax,0x1f
c000d7da:	76 0b                	jbe    c000d7e7 <sendKeyboardToken(KeyboardToken)+0x436>
c000d7dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d7df:	0f b7 c0             	movzx  eax,ax
c000d7e2:	83 f8 7e             	cmp    eax,0x7e
c000d7e5:	76 16                	jbe    c000d7fd <sendKeyboardToken(KeyboardToken)+0x44c>
c000d7e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d7ea:	0f b7 c0             	movzx  eax,ax
c000d7ed:	83 f8 0a             	cmp    eax,0xa
c000d7f0:	74 0b                	je     c000d7fd <sendKeyboardToken(KeyboardToken)+0x44c>
c000d7f2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d7f5:	0f b7 c0             	movzx  eax,ax
c000d7f8:	83 f8 08             	cmp    eax,0x8
c000d7fb:	75 12                	jne    c000d80f <sendKeyboardToken(KeyboardToken)+0x45e>
c000d7fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d800:	0f b6 c0             	movzx  eax,al
c000d803:	83 ec 0c             	sub    esp,0xc
c000d806:	50                   	push   eax
c000d807:	e8 ca fa ff ff       	call   c000d2d6 <sendKeyToTerminal(unsigned char)>
c000d80c:	83 c4 10             	add    esp,0x10
c000d80f:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000d812:	83 f0 01             	xor    eax,0x1
c000d815:	0f b6 c0             	movzx  eax,al
c000d818:	85 c0                	test   eax,eax
c000d81a:	74 5d                	je     c000d879 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d81c:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d81f:	83 f0 01             	xor    eax,0x1
c000d822:	0f b6 c0             	movzx  eax,al
c000d825:	85 c0                	test   eax,eax
c000d827:	74 50                	je     c000d879 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d829:	a0 40 b5 02 c0       	mov    al,ds:0xc002b540
c000d82e:	0f b6 c0             	movzx  eax,al
c000d831:	85 c0                	test   eax,eax
c000d833:	74 44                	je     c000d879 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d835:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d838:	0f b7 c0             	movzx  eax,ax
c000d83b:	83 f8 3f             	cmp    eax,0x3f
c000d83e:	76 39                	jbe    c000d879 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d840:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d843:	0f b7 c0             	movzx  eax,ax
c000d846:	83 f8 7f             	cmp    eax,0x7f
c000d849:	77 2e                	ja     c000d879 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d84b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d84e:	88 c2                	mov    dl,al
c000d850:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d853:	0f b7 c0             	movzx  eax,ax
c000d856:	83 f8 5f             	cmp    eax,0x5f
c000d859:	76 04                	jbe    c000d85f <sendKeyboardToken(KeyboardToken)+0x4ae>
c000d85b:	b0 20                	mov    al,0x20
c000d85d:	eb 02                	jmp    c000d861 <sendKeyboardToken(KeyboardToken)+0x4b0>
c000d85f:	b0 00                	mov    al,0x0
c000d861:	89 d1                	mov    ecx,edx
c000d863:	29 c1                	sub    ecx,eax
c000d865:	89 c8                	mov    eax,ecx
c000d867:	83 e8 40             	sub    eax,0x40
c000d86a:	0f b6 c0             	movzx  eax,al
c000d86d:	83 ec 0c             	sub    esp,0xc
c000d870:	50                   	push   eax
c000d871:	e8 60 fa ff ff       	call   c000d2d6 <sendKeyToTerminal(unsigned char)>
c000d876:	83 c4 10             	add    esp,0x10
c000d879:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d87c:	0f b7 c0             	movzx  eax,ax
c000d87f:	3d 00 03 00 00       	cmp    eax,0x300
c000d884:	75 12                	jne    c000d898 <sendKeyboardToken(KeyboardToken)+0x4e7>
c000d886:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d889:	83 f0 01             	xor    eax,0x1
c000d88c:	0f b6 c0             	movzx  eax,al
c000d88f:	85 c0                	test   eax,eax
c000d891:	74 05                	je     c000d898 <sendKeyboardToken(KeyboardToken)+0x4e7>
c000d893:	e8 9b ac ff ff       	call   c0008533 <doTerminalCycle()>
c000d898:	90                   	nop
c000d899:	c9                   	leave  
c000d89a:	c3                   	ret    

c000d89b <clearInternalKeybuffer(VgaText*)>:
c000d89b:	55                   	push   ebp
c000d89c:	89 e5                	mov    ebp,esp
c000d89e:	83 ec 08             	sub    esp,0x8
c000d8a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d8a4:	05 02 01 00 00       	add    eax,0x102
c000d8a9:	83 ec 0c             	sub    esp,0xc
c000d8ac:	50                   	push   eax
c000d8ad:	e8 be 2c ff ff       	call   c0000570 <strlen>
c000d8b2:	83 c4 10             	add    esp,0x10
c000d8b5:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d8b8:	81 c2 02 01 00 00    	add    edx,0x102
c000d8be:	83 ec 04             	sub    esp,0x4
c000d8c1:	50                   	push   eax
c000d8c2:	6a 00                	push   0x0
c000d8c4:	52                   	push   edx
c000d8c5:	e8 26 2c ff ff       	call   c00004f0 <memset>
c000d8ca:	83 c4 10             	add    esp,0x10
c000d8cd:	90                   	nop
c000d8ce:	c9                   	leave  
c000d8cf:	c3                   	ret    

c000d8d0 <readKeyboard(VgaText*, char*, unsigned long)>:
c000d8d0:	55                   	push   ebp
c000d8d1:	89 e5                	mov    ebp,esp
c000d8d3:	83 ec 18             	sub    esp,0x18
c000d8d6:	a1 28 b4 02 c0       	mov    eax,ds:0xc002b428
c000d8db:	85 c0                	test   eax,eax
c000d8dd:	74 2a                	je     c000d909 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000d8df:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000d8e5:	8b 0d 28 b4 02 c0    	mov    ecx,DWORD PTR ds:0xc002b428
c000d8eb:	83 ec 04             	sub    esp,0x4
c000d8ee:	68 40 b4 02 c0       	push   0xc002b440
c000d8f3:	83 ec 08             	sub    esp,0x8
c000d8f6:	89 e2                	mov    edx,esp
c000d8f8:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c000d8fb:	89 02                	mov    DWORD PTR [edx],eax
c000d8fd:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000d900:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000d904:	ff d1                	call   ecx
c000d906:	83 c4 10             	add    esp,0x10
c000d909:	fb                   	sti    
c000d90a:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000d911:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000d915:	0f 84 0d 01 00 00    	je     c000da28 <readKeyboard(VgaText*, char*, unsigned long)+0x158>
c000d91b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d91e:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000d924:	0f be c0             	movsx  eax,al
c000d927:	85 c0                	test   eax,eax
c000d929:	75 2c                	jne    c000d957 <readKeyboard(VgaText*, char*, unsigned long)+0x87>
c000d92b:	fa                   	cli    
c000d92c:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d931:	83 c0 01             	add    eax,0x1
c000d934:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000d939:	e8 6e 88 00 00       	call   c00161ac <schedule()>
c000d93e:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d943:	83 e8 01             	sub    eax,0x1
c000d946:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000d94b:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d950:	85 c0                	test   eax,eax
c000d952:	75 c7                	jne    c000d91b <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000d954:	fb                   	sti    
c000d955:	eb c4                	jmp    c000d91b <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000d957:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000d95a:	8d 50 01             	lea    edx,[eax+0x1]
c000d95d:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d960:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d963:	8a 92 02 01 00 00    	mov    dl,BYTE PTR [edx+0x102]
c000d969:	88 10                	mov    BYTE PTR [eax],dl
c000d96b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d96e:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000d974:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000d977:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d97b:	83 f8 03             	cmp    eax,0x3
c000d97e:	75 1e                	jne    c000d99e <readKeyboard(VgaText*, char*, unsigned long)+0xce>
c000d980:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000d985:	8b 00                	mov    eax,DWORD PTR [eax]
c000d987:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d98a:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000d990:	83 ec 08             	sub    esp,0x8
c000d993:	6a 02                	push   0x2
c000d995:	50                   	push   eax
c000d996:	e8 cf 41 00 00       	call   c0011b6a <KeRaiseSignal(SigHandlerBlock*, int)>
c000d99b:	83 c4 10             	add    esp,0x10
c000d99e:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d9a2:	83 f8 1c             	cmp    eax,0x1c
c000d9a5:	75 1e                	jne    c000d9c5 <readKeyboard(VgaText*, char*, unsigned long)+0xf5>
c000d9a7:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000d9ac:	8b 00                	mov    eax,DWORD PTR [eax]
c000d9ae:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d9b1:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000d9b7:	83 ec 08             	sub    esp,0x8
c000d9ba:	6a 09                	push   0x9
c000d9bc:	50                   	push   eax
c000d9bd:	e8 a8 41 00 00       	call   c0011b6a <KeRaiseSignal(SigHandlerBlock*, int)>
c000d9c2:	83 c4 10             	add    esp,0x10
c000d9c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d9c8:	05 02 01 00 00       	add    eax,0x102
c000d9cd:	83 ec 0c             	sub    esp,0xc
c000d9d0:	50                   	push   eax
c000d9d1:	e8 9a 2b ff ff       	call   c0000570 <strlen>
c000d9d6:	83 c4 10             	add    esp,0x10
c000d9d9:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d9dc:	81 c2 02 01 00 00    	add    edx,0x102
c000d9e2:	8d 4a 01             	lea    ecx,[edx+0x1]
c000d9e5:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d9e8:	81 c2 02 01 00 00    	add    edx,0x102
c000d9ee:	83 ec 04             	sub    esp,0x4
c000d9f1:	50                   	push   eax
c000d9f2:	51                   	push   ecx
c000d9f3:	52                   	push   edx
c000d9f4:	e8 d7 29 ff ff       	call   c00003d0 <memmove>
c000d9f9:	83 c4 10             	add    esp,0x10
c000d9fc:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
c000da00:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c000da04:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000da08:	83 f8 0a             	cmp    eax,0xa
c000da0b:	74 16                	je     c000da23 <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000da0d:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000da11:	83 f8 03             	cmp    eax,0x3
c000da14:	74 0d                	je     c000da23 <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000da16:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000da1a:	83 f8 1c             	cmp    eax,0x1c
c000da1d:	0f 85 ee fe ff ff    	jne    c000d911 <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000da23:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000da26:	eb 03                	jmp    c000da2b <readKeyboard(VgaText*, char*, unsigned long)+0x15b>
c000da28:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000da2b:	c9                   	leave  
c000da2c:	c3                   	ret    
c000da2d:	90                   	nop

c000da2e <Keyboard::Keyboard(char const*)>:
c000da2e:	83 ec 0c             	sub    esp,0xc
c000da31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da35:	83 ec 08             	sub    esp,0x8
c000da38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da3c:	50                   	push   eax
c000da3d:	e8 4c f1 ff ff       	call   c000cb8e <Device::Device(char const*)>
c000da42:	83 c4 10             	add    esp,0x10
c000da45:	ba fc 1d 02 c0       	mov    edx,0xc0021dfc
c000da4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da4e:	89 10                	mov    DWORD PTR [eax],edx
c000da50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da54:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000da5e:	c6 05 24 b4 02 c0 01 	mov    BYTE PTR ds:0xc002b424,0x1
c000da65:	90                   	nop
c000da66:	83 c4 0c             	add    esp,0xc
c000da69:	c3                   	ret    

c000da6a <Keyboard::~Keyboard()>:
c000da6a:	83 ec 0c             	sub    esp,0xc
c000da6d:	ba fc 1d 02 c0       	mov    edx,0xc0021dfc
c000da72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da76:	89 10                	mov    DWORD PTR [eax],edx
c000da78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da7c:	83 ec 0c             	sub    esp,0xc
c000da7f:	50                   	push   eax
c000da80:	e8 73 ee ff ff       	call   c000c8f8 <Device::~Device()>
c000da85:	83 c4 10             	add    esp,0x10
c000da88:	90                   	nop
c000da89:	83 c4 0c             	add    esp,0xc
c000da8c:	c3                   	ret    
c000da8d:	90                   	nop

c000da8e <Keyboard::~Keyboard()>:
c000da8e:	83 ec 0c             	sub    esp,0xc
c000da91:	83 ec 0c             	sub    esp,0xc
c000da94:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da98:	e8 cd ff ff ff       	call   c000da6a <Keyboard::~Keyboard()>
c000da9d:	83 c4 10             	add    esp,0x10
c000daa0:	83 ec 08             	sub    esp,0x8
c000daa3:	68 5c 01 00 00       	push   0x15c
c000daa8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000daac:	e8 97 cd ff ff       	call   c000a848 <operator delete(void*, unsigned long)>
c000dab1:	83 c4 10             	add    esp,0x10
c000dab4:	83 c4 0c             	add    esp,0xc
c000dab7:	c3                   	ret    

c000dab8 <LogicalDisk::close(int, int, void*)>:
c000dab8:	83 c8 ff             	or     eax,0xffffffff
c000dabb:	c3                   	ret    

c000dabc <LogicalDisk::~LogicalDisk()>:
c000dabc:	83 ec 0c             	sub    esp,0xc
c000dabf:	ba 74 1e 02 c0       	mov    edx,0xc0021e74
c000dac4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dac8:	89 10                	mov    DWORD PTR [eax],edx
c000daca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dace:	83 ec 0c             	sub    esp,0xc
c000dad1:	50                   	push   eax
c000dad2:	e8 21 ee ff ff       	call   c000c8f8 <Device::~Device()>
c000dad7:	83 c4 10             	add    esp,0x10
c000dada:	90                   	nop
c000dadb:	83 c4 0c             	add    esp,0xc
c000dade:	c3                   	ret    
c000dadf:	90                   	nop

c000dae0 <LogicalDisk::~LogicalDisk()>:
c000dae0:	83 ec 0c             	sub    esp,0xc
c000dae3:	83 ec 0c             	sub    esp,0xc
c000dae6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000daea:	e8 cd ff ff ff       	call   c000dabc <LogicalDisk::~LogicalDisk()>
c000daef:	83 c4 10             	add    esp,0x10
c000daf2:	83 ec 08             	sub    esp,0x8
c000daf5:	68 78 01 00 00       	push   0x178
c000dafa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dafe:	e8 45 cd ff ff       	call   c000a848 <operator delete(void*, unsigned long)>
c000db03:	83 c4 10             	add    esp,0x10
c000db06:	83 c4 0c             	add    esp,0xc
c000db09:	c3                   	ret    

c000db0a <LogicalDisk::open(int, int, void*)>:
c000db0a:	83 ec 18             	sub    esp,0x18
c000db0d:	68 28 1e 02 c0       	push   0xc0021e28
c000db12:	e8 b0 3b 00 00       	call   c00116c7 <KePanic(char const*)>
c000db17:	83 c8 ff             	or     eax,0xffffffff
c000db1a:	83 c4 1c             	add    esp,0x1c
c000db1d:	c3                   	ret    

c000db1e <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000db1e:	53                   	push   ebx
c000db1f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000db23:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000db27:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000db2b:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000db31:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000db37:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000db3d:	77 10                	ja     c000db4f <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000db3f:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000db45:	89 d3                	mov    ebx,edx
c000db47:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000db4d:	72 05                	jb     c000db54 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000db4f:	83 c8 ff             	or     eax,0xffffffff
c000db52:	89 c2                	mov    edx,eax
c000db54:	5b                   	pop    ebx
c000db55:	c3                   	ret    

c000db56 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000db56:	56                   	push   esi
c000db57:	83 c8 ff             	or     eax,0xffffffff
c000db5a:	53                   	push   ebx
c000db5b:	89 c2                	mov    edx,eax
c000db5d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000db61:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000db65:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000db69:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000db6f:	77 27                	ja     c000db98 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000db71:	89 d8                	mov    eax,ebx
c000db73:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000db79:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000db7f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000db84:	89 c2                	mov    edx,eax
c000db86:	73 10                	jae    c000db98 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000db88:	89 c8                	mov    eax,ecx
c000db8a:	89 da                	mov    edx,ebx
c000db8c:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000db92:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000db98:	5b                   	pop    ebx
c000db99:	5e                   	pop    esi
c000db9a:	c3                   	ret    
c000db9b:	90                   	nop

c000db9c <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000db9c:	83 ec 1c             	sub    esp,0x1c
c000db9f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000dba3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dba7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000dbab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dbaf:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000dbb3:	89 04 24             	mov    DWORD PTR [esp],eax
c000dbb6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000dbba:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000dbbe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dbc2:	83 ec 08             	sub    esp,0x8
c000dbc5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dbc9:	50                   	push   eax
c000dbca:	e8 bf ef ff ff       	call   c000cb8e <Device::Device(char const*)>
c000dbcf:	83 c4 10             	add    esp,0x10
c000dbd2:	ba 74 1e 02 c0       	mov    edx,0xc0021e74
c000dbd7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dbdb:	89 10                	mov    DWORD PTR [eax],edx
c000dbdd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dbe1:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000dbe8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dbec:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c000dbf3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dbf7:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000dbfe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc02:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000dc0c:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000dc10:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000dc14:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000dc18:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000dc1e:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000dc24:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000dc28:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000dc2b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc2f:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000dc35:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000dc3b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc3f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000dc43:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000dc49:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc4d:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000dc57:	90                   	nop
c000dc58:	83 c4 1c             	add    esp,0x1c
c000dc5b:	c3                   	ret    

c000dc5c <LogicalDisk::assignDriveLetter()>:
c000dc5c:	55                   	push   ebp
c000dc5d:	57                   	push   edi
c000dc5e:	56                   	push   esi
c000dc5f:	53                   	push   ebx
c000dc60:	83 ec 14             	sub    esp,0x14
c000dc63:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000dc67:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000dc6d:	b0 41                	mov    al,0x41
c000dc6f:	8a 93 69 01 00 00    	mov    dl,BYTE PTR [ebx+0x169]
c000dc75:	84 d2                	test   dl,dl
c000dc77:	75 02                	jne    c000dc7b <LogicalDisk::assignDriveLetter()+0x1f>
c000dc79:	b0 43                	mov    al,0x43
c000dc7b:	8b 3d 60 b8 02 c0    	mov    edi,DWORD PTR ds:0xc002b860
c000dc81:	0f b6 ca             	movzx  ecx,dl
c000dc84:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c000dc88:	0f be e8             	movsx  ebp,al
c000dc8b:	8b 3d 64 b8 02 c0    	mov    edi,DWORD PTR ds:0xc002b864
c000dc91:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000dc95:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000dc99:	3c 43                	cmp    al,0x43
c000dc9b:	75 10                	jne    c000dcad <LogicalDisk::assignDriveLetter()+0x51>
c000dc9d:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000dca4:	75 5a                	jne    c000dd00 <LogicalDisk::assignDriveLetter()+0xa4>
c000dca6:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000dcab:	75 53                	jne    c000dd00 <LogicalDisk::assignDriveLetter()+0xa4>
c000dcad:	8d 75 bf             	lea    esi,[ebp-0x41]
c000dcb0:	ba 01 00 00 00       	mov    edx,0x1
c000dcb5:	89 34 24             	mov    DWORD PTR [esp],esi
c000dcb8:	8a 0c 24             	mov    cl,BYTE PTR [esp]
c000dcbb:	d3 e2                	shl    edx,cl
c000dcbd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000dcc1:	89 d7                	mov    edi,edx
c000dcc3:	89 d6                	mov    esi,edx
c000dcc5:	c1 ff 1f             	sar    edi,0x1f
c000dcc8:	23 54 24 04          	and    edx,DWORD PTR [esp+0x4]
c000dccc:	21 f9                	and    ecx,edi
c000dcce:	09 d1                	or     ecx,edx
c000dcd0:	75 2e                	jne    c000dd00 <LogicalDisk::assignDriveLetter()+0xa4>
c000dcd2:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000dcd6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dcda:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000dce0:	09 f2                	or     edx,esi
c000dce2:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000dce5:	89 15 60 b8 02 c0    	mov    DWORD PTR ds:0xc002b860,edx
c000dceb:	89 1c b5 80 b8 02 c0 	mov    DWORD PTR [esi*4-0x3ffd4780],ebx
c000dcf2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000dcf6:	09 fa                	or     edx,edi
c000dcf8:	89 15 64 b8 02 c0    	mov    DWORD PTR ds:0xc002b864,edx
c000dcfe:	eb 0d                	jmp    c000dd0d <LogicalDisk::assignDriveLetter()+0xb1>
c000dd00:	8d 50 01             	lea    edx,[eax+0x1]
c000dd03:	45                   	inc    ebp
c000dd04:	88 d0                	mov    al,dl
c000dd06:	80 fa 5b             	cmp    dl,0x5b
c000dd09:	75 8e                	jne    c000dc99 <LogicalDisk::assignDriveLetter()+0x3d>
c000dd0b:	31 c0                	xor    eax,eax
c000dd0d:	83 c4 14             	add    esp,0x14
c000dd10:	5b                   	pop    ebx
c000dd11:	5e                   	pop    esi
c000dd12:	5f                   	pop    edi
c000dd13:	5d                   	pop    ebp
c000dd14:	c3                   	ret    
c000dd15:	90                   	nop

c000dd16 <LogicalDisk::mount()>:
c000dd16:	56                   	push   esi
c000dd17:	53                   	push   ebx
c000dd18:	53                   	push   ebx
c000dd19:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000dd1d:	8b 1d 04 94 02 c0    	mov    ebx,DWORD PTR ds:0xc0029404
c000dd23:	c7 86 74 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x174],0x0
c000dd2d:	85 db                	test   ebx,ebx
c000dd2f:	74 27                	je     c000dd58 <LogicalDisk::mount()+0x42>
c000dd31:	51                   	push   ecx
c000dd32:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000dd39:	8b 13                	mov    edx,DWORD PTR [ebx]
c000dd3b:	83 e8 41             	sub    eax,0x41
c000dd3e:	50                   	push   eax
c000dd3f:	56                   	push   esi
c000dd40:	53                   	push   ebx
c000dd41:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000dd44:	83 c4 10             	add    esp,0x10
c000dd47:	84 c0                	test   al,al
c000dd49:	74 08                	je     c000dd53 <LogicalDisk::mount()+0x3d>
c000dd4b:	89 9e 74 01 00 00    	mov    DWORD PTR [esi+0x174],ebx
c000dd51:	eb 07                	jmp    c000dd5a <LogicalDisk::mount()+0x44>
c000dd53:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000dd56:	eb d5                	jmp    c000dd2d <LogicalDisk::mount()+0x17>
c000dd58:	31 c0                	xor    eax,eax
c000dd5a:	5a                   	pop    edx
c000dd5b:	5b                   	pop    ebx
c000dd5c:	5e                   	pop    esi
c000dd5d:	c3                   	ret    

c000dd5e <LogicalDisk::unmount()>:
c000dd5e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dd62:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000dd6c:	c3                   	ret    
c000dd6d:	90                   	nop

c000dd6e <LogicalDisk::eject()>:
c000dd6e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dd72:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000dd78:	8b 10                	mov    edx,DWORD PTR [eax]
c000dd7a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000dd7e:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000dd81:	90                   	nop

c000dd82 <LogicalDisk::unassignDriveLetter()>:
c000dd82:	57                   	push   edi
c000dd83:	56                   	push   esi
c000dd84:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000dd88:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000dd8f:	85 c9                	test   ecx,ecx
c000dd91:	75 0f                	jne    c000dda2 <LogicalDisk::unassignDriveLetter()+0x20>
c000dd93:	c7 44 24 0c 4c 1e 02 c0 	mov    DWORD PTR [esp+0xc],0xc0021e4c
c000dd9b:	5e                   	pop    esi
c000dd9c:	5f                   	pop    edi
c000dd9d:	e9 25 39 00 00       	jmp    c00116c7 <KePanic(char const*)>
c000dda2:	83 e9 41             	sub    ecx,0x41
c000dda5:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000ddac:	b8 01 00 00 00       	mov    eax,0x1
c000ddb1:	c7 04 8d 80 b8 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd4780],0x0
c000ddbc:	d3 e0                	shl    eax,cl
c000ddbe:	89 c7                	mov    edi,eax
c000ddc0:	f7 d0                	not    eax
c000ddc2:	c1 ff 1f             	sar    edi,0x1f
c000ddc5:	21 05 60 b8 02 c0    	and    DWORD PTR ds:0xc002b860,eax
c000ddcb:	89 fe                	mov    esi,edi
c000ddcd:	f7 d6                	not    esi
c000ddcf:	21 35 64 b8 02 c0    	and    DWORD PTR ds:0xc002b864,esi
c000ddd5:	5e                   	pop    esi
c000ddd6:	5f                   	pop    edi
c000ddd7:	c3                   	ret    

c000ddd8 <LogicalDisk::read(unsigned long long, int, void*)>:
c000ddd8:	57                   	push   edi
c000ddd9:	56                   	push   esi
c000ddda:	53                   	push   ebx
c000dddb:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000dddf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000dde3:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000dde7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ddeb:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000ddf1:	77 41                	ja     c000de34 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000ddf3:	99                   	cdq    
c000ddf4:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000ddfa:	01 c8                	add    eax,ecx
c000ddfc:	11 da                	adc    edx,ebx
c000ddfe:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000de04:	19 d7                	sbb    edi,edx
c000de06:	72 33                	jb     c000de3b <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000de08:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000de0e:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000de14:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000de18:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000de1c:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000de22:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000de28:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000de2c:	5b                   	pop    ebx
c000de2d:	5e                   	pop    esi
c000de2e:	5f                   	pop    edi
c000de2f:	e9 c6 0a 00 00       	jmp    c000e8fa <VCache::read(unsigned long long, int, void*)>
c000de34:	b8 05 00 00 00       	mov    eax,0x5
c000de39:	eb 05                	jmp    c000de40 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000de3b:	b8 07 00 00 00       	mov    eax,0x7
c000de40:	5b                   	pop    ebx
c000de41:	5e                   	pop    esi
c000de42:	5f                   	pop    edi
c000de43:	c3                   	ret    

c000de44 <LogicalDisk::write(unsigned long long, int, void*)>:
c000de44:	57                   	push   edi
c000de45:	56                   	push   esi
c000de46:	53                   	push   ebx
c000de47:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000de4b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000de4f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000de53:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000de57:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000de5d:	77 41                	ja     c000dea0 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000de5f:	99                   	cdq    
c000de60:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000de66:	01 c8                	add    eax,ecx
c000de68:	11 da                	adc    edx,ebx
c000de6a:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000de70:	19 d7                	sbb    edi,edx
c000de72:	72 33                	jb     c000dea7 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000de74:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000de7a:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000de80:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000de84:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000de88:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000de8e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000de94:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000de98:	5b                   	pop    ebx
c000de99:	5e                   	pop    esi
c000de9a:	5f                   	pop    edi
c000de9b:	e9 6c 09 00 00       	jmp    c000e80c <VCache::write(unsigned long long, int, void*)>
c000dea0:	b8 05 00 00 00       	mov    eax,0x5
c000dea5:	eb 05                	jmp    c000deac <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000dea7:	b8 07 00 00 00       	mov    eax,0x7
c000deac:	5b                   	pop    ebx
c000dead:	5e                   	pop    esi
c000deae:	5f                   	pop    edi
c000deaf:	c3                   	ret    

c000deb0 <Mouse::Mouse(char const*)>:
c000deb0:	83 ec 0c             	sub    esp,0xc
c000deb3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000deb7:	83 ec 08             	sub    esp,0x8
c000deba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000debe:	50                   	push   eax
c000debf:	e8 ca ec ff ff       	call   c000cb8e <Device::Device(char const*)>
c000dec4:	83 c4 10             	add    esp,0x10
c000dec7:	ba a0 1e 02 c0       	mov    edx,0xc0021ea0
c000decc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ded0:	89 10                	mov    DWORD PTR [eax],edx
c000ded2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ded6:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000dee0:	90                   	nop
c000dee1:	83 c4 0c             	add    esp,0xc
c000dee4:	c3                   	ret    
c000dee5:	90                   	nop
c000dee6:	66 90                	xchg   ax,ax

c000dee8 <Mouse::~Mouse()>:
c000dee8:	83 ec 0c             	sub    esp,0xc
c000deeb:	ba a0 1e 02 c0       	mov    edx,0xc0021ea0
c000def0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000def4:	89 10                	mov    DWORD PTR [eax],edx
c000def6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000defa:	83 ec 0c             	sub    esp,0xc
c000defd:	50                   	push   eax
c000defe:	e8 f5 e9 ff ff       	call   c000c8f8 <Device::~Device()>
c000df03:	83 c4 10             	add    esp,0x10
c000df06:	90                   	nop
c000df07:	83 c4 0c             	add    esp,0xc
c000df0a:	c3                   	ret    
c000df0b:	90                   	nop

c000df0c <Mouse::~Mouse()>:
c000df0c:	83 ec 0c             	sub    esp,0xc
c000df0f:	83 ec 0c             	sub    esp,0xc
c000df12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df16:	e8 cd ff ff ff       	call   c000dee8 <Mouse::~Mouse()>
c000df1b:	83 c4 10             	add    esp,0x10
c000df1e:	83 ec 08             	sub    esp,0x8
c000df21:	68 58 01 00 00       	push   0x158
c000df26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df2a:	e8 19 c9 ff ff       	call   c000a848 <operator delete(void*, unsigned long)>
c000df2f:	83 c4 10             	add    esp,0x10
c000df32:	83 c4 0c             	add    esp,0xc
c000df35:	c3                   	ret    

c000df36 <NIC::getMAC()>:
c000df36:	31 c0                	xor    eax,eax
c000df38:	31 d2                	xor    edx,edx
c000df3a:	c3                   	ret    
c000df3b:	90                   	nop

c000df3c <NIC::write(int, unsigned char*, int*)>:
c000df3c:	b8 01 00 00 00       	mov    eax,0x1
c000df41:	c3                   	ret    

c000df42 <NIC::NIC(char const*)>:
c000df42:	83 ec 0c             	sub    esp,0xc
c000df45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df49:	83 ec 08             	sub    esp,0x8
c000df4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df50:	50                   	push   eax
c000df51:	e8 38 ec ff ff       	call   c000cb8e <Device::Device(char const*)>
c000df56:	83 c4 10             	add    esp,0x10
c000df59:	ba cc 1e 02 c0       	mov    edx,0xc0021ecc
c000df5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df62:	89 10                	mov    DWORD PTR [eax],edx
c000df64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df68:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000df72:	90                   	nop
c000df73:	83 c4 0c             	add    esp,0xc
c000df76:	c3                   	ret    
c000df77:	90                   	nop

c000df78 <NIC::~NIC()>:
c000df78:	83 ec 0c             	sub    esp,0xc
c000df7b:	ba cc 1e 02 c0       	mov    edx,0xc0021ecc
c000df80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df84:	89 10                	mov    DWORD PTR [eax],edx
c000df86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df8a:	83 ec 0c             	sub    esp,0xc
c000df8d:	50                   	push   eax
c000df8e:	e8 65 e9 ff ff       	call   c000c8f8 <Device::~Device()>
c000df93:	83 c4 10             	add    esp,0x10
c000df96:	90                   	nop
c000df97:	83 c4 0c             	add    esp,0xc
c000df9a:	c3                   	ret    
c000df9b:	90                   	nop

c000df9c <NIC::~NIC()>:
c000df9c:	83 ec 0c             	sub    esp,0xc
c000df9f:	83 ec 0c             	sub    esp,0xc
c000dfa2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfa6:	e8 cd ff ff ff       	call   c000df78 <NIC::~NIC()>
c000dfab:	83 c4 10             	add    esp,0x10
c000dfae:	83 ec 08             	sub    esp,0x8
c000dfb1:	68 58 01 00 00       	push   0x158
c000dfb6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfba:	e8 89 c8 ff ff       	call   c000a848 <operator delete(void*, unsigned long)>
c000dfbf:	83 c4 10             	add    esp,0x10
c000dfc2:	83 c4 0c             	add    esp,0xc
c000dfc5:	c3                   	ret    

c000dfc6 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000dfc6:	55                   	push   ebp
c000dfc7:	57                   	push   edi
c000dfc8:	56                   	push   esi
c000dfc9:	53                   	push   ebx
c000dfca:	81 ec 28 01 00 00    	sub    esp,0x128
c000dfd0:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c000dfd7:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c000dfde:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000dfe5:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c000dfec:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000dff0:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000dff4:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000dffb:	e8 8a ec ff ff       	call   c000cc8a <Device::getName()>
c000e000:	5a                   	pop    edx
c000e001:	59                   	pop    ecx
c000e002:	50                   	push   eax
c000e003:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000e007:	55                   	push   ebp
c000e008:	e8 33 26 ff ff       	call   c0000640 <strcpy>
c000e00d:	5b                   	pop    ebx
c000e00e:	58                   	pop    eax
c000e00f:	68 f8 1e 02 c0       	push   0xc0021ef8
c000e014:	55                   	push   ebp
c000e015:	e8 26 28 ff ff       	call   c0000840 <strcat>
c000e01a:	c7 04 24 78 01 00 00 	mov    DWORD PTR [esp],0x178
c000e021:	e8 c0 9a ff ff       	call   c0007ae6 <malloc>
c000e026:	83 c4 0c             	add    esp,0xc
c000e029:	89 c3                	mov    ebx,eax
c000e02b:	57                   	push   edi
c000e02c:	56                   	push   esi
c000e02d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e031:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e035:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000e03c:	55                   	push   ebp
c000e03d:	50                   	push   eax
c000e03e:	e8 59 fb ff ff       	call   c000db9c <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000e043:	83 c4 14             	add    esp,0x14
c000e046:	53                   	push   ebx
c000e047:	e8 10 fc ff ff       	call   c000dc5c <LogicalDisk::assignDriveLetter()>
c000e04c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e04f:	e8 c2 fc ff ff       	call   c000dd16 <LogicalDisk::mount()>
c000e054:	58                   	pop    eax
c000e055:	5a                   	pop    edx
c000e056:	53                   	push   ebx
c000e057:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000e05e:	e8 93 e9 ff ff       	call   c000c9f6 <Device::addChild(Device*)>
c000e063:	81 c4 2c 01 00 00    	add    esp,0x12c
c000e069:	5b                   	pop    ebx
c000e06a:	5e                   	pop    esi
c000e06b:	5f                   	pop    edi
c000e06c:	5d                   	pop    ebp
c000e06d:	c3                   	ret    

c000e06e <createPartitionsForDisk(PhysicalDisk*)>:
c000e06e:	55                   	push   ebp
c000e06f:	57                   	push   edi
c000e070:	56                   	push   esi
c000e071:	53                   	push   ebx
c000e072:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000e078:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000e07f:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000e085:	3d 00 02 00 00       	cmp    eax,0x200
c000e08a:	74 27                	je     c000e0b3 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000e08c:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000e092:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000e098:	83 ec 10             	sub    esp,0x10
c000e09b:	0f a4 f7 0a          	shld   edi,esi,0xa
c000e09f:	99                   	cdq    
c000e0a0:	c1 e6 0a             	shl    esi,0xa
c000e0a3:	52                   	push   edx
c000e0a4:	89 fd                	mov    ebp,edi
c000e0a6:	50                   	push   eax
c000e0a7:	55                   	push   ebp
c000e0a8:	56                   	push   esi
c000e0a9:	e8 72 17 01 00       	call   c001f820 <__udivdi3>
c000e0ae:	e9 b9 00 00 00       	jmp    c000e16c <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000e0b3:	83 ec 0c             	sub    esp,0xc
c000e0b6:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e0b8:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000e0bc:	56                   	push   esi
c000e0bd:	6a 01                	push   0x1
c000e0bf:	6a 00                	push   0x0
c000e0c1:	6a 00                	push   0x0
c000e0c3:	53                   	push   ebx
c000e0c4:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000e0c7:	83 c4 20             	add    esp,0x20
c000e0ca:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000e0d2:	75 0a                	jne    c000e0de <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000e0d4:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000e0dc:	74 2c                	je     c000e10a <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000e0de:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000e0e4:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000e0ea:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000e0f0:	83 ec 10             	sub    esp,0x10
c000e0f3:	0f a4 c2 0a          	shld   edx,eax,0xa
c000e0f7:	89 f7                	mov    edi,esi
c000e0f9:	c1 e0 0a             	shl    eax,0xa
c000e0fc:	c1 ff 1f             	sar    edi,0x1f
c000e0ff:	57                   	push   edi
c000e100:	56                   	push   esi
c000e101:	52                   	push   edx
c000e102:	50                   	push   eax
c000e103:	e8 18 17 01 00       	call   c001f820 <__udivdi3>
c000e108:	eb 62                	jmp    c000e16c <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000e10a:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000e111:	8a 94 24 1e 02 00 00 	mov    dl,BYTE PTR [esp+0x21e]
c000e118:	89 cf                	mov    edi,ecx
c000e11a:	83 e2 7f             	and    edx,0x7f
c000e11d:	83 e7 7f             	and    edi,0x7f
c000e120:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000e127:	8d 0c 17             	lea    ecx,[edi+edx*1]
c000e12a:	83 e0 7f             	and    eax,0x7f
c000e12d:	8d 14 01             	lea    edx,[ecx+eax*1]
c000e130:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000e137:	83 e0 7f             	and    eax,0x7f
c000e13a:	01 d0                	add    eax,edx
c000e13c:	89 c5                	mov    ebp,eax
c000e13e:	84 c0                	test   al,al
c000e140:	74 41                	je     c000e183 <createPartitionsForDisk(PhysicalDisk*)+0x115>
c000e142:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000e148:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000e14e:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000e154:	83 ec 10             	sub    esp,0x10
c000e157:	0f a4 c2 0a          	shld   edx,eax,0xa
c000e15b:	89 f7                	mov    edi,esi
c000e15d:	c1 e0 0a             	shl    eax,0xa
c000e160:	c1 ff 1f             	sar    edi,0x1f
c000e163:	57                   	push   edi
c000e164:	56                   	push   esi
c000e165:	52                   	push   edx
c000e166:	50                   	push   eax
c000e167:	e8 b4 16 01 00       	call   c001f820 <__udivdi3>
c000e16c:	83 c4 14             	add    esp,0x14
c000e16f:	52                   	push   edx
c000e170:	50                   	push   eax
c000e171:	6a 00                	push   0x0
c000e173:	6a 00                	push   0x0
c000e175:	53                   	push   ebx
c000e176:	e8 4b fe ff ff       	call   c000dfc6 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000e17b:	83 c4 20             	add    esp,0x20
c000e17e:	e9 73 01 00 00       	jmp    c000e2f6 <createPartitionsForDisk(PhysicalDisk*)+0x288>
c000e183:	89 f0                	mov    eax,esi
c000e185:	31 c9                	xor    ecx,ecx
c000e187:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000e18e:	75 02                	jne    c000e192 <createPartitionsForDisk(PhysicalDisk*)+0x124>
c000e190:	89 cd                	mov    ebp,ecx
c000e192:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000e199:	0f b6 b0 c8 01 00 00 	movzx  esi,BYTE PTR [eax+0x1c8]
c000e1a0:	c1 e2 08             	shl    edx,0x8
c000e1a3:	c1 e6 10             	shl    esi,0x10
c000e1a6:	c7 44 cc 14 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x14],0x0
c000e1ae:	09 f2                	or     edx,esi
c000e1b0:	c7 44 cc 34 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x34],0x0
c000e1b8:	0f b6 b0 c6 01 00 00 	movzx  esi,BYTE PTR [eax+0x1c6]
c000e1bf:	83 c0 10             	add    eax,0x10
c000e1c2:	09 f2                	or     edx,esi
c000e1c4:	0f b6 b0 b9 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b9]
c000e1cb:	c1 e6 18             	shl    esi,0x18
c000e1ce:	09 f2                	or     edx,esi
c000e1d0:	0f b6 b0 bc 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bc]
c000e1d7:	89 54 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],edx
c000e1db:	c1 e6 10             	shl    esi,0x10
c000e1de:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000e1e5:	c1 e2 08             	shl    edx,0x8
c000e1e8:	09 f2                	or     edx,esi
c000e1ea:	0f b6 b0 ba 01 00 00 	movzx  esi,BYTE PTR [eax+0x1ba]
c000e1f1:	09 f2                	or     edx,esi
c000e1f3:	0f b6 b0 bd 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bd]
c000e1fa:	c1 e6 18             	shl    esi,0x18
c000e1fd:	09 f2                	or     edx,esi
c000e1ff:	89 54 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],edx
c000e203:	41                   	inc    ecx
c000e204:	83 f9 04             	cmp    ecx,0x4
c000e207:	0f 85 7a ff ff ff    	jne    c000e187 <createPartitionsForDisk(PhysicalDisk*)+0x119>
c000e20d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e211:	83 f0 01             	xor    eax,0x1
c000e214:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000e218:	75 4f                	jne    c000e269 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000e21a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e21e:	83 f0 01             	xor    eax,0x1
c000e221:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000e225:	75 42                	jne    c000e269 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000e227:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000e22f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000e237:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000e23d:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000e243:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000e249:	0f a4 c2 0a          	shld   edx,eax,0xa
c000e24d:	89 f7                	mov    edi,esi
c000e24f:	c1 e0 0a             	shl    eax,0xa
c000e252:	c1 ff 1f             	sar    edi,0x1f
c000e255:	57                   	push   edi
c000e256:	56                   	push   esi
c000e257:	52                   	push   edx
c000e258:	50                   	push   eax
c000e259:	e8 c2 15 01 00       	call   c001f820 <__udivdi3>
c000e25e:	83 c4 10             	add    esp,0x10
c000e261:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e265:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000e269:	89 e8                	mov    eax,ebp
c000e26b:	0f b6 e8             	movzx  ebp,al
c000e26e:	85 ed                	test   ebp,ebp
c000e270:	74 50                	je     c000e2c2 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000e272:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e276:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000e27a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e27e:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000e282:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e286:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e28a:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000e28e:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000e292:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e296:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e29a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e29e:	89 74 ec 10          	mov    DWORD PTR [esp+ebp*8+0x10],esi
c000e2a2:	89 7c ec 14          	mov    DWORD PTR [esp+ebp*8+0x14],edi
c000e2a6:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000e2aa:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000e2ae:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e2b2:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000e2b6:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000e2ba:	89 44 ec 30          	mov    DWORD PTR [esp+ebp*8+0x30],eax
c000e2be:	89 54 ec 34          	mov    DWORD PTR [esp+ebp*8+0x34],edx
c000e2c2:	31 ed                	xor    ebp,ebp
c000e2c4:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000e2c8:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000e2cc:	89 f8                	mov    eax,edi
c000e2ce:	09 f0                	or     eax,esi
c000e2d0:	74 1e                	je     c000e2f0 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000e2d2:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000e2d6:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000e2da:	89 d1                	mov    ecx,edx
c000e2dc:	09 c1                	or     ecx,eax
c000e2de:	74 10                	je     c000e2f0 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000e2e0:	83 ec 0c             	sub    esp,0xc
c000e2e3:	57                   	push   edi
c000e2e4:	56                   	push   esi
c000e2e5:	52                   	push   edx
c000e2e6:	50                   	push   eax
c000e2e7:	53                   	push   ebx
c000e2e8:	e8 d9 fc ff ff       	call   c000dfc6 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000e2ed:	83 c4 20             	add    esp,0x20
c000e2f0:	45                   	inc    ebp
c000e2f1:	83 fd 04             	cmp    ebp,0x4
c000e2f4:	75 ce                	jne    c000e2c4 <createPartitionsForDisk(PhysicalDisk*)+0x256>
c000e2f6:	81 c4 5c 02 00 00    	add    esp,0x25c
c000e2fc:	5b                   	pop    ebx
c000e2fd:	5e                   	pop    esi
c000e2fe:	5f                   	pop    edi
c000e2ff:	5d                   	pop    ebp
c000e300:	c3                   	ret    
c000e301:	66 90                	xchg   ax,ax
c000e303:	90                   	nop

c000e304 <Serial::Serial(char const*)>:
c000e304:	83 ec 0c             	sub    esp,0xc
c000e307:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e30b:	83 ec 08             	sub    esp,0x8
c000e30e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e312:	50                   	push   eax
c000e313:	e8 76 e8 ff ff       	call   c000cb8e <Device::Device(char const*)>
c000e318:	83 c4 10             	add    esp,0x10
c000e31b:	ba 0c 1f 02 c0       	mov    edx,0xc0021f0c
c000e320:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e324:	89 10                	mov    DWORD PTR [eax],edx
c000e326:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e32a:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000e334:	90                   	nop
c000e335:	83 c4 0c             	add    esp,0xc
c000e338:	c3                   	ret    
c000e339:	90                   	nop
c000e33a:	66 90                	xchg   ax,ax

c000e33c <Serial::~Serial()>:
c000e33c:	83 ec 0c             	sub    esp,0xc
c000e33f:	ba 0c 1f 02 c0       	mov    edx,0xc0021f0c
c000e344:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e348:	89 10                	mov    DWORD PTR [eax],edx
c000e34a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e34e:	83 ec 0c             	sub    esp,0xc
c000e351:	50                   	push   eax
c000e352:	e8 a1 e5 ff ff       	call   c000c8f8 <Device::~Device()>
c000e357:	83 c4 10             	add    esp,0x10
c000e35a:	90                   	nop
c000e35b:	83 c4 0c             	add    esp,0xc
c000e35e:	c3                   	ret    
c000e35f:	90                   	nop

c000e360 <Serial::~Serial()>:
c000e360:	83 ec 0c             	sub    esp,0xc
c000e363:	83 ec 0c             	sub    esp,0xc
c000e366:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e36a:	e8 cd ff ff ff       	call   c000e33c <Serial::~Serial()>
c000e36f:	83 c4 10             	add    esp,0x10
c000e372:	83 ec 08             	sub    esp,0x8
c000e375:	68 58 01 00 00       	push   0x158
c000e37a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e37e:	e8 c5 c4 ff ff       	call   c000a848 <operator delete(void*, unsigned long)>
c000e383:	83 c4 10             	add    esp,0x10
c000e386:	83 c4 0c             	add    esp,0xc
c000e389:	c3                   	ret    
c000e38a:	66 90                	xchg   ax,ax

c000e38c <Timer::Timer(char const*)>:
c000e38c:	83 ec 0c             	sub    esp,0xc
c000e38f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e393:	83 ec 08             	sub    esp,0x8
c000e396:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e39a:	50                   	push   eax
c000e39b:	e8 ee e7 ff ff       	call   c000cb8e <Device::Device(char const*)>
c000e3a0:	83 c4 10             	add    esp,0x10
c000e3a3:	ba 50 1f 02 c0       	mov    edx,0xc0021f50
c000e3a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3ac:	89 10                	mov    DWORD PTR [eax],edx
c000e3ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3b2:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000e3bc:	90                   	nop
c000e3bd:	83 c4 0c             	add    esp,0xc
c000e3c0:	c3                   	ret    
c000e3c1:	90                   	nop
c000e3c2:	66 90                	xchg   ax,ax

c000e3c4 <Timer::~Timer()>:
c000e3c4:	83 ec 0c             	sub    esp,0xc
c000e3c7:	ba 50 1f 02 c0       	mov    edx,0xc0021f50
c000e3cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3d0:	89 10                	mov    DWORD PTR [eax],edx
c000e3d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3d6:	83 ec 0c             	sub    esp,0xc
c000e3d9:	50                   	push   eax
c000e3da:	e8 19 e5 ff ff       	call   c000c8f8 <Device::~Device()>
c000e3df:	83 c4 10             	add    esp,0x10
c000e3e2:	90                   	nop
c000e3e3:	83 c4 0c             	add    esp,0xc
c000e3e6:	c3                   	ret    
c000e3e7:	90                   	nop

c000e3e8 <Timer::~Timer()>:
c000e3e8:	83 ec 0c             	sub    esp,0xc
c000e3eb:	83 ec 0c             	sub    esp,0xc
c000e3ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e3f2:	e8 cd ff ff ff       	call   c000e3c4 <Timer::~Timer()>
c000e3f7:	83 c4 10             	add    esp,0x10
c000e3fa:	83 ec 08             	sub    esp,0x8
c000e3fd:	68 5c 01 00 00       	push   0x15c
c000e402:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e406:	e8 3d c4 ff ff       	call   c000a848 <operator delete(void*, unsigned long)>
c000e40b:	83 c4 10             	add    esp,0x10
c000e40e:	83 c4 0c             	add    esp,0xc
c000e411:	c3                   	ret    

c000e412 <Timer::read()>:
c000e412:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e416:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000e41c:	c3                   	ret    

c000e41d <setupTimer(int)>:
c000e41d:	53                   	push   ebx
c000e41e:	83 ec 14             	sub    esp,0x14
c000e421:	68 5c 01 00 00       	push   0x15c
c000e426:	e8 bb 96 ff ff       	call   c0007ae6 <malloc>
c000e42b:	89 04 24             	mov    DWORD PTR [esp],eax
c000e42e:	89 c3                	mov    ebx,eax
c000e430:	e8 53 0c 01 00       	call   c001f088 <PIT::PIT()>
c000e435:	58                   	pop    eax
c000e436:	5a                   	pop    edx
c000e437:	53                   	push   ebx
c000e438:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c000e43e:	e8 b3 e5 ff ff       	call   c000c9f6 <Device::addChild(Device*)>
c000e443:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e445:	6a 00                	push   0x0
c000e447:	6a 00                	push   0x0
c000e449:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e44d:	53                   	push   ebx
c000e44e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000e451:	89 d8                	mov    eax,ebx
c000e453:	83 c4 28             	add    esp,0x28
c000e456:	5b                   	pop    ebx
c000e457:	c3                   	ret    

c000e458 <timerHandler(unsigned int)>:
c000e458:	56                   	push   esi
c000e459:	53                   	push   ebx
c000e45a:	51                   	push   ecx
c000e45b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e45f:	01 05 ec b8 02 c0    	add    DWORD PTR ds:0xc002b8ec,eax
c000e465:	80 3d bd 6e 02 c0 00 	cmp    BYTE PTR ds:0xc0026ebd,0x0
c000e46c:	0f 84 4a 01 00 00    	je     c000e5bc <timerHandler(unsigned int)+0x164>
c000e472:	fa                   	cli    
c000e473:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c000e479:	83 ec 0c             	sub    esp,0xc
c000e47c:	ff 05 c4 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c4
c000e482:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e487:	e8 64 19 01 00       	call   c001fdf0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000e48c:	83 c4 10             	add    esp,0x10
c000e48f:	84 c0                	test   al,al
c000e491:	0f 85 a1 00 00 00    	jne    c000e538 <timerHandler(unsigned int)+0xe0>
c000e497:	83 ec 0c             	sub    esp,0xc
c000e49a:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e49f:	e8 68 19 01 00       	call   c001fe0c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e4a4:	83 c4 10             	add    esp,0x10
c000e4a7:	89 c6                	mov    esi,eax
c000e4a9:	8d 76 00             	lea    esi,[esi+0x0]
c000e4ac:	83 ec 0c             	sub    esp,0xc
c000e4af:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e4b4:	e8 53 19 01 00       	call   c001fe0c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e4b9:	c7 04 24 d8 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6d8
c000e4c0:	89 c3                	mov    ebx,eax
c000e4c2:	e8 4d 19 01 00       	call   c001fe14 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000e4c7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000e4ca:	83 c4 10             	add    esp,0x10
c000e4cd:	3b 05 ec b8 02 c0    	cmp    eax,DWORD PTR ds:0xc002b8ec
c000e4d3:	77 23                	ja     c000e4f8 <timerHandler(unsigned int)+0xa0>
c000e4d5:	83 ec 0c             	sub    esp,0xc
c000e4d8:	53                   	push   ebx
c000e4d9:	e8 e6 81 00 00       	call   c00166c4 <unblockTask(ThreadControlBlock*)>
c000e4de:	83 c4 10             	add    esp,0x10
c000e4e1:	39 de                	cmp    esi,ebx
c000e4e3:	75 27                	jne    c000e50c <timerHandler(unsigned int)+0xb4>
c000e4e5:	83 ec 0c             	sub    esp,0xc
c000e4e8:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e4ed:	e8 1a 19 01 00       	call   c001fe0c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e4f2:	89 c6                	mov    esi,eax
c000e4f4:	eb 12                	jmp    c000e508 <timerHandler(unsigned int)+0xb0>
c000e4f6:	66 90                	xchg   ax,ax
c000e4f8:	52                   	push   edx
c000e4f9:	52                   	push   edx
c000e4fa:	53                   	push   ebx
c000e4fb:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e500:	e8 cb 19 01 00       	call   c001fed0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000e505:	8d 76 00             	lea    esi,[esi+0x0]
c000e508:	83 c4 10             	add    esp,0x10
c000e50b:	90                   	nop
c000e50c:	83 ec 0c             	sub    esp,0xc
c000e50f:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e514:	e8 d7 18 01 00       	call   c001fdf0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000e519:	83 c4 10             	add    esp,0x10
c000e51c:	84 c0                	test   al,al
c000e51e:	75 18                	jne    c000e538 <timerHandler(unsigned int)+0xe0>
c000e520:	83 ec 0c             	sub    esp,0xc
c000e523:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e528:	e8 df 18 01 00       	call   c001fe0c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e52d:	83 c4 10             	add    esp,0x10
c000e530:	39 f0                	cmp    eax,esi
c000e532:	0f 85 74 ff ff ff    	jne    c000e4ac <timerHandler(unsigned int)+0x54>
c000e538:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e53d:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c000e541:	74 41                	je     c000e584 <timerHandler(unsigned int)+0x12c>
c000e543:	80 3d bc 6e 02 c0 00 	cmp    BYTE PTR ds:0xc0026ebc,0x0
c000e54a:	74 38                	je     c000e584 <timerHandler(unsigned int)+0x12c>
c000e54c:	fa                   	cli    
c000e54d:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c000e553:	a1 ec b8 02 c0       	mov    eax,ds:0xc002b8ec
c000e558:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000e55e:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c000e561:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000e567:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c000e56a:	72 08                	jb     c000e574 <timerHandler(unsigned int)+0x11c>
c000e56c:	e8 3b 7c 00 00       	call   c00161ac <schedule()>
c000e571:	8d 76 00             	lea    esi,[esi+0x0]
c000e574:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000e579:	48                   	dec    eax
c000e57a:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000e57f:	75 03                	jne    c000e584 <timerHandler(unsigned int)+0x12c>
c000e581:	fb                   	sti    
c000e582:	66 90                	xchg   ax,ax
c000e584:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c000e589:	48                   	dec    eax
c000e58a:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c000e58f:	75 1b                	jne    c000e5ac <timerHandler(unsigned int)+0x154>
c000e591:	83 3d c0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6c0,0x0
c000e598:	74 12                	je     c000e5ac <timerHandler(unsigned int)+0x154>
c000e59a:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c000e5a4:	e8 03 7c 00 00       	call   c00161ac <schedule()>
c000e5a9:	8d 76 00             	lea    esi,[esi+0x0]
c000e5ac:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000e5b1:	48                   	dec    eax
c000e5b2:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000e5b7:	75 03                	jne    c000e5bc <timerHandler(unsigned int)+0x164>
c000e5b9:	fb                   	sti    
c000e5ba:	66 90                	xchg   ax,ax
c000e5bc:	58                   	pop    eax
c000e5bd:	5b                   	pop    ebx
c000e5be:	5e                   	pop    esi
c000e5bf:	c3                   	ret    

c000e5c0 <VCache::VCache(PhysicalDisk*)>:
c000e5c0:	53                   	push   ebx
c000e5c1:	83 ec 18             	sub    esp,0x18
c000e5c4:	ba 80 1f 02 c0       	mov    edx,0xc0021f80
c000e5c9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e5cd:	89 10                	mov    DWORD PTR [eax],edx
c000e5cf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e5d3:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000e5da:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e5de:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000e5e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e5e9:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000e5f0:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000e5f7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e5fb:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000e602:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000e609:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e60d:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000e614:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e618:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000e61c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e620:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000e627:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000e62e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e632:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000e636:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e63a:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000e63e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e642:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000e646:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e64a:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000e651:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000e659:	83 ec 0c             	sub    esp,0xc
c000e65c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e660:	e8 81 94 ff ff       	call   c0007ae6 <malloc>
c000e665:	83 c4 10             	add    esp,0x10
c000e668:	89 c3                	mov    ebx,eax
c000e66a:	83 ec 0c             	sub    esp,0xc
c000e66d:	53                   	push   ebx
c000e66e:	e8 d5 78 00 00       	call   c0015f48 <Mutex::Mutex()>
c000e673:	83 c4 10             	add    esp,0x10
c000e676:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e67a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000e67d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e681:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000e685:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000e688:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e68c:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000e693:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e697:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000e69d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e6a1:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000e6a4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e6a8:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000e6ae:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e6b4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000e6b8:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000e6bb:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000e6be:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e6c2:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000e6c6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e6ca:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000e6d0:	05 00 02 00 00       	add    eax,0x200
c000e6d5:	c1 e0 03             	shl    eax,0x3
c000e6d8:	83 ec 0c             	sub    esp,0xc
c000e6db:	50                   	push   eax
c000e6dc:	e8 05 94 ff ff       	call   c0007ae6 <malloc>
c000e6e1:	83 c4 10             	add    esp,0x10
c000e6e4:	89 c2                	mov    edx,eax
c000e6e6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e6ea:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000e6ed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e6f1:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000e6f8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e6fc:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000e700:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e704:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000e70a:	89 d0                	mov    eax,edx
c000e70c:	c1 e0 02             	shl    eax,0x2
c000e70f:	01 d0                	add    eax,edx
c000e711:	c1 e0 04             	shl    eax,0x4
c000e714:	83 ec 0c             	sub    esp,0xc
c000e717:	50                   	push   eax
c000e718:	e8 c9 93 ff ff       	call   c0007ae6 <malloc>
c000e71d:	83 c4 10             	add    esp,0x10
c000e720:	89 c2                	mov    edx,eax
c000e722:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e726:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000e729:	90                   	nop
c000e72a:	83 c4 18             	add    esp,0x18
c000e72d:	5b                   	pop    ebx
c000e72e:	c3                   	ret    
c000e72f:	90                   	nop

c000e730 <VCache::invalidateReadBuffer()>:
c000e730:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e734:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000e73a:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000e73e:	c3                   	ret    
c000e73f:	90                   	nop

c000e740 <VCache::writeWriteBuffer()>:
c000e740:	53                   	push   ebx
c000e741:	83 ec 08             	sub    esp,0x8
c000e744:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e748:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000e74c:	74 1e                	je     c000e76c <VCache::writeWriteBuffer()+0x2c>
c000e74e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e751:	83 ec 0c             	sub    esp,0xc
c000e754:	8b 10                	mov    edx,DWORD PTR [eax]
c000e756:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000e759:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000e75c:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000e75f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000e762:	50                   	push   eax
c000e763:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000e766:	83 c4 20             	add    esp,0x20
c000e769:	8d 76 00             	lea    esi,[esi+0x0]
c000e76c:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e773:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000e77a:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000e77e:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000e785:	83 c4 08             	add    esp,0x8
c000e788:	5b                   	pop    ebx
c000e789:	c3                   	ret    
c000e78a:	66 90                	xchg   ax,ax

c000e78c <VCache::~VCache()>:
c000e78c:	83 ec 0c             	sub    esp,0xc
c000e78f:	ba 80 1f 02 c0       	mov    edx,0xc0021f80
c000e794:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e798:	89 10                	mov    DWORD PTR [eax],edx
c000e79a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e79e:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000e7a1:	0f b6 c0             	movzx  eax,al
c000e7a4:	85 c0                	test   eax,eax
c000e7a6:	74 10                	je     c000e7b8 <VCache::~VCache()+0x2c>
c000e7a8:	83 ec 0c             	sub    esp,0xc
c000e7ab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e7af:	e8 8c ff ff ff       	call   c000e740 <VCache::writeWriteBuffer()>
c000e7b4:	83 c4 10             	add    esp,0x10
c000e7b7:	90                   	nop
c000e7b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7bc:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000e7bf:	83 ec 0c             	sub    esp,0xc
c000e7c2:	50                   	push   eax
c000e7c3:	e8 2e 93 ff ff       	call   c0007af6 <free>
c000e7c8:	83 c4 10             	add    esp,0x10
c000e7cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7cf:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000e7d2:	83 ec 0c             	sub    esp,0xc
c000e7d5:	50                   	push   eax
c000e7d6:	e8 1b 93 ff ff       	call   c0007af6 <free>
c000e7db:	83 c4 10             	add    esp,0x10
c000e7de:	90                   	nop
c000e7df:	83 c4 0c             	add    esp,0xc
c000e7e2:	c3                   	ret    
c000e7e3:	90                   	nop

c000e7e4 <VCache::~VCache()>:
c000e7e4:	83 ec 0c             	sub    esp,0xc
c000e7e7:	83 ec 0c             	sub    esp,0xc
c000e7ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e7ee:	e8 99 ff ff ff       	call   c000e78c <VCache::~VCache()>
c000e7f3:	83 c4 10             	add    esp,0x10
c000e7f6:	83 ec 08             	sub    esp,0x8
c000e7f9:	6a 44                	push   0x44
c000e7fb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e7ff:	e8 44 c0 ff ff       	call   c000a848 <operator delete(void*, unsigned long)>
c000e804:	83 c4 10             	add    esp,0x10
c000e807:	83 c4 0c             	add    esp,0xc
c000e80a:	c3                   	ret    
c000e80b:	90                   	nop

c000e80c <VCache::write(unsigned long long, int, void*)>:
c000e80c:	55                   	push   ebp
c000e80d:	57                   	push   edi
c000e80e:	56                   	push   esi
c000e80f:	53                   	push   ebx
c000e810:	83 ec 1c             	sub    esp,0x1c
c000e813:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e817:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e81b:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000e81f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e823:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000e827:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000e82b:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000e82f:	74 07                	je     c000e838 <VCache::write(unsigned long long, int, void*)+0x2c>
c000e831:	53                   	push   ebx
c000e832:	e8 f9 fe ff ff       	call   c000e730 <VCache::invalidateReadBuffer()>
c000e837:	58                   	pop    eax
c000e838:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000e83c:	74 62                	je     c000e8a0 <VCache::write(unsigned long long, int, void*)+0x94>
c000e83e:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000e841:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000e845:	99                   	cdq    
c000e846:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e84a:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c000e84d:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c000e850:	31 c1                	xor    ecx,eax
c000e852:	89 d0                	mov    eax,edx
c000e854:	89 ca                	mov    edx,ecx
c000e856:	31 e8                	xor    eax,ebp
c000e858:	09 c2                	or     edx,eax
c000e85a:	75 38                	jne    c000e894 <VCache::write(unsigned long long, int, void*)+0x88>
c000e85c:	83 ff 01             	cmp    edi,0x1
c000e85f:	75 33                	jne    c000e894 <VCache::write(unsigned long long, int, void*)+0x88>
c000e861:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e864:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e868:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000e86e:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000e871:	0f af c8             	imul   ecx,eax
c000e874:	01 cf                	add    edi,ecx
c000e876:	89 c1                	mov    ecx,eax
c000e878:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e87a:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000e87d:	40                   	inc    eax
c000e87e:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000e881:	83 f8 50             	cmp    eax,0x50
c000e884:	75 6a                	jne    c000e8f0 <VCache::write(unsigned long long, int, void*)+0xe4>
c000e886:	83 ec 0c             	sub    esp,0xc
c000e889:	53                   	push   ebx
c000e88a:	e8 b1 fe ff ff       	call   c000e740 <VCache::writeWriteBuffer()>
c000e88f:	83 c4 10             	add    esp,0x10
c000e892:	eb 5c                	jmp    c000e8f0 <VCache::write(unsigned long long, int, void*)+0xe4>
c000e894:	83 ec 0c             	sub    esp,0xc
c000e897:	53                   	push   ebx
c000e898:	e8 a3 fe ff ff       	call   c000e740 <VCache::writeWriteBuffer()>
c000e89d:	83 c4 10             	add    esp,0x10
c000e8a0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e8a3:	83 ff 4f             	cmp    edi,0x4f
c000e8a6:	7f 20                	jg     c000e8c8 <VCache::write(unsigned long long, int, void*)+0xbc>
c000e8a8:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c000e8ab:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e8af:	89 6b 20             	mov    DWORD PTR [ebx+0x20],ebp
c000e8b2:	89 53 1c             	mov    DWORD PTR [ebx+0x1c],edx
c000e8b5:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c000e8b9:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000e8bc:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000e8c2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e8c4:	eb 2a                	jmp    c000e8f0 <VCache::write(unsigned long long, int, void*)+0xe4>
c000e8c6:	66 90                	xchg   ax,ax
c000e8c8:	8b 10                	mov    edx,DWORD PTR [eax]
c000e8ca:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c000e8ce:	89 7c 24 3c          	mov    DWORD PTR [esp+0x3c],edi
c000e8d2:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000e8d6:	89 6c 24 38          	mov    DWORD PTR [esp+0x38],ebp
c000e8da:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
c000e8de:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e8e2:	8b 42 2c             	mov    eax,DWORD PTR [edx+0x2c]
c000e8e5:	83 c4 1c             	add    esp,0x1c
c000e8e8:	5b                   	pop    ebx
c000e8e9:	5e                   	pop    esi
c000e8ea:	5f                   	pop    edi
c000e8eb:	5d                   	pop    ebp
c000e8ec:	ff e0                	jmp    eax
c000e8ee:	66 90                	xchg   ax,ax
c000e8f0:	83 c4 1c             	add    esp,0x1c
c000e8f3:	31 c0                	xor    eax,eax
c000e8f5:	5b                   	pop    ebx
c000e8f6:	5e                   	pop    esi
c000e8f7:	5f                   	pop    edi
c000e8f8:	5d                   	pop    ebp
c000e8f9:	c3                   	ret    

c000e8fa <VCache::read(unsigned long long, int, void*)>:
c000e8fa:	55                   	push   ebp
c000e8fb:	57                   	push   edi
c000e8fc:	56                   	push   esi
c000e8fd:	53                   	push   ebx
c000e8fe:	83 ec 1c             	sub    esp,0x1c
c000e901:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000e905:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e909:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000e90d:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000e911:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000e915:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e919:	80 7f 2c 00          	cmp    BYTE PTR [edi+0x2c],0x0
c000e91d:	74 0d                	je     c000e92c <VCache::read(unsigned long long, int, void*)+0x32>
c000e91f:	83 ec 0c             	sub    esp,0xc
c000e922:	57                   	push   edi
c000e923:	e8 18 fe ff ff       	call   c000e740 <VCache::writeWriteBuffer()>
c000e928:	83 c4 10             	add    esp,0x10
c000e92b:	90                   	nop
c000e92c:	83 fd 01             	cmp    ebp,0x1
c000e92f:	0f 85 93 00 00 00    	jne    c000e9c8 <VCache::read(unsigned long long, int, void*)+0xce>
c000e935:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e938:	89 04 24             	mov    DWORD PTR [esp],eax
c000e93b:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c000e942:	0f 85 80 00 00 00    	jne    c000e9c8 <VCache::read(unsigned long long, int, void*)+0xce>
c000e948:	8b 6f 40             	mov    ebp,DWORD PTR [edi+0x40]
c000e94b:	89 e9                	mov    ecx,ebp
c000e94d:	f7 d9                	neg    ecx
c000e94f:	89 c8                	mov    eax,ecx
c000e951:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000e955:	c1 f8 1f             	sar    eax,0x1f
c000e958:	21 d9                	and    ecx,ebx
c000e95a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e95e:	89 c8                	mov    eax,ecx
c000e960:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e964:	21 f1                	and    ecx,esi
c000e966:	80 7f 3c 00          	cmp    BYTE PTR [edi+0x3c],0x0
c000e96a:	89 ca                	mov    edx,ecx
c000e96c:	74 2e                	je     c000e99c <VCache::read(unsigned long long, int, void*)+0xa2>
c000e96e:	39 4f 34             	cmp    DWORD PTR [edi+0x34],ecx
c000e971:	75 29                	jne    c000e99c <VCache::read(unsigned long long, int, void*)+0xa2>
c000e973:	39 47 30             	cmp    DWORD PTR [edi+0x30],eax
c000e976:	75 24                	jne    c000e99c <VCache::read(unsigned long long, int, void*)+0xa2>
c000e978:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e97b:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000e981:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c000e984:	8d 70 ff             	lea    esi,[eax-0x1]
c000e987:	21 f3                	and    ebx,esi
c000e989:	0f af d9             	imul   ebx,ecx
c000e98c:	03 5f 38             	add    ebx,DWORD PTR [edi+0x38]
c000e98f:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000e993:	89 de                	mov    esi,ebx
c000e995:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e997:	31 c0                	xor    eax,eax
c000e999:	eb 61                	jmp    c000e9fc <VCache::read(unsigned long long, int, void*)+0x102>
c000e99b:	90                   	nop
c000e99c:	83 ec 0c             	sub    esp,0xc
c000e99f:	c6 47 3c 01          	mov    BYTE PTR [edi+0x3c],0x1
c000e9a3:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000e9a7:	89 47 30             	mov    DWORD PTR [edi+0x30],eax
c000e9aa:	89 57 34             	mov    DWORD PTR [edi+0x34],edx
c000e9ad:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e9af:	ff 77 38             	push   DWORD PTR [edi+0x38]
c000e9b2:	55                   	push   ebp
c000e9b3:	52                   	push   edx
c000e9b4:	50                   	push   eax
c000e9b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e9b9:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c000e9bc:	83 c4 20             	add    esp,0x20
c000e9bf:	85 c0                	test   eax,eax
c000e9c1:	75 39                	jne    c000e9fc <VCache::read(unsigned long long, int, void*)+0x102>
c000e9c3:	eb b3                	jmp    c000e978 <VCache::read(unsigned long long, int, void*)+0x7e>
c000e9c5:	8d 76 00             	lea    esi,[esi+0x0]
c000e9c8:	83 ec 0c             	sub    esp,0xc
c000e9cb:	57                   	push   edi
c000e9cc:	e8 5f fd ff ff       	call   c000e730 <VCache::invalidateReadBuffer()>
c000e9d1:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e9d4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e9d8:	8b 10                	mov    edx,DWORD PTR [eax]
c000e9da:	89 6c 24 4c          	mov    DWORD PTR [esp+0x4c],ebp
c000e9de:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c000e9e2:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000e9e6:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c000e9ea:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e9ee:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c000e9f1:	83 c4 2c             	add    esp,0x2c
c000e9f4:	5b                   	pop    ebx
c000e9f5:	5e                   	pop    esi
c000e9f6:	5f                   	pop    edi
c000e9f7:	5d                   	pop    ebp
c000e9f8:	ff e0                	jmp    eax
c000e9fa:	66 90                	xchg   ax,ax
c000e9fc:	83 c4 1c             	add    esp,0x1c
c000e9ff:	5b                   	pop    ebx
c000ea00:	5e                   	pop    esi
c000ea01:	5f                   	pop    edi
c000ea02:	5d                   	pop    ebp
c000ea03:	c3                   	ret    

c000ea04 <Video::putrect(int, int, int, int, unsigned int)>:
c000ea04:	55                   	push   ebp
c000ea05:	57                   	push   edi
c000ea06:	56                   	push   esi
c000ea07:	53                   	push   ebx
c000ea08:	83 ec 1c             	sub    esp,0x1c
c000ea0b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000ea0f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ea13:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000ea17:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000ea1b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000ea1f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ea23:	01 df                	add    edi,ebx
c000ea25:	39 fb                	cmp    ebx,edi
c000ea27:	7d 1f                	jge    c000ea48 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000ea29:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000ea2d:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000ea31:	7d 12                	jge    c000ea45 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000ea33:	8b 16                	mov    edx,DWORD PTR [esi]
c000ea35:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ea39:	53                   	push   ebx
c000ea3a:	55                   	push   ebp
c000ea3b:	45                   	inc    ebp
c000ea3c:	56                   	push   esi
c000ea3d:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000ea40:	83 c4 10             	add    esp,0x10
c000ea43:	eb e8                	jmp    c000ea2d <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000ea45:	43                   	inc    ebx
c000ea46:	eb dd                	jmp    c000ea25 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000ea48:	83 c4 1c             	add    esp,0x1c
c000ea4b:	5b                   	pop    ebx
c000ea4c:	5e                   	pop    esi
c000ea4d:	5f                   	pop    edi
c000ea4e:	5d                   	pop    ebp
c000ea4f:	c3                   	ret    

c000ea50 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000ea50:	55                   	push   ebp
c000ea51:	57                   	push   edi
c000ea52:	31 ff                	xor    edi,edi
c000ea54:	56                   	push   esi
c000ea55:	53                   	push   ebx
c000ea56:	83 ec 1c             	sub    esp,0x1c
c000ea59:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000ea5d:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000ea61:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000ea68:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000ea6d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ea71:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000ea75:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000ea79:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000ea7c:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000ea80:	01 f9                	add    ecx,edi
c000ea82:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000ea86:	7d 2f                	jge    c000eab7 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000ea88:	31 f6                	xor    esi,esi
c000ea8a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000ea8e:	01 f2                	add    edx,esi
c000ea90:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000ea94:	7d 1a                	jge    c000eab0 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000ea96:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000ea99:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000ea9c:	46                   	inc    esi
c000ea9d:	51                   	push   ecx
c000ea9e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000eaa2:	52                   	push   edx
c000eaa3:	55                   	push   ebp
c000eaa4:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000eaa7:	83 c4 10             	add    esp,0x10
c000eaaa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000eaae:	eb da                	jmp    c000ea8a <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000eab0:	47                   	inc    edi
c000eab1:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000eab5:	eb c5                	jmp    c000ea7c <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000eab7:	83 c4 1c             	add    esp,0x1c
c000eaba:	5b                   	pop    ebx
c000eabb:	5e                   	pop    esi
c000eabc:	5f                   	pop    edi
c000eabd:	5d                   	pop    ebp
c000eabe:	c3                   	ret    
c000eabf:	90                   	nop

c000eac0 <Video::blit(unsigned int*, int, int, int, int)>:
c000eac0:	55                   	push   ebp
c000eac1:	57                   	push   edi
c000eac2:	56                   	push   esi
c000eac3:	53                   	push   ebx
c000eac4:	83 ec 1c             	sub    esp,0x1c
c000eac7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000eacb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000eacf:	85 c0                	test   eax,eax
c000ead1:	79 02                	jns    c000ead5 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c000ead3:	31 c0                	xor    eax,eax
c000ead5:	c1 e0 02             	shl    eax,0x2
c000ead8:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000eadc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000eae0:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000eae4:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000eae8:	39 d8                	cmp    eax,ebx
c000eaea:	7e 49                	jle    c000eb35 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000eaec:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000eaf2:	7c 41                	jl     c000eb35 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000eaf4:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000eaf8:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000eafc:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000eb00:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c000eb04:	39 f9                	cmp    ecx,edi
c000eb06:	7e 22                	jle    c000eb2a <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c000eb08:	83 c5 04             	add    ebp,0x4
c000eb0b:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000eb11:	7c 14                	jl     c000eb27 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c000eb13:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000eb15:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c000eb18:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000eb1c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000eb20:	56                   	push   esi
c000eb21:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000eb24:	83 c4 10             	add    esp,0x10
c000eb27:	47                   	inc    edi
c000eb28:	eb d2                	jmp    c000eafc <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c000eb2a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eb2e:	43                   	inc    ebx
c000eb2f:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000eb33:	eb ab                	jmp    c000eae0 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c000eb35:	83 c4 1c             	add    esp,0x1c
c000eb38:	5b                   	pop    ebx
c000eb39:	5e                   	pop    esi
c000eb3a:	5f                   	pop    edi
c000eb3b:	5d                   	pop    ebp
c000eb3c:	c3                   	ret    
c000eb3d:	90                   	nop

c000eb3e <Video::clearScreen(unsigned int)>:
c000eb3e:	57                   	push   edi
c000eb3f:	56                   	push   esi
c000eb40:	53                   	push   ebx
c000eb41:	31 db                	xor    ebx,ebx
c000eb43:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000eb47:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000eb4d:	7e 1f                	jle    c000eb6e <Video::clearScreen(unsigned int)+0x30>
c000eb4f:	31 ff                	xor    edi,edi
c000eb51:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000eb57:	7e 12                	jle    c000eb6b <Video::clearScreen(unsigned int)+0x2d>
c000eb59:	8b 06                	mov    eax,DWORD PTR [esi]
c000eb5b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000eb5f:	53                   	push   ebx
c000eb60:	57                   	push   edi
c000eb61:	47                   	inc    edi
c000eb62:	56                   	push   esi
c000eb63:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000eb66:	83 c4 10             	add    esp,0x10
c000eb69:	eb e6                	jmp    c000eb51 <Video::clearScreen(unsigned int)+0x13>
c000eb6b:	43                   	inc    ebx
c000eb6c:	eb d9                	jmp    c000eb47 <Video::clearScreen(unsigned int)+0x9>
c000eb6e:	5b                   	pop    ebx
c000eb6f:	5e                   	pop    esi
c000eb70:	5f                   	pop    edi
c000eb71:	c3                   	ret    

c000eb72 <Video::putpixel(int, int, unsigned int)>:
c000eb72:	c7 44 24 04 88 1f 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021f88
c000eb7a:	e9 48 2b 00 00       	jmp    c00116c7 <KePanic(char const*)>
c000eb7f:	90                   	nop

c000eb80 <Video::readPixelApprox(int, int)>:
c000eb80:	83 ec 18             	sub    esp,0x18
c000eb83:	68 a9 1f 02 c0       	push   0xc0021fa9
c000eb88:	e8 3a 2b 00 00       	call   c00116c7 <KePanic(char const*)>
c000eb8d:	31 c0                	xor    eax,eax
c000eb8f:	83 c4 1c             	add    esp,0x1c
c000eb92:	c3                   	ret    
c000eb93:	90                   	nop

c000eb94 <Video::Video(char const*)>:
c000eb94:	83 ec 0c             	sub    esp,0xc
c000eb97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb9b:	83 ec 08             	sub    esp,0x8
c000eb9e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eba2:	50                   	push   eax
c000eba3:	e8 e6 df ff ff       	call   c000cb8e <Device::Device(char const*)>
c000eba8:	83 c4 10             	add    esp,0x10
c000ebab:	ba 24 20 02 c0       	mov    edx,0xc0022024
c000ebb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ebb4:	89 10                	mov    DWORD PTR [eax],edx
c000ebb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ebba:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000ebc4:	90                   	nop
c000ebc5:	83 c4 0c             	add    esp,0xc
c000ebc8:	c3                   	ret    
c000ebc9:	90                   	nop

c000ebca <Video::~Video()>:
c000ebca:	83 ec 0c             	sub    esp,0xc
c000ebcd:	ba 24 20 02 c0       	mov    edx,0xc0022024
c000ebd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ebd6:	89 10                	mov    DWORD PTR [eax],edx
c000ebd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ebdc:	83 ec 0c             	sub    esp,0xc
c000ebdf:	50                   	push   eax
c000ebe0:	e8 13 dd ff ff       	call   c000c8f8 <Device::~Device()>
c000ebe5:	83 c4 10             	add    esp,0x10
c000ebe8:	90                   	nop
c000ebe9:	83 c4 0c             	add    esp,0xc
c000ebec:	c3                   	ret    
c000ebed:	90                   	nop

c000ebee <Video::~Video()>:
c000ebee:	83 ec 0c             	sub    esp,0xc
c000ebf1:	83 ec 0c             	sub    esp,0xc
c000ebf4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ebf8:	e8 cd ff ff ff       	call   c000ebca <Video::~Video()>
c000ebfd:	83 c4 10             	add    esp,0x10
c000ec00:	83 ec 08             	sub    esp,0x8
c000ec03:	68 64 01 00 00       	push   0x164
c000ec08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ec0c:	e8 37 bc ff ff       	call   c000a848 <operator delete(void*, unsigned long)>
c000ec11:	83 c4 10             	add    esp,0x10
c000ec14:	83 c4 0c             	add    esp,0xc
c000ec17:	c3                   	ret    

c000ec18 <Video::isMonochrome()>:
c000ec18:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ec1c:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000ec22:	c3                   	ret    
c000ec23:	90                   	nop

c000ec24 <Video::getWidth()>:
c000ec24:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ec28:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000ec2e:	c3                   	ret    
c000ec2f:	90                   	nop

c000ec30 <Video::getHeight()>:
c000ec30:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ec34:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000ec3a:	c3                   	ret    
c000ec3b:	90                   	nop

c000ec3c <Video::drawCursor(int, int, unsigned int*, int)>:
c000ec3c:	55                   	push   ebp
c000ec3d:	57                   	push   edi
c000ec3e:	56                   	push   esi
c000ec3f:	53                   	push   ebx
c000ec40:	83 ec 2c             	sub    esp,0x2c
c000ec43:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000ec47:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000ec4b:	83 f8 01             	cmp    eax,0x1
c000ec4e:	19 c9                	sbb    ecx,ecx
c000ec50:	31 db                	xor    ebx,ebx
c000ec52:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000ec56:	89 cd                	mov    ebp,ecx
c000ec58:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000ec60:	f7 d5                	not    ebp
c000ec62:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c000ec68:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000ec6c:	01 d8                	add    eax,ebx
c000ec6e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ec72:	56                   	push   esi
c000ec73:	e8 b8 ff ff ff       	call   c000ec30 <Video::getHeight()>
c000ec78:	59                   	pop    ecx
c000ec79:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000ec7d:	7e 70                	jle    c000ecef <Video::drawCursor(int, int, unsigned int*, int)+0xb3>
c000ec7f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000ec83:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000ec87:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000ec8a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ec8e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000ec92:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000ec99:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ec9d:	89 f8                	mov    eax,edi
c000ec9f:	83 c0 20             	add    eax,0x20
c000eca2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000eca6:	56                   	push   esi
c000eca7:	e8 78 ff ff ff       	call   c000ec24 <Video::getWidth()>
c000ecac:	5a                   	pop    edx
c000ecad:	39 c7                	cmp    edi,eax
c000ecaf:	7d 34                	jge    c000ece5 <Video::drawCursor(int, int, unsigned int*, int)+0xa9>
c000ecb1:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000ecb6:	74 05                	je     c000ecbd <Video::drawCursor(int, int, unsigned int*, int)+0x81>
c000ecb8:	8b 06                	mov    eax,DWORD PTR [esi]
c000ecba:	55                   	push   ebp
c000ecbb:	eb 0d                	jmp    c000ecca <Video::drawCursor(int, int, unsigned int*, int)+0x8e>
c000ecbd:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000ecc2:	74 12                	je     c000ecd6 <Video::drawCursor(int, int, unsigned int*, int)+0x9a>
c000ecc4:	8b 06                	mov    eax,DWORD PTR [esi]
c000ecc6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ecca:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ecce:	57                   	push   edi
c000eccf:	56                   	push   esi
c000ecd0:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000ecd3:	83 c4 10             	add    esp,0x10
c000ecd6:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000ecda:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000ecde:	47                   	inc    edi
c000ecdf:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000ece3:	75 c1                	jne    c000eca6 <Video::drawCursor(int, int, unsigned int*, int)+0x6a>
c000ece5:	43                   	inc    ebx
c000ece6:	83 fb 20             	cmp    ebx,0x20
c000ece9:	0f 85 79 ff ff ff    	jne    c000ec68 <Video::drawCursor(int, int, unsigned int*, int)+0x2c>
c000ecef:	83 c4 2c             	add    esp,0x2c
c000ecf2:	5b                   	pop    ebx
c000ecf3:	5e                   	pop    esi
c000ecf4:	5f                   	pop    edi
c000ecf5:	5d                   	pop    ebp
c000ecf6:	c3                   	ret    
c000ecf7:	90                   	nop

c000ecf8 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000ecf8:	55                   	push   ebp
c000ecf9:	57                   	push   edi
c000ecfa:	56                   	push   esi
c000ecfb:	53                   	push   ebx
c000ecfc:	83 ec 28             	sub    esp,0x28
c000ecff:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000ed03:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c000ed07:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c000ed0b:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c000ed0f:	c1 e6 08             	shl    esi,0x8
c000ed12:	01 c6                	add    esi,eax
c000ed14:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c000ed18:	c1 e0 08             	shl    eax,0x8
c000ed1b:	01 d0                	add    eax,edx
c000ed1d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ed21:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ed25:	0f af c6             	imul   eax,esi
c000ed28:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000ed2f:	50                   	push   eax
c000ed30:	e8 b1 8d ff ff       	call   c0007ae6 <malloc>
c000ed35:	83 c4 10             	add    esp,0x10
c000ed38:	89 c7                	mov    edi,eax
c000ed3a:	85 c0                	test   eax,eax
c000ed3c:	75 10                	jne    c000ed4e <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c000ed3e:	83 ec 0c             	sub    esp,0xc
c000ed41:	68 d4 1f 02 c0       	push   0xc0021fd4
c000ed46:	e8 7c 29 00 00       	call   c00116c7 <KePanic(char const*)>
c000ed4b:	83 c4 10             	add    esp,0x10
c000ed4e:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000ed52:	ba 12 00 00 00       	mov    edx,0x12
c000ed57:	85 c0                	test   eax,eax
c000ed59:	74 11                	je     c000ed6c <Video::tgaParse(unsigned char*, int, int*, int*)+0x74>
c000ed5b:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c000ed5f:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000ed63:	c1 fa 03             	sar    edx,0x3
c000ed66:	0f af d1             	imul   edx,ecx
c000ed69:	83 c2 12             	add    edx,0x12
c000ed6c:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c000ed70:	74 04                	je     c000ed76 <Video::tgaParse(unsigned char*, int, int*, int*)+0x7e>
c000ed72:	85 f6                	test   esi,esi
c000ed74:	75 12                	jne    c000ed88 <Video::tgaParse(unsigned char*, int, int*, int*)+0x90>
c000ed76:	83 ec 0c             	sub    esp,0xc
c000ed79:	68 e4 1f 02 c0       	push   0xc0021fe4
c000ed7e:	e8 f2 bb ff ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c000ed83:	e9 b8 00 00 00       	jmp    c000ee40 <Video::tgaParse(unsigned char*, int, int*, int*)+0x148>
c000ed88:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000ed8c:	83 f9 02             	cmp    ecx,0x2
c000ed8f:	0f 85 96 00 00 00    	jne    c000ee2b <Video::tgaParse(unsigned char*, int, int*, int*)+0x133>
c000ed95:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000ed9a:	75 0e                	jne    c000edaa <Video::tgaParse(unsigned char*, int, int*, int*)+0xb2>
c000ed9c:	85 c0                	test   eax,eax
c000ed9e:	75 0a                	jne    c000edaa <Video::tgaParse(unsigned char*, int, int*, int*)+0xb2>
c000eda0:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000eda3:	83 e8 18             	sub    eax,0x18
c000eda6:	a8 f7                	test   al,0xf7
c000eda8:	74 0a                	je     c000edb4 <Video::tgaParse(unsigned char*, int, int*, int*)+0xbc>
c000edaa:	83 ec 0c             	sub    esp,0xc
c000edad:	68 f9 1f 02 c0       	push   0xc0021ff9
c000edb2:	eb 7f                	jmp    c000ee33 <Video::tgaParse(unsigned char*, int, int*, int*)+0x13b>
c000edb4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000edbc:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000edc4:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c000edc8:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000edd0:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000edd4:	75 0c                	jne    c000ede2 <Video::tgaParse(unsigned char*, int, int*, int*)+0xea>
c000edd6:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c000eddb:	c1 e0 18             	shl    eax,0x18
c000edde:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ede2:	45                   	inc    ebp
c000ede3:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c000ede8:	c1 e1 10             	shl    ecx,0x10
c000edeb:	89 c8                	mov    eax,ecx
c000eded:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c000edf2:	c1 e1 08             	shl    ecx,0x8
c000edf5:	09 c1                	or     ecx,eax
c000edf7:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c000edfb:	09 c1                	or     ecx,eax
c000edfd:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c000ee01:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c000ee05:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000ee09:	c1 f8 03             	sar    eax,0x3
c000ee0c:	01 c2                	add    edx,eax
c000ee0e:	89 e8                	mov    eax,ebp
c000ee10:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000ee14:	39 c6                	cmp    esi,eax
c000ee16:	7f b0                	jg     c000edc8 <Video::tgaParse(unsigned char*, int, int*, int*)+0xd0>
c000ee18:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000ee1c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ee20:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000ee23:	7e 22                	jle    c000ee47 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14f>
c000ee25:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c000ee29:	eb 99                	jmp    c000edc4 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcc>
c000ee2b:	50                   	push   eax
c000ee2c:	50                   	push   eax
c000ee2d:	51                   	push   ecx
c000ee2e:	68 07 20 02 c0       	push   0xc0022007
c000ee33:	e8 3d bb ff ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c000ee38:	89 3c 24             	mov    DWORD PTR [esp],edi
c000ee3b:	e8 b6 8c ff ff       	call   c0007af6 <free>
c000ee40:	83 c4 10             	add    esp,0x10
c000ee43:	31 ff                	xor    edi,edi
c000ee45:	eb 0f                	jmp    c000ee56 <Video::tgaParse(unsigned char*, int, int*, int*)+0x15e>
c000ee47:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ee4b:	89 30                	mov    DWORD PTR [eax],esi
c000ee4d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ee51:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000ee54:	89 30                	mov    DWORD PTR [eax],esi
c000ee56:	83 c4 1c             	add    esp,0x1c
c000ee59:	89 f8                	mov    eax,edi
c000ee5b:	5b                   	pop    ebx
c000ee5c:	5e                   	pop    esi
c000ee5d:	5f                   	pop    edi
c000ee5e:	5d                   	pop    ebp
c000ee5f:	c3                   	ret    

c000ee60 <Video::putTGA(int, int, unsigned char*, int)>:
c000ee60:	55                   	push   ebp
c000ee61:	57                   	push   edi
c000ee62:	56                   	push   esi
c000ee63:	53                   	push   ebx
c000ee64:	83 ec 28             	sub    esp,0x28
c000ee67:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000ee6b:	8d 44 24 18          	lea    eax,[esp+0x18]
c000ee6f:	50                   	push   eax
c000ee70:	8d 44 24 18          	lea    eax,[esp+0x18]
c000ee74:	50                   	push   eax
c000ee75:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000ee79:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000ee7d:	56                   	push   esi
c000ee7e:	e8 75 fe ff ff       	call   c000ecf8 <Video::tgaParse(unsigned char*, int, int*, int*)>
c000ee83:	83 c4 20             	add    esp,0x20
c000ee86:	85 c0                	test   eax,eax
c000ee88:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000ee8c:	74 35                	je     c000eec3 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000ee8e:	89 c7                	mov    edi,eax
c000ee90:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ee94:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000ee98:	39 d8                	cmp    eax,ebx
c000ee9a:	7e 27                	jle    c000eec3 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000ee9c:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000eea0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000eea4:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000eea8:	39 e8                	cmp    eax,ebp
c000eeaa:	7e 14                	jle    c000eec0 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c000eeac:	8b 06                	mov    eax,DWORD PTR [esi]
c000eeae:	83 c7 04             	add    edi,0x4
c000eeb1:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c000eeb4:	53                   	push   ebx
c000eeb5:	55                   	push   ebp
c000eeb6:	45                   	inc    ebp
c000eeb7:	56                   	push   esi
c000eeb8:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000eebb:	83 c4 10             	add    esp,0x10
c000eebe:	eb e0                	jmp    c000eea0 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000eec0:	43                   	inc    ebx
c000eec1:	eb cd                	jmp    c000ee90 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000eec3:	83 c4 1c             	add    esp,0x1c
c000eec6:	5b                   	pop    ebx
c000eec7:	5e                   	pop    esi
c000eec8:	5f                   	pop    edi
c000eec9:	5d                   	pop    ebp
c000eeca:	c3                   	ret    
c000eecb:	90                   	nop

c000eecc <ACPI::close(int, int, void*)>:
c000eecc:	83 ec 1c             	sub    esp,0x1c
c000eecf:	83 ec 0c             	sub    esp,0xc
c000eed2:	68 68 20 02 c0       	push   0xc0022068
c000eed7:	e8 99 ba ff ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c000eedc:	83 c4 10             	add    esp,0x10
c000eedf:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c000eee7:	74 0b                	je     c000eef4 <ACPI::close(int, int, void*)+0x28>
c000eee9:	b8 00 00 00 00       	mov    eax,0x0
c000eeee:	e9 01 01 00 00       	jmp    c000eff4 <ACPI::close(int, int, void*)+0x128>
c000eef3:	90                   	nop
c000eef4:	83 ec 0c             	sub    esp,0xc
c000eef7:	68 77 20 02 c0       	push   0xc0022077
c000eefc:	e8 74 ba ff ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c000ef01:	83 c4 10             	add    esp,0x10
c000ef04:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000ef09:	75 45                	jne    c000ef50 <ACPI::close(int, int, void*)+0x84>
c000ef0b:	a1 08 b9 02 c0       	mov    eax,ds:0xc002b908
c000ef10:	83 ec 08             	sub    esp,0x8
c000ef13:	50                   	push   eax
c000ef14:	68 86 20 02 c0       	push   0xc0022086
c000ef19:	e8 57 ba ff ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c000ef1e:	83 c4 10             	add    esp,0x10
c000ef21:	a1 08 b9 02 c0       	mov    eax,ds:0xc002b908
c000ef26:	85 c0                	test   eax,eax
c000ef28:	74 0a                	je     c000ef34 <ACPI::close(int, int, void*)+0x68>
c000ef2a:	a1 08 b9 02 c0       	mov    eax,ds:0xc002b908
c000ef2f:	ff d0                	call   eax
c000ef31:	8d 76 00             	lea    esi,[esi+0x0]
c000ef34:	83 ec 0c             	sub    esp,0xc
c000ef37:	68 54 22 02 c0       	push   0xc0022254
c000ef3c:	e8 86 27 00 00       	call   c00116c7 <KePanic(char const*)>
c000ef41:	83 c4 10             	add    esp,0x10
c000ef44:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ef49:	e9 a6 00 00 00       	jmp    c000eff4 <ACPI::close(int, int, void*)+0x128>
c000ef4e:	66 90                	xchg   ax,ax
c000ef50:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000ef55:	0f 85 81 00 00 00    	jne    c000efdc <ACPI::close(int, int, void*)+0x110>
c000ef5b:	a1 08 b9 02 c0       	mov    eax,ds:0xc002b908
c000ef60:	83 ec 08             	sub    esp,0x8
c000ef63:	50                   	push   eax
c000ef64:	68 a4 20 02 c0       	push   0xc00220a4
c000ef69:	e8 07 ba ff ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c000ef6e:	83 c4 10             	add    esp,0x10
c000ef71:	a1 04 b9 02 c0       	mov    eax,ds:0xc002b904
c000ef76:	85 c0                	test   eax,eax
c000ef78:	74 0a                	je     c000ef84 <ACPI::close(int, int, void*)+0xb8>
c000ef7a:	a1 04 b9 02 c0       	mov    eax,ds:0xc002b904
c000ef7f:	ff d0                	call   eax
c000ef81:	8d 76 00             	lea    esi,[esi+0x0]
c000ef84:	83 ec 0c             	sub    esp,0xc
c000ef87:	68 bf 20 02 c0       	push   0xc00220bf
c000ef8c:	e8 e4 b9 ff ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c000ef91:	83 c4 10             	add    esp,0x10
c000ef94:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c000ef99:	8d 76 00             	lea    esi,[esi+0x0]
c000ef9c:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000efa1:	83 e0 02             	and    eax,0x2
c000efa4:	74 1e                	je     c000efc4 <ACPI::close(int, int, void*)+0xf8>
c000efa6:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c000efad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000efb1:	89 c2                	mov    edx,eax
c000efb3:	ec                   	in     al,dx
c000efb4:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000efb8:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000efbc:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000efc0:	eb da                	jmp    c000ef9c <ACPI::close(int, int, void*)+0xd0>
c000efc2:	66 90                	xchg   ax,ax
c000efc4:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c000efcb:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c000efd0:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000efd4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000efd8:	ee                   	out    dx,al
c000efd9:	8d 76 00             	lea    esi,[esi+0x0]
c000efdc:	83 ec 0c             	sub    esp,0xc
c000efdf:	68 d1 20 02 c0       	push   0xc00220d1
c000efe4:	e8 8c b9 ff ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c000efe9:	83 c4 10             	add    esp,0x10
c000efec:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000eff1:	8d 76 00             	lea    esi,[esi+0x0]
c000eff4:	83 c4 1c             	add    esp,0x1c
c000eff7:	c3                   	ret    

c000eff8 <findRSDP()>:
c000eff8:	83 ec 1c             	sub    esp,0x1c
c000effb:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f000:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f006:	83 e0 04             	and    eax,0x4
c000f009:	0f b6 c0             	movzx  eax,al
c000f00c:	85 c0                	test   eax,eax
c000f00e:	75 08                	jne    c000f018 <findRSDP()+0x20>
c000f010:	b8 00 00 00 00       	mov    eax,0x0
c000f015:	eb 75                	jmp    c000f08c <findRSDP()+0x94>
c000f017:	90                   	nop
c000f018:	a1 e8 6e 02 c0       	mov    eax,ds:0xc0026ee8
c000f01d:	3d ff 07 00 00       	cmp    eax,0x7ff
c000f022:	7f 1c                	jg     c000f040 <findRSDP()+0x48>
c000f024:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f029:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f02f:	83 e2 fb             	and    edx,0xfffffffb
c000f032:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f038:	b8 00 00 00 00       	mov    eax,0x0
c000f03d:	eb 4d                	jmp    c000f08c <findRSDP()+0x94>
c000f03f:	90                   	nop
c000f040:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c000f048:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c000f050:	77 32                	ja     c000f084 <findRSDP()+0x8c>
c000f052:	83 ec 04             	sub    esp,0x4
c000f055:	6a 08                	push   0x8
c000f057:	68 e0 20 02 c0       	push   0xc00220e0
c000f05c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f060:	e8 1b 13 ff ff       	call   c0000380 <memcmp>
c000f065:	83 c4 10             	add    esp,0x10
c000f068:	85 c0                	test   eax,eax
c000f06a:	0f 94 c0             	sete   al
c000f06d:	0f b6 c0             	movzx  eax,al
c000f070:	85 c0                	test   eax,eax
c000f072:	74 08                	je     c000f07c <findRSDP()+0x84>
c000f074:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f078:	eb 12                	jmp    c000f08c <findRSDP()+0x94>
c000f07a:	66 90                	xchg   ax,ax
c000f07c:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c000f081:	eb c5                	jmp    c000f048 <findRSDP()+0x50>
c000f083:	90                   	nop
c000f084:	b8 00 00 00 00       	mov    eax,0x0
c000f089:	8d 76 00             	lea    esi,[esi+0x0]
c000f08c:	83 c4 1c             	add    esp,0x1c
c000f08f:	c3                   	ret    

c000f090 <loadACPITables(unsigned char*)>:
c000f090:	57                   	push   edi
c000f091:	56                   	push   esi
c000f092:	53                   	push   ebx
c000f093:	83 ec 60             	sub    esp,0x60
c000f096:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f09b:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f0a1:	83 e0 04             	and    eax,0x4
c000f0a4:	0f b6 c0             	movzx  eax,al
c000f0a7:	85 c0                	test   eax,eax
c000f0a9:	0f 84 41 02 00 00    	je     c000f2f0 <loadACPITables(unsigned char*)+0x260>
c000f0af:	a0 20 bb 02 c0       	mov    al,ds:0xc002bb20
c000f0b4:	0f b6 c0             	movzx  eax,al
c000f0b7:	85 c0                	test   eax,eax
c000f0b9:	74 79                	je     c000f134 <loadACPITables(unsigned char*)+0xa4>
c000f0bb:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000f0bf:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000f0c3:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000f0c7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f0ca:	83 e8 24             	sub    eax,0x24
c000f0cd:	c1 e8 03             	shr    eax,0x3
c000f0d0:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f0d4:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000f0dc:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000f0e0:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000f0e4:	0f 8d ba 00 00 00    	jge    c000f1a4 <loadACPITables(unsigned char*)+0x114>
c000f0ea:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000f0ee:	83 c0 24             	add    eax,0x24
c000f0f1:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000f0f5:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f0f9:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f0fd:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000f101:	c1 e0 03             	shl    eax,0x3
c000f104:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000f108:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f10c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000f10f:	8b 00                	mov    eax,DWORD PTR [eax]
c000f111:	89 c1                	mov    ecx,eax
c000f113:	a1 0c b9 02 c0       	mov    eax,ds:0xc002b90c
c000f118:	8d 50 01             	lea    edx,[eax+0x1]
c000f11b:	89 15 0c b9 02 c0    	mov    DWORD PTR ds:0xc002b90c,edx
c000f121:	89 ca                	mov    edx,ecx
c000f123:	89 14 c5 24 b9 02 c0 	mov    DWORD PTR [eax*8-0x3ffd46dc],edx
c000f12a:	83 44 24 5c 01       	add    DWORD PTR [esp+0x5c],0x1
c000f12f:	eb ab                	jmp    c000f0dc <loadACPITables(unsigned char*)+0x4c>
c000f131:	8d 76 00             	lea    esi,[esi+0x0]
c000f134:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000f138:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f13c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f140:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f143:	83 e8 24             	sub    eax,0x24
c000f146:	c1 e8 02             	shr    eax,0x2
c000f149:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f14d:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000f155:	8d 76 00             	lea    esi,[esi+0x0]
c000f158:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000f15c:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000f160:	7d 42                	jge    c000f1a4 <loadACPITables(unsigned char*)+0x114>
c000f162:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000f166:	83 c0 24             	add    eax,0x24
c000f169:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000f16d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000f171:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000f175:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000f179:	c1 e0 02             	shl    eax,0x2
c000f17c:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000f180:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f184:	8b 08                	mov    ecx,DWORD PTR [eax]
c000f186:	a1 0c b9 02 c0       	mov    eax,ds:0xc002b90c
c000f18b:	8d 50 01             	lea    edx,[eax+0x1]
c000f18e:	89 15 0c b9 02 c0    	mov    DWORD PTR ds:0xc002b90c,edx
c000f194:	89 ca                	mov    edx,ecx
c000f196:	89 14 c5 24 b9 02 c0 	mov    DWORD PTR [eax*8-0x3ffd46dc],edx
c000f19d:	83 44 24 58 01       	add    DWORD PTR [esp+0x58],0x1
c000f1a2:	eb b4                	jmp    c000f158 <loadACPITables(unsigned char*)+0xc8>
c000f1a4:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000f1ac:	a1 0c b9 02 c0       	mov    eax,ds:0xc002b90c
c000f1b1:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000f1b5:	0f 8d 39 01 00 00    	jge    c000f2f4 <loadACPITables(unsigned char*)+0x264>
c000f1bb:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000f1bf:	8b 04 c5 24 b9 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd46dc]
c000f1c6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f1ca:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f1ce:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000f1d2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f1d6:	25 ff 0f 00 00       	and    eax,0xfff
c000f1db:	89 c6                	mov    esi,eax
c000f1dd:	8b 1d b0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fb0
c000f1e3:	83 ec 0c             	sub    esp,0xc
c000f1e6:	6a 01                	push   0x1
c000f1e8:	e8 50 a4 ff ff       	call   c000963d <Virt::allocateKernelVirtualPages(int)>
c000f1ed:	83 c4 10             	add    esp,0x10
c000f1f0:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000f1f4:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000f1fa:	83 ec 0c             	sub    esp,0xc
c000f1fd:	6a 01                	push   0x1
c000f1ff:	6a 01                	push   0x1
c000f201:	50                   	push   eax
c000f202:	52                   	push   edx
c000f203:	53                   	push   ebx
c000f204:	e8 41 ad ff ff       	call   c0009f4a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000f209:	83 c4 20             	add    esp,0x20
c000f20c:	09 f0                	or     eax,esi
c000f20e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f212:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000f216:	c1 e0 03             	shl    eax,0x3
c000f219:	05 20 b9 02 c0       	add    eax,0xc002b920
c000f21e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f222:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f226:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f22a:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000f232:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f236:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f23a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f23e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f242:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000f246:	89 c6                	mov    esi,eax
c000f248:	89 d7                	mov    edi,edx
c000f24a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f24c:	89 c8                	mov    eax,ecx
c000f24e:	89 fa                	mov    edx,edi
c000f250:	89 f3                	mov    ebx,esi
c000f252:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000f256:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000f25a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000f25e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f262:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f265:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000f269:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f26d:	05 00 10 00 00       	add    eax,0x1000
c000f272:	c1 e8 0c             	shr    eax,0xc
c000f275:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000f279:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f27d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000f281:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f285:	25 ff 0f 00 00       	and    eax,0xfff
c000f28a:	89 c6                	mov    esi,eax
c000f28c:	8b 1d b0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fb0
c000f292:	83 ec 0c             	sub    esp,0xc
c000f295:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f299:	e8 9f a3 ff ff       	call   c000963d <Virt::allocateKernelVirtualPages(int)>
c000f29e:	83 c4 10             	add    esp,0x10
c000f2a1:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000f2a5:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000f2ab:	83 ec 0c             	sub    esp,0xc
c000f2ae:	6a 01                	push   0x1
c000f2b0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f2b4:	50                   	push   eax
c000f2b5:	52                   	push   edx
c000f2b6:	53                   	push   ebx
c000f2b7:	e8 8e ac ff ff       	call   c0009f4a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000f2bc:	83 c4 20             	add    esp,0x20
c000f2bf:	09 f0                	or     eax,esi
c000f2c1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f2c5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f2c9:	83 ec 0c             	sub    esp,0xc
c000f2cc:	50                   	push   eax
c000f2cd:	e8 89 a6 ff ff       	call   c000995b <Virt::freeKernelVirtualPages(unsigned long)>
c000f2d2:	83 c4 10             	add    esp,0x10
c000f2d5:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000f2d9:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000f2dd:	89 14 c5 24 b9 02 c0 	mov    DWORD PTR [eax*8-0x3ffd46dc],edx
c000f2e4:	83 44 24 54 01       	add    DWORD PTR [esp+0x54],0x1
c000f2e9:	e9 be fe ff ff       	jmp    c000f1ac <loadACPITables(unsigned char*)+0x11c>
c000f2ee:	66 90                	xchg   ax,ax
c000f2f0:	90                   	nop
c000f2f1:	8d 76 00             	lea    esi,[esi+0x0]
c000f2f4:	83 c4 60             	add    esp,0x60
c000f2f7:	5b                   	pop    ebx
c000f2f8:	5e                   	pop    esi
c000f2f9:	5f                   	pop    edi
c000f2fa:	c3                   	ret    
c000f2fb:	90                   	nop

c000f2fc <findRSDT(unsigned char*)>:
c000f2fc:	57                   	push   edi
c000f2fd:	56                   	push   esi
c000f2fe:	53                   	push   ebx
c000f2ff:	83 ec 50             	sub    esp,0x50
c000f302:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f307:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f30d:	83 e0 04             	and    eax,0x4
c000f310:	0f b6 c0             	movzx  eax,al
c000f313:	85 c0                	test   eax,eax
c000f315:	75 0d                	jne    c000f324 <findRSDT(unsigned char*)+0x28>
c000f317:	b8 00 00 00 00       	mov    eax,0x0
c000f31c:	e9 2b 01 00 00       	jmp    c000f44c <findRSDT(unsigned char*)+0x150>
c000f321:	8d 76 00             	lea    esi,[esi+0x0]
c000f324:	89 e0                	mov    eax,esp
c000f326:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f32a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f32e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000f332:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000f33a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f33e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f342:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000f346:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000f34a:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000f34e:	89 c6                	mov    esi,eax
c000f350:	89 d7                	mov    edi,edx
c000f352:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f354:	89 c8                	mov    eax,ecx
c000f356:	89 fa                	mov    edx,edi
c000f358:	89 f3                	mov    ebx,esi
c000f35a:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000f35e:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000f362:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000f366:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000f36a:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000f36e:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000f376:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f37a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f37e:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f382:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f386:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f38a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f38e:	25 ff 0f 00 00       	and    eax,0xfff
c000f393:	89 c6                	mov    esi,eax
c000f395:	8b 1d b0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fb0
c000f39b:	83 ec 0c             	sub    esp,0xc
c000f39e:	6a 02                	push   0x2
c000f3a0:	e8 98 a2 ff ff       	call   c000963d <Virt::allocateKernelVirtualPages(int)>
c000f3a5:	83 c4 10             	add    esp,0x10
c000f3a8:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000f3ac:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000f3b2:	83 ec 0c             	sub    esp,0xc
c000f3b5:	6a 01                	push   0x1
c000f3b7:	6a 02                	push   0x2
c000f3b9:	50                   	push   eax
c000f3ba:	52                   	push   edx
c000f3bb:	53                   	push   ebx
c000f3bc:	e8 89 ab ff ff       	call   c0009f4a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000f3c1:	83 c4 20             	add    esp,0x20
c000f3c4:	09 f0                	or     eax,esi
c000f3c6:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f3ca:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f3ce:	25 ff 0f 00 00       	and    eax,0xfff
c000f3d3:	89 c6                	mov    esi,eax
c000f3d5:	8b 1d b0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fb0
c000f3db:	83 ec 0c             	sub    esp,0xc
c000f3de:	6a 02                	push   0x2
c000f3e0:	e8 58 a2 ff ff       	call   c000963d <Virt::allocateKernelVirtualPages(int)>
c000f3e5:	83 c4 10             	add    esp,0x10
c000f3e8:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000f3ec:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000f3f2:	83 ec 0c             	sub    esp,0xc
c000f3f5:	6a 01                	push   0x1
c000f3f7:	6a 02                	push   0x2
c000f3f9:	50                   	push   eax
c000f3fa:	52                   	push   edx
c000f3fb:	53                   	push   ebx
c000f3fc:	e8 49 ab ff ff       	call   c0009f4a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000f401:	83 c4 20             	add    esp,0x20
c000f404:	09 f0                	or     eax,esi
c000f406:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f40a:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000f40f:	85 c0                	test   eax,eax
c000f411:	75 11                	jne    c000f424 <findRSDT(unsigned char*)+0x128>
c000f413:	c6 05 20 bb 02 c0 00 	mov    BYTE PTR ds:0xc002bb20,0x0
c000f41a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f41e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f422:	eb 24                	jmp    c000f448 <findRSDT(unsigned char*)+0x14c>
c000f424:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000f429:	83 f8 02             	cmp    eax,0x2
c000f42c:	75 12                	jne    c000f440 <findRSDT(unsigned char*)+0x144>
c000f42e:	c6 05 20 bb 02 c0 01 	mov    BYTE PTR ds:0xc002bb20,0x1
c000f435:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f439:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f43d:	eb 09                	jmp    c000f448 <findRSDT(unsigned char*)+0x14c>
c000f43f:	90                   	nop
c000f440:	b8 00 00 00 00       	mov    eax,0x0
c000f445:	eb 05                	jmp    c000f44c <findRSDT(unsigned char*)+0x150>
c000f447:	90                   	nop
c000f448:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f44c:	83 c4 50             	add    esp,0x50
c000f44f:	5b                   	pop    ebx
c000f450:	5e                   	pop    esi
c000f451:	5f                   	pop    edi
c000f452:	c3                   	ret    
c000f453:	90                   	nop

c000f454 <findDataTable(unsigned char*, char*)>:
c000f454:	83 ec 1c             	sub    esp,0x1c
c000f457:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f45c:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f462:	83 e0 04             	and    eax,0x4
c000f465:	0f b6 c0             	movzx  eax,al
c000f468:	85 c0                	test   eax,eax
c000f46a:	75 08                	jne    c000f474 <findDataTable(unsigned char*, char*)+0x20>
c000f46c:	b8 00 00 00 00       	mov    eax,0x0
c000f471:	eb 5d                	jmp    c000f4d0 <findDataTable(unsigned char*, char*)+0x7c>
c000f473:	90                   	nop
c000f474:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000f47c:	a1 0c b9 02 c0       	mov    eax,ds:0xc002b90c
c000f481:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000f485:	7d 41                	jge    c000f4c8 <findDataTable(unsigned char*, char*)+0x74>
c000f487:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f48b:	c1 e0 03             	shl    eax,0x3
c000f48e:	05 20 b9 02 c0       	add    eax,0xc002b920
c000f493:	83 ec 04             	sub    esp,0x4
c000f496:	6a 04                	push   0x4
c000f498:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f49c:	50                   	push   eax
c000f49d:	e8 de 0e ff ff       	call   c0000380 <memcmp>
c000f4a2:	83 c4 10             	add    esp,0x10
c000f4a5:	85 c0                	test   eax,eax
c000f4a7:	0f 94 c0             	sete   al
c000f4aa:	0f b6 c0             	movzx  eax,al
c000f4ad:	85 c0                	test   eax,eax
c000f4af:	74 0f                	je     c000f4c0 <findDataTable(unsigned char*, char*)+0x6c>
c000f4b1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f4b5:	8b 04 c5 24 b9 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd46dc]
c000f4bc:	eb 12                	jmp    c000f4d0 <findDataTable(unsigned char*, char*)+0x7c>
c000f4be:	66 90                	xchg   ax,ax
c000f4c0:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c000f4c5:	eb b5                	jmp    c000f47c <findDataTable(unsigned char*, char*)+0x28>
c000f4c7:	90                   	nop
c000f4c8:	b8 00 00 00 00       	mov    eax,0x0
c000f4cd:	8d 76 00             	lea    esi,[esi+0x0]
c000f4d0:	83 c4 1c             	add    esp,0x1c
c000f4d3:	c3                   	ret    

c000f4d4 <scanMADT()>:
c000f4d4:	53                   	push   ebx
c000f4d5:	83 ec 38             	sub    esp,0x38
c000f4d8:	a1 d0 6e 02 c0       	mov    eax,ds:0xc0026ed0
c000f4dd:	25 00 04 00 00       	and    eax,0x400
c000f4e2:	74 14                	je     c000f4f8 <scanMADT()+0x24>
c000f4e4:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f4e9:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f4ef:	83 e2 fb             	and    edx,0xfffffffb
c000f4f2:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f4f8:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f4fd:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f503:	83 e0 04             	and    eax,0x4
c000f506:	0f b6 c0             	movzx  eax,al
c000f509:	85 c0                	test   eax,eax
c000f50b:	0f 84 6b 04 00 00    	je     c000f97c <scanMADT()+0x4a8>
c000f511:	e8 e2 fa ff ff       	call   c000eff8 <findRSDP()>
c000f516:	a3 2c bb 02 c0       	mov    ds:0xc002bb2c,eax
c000f51b:	a1 2c bb 02 c0       	mov    eax,ds:0xc002bb2c
c000f520:	85 c0                	test   eax,eax
c000f522:	75 1c                	jne    c000f540 <scanMADT()+0x6c>
c000f524:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f529:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f52f:	83 e2 fb             	and    edx,0xfffffffb
c000f532:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f538:	e9 47 04 00 00       	jmp    c000f984 <scanMADT()+0x4b0>
c000f53d:	8d 76 00             	lea    esi,[esi+0x0]
c000f540:	a1 2c bb 02 c0       	mov    eax,ds:0xc002bb2c
c000f545:	83 ec 0c             	sub    esp,0xc
c000f548:	50                   	push   eax
c000f549:	e8 ae fd ff ff       	call   c000f2fc <findRSDT(unsigned char*)>
c000f54e:	83 c4 10             	add    esp,0x10
c000f551:	a3 28 bb 02 c0       	mov    ds:0xc002bb28,eax
c000f556:	a1 28 bb 02 c0       	mov    eax,ds:0xc002bb28
c000f55b:	85 c0                	test   eax,eax
c000f55d:	75 19                	jne    c000f578 <scanMADT()+0xa4>
c000f55f:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f564:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f56a:	83 e2 fb             	and    edx,0xfffffffb
c000f56d:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f573:	e9 0c 04 00 00       	jmp    c000f984 <scanMADT()+0x4b0>
c000f578:	a1 28 bb 02 c0       	mov    eax,ds:0xc002bb28
c000f57d:	83 ec 0c             	sub    esp,0xc
c000f580:	50                   	push   eax
c000f581:	e8 0a fb ff ff       	call   c000f090 <loadACPITables(unsigned char*)>
c000f586:	83 c4 10             	add    esp,0x10
c000f589:	a1 28 bb 02 c0       	mov    eax,ds:0xc002bb28
c000f58e:	83 ec 08             	sub    esp,0x8
c000f591:	68 e9 20 02 c0       	push   0xc00220e9
c000f596:	50                   	push   eax
c000f597:	e8 b8 fe ff ff       	call   c000f454 <findDataTable(unsigned char*, char*)>
c000f59c:	83 c4 10             	add    esp,0x10
c000f59f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000f5a3:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000f5a8:	75 1a                	jne    c000f5c4 <scanMADT()+0xf0>
c000f5aa:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f5af:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f5b5:	83 e2 fe             	and    edx,0xfffffffe
c000f5b8:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f5be:	e9 c1 03 00 00       	jmp    c000f984 <scanMADT()+0x4b0>
c000f5c3:	90                   	nop
c000f5c4:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000f5cc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f5d0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f5d3:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000f5d7:	0f 87 a7 03 00 00    	ja     c000f984 <scanMADT()+0x4b0>
c000f5dd:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000f5e5:	0f 87 99 03 00 00    	ja     c000f984 <scanMADT()+0x4b0>
c000f5eb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f5ef:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000f5f3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f5f7:	8d 50 01             	lea    edx,[eax+0x1]
c000f5fa:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f5fe:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f602:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f606:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000f60a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f60e:	8d 50 01             	lea    edx,[eax+0x1]
c000f611:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f615:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f619:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f61d:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000f621:	0f b6 44 24 22       	movzx  eax,BYTE PTR [esp+0x22]
c000f626:	83 f8 02             	cmp    eax,0x2
c000f629:	0f 86 51 03 00 00    	jbe    c000f980 <scanMADT()+0x4ac>
c000f62f:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f634:	85 c0                	test   eax,eax
c000f636:	75 58                	jne    c000f690 <scanMADT()+0x1bc>
c000f638:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f63c:	8d 50 01             	lea    edx,[eax+0x1]
c000f63f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f643:	8a 15 20 bd 02 c0    	mov    dl,BYTE PTR ds:0xc002bd20
c000f649:	0f b6 d2             	movzx  edx,dl
c000f64c:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f650:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000f654:	88 82 60 bd 02 c0    	mov    BYTE PTR [edx-0x3ffd42a0],al
c000f65a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f65e:	8d 50 01             	lea    edx,[eax+0x1]
c000f661:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f665:	8a 15 20 bd 02 c0    	mov    dl,BYTE PTR ds:0xc002bd20
c000f66b:	8d 4a 01             	lea    ecx,[edx+0x1]
c000f66e:	88 0d 20 bd 02 c0    	mov    BYTE PTR ds:0xc002bd20,cl
c000f674:	0f b6 d2             	movzx  edx,dl
c000f677:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f67b:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000f67f:	88 82 40 bd 02 c0    	mov    BYTE PTR [edx-0x3ffd42c0],al
c000f685:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f68a:	e9 d9 02 00 00       	jmp    c000f968 <scanMADT()+0x494>
c000f68f:	90                   	nop
c000f690:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f695:	83 f8 01             	cmp    eax,0x1
c000f698:	0f 85 1a 01 00 00    	jne    c000f7b8 <scanMADT()+0x2e4>
c000f69e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f6a2:	8d 50 01             	lea    edx,[eax+0x1]
c000f6a5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f6a9:	8a 15 e0 bb 02 c0    	mov    dl,BYTE PTR ds:0xc002bbe0
c000f6af:	0f b6 d2             	movzx  edx,dl
c000f6b2:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f6b6:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000f6ba:	88 82 00 bc 02 c0    	mov    BYTE PTR [edx-0x3ffd4400],al
c000f6c0:	83 44 24 2c 01       	add    DWORD PTR [esp+0x2c],0x1
c000f6c5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f6c9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f6cd:	01 d0                	add    eax,edx
c000f6cf:	83 c0 2c             	add    eax,0x2c
c000f6d2:	8a 00                	mov    al,BYTE PTR [eax]
c000f6d4:	0f b6 d0             	movzx  edx,al
c000f6d7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f6db:	8d 48 01             	lea    ecx,[eax+0x1]
c000f6de:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f6e2:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f6e6:	0f b6 c0             	movzx  eax,al
c000f6e9:	c1 e0 08             	shl    eax,0x8
c000f6ec:	89 d1                	mov    ecx,edx
c000f6ee:	09 c1                	or     ecx,eax
c000f6f0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f6f4:	8d 50 02             	lea    edx,[eax+0x2]
c000f6f7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f6fb:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f6ff:	0f b6 c0             	movzx  eax,al
c000f702:	c1 e0 10             	shl    eax,0x10
c000f705:	09 c1                	or     ecx,eax
c000f707:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f70b:	8d 50 03             	lea    edx,[eax+0x3]
c000f70e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f712:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f716:	0f b6 c0             	movzx  eax,al
c000f719:	c1 e0 18             	shl    eax,0x18
c000f71c:	09 c1                	or     ecx,eax
c000f71e:	89 ca                	mov    edx,ecx
c000f720:	a0 e0 bb 02 c0       	mov    al,ds:0xc002bbe0
c000f725:	0f b6 c0             	movzx  eax,al
c000f728:	89 14 85 20 bc 02 c0 	mov    DWORD PTR [eax*4-0x3ffd43e0],edx
c000f72f:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f734:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f738:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f73c:	01 d0                	add    eax,edx
c000f73e:	83 c0 2c             	add    eax,0x2c
c000f741:	8a 00                	mov    al,BYTE PTR [eax]
c000f743:	0f b6 d0             	movzx  edx,al
c000f746:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f74a:	8d 48 01             	lea    ecx,[eax+0x1]
c000f74d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f751:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f755:	0f b6 c0             	movzx  eax,al
c000f758:	c1 e0 08             	shl    eax,0x8
c000f75b:	89 d1                	mov    ecx,edx
c000f75d:	09 c1                	or     ecx,eax
c000f75f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f763:	8d 50 02             	lea    edx,[eax+0x2]
c000f766:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f76a:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f76e:	0f b6 c0             	movzx  eax,al
c000f771:	c1 e0 10             	shl    eax,0x10
c000f774:	09 c1                	or     ecx,eax
c000f776:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f77a:	8d 50 03             	lea    edx,[eax+0x3]
c000f77d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f781:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f785:	0f b6 c0             	movzx  eax,al
c000f788:	c1 e0 18             	shl    eax,0x18
c000f78b:	09 c1                	or     ecx,eax
c000f78d:	89 ca                	mov    edx,ecx
c000f78f:	a0 e0 bb 02 c0       	mov    al,ds:0xc002bbe0
c000f794:	0f b6 c0             	movzx  eax,al
c000f797:	89 14 85 a0 bc 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4360],edx
c000f79e:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f7a3:	a0 e0 bb 02 c0       	mov    al,ds:0xc002bbe0
c000f7a8:	83 c0 01             	add    eax,0x1
c000f7ab:	a2 e0 bb 02 c0       	mov    ds:0xc002bbe0,al
c000f7b0:	e9 b3 01 00 00       	jmp    c000f968 <scanMADT()+0x494>
c000f7b5:	8d 76 00             	lea    esi,[esi+0x0]
c000f7b8:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f7bd:	83 f8 02             	cmp    eax,0x2
c000f7c0:	0f 85 ea 00 00 00    	jne    c000f8b0 <scanMADT()+0x3dc>
c000f7c6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f7ca:	8d 50 01             	lea    edx,[eax+0x1]
c000f7cd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f7d1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f7d5:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f7d9:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000f7dd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f7e1:	8d 50 01             	lea    edx,[eax+0x1]
c000f7e4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f7e8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f7ec:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f7f0:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000f7f4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f7f8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f7fc:	01 d0                	add    eax,edx
c000f7fe:	83 c0 2c             	add    eax,0x2c
c000f801:	8a 00                	mov    al,BYTE PTR [eax]
c000f803:	0f b6 d0             	movzx  edx,al
c000f806:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f80a:	8d 48 01             	lea    ecx,[eax+0x1]
c000f80d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f811:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f815:	0f b6 c0             	movzx  eax,al
c000f818:	c1 e0 08             	shl    eax,0x8
c000f81b:	89 d1                	mov    ecx,edx
c000f81d:	09 c1                	or     ecx,eax
c000f81f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f823:	8d 50 02             	lea    edx,[eax+0x2]
c000f826:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f82a:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f82e:	0f b6 c0             	movzx  eax,al
c000f831:	c1 e0 10             	shl    eax,0x10
c000f834:	09 c1                	or     ecx,eax
c000f836:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f83a:	8d 50 03             	lea    edx,[eax+0x3]
c000f83d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f841:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f845:	0f b6 c0             	movzx  eax,al
c000f848:	c1 e0 18             	shl    eax,0x18
c000f84b:	09 c8                	or     eax,ecx
c000f84d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f851:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f856:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f85a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f85e:	01 d0                	add    eax,edx
c000f860:	83 c0 2c             	add    eax,0x2c
c000f863:	8a 00                	mov    al,BYTE PTR [eax]
c000f865:	0f b6 c0             	movzx  eax,al
c000f868:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000f86c:	8d 4a 01             	lea    ecx,[edx+0x1]
c000f86f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f873:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c000f877:	0f b6 d2             	movzx  edx,dl
c000f87a:	c1 e2 08             	shl    edx,0x8
c000f87d:	09 d0                	or     eax,edx
c000f87f:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000f884:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000f889:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000f88e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f892:	88 90 a8 38 02 c0    	mov    BYTE PTR [eax-0x3ffdc758],dl
c000f898:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c000f89d:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000f8a2:	66 89 84 12 c0 bb 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffd4440],ax
c000f8aa:	e9 b9 00 00 00       	jmp    c000f968 <scanMADT()+0x494>
c000f8af:	90                   	nop
c000f8b0:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f8b5:	83 f8 04             	cmp    eax,0x4
c000f8b8:	0f 85 9a 00 00 00    	jne    c000f958 <scanMADT()+0x484>
c000f8be:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f8c2:	8d 50 01             	lea    edx,[eax+0x1]
c000f8c5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f8c9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f8cd:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f8d1:	0f b6 c0             	movzx  eax,al
c000f8d4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000f8d8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f8dc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f8e0:	01 d0                	add    eax,edx
c000f8e2:	83 c0 2c             	add    eax,0x2c
c000f8e5:	8a 00                	mov    al,BYTE PTR [eax]
c000f8e7:	0f b6 d0             	movzx  edx,al
c000f8ea:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f8ee:	8d 48 01             	lea    ecx,[eax+0x1]
c000f8f1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f8f5:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f8f9:	0f b6 c0             	movzx  eax,al
c000f8fc:	c1 e0 08             	shl    eax,0x8
c000f8ff:	09 d0                	or     eax,edx
c000f901:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f905:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000f90a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f90e:	8d 50 01             	lea    edx,[eax+0x1]
c000f911:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f915:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f919:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f91d:	0f b6 c0             	movzx  eax,al
c000f920:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f924:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f928:	c1 e0 08             	shl    eax,0x8
c000f92b:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000f92f:	89 c1                	mov    ecx,eax
c000f931:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f935:	c1 e0 18             	shl    eax,0x18
c000f938:	89 c3                	mov    ebx,eax
c000f93a:	a1 30 bb 02 c0       	mov    eax,ds:0xc002bb30
c000f93f:	8d 50 01             	lea    edx,[eax+0x1]
c000f942:	89 15 30 bb 02 c0    	mov    DWORD PTR ds:0xc002bb30,edx
c000f948:	09 d9                	or     ecx,ebx
c000f94a:	89 ca                	mov    edx,ecx
c000f94c:	89 14 85 40 bb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd44c0],edx
c000f953:	eb 13                	jmp    c000f968 <scanMADT()+0x494>
c000f955:	8d 76 00             	lea    esi,[esi+0x0]
c000f958:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f95d:	83 f8 05             	cmp    eax,0x5
c000f960:	75 06                	jne    c000f968 <scanMADT()+0x494>
c000f962:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000f967:	90                   	nop
c000f968:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c000f96d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f971:	01 d0                	add    eax,edx
c000f973:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000f977:	e9 50 fc ff ff       	jmp    c000f5cc <scanMADT()+0xf8>
c000f97c:	90                   	nop
c000f97d:	eb 05                	jmp    c000f984 <scanMADT()+0x4b0>
c000f97f:	90                   	nop
c000f980:	90                   	nop
c000f981:	8d 76 00             	lea    esi,[esi+0x0]
c000f984:	83 c4 38             	add    esp,0x38
c000f987:	5b                   	pop    ebx
c000f988:	c3                   	ret    
c000f989:	90                   	nop
c000f98a:	66 90                	xchg   ax,ax

c000f98c <ACPI::ACPI()>:
c000f98c:	83 ec 0c             	sub    esp,0xc
c000f98f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f993:	83 ec 08             	sub    esp,0x8
c000f996:	68 ee 20 02 c0       	push   0xc00220ee
c000f99b:	50                   	push   eax
c000f99c:	e8 ed d1 ff ff       	call   c000cb8e <Device::Device(char const*)>
c000f9a1:	83 c4 10             	add    esp,0x10
c000f9a4:	ba f8 22 02 c0       	mov    edx,0xc00222f8
c000f9a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f9ad:	89 10                	mov    DWORD PTR [eax],edx
c000f9af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f9b3:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000f9ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f9be:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000f9c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f9cc:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000f9d6:	e8 f9 fa ff ff       	call   c000f4d4 <scanMADT()>
c000f9db:	90                   	nop
c000f9dc:	83 c4 0c             	add    esp,0xc
c000f9df:	c3                   	ret    

c000f9e0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000f9e0:	83 ec 2c             	sub    esp,0x2c
c000f9e3:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000f9e7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f9eb:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000f9ef:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c000f9f3:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000f9f8:	88 d0                	mov    al,dl
c000f9fa:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000f9fe:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000fa03:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000fa0b:	90                   	nop
c000fa0c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000fa10:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000fa16:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000fa1a:	0f 8d b0 00 00 00    	jge    c000fad0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xf0>
c000fa20:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000fa24:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000fa28:	83 c2 2a             	add    edx,0x2a
c000fa2b:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000fa2f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c000fa34:	0f b7 c0             	movzx  eax,ax
c000fa37:	39 c2                	cmp    edx,eax
c000fa39:	0f 85 85 00 00 00    	jne    c000fac4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000fa3f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000fa43:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000fa47:	83 c2 2a             	add    edx,0x2a
c000fa4a:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000fa4e:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c000fa53:	0f b6 c0             	movzx  eax,al
c000fa56:	39 c2                	cmp    edx,eax
c000fa58:	75 6a                	jne    c000fac4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000fa5a:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000fa5f:	85 c0                	test   eax,eax
c000fa61:	74 3d                	je     c000faa0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xc0>
c000fa63:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000fa67:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000fa6b:	83 c2 2a             	add    edx,0x2a
c000fa6e:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000fa72:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fa76:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fa79:	39 c2                	cmp    edx,eax
c000fa7b:	74 13                	je     c000fa90 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xb0>
c000fa7d:	83 ec 0c             	sub    esp,0xc
c000fa80:	68 78 22 02 c0       	push   0xc0022278
c000fa85:	e8 3d 1c 00 00       	call   c00116c7 <KePanic(char const*)>
c000fa8a:	83 c4 10             	add    esp,0x10
c000fa8d:	8d 76 00             	lea    esi,[esi+0x0]
c000fa90:	83 ec 0c             	sub    esp,0xc
c000fa93:	68 f3 20 02 c0       	push   0xc00220f3
c000fa98:	e8 2a 1c 00 00       	call   c00116c7 <KePanic(char const*)>
c000fa9d:	83 c4 10             	add    esp,0x10
c000faa0:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000faa4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000faa8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000faac:	83 c2 2a             	add    edx,0x2a
c000faaf:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000fab3:	8b 02                	mov    eax,DWORD PTR [edx]
c000fab5:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000fab8:	89 01                	mov    DWORD PTR [ecx],eax
c000faba:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000fabd:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000fac2:	66 90                	xchg   ax,ax
c000fac4:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000fac9:	e9 3e ff ff ff       	jmp    c000fa0c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000face:	66 90                	xchg   ax,ax
c000fad0:	90                   	nop
c000fad1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fad5:	83 c4 2c             	add    esp,0x2c
c000fad8:	c2 04 00             	ret    0x4
c000fadb:	90                   	nop

c000fadc <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000fadc:	83 ec 1c             	sub    esp,0x1c
c000fadf:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000fae3:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000fae7:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000faeb:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000faf0:	88 c8                	mov    al,cl
c000faf2:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000faf6:	88 d0                	mov    al,dl
c000faf8:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000fafc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb00:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000fb06:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb0a:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000fb0d:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c000fb11:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c000fb15:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb19:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000fb1f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000fb23:	8d 48 2a             	lea    ecx,[eax+0x2a]
c000fb26:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fb2a:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c000fb2f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb33:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000fb39:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000fb3d:	83 c0 01             	add    eax,0x1
c000fb40:	88 c1                	mov    cl,al
c000fb42:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb46:	83 c2 2a             	add    edx,0x2a
c000fb49:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000fb4d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb51:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000fb57:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb5b:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000fb5e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000fb62:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000fb66:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb6a:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000fb70:	8d 50 01             	lea    edx,[eax+0x1]
c000fb73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb77:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000fb7d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb81:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000fb87:	3d 00 02 00 00       	cmp    eax,0x200
c000fb8c:	75 12                	jne    c000fba0 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc4>
c000fb8e:	83 ec 0c             	sub    esp,0xc
c000fb91:	68 02 21 02 c0       	push   0xc0022102
c000fb96:	e8 2c 1b 00 00       	call   c00116c7 <KePanic(char const*)>
c000fb9b:	83 c4 10             	add    esp,0x10
c000fb9e:	66 90                	xchg   ax,ax
c000fba0:	90                   	nop
c000fba1:	83 c4 1c             	add    esp,0x1c
c000fba4:	c3                   	ret    
c000fba5:	90                   	nop
c000fba6:	66 90                	xchg   ax,ax

c000fba8 <ACPI::setScreenBrightnessLevel(void*, int)>:
c000fba8:	b8 00 00 00 00       	mov    eax,0x0
c000fbad:	c3                   	ret    
c000fbae:	66 90                	xchg   ax,ax

c000fbb0 <ACPI::detectPCI()>:
c000fbb0:	53                   	push   ebx
c000fbb1:	83 ec 28             	sub    esp,0x28
c000fbb4:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000fbb9:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000fbbe:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000fbc3:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000fbc9:	83 e0 04             	and    eax,0x4
c000fbcc:	0f b6 c0             	movzx  eax,al
c000fbcf:	85 c0                	test   eax,eax
c000fbd1:	74 2d                	je     c000fc00 <ACPI::detectPCI()+0x50>
c000fbd3:	a1 28 bb 02 c0       	mov    eax,ds:0xc002bb28
c000fbd8:	83 ec 08             	sub    esp,0x8
c000fbdb:	68 1f 21 02 c0       	push   0xc002211f
c000fbe0:	50                   	push   eax
c000fbe1:	e8 6e f8 ff ff       	call   c000f454 <findDataTable(unsigned char*, char*)>
c000fbe6:	83 c4 10             	add    esp,0x10
c000fbe9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fbed:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000fbf2:	74 0c                	je     c000fc00 <ACPI::detectPCI()+0x50>
c000fbf4:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000fbf9:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000fbfe:	66 90                	xchg   ax,ax
c000fc00:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000fc08:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fc0c:	8a 00                	mov    al,BYTE PTR [eax]
c000fc0e:	0f b6 c0             	movzx  eax,al
c000fc11:	83 f8 01             	cmp    eax,0x1
c000fc14:	75 0e                	jne    c000fc24 <ACPI::detectPCI()+0x74>
c000fc16:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000fc1b:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000fc20:	eb 2e                	jmp    c000fc50 <ACPI::detectPCI()+0xa0>
c000fc22:	66 90                	xchg   ax,ax
c000fc24:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fc28:	8a 00                	mov    al,BYTE PTR [eax]
c000fc2a:	0f b6 c0             	movzx  eax,al
c000fc2d:	83 f8 02             	cmp    eax,0x2
c000fc30:	75 1e                	jne    c000fc50 <ACPI::detectPCI()+0xa0>
c000fc32:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000fc37:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000fc3c:	85 c0                	test   eax,eax
c000fc3e:	74 10                	je     c000fc50 <ACPI::detectPCI()+0xa0>
c000fc40:	83 ec 0c             	sub    esp,0xc
c000fc43:	68 a8 22 02 c0       	push   0xc00222a8
c000fc48:	e8 7a 1a 00 00       	call   c00116c7 <KePanic(char const*)>
c000fc4d:	83 c4 10             	add    esp,0x10
c000fc50:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000fc54:	83 f0 01             	xor    eax,0x1
c000fc57:	0f b6 c0             	movzx  eax,al
c000fc5a:	85 c0                	test   eax,eax
c000fc5c:	74 46                	je     c000fca4 <ACPI::detectPCI()+0xf4>
c000fc5e:	e8 cd 04 ff ff       	call   c0000130 <manualPCIProbe>
c000fc63:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000fc67:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000fc6c:	75 0e                	jne    c000fc7c <ACPI::detectPCI()+0xcc>
c000fc6e:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000fc73:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000fc78:	eb 2a                	jmp    c000fca4 <ACPI::detectPCI()+0xf4>
c000fc7a:	66 90                	xchg   ax,ax
c000fc7c:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000fc81:	75 21                	jne    c000fca4 <ACPI::detectPCI()+0xf4>
c000fc83:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000fc88:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000fc8d:	85 c0                	test   eax,eax
c000fc8f:	74 13                	je     c000fca4 <ACPI::detectPCI()+0xf4>
c000fc91:	83 ec 0c             	sub    esp,0xc
c000fc94:	68 a8 22 02 c0       	push   0xc00222a8
c000fc99:	e8 29 1a 00 00       	call   c00116c7 <KePanic(char const*)>
c000fc9e:	83 c4 10             	add    esp,0x10
c000fca1:	8d 76 00             	lea    esi,[esi+0x0]
c000fca4:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000fca9:	85 c0                	test   eax,eax
c000fcab:	0f 84 87 00 00 00    	je     c000fd38 <ACPI::detectPCI()+0x188>
c000fcb1:	83 ec 0c             	sub    esp,0xc
c000fcb4:	68 24 21 02 c0       	push   0xc0022124
c000fcb9:	e8 09 13 00 00       	call   c0010fc7 <KeSetBootMessage(char const*)>
c000fcbe:	83 c4 10             	add    esp,0x10
c000fcc1:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000fcc9:	83 ec 0c             	sub    esp,0xc
c000fccc:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000fcd0:	e8 11 7e ff ff       	call   c0007ae6 <malloc>
c000fcd5:	83 c4 10             	add    esp,0x10
c000fcd8:	89 c3                	mov    ebx,eax
c000fcda:	83 ec 0c             	sub    esp,0xc
c000fcdd:	53                   	push   ebx
c000fcde:	e8 a1 b5 00 00       	call   c001b284 <PCI::PCI()>
c000fce3:	83 c4 10             	add    esp,0x10
c000fce6:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000fcea:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fcee:	83 ec 08             	sub    esp,0x8
c000fcf1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fcf5:	50                   	push   eax
c000fcf6:	e8 fb cc ff ff       	call   c000c9f6 <Device::addChild(Device*)>
c000fcfb:	83 c4 10             	add    esp,0x10
c000fcfe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fd02:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd04:	83 c0 08             	add    eax,0x8
c000fd07:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd09:	0f b6 54 24 1e       	movzx  edx,BYTE PTR [esp+0x1e]
c000fd0e:	85 d2                	test   edx,edx
c000fd10:	74 0a                	je     c000fd1c <ACPI::detectPCI()+0x16c>
c000fd12:	ba 01 00 00 00       	mov    edx,0x1
c000fd17:	eb 0b                	jmp    c000fd24 <ACPI::detectPCI()+0x174>
c000fd19:	8d 76 00             	lea    esi,[esi+0x0]
c000fd1c:	ba 02 00 00 00       	mov    edx,0x2
c000fd21:	8d 76 00             	lea    esi,[esi+0x0]
c000fd24:	6a 00                	push   0x0
c000fd26:	6a 00                	push   0x0
c000fd28:	52                   	push   edx
c000fd29:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fd2d:	ff d0                	call   eax
c000fd2f:	83 c4 10             	add    esp,0x10
c000fd32:	e9 91 00 00 00       	jmp    c000fdc8 <ACPI::detectPCI()+0x218>
c000fd37:	90                   	nop
c000fd38:	83 ec 0c             	sub    esp,0xc
c000fd3b:	68 3c 21 02 c0       	push   0xc002213c
c000fd40:	e8 82 12 00 00       	call   c0010fc7 <KeSetBootMessage(char const*)>
c000fd45:	83 c4 10             	add    esp,0x10
c000fd48:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000fd4f:	83 ec 0c             	sub    esp,0xc
c000fd52:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000fd56:	e8 8b 7d ff ff       	call   c0007ae6 <malloc>
c000fd5b:	83 c4 10             	add    esp,0x10
c000fd5e:	89 c3                	mov    ebx,eax
c000fd60:	83 ec 0c             	sub    esp,0xc
c000fd63:	53                   	push   ebx
c000fd64:	e8 b5 c0 00 00       	call   c001be1e <IDE::IDE()>
c000fd69:	83 c4 10             	add    esp,0x10
c000fd6c:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000fd70:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fd74:	83 ec 08             	sub    esp,0x8
c000fd77:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000fd7b:	50                   	push   eax
c000fd7c:	e8 75 cc ff ff       	call   c000c9f6 <Device::addChild(Device*)>
c000fd81:	83 c4 10             	add    esp,0x10
c000fd84:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fd88:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000fd92:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fd96:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000fd9f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fda3:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000fdac:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fdb0:	8b 00                	mov    eax,DWORD PTR [eax]
c000fdb2:	83 c0 08             	add    eax,0x8
c000fdb5:	8b 00                	mov    eax,DWORD PTR [eax]
c000fdb7:	6a 00                	push   0x0
c000fdb9:	6a 00                	push   0x0
c000fdbb:	6a 00                	push   0x0
c000fdbd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fdc1:	ff d0                	call   eax
c000fdc3:	83 c4 10             	add    esp,0x10
c000fdc6:	66 90                	xchg   ax,ax
c000fdc8:	90                   	nop
c000fdc9:	83 c4 28             	add    esp,0x28
c000fdcc:	5b                   	pop    ebx
c000fdcd:	c3                   	ret    
c000fdce:	66 90                	xchg   ax,ax

c000fdd0 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000fdd0:	83 ec 1c             	sub    esp,0x1c
c000fdd3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fdd7:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000fdda:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000fdde:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000fde3:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c000fde8:	83 ec 08             	sub    esp,0x8
c000fdeb:	52                   	push   edx
c000fdec:	50                   	push   eax
c000fded:	e8 b8 73 ff ff       	call   c00071aa <Computer::readCMOS(unsigned char)>
c000fdf2:	83 c4 10             	add    esp,0x10
c000fdf5:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000fdf9:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000fdfe:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c000fe03:	83 ec 04             	sub    esp,0x4
c000fe06:	6a 01                	push   0x1
c000fe08:	52                   	push   edx
c000fe09:	50                   	push   eax
c000fe0a:	e8 b5 74 ff ff       	call   c00072c4 <Computer::writeCMOS(unsigned char, unsigned char)>
c000fe0f:	83 c4 10             	add    esp,0x10
c000fe12:	90                   	nop
c000fe13:	83 c4 1c             	add    esp,0x1c
c000fe16:	c3                   	ret    
c000fe17:	90                   	nop

c000fe18 <ACPI::sleep()>:
c000fe18:	83 ec 0c             	sub    esp,0xc
c000fe1b:	a1 00 b9 02 c0       	mov    eax,ds:0xc002b900
c000fe20:	85 c0                	test   eax,eax
c000fe22:	74 08                	je     c000fe2c <ACPI::sleep()+0x14>
c000fe24:	a1 00 b9 02 c0       	mov    eax,ds:0xc002b900
c000fe29:	ff d0                	call   eax
c000fe2b:	90                   	nop
c000fe2c:	90                   	nop
c000fe2d:	83 c4 0c             	add    esp,0xc
c000fe30:	c3                   	ret    
c000fe31:	90                   	nop
c000fe32:	66 90                	xchg   ax,ax

c000fe34 <ACPI::open(int, int, void*)>:
c000fe34:	57                   	push   edi
c000fe35:	56                   	push   esi
c000fe36:	53                   	push   ebx
c000fe37:	81 ec 70 01 00 00    	sub    esp,0x170
c000fe3d:	83 ec 0c             	sub    esp,0xc
c000fe40:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000fe47:	e8 64 fd ff ff       	call   c000fbb0 <ACPI::detectPCI()>
c000fe4c:	83 c4 10             	add    esp,0x10
c000fe4f:	83 ec 0c             	sub    esp,0xc
c000fe52:	68 d0 22 02 c0       	push   0xc00222d0
c000fe57:	e8 6b 11 00 00       	call   c0010fc7 <KeSetBootMessage(char const*)>
c000fe5c:	83 c4 10             	add    esp,0x10
c000fe5f:	b8 4c 05 00 00       	mov    eax,0x54c
c000fe64:	8a 00                	mov    al,BYTE PTR [eax]
c000fe66:	88 84 24 6e 01 00 00 	mov    BYTE PTR [esp+0x16e],al
c000fe6d:	0f b6 84 24 6e 01 00 00 	movzx  eax,BYTE PTR [esp+0x16e]
c000fe75:	83 f8 01             	cmp    eax,0x1
c000fe78:	75 12                	jne    c000fe8c <ACPI::open(int, int, void*)+0x58>
c000fe7a:	83 ec 0c             	sub    esp,0xc
c000fe7d:	68 51 21 02 c0       	push   0xc0022151
c000fe82:	e8 4c 4e 00 00       	call   c0014cd3 <Thr::loadKernelSymbolTable(char const*)>
c000fe87:	83 c4 10             	add    esp,0x10
c000fe8a:	eb 34                	jmp    c000fec0 <ACPI::open(int, int, void*)+0x8c>
c000fe8c:	0f b6 84 24 6e 01 00 00 	movzx  eax,BYTE PTR [esp+0x16e]
c000fe94:	3d bb 00 00 00       	cmp    eax,0xbb
c000fe99:	75 15                	jne    c000feb0 <ACPI::open(int, int, void*)+0x7c>
c000fe9b:	83 ec 0c             	sub    esp,0xc
c000fe9e:	68 6f 21 02 c0       	push   0xc002216f
c000fea3:	e8 2b 4e 00 00       	call   c0014cd3 <Thr::loadKernelSymbolTable(char const*)>
c000fea8:	83 c4 10             	add    esp,0x10
c000feab:	eb 13                	jmp    c000fec0 <ACPI::open(int, int, void*)+0x8c>
c000fead:	8d 76 00             	lea    esi,[esi+0x0]
c000feb0:	83 ec 0c             	sub    esp,0xc
c000feb3:	68 8d 21 02 c0       	push   0xc002218d
c000feb8:	e8 0a 18 00 00       	call   c00116c7 <KePanic(char const*)>
c000febd:	83 c4 10             	add    esp,0x10
c000fec0:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c000fec8:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c000fed3:	83 ec 0c             	sub    esp,0xc
c000fed6:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000fedd:	e8 04 7c ff ff       	call   c0007ae6 <malloc>
c000fee2:	83 c4 10             	add    esp,0x10
c000fee5:	89 c3                	mov    ebx,eax
c000fee7:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c000feec:	83 ec 04             	sub    esp,0x4
c000feef:	50                   	push   eax
c000fef0:	68 a7 21 02 c0       	push   0xc00221a7
c000fef5:	53                   	push   ebx
c000fef6:	e8 81 bc ff ff       	call   c000bb7c <File::File(char const*, Process*)>
c000fefb:	83 c4 10             	add    esp,0x10
c000fefe:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c000ff05:	83 ec 08             	sub    esp,0x8
c000ff08:	6a 01                	push   0x1
c000ff0a:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000ff11:	e8 84 bc ff ff       	call   c000bb9a <File::open(FileOpenMode)>
c000ff16:	83 c4 10             	add    esp,0x10
c000ff19:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c000ff20:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c000ff28:	75 16                	jne    c000ff40 <ACPI::open(int, int, void*)+0x10c>
c000ff2a:	83 ec 0c             	sub    esp,0xc
c000ff2d:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000ff34:	e8 bf bc ff ff       	call   c000bbf8 <File::close()>
c000ff39:	83 c4 10             	add    esp,0x10
c000ff3c:	eb 0a                	jmp    c000ff48 <ACPI::open(int, int, void*)+0x114>
c000ff3e:	66 90                	xchg   ax,ax
c000ff40:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c000ff48:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c000ff50:	74 1e                	je     c000ff70 <ACPI::open(int, int, void*)+0x13c>
c000ff52:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c000ff59:	8b 00                	mov    eax,DWORD PTR [eax]
c000ff5b:	83 c0 08             	add    eax,0x8
c000ff5e:	8b 00                	mov    eax,DWORD PTR [eax]
c000ff60:	83 ec 0c             	sub    esp,0xc
c000ff63:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000ff6a:	ff d0                	call   eax
c000ff6c:	83 c4 10             	add    esp,0x10
c000ff6f:	90                   	nop
c000ff70:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c000ff77:	83 f0 01             	xor    eax,0x1
c000ff7a:	0f b6 c0             	movzx  eax,al
c000ff7d:	85 c0                	test   eax,eax
c000ff7f:	74 43                	je     c000ffc4 <ACPI::open(int, int, void*)+0x190>
c000ff81:	83 ec 0c             	sub    esp,0xc
c000ff84:	68 c5 21 02 c0       	push   0xc00221c5
c000ff89:	e8 39 10 00 00       	call   c0010fc7 <KeSetBootMessage(char const*)>
c000ff8e:	83 c4 10             	add    esp,0x10
c000ff91:	83 ec 04             	sub    esp,0x4
c000ff94:	6a 0c                	push   0xc
c000ff96:	68 e0 21 02 c0       	push   0xc00221e0
c000ff9b:	68 f1 21 02 c0       	push   0xc00221f1
c000ffa0:	e8 6b 3f 00 00       	call   c0013f10 <Reg::readIntWithDefault(char*, char*, int)>
c000ffa5:	83 c4 10             	add    esp,0x10
c000ffa8:	89 84 24 60 01 00 00 	mov    DWORD PTR [esp+0x160],eax
c000ffaf:	83 ec 0c             	sub    esp,0xc
c000ffb2:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c000ffb9:	e8 ae 98 ff ff       	call   c000986c <Virt::setupPageSwapping(int)>
c000ffbe:	83 c4 10             	add    esp,0x10
c000ffc1:	8d 76 00             	lea    esi,[esi+0x0]
c000ffc4:	83 ec 0c             	sub    esp,0xc
c000ffc7:	68 3f 0c 02 c0       	push   0xc0020c3f
c000ffcc:	e8 f6 0f 00 00       	call   c0010fc7 <KeSetBootMessage(char const*)>
c000ffd1:	83 c4 10             	add    esp,0x10
c000ffd4:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c000ffdb:	83 ec 08             	sub    esp,0x8
c000ffde:	6a 13                	push   0x13
c000ffe0:	50                   	push   eax
c000ffe1:	e8 28 cd ff ff       	call   c000cd0e <getDevicesOfType(DeviceType)>
c000ffe6:	83 c4 0c             	add    esp,0xc
c000ffe9:	8d 76 00             	lea    esi,[esi+0x0]
c000ffec:	83 ec 0c             	sub    esp,0xc
c000ffef:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000fff6:	50                   	push   eax
c000fff7:	e8 04 00 01 00       	call   c0020000 <LinkedList<Device>::isEmpty()>
c000fffc:	83 c4 10             	add    esp,0x10
c000ffff:	83 f0 01             	xor    eax,0x1
c0010002:	0f b6 c0             	movzx  eax,al
c0010005:	85 c0                	test   eax,eax
c0010007:	0f 84 47 01 00 00    	je     c0010154 <ACPI::open(int, int, void*)+0x320>
c001000d:	83 ec 0c             	sub    esp,0xc
c0010010:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0010017:	50                   	push   eax
c0010018:	e8 ff ff 00 00       	call   c002001c <LinkedList<Device>::getFirstElement()>
c001001d:	83 c4 10             	add    esp,0x10
c0010020:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c0010027:	83 ec 0c             	sub    esp,0xc
c001002a:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0010031:	50                   	push   eax
c0010032:	e8 ed ff 00 00       	call   c0020024 <LinkedList<Device>::removeFirst()>
c0010037:	83 c4 10             	add    esp,0x10
c001003a:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c0010041:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c0010048:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c001004f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010053:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c0010059:	ba 09 00 00 00       	mov    edx,0x9
c001005e:	fc                   	cld    
c001005f:	89 c7                	mov    edi,eax
c0010061:	89 de                	mov    esi,ebx
c0010063:	89 d1                	mov    ecx,edx
c0010065:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010067:	83 ec 08             	sub    esp,0x8
c001006a:	8d 44 24 38          	lea    eax,[esp+0x38]
c001006e:	50                   	push   eax
c001006f:	83 ec 24             	sub    esp,0x24
c0010072:	89 e0                	mov    eax,esp
c0010074:	89 c3                	mov    ebx,eax
c0010076:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001007a:	ba 09 00 00 00       	mov    edx,0x9
c001007f:	89 df                	mov    edi,ebx
c0010081:	89 c6                	mov    esi,eax
c0010083:	89 d1                	mov    ecx,edx
c0010085:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010087:	e8 e2 b6 00 00       	call   c001b76e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c001008c:	83 c4 30             	add    esp,0x30
c001008f:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c0010096:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c001009e:	0f 84 48 ff ff ff    	je     c000ffec <ACPI::open(int, int, void*)+0x1b8>
c00100a4:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c00100af:	83 ec 0c             	sub    esp,0xc
c00100b2:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00100b9:	e8 28 7a ff ff       	call   c0007ae6 <malloc>
c00100be:	83 c4 10             	add    esp,0x10
c00100c1:	89 c3                	mov    ebx,eax
c00100c3:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c00100c8:	83 ec 04             	sub    esp,0x4
c00100cb:	50                   	push   eax
c00100cc:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c00100d3:	53                   	push   ebx
c00100d4:	e8 a3 ba ff ff       	call   c000bb7c <File::File(char const*, Process*)>
c00100d9:	83 c4 10             	add    esp,0x10
c00100dc:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c00100e3:	83 ec 0c             	sub    esp,0xc
c00100e6:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c00100ed:	e8 6c bd ff ff       	call   c000be5e <File::exists()>
c00100f2:	83 c4 10             	add    esp,0x10
c00100f5:	0f b6 c0             	movzx  eax,al
c00100f8:	85 c0                	test   eax,eax
c00100fa:	74 28                	je     c0010124 <ACPI::open(int, int, void*)+0x2f0>
c00100fc:	83 ec 08             	sub    esp,0x8
c00100ff:	6a 01                	push   0x1
c0010101:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c0010108:	e8 40 56 00 00       	call   c001574d <Thr::loadDLL(char const*, bool)>
c001010d:	83 c4 10             	add    esp,0x10
c0010110:	83 ec 08             	sub    esp,0x8
c0010113:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c001011a:	50                   	push   eax
c001011b:	e8 5e 58 00 00       	call   c001597e <Thr::executeDLL(unsigned long, void*)>
c0010120:	83 c4 10             	add    esp,0x10
c0010123:	90                   	nop
c0010124:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c001012c:	0f 84 ba fe ff ff    	je     c000ffec <ACPI::open(int, int, void*)+0x1b8>
c0010132:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c0010139:	8b 00                	mov    eax,DWORD PTR [eax]
c001013b:	83 c0 08             	add    eax,0x8
c001013e:	8b 00                	mov    eax,DWORD PTR [eax]
c0010140:	83 ec 0c             	sub    esp,0xc
c0010143:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c001014a:	ff d0                	call   eax
c001014c:	83 c4 10             	add    esp,0x10
c001014f:	e9 98 fe ff ff       	jmp    c000ffec <ACPI::open(int, int, void*)+0x1b8>
c0010154:	83 ec 0c             	sub    esp,0xc
c0010157:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c001015e:	50                   	push   eax
c001015f:	e8 98 fe 00 00       	call   c001fffc <LinkedList<Device>::~LinkedList()>
c0010164:	83 c4 10             	add    esp,0x10
c0010167:	8b 1d b8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb8
c001016d:	83 ec 08             	sub    esp,0x8
c0010170:	6a 01                	push   0x1
c0010172:	68 f8 21 02 c0       	push   0xc00221f8
c0010177:	e8 d1 55 00 00       	call   c001574d <Thr::loadDLL(char const*, bool)>
c001017c:	83 c4 10             	add    esp,0x10
c001017f:	83 ec 08             	sub    esp,0x8
c0010182:	53                   	push   ebx
c0010183:	50                   	push   eax
c0010184:	e8 f5 57 00 00       	call   c001597e <Thr::executeDLL(unsigned long, void*)>
c0010189:	83 c4 10             	add    esp,0x10
c001018c:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0010191:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c0010197:	83 e0 04             	and    eax,0x4
c001019a:	0f b6 c0             	movzx  eax,al
c001019d:	85 c0                	test   eax,eax
c001019f:	0f 84 1b 01 00 00    	je     c00102c0 <ACPI::open(int, int, void*)+0x48c>
c00101a5:	83 ec 0c             	sub    esp,0xc
c00101a8:	68 15 22 02 c0       	push   0xc0022215
c00101ad:	e8 15 0e 00 00       	call   c0010fc7 <KeSetBootMessage(char const*)>
c00101b2:	83 c4 10             	add    esp,0x10
c00101b5:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c00101c0:	83 ec 0c             	sub    esp,0xc
c00101c3:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c00101ca:	e8 17 79 ff ff       	call   c0007ae6 <malloc>
c00101cf:	83 c4 10             	add    esp,0x10
c00101d2:	89 c3                	mov    ebx,eax
c00101d4:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c00101d9:	83 ec 04             	sub    esp,0x4
c00101dc:	50                   	push   eax
c00101dd:	68 32 22 02 c0       	push   0xc0022232
c00101e2:	53                   	push   ebx
c00101e3:	e8 94 b9 ff ff       	call   c000bb7c <File::File(char const*, Process*)>
c00101e8:	83 c4 10             	add    esp,0x10
c00101eb:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c00101f2:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c00101fa:	74 20                	je     c001021c <ACPI::open(int, int, void*)+0x3e8>
c00101fc:	83 ec 0c             	sub    esp,0xc
c00101ff:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c0010206:	e8 53 bc ff ff       	call   c000be5e <File::exists()>
c001020b:	83 c4 10             	add    esp,0x10
c001020e:	0f b6 c0             	movzx  eax,al
c0010211:	85 c0                	test   eax,eax
c0010213:	74 07                	je     c001021c <ACPI::open(int, int, void*)+0x3e8>
c0010215:	b0 01                	mov    al,0x1
c0010217:	eb 07                	jmp    c0010220 <ACPI::open(int, int, void*)+0x3ec>
c0010219:	8d 76 00             	lea    esi,[esi+0x0]
c001021c:	b0 00                	mov    al,0x0
c001021e:	66 90                	xchg   ax,ax
c0010220:	0f b6 c0             	movzx  eax,al
c0010223:	85 c0                	test   eax,eax
c0010225:	74 25                	je     c001024c <ACPI::open(int, int, void*)+0x418>
c0010227:	83 ec 08             	sub    esp,0x8
c001022a:	6a 01                	push   0x1
c001022c:	68 32 22 02 c0       	push   0xc0022232
c0010231:	e8 17 55 00 00       	call   c001574d <Thr::loadDLL(char const*, bool)>
c0010236:	83 c4 10             	add    esp,0x10
c0010239:	83 ec 08             	sub    esp,0x8
c001023c:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c0010243:	50                   	push   eax
c0010244:	e8 35 57 00 00       	call   c001597e <Thr::executeDLL(unsigned long, void*)>
c0010249:	83 c4 10             	add    esp,0x10
c001024c:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c0010254:	74 2a                	je     c0010280 <ACPI::open(int, int, void*)+0x44c>
c0010256:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c001025e:	74 20                	je     c0010280 <ACPI::open(int, int, void*)+0x44c>
c0010260:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c0010267:	8b 00                	mov    eax,DWORD PTR [eax]
c0010269:	83 c0 08             	add    eax,0x8
c001026c:	8b 00                	mov    eax,DWORD PTR [eax]
c001026e:	83 ec 0c             	sub    esp,0xc
c0010271:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c0010278:	ff d0                	call   eax
c001027a:	83 c4 10             	add    esp,0x10
c001027d:	8d 76 00             	lea    esi,[esi+0x0]
c0010280:	a1 28 bb 02 c0       	mov    eax,ds:0xc002bb28
c0010285:	83 ec 08             	sub    esp,0x8
c0010288:	68 4f 22 02 c0       	push   0xc002224f
c001028d:	50                   	push   eax
c001028e:	e8 c1 f1 ff ff       	call   c000f454 <findDataTable(unsigned char*, char*)>
c0010293:	83 c4 10             	add    esp,0x10
c0010296:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c001029d:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c00102a5:	74 19                	je     c00102c0 <ACPI::open(int, int, void*)+0x48c>
c00102a7:	83 ec 08             	sub    esp,0x8
c00102aa:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c00102b1:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c00102b8:	e8 13 fb ff ff       	call   c000fdd0 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c00102bd:	83 c4 10             	add    esp,0x10
c00102c0:	b8 00 00 00 00       	mov    eax,0x0
c00102c5:	81 c4 70 01 00 00    	add    esp,0x170
c00102cb:	5b                   	pop    ebx
c00102cc:	5e                   	pop    esi
c00102cd:	5f                   	pop    edi
c00102ce:	c3                   	ret    
c00102cf:	90                   	nop

c00102d0 <CPU::close(int, int, void*)>:
c00102d0:	31 c0                	xor    eax,eax
c00102d2:	c3                   	ret    
c00102d3:	90                   	nop

c00102d4 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c00102d4:	60                   	pusha  
c00102d5:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00102d9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00102dd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00102e1:	9c                   	pushf  
c00102e2:	fa                   	cli    
c00102e3:	0f 09                	wbinvd 
c00102e5:	0f 30                	wrmsr  
c00102e7:	9d                   	popf   
c00102e8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00102ec:	89 02                	mov    DWORD PTR [edx],eax
c00102ee:	61                   	popa   
c00102ef:	c3                   	ret    

c00102f0 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c00102f0:	60                   	pusha  
c00102f1:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00102f5:	9c                   	pushf  
c00102f6:	fa                   	cli    
c00102f7:	0f 09                	wbinvd 
c00102f9:	31 c0                	xor    eax,eax
c00102fb:	31 d2                	xor    edx,edx
c00102fd:	0f 32                	rdmsr  
c00102ff:	9d                   	popf   
c0010300:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010304:	89 02                	mov    DWORD PTR [edx],eax
c0010306:	61                   	popa   
c0010307:	c3                   	ret    

c0010308 <CPU::AMD_K6_writeback(int, int, int)>:
c0010308:	56                   	push   esi
c0010309:	53                   	push   ebx
c001030a:	83 ec 10             	sub    esp,0x10
c001030d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010311:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0010316:	75 5d                	jne    c0010375 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0010318:	83 f8 08             	cmp    eax,0x8
c001031b:	75 09                	jne    c0010326 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c001031d:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0010322:	7e 13                	jle    c0010337 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0010324:	eb 30                	jmp    c0010356 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0010326:	83 f8 06             	cmp    eax,0x6
c0010329:	7c 4a                	jl     c0010375 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001032b:	83 f8 07             	cmp    eax,0x7
c001032e:	7e 07                	jle    c0010337 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0010330:	83 f8 09             	cmp    eax,0x9
c0010333:	74 21                	je     c0010356 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0010335:	eb 3e                	jmp    c0010375 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0010337:	89 e6                	mov    esi,esp
c0010339:	8b 1d dc 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026edc
c001033f:	56                   	push   esi
c0010340:	c1 eb 15             	shr    ebx,0x15
c0010343:	68 82 00 00 c0       	push   0xc0000082
c0010348:	83 e3 7e             	and    ebx,0x7e
c001034b:	e8 a0 ff ff ff       	call   c00102f0 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0010350:	56                   	push   esi
c0010351:	6a 00                	push   0x0
c0010353:	53                   	push   ebx
c0010354:	eb 12                	jmp    c0010368 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c0010356:	89 e3                	mov    ebx,esp
c0010358:	53                   	push   ebx
c0010359:	68 82 00 00 c0       	push   0xc0000082
c001035e:	e8 8d ff ff ff       	call   c00102f0 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0010363:	53                   	push   ebx
c0010364:	6a 00                	push   0x0
c0010366:	6a 00                	push   0x0
c0010368:	68 82 00 00 c0       	push   0xc0000082
c001036d:	e8 62 ff ff ff       	call   c00102d4 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c0010372:	83 c4 18             	add    esp,0x18
c0010375:	83 c4 10             	add    esp,0x10
c0010378:	5b                   	pop    ebx
c0010379:	5e                   	pop    esi
c001037a:	c3                   	ret    
c001037b:	90                   	nop

c001037c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c001037c:	55                   	push   ebp
c001037d:	57                   	push   edi
c001037e:	56                   	push   esi
c001037f:	53                   	push   ebx
c0010380:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010384:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0010388:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001038c:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0010390:	39 05 b8 38 02 c0    	cmp    DWORD PTR ds:0xc00238b8,eax
c0010396:	75 23                	jne    c00103bb <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0010398:	a1 8c bd 02 c0       	mov    eax,ds:0xc002bd8c
c001039d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00103a1:	89 06                	mov    DWORD PTR [esi],eax
c00103a3:	a1 88 bd 02 c0       	mov    eax,ds:0xc002bd88
c00103a8:	89 07                	mov    DWORD PTR [edi],eax
c00103aa:	a1 84 bd 02 c0       	mov    eax,ds:0xc002bd84
c00103af:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00103b2:	a1 80 bd 02 c0       	mov    eax,ds:0xc002bd80
c00103b7:	89 02                	mov    DWORD PTR [edx],eax
c00103b9:	eb 3f                	jmp    c00103fa <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c00103bb:	31 c9                	xor    ecx,ecx
c00103bd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00103c1:	0f a2                	cpuid  
c00103c3:	89 06                	mov    DWORD PTR [esi],eax
c00103c5:	89 1f                	mov    DWORD PTR [edi],ebx
c00103c7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00103cb:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c00103ce:	89 10                	mov    DWORD PTR [eax],edx
c00103d0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00103d4:	a3 b8 38 02 c0       	mov    ds:0xc00238b8,eax
c00103d9:	8b 06                	mov    eax,DWORD PTR [esi]
c00103db:	a3 8c bd 02 c0       	mov    ds:0xc002bd8c,eax
c00103e0:	8b 07                	mov    eax,DWORD PTR [edi]
c00103e2:	a3 88 bd 02 c0       	mov    ds:0xc002bd88,eax
c00103e7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00103ea:	a3 84 bd 02 c0       	mov    ds:0xc002bd84,eax
c00103ef:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00103f3:	8b 00                	mov    eax,DWORD PTR [eax]
c00103f5:	a3 80 bd 02 c0       	mov    ds:0xc002bd80,eax
c00103fa:	5b                   	pop    ebx
c00103fb:	5e                   	pop    esi
c00103fc:	5f                   	pop    edi
c00103fd:	5d                   	pop    ebp
c00103fe:	c3                   	ret    
c00103ff:	90                   	nop

c0010400 <CPU::cpuidCheckEDX(unsigned int)>:
c0010400:	83 ec 10             	sub    esp,0x10
c0010403:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010407:	50                   	push   eax
c0010408:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001040c:	50                   	push   eax
c001040d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010411:	50                   	push   eax
c0010412:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010416:	50                   	push   eax
c0010417:	6a 01                	push   0x1
c0010419:	e8 5e ff ff ff       	call   c001037c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001041e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010422:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0010426:	0f 95 c0             	setne  al
c0010429:	83 c4 24             	add    esp,0x24
c001042c:	c3                   	ret    
c001042d:	90                   	nop

c001042e <CPU::cpuidCheckECX(unsigned int)>:
c001042e:	83 ec 10             	sub    esp,0x10
c0010431:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010435:	50                   	push   eax
c0010436:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001043a:	50                   	push   eax
c001043b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001043f:	50                   	push   eax
c0010440:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010444:	50                   	push   eax
c0010445:	6a 01                	push   0x1
c0010447:	e8 30 ff ff ff       	call   c001037c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001044c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010450:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0010454:	0f 95 c0             	setne  al
c0010457:	83 c4 24             	add    esp,0x24
c001045a:	c3                   	ret    
c001045b:	90                   	nop

c001045c <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c001045c:	83 ec 10             	sub    esp,0x10
c001045f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010463:	50                   	push   eax
c0010464:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010468:	50                   	push   eax
c0010469:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001046d:	50                   	push   eax
c001046e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010472:	50                   	push   eax
c0010473:	6a 07                	push   0x7
c0010475:	e8 02 ff ff ff       	call   c001037c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001047a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001047e:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0010482:	0f 95 c0             	setne  al
c0010485:	83 c4 24             	add    esp,0x24
c0010488:	c3                   	ret    
c0010489:	90                   	nop

c001048a <CPU::cpuidCheckExtendedECX(unsigned int)>:
c001048a:	83 ec 10             	sub    esp,0x10
c001048d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010491:	50                   	push   eax
c0010492:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010496:	50                   	push   eax
c0010497:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001049b:	50                   	push   eax
c001049c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00104a0:	50                   	push   eax
c00104a1:	6a 07                	push   0x7
c00104a3:	e8 d4 fe ff ff       	call   c001037c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00104a8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00104ac:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c00104b0:	0f 95 c0             	setne  al
c00104b3:	83 c4 24             	add    esp,0x24
c00104b6:	c3                   	ret    
c00104b7:	90                   	nop

c00104b8 <CPU::CPU()>:
c00104b8:	83 ec 0c             	sub    esp,0xc
c00104bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104bf:	83 ec 08             	sub    esp,0x8
c00104c2:	68 0d 24 02 c0       	push   0xc002240d
c00104c7:	50                   	push   eax
c00104c8:	e8 c1 c6 ff ff       	call   c000cb8e <Device::Device(char const*)>
c00104cd:	83 c4 10             	add    esp,0x10
c00104d0:	ba a0 24 02 c0       	mov    edx,0xc00224a0
c00104d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104d9:	89 10                	mov    DWORD PTR [eax],edx
c00104db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104df:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c00104e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104ed:	05 78 01 00 00       	add    eax,0x178
c00104f2:	83 ec 0c             	sub    esp,0xc
c00104f5:	50                   	push   eax
c00104f6:	e8 93 6e ff ff       	call   c000738e <GDT::GDT()>
c00104fb:	83 c4 10             	add    esp,0x10
c00104fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010502:	05 7c 09 00 00       	add    eax,0x97c
c0010507:	83 ec 0c             	sub    esp,0xc
c001050a:	50                   	push   eax
c001050b:	e8 cc 70 ff ff       	call   c00075dc <IDT::IDT()>
c0010510:	83 c4 10             	add    esp,0x10
c0010513:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010517:	05 7c 11 00 00       	add    eax,0x117c
c001051c:	83 ec 0c             	sub    esp,0xc
c001051f:	50                   	push   eax
c0010520:	e8 4f 8a ff ff       	call   c0008f74 <TSS::TSS()>
c0010525:	83 c4 10             	add    esp,0x10
c0010528:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001052c:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c0010533:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010537:	c7 80 10 01 00 00 11 00 00 00 	mov    DWORD PTR [eax+0x110],0x11
c0010541:	90                   	nop
c0010542:	83 c4 0c             	add    esp,0xc
c0010545:	c3                   	ret    

c0010546 <CPU::displayFeatures()>:
c0010546:	c3                   	ret    
c0010547:	90                   	nop

c0010548 <CPU::detectFeatures()>:
c0010548:	55                   	push   ebp
c0010549:	57                   	push   edi
c001054a:	56                   	push   esi
c001054b:	53                   	push   ebx
c001054c:	83 ec 30             	sub    esp,0x30
c001054f:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0010553:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c001055d:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c0010564:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c001056a:	6a 0d                	push   0xd
c001056c:	6a 00                	push   0x0
c001056e:	55                   	push   ebp
c001056f:	e8 7c ff fe ff       	call   c00004f0 <memset>
c0010574:	83 c4 10             	add    esp,0x10
c0010577:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001057c:	f6 80 6c 01 00 00 02 	test   BYTE PTR [eax+0x16c],0x2
c0010583:	0f 84 db 05 00 00    	je     c0010b64 <CPU::detectFeatures()+0x61c>
c0010589:	83 ec 0c             	sub    esp,0xc
c001058c:	89 ef                	mov    edi,ebp
c001058e:	6a 10                	push   0x10
c0010590:	e8 6b fe ff ff       	call   c0010400 <CPU::cpuidCheckEDX(unsigned int)>
c0010595:	83 e0 01             	and    eax,0x1
c0010598:	8d 14 00             	lea    edx,[eax+eax*1]
c001059b:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c00105a1:	83 e0 fd             	and    eax,0xfffffffd
c00105a4:	09 d0                	or     eax,edx
c00105a6:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c00105ac:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c00105b3:	e8 48 fe ff ff       	call   c0010400 <CPU::cpuidCheckEDX(unsigned int)>
c00105b8:	83 e0 01             	and    eax,0x1
c00105bb:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00105c2:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c00105c8:	83 e0 fb             	and    eax,0xfffffffb
c00105cb:	09 d0                	or     eax,edx
c00105cd:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c00105d3:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c00105da:	e8 21 fe ff ff       	call   c0010400 <CPU::cpuidCheckEDX(unsigned int)>
c00105df:	83 e0 01             	and    eax,0x1
c00105e2:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c00105e9:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c00105ef:	83 e0 f7             	and    eax,0xfffffff7
c00105f2:	09 d0                	or     eax,edx
c00105f4:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c00105fa:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0010601:	e8 fa fd ff ff       	call   c0010400 <CPU::cpuidCheckEDX(unsigned int)>
c0010606:	83 e0 01             	and    eax,0x1
c0010609:	c1 e0 04             	shl    eax,0x4
c001060c:	89 c2                	mov    edx,eax
c001060e:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0010614:	83 e0 ef             	and    eax,0xffffffef
c0010617:	09 d0                	or     eax,edx
c0010619:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001061f:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0010626:	e8 d5 fd ff ff       	call   c0010400 <CPU::cpuidCheckEDX(unsigned int)>
c001062b:	83 e0 01             	and    eax,0x1
c001062e:	c1 e0 05             	shl    eax,0x5
c0010631:	89 c2                	mov    edx,eax
c0010633:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0010639:	83 e0 df             	and    eax,0xffffffdf
c001063c:	09 d0                	or     eax,edx
c001063e:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0010644:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c001064b:	e8 b0 fd ff ff       	call   c0010400 <CPU::cpuidCheckEDX(unsigned int)>
c0010650:	83 e0 01             	and    eax,0x1
c0010653:	8d 14 00             	lea    edx,[eax+eax*1]
c0010656:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c001065c:	83 e0 fd             	and    eax,0xfffffffd
c001065f:	09 d0                	or     eax,edx
c0010661:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c0010667:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c001066e:	e8 8d fd ff ff       	call   c0010400 <CPU::cpuidCheckEDX(unsigned int)>
c0010673:	83 e0 01             	and    eax,0x1
c0010676:	c1 e0 06             	shl    eax,0x6
c0010679:	89 c2                	mov    edx,eax
c001067b:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c0010681:	83 e0 bf             	and    eax,0xffffffbf
c0010684:	09 d0                	or     eax,edx
c0010686:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c001068c:	58                   	pop    eax
c001068d:	8d 44 24 28          	lea    eax,[esp+0x28]
c0010691:	50                   	push   eax
c0010692:	8d 44 24 28          	lea    eax,[esp+0x28]
c0010696:	50                   	push   eax
c0010697:	8d 74 24 28          	lea    esi,[esp+0x28]
c001069b:	56                   	push   esi
c001069c:	8d 44 24 28          	lea    eax,[esp+0x28]
c00106a0:	50                   	push   eax
c00106a1:	6a 00                	push   0x0
c00106a3:	e8 d4 fc ff ff       	call   c001037c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00106a8:	b8 04 00 00 00       	mov    eax,0x4
c00106ad:	89 c1                	mov    ecx,eax
c00106af:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00106b1:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c00106b7:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c00106bb:	89 c1                	mov    ecx,eax
c00106bd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00106bf:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c00106c5:	8d 74 24 38          	lea    esi,[esp+0x38]
c00106c9:	89 c1                	mov    ecx,eax
c00106cb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00106cd:	83 c4 18             	add    esp,0x18
c00106d0:	68 1c 23 02 c0       	push   0xc002231c
c00106d5:	55                   	push   ebp
c00106d6:	e8 75 00 ff ff       	call   c0000750 <strcmp>
c00106db:	83 c4 10             	add    esp,0x10
c00106de:	85 c0                	test   eax,eax
c00106e0:	75 0f                	jne    c00106f1 <CPU::detectFeatures()+0x1a9>
c00106e2:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c00106ec:	e9 22 02 00 00       	jmp    c0010913 <CPU::detectFeatures()+0x3cb>
c00106f1:	50                   	push   eax
c00106f2:	50                   	push   eax
c00106f3:	68 29 23 02 c0       	push   0xc0022329
c00106f8:	55                   	push   ebp
c00106f9:	e8 52 00 ff ff       	call   c0000750 <strcmp>
c00106fe:	83 c4 10             	add    esp,0x10
c0010701:	85 c0                	test   eax,eax
c0010703:	74 dd                	je     c00106e2 <CPU::detectFeatures()+0x19a>
c0010705:	50                   	push   eax
c0010706:	50                   	push   eax
c0010707:	68 36 23 02 c0       	push   0xc0022336
c001070c:	55                   	push   ebp
c001070d:	e8 3e 00 ff ff       	call   c0000750 <strcmp>
c0010712:	83 c4 10             	add    esp,0x10
c0010715:	85 c0                	test   eax,eax
c0010717:	74 2a                	je     c0010743 <CPU::detectFeatures()+0x1fb>
c0010719:	50                   	push   eax
c001071a:	50                   	push   eax
c001071b:	68 43 23 02 c0       	push   0xc0022343
c0010720:	55                   	push   ebp
c0010721:	e8 2a 00 ff ff       	call   c0000750 <strcmp>
c0010726:	83 c4 10             	add    esp,0x10
c0010729:	85 c0                	test   eax,eax
c001072b:	74 16                	je     c0010743 <CPU::detectFeatures()+0x1fb>
c001072d:	50                   	push   eax
c001072e:	50                   	push   eax
c001072f:	68 50 23 02 c0       	push   0xc0022350
c0010734:	55                   	push   ebp
c0010735:	e8 16 00 ff ff       	call   c0000750 <strcmp>
c001073a:	83 c4 10             	add    esp,0x10
c001073d:	85 c0                	test   eax,eax
c001073f:	74 48                	je     c0010789 <CPU::detectFeatures()+0x241>
c0010741:	eb 0f                	jmp    c0010752 <CPU::detectFeatures()+0x20a>
c0010743:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c001074d:	e9 c1 01 00 00       	jmp    c0010913 <CPU::detectFeatures()+0x3cb>
c0010752:	50                   	push   eax
c0010753:	50                   	push   eax
c0010754:	68 5d 23 02 c0       	push   0xc002235d
c0010759:	55                   	push   ebp
c001075a:	e8 f1 ff fe ff       	call   c0000750 <strcmp>
c001075f:	83 c4 10             	add    esp,0x10
c0010762:	85 c0                	test   eax,eax
c0010764:	74 23                	je     c0010789 <CPU::detectFeatures()+0x241>
c0010766:	57                   	push   edi
c0010767:	57                   	push   edi
c0010768:	68 6a 23 02 c0       	push   0xc002236a
c001076d:	55                   	push   ebp
c001076e:	e8 dd ff fe ff       	call   c0000750 <strcmp>
c0010773:	83 c4 10             	add    esp,0x10
c0010776:	85 c0                	test   eax,eax
c0010778:	75 1e                	jne    c0010798 <CPU::detectFeatures()+0x250>
c001077a:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0010784:	e9 8a 01 00 00       	jmp    c0010913 <CPU::detectFeatures()+0x3cb>
c0010789:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0010793:	e9 7b 01 00 00       	jmp    c0010913 <CPU::detectFeatures()+0x3cb>
c0010798:	56                   	push   esi
c0010799:	56                   	push   esi
c001079a:	68 77 23 02 c0       	push   0xc0022377
c001079f:	55                   	push   ebp
c00107a0:	e8 ab ff fe ff       	call   c0000750 <strcmp>
c00107a5:	83 c4 10             	add    esp,0x10
c00107a8:	85 c0                	test   eax,eax
c00107aa:	75 0f                	jne    c00107bb <CPU::detectFeatures()+0x273>
c00107ac:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c00107b6:	e9 58 01 00 00       	jmp    c0010913 <CPU::detectFeatures()+0x3cb>
c00107bb:	51                   	push   ecx
c00107bc:	51                   	push   ecx
c00107bd:	68 36 23 02 c0       	push   0xc0022336
c00107c2:	55                   	push   ebp
c00107c3:	e8 88 ff fe ff       	call   c0000750 <strcmp>
c00107c8:	83 c4 10             	add    esp,0x10
c00107cb:	85 c0                	test   eax,eax
c00107cd:	75 0f                	jne    c00107de <CPU::detectFeatures()+0x296>
c00107cf:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c00107d9:	e9 35 01 00 00       	jmp    c0010913 <CPU::detectFeatures()+0x3cb>
c00107de:	52                   	push   edx
c00107df:	52                   	push   edx
c00107e0:	68 84 23 02 c0       	push   0xc0022384
c00107e5:	55                   	push   ebp
c00107e6:	e8 65 ff fe ff       	call   c0000750 <strcmp>
c00107eb:	83 c4 10             	add    esp,0x10
c00107ee:	85 c0                	test   eax,eax
c00107f0:	75 0f                	jne    c0010801 <CPU::detectFeatures()+0x2b9>
c00107f2:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c00107fc:	e9 12 01 00 00       	jmp    c0010913 <CPU::detectFeatures()+0x3cb>
c0010801:	50                   	push   eax
c0010802:	50                   	push   eax
c0010803:	68 91 23 02 c0       	push   0xc0022391
c0010808:	55                   	push   ebp
c0010809:	e8 42 ff fe ff       	call   c0000750 <strcmp>
c001080e:	83 c4 10             	add    esp,0x10
c0010811:	85 c0                	test   eax,eax
c0010813:	75 0f                	jne    c0010824 <CPU::detectFeatures()+0x2dc>
c0010815:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c001081f:	e9 ef 00 00 00       	jmp    c0010913 <CPU::detectFeatures()+0x3cb>
c0010824:	50                   	push   eax
c0010825:	50                   	push   eax
c0010826:	68 9e 23 02 c0       	push   0xc002239e
c001082b:	55                   	push   ebp
c001082c:	e8 1f ff fe ff       	call   c0000750 <strcmp>
c0010831:	83 c4 10             	add    esp,0x10
c0010834:	85 c0                	test   eax,eax
c0010836:	75 0f                	jne    c0010847 <CPU::detectFeatures()+0x2ff>
c0010838:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0010842:	e9 cc 00 00 00       	jmp    c0010913 <CPU::detectFeatures()+0x3cb>
c0010847:	50                   	push   eax
c0010848:	50                   	push   eax
c0010849:	68 ab 23 02 c0       	push   0xc00223ab
c001084e:	55                   	push   ebp
c001084f:	e8 fc fe fe ff       	call   c0000750 <strcmp>
c0010854:	83 c4 10             	add    esp,0x10
c0010857:	85 c0                	test   eax,eax
c0010859:	75 0f                	jne    c001086a <CPU::detectFeatures()+0x322>
c001085b:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0010865:	e9 a9 00 00 00       	jmp    c0010913 <CPU::detectFeatures()+0x3cb>
c001086a:	50                   	push   eax
c001086b:	50                   	push   eax
c001086c:	68 b8 23 02 c0       	push   0xc00223b8
c0010871:	55                   	push   ebp
c0010872:	e8 d9 fe fe ff       	call   c0000750 <strcmp>
c0010877:	83 c4 10             	add    esp,0x10
c001087a:	85 c0                	test   eax,eax
c001087c:	75 0f                	jne    c001088d <CPU::detectFeatures()+0x345>
c001087e:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0010888:	e9 86 00 00 00       	jmp    c0010913 <CPU::detectFeatures()+0x3cb>
c001088d:	50                   	push   eax
c001088e:	50                   	push   eax
c001088f:	68 c5 23 02 c0       	push   0xc00223c5
c0010894:	55                   	push   ebp
c0010895:	e8 b6 fe fe ff       	call   c0000750 <strcmp>
c001089a:	83 c4 10             	add    esp,0x10
c001089d:	85 c0                	test   eax,eax
c001089f:	75 0c                	jne    c00108ad <CPU::detectFeatures()+0x365>
c00108a1:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c00108ab:	eb 66                	jmp    c0010913 <CPU::detectFeatures()+0x3cb>
c00108ad:	50                   	push   eax
c00108ae:	50                   	push   eax
c00108af:	68 d2 23 02 c0       	push   0xc00223d2
c00108b4:	55                   	push   ebp
c00108b5:	e8 96 fe fe ff       	call   c0000750 <strcmp>
c00108ba:	83 c4 10             	add    esp,0x10
c00108bd:	85 c0                	test   eax,eax
c00108bf:	75 0c                	jne    c00108cd <CPU::detectFeatures()+0x385>
c00108c1:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c00108cb:	eb 46                	jmp    c0010913 <CPU::detectFeatures()+0x3cb>
c00108cd:	57                   	push   edi
c00108ce:	57                   	push   edi
c00108cf:	68 df 23 02 c0       	push   0xc00223df
c00108d4:	55                   	push   ebp
c00108d5:	e8 76 fe fe ff       	call   c0000750 <strcmp>
c00108da:	83 c4 10             	add    esp,0x10
c00108dd:	85 c0                	test   eax,eax
c00108df:	74 e0                	je     c00108c1 <CPU::detectFeatures()+0x379>
c00108e1:	56                   	push   esi
c00108e2:	56                   	push   esi
c00108e3:	68 ec 23 02 c0       	push   0xc00223ec
c00108e8:	55                   	push   ebp
c00108e9:	e8 62 fe fe ff       	call   c0000750 <strcmp>
c00108ee:	83 c4 10             	add    esp,0x10
c00108f1:	85 c0                	test   eax,eax
c00108f3:	74 cc                	je     c00108c1 <CPU::detectFeatures()+0x379>
c00108f5:	51                   	push   ecx
c00108f6:	51                   	push   ecx
c00108f7:	68 f9 23 02 c0       	push   0xc00223f9
c00108fc:	55                   	push   ebp
c00108fd:	e8 4e fe fe ff       	call   c0000750 <strcmp>
c0010902:	83 c4 10             	add    esp,0x10
c0010905:	85 c0                	test   eax,eax
c0010907:	74 b8                	je     c00108c1 <CPU::detectFeatures()+0x379>
c0010909:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0010913:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c0010918:	0f 86 be 00 00 00    	jbe    c00109dc <CPU::detectFeatures()+0x494>
c001091e:	83 ec 0c             	sub    esp,0xc
c0010921:	68 80 00 00 00       	push   0x80
c0010926:	e8 31 fb ff ff       	call   c001045c <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001092b:	83 e0 01             	and    eax,0x1
c001092e:	c1 e0 06             	shl    eax,0x6
c0010931:	89 c2                	mov    edx,eax
c0010933:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0010939:	83 e0 bf             	and    eax,0xffffffbf
c001093c:	09 d0                	or     eax,edx
c001093e:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0010944:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c001094b:	e8 0c fb ff ff       	call   c001045c <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0010950:	83 e0 01             	and    eax,0x1
c0010953:	c1 e0 04             	shl    eax,0x4
c0010956:	89 c2                	mov    edx,eax
c0010958:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c001095e:	83 e0 ef             	and    eax,0xffffffef
c0010961:	09 d0                	or     eax,edx
c0010963:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c0010969:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c0010970:	e8 e7 fa ff ff       	call   c001045c <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0010975:	89 c2                	mov    edx,eax
c0010977:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001097d:	c1 e2 07             	shl    edx,0x7
c0010980:	83 e0 7f             	and    eax,0x7f
c0010983:	09 d0                	or     eax,edx
c0010985:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001098b:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0010992:	e8 f3 fa ff ff       	call   c001048a <CPU::cpuidCheckExtendedECX(unsigned int)>
c0010997:	83 e0 01             	and    eax,0x1
c001099a:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c00109a1:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c00109a7:	83 e0 f7             	and    eax,0xfffffff7
c00109aa:	09 d0                	or     eax,edx
c00109ac:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c00109b2:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c00109b9:	e8 cc fa ff ff       	call   c001048a <CPU::cpuidCheckExtendedECX(unsigned int)>
c00109be:	83 c4 10             	add    esp,0x10
c00109c1:	83 e0 01             	and    eax,0x1
c00109c4:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00109cb:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c00109d1:	83 e0 fb             	and    eax,0xfffffffb
c00109d4:	09 d0                	or     eax,edx
c00109d6:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c00109dc:	83 ec 0c             	sub    esp,0xc
c00109df:	8d 44 24 28          	lea    eax,[esp+0x28]
c00109e3:	50                   	push   eax
c00109e4:	8d 44 24 28          	lea    eax,[esp+0x28]
c00109e8:	50                   	push   eax
c00109e9:	8d 7c 24 28          	lea    edi,[esp+0x28]
c00109ed:	57                   	push   edi
c00109ee:	8d 74 24 28          	lea    esi,[esp+0x28]
c00109f2:	56                   	push   esi
c00109f3:	6a 01                	push   0x1
c00109f5:	e8 82 f9 ff ff       	call   c001037c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00109fa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00109fe:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c0010a04:	89 c1                	mov    ecx,eax
c0010a06:	83 e2 f0             	and    edx,0xfffffff0
c0010a09:	83 e1 0f             	and    ecx,0xf
c0010a0c:	09 ca                	or     edx,ecx
c0010a0e:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c0010a14:	89 c2                	mov    edx,eax
c0010a16:	c1 ea 04             	shr    edx,0x4
c0010a19:	83 e2 0f             	and    edx,0xf
c0010a1c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0010a20:	89 d1                	mov    ecx,edx
c0010a22:	83 c4 20             	add    esp,0x20
c0010a25:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0010a2b:	c1 e1 06             	shl    ecx,0x6
c0010a2e:	81 e2 3f c0 ff ff    	and    edx,0xffffc03f
c0010a34:	09 ca                	or     edx,ecx
c0010a36:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c0010a3d:	89 c2                	mov    edx,eax
c0010a3f:	8a 8b 5d 01 00 00    	mov    cl,BYTE PTR [ebx+0x15d]
c0010a45:	c1 ea 08             	shr    edx,0x8
c0010a48:	83 e1 3f             	and    ecx,0x3f
c0010a4b:	83 e2 0f             	and    edx,0xf
c0010a4e:	89 d5                	mov    ebp,edx
c0010a50:	83 e5 03             	and    ebp,0x3
c0010a53:	c1 e5 06             	shl    ebp,0x6
c0010a56:	09 e9                	or     ecx,ebp
c0010a58:	89 d5                	mov    ebp,edx
c0010a5a:	88 8b 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],cl
c0010a60:	c1 ed 02             	shr    ebp,0x2
c0010a63:	8a 8b 5e 01 00 00    	mov    cl,BYTE PTR [ebx+0x15e]
c0010a69:	83 e1 c0             	and    ecx,0xffffffc0
c0010a6c:	09 e9                	or     ecx,ebp
c0010a6e:	89 c5                	mov    ebp,eax
c0010a70:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c0010a76:	c1 ed 08             	shr    ebp,0x8
c0010a79:	8a 8b 5c 01 00 00    	mov    cl,BYTE PTR [ebx+0x15c]
c0010a7f:	83 e5 30             	and    ebp,0x30
c0010a82:	83 e1 cf             	and    ecx,0xffffffcf
c0010a85:	09 e9                	or     ecx,ebp
c0010a87:	83 fa 06             	cmp    edx,0x6
c0010a8a:	88 8b 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],cl
c0010a90:	74 05                	je     c0010a97 <CPU::detectFeatures()+0x54f>
c0010a92:	83 fa 0f             	cmp    edx,0xf
c0010a95:	75 64                	jne    c0010afb <CPU::detectFeatures()+0x5b3>
c0010a97:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0010a9d:	89 c1                	mov    ecx,eax
c0010a9f:	81 e5 3f c0 ff ff    	and    ebp,0xffffc03f
c0010aa5:	c1 e9 10             	shr    ecx,0x10
c0010aa8:	c1 e1 04             	shl    ecx,0x4
c0010aab:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c0010aaf:	0f b6 c9             	movzx  ecx,cl
c0010ab2:	c1 e1 06             	shl    ecx,0x6
c0010ab5:	09 e9                	or     ecx,ebp
c0010ab7:	83 fa 0f             	cmp    edx,0xf
c0010aba:	66 89 8b 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],cx
c0010ac1:	75 38                	jne    c0010afb <CPU::detectFeatures()+0x5b3>
c0010ac3:	c1 e8 14             	shr    eax,0x14
c0010ac6:	83 c0 0f             	add    eax,0xf
c0010ac9:	0f b6 c0             	movzx  eax,al
c0010acc:	89 c2                	mov    edx,eax
c0010ace:	c1 e8 02             	shr    eax,0x2
c0010ad1:	83 e2 03             	and    edx,0x3
c0010ad4:	89 d1                	mov    ecx,edx
c0010ad6:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c0010adc:	c1 e1 06             	shl    ecx,0x6
c0010adf:	83 e2 3f             	and    edx,0x3f
c0010ae2:	09 ca                	or     edx,ecx
c0010ae4:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c0010aea:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c0010af0:	83 e2 c0             	and    edx,0xffffffc0
c0010af3:	09 d0                	or     eax,edx
c0010af5:	88 83 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],al
c0010afb:	83 ec 0c             	sub    esp,0xc
c0010afe:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c0010b04:	83 c8 07             	or     eax,0x7
c0010b07:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c0010b0d:	8d 44 24 28          	lea    eax,[esp+0x28]
c0010b11:	50                   	push   eax
c0010b12:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0010b16:	55                   	push   ebp
c0010b17:	57                   	push   edi
c0010b18:	56                   	push   esi
c0010b19:	68 00 00 00 80       	push   0x80000000
c0010b1e:	e8 59 f8 ff ff       	call   c001037c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010b23:	83 c4 20             	add    esp,0x20
c0010b26:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c0010b2e:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0010b32:	76 1e                	jbe    c0010b52 <CPU::detectFeatures()+0x60a>
c0010b34:	83 ec 0c             	sub    esp,0xc
c0010b37:	50                   	push   eax
c0010b38:	55                   	push   ebp
c0010b39:	57                   	push   edi
c0010b3a:	56                   	push   esi
c0010b3b:	68 01 00 00 80       	push   0x80000001
c0010b40:	e8 37 f8 ff ff       	call   c001037c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010b45:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c0010b4f:	83 c4 20             	add    esp,0x20
c0010b52:	52                   	push   edx
c0010b53:	52                   	push   edx
c0010b54:	68 05 24 02 c0       	push   0xc0022405
c0010b59:	53                   	push   ebx
c0010b5a:	e8 21 c0 ff ff       	call   c000cb80 <Device::setName(char const*)>
c0010b5f:	83 c4 10             	add    esp,0x10
c0010b62:	eb 69                	jmp    c0010bcd <CPU::detectFeatures()+0x685>
c0010b64:	50                   	push   eax
c0010b65:	50                   	push   eax
c0010b66:	68 6a 23 02 c0       	push   0xc002236a
c0010b6b:	55                   	push   ebp
c0010b6c:	e8 cf fa fe ff       	call   c0000640 <strcpy>
c0010b71:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0010b7b:	e8 43 f6 fe ff       	call   c00001c3 <is486>
c0010b80:	83 c4 10             	add    esp,0x10
c0010b83:	85 c0                	test   eax,eax
c0010b85:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c0010b8b:	74 1f                	je     c0010bac <CPU::detectFeatures()+0x664>
c0010b8d:	83 c8 07             	or     eax,0x7
c0010b90:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c0010b96:	0f 20 c0             	mov    eax,cr0
c0010b99:	83 e0 14             	and    eax,0x14
c0010b9c:	83 f8 04             	cmp    eax,0x4
c0010b9f:	75 10                	jne    c0010bb1 <CPU::detectFeatures()+0x669>
c0010ba1:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0010ba7:	83 e0 fd             	and    eax,0xfffffffd
c0010baa:	eb 1b                	jmp    c0010bc7 <CPU::detectFeatures()+0x67f>
c0010bac:	83 e0 f8             	and    eax,0xfffffff8
c0010baf:	eb df                	jmp    c0010b90 <CPU::detectFeatures()+0x648>
c0010bb1:	e8 e8 f5 fe ff       	call   c000019e <hasLegacyFPU>
c0010bb6:	83 e0 01             	and    eax,0x1
c0010bb9:	8d 14 00             	lea    edx,[eax+eax*1]
c0010bbc:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0010bc2:	83 e0 fd             	and    eax,0xfffffffd
c0010bc5:	09 d0                	or     eax,edx
c0010bc7:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c0010bcd:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c0010bd4:	74 17                	je     c0010bed <CPU::detectFeatures()+0x6a5>
c0010bd6:	8b 15 b8 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026eb8
c0010bdc:	8a 82 6c 01 00 00    	mov    al,BYTE PTR [edx+0x16c]
c0010be2:	83 c8 10             	or     eax,0x10
c0010be5:	88 82 6c 01 00 00    	mov    BYTE PTR [edx+0x16c],al
c0010beb:	eb 20                	jmp    c0010c0d <CPU::detectFeatures()+0x6c5>
c0010bed:	e8 ac f5 fe ff       	call   c000019e <hasLegacyFPU>
c0010bf2:	83 e0 01             	and    eax,0x1
c0010bf5:	8d 14 00             	lea    edx,[eax+eax*1]
c0010bf8:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0010bfe:	83 e0 fd             	and    eax,0xfffffffd
c0010c01:	09 d0                	or     eax,edx
c0010c03:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c0010c09:	a8 02                	test   al,0x2
c0010c0b:	75 c9                	jne    c0010bd6 <CPU::detectFeatures()+0x68e>
c0010c0d:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c0010c14:	83 c4 2c             	add    esp,0x2c
c0010c17:	5b                   	pop    ebx
c0010c18:	5e                   	pop    esi
c0010c19:	5f                   	pop    edi
c0010c1a:	5d                   	pop    ebp
c0010c1b:	c3                   	ret    

c0010c1c <CPU::setupSMEP()>:
c0010c1c:	0f 20 e0             	mov    eax,cr4
c0010c1f:	0d 00 00 10 00       	or     eax,0x100000
c0010c24:	0f 22 e0             	mov    cr4,eax
c0010c27:	c3                   	ret    

c0010c28 <CPU::setupUMIP()>:
c0010c28:	0f 20 e0             	mov    eax,cr4
c0010c2b:	80 cc 08             	or     ah,0x8
c0010c2e:	0f 22 e0             	mov    cr4,eax
c0010c31:	c3                   	ret    

c0010c32 <CPU::setupTSC()>:
c0010c32:	0f 20 e0             	mov    eax,cr4
c0010c35:	83 c8 04             	or     eax,0x4
c0010c38:	0f 22 e0             	mov    cr4,eax
c0010c3b:	c3                   	ret    

c0010c3c <CPU::setupLargePages()>:
c0010c3c:	0f 20 e0             	mov    eax,cr4
c0010c3f:	83 c8 10             	or     eax,0x10
c0010c42:	0f 22 e0             	mov    cr4,eax
c0010c45:	c3                   	ret    

c0010c46 <CPU::setupPAT()>:
c0010c46:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0010c4b:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0010c52:	74 2c                	je     c0010c80 <CPU::setupPAT()+0x3a>
c0010c54:	53                   	push   ebx
c0010c55:	83 ec 10             	sub    esp,0x10
c0010c58:	68 77 02 00 00       	push   0x277
c0010c5d:	50                   	push   eax
c0010c5e:	e8 8f 64 ff ff       	call   c00070f2 <Computer::rdmsr(unsigned int)>
c0010c63:	83 e2 f8             	and    edx,0xfffffff8
c0010c66:	83 ca 01             	or     edx,0x1
c0010c69:	52                   	push   edx
c0010c6a:	50                   	push   eax
c0010c6b:	68 77 02 00 00       	push   0x277
c0010c70:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0010c76:	e8 a3 64 ff ff       	call   c000711e <Computer::wrmsr(unsigned int, unsigned long long)>
c0010c7b:	83 c4 28             	add    esp,0x28
c0010c7e:	5b                   	pop    ebx
c0010c7f:	c3                   	ret    
c0010c80:	c3                   	ret    
c0010c81:	90                   	nop

c0010c82 <CPU::setupMTRR()>:
c0010c82:	c3                   	ret    
c0010c83:	90                   	nop

c0010c84 <CPU::setupGlobalPages()>:
c0010c84:	0f 20 e0             	mov    eax,cr4
c0010c87:	0c 80                	or     al,0x80
c0010c89:	0f 22 e0             	mov    cr4,eax
c0010c8c:	c3                   	ret    
c0010c8d:	90                   	nop

c0010c8e <CPU::allowUsermodeDataAccess()>:
c0010c8e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010c92:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c0010c99:	74 03                	je     c0010c9e <CPU::allowUsermodeDataAccess()+0x10>
c0010c9b:	0f 01 cb             	stac   
c0010c9e:	c3                   	ret    
c0010c9f:	90                   	nop

c0010ca0 <CPU::prohibitUsermodeDataAccess()>:
c0010ca0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010ca4:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c0010cab:	74 03                	je     c0010cb0 <CPU::prohibitUsermodeDataAccess()+0x10>
c0010cad:	0f 01 ca             	clac   
c0010cb0:	c3                   	ret    
c0010cb1:	90                   	nop

c0010cb2 <CPU::setupSMAP()>:
c0010cb2:	0f 20 e0             	mov    eax,cr4
c0010cb5:	0d 00 00 20 00       	or     eax,0x200000
c0010cba:	0f 22 e0             	mov    cr4,eax
c0010cbd:	eb e1                	jmp    c0010ca0 <CPU::prohibitUsermodeDataAccess()>
c0010cbf:	90                   	nop

c0010cc0 <CPU::setupFeatures()>:
c0010cc0:	53                   	push   ebx
c0010cc1:	83 ec 08             	sub    esp,0x8
c0010cc4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010cc8:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c0010ccf:	74 18                	je     c0010ce9 <CPU::setupFeatures()+0x29>
c0010cd1:	83 ec 0c             	sub    esp,0xc
c0010cd4:	68 11 24 02 c0       	push   0xc0022411
c0010cd9:	e8 97 9c ff ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c0010cde:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010ce1:	e8 42 ff ff ff       	call   c0010c28 <CPU::setupUMIP()>
c0010ce6:	83 c4 10             	add    esp,0x10
c0010ce9:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c0010cf0:	74 18                	je     c0010d0a <CPU::setupFeatures()+0x4a>
c0010cf2:	83 ec 0c             	sub    esp,0xc
c0010cf5:	68 1b 24 02 c0       	push   0xc002241b
c0010cfa:	e8 76 9c ff ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c0010cff:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010d02:	e8 2b ff ff ff       	call   c0010c32 <CPU::setupTSC()>
c0010d07:	83 c4 10             	add    esp,0x10
c0010d0a:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c0010d11:	74 18                	je     c0010d2b <CPU::setupFeatures()+0x6b>
c0010d13:	83 ec 0c             	sub    esp,0xc
c0010d16:	68 24 24 02 c0       	push   0xc0022424
c0010d1b:	e8 55 9c ff ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c0010d20:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010d23:	e8 14 ff ff ff       	call   c0010c3c <CPU::setupLargePages()>
c0010d28:	83 c4 10             	add    esp,0x10
c0010d2b:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c0010d32:	74 18                	je     c0010d4c <CPU::setupFeatures()+0x8c>
c0010d34:	83 ec 0c             	sub    esp,0xc
c0010d37:	68 2d 24 02 c0       	push   0xc002242d
c0010d3c:	e8 34 9c ff ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c0010d41:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010d44:	e8 3b ff ff ff       	call   c0010c84 <CPU::setupGlobalPages()>
c0010d49:	83 c4 10             	add    esp,0x10
c0010d4c:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c0010d53:	74 18                	je     c0010d6d <CPU::setupFeatures()+0xad>
c0010d55:	83 ec 0c             	sub    esp,0xc
c0010d58:	68 3f 24 02 c0       	push   0xc002243f
c0010d5d:	e8 13 9c ff ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c0010d62:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010d65:	e8 dc fe ff ff       	call   c0010c46 <CPU::setupPAT()>
c0010d6a:	83 c4 10             	add    esp,0x10
c0010d6d:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c0010d74:	74 11                	je     c0010d87 <CPU::setupFeatures()+0xc7>
c0010d76:	c7 44 24 10 48 24 02 c0 	mov    DWORD PTR [esp+0x10],0xc0022448
c0010d7e:	83 c4 08             	add    esp,0x8
c0010d81:	5b                   	pop    ebx
c0010d82:	e9 ee 9b ff ff       	jmp    c000a975 <Dbg::kprintf(char const*, ...)>
c0010d87:	83 c4 08             	add    esp,0x8
c0010d8a:	5b                   	pop    ebx
c0010d8b:	c3                   	ret    

c0010d8c <CPU::open(int, int, void*)>:
c0010d8c:	55                   	push   ebp
c0010d8d:	57                   	push   edi
c0010d8e:	56                   	push   esi
c0010d8f:	53                   	push   ebx
c0010d90:	83 ec 18             	sub    esp,0x18
c0010d93:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010d97:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0010d9b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0010d9f:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0010da5:	89 bb 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edi
c0010dab:	8d ab 7c 11 00 00    	lea    ebp,[ebx+0x117c]
c0010db1:	50                   	push   eax
c0010db2:	e8 39 66 ff ff       	call   c00073f0 <GDT::setup()>
c0010db7:	83 c4 0c             	add    esp,0xc
c0010dba:	6a 00                	push   0x0
c0010dbc:	68 ef be ad de       	push   0xdeadbeef
c0010dc1:	55                   	push   ebp
c0010dc2:	e8 f1 81 ff ff       	call   c0008fb8 <TSS::setup(unsigned long, unsigned long)>
c0010dc7:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0010dca:	e8 c9 81 ff ff       	call   c0008f98 <TSS::flush()>
c0010dcf:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0010dd5:	89 04 24             	mov    DWORD PTR [esp],eax
c0010dd8:	e8 75 68 ff ff       	call   c0007652 <IDT::setup()>
c0010ddd:	b8 00 04 00 00       	mov    eax,0x400
c0010de2:	0f 23 f8             	mov    db7,eax
c0010de5:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0010def:	e8 fb 6f ff ff       	call   c0007def <Phys::allocatePage()>
c0010df4:	83 c4 10             	add    esp,0x10
c0010df7:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0010dfd:	85 f6                	test   esi,esi
c0010dff:	89 38                	mov    DWORD PTR [eax],edi
c0010e01:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0010e07:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0010e0a:	74 10                	je     c0010e1c <CPU::open(int, int, void*)+0x90>
c0010e0c:	50                   	push   eax
c0010e0d:	50                   	push   eax
c0010e0e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0010e14:	56                   	push   esi
c0010e15:	e8 c4 8a ff ff       	call   c00098de <VAS::setCPUSpecific(unsigned long)>
c0010e1a:	eb 0d                	jmp    c0010e29 <CPU::open(int, int, void*)+0x9d>
c0010e1c:	83 ec 0c             	sub    esp,0xc
c0010e1f:	68 52 24 02 c0       	push   0xc0022452
c0010e24:	e8 9e 08 00 00       	call   c00116c7 <KePanic(char const*)>
c0010e29:	83 c4 10             	add    esp,0x10
c0010e2c:	83 ec 0c             	sub    esp,0xc
c0010e2f:	68 60 24 02 c0       	push   0xc0022460
c0010e34:	e8 8e 01 00 00       	call   c0010fc7 <KeSetBootMessage(char const*)>
c0010e39:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010e3c:	e8 07 f7 ff ff       	call   c0010548 <CPU::detectFeatures()>
c0010e41:	c7 04 24 83 24 02 c0 	mov    DWORD PTR [esp],0xc0022483
c0010e48:	e8 7a 01 00 00       	call   c0010fc7 <KeSetBootMessage(char const*)>
c0010e4d:	e8 2f 74 00 00       	call   c0018281 <HalInitialise()>
c0010e52:	a1 d0 6e 02 c0       	mov    eax,ds:0xc0026ed0
c0010e57:	83 e0 10             	and    eax,0x10
c0010e5a:	83 f8 01             	cmp    eax,0x1
c0010e5d:	19 c0                	sbb    eax,eax
c0010e5f:	83 e0 46             	and    eax,0x46
c0010e62:	83 c0 1e             	add    eax,0x1e
c0010e65:	89 04 24             	mov    DWORD PTR [esp],eax
c0010e68:	e8 b0 d5 ff ff       	call   c000e41d <setupTimer(int)>
c0010e6d:	83 c4 10             	add    esp,0x10
c0010e70:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0010e76:	f6 05 d0 6e 02 c0 20 	test   BYTE PTR ds:0xc0026ed0,0x20
c0010e7d:	74 0c                	je     c0010e8b <CPU::open(int, int, void*)+0xff>
c0010e7f:	83 ec 0c             	sub    esp,0xc
c0010e82:	53                   	push   ebx
c0010e83:	e8 38 fe ff ff       	call   c0010cc0 <CPU::setupFeatures()>
c0010e88:	83 c4 10             	add    esp,0x10
c0010e8b:	83 c4 0c             	add    esp,0xc
c0010e8e:	31 c0                	xor    eax,eax
c0010e90:	5b                   	pop    ebx
c0010e91:	5e                   	pop    esi
c0010e92:	5f                   	pop    edi
c0010e93:	5d                   	pop    ebp
c0010e94:	c3                   	ret    

c0010e95 <KeInitialiseAtexit()>:
c0010e95:	83 ec 10             	sub    esp,0x10
c0010e98:	c7 05 a0 bd 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bda0,0x0
c0010ea2:	6a 60                	push   0x60
c0010ea4:	6a 00                	push   0x0
c0010ea6:	68 20 be 02 c0       	push   0xc002be20
c0010eab:	e8 40 f6 fe ff       	call   c00004f0 <memset>
c0010eb0:	83 c4 1c             	add    esp,0x1c
c0010eb3:	c3                   	ret    

c0010eb4 <KeRegisterAtexit(void (*)(void*), void*)>:
c0010eb4:	a1 a0 bd 02 c0       	mov    eax,ds:0xc002bda0
c0010eb9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010ebd:	89 14 85 20 be 02 c0 	mov    DWORD PTR [eax*4-0x3ffd41e0],edx
c0010ec4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010ec8:	89 14 85 c0 bd 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4240],edx
c0010ecf:	40                   	inc    eax
c0010ed0:	a3 a0 bd 02 c0       	mov    ds:0xc002bda0,eax
c0010ed5:	83 f8 17             	cmp    eax,0x17
c0010ed8:	7e 0d                	jle    c0010ee7 <KeRegisterAtexit(void (*)(void*), void*)+0x33>
c0010eda:	c7 44 24 04 c4 24 02 c0 	mov    DWORD PTR [esp+0x4],0xc00224c4
c0010ee2:	e9 e0 07 00 00       	jmp    c00116c7 <KePanic(char const*)>
c0010ee7:	c3                   	ret    

c0010ee8 <KeExecuteAtexit()>:
c0010ee8:	53                   	push   ebx
c0010ee9:	31 db                	xor    ebx,ebx
c0010eeb:	83 ec 08             	sub    esp,0x8
c0010eee:	39 1d a0 bd 02 c0    	cmp    DWORD PTR ds:0xc002bda0,ebx
c0010ef4:	7e 50                	jle    c0010f46 <KeExecuteAtexit()+0x5e>
c0010ef6:	8b 04 9d 20 be 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd41e0]
c0010efd:	85 c0                	test   eax,eax
c0010eff:	74 42                	je     c0010f43 <KeExecuteAtexit()+0x5b>
c0010f01:	51                   	push   ecx
c0010f02:	50                   	push   eax
c0010f03:	53                   	push   ebx
c0010f04:	68 dd 24 02 c0       	push   0xc00224dd
c0010f09:	e8 67 9a ff ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c0010f0e:	58                   	pop    eax
c0010f0f:	ff 34 9d c0 bd 02 c0 	push   DWORD PTR [ebx*4-0x3ffd4240]
c0010f16:	ff 14 9d 20 be 02 c0 	call   DWORD PTR [ebx*4-0x3ffd41e0]
c0010f1d:	c7 04 24 ff 24 02 c0 	mov    DWORD PTR [esp],0xc00224ff
c0010f24:	e8 4c 9a ff ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c0010f29:	c7 04 24 5f 36 02 c0 	mov    DWORD PTR [esp],0xc002365f
c0010f30:	c7 04 9d 20 be 02 c0 00 00 00 00 	mov    DWORD PTR [ebx*4-0x3ffd41e0],0x0
c0010f3b:	e8 35 9a ff ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c0010f40:	83 c4 10             	add    esp,0x10
c0010f43:	43                   	inc    ebx
c0010f44:	eb a8                	jmp    c0010eee <KeExecuteAtexit()+0x6>
c0010f46:	83 c4 08             	add    esp,0x8
c0010f49:	5b                   	pop    ebx
c0010f4a:	c3                   	ret    

c0010f4b <KeDisplaySplashScreen()>:
c0010f4b:	55                   	push   ebp
c0010f4c:	bd 05 00 00 00       	mov    ebp,0x5
c0010f51:	57                   	push   edi
c0010f52:	bf 0a 00 00 00       	mov    edi,0xa
c0010f57:	56                   	push   esi
c0010f58:	31 f6                	xor    esi,esi
c0010f5a:	53                   	push   ebx
c0010f5b:	31 db                	xor    ebx,ebx
c0010f5d:	83 ec 0c             	sub    esp,0xc
c0010f60:	0f b6 96 c0 38 02 c0 	movzx  edx,BYTE PTR [esi-0x3ffdc740]
c0010f67:	89 d0                	mov    eax,edx
c0010f69:	85 d2                	test   edx,edx
c0010f6b:	74 52                	je     c0010fbf <KeDisplaySplashScreen()+0x74>
c0010f6d:	80 bb f6 38 02 c0 db 	cmp    BYTE PTR [ebx-0x3ffdc70a],0xdb
c0010f74:	75 13                	jne    c0010f89 <KeDisplaySplashScreen()+0x3e>
c0010f76:	0f b6 8b f5 38 02 c0 	movzx  ecx,BYTE PTR [ebx-0x3ffdc70b]
c0010f7d:	83 e1 fe             	and    ecx,0xfffffffe
c0010f80:	81 f9 ba 00 00 00    	cmp    ecx,0xba
c0010f86:	75 01                	jne    c0010f89 <KeDisplaySplashScreen()+0x3e>
c0010f88:	47                   	inc    edi
c0010f89:	83 fa 0d             	cmp    edx,0xd
c0010f8c:	74 28                	je     c0010fb6 <KeDisplaySplashScreen()+0x6b>
c0010f8e:	83 fa 0a             	cmp    edx,0xa
c0010f91:	75 0a                	jne    c0010f9d <KeDisplaySplashScreen()+0x52>
c0010f93:	45                   	inc    ebp
c0010f94:	bf 0a 00 00 00       	mov    edi,0xa
c0010f99:	31 db                	xor    ebx,ebx
c0010f9b:	eb 19                	jmp    c0010fb6 <KeDisplaySplashScreen()+0x6b>
c0010f9d:	83 ec 0c             	sub    esp,0xc
c0010fa0:	8d 14 1f             	lea    edx,[edi+ebx*1]
c0010fa3:	55                   	push   ebp
c0010fa4:	0f be c0             	movsx  eax,al
c0010fa7:	52                   	push   edx
c0010fa8:	43                   	inc    ebx
c0010fa9:	6a 00                	push   0x0
c0010fab:	6a 0e                	push   0xe
c0010fad:	50                   	push   eax
c0010fae:	e8 4d 7f 00 00       	call   c0018f00 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0010fb3:	83 c4 20             	add    esp,0x20
c0010fb6:	46                   	inc    esi
c0010fb7:	81 fe 42 01 00 00    	cmp    esi,0x142
c0010fbd:	75 a1                	jne    c0010f60 <KeDisplaySplashScreen()+0x15>
c0010fbf:	83 c4 0c             	add    esp,0xc
c0010fc2:	5b                   	pop    ebx
c0010fc3:	5e                   	pop    esi
c0010fc4:	5f                   	pop    edi
c0010fc5:	5d                   	pop    ebp
c0010fc6:	c3                   	ret    

c0010fc7 <KeSetBootMessage(char const*)>:
c0010fc7:	57                   	push   edi
c0010fc8:	56                   	push   esi
c0010fc9:	53                   	push   ebx
c0010fca:	81 ec a4 00 00 00    	sub    esp,0xa4
c0010fd0:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c0010fd7:	68 9e 00 00 00       	push   0x9e
c0010fdc:	6a 00                	push   0x0
c0010fde:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0010fe2:	56                   	push   esi
c0010fe3:	e8 08 f5 fe ff       	call   c00004f0 <memset>
c0010fe8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010feb:	e8 80 f5 fe ff       	call   c0000570 <strlen>
c0010ff0:	ba 50 00 00 00       	mov    edx,0x50
c0010ff5:	83 c4 10             	add    esp,0x10
c0010ff8:	29 c2                	sub    edx,eax
c0010ffa:	31 c9                	xor    ecx,ecx
c0010ffc:	83 e2 fe             	and    edx,0xfffffffe
c0010fff:	01 f2                	add    edx,esi
c0011001:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c0011006:	84 c0                	test   al,al
c0011008:	74 0a                	je     c0011014 <KeSetBootMessage(char const*)+0x4d>
c001100a:	80 cc 0f             	or     ah,0xf
c001100d:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c0011011:	41                   	inc    ecx
c0011012:	eb ed                	jmp    c0011001 <KeSetBootMessage(char const*)+0x3a>
c0011014:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c0011019:	b9 9e 00 00 00       	mov    ecx,0x9e
c001101e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011020:	81 c4 a0 00 00 00    	add    esp,0xa0
c0011026:	5b                   	pop    ebx
c0011027:	5e                   	pop    esi
c0011028:	5f                   	pop    edi
c0011029:	c3                   	ret    
c001102a:	66 90                	xchg   ax,ax

c001102c <Krnl::handlePowerButton()>:
c001102c:	83 ec 0c             	sub    esp,0xc
c001102f:	e8 ee 06 00 00       	call   c0011722 <KeHandlePowerButton()>
c0011034:	90                   	nop
c0011035:	83 c4 0c             	add    esp,0xc
c0011038:	c3                   	ret    
c0011039:	8d 76 00             	lea    esi,[esi+0x0]

c001103c <Krnl::handleSleepButton()>:
c001103c:	83 ec 0c             	sub    esp,0xc
c001103f:	e8 13 07 00 00       	call   c0011757 <KeHandleSleepButton()>
c0011044:	90                   	nop
c0011045:	83 c4 0c             	add    esp,0xc
c0011048:	c3                   	ret    

c0011049 <KeCalculateCRC32(unsigned char*, int)>:
c0011049:	53                   	push   ebx
c001104a:	83 c8 ff             	or     eax,0xffffffff
c001104d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011051:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011055:	01 cb                	add    ebx,ecx
c0011057:	39 d9                	cmp    ecx,ebx
c0011059:	74 15                	je     c0011070 <KeCalculateCRC32(unsigned char*, int)+0x27>
c001105b:	41                   	inc    ecx
c001105c:	8a 51 ff             	mov    dl,BYTE PTR [ecx-0x1]
c001105f:	31 c2                	xor    edx,eax
c0011061:	c1 e8 08             	shr    eax,0x8
c0011064:	0f b6 d2             	movzx  edx,dl
c0011067:	33 04 95 20 3a 02 c0 	xor    eax,DWORD PTR [edx*4-0x3ffdc5e0]
c001106e:	eb e7                	jmp    c0011057 <KeCalculateCRC32(unsigned char*, int)+0xe>
c0011070:	f7 d0                	not    eax
c0011072:	5b                   	pop    ebx
c0011073:	c3                   	ret    

c0011074 <EnvVarContainer::getEnv(char const*)>:
c0011074:	57                   	push   edi
c0011075:	56                   	push   esi
c0011076:	53                   	push   ebx
c0011077:	31 db                	xor    ebx,ebx
c0011079:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001107d:	39 1e                	cmp    DWORD PTR [esi],ebx
c001107f:	7e 2b                	jle    c00110ac <EnvVarContainer::getEnv(char const*)+0x38>
c0011081:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c0011088:	50                   	push   eax
c0011089:	50                   	push   eax
c001108a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001108d:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c0011090:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011094:	e8 b7 f6 fe ff       	call   c0000750 <strcmp>
c0011099:	83 c4 10             	add    esp,0x10
c001109c:	85 c0                	test   eax,eax
c001109e:	75 09                	jne    c00110a9 <EnvVarContainer::getEnv(char const*)+0x35>
c00110a0:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00110a3:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c00110a7:	eb 05                	jmp    c00110ae <EnvVarContainer::getEnv(char const*)+0x3a>
c00110a9:	43                   	inc    ebx
c00110aa:	eb d1                	jmp    c001107d <EnvVarContainer::getEnv(char const*)+0x9>
c00110ac:	31 c0                	xor    eax,eax
c00110ae:	5b                   	pop    ebx
c00110af:	5e                   	pop    esi
c00110b0:	5f                   	pop    edi
c00110b1:	c3                   	ret    

c00110b2 <EnvVarContainer::setEnv(char const*, char const*)>:
c00110b2:	55                   	push   ebp
c00110b3:	57                   	push   edi
c00110b4:	56                   	push   esi
c00110b5:	53                   	push   ebx
c00110b6:	83 ec 28             	sub    esp,0x28
c00110b9:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00110bd:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c00110c1:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c00110c5:	56                   	push   esi
c00110c6:	e8 a5 f4 fe ff       	call   c0000570 <strlen>
c00110cb:	40                   	inc    eax
c00110cc:	89 04 24             	mov    DWORD PTR [esp],eax
c00110cf:	e8 12 6a ff ff       	call   c0007ae6 <malloc>
c00110d4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00110d7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00110db:	e8 90 f4 fe ff       	call   c0000570 <strlen>
c00110e0:	40                   	inc    eax
c00110e1:	89 04 24             	mov    DWORD PTR [esp],eax
c00110e4:	e8 fd 69 ff ff       	call   c0007ae6 <malloc>
c00110e9:	89 34 24             	mov    DWORD PTR [esp],esi
c00110ec:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00110f0:	e8 7b f4 fe ff       	call   c0000570 <strlen>
c00110f5:	83 c4 0c             	add    esp,0xc
c00110f8:	40                   	inc    eax
c00110f9:	50                   	push   eax
c00110fa:	6a 00                	push   0x0
c00110fc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011100:	e8 eb f3 fe ff       	call   c00004f0 <memset>
c0011105:	89 34 24             	mov    DWORD PTR [esp],esi
c0011108:	e8 63 f4 fe ff       	call   c0000570 <strlen>
c001110d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0011111:	8d 48 01             	lea    ecx,[eax+0x1]
c0011114:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011116:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011119:	89 de                	mov    esi,ebx
c001111b:	e8 50 f4 fe ff       	call   c0000570 <strlen>
c0011120:	83 c4 0c             	add    esp,0xc
c0011123:	40                   	inc    eax
c0011124:	50                   	push   eax
c0011125:	6a 00                	push   0x0
c0011127:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001112b:	e8 c0 f3 fe ff       	call   c00004f0 <memset>
c0011130:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011133:	e8 38 f4 fe ff       	call   c0000570 <strlen>
c0011138:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001113c:	8d 48 01             	lea    ecx,[eax+0x1]
c001113f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011141:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0011144:	40                   	inc    eax
c0011145:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0011148:	c1 e0 03             	shl    eax,0x3
c001114b:	5a                   	pop    edx
c001114c:	59                   	pop    ecx
c001114d:	50                   	push   eax
c001114e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0011151:	e8 7c 69 ff ff       	call   c0007ad2 <realloc>
c0011156:	8d 74 24 18          	lea    esi,[esp+0x18]
c001115a:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001115d:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0011160:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0011164:	b9 08 00 00 00       	mov    ecx,0x8
c0011169:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001116b:	83 c4 2c             	add    esp,0x2c
c001116e:	5b                   	pop    ebx
c001116f:	5e                   	pop    esi
c0011170:	5f                   	pop    edi
c0011171:	5d                   	pop    ebp
c0011172:	c3                   	ret    
c0011173:	90                   	nop

c0011174 <EnvVarContainer::deleteEnv(char const*)>:
c0011174:	c3                   	ret    
c0011175:	90                   	nop

c0011176 <EnvVarContainer::loadFrom(char const*, char const*)>:
c0011176:	55                   	push   ebp
c0011177:	57                   	push   edi
c0011178:	56                   	push   esi
c0011179:	53                   	push   ebx
c001117a:	81 ec 38 01 00 00    	sub    esp,0x138
c0011180:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c0011187:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c001118e:	68 14 01 00 00       	push   0x114
c0011193:	e8 4e 69 ff ff       	call   c0007ae6 <malloc>
c0011198:	83 c4 0c             	add    esp,0xc
c001119b:	89 c3                	mov    ebx,eax
c001119d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00111a0:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00111a7:	50                   	push   eax
c00111a8:	e8 cf a9 ff ff       	call   c000bb7c <File::File(char const*, Process*)>
c00111ad:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00111b0:	e8 a9 ac ff ff       	call   c000be5e <File::exists()>
c00111b5:	83 c4 10             	add    esp,0x10
c00111b8:	84 c0                	test   al,al
c00111ba:	75 31                	jne    c00111ed <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c00111bc:	50                   	push   eax
c00111bd:	50                   	push   eax
c00111be:	6a 12                	push   0x12
c00111c0:	53                   	push   ebx
c00111c1:	e8 d4 a9 ff ff       	call   c000bb9a <File::open(FileOpenMode)>
c00111c6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00111c8:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00111cb:	89 34 24             	mov    DWORD PTR [esp],esi
c00111ce:	e8 9d f3 fe ff       	call   c0000570 <strlen>
c00111d3:	5a                   	pop    edx
c00111d4:	31 d2                	xor    edx,edx
c00111d6:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c00111da:	51                   	push   ecx
c00111db:	56                   	push   esi
c00111dc:	52                   	push   edx
c00111dd:	50                   	push   eax
c00111de:	53                   	push   ebx
c00111df:	ff d7                	call   edi
c00111e1:	83 c4 14             	add    esp,0x14
c00111e4:	53                   	push   ebx
c00111e5:	e8 0e aa ff ff       	call   c000bbf8 <File::close()>
c00111ea:	83 c4 10             	add    esp,0x10
c00111ed:	56                   	push   esi
c00111ee:	31 f6                	xor    esi,esi
c00111f0:	68 00 01 00 00       	push   0x100
c00111f5:	6a 00                	push   0x0
c00111f7:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00111fb:	50                   	push   eax
c00111fc:	e8 ef f2 fe ff       	call   c00004f0 <memset>
c0011201:	5f                   	pop    edi
c0011202:	58                   	pop    eax
c0011203:	6a 01                	push   0x1
c0011205:	53                   	push   ebx
c0011206:	e8 8f a9 ff ff       	call   c000bb9a <File::open(FileOpenMode)>
c001120b:	83 c4 10             	add    esp,0x10
c001120e:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0011216:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001121e:	83 ec 0c             	sub    esp,0xc
c0011221:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011223:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0011227:	51                   	push   ecx
c0011228:	8d 54 24 23          	lea    edx,[esp+0x23]
c001122c:	52                   	push   edx
c001122d:	6a 00                	push   0x0
c001122f:	6a 01                	push   0x1
c0011231:	53                   	push   ebx
c0011232:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0011235:	0f be 44 24 33       	movsx  eax,BYTE PTR [esp+0x33]
c001123a:	83 c4 20             	add    esp,0x20
c001123d:	89 c2                	mov    edx,eax
c001123f:	85 c0                	test   eax,eax
c0011241:	0f 84 36 01 00 00    	je     c001137d <EnvVarContainer::loadFrom(char const*, char const*)+0x207>
c0011247:	83 f8 0d             	cmp    eax,0xd
c001124a:	0f 84 22 01 00 00    	je     c0011372 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0011250:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0011255:	0f 84 f0 00 00 00    	je     c001134b <EnvVarContainer::loadFrom(char const*, char const*)+0x1d5>
c001125b:	83 f8 0a             	cmp    eax,0xa
c001125e:	74 13                	je     c0011273 <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c0011260:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0011265:	74 0c                	je     c0011273 <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c0011267:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001126d:	0f 8e f6 00 00 00    	jle    c0011369 <EnvVarContainer::loadFrom(char const*, char const*)+0x1f3>
c0011273:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011277:	83 ec 0c             	sub    esp,0xc
c001127a:	8d 78 01             	lea    edi,[eax+0x1]
c001127d:	57                   	push   edi
c001127e:	e8 63 68 ff ff       	call   c0007ae6 <malloc>
c0011283:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c0011287:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001128b:	8d 56 04             	lea    edx,[esi+0x4]
c001128e:	89 14 24             	mov    DWORD PTR [esp],edx
c0011291:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0011295:	e8 4c 68 ff ff       	call   c0007ae6 <malloc>
c001129a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001129e:	83 c4 0c             	add    esp,0xc
c00112a1:	57                   	push   edi
c00112a2:	6a 00                	push   0x0
c00112a4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00112a8:	e8 43 f2 fe ff       	call   c00004f0 <memset>
c00112ad:	8d 74 24 30          	lea    esi,[esp+0x30]
c00112b1:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00112b5:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00112b9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00112bb:	83 c4 0c             	add    esp,0xc
c00112be:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00112c2:	52                   	push   edx
c00112c3:	6a 00                	push   0x0
c00112c5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00112c9:	e8 22 f2 fe ff       	call   c00004f0 <memset>
c00112ce:	8d 74 24 30          	lea    esi,[esp+0x30]
c00112d2:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c00112d6:	89 34 24             	mov    DWORD PTR [esp],esi
c00112d9:	e8 92 f2 fe ff       	call   c0000570 <strlen>
c00112de:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c00112e2:	89 c1                	mov    ecx,eax
c00112e4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00112e6:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00112e9:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c00112ec:	40                   	inc    eax
c00112ed:	83 c4 10             	add    esp,0x10
c00112f0:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00112f3:	85 d2                	test   edx,edx
c00112f5:	75 0c                	jne    c0011303 <EnvVarContainer::loadFrom(char const*, char const*)+0x18d>
c00112f7:	83 ec 0c             	sub    esp,0xc
c00112fa:	6a 08                	push   0x8
c00112fc:	e8 e5 67 ff ff       	call   c0007ae6 <malloc>
c0011301:	eb 0c                	jmp    c001130f <EnvVarContainer::loadFrom(char const*, char const*)+0x199>
c0011303:	c1 e0 03             	shl    eax,0x3
c0011306:	51                   	push   ecx
c0011307:	51                   	push   ecx
c0011308:	50                   	push   eax
c0011309:	52                   	push   edx
c001130a:	e8 c3 67 ff ff       	call   c0007ad2 <realloc>
c001130f:	83 c4 10             	add    esp,0x10
c0011312:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0011315:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0011318:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c001131b:	8d 74 24 18          	lea    esi,[esp+0x18]
c001131f:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0011323:	b9 08 00 00 00       	mov    ecx,0x8
c0011328:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001132a:	31 f6                	xor    esi,esi
c001132c:	50                   	push   eax
c001132d:	68 00 01 00 00       	push   0x100
c0011332:	6a 00                	push   0x0
c0011334:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0011338:	50                   	push   eax
c0011339:	e8 b2 f1 fe ff       	call   c00004f0 <memset>
c001133e:	83 c4 10             	add    esp,0x10
c0011341:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0011349:	eb 27                	jmp    c0011372 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c001134b:	83 f8 3d             	cmp    eax,0x3d
c001134e:	74 1e                	je     c001136e <EnvVarContainer::loadFrom(char const*, char const*)+0x1f8>
c0011350:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0011356:	7f 07                	jg     c001135f <EnvVarContainer::loadFrom(char const*, char const*)+0x1e9>
c0011358:	88 54 34 20          	mov    BYTE PTR [esp+esi*1+0x20],dl
c001135c:	46                   	inc    esi
c001135d:	eb 13                	jmp    c0011372 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c001135f:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0011367:	eb 09                	jmp    c0011372 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0011369:	83 f8 3d             	cmp    eax,0x3d
c001136c:	75 ea                	jne    c0011358 <EnvVarContainer::loadFrom(char const*, char const*)+0x1e2>
c001136e:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0011372:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0011377:	0f 85 99 fe ff ff    	jne    c0011216 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c001137d:	83 ec 0c             	sub    esp,0xc
c0011380:	53                   	push   ebx
c0011381:	e8 72 a8 ff ff       	call   c000bbf8 <File::close()>
c0011386:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011388:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001138b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001138e:	81 c4 3c 01 00 00    	add    esp,0x13c
c0011394:	5b                   	pop    ebx
c0011395:	5e                   	pop    esi
c0011396:	5f                   	pop    edi
c0011397:	5d                   	pop    ebp
c0011398:	c3                   	ret    
c0011399:	90                   	nop

c001139a <EnvVarContainer::__loadSystem()>:
c001139a:	83 ec 10             	sub    esp,0x10
c001139d:	68 20 3e 02 c0       	push   0xc0023e20
c00113a2:	68 04 25 02 c0       	push   0xc0022504
c00113a7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00113ab:	e8 c6 fd ff ff       	call   c0011176 <EnvVarContainer::loadFrom(char const*, char const*)>
c00113b0:	83 c4 1c             	add    esp,0x1c
c00113b3:	c3                   	ret    

c00113b4 <EnvVarContainer::__loadUser()>:
c00113b4:	c3                   	ret    
c00113b5:	90                   	nop

c00113b6 <EnvVarContainer::EnvVarContainer(Process*)>:
c00113b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00113ba:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00113c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00113c4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00113c8:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00113cb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00113cf:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00113d6:	90                   	nop
c00113d7:	c3                   	ret    

c00113d8 <EnvVarContainer::~EnvVarContainer()>:
c00113d8:	83 ec 0c             	sub    esp,0xc
c00113db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00113df:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00113e2:	85 c0                	test   eax,eax
c00113e4:	74 1d                	je     c0011403 <EnvVarContainer::~EnvVarContainer()+0x2b>
c00113e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00113ea:	8b 00                	mov    eax,DWORD PTR [eax]
c00113ec:	85 c0                	test   eax,eax
c00113ee:	74 13                	je     c0011403 <EnvVarContainer::~EnvVarContainer()+0x2b>
c00113f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00113f4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00113f7:	83 ec 0c             	sub    esp,0xc
c00113fa:	50                   	push   eax
c00113fb:	e8 f6 66 ff ff       	call   c0007af6 <free>
c0011400:	83 c4 10             	add    esp,0x10
c0011403:	90                   	nop
c0011404:	83 c4 0c             	add    esp,0xc
c0011407:	c3                   	ret    

c0011408 <KeGetEnv(Process*, char const*)>:
c0011408:	53                   	push   ebx
c0011409:	83 ec 08             	sub    esp,0x8
c001140c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011410:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0011414:	39 05 f0 c6 02 c0    	cmp    DWORD PTR ds:0xc002c6f0,eax
c001141a:	74 04                	je     c0011420 <KeGetEnv(Process*, char const*)+0x18>
c001141c:	85 c0                	test   eax,eax
c001141e:	75 0b                	jne    c001142b <KeGetEnv(Process*, char const*)+0x23>
c0011420:	a1 80 be 02 c0       	mov    eax,ds:0xc002be80
c0011425:	85 c0                	test   eax,eax
c0011427:	75 19                	jne    c0011442 <KeGetEnv(Process*, char const*)+0x3a>
c0011429:	eb 27                	jmp    c0011452 <KeGetEnv(Process*, char const*)+0x4a>
c001142b:	52                   	push   edx
c001142c:	52                   	push   edx
c001142d:	53                   	push   ebx
c001142e:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c0011434:	e8 3b fc ff ff       	call   c0011074 <EnvVarContainer::getEnv(char const*)>
c0011439:	83 c4 10             	add    esp,0x10
c001143c:	85 c0                	test   eax,eax
c001143e:	75 28                	jne    c0011468 <KeGetEnv(Process*, char const*)+0x60>
c0011440:	eb de                	jmp    c0011420 <KeGetEnv(Process*, char const*)+0x18>
c0011442:	52                   	push   edx
c0011443:	52                   	push   edx
c0011444:	53                   	push   ebx
c0011445:	50                   	push   eax
c0011446:	e8 29 fc ff ff       	call   c0011074 <EnvVarContainer::getEnv(char const*)>
c001144b:	83 c4 10             	add    esp,0x10
c001144e:	85 c0                	test   eax,eax
c0011450:	75 16                	jne    c0011468 <KeGetEnv(Process*, char const*)+0x60>
c0011452:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0011456:	a1 84 be 02 c0       	mov    eax,ds:0xc002be84
c001145b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001145f:	83 c4 08             	add    esp,0x8
c0011462:	5b                   	pop    ebx
c0011463:	e9 0c fc ff ff       	jmp    c0011074 <EnvVarContainer::getEnv(char const*)>
c0011468:	83 c4 08             	add    esp,0x8
c001146b:	5b                   	pop    ebx
c001146c:	c3                   	ret    

c001146d <KeSetEnvSystem(char const*, char const*)>:
c001146d:	83 ec 10             	sub    esp,0x10
c0011470:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011474:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011478:	ff 35 84 be 02 c0    	push   DWORD PTR ds:0xc002be84
c001147e:	e8 2f fc ff ff       	call   c00110b2 <EnvVarContainer::setEnv(char const*, char const*)>
c0011483:	83 c4 1c             	add    esp,0x1c
c0011486:	c3                   	ret    

c0011487 <KeSetEnvUser(char const*, char const*)>:
c0011487:	a1 80 be 02 c0       	mov    eax,ds:0xc002be80
c001148c:	85 c0                	test   eax,eax
c001148e:	74 15                	je     c00114a5 <KeSetEnvUser(char const*, char const*)+0x1e>
c0011490:	83 ec 10             	sub    esp,0x10
c0011493:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011497:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001149b:	50                   	push   eax
c001149c:	e8 11 fc ff ff       	call   c00110b2 <EnvVarContainer::setEnv(char const*, char const*)>
c00114a1:	83 c4 1c             	add    esp,0x1c
c00114a4:	c3                   	ret    
c00114a5:	c3                   	ret    

c00114a6 <KeSetEnvProcess(Process*, char const*, char const*)>:
c00114a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00114aa:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c00114b0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00114b4:	e9 f9 fb ff ff       	jmp    c00110b2 <EnvVarContainer::setEnv(char const*, char const*)>

c00114b9 <KeDeleteEnvSystem(char const*)>:
c00114b9:	c3                   	ret    

c00114ba <KeDeleteEnvUser(char const*)>:
c00114ba:	c3                   	ret    

c00114bb <KeDeleteEnvProcess(Process*, char const*)>:
c00114bb:	c3                   	ret    

c00114bc <KeNewProcessEnv(Process*)>:
c00114bc:	83 ec 28             	sub    esp,0x28
c00114bf:	6a 0c                	push   0xc
c00114c1:	e8 20 66 ff ff       	call   c0007ae6 <malloc>
c00114c6:	5a                   	pop    edx
c00114c7:	59                   	pop    ecx
c00114c8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00114cc:	50                   	push   eax
c00114cd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00114d1:	e8 e0 fe ff ff       	call   c00113b6 <EnvVarContainer::EnvVarContainer(Process*)>
c00114d6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00114da:	83 c4 2c             	add    esp,0x2c
c00114dd:	c3                   	ret    

c00114de <KeCopyProcessEnv(Process*, Process*)>:
c00114de:	57                   	push   edi
c00114df:	56                   	push   esi
c00114e0:	53                   	push   ebx
c00114e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00114e5:	83 ec 0c             	sub    esp,0xc
c00114e8:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c00114ee:	6a 0c                	push   0xc
c00114f0:	e8 f1 65 ff ff       	call   c0007ae6 <malloc>
c00114f5:	89 c3                	mov    ebx,eax
c00114f7:	58                   	pop    eax
c00114f8:	5a                   	pop    edx
c00114f9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00114fd:	53                   	push   ebx
c00114fe:	e8 b3 fe ff ff       	call   c00113b6 <EnvVarContainer::EnvVarContainer(Process*)>
c0011503:	8b 07                	mov    eax,DWORD PTR [edi]
c0011505:	89 03                	mov    DWORD PTR [ebx],eax
c0011507:	c1 e0 03             	shl    eax,0x3
c001150a:	89 04 24             	mov    DWORD PTR [esp],eax
c001150d:	e8 d4 65 ff ff       	call   c0007ae6 <malloc>
c0011512:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0011515:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0011517:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c001151a:	c1 e1 03             	shl    ecx,0x3
c001151d:	89 c7                	mov    edi,eax
c001151f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011521:	83 c4 10             	add    esp,0x10
c0011524:	89 d8                	mov    eax,ebx
c0011526:	5b                   	pop    ebx
c0011527:	5e                   	pop    esi
c0011528:	5f                   	pop    edi
c0011529:	c3                   	ret    

c001152a <KeLoadSystemEnv()>:
c001152a:	53                   	push   ebx
c001152b:	83 ec 14             	sub    esp,0x14
c001152e:	6a 0c                	push   0xc
c0011530:	e8 b1 65 ff ff       	call   c0007ae6 <malloc>
c0011535:	89 c3                	mov    ebx,eax
c0011537:	58                   	pop    eax
c0011538:	5a                   	pop    edx
c0011539:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c001153f:	53                   	push   ebx
c0011540:	e8 71 fe ff ff       	call   c00113b6 <EnvVarContainer::EnvVarContainer(Process*)>
c0011545:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011548:	89 1d 84 be 02 c0    	mov    DWORD PTR ds:0xc002be84,ebx
c001154e:	e8 47 fe ff ff       	call   c001139a <EnvVarContainer::__loadSystem()>
c0011553:	83 c4 18             	add    esp,0x18
c0011556:	5b                   	pop    ebx
c0011557:	c3                   	ret    

c0011558 <KeLoadUserEnv()>:
c0011558:	53                   	push   ebx
c0011559:	83 ec 14             	sub    esp,0x14
c001155c:	6a 0c                	push   0xc
c001155e:	e8 83 65 ff ff       	call   c0007ae6 <malloc>
c0011563:	89 c3                	mov    ebx,eax
c0011565:	58                   	pop    eax
c0011566:	5a                   	pop    edx
c0011567:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c001156d:	53                   	push   ebx
c001156e:	e8 43 fe ff ff       	call   c00113b6 <EnvVarContainer::EnvVarContainer(Process*)>
c0011573:	89 1d 80 be 02 c0    	mov    DWORD PTR ds:0xc002be80,ebx
c0011579:	83 c4 18             	add    esp,0x18
c001157c:	5b                   	pop    ebx
c001157d:	c3                   	ret    

c001157e <KeFlushEnv()>:
c001157e:	c3                   	ret    

c001157f <KeGetProcessTotalEnvCount(Process*)>:
c001157f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011583:	8b 15 80 be 02 c0    	mov    edx,DWORD PTR ds:0xc002be80
c0011589:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c001158f:	a1 84 be 02 c0       	mov    eax,ds:0xc002be84
c0011594:	8b 00                	mov    eax,DWORD PTR [eax]
c0011596:	03 01                	add    eax,DWORD PTR [ecx]
c0011598:	85 d2                	test   edx,edx
c001159a:	74 02                	je     c001159e <KeGetProcessTotalEnvCount(Process*)+0x1f>
c001159c:	03 02                	add    eax,DWORD PTR [edx]
c001159e:	c3                   	ret    

c001159f <KeGetProcessEnvPair(Process*, int)>:
c001159f:	57                   	push   edi
c00115a0:	56                   	push   esi
c00115a1:	8b 35 80 be 02 c0    	mov    esi,DWORD PTR ds:0xc002be80
c00115a7:	53                   	push   ebx
c00115a8:	85 f6                	test   esi,esi
c00115aa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00115ae:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00115b2:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c00115b8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00115bc:	8b 01                	mov    eax,DWORD PTR [ecx]
c00115be:	75 16                	jne    c00115d6 <KeGetProcessEnvPair(Process*, int)+0x37>
c00115c0:	39 c2                	cmp    edx,eax
c00115c2:	7c 16                	jl     c00115da <KeGetProcessEnvPair(Process*, int)+0x3b>
c00115c4:	8b 0d 84 be 02 c0    	mov    ecx,DWORD PTR ds:0xc002be84
c00115ca:	8b 31                	mov    esi,DWORD PTR [ecx]
c00115cc:	01 c6                	add    esi,eax
c00115ce:	39 d6                	cmp    esi,edx
c00115d0:	7e 3c                	jle    c001160e <KeGetProcessEnvPair(Process*, int)+0x6f>
c00115d2:	29 c2                	sub    edx,eax
c00115d4:	eb 04                	jmp    c00115da <KeGetProcessEnvPair(Process*, int)+0x3b>
c00115d6:	39 c2                	cmp    edx,eax
c00115d8:	7d 05                	jge    c00115df <KeGetProcessEnvPair(Process*, int)+0x40>
c00115da:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00115dd:	eb 20                	jmp    c00115ff <KeGetProcessEnvPair(Process*, int)+0x60>
c00115df:	8b 3e                	mov    edi,DWORD PTR [esi]
c00115e1:	8d 0c 07             	lea    ecx,[edi+eax*1]
c00115e4:	39 d1                	cmp    ecx,edx
c00115e6:	7e 04                	jle    c00115ec <KeGetProcessEnvPair(Process*, int)+0x4d>
c00115e8:	29 c2                	sub    edx,eax
c00115ea:	eb 10                	jmp    c00115fc <KeGetProcessEnvPair(Process*, int)+0x5d>
c00115ec:	8b 35 84 be 02 c0    	mov    esi,DWORD PTR ds:0xc002be84
c00115f2:	03 0e                	add    ecx,DWORD PTR [esi]
c00115f4:	39 d1                	cmp    ecx,edx
c00115f6:	7e 16                	jle    c001160e <KeGetProcessEnvPair(Process*, int)+0x6f>
c00115f8:	29 c2                	sub    edx,eax
c00115fa:	29 fa                	sub    edx,edi
c00115fc:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00115ff:	8d 14 d0             	lea    edx,[eax+edx*8]
c0011602:	8b 02                	mov    eax,DWORD PTR [edx]
c0011604:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0011607:	89 03                	mov    DWORD PTR [ebx],eax
c0011609:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c001160c:	eb 1d                	jmp    c001162b <KeGetProcessEnvPair(Process*, int)+0x8c>
c001160e:	83 ec 0c             	sub    esp,0xc
c0011611:	68 26 25 02 c0       	push   0xc0022526
c0011616:	e8 ac 00 00 00       	call   c00116c7 <KePanic(char const*)>
c001161b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0011621:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0011628:	83 c4 10             	add    esp,0x10
c001162b:	89 d8                	mov    eax,ebx
c001162d:	5b                   	pop    ebx
c001162e:	5e                   	pop    esi
c001162f:	5f                   	pop    edi
c0011630:	c2 04 00             	ret    0x4

c0011633 <CPU::current()>:
c0011633:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0011638:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001163e:	c3                   	ret    

c001163f <operator new(unsigned long)>:
c001163f:	e9 a2 64 ff ff       	jmp    c0007ae6 <malloc>

c0011644 <operator delete(void*)>:
c0011644:	e9 bd 64 ff ff       	jmp    c0007b06 <rfree>

c0011649 <disableIRQs()>:
c0011649:	fa                   	cli    
c001164a:	c3                   	ret    

c001164b <enableIRQs()>:
c001164b:	fb                   	sti    
c001164c:	c3                   	ret    

c001164d <lockScheduler()>:
c001164d:	fa                   	cli    
c001164e:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0011654:	c3                   	ret    

c0011655 <unlockScheduler()>:
c0011655:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001165a:	48                   	dec    eax
c001165b:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0011660:	75 01                	jne    c0011663 <unlockScheduler()+0xe>
c0011662:	fb                   	sti    
c0011663:	c3                   	ret    

c0011664 <lockStuff()>:
c0011664:	fa                   	cli    
c0011665:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c001166b:	ff 05 c4 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c4
c0011671:	c3                   	ret    

c0011672 <unlockStuff()>:
c0011672:	83 ec 0c             	sub    esp,0xc
c0011675:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c001167a:	48                   	dec    eax
c001167b:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c0011680:	75 18                	jne    c001169a <unlockStuff()+0x28>
c0011682:	83 3d c0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6c0,0x0
c0011689:	74 0f                	je     c001169a <unlockStuff()+0x28>
c001168b:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c0011695:	e8 12 4b 00 00       	call   c00161ac <schedule()>
c001169a:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001169f:	48                   	dec    eax
c00116a0:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00116a5:	75 01                	jne    c00116a8 <unlockStuff()+0x36>
c00116a7:	fb                   	sti    
c00116a8:	83 c4 0c             	add    esp,0xc
c00116ab:	c3                   	ret    

c00116ac <Virt::getAKernelVAS()>:
c00116ac:	a1 b0 6f 02 c0       	mov    eax,ds:0xc0026fb0
c00116b1:	c3                   	ret    

c00116b2 <__not_memcpy>:
c00116b2:	57                   	push   edi
c00116b3:	56                   	push   esi
c00116b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00116b8:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00116bc:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00116c0:	89 c7                	mov    edi,eax
c00116c2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00116c4:	5e                   	pop    esi
c00116c5:	5f                   	pop    edi
c00116c6:	c3                   	ret    

c00116c7 <KePanic(char const*)>:
c00116c7:	c6 05 88 be 02 c0 01 	mov    BYTE PTR ds:0xc002be88,0x1
c00116ce:	e9 7f 6a 00 00       	jmp    c0018152 <HalPanic(char const*)>

c00116d3 <KePowerThread(void*)>:
c00116d3:	83 ec 0c             	sub    esp,0xc
c00116d6:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00116db:	48                   	dec    eax
c00116dc:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00116e1:	75 01                	jne    c00116e4 <KePowerThread(void*)+0x11>
c00116e3:	fb                   	sti    
c00116e4:	83 ec 0c             	sub    esp,0xc
c00116e7:	c6 05 a0 be 02 c0 00 	mov    BYTE PTR ds:0xc002bea0,0x0
c00116ee:	6a 0a                	push   0xa
c00116f0:	e8 fb 4d 00 00       	call   c00164f0 <sleep(unsigned int)>
c00116f5:	83 05 e4 be 02 c0 0a 	add    DWORD PTR ds:0xc002bee4,0xa
c00116fc:	83 c4 10             	add    esp,0x10
c00116ff:	eb e3                	jmp    c00116e4 <KePowerThread(void*)+0x11>

c0011701 <KeChangePowerSettings(PowerSettings)>:
c0011701:	57                   	push   edi
c0011702:	b9 09 00 00 00       	mov    ecx,0x9
c0011707:	56                   	push   esi
c0011708:	bf c0 be 02 c0       	mov    edi,0xc002bec0
c001170d:	fc                   	cld    
c001170e:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0011712:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0011714:	5e                   	pop    esi
c0011715:	5f                   	pop    edi
c0011716:	c3                   	ret    

c0011717 <KeUserIOReceived()>:
c0011717:	c7 05 e4 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bee4,0x0
c0011721:	c3                   	ret    

c0011722 <KeHandlePowerButton()>:
c0011722:	83 ec 0c             	sub    esp,0xc
c0011725:	a1 c0 be 02 c0       	mov    eax,ds:0xc002bec0
c001172a:	83 f8 02             	cmp    eax,0x2
c001172d:	75 10                	jne    c001173f <KeHandlePowerButton()+0x1d>
c001172f:	83 ec 0c             	sub    esp,0xc
c0011732:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0011738:	e8 1d 5a ff ff       	call   c000715a <Computer::shutdown()>
c001173d:	eb 11                	jmp    c0011750 <KeHandlePowerButton()+0x2e>
c001173f:	48                   	dec    eax
c0011740:	75 11                	jne    c0011753 <KeHandlePowerButton()+0x31>
c0011742:	83 ec 0c             	sub    esp,0xc
c0011745:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c001174b:	e8 3a 5a ff ff       	call   c000718a <Computer::sleep()>
c0011750:	83 c4 10             	add    esp,0x10
c0011753:	83 c4 0c             	add    esp,0xc
c0011756:	c3                   	ret    

c0011757 <KeHandleSleepButton()>:
c0011757:	83 ec 0c             	sub    esp,0xc
c001175a:	a1 c4 be 02 c0       	mov    eax,ds:0xc002bec4
c001175f:	83 f8 02             	cmp    eax,0x2
c0011762:	75 10                	jne    c0011774 <KeHandleSleepButton()+0x1d>
c0011764:	83 ec 0c             	sub    esp,0xc
c0011767:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c001176d:	e8 e8 59 ff ff       	call   c000715a <Computer::shutdown()>
c0011772:	eb 11                	jmp    c0011785 <KeHandleSleepButton()+0x2e>
c0011774:	48                   	dec    eax
c0011775:	75 11                	jne    c0011788 <KeHandleSleepButton()+0x31>
c0011777:	83 ec 0c             	sub    esp,0xc
c001177a:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0011780:	e8 05 5a ff ff       	call   c000718a <Computer::sleep()>
c0011785:	83 c4 10             	add    esp,0x10
c0011788:	83 c4 0c             	add    esp,0xc
c001178b:	c3                   	ret    

c001178c <KeSetupPowerManager()>:
c001178c:	83 ec 0c             	sub    esp,0xc
c001178f:	c7 05 e4 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bee4,0x0
c0011799:	68 f0 00 00 00       	push   0xf0
c001179e:	c6 05 a0 be 02 c0 00 	mov    BYTE PTR ds:0xc002bea0,0x0
c00117a5:	6a 00                	push   0x0
c00117a7:	68 d3 16 01 c0       	push   0xc00116d3
c00117ac:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c00117b2:	e8 a5 47 00 00       	call   c0015f5c <Process::createThread(void (*)(void*), void*, int)>
c00117b7:	c7 05 c0 be 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc002bec0,0x2
c00117c1:	c7 05 c4 be 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002bec4,0x1
c00117cb:	c7 05 c8 be 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc002bec8,0x3
c00117d5:	c7 05 cc be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002becc,0x0
c00117df:	c7 05 d8 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bed8,0x0
c00117e9:	c7 05 d0 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bed0,0x0
c00117f3:	c7 05 dc be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bedc,0x0
c00117fd:	c7 05 d4 be 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc002bed4,0x3c
c0011807:	c7 05 e0 be 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc002bee0,0x3c
c0011811:	83 c4 1c             	add    esp,0x1c
c0011814:	c3                   	ret    

c0011815 <KeRand()>:
c0011815:	69 05 e8 be 02 c0 75 28 00 00 	imul   eax,DWORD PTR ds:0xc002bee8,0x2875
c001181f:	69 0d ec be 02 c0 75 b1 e7 a2 	imul   ecx,DWORD PTR ds:0xc002beec,0xa2e7b175
c0011829:	53                   	push   ebx
c001182a:	01 c1                	add    ecx,eax
c001182c:	b8 75 b1 e7 a2       	mov    eax,0xa2e7b175
c0011831:	f7 25 e8 be 02 c0    	mul    DWORD PTR ds:0xc002bee8
c0011837:	01 ca                	add    edx,ecx
c0011839:	05 ef 04 b5 00       	add    eax,0xb504ef
c001183e:	83 d2 00             	adc    edx,0x0
c0011841:	a3 e8 be 02 c0       	mov    ds:0xc002bee8,eax
c0011846:	0f b7 da             	movzx  ebx,dx
c0011849:	89 da                	mov    edx,ebx
c001184b:	89 1d ec be 02 c0    	mov    DWORD PTR ds:0xc002beec,ebx
c0011851:	0f ac d0 0e          	shrd   eax,edx,0xe
c0011855:	5b                   	pop    ebx
c0011856:	c3                   	ret    

c0011857 <KeSeedRand(unsigned int)>:
c0011857:	53                   	push   ebx
c0011858:	83 ec 08             	sub    esp,0x8
c001185b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001185f:	e8 0d 6c 00 00       	call   c0018471 <HalGetRand()>
c0011864:	c7 05 ec be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002beec,0x0
c001186e:	31 d8                	xor    eax,ebx
c0011870:	a3 e8 be 02 c0       	mov    ds:0xc002bee8,eax
c0011875:	e8 9b ff ff ff       	call   c0011815 <KeRand()>
c001187a:	83 c4 08             	add    esp,0x8
c001187d:	5b                   	pop    ebx
c001187e:	eb 95                	jmp    c0011815 <KeRand()>

c0011880 <KeInitRand()>:
c0011880:	83 ec 0c             	sub    esp,0xc
c0011883:	e8 de 69 00 00       	call   c0018266 <HalQueryPerformanceCounter()>
c0011888:	0f 20 da             	mov    edx,cr3
c001188b:	0f 22 da             	mov    cr3,edx
c001188e:	0f 20 da             	mov    edx,cr3
c0011891:	0f 22 da             	mov    cr3,edx
c0011894:	0f 20 da             	mov    edx,cr3
c0011897:	0f 22 da             	mov    cr3,edx
c001189a:	0f 20 da             	mov    edx,cr3
c001189d:	0f 22 da             	mov    cr3,edx
c00118a0:	83 ec 0c             	sub    esp,0xc
c00118a3:	35 03 8a 95 38       	xor    eax,0x38958a03
c00118a8:	50                   	push   eax
c00118a9:	e8 a9 ff ff ff       	call   c0011857 <KeSeedRand(unsigned int)>
c00118ae:	83 c4 1c             	add    esp,0x1c
c00118b1:	c3                   	ret    
c00118b2:	66 90                	xchg   ax,ax

c00118b4 <KeResolveCompatibilitySymbol(char*)>:
c00118b4:	83 ec 0c             	sub    esp,0xc
c00118b7:	83 ec 08             	sub    esp,0x8
c00118ba:	68 40 25 02 c0       	push   0xc0022540
c00118bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00118c3:	e8 88 ee fe ff       	call   c0000750 <strcmp>
c00118c8:	83 c4 10             	add    esp,0x10
c00118cb:	85 c0                	test   eax,eax
c00118cd:	0f 94 c0             	sete   al
c00118d0:	0f b6 c0             	movzx  eax,al
c00118d3:	85 c0                	test   eax,eax
c00118d5:	74 0d                	je     c00118e4 <KeResolveCompatibilitySymbol(char*)+0x30>
c00118d7:	b8 b8 6e 02 c0       	mov    eax,0xc0026eb8
c00118dc:	e9 8b 01 00 00       	jmp    c0011a6c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00118e1:	8d 76 00             	lea    esi,[esi+0x0]
c00118e4:	83 ec 08             	sub    esp,0x8
c00118e7:	68 49 25 02 c0       	push   0xc0022549
c00118ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00118f0:	e8 5b ee fe ff       	call   c0000750 <strcmp>
c00118f5:	83 c4 10             	add    esp,0x10
c00118f8:	85 c0                	test   eax,eax
c00118fa:	0f 94 c0             	sete   al
c00118fd:	0f b6 c0             	movzx  eax,al
c0011900:	85 c0                	test   eax,eax
c0011902:	74 0c                	je     c0011910 <KeResolveCompatibilitySymbol(char*)+0x5c>
c0011904:	b8 20 f8 01 c0       	mov    eax,0xc001f820
c0011909:	e9 5e 01 00 00       	jmp    c0011a6c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001190e:	66 90                	xchg   ax,ax
c0011910:	83 ec 08             	sub    esp,0x8
c0011913:	68 53 25 02 c0       	push   0xc0022553
c0011918:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001191c:	e8 2f ee fe ff       	call   c0000750 <strcmp>
c0011921:	83 c4 10             	add    esp,0x10
c0011924:	85 c0                	test   eax,eax
c0011926:	0f 94 c0             	sete   al
c0011929:	0f b6 c0             	movzx  eax,al
c001192c:	85 c0                	test   eax,eax
c001192e:	74 0c                	je     c001193c <KeResolveCompatibilitySymbol(char*)+0x88>
c0011930:	b8 54 f5 01 c0       	mov    eax,0xc001f554
c0011935:	e9 32 01 00 00       	jmp    c0011a6c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001193a:	66 90                	xchg   ax,ax
c001193c:	83 ec 08             	sub    esp,0x8
c001193f:	68 5c 25 02 c0       	push   0xc002255c
c0011944:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011948:	e8 03 ee fe ff       	call   c0000750 <strcmp>
c001194d:	83 c4 10             	add    esp,0x10
c0011950:	85 c0                	test   eax,eax
c0011952:	0f 94 c0             	sete   al
c0011955:	0f b6 c0             	movzx  eax,al
c0011958:	85 c0                	test   eax,eax
c001195a:	74 0c                	je     c0011968 <KeResolveCompatibilitySymbol(char*)+0xb4>
c001195c:	b8 c7 16 01 c0       	mov    eax,0xc00116c7
c0011961:	e9 06 01 00 00       	jmp    c0011a6c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011966:	66 90                	xchg   ax,ax
c0011968:	83 ec 08             	sub    esp,0x8
c001196b:	68 6f 25 02 c0       	push   0xc002256f
c0011970:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011974:	e8 d7 ed fe ff       	call   c0000750 <strcmp>
c0011979:	83 c4 10             	add    esp,0x10
c001197c:	85 c0                	test   eax,eax
c001197e:	0f 94 c0             	sete   al
c0011981:	0f b6 c0             	movzx  eax,al
c0011984:	85 c0                	test   eax,eax
c0011986:	74 0c                	je     c0011994 <KeResolveCompatibilitySymbol(char*)+0xe0>
c0011988:	b8 c7 0f 01 c0       	mov    eax,0xc0010fc7
c001198d:	e9 da 00 00 00       	jmp    c0011a6c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011992:	66 90                	xchg   ax,ax
c0011994:	83 ec 08             	sub    esp,0x8
c0011997:	68 8c 25 02 c0       	push   0xc002258c
c001199c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00119a0:	e8 ab ed fe ff       	call   c0000750 <strcmp>
c00119a5:	83 c4 10             	add    esp,0x10
c00119a8:	85 c0                	test   eax,eax
c00119aa:	0f 94 c0             	sete   al
c00119ad:	0f b6 c0             	movzx  eax,al
c00119b0:	85 c0                	test   eax,eax
c00119b2:	74 0c                	je     c00119c0 <KeResolveCompatibilitySymbol(char*)+0x10c>
c00119b4:	b8 20 f9 01 c0       	mov    eax,0xc001f920
c00119b9:	e9 ae 00 00 00       	jmp    c0011a6c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00119be:	66 90                	xchg   ax,ax
c00119c0:	83 ec 08             	sub    esp,0x8
c00119c3:	68 96 25 02 c0       	push   0xc0022596
c00119c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00119cc:	e8 7f ed fe ff       	call   c0000750 <strcmp>
c00119d1:	83 c4 10             	add    esp,0x10
c00119d4:	85 c0                	test   eax,eax
c00119d6:	0f 94 c0             	sete   al
c00119d9:	0f b6 c0             	movzx  eax,al
c00119dc:	85 c0                	test   eax,eax
c00119de:	74 0c                	je     c00119ec <KeResolveCompatibilitySymbol(char*)+0x138>
c00119e0:	b8 a0 f6 01 c0       	mov    eax,0xc001f6a0
c00119e5:	e9 82 00 00 00       	jmp    c0011a6c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00119ea:	66 90                	xchg   ax,ax
c00119ec:	83 ec 08             	sub    esp,0x8
c00119ef:	68 9f 25 02 c0       	push   0xc002259f
c00119f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00119f8:	e8 53 ed fe ff       	call   c0000750 <strcmp>
c00119fd:	83 c4 10             	add    esp,0x10
c0011a00:	85 c0                	test   eax,eax
c0011a02:	0f 94 c0             	sete   al
c0011a05:	0f b6 c0             	movzx  eax,al
c0011a08:	85 c0                	test   eax,eax
c0011a0a:	74 08                	je     c0011a14 <KeResolveCompatibilitySymbol(char*)+0x160>
c0011a0c:	b8 bc 6e 02 c0       	mov    eax,0xc0026ebc
c0011a11:	eb 59                	jmp    c0011a6c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011a13:	90                   	nop
c0011a14:	83 ec 08             	sub    esp,0x8
c0011a17:	68 b7 25 02 c0       	push   0xc00225b7
c0011a1c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011a20:	e8 2b ed fe ff       	call   c0000750 <strcmp>
c0011a25:	83 c4 10             	add    esp,0x10
c0011a28:	85 c0                	test   eax,eax
c0011a2a:	0f 94 c0             	sete   al
c0011a2d:	0f b6 c0             	movzx  eax,al
c0011a30:	85 c0                	test   eax,eax
c0011a32:	74 08                	je     c0011a3c <KeResolveCompatibilitySymbol(char*)+0x188>
c0011a34:	b8 bc 6e 02 c0       	mov    eax,0xc0026ebc
c0011a39:	eb 31                	jmp    c0011a6c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011a3b:	90                   	nop
c0011a3c:	83 ec 08             	sub    esp,0x8
c0011a3f:	68 c4 25 02 c0       	push   0xc00225c4
c0011a44:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011a48:	e8 03 ed fe ff       	call   c0000750 <strcmp>
c0011a4d:	83 c4 10             	add    esp,0x10
c0011a50:	85 c0                	test   eax,eax
c0011a52:	0f 94 c0             	sete   al
c0011a55:	0f b6 c0             	movzx  eax,al
c0011a58:	85 c0                	test   eax,eax
c0011a5a:	74 08                	je     c0011a64 <KeResolveCompatibilitySymbol(char*)+0x1b0>
c0011a5c:	b8 bd 6e 02 c0       	mov    eax,0xc0026ebd
c0011a61:	eb 09                	jmp    c0011a6c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011a63:	90                   	nop
c0011a64:	b8 00 00 00 00       	mov    eax,0x0
c0011a69:	8d 76 00             	lea    esi,[esi+0x0]
c0011a6c:	83 c4 0c             	add    esp,0xc
c0011a6f:	c3                   	ret    

c0011a70 <KiSigKill(int)>:
c0011a70:	83 ec 0c             	sub    esp,0xc
c0011a73:	6a 00                	push   0x0
c0011a75:	6a 00                	push   0x0
c0011a77:	6a ff                	push   0xffffffff
c0011a79:	6a 01                	push   0x1
c0011a7b:	e8 d2 35 01 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0011a80:	83 c4 1c             	add    esp,0x1c
c0011a83:	c3                   	ret    

c0011a84 <KiDefaultSignalHandlerIgnore(int)>:
c0011a84:	c3                   	ret    

c0011a85 <KiDefaultSignalHandlerPause(int)>:
c0011a85:	57                   	push   edi
c0011a86:	b9 07 00 00 00       	mov    ecx,0x7
c0011a8b:	56                   	push   esi
c0011a8c:	be 0d 26 02 c0       	mov    esi,0xc002260d
c0011a91:	83 ec 24             	sub    esp,0x24
c0011a94:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0011a98:	fc                   	cld    
c0011a99:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0011a9b:	8d 44 24 04          	lea    eax,[esp+0x4]
c0011a9f:	50                   	push   eax
c0011aa0:	6a 00                	push   0x0
c0011aa2:	6a 00                	push   0x0
c0011aa4:	6a 27                	push   0x27
c0011aa6:	e8 a7 35 01 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0011aab:	83 c4 34             	add    esp,0x34
c0011aae:	5e                   	pop    esi
c0011aaf:	5f                   	pop    edi
c0011ab0:	c3                   	ret    

c0011ab1 <KiDefaultSignalHandlerResume(int)>:
c0011ab1:	57                   	push   edi
c0011ab2:	b9 1d 00 00 00       	mov    ecx,0x1d
c0011ab7:	56                   	push   esi
c0011ab8:	be 29 26 02 c0       	mov    esi,0xc0022629
c0011abd:	83 ec 24             	sub    esp,0x24
c0011ac0:	8d 7c 24 03          	lea    edi,[esp+0x3]
c0011ac4:	fc                   	cld    
c0011ac5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011ac7:	8d 44 24 03          	lea    eax,[esp+0x3]
c0011acb:	50                   	push   eax
c0011acc:	6a 00                	push   0x0
c0011ace:	6a 00                	push   0x0
c0011ad0:	6a 27                	push   0x27
c0011ad2:	e8 7b 35 01 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0011ad7:	83 c4 34             	add    esp,0x34
c0011ada:	5e                   	pop    esi
c0011adb:	5f                   	pop    edi
c0011adc:	c3                   	ret    

c0011add <KeDeinitSignals(SigHandlerBlock*)>:
c0011add:	e9 14 60 ff ff       	jmp    c0007af6 <free>

c0011ae2 <KeInitSignals()>:
c0011ae2:	53                   	push   ebx
c0011ae3:	83 ec 14             	sub    esp,0x14
c0011ae6:	68 c8 00 00 00       	push   0xc8
c0011aeb:	e8 f6 5f ff ff       	call   c0007ae6 <malloc>
c0011af0:	83 c4 0c             	add    esp,0xc
c0011af3:	c7 80 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xbc],0x0
c0011afd:	c7 80 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc0],0x0
c0011b07:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0011b0e:	89 c3                	mov    ebx,eax
c0011b10:	6a 20                	push   0x20
c0011b12:	8d 80 9c 00 00 00    	lea    eax,[eax+0x9c]
c0011b18:	6a 00                	push   0x0
c0011b1a:	50                   	push   eax
c0011b1b:	e8 d0 e9 fe ff       	call   c00004f0 <memset>
c0011b20:	83 c4 0c             	add    esp,0xc
c0011b23:	6a 44                	push   0x44
c0011b25:	6a 00                	push   0x0
c0011b27:	53                   	push   ebx
c0011b28:	e8 c3 e9 fe ff       	call   c00004f0 <memset>
c0011b2d:	89 d8                	mov    eax,ebx
c0011b2f:	83 c4 18             	add    esp,0x18
c0011b32:	5b                   	pop    ebx
c0011b33:	c3                   	ret    

c0011b34 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c0011b34:	53                   	push   ebx
c0011b35:	b8 01 00 00 00       	mov    eax,0x1
c0011b3a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0011b3e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011b42:	83 f9 10             	cmp    ecx,0x10
c0011b45:	7f 21                	jg     c0011b68 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c0011b47:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c0011b4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011b4e:	89 03                	mov    DWORD PTR [ebx],eax
c0011b50:	b8 01 00 00 00       	mov    eax,0x1
c0011b55:	d3 e0                	shl    eax,cl
c0011b57:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0011b5b:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0011b5e:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c0011b66:	31 c0                	xor    eax,eax
c0011b68:	5b                   	pop    ebx
c0011b69:	c3                   	ret    

c0011b6a <KeRaiseSignal(SigHandlerBlock*, int)>:
c0011b6a:	55                   	push   ebp
c0011b6b:	57                   	push   edi
c0011b6c:	bf 08 00 00 00       	mov    edi,0x8
c0011b71:	56                   	push   esi
c0011b72:	53                   	push   ebx
c0011b73:	83 ec 18             	sub    esp,0x18
c0011b76:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011b7a:	68 46 26 02 c0       	push   0xc0022646
c0011b7f:	e8 f1 8d ff ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c0011b84:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0011b8b:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c0011b91:	83 c4 10             	add    esp,0x10
c0011b94:	31 c9                	xor    ecx,ecx
c0011b96:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0011b9a:	99                   	cdq    
c0011b9b:	f7 ff                	idiv   edi
c0011b9d:	8d 42 24             	lea    eax,[edx+0x24]
c0011ba0:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c0011ba4:	85 f6                	test   esi,esi
c0011ba6:	75 1a                	jne    c0011bc2 <KeRaiseSignal(SigHandlerBlock*, int)+0x58>
c0011ba8:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0011bac:	89 4c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],ecx
c0011bb0:	50                   	push   eax
c0011bb1:	50                   	push   eax
c0011bb2:	52                   	push   edx
c0011bb3:	68 57 26 02 c0       	push   0xc0022657
c0011bb8:	e8 b8 8d ff ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c0011bbd:	83 c4 10             	add    esp,0x10
c0011bc0:	eb 1b                	jmp    c0011bdd <KeRaiseSignal(SigHandlerBlock*, int)+0x73>
c0011bc2:	41                   	inc    ecx
c0011bc3:	83 f9 08             	cmp    ecx,0x8
c0011bc6:	75 ce                	jne    c0011b96 <KeRaiseSignal(SigHandlerBlock*, int)+0x2c>
c0011bc8:	83 ec 0c             	sub    esp,0xc
c0011bcb:	be 01 00 00 00       	mov    esi,0x1
c0011bd0:	68 78 26 02 c0       	push   0xc0022678
c0011bd5:	e8 9b 8d ff ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c0011bda:	83 c4 10             	add    esp,0x10
c0011bdd:	83 c4 0c             	add    esp,0xc
c0011be0:	89 f0                	mov    eax,esi
c0011be2:	5b                   	pop    ebx
c0011be3:	5e                   	pop    esi
c0011be4:	5f                   	pop    edi
c0011be5:	5d                   	pop    ebp
c0011be6:	c3                   	ret    

c0011be7 <KeCheckSignal(SigHandlerBlock*, int*)>:
c0011be7:	55                   	push   ebp
c0011be8:	57                   	push   edi
c0011be9:	56                   	push   esi
c0011bea:	53                   	push   ebx
c0011beb:	51                   	push   ecx
c0011bec:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0011bf0:	85 db                	test   ebx,ebx
c0011bf2:	0f 84 bc 00 00 00    	je     c0011cb4 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0011bf8:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c0011bff:	0f 84 af 00 00 00    	je     c0011cb4 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0011c05:	31 c9                	xor    ecx,ecx
c0011c07:	bf 08 00 00 00       	mov    edi,0x8
c0011c0c:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c0011c12:	8d 04 0e             	lea    eax,[esi+ecx*1]
c0011c15:	99                   	cdq    
c0011c16:	f7 ff                	idiv   edi
c0011c18:	8b ac 93 9c 00 00 00 	mov    ebp,DWORD PTR [ebx+edx*4+0x9c]
c0011c1f:	85 ed                	test   ebp,ebp
c0011c21:	0f 84 9e 00 00 00    	je     c0011cc5 <KeCheckSignal(SigHandlerBlock*, int*)+0xde>
c0011c27:	89 e9                	mov    ecx,ebp
c0011c29:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c0011c2f:	bf 01 00 00 00       	mov    edi,0x1
c0011c34:	89 04 24             	mov    DWORD PTR [esp],eax
c0011c37:	d3 e7                	shl    edi,cl
c0011c39:	31 c9                	xor    ecx,ecx
c0011c3b:	b8 01 00 00 00       	mov    eax,0x1
c0011c40:	d3 e0                	shl    eax,cl
c0011c42:	85 04 24             	test   DWORD PTR [esp],eax
c0011c45:	74 06                	je     c0011c4d <KeCheckSignal(SigHandlerBlock*, int*)+0x66>
c0011c47:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c0011c4b:	75 67                	jne    c0011cb4 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0011c4d:	41                   	inc    ecx
c0011c4e:	83 f9 11             	cmp    ecx,0x11
c0011c51:	75 e8                	jne    c0011c3b <KeCheckSignal(SigHandlerBlock*, int*)+0x54>
c0011c53:	46                   	inc    esi
c0011c54:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0011c57:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0011c5d:	09 f8                	or     eax,edi
c0011c5f:	c7 84 93 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+edx*4+0x9c],0x0
c0011c6a:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c0011c70:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c0011c77:	31 c0                	xor    eax,eax
c0011c79:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c0011c81:	74 09                	je     c0011c8c <KeCheckSignal(SigHandlerBlock*, int*)+0xa5>
c0011c83:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0011c8a:	eb 06                	jmp    c0011c92 <KeCheckSignal(SigHandlerBlock*, int*)+0xab>
c0011c8c:	40                   	inc    eax
c0011c8d:	83 f8 08             	cmp    eax,0x8
c0011c90:	75 e7                	jne    c0011c79 <KeCheckSignal(SigHandlerBlock*, int*)+0x92>
c0011c92:	8b 04 ab             	mov    eax,DWORD PTR [ebx+ebp*4]
c0011c95:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011c99:	83 fd 09             	cmp    ebp,0x9
c0011c9c:	89 2a                	mov    DWORD PTR [edx],ebp
c0011c9e:	75 07                	jne    c0011ca7 <KeCheckSignal(SigHandlerBlock*, int*)+0xc0>
c0011ca0:	b8 70 1a 01 c0       	mov    eax,0xc0011a70
c0011ca5:	eb 31                	jmp    c0011cd8 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011ca7:	83 f8 01             	cmp    eax,0x1
c0011caa:	75 0c                	jne    c0011cb8 <KeCheckSignal(SigHandlerBlock*, int*)+0xd1>
c0011cac:	f7 d7                	not    edi
c0011cae:	21 bb c0 00 00 00    	and    DWORD PTR [ebx+0xc0],edi
c0011cb4:	31 c0                	xor    eax,eax
c0011cb6:	eb 20                	jmp    c0011cd8 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011cb8:	85 c0                	test   eax,eax
c0011cba:	75 1c                	jne    c0011cd8 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011cbc:	8b 04 ad 80 3e 02 c0 	mov    eax,DWORD PTR [ebp*4-0x3ffdc180]
c0011cc3:	eb 13                	jmp    c0011cd8 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011cc5:	46                   	inc    esi
c0011cc6:	41                   	inc    ecx
c0011cc7:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0011ccd:	83 f9 08             	cmp    ecx,0x8
c0011cd0:	0f 85 36 ff ff ff    	jne    c0011c0c <KeCheckSignal(SigHandlerBlock*, int*)+0x25>
c0011cd6:	eb dc                	jmp    c0011cb4 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0011cd8:	5a                   	pop    edx
c0011cd9:	5b                   	pop    ebx
c0011cda:	5e                   	pop    esi
c0011cdb:	5f                   	pop    edi
c0011cdc:	5d                   	pop    ebp
c0011cdd:	c3                   	ret    

c0011cde <KiCheckSignalZ>:
c0011cde:	83 ec 10             	sub    esp,0x10
c0011ce1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0011ce5:	50                   	push   eax
c0011ce6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011ceb:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011cee:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0011cf4:	e8 ee fe ff ff       	call   c0011be7 <KeCheckSignal(SigHandlerBlock*, int*)>
c0011cf9:	5a                   	pop    edx
c0011cfa:	31 d2                	xor    edx,edx
c0011cfc:	59                   	pop    ecx
c0011cfd:	85 c0                	test   eax,eax
c0011cff:	74 19                	je     c0011d1a <KiCheckSignalZ+0x3c>
c0011d01:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0011d07:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0011d0a:	89 02                	mov    DWORD PTR [edx],eax
c0011d0c:	c7 42 04 00 00 00 00 	mov    DWORD PTR [edx+0x4],0x0
c0011d13:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011d17:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0011d1a:	89 d0                	mov    eax,edx
c0011d1c:	83 c4 10             	add    esp,0x10
c0011d1f:	c3                   	ret    

c0011d20 <KeCompleteSignal(SigHandlerBlock*, int)>:
c0011d20:	56                   	push   esi
c0011d21:	53                   	push   ebx
c0011d22:	bb 01 00 00 00       	mov    ebx,0x1
c0011d27:	52                   	push   edx
c0011d28:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0011d2c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011d30:	d3 e3                	shl    ebx,cl
c0011d32:	83 f9 10             	cmp    ecx,0x10
c0011d35:	7f 08                	jg     c0011d3f <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c0011d37:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c0011d3d:	75 10                	jne    c0011d4f <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c0011d3f:	83 ec 0c             	sub    esp,0xc
c0011d42:	68 89 26 02 c0       	push   0xc0022689
c0011d47:	e8 7b f9 ff ff       	call   c00116c7 <KePanic(char const*)>
c0011d4c:	83 c4 10             	add    esp,0x10
c0011d4f:	f7 d3                	not    ebx
c0011d51:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c0011d57:	58                   	pop    eax
c0011d58:	5b                   	pop    ebx
c0011d59:	5e                   	pop    esi
c0011d5a:	c3                   	ret    

c0011d5b <KiFinishSignalZ>:
c0011d5b:	53                   	push   ebx
c0011d5c:	83 ec 10             	sub    esp,0x10
c0011d5f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0011d63:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c0011d66:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011d6b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011d6e:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0011d74:	e8 a7 ff ff ff       	call   c0011d20 <KeCompleteSignal(SigHandlerBlock*, int)>
c0011d79:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0011d7f:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0011d86:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0011d8d:	83 c4 18             	add    esp,0x18
c0011d90:	5b                   	pop    ebx
c0011d91:	c3                   	ret    

c0011d92 <SysSeekDir(regs*)>:
c0011d92:	31 c0                	xor    eax,eax
c0011d94:	31 d2                	xor    edx,edx
c0011d96:	c3                   	ret    

c0011d97 <SysTellDir(regs*)>:
c0011d97:	31 c0                	xor    eax,eax
c0011d99:	31 d2                	xor    edx,edx
c0011d9b:	c3                   	ret    

c0011d9c <SysVerify(regs*)>:
c0011d9c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011da0:	31 d2                	xor    edx,edx
c0011da2:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011da5:	c3                   	ret    

c0011da6 <SysGetArgc(regs*)>:
c0011da6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011dab:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011dae:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c0011db4:	89 c2                	mov    edx,eax
c0011db6:	c1 fa 1f             	sar    edx,0x1f
c0011db9:	c3                   	ret    

c0011dba <SysTTYName(regs*)>:
c0011dba:	b8 01 00 00 00       	mov    eax,0x1
c0011dbf:	31 d2                	xor    edx,edx
c0011dc1:	c3                   	ret    

c0011dc2 <SysFormatDisk(regs*)>:
c0011dc2:	56                   	push   esi
c0011dc3:	53                   	push   ebx
c0011dc4:	83 ec 04             	sub    esp,0x4
c0011dc7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011dcb:	8b 1d 04 94 02 c0    	mov    ebx,DWORD PTR ds:0xc0029404
c0011dd1:	eb 28                	jmp    c0011dfb <SysFormatDisk(regs*)+0x39>
c0011dd3:	83 ec 0c             	sub    esp,0xc
c0011dd6:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0011dd9:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c0011ddc:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011dde:	51                   	push   ecx
c0011ddf:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c0011de2:	51                   	push   ecx
c0011de3:	50                   	push   eax
c0011de4:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c0011deb:	50                   	push   eax
c0011dec:	53                   	push   ebx
c0011ded:	ff 52 4c             	call   DWORD PTR [edx+0x4c]
c0011df0:	83 c4 20             	add    esp,0x20
c0011df3:	83 f8 08             	cmp    eax,0x8
c0011df6:	75 14                	jne    c0011e0c <SysFormatDisk(regs*)+0x4a>
c0011df8:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0011dfb:	85 db                	test   ebx,ebx
c0011dfd:	75 d4                	jne    c0011dd3 <SysFormatDisk(regs*)+0x11>
c0011dff:	83 c4 04             	add    esp,0x4
c0011e02:	b8 03 00 00 00       	mov    eax,0x3
c0011e07:	31 d2                	xor    edx,edx
c0011e09:	5b                   	pop    ebx
c0011e0a:	5e                   	pop    esi
c0011e0b:	c3                   	ret    
c0011e0c:	85 c0                	test   eax,eax
c0011e0e:	74 1f                	je     c0011e2f <SysFormatDisk(regs*)+0x6d>
c0011e10:	83 f8 09             	cmp    eax,0x9
c0011e13:	74 0d                	je     c0011e22 <SysFormatDisk(regs*)+0x60>
c0011e15:	83 c4 04             	add    esp,0x4
c0011e18:	b8 02 00 00 00       	mov    eax,0x2
c0011e1d:	31 d2                	xor    edx,edx
c0011e1f:	5b                   	pop    ebx
c0011e20:	5e                   	pop    esi
c0011e21:	c3                   	ret    
c0011e22:	83 c4 04             	add    esp,0x4
c0011e25:	b8 01 00 00 00       	mov    eax,0x1
c0011e2a:	31 d2                	xor    edx,edx
c0011e2c:	5b                   	pop    ebx
c0011e2d:	5e                   	pop    esi
c0011e2e:	c3                   	ret    
c0011e2f:	83 c4 04             	add    esp,0x4
c0011e32:	31 c0                	xor    eax,eax
c0011e34:	31 d2                	xor    edx,edx
c0011e36:	5b                   	pop    ebx
c0011e37:	5e                   	pop    esi
c0011e38:	c3                   	ret    

c0011e39 <SysSetDiskVolumeLabel(regs*)>:
c0011e39:	56                   	push   esi
c0011e3a:	53                   	push   ebx
c0011e3b:	83 ec 04             	sub    esp,0x4
c0011e3e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011e42:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0011e45:	83 f8 19             	cmp    eax,0x19
c0011e48:	77 33                	ja     c0011e7d <SysSetDiskVolumeLabel(regs*)+0x44>
c0011e4a:	8b 0c 85 80 b8 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd4780]
c0011e51:	85 c9                	test   ecx,ecx
c0011e53:	74 28                	je     c0011e7d <SysSetDiskVolumeLabel(regs*)+0x44>
c0011e55:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c0011e58:	85 db                	test   ebx,ebx
c0011e5a:	74 21                	je     c0011e7d <SysSetDiskVolumeLabel(regs*)+0x44>
c0011e5c:	8b 91 74 01 00 00    	mov    edx,DWORD PTR [ecx+0x174]
c0011e62:	85 d2                	test   edx,edx
c0011e64:	74 17                	je     c0011e7d <SysSetDiskVolumeLabel(regs*)+0x44>
c0011e66:	8b 32                	mov    esi,DWORD PTR [edx]
c0011e68:	53                   	push   ebx
c0011e69:	50                   	push   eax
c0011e6a:	51                   	push   ecx
c0011e6b:	52                   	push   edx
c0011e6c:	ff 56 5c             	call   DWORD PTR [esi+0x5c]
c0011e6f:	83 c4 10             	add    esp,0x10
c0011e72:	89 c2                	mov    edx,eax
c0011e74:	83 c4 04             	add    esp,0x4
c0011e77:	c1 fa 1f             	sar    edx,0x1f
c0011e7a:	5b                   	pop    ebx
c0011e7b:	5e                   	pop    esi
c0011e7c:	c3                   	ret    
c0011e7d:	83 c4 04             	add    esp,0x4
c0011e80:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0011e85:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011e8a:	5b                   	pop    ebx
c0011e8b:	5e                   	pop    esi
c0011e8c:	c3                   	ret    

c0011e8d <SysGetDiskVolumeLabel(regs*)>:
c0011e8d:	57                   	push   edi
c0011e8e:	56                   	push   esi
c0011e8f:	53                   	push   ebx
c0011e90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011e94:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0011e97:	83 fa 19             	cmp    edx,0x19
c0011e9a:	77 3c                	ja     c0011ed8 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011e9c:	8b 0c 95 80 b8 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd4780]
c0011ea3:	85 c9                	test   ecx,ecx
c0011ea5:	74 31                	je     c0011ed8 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011ea7:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0011eaa:	85 db                	test   ebx,ebx
c0011eac:	74 2a                	je     c0011ed8 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011eae:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0011eb1:	85 f6                	test   esi,esi
c0011eb3:	74 23                	je     c0011ed8 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011eb5:	8b 81 74 01 00 00    	mov    eax,DWORD PTR [ecx+0x174]
c0011ebb:	85 c0                	test   eax,eax
c0011ebd:	74 19                	je     c0011ed8 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011ebf:	83 ec 0c             	sub    esp,0xc
c0011ec2:	8b 38                	mov    edi,DWORD PTR [eax]
c0011ec4:	56                   	push   esi
c0011ec5:	53                   	push   ebx
c0011ec6:	52                   	push   edx
c0011ec7:	51                   	push   ecx
c0011ec8:	50                   	push   eax
c0011ec9:	ff 57 58             	call   DWORD PTR [edi+0x58]
c0011ecc:	83 c4 20             	add    esp,0x20
c0011ecf:	89 c2                	mov    edx,eax
c0011ed1:	5b                   	pop    ebx
c0011ed2:	c1 fa 1f             	sar    edx,0x1f
c0011ed5:	5e                   	pop    esi
c0011ed6:	5f                   	pop    edi
c0011ed7:	c3                   	ret    
c0011ed8:	5b                   	pop    ebx
c0011ed9:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0011ede:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011ee3:	5e                   	pop    esi
c0011ee4:	5f                   	pop    edi
c0011ee5:	c3                   	ret    

c0011ee6 <SysShutdown(regs*)>:
c0011ee6:	83 ec 0c             	sub    esp,0xc
c0011ee9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011eed:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011ef0:	85 c0                	test   eax,eax
c0011ef2:	74 18                	je     c0011f0c <SysShutdown(regs*)+0x26>
c0011ef4:	83 f8 01             	cmp    eax,0x1
c0011ef7:	74 38                	je     c0011f31 <SysShutdown(regs*)+0x4b>
c0011ef9:	83 f8 02             	cmp    eax,0x2
c0011efc:	74 24                	je     c0011f22 <SysShutdown(regs*)+0x3c>
c0011efe:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011f03:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011f08:	83 c4 0c             	add    esp,0xc
c0011f0b:	c3                   	ret    
c0011f0c:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0011f11:	8b 10                	mov    edx,DWORD PTR [eax]
c0011f13:	6a 00                	push   0x0
c0011f15:	6a 00                	push   0x0
c0011f17:	6a 00                	push   0x0
c0011f19:	50                   	push   eax
c0011f1a:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011f1d:	83 c4 10             	add    esp,0x10
c0011f20:	eb dc                	jmp    c0011efe <SysShutdown(regs*)+0x18>
c0011f22:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0011f27:	8b 10                	mov    edx,DWORD PTR [eax]
c0011f29:	6a 00                	push   0x0
c0011f2b:	6a 00                	push   0x0
c0011f2d:	6a 01                	push   0x1
c0011f2f:	eb e8                	jmp    c0011f19 <SysShutdown(regs*)+0x33>
c0011f31:	a1 00 b9 02 c0       	mov    eax,ds:0xc002b900
c0011f36:	85 c0                	test   eax,eax
c0011f38:	74 02                	je     c0011f3c <SysShutdown(regs*)+0x56>
c0011f3a:	ff d0                	call   eax
c0011f3c:	31 c0                	xor    eax,eax
c0011f3e:	31 d2                	xor    edx,edx
c0011f40:	83 c4 0c             	add    esp,0xc
c0011f43:	c3                   	ret    

c0011f44 <SysRealpath(regs*)>:
c0011f44:	83 ec 0c             	sub    esp,0xc
c0011f47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011f4b:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0011f4e:	85 d2                	test   edx,edx
c0011f50:	74 07                	je     c0011f59 <SysRealpath(regs*)+0x15>
c0011f52:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0011f55:	85 c0                	test   eax,eax
c0011f57:	75 0b                	jne    c0011f64 <SysRealpath(regs*)+0x20>
c0011f59:	b8 01 00 00 00       	mov    eax,0x1
c0011f5e:	31 d2                	xor    edx,edx
c0011f60:	83 c4 0c             	add    esp,0xc
c0011f63:	c3                   	ret    
c0011f64:	6a 00                	push   0x0
c0011f66:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0011f6c:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0011f6f:	81 c1 0c 01 00 00    	add    ecx,0x10c
c0011f75:	51                   	push   ecx
c0011f76:	52                   	push   edx
c0011f77:	50                   	push   eax
c0011f78:	e8 07 99 ff ff       	call   c000b884 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0011f7d:	83 c4 10             	add    esp,0x10
c0011f80:	31 c0                	xor    eax,eax
c0011f82:	31 d2                	xor    edx,edx
c0011f84:	83 c4 0c             	add    esp,0xc
c0011f87:	c3                   	ret    

c0011f88 <SysReadDir(regs*)>:
c0011f88:	53                   	push   ebx
c0011f89:	83 ec 18             	sub    esp,0x18
c0011f8c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011f90:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011f93:	83 f8 02             	cmp    eax,0x2
c0011f96:	76 61                	jbe    c0011ff9 <SysReadDir(regs*)+0x71>
c0011f98:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c0011f9f:	77 49                	ja     c0011fea <SysReadDir(regs*)+0x62>
c0011fa1:	83 ec 0c             	sub    esp,0xc
c0011fa4:	50                   	push   eax
c0011fa5:	e8 39 75 ff ff       	call   c00094e3 <KeGetFileFromDescriptor(int)>
c0011faa:	83 c4 10             	add    esp,0x10
c0011fad:	85 c0                	test   eax,eax
c0011faf:	74 39                	je     c0011fea <SysReadDir(regs*)+0x62>
c0011fb1:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011fb9:	83 ec 0c             	sub    esp,0xc
c0011fbc:	8b 10                	mov    edx,DWORD PTR [eax]
c0011fbe:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0011fc2:	51                   	push   ecx
c0011fc3:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0011fc6:	51                   	push   ecx
c0011fc7:	6a 00                	push   0x0
c0011fc9:	68 10 01 00 00       	push   0x110
c0011fce:	50                   	push   eax
c0011fcf:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011fd2:	83 c4 20             	add    esp,0x20
c0011fd5:	85 c0                	test   eax,eax
c0011fd7:	74 29                	je     c0012002 <SysReadDir(regs*)+0x7a>
c0011fd9:	83 f8 07             	cmp    eax,0x7
c0011fdc:	74 1b                	je     c0011ff9 <SysReadDir(regs*)+0x71>
c0011fde:	b8 02 00 00 00       	mov    eax,0x2
c0011fe3:	31 d2                	xor    edx,edx
c0011fe5:	83 c4 18             	add    esp,0x18
c0011fe8:	5b                   	pop    ebx
c0011fe9:	c3                   	ret    
c0011fea:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011fef:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011ff4:	83 c4 18             	add    esp,0x18
c0011ff7:	5b                   	pop    ebx
c0011ff8:	c3                   	ret    
c0011ff9:	b8 01 00 00 00       	mov    eax,0x1
c0011ffe:	31 d2                	xor    edx,edx
c0012000:	eb e3                	jmp    c0011fe5 <SysReadDir(regs*)+0x5d>
c0012002:	31 c0                	xor    eax,eax
c0012004:	31 d2                	xor    edx,edx
c0012006:	eb dd                	jmp    c0011fe5 <SysReadDir(regs*)+0x5d>

c0012008 <SysIsATTY(regs*)>:
c0012008:	83 ec 0c             	sub    esp,0xc
c001200b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001200f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0012012:	83 f8 02             	cmp    eax,0x2
c0012015:	76 07                	jbe    c001201e <SysIsATTY(regs*)+0x16>
c0012017:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001201c:	75 26                	jne    c0012044 <SysIsATTY(regs*)+0x3c>
c001201e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012023:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012026:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001202c:	85 c0                	test   eax,eax
c001202e:	74 24                	je     c0012054 <SysIsATTY(regs*)+0x4c>
c0012030:	83 ec 0c             	sub    esp,0xc
c0012033:	8b 10                	mov    edx,DWORD PTR [eax]
c0012035:	50                   	push   eax
c0012036:	ff 12                	call   DWORD PTR [edx]
c0012038:	31 d2                	xor    edx,edx
c001203a:	0f b6 c0             	movzx  eax,al
c001203d:	83 c4 10             	add    esp,0x10
c0012040:	83 c4 0c             	add    esp,0xc
c0012043:	c3                   	ret    
c0012044:	83 ec 0c             	sub    esp,0xc
c0012047:	50                   	push   eax
c0012048:	e8 96 74 ff ff       	call   c00094e3 <KeGetFileFromDescriptor(int)>
c001204d:	83 c4 10             	add    esp,0x10
c0012050:	85 c0                	test   eax,eax
c0012052:	75 dc                	jne    c0012030 <SysIsATTY(regs*)+0x28>
c0012054:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012059:	ba ff ff ff ff       	mov    edx,0xffffffff
c001205e:	83 c4 0c             	add    esp,0xc
c0012061:	c3                   	ret    

c0012062 <SysSeek(regs*)>:
c0012062:	53                   	push   ebx
c0012063:	83 ec 08             	sub    esp,0x8
c0012066:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001206a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001206d:	8d 50 fd             	lea    edx,[eax-0x3]
c0012070:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0012076:	77 32                	ja     c00120aa <SysSeek(regs*)+0x48>
c0012078:	83 ec 0c             	sub    esp,0xc
c001207b:	50                   	push   eax
c001207c:	e8 62 74 ff ff       	call   c00094e3 <KeGetFileFromDescriptor(int)>
c0012081:	83 c4 0c             	add    esp,0xc
c0012084:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0012087:	31 db                	xor    ebx,ebx
c0012089:	53                   	push   ebx
c001208a:	51                   	push   ecx
c001208b:	50                   	push   eax
c001208c:	e8 c7 9b ff ff       	call   c000bc58 <File::seek(unsigned long long)>
c0012091:	83 c4 10             	add    esp,0x10
c0012094:	85 c0                	test   eax,eax
c0012096:	0f 95 c0             	setne  al
c0012099:	31 d2                	xor    edx,edx
c001209b:	0f b6 c0             	movzx  eax,al
c001209e:	f7 d8                	neg    eax
c00120a0:	83 d2 00             	adc    edx,0x0
c00120a3:	83 c4 08             	add    esp,0x8
c00120a6:	f7 da                	neg    edx
c00120a8:	5b                   	pop    ebx
c00120a9:	c3                   	ret    
c00120aa:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00120af:	ba ff ff ff ff       	mov    edx,0xffffffff
c00120b4:	83 c4 08             	add    esp,0x8
c00120b7:	5b                   	pop    ebx
c00120b8:	c3                   	ret    

c00120b9 <SysTell(regs*)>:
c00120b9:	53                   	push   ebx
c00120ba:	83 ec 08             	sub    esp,0x8
c00120bd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00120c1:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00120c4:	83 f8 02             	cmp    eax,0x2
c00120c7:	76 4e                	jbe    c0012117 <SysTell(regs*)+0x5e>
c00120c9:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00120ce:	76 19                	jbe    c00120e9 <SysTell(regs*)+0x30>
c00120d0:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00120d3:	31 d2                	xor    edx,edx
c00120d5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00120db:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00120e2:	31 c0                	xor    eax,eax
c00120e4:	83 c4 08             	add    esp,0x8
c00120e7:	5b                   	pop    ebx
c00120e8:	c3                   	ret    
c00120e9:	83 ec 0c             	sub    esp,0xc
c00120ec:	50                   	push   eax
c00120ed:	e8 f1 73 ff ff       	call   c00094e3 <KeGetFileFromDescriptor(int)>
c00120f2:	5a                   	pop    edx
c00120f3:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c00120f6:	59                   	pop    ecx
c00120f7:	53                   	push   ebx
c00120f8:	50                   	push   eax
c00120f9:	e8 06 9c ff ff       	call   c000bd04 <File::tell(unsigned long long*)>
c00120fe:	83 c4 10             	add    esp,0x10
c0012101:	85 c0                	test   eax,eax
c0012103:	0f 95 c0             	setne  al
c0012106:	31 d2                	xor    edx,edx
c0012108:	0f b6 c0             	movzx  eax,al
c001210b:	f7 d8                	neg    eax
c001210d:	83 d2 00             	adc    edx,0x0
c0012110:	83 c4 08             	add    esp,0x8
c0012113:	f7 da                	neg    edx
c0012115:	5b                   	pop    ebx
c0012116:	c3                   	ret    
c0012117:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001211c:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012121:	83 c4 08             	add    esp,0x8
c0012124:	5b                   	pop    ebx
c0012125:	c3                   	ret    

c0012126 <SysSize(regs*)>:
c0012126:	53                   	push   ebx
c0012127:	83 ec 18             	sub    esp,0x18
c001212a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001212e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012131:	83 f8 02             	cmp    eax,0x2
c0012134:	76 54                	jbe    c001218a <SysSize(regs*)+0x64>
c0012136:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001213b:	76 19                	jbe    c0012156 <SysSize(regs*)+0x30>
c001213d:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0012140:	31 d2                	xor    edx,edx
c0012142:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0012148:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001214f:	31 c0                	xor    eax,eax
c0012151:	83 c4 18             	add    esp,0x18
c0012154:	5b                   	pop    ebx
c0012155:	c3                   	ret    
c0012156:	83 ec 0c             	sub    esp,0xc
c0012159:	50                   	push   eax
c001215a:	e8 84 73 ff ff       	call   c00094e3 <KeGetFileFromDescriptor(int)>
c001215f:	83 c4 0c             	add    esp,0xc
c0012162:	8d 54 24 13          	lea    edx,[esp+0x13]
c0012166:	52                   	push   edx
c0012167:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001216a:	52                   	push   edx
c001216b:	50                   	push   eax
c001216c:	e8 2b 9d ff ff       	call   c000be9c <File::stat(unsigned long long*, bool*)>
c0012171:	83 c4 10             	add    esp,0x10
c0012174:	85 c0                	test   eax,eax
c0012176:	0f 95 c0             	setne  al
c0012179:	31 d2                	xor    edx,edx
c001217b:	0f b6 c0             	movzx  eax,al
c001217e:	f7 d8                	neg    eax
c0012180:	83 d2 00             	adc    edx,0x0
c0012183:	83 c4 18             	add    esp,0x18
c0012186:	f7 da                	neg    edx
c0012188:	5b                   	pop    ebx
c0012189:	c3                   	ret    
c001218a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001218f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012194:	83 c4 18             	add    esp,0x18
c0012197:	5b                   	pop    ebx
c0012198:	c3                   	ret    

c0012199 <SysSizeFromFilename(regs*)>:
c0012199:	55                   	push   ebp
c001219a:	57                   	push   edi
c001219b:	56                   	push   esi
c001219c:	53                   	push   ebx
c001219d:	81 ec 5c 02 00 00    	sub    esp,0x25c
c00121a3:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c00121aa:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00121ad:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c00121b0:	85 f6                	test   esi,esi
c00121b2:	74 34                	je     c00121e8 <SysSizeFromFilename(regs*)+0x4f>
c00121b4:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c00121ba:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00121bd:	83 f8 02             	cmp    eax,0x2
c00121c0:	76 2d                	jbe    c00121ef <SysSizeFromFilename(regs*)+0x56>
c00121c2:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00121c7:	76 3b                	jbe    c0012204 <SysSizeFromFilename(regs*)+0x6b>
c00121c9:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00121cc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00121d2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00121d9:	81 c4 5c 02 00 00    	add    esp,0x25c
c00121df:	31 c0                	xor    eax,eax
c00121e1:	5b                   	pop    ebx
c00121e2:	31 d2                	xor    edx,edx
c00121e4:	5e                   	pop    esi
c00121e5:	5f                   	pop    edi
c00121e6:	5d                   	pop    ebp
c00121e7:	c3                   	ret    
c00121e8:	89 f8                	mov    eax,edi
c00121ea:	83 f8 02             	cmp    eax,0x2
c00121ed:	77 d3                	ja     c00121c2 <SysSizeFromFilename(regs*)+0x29>
c00121ef:	81 c4 5c 02 00 00    	add    esp,0x25c
c00121f5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00121fa:	5b                   	pop    ebx
c00121fb:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012200:	5e                   	pop    esi
c0012201:	5f                   	pop    edi
c0012202:	5d                   	pop    ebp
c0012203:	c3                   	ret    
c0012204:	83 ec 0c             	sub    esp,0xc
c0012207:	68 14 01 00 00       	push   0x114
c001220c:	e8 d5 58 ff ff       	call   c0007ae6 <malloc>
c0012211:	6a 01                	push   0x1
c0012213:	89 c5                	mov    ebp,eax
c0012215:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001221a:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c001221d:	51                   	push   ecx
c001221e:	57                   	push   edi
c001221f:	55                   	push   ebp
c0012220:	e8 79 98 ff ff       	call   c000ba9e <File::File(char const*, Process*, bool)>
c0012225:	83 c4 1c             	add    esp,0x1c
c0012228:	8d 44 24 23          	lea    eax,[esp+0x23]
c001222c:	50                   	push   eax
c001222d:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0012230:	53                   	push   ebx
c0012231:	55                   	push   ebp
c0012232:	e8 65 9c ff ff       	call   c000be9c <File::stat(unsigned long long*, bool*)>
c0012237:	83 c4 10             	add    esp,0x10
c001223a:	85 ed                	test   ebp,ebp
c001223c:	74 15                	je     c0012253 <SysSizeFromFilename(regs*)+0xba>
c001223e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012242:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0012245:	83 ec 0c             	sub    esp,0xc
c0012248:	55                   	push   ebp
c0012249:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001224c:	83 c4 10             	add    esp,0x10
c001224f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012253:	85 c0                	test   eax,eax
c0012255:	75 98                	jne    c00121ef <SysSizeFromFilename(regs*)+0x56>
c0012257:	6a 00                	push   0x0
c0012259:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001225e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012261:	05 0c 01 00 00       	add    eax,0x10c
c0012266:	50                   	push   eax
c0012267:	57                   	push   edi
c0012268:	8d 9c 24 44 01 00 00 	lea    ebx,[esp+0x144]
c001226f:	53                   	push   ebx
c0012270:	e8 0f 96 ff ff       	call   c000b884 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0012275:	58                   	pop    eax
c0012276:	5a                   	pop    edx
c0012277:	8d 44 24 28          	lea    eax,[esp+0x28]
c001227b:	50                   	push   eax
c001227c:	53                   	push   ebx
c001227d:	e8 6a 90 ff ff       	call   c000b2ec <KeDereferenceSymlink(char const*, char*)>
c0012282:	83 c4 10             	add    esp,0x10
c0012285:	83 f8 01             	cmp    eax,0x1
c0012288:	74 1a                	je     c00122a4 <SysSizeFromFilename(regs*)+0x10b>
c001228a:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001228f:	74 26                	je     c00122b7 <SysSizeFromFilename(regs*)+0x11e>
c0012291:	85 f6                	test   esi,esi
c0012293:	0f 84 40 ff ff ff    	je     c00121d9 <SysSizeFromFilename(regs*)+0x40>
c0012299:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c001229f:	e9 35 ff ff ff       	jmp    c00121d9 <SysSizeFromFilename(regs*)+0x40>
c00122a4:	85 f6                	test   esi,esi
c00122a6:	0f 84 2d ff ff ff    	je     c00121d9 <SysSizeFromFilename(regs*)+0x40>
c00122ac:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c00122b2:	e9 22 ff ff ff       	jmp    c00121d9 <SysSizeFromFilename(regs*)+0x40>
c00122b7:	85 f6                	test   esi,esi
c00122b9:	0f 84 1a ff ff ff    	je     c00121d9 <SysSizeFromFilename(regs*)+0x40>
c00122bf:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c00122c5:	e9 0f ff ff ff       	jmp    c00121d9 <SysSizeFromFilename(regs*)+0x40>

c00122ca <SysSizeFromFilenameNoSymlink(regs*)>:
c00122ca:	55                   	push   ebp
c00122cb:	57                   	push   edi
c00122cc:	56                   	push   esi
c00122cd:	53                   	push   ebx
c00122ce:	81 ec 5c 02 00 00    	sub    esp,0x25c
c00122d4:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c00122db:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00122de:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c00122e1:	85 f6                	test   esi,esi
c00122e3:	74 34                	je     c0012319 <SysSizeFromFilenameNoSymlink(regs*)+0x4f>
c00122e5:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c00122eb:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00122ee:	83 f8 02             	cmp    eax,0x2
c00122f1:	76 2d                	jbe    c0012320 <SysSizeFromFilenameNoSymlink(regs*)+0x56>
c00122f3:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00122f8:	76 3b                	jbe    c0012335 <SysSizeFromFilenameNoSymlink(regs*)+0x6b>
c00122fa:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00122fd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0012303:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001230a:	81 c4 5c 02 00 00    	add    esp,0x25c
c0012310:	31 c0                	xor    eax,eax
c0012312:	5b                   	pop    ebx
c0012313:	31 d2                	xor    edx,edx
c0012315:	5e                   	pop    esi
c0012316:	5f                   	pop    edi
c0012317:	5d                   	pop    ebp
c0012318:	c3                   	ret    
c0012319:	89 f8                	mov    eax,edi
c001231b:	83 f8 02             	cmp    eax,0x2
c001231e:	77 d3                	ja     c00122f3 <SysSizeFromFilenameNoSymlink(regs*)+0x29>
c0012320:	81 c4 5c 02 00 00    	add    esp,0x25c
c0012326:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001232b:	5b                   	pop    ebx
c001232c:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012331:	5e                   	pop    esi
c0012332:	5f                   	pop    edi
c0012333:	5d                   	pop    ebp
c0012334:	c3                   	ret    
c0012335:	83 ec 0c             	sub    esp,0xc
c0012338:	68 14 01 00 00       	push   0x114
c001233d:	e8 a4 57 ff ff       	call   c0007ae6 <malloc>
c0012342:	6a 00                	push   0x0
c0012344:	89 c5                	mov    ebp,eax
c0012346:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001234b:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c001234e:	51                   	push   ecx
c001234f:	57                   	push   edi
c0012350:	55                   	push   ebp
c0012351:	e8 48 97 ff ff       	call   c000ba9e <File::File(char const*, Process*, bool)>
c0012356:	83 c4 1c             	add    esp,0x1c
c0012359:	8d 44 24 23          	lea    eax,[esp+0x23]
c001235d:	50                   	push   eax
c001235e:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0012361:	53                   	push   ebx
c0012362:	55                   	push   ebp
c0012363:	e8 34 9b ff ff       	call   c000be9c <File::stat(unsigned long long*, bool*)>
c0012368:	83 c4 10             	add    esp,0x10
c001236b:	85 ed                	test   ebp,ebp
c001236d:	74 15                	je     c0012384 <SysSizeFromFilenameNoSymlink(regs*)+0xba>
c001236f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012373:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0012376:	83 ec 0c             	sub    esp,0xc
c0012379:	55                   	push   ebp
c001237a:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001237d:	83 c4 10             	add    esp,0x10
c0012380:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012384:	85 c0                	test   eax,eax
c0012386:	75 98                	jne    c0012320 <SysSizeFromFilenameNoSymlink(regs*)+0x56>
c0012388:	6a 00                	push   0x0
c001238a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001238f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012392:	05 0c 01 00 00       	add    eax,0x10c
c0012397:	50                   	push   eax
c0012398:	57                   	push   edi
c0012399:	8d 9c 24 44 01 00 00 	lea    ebx,[esp+0x144]
c00123a0:	53                   	push   ebx
c00123a1:	e8 de 94 ff ff       	call   c000b884 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00123a6:	58                   	pop    eax
c00123a7:	5a                   	pop    edx
c00123a8:	8d 44 24 28          	lea    eax,[esp+0x28]
c00123ac:	50                   	push   eax
c00123ad:	53                   	push   ebx
c00123ae:	e8 39 8f ff ff       	call   c000b2ec <KeDereferenceSymlink(char const*, char*)>
c00123b3:	83 c4 10             	add    esp,0x10
c00123b6:	83 f8 01             	cmp    eax,0x1
c00123b9:	74 1a                	je     c00123d5 <SysSizeFromFilenameNoSymlink(regs*)+0x10b>
c00123bb:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c00123c0:	74 26                	je     c00123e8 <SysSizeFromFilenameNoSymlink(regs*)+0x11e>
c00123c2:	85 f6                	test   esi,esi
c00123c4:	0f 84 40 ff ff ff    	je     c001230a <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c00123ca:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c00123d0:	e9 35 ff ff ff       	jmp    c001230a <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c00123d5:	85 f6                	test   esi,esi
c00123d7:	0f 84 2d ff ff ff    	je     c001230a <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c00123dd:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c00123e3:	e9 22 ff ff ff       	jmp    c001230a <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c00123e8:	85 f6                	test   esi,esi
c00123ea:	0f 84 1a ff ff ff    	je     c001230a <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c00123f0:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c00123f6:	e9 0f ff ff ff       	jmp    c001230a <SysSizeFromFilenameNoSymlink(regs*)+0x40>

c00123fb <SysClose(regs*)>:
c00123fb:	53                   	push   ebx
c00123fc:	83 ec 08             	sub    esp,0x8
c00123ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012403:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0012406:	83 f8 02             	cmp    eax,0x2
c0012409:	76 41                	jbe    c001244c <SysClose(regs*)+0x51>
c001240b:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c0012411:	83 fa 01             	cmp    edx,0x1
c0012414:	76 2d                	jbe    c0012443 <SysClose(regs*)+0x48>
c0012416:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001241b:	77 2f                	ja     c001244c <SysClose(regs*)+0x51>
c001241d:	83 ec 0c             	sub    esp,0xc
c0012420:	50                   	push   eax
c0012421:	e8 bd 70 ff ff       	call   c00094e3 <KeGetFileFromDescriptor(int)>
c0012426:	89 c3                	mov    ebx,eax
c0012428:	89 04 24             	mov    DWORD PTR [esp],eax
c001242b:	e8 c8 97 ff ff       	call   c000bbf8 <File::close()>
c0012430:	83 c4 10             	add    esp,0x10
c0012433:	85 db                	test   ebx,ebx
c0012435:	74 0c                	je     c0012443 <SysClose(regs*)+0x48>
c0012437:	83 ec 0c             	sub    esp,0xc
c001243a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001243c:	53                   	push   ebx
c001243d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012440:	83 c4 10             	add    esp,0x10
c0012443:	31 c0                	xor    eax,eax
c0012445:	31 d2                	xor    edx,edx
c0012447:	83 c4 08             	add    esp,0x8
c001244a:	5b                   	pop    ebx
c001244b:	c3                   	ret    
c001244c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012451:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012456:	83 c4 08             	add    esp,0x8
c0012459:	5b                   	pop    ebx
c001245a:	c3                   	ret    

c001245b <SysOpenDir(regs*)>:
c001245b:	56                   	push   esi
c001245c:	53                   	push   ebx
c001245d:	83 ec 04             	sub    esp,0x4
c0012460:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012464:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0012467:	85 c9                	test   ecx,ecx
c0012469:	74 5d                	je     c00124c8 <SysOpenDir(regs*)+0x6d>
c001246b:	83 ec 0c             	sub    esp,0xc
c001246e:	68 14 01 00 00       	push   0x114
c0012473:	e8 6e 56 ff ff       	call   c0007ae6 <malloc>
c0012478:	83 c4 0c             	add    esp,0xc
c001247b:	89 c6                	mov    esi,eax
c001247d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012482:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012485:	50                   	push   eax
c0012486:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0012489:	52                   	push   edx
c001248a:	56                   	push   esi
c001248b:	e8 cc 9b ff ff       	call   c000c05c <Directory::Directory(char const*, Process*)>
c0012490:	83 c4 10             	add    esp,0x10
c0012493:	85 f6                	test   esi,esi
c0012495:	74 31                	je     c00124c8 <SysOpenDir(regs*)+0x6d>
c0012497:	83 ec 0c             	sub    esp,0xc
c001249a:	56                   	push   esi
c001249b:	e8 84 9c ff ff       	call   c000c124 <Directory::open()>
c00124a0:	83 c4 10             	add    esp,0x10
c00124a3:	85 c0                	test   eax,eax
c00124a5:	75 21                	jne    c00124c8 <SysOpenDir(regs*)+0x6d>
c00124a7:	83 ec 0c             	sub    esp,0xc
c00124aa:	56                   	push   esi
c00124ab:	e8 36 6d ff ff       	call   c00091e6 <UnixFile::getFileDescriptor()>
c00124b0:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00124b3:	83 c4 10             	add    esp,0x10
c00124b6:	89 02                	mov    DWORD PTR [edx],eax
c00124b8:	c1 f8 1f             	sar    eax,0x1f
c00124bb:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00124be:	83 c4 04             	add    esp,0x4
c00124c1:	31 c0                	xor    eax,eax
c00124c3:	31 d2                	xor    edx,edx
c00124c5:	5b                   	pop    ebx
c00124c6:	5e                   	pop    esi
c00124c7:	c3                   	ret    
c00124c8:	83 c4 04             	add    esp,0x4
c00124cb:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00124d0:	ba ff ff ff ff       	mov    edx,0xffffffff
c00124d5:	5b                   	pop    ebx
c00124d6:	5e                   	pop    esi
c00124d7:	c3                   	ret    

c00124d8 <SysMakeDir(regs*)>:
c00124d8:	56                   	push   esi
c00124d9:	53                   	push   ebx
c00124da:	83 ec 10             	sub    esp,0x10
c00124dd:	68 14 01 00 00       	push   0x114
c00124e2:	e8 ff 55 ff ff       	call   c0007ae6 <malloc>
c00124e7:	83 c4 0c             	add    esp,0xc
c00124ea:	89 c3                	mov    ebx,eax
c00124ec:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00124f1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00124f4:	50                   	push   eax
c00124f5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00124f9:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c00124fc:	52                   	push   edx
c00124fd:	53                   	push   ebx
c00124fe:	e8 59 9b ff ff       	call   c000c05c <Directory::Directory(char const*, Process*)>
c0012503:	83 c4 10             	add    esp,0x10
c0012506:	85 db                	test   ebx,ebx
c0012508:	74 2c                	je     c0012536 <SysMakeDir(regs*)+0x5e>
c001250a:	83 ec 0c             	sub    esp,0xc
c001250d:	53                   	push   ebx
c001250e:	e8 f1 9d ff ff       	call   c000c304 <Directory::create()>
c0012513:	89 c6                	mov    esi,eax
c0012515:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012517:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001251a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001251d:	83 c4 10             	add    esp,0x10
c0012520:	31 c0                	xor    eax,eax
c0012522:	85 f6                	test   esi,esi
c0012524:	0f 95 c0             	setne  al
c0012527:	31 d2                	xor    edx,edx
c0012529:	f7 d8                	neg    eax
c001252b:	83 d2 00             	adc    edx,0x0
c001252e:	83 c4 04             	add    esp,0x4
c0012531:	f7 da                	neg    edx
c0012533:	5b                   	pop    ebx
c0012534:	5e                   	pop    esi
c0012535:	c3                   	ret    
c0012536:	83 c4 04             	add    esp,0x4
c0012539:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001253e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012543:	5b                   	pop    ebx
c0012544:	5e                   	pop    esi
c0012545:	c3                   	ret    

c0012546 <SysCloseDir(regs*)>:
c0012546:	53                   	push   ebx
c0012547:	83 ec 08             	sub    esp,0x8
c001254a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001254e:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0012551:	8d 50 fd             	lea    edx,[eax-0x3]
c0012554:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c001255a:	77 2f                	ja     c001258b <SysCloseDir(regs*)+0x45>
c001255c:	83 ec 0c             	sub    esp,0xc
c001255f:	50                   	push   eax
c0012560:	e8 7e 6f ff ff       	call   c00094e3 <KeGetFileFromDescriptor(int)>
c0012565:	89 c3                	mov    ebx,eax
c0012567:	89 04 24             	mov    DWORD PTR [esp],eax
c001256a:	e8 11 9c ff ff       	call   c000c180 <Directory::close()>
c001256f:	83 c4 10             	add    esp,0x10
c0012572:	85 db                	test   ebx,ebx
c0012574:	74 0c                	je     c0012582 <SysCloseDir(regs*)+0x3c>
c0012576:	83 ec 0c             	sub    esp,0xc
c0012579:	8b 03                	mov    eax,DWORD PTR [ebx]
c001257b:	53                   	push   ebx
c001257c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001257f:	83 c4 10             	add    esp,0x10
c0012582:	31 c0                	xor    eax,eax
c0012584:	31 d2                	xor    edx,edx
c0012586:	83 c4 08             	add    esp,0x8
c0012589:	5b                   	pop    ebx
c001258a:	c3                   	ret    
c001258b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012590:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012595:	83 c4 08             	add    esp,0x8
c0012598:	5b                   	pop    ebx
c0012599:	c3                   	ret    

c001259a <SysWait(regs*)>:
c001259a:	83 ec 10             	sub    esp,0x10
c001259d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00125a1:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00125a4:	52                   	push   edx
c00125a5:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c00125a8:	51                   	push   ecx
c00125a9:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00125ac:	50                   	push   eax
c00125ad:	e8 46 3e 00 00       	call   c00163f8 <waitTask(int, int*, int)>
c00125b2:	83 c4 1c             	add    esp,0x1c
c00125b5:	89 c2                	mov    edx,eax
c00125b7:	c1 fa 1f             	sar    edx,0x1f
c00125ba:	c3                   	ret    

c00125bb <SysNotImpl(regs*)>:
c00125bb:	83 ec 18             	sub    esp,0x18
c00125be:	68 9a 26 02 c0       	push   0xc002269a
c00125c3:	e8 ff f0 ff ff       	call   c00116c7 <KePanic(char const*)>
c00125c8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00125cd:	ba ff ff ff ff       	mov    edx,0xffffffff
c00125d2:	83 c4 1c             	add    esp,0x1c
c00125d5:	c3                   	ret    

c00125d6 <SysPanic(regs*)>:
c00125d6:	83 ec 18             	sub    esp,0x18
c00125d9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00125dd:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00125e0:	50                   	push   eax
c00125e1:	e8 e1 f0 ff ff       	call   c00116c7 <KePanic(char const*)>
c00125e6:	b8 01 00 00 00       	mov    eax,0x1
c00125eb:	31 d2                	xor    edx,edx
c00125ed:	83 c4 1c             	add    esp,0x1c
c00125f0:	c3                   	ret    

c00125f1 <SysRmdir(regs*)>:
c00125f1:	56                   	push   esi
c00125f2:	53                   	push   ebx
c00125f3:	83 ec 20             	sub    esp,0x20
c00125f6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00125fa:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c00125fd:	68 14 01 00 00       	push   0x114
c0012602:	e8 df 54 ff ff       	call   c0007ae6 <malloc>
c0012607:	6a 00                	push   0x0
c0012609:	89 c3                	mov    ebx,eax
c001260b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012610:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012613:	50                   	push   eax
c0012614:	56                   	push   esi
c0012615:	53                   	push   ebx
c0012616:	e8 83 94 ff ff       	call   c000ba9e <File::File(char const*, Process*, bool)>
c001261b:	83 c4 14             	add    esp,0x14
c001261e:	53                   	push   ebx
c001261f:	e8 44 97 ff ff       	call   c000bd68 <File::unlink()>
c0012624:	83 c4 10             	add    esp,0x10
c0012627:	85 db                	test   ebx,ebx
c0012629:	74 14                	je     c001263f <SysRmdir(regs*)+0x4e>
c001262b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001262f:	8b 13                	mov    edx,DWORD PTR [ebx]
c0012631:	83 ec 0c             	sub    esp,0xc
c0012634:	53                   	push   ebx
c0012635:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0012638:	83 c4 10             	add    esp,0x10
c001263b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001263f:	85 c0                	test   eax,eax
c0012641:	0f 95 c0             	setne  al
c0012644:	31 d2                	xor    edx,edx
c0012646:	0f b6 c0             	movzx  eax,al
c0012649:	f7 d8                	neg    eax
c001264b:	83 d2 00             	adc    edx,0x0
c001264e:	83 c4 14             	add    esp,0x14
c0012651:	f7 da                	neg    edx
c0012653:	5b                   	pop    ebx
c0012654:	5e                   	pop    esi
c0012655:	c3                   	ret    

c0012656 <SysUnlink(regs*)>:
c0012656:	56                   	push   esi
c0012657:	53                   	push   ebx
c0012658:	83 ec 20             	sub    esp,0x20
c001265b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001265f:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0012662:	68 14 01 00 00       	push   0x114
c0012667:	e8 7a 54 ff ff       	call   c0007ae6 <malloc>
c001266c:	6a 00                	push   0x0
c001266e:	89 c3                	mov    ebx,eax
c0012670:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012675:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012678:	50                   	push   eax
c0012679:	56                   	push   esi
c001267a:	53                   	push   ebx
c001267b:	e8 1e 94 ff ff       	call   c000ba9e <File::File(char const*, Process*, bool)>
c0012680:	83 c4 14             	add    esp,0x14
c0012683:	53                   	push   ebx
c0012684:	e8 df 96 ff ff       	call   c000bd68 <File::unlink()>
c0012689:	83 c4 10             	add    esp,0x10
c001268c:	85 db                	test   ebx,ebx
c001268e:	74 14                	je     c00126a4 <SysUnlink(regs*)+0x4e>
c0012690:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012694:	8b 13                	mov    edx,DWORD PTR [ebx]
c0012696:	83 ec 0c             	sub    esp,0xc
c0012699:	53                   	push   ebx
c001269a:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001269d:	83 c4 10             	add    esp,0x10
c00126a0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00126a4:	85 c0                	test   eax,eax
c00126a6:	0f 95 c0             	setne  al
c00126a9:	31 d2                	xor    edx,edx
c00126ab:	0f b6 c0             	movzx  eax,al
c00126ae:	f7 d8                	neg    eax
c00126b0:	83 d2 00             	adc    edx,0x0
c00126b3:	83 c4 14             	add    esp,0x14
c00126b6:	f7 da                	neg    edx
c00126b8:	5b                   	pop    ebx
c00126b9:	5e                   	pop    esi
c00126ba:	c3                   	ret    

c00126bb <SysGetArgv(regs*)>:
c00126bb:	83 ec 0c             	sub    esp,0xc
c00126be:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00126c2:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00126c5:	85 c0                	test   eax,eax
c00126c7:	78 2c                	js     c00126f5 <SysGetArgv(regs*)+0x3a>
c00126c9:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00126cf:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c00126d2:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c00126d8:	7d 1b                	jge    c00126f5 <SysGetArgv(regs*)+0x3a>
c00126da:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c00126e1:	85 c0                	test   eax,eax
c00126e3:	74 18                	je     c00126fd <SysGetArgv(regs*)+0x42>
c00126e5:	83 ec 08             	sub    esp,0x8
c00126e8:	50                   	push   eax
c00126e9:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c00126ec:	50                   	push   eax
c00126ed:	e8 4e df fe ff       	call   c0000640 <strcpy>
c00126f2:	83 c4 10             	add    esp,0x10
c00126f5:	31 c0                	xor    eax,eax
c00126f7:	31 d2                	xor    edx,edx
c00126f9:	83 c4 0c             	add    esp,0xc
c00126fc:	c3                   	ret    
c00126fd:	b8 01 00 00 00       	mov    eax,0x1
c0012702:	31 d2                	xor    edx,edx
c0012704:	83 c4 0c             	add    esp,0xc
c0012707:	c3                   	ret    

c0012708 <SysUSleep(regs*)>:
c0012708:	83 ec 1c             	sub    esp,0x1c
c001270b:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001270f:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0012712:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c0012715:	6a 00                	push   0x0
c0012717:	6a 64                	push   0x64
c0012719:	52                   	push   edx
c001271a:	50                   	push   eax
c001271b:	e8 00 d1 00 00       	call   c001f820 <__udivdi3>
c0012720:	83 c4 14             	add    esp,0x14
c0012723:	50                   	push   eax
c0012724:	e8 b3 3d 00 00       	call   c00164dc <milliTenthSleep(unsigned int)>
c0012729:	31 c0                	xor    eax,eax
c001272b:	31 d2                	xor    edx,edx
c001272d:	83 c4 1c             	add    esp,0x1c
c0012730:	c3                   	ret    

c0012731 <SysSpawn(regs*)>:
c0012731:	56                   	push   esi
c0012732:	53                   	push   ebx
c0012733:	83 ec 04             	sub    esp,0x4
c0012736:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001273a:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001273d:	85 f6                	test   esi,esi
c001273f:	75 0a                	jne    c001274b <SysSpawn(regs*)+0x1a>
c0012741:	83 c4 04             	add    esp,0x4
c0012744:	31 c0                	xor    eax,eax
c0012746:	31 d2                	xor    edx,edx
c0012748:	5b                   	pop    ebx
c0012749:	5e                   	pop    esi
c001274a:	c3                   	ret    
c001274b:	83 ec 0c             	sub    esp,0xc
c001274e:	68 24 07 00 00       	push   0x724
c0012753:	e8 8e 53 ff ff       	call   c0007ae6 <malloc>
c0012758:	83 c4 10             	add    esp,0x10
c001275b:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001275e:	89 c6                	mov    esi,eax
c0012760:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0012763:	85 c9                	test   ecx,ecx
c0012765:	75 39                	jne    c00127a0 <SysSpawn(regs*)+0x6f>
c0012767:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001276c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001276f:	52                   	push   edx
c0012770:	50                   	push   eax
c0012771:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012774:	50                   	push   eax
c0012775:	56                   	push   esi
c0012776:	e8 b1 33 00 00       	call   c0015b2c <Process::Process(char const*, Process*, char**)>
c001277b:	83 c4 10             	add    esp,0x10
c001277e:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c0012785:	75 ba                	jne    c0012741 <SysSpawn(regs*)+0x10>
c0012787:	83 ec 0c             	sub    esp,0xc
c001278a:	56                   	push   esi
c001278b:	e8 d8 38 00 00       	call   c0016068 <Process::createUserThread()>
c0012790:	8b 06                	mov    eax,DWORD PTR [esi]
c0012792:	83 c4 10             	add    esp,0x10
c0012795:	89 c2                	mov    edx,eax
c0012797:	83 c4 04             	add    esp,0x4
c001279a:	c1 fa 1f             	sar    edx,0x1f
c001279d:	5b                   	pop    ebx
c001279e:	5e                   	pop    esi
c001279f:	c3                   	ret    
c00127a0:	31 c0                	xor    eax,eax
c00127a2:	eb cb                	jmp    c001276f <SysSpawn(regs*)+0x3e>

c00127a4 <SysGetEnv(regs*)>:
c00127a4:	57                   	push   edi
c00127a5:	56                   	push   esi
c00127a6:	53                   	push   ebx
c00127a7:	83 ec 1c             	sub    esp,0x1c
c00127aa:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00127ae:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00127b3:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c00127b6:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00127b9:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c00127bc:	51                   	push   ecx
c00127bd:	e8 bd ed ff ff       	call   c001157f <KeGetProcessTotalEnvCount(Process*)>
c00127c2:	83 c4 10             	add    esp,0x10
c00127c5:	39 c7                	cmp    edi,eax
c00127c7:	7c 14                	jl     c00127dd <SysGetEnv(regs*)+0x39>
c00127c9:	85 f6                	test   esi,esi
c00127cb:	75 0b                	jne    c00127d8 <SysGetEnv(regs*)+0x34>
c00127cd:	83 c4 10             	add    esp,0x10
c00127d0:	31 c0                	xor    eax,eax
c00127d2:	5b                   	pop    ebx
c00127d3:	31 d2                	xor    edx,edx
c00127d5:	5e                   	pop    esi
c00127d6:	5f                   	pop    edi
c00127d7:	c3                   	ret    
c00127d8:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00127db:	eb f0                	jmp    c00127cd <SysGetEnv(regs*)+0x29>
c00127dd:	8d 44 24 08          	lea    eax,[esp+0x8]
c00127e1:	83 ec 04             	sub    esp,0x4
c00127e4:	57                   	push   edi
c00127e5:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00127eb:	8b 7a 3c             	mov    edi,DWORD PTR [edx+0x3c]
c00127ee:	57                   	push   edi
c00127ef:	50                   	push   eax
c00127f0:	e8 aa ed ff ff       	call   c001159f <KeGetProcessEnvPair(Process*, int)>
c00127f5:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00127f8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00127fc:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0012800:	83 c4 0c             	add    esp,0xc
c0012803:	85 d2                	test   edx,edx
c0012805:	75 23                	jne    c001282a <SysGetEnv(regs*)+0x86>
c0012807:	83 ec 0c             	sub    esp,0xc
c001280a:	50                   	push   eax
c001280b:	e8 60 dd fe ff       	call   c0000570 <strlen>
c0012810:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012813:	89 c3                	mov    ebx,eax
c0012815:	e8 56 dd fe ff       	call   c0000570 <strlen>
c001281a:	83 c4 10             	add    esp,0x10
c001281d:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0012821:	83 c4 10             	add    esp,0x10
c0012824:	31 d2                	xor    edx,edx
c0012826:	5b                   	pop    ebx
c0012827:	5e                   	pop    esi
c0012828:	5f                   	pop    edi
c0012829:	c3                   	ret    
c001282a:	83 ec 08             	sub    esp,0x8
c001282d:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012830:	50                   	push   eax
c0012831:	56                   	push   esi
c0012832:	e8 09 de fe ff       	call   c0000640 <strcpy>
c0012837:	58                   	pop    eax
c0012838:	5a                   	pop    edx
c0012839:	68 b4 26 02 c0       	push   0xc00226b4
c001283e:	56                   	push   esi
c001283f:	e8 fc df fe ff       	call   c0000840 <strcat>
c0012844:	59                   	pop    ecx
c0012845:	5b                   	pop    ebx
c0012846:	57                   	push   edi
c0012847:	56                   	push   esi
c0012848:	e8 f3 df fe ff       	call   c0000840 <strcat>
c001284d:	83 c4 10             	add    esp,0x10
c0012850:	e9 78 ff ff ff       	jmp    c00127cd <SysGetEnv(regs*)+0x29>

c0012855 <SysSetFatAttrib(regs*)>:
c0012855:	57                   	push   edi
c0012856:	56                   	push   esi
c0012857:	53                   	push   ebx
c0012858:	83 ec 1c             	sub    esp,0x1c
c001285b:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001285f:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0012862:	68 14 01 00 00       	push   0x114
c0012867:	e8 7a 52 ff ff       	call   c0007ae6 <malloc>
c001286c:	83 c4 0c             	add    esp,0xc
c001286f:	89 c3                	mov    ebx,eax
c0012871:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012876:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012879:	50                   	push   eax
c001287a:	57                   	push   edi
c001287b:	53                   	push   ebx
c001287c:	e8 fb 92 ff ff       	call   c000bb7c <File::File(char const*, Process*)>
c0012881:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0012884:	83 c4 0c             	add    esp,0xc
c0012887:	0f b6 d4             	movzx  edx,ah
c001288a:	0f b6 c0             	movzx  eax,al
c001288d:	52                   	push   edx
c001288e:	50                   	push   eax
c001288f:	53                   	push   ebx
c0012890:	e8 6d 95 ff ff       	call   c000be02 <File::chfatattr(unsigned char, unsigned char)>
c0012895:	83 c4 10             	add    esp,0x10
c0012898:	85 db                	test   ebx,ebx
c001289a:	74 14                	je     c00128b0 <SysSetFatAttrib(regs*)+0x5b>
c001289c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00128a0:	8b 13                	mov    edx,DWORD PTR [ebx]
c00128a2:	83 ec 0c             	sub    esp,0xc
c00128a5:	53                   	push   ebx
c00128a6:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00128a9:	83 c4 10             	add    esp,0x10
c00128ac:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00128b0:	85 c0                	test   eax,eax
c00128b2:	0f 95 c0             	setne  al
c00128b5:	31 d2                	xor    edx,edx
c00128b7:	0f b6 c0             	movzx  eax,al
c00128ba:	f7 d8                	neg    eax
c00128bc:	83 d2 00             	adc    edx,0x0
c00128bf:	83 c4 10             	add    esp,0x10
c00128c2:	f7 da                	neg    edx
c00128c4:	5b                   	pop    ebx
c00128c5:	5e                   	pop    esi
c00128c6:	5f                   	pop    edi
c00128c7:	c3                   	ret    

c00128c8 <SysPipe(regs*)>:
c00128c8:	57                   	push   edi
c00128c9:	56                   	push   esi
c00128ca:	53                   	push   ebx
c00128cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00128cf:	83 ec 0c             	sub    esp,0xc
c00128d2:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c00128d5:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c00128d8:	6a 20                	push   0x20
c00128da:	e8 07 52 ff ff       	call   c0007ae6 <malloc>
c00128df:	89 c3                	mov    ebx,eax
c00128e1:	58                   	pop    eax
c00128e2:	5a                   	pop    edx
c00128e3:	68 00 50 00 00       	push   0x5000
c00128e8:	53                   	push   ebx
c00128e9:	e8 6a 5b ff ff       	call   c0008458 <Pipe::Pipe(int)>
c00128ee:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00128f1:	e8 f0 68 ff ff       	call   c00091e6 <UnixFile::getFileDescriptor()>
c00128f6:	89 07                	mov    DWORD PTR [edi],eax
c00128f8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00128fb:	e8 e6 68 ff ff       	call   c00091e6 <UnixFile::getFileDescriptor()>
c0012900:	83 c4 10             	add    esp,0x10
c0012903:	89 06                	mov    DWORD PTR [esi],eax
c0012905:	31 d2                	xor    edx,edx
c0012907:	5b                   	pop    ebx
c0012908:	31 c0                	xor    eax,eax
c001290a:	5e                   	pop    esi
c001290b:	5f                   	pop    edi
c001290c:	c3                   	ret    

c001290d <SysGetUnixTime(regs*)>:
c001290d:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0012912:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0012918:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001291c:	e9 29 9c ff ff       	jmp    c000c54a <Clock::timeInSecondsLocal()>

c0012921 <string_ends_with(char const*, char const*)>:
c0012921:	57                   	push   edi
c0012922:	56                   	push   esi
c0012923:	53                   	push   ebx
c0012924:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012928:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001292c:	83 ec 0c             	sub    esp,0xc
c001292f:	53                   	push   ebx
c0012930:	e8 3b dc fe ff       	call   c0000570 <strlen>
c0012935:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012938:	89 c6                	mov    esi,eax
c001293a:	e8 31 dc fe ff       	call   c0000570 <strlen>
c001293f:	83 c4 10             	add    esp,0x10
c0012942:	39 c6                	cmp    esi,eax
c0012944:	7d 06                	jge    c001294c <string_ends_with(char const*, char const*)+0x2b>
c0012946:	5b                   	pop    ebx
c0012947:	31 c0                	xor    eax,eax
c0012949:	5e                   	pop    esi
c001294a:	5f                   	pop    edi
c001294b:	c3                   	ret    
c001294c:	83 ec 08             	sub    esp,0x8
c001294f:	29 c6                	sub    esi,eax
c0012951:	57                   	push   edi
c0012952:	01 f3                	add    ebx,esi
c0012954:	53                   	push   ebx
c0012955:	e8 f6 dd fe ff       	call   c0000750 <strcmp>
c001295a:	83 c4 10             	add    esp,0x10
c001295d:	85 c0                	test   eax,eax
c001295f:	5b                   	pop    ebx
c0012960:	0f 94 c0             	sete   al
c0012963:	5e                   	pop    esi
c0012964:	0f b6 c0             	movzx  eax,al
c0012967:	5f                   	pop    edi
c0012968:	c3                   	ret    

c0012969 <SysOpen(regs*)>:
c0012969:	56                   	push   esi
c001296a:	53                   	push   ebx
c001296b:	81 ec 04 01 00 00    	sub    esp,0x104
c0012971:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0012978:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001297b:	85 c0                	test   eax,eax
c001297d:	0f 84 bc 01 00 00    	je     c0012b3f <SysOpen(regs*)+0x1d6>
c0012983:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012986:	85 c0                	test   eax,eax
c0012988:	0f 84 b1 01 00 00    	je     c0012b3f <SysOpen(regs*)+0x1d6>
c001298e:	6a 00                	push   0x0
c0012990:	68 b6 26 02 c0       	push   0xc00226b6
c0012995:	50                   	push   eax
c0012996:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001299a:	56                   	push   esi
c001299b:	e8 e4 8e ff ff       	call   c000b884 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00129a0:	89 34 24             	mov    DWORD PTR [esp],esi
c00129a3:	e8 c8 db fe ff       	call   c0000570 <strlen>
c00129a8:	83 c4 10             	add    esp,0x10
c00129ab:	83 e8 01             	sub    eax,0x1
c00129ae:	74 21                	je     c00129d1 <SysOpen(regs*)+0x68>
c00129b0:	0f be 14 04          	movsx  edx,BYTE PTR [esp+eax*1]
c00129b4:	eb 12                	jmp    c00129c8 <SysOpen(regs*)+0x5f>
c00129b6:	83 fa 3a             	cmp    edx,0x3a
c00129b9:	74 12                	je     c00129cd <SysOpen(regs*)+0x64>
c00129bb:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c00129bf:	83 e8 01             	sub    eax,0x1
c00129c2:	74 0d                	je     c00129d1 <SysOpen(regs*)+0x68>
c00129c4:	0f be 14 06          	movsx  edx,BYTE PTR [esi+eax*1]
c00129c8:	83 fa 2e             	cmp    edx,0x2e
c00129cb:	75 e9                	jne    c00129b6 <SysOpen(regs*)+0x4d>
c00129cd:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c00129d1:	83 ec 08             	sub    esp,0x8
c00129d4:	68 ba 26 02 c0       	push   0xc00226ba
c00129d9:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00129dc:	50                   	push   eax
c00129dd:	e8 3f ff ff ff       	call   c0012921 <string_ends_with(char const*, char const*)>
c00129e2:	83 c4 10             	add    esp,0x10
c00129e5:	85 c0                	test   eax,eax
c00129e7:	74 1d                	je     c0012a06 <SysOpen(regs*)+0x9d>
c00129e9:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00129ec:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c00129f2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00129f9:	81 c4 04 01 00 00    	add    esp,0x104
c00129ff:	31 c0                	xor    eax,eax
c0012a01:	31 d2                	xor    edx,edx
c0012a03:	5b                   	pop    ebx
c0012a04:	5e                   	pop    esi
c0012a05:	c3                   	ret    
c0012a06:	83 ec 08             	sub    esp,0x8
c0012a09:	68 bf 26 02 c0       	push   0xc00226bf
c0012a0e:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012a11:	50                   	push   eax
c0012a12:	e8 0a ff ff ff       	call   c0012921 <string_ends_with(char const*, char const*)>
c0012a17:	83 c4 10             	add    esp,0x10
c0012a1a:	85 c0                	test   eax,eax
c0012a1c:	75 cb                	jne    c00129e9 <SysOpen(regs*)+0x80>
c0012a1e:	83 ec 08             	sub    esp,0x8
c0012a21:	68 bb 26 02 c0       	push   0xc00226bb
c0012a26:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012a29:	50                   	push   eax
c0012a2a:	e8 21 dd fe ff       	call   c0000750 <strcmp>
c0012a2f:	83 c4 10             	add    esp,0x10
c0012a32:	85 c0                	test   eax,eax
c0012a34:	74 b3                	je     c00129e9 <SysOpen(regs*)+0x80>
c0012a36:	83 ec 08             	sub    esp,0x8
c0012a39:	68 ba 26 02 c0       	push   0xc00226ba
c0012a3e:	56                   	push   esi
c0012a3f:	e8 dd fe ff ff       	call   c0012921 <string_ends_with(char const*, char const*)>
c0012a44:	83 c4 10             	add    esp,0x10
c0012a47:	85 c0                	test   eax,eax
c0012a49:	75 9e                	jne    c00129e9 <SysOpen(regs*)+0x80>
c0012a4b:	83 ec 08             	sub    esp,0x8
c0012a4e:	68 c4 26 02 c0       	push   0xc00226c4
c0012a53:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012a56:	50                   	push   eax
c0012a57:	e8 c5 fe ff ff       	call   c0012921 <string_ends_with(char const*, char const*)>
c0012a5c:	83 c4 10             	add    esp,0x10
c0012a5f:	85 c0                	test   eax,eax
c0012a61:	0f 85 eb 00 00 00    	jne    c0012b52 <SysOpen(regs*)+0x1e9>
c0012a67:	83 ec 08             	sub    esp,0x8
c0012a6a:	68 c9 26 02 c0       	push   0xc00226c9
c0012a6f:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012a72:	50                   	push   eax
c0012a73:	e8 a9 fe ff ff       	call   c0012921 <string_ends_with(char const*, char const*)>
c0012a78:	83 c4 10             	add    esp,0x10
c0012a7b:	85 c0                	test   eax,eax
c0012a7d:	0f 85 cf 00 00 00    	jne    c0012b52 <SysOpen(regs*)+0x1e9>
c0012a83:	83 ec 08             	sub    esp,0x8
c0012a86:	68 c5 26 02 c0       	push   0xc00226c5
c0012a8b:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0012a8e:	51                   	push   ecx
c0012a8f:	e8 bc dc fe ff       	call   c0000750 <strcmp>
c0012a94:	83 c4 10             	add    esp,0x10
c0012a97:	85 c0                	test   eax,eax
c0012a99:	0f 84 b3 00 00 00    	je     c0012b52 <SysOpen(regs*)+0x1e9>
c0012a9f:	83 ec 08             	sub    esp,0x8
c0012aa2:	68 c4 26 02 c0       	push   0xc00226c4
c0012aa7:	56                   	push   esi
c0012aa8:	e8 74 fe ff ff       	call   c0012921 <string_ends_with(char const*, char const*)>
c0012aad:	83 c4 10             	add    esp,0x10
c0012ab0:	85 c0                	test   eax,eax
c0012ab2:	0f 85 9a 00 00 00    	jne    c0012b52 <SysOpen(regs*)+0x1e9>
c0012ab8:	83 ec 0c             	sub    esp,0xc
c0012abb:	68 14 01 00 00       	push   0x114
c0012ac0:	e8 21 50 ff ff       	call   c0007ae6 <malloc>
c0012ac5:	83 c4 0c             	add    esp,0xc
c0012ac8:	89 c6                	mov    esi,eax
c0012aca:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012acf:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012ad2:	50                   	push   eax
c0012ad3:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0012ad6:	52                   	push   edx
c0012ad7:	56                   	push   esi
c0012ad8:	e8 9f 90 ff ff       	call   c000bb7c <File::File(char const*, Process*)>
c0012add:	83 c4 10             	add    esp,0x10
c0012ae0:	85 f6                	test   esi,esi
c0012ae2:	74 5b                	je     c0012b3f <SysOpen(regs*)+0x1d6>
c0012ae4:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0012ae7:	0f b6 c2             	movzx  eax,dl
c0012aea:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0012aed:	89 d0                	mov    eax,edx
c0012aef:	83 e0 01             	and    eax,0x1
c0012af2:	f6 c2 02             	test   dl,0x2
c0012af5:	74 03                	je     c0012afa <SysOpen(regs*)+0x191>
c0012af7:	83 c8 02             	or     eax,0x2
c0012afa:	f6 c2 04             	test   dl,0x4
c0012afd:	74 03                	je     c0012b02 <SysOpen(regs*)+0x199>
c0012aff:	83 c8 04             	or     eax,0x4
c0012b02:	f6 c2 08             	test   dl,0x8
c0012b05:	74 03                	je     c0012b0a <SysOpen(regs*)+0x1a1>
c0012b07:	83 c8 0a             	or     eax,0xa
c0012b0a:	80 e2 10             	and    dl,0x10
c0012b0d:	74 03                	je     c0012b12 <SysOpen(regs*)+0x1a9>
c0012b0f:	83 c8 12             	or     eax,0x12
c0012b12:	83 ec 08             	sub    esp,0x8
c0012b15:	50                   	push   eax
c0012b16:	56                   	push   esi
c0012b17:	e8 7e 90 ff ff       	call   c000bb9a <File::open(FileOpenMode)>
c0012b1c:	83 c4 10             	add    esp,0x10
c0012b1f:	85 c0                	test   eax,eax
c0012b21:	75 1c                	jne    c0012b3f <SysOpen(regs*)+0x1d6>
c0012b23:	83 ec 0c             	sub    esp,0xc
c0012b26:	56                   	push   esi
c0012b27:	e8 ba 66 ff ff       	call   c00091e6 <UnixFile::getFileDescriptor()>
c0012b2c:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0012b2f:	83 c4 10             	add    esp,0x10
c0012b32:	89 02                	mov    DWORD PTR [edx],eax
c0012b34:	c1 f8 1f             	sar    eax,0x1f
c0012b37:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0012b3a:	e9 ba fe ff ff       	jmp    c00129f9 <SysOpen(regs*)+0x90>
c0012b3f:	81 c4 04 01 00 00    	add    esp,0x104
c0012b45:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012b4a:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012b4f:	5b                   	pop    ebx
c0012b50:	5e                   	pop    esi
c0012b51:	c3                   	ret    
c0012b52:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012b55:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0012b5b:	e9 92 fe ff ff       	jmp    c00129f2 <SysOpen(regs*)+0x89>

c0012b60 <KeSystemCall(regs*, void*)>:
c0012b60:	53                   	push   ebx
c0012b61:	83 ec 08             	sub    esp,0x8
c0012b64:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012b68:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0012b6b:	83 f8 3e             	cmp    eax,0x3e
c0012b6e:	77 16                	ja     c0012b86 <KeSystemCall(regs*, void*)+0x26>
c0012b70:	8b 14 85 e0 3e 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdc120]
c0012b77:	85 d2                	test   edx,edx
c0012b79:	74 0b                	je     c0012b86 <KeSystemCall(regs*, void*)+0x26>
c0012b7b:	83 ec 0c             	sub    esp,0xc
c0012b7e:	53                   	push   ebx
c0012b7f:	ff d2                	call   edx
c0012b81:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0012b84:	eb 0d                	jmp    c0012b93 <KeSystemCall(regs*, void*)+0x33>
c0012b86:	52                   	push   edx
c0012b87:	52                   	push   edx
c0012b88:	50                   	push   eax
c0012b89:	68 ce 26 02 c0       	push   0xc00226ce
c0012b8e:	e8 e2 7d ff ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c0012b93:	83 c4 10             	add    esp,0x10
c0012b96:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0012b9b:	31 d2                	xor    edx,edx
c0012b9d:	83 c4 08             	add    esp,0x8
c0012ba0:	5b                   	pop    ebx
c0012ba1:	c3                   	ret    
c0012ba2:	66 90                	xchg   ax,ax

c0012ba4 <KeSwitchEndian16(unsigned short)>:
c0012ba4:	83 ec 04             	sub    esp,0x4
c0012ba7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012bab:	66 89 04 24          	mov    WORD PTR [esp],ax
c0012baf:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0012bb3:	c1 f8 08             	sar    eax,0x8
c0012bb6:	89 c2                	mov    edx,eax
c0012bb8:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0012bbc:	c1 e0 08             	shl    eax,0x8
c0012bbf:	09 d0                	or     eax,edx
c0012bc1:	83 c4 04             	add    esp,0x4
c0012bc4:	c3                   	ret    
c0012bc5:	8d 76 00             	lea    esi,[esi+0x0]

c0012bc8 <KeSwitchEndian32(unsigned int)>:
c0012bc8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012bcc:	c1 e8 18             	shr    eax,0x18
c0012bcf:	89 c2                	mov    edx,eax
c0012bd1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012bd5:	c1 e0 08             	shl    eax,0x8
c0012bd8:	25 00 00 ff 00       	and    eax,0xff0000
c0012bdd:	09 c2                	or     edx,eax
c0012bdf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012be3:	c1 e8 08             	shr    eax,0x8
c0012be6:	25 00 ff 00 00       	and    eax,0xff00
c0012beb:	09 c2                	or     edx,eax
c0012bed:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012bf1:	c1 e0 18             	shl    eax,0x18
c0012bf4:	09 d0                	or     eax,edx
c0012bf6:	c3                   	ret    
c0012bf7:	90                   	nop

c0012bf8 <EthernetCRC32(unsigned char*, int)>:
c0012bf8:	83 ec 10             	sub    esp,0x10
c0012bfb:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0012c00:	75 0a                	jne    c0012c0c <EthernetCRC32(unsigned char*, int)+0x14>
c0012c02:	b8 00 00 00 00       	mov    eax,0x0
c0012c07:	e9 8c 00 00 00       	jmp    c0012c98 <EthernetCRC32(unsigned char*, int)+0xa0>
c0012c0c:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0012c11:	7f 09                	jg     c0012c1c <EthernetCRC32(unsigned char*, int)+0x24>
c0012c13:	b8 00 00 00 00       	mov    eax,0x0
c0012c18:	eb 7e                	jmp    c0012c98 <EthernetCRC32(unsigned char*, int)+0xa0>
c0012c1a:	66 90                	xchg   ax,ax
c0012c1c:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c0012c24:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0012c2c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012c30:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0012c34:	7d 5a                	jge    c0012c90 <EthernetCRC32(unsigned char*, int)+0x98>
c0012c36:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012c3a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012c3e:	01 d0                	add    eax,edx
c0012c40:	8a 00                	mov    al,BYTE PTR [eax]
c0012c42:	0f b6 c0             	movzx  eax,al
c0012c45:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c0012c49:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0012c51:	8d 76 00             	lea    esi,[esi+0x0]
c0012c54:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c0012c59:	7f 2d                	jg     c0012c88 <EthernetCRC32(unsigned char*, int)+0x90>
c0012c5b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012c5f:	83 e0 01             	and    eax,0x1
c0012c62:	74 10                	je     c0012c74 <EthernetCRC32(unsigned char*, int)+0x7c>
c0012c64:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012c68:	d1 e8                	shr    eax,1
c0012c6a:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0012c6f:	eb 0b                	jmp    c0012c7c <EthernetCRC32(unsigned char*, int)+0x84>
c0012c71:	8d 76 00             	lea    esi,[esi+0x0]
c0012c74:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012c78:	d1 e8                	shr    eax,1
c0012c7a:	66 90                	xchg   ax,ax
c0012c7c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012c80:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0012c85:	eb cd                	jmp    c0012c54 <EthernetCRC32(unsigned char*, int)+0x5c>
c0012c87:	90                   	nop
c0012c88:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c0012c8d:	eb 9d                	jmp    c0012c2c <EthernetCRC32(unsigned char*, int)+0x34>
c0012c8f:	90                   	nop
c0012c90:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012c94:	f7 d0                	not    eax
c0012c96:	66 90                	xchg   ax,ax
c0012c98:	83 c4 10             	add    esp,0x10
c0012c9b:	c3                   	ret    

c0012c9c <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)>:
c0012c9c:	83 ec 2c             	sub    esp,0x2c
c0012c9f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012ca3:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0012ca8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012cac:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012cb0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012cb4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012cb7:	0f b7 c0             	movzx  eax,ax
c0012cba:	3d 06 08 00 00       	cmp    eax,0x806
c0012cbf:	75 13                	jne    c0012cd4 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x38>
c0012cc1:	83 ec 0c             	sub    esp,0xc
c0012cc4:	68 e2 26 02 c0       	push   0xc00226e2
c0012cc9:	e8 a7 7c ff ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c0012cce:	83 c4 10             	add    esp,0x10
c0012cd1:	eb 25                	jmp    c0012cf8 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c0012cd3:	90                   	nop
c0012cd4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012cd8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012cdb:	0f b7 c0             	movzx  eax,ax
c0012cde:	3d 00 08 00 00       	cmp    eax,0x800
c0012ce3:	75 13                	jne    c0012cf8 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c0012ce5:	83 ec 0c             	sub    esp,0xc
c0012ce8:	68 f8 26 02 c0       	push   0xc00226f8
c0012ced:	e8 83 7c ff ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c0012cf2:	83 c4 10             	add    esp,0x10
c0012cf5:	8d 76 00             	lea    esi,[esi+0x0]
c0012cf8:	90                   	nop
c0012cf9:	83 c4 2c             	add    esp,0x2c
c0012cfc:	c3                   	ret    

c0012cfd <CmOpen(char const*)>:
c0012cfd:	57                   	push   edi
c0012cfe:	56                   	push   esi
c0012cff:	53                   	push   ebx
c0012d00:	83 ec 1c             	sub    esp,0x1c
c0012d03:	6a 30                	push   0x30
c0012d05:	e8 dc 4d ff ff       	call   c0007ae6 <malloc>
c0012d0a:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0012d11:	89 c3                	mov    ebx,eax
c0012d13:	e8 ce 4d ff ff       	call   c0007ae6 <malloc>
c0012d18:	83 c4 0c             	add    esp,0xc
c0012d1b:	89 c6                	mov    esi,eax
c0012d1d:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c0012d23:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0012d27:	50                   	push   eax
c0012d28:	e8 4f 8e ff ff       	call   c000bb7c <File::File(char const*, Process*)>
c0012d2d:	83 c4 0c             	add    esp,0xc
c0012d30:	89 33                	mov    DWORD PTR [ebx],esi
c0012d32:	8d 44 24 07          	lea    eax,[esp+0x7]
c0012d36:	50                   	push   eax
c0012d37:	8d 44 24 10          	lea    eax,[esp+0x10]
c0012d3b:	50                   	push   eax
c0012d3c:	56                   	push   esi
c0012d3d:	e8 5a 91 ff ff       	call   c000be9c <File::stat(unsigned long long*, bool*)>
c0012d42:	5a                   	pop    edx
c0012d43:	59                   	pop    ecx
c0012d44:	6a 01                	push   0x1
c0012d46:	ff 33                	push   DWORD PTR [ebx]
c0012d48:	e8 4d 8e ff ff       	call   c000bb9a <File::open(FileOpenMode)>
c0012d4d:	5e                   	pop    esi
c0012d4e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012d52:	e8 8f 4d ff ff       	call   c0007ae6 <malloc>
c0012d57:	5a                   	pop    edx
c0012d58:	89 c7                	mov    edi,eax
c0012d5a:	8d 74 24 10          	lea    esi,[esp+0x10]
c0012d5e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012d60:	8b 10                	mov    edx,DWORD PTR [eax]
c0012d62:	56                   	push   esi
c0012d63:	57                   	push   edi
c0012d64:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012d68:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012d6c:	50                   	push   eax
c0012d6d:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012d70:	83 c4 14             	add    esp,0x14
c0012d73:	ff 33                	push   DWORD PTR [ebx]
c0012d75:	e8 7e 8e ff ff       	call   c000bbf8 <File::close()>
c0012d7a:	59                   	pop    ecx
c0012d7b:	58                   	pop    eax
c0012d7c:	6a 13                	push   0x13
c0012d7e:	ff 33                	push   DWORD PTR [ebx]
c0012d80:	e8 15 8e ff ff       	call   c000bb9a <File::open(FileOpenMode)>
c0012d85:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012d87:	8b 10                	mov    edx,DWORD PTR [eax]
c0012d89:	89 34 24             	mov    DWORD PTR [esp],esi
c0012d8c:	57                   	push   edi
c0012d8d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012d91:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012d95:	50                   	push   eax
c0012d96:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0012d99:	83 c4 14             	add    esp,0x14
c0012d9c:	57                   	push   edi
c0012d9d:	e8 54 4d ff ff       	call   c0007af6 <free>
c0012da2:	83 c4 10             	add    esp,0x10
c0012da5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0012da8:	75 10                	jne    c0012dba <CmOpen(char const*)+0xbd>
c0012daa:	83 ec 0c             	sub    esp,0xc
c0012dad:	68 0d 27 02 c0       	push   0xc002270d
c0012db2:	e8 10 e9 ff ff       	call   c00116c7 <KePanic(char const*)>
c0012db7:	83 c4 10             	add    esp,0x10
c0012dba:	8d 7b 05             	lea    edi,[ebx+0x5]
c0012dbd:	50                   	push   eax
c0012dbe:	6a 00                	push   0x0
c0012dc0:	6a 00                	push   0x0
c0012dc2:	ff 33                	push   DWORD PTR [ebx]
c0012dc4:	e8 8f 8e ff ff       	call   c000bc58 <File::seek(unsigned long long)>
c0012dc9:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012dcb:	8b 10                	mov    edx,DWORD PTR [eax]
c0012dcd:	89 34 24             	mov    DWORD PTR [esp],esi
c0012dd0:	57                   	push   edi
c0012dd1:	6a 00                	push   0x0
c0012dd3:	6a 2b                	push   0x2b
c0012dd5:	50                   	push   eax
c0012dd6:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012dd9:	83 c4 1c             	add    esp,0x1c
c0012ddc:	6a 00                	push   0x0
c0012dde:	6a 00                	push   0x0
c0012de0:	ff 33                	push   DWORD PTR [ebx]
c0012de2:	e8 71 8e ff ff       	call   c000bc58 <File::seek(unsigned long long)>
c0012de7:	83 c4 0c             	add    esp,0xc
c0012dea:	6a 08                	push   0x8
c0012dec:	68 1e 27 02 c0       	push   0xc002271e
c0012df1:	57                   	push   edi
c0012df2:	e8 89 d5 fe ff       	call   c0000380 <memcmp>
c0012df7:	83 c4 10             	add    esp,0x10
c0012dfa:	85 c0                	test   eax,eax
c0012dfc:	74 10                	je     c0012e0e <CmOpen(char const*)+0x111>
c0012dfe:	83 ec 0c             	sub    esp,0xc
c0012e01:	68 27 27 02 c0       	push   0xc0022727
c0012e06:	e8 bc e8 ff ff       	call   c00116c7 <KePanic(char const*)>
c0012e0b:	83 c4 10             	add    esp,0x10
c0012e0e:	c6 43 04 01          	mov    BYTE PTR [ebx+0x4],0x1
c0012e12:	89 d8                	mov    eax,ebx
c0012e14:	83 c4 10             	add    esp,0x10
c0012e17:	5b                   	pop    ebx
c0012e18:	5e                   	pop    esi
c0012e19:	5f                   	pop    edi
c0012e1a:	c3                   	ret    

c0012e1b <CmClose(Reghive_Tag*)>:
c0012e1b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012e1f:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c0012e23:	74 0b                	je     c0012e30 <CmClose(Reghive_Tag*)+0x15>
c0012e25:	8b 00                	mov    eax,DWORD PTR [eax]
c0012e27:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012e2b:	e9 c8 8d ff ff       	jmp    c000bbf8 <File::close()>
c0012e30:	c3                   	ret    

c0012e31 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>:
c0012e31:	53                   	push   ebx
c0012e32:	83 ec 18             	sub    esp,0x18
c0012e35:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012e39:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0012e3d:	74 29                	je     c0012e68 <CmReadExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c0012e3f:	50                   	push   eax
c0012e40:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c0012e45:	99                   	cdq    
c0012e46:	52                   	push   edx
c0012e47:	50                   	push   eax
c0012e48:	ff 33                	push   DWORD PTR [ebx]
c0012e4a:	e8 09 8e ff ff       	call   c000bc58 <File::seek(unsigned long long)>
c0012e4f:	5a                   	pop    edx
c0012e50:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012e52:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0012e56:	8b 10                	mov    edx,DWORD PTR [eax]
c0012e58:	51                   	push   ecx
c0012e59:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012e5d:	6a 00                	push   0x0
c0012e5f:	6a 2b                	push   0x2b
c0012e61:	50                   	push   eax
c0012e62:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012e65:	83 c4 20             	add    esp,0x20
c0012e68:	83 c4 18             	add    esp,0x18
c0012e6b:	5b                   	pop    ebx
c0012e6c:	c3                   	ret    

c0012e6d <CmGetString(Reghive_Tag*, int, char*)>:
c0012e6d:	55                   	push   ebp
c0012e6e:	57                   	push   edi
c0012e6f:	56                   	push   esi
c0012e70:	53                   	push   ebx
c0012e71:	31 db                	xor    ebx,ebx
c0012e73:	83 ec 70             	sub    esp,0x70
c0012e76:	8b ac 24 84 00 00 00 	mov    ebp,DWORD PTR [esp+0x84]
c0012e7d:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0012e81:	50                   	push   eax
c0012e82:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0012e89:	55                   	push   ebp
c0012e8a:	e8 a2 ff ff ff       	call   c0012e31 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012e8f:	83 c4 10             	add    esp,0x10
c0012e92:	0f b6 44 1c 22       	movzx  eax,BYTE PTR [esp+ebx*1+0x22]
c0012e97:	c1 e0 08             	shl    eax,0x8
c0012e9a:	89 c2                	mov    edx,eax
c0012e9c:	0f b6 44 1c 21       	movzx  eax,BYTE PTR [esp+ebx*1+0x21]
c0012ea1:	09 d0                	or     eax,edx
c0012ea3:	0f b6 54 1c 20       	movzx  edx,BYTE PTR [esp+ebx*1+0x20]
c0012ea8:	c1 e0 08             	shl    eax,0x8
c0012eab:	09 d0                	or     eax,edx
c0012ead:	74 25                	je     c0012ed4 <CmGetString(Reghive_Tag*, int, char*)+0x67>
c0012eaf:	6b fb 0d             	imul   edi,ebx,0xd
c0012eb2:	52                   	push   edx
c0012eb3:	8d 54 24 39          	lea    edx,[esp+0x39]
c0012eb7:	52                   	push   edx
c0012eb8:	50                   	push   eax
c0012eb9:	55                   	push   ebp
c0012eba:	e8 72 ff ff ff       	call   c0012e31 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012ebf:	8d 74 24 49          	lea    esi,[esp+0x49]
c0012ec3:	03 bc 24 98 00 00 00 	add    edi,DWORD PTR [esp+0x98]
c0012eca:	b9 27 00 00 00       	mov    ecx,0x27
c0012ecf:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012ed1:	83 c4 10             	add    esp,0x10
c0012ed4:	83 c3 03             	add    ebx,0x3
c0012ed7:	83 fb 15             	cmp    ebx,0x15
c0012eda:	75 b6                	jne    c0012e92 <CmGetString(Reghive_Tag*, int, char*)+0x25>
c0012edc:	83 c4 6c             	add    esp,0x6c
c0012edf:	5b                   	pop    ebx
c0012ee0:	5e                   	pop    esi
c0012ee1:	5f                   	pop    edi
c0012ee2:	5d                   	pop    ebp
c0012ee3:	c3                   	ret    

c0012ee4 <CmEnterDirectory(Reghive_Tag*, int)>:
c0012ee4:	83 ec 40             	sub    esp,0x40
c0012ee7:	8d 44 24 09          	lea    eax,[esp+0x9]
c0012eeb:	50                   	push   eax
c0012eec:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012ef0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012ef4:	e8 38 ff ff ff       	call   c0012e31 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012ef9:	83 c4 10             	add    esp,0x10
c0012efc:	83 c8 ff             	or     eax,0xffffffff
c0012eff:	80 7c 24 05 4e       	cmp    BYTE PTR [esp+0x5],0x4e
c0012f04:	75 19                	jne    c0012f1f <CmEnterDirectory(Reghive_Tag*, int)+0x3b>
c0012f06:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c0012f0b:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0012f10:	c1 e0 08             	shl    eax,0x8
c0012f13:	09 c2                	or     edx,eax
c0012f15:	0f b6 44 24 1d       	movzx  eax,BYTE PTR [esp+0x1d]
c0012f1a:	c1 e0 10             	shl    eax,0x10
c0012f1d:	09 d0                	or     eax,edx
c0012f1f:	83 c4 3c             	add    esp,0x3c
c0012f22:	c3                   	ret    

c0012f23 <CmGetNext(Reghive_Tag*, int)>:
c0012f23:	83 ec 40             	sub    esp,0x40
c0012f26:	8d 44 24 09          	lea    eax,[esp+0x9]
c0012f2a:	50                   	push   eax
c0012f2b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012f2f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012f33:	e8 f9 fe ff ff       	call   c0012e31 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012f38:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c0012f3d:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0012f42:	c1 e0 08             	shl    eax,0x8
c0012f45:	09 c2                	or     edx,eax
c0012f47:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c0012f4c:	83 c4 4c             	add    esp,0x4c
c0012f4f:	c1 e0 10             	shl    eax,0x10
c0012f52:	09 d0                	or     eax,edx
c0012f54:	c3                   	ret    

c0012f55 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>:
c0012f55:	53                   	push   ebx
c0012f56:	83 ec 18             	sub    esp,0x18
c0012f59:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012f5d:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0012f61:	74 29                	je     c0012f8c <CmWriteExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c0012f63:	50                   	push   eax
c0012f64:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c0012f69:	99                   	cdq    
c0012f6a:	52                   	push   edx
c0012f6b:	50                   	push   eax
c0012f6c:	ff 33                	push   DWORD PTR [ebx]
c0012f6e:	e8 e5 8c ff ff       	call   c000bc58 <File::seek(unsigned long long)>
c0012f73:	5a                   	pop    edx
c0012f74:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012f76:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0012f7a:	8b 10                	mov    edx,DWORD PTR [eax]
c0012f7c:	51                   	push   ecx
c0012f7d:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012f81:	6a 00                	push   0x0
c0012f83:	6a 2b                	push   0x2b
c0012f85:	50                   	push   eax
c0012f86:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0012f89:	83 c4 20             	add    esp,0x20
c0012f8c:	83 c4 18             	add    esp,0x18
c0012f8f:	5b                   	pop    ebx
c0012f90:	c3                   	ret    

c0012f91 <CmFreeExtent(Reghive_Tag*, int)>:
c0012f91:	53                   	push   ebx
c0012f92:	83 ec 3c             	sub    esp,0x3c
c0012f95:	6a 2b                	push   0x2b
c0012f97:	6a 00                	push   0x0
c0012f99:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0012f9d:	53                   	push   ebx
c0012f9e:	e8 4d d5 fe ff       	call   c00004f0 <memset>
c0012fa3:	83 c4 0c             	add    esp,0xc
c0012fa6:	53                   	push   ebx
c0012fa7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012fab:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012faf:	e8 a1 ff ff ff       	call   c0012f55 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012fb4:	83 c4 48             	add    esp,0x48
c0012fb7:	5b                   	pop    ebx
c0012fb8:	c3                   	ret    

c0012fb9 <CmUpdateHeader(Reghive_Tag*)>:
c0012fb9:	83 ec 0c             	sub    esp,0xc
c0012fbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012fc0:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c0012fc4:	74 10                	je     c0012fd6 <CmUpdateHeader(Reghive_Tag*)+0x1d>
c0012fc6:	52                   	push   edx
c0012fc7:	8d 50 05             	lea    edx,[eax+0x5]
c0012fca:	52                   	push   edx
c0012fcb:	6a 00                	push   0x0
c0012fcd:	50                   	push   eax
c0012fce:	e8 82 ff ff ff       	call   c0012f55 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012fd3:	83 c4 10             	add    esp,0x10
c0012fd6:	83 c4 0c             	add    esp,0xc
c0012fd9:	c3                   	ret    

c0012fda <CmExpand(Reghive_Tag*, int)>:
c0012fda:	57                   	push   edi
c0012fdb:	56                   	push   esi
c0012fdc:	83 ce ff             	or     esi,0xffffffff
c0012fdf:	53                   	push   ebx
c0012fe0:	83 ec 30             	sub    esp,0x30
c0012fe3:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0012fe7:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0012feb:	74 5f                	je     c001304c <CmExpand(Reghive_Tag*, int)+0x72>
c0012fed:	31 d2                	xor    edx,edx
c0012fef:	31 f6                	xor    esi,esi
c0012ff1:	50                   	push   eax
c0012ff2:	6b 43 0d 2b          	imul   eax,DWORD PTR [ebx+0xd],0x2b
c0012ff6:	52                   	push   edx
c0012ff7:	50                   	push   eax
c0012ff8:	ff 33                	push   DWORD PTR [ebx]
c0012ffa:	e8 59 8c ff ff       	call   c000bc58 <File::seek(unsigned long long)>
c0012fff:	83 c4 0c             	add    esp,0xc
c0013002:	6a 2b                	push   0x2b
c0013004:	6a 00                	push   0x0
c0013006:	8d 7c 24 11          	lea    edi,[esp+0x11]
c001300a:	57                   	push   edi
c001300b:	e8 e0 d4 fe ff       	call   c00004f0 <memset>
c0013010:	83 c4 10             	add    esp,0x10
c0013013:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c0013017:	7d 1b                	jge    c0013034 <CmExpand(Reghive_Tag*, int)+0x5a>
c0013019:	83 ec 0c             	sub    esp,0xc
c001301c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001301e:	8d 4c 24 0c          	lea    ecx,[esp+0xc]
c0013022:	8b 10                	mov    edx,DWORD PTR [eax]
c0013024:	46                   	inc    esi
c0013025:	51                   	push   ecx
c0013026:	57                   	push   edi
c0013027:	6a 00                	push   0x0
c0013029:	6a 2b                	push   0x2b
c001302b:	50                   	push   eax
c001302c:	ff 52 10             	call   DWORD PTR [edx+0x10]
c001302f:	83 c4 20             	add    esp,0x20
c0013032:	eb df                	jmp    c0013013 <CmExpand(Reghive_Tag*, int)+0x39>
c0013034:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0013038:	8b 73 0d             	mov    esi,DWORD PTR [ebx+0xd]
c001303b:	83 ec 0c             	sub    esp,0xc
c001303e:	01 f2                	add    edx,esi
c0013040:	89 53 0d             	mov    DWORD PTR [ebx+0xd],edx
c0013043:	53                   	push   ebx
c0013044:	e8 70 ff ff ff       	call   c0012fb9 <CmUpdateHeader(Reghive_Tag*)>
c0013049:	83 c4 10             	add    esp,0x10
c001304c:	83 c4 30             	add    esp,0x30
c001304f:	89 f0                	mov    eax,esi
c0013051:	5b                   	pop    ebx
c0013052:	5e                   	pop    esi
c0013053:	5f                   	pop    edi
c0013054:	c3                   	ret    

c0013055 <CmFindUnusedExtent(Reghive_Tag*)>:
c0013055:	55                   	push   ebp
c0013056:	57                   	push   edi
c0013057:	56                   	push   esi
c0013058:	53                   	push   ebx
c0013059:	83 cb ff             	or     ebx,0xffffffff
c001305c:	83 ec 1c             	sub    esp,0x1c
c001305f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0013063:	80 7d 04 00          	cmp    BYTE PTR [ebp+0x4],0x0
c0013067:	74 68                	je     c00130d1 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c0013069:	be 2b 00 00 00       	mov    esi,0x2b
c001306e:	51                   	push   ecx
c001306f:	31 ff                	xor    edi,edi
c0013071:	6a 00                	push   0x0
c0013073:	31 db                	xor    ebx,ebx
c0013075:	6a 00                	push   0x0
c0013077:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c001307a:	e8 d9 8b ff ff       	call   c000bc58 <File::seek(unsigned long long)>
c001307f:	83 c4 10             	add    esp,0x10
c0013082:	39 5d 0d             	cmp    DWORD PTR [ebp+0xd],ebx
c0013085:	76 3b                	jbe    c00130c2 <CmFindUnusedExtent(Reghive_Tag*)+0x6d>
c0013087:	83 ec 0c             	sub    esp,0xc
c001308a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001308d:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0013091:	8b 10                	mov    edx,DWORD PTR [eax]
c0013093:	51                   	push   ecx
c0013094:	8d 4c 24 1b          	lea    ecx,[esp+0x1b]
c0013098:	51                   	push   ecx
c0013099:	6a 00                	push   0x0
c001309b:	6a 01                	push   0x1
c001309d:	50                   	push   eax
c001309e:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00130a1:	83 c4 20             	add    esp,0x20
c00130a4:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00130a9:	74 26                	je     c00130d1 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c00130ab:	43                   	inc    ebx
c00130ac:	52                   	push   edx
c00130ad:	57                   	push   edi
c00130ae:	56                   	push   esi
c00130af:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c00130b2:	e8 a1 8b ff ff       	call   c000bc58 <File::seek(unsigned long long)>
c00130b7:	83 c6 2b             	add    esi,0x2b
c00130ba:	83 d7 00             	adc    edi,0x0
c00130bd:	83 c4 10             	add    esp,0x10
c00130c0:	eb c0                	jmp    c0013082 <CmFindUnusedExtent(Reghive_Tag*)+0x2d>
c00130c2:	50                   	push   eax
c00130c3:	50                   	push   eax
c00130c4:	6a 40                	push   0x40
c00130c6:	55                   	push   ebp
c00130c7:	e8 0e ff ff ff       	call   c0012fda <CmExpand(Reghive_Tag*, int)>
c00130cc:	83 c4 10             	add    esp,0x10
c00130cf:	89 c3                	mov    ebx,eax
c00130d1:	83 c4 1c             	add    esp,0x1c
c00130d4:	89 d8                	mov    eax,ebx
c00130d6:	5b                   	pop    ebx
c00130d7:	5e                   	pop    esi
c00130d8:	5f                   	pop    edi
c00130d9:	5d                   	pop    ebp
c00130da:	c3                   	ret    

c00130db <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>:
c00130db:	55                   	push   ebp
c00130dc:	57                   	push   edi
c00130dd:	56                   	push   esi
c00130de:	53                   	push   ebx
c00130df:	81 ec 88 00 00 00    	sub    esp,0x88
c00130e5:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c00130ec:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00130f3:	e8 5d ff ff ff       	call   c0013055 <CmFindUnusedExtent(Reghive_Tag*)>
c00130f8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00130fc:	83 c4 0c             	add    esp,0xc
c00130ff:	6a 2b                	push   0x2b
c0013101:	6a 00                	push   0x0
c0013103:	8d 6c 24 26          	lea    ebp,[esp+0x26]
c0013107:	55                   	push   ebp
c0013108:	e8 e3 d3 fe ff       	call   c00004f0 <memset>
c001310d:	83 c4 10             	add    esp,0x10
c0013110:	85 db                	test   ebx,ebx
c0013112:	74 12                	je     c0013126 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x4b>
c0013114:	51                   	push   ecx
c0013115:	55                   	push   ebp
c0013116:	53                   	push   ebx
c0013117:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c001311e:	e8 0e fd ff ff       	call   c0012e31 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0013123:	83 c4 10             	add    esp,0x10
c0013126:	8d 7c 24 45          	lea    edi,[esp+0x45]
c001312a:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c0013131:	b9 2b 00 00 00       	mov    ecx,0x2b
c0013136:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013138:	85 db                	test   ebx,ebx
c001313a:	74 49                	je     c0013185 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xaa>
c001313c:	0f b6 4c 24 1b       	movzx  ecx,BYTE PTR [esp+0x1b]
c0013141:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c0013146:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001314a:	c1 e0 08             	shl    eax,0x8
c001314d:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0013153:	09 c8                	or     eax,ecx
c0013155:	74 11                	je     c0013168 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x8d>
c0013157:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c001315b:	88 64 24 47          	mov    BYTE PTR [esp+0x47],ah
c001315f:	c1 e8 10             	shr    eax,0x10
c0013162:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c0013166:	eb 0f                	jmp    c0013177 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x9c>
c0013168:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c001316d:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c0013172:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c0013177:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c001317b:	c1 ea 08             	shr    edx,0x8
c001317e:	66 89 54 24 1c       	mov    WORD PTR [esp+0x1c],dx
c0013183:	eb 0f                	jmp    c0013194 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xb9>
c0013185:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c001318a:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c001318f:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c0013194:	52                   	push   edx
c0013195:	8d 44 24 49          	lea    eax,[esp+0x49]
c0013199:	50                   	push   eax
c001319a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001319e:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00131a5:	e8 ab fd ff ff       	call   c0012f55 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00131aa:	83 c4 10             	add    esp,0x10
c00131ad:	85 db                	test   ebx,ebx
c00131af:	74 12                	je     c00131c3 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xe8>
c00131b1:	50                   	push   eax
c00131b2:	55                   	push   ebp
c00131b3:	53                   	push   ebx
c00131b4:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00131bb:	e8 95 fd ff ff       	call   c0012f55 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00131c0:	83 c4 10             	add    esp,0x10
c00131c3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00131c7:	83 c4 7c             	add    esp,0x7c
c00131ca:	5b                   	pop    ebx
c00131cb:	5e                   	pop    esi
c00131cc:	5f                   	pop    edi
c00131cd:	5d                   	pop    ebp
c00131ce:	c3                   	ret    

c00131cf <CmSetString(Reghive_Tag*, int, char const*)>:
c00131cf:	55                   	push   ebp
c00131d0:	57                   	push   edi
c00131d1:	56                   	push   esi
c00131d2:	53                   	push   ebx
c00131d3:	bb 27 00 00 00       	mov    ebx,0x27
c00131d8:	81 ec 88 00 00 00    	sub    esp,0x88
c00131de:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c00131e5:	ff b4 24 a4 00 00 00 	push   DWORD PTR [esp+0xa4]
c00131ec:	e8 7f d3 fe ff       	call   c0000570 <strlen>
c00131f1:	8d 48 26             	lea    ecx,[eax+0x26]
c00131f4:	89 c8                	mov    eax,ecx
c00131f6:	99                   	cdq    
c00131f7:	f7 fb                	idiv   ebx
c00131f9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00131fd:	83 c4 10             	add    esp,0x10
c0013200:	81 f9 37 01 00 00    	cmp    ecx,0x137
c0013206:	7e 10                	jle    c0013218 <CmSetString(Reghive_Tag*, int, char const*)+0x49>
c0013208:	83 ec 0c             	sub    esp,0xc
c001320b:	68 38 27 02 c0       	push   0xc0022738
c0013210:	e8 b2 e4 ff ff       	call   c00116c7 <KePanic(char const*)>
c0013215:	83 c4 10             	add    esp,0x10
c0013218:	31 ff                	xor    edi,edi
c001321a:	50                   	push   eax
c001321b:	8d 5c 24 1e          	lea    ebx,[esp+0x1e]
c001321f:	53                   	push   ebx
c0013220:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0013227:	56                   	push   esi
c0013228:	e8 04 fc ff ff       	call   c0012e31 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c001322d:	83 c4 10             	add    esp,0x10
c0013230:	0f b6 53 18          	movzx  edx,BYTE PTR [ebx+0x18]
c0013234:	89 d0                	mov    eax,edx
c0013236:	0f b6 53 17          	movzx  edx,BYTE PTR [ebx+0x17]
c001323a:	c1 e0 08             	shl    eax,0x8
c001323d:	09 c2                	or     edx,eax
c001323f:	0f b6 43 16          	movzx  eax,BYTE PTR [ebx+0x16]
c0013243:	c1 e2 08             	shl    edx,0x8
c0013246:	09 c2                	or     edx,eax
c0013248:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c001324c:	7e 76                	jle    c00132c4 <CmSetString(Reghive_Tag*, int, char const*)+0xf5>
c001324e:	85 d2                	test   edx,edx
c0013250:	75 25                	jne    c0013277 <CmSetString(Reghive_Tag*, int, char const*)+0xa8>
c0013252:	c6 44 24 45 13       	mov    BYTE PTR [esp+0x45],0x13
c0013257:	8d 44 24 45          	lea    eax,[esp+0x45]
c001325b:	50                   	push   eax
c001325c:	6a 00                	push   0x0
c001325e:	6a 00                	push   0x0
c0013260:	56                   	push   esi
c0013261:	e8 75 fe ff ff       	call   c00130db <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0013266:	83 c4 10             	add    esp,0x10
c0013269:	89 c2                	mov    edx,eax
c001326b:	88 43 16             	mov    BYTE PTR [ebx+0x16],al
c001326e:	88 63 17             	mov    BYTE PTR [ebx+0x17],ah
c0013271:	c1 f8 10             	sar    eax,0x10
c0013274:	88 43 18             	mov    BYTE PTR [ebx+0x18],al
c0013277:	55                   	push   ebp
c0013278:	8d 6c 24 49          	lea    ebp,[esp+0x49]
c001327c:	55                   	push   ebp
c001327d:	52                   	push   edx
c001327e:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013282:	56                   	push   esi
c0013283:	e8 a9 fb ff ff       	call   c0012e31 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0013288:	83 c4 0c             	add    esp,0xc
c001328b:	6a 27                	push   0x27
c001328d:	6a 00                	push   0x0
c001328f:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c0013293:	51                   	push   ecx
c0013294:	e8 57 d2 fe ff       	call   c00004f0 <memset>
c0013299:	83 c4 0c             	add    esp,0xc
c001329c:	6b c7 27             	imul   eax,edi,0x27
c001329f:	6a 27                	push   0x27
c00132a1:	03 84 24 a0 00 00 00 	add    eax,DWORD PTR [esp+0xa0]
c00132a8:	50                   	push   eax
c00132a9:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c00132ad:	51                   	push   ecx
c00132ae:	e8 cd d3 fe ff       	call   c0000680 <strncpy>
c00132b3:	83 c4 0c             	add    esp,0xc
c00132b6:	55                   	push   ebp
c00132b7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00132bb:	52                   	push   edx
c00132bc:	56                   	push   esi
c00132bd:	e8 93 fc ff ff       	call   c0012f55 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00132c2:	eb 19                	jmp    c00132dd <CmSetString(Reghive_Tag*, int, char const*)+0x10e>
c00132c4:	85 d2                	test   edx,edx
c00132c6:	74 18                	je     c00132e0 <CmSetString(Reghive_Tag*, int, char const*)+0x111>
c00132c8:	51                   	push   ecx
c00132c9:	51                   	push   ecx
c00132ca:	52                   	push   edx
c00132cb:	56                   	push   esi
c00132cc:	e8 c0 fc ff ff       	call   c0012f91 <CmFreeExtent(Reghive_Tag*, int)>
c00132d1:	c6 43 16 00          	mov    BYTE PTR [ebx+0x16],0x0
c00132d5:	c6 43 17 00          	mov    BYTE PTR [ebx+0x17],0x0
c00132d9:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c00132dd:	83 c4 10             	add    esp,0x10
c00132e0:	47                   	inc    edi
c00132e1:	83 c3 03             	add    ebx,0x3
c00132e4:	83 ff 07             	cmp    edi,0x7
c00132e7:	0f 85 43 ff ff ff    	jne    c0013230 <CmSetString(Reghive_Tag*, int, char const*)+0x61>
c00132ed:	50                   	push   eax
c00132ee:	8d 44 24 1e          	lea    eax,[esp+0x1e]
c00132f2:	50                   	push   eax
c00132f3:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00132fa:	56                   	push   esi
c00132fb:	e8 55 fc ff ff       	call   c0012f55 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0013300:	81 c4 8c 00 00 00    	add    esp,0x8c
c0013306:	5b                   	pop    ebx
c0013307:	5e                   	pop    esi
c0013308:	5f                   	pop    edi
c0013309:	5d                   	pop    ebp
c001330a:	c3                   	ret    

c001330b <CmGetMatch(char*, char*, bool, bool*)>:
c001330b:	56                   	push   esi
c001330c:	53                   	push   ebx
c001330d:	50                   	push   eax
c001330e:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0013312:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0013317:	74 25                	je     c001333e <CmGetMatch(char*, char*, bool, bool*)+0x33>
c0013319:	c6 06 01             	mov    BYTE PTR [esi],0x1
c001331c:	31 db                	xor    ebx,ebx
c001331e:	50                   	push   eax
c001331f:	50                   	push   eax
c0013320:	8d 04 9d e0 3f 02 c0 	lea    eax,[ebx*4-0x3ffdc020]
c0013327:	50                   	push   eax
c0013328:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001332c:	e8 1f d4 fe ff       	call   c0000750 <strcmp>
c0013331:	83 c4 10             	add    esp,0x10
c0013334:	85 c0                	test   eax,eax
c0013336:	74 2e                	je     c0013366 <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c0013338:	43                   	inc    ebx
c0013339:	83 fb 3f             	cmp    ebx,0x3f
c001333c:	75 e0                	jne    c001331e <CmGetMatch(char*, char*, bool, bool*)+0x13>
c001333e:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0013341:	31 db                	xor    ebx,ebx
c0013343:	8d 04 9d e0 3f 02 c0 	lea    eax,[ebx*4-0x3ffdc020]
c001334a:	51                   	push   ecx
c001334b:	51                   	push   ecx
c001334c:	50                   	push   eax
c001334d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013351:	e8 fa d3 fe ff       	call   c0000750 <strcmp>
c0013356:	83 c4 10             	add    esp,0x10
c0013359:	85 c0                	test   eax,eax
c001335b:	74 09                	je     c0013366 <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c001335d:	43                   	inc    ebx
c001335e:	83 fb 3f             	cmp    ebx,0x3f
c0013361:	75 e0                	jne    c0013343 <CmGetMatch(char*, char*, bool, bool*)+0x38>
c0013363:	83 cb ff             	or     ebx,0xffffffff
c0013366:	89 d8                	mov    eax,ebx
c0013368:	5a                   	pop    edx
c0013369:	5b                   	pop    ebx
c001336a:	5e                   	pop    esi
c001336b:	c3                   	ret    

c001336c <CmAddShift(unsigned int*, int*, unsigned char, int)>:
c001336c:	55                   	push   ebp
c001336d:	31 c0                	xor    eax,eax
c001336f:	57                   	push   edi
c0013370:	56                   	push   esi
c0013371:	53                   	push   ebx
c0013372:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013376:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001337a:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001337c:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0013380:	8d 2c 31             	lea    ebp,[ecx+esi*1]
c0013383:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013387:	83 fd 1f             	cmp    ebp,0x1f
c001338a:	7f 0b                	jg     c0013397 <CmAddShift(unsigned int*, int*, unsigned char, int)+0x2b>
c001338c:	0f b6 c2             	movzx  eax,dl
c001338f:	d3 e0                	shl    eax,cl
c0013391:	09 07                	or     DWORD PTR [edi],eax
c0013393:	b0 01                	mov    al,0x1
c0013395:	01 33                	add    DWORD PTR [ebx],esi
c0013397:	5b                   	pop    ebx
c0013398:	5e                   	pop    esi
c0013399:	5f                   	pop    edi
c001339a:	5d                   	pop    ebp
c001339b:	c3                   	ret    

c001339c <CmGetShift(unsigned int*, int*, int, bool*)>:
c001339c:	57                   	push   edi
c001339d:	56                   	push   esi
c001339e:	53                   	push   ebx
c001339f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00133a3:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00133a7:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c00133ab:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00133af:	39 0b                	cmp    DWORD PTR [ebx],ecx
c00133b1:	7c 17                	jl     c00133ca <CmGetShift(unsigned int*, int*, int, bool*)+0x2e>
c00133b3:	8b 17                	mov    edx,DWORD PTR [edi]
c00133b5:	b8 01 00 00 00       	mov    eax,0x1
c00133ba:	d3 e0                	shl    eax,cl
c00133bc:	48                   	dec    eax
c00133bd:	21 d0                	and    eax,edx
c00133bf:	d3 ea                	shr    edx,cl
c00133c1:	89 17                	mov    DWORD PTR [edi],edx
c00133c3:	29 0b                	sub    DWORD PTR [ebx],ecx
c00133c5:	c6 06 01             	mov    BYTE PTR [esi],0x1
c00133c8:	eb 05                	jmp    c00133cf <CmGetShift(unsigned int*, int*, int, bool*)+0x33>
c00133ca:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00133cd:	31 c0                	xor    eax,eax
c00133cf:	5b                   	pop    ebx
c00133d0:	5e                   	pop    esi
c00133d1:	5f                   	pop    edi
c00133d2:	c3                   	ret    

c00133d3 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>:
c00133d3:	83 ec 40             	sub    esp,0x40
c00133d6:	8d 44 24 09          	lea    eax,[esp+0x9]
c00133da:	50                   	push   eax
c00133db:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00133df:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00133e3:	e8 49 fa ff ff       	call   c0012e31 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00133e8:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00133ec:	8b 54 24 2b          	mov    edx,DWORD PTR [esp+0x2b]
c00133f0:	8b 4c 24 2f          	mov    ecx,DWORD PTR [esp+0x2f]
c00133f4:	89 10                	mov    DWORD PTR [eax],edx
c00133f6:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c00133f9:	83 c4 4c             	add    esp,0x4c
c00133fc:	c3                   	ret    

c00133fd <CmSetInteger(Reghive_Tag*, int, unsigned long long)>:
c00133fd:	55                   	push   ebp
c00133fe:	57                   	push   edi
c00133ff:	56                   	push   esi
c0013400:	53                   	push   ebx
c0013401:	83 ec 40             	sub    esp,0x40
c0013404:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c0013408:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c001340c:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c0013410:	8d 5c 24 09          	lea    ebx,[esp+0x9]
c0013414:	53                   	push   ebx
c0013415:	56                   	push   esi
c0013416:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001341a:	e8 12 fa ff ff       	call   c0012e31 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c001341f:	89 7c 24 2b          	mov    DWORD PTR [esp+0x2b],edi
c0013423:	89 6c 24 2f          	mov    DWORD PTR [esp+0x2f],ebp
c0013427:	83 c4 0c             	add    esp,0xc
c001342a:	53                   	push   ebx
c001342b:	56                   	push   esi
c001342c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0013430:	e8 20 fb ff ff       	call   c0012f55 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0013435:	83 c4 4c             	add    esp,0x4c
c0013438:	5b                   	pop    ebx
c0013439:	5e                   	pop    esi
c001343a:	5f                   	pop    edi
c001343b:	5d                   	pop    ebp
c001343c:	c3                   	ret    

c001343d <CmConvertFromInternalFilename(unsigned char const*, char*)>:
c001343d:	55                   	push   ebp
c001343e:	57                   	push   edi
c001343f:	56                   	push   esi
c0013440:	31 f6                	xor    esi,esi
c0013442:	53                   	push   ebx
c0013443:	31 db                	xor    ebx,ebx
c0013445:	83 ec 40             	sub    esp,0x40
c0013448:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0013450:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0013458:	6a 12                	push   0x12
c001345a:	68 ee 00 00 00       	push   0xee
c001345f:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c0013463:	e8 88 d0 fe ff       	call   c00004f0 <memset>
c0013468:	83 c4 10             	add    esp,0x10
c001346b:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001346f:	6a 08                	push   0x8
c0013471:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0013475:	0f b6 04 18          	movzx  eax,BYTE PTR [eax+ebx*1]
c0013479:	50                   	push   eax
c001347a:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c001347e:	55                   	push   ebp
c001347f:	57                   	push   edi
c0013480:	e8 e7 fe ff ff       	call   c001336c <CmAddShift(unsigned int*, int*, unsigned char, int)>
c0013485:	83 c4 10             	add    esp,0x10
c0013488:	8d 44 24 0f          	lea    eax,[esp+0xf]
c001348c:	50                   	push   eax
c001348d:	6a 06                	push   0x6
c001348f:	55                   	push   ebp
c0013490:	57                   	push   edi
c0013491:	e8 06 ff ff ff       	call   c001339c <CmGetShift(unsigned int*, int*, int, bool*)>
c0013496:	83 c4 10             	add    esp,0x10
c0013499:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001349e:	74 07                	je     c00134a7 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x6a>
c00134a0:	46                   	inc    esi
c00134a1:	88 44 34 17          	mov    BYTE PTR [esp+esi*1+0x17],al
c00134a5:	eb e1                	jmp    c0013488 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x4b>
c00134a7:	43                   	inc    ebx
c00134a8:	83 fb 12             	cmp    ebx,0x12
c00134ab:	75 c2                	jne    c001346f <CmConvertFromInternalFilename(unsigned char const*, char*)+0x32>
c00134ad:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00134b1:	31 db                	xor    ebx,ebx
c00134b3:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00134b6:	50                   	push   eax
c00134b7:	50                   	push   eax
c00134b8:	0f b6 44 1c 20       	movzx  eax,BYTE PTR [esp+ebx*1+0x20]
c00134bd:	43                   	inc    ebx
c00134be:	8d 04 85 e0 3f 02 c0 	lea    eax,[eax*4-0x3ffdc020]
c00134c5:	50                   	push   eax
c00134c6:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c00134ca:	e8 71 d3 fe ff       	call   c0000840 <strcat>
c00134cf:	83 c4 10             	add    esp,0x10
c00134d2:	83 fb 18             	cmp    ebx,0x18
c00134d5:	75 df                	jne    c00134b6 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x79>
c00134d7:	83 c4 3c             	add    esp,0x3c
c00134da:	31 c0                	xor    eax,eax
c00134dc:	5b                   	pop    ebx
c00134dd:	5e                   	pop    esi
c00134de:	5f                   	pop    edi
c00134df:	5d                   	pop    ebp
c00134e0:	c3                   	ret    

c00134e1 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>:
c00134e1:	83 ec 40             	sub    esp,0x40
c00134e4:	8d 44 24 09          	lea    eax,[esp+0x9]
c00134e8:	50                   	push   eax
c00134e9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00134ed:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00134f1:	e8 3b f9 ff ff       	call   c0012e31 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00134f6:	58                   	pop    eax
c00134f7:	5a                   	pop    edx
c00134f8:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c00134fc:	8d 44 24 15          	lea    eax,[esp+0x15]
c0013500:	50                   	push   eax
c0013501:	e8 37 ff ff ff       	call   c001343d <CmConvertFromInternalFilename(unsigned char const*, char*)>
c0013506:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c001350b:	83 c4 4c             	add    esp,0x4c
c001350e:	c3                   	ret    

c001350f <CmConvertToInternalFilename(char const*, unsigned char*)>:
c001350f:	55                   	push   ebp
c0013510:	57                   	push   edi
c0013511:	56                   	push   esi
c0013512:	53                   	push   ebx
c0013513:	31 db                	xor    ebx,ebx
c0013515:	83 ec 70             	sub    esp,0x70
c0013518:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
c001351f:	6a 30                	push   0x30
c0013521:	6a 00                	push   0x0
c0013523:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c0013527:	56                   	push   esi
c0013528:	e8 c3 cf fe ff       	call   c00004f0 <memset>
c001352d:	83 c4 10             	add    esp,0x10
c0013530:	83 ec 0c             	sub    esp,0xc
c0013533:	57                   	push   edi
c0013534:	e8 37 d0 fe ff       	call   c0000570 <strlen>
c0013539:	83 c4 10             	add    esp,0x10
c001353c:	39 d8                	cmp    eax,ebx
c001353e:	76 16                	jbe    c0013556 <CmConvertToInternalFilename(char const*, unsigned char*)+0x47>
c0013540:	83 ec 0c             	sub    esp,0xc
c0013543:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c0013547:	50                   	push   eax
c0013548:	e8 e3 d3 fe ff       	call   c0000930 <toupper>
c001354d:	83 c4 10             	add    esp,0x10
c0013550:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c0013553:	43                   	inc    ebx
c0013554:	eb da                	jmp    c0013530 <CmConvertToInternalFilename(char const*, unsigned char*)+0x21>
c0013556:	31 f6                	xor    esi,esi
c0013558:	52                   	push   edx
c0013559:	31 ff                	xor    edi,edi
c001355b:	6a 18                	push   0x18
c001355d:	6a 3f                	push   0x3f
c001355f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0013563:	50                   	push   eax
c0013564:	e8 87 cf fe ff       	call   c00004f0 <memset>
c0013569:	83 c4 10             	add    esp,0x10
c001356c:	8a 44 34 30          	mov    al,BYTE PTR [esp+esi*1+0x30]
c0013570:	8d 5c 24 10          	lea    ebx,[esp+0x10]
c0013574:	84 c0                	test   al,al
c0013576:	0f 84 b0 00 00 00    	je     c001362c <CmConvertToInternalFilename(char const*, unsigned char*)+0x11d>
c001357c:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c0013580:	c6 44 24 16 00       	mov    BYTE PTR [esp+0x16],0x0
c0013585:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0013589:	c6 44 24 11 00       	mov    BYTE PTR [esp+0x11],0x0
c001358e:	8d 6e 01             	lea    ebp,[esi+0x1]
c0013591:	83 ec 0c             	sub    esp,0xc
c0013594:	8a 54 2c 3c          	mov    dl,BYTE PTR [esp+ebp*1+0x3c]
c0013598:	88 54 24 21          	mov    BYTE PTR [esp+0x21],dl
c001359c:	53                   	push   ebx
c001359d:	e8 ce cf fe ff       	call   c0000570 <strlen>
c00135a2:	83 c4 10             	add    esp,0x10
c00135a5:	85 c0                	test   eax,eax
c00135a7:	8d 44 24 0f          	lea    eax,[esp+0xf]
c00135ab:	74 0b                	je     c00135b8 <CmConvertToInternalFilename(char const*, unsigned char*)+0xa9>
c00135ad:	50                   	push   eax
c00135ae:	6a 01                	push   0x1
c00135b0:	53                   	push   ebx
c00135b1:	8d 44 24 20          	lea    eax,[esp+0x20]
c00135b5:	50                   	push   eax
c00135b6:	eb 0a                	jmp    c00135c2 <CmConvertToInternalFilename(char const*, unsigned char*)+0xb3>
c00135b8:	50                   	push   eax
c00135b9:	6a 00                	push   0x0
c00135bb:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00135bf:	50                   	push   eax
c00135c0:	6a 00                	push   0x0
c00135c2:	e8 44 fd ff ff       	call   c001330b <CmGetMatch(char*, char*, bool, bool*)>
c00135c7:	83 c4 10             	add    esp,0x10
c00135ca:	83 f8 ff             	cmp    eax,0xffffffff
c00135cd:	75 1a                	jne    c00135e9 <CmConvertToInternalFilename(char const*, unsigned char*)+0xda>
c00135cf:	83 ec 0c             	sub    esp,0xc
c00135d2:	68 4d 27 02 c0       	push   0xc002274d
c00135d7:	e8 eb e0 ff ff       	call   c00116c7 <KePanic(char const*)>
c00135dc:	83 c4 10             	add    esp,0x10
c00135df:	b8 02 00 00 00       	mov    eax,0x2
c00135e4:	e9 bc 00 00 00       	jmp    c00136a5 <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c00135e9:	83 ff 18             	cmp    edi,0x18
c00135ec:	75 1a                	jne    c0013608 <CmConvertToInternalFilename(char const*, unsigned char*)+0xf9>
c00135ee:	83 ec 0c             	sub    esp,0xc
c00135f1:	68 62 27 02 c0       	push   0xc0022762
c00135f6:	e8 cc e0 ff ff       	call   c00116c7 <KePanic(char const*)>
c00135fb:	83 c4 10             	add    esp,0x10
c00135fe:	b8 01 00 00 00       	mov    eax,0x1
c0013603:	e9 9d 00 00 00       	jmp    c00136a5 <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c0013608:	47                   	inc    edi
c0013609:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001360e:	88 44 3c 17          	mov    BYTE PTR [esp+edi*1+0x17],al
c0013612:	74 02                	je     c0013616 <CmConvertToInternalFilename(char const*, unsigned char*)+0x107>
c0013614:	89 ee                	mov    esi,ebp
c0013616:	83 ec 0c             	sub    esp,0xc
c0013619:	53                   	push   ebx
c001361a:	e8 51 cf fe ff       	call   c0000570 <strlen>
c001361f:	83 c4 10             	add    esp,0x10
c0013622:	85 c0                	test   eax,eax
c0013624:	74 06                	je     c001362c <CmConvertToInternalFilename(char const*, unsigned char*)+0x11d>
c0013626:	46                   	inc    esi
c0013627:	e9 40 ff ff ff       	jmp    c001356c <CmConvertToInternalFilename(char const*, unsigned char*)+0x5d>
c001362c:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0013634:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001363c:	31 f6                	xor    esi,esi
c001363e:	50                   	push   eax
c001363f:	31 ff                	xor    edi,edi
c0013641:	6a 12                	push   0x12
c0013643:	68 ee 00 00 00       	push   0xee
c0013648:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c001364f:	e8 9c ce fe ff       	call   c00004f0 <memset>
c0013654:	83 c4 10             	add    esp,0x10
c0013657:	83 fe 17             	cmp    esi,0x17
c001365a:	8d 6c 24 14          	lea    ebp,[esp+0x14]
c001365e:	7e 26                	jle    c0013686 <CmConvertToInternalFilename(char const*, unsigned char*)+0x177>
c0013660:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0013664:	50                   	push   eax
c0013665:	6a 08                	push   0x8
c0013667:	55                   	push   ebp
c0013668:	53                   	push   ebx
c0013669:	e8 2e fd ff ff       	call   c001339c <CmGetShift(unsigned int*, int*, int, bool*)>
c001366e:	83 c4 10             	add    esp,0x10
c0013671:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0013676:	74 26                	je     c001369e <CmConvertToInternalFilename(char const*, unsigned char*)+0x18f>
c0013678:	8b 8c 24 84 00 00 00 	mov    ecx,DWORD PTR [esp+0x84]
c001367f:	4e                   	dec    esi
c0013680:	88 04 39             	mov    BYTE PTR [ecx+edi*1],al
c0013683:	47                   	inc    edi
c0013684:	eb 1c                	jmp    c00136a2 <CmConvertToInternalFilename(char const*, unsigned char*)+0x193>
c0013686:	6a 06                	push   0x6
c0013688:	0f b6 44 34 1c       	movzx  eax,BYTE PTR [esp+esi*1+0x1c]
c001368d:	50                   	push   eax
c001368e:	55                   	push   ebp
c001368f:	53                   	push   ebx
c0013690:	e8 d7 fc ff ff       	call   c001336c <CmAddShift(unsigned int*, int*, unsigned char, int)>
c0013695:	83 c4 10             	add    esp,0x10
c0013698:	84 c0                	test   al,al
c001369a:	75 06                	jne    c00136a2 <CmConvertToInternalFilename(char const*, unsigned char*)+0x193>
c001369c:	eb c2                	jmp    c0013660 <CmConvertToInternalFilename(char const*, unsigned char*)+0x151>
c001369e:	31 c0                	xor    eax,eax
c00136a0:	eb 03                	jmp    c00136a5 <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c00136a2:	46                   	inc    esi
c00136a3:	eb b2                	jmp    c0013657 <CmConvertToInternalFilename(char const*, unsigned char*)+0x148>
c00136a5:	83 c4 6c             	add    esp,0x6c
c00136a8:	5b                   	pop    ebx
c00136a9:	5e                   	pop    esi
c00136aa:	5f                   	pop    edi
c00136ab:	5d                   	pop    ebp
c00136ac:	c3                   	ret    

c00136ad <CmCreateString(Reghive_Tag*, int, char const*)>:
c00136ad:	53                   	push   ebx
c00136ae:	83 ec 3c             	sub    esp,0x3c
c00136b1:	6a 2b                	push   0x2b
c00136b3:	6a 00                	push   0x0
c00136b5:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c00136b9:	53                   	push   ebx
c00136ba:	e8 31 ce fe ff       	call   c00004f0 <memset>
c00136bf:	58                   	pop    eax
c00136c0:	5a                   	pop    edx
c00136c1:	8d 44 24 11          	lea    eax,[esp+0x11]
c00136c5:	50                   	push   eax
c00136c6:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00136ca:	e8 40 fe ff ff       	call   c001350f <CmConvertToInternalFilename(char const*, unsigned char*)>
c00136cf:	c6 44 24 15 c1       	mov    BYTE PTR [esp+0x15],0xc1
c00136d4:	83 c4 0c             	add    esp,0xc
c00136d7:	6a 15                	push   0x15
c00136d9:	6a 00                	push   0x0
c00136db:	8d 44 24 27          	lea    eax,[esp+0x27]
c00136df:	50                   	push   eax
c00136e0:	e8 0b ce fe ff       	call   c00004f0 <memset>
c00136e5:	53                   	push   ebx
c00136e6:	6a 00                	push   0x0
c00136e8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00136ec:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00136f0:	e8 e6 f9 ff ff       	call   c00130db <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c00136f5:	83 c4 58             	add    esp,0x58
c00136f8:	5b                   	pop    ebx
c00136f9:	c3                   	ret    

c00136fa <CmFindInDirectory(Reghive_Tag*, int, char const*)>:
c00136fa:	56                   	push   esi
c00136fb:	53                   	push   ebx
c00136fc:	83 ec 48             	sub    esp,0x48
c00136ff:	6a 12                	push   0x12
c0013701:	68 ff 00 00 00       	push   0xff
c0013706:	8d 74 24 0f          	lea    esi,[esp+0xf]
c001370a:	56                   	push   esi
c001370b:	e8 e0 cd fe ff       	call   c00004f0 <memset>
c0013710:	5a                   	pop    edx
c0013711:	59                   	pop    ecx
c0013712:	56                   	push   esi
c0013713:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c0013717:	e8 f3 fd ff ff       	call   c001350f <CmConvertToInternalFilename(char const*, unsigned char*)>
c001371c:	83 c4 10             	add    esp,0x10
c001371f:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0013723:	85 db                	test   ebx,ebx
c0013725:	74 42                	je     c0013769 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x6f>
c0013727:	50                   	push   eax
c0013728:	8d 44 24 19          	lea    eax,[esp+0x19]
c001372c:	50                   	push   eax
c001372d:	53                   	push   ebx
c001372e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0013732:	e8 fa f6 ff ff       	call   c0012e31 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0013737:	83 c4 0c             	add    esp,0xc
c001373a:	6a 12                	push   0x12
c001373c:	8d 44 24 21          	lea    eax,[esp+0x21]
c0013740:	50                   	push   eax
c0013741:	56                   	push   esi
c0013742:	e8 39 cc fe ff       	call   c0000380 <memcmp>
c0013747:	83 c4 10             	add    esp,0x10
c001374a:	85 c0                	test   eax,eax
c001374c:	74 1e                	je     c001376c <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x72>
c001374e:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c0013753:	0f b6 5c 24 17       	movzx  ebx,BYTE PTR [esp+0x17]
c0013758:	c1 e3 08             	shl    ebx,0x8
c001375b:	09 d8                	or     eax,ebx
c001375d:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c0013762:	c1 e3 10             	shl    ebx,0x10
c0013765:	09 c3                	or     ebx,eax
c0013767:	eb ba                	jmp    c0013723 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x29>
c0013769:	83 cb ff             	or     ebx,0xffffffff
c001376c:	89 d8                	mov    eax,ebx
c001376e:	83 c4 44             	add    esp,0x44
c0013771:	5b                   	pop    ebx
c0013772:	5e                   	pop    esi
c0013773:	c3                   	ret    

c0013774 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>:
c0013774:	57                   	push   edi
c0013775:	56                   	push   esi
c0013776:	53                   	push   ebx
c0013777:	83 ec 34             	sub    esp,0x34
c001377a:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001377e:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0013782:	6a 2b                	push   0x2b
c0013784:	6a 00                	push   0x0
c0013786:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c001378a:	53                   	push   ebx
c001378b:	e8 60 cd fe ff       	call   c00004f0 <memset>
c0013790:	58                   	pop    eax
c0013791:	5a                   	pop    edx
c0013792:	8d 44 24 11          	lea    eax,[esp+0x11]
c0013796:	50                   	push   eax
c0013797:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001379b:	e8 6f fd ff ff       	call   c001350f <CmConvertToInternalFilename(char const*, unsigned char*)>
c00137a0:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c00137a4:	89 74 24 2b          	mov    DWORD PTR [esp+0x2b],esi
c00137a8:	89 7c 24 2f          	mov    DWORD PTR [esp+0x2f],edi
c00137ac:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c00137b0:	53                   	push   ebx
c00137b1:	6a 00                	push   0x0
c00137b3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00137b7:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00137bb:	e8 1b f9 ff ff       	call   c00130db <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c00137c0:	83 c4 50             	add    esp,0x50
c00137c3:	5b                   	pop    ebx
c00137c4:	5e                   	pop    esi
c00137c5:	5f                   	pop    edi
c00137c6:	c3                   	ret    

c00137c7 <CmCreateDirectory(Reghive_Tag*, int, char const*)>:
c00137c7:	55                   	push   ebp
c00137c8:	57                   	push   edi
c00137c9:	56                   	push   esi
c00137ca:	53                   	push   ebx
c00137cb:	83 ec 40             	sub    esp,0x40
c00137ce:	8b 6c 24 58          	mov    ebp,DWORD PTR [esp+0x58]
c00137d2:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c00137d6:	6a 2b                	push   0x2b
c00137d8:	6a 00                	push   0x0
c00137da:	8d 74 24 11          	lea    esi,[esp+0x11]
c00137de:	56                   	push   esi
c00137df:	e8 0c cd fe ff       	call   c00004f0 <memset>
c00137e4:	5f                   	pop    edi
c00137e5:	89 ef                	mov    edi,ebp
c00137e7:	58                   	pop    eax
c00137e8:	8d 44 24 11          	lea    eax,[esp+0x11]
c00137ec:	50                   	push   eax
c00137ed:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c00137f1:	e8 19 fd ff ff       	call   c001350f <CmConvertToInternalFilename(char const*, unsigned char*)>
c00137f6:	c6 44 24 15 4e       	mov    BYTE PTR [esp+0x15],0x4e
c00137fb:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c0013800:	c6 44 24 2c 00       	mov    BYTE PTR [esp+0x2c],0x0
c0013805:	c6 44 24 2d 00       	mov    BYTE PTR [esp+0x2d],0x0
c001380a:	83 c4 10             	add    esp,0x10
c001380d:	85 ed                	test   ebp,ebp
c001380f:	74 14                	je     c0013825 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c0013811:	51                   	push   ecx
c0013812:	51                   	push   ecx
c0013813:	57                   	push   edi
c0013814:	53                   	push   ebx
c0013815:	e8 09 f7 ff ff       	call   c0012f23 <CmGetNext(Reghive_Tag*, int)>
c001381a:	83 c4 10             	add    esp,0x10
c001381d:	85 c0                	test   eax,eax
c001381f:	74 04                	je     c0013825 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c0013821:	89 c7                	mov    edi,eax
c0013823:	eb e8                	jmp    c001380d <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x46>
c0013825:	56                   	push   esi
c0013826:	6a 00                	push   0x0
c0013828:	57                   	push   edi
c0013829:	53                   	push   ebx
c001382a:	e8 ac f8 ff ff       	call   c00130db <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c001382f:	83 c4 0c             	add    esp,0xc
c0013832:	89 c7                	mov    edi,eax
c0013834:	56                   	push   esi
c0013835:	50                   	push   eax
c0013836:	53                   	push   ebx
c0013837:	e8 f5 f5 ff ff       	call   c0012e31 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c001383c:	58                   	pop    eax
c001383d:	5a                   	pop    edx
c001383e:	6a 6c                	push   0x6c
c0013840:	6a 00                	push   0x0
c0013842:	6a 00                	push   0x0
c0013844:	68 73 27 02 c0       	push   0xc0022773
c0013849:	57                   	push   edi
c001384a:	53                   	push   ebx
c001384b:	e8 24 ff ff ff       	call   c0013774 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>
c0013850:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c0013854:	88 64 24 3c          	mov    BYTE PTR [esp+0x3c],ah
c0013858:	c1 e8 10             	shr    eax,0x10
c001385b:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c001385f:	83 c4 1c             	add    esp,0x1c
c0013862:	56                   	push   esi
c0013863:	57                   	push   edi
c0013864:	53                   	push   ebx
c0013865:	e8 eb f6 ff ff       	call   c0012f55 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c001386a:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c001386f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0013874:	c1 e0 08             	shl    eax,0x8
c0013877:	09 c2                	or     edx,eax
c0013879:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001387e:	83 c4 4c             	add    esp,0x4c
c0013881:	c1 e0 10             	shl    eax,0x10
c0013884:	5b                   	pop    ebx
c0013885:	09 d0                	or     eax,edx
c0013887:	5e                   	pop    esi
c0013888:	5f                   	pop    edi
c0013889:	5d                   	pop    ebp
c001388a:	c3                   	ret    

c001388b <zStrtok(char*, char const*)>:
c001388b:	55                   	push   ebp
c001388c:	57                   	push   edi
c001388d:	56                   	push   esi
c001388e:	53                   	push   ebx
c001388f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013893:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013897:	85 db                	test   ebx,ebx
c0013899:	74 2f                	je     c00138ca <zStrtok(char*, char const*)+0x3f>
c001389b:	85 c0                	test   eax,eax
c001389d:	75 09                	jne    c00138a8 <zStrtok(char*, char const*)+0x1d>
c001389f:	a1 f0 be 02 c0       	mov    eax,ds:0xc002bef0
c00138a4:	85 c0                	test   eax,eax
c00138a6:	74 50                	je     c00138f8 <zStrtok(char*, char const*)+0x6d>
c00138a8:	31 c9                	xor    ecx,ecx
c00138aa:	80 3c 08 00          	cmp    BYTE PTR [eax+ecx*1],0x0
c00138ae:	74 03                	je     c00138b3 <zStrtok(char*, char const*)+0x28>
c00138b0:	41                   	inc    ecx
c00138b1:	eb f7                	jmp    c00138aa <zStrtok(char*, char const*)+0x1f>
c00138b3:	31 d2                	xor    edx,edx
c00138b5:	39 ca                	cmp    edx,ecx
c00138b7:	74 15                	je     c00138ce <zStrtok(char*, char const*)+0x43>
c00138b9:	0f be 34 10          	movsx  esi,BYTE PTR [eax+edx*1]
c00138bd:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c00138c0:	8d 3c 10             	lea    edi,[eax+edx*1]
c00138c3:	39 ee                	cmp    esi,ebp
c00138c5:	74 13                	je     c00138da <zStrtok(char*, char const*)+0x4f>
c00138c7:	42                   	inc    edx
c00138c8:	eb eb                	jmp    c00138b5 <zStrtok(char*, char const*)+0x2a>
c00138ca:	31 c0                	xor    eax,eax
c00138cc:	eb 2a                	jmp    c00138f8 <zStrtok(char*, char const*)+0x6d>
c00138ce:	c7 05 f0 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bef0,0x0
c00138d8:	eb 1e                	jmp    c00138f8 <zStrtok(char*, char const*)+0x6d>
c00138da:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c00138dd:	39 ce                	cmp    esi,ecx
c00138df:	75 0a                	jne    c00138eb <zStrtok(char*, char const*)+0x60>
c00138e1:	40                   	inc    eax
c00138e2:	a3 f0 be 02 c0       	mov    ds:0xc002bef0,eax
c00138e7:	89 d8                	mov    eax,ebx
c00138e9:	eb 0d                	jmp    c00138f8 <zStrtok(char*, char const*)+0x6d>
c00138eb:	8d 54 10 01          	lea    edx,[eax+edx*1+0x1]
c00138ef:	c6 07 00             	mov    BYTE PTR [edi],0x0
c00138f2:	89 15 f0 be 02 c0    	mov    DWORD PTR ds:0xc002bef0,edx
c00138f8:	5b                   	pop    ebx
c00138f9:	5e                   	pop    esi
c00138fa:	5f                   	pop    edi
c00138fb:	5d                   	pop    ebp
c00138fc:	c3                   	ret    

c00138fd <CmFindObjectFromPath(Reghive_Tag*, char const*)>:
c00138fd:	57                   	push   edi
c00138fe:	56                   	push   esi
c00138ff:	53                   	push   ebx
c0013900:	81 ec 08 01 00 00    	sub    esp,0x108
c0013906:	8b bc 24 18 01 00 00 	mov    edi,DWORD PTR [esp+0x118]
c001390d:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c0013914:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c0013918:	53                   	push   ebx
c0013919:	e8 22 cd fe ff       	call   c0000640 <strcpy>
c001391e:	59                   	pop    ecx
c001391f:	5e                   	pop    esi
c0013920:	68 d7 2a 02 c0       	push   0xc0022ad7
c0013925:	53                   	push   ebx
c0013926:	bb 01 00 00 00       	mov    ebx,0x1
c001392b:	e8 5b ff ff ff       	call   c001388b <zStrtok(char*, char const*)>
c0013930:	83 c4 10             	add    esp,0x10
c0013933:	85 c0                	test   eax,eax
c0013935:	74 3b                	je     c0013972 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c0013937:	52                   	push   edx
c0013938:	50                   	push   eax
c0013939:	6a 01                	push   0x1
c001393b:	57                   	push   edi
c001393c:	e8 b9 fd ff ff       	call   c00136fa <CmFindInDirectory(Reghive_Tag*, int, char const*)>
c0013941:	59                   	pop    ecx
c0013942:	89 c3                	mov    ebx,eax
c0013944:	5e                   	pop    esi
c0013945:	68 d7 2a 02 c0       	push   0xc0022ad7
c001394a:	6a 00                	push   0x0
c001394c:	e8 3a ff ff ff       	call   c001388b <zStrtok(char*, char const*)>
c0013951:	83 c4 10             	add    esp,0x10
c0013954:	89 c6                	mov    esi,eax
c0013956:	85 c0                	test   eax,eax
c0013958:	74 18                	je     c0013972 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c001395a:	52                   	push   edx
c001395b:	52                   	push   edx
c001395c:	53                   	push   ebx
c001395d:	57                   	push   edi
c001395e:	e8 81 f5 ff ff       	call   c0012ee4 <CmEnterDirectory(Reghive_Tag*, int)>
c0013963:	83 c4 10             	add    esp,0x10
c0013966:	89 c3                	mov    ebx,eax
c0013968:	83 f8 ff             	cmp    eax,0xffffffff
c001396b:	74 05                	je     c0013972 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c001396d:	50                   	push   eax
c001396e:	56                   	push   esi
c001396f:	53                   	push   ebx
c0013970:	eb c9                	jmp    c001393b <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x3e>
c0013972:	81 c4 00 01 00 00    	add    esp,0x100
c0013978:	89 d8                	mov    eax,ebx
c001397a:	5b                   	pop    ebx
c001397b:	5e                   	pop    esi
c001397c:	5f                   	pop    edi
c001397d:	c3                   	ret    

c001397e <CmDisplayTree(Reghive_Tag*, int, int)>:
c001397e:	55                   	push   ebp
c001397f:	57                   	push   edi
c0013980:	56                   	push   esi
c0013981:	53                   	push   ebx
c0013982:	83 ec 5c             	sub    esp,0x5c
c0013985:	8b 74 24 70          	mov    esi,DWORD PTR [esp+0x70]
c0013989:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c001398d:	85 db                	test   ebx,ebx
c001398f:	0f 8e 84 00 00 00    	jle    c0013a19 <CmDisplayTree(Reghive_Tag*, int, int)+0x9b>
c0013995:	31 ed                	xor    ebp,ebp
c0013997:	57                   	push   edi
c0013998:	6a 32                	push   0x32
c001399a:	6a 00                	push   0x0
c001399c:	8d 7c 24 2a          	lea    edi,[esp+0x2a]
c00139a0:	57                   	push   edi
c00139a1:	e8 4a cb fe ff       	call   c00004f0 <memset>
c00139a6:	83 c4 0c             	add    esp,0xc
c00139a9:	57                   	push   edi
c00139aa:	53                   	push   ebx
c00139ab:	56                   	push   esi
c00139ac:	e8 30 fb ff ff       	call   c00134e1 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c00139b1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00139b5:	83 c4 10             	add    esp,0x10
c00139b8:	3b 6c 24 78          	cmp    ebp,DWORD PTR [esp+0x78]
c00139bc:	7d 13                	jge    c00139d1 <CmDisplayTree(Reghive_Tag*, int, int)+0x53>
c00139be:	83 ec 0c             	sub    esp,0xc
c00139c1:	45                   	inc    ebp
c00139c2:	68 7b 2e 02 c0       	push   0xc0022e7b
c00139c7:	e8 a9 6f ff ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c00139cc:	83 c4 10             	add    esp,0x10
c00139cf:	eb e7                	jmp    c00139b8 <CmDisplayTree(Reghive_Tag*, int, int)+0x3a>
c00139d1:	51                   	push   ecx
c00139d2:	57                   	push   edi
c00139d3:	53                   	push   ebx
c00139d4:	68 79 27 02 c0       	push   0xc0022779
c00139d9:	e8 97 6f ff ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c00139de:	83 c4 10             	add    esp,0x10
c00139e1:	83 7c 24 0c 4e       	cmp    DWORD PTR [esp+0xc],0x4e
c00139e6:	75 1e                	jne    c0013a06 <CmDisplayTree(Reghive_Tag*, int, int)+0x88>
c00139e8:	52                   	push   edx
c00139e9:	52                   	push   edx
c00139ea:	53                   	push   ebx
c00139eb:	56                   	push   esi
c00139ec:	e8 f3 f4 ff ff       	call   c0012ee4 <CmEnterDirectory(Reghive_Tag*, int)>
c00139f1:	83 c4 0c             	add    esp,0xc
c00139f4:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c00139f8:	8d 51 04             	lea    edx,[ecx+0x4]
c00139fb:	52                   	push   edx
c00139fc:	50                   	push   eax
c00139fd:	56                   	push   esi
c00139fe:	e8 7b ff ff ff       	call   c001397e <CmDisplayTree(Reghive_Tag*, int, int)>
c0013a03:	83 c4 10             	add    esp,0x10
c0013a06:	50                   	push   eax
c0013a07:	50                   	push   eax
c0013a08:	53                   	push   ebx
c0013a09:	56                   	push   esi
c0013a0a:	e8 14 f5 ff ff       	call   c0012f23 <CmGetNext(Reghive_Tag*, int)>
c0013a0f:	83 c4 10             	add    esp,0x10
c0013a12:	89 c3                	mov    ebx,eax
c0013a14:	e9 74 ff ff ff       	jmp    c001398d <CmDisplayTree(Reghive_Tag*, int, int)+0xf>
c0013a19:	83 c4 5c             	add    esp,0x5c
c0013a1c:	5b                   	pop    ebx
c0013a1d:	5e                   	pop    esi
c0013a1e:	5f                   	pop    edi
c0013a1f:	5d                   	pop    ebp
c0013a20:	c3                   	ret    

c0013a21 <CmSplitFinalSlashInPlace(char*)>:
c0013a21:	53                   	push   ebx
c0013a22:	83 ec 14             	sub    esp,0x14
c0013a25:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013a29:	53                   	push   ebx
c0013a2a:	e8 41 cb fe ff       	call   c0000570 <strlen>
c0013a2f:	83 c4 10             	add    esp,0x10
c0013a32:	48                   	dec    eax
c0013a33:	85 c0                	test   eax,eax
c0013a35:	74 15                	je     c0013a4c <CmSplitFinalSlashInPlace(char*)+0x2b>
c0013a37:	8d 14 03             	lea    edx,[ebx+eax*1]
c0013a3a:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0013a3e:	75 09                	jne    c0013a49 <CmSplitFinalSlashInPlace(char*)+0x28>
c0013a40:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0013a43:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0013a47:	eb 05                	jmp    c0013a4e <CmSplitFinalSlashInPlace(char*)+0x2d>
c0013a49:	48                   	dec    eax
c0013a4a:	eb e7                	jmp    c0013a33 <CmSplitFinalSlashInPlace(char*)+0x12>
c0013a4c:	31 c0                	xor    eax,eax
c0013a4e:	83 c4 08             	add    esp,0x8
c0013a51:	5b                   	pop    ebx
c0013a52:	c3                   	ret    

c0013a53 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0013a53:	55                   	push   ebp
c0013a54:	57                   	push   edi
c0013a55:	56                   	push   esi
c0013a56:	53                   	push   ebx
c0013a57:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0013a5d:	8b 9c 24 44 01 00 00 	mov    ebx,DWORD PTR [esp+0x144]
c0013a64:	8a 13                	mov    dl,BYTE PTR [ebx]
c0013a66:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0013a69:	80 fa 40             	cmp    dl,0x40
c0013a6c:	75 1c                	jne    c0013a8a <Reg::findLineFromLoadedData(char*, char*, char*)+0x37>
c0013a6e:	0f be 0b             	movsx  ecx,BYTE PTR [ebx]
c0013a71:	85 c9                	test   ecx,ecx
c0013a73:	0f 84 09 01 00 00    	je     c0013b82 <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c0013a79:	8d 43 01             	lea    eax,[ebx+0x1]
c0013a7c:	83 f9 3a             	cmp    ecx,0x3a
c0013a7f:	74 04                	je     c0013a85 <Reg::findLineFromLoadedData(char*, char*, char*)+0x32>
c0013a81:	89 c3                	mov    ebx,eax
c0013a83:	eb e9                	jmp    c0013a6e <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c0013a85:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0013a88:	89 c3                	mov    ebx,eax
c0013a8a:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0013a8e:	50                   	push   eax
c0013a8f:	6a 40                	push   0x40
c0013a91:	6a 00                	push   0x0
c0013a93:	8d 44 24 24          	lea    eax,[esp+0x24]
c0013a97:	50                   	push   eax
c0013a98:	e8 53 ca fe ff       	call   c00004f0 <memset>
c0013a9d:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0013aa4:	31 c0                	xor    eax,eax
c0013aa6:	83 c4 10             	add    esp,0x10
c0013aa9:	0f be 74 24 0c       	movsx  esi,BYTE PTR [esp+0xc]
c0013aae:	0f be 17             	movsx  edx,BYTE PTR [edi]
c0013ab1:	89 d1                	mov    ecx,edx
c0013ab3:	85 d2                	test   edx,edx
c0013ab5:	0f 84 c7 00 00 00    	je     c0013b82 <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c0013abb:	3d c7 00 00 00       	cmp    eax,0xc7
c0013ac0:	0f 8f bc 00 00 00    	jg     c0013b82 <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c0013ac6:	83 fa 0a             	cmp    edx,0xa
c0013ac9:	0f 85 a4 00 00 00    	jne    c0013b73 <Reg::findLineFromLoadedData(char*, char*, char*)+0x120>
c0013acf:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c0013ad4:	0f be 4c 24 58       	movsx  ecx,BYTE PTR [esp+0x58]
c0013ad9:	89 c8                	mov    eax,ecx
c0013adb:	a8 df                	test   al,0xdf
c0013add:	0f 94 c2             	sete   dl
c0013ae0:	83 f9 23             	cmp    ecx,0x23
c0013ae3:	0f 94 44 24 0c       	sete   BYTE PTR [esp+0xc]
c0013ae8:	0b 54 24 0c          	or     edx,DWORD PTR [esp+0xc]
c0013aec:	80 e2 01             	and    dl,0x1
c0013aef:	75 4a                	jne    c0013b3b <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0013af1:	83 e8 09             	sub    eax,0x9
c0013af4:	3c 01                	cmp    al,0x1
c0013af6:	76 43                	jbe    c0013b3b <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0013af8:	83 f9 5b             	cmp    ecx,0x5b
c0013afb:	75 42                	jne    c0013b3f <Reg::findLineFromLoadedData(char*, char*, char*)+0xec>
c0013afd:	83 fe 40             	cmp    esi,0x40
c0013b00:	75 39                	jne    c0013b3b <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0013b02:	83 ec 0c             	sub    esp,0xc
c0013b05:	8d 54 24 65          	lea    edx,[esp+0x65]
c0013b09:	52                   	push   edx
c0013b0a:	e8 61 ca fe ff       	call   c0000570 <strlen>
c0013b0f:	83 c4 10             	add    esp,0x10
c0013b12:	83 f8 3f             	cmp    eax,0x3f
c0013b15:	77 6b                	ja     c0013b82 <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c0013b17:	50                   	push   eax
c0013b18:	50                   	push   eax
c0013b19:	8d 54 24 61          	lea    edx,[esp+0x61]
c0013b1d:	52                   	push   edx
c0013b1e:	8d 54 24 24          	lea    edx,[esp+0x24]
c0013b22:	52                   	push   edx
c0013b23:	e8 18 cb fe ff       	call   c0000640 <strcpy>
c0013b28:	58                   	pop    eax
c0013b29:	8d 54 24 24          	lea    edx,[esp+0x24]
c0013b2d:	52                   	push   edx
c0013b2e:	e8 3d ca fe ff       	call   c0000570 <strlen>
c0013b33:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0013b38:	83 c4 10             	add    esp,0x10
c0013b3b:	31 d2                	xor    edx,edx
c0013b3d:	eb 3b                	jmp    c0013b7a <Reg::findLineFromLoadedData(char*, char*, char*)+0x127>
c0013b3f:	83 fe 40             	cmp    esi,0x40
c0013b42:	74 06                	je     c0013b4a <Reg::findLineFromLoadedData(char*, char*, char*)+0xf7>
c0013b44:	8d 44 24 58          	lea    eax,[esp+0x58]
c0013b48:	eb 20                	jmp    c0013b6a <Reg::findLineFromLoadedData(char*, char*, char*)+0x117>
c0013b4a:	50                   	push   eax
c0013b4b:	50                   	push   eax
c0013b4c:	55                   	push   ebp
c0013b4d:	8d 44 24 24          	lea    eax,[esp+0x24]
c0013b51:	50                   	push   eax
c0013b52:	e8 f9 cb fe ff       	call   c0000750 <strcmp>
c0013b57:	83 c4 10             	add    esp,0x10
c0013b5a:	85 c0                	test   eax,eax
c0013b5c:	75 dd                	jne    c0013b3b <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0013b5e:	eb e4                	jmp    c0013b44 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf1>
c0013b60:	8d 50 01             	lea    edx,[eax+0x1]
c0013b63:	83 f9 3d             	cmp    ecx,0x3d
c0013b66:	74 1e                	je     c0013b86 <Reg::findLineFromLoadedData(char*, char*, char*)+0x133>
c0013b68:	89 d0                	mov    eax,edx
c0013b6a:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0013b6d:	85 c9                	test   ecx,ecx
c0013b6f:	75 ef                	jne    c0013b60 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10d>
c0013b71:	eb 0f                	jmp    c0013b82 <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c0013b73:	8d 50 01             	lea    edx,[eax+0x1]
c0013b76:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c0013b7a:	47                   	inc    edi
c0013b7b:	89 d0                	mov    eax,edx
c0013b7d:	e9 2c ff ff ff       	jmp    c0013aae <Reg::findLineFromLoadedData(char*, char*, char*)+0x5b>
c0013b82:	31 c0                	xor    eax,eax
c0013b84:	eb 33                	jmp    c0013bb9 <Reg::findLineFromLoadedData(char*, char*, char*)+0x166>
c0013b86:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0013b8a:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0013b8d:	50                   	push   eax
c0013b8e:	50                   	push   eax
c0013b8f:	8d 44 24 60          	lea    eax,[esp+0x60]
c0013b93:	50                   	push   eax
c0013b94:	53                   	push   ebx
c0013b95:	e8 b6 cb fe ff       	call   c0000750 <strcmp>
c0013b9a:	83 c4 10             	add    esp,0x10
c0013b9d:	85 c0                	test   eax,eax
c0013b9f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013ba3:	75 96                	jne    c0013b3b <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0013ba5:	51                   	push   ecx
c0013ba6:	51                   	push   ecx
c0013ba7:	52                   	push   edx
c0013ba8:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0013baf:	e8 8c ca fe ff       	call   c0000640 <strcpy>
c0013bb4:	83 c4 10             	add    esp,0x10
c0013bb7:	b0 01                	mov    al,0x1
c0013bb9:	81 c4 2c 01 00 00    	add    esp,0x12c
c0013bbf:	5b                   	pop    ebx
c0013bc0:	5e                   	pop    esi
c0013bc1:	5f                   	pop    edi
c0013bc2:	5d                   	pop    ebp
c0013bc3:	c3                   	ret    

c0013bc4 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0013bc4:	57                   	push   edi
c0013bc5:	56                   	push   esi
c0013bc6:	53                   	push   ebx
c0013bc7:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0013bcd:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c0013bd4:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0013bdb:	53                   	push   ebx
c0013bdc:	e8 8f c9 fe ff       	call   c0000570 <strlen>
c0013be1:	89 34 24             	mov    DWORD PTR [esp],esi
c0013be4:	89 c7                	mov    edi,eax
c0013be6:	e8 85 c9 fe ff       	call   c0000570 <strlen>
c0013beb:	83 c4 10             	add    esp,0x10
c0013bee:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0013bf2:	3d ff 00 00 00       	cmp    eax,0xff
c0013bf7:	0f 87 d3 00 00 00    	ja     c0013cd0 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0013bfd:	57                   	push   edi
c0013bfe:	57                   	push   edi
c0013bff:	56                   	push   esi
c0013c00:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0013c04:	56                   	push   esi
c0013c05:	e8 36 ca fe ff       	call   c0000640 <strcpy>
c0013c0a:	58                   	pop    eax
c0013c0b:	5a                   	pop    edx
c0013c0c:	68 d7 2a 02 c0       	push   0xc0022ad7
c0013c11:	56                   	push   esi
c0013c12:	e8 29 cc fe ff       	call   c0000840 <strcat>
c0013c17:	59                   	pop    ecx
c0013c18:	5f                   	pop    edi
c0013c19:	53                   	push   ebx
c0013c1a:	56                   	push   esi
c0013c1b:	e8 20 cc fe ff       	call   c0000840 <strcat>
c0013c20:	58                   	pop    eax
c0013c21:	5a                   	pop    edx
c0013c22:	68 83 27 02 c0       	push   0xc0022783
c0013c27:	56                   	push   esi
c0013c28:	e8 13 cc fe ff       	call   c0000840 <strcat>
c0013c2d:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0013c34:	e8 ad 3e ff ff       	call   c0007ae6 <malloc>
c0013c39:	83 c4 0c             	add    esp,0xc
c0013c3c:	89 c3                	mov    ebx,eax
c0013c3e:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c0013c44:	56                   	push   esi
c0013c45:	50                   	push   eax
c0013c46:	e8 31 7f ff ff       	call   c000bb7c <File::File(char const*, Process*)>
c0013c4b:	83 c4 10             	add    esp,0x10
c0013c4e:	85 db                	test   ebx,ebx
c0013c50:	74 7e                	je     c0013cd0 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0013c52:	51                   	push   ecx
c0013c53:	51                   	push   ecx
c0013c54:	6a 01                	push   0x1
c0013c56:	53                   	push   ebx
c0013c57:	e8 3e 7f ff ff       	call   c000bb9a <File::open(FileOpenMode)>
c0013c5c:	83 c4 10             	add    esp,0x10
c0013c5f:	85 c0                	test   eax,eax
c0013c61:	74 08                	je     c0013c6b <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c0013c63:	83 ec 0c             	sub    esp,0xc
c0013c66:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013c68:	53                   	push   ebx
c0013c69:	eb 5f                	jmp    c0013cca <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0013c6b:	52                   	push   edx
c0013c6c:	8d 44 24 17          	lea    eax,[esp+0x17]
c0013c70:	50                   	push   eax
c0013c71:	8d 44 24 20          	lea    eax,[esp+0x20]
c0013c75:	50                   	push   eax
c0013c76:	53                   	push   ebx
c0013c77:	e8 20 82 ff ff       	call   c000be9c <File::stat(unsigned long long*, bool*)>
c0013c7c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013c80:	83 c4 10             	add    esp,0x10
c0013c83:	89 c1                	mov    ecx,eax
c0013c85:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c0013c89:	74 31                	je     c0013cbc <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0013c8b:	83 ec 0c             	sub    esp,0xc
c0013c8e:	50                   	push   eax
c0013c8f:	e8 52 3e ff ff       	call   c0007ae6 <malloc>
c0013c94:	89 c6                	mov    esi,eax
c0013c96:	58                   	pop    eax
c0013c97:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013c99:	8d 54 24 20          	lea    edx,[esp+0x20]
c0013c9d:	52                   	push   edx
c0013c9e:	56                   	push   esi
c0013c9f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0013ca3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0013ca7:	53                   	push   ebx
c0013ca8:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013cab:	83 c4 20             	add    esp,0x20
c0013cae:	85 c0                	test   eax,eax
c0013cb0:	75 0a                	jne    c0013cbc <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0013cb2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013cb6:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0013cba:	74 18                	je     c0013cd4 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c0013cbc:	83 ec 0c             	sub    esp,0xc
c0013cbf:	53                   	push   ebx
c0013cc0:	e8 33 7f ff ff       	call   c000bbf8 <File::close()>
c0013cc5:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013cc7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013cca:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013ccd:	83 c4 10             	add    esp,0x10
c0013cd0:	31 c0                	xor    eax,eax
c0013cd2:	eb 3b                	jmp    c0013d0f <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c0013cd4:	83 ec 0c             	sub    esp,0xc
c0013cd7:	53                   	push   ebx
c0013cd8:	e8 1b 7f ff ff       	call   c000bbf8 <File::close()>
c0013cdd:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013cdf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013ce2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013ce5:	83 c4 0c             	add    esp,0xc
c0013ce8:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0013cef:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0013cf6:	56                   	push   esi
c0013cf7:	e8 57 fd ff ff       	call   c0013a53 <Reg::findLineFromLoadedData(char*, char*, char*)>
c0013cfc:	89 34 24             	mov    DWORD PTR [esp],esi
c0013cff:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0013d03:	e8 ee 3d ff ff       	call   c0007af6 <free>
c0013d08:	83 c4 10             	add    esp,0x10
c0013d0b:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0013d0f:	81 c4 20 01 00 00    	add    esp,0x120
c0013d15:	5b                   	pop    ebx
c0013d16:	5e                   	pop    esi
c0013d17:	5f                   	pop    edi
c0013d18:	c3                   	ret    

c0013d19 <Reg::getLine(char*, char*, char*)>:
c0013d19:	57                   	push   edi
c0013d1a:	56                   	push   esi
c0013d1b:	53                   	push   ebx
c0013d1c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013d20:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013d24:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013d28:	57                   	push   edi
c0013d29:	56                   	push   esi
c0013d2a:	53                   	push   ebx
c0013d2b:	68 88 27 02 c0       	push   0xc0022788
c0013d30:	e8 8f fe ff ff       	call   c0013bc4 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0013d35:	83 c4 10             	add    esp,0x10
c0013d38:	84 c0                	test   al,al
c0013d3a:	75 10                	jne    c0013d4c <Reg::getLine(char*, char*, char*)+0x33>
c0013d3c:	57                   	push   edi
c0013d3d:	56                   	push   esi
c0013d3e:	53                   	push   ebx
c0013d3f:	68 ad 27 02 c0       	push   0xc00227ad
c0013d44:	e8 7b fe ff ff       	call   c0013bc4 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0013d49:	83 c4 10             	add    esp,0x10
c0013d4c:	5b                   	pop    ebx
c0013d4d:	5e                   	pop    esi
c0013d4e:	5f                   	pop    edi
c0013d4f:	c3                   	ret    

c0013d50 <Reg::readInt(char*, char*, int*)>:
c0013d50:	55                   	push   ebp
c0013d51:	57                   	push   edi
c0013d52:	56                   	push   esi
c0013d53:	53                   	push   ebx
c0013d54:	81 ec f0 00 00 00    	sub    esp,0xf0
c0013d5a:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0013d5e:	55                   	push   ebp
c0013d5f:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0013d66:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0013d6d:	e8 a7 ff ff ff       	call   c0013d19 <Reg::getLine(char*, char*, char*)>
c0013d72:	83 c4 10             	add    esp,0x10
c0013d75:	84 c0                	test   al,al
c0013d77:	0f 84 b6 00 00 00    	je     c0013e33 <Reg::readInt(char*, char*, int*)+0xe3>
c0013d7d:	0f be 54 24 18       	movsx  edx,BYTE PTR [esp+0x18]
c0013d82:	83 fa 2b             	cmp    edx,0x2b
c0013d85:	74 0c                	je     c0013d93 <Reg::readInt(char*, char*, int*)+0x43>
c0013d87:	83 fa 2d             	cmp    edx,0x2d
c0013d8a:	75 0e                	jne    c0013d9a <Reg::readInt(char*, char*, int*)+0x4a>
c0013d8c:	ba 01 00 00 00       	mov    edx,0x1
c0013d91:	eb 0b                	jmp    c0013d9e <Reg::readInt(char*, char*, int*)+0x4e>
c0013d93:	ba 01 00 00 00       	mov    edx,0x1
c0013d98:	eb 02                	jmp    c0013d9c <Reg::readInt(char*, char*, int*)+0x4c>
c0013d9a:	31 d2                	xor    edx,edx
c0013d9c:	31 c0                	xor    eax,eax
c0013d9e:	be 0a 00 00 00       	mov    esi,0xa
c0013da3:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c0013da8:	75 21                	jne    c0013dcb <Reg::readInt(char*, char*, int*)+0x7b>
c0013daa:	0f be 4c 14 19       	movsx  ecx,BYTE PTR [esp+edx*1+0x19]
c0013daf:	83 f9 78             	cmp    ecx,0x78
c0013db2:	75 0a                	jne    c0013dbe <Reg::readInt(char*, char*, int*)+0x6e>
c0013db4:	83 c2 02             	add    edx,0x2
c0013db7:	be 10 00 00 00       	mov    esi,0x10
c0013dbc:	eb 0d                	jmp    c0013dcb <Reg::readInt(char*, char*, int*)+0x7b>
c0013dbe:	83 f9 62             	cmp    ecx,0x62
c0013dc1:	75 08                	jne    c0013dcb <Reg::readInt(char*, char*, int*)+0x7b>
c0013dc3:	83 c2 02             	add    edx,0x2
c0013dc6:	be 02 00 00 00       	mov    esi,0x2
c0013dcb:	01 d5                	add    ebp,edx
c0013dcd:	31 d2                	xor    edx,edx
c0013dcf:	0f be 4d 00          	movsx  ecx,BYTE PTR [ebp+0x0]
c0013dd3:	83 f9 0d             	cmp    ecx,0xd
c0013dd6:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0013dda:	0f 94 c3             	sete   bl
c0013ddd:	85 c9                	test   ecx,ecx
c0013ddf:	89 df                	mov    edi,ebx
c0013de1:	0f 94 c3             	sete   bl
c0013de4:	09 df                	or     edi,ebx
c0013de6:	89 fb                	mov    ebx,edi
c0013de8:	83 e7 01             	and    edi,0x1
c0013deb:	75 35                	jne    c0013e22 <Reg::readInt(char*, char*, int*)+0xd2>
c0013ded:	0f af d6             	imul   edx,esi
c0013df0:	83 fe 10             	cmp    esi,0x10
c0013df3:	75 26                	jne    c0013e1b <Reg::readInt(char*, char*, int*)+0xcb>
c0013df5:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0013df9:	83 ef 41             	sub    edi,0x41
c0013dfc:	89 fb                	mov    ebx,edi
c0013dfe:	80 fb 05             	cmp    bl,0x5
c0013e01:	77 06                	ja     c0013e09 <Reg::readInt(char*, char*, int*)+0xb9>
c0013e03:	8d 54 0a c9          	lea    edx,[edx+ecx*1-0x37]
c0013e07:	eb 16                	jmp    c0013e1f <Reg::readInt(char*, char*, int*)+0xcf>
c0013e09:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013e0d:	83 eb 61             	sub    ebx,0x61
c0013e10:	80 fb 05             	cmp    bl,0x5
c0013e13:	77 06                	ja     c0013e1b <Reg::readInt(char*, char*, int*)+0xcb>
c0013e15:	8d 54 0a a9          	lea    edx,[edx+ecx*1-0x57]
c0013e19:	eb 04                	jmp    c0013e1f <Reg::readInt(char*, char*, int*)+0xcf>
c0013e1b:	8d 54 0a d0          	lea    edx,[edx+ecx*1-0x30]
c0013e1f:	45                   	inc    ebp
c0013e20:	eb ad                	jmp    c0013dcf <Reg::readInt(char*, char*, int*)+0x7f>
c0013e22:	84 c0                	test   al,al
c0013e24:	74 02                	je     c0013e28 <Reg::readInt(char*, char*, int*)+0xd8>
c0013e26:	f7 da                	neg    edx
c0013e28:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c0013e2f:	89 10                	mov    DWORD PTR [eax],edx
c0013e31:	88 d8                	mov    al,bl
c0013e33:	81 c4 ec 00 00 00    	add    esp,0xec
c0013e39:	5b                   	pop    ebx
c0013e3a:	5e                   	pop    esi
c0013e3b:	5f                   	pop    edi
c0013e3c:	5d                   	pop    ebp
c0013e3d:	c3                   	ret    

c0013e3e <Reg::readString(char*, char*, char*, int)>:
c0013e3e:	57                   	push   edi
c0013e3f:	56                   	push   esi
c0013e40:	53                   	push   ebx
c0013e41:	81 ec d4 00 00 00    	sub    esp,0xd4
c0013e47:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c0013e4e:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0013e52:	57                   	push   edi
c0013e53:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0013e5a:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0013e61:	e8 b3 fe ff ff       	call   c0013d19 <Reg::getLine(char*, char*, char*)>
c0013e66:	83 c4 10             	add    esp,0x10
c0013e69:	89 c6                	mov    esi,eax
c0013e6b:	84 c0                	test   al,al
c0013e6d:	74 44                	je     c0013eb3 <Reg::readString(char*, char*, char*, int)+0x75>
c0013e6f:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c0013e76:	31 c0                	xor    eax,eax
c0013e78:	4a                   	dec    edx
c0013e79:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c0013e7c:	84 c9                	test   cl,cl
c0013e7e:	74 0f                	je     c0013e8f <Reg::readString(char*, char*, char*, int)+0x51>
c0013e80:	39 c2                	cmp    edx,eax
c0013e82:	7e 0b                	jle    c0013e8f <Reg::readString(char*, char*, char*, int)+0x51>
c0013e84:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0013e87:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c0013e8c:	40                   	inc    eax
c0013e8d:	eb ea                	jmp    c0013e79 <Reg::readString(char*, char*, char*, int)+0x3b>
c0013e8f:	83 ec 0c             	sub    esp,0xc
c0013e92:	53                   	push   ebx
c0013e93:	e8 d8 c6 fe ff       	call   c0000570 <strlen>
c0013e98:	83 c4 10             	add    esp,0x10
c0013e9b:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c0013ea0:	75 11                	jne    c0013eb3 <Reg::readString(char*, char*, char*, int)+0x75>
c0013ea2:	83 ec 0c             	sub    esp,0xc
c0013ea5:	53                   	push   ebx
c0013ea6:	e8 c5 c6 fe ff       	call   c0000570 <strlen>
c0013eab:	83 c4 10             	add    esp,0x10
c0013eae:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0013eb3:	81 c4 d0 00 00 00    	add    esp,0xd0
c0013eb9:	89 f0                	mov    eax,esi
c0013ebb:	5b                   	pop    ebx
c0013ebc:	5e                   	pop    esi
c0013ebd:	5f                   	pop    edi
c0013ebe:	c3                   	ret    

c0013ebf <Reg::readBool(char*, char*, bool*)>:
c0013ebf:	83 ec 20             	sub    esp,0x20
c0013ec2:	8d 44 24 10          	lea    eax,[esp+0x10]
c0013ec6:	50                   	push   eax
c0013ec7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013ecb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013ecf:	e8 7c fe ff ff       	call   c0013d50 <Reg::readInt(char*, char*, int*)>
c0013ed4:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0013ed9:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0013edd:	0f 95 02             	setne  BYTE PTR [edx]
c0013ee0:	83 c4 2c             	add    esp,0x2c
c0013ee3:	c3                   	ret    

c0013ee4 <Reg::readBoolWithDefault(char*, char*, bool)>:
c0013ee4:	53                   	push   ebx
c0013ee5:	83 ec 1c             	sub    esp,0x1c
c0013ee8:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c0013eec:	8d 44 24 13          	lea    eax,[esp+0x13]
c0013ef0:	50                   	push   eax
c0013ef1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013ef5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013ef9:	e8 c1 ff ff ff       	call   c0013ebf <Reg::readBool(char*, char*, bool*)>
c0013efe:	83 c4 10             	add    esp,0x10
c0013f01:	84 c0                	test   al,al
c0013f03:	74 04                	je     c0013f09 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c0013f05:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c0013f09:	88 d8                	mov    al,bl
c0013f0b:	83 c4 18             	add    esp,0x18
c0013f0e:	5b                   	pop    ebx
c0013f0f:	c3                   	ret    

c0013f10 <Reg::readIntWithDefault(char*, char*, int)>:
c0013f10:	53                   	push   ebx
c0013f11:	83 ec 1c             	sub    esp,0x1c
c0013f14:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0013f18:	8d 44 24 10          	lea    eax,[esp+0x10]
c0013f1c:	50                   	push   eax
c0013f1d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013f21:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013f25:	e8 26 fe ff ff       	call   c0013d50 <Reg::readInt(char*, char*, int*)>
c0013f2a:	83 c4 10             	add    esp,0x10
c0013f2d:	84 c0                	test   al,al
c0013f2f:	74 04                	je     c0013f35 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c0013f31:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013f35:	89 d8                	mov    eax,ebx
c0013f37:	83 c4 18             	add    esp,0x18
c0013f3a:	5b                   	pop    ebx
c0013f3b:	c3                   	ret    

c0013f3c <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c0013f3c:	57                   	push   edi
c0013f3d:	56                   	push   esi
c0013f3e:	56                   	push   esi
c0013f3f:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013f43:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0013f47:	56                   	push   esi
c0013f48:	57                   	push   edi
c0013f49:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013f4d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013f51:	e8 e8 fe ff ff       	call   c0013e3e <Reg::readString(char*, char*, char*, int)>
c0013f56:	83 c4 10             	add    esp,0x10
c0013f59:	84 c0                	test   al,al
c0013f5b:	75 1a                	jne    c0013f77 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c0013f5d:	51                   	push   ecx
c0013f5e:	56                   	push   esi
c0013f5f:	6a 00                	push   0x0
c0013f61:	57                   	push   edi
c0013f62:	e8 89 c5 fe ff       	call   c00004f0 <memset>
c0013f67:	8d 4e ff             	lea    ecx,[esi-0x1]
c0013f6a:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0013f6e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013f70:	83 c4 10             	add    esp,0x10
c0013f73:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0013f77:	89 f8                	mov    eax,edi
c0013f79:	5a                   	pop    edx
c0013f7a:	5e                   	pop    esi
c0013f7b:	5f                   	pop    edi
c0013f7c:	c3                   	ret    

c0013f7d <SysEject(regs*)>:
c0013f7d:	83 ec 0c             	sub    esp,0xc
c0013f80:	83 ca ff             	or     edx,0xffffffff
c0013f83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f87:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0013f8a:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0013f8f:	83 e9 41             	sub    ecx,0x41
c0013f92:	83 f9 19             	cmp    ecx,0x19
c0013f95:	77 18                	ja     c0013faf <SysEject(regs*)+0x32>
c0013f97:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c0013f9e:	85 c9                	test   ecx,ecx
c0013fa0:	74 0d                	je     c0013faf <SysEject(regs*)+0x32>
c0013fa2:	83 ec 0c             	sub    esp,0xc
c0013fa5:	51                   	push   ecx
c0013fa6:	e8 c3 9d ff ff       	call   c000dd6e <LogicalDisk::eject()>
c0013fab:	83 c4 10             	add    esp,0x10
c0013fae:	99                   	cdq    
c0013faf:	83 c4 0c             	add    esp,0xc
c0013fb2:	c3                   	ret    

c0013fb3 <SysExit(regs*)>:
c0013fb3:	83 ec 18             	sub    esp,0x18
c0013fb6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013fba:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013fbd:	e8 8a 2b 00 00       	call   c0016b4c <terminateTask(int)>
c0013fc2:	83 c8 ff             	or     eax,0xffffffff
c0013fc5:	83 c4 1c             	add    esp,0x1c
c0013fc8:	89 c2                	mov    edx,eax
c0013fca:	c3                   	ret    

c0013fcb <SysGetCwd(regs*)>:
c0013fcb:	83 ec 10             	sub    esp,0x10
c0013fce:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013fd2:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0013fd5:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013fd8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013fdd:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013fe0:	e8 4b 78 ff ff       	call   c000b830 <Fs::getcwd(Process*, char*, int)>
c0013fe5:	83 c4 1c             	add    esp,0x1c
c0013fe8:	99                   	cdq    
c0013fe9:	c3                   	ret    

c0013fea <SysGetPID(regs*)>:
c0013fea:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013fef:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013ff2:	8b 00                	mov    eax,DWORD PTR [eax]
c0013ff4:	99                   	cdq    
c0013ff5:	c3                   	ret    

c0013ff6 <SysGetRAMData(regs*)>:
c0013ff6:	8b 0d e8 6e 02 c0    	mov    ecx,DWORD PTR ds:0xc0026ee8
c0013ffc:	69 05 e4 6e 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc0026ee4,0xc8
c0014006:	99                   	cdq    
c0014007:	f7 f9                	idiv   ecx
c0014009:	c1 e0 18             	shl    eax,0x18
c001400c:	09 c8                	or     eax,ecx
c001400e:	99                   	cdq    
c001400f:	c3                   	ret    

c0014010 <SysGetVGAPtr(regs*)>:
c0014010:	55                   	push   ebp
c0014011:	57                   	push   edi
c0014012:	56                   	push   esi
c0014013:	53                   	push   ebx
c0014014:	83 ec 18             	sub    esp,0x18
c0014017:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001401b:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001401e:	e8 f5 25 00 00       	call   c0016618 <Thr::processFromPID(int)>
c0014023:	83 c4 10             	add    esp,0x10
c0014026:	89 c1                	mov    ecx,eax
c0014028:	b8 01 00 00 00       	mov    eax,0x1
c001402d:	85 c9                	test   ecx,ecx
c001402f:	74 57                	je     c0014088 <SysGetVGAPtr(regs*)+0x78>
c0014031:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c0014037:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c001403b:	74 0c                	je     c0014049 <SysGetVGAPtr(regs*)+0x39>
c001403d:	83 ec 0c             	sub    esp,0xc
c0014040:	55                   	push   ebp
c0014041:	e8 43 47 ff ff       	call   c0008789 <setActiveTerminal(VgaText*)>
c0014046:	83 c4 10             	add    esp,0x10
c0014049:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c001404c:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c001404f:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c0014054:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014056:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0014059:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001405c:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c0014062:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014065:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0014068:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c001406e:	50                   	push   eax
c001406f:	50                   	push   eax
c0014070:	68 c8 27 02 c0       	push   0xc00227c8
c0014075:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014078:	05 a8 0f 00 00       	add    eax,0xfa8
c001407d:	50                   	push   eax
c001407e:	e8 bd c5 fe ff       	call   c0000640 <strcpy>
c0014083:	83 c4 10             	add    esp,0x10
c0014086:	31 c0                	xor    eax,eax
c0014088:	83 c4 0c             	add    esp,0xc
c001408b:	31 d2                	xor    edx,edx
c001408d:	5b                   	pop    ebx
c001408e:	5e                   	pop    esi
c001408f:	5f                   	pop    edi
c0014090:	5d                   	pop    ebp
c0014091:	c3                   	ret    
c0014092:	66 90                	xchg   ax,ax

c0014094 <SysKill(regs*)>:
c0014094:	53                   	push   ebx
c0014095:	83 ec 08             	sub    esp,0x8
c0014098:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001409c:	83 7b 28 ff          	cmp    DWORD PTR [ebx+0x28],0xffffffff
c00140a0:	75 16                	jne    c00140b8 <SysKill(regs*)+0x24>
c00140a2:	83 ec 0c             	sub    esp,0xc
c00140a5:	68 d2 27 02 c0       	push   0xc00227d2
c00140aa:	e8 18 d6 ff ff       	call   c00116c7 <KePanic(char const*)>
c00140af:	83 c4 10             	add    esp,0x10
c00140b2:	e9 89 00 00 00       	jmp    c0014140 <SysKill(regs*)+0xac>
c00140b7:	90                   	nop
c00140b8:	83 ec 0c             	sub    esp,0xc
c00140bb:	68 e4 c6 02 c0       	push   0xc002c6e4
c00140c0:	e8 47 bd 00 00       	call   c001fe0c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00140c5:	8d 76 00             	lea    esi,[esi+0x0]
c00140c8:	83 c4 10             	add    esp,0x10
c00140cb:	85 c0                	test   eax,eax
c00140cd:	74 19                	je     c00140e8 <SysKill(regs*)+0x54>
c00140cf:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c00140d2:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00140d5:	39 0a                	cmp    DWORD PTR [edx],ecx
c00140d7:	74 33                	je     c001410c <SysKill(regs*)+0x78>
c00140d9:	52                   	push   edx
c00140da:	52                   	push   edx
c00140db:	50                   	push   eax
c00140dc:	68 e4 c6 02 c0       	push   0xc002c6e4
c00140e1:	e8 46 c0 00 00       	call   c002012c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c00140e6:	eb e0                	jmp    c00140c8 <SysKill(regs*)+0x34>
c00140e8:	83 ec 0c             	sub    esp,0xc
c00140eb:	68 d8 c6 02 c0       	push   0xc002c6d8
c00140f0:	e8 17 bd 00 00       	call   c001fe0c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00140f5:	8d 76 00             	lea    esi,[esi+0x0]
c00140f8:	83 c4 10             	add    esp,0x10
c00140fb:	85 c0                	test   eax,eax
c00140fd:	74 41                	je     c0014140 <SysKill(regs*)+0xac>
c00140ff:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0014102:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0014105:	39 0a                	cmp    DWORD PTR [edx],ecx
c0014107:	75 27                	jne    c0014130 <SysKill(regs*)+0x9c>
c0014109:	8d 76 00             	lea    esi,[esi+0x0]
c001410c:	51                   	push   ecx
c001410d:	51                   	push   ecx
c001410e:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014111:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014116:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014119:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c001411f:	e8 46 da ff ff       	call   c0011b6a <KeRaiseSignal(SigHandlerBlock*, int)>
c0014124:	83 c4 10             	add    esp,0x10
c0014127:	31 c0                	xor    eax,eax
c0014129:	31 d2                	xor    edx,edx
c001412b:	eb 1b                	jmp    c0014148 <SysKill(regs*)+0xb4>
c001412d:	8d 76 00             	lea    esi,[esi+0x0]
c0014130:	52                   	push   edx
c0014131:	52                   	push   edx
c0014132:	50                   	push   eax
c0014133:	68 d8 c6 02 c0       	push   0xc002c6d8
c0014138:	e8 ef bf 00 00       	call   c002012c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001413d:	eb b9                	jmp    c00140f8 <SysKill(regs*)+0x64>
c001413f:	90                   	nop
c0014140:	83 c8 ff             	or     eax,0xffffffff
c0014143:	89 c2                	mov    edx,eax
c0014145:	8d 76 00             	lea    esi,[esi+0x0]
c0014148:	83 c4 08             	add    esp,0x8
c001414b:	5b                   	pop    ebx
c001414c:	c3                   	ret    

c001414d <SysLoadDLL(regs*)>:
c001414d:	56                   	push   esi
c001414e:	53                   	push   ebx
c001414f:	31 d2                	xor    edx,edx
c0014151:	51                   	push   ecx
c0014152:	b8 01 00 00 00       	mov    eax,0x1
c0014157:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001415b:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001415f:	0f 84 8c 00 00 00    	je     c00141f1 <SysLoadDLL(regs*)+0xa4>
c0014165:	83 ec 0c             	sub    esp,0xc
c0014168:	68 14 01 00 00       	push   0x114
c001416d:	e8 74 39 ff ff       	call   c0007ae6 <malloc>
c0014172:	83 c4 0c             	add    esp,0xc
c0014175:	89 c3                	mov    ebx,eax
c0014177:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001417c:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c001417f:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0014182:	53                   	push   ebx
c0014183:	e8 f4 79 ff ff       	call   c000bb7c <File::File(char const*, Process*)>
c0014188:	83 c4 10             	add    esp,0x10
c001418b:	31 d2                	xor    edx,edx
c001418d:	b8 02 00 00 00       	mov    eax,0x2
c0014192:	85 db                	test   ebx,ebx
c0014194:	74 5b                	je     c00141f1 <SysLoadDLL(regs*)+0xa4>
c0014196:	83 ec 0c             	sub    esp,0xc
c0014199:	53                   	push   ebx
c001419a:	e8 bf 7c ff ff       	call   c000be5e <File::exists()>
c001419f:	83 c4 10             	add    esp,0x10
c00141a2:	84 c0                	test   al,al
c00141a4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00141a6:	75 11                	jne    c00141b9 <SysLoadDLL(regs*)+0x6c>
c00141a8:	83 ec 0c             	sub    esp,0xc
c00141ab:	53                   	push   ebx
c00141ac:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00141af:	83 c4 10             	add    esp,0x10
c00141b2:	b8 03 00 00 00       	mov    eax,0x3
c00141b7:	eb 36                	jmp    c00141ef <SysLoadDLL(regs*)+0xa2>
c00141b9:	83 ec 0c             	sub    esp,0xc
c00141bc:	53                   	push   ebx
c00141bd:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00141c0:	58                   	pop    eax
c00141c1:	5a                   	pop    edx
c00141c2:	6a 00                	push   0x0
c00141c4:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00141c7:	e8 81 15 00 00       	call   c001574d <Thr::loadDLL(char const*, bool)>
c00141cc:	83 c4 10             	add    esp,0x10
c00141cf:	89 c1                	mov    ecx,eax
c00141d1:	31 d2                	xor    edx,edx
c00141d3:	b8 04 00 00 00       	mov    eax,0x4
c00141d8:	85 c9                	test   ecx,ecx
c00141da:	74 15                	je     c00141f1 <SysLoadDLL(regs*)+0xa4>
c00141dc:	53                   	push   ebx
c00141dd:	53                   	push   ebx
c00141de:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00141e4:	51                   	push   ecx
c00141e5:	e8 94 17 00 00       	call   c001597e <Thr::executeDLL(unsigned long, void*)>
c00141ea:	83 c4 10             	add    esp,0x10
c00141ed:	31 c0                	xor    eax,eax
c00141ef:	31 d2                	xor    edx,edx
c00141f1:	59                   	pop    ecx
c00141f2:	5b                   	pop    ebx
c00141f3:	5e                   	pop    esi
c00141f4:	c3                   	ret    

c00141f5 <SysRead(regs*)>:
c00141f5:	57                   	push   edi
c00141f6:	56                   	push   esi
c00141f7:	53                   	push   ebx
c00141f8:	83 ec 10             	sub    esp,0x10
c00141fb:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00141ff:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014202:	83 f8 02             	cmp    eax,0x2
c0014205:	77 10                	ja     c0014217 <SysRead(regs*)+0x22>
c0014207:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001420c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001420f:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0014215:	eb 0e                	jmp    c0014225 <SysRead(regs*)+0x30>
c0014217:	83 ec 0c             	sub    esp,0xc
c001421a:	50                   	push   eax
c001421b:	e8 c3 52 ff ff       	call   c00094e3 <KeGetFileFromDescriptor(int)>
c0014220:	83 c4 10             	add    esp,0x10
c0014223:	89 c1                	mov    ecx,eax
c0014225:	83 c8 ff             	or     eax,0xffffffff
c0014228:	85 c9                	test   ecx,ecx
c001422a:	89 c2                	mov    edx,eax
c001422c:	74 28                	je     c0014256 <SysRead(regs*)+0x61>
c001422e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014236:	31 ff                	xor    edi,edi
c0014238:	83 ec 0c             	sub    esp,0xc
c001423b:	8b 01                	mov    eax,DWORD PTR [ecx]
c001423d:	8d 54 24 18          	lea    edx,[esp+0x18]
c0014241:	52                   	push   edx
c0014242:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014245:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0014248:	57                   	push   edi
c0014249:	56                   	push   esi
c001424a:	51                   	push   ecx
c001424b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001424e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0014252:	83 c4 20             	add    esp,0x20
c0014255:	99                   	cdq    
c0014256:	83 c4 10             	add    esp,0x10
c0014259:	5b                   	pop    ebx
c001425a:	5e                   	pop    esi
c001425b:	5f                   	pop    edi
c001425c:	c3                   	ret    

c001425d <SysRegisterSignal(regs*)>:
c001425d:	83 ec 18             	sub    esp,0x18
c0014260:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014264:	6a 00                	push   0x0
c0014266:	6a 00                	push   0x0
c0014268:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001426b:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001426e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014273:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014276:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c001427c:	e8 b3 d8 ff ff       	call   c0011b34 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c0014281:	83 c4 2c             	add    esp,0x2c
c0014284:	99                   	cdq    
c0014285:	c3                   	ret    

c0014286 <SysRegistryGetTypeFromPath(regs*)>:
c0014286:	57                   	push   edi
c0014287:	56                   	push   esi
c0014288:	53                   	push   ebx
c0014289:	81 ec 38 01 00 00    	sub    esp,0x138
c001428f:	8b 9c 24 48 01 00 00 	mov    ebx,DWORD PTR [esp+0x148]
c0014296:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014299:	68 f3 27 02 c0       	push   0xc00227f3
c001429e:	e8 d2 66 ff ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c00142a3:	5a                   	pop    edx
c00142a4:	59                   	pop    ecx
c00142a5:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00142a8:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00142ab:	e8 4d f6 ff ff       	call   c00138fd <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c00142b0:	5f                   	pop    edi
c00142b1:	89 c6                	mov    esi,eax
c00142b3:	5a                   	pop    edx
c00142b4:	50                   	push   eax
c00142b5:	68 13 28 02 c0       	push   0xc0022813
c00142ba:	e8 b6 66 ff ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c00142bf:	83 c4 10             	add    esp,0x10
c00142c2:	85 f6                	test   esi,esi
c00142c4:	74 28                	je     c00142ee <SysRegistryGetTypeFromPath(regs*)+0x68>
c00142c6:	50                   	push   eax
c00142c7:	8d 7c 24 08          	lea    edi,[esp+0x8]
c00142cb:	57                   	push   edi
c00142cc:	56                   	push   esi
c00142cd:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00142d0:	e8 0c f2 ff ff       	call   c00134e1 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c00142d5:	83 c4 0c             	add    esp,0xc
c00142d8:	89 c3                	mov    ebx,eax
c00142da:	57                   	push   edi
c00142db:	50                   	push   eax
c00142dc:	68 1b 28 02 c0       	push   0xc002281b
c00142e1:	e8 8f 66 ff ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c00142e6:	89 d8                	mov    eax,ebx
c00142e8:	83 c4 10             	add    esp,0x10
c00142eb:	99                   	cdq    
c00142ec:	eb 05                	jmp    c00142f3 <SysRegistryGetTypeFromPath(regs*)+0x6d>
c00142ee:	83 c8 ff             	or     eax,0xffffffff
c00142f1:	89 c2                	mov    edx,eax
c00142f3:	81 c4 30 01 00 00    	add    esp,0x130
c00142f9:	5b                   	pop    ebx
c00142fa:	5e                   	pop    esi
c00142fb:	5f                   	pop    edi
c00142fc:	c3                   	ret    

c00142fd <SysRegistryReadExtent(regs*)>:
c00142fd:	83 ec 1c             	sub    esp,0x1c
c0014300:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014304:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0014307:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c001430a:	85 c0                	test   eax,eax
c001430c:	79 1f                	jns    c001432d <SysRegistryReadExtent(regs*)+0x30>
c001430e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0014313:	52                   	push   edx
c0014314:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0014318:	52                   	push   edx
c0014319:	50                   	push   eax
c001431a:	51                   	push   ecx
c001431b:	e8 b3 f0 ff ff       	call   c00133d3 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c0014320:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014324:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0014328:	83 c4 10             	add    esp,0x10
c001432b:	eb 14                	jmp    c0014341 <SysRegistryReadExtent(regs*)+0x44>
c001432d:	83 ec 04             	sub    esp,0x4
c0014330:	ff 72 24             	push   DWORD PTR [edx+0x24]
c0014333:	50                   	push   eax
c0014334:	51                   	push   ecx
c0014335:	e8 33 eb ff ff       	call   c0012e6d <CmGetString(Reghive_Tag*, int, char*)>
c001433a:	83 c4 10             	add    esp,0x10
c001433d:	31 c0                	xor    eax,eax
c001433f:	31 d2                	xor    edx,edx
c0014341:	83 c4 1c             	add    esp,0x1c
c0014344:	c3                   	ret    

c0014345 <SysRegistryPathToExtentLookup(regs*)>:
c0014345:	53                   	push   ebx
c0014346:	83 ec 10             	sub    esp,0x10
c0014349:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001434d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014350:	68 31 28 02 c0       	push   0xc0022831
c0014355:	e8 1b 66 ff ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c001435a:	58                   	pop    eax
c001435b:	5a                   	pop    edx
c001435c:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001435f:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014362:	e8 96 f5 ff ff       	call   c00138fd <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0014367:	83 c4 18             	add    esp,0x18
c001436a:	99                   	cdq    
c001436b:	5b                   	pop    ebx
c001436c:	c3                   	ret    

c001436d <SysRegistryEnterDirectory(regs*)>:
c001436d:	53                   	push   ebx
c001436e:	83 ec 10             	sub    esp,0x10
c0014371:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014375:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014378:	68 54 28 02 c0       	push   0xc0022854
c001437d:	e8 f3 65 ff ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c0014382:	58                   	pop    eax
c0014383:	5a                   	pop    edx
c0014384:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014387:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001438a:	e8 55 eb ff ff       	call   c0012ee4 <CmEnterDirectory(Reghive_Tag*, int)>
c001438f:	83 c4 18             	add    esp,0x18
c0014392:	99                   	cdq    
c0014393:	5b                   	pop    ebx
c0014394:	c3                   	ret    

c0014395 <SysRegistryGetNext(regs*)>:
c0014395:	53                   	push   ebx
c0014396:	83 ec 10             	sub    esp,0x10
c0014399:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001439d:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00143a0:	68 72 28 02 c0       	push   0xc0022872
c00143a5:	e8 cb 65 ff ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c00143aa:	58                   	pop    eax
c00143ab:	5a                   	pop    edx
c00143ac:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00143af:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00143b2:	e8 6c eb ff ff       	call   c0012f23 <CmGetNext(Reghive_Tag*, int)>
c00143b7:	83 c4 18             	add    esp,0x18
c00143ba:	99                   	cdq    
c00143bb:	5b                   	pop    ebx
c00143bc:	c3                   	ret    

c00143bd <SysRegistryGetNameAndTypeFromExtent(regs*)>:
c00143bd:	57                   	push   edi
c00143be:	56                   	push   esi
c00143bf:	53                   	push   ebx
c00143c0:	81 ec 34 01 00 00    	sub    esp,0x134
c00143c6:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c00143cd:	8d 7c 24 08          	lea    edi,[esp+0x8]
c00143d1:	57                   	push   edi
c00143d2:	ff 76 28             	push   DWORD PTR [esi+0x28]
c00143d5:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00143d8:	e8 04 f1 ff ff       	call   c00134e1 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c00143dd:	89 c3                	mov    ebx,eax
c00143df:	58                   	pop    eax
c00143e0:	5a                   	pop    edx
c00143e1:	57                   	push   edi
c00143e2:	ff 76 24             	push   DWORD PTR [esi+0x24]
c00143e5:	e8 56 c2 fe ff       	call   c0000640 <strcpy>
c00143ea:	89 d8                	mov    eax,ebx
c00143ec:	81 c4 40 01 00 00    	add    esp,0x140
c00143f2:	99                   	cdq    
c00143f3:	5b                   	pop    ebx
c00143f4:	5e                   	pop    esi
c00143f5:	5f                   	pop    edi
c00143f6:	c3                   	ret    

c00143f7 <SysRegistryOpen(regs*)>:
c00143f7:	83 ec 18             	sub    esp,0x18
c00143fa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00143fe:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0014401:	e8 f7 e8 ff ff       	call   c0012cfd <CmOpen(char const*)>
c0014406:	83 c4 1c             	add    esp,0x1c
c0014409:	99                   	cdq    
c001440a:	c3                   	ret    

c001440b <SysRegistryClose(regs*)>:
c001440b:	83 ec 18             	sub    esp,0x18
c001440e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014412:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014415:	e8 01 ea ff ff       	call   c0012e1b <CmClose(Reghive_Tag*)>
c001441a:	31 c0                	xor    eax,eax
c001441c:	31 d2                	xor    edx,edx
c001441e:	83 c4 1c             	add    esp,0x1c
c0014421:	c3                   	ret    

c0014422 <SysSbrk(regs*)>:
c0014422:	56                   	push   esi
c0014423:	53                   	push   ebx
c0014424:	50                   	push   eax
c0014425:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001442a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001442e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014431:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c0014434:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c001443a:	85 db                	test   ebx,ebx
c001443c:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001443f:	74 02                	je     c0014443 <SysSbrk(regs*)+0x21>
c0014441:	79 06                	jns    c0014449 <SysSbrk(regs*)+0x27>
c0014443:	89 f0                	mov    eax,esi
c0014445:	31 d2                	xor    edx,edx
c0014447:	eb 2a                	jmp    c0014473 <SysSbrk(regs*)+0x51>
c0014449:	83 c8 ff             	or     eax,0xffffffff
c001444c:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0014452:	89 c2                	mov    edx,eax
c0014454:	77 1d                	ja     c0014473 <SysSbrk(regs*)+0x51>
c0014456:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c001445c:	50                   	push   eax
c001445d:	c1 ea 0c             	shr    edx,0xc
c0014460:	68 07 0c 00 00       	push   0xc07
c0014465:	52                   	push   edx
c0014466:	51                   	push   ecx
c0014467:	e8 e8 59 ff ff       	call   c0009e54 <VAS::allocatePages(int, int)>
c001446c:	89 f0                	mov    eax,esi
c001446e:	31 d2                	xor    edx,edx
c0014470:	83 c4 10             	add    esp,0x10
c0014473:	59                   	pop    ecx
c0014474:	5b                   	pop    ebx
c0014475:	5e                   	pop    esi
c0014476:	c3                   	ret    

c0014477 <SysSetCwd(regs*)>:
c0014477:	83 ec 14             	sub    esp,0x14
c001447a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001447e:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014481:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014486:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0014489:	e8 6f 7a ff ff       	call   c000befd <Fs::setcwd(Process*, char*)>
c001448e:	83 c4 1c             	add    esp,0x1c
c0014491:	99                   	cdq    
c0014492:	c3                   	ret    

c0014493 <SysSetTime(regs*)>:
c0014493:	55                   	push   ebp
c0014494:	31 c9                	xor    ecx,ecx
c0014496:	57                   	push   edi
c0014497:	bd 0c 00 00 00       	mov    ebp,0xc
c001449c:	56                   	push   esi
c001449d:	53                   	push   ebx
c001449e:	31 db                	xor    ebx,ebx
c00144a0:	83 ec 10             	sub    esp,0x10
c00144a3:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00144a7:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c00144aa:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c00144ad:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c00144b0:	89 c2                	mov    edx,eax
c00144b2:	81 ef 6c 07 00 00    	sub    edi,0x76c
c00144b8:	83 e2 1f             	and    edx,0x1f
c00144bb:	c1 e7 10             	shl    edi,0x10
c00144be:	42                   	inc    edx
c00144bf:	c1 e8 05             	shr    eax,0x5
c00144c2:	88 d1                	mov    cl,dl
c00144c4:	31 d2                	xor    edx,edx
c00144c6:	f7 f5                	div    ebp
c00144c8:	89 dd                	mov    ebp,ebx
c00144ca:	88 d5                	mov    ch,dl
c00144cc:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c00144d2:	0f b7 c1             	movzx  eax,cx
c00144d5:	31 d2                	xor    edx,edx
c00144d7:	09 f8                	or     eax,edi
c00144d9:	bf 3c 00 00 00       	mov    edi,0x3c
c00144de:	89 c1                	mov    ecx,eax
c00144e0:	89 f0                	mov    eax,esi
c00144e2:	f7 f7                	div    edi
c00144e4:	c1 e2 10             	shl    edx,0x10
c00144e7:	09 d5                	or     ebp,edx
c00144e9:	31 d2                	xor    edx,edx
c00144eb:	89 eb                	mov    ebx,ebp
c00144ed:	f7 f7                	div    edi
c00144ef:	bf 10 0e 00 00       	mov    edi,0xe10
c00144f4:	88 d7                	mov    bh,dl
c00144f6:	89 f0                	mov    eax,esi
c00144f8:	31 d2                	xor    edx,edx
c00144fa:	f7 f7                	div    edi
c00144fc:	bf 18 00 00 00       	mov    edi,0x18
c0014501:	31 d2                	xor    edx,edx
c0014503:	f7 f7                	div    edi
c0014505:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001450a:	88 d3                	mov    bl,dl
c001450c:	53                   	push   ebx
c001450d:	51                   	push   ecx
c001450e:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0014514:	e8 f1 81 ff ff       	call   c000c70a <Clock::setTimeInDatetimeLocal(datetime_t)>
c0014519:	83 c4 1c             	add    esp,0x1c
c001451c:	83 f0 01             	xor    eax,0x1
c001451f:	5b                   	pop    ebx
c0014520:	0f b6 c0             	movzx  eax,al
c0014523:	5e                   	pop    esi
c0014524:	31 d2                	xor    edx,edx
c0014526:	5f                   	pop    edi
c0014527:	5d                   	pop    ebp
c0014528:	c3                   	ret    

c0014529 <SysSymlink(regs*)>:
c0014529:	56                   	push   esi
c001452a:	83 c8 ff             	or     eax,0xffffffff
c001452d:	53                   	push   ebx
c001452e:	89 c2                	mov    edx,eax
c0014530:	81 ec 34 02 00 00    	sub    esp,0x234
c0014536:	8b 9c 24 40 02 00 00 	mov    ebx,DWORD PTR [esp+0x240]
c001453d:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0014541:	74 50                	je     c0014593 <SysSymlink(regs*)+0x6a>
c0014543:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0014546:	85 c9                	test   ecx,ecx
c0014548:	74 49                	je     c0014593 <SysSymlink(regs*)+0x6a>
c001454a:	6a 01                	push   0x1
c001454c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014551:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014554:	05 0c 01 00 00       	add    eax,0x10c
c0014559:	50                   	push   eax
c001455a:	51                   	push   ecx
c001455b:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001455f:	56                   	push   esi
c0014560:	e8 1f 73 ff ff       	call   c000b884 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0014565:	6a 01                	push   0x1
c0014567:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001456c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001456f:	05 0c 01 00 00       	add    eax,0x10c
c0014574:	50                   	push   eax
c0014575:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014578:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c001457f:	53                   	push   ebx
c0014580:	e8 ff 72 ff ff       	call   c000b884 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0014585:	83 c4 18             	add    esp,0x18
c0014588:	56                   	push   esi
c0014589:	53                   	push   ebx
c001458a:	e8 04 6f ff ff       	call   c000b493 <KeCreateSymlink(char const*, char const*)>
c001458f:	83 c4 10             	add    esp,0x10
c0014592:	99                   	cdq    
c0014593:	81 c4 34 02 00 00    	add    esp,0x234
c0014599:	5b                   	pop    ebx
c001459a:	5e                   	pop    esi
c001459b:	c3                   	ret    

c001459c <SysTimezone(regs*)>:
c001459c:	53                   	push   ebx
c001459d:	83 ec 08             	sub    esp,0x8
c00145a0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00145a4:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c00145a8:	75 17                	jne    c00145c1 <SysTimezone(regs*)+0x25>
c00145aa:	83 ec 0c             	sub    esp,0xc
c00145ad:	68 89 28 02 c0       	push   0xc0022889
c00145b2:	e8 be 63 ff ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c00145b7:	83 c8 ff             	or     eax,0xffffffff
c00145ba:	83 c4 10             	add    esp,0x10
c00145bd:	89 c2                	mov    edx,eax
c00145bf:	eb 20                	jmp    c00145e1 <SysTimezone(regs*)+0x45>
c00145c1:	83 ec 0c             	sub    esp,0xc
c00145c4:	68 9e 28 02 c0       	push   0xc002289e
c00145c9:	e8 a7 63 ff ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c00145ce:	58                   	pop    eax
c00145cf:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00145d2:	e8 9d 7e ff ff       	call   c000c474 <User::loadClockSettings(int)>
c00145d7:	83 c4 10             	add    esp,0x10
c00145da:	b8 01 00 00 00       	mov    eax,0x1
c00145df:	31 d2                	xor    edx,edx
c00145e1:	83 c4 08             	add    esp,0x8
c00145e4:	5b                   	pop    ebx
c00145e5:	c3                   	ret    

c00145e6 <SysTruncate(regs*)>:
c00145e6:	55                   	push   ebp
c00145e7:	57                   	push   edi
c00145e8:	31 ff                	xor    edi,edi
c00145ea:	56                   	push   esi
c00145eb:	53                   	push   ebx
c00145ec:	83 ec 0c             	sub    esp,0xc
c00145ef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145f3:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c00145f6:	8b 68 24             	mov    ebp,DWORD PTR [eax+0x24]
c00145f9:	89 ce                	mov    esi,ecx
c00145fb:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c00145ff:	0f 84 9a 00 00 00    	je     c001469f <SysTruncate(regs*)+0xb9>
c0014605:	83 ec 0c             	sub    esp,0xc
c0014608:	68 14 01 00 00       	push   0x114
c001460d:	e8 d4 34 ff ff       	call   c0007ae6 <malloc>
c0014612:	83 c4 0c             	add    esp,0xc
c0014615:	89 c3                	mov    ebx,eax
c0014617:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001461c:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c001461f:	55                   	push   ebp
c0014620:	53                   	push   ebx
c0014621:	e8 56 75 ff ff       	call   c000bb7c <File::File(char const*, Process*)>
c0014626:	83 c4 10             	add    esp,0x10
c0014629:	31 d2                	xor    edx,edx
c001462b:	b8 03 00 00 00       	mov    eax,0x3
c0014630:	85 db                	test   ebx,ebx
c0014632:	0f 84 a2 00 00 00    	je     c00146da <SysTruncate(regs*)+0xf4>
c0014638:	51                   	push   ecx
c0014639:	51                   	push   ecx
c001463a:	6a 02                	push   0x2
c001463c:	53                   	push   ebx
c001463d:	e8 58 75 ff ff       	call   c000bb9a <File::open(FileOpenMode)>
c0014642:	83 c4 10             	add    esp,0x10
c0014645:	85 c0                	test   eax,eax
c0014647:	74 13                	je     c001465c <SysTruncate(regs*)+0x76>
c0014649:	83 ec 0c             	sub    esp,0xc
c001464c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001464e:	53                   	push   ebx
c001464f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014652:	83 c4 10             	add    esp,0x10
c0014655:	b8 04 00 00 00       	mov    eax,0x4
c001465a:	eb 7c                	jmp    c00146d8 <SysTruncate(regs*)+0xf2>
c001465c:	52                   	push   edx
c001465d:	57                   	push   edi
c001465e:	56                   	push   esi
c001465f:	53                   	push   ebx
c0014660:	e8 49 76 ff ff       	call   c000bcae <File::truncate(unsigned long long)>
c0014665:	83 c4 10             	add    esp,0x10
c0014668:	85 c0                	test   eax,eax
c001466a:	74 1b                	je     c0014687 <SysTruncate(regs*)+0xa1>
c001466c:	83 ec 0c             	sub    esp,0xc
c001466f:	53                   	push   ebx
c0014670:	e8 83 75 ff ff       	call   c000bbf8 <File::close()>
c0014675:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014677:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001467a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001467d:	83 c4 10             	add    esp,0x10
c0014680:	b8 05 00 00 00       	mov    eax,0x5
c0014685:	eb 51                	jmp    c00146d8 <SysTruncate(regs*)+0xf2>
c0014687:	83 ec 0c             	sub    esp,0xc
c001468a:	53                   	push   ebx
c001468b:	e8 68 75 ff ff       	call   c000bbf8 <File::close()>
c0014690:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014692:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014695:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014698:	83 c4 10             	add    esp,0x10
c001469b:	31 c0                	xor    eax,eax
c001469d:	eb 39                	jmp    c00146d8 <SysTruncate(regs*)+0xf2>
c001469f:	31 d2                	xor    edx,edx
c00146a1:	b8 01 00 00 00       	mov    eax,0x1
c00146a6:	83 fd 02             	cmp    ebp,0x2
c00146a9:	7e 2f                	jle    c00146da <SysTruncate(regs*)+0xf4>
c00146ab:	83 ec 0c             	sub    esp,0xc
c00146ae:	51                   	push   ecx
c00146af:	e8 2f 4e ff ff       	call   c00094e3 <KeGetFileFromDescriptor(int)>
c00146b4:	83 c4 10             	add    esp,0x10
c00146b7:	89 c1                	mov    ecx,eax
c00146b9:	31 d2                	xor    edx,edx
c00146bb:	b8 02 00 00 00       	mov    eax,0x2
c00146c0:	85 c9                	test   ecx,ecx
c00146c2:	74 16                	je     c00146da <SysTruncate(regs*)+0xf4>
c00146c4:	50                   	push   eax
c00146c5:	57                   	push   edi
c00146c6:	56                   	push   esi
c00146c7:	51                   	push   ecx
c00146c8:	e8 e1 75 ff ff       	call   c000bcae <File::truncate(unsigned long long)>
c00146cd:	83 c4 10             	add    esp,0x10
c00146d0:	85 c0                	test   eax,eax
c00146d2:	0f 95 c0             	setne  al
c00146d5:	0f b6 c0             	movzx  eax,al
c00146d8:	31 d2                	xor    edx,edx
c00146da:	83 c4 0c             	add    esp,0xc
c00146dd:	5b                   	pop    ebx
c00146de:	5e                   	pop    esi
c00146df:	5f                   	pop    edi
c00146e0:	5d                   	pop    ebp
c00146e1:	c3                   	ret    

c00146e2 <SysWrite(regs*)>:
c00146e2:	57                   	push   edi
c00146e3:	56                   	push   esi
c00146e4:	53                   	push   ebx
c00146e5:	83 ec 10             	sub    esp,0x10
c00146e8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00146ec:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00146ef:	83 f8 02             	cmp    eax,0x2
c00146f2:	77 10                	ja     c0014704 <SysWrite(regs*)+0x22>
c00146f4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00146f9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00146fc:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0014702:	eb 0e                	jmp    c0014712 <SysWrite(regs*)+0x30>
c0014704:	83 ec 0c             	sub    esp,0xc
c0014707:	50                   	push   eax
c0014708:	e8 d6 4d ff ff       	call   c00094e3 <KeGetFileFromDescriptor(int)>
c001470d:	83 c4 10             	add    esp,0x10
c0014710:	89 c1                	mov    ecx,eax
c0014712:	83 c8 ff             	or     eax,0xffffffff
c0014715:	85 c9                	test   ecx,ecx
c0014717:	89 c2                	mov    edx,eax
c0014719:	74 28                	je     c0014743 <SysWrite(regs*)+0x61>
c001471b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014723:	31 ff                	xor    edi,edi
c0014725:	83 ec 0c             	sub    esp,0xc
c0014728:	8b 01                	mov    eax,DWORD PTR [ecx]
c001472a:	8d 54 24 18          	lea    edx,[esp+0x18]
c001472e:	52                   	push   edx
c001472f:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014732:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0014735:	57                   	push   edi
c0014736:	56                   	push   esi
c0014737:	51                   	push   ecx
c0014738:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001473b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001473f:	83 c4 20             	add    esp,0x20
c0014742:	99                   	cdq    
c0014743:	83 c4 10             	add    esp,0x10
c0014746:	5b                   	pop    ebx
c0014747:	5e                   	pop    esi
c0014748:	5f                   	pop    edi
c0014749:	c3                   	ret    

c001474a <SysWsbe(regs*)>:
c001474a:	57                   	push   edi
c001474b:	b9 0b 00 00 00       	mov    ecx,0xb
c0014750:	56                   	push   esi
c0014751:	be dd 28 02 c0       	mov    esi,0xc00228dd
c0014756:	53                   	push   ebx
c0014757:	83 ec 30             	sub    esp,0x30
c001475a:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001475e:	fc                   	cld    
c001475f:	83 ec 0c             	sub    esp,0xc
c0014762:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0014764:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0014768:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001476d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014770:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c0014776:	8b 06                	mov    eax,DWORD PTR [esi]
c0014778:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001477b:	57                   	push   edi
c001477c:	e8 ef bd fe ff       	call   c0000570 <strlen>
c0014781:	5a                   	pop    edx
c0014782:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0014786:	52                   	push   edx
c0014787:	31 d2                	xor    edx,edx
c0014789:	57                   	push   edi
c001478a:	52                   	push   edx
c001478b:	50                   	push   eax
c001478c:	56                   	push   esi
c001478d:	ff d3                	call   ebx
c001478f:	83 c4 14             	add    esp,0x14
c0014792:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0014796:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0014799:	e8 ae 23 00 00       	call   c0016b4c <terminateTask(int)>
c001479e:	83 c4 40             	add    esp,0x40
c00147a1:	b8 ef be ad de       	mov    eax,0xdeadbeef
c00147a6:	5b                   	pop    ebx
c00147a7:	31 d2                	xor    edx,edx
c00147a9:	5e                   	pop    esi
c00147aa:	5f                   	pop    edi
c00147ab:	c3                   	ret    

c00147ac <SysYield(regs*)>:
c00147ac:	83 ec 0c             	sub    esp,0xc
c00147af:	fa                   	cli    
c00147b0:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c00147b6:	e8 f1 19 00 00       	call   c00161ac <schedule()>
c00147bb:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00147c0:	48                   	dec    eax
c00147c1:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00147c6:	75 01                	jne    c00147c9 <SysYield(regs*)+0x1d>
c00147c8:	fb                   	sti    
c00147c9:	31 c0                	xor    eax,eax
c00147cb:	31 d2                	xor    edx,edx
c00147cd:	83 c4 0c             	add    esp,0xc
c00147d0:	c3                   	ret    

c00147d1 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c00147d1:	55                   	push   ebp
c00147d2:	57                   	push   edi
c00147d3:	56                   	push   esi
c00147d4:	53                   	push   ebx
c00147d5:	81 ec 2c 10 00 00    	sub    esp,0x102c
c00147db:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c00147e3:	0f 95 c0             	setne  al
c00147e6:	31 d2                	xor    edx,edx
c00147e8:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c00147f0:	0f 94 c2             	sete   dl
c00147f3:	85 c2                	test   edx,eax
c00147f5:	74 34                	je     c001482b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x5a>
c00147f7:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c0014802:	74 27                	je     c001482b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x5a>
c0014804:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c001480b:	05 00 10 00 00       	add    eax,0x1000
c0014810:	89 c1                	mov    ecx,eax
c0014812:	25 00 f0 ff ff       	and    eax,0xfffff000
c0014817:	81 c9 00 f0 ff ff    	or     ecx,0xfffff000
c001481d:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c0014824:	89 8c 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],ecx
c001482b:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c0014832:	83 ec 0c             	sub    esp,0xc
c0014835:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c001483b:	6a 01                	push   0x1
c001483d:	e8 fb 4d ff ff       	call   c000963d <Virt::allocateKernelVirtualPages(int)>
c0014842:	83 c4 10             	add    esp,0x10
c0014845:	89 c3                	mov    ebx,eax
c0014847:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c001484d:	0f 86 25 01 00 00    	jbe    c0014978 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a7>
c0014853:	c1 ee 0c             	shr    esi,0xc
c0014856:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c001485d:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0014861:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014869:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c0014870:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014874:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c001487b:	29 ef                	sub    edi,ebp
c001487d:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0014881:	0f 83 f8 00 00 00    	jae    c001497f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1ae>
c0014887:	81 ff 00 10 00 00    	cmp    edi,0x1000
c001488d:	76 05                	jbe    c0014894 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc3>
c001488f:	bf 00 10 00 00       	mov    edi,0x1000
c0014894:	83 ec 0c             	sub    esp,0xc
c0014897:	31 d2                	xor    edx,edx
c0014899:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c00148a0:	8b 08                	mov    ecx,DWORD PTR [eax]
c00148a2:	8d 44 24 28          	lea    eax,[esp+0x28]
c00148a6:	50                   	push   eax
c00148a7:	8d 74 24 30          	lea    esi,[esp+0x30]
c00148ab:	56                   	push   esi
c00148ac:	52                   	push   edx
c00148ad:	57                   	push   edi
c00148ae:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c00148b5:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00148b8:	83 c4 20             	add    esp,0x20
c00148bb:	85 c0                	test   eax,eax
c00148bd:	75 06                	jne    c00148c5 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf4>
c00148bf:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c00148c3:	74 13                	je     c00148d8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x107>
c00148c5:	83 ec 0c             	sub    esp,0xc
c00148c8:	53                   	push   ebx
c00148c9:	e8 8d 50 ff ff       	call   c000995b <Virt::freeKernelVirtualPages(unsigned long)>
c00148ce:	83 c4 10             	add    esp,0x10
c00148d1:	31 c0                	xor    eax,eax
c00148d3:	e9 7c 01 00 00       	jmp    c0014a54 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x283>
c00148d8:	fa                   	cli    
c00148d9:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c00148df:	e8 0b 35 ff ff       	call   c0007def <Phys::allocatePage()>
c00148e4:	6a 07                	push   0x7
c00148e6:	89 c7                	mov    edi,eax
c00148e8:	53                   	push   ebx
c00148e9:	50                   	push   eax
c00148ea:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00148ef:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00148f2:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00148f8:	e8 53 54 ff ff       	call   c0009d50 <VAS::mapPage(unsigned long, unsigned long, int)>
c00148fd:	83 c4 0c             	add    esp,0xc
c0014900:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0014907:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001490d:	6a 00                	push   0x0
c001490f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014914:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014917:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001491d:	e8 94 52 ff ff       	call   c0009bb6 <VAS::mapOtherVASIn(bool, VAS*)>
c0014922:	58                   	pop    eax
c0014923:	5a                   	pop    edx
c0014924:	68 07 0c 00 00       	push   0xc07
c0014929:	55                   	push   ebp
c001492a:	57                   	push   edi
c001492b:	89 df                	mov    edi,ebx
c001492d:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0014934:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001493a:	6a 00                	push   0x0
c001493c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014941:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014944:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001494a:	e8 53 56 ff ff       	call   c0009fa2 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001494f:	b9 00 10 00 00       	mov    ecx,0x1000
c0014954:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014956:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001495b:	83 c4 20             	add    esp,0x20
c001495e:	48                   	dec    eax
c001495f:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0014964:	85 c0                	test   eax,eax
c0014966:	75 01                	jne    c0014969 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x198>
c0014968:	fb                   	sti    
c0014969:	81 c5 00 10 00 00    	add    ebp,0x1000
c001496f:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0014973:	e9 f1 fe ff ff       	jmp    c0014869 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x98>
c0014978:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c001497f:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0014986:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c001498c:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0014992:	0f 86 ae 00 00 00    	jbe    c0014a46 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c0014998:	fa                   	cli    
c0014999:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c001499f:	c1 ee 0c             	shr    esi,0xc
c00149a2:	51                   	push   ecx
c00149a3:	31 ff                	xor    edi,edi
c00149a5:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c00149ac:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00149b2:	6a 00                	push   0x0
c00149b4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00149b9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00149bc:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00149c2:	e8 ef 51 ff ff       	call   c0009bb6 <VAS::mapOtherVASIn(bool, VAS*)>
c00149c7:	83 c4 10             	add    esp,0x10
c00149ca:	e8 20 34 ff ff       	call   c0007def <Phys::allocatePage()>
c00149cf:	47                   	inc    edi
c00149d0:	6a 07                	push   0x7
c00149d2:	53                   	push   ebx
c00149d3:	50                   	push   eax
c00149d4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00149d8:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00149de:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c00149e1:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c00149e7:	e8 64 53 ff ff       	call   c0009d50 <VAS::mapPage(unsigned long, unsigned long, int)>
c00149ec:	58                   	pop    eax
c00149ed:	5a                   	pop    edx
c00149ee:	68 07 0c 00 00       	push   0xc07
c00149f3:	55                   	push   ebp
c00149f4:	81 c5 00 10 00 00    	add    ebp,0x1000
c00149fa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00149fe:	50                   	push   eax
c00149ff:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0014a06:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014a0c:	6a 00                	push   0x0
c0014a0e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014a13:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014a16:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014a1c:	e8 81 55 ff ff       	call   c0009fa2 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0014a21:	83 c4 1c             	add    esp,0x1c
c0014a24:	68 00 10 00 00       	push   0x1000
c0014a29:	6a 00                	push   0x0
c0014a2b:	53                   	push   ebx
c0014a2c:	e8 bf ba fe ff       	call   c00004f0 <memset>
c0014a31:	83 c4 10             	add    esp,0x10
c0014a34:	39 fe                	cmp    esi,edi
c0014a36:	77 92                	ja     c00149ca <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f9>
c0014a38:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0014a3d:	48                   	dec    eax
c0014a3e:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0014a43:	75 01                	jne    c0014a46 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c0014a45:	fb                   	sti    
c0014a46:	83 ec 0c             	sub    esp,0xc
c0014a49:	53                   	push   ebx
c0014a4a:	e8 0c 4f ff ff       	call   c000995b <Virt::freeKernelVirtualPages(unsigned long)>
c0014a4f:	83 c4 10             	add    esp,0x10
c0014a52:	b0 01                	mov    al,0x1
c0014a54:	81 c4 2c 10 00 00    	add    esp,0x102c
c0014a5a:	5b                   	pop    ebx
c0014a5b:	5e                   	pop    esi
c0014a5c:	5f                   	pop    edi
c0014a5d:	5d                   	pop    ebp
c0014a5e:	c3                   	ret    

c0014a5f <Thr::loadProgramIntoMemory(Process*, char const*)>:
c0014a5f:	55                   	push   ebp
c0014a60:	57                   	push   edi
c0014a61:	56                   	push   esi
c0014a62:	53                   	push   ebx
c0014a63:	83 ec 48             	sub    esp,0x48
c0014a66:	68 14 01 00 00       	push   0x114
c0014a6b:	e8 76 30 ff ff       	call   c0007ae6 <malloc>
c0014a70:	83 c4 0c             	add    esp,0xc
c0014a73:	89 c6                	mov    esi,eax
c0014a75:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0014a79:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0014a7d:	50                   	push   eax
c0014a7e:	e8 f9 70 ff ff       	call   c000bb7c <File::File(char const*, Process*)>
c0014a83:	58                   	pop    eax
c0014a84:	5a                   	pop    edx
c0014a85:	6a 01                	push   0x1
c0014a87:	56                   	push   esi
c0014a88:	e8 0d 71 ff ff       	call   c000bb9a <File::open(FileOpenMode)>
c0014a8d:	83 c4 10             	add    esp,0x10
c0014a90:	85 c0                	test   eax,eax
c0014a92:	0f 85 43 01 00 00    	jne    c0014bdb <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0014a98:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0014aa0:	83 ec 0c             	sub    esp,0xc
c0014aa3:	6a 34                	push   0x34
c0014aa5:	e8 3c 30 ff ff       	call   c0007ae6 <malloc>
c0014aaa:	89 c3                	mov    ebx,eax
c0014aac:	58                   	pop    eax
c0014aad:	8b 06                	mov    eax,DWORD PTR [esi]
c0014aaf:	8d 7c 24 38          	lea    edi,[esp+0x38]
c0014ab3:	57                   	push   edi
c0014ab4:	53                   	push   ebx
c0014ab5:	6a 00                	push   0x0
c0014ab7:	6a 34                	push   0x34
c0014ab9:	56                   	push   esi
c0014aba:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014abd:	83 c4 20             	add    esp,0x20
c0014ac0:	85 c0                	test   eax,eax
c0014ac2:	0f 85 13 01 00 00    	jne    c0014bdb <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0014ac8:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c0014ace:	0f 85 07 01 00 00    	jne    c0014bdb <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0014ad4:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014ad7:	85 c0                	test   eax,eax
c0014ad9:	0f 84 fc 00 00 00    	je     c0014bdb <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0014adf:	31 d2                	xor    edx,edx
c0014ae1:	55                   	push   ebp
c0014ae2:	52                   	push   edx
c0014ae3:	50                   	push   eax
c0014ae4:	56                   	push   esi
c0014ae5:	e8 6e 71 ff ff       	call   c000bc58 <File::seek(unsigned long long)>
c0014aea:	83 c4 10             	add    esp,0x10
c0014aed:	85 c0                	test   eax,eax
c0014aef:	0f 85 e6 00 00 00    	jne    c0014bdb <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0014af5:	83 ec 0c             	sub    esp,0xc
c0014af8:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0014afb:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0014aff:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0014b03:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0014b07:	0f af c2             	imul   eax,edx
c0014b0a:	50                   	push   eax
c0014b0b:	e8 d6 2f ff ff       	call   c0007ae6 <malloc>
c0014b10:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0014b12:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0014b16:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014b19:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014b1d:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0014b21:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0014b25:	0f af c2             	imul   eax,edx
c0014b28:	99                   	cdq    
c0014b29:	52                   	push   edx
c0014b2a:	50                   	push   eax
c0014b2b:	56                   	push   esi
c0014b2c:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014b2f:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0014b32:	83 c4 20             	add    esp,0x20
c0014b35:	85 c0                	test   eax,eax
c0014b37:	0f 84 9e 00 00 00    	je     c0014bdb <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0014b3d:	31 d2                	xor    edx,edx
c0014b3f:	51                   	push   ecx
c0014b40:	52                   	push   edx
c0014b41:	50                   	push   eax
c0014b42:	56                   	push   esi
c0014b43:	e8 10 71 ff ff       	call   c000bc58 <File::seek(unsigned long long)>
c0014b48:	83 c4 10             	add    esp,0x10
c0014b4b:	85 c0                	test   eax,eax
c0014b4d:	0f 85 88 00 00 00    	jne    c0014bdb <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0014b53:	83 ec 0c             	sub    esp,0xc
c0014b56:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0014b5a:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0014b5e:	31 ed                	xor    ebp,ebp
c0014b60:	0f af c2             	imul   eax,edx
c0014b63:	50                   	push   eax
c0014b64:	e8 7d 2f ff ff       	call   c0007ae6 <malloc>
c0014b69:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0014b6b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014b6f:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014b72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014b76:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0014b7a:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0014b7e:	0f af c2             	imul   eax,edx
c0014b81:	99                   	cdq    
c0014b82:	52                   	push   edx
c0014b83:	50                   	push   eax
c0014b84:	56                   	push   esi
c0014b85:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014b88:	83 c4 20             	add    esp,0x20
c0014b8b:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014b93:	0f b7 fd             	movzx  edi,bp
c0014b96:	66 3b 6b 2c          	cmp    bp,WORD PTR [ebx+0x2c]
c0014b9a:	73 7d                	jae    c0014c19 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1ba>
c0014b9c:	c1 e7 05             	shl    edi,0x5
c0014b9f:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c0014ba3:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0014ba6:	75 6b                	jne    c0014c13 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b4>
c0014ba8:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0014bab:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014baf:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0014bb2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014bb6:	52                   	push   edx
c0014bb7:	31 d2                	xor    edx,edx
c0014bb9:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0014bbc:	52                   	push   edx
c0014bbd:	50                   	push   eax
c0014bbe:	56                   	push   esi
c0014bbf:	e8 94 70 ff ff       	call   c000bc58 <File::seek(unsigned long long)>
c0014bc4:	83 c4 10             	add    esp,0x10
c0014bc7:	85 c0                	test   eax,eax
c0014bc9:	74 17                	je     c0014be2 <Thr::loadProgramIntoMemory(Process*, char const*)+0x183>
c0014bcb:	83 ec 0c             	sub    esp,0xc
c0014bce:	68 09 29 02 c0       	push   0xc0022909
c0014bd3:	e8 9d 5d ff ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c0014bd8:	83 c4 10             	add    esp,0x10
c0014bdb:	31 c0                	xor    eax,eax
c0014bdd:	e9 87 00 00 00       	jmp    c0014c69 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20a>
c0014be2:	83 ec 0c             	sub    esp,0xc
c0014be5:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0014be8:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c0014beb:	50                   	push   eax
c0014bec:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0014bf0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014bf4:	56                   	push   esi
c0014bf5:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0014bf9:	e8 d3 fb ff ff       	call   c00147d1 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0014bfe:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0014c02:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c0014c06:	83 c4 20             	add    esp,0x20
c0014c09:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0014c0d:	73 04                	jae    c0014c13 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b4>
c0014c0f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014c13:	45                   	inc    ebp
c0014c14:	e9 7a ff ff ff       	jmp    c0014b93 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0014c19:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0014c1d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0014c21:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014c25:	89 91 0e 05 00 00    	mov    DWORD PTR [ecx+0x50e],edx
c0014c2b:	83 ec 0c             	sub    esp,0xc
c0014c2e:	8b 91 12 05 00 00    	mov    edx,DWORD PTR [ecx+0x512]
c0014c34:	25 00 f0 ff ff       	and    eax,0xfffff000
c0014c39:	05 00 10 00 00       	add    eax,0x1000
c0014c3e:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0014c41:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014c45:	e8 ac 2e ff ff       	call   c0007af6 <free>
c0014c4a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014c4d:	e8 a4 2e ff ff       	call   c0007af6 <free>
c0014c52:	58                   	pop    eax
c0014c53:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014c57:	e8 9a 2e ff ff       	call   c0007af6 <free>
c0014c5c:	89 34 24             	mov    DWORD PTR [esp],esi
c0014c5f:	e8 94 6f ff ff       	call   c000bbf8 <File::close()>
c0014c64:	83 c4 10             	add    esp,0x10
c0014c67:	b0 01                	mov    al,0x1
c0014c69:	83 c4 3c             	add    esp,0x3c
c0014c6c:	5b                   	pop    ebx
c0014c6d:	5e                   	pop    esi
c0014c6e:	5f                   	pop    edi
c0014c6f:	5d                   	pop    ebp
c0014c70:	c3                   	ret    

c0014c71 <Thr::runtimeReferenceHelper()>:
c0014c71:	83 ec 18             	sub    esp,0x18
c0014c74:	68 11 29 02 c0       	push   0xc0022911
c0014c79:	e8 f7 5c ff ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c0014c7e:	fa                   	cli    
c0014c7f:	83 c4 10             	add    esp,0x10
c0014c82:	eb fe                	jmp    c0014c82 <Thr::runtimeReferenceHelper()+0x11>

c0014c84 <Thr::getAddressOfKernelSymbol(char const*)>:
c0014c84:	57                   	push   edi
c0014c85:	56                   	push   esi
c0014c86:	53                   	push   ebx
c0014c87:	31 db                	xor    ebx,ebx
c0014c89:	39 1d a0 c6 02 c0    	cmp    DWORD PTR ds:0xc002c6a0,ebx
c0014c8f:	7e 3c                	jle    c0014ccd <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0014c91:	8b 34 9d 20 c6 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd39e0]
c0014c98:	31 ff                	xor    edi,edi
c0014c9a:	39 3c 9d 20 c5 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd3ae0],edi
c0014ca1:	7e 27                	jle    c0014cca <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0014ca3:	50                   	push   eax
c0014ca4:	50                   	push   eax
c0014ca5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014ca9:	8b 06                	mov    eax,DWORD PTR [esi]
c0014cab:	03 04 9d a0 c5 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd3a60]
c0014cb2:	50                   	push   eax
c0014cb3:	e8 98 ba fe ff       	call   c0000750 <strcmp>
c0014cb8:	83 c4 10             	add    esp,0x10
c0014cbb:	85 c0                	test   eax,eax
c0014cbd:	75 05                	jne    c0014cc4 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0014cbf:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0014cc2:	eb 0b                	jmp    c0014ccf <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0014cc4:	83 c6 10             	add    esi,0x10
c0014cc7:	47                   	inc    edi
c0014cc8:	eb d0                	jmp    c0014c9a <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0014cca:	43                   	inc    ebx
c0014ccb:	eb bc                	jmp    c0014c89 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0014ccd:	31 c0                	xor    eax,eax
c0014ccf:	5b                   	pop    ebx
c0014cd0:	5e                   	pop    esi
c0014cd1:	5f                   	pop    edi
c0014cd2:	c3                   	ret    

c0014cd3 <Thr::loadKernelSymbolTable(char const*)>:
c0014cd3:	55                   	push   ebp
c0014cd4:	57                   	push   edi
c0014cd5:	56                   	push   esi
c0014cd6:	53                   	push   ebx
c0014cd7:	83 ec 68             	sub    esp,0x68
c0014cda:	8b 35 f0 c6 02 c0    	mov    esi,DWORD PTR ds:0xc002c6f0
c0014ce0:	68 14 01 00 00       	push   0x114
c0014ce5:	e8 fc 2d ff ff       	call   c0007ae6 <malloc>
c0014cea:	83 c4 0c             	add    esp,0xc
c0014ced:	89 c3                	mov    ebx,eax
c0014cef:	56                   	push   esi
c0014cf0:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0014cf4:	50                   	push   eax
c0014cf5:	e8 82 6e ff ff       	call   c000bb7c <File::File(char const*, Process*)>
c0014cfa:	5e                   	pop    esi
c0014cfb:	5f                   	pop    edi
c0014cfc:	6a 01                	push   0x1
c0014cfe:	53                   	push   ebx
c0014cff:	e8 96 6e ff ff       	call   c000bb9a <File::open(FileOpenMode)>
c0014d04:	83 c4 10             	add    esp,0x10
c0014d07:	85 c0                	test   eax,eax
c0014d09:	74 0a                	je     c0014d15 <Thr::loadKernelSymbolTable(char const*)+0x42>
c0014d0b:	83 ec 0c             	sub    esp,0xc
c0014d0e:	68 33 29 02 c0       	push   0xc0022933
c0014d13:	eb 34                	jmp    c0014d49 <Thr::loadKernelSymbolTable(char const*)+0x76>
c0014d15:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0014d1d:	83 ec 0c             	sub    esp,0xc
c0014d20:	6a 34                	push   0x34
c0014d22:	e8 bf 2d ff ff       	call   c0007ae6 <malloc>
c0014d27:	59                   	pop    ecx
c0014d28:	89 c7                	mov    edi,eax
c0014d2a:	8d 74 24 34          	lea    esi,[esp+0x34]
c0014d2e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014d30:	56                   	push   esi
c0014d31:	57                   	push   edi
c0014d32:	6a 00                	push   0x0
c0014d34:	6a 34                	push   0x34
c0014d36:	53                   	push   ebx
c0014d37:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014d3a:	83 c4 20             	add    esp,0x20
c0014d3d:	85 c0                	test   eax,eax
c0014d3f:	74 17                	je     c0014d58 <Thr::loadKernelSymbolTable(char const*)+0x85>
c0014d41:	83 ec 0c             	sub    esp,0xc
c0014d44:	68 4a 29 02 c0       	push   0xc002294a
c0014d49:	e8 79 c9 ff ff       	call   c00116c7 <KePanic(char const*)>
c0014d4e:	83 c4 10             	add    esp,0x10
c0014d51:	31 c0                	xor    eax,eax
c0014d53:	e9 31 02 00 00       	jmp    c0014f89 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0014d58:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0014d5e:	75 e1                	jne    c0014d41 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0014d60:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0014d63:	85 c0                	test   eax,eax
c0014d65:	74 da                	je     c0014d41 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0014d67:	52                   	push   edx
c0014d68:	31 d2                	xor    edx,edx
c0014d6a:	52                   	push   edx
c0014d6b:	50                   	push   eax
c0014d6c:	53                   	push   ebx
c0014d6d:	e8 e6 6e ff ff       	call   c000bc58 <File::seek(unsigned long long)>
c0014d72:	83 c4 10             	add    esp,0x10
c0014d75:	85 c0                	test   eax,eax
c0014d77:	75 c8                	jne    c0014d41 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0014d79:	83 ec 0c             	sub    esp,0xc
c0014d7c:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0014d80:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014d84:	31 ed                	xor    ebp,ebp
c0014d86:	0f af c2             	imul   eax,edx
c0014d89:	50                   	push   eax
c0014d8a:	e8 57 2d ff ff       	call   c0007ae6 <malloc>
c0014d8f:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014d91:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014d95:	89 34 24             	mov    DWORD PTR [esp],esi
c0014d98:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014d9c:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0014da0:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014da4:	0f af c2             	imul   eax,edx
c0014da7:	99                   	cdq    
c0014da8:	52                   	push   edx
c0014da9:	50                   	push   eax
c0014daa:	53                   	push   ebx
c0014dab:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014dae:	83 c4 20             	add    esp,0x20
c0014db1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0014db9:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0014dc1:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0014dc9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014dd1:	0f b7 f5             	movzx  esi,bp
c0014dd4:	66 3b 6f 30          	cmp    bp,WORD PTR [edi+0x30]
c0014dd8:	0f 83 a7 00 00 00    	jae    c0014e85 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c0014dde:	6b f6 28             	imul   esi,esi,0x28
c0014de1:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0014de5:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0014de8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014dec:	50                   	push   eax
c0014ded:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014df1:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0014df5:	8b 16                	mov    edx,DWORD PTR [esi]
c0014df7:	6b c0 28             	imul   eax,eax,0x28
c0014dfa:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0014dfe:	89 d0                	mov    eax,edx
c0014e00:	31 d2                	xor    edx,edx
c0014e02:	52                   	push   edx
c0014e03:	50                   	push   eax
c0014e04:	53                   	push   ebx
c0014e05:	e8 4e 6e ff ff       	call   c000bc58 <File::seek(unsigned long long)>
c0014e0a:	83 c4 0c             	add    esp,0xc
c0014e0d:	6a 20                	push   0x20
c0014e0f:	6a 00                	push   0x0
c0014e11:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0014e15:	52                   	push   edx
c0014e16:	e8 d5 b6 fe ff       	call   c00004f0 <memset>
c0014e1b:	58                   	pop    eax
c0014e1c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014e1e:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0014e22:	51                   	push   ecx
c0014e23:	8d 54 24 40          	lea    edx,[esp+0x40]
c0014e27:	52                   	push   edx
c0014e28:	6a 00                	push   0x0
c0014e2a:	6a 1f                	push   0x1f
c0014e2c:	53                   	push   ebx
c0014e2d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014e30:	83 c4 18             	add    esp,0x18
c0014e33:	68 61 29 02 c0       	push   0xc0022961
c0014e38:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0014e3c:	52                   	push   edx
c0014e3d:	e8 0e b9 fe ff       	call   c0000750 <strcmp>
c0014e42:	83 c4 10             	add    esp,0x10
c0014e45:	85 c0                	test   eax,eax
c0014e47:	75 0f                	jne    c0014e58 <Thr::loadKernelSymbolTable(char const*)+0x185>
c0014e49:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014e4c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014e50:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014e54:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014e58:	50                   	push   eax
c0014e59:	50                   	push   eax
c0014e5a:	68 69 29 02 c0       	push   0xc0022969
c0014e5f:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0014e63:	50                   	push   eax
c0014e64:	e8 e7 b8 fe ff       	call   c0000750 <strcmp>
c0014e69:	83 c4 10             	add    esp,0x10
c0014e6c:	85 c0                	test   eax,eax
c0014e6e:	75 0f                	jne    c0014e7f <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c0014e70:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014e73:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014e77:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014e7b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014e7f:	45                   	inc    ebp
c0014e80:	e9 4c ff ff ff       	jmp    c0014dd1 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c0014e85:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0014e8a:	75 10                	jne    c0014e9c <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c0014e8c:	83 ec 0c             	sub    esp,0xc
c0014e8f:	68 71 29 02 c0       	push   0xc0022971
c0014e94:	e8 2e c8 ff ff       	call   c00116c7 <KePanic(char const*)>
c0014e99:	83 c4 10             	add    esp,0x10
c0014e9c:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0014ea1:	75 10                	jne    c0014eb3 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c0014ea3:	83 ec 0c             	sub    esp,0xc
c0014ea6:	68 71 29 02 c0       	push   0xc0022971
c0014eab:	e8 17 c8 ff ff       	call   c00116c7 <KePanic(char const*)>
c0014eb0:	83 c4 10             	add    esp,0x10
c0014eb3:	31 d2                	xor    edx,edx
c0014eb5:	50                   	push   eax
c0014eb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014eba:	52                   	push   edx
c0014ebb:	50                   	push   eax
c0014ebc:	53                   	push   ebx
c0014ebd:	e8 96 6d ff ff       	call   c000bc58 <File::seek(unsigned long long)>
c0014ec2:	5a                   	pop    edx
c0014ec3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014ec7:	e8 1a 2c ff ff       	call   c0007ae6 <malloc>
c0014ecc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014ed0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014ed4:	31 c9                	xor    ecx,ecx
c0014ed6:	5e                   	pop    esi
c0014ed7:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014ed9:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0014edd:	55                   	push   ebp
c0014ede:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014ee2:	51                   	push   ecx
c0014ee3:	52                   	push   edx
c0014ee4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0014ee8:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0014eec:	53                   	push   ebx
c0014eed:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014ef0:	83 c4 14             	add    esp,0x14
c0014ef3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014ef7:	e8 ea 2b ff ff       	call   c0007ae6 <malloc>
c0014efc:	89 c6                	mov    esi,eax
c0014efe:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014f00:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014f03:	56                   	push   esi
c0014f04:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0014f08:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0014f0c:	51                   	push   ecx
c0014f0d:	52                   	push   edx
c0014f0e:	53                   	push   ebx
c0014f0f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014f12:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014f16:	8b 15 a0 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6a0
c0014f1c:	83 c4 1c             	add    esp,0x1c
c0014f1f:	c1 e8 04             	shr    eax,0x4
c0014f22:	89 04 95 20 c5 02 c0 	mov    DWORD PTR [edx*4-0x3ffd3ae0],eax
c0014f29:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014f2d:	31 d2                	xor    edx,edx
c0014f2f:	52                   	push   edx
c0014f30:	50                   	push   eax
c0014f31:	53                   	push   ebx
c0014f32:	e8 21 6d ff ff       	call   c000bc58 <File::seek(unsigned long long)>
c0014f37:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014f39:	31 d2                	xor    edx,edx
c0014f3b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014f3e:	56                   	push   esi
c0014f3f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014f43:	52                   	push   edx
c0014f44:	50                   	push   eax
c0014f45:	53                   	push   ebx
c0014f46:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014f49:	83 c4 14             	add    esp,0x14
c0014f4c:	53                   	push   ebx
c0014f4d:	e8 a6 6c ff ff       	call   c000bbf8 <File::close()>
c0014f52:	5d                   	pop    ebp
c0014f53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014f57:	e8 9a 2b ff ff       	call   c0007af6 <free>
c0014f5c:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014f5f:	e8 92 2b ff ff       	call   c0007af6 <free>
c0014f64:	a1 a0 c6 02 c0       	mov    eax,ds:0xc002c6a0
c0014f69:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0014f6d:	8d 50 01             	lea    edx,[eax+0x1]
c0014f70:	89 0c 85 20 c6 02 c0 	mov    DWORD PTR [eax*4-0x3ffd39e0],ecx
c0014f77:	89 34 85 a0 c5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3a60],esi
c0014f7e:	89 15 a0 c6 02 c0    	mov    DWORD PTR ds:0xc002c6a0,edx
c0014f84:	83 c4 10             	add    esp,0x10
c0014f87:	b0 01                	mov    al,0x1
c0014f89:	83 c4 5c             	add    esp,0x5c
c0014f8c:	5b                   	pop    ebx
c0014f8d:	5e                   	pop    esi
c0014f8e:	5f                   	pop    edi
c0014f8f:	5d                   	pop    ebp
c0014f90:	c3                   	ret    

c0014f91 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0014f91:	55                   	push   ebp
c0014f92:	57                   	push   edi
c0014f93:	56                   	push   esi
c0014f94:	53                   	push   ebx
c0014f95:	81 ec 68 03 00 00    	sub    esp,0x368
c0014f9b:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0014fa2:	8b 1d f0 c6 02 c0    	mov    ebx,DWORD PTR ds:0xc002c6f0
c0014fa8:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0014fac:	68 14 01 00 00       	push   0x114
c0014fb1:	e8 30 2b ff ff       	call   c0007ae6 <malloc>
c0014fb6:	83 c4 0c             	add    esp,0xc
c0014fb9:	89 c5                	mov    ebp,eax
c0014fbb:	53                   	push   ebx
c0014fbc:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0014fc3:	50                   	push   eax
c0014fc4:	e8 b3 6b ff ff       	call   c000bb7c <File::File(char const*, Process*)>
c0014fc9:	5e                   	pop    esi
c0014fca:	5f                   	pop    edi
c0014fcb:	6a 01                	push   0x1
c0014fcd:	55                   	push   ebp
c0014fce:	e8 c7 6b ff ff       	call   c000bb9a <File::open(FileOpenMode)>
c0014fd3:	83 c4 10             	add    esp,0x10
c0014fd6:	85 c0                	test   eax,eax
c0014fd8:	0f 85 aa 06 00 00    	jne    c0015688 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014fde:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0014fe6:	83 ec 0c             	sub    esp,0xc
c0014fe9:	6a 34                	push   0x34
c0014feb:	e8 f6 2a ff ff       	call   c0007ae6 <malloc>
c0014ff0:	5b                   	pop    ebx
c0014ff1:	89 c7                	mov    edi,eax
c0014ff3:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0014ff7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014ffa:	53                   	push   ebx
c0014ffb:	57                   	push   edi
c0014ffc:	6a 00                	push   0x0
c0014ffe:	6a 34                	push   0x34
c0015000:	55                   	push   ebp
c0015001:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015004:	83 c4 20             	add    esp,0x20
c0015007:	85 c0                	test   eax,eax
c0015009:	0f 85 79 06 00 00    	jne    c0015688 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c001500f:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0015015:	0f 85 6d 06 00 00    	jne    c0015688 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c001501b:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001501e:	85 c0                	test   eax,eax
c0015020:	0f 84 62 06 00 00    	je     c0015688 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0015026:	31 d2                	xor    edx,edx
c0015028:	51                   	push   ecx
c0015029:	52                   	push   edx
c001502a:	50                   	push   eax
c001502b:	55                   	push   ebp
c001502c:	e8 27 6c ff ff       	call   c000bc58 <File::seek(unsigned long long)>
c0015031:	83 c4 10             	add    esp,0x10
c0015034:	85 c0                	test   eax,eax
c0015036:	0f 85 4c 06 00 00    	jne    c0015688 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c001503c:	83 ec 0c             	sub    esp,0xc
c001503f:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c0015042:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0015046:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001504a:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001504e:	0f af c2             	imul   eax,edx
c0015051:	50                   	push   eax
c0015052:	e8 8f 2a ff ff       	call   c0007ae6 <malloc>
c0015057:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001505a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001505e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015061:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015065:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0015069:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001506d:	0f af c2             	imul   eax,edx
c0015070:	99                   	cdq    
c0015071:	52                   	push   edx
c0015072:	50                   	push   eax
c0015073:	55                   	push   ebp
c0015074:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015077:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001507a:	83 c4 20             	add    esp,0x20
c001507d:	85 c0                	test   eax,eax
c001507f:	0f 84 03 06 00 00    	je     c0015688 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0015085:	52                   	push   edx
c0015086:	31 d2                	xor    edx,edx
c0015088:	52                   	push   edx
c0015089:	50                   	push   eax
c001508a:	55                   	push   ebp
c001508b:	e8 c8 6b ff ff       	call   c000bc58 <File::seek(unsigned long long)>
c0015090:	83 c4 10             	add    esp,0x10
c0015093:	85 c0                	test   eax,eax
c0015095:	0f 85 ed 05 00 00    	jne    c0015688 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c001509b:	83 ec 0c             	sub    esp,0xc
c001509e:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c00150a2:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c00150a6:	31 f6                	xor    esi,esi
c00150a8:	0f af c2             	imul   eax,edx
c00150ab:	50                   	push   eax
c00150ac:	e8 35 2a ff ff       	call   c0007ae6 <malloc>
c00150b1:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00150b4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00150b8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00150bb:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00150bf:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c00150c3:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c00150c7:	0f af c2             	imul   eax,edx
c00150ca:	99                   	cdq    
c00150cb:	52                   	push   edx
c00150cc:	50                   	push   eax
c00150cd:	55                   	push   ebp
c00150ce:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00150d1:	83 c4 20             	add    esp,0x20
c00150d4:	0f b7 de             	movzx  ebx,si
c00150d7:	66 3b 77 2c          	cmp    si,WORD PTR [edi+0x2c]
c00150db:	0f 83 87 00 00 00    	jae    c0015168 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c00150e1:	c1 e3 05             	shl    ebx,0x5
c00150e4:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c00150e8:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c00150eb:	75 75                	jne    c0015162 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c00150ed:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00150f0:	31 d2                	xor    edx,edx
c00150f2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00150f6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00150f9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00150fd:	50                   	push   eax
c00150fe:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0015101:	52                   	push   edx
c0015102:	50                   	push   eax
c0015103:	55                   	push   ebp
c0015104:	e8 4f 6b ff ff       	call   c000bc58 <File::seek(unsigned long long)>
c0015109:	83 c4 10             	add    esp,0x10
c001510c:	85 c0                	test   eax,eax
c001510e:	0f 85 74 05 00 00    	jne    c0015688 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0015114:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001511b:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001511e:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0015122:	31 d2                	xor    edx,edx
c0015124:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0015128:	83 ec 0c             	sub    esp,0xc
c001512b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001512f:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0015136:	50                   	push   eax
c0015137:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001513b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001513f:	52                   	push   edx
c0015140:	50                   	push   eax
c0015141:	55                   	push   ebp
c0015142:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015145:	83 c4 1c             	add    esp,0x1c
c0015148:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001514b:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001514e:	50                   	push   eax
c001514f:	6a 00                	push   0x0
c0015151:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015155:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0015159:	50                   	push   eax
c001515a:	e8 91 b3 fe ff       	call   c00004f0 <memset>
c001515f:	83 c4 10             	add    esp,0x10
c0015162:	46                   	inc    esi
c0015163:	e9 6c ff ff ff       	jmp    c00150d4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c0015168:	53                   	push   ebx
c0015169:	31 db                	xor    ebx,ebx
c001516b:	68 00 01 00 00       	push   0x100
c0015170:	6a 00                	push   0x0
c0015172:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0015176:	50                   	push   eax
c0015177:	e8 74 b3 fe ff       	call   c00004f0 <memset>
c001517c:	83 c4 0c             	add    esp,0xc
c001517f:	68 00 01 00 00       	push   0x100
c0015184:	6a 00                	push   0x0
c0015186:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001518d:	50                   	push   eax
c001518e:	e8 5d b3 fe ff       	call   c00004f0 <memset>
c0015193:	83 c4 10             	add    esp,0x10
c0015196:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001519e:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00151a6:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00151ae:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00151b6:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00151be:	0f b7 f3             	movzx  esi,bx
c00151c1:	66 3b 5f 30          	cmp    bx,WORD PTR [edi+0x30]
c00151c5:	0f 83 2d 01 00 00    	jae    c00152f8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c00151cb:	6b f6 28             	imul   esi,esi,0x28
c00151ce:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c00151d2:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00151d5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00151d9:	52                   	push   edx
c00151da:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00151de:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c00151e2:	8b 06                	mov    eax,DWORD PTR [esi]
c00151e4:	6b d2 28             	imul   edx,edx,0x28
c00151e7:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c00151eb:	31 d2                	xor    edx,edx
c00151ed:	52                   	push   edx
c00151ee:	50                   	push   eax
c00151ef:	55                   	push   ebp
c00151f0:	e8 63 6a ff ff       	call   c000bc58 <File::seek(unsigned long long)>
c00151f5:	83 c4 0c             	add    esp,0xc
c00151f8:	6a 20                	push   0x20
c00151fa:	6a 00                	push   0x0
c00151fc:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0015203:	51                   	push   ecx
c0015204:	e8 e7 b2 fe ff       	call   c00004f0 <memset>
c0015209:	59                   	pop    ecx
c001520a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001520d:	8d 54 24 58          	lea    edx,[esp+0x58]
c0015211:	52                   	push   edx
c0015212:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0015219:	51                   	push   ecx
c001521a:	6a 00                	push   0x0
c001521c:	6a 1f                	push   0x1f
c001521e:	55                   	push   ebp
c001521f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015222:	83 c4 1c             	add    esp,0x1c
c0015225:	6a 09                	push   0x9
c0015227:	68 8b 29 02 c0       	push   0xc002298b
c001522c:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0015233:	51                   	push   ecx
c0015234:	e8 47 b1 fe ff       	call   c0000380 <memcmp>
c0015239:	83 c4 10             	add    esp,0x10
c001523c:	85 c0                	test   eax,eax
c001523e:	75 21                	jne    c0015261 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c0015240:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015244:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015248:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001524c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015250:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0015253:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001525a:	89 d0                	mov    eax,edx
c001525c:	40                   	inc    eax
c001525d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015261:	50                   	push   eax
c0015262:	6a 09                	push   0x9
c0015264:	68 95 29 02 c0       	push   0xc0022995
c0015269:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0015270:	50                   	push   eax
c0015271:	e8 0a b1 fe ff       	call   c0000380 <memcmp>
c0015276:	83 c4 10             	add    esp,0x10
c0015279:	85 c0                	test   eax,eax
c001527b:	75 21                	jne    c001529e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001527d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015281:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015285:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015289:	89 4c 84 50          	mov    DWORD PTR [esp+eax*4+0x50],ecx
c001528d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0015290:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0015297:	89 d0                	mov    eax,edx
c0015299:	40                   	inc    eax
c001529a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001529e:	50                   	push   eax
c001529f:	50                   	push   eax
c00152a0:	68 61 29 02 c0       	push   0xc0022961
c00152a5:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00152ac:	50                   	push   eax
c00152ad:	e8 9e b4 fe ff       	call   c0000750 <strcmp>
c00152b2:	83 c4 10             	add    esp,0x10
c00152b5:	85 c0                	test   eax,eax
c00152b7:	75 0f                	jne    c00152c8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c00152b9:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00152bc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00152c0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00152c4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00152c8:	50                   	push   eax
c00152c9:	50                   	push   eax
c00152ca:	68 69 29 02 c0       	push   0xc0022969
c00152cf:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00152d6:	50                   	push   eax
c00152d7:	e8 74 b4 fe ff       	call   c0000750 <strcmp>
c00152dc:	83 c4 10             	add    esp,0x10
c00152df:	85 c0                	test   eax,eax
c00152e1:	75 0f                	jne    c00152f2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c00152e3:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00152e6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00152ea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00152ee:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00152f2:	43                   	inc    ebx
c00152f3:	e9 c6 fe ff ff       	jmp    c00151be <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c00152f8:	31 d2                	xor    edx,edx
c00152fa:	50                   	push   eax
c00152fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00152ff:	52                   	push   edx
c0015300:	50                   	push   eax
c0015301:	55                   	push   ebp
c0015302:	e8 51 69 ff ff       	call   c000bc58 <File::seek(unsigned long long)>
c0015307:	58                   	pop    eax
c0015308:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001530c:	e8 d5 27 ff ff       	call   c0007ae6 <malloc>
c0015311:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0015314:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0015318:	31 d2                	xor    edx,edx
c001531a:	58                   	pop    eax
c001531b:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001531f:	53                   	push   ebx
c0015320:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0015324:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015328:	52                   	push   edx
c0015329:	50                   	push   eax
c001532a:	55                   	push   ebp
c001532b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001532e:	83 c4 14             	add    esp,0x14
c0015331:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0015335:	e8 ac 27 ff ff       	call   c0007ae6 <malloc>
c001533a:	31 d2                	xor    edx,edx
c001533c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0015340:	83 c4 0c             	add    esp,0xc
c0015343:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0015347:	52                   	push   edx
c0015348:	50                   	push   eax
c0015349:	55                   	push   ebp
c001534a:	e8 09 69 ff ff       	call   c000bc58 <File::seek(unsigned long long)>
c001534f:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0015352:	31 d2                	xor    edx,edx
c0015354:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015357:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001535b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001535f:	52                   	push   edx
c0015360:	50                   	push   eax
c0015361:	55                   	push   ebp
c0015362:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015365:	83 c4 20             	add    esp,0x20
c0015368:	0f b6 44 24 3b       	movzx  eax,BYTE PTR [esp+0x3b]
c001536d:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0015375:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0015379:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001537d:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c0015381:	0f 84 05 03 00 00    	je     c001568c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6fb>
c0015387:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c001538e:	31 d2                	xor    edx,edx
c0015390:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015394:	c1 e8 03             	shr    eax,0x3
c0015397:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001539b:	51                   	push   ecx
c001539c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00153a0:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c00153a4:	52                   	push   edx
c00153a5:	50                   	push   eax
c00153a6:	55                   	push   ebp
c00153a7:	e8 ac 68 ff ff       	call   c000bc58 <File::seek(unsigned long long)>
c00153ac:	5b                   	pop    ebx
c00153ad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00153b1:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c00153b8:	e8 29 27 ff ff       	call   c0007ae6 <malloc>
c00153bd:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00153c0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00153c4:	31 d2                	xor    edx,edx
c00153c6:	5e                   	pop    esi
c00153c7:	8d 44 24 58          	lea    eax,[esp+0x58]
c00153cb:	50                   	push   eax
c00153cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00153d0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00153d4:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c00153db:	52                   	push   edx
c00153dc:	50                   	push   eax
c00153dd:	55                   	push   ebp
c00153de:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00153e1:	83 c4 20             	add    esp,0x20
c00153e4:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00153ec:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00153f0:	39 5c 24 20          	cmp    DWORD PTR [esp+0x20],ebx
c00153f4:	0f 8d 76 02 00 00    	jge    c0015670 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6df>
c00153fa:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00153fe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015402:	c6 44 24 3a 00       	mov    BYTE PTR [esp+0x3a],0x0
c0015407:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c001540a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001540e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015412:	8b 44 c8 04          	mov    eax,DWORD PTR [eax+ecx*8+0x4]
c0015416:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001541a:	c1 e8 08             	shr    eax,0x8
c001541d:	89 c6                	mov    esi,eax
c001541f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0015423:	c1 e6 04             	shl    esi,0x4
c0015426:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c001542a:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c001542d:	85 db                	test   ebx,ebx
c001542f:	0f 85 b3 00 00 00    	jne    c00154e8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c0015435:	83 ec 0c             	sub    esp,0xc
c0015438:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001543c:	03 06                	add    eax,DWORD PTR [esi]
c001543e:	50                   	push   eax
c001543f:	e8 40 f8 ff ff       	call   c0014c84 <Thr::getAddressOfKernelSymbol(char const*)>
c0015444:	83 c4 10             	add    esp,0x10
c0015447:	89 c3                	mov    ebx,eax
c0015449:	c6 44 24 3a 01       	mov    BYTE PTR [esp+0x3a],0x1
c001544e:	85 c0                	test   eax,eax
c0015450:	0f 85 92 00 00 00    	jne    c00154e8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c0015456:	83 ec 0c             	sub    esp,0xc
c0015459:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001545d:	03 06                	add    eax,DWORD PTR [esi]
c001545f:	50                   	push   eax
c0015460:	e8 4f c4 ff ff       	call   c00118b4 <KeResolveCompatibilitySymbol(char*)>
c0015465:	83 c4 10             	add    esp,0x10
c0015468:	89 c3                	mov    ebx,eax
c001546a:	85 c0                	test   eax,eax
c001546c:	75 7a                	jne    c00154e8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c001546e:	51                   	push   ecx
c001546f:	51                   	push   ecx
c0015470:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0015474:	03 06                	add    eax,DWORD PTR [esi]
c0015476:	50                   	push   eax
c0015477:	68 9f 29 02 c0       	push   0xc002299f
c001547c:	e8 f4 54 ff ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c0015481:	58                   	pop    eax
c0015482:	5a                   	pop    edx
c0015483:	68 b9 29 02 c0       	push   0xc00229b9
c0015488:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001548f:	50                   	push   eax
c0015490:	e8 ab b1 fe ff       	call   c0000640 <strcpy>
c0015495:	59                   	pop    ecx
c0015496:	58                   	pop    eax
c0015497:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001549b:	03 06                	add    eax,DWORD PTR [esi]
c001549d:	50                   	push   eax
c001549e:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00154a5:	50                   	push   eax
c00154a6:	e8 95 b3 fe ff       	call   c0000840 <strcat>
c00154ab:	58                   	pop    eax
c00154ac:	5a                   	pop    edx
c00154ad:	68 4f 2a 02 c0       	push   0xc0022a4f
c00154b2:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00154b9:	50                   	push   eax
c00154ba:	e8 81 b3 fe ff       	call   c0000840 <strcat>
c00154bf:	83 c4 10             	add    esp,0x10
c00154c2:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00154c7:	0f 84 5d 01 00 00    	je     c001562a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c00154cd:	83 ec 0c             	sub    esp,0xc
c00154d0:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00154d7:	50                   	push   eax
c00154d8:	e8 ea c1 ff ff       	call   c00116c7 <KePanic(char const*)>
c00154dd:	83 c4 10             	add    esp,0x10
c00154e0:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c00154e4:	88 44 24 3a          	mov    BYTE PTR [esp+0x3a],al
c00154e8:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c00154ed:	83 f8 01             	cmp    eax,0x1
c00154f0:	0f 85 8f 00 00 00    	jne    c0015585 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5f4>
c00154f6:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c00154fd:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0015501:	2b 4c 24 24          	sub    ecx,DWORD PTR [esp+0x24]
c0015505:	01 ce                	add    esi,ecx
c0015507:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c001550f:	0f 94 c0             	sete   al
c0015512:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c001551a:	0f 94 c2             	sete   dl
c001551d:	09 c2                	or     edx,eax
c001551f:	8b 06                	mov    eax,DWORD PTR [esi]
c0015521:	80 7c 24 3a 00       	cmp    BYTE PTR [esp+0x3a],0x0
c0015526:	0f b6 d2             	movzx  edx,dl
c0015529:	74 41                	je     c001556c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5db>
c001552b:	8d 0c 03             	lea    ecx,[ebx+eax*1]
c001552e:	85 d2                	test   edx,edx
c0015530:	75 15                	jne    c0015547 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b6>
c0015532:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0015536:	66 83 f8 0c          	cmp    ax,0xc
c001553a:	76 05                	jbe    c0015541 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b0>
c001553c:	b8 0c 00 00 00       	mov    eax,0xc
c0015541:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0015545:	76 37                	jbe    c001557e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c0015547:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c001554b:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0015550:	0f 84 d4 00 00 00    	je     c001562a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c0015556:	83 ec 0c             	sub    esp,0xc
c0015559:	68 d0 29 02 c0       	push   0xc00229d0
c001555e:	e8 64 c1 ff ff       	call   c00116c7 <KePanic(char const*)>
c0015563:	83 c4 10             	add    esp,0x10
c0015566:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001556a:	eb 12                	jmp    c001557e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c001556c:	01 c1                	add    ecx,eax
c001556e:	85 d2                	test   edx,edx
c0015570:	75 0c                	jne    c001557e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c0015572:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0015576:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c001557a:	77 02                	ja     c001557e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c001557c:	01 d9                	add    ecx,ebx
c001557e:	89 0e                	mov    DWORD PTR [esi],ecx
c0015580:	e9 e2 00 00 00       	jmp    c0015667 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c0015585:	83 f8 02             	cmp    eax,0x2
c0015588:	75 77                	jne    c0015601 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x670>
c001558a:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c0015591:	2b 74 24 24          	sub    esi,DWORD PTR [esp+0x24]
c0015595:	03 74 24 28          	add    esi,DWORD PTR [esp+0x28]
c0015599:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c00155a1:	74 21                	je     c00155c4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x633>
c00155a3:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c00155ab:	74 17                	je     c00155c4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x633>
c00155ad:	0f b7 57 30          	movzx  edx,WORD PTR [edi+0x30]
c00155b1:	b8 0a 00 00 00       	mov    eax,0xa
c00155b6:	83 fa 0e             	cmp    edx,0xe
c00155b9:	77 03                	ja     c00155be <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x62d>
c00155bb:	8d 42 fc             	lea    eax,[edx-0x4]
c00155be:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c00155c2:	76 17                	jbe    c00155db <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x64a>
c00155c4:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00155c9:	74 5f                	je     c001562a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c00155cb:	83 ec 0c             	sub    esp,0xc
c00155ce:	68 ec 29 02 c0       	push   0xc00229ec
c00155d3:	e8 ef c0 ff ff       	call   c00116c7 <KePanic(char const*)>
c00155d8:	83 c4 10             	add    esp,0x10
c00155db:	8b 06                	mov    eax,DWORD PTR [esi]
c00155dd:	80 7c 24 3a 00       	cmp    BYTE PTR [esp+0x3a],0x0
c00155e2:	74 13                	je     c00155f7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x666>
c00155e4:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00155e8:	2b 94 24 74 03 00 00 	sub    edx,DWORD PTR [esp+0x374]
c00155ef:	2b 54 24 28          	sub    edx,DWORD PTR [esp+0x28]
c00155f3:	01 d0                	add    eax,edx
c00155f5:	eb 04                	jmp    c00155fb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c00155f7:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c00155fb:	01 c3                	add    ebx,eax
c00155fd:	89 1e                	mov    DWORD PTR [esi],ebx
c00155ff:	eb 66                	jmp    c0015667 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c0015601:	52                   	push   edx
c0015602:	52                   	push   edx
c0015603:	50                   	push   eax
c0015604:	68 08 2a 02 c0       	push   0xc0022a08
c0015609:	e8 67 53 ff ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c001560e:	83 c4 10             	add    esp,0x10
c0015611:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0015616:	74 12                	je     c001562a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c0015618:	83 ec 0c             	sub    esp,0xc
c001561b:	68 13 2a 02 c0       	push   0xc0022a13
c0015620:	e8 a2 c0 ff ff       	call   c00116c7 <KePanic(char const*)>
c0015625:	83 c4 10             	add    esp,0x10
c0015628:	eb 3d                	jmp    c0015667 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c001562a:	83 ec 0c             	sub    esp,0xc
c001562d:	55                   	push   ebp
c001562e:	e8 c5 65 ff ff       	call   c000bbf8 <File::close()>
c0015633:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0015636:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0015639:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001563c:	59                   	pop    ecx
c001563d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015641:	e8 b0 24 ff ff       	call   c0007af6 <free>
c0015646:	5b                   	pop    ebx
c0015647:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001564b:	e8 a6 24 ff ff       	call   c0007af6 <free>
c0015650:	89 3c 24             	mov    DWORD PTR [esp],edi
c0015653:	e8 9e 24 ff ff       	call   c0007af6 <free>
c0015658:	5e                   	pop    esi
c0015659:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001565d:	e8 94 24 ff ff       	call   c0007af6 <free>
c0015662:	83 c4 10             	add    esp,0x10
c0015665:	eb 21                	jmp    c0015688 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0015667:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c001566b:	e9 7c fd ff ff       	jmp    c00153ec <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x45b>
c0015670:	83 ec 0c             	sub    esp,0xc
c0015673:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015677:	e8 7a 24 ff ff       	call   c0007af6 <free>
c001567c:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0015680:	83 c4 10             	add    esp,0x10
c0015683:	e9 f1 fc ff ff       	jmp    c0015379 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3e8>
c0015688:	31 c0                	xor    eax,eax
c001568a:	eb 33                	jmp    c00156bf <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72e>
c001568c:	83 ec 0c             	sub    esp,0xc
c001568f:	55                   	push   ebp
c0015690:	e8 63 65 ff ff       	call   c000bbf8 <File::close()>
c0015695:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0015698:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001569b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001569e:	58                   	pop    eax
c001569f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00156a3:	e8 4e 24 ff ff       	call   c0007af6 <free>
c00156a8:	89 3c 24             	mov    DWORD PTR [esp],edi
c00156ab:	e8 46 24 ff ff       	call   c0007af6 <free>
c00156b0:	5a                   	pop    edx
c00156b1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00156b5:	e8 3c 24 ff ff       	call   c0007af6 <free>
c00156ba:	83 c4 10             	add    esp,0x10
c00156bd:	b0 01                	mov    al,0x1
c00156bf:	81 c4 5c 03 00 00    	add    esp,0x35c
c00156c5:	5b                   	pop    ebx
c00156c6:	5e                   	pop    esi
c00156c7:	5f                   	pop    edi
c00156c8:	5d                   	pop    ebp
c00156c9:	c3                   	ret    

c00156ca <Thr::getDriverBaseFromAddress(unsigned long)>:
c00156ca:	56                   	push   esi
c00156cb:	31 d2                	xor    edx,edx
c00156cd:	53                   	push   ebx
c00156ce:	8b 1d 00 bf 02 c0    	mov    ebx,DWORD PTR ds:0xc002bf00
c00156d4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00156d8:	39 d3                	cmp    ebx,edx
c00156da:	7e 1b                	jle    c00156f7 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c00156dc:	8b 04 95 20 c1 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd3ee0]
c00156e3:	39 c8                	cmp    eax,ecx
c00156e5:	77 0d                	ja     c00156f4 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c00156e7:	8b 34 95 20 bf 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd40e0]
c00156ee:	01 c6                	add    esi,eax
c00156f0:	39 ce                	cmp    esi,ecx
c00156f2:	77 05                	ja     c00156f9 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c00156f4:	42                   	inc    edx
c00156f5:	eb e1                	jmp    c00156d8 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c00156f7:	31 c0                	xor    eax,eax
c00156f9:	5b                   	pop    ebx
c00156fa:	5e                   	pop    esi
c00156fb:	c3                   	ret    

c00156fc <Thr::getDriverNameFromAddress(unsigned long)>:
c00156fc:	53                   	push   ebx
c00156fd:	31 c0                	xor    eax,eax
c00156ff:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0015703:	8b 1d 00 bf 02 c0    	mov    ebx,DWORD PTR ds:0xc002bf00
c0015709:	39 c3                	cmp    ebx,eax
c001570b:	7e 22                	jle    c001572f <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001570d:	8b 14 85 20 c1 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd3ee0]
c0015714:	39 ca                	cmp    edx,ecx
c0015716:	77 14                	ja     c001572c <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0015718:	03 14 85 20 bf 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd40e0]
c001571f:	39 ca                	cmp    edx,ecx
c0015721:	76 09                	jbe    c001572c <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0015723:	8b 04 85 20 c3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3ce0]
c001572a:	eb 05                	jmp    c0015731 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001572c:	40                   	inc    eax
c001572d:	eb da                	jmp    c0015709 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001572f:	31 c0                	xor    eax,eax
c0015731:	5b                   	pop    ebx
c0015732:	c3                   	ret    

c0015733 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c0015733:	53                   	push   ebx
c0015734:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0015738:	53                   	push   ebx
c0015739:	e8 8c ff ff ff       	call   c00156ca <Thr::getDriverBaseFromAddress(unsigned long)>
c001573e:	5a                   	pop    edx
c001573f:	31 d2                	xor    edx,edx
c0015741:	85 c0                	test   eax,eax
c0015743:	74 04                	je     c0015749 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c0015745:	89 da                	mov    edx,ebx
c0015747:	29 c2                	sub    edx,eax
c0015749:	89 d0                	mov    eax,edx
c001574b:	5b                   	pop    ebx
c001574c:	c3                   	ret    

c001574d <Thr::loadDLL(char const*, bool)>:
c001574d:	55                   	push   ebp
c001574e:	57                   	push   edi
c001574f:	56                   	push   esi
c0015750:	53                   	push   ebx
c0015751:	81 ec 34 01 00 00    	sub    esp,0x134
c0015757:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001575e:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0015765:	56                   	push   esi
c0015766:	68 2b 2a 02 c0       	push   0xc0022a2b
c001576b:	e8 05 52 ff ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c0015770:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0015777:	e8 6a 23 ff ff       	call   c0007ae6 <malloc>
c001577c:	83 c4 0c             	add    esp,0xc
c001577f:	89 c3                	mov    ebx,eax
c0015781:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c0015787:	56                   	push   esi
c0015788:	50                   	push   eax
c0015789:	e8 ee 63 ff ff       	call   c000bb7c <File::File(char const*, Process*)>
c001578e:	83 c4 10             	add    esp,0x10
c0015791:	85 db                	test   ebx,ebx
c0015793:	75 3c                	jne    c00157d1 <Thr::loadDLL(char const*, bool)+0x84>
c0015795:	89 f8                	mov    eax,edi
c0015797:	84 c0                	test   al,al
c0015799:	0f 84 d2 01 00 00    	je     c0015971 <Thr::loadDLL(char const*, bool)+0x224>
c001579f:	55                   	push   ebp
c00157a0:	55                   	push   ebp
c00157a1:	68 3c 2a 02 c0       	push   0xc0022a3c
c00157a6:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c00157aa:	55                   	push   ebp
c00157ab:	e8 90 ae fe ff       	call   c0000640 <strcpy>
c00157b0:	58                   	pop    eax
c00157b1:	5a                   	pop    edx
c00157b2:	56                   	push   esi
c00157b3:	55                   	push   ebp
c00157b4:	e8 87 b0 fe ff       	call   c0000840 <strcat>
c00157b9:	59                   	pop    ecx
c00157ba:	58                   	pop    eax
c00157bb:	68 4f 2a 02 c0       	push   0xc0022a4f
c00157c0:	55                   	push   ebp
c00157c1:	e8 7a b0 fe ff       	call   c0000840 <strcat>
c00157c6:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00157c9:	e8 f9 be ff ff       	call   c00116c7 <KePanic(char const*)>
c00157ce:	83 c4 10             	add    esp,0x10
c00157d1:	51                   	push   ecx
c00157d2:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c00157d6:	50                   	push   eax
c00157d7:	8d 44 24 20          	lea    eax,[esp+0x20]
c00157db:	50                   	push   eax
c00157dc:	53                   	push   ebx
c00157dd:	e8 ba 66 ff ff       	call   c000be9c <File::stat(unsigned long long*, bool*)>
c00157e2:	83 c4 10             	add    esp,0x10
c00157e5:	85 db                	test   ebx,ebx
c00157e7:	74 0c                	je     c00157f5 <Thr::loadDLL(char const*, bool)+0xa8>
c00157e9:	83 ec 0c             	sub    esp,0xc
c00157ec:	8b 03                	mov    eax,DWORD PTR [ebx]
c00157ee:	53                   	push   ebx
c00157ef:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00157f2:	83 c4 10             	add    esp,0x10
c00157f5:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c00157fa:	75 0a                	jne    c0015806 <Thr::loadDLL(char const*, bool)+0xb9>
c00157fc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015800:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c0015804:	75 3c                	jne    c0015842 <Thr::loadDLL(char const*, bool)+0xf5>
c0015806:	89 f8                	mov    eax,edi
c0015808:	84 c0                	test   al,al
c001580a:	0f 84 49 01 00 00    	je     c0015959 <Thr::loadDLL(char const*, bool)+0x20c>
c0015810:	51                   	push   ecx
c0015811:	51                   	push   ecx
c0015812:	68 3c 2a 02 c0       	push   0xc0022a3c
c0015817:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001581b:	53                   	push   ebx
c001581c:	e8 1f ae fe ff       	call   c0000640 <strcpy>
c0015821:	5d                   	pop    ebp
c0015822:	58                   	pop    eax
c0015823:	56                   	push   esi
c0015824:	53                   	push   ebx
c0015825:	e8 16 b0 fe ff       	call   c0000840 <strcat>
c001582a:	58                   	pop    eax
c001582b:	5a                   	pop    edx
c001582c:	68 4f 2a 02 c0       	push   0xc0022a4f
c0015831:	53                   	push   ebx
c0015832:	e8 09 b0 fe ff       	call   c0000840 <strcat>
c0015837:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001583a:	e8 88 be ff ff       	call   c00116c7 <KePanic(char const*)>
c001583f:	83 c4 10             	add    esp,0x10
c0015842:	52                   	push   edx
c0015843:	6a 03                	push   0x3
c0015845:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015849:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001584d:	05 ff 0f 00 00       	add    eax,0xfff
c0015852:	83 d2 00             	adc    edx,0x0
c0015855:	0f ac d0 0c          	shrd   eax,edx,0xc
c0015859:	50                   	push   eax
c001585a:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c0015860:	e8 ef 45 ff ff       	call   c0009e54 <VAS::allocatePages(int, int)>
c0015865:	59                   	pop    ecx
c0015866:	89 c3                	mov    ebx,eax
c0015868:	5d                   	pop    ebp
c0015869:	50                   	push   eax
c001586a:	68 06 0f 02 c0       	push   0xc0020f06
c001586f:	e8 01 51 ff ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c0015874:	89 34 24             	mov    DWORD PTR [esp],esi
c0015877:	e8 f4 ac fe ff       	call   c0000570 <strlen>
c001587c:	8b 2d 00 bf 02 c0    	mov    ebp,DWORD PTR ds:0xc002bf00
c0015882:	40                   	inc    eax
c0015883:	89 04 24             	mov    DWORD PTR [esp],eax
c0015886:	e8 5b 22 ff ff       	call   c0007ae6 <malloc>
c001588b:	89 04 ad 20 c3 02 c0 	mov    DWORD PTR [ebp*4-0x3ffd3ce0],eax
c0015892:	58                   	pop    eax
c0015893:	a1 00 bf 02 c0       	mov    eax,ds:0xc002bf00
c0015898:	5a                   	pop    edx
c0015899:	56                   	push   esi
c001589a:	ff 34 85 20 c3 02 c0 	push   DWORD PTR [eax*4-0x3ffd3ce0]
c00158a1:	e8 9a ad fe ff       	call   c0000640 <strcpy>
c00158a6:	a1 00 bf 02 c0       	mov    eax,ds:0xc002bf00
c00158ab:	8d 50 01             	lea    edx,[eax+0x1]
c00158ae:	89 1c 85 20 c1 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3ee0],ebx
c00158b5:	89 15 00 bf 02 c0    	mov    DWORD PTR ds:0xc002bf00,edx
c00158bb:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00158bf:	83 c4 0c             	add    esp,0xc
c00158c2:	89 14 85 20 bf 02 c0 	mov    DWORD PTR [eax*4-0x3ffd40e0],edx
c00158c9:	6a 01                	push   0x1
c00158cb:	53                   	push   ebx
c00158cc:	56                   	push   esi
c00158cd:	e8 bf f6 ff ff       	call   c0014f91 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c00158d2:	83 c4 10             	add    esp,0x10
c00158d5:	0f b6 c0             	movzx  eax,al
c00158d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00158dc:	85 c0                	test   eax,eax
c00158de:	0f 85 89 00 00 00    	jne    c001596d <Thr::loadDLL(char const*, bool)+0x220>
c00158e4:	89 f8                	mov    eax,edi
c00158e6:	84 c0                	test   al,al
c00158e8:	74 73                	je     c001595d <Thr::loadDLL(char const*, bool)+0x210>
c00158ea:	83 ec 0c             	sub    esp,0xc
c00158ed:	68 51 2a 02 c0       	push   0xc0022a51
c00158f2:	e8 d0 bd ff ff       	call   c00116c7 <KePanic(char const*)>
c00158f7:	83 c4 10             	add    esp,0x10
c00158fa:	eb 61                	jmp    c001595d <Thr::loadDLL(char const*, bool)+0x210>
c00158fc:	50                   	push   eax
c00158fd:	50                   	push   eax
c00158fe:	89 e8                	mov    eax,ebp
c0015900:	c1 e0 0c             	shl    eax,0xc
c0015903:	01 d8                	add    eax,ebx
c0015905:	50                   	push   eax
c0015906:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c001590c:	e8 2b 40 ff ff       	call   c000993c <VAS::getPageTableEntry(unsigned long)>
c0015911:	83 c4 10             	add    esp,0x10
c0015914:	8b 00                	mov    eax,DWORD PTR [eax]
c0015916:	a8 60                	test   al,0x60
c0015918:	75 11                	jne    c001592b <Thr::loadDLL(char const*, bool)+0x1de>
c001591a:	83 ec 0c             	sub    esp,0xc
c001591d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0015922:	50                   	push   eax
c0015923:	e8 5e 24 ff ff       	call   c0007d86 <Phys::freePage(unsigned long)>
c0015928:	83 c4 10             	add    esp,0x10
c001592b:	45                   	inc    ebp
c001592c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015930:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0015934:	05 ff 0f 00 00       	add    eax,0xfff
c0015939:	bf 00 00 00 00       	mov    edi,0x0
c001593e:	83 d2 00             	adc    edx,0x0
c0015941:	0f ac d0 0c          	shrd   eax,edx,0xc
c0015945:	c1 ea 0c             	shr    edx,0xc
c0015948:	39 c5                	cmp    ebp,eax
c001594a:	89 d1                	mov    ecx,edx
c001594c:	89 f8                	mov    eax,edi
c001594e:	19 c8                	sbb    eax,ecx
c0015950:	72 aa                	jb     c00158fc <Thr::loadDLL(char const*, bool)+0x1af>
c0015952:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0015957:	75 18                	jne    c0015971 <Thr::loadDLL(char const*, bool)+0x224>
c0015959:	31 db                	xor    ebx,ebx
c001595b:	eb 14                	jmp    c0015971 <Thr::loadDLL(char const*, bool)+0x224>
c001595d:	83 ec 0c             	sub    esp,0xc
c0015960:	68 70 2a 02 c0       	push   0xc0022a70
c0015965:	e8 5d bd ff ff       	call   c00116c7 <KePanic(char const*)>
c001596a:	83 c4 10             	add    esp,0x10
c001596d:	31 ed                	xor    ebp,ebp
c001596f:	eb bb                	jmp    c001592c <Thr::loadDLL(char const*, bool)+0x1df>
c0015971:	81 c4 2c 01 00 00    	add    esp,0x12c
c0015977:	89 d8                	mov    eax,ebx
c0015979:	5b                   	pop    ebx
c001597a:	5e                   	pop    esi
c001597b:	5f                   	pop    edi
c001597c:	5d                   	pop    ebp
c001597d:	c3                   	ret    

c001597e <Thr::executeDLL(unsigned long, void*)>:
c001597e:	56                   	push   esi
c001597f:	53                   	push   ebx
c0015980:	52                   	push   edx
c0015981:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015985:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0015989:	85 db                	test   ebx,ebx
c001598b:	75 10                	jne    c001599d <Thr::executeDLL(unsigned long, void*)+0x1f>
c001598d:	83 ec 0c             	sub    esp,0xc
c0015990:	68 8c 2a 02 c0       	push   0xc0022a8c
c0015995:	e8 2d bd ff ff       	call   c00116c7 <KePanic(char const*)>
c001599a:	83 c4 10             	add    esp,0x10
c001599d:	50                   	push   eax
c001599e:	50                   	push   eax
c001599f:	53                   	push   ebx
c00159a0:	68 b6 2a 02 c0       	push   0xc0022ab6
c00159a5:	e8 cb 4f ff ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c00159aa:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c00159ae:	89 d8                	mov    eax,ebx
c00159b0:	83 c4 14             	add    esp,0x14
c00159b3:	5b                   	pop    ebx
c00159b4:	5e                   	pop    esi
c00159b5:	ff e0                	jmp    eax
c00159b7:	90                   	nop

c00159b8 <userModeEntryPoint(void*)>:
c00159b8:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00159bd:	83 e8 01             	sub    eax,0x1
c00159c0:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00159c5:	75 01                	jne    c00159c8 <userModeEntryPoint(void*)+0x10>
c00159c7:	fb                   	sti    
c00159c8:	fb                   	sti    
c00159c9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00159ce:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00159d1:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c00159d7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00159db:	e9 5f a8 fe ff       	jmp    c000023f <goToUsermode>

c00159e0 <changeTSS>:
c00159e0:	83 ec 14             	sub    esp,0x14
c00159e3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00159e8:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00159eb:	b8 00 00 e8 01       	mov    eax,0x1e80000
c00159f0:	c1 e2 15             	shl    edx,0x15
c00159f3:	29 d0                	sub    eax,edx
c00159f5:	50                   	push   eax
c00159f6:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c00159fb:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0015a01:	05 7c 11 00 00       	add    eax,0x117c
c0015a06:	50                   	push   eax
c0015a07:	e8 78 35 ff ff       	call   c0008f84 <TSS::setESP(unsigned long)>
c0015a0c:	83 c4 1c             	add    esp,0x1c
c0015a0f:	c3                   	ret    

c0015a10 <switchToThread(ThreadControlBlock*)>:
c0015a10:	57                   	push   edi
c0015a11:	8b 0d c4 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c4
c0015a17:	56                   	push   esi
c0015a18:	85 c9                	test   ecx,ecx
c0015a1a:	53                   	push   ebx
c0015a1b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015a1f:	0f 85 8b 00 00 00    	jne    c0015ab0 <switchToThread(ThreadControlBlock*)+0xa0>
c0015a25:	0f b6 53 40          	movzx  edx,BYTE PTR [ebx+0x40]
c0015a29:	81 fa ff 00 00 00    	cmp    edx,0xff
c0015a2f:	74 7b                	je     c0015aac <switchToThread(ThreadControlBlock*)+0x9c>
c0015a31:	b8 00 04 00 00       	mov    eax,0x400
c0015a36:	29 d0                	sub    eax,edx
c0015a38:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0015a3b:	d1 f8                	sar    eax,1
c0015a3d:	01 d0                	add    eax,edx
c0015a3f:	90                   	nop
c0015a40:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0015a43:	e8 1e 28 00 00       	call   c0018266 <HalQueryPerformanceCounter()>
c0015a48:	a3 08 c7 02 c0       	mov    ds:0xc002c708,eax
c0015a4d:	89 15 0c c7 02 c0    	mov    DWORD PTR ds:0xc002c70c,edx
c0015a53:	89 c6                	mov    esi,eax
c0015a55:	89 d7                	mov    edi,edx
c0015a57:	2b 35 f8 c6 02 c0    	sub    esi,DWORD PTR ds:0xc002c6f8
c0015a5d:	a3 f8 c6 02 c0       	mov    ds:0xc002c6f8,eax
c0015a62:	1b 3d fc c6 02 c0    	sbb    edi,DWORD PTR ds:0xc002c6fc
c0015a68:	89 35 00 c7 02 c0    	mov    DWORD PTR ds:0xc002c700,esi
c0015a6e:	89 3d 04 c7 02 c0    	mov    DWORD PTR ds:0xc002c704,edi
c0015a74:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0015a7a:	89 15 fc c6 02 c0    	mov    DWORD PTR ds:0xc002c6fc,edx
c0015a80:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c0015a83:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c0015a86:	01 c6                	add    esi,eax
c0015a88:	11 d7                	adc    edi,edx
c0015a8a:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c0015a8d:	83 ec 0c             	sub    esp,0xc
c0015a90:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c0015a93:	53                   	push   ebx
c0015a94:	e8 de a7 fe ff       	call   c0000277 <switchToThreadASM>
c0015a99:	0f 20 c0             	mov    eax,cr0
c0015a9c:	83 c8 08             	or     eax,0x8
c0015a9f:	0f 22 c0             	mov    cr0,eax
c0015aa2:	83 c4 10             	add    esp,0x10
c0015aa5:	5b                   	pop    ebx
c0015aa6:	5e                   	pop    esi
c0015aa7:	5f                   	pop    edi
c0015aa8:	c3                   	ret    
c0015aa9:	8d 76 00             	lea    esi,[esi+0x0]
c0015aac:	31 c0                	xor    eax,eax
c0015aae:	eb 90                	jmp    c0015a40 <switchToThread(ThreadControlBlock*)+0x30>
c0015ab0:	5b                   	pop    ebx
c0015ab1:	c7 05 c0 c6 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x1
c0015abb:	5e                   	pop    esi
c0015abc:	5f                   	pop    edi
c0015abd:	c3                   	ret    
c0015abe:	66 90                	xchg   ax,ax

c0015ac0 <Process::addArgs(char**)>:
c0015ac0:	57                   	push   edi
c0015ac1:	56                   	push   esi
c0015ac2:	53                   	push   ebx
c0015ac3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015ac7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0015acb:	c7 86 16 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x516],0x0
c0015ad5:	85 ff                	test   edi,edi
c0015ad7:	74 4f                	je     c0015b28 <Process::addArgs(char**)+0x68>
c0015ad9:	8b 07                	mov    eax,DWORD PTR [edi]
c0015adb:	85 c0                	test   eax,eax
c0015add:	74 49                	je     c0015b28 <Process::addArgs(char**)+0x68>
c0015adf:	31 db                	xor    ebx,ebx
c0015ae1:	8d 76 00             	lea    esi,[esi+0x0]
c0015ae4:	83 ec 0c             	sub    esp,0xc
c0015ae7:	50                   	push   eax
c0015ae8:	e8 83 aa fe ff       	call   c0000570 <strlen>
c0015aed:	83 c0 01             	add    eax,0x1
c0015af0:	89 04 24             	mov    DWORD PTR [esp],eax
c0015af3:	e8 ee 1f ff ff       	call   c0007ae6 <malloc>
c0015af8:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c0015aff:	5a                   	pop    edx
c0015b00:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0015b03:	59                   	pop    ecx
c0015b04:	83 c3 01             	add    ebx,0x1
c0015b07:	52                   	push   edx
c0015b08:	50                   	push   eax
c0015b09:	e8 32 ab fe ff       	call   c0000640 <strcpy>
c0015b0e:	8b 8e 16 05 00 00    	mov    ecx,DWORD PTR [esi+0x516]
c0015b14:	83 c4 10             	add    esp,0x10
c0015b17:	83 c1 01             	add    ecx,0x1
c0015b1a:	89 8e 16 05 00 00    	mov    DWORD PTR [esi+0x516],ecx
c0015b20:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0015b23:	85 c0                	test   eax,eax
c0015b25:	75 bd                	jne    c0015ae4 <Process::addArgs(char**)+0x24>
c0015b27:	90                   	nop
c0015b28:	5b                   	pop    ebx
c0015b29:	5e                   	pop    esi
c0015b2a:	5f                   	pop    edi
c0015b2b:	c3                   	ret    

c0015b2c <Process::Process(char const*, Process*, char**)>:
c0015b2c:	56                   	push   esi
c0015b2d:	53                   	push   ebx
c0015b2e:	83 ec 14             	sub    esp,0x14
c0015b31:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b35:	05 0c 02 00 00       	add    eax,0x20c
c0015b3a:	bb 07 00 00 00       	mov    ebx,0x7
c0015b3f:	89 c6                	mov    esi,eax
c0015b41:	8d 76 00             	lea    esi,[esi+0x0]
c0015b44:	85 db                	test   ebx,ebx
c0015b46:	78 14                	js     c0015b5c <Process::Process(char const*, Process*, char**)+0x30>
c0015b48:	83 ec 0c             	sub    esp,0xc
c0015b4b:	56                   	push   esi
c0015b4c:	e8 e7 a5 00 00       	call   c0020138 <ThreadControlBlock::ThreadControlBlock()>
c0015b51:	83 c4 10             	add    esp,0x10
c0015b54:	83 c6 5f             	add    esi,0x5f
c0015b57:	83 eb 01             	sub    ebx,0x1
c0015b5a:	eb e8                	jmp    c0015b44 <Process::Process(char const*, Process*, char**)+0x18>
c0015b5c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b60:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0015b67:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b6b:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0015b72:	83 ec 0c             	sub    esp,0xc
c0015b75:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015b79:	e8 3e b9 ff ff       	call   c00114bc <KeNewProcessEnv(Process*)>
c0015b7e:	83 c4 10             	add    esp,0x10
c0015b81:	89 c2                	mov    edx,eax
c0015b83:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b87:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0015b8d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b91:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0015b9a:	a1 e0 40 02 c0       	mov    eax,ds:0xc00240e0
c0015b9f:	8d 50 01             	lea    edx,[eax+0x1]
c0015ba2:	89 15 e0 40 02 c0    	mov    DWORD PTR ds:0xc00240e0,edx
c0015ba8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015bac:	89 02                	mov    DWORD PTR [edx],eax
c0015bae:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c0015bb6:	83 ec 0c             	sub    esp,0xc
c0015bb9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015bbd:	e8 24 1f ff ff       	call   c0007ae6 <malloc>
c0015bc2:	83 c4 10             	add    esp,0x10
c0015bc5:	89 c3                	mov    ebx,eax
c0015bc7:	83 ec 08             	sub    esp,0x8
c0015bca:	6a 00                	push   0x0
c0015bcc:	53                   	push   ebx
c0015bcd:	e8 c6 44 ff ff       	call   c000a098 <VAS::VAS(bool)>
c0015bd2:	83 c4 10             	add    esp,0x10
c0015bd5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015bd9:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0015bdf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015be3:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0015bed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015bf1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015bf5:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0015bfb:	e8 e2 be ff ff       	call   c0011ae2 <KeInitSignals()>
c0015c00:	89 c2                	mov    edx,eax
c0015c02:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015c06:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0015c0c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015c10:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015c16:	85 c0                	test   eax,eax
c0015c18:	74 42                	je     c0015c5c <Process::Process(char const*, Process*, char**)+0x130>
c0015c1a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015c1e:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015c24:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0015c2a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015c2e:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0015c34:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015c38:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015c3e:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0015c44:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015c48:	05 0c 01 00 00       	add    eax,0x10c
c0015c4d:	83 ec 08             	sub    esp,0x8
c0015c50:	52                   	push   edx
c0015c51:	50                   	push   eax
c0015c52:	e8 e9 a9 fe ff       	call   c0000640 <strcpy>
c0015c57:	83 c4 10             	add    esp,0x10
c0015c5a:	eb 64                	jmp    c0015cc0 <Process::Process(char const*, Process*, char**)+0x194>
c0015c5c:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c0015c64:	83 ec 0c             	sub    esp,0xc
c0015c67:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015c6b:	e8 76 1e ff ff       	call   c0007ae6 <malloc>
c0015c70:	83 c4 10             	add    esp,0x10
c0015c73:	89 c3                	mov    ebx,eax
c0015c75:	83 ec 08             	sub    esp,0x8
c0015c78:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015c7c:	53                   	push   ebx
c0015c7d:	e8 14 30 ff ff       	call   c0008c96 <VgaText::VgaText(char const*)>
c0015c82:	83 c4 10             	add    esp,0x10
c0015c85:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015c89:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0015c8f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015c93:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015c99:	83 ec 0c             	sub    esp,0xc
c0015c9c:	50                   	push   eax
c0015c9d:	e8 92 28 ff ff       	call   c0008534 <addToTerminalCycle(VgaText*)>
c0015ca2:	83 c4 10             	add    esp,0x10
c0015ca5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015ca9:	05 0c 01 00 00       	add    eax,0x10c
c0015cae:	83 ec 08             	sub    esp,0x8
c0015cb1:	68 d5 2a 02 c0       	push   0xc0022ad5
c0015cb6:	50                   	push   eax
c0015cb7:	e8 84 a9 fe ff       	call   c0000640 <strcpy>
c0015cbc:	83 c4 10             	add    esp,0x10
c0015cbf:	90                   	nop
c0015cc0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015cc4:	83 c0 0c             	add    eax,0xc
c0015cc7:	83 ec 08             	sub    esp,0x8
c0015cca:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015cce:	50                   	push   eax
c0015ccf:	e8 6c a9 fe ff       	call   c0000640 <strcpy>
c0015cd4:	83 c4 10             	add    esp,0x10
c0015cd7:	83 ec 08             	sub    esp,0x8
c0015cda:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0015cde:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015ce2:	e8 d9 fd ff ff       	call   c0015ac0 <Process::addArgs(char**)>
c0015ce7:	83 c4 10             	add    esp,0x10
c0015cea:	83 ec 08             	sub    esp,0x8
c0015ced:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015cf1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015cf5:	e8 65 ed ff ff       	call   c0014a5f <Thr::loadProgramIntoMemory(Process*, char const*)>
c0015cfa:	83 c4 10             	add    esp,0x10
c0015cfd:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0015d01:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0015d05:	83 f0 01             	xor    eax,0x1
c0015d08:	88 c2                	mov    dl,al
c0015d0a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015d0e:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c0015d14:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0015d19:	83 ec 04             	sub    esp,0x4
c0015d1c:	50                   	push   eax
c0015d1d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015d21:	68 2c 2b 02 c0       	push   0xc0022b2c
c0015d26:	e8 4a 4c ff ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c0015d2b:	83 c4 10             	add    esp,0x10
c0015d2e:	90                   	nop
c0015d2f:	83 c4 14             	add    esp,0x14
c0015d32:	5b                   	pop    ebx
c0015d33:	5e                   	pop    esi
c0015d34:	c3                   	ret    
c0015d35:	90                   	nop
c0015d36:	66 90                	xchg   ax,ax

c0015d38 <Process::Process(bool, char const*, Process*, char**)>:
c0015d38:	56                   	push   esi
c0015d39:	53                   	push   ebx
c0015d3a:	83 ec 24             	sub    esp,0x24
c0015d3d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015d41:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0015d45:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d49:	05 0c 02 00 00       	add    eax,0x20c
c0015d4e:	bb 07 00 00 00       	mov    ebx,0x7
c0015d53:	89 c6                	mov    esi,eax
c0015d55:	8d 76 00             	lea    esi,[esi+0x0]
c0015d58:	85 db                	test   ebx,ebx
c0015d5a:	78 14                	js     c0015d70 <Process::Process(bool, char const*, Process*, char**)+0x38>
c0015d5c:	83 ec 0c             	sub    esp,0xc
c0015d5f:	56                   	push   esi
c0015d60:	e8 d3 a3 00 00       	call   c0020138 <ThreadControlBlock::ThreadControlBlock()>
c0015d65:	83 c4 10             	add    esp,0x10
c0015d68:	83 c6 5f             	add    esi,0x5f
c0015d6b:	83 eb 01             	sub    ebx,0x1
c0015d6e:	eb e8                	jmp    c0015d58 <Process::Process(bool, char const*, Process*, char**)+0x20>
c0015d70:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d74:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0015d7b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d7f:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0015d86:	83 ec 0c             	sub    esp,0xc
c0015d89:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0015d8d:	e8 2a b7 ff ff       	call   c00114bc <KeNewProcessEnv(Process*)>
c0015d92:	83 c4 10             	add    esp,0x10
c0015d95:	89 c2                	mov    edx,eax
c0015d97:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d9b:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0015da1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015da5:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0015dae:	a1 e0 40 02 c0       	mov    eax,ds:0xc00240e0
c0015db3:	8d 50 01             	lea    edx,[eax+0x1]
c0015db6:	89 15 e0 40 02 c0    	mov    DWORD PTR ds:0xc00240e0,edx
c0015dbc:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0015dc0:	89 02                	mov    DWORD PTR [edx],eax
c0015dc2:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c0015dca:	83 ec 0c             	sub    esp,0xc
c0015dcd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0015dd1:	e8 10 1d ff ff       	call   c0007ae6 <malloc>
c0015dd6:	83 c4 10             	add    esp,0x10
c0015dd9:	89 c3                	mov    ebx,eax
c0015ddb:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0015de0:	83 ec 08             	sub    esp,0x8
c0015de3:	50                   	push   eax
c0015de4:	53                   	push   ebx
c0015de5:	e8 ae 42 ff ff       	call   c000a098 <VAS::VAS(bool)>
c0015dea:	83 c4 10             	add    esp,0x10
c0015ded:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015df1:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0015df7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015dfb:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0015e05:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015e09:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0015e0d:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0015e13:	e8 ca bc ff ff       	call   c0011ae2 <KeInitSignals()>
c0015e18:	89 c2                	mov    edx,eax
c0015e1a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015e1e:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0015e24:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015e28:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015e2e:	85 c0                	test   eax,eax
c0015e30:	74 42                	je     c0015e74 <Process::Process(bool, char const*, Process*, char**)+0x13c>
c0015e32:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015e36:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015e3c:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0015e42:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015e46:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0015e4c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015e50:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015e56:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0015e5c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015e60:	05 0c 01 00 00       	add    eax,0x10c
c0015e65:	83 ec 08             	sub    esp,0x8
c0015e68:	52                   	push   edx
c0015e69:	50                   	push   eax
c0015e6a:	e8 d1 a7 fe ff       	call   c0000640 <strcpy>
c0015e6f:	83 c4 10             	add    esp,0x10
c0015e72:	eb 64                	jmp    c0015ed8 <Process::Process(bool, char const*, Process*, char**)+0x1a0>
c0015e74:	c7 44 24 18 84 01 00 00 	mov    DWORD PTR [esp+0x18],0x184
c0015e7c:	83 ec 0c             	sub    esp,0xc
c0015e7f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0015e83:	e8 5e 1c ff ff       	call   c0007ae6 <malloc>
c0015e88:	83 c4 10             	add    esp,0x10
c0015e8b:	89 c3                	mov    ebx,eax
c0015e8d:	83 ec 08             	sub    esp,0x8
c0015e90:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0015e94:	53                   	push   ebx
c0015e95:	e8 fc 2d ff ff       	call   c0008c96 <VgaText::VgaText(char const*)>
c0015e9a:	83 c4 10             	add    esp,0x10
c0015e9d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015ea1:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0015ea7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015eab:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015eb1:	83 ec 0c             	sub    esp,0xc
c0015eb4:	50                   	push   eax
c0015eb5:	e8 7a 26 ff ff       	call   c0008534 <addToTerminalCycle(VgaText*)>
c0015eba:	83 c4 10             	add    esp,0x10
c0015ebd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015ec1:	05 0c 01 00 00       	add    eax,0x10c
c0015ec6:	83 ec 08             	sub    esp,0x8
c0015ec9:	68 d5 2a 02 c0       	push   0xc0022ad5
c0015ece:	50                   	push   eax
c0015ecf:	e8 6c a7 fe ff       	call   c0000640 <strcpy>
c0015ed4:	83 c4 10             	add    esp,0x10
c0015ed7:	90                   	nop
c0015ed8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015edc:	83 c0 0c             	add    eax,0xc
c0015edf:	83 ec 08             	sub    esp,0x8
c0015ee2:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0015ee6:	50                   	push   eax
c0015ee7:	e8 54 a7 fe ff       	call   c0000640 <strcpy>
c0015eec:	83 c4 10             	add    esp,0x10
c0015eef:	83 ec 08             	sub    esp,0x8
c0015ef2:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0015ef6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0015efa:	e8 c1 fb ff ff       	call   c0015ac0 <Process::addArgs(char**)>
c0015eff:	83 c4 10             	add    esp,0x10
c0015f02:	90                   	nop
c0015f03:	83 c4 24             	add    esp,0x24
c0015f06:	5b                   	pop    ebx
c0015f07:	5e                   	pop    esi
c0015f08:	c3                   	ret    
c0015f09:	8d 76 00             	lea    esi,[esi+0x0]

c0015f0c <taskStartupFunction>:
c0015f0c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015f11:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c0015f14:	c3                   	ret    
c0015f15:	90                   	nop
c0015f16:	66 90                	xchg   ax,ax

c0015f18 <Semaphore::Semaphore(int)>:
c0015f18:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015f1c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015f20:	89 10                	mov    DWORD PTR [eax],edx
c0015f22:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015f26:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0015f2d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015f31:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0015f38:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015f3c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0015f43:	90                   	nop
c0015f44:	c3                   	ret    
c0015f45:	90                   	nop
c0015f46:	66 90                	xchg   ax,ax

c0015f48 <Mutex::Mutex()>:
c0015f48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015f4c:	6a 01                	push   0x1
c0015f4e:	50                   	push   eax
c0015f4f:	e8 c4 ff ff ff       	call   c0015f18 <Semaphore::Semaphore(int)>
c0015f54:	83 c4 08             	add    esp,0x8
c0015f57:	90                   	nop
c0015f58:	c3                   	ret    
c0015f59:	90                   	nop
c0015f5a:	66 90                	xchg   ax,ax

c0015f5c <Process::createThread(void (*)(void*), void*, int)>:
c0015f5c:	57                   	push   edi
c0015f5d:	31 c9                	xor    ecx,ecx
c0015f5f:	56                   	push   esi
c0015f60:	53                   	push   ebx
c0015f61:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015f65:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c0015f6c:	89 f2                	mov    edx,esi
c0015f6e:	66 90                	xchg   ax,ax
c0015f70:	0f b7 c2             	movzx  eax,dx
c0015f73:	80 e2 01             	and    dl,0x1
c0015f76:	74 14                	je     c0015f8c <Process::createThread(void (*)(void*), void*, int)+0x30>
c0015f78:	d1 f8                	sar    eax,1
c0015f7a:	83 c1 01             	add    ecx,0x1
c0015f7d:	89 c2                	mov    edx,eax
c0015f7f:	83 f9 10             	cmp    ecx,0x10
c0015f82:	75 ec                	jne    c0015f70 <Process::createThread(void (*)(void*), void*, int)+0x14>
c0015f84:	31 db                	xor    ebx,ebx
c0015f86:	89 d8                	mov    eax,ebx
c0015f88:	5b                   	pop    ebx
c0015f89:	5e                   	pop    esi
c0015f8a:	5f                   	pop    edi
c0015f8b:	c3                   	ret    
c0015f8c:	b8 01 00 00 00       	mov    eax,0x1
c0015f91:	d3 e0                	shl    eax,cl
c0015f93:	09 c6                	or     esi,eax
c0015f95:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0015f98:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c0015f9f:	01 c0                	add    eax,eax
c0015fa1:	01 c8                	add    eax,ecx
c0015fa3:	8d 04 80             	lea    eax,[eax+eax*4]
c0015fa6:	01 d8                	add    eax,ebx
c0015fa8:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c0015faf:	75 0b                	jne    c0015fbc <Process::createThread(void (*)(void*), void*, int)+0x60>
c0015fb1:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c0015fbb:	90                   	nop
c0015fbc:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0015fc2:	83 ec 0c             	sub    esp,0xc
c0015fc5:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0015fc8:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0015fcb:	01 c0                	add    eax,eax
c0015fcd:	01 c8                	add    eax,ecx
c0015fcf:	8d 3c 80             	lea    edi,[eax+eax*4]
c0015fd2:	8d 04 3b             	lea    eax,[ebx+edi*1]
c0015fd5:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0015fdb:	8d b0 00 02 00 00    	lea    esi,[eax+0x200]
c0015fe1:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0015fe5:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c0015feb:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c0015ff1:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c0015ff7:	89 ca                	mov    edx,ecx
c0015ff9:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c0016000:	f7 da                	neg    edx
c0016002:	c1 e2 15             	shl    edx,0x15
c0016005:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c001600b:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0016011:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016015:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001601f:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c0016025:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016029:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c001602f:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0016039:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0016043:	68 00 01 00 00       	push   0x100
c0016048:	e8 99 1a ff ff       	call   c0007ae6 <malloc>
c001604d:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0016050:	58                   	pop    eax
c0016051:	5a                   	pop    edx
c0016052:	53                   	push   ebx
c0016053:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016058:	e8 73 9e 00 00       	call   c001fed0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001605d:	83 c4 10             	add    esp,0x10
c0016060:	89 d8                	mov    eax,ebx
c0016062:	5b                   	pop    ebx
c0016063:	5e                   	pop    esi
c0016064:	5f                   	pop    edi
c0016065:	c3                   	ret    
c0016066:	66 90                	xchg   ax,ax

c0016068 <Process::createUserThread()>:
c0016068:	83 ec 0c             	sub    esp,0xc
c001606b:	68 80 00 00 00       	push   0x80
c0016070:	6a 00                	push   0x0
c0016072:	68 b8 59 01 c0       	push   0xc00159b8
c0016077:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001607b:	50                   	push   eax
c001607c:	e8 db fe ff ff       	call   c0015f5c <Process::createThread(void (*)(void*), void*, int)>
c0016081:	83 c4 1c             	add    esp,0x1c
c0016084:	c3                   	ret    
c0016085:	8d 76 00             	lea    esi,[esi+0x0]

c0016088 <setupMultitasking(void (*)())>:
c0016088:	56                   	push   esi
c0016089:	53                   	push   ebx
c001608a:	83 ec 04             	sub    esp,0x4
c001608d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016091:	eb 11                	jmp    c00160a4 <setupMultitasking(void (*)())+0x1c>
c0016093:	90                   	nop
c0016094:	83 ec 0c             	sub    esp,0xc
c0016097:	68 e4 c6 02 c0       	push   0xc002c6e4
c001609c:	e8 73 9d 00 00       	call   c001fe14 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00160a1:	83 c4 10             	add    esp,0x10
c00160a4:	83 ec 0c             	sub    esp,0xc
c00160a7:	68 e4 c6 02 c0       	push   0xc002c6e4
c00160ac:	e8 3f 9d 00 00       	call   c001fdf0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00160b1:	83 c4 10             	add    esp,0x10
c00160b4:	84 c0                	test   al,al
c00160b6:	74 dc                	je     c0016094 <setupMultitasking(void (*)())+0xc>
c00160b8:	83 ec 0c             	sub    esp,0xc
c00160bb:	68 24 07 00 00       	push   0x724
c00160c0:	e8 21 1a ff ff       	call   c0007ae6 <malloc>
c00160c5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00160cc:	89 c3                	mov    ebx,eax
c00160ce:	6a 00                	push   0x0
c00160d0:	68 d9 2a 02 c0       	push   0xc0022ad9
c00160d5:	6a 01                	push   0x1
c00160d7:	50                   	push   eax
c00160d8:	e8 5b fc ff ff       	call   c0015d38 <Process::Process(bool, char const*, Process*, char**)>
c00160dd:	83 c4 14             	add    esp,0x14
c00160e0:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c00160e6:	89 1d f0 c6 02 c0    	mov    DWORD PTR ds:0xc002c6f0,ebx
c00160ec:	50                   	push   eax
c00160ed:	e8 97 26 ff ff       	call   c0008789 <setActiveTerminal(VgaText*)>
c00160f2:	66 8b 83 04 05 00 00 	mov    ax,WORD PTR [ebx+0x504]
c00160f9:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c0016103:	83 c8 01             	or     eax,0x1
c0016106:	66 89 83 04 05 00 00 	mov    WORD PTR [ebx+0x504],ax
c001610d:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0016113:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0016116:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c0016120:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0016126:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c001612c:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0016136:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c0016140:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001614a:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0016150:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001615a:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0016160:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001616a:	c7 04 24 00 01 00 00 	mov    DWORD PTR [esp],0x100
c0016171:	e8 70 19 ff ff       	call   c0007ae6 <malloc>
c0016176:	89 83 14 02 00 00    	mov    DWORD PTR [ebx+0x214],eax
c001617c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0016182:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0016188:	5a                   	pop    edx
c0016189:	59                   	pop    ecx
c001618a:	68 d5 2a 02 c0       	push   0xc0022ad5
c001618f:	50                   	push   eax
c0016190:	e8 ab a4 fe ff       	call   c0000640 <strcpy>
c0016195:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c001619c:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c00161a0:	83 c4 14             	add    esp,0x14
c00161a3:	5b                   	pop    ebx
c00161a4:	5e                   	pop    esi
c00161a5:	e9 bf a0 fe ff       	jmp    c0000269 <switchToThreadASMFirstTime>
c00161aa:	66 90                	xchg   ax,ax

c00161ac <schedule()>:
c00161ac:	8b 15 c4 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6c4
c00161b2:	85 d2                	test   edx,edx
c00161b4:	74 0e                	je     c00161c4 <schedule()+0x18>
c00161b6:	c7 05 c0 c6 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x1
c00161c0:	c3                   	ret    
c00161c1:	8d 76 00             	lea    esi,[esi+0x0]
c00161c4:	53                   	push   ebx
c00161c5:	83 ec 14             	sub    esp,0x14
c00161c8:	68 e4 c6 02 c0       	push   0xc002c6e4
c00161cd:	e8 1e 9c 00 00       	call   c001fdf0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00161d2:	83 c4 10             	add    esp,0x10
c00161d5:	84 c0                	test   al,al
c00161d7:	75 3f                	jne    c0016218 <schedule()+0x6c>
c00161d9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00161de:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00161e1:	83 fa 01             	cmp    edx,0x1
c00161e4:	74 3a                	je     c0016220 <schedule()+0x74>
c00161e6:	66 90                	xchg   ax,ax
c00161e8:	83 ec 0c             	sub    esp,0xc
c00161eb:	68 e4 c6 02 c0       	push   0xc002c6e4
c00161f0:	e8 17 9c 00 00       	call   c001fe0c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00161f5:	c7 04 24 e4 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6e4
c00161fc:	89 c3                	mov    ebx,eax
c00161fe:	e8 11 9c 00 00       	call   c001fe14 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016203:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001620a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001620d:	e8 fe f7 ff ff       	call   c0015a10 <switchToThread(ThreadControlBlock*)>
c0016212:	83 c4 10             	add    esp,0x10
c0016215:	8d 76 00             	lea    esi,[esi+0x0]
c0016218:	83 c4 08             	add    esp,0x8
c001621b:	5b                   	pop    ebx
c001621c:	c3                   	ret    
c001621d:	8d 76 00             	lea    esi,[esi+0x0]
c0016220:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0016227:	83 ec 08             	sub    esp,0x8
c001622a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001622f:	50                   	push   eax
c0016230:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016235:	e8 96 9c 00 00       	call   c001fed0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001623a:	83 c4 10             	add    esp,0x10
c001623d:	eb a9                	jmp    c00161e8 <schedule()+0x3c>
c001623f:	90                   	nop

c0016240 <Semaphore::tryAcquire()>:
c0016240:	53                   	push   ebx
c0016241:	83 ec 08             	sub    esp,0x8
c0016244:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0016248:	fa                   	cli    
c0016249:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001624e:	8d 50 01             	lea    edx,[eax+0x1]
c0016251:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c0016257:	8b 15 c4 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6c4
c001625d:	8d 5a 01             	lea    ebx,[edx+0x1]
c0016260:	89 1d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ebx
c0016266:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c0016269:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c001626b:	7c 33                	jl     c00162a0 <Semaphore::tryAcquire()+0x60>
c001626d:	89 15 c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,edx
c0016273:	85 d2                	test   edx,edx
c0016275:	75 0d                	jne    c0016284 <Semaphore::tryAcquire()+0x44>
c0016277:	8b 15 c0 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6c0
c001627d:	85 d2                	test   edx,edx
c001627f:	75 6f                	jne    c00162f0 <Semaphore::tryAcquire()+0xb0>
c0016281:	8d 76 00             	lea    esi,[esi+0x0]
c0016284:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016289:	85 c0                	test   eax,eax
c001628b:	74 0b                	je     c0016298 <Semaphore::tryAcquire()+0x58>
c001628d:	8d 76 00             	lea    esi,[esi+0x0]
c0016290:	31 c0                	xor    eax,eax
c0016292:	83 c4 08             	add    esp,0x8
c0016295:	5b                   	pop    ebx
c0016296:	c3                   	ret    
c0016297:	90                   	nop
c0016298:	fb                   	sti    
c0016299:	83 c4 08             	add    esp,0x8
c001629c:	5b                   	pop    ebx
c001629d:	c3                   	ret    
c001629e:	66 90                	xchg   ax,ax
c00162a0:	83 c3 01             	add    ebx,0x1
c00162a3:	89 15 c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,edx
c00162a9:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c00162ac:	85 d2                	test   edx,edx
c00162ae:	75 24                	jne    c00162d4 <Semaphore::tryAcquire()+0x94>
c00162b0:	8b 0d c0 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c0
c00162b6:	85 c9                	test   ecx,ecx
c00162b8:	74 1a                	je     c00162d4 <Semaphore::tryAcquire()+0x94>
c00162ba:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c00162c4:	e8 e3 fe ff ff       	call   c00161ac <schedule()>
c00162c9:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00162ce:	83 e8 01             	sub    eax,0x1
c00162d1:	8d 76 00             	lea    esi,[esi+0x0]
c00162d4:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00162d9:	85 c0                	test   eax,eax
c00162db:	75 0b                	jne    c00162e8 <Semaphore::tryAcquire()+0xa8>
c00162dd:	fb                   	sti    
c00162de:	b0 01                	mov    al,0x1
c00162e0:	83 c4 08             	add    esp,0x8
c00162e3:	5b                   	pop    ebx
c00162e4:	c3                   	ret    
c00162e5:	8d 76 00             	lea    esi,[esi+0x0]
c00162e8:	b0 01                	mov    al,0x1
c00162ea:	83 c4 08             	add    esp,0x8
c00162ed:	5b                   	pop    ebx
c00162ee:	c3                   	ret    
c00162ef:	90                   	nop
c00162f0:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c00162fa:	e8 ad fe ff ff       	call   c00161ac <schedule()>
c00162ff:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016304:	83 e8 01             	sub    eax,0x1
c0016307:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c001630c:	85 c0                	test   eax,eax
c001630e:	75 80                	jne    c0016290 <Semaphore::tryAcquire()+0x50>
c0016310:	eb 86                	jmp    c0016298 <Semaphore::tryAcquire()+0x58>
c0016312:	66 90                	xchg   ax,ax

c0016314 <Semaphore::assertLocked(char const*)>:
c0016314:	83 ec 0c             	sub    esp,0xc
c0016317:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001631b:	fa                   	cli    
c001631c:	8b 0d c8 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c8
c0016322:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c0016327:	83 c1 01             	add    ecx,0x1
c001632a:	89 0d c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,ecx
c0016330:	8d 48 01             	lea    ecx,[eax+0x1]
c0016333:	89 0d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ecx
c0016339:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001633b:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c001633e:	7c 28                	jl     c0016368 <Semaphore::assertLocked(char const*)+0x54>
c0016340:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c0016345:	85 c0                	test   eax,eax
c0016347:	75 0b                	jne    c0016354 <Semaphore::assertLocked(char const*)+0x40>
c0016349:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c001634e:	85 c0                	test   eax,eax
c0016350:	75 32                	jne    c0016384 <Semaphore::assertLocked(char const*)+0x70>
c0016352:	66 90                	xchg   ax,ax
c0016354:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016359:	83 e8 01             	sub    eax,0x1
c001635c:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016361:	75 01                	jne    c0016364 <Semaphore::assertLocked(char const*)+0x50>
c0016363:	fb                   	sti    
c0016364:	83 c4 0c             	add    esp,0xc
c0016367:	c3                   	ret    
c0016368:	83 ec 0c             	sub    esp,0xc
c001636b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001636f:	52                   	push   edx
c0016370:	e8 52 b3 ff ff       	call   c00116c7 <KePanic(char const*)>
c0016375:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c001637a:	83 c4 10             	add    esp,0x10
c001637d:	83 e8 01             	sub    eax,0x1
c0016380:	eb be                	jmp    c0016340 <Semaphore::assertLocked(char const*)+0x2c>
c0016382:	66 90                	xchg   ax,ax
c0016384:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c001638e:	e8 19 fe ff ff       	call   c00161ac <schedule()>
c0016393:	eb bf                	jmp    c0016354 <Semaphore::assertLocked(char const*)+0x40>
c0016395:	8d 76 00             	lea    esi,[esi+0x0]

c0016398 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0016398:	83 ec 0c             	sub    esp,0xc
c001639b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00163a0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00163a4:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00163a7:	e8 00 fe ff ff       	call   c00161ac <schedule()>
c00163ac:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00163b1:	83 e8 01             	sub    eax,0x1
c00163b4:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00163b9:	75 01                	jne    c00163bc <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c00163bb:	fb                   	sti    
c00163bc:	83 c4 0c             	add    esp,0xc
c00163bf:	c3                   	ret    

c00163c0 <blockTask(TaskState)>:
c00163c0:	83 ec 0c             	sub    esp,0xc
c00163c3:	fa                   	cli    
c00163c4:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00163c9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00163cd:	83 c0 01             	add    eax,0x1
c00163d0:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00163d5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00163da:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00163dd:	e8 ca fd ff ff       	call   c00161ac <schedule()>
c00163e2:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00163e7:	83 e8 01             	sub    eax,0x1
c00163ea:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00163ef:	75 03                	jne    c00163f4 <blockTask(TaskState)+0x34>
c00163f1:	fb                   	sti    
c00163f2:	66 90                	xchg   ax,ax
c00163f4:	83 c4 0c             	add    esp,0xc
c00163f7:	c3                   	ret    

c00163f8 <waitTask(int, int*, int)>:
c00163f8:	83 ec 18             	sub    esp,0x18
c00163fb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016400:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0016404:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c0016407:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001640b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016410:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0016413:	6a 07                	push   0x7
c0016415:	e8 a6 ff ff ff       	call   c00163c0 <blockTask(TaskState)>
c001641a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001641f:	83 c4 10             	add    esp,0x10
c0016422:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c0016425:	85 d2                	test   edx,edx
c0016427:	74 0b                	je     c0016434 <waitTask(int, int*, int)+0x3c>
c0016429:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c001642c:	89 02                	mov    DWORD PTR [edx],eax
c001642e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016433:	90                   	nop
c0016434:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0016437:	83 c4 0c             	add    esp,0xc
c001643a:	c3                   	ret    
c001643b:	90                   	nop

c001643c <milliTenthSleepUntil(unsigned int)>:
c001643c:	83 ec 0c             	sub    esp,0xc
c001643f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016443:	39 05 ec b8 02 c0    	cmp    DWORD PTR ds:0xc002b8ec,eax
c0016449:	76 05                	jbe    c0016450 <milliTenthSleepUntil(unsigned int)+0x14>
c001644b:	90                   	nop
c001644c:	83 c4 0c             	add    esp,0xc
c001644f:	c3                   	ret    
c0016450:	fa                   	cli    
c0016451:	8b 15 c8 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6c8
c0016457:	83 ec 08             	sub    esp,0x8
c001645a:	83 c2 01             	add    edx,0x1
c001645d:	8b 0d c4 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c4
c0016463:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c0016469:	83 c1 01             	add    ecx,0x1
c001646c:	89 0d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ecx
c0016472:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016478:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c001647b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016480:	50                   	push   eax
c0016481:	68 d8 c6 02 c0       	push   0xc002c6d8
c0016486:	e8 45 9a 00 00       	call   c001fed0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001648b:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0016492:	e8 29 ff ff ff       	call   c00163c0 <blockTask(TaskState)>
c0016497:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c001649c:	83 c4 10             	add    esp,0x10
c001649f:	83 e8 01             	sub    eax,0x1
c00164a2:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c00164a7:	85 c0                	test   eax,eax
c00164a9:	75 09                	jne    c00164b4 <milliTenthSleepUntil(unsigned int)+0x78>
c00164ab:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c00164b0:	85 c0                	test   eax,eax
c00164b2:	75 14                	jne    c00164c8 <milliTenthSleepUntil(unsigned int)+0x8c>
c00164b4:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00164b9:	83 e8 01             	sub    eax,0x1
c00164bc:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00164c1:	75 89                	jne    c001644c <milliTenthSleepUntil(unsigned int)+0x10>
c00164c3:	fb                   	sti    
c00164c4:	83 c4 0c             	add    esp,0xc
c00164c7:	c3                   	ret    
c00164c8:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c00164d2:	e8 d5 fc ff ff       	call   c00161ac <schedule()>
c00164d7:	eb db                	jmp    c00164b4 <milliTenthSleepUntil(unsigned int)+0x78>
c00164d9:	8d 76 00             	lea    esi,[esi+0x0]

c00164dc <milliTenthSleep(unsigned int)>:
c00164dc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00164e0:	a1 ec b8 02 c0       	mov    eax,ds:0xc002b8ec
c00164e5:	01 c2                	add    edx,eax
c00164e7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00164eb:	e9 4c ff ff ff       	jmp    c001643c <milliTenthSleepUntil(unsigned int)>

c00164f0 <sleep(unsigned int)>:
c00164f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00164f4:	8d 04 80             	lea    eax,[eax+eax*4]
c00164f7:	8d 04 80             	lea    eax,[eax+eax*4]
c00164fa:	8d 04 80             	lea    eax,[eax+eax*4]
c00164fd:	8d 04 80             	lea    eax,[eax+eax*4]
c0016500:	c1 e0 04             	shl    eax,0x4
c0016503:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016507:	eb d3                	jmp    c00164dc <milliTenthSleep(unsigned int)>
c0016509:	90                   	nop
c001650a:	66 90                	xchg   ax,ax

c001650c <Semaphore::acquire()>:
c001650c:	83 ec 0c             	sub    esp,0xc
c001650f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016513:	fa                   	cli    
c0016514:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016519:	83 c0 01             	add    eax,0x1
c001651c:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016521:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c0016526:	8d 48 01             	lea    ecx,[eax+0x1]
c0016529:	89 0d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ecx
c001652f:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0016532:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c0016534:	7d 2e                	jge    c0016564 <Semaphore::acquire()+0x58>
c0016536:	83 c1 01             	add    ecx,0x1
c0016539:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c001653c:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c0016541:	85 c0                	test   eax,eax
c0016543:	75 0b                	jne    c0016550 <Semaphore::acquire()+0x44>
c0016545:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c001654a:	85 c0                	test   eax,eax
c001654c:	75 66                	jne    c00165b4 <Semaphore::acquire()+0xa8>
c001654e:	66 90                	xchg   ax,ax
c0016550:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016555:	83 e8 01             	sub    eax,0x1
c0016558:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c001655d:	75 01                	jne    c0016560 <Semaphore::acquire()+0x54>
c001655f:	fb                   	sti    
c0016560:	83 c4 0c             	add    esp,0xc
c0016563:	c3                   	ret    
c0016564:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016569:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0016570:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0016573:	85 c9                	test   ecx,ecx
c0016575:	74 51                	je     c00165c8 <Semaphore::acquire()+0xbc>
c0016577:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001657a:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016580:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c0016583:	90                   	nop
c0016584:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016589:	83 ec 0c             	sub    esp,0xc
c001658c:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c001658f:	68 58 2b 02 c0       	push   0xc0022b58
c0016594:	e8 dc 43 ff ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c0016599:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c00165a0:	e8 1b fe ff ff       	call   c00163c0 <blockTask(TaskState)>
c00165a5:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c00165aa:	83 c4 10             	add    esp,0x10
c00165ad:	83 e8 01             	sub    eax,0x1
c00165b0:	eb 8a                	jmp    c001653c <Semaphore::acquire()+0x30>
c00165b2:	66 90                	xchg   ax,ax
c00165b4:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c00165be:	e8 e9 fb ff ff       	call   c00161ac <schedule()>
c00165c3:	eb 8b                	jmp    c0016550 <Semaphore::acquire()+0x44>
c00165c5:	8d 76 00             	lea    esi,[esi+0x0]
c00165c8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00165cd:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00165d0:	eb b2                	jmp    c0016584 <Semaphore::acquire()+0x78>
c00165d2:	66 90                	xchg   ax,ax

c00165d4 <taskReturned>:
c00165d4:	83 ec 18             	sub    esp,0x18
c00165d7:	68 78 2b 02 c0       	push   0xc0022b78
c00165dc:	e8 e6 b0 ff ff       	call   c00116c7 <KePanic(char const*)>
c00165e1:	83 c4 10             	add    esp,0x10
c00165e4:	83 ec 0c             	sub    esp,0xc
c00165e7:	6a 02                	push   0x2
c00165e9:	e8 d2 fd ff ff       	call   c00163c0 <blockTask(TaskState)>
c00165ee:	fa                   	cli    
c00165ef:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00165f4:	83 c0 01             	add    eax,0x1
c00165f7:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00165fc:	e8 ab fb ff ff       	call   c00161ac <schedule()>
c0016601:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016606:	83 c4 10             	add    esp,0x10
c0016609:	83 e8 01             	sub    eax,0x1
c001660c:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016611:	85 c0                	test   eax,eax
c0016613:	75 cf                	jne    c00165e4 <taskReturned+0x10>
c0016615:	fb                   	sti    
c0016616:	eb cc                	jmp    c00165e4 <taskReturned+0x10>

c0016618 <Thr::processFromPID(int)>:
c0016618:	57                   	push   edi
c0016619:	56                   	push   esi
c001661a:	53                   	push   ebx
c001661b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001661f:	fa                   	cli    
c0016620:	8b 0d c8 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c8
c0016626:	83 ec 0c             	sub    esp,0xc
c0016629:	83 c1 01             	add    ecx,0x1
c001662c:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016631:	89 0d c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,ecx
c0016637:	e8 d0 97 00 00       	call   c001fe0c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001663c:	83 c4 10             	add    esp,0x10
c001663f:	89 c7                	mov    edi,eax
c0016641:	eb 15                	jmp    c0016658 <Thr::processFromPID(int)+0x40>
c0016643:	90                   	nop
c0016644:	83 ec 0c             	sub    esp,0xc
c0016647:	68 e4 c6 02 c0       	push   0xc002c6e4
c001664c:	e8 bb 97 00 00       	call   c001fe0c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016651:	83 c4 10             	add    esp,0x10
c0016654:	39 f8                	cmp    eax,edi
c0016656:	74 50                	je     c00166a8 <Thr::processFromPID(int)+0x90>
c0016658:	83 ec 0c             	sub    esp,0xc
c001665b:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016660:	e8 a7 97 00 00       	call   c001fe0c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016665:	c7 04 24 e4 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6e4
c001666c:	89 c3                	mov    ebx,eax
c001666e:	e8 a1 97 00 00       	call   c001fe14 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016673:	58                   	pop    eax
c0016674:	5a                   	pop    edx
c0016675:	53                   	push   ebx
c0016676:	68 e4 c6 02 c0       	push   0xc002c6e4
c001667b:	e8 50 98 00 00       	call   c001fed0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016680:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016683:	83 c4 10             	add    esp,0x10
c0016686:	39 30                	cmp    DWORD PTR [eax],esi
c0016688:	75 ba                	jne    c0016644 <Thr::processFromPID(int)+0x2c>
c001668a:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001668f:	83 e8 01             	sub    eax,0x1
c0016692:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016697:	74 0b                	je     c00166a4 <Thr::processFromPID(int)+0x8c>
c0016699:	8d 76 00             	lea    esi,[esi+0x0]
c001669c:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001669f:	5b                   	pop    ebx
c00166a0:	5e                   	pop    esi
c00166a1:	5f                   	pop    edi
c00166a2:	c3                   	ret    
c00166a3:	90                   	nop
c00166a4:	fb                   	sti    
c00166a5:	eb f5                	jmp    c001669c <Thr::processFromPID(int)+0x84>
c00166a7:	90                   	nop
c00166a8:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00166ad:	83 e8 01             	sub    eax,0x1
c00166b0:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00166b5:	75 05                	jne    c00166bc <Thr::processFromPID(int)+0xa4>
c00166b7:	fb                   	sti    
c00166b8:	5b                   	pop    ebx
c00166b9:	5e                   	pop    esi
c00166ba:	5f                   	pop    edi
c00166bb:	c3                   	ret    
c00166bc:	5b                   	pop    ebx
c00166bd:	31 c0                	xor    eax,eax
c00166bf:	5e                   	pop    esi
c00166c0:	5f                   	pop    edi
c00166c1:	c3                   	ret    
c00166c2:	66 90                	xchg   ax,ax

c00166c4 <unblockTask(ThreadControlBlock*)>:
c00166c4:	53                   	push   ebx
c00166c5:	83 ec 08             	sub    esp,0x8
c00166c8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00166cc:	fa                   	cli    
c00166cd:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00166d2:	83 c0 01             	add    eax,0x1
c00166d5:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00166da:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00166dd:	85 c0                	test   eax,eax
c00166df:	74 67                	je     c0016748 <unblockTask(ThreadControlBlock*)+0x84>
c00166e1:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00166e4:	83 f8 01             	cmp    eax,0x1
c00166e7:	74 37                	je     c0016720 <unblockTask(ThreadControlBlock*)+0x5c>
c00166e9:	83 ec 0c             	sub    esp,0xc
c00166ec:	68 e4 c6 02 c0       	push   0xc002c6e4
c00166f1:	e8 16 97 00 00       	call   c001fe0c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00166f6:	83 c4 10             	add    esp,0x10
c00166f9:	85 c0                	test   eax,eax
c00166fb:	75 1b                	jne    c0016718 <unblockTask(ThreadControlBlock*)+0x54>
c00166fd:	eb 5d                	jmp    c001675c <unblockTask(ThreadControlBlock*)+0x98>
c00166ff:	90                   	nop
c0016700:	83 ec 08             	sub    esp,0x8
c0016703:	50                   	push   eax
c0016704:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016709:	e8 1e 9a 00 00       	call   c002012c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001670e:	83 c4 10             	add    esp,0x10
c0016711:	85 c0                	test   eax,eax
c0016713:	74 47                	je     c001675c <unblockTask(ThreadControlBlock*)+0x98>
c0016715:	8d 76 00             	lea    esi,[esi+0x0]
c0016718:	39 c3                	cmp    ebx,eax
c001671a:	75 e4                	jne    c0016700 <unblockTask(ThreadControlBlock*)+0x3c>
c001671c:	eb 12                	jmp    c0016730 <unblockTask(ThreadControlBlock*)+0x6c>
c001671e:	66 90                	xchg   ax,ax
c0016720:	83 ec 0c             	sub    esp,0xc
c0016723:	68 f7 2a 02 c0       	push   0xc0022af7
c0016728:	e8 48 42 ff ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c001672d:	83 c4 10             	add    esp,0x10
c0016730:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016735:	83 e8 01             	sub    eax,0x1
c0016738:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c001673d:	75 01                	jne    c0016740 <unblockTask(ThreadControlBlock*)+0x7c>
c001673f:	fb                   	sti    
c0016740:	83 c4 08             	add    esp,0x8
c0016743:	5b                   	pop    ebx
c0016744:	c3                   	ret    
c0016745:	8d 76 00             	lea    esi,[esi+0x0]
c0016748:	83 ec 0c             	sub    esp,0xc
c001674b:	68 e0 2a 02 c0       	push   0xc0022ae0
c0016750:	e8 20 42 ff ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c0016755:	83 c4 10             	add    esp,0x10
c0016758:	eb d6                	jmp    c0016730 <unblockTask(ThreadControlBlock*)+0x6c>
c001675a:	66 90                	xchg   ax,ax
c001675c:	83 ec 08             	sub    esp,0x8
c001675f:	53                   	push   ebx
c0016760:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016765:	e8 66 97 00 00       	call   c001fed0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001676a:	83 c4 10             	add    esp,0x10
c001676d:	eb c1                	jmp    c0016730 <unblockTask(ThreadControlBlock*)+0x6c>
c001676f:	90                   	nop

c0016770 <cleanupTerminatedTask(ThreadControlBlock*)>:
c0016770:	55                   	push   ebp
c0016771:	57                   	push   edi
c0016772:	56                   	push   esi
c0016773:	53                   	push   ebx
c0016774:	83 ec 1c             	sub    esp,0x1c
c0016777:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001677b:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001677e:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c0016784:	85 ed                	test   ebp,ebp
c0016786:	7e 28                	jle    c00167b0 <cleanupTerminatedTask(ThreadControlBlock*)+0x40>
c0016788:	31 f6                	xor    esi,esi
c001678a:	66 90                	xchg   ax,ax
c001678c:	83 ec 0c             	sub    esp,0xc
c001678f:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c0016796:	83 c6 01             	add    esi,0x1
c0016799:	57                   	push   edi
c001679a:	e8 57 13 ff ff       	call   c0007af6 <free>
c001679f:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00167a2:	83 c4 10             	add    esp,0x10
c00167a5:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c00167ab:	7f df                	jg     c001678c <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c00167ad:	8d 76 00             	lea    esi,[esi+0x0]
c00167b0:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c00167ba:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00167bf:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c00167c2:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c00167c5:	d3 c0                	rol    eax,cl
c00167c7:	66 8b 8a 04 05 00 00 	mov    cx,WORD PTR [edx+0x504]
c00167ce:	21 c8                	and    eax,ecx
c00167d0:	66 89 82 04 05 00 00 	mov    WORD PTR [edx+0x504],ax
c00167d7:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00167da:	89 f7                	mov    edi,esi
c00167dc:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c00167e4:	0f 85 72 01 00 00    	jne    c001695c <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c00167ea:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c00167f0:	85 ed                	test   ebp,ebp
c00167f2:	74 1c                	je     c0016810 <cleanupTerminatedTask(ThreadControlBlock*)+0xa0>
c00167f4:	83 ec 0c             	sub    esp,0xc
c00167f7:	55                   	push   ebp
c00167f8:	e8 db ab ff ff       	call   c00113d8 <EnvVarContainer::~EnvVarContainer()>
c00167fd:	59                   	pop    ecx
c00167fe:	5e                   	pop    esi
c00167ff:	6a 0c                	push   0xc
c0016801:	55                   	push   ebp
c0016802:	e8 41 40 ff ff       	call   c000a848 <operator delete(void*, unsigned long)>
c0016807:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c001680a:	83 c4 10             	add    esp,0x10
c001680d:	89 f7                	mov    edi,esi
c001680f:	90                   	nop
c0016810:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0016816:	85 c0                	test   eax,eax
c0016818:	0f 84 b2 00 00 00    	je     c00168d0 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c001681e:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c0016821:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0016825:	31 c9                	xor    ecx,ecx
c0016827:	eb 17                	jmp    c0016840 <cleanupTerminatedTask(ThreadControlBlock*)+0xd0>
c0016829:	8d 76 00             	lea    esi,[esi+0x0]
c001682c:	83 c1 01             	add    ecx,0x1
c001682f:	83 f9 10             	cmp    ecx,0x10
c0016832:	0f 84 98 00 00 00    	je     c00168d0 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c0016838:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c001683e:	66 90                	xchg   ax,ax
c0016840:	0f b7 90 04 05 00 00 	movzx  edx,WORD PTR [eax+0x504]
c0016847:	d3 fa                	sar    edx,cl
c0016849:	80 e2 01             	and    dl,0x1
c001684c:	74 de                	je     c001682c <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c001684e:	8d 14 c9             	lea    edx,[ecx+ecx*8]
c0016851:	01 d2                	add    edx,edx
c0016853:	01 ca                	add    edx,ecx
c0016855:	8d 14 92             	lea    edx,[edx+edx*4]
c0016858:	01 d0                	add    eax,edx
c001685a:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0016860:	83 fd 07             	cmp    ebp,0x7
c0016863:	75 c7                	jne    c001682c <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0016865:	05 40 02 00 00       	add    eax,0x240
c001686a:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c001686d:	83 fd ff             	cmp    ebp,0xffffffff
c0016870:	0f 8c ee 00 00 00    	jl     c0016964 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c0016876:	0f 84 ac 01 00 00    	je     c0016a28 <cleanupTerminatedTask(ThreadControlBlock*)+0x2b8>
c001687c:	85 ed                	test   ebp,ebp
c001687e:	0f 84 90 01 00 00    	je     c0016a14 <cleanupTerminatedTask(ThreadControlBlock*)+0x2a4>
c0016884:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c0016886:	75 a4                	jne    c001682c <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0016888:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c001688e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0016892:	01 d0                	add    eax,edx
c0016894:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0016898:	83 ec 0c             	sub    esp,0xc
c001689b:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c00168a1:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00168a4:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00168aa:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c00168b1:	50                   	push   eax
c00168b2:	e8 0d fe ff ff       	call   c00166c4 <unblockTask(ThreadControlBlock*)>
c00168b7:	83 c4 10             	add    esp,0x10
c00168ba:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00168bd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00168c1:	89 f7                	mov    edi,esi
c00168c3:	83 c1 01             	add    ecx,0x1
c00168c6:	83 f9 10             	cmp    ecx,0x10
c00168c9:	0f 85 69 ff ff ff    	jne    c0016838 <cleanupTerminatedTask(ThreadControlBlock*)+0xc8>
c00168cf:	90                   	nop
c00168d0:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c00168d6:	85 c0                	test   eax,eax
c00168d8:	74 62                	je     c001693c <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c00168da:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c00168e0:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c00168e6:	74 54                	je     c001693c <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c00168e8:	83 ec 0c             	sub    esp,0xc
c00168eb:	68 e4 c6 02 c0       	push   0xc002c6e4
c00168f0:	e8 17 95 00 00       	call   c001fe0c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00168f5:	c7 04 24 e4 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6e4
c00168fc:	89 c7                	mov    edi,eax
c00168fe:	e8 ed 94 00 00       	call   c001fdf0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016903:	83 c4 10             	add    esp,0x10
c0016906:	84 c0                	test   al,al
c0016908:	0f 84 ce 00 00 00    	je     c00169dc <cleanupTerminatedTask(ThreadControlBlock*)+0x26c>
c001690e:	66 90                	xchg   ax,ax
c0016910:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016913:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0016919:	85 d2                	test   edx,edx
c001691b:	74 0f                	je     c001692c <cleanupTerminatedTask(ThreadControlBlock*)+0x1bc>
c001691d:	83 ec 0c             	sub    esp,0xc
c0016920:	8b 02                	mov    eax,DWORD PTR [edx]
c0016922:	52                   	push   edx
c0016923:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016926:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016929:	83 c4 10             	add    esp,0x10
c001692c:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c0016936:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c0016939:	8d 76 00             	lea    esi,[esi+0x0]
c001693c:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c0016942:	85 db                	test   ebx,ebx
c0016944:	74 16                	je     c001695c <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c0016946:	83 ec 0c             	sub    esp,0xc
c0016949:	53                   	push   ebx
c001694a:	e8 93 32 ff ff       	call   c0009be2 <VAS::~VAS()>
c001694f:	58                   	pop    eax
c0016950:	5a                   	pop    edx
c0016951:	6a 14                	push   0x14
c0016953:	53                   	push   ebx
c0016954:	e8 ef 3e ff ff       	call   c000a848 <operator delete(void*, unsigned long)>
c0016959:	83 c4 10             	add    esp,0x10
c001695c:	83 c4 1c             	add    esp,0x1c
c001695f:	5b                   	pop    ebx
c0016960:	5e                   	pop    esi
c0016961:	5f                   	pop    edi
c0016962:	5d                   	pop    ebp
c0016963:	c3                   	ret    
c0016964:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0016968:	83 ec 0c             	sub    esp,0xc
c001696b:	68 ac 2b 02 c0       	push   0xc0022bac
c0016970:	e8 52 ad ff ff       	call   c00116c7 <KePanic(char const*)>
c0016975:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0016978:	83 c4 10             	add    esp,0x10
c001697b:	89 f7                	mov    edi,esi
c001697d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016981:	e9 a6 fe ff ff       	jmp    c001682c <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0016986:	66 90                	xchg   ax,ax
c0016988:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001698e:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c0016994:	75 1e                	jne    c00169b4 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0016996:	83 ec 0c             	sub    esp,0xc
c0016999:	68 14 2c 02 c0       	push   0xc0022c14
c001699e:	e8 d2 3f ff ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c00169a3:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00169aa:	e8 11 fa ff ff       	call   c00163c0 <blockTask(TaskState)>
c00169af:	83 c4 10             	add    esp,0x10
c00169b2:	66 90                	xchg   ax,ax
c00169b4:	83 ec 08             	sub    esp,0x8
c00169b7:	56                   	push   esi
c00169b8:	68 e4 c6 02 c0       	push   0xc002c6e4
c00169bd:	e8 0e 95 00 00       	call   c001fed0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00169c2:	c7 04 24 e4 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6e4
c00169c9:	e8 3e 94 00 00       	call   c001fe0c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00169ce:	83 c4 10             	add    esp,0x10
c00169d1:	39 f8                	cmp    eax,edi
c00169d3:	0f 84 37 ff ff ff    	je     c0016910 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c00169d9:	8d 76 00             	lea    esi,[esi+0x0]
c00169dc:	83 ec 0c             	sub    esp,0xc
c00169df:	68 e4 c6 02 c0       	push   0xc002c6e4
c00169e4:	e8 23 94 00 00       	call   c001fe0c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00169e9:	c7 04 24 e4 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6e4
c00169f0:	89 c6                	mov    esi,eax
c00169f2:	e8 1d 94 00 00       	call   c001fe14 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00169f7:	83 c4 10             	add    esp,0x10
c00169fa:	39 f3                	cmp    ebx,esi
c00169fc:	74 b6                	je     c00169b4 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c00169fe:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c0016a01:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016a04:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c0016a0a:	75 a8                	jne    c00169b4 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0016a0c:	e9 77 ff ff ff       	jmp    c0016988 <cleanupTerminatedTask(ThreadControlBlock*)+0x218>
c0016a11:	8d 76 00             	lea    esi,[esi+0x0]
c0016a14:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0016a18:	83 ec 0c             	sub    esp,0xc
c0016a1b:	68 e0 2b 02 c0       	push   0xc0022be0
c0016a20:	e9 4b ff ff ff       	jmp    c0016970 <cleanupTerminatedTask(ThreadControlBlock*)+0x200>
c0016a25:	8d 76 00             	lea    esi,[esi+0x0]
c0016a28:	8b 36                	mov    esi,DWORD PTR [esi]
c0016a2a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0016a2e:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c0016a31:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016a34:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c0016a3a:	01 d7                	add    edi,edx
c0016a3c:	89 f8                	mov    eax,edi
c0016a3e:	e9 51 fe ff ff       	jmp    c0016894 <cleanupTerminatedTask(ThreadControlBlock*)+0x124>
c0016a43:	90                   	nop

c0016a44 <cleanerTaskFunction(void*)>:
c0016a44:	53                   	push   ebx
c0016a45:	83 ec 08             	sub    esp,0x8
c0016a48:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016a4d:	83 e8 01             	sub    eax,0x1
c0016a50:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016a55:	75 01                	jne    c0016a58 <cleanerTaskFunction(void*)+0x14>
c0016a57:	fb                   	sti    
c0016a58:	fa                   	cli    
c0016a59:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016a5e:	80 3d ac c6 02 c0 00 	cmp    BYTE PTR ds:0xc002c6ac,0x0
c0016a65:	8d 50 01             	lea    edx,[eax+0x1]
c0016a68:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c0016a6e:	0f 84 c4 00 00 00    	je     c0016b38 <cleanerTaskFunction(void*)+0xf4>
c0016a74:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016a79:	85 c0                	test   eax,eax
c0016a7b:	75 03                	jne    c0016a80 <cleanerTaskFunction(void*)+0x3c>
c0016a7d:	fb                   	sti    
c0016a7e:	66 90                	xchg   ax,ax
c0016a80:	c6 05 ac c6 02 c0 00 	mov    BYTE PTR ds:0xc002c6ac,0x0
c0016a87:	fa                   	cli    
c0016a88:	8b 15 c8 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6c8
c0016a8e:	8b 0d c4 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c4
c0016a94:	83 c2 01             	add    edx,0x1
c0016a97:	83 c1 01             	add    ecx,0x1
c0016a9a:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c0016aa0:	89 0d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ecx
c0016aa6:	fa                   	cli    
c0016aa7:	8b 1d c8 c6 02 c0    	mov    ebx,DWORD PTR ds:0xc002c6c8
c0016aad:	83 c3 01             	add    ebx,0x1
c0016ab0:	89 1d c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,ebx
c0016ab6:	eb 28                	jmp    c0016ae0 <cleanerTaskFunction(void*)+0x9c>
c0016ab8:	83 ec 0c             	sub    esp,0xc
c0016abb:	68 cc c6 02 c0       	push   0xc002c6cc
c0016ac0:	e8 47 93 00 00       	call   c001fe0c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016ac5:	c7 04 24 cc c6 02 c0 	mov    DWORD PTR [esp],0xc002c6cc
c0016acc:	89 c3                	mov    ebx,eax
c0016ace:	e8 41 93 00 00       	call   c001fe14 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016ad3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016ad6:	e8 95 fc ff ff       	call   c0016770 <cleanupTerminatedTask(ThreadControlBlock*)>
c0016adb:	83 c4 10             	add    esp,0x10
c0016ade:	66 90                	xchg   ax,ax
c0016ae0:	83 ec 0c             	sub    esp,0xc
c0016ae3:	68 cc c6 02 c0       	push   0xc002c6cc
c0016ae8:	e8 03 93 00 00       	call   c001fdf0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016aed:	83 c4 10             	add    esp,0x10
c0016af0:	84 c0                	test   al,al
c0016af2:	74 c4                	je     c0016ab8 <cleanerTaskFunction(void*)+0x74>
c0016af4:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016af9:	83 e8 01             	sub    eax,0x1
c0016afc:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016b01:	75 01                	jne    c0016b04 <cleanerTaskFunction(void*)+0xc0>
c0016b03:	fb                   	sti    
c0016b04:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c0016b09:	83 e8 01             	sub    eax,0x1
c0016b0c:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c0016b11:	0f 85 31 ff ff ff    	jne    c0016a48 <cleanerTaskFunction(void*)+0x4>
c0016b17:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c0016b1c:	85 c0                	test   eax,eax
c0016b1e:	0f 84 24 ff ff ff    	je     c0016a48 <cleanerTaskFunction(void*)+0x4>
c0016b24:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c0016b2e:	e8 79 f6 ff ff       	call   c00161ac <schedule()>
c0016b33:	e9 10 ff ff ff       	jmp    c0016a48 <cleanerTaskFunction(void*)+0x4>
c0016b38:	83 ec 0c             	sub    esp,0xc
c0016b3b:	6a 02                	push   0x2
c0016b3d:	e8 56 f8 ff ff       	call   c0016398 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0016b42:	83 c4 10             	add    esp,0x10
c0016b45:	e9 36 ff ff ff       	jmp    c0016a80 <cleanerTaskFunction(void*)+0x3c>
c0016b4a:	66 90                	xchg   ax,ax

c0016b4c <terminateTask(int)>:
c0016b4c:	83 ec 14             	sub    esp,0x14
c0016b4f:	fa                   	cli    
c0016b50:	8b 15 c8 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6c8
c0016b56:	8b 0d c4 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c4
c0016b5c:	83 c2 01             	add    edx,0x1
c0016b5f:	83 c1 01             	add    ecx,0x1
c0016b62:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c0016b68:	89 0d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ecx
c0016b6e:	fa                   	cli    
c0016b6f:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016b74:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016b78:	83 c0 01             	add    eax,0x1
c0016b7b:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016b80:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016b85:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c0016b88:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016b8d:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0016b90:	50                   	push   eax
c0016b91:	68 cc c6 02 c0       	push   0xc002c6cc
c0016b96:	e8 35 93 00 00       	call   c001fed0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016b9b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016ba0:	83 c4 10             	add    esp,0x10
c0016ba3:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0016baa:	a1 a8 c6 02 c0       	mov    eax,ds:0xc002c6a8
c0016baf:	85 c0                	test   eax,eax
c0016bb1:	74 65                	je     c0016c18 <terminateTask(int)+0xcc>
c0016bb3:	83 ec 0c             	sub    esp,0xc
c0016bb6:	c6 05 ac c6 02 c0 01 	mov    BYTE PTR ds:0xc002c6ac,0x1
c0016bbd:	50                   	push   eax
c0016bbe:	e8 01 fb ff ff       	call   c00166c4 <unblockTask(ThreadControlBlock*)>
c0016bc3:	83 c4 10             	add    esp,0x10
c0016bc6:	66 90                	xchg   ax,ax
c0016bc8:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016bcd:	83 e8 01             	sub    eax,0x1
c0016bd0:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016bd5:	75 01                	jne    c0016bd8 <terminateTask(int)+0x8c>
c0016bd7:	fb                   	sti    
c0016bd8:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c0016bdd:	83 e8 01             	sub    eax,0x1
c0016be0:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c0016be5:	75 09                	jne    c0016bf0 <terminateTask(int)+0xa4>
c0016be7:	83 3d c0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6c0,0x0
c0016bee:	75 3c                	jne    c0016c2c <terminateTask(int)+0xe0>
c0016bf0:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016bf5:	83 e8 01             	sub    eax,0x1
c0016bf8:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016bfd:	75 01                	jne    c0016c00 <terminateTask(int)+0xb4>
c0016bff:	fb                   	sti    
c0016c00:	fa                   	cli    
c0016c01:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016c06:	83 c0 01             	add    eax,0x1
c0016c09:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016c0e:	66 90                	xchg   ax,ax
c0016c10:	e8 97 f5 ff ff       	call   c00161ac <schedule()>
c0016c15:	eb d9                	jmp    c0016bf0 <terminateTask(int)+0xa4>
c0016c17:	90                   	nop
c0016c18:	83 ec 0c             	sub    esp,0xc
c0016c1b:	68 0e 2b 02 c0       	push   0xc0022b0e
c0016c20:	e8 50 3d ff ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c0016c25:	83 c4 10             	add    esp,0x10
c0016c28:	eb 9e                	jmp    c0016bc8 <terminateTask(int)+0x7c>
c0016c2a:	66 90                	xchg   ax,ax
c0016c2c:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c0016c36:	eb d8                	jmp    c0016c10 <terminateTask(int)+0xc4>

c0016c38 <Thr::terminateFromIRQ(int)>:
c0016c38:	83 ec 18             	sub    esp,0x18
c0016c3b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016c3f:	50                   	push   eax
c0016c40:	e8 07 ff ff ff       	call   c0016b4c <terminateTask(int)>
c0016c45:	90                   	nop
c0016c46:	66 90                	xchg   ax,ax

c0016c48 <Semaphore::release()>:
c0016c48:	83 ec 0c             	sub    esp,0xc
c0016c4b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016c4f:	fa                   	cli    
c0016c50:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016c55:	83 c0 01             	add    eax,0x1
c0016c58:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016c5d:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c0016c62:	8d 48 01             	lea    ecx,[eax+0x1]
c0016c65:	89 0d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ecx
c0016c6b:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0016c6e:	85 c9                	test   ecx,ecx
c0016c70:	74 42                	je     c0016cb4 <Semaphore::release()+0x6c>
c0016c72:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0016c75:	83 ec 0c             	sub    esp,0xc
c0016c78:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0016c7b:	51                   	push   ecx
c0016c7c:	e8 43 fa ff ff       	call   c00166c4 <unblockTask(ThreadControlBlock*)>
c0016c81:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c0016c86:	83 c4 10             	add    esp,0x10
c0016c89:	83 e8 01             	sub    eax,0x1
c0016c8c:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c0016c91:	85 c0                	test   eax,eax
c0016c93:	75 0b                	jne    c0016ca0 <Semaphore::release()+0x58>
c0016c95:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c0016c9a:	85 c0                	test   eax,eax
c0016c9c:	75 22                	jne    c0016cc0 <Semaphore::release()+0x78>
c0016c9e:	66 90                	xchg   ax,ax
c0016ca0:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016ca5:	83 e8 01             	sub    eax,0x1
c0016ca8:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016cad:	75 01                	jne    c0016cb0 <Semaphore::release()+0x68>
c0016caf:	fb                   	sti    
c0016cb0:	83 c4 0c             	add    esp,0xc
c0016cb3:	c3                   	ret    
c0016cb4:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0016cb7:	83 e9 01             	sub    ecx,0x1
c0016cba:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0016cbd:	eb cd                	jmp    c0016c8c <Semaphore::release()+0x44>
c0016cbf:	90                   	nop
c0016cc0:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c0016cca:	e8 dd f4 ff ff       	call   c00161ac <schedule()>
c0016ccf:	eb cf                	jmp    c0016ca0 <Semaphore::release()+0x58>
c0016cd1:	8d 76 00             	lea    esi,[esi+0x0]

c0016cd4 <__static_initialization_and_destruction_0(int, int)>:
c0016cd4:	83 ec 0c             	sub    esp,0xc
c0016cd7:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0016cdc:	0f 85 8e 00 00 00    	jne    c0016d70 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0016ce2:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0016cea:	0f 85 80 00 00 00    	jne    c0016d70 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0016cf0:	83 ec 0c             	sub    esp,0xc
c0016cf3:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016cf8:	e8 87 94 00 00       	call   c0020184 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0016cfd:	83 c4 10             	add    esp,0x10
c0016d00:	83 ec 04             	sub    esp,0x4
c0016d03:	68 e4 37 02 c0       	push   0xc00237e4
c0016d08:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016d0d:	68 34 01 02 c0       	push   0xc0020134
c0016d12:	e8 e1 3a ff ff       	call   c000a7f8 <__cxa_atexit>
c0016d17:	83 c4 10             	add    esp,0x10
c0016d1a:	83 ec 0c             	sub    esp,0xc
c0016d1d:	68 d8 c6 02 c0       	push   0xc002c6d8
c0016d22:	e8 5d 94 00 00       	call   c0020184 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0016d27:	83 c4 10             	add    esp,0x10
c0016d2a:	83 ec 04             	sub    esp,0x4
c0016d2d:	68 e4 37 02 c0       	push   0xc00237e4
c0016d32:	68 d8 c6 02 c0       	push   0xc002c6d8
c0016d37:	68 34 01 02 c0       	push   0xc0020134
c0016d3c:	e8 b7 3a ff ff       	call   c000a7f8 <__cxa_atexit>
c0016d41:	83 c4 10             	add    esp,0x10
c0016d44:	83 ec 0c             	sub    esp,0xc
c0016d47:	68 cc c6 02 c0       	push   0xc002c6cc
c0016d4c:	e8 33 94 00 00       	call   c0020184 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0016d51:	83 c4 10             	add    esp,0x10
c0016d54:	83 ec 04             	sub    esp,0x4
c0016d57:	68 e4 37 02 c0       	push   0xc00237e4
c0016d5c:	68 cc c6 02 c0       	push   0xc002c6cc
c0016d61:	68 34 01 02 c0       	push   0xc0020134
c0016d66:	e8 8d 3a ff ff       	call   c000a7f8 <__cxa_atexit>
c0016d6b:	83 c4 10             	add    esp,0x10
c0016d6e:	66 90                	xchg   ax,ax
c0016d70:	90                   	nop
c0016d71:	83 c4 0c             	add    esp,0xc
c0016d74:	c3                   	ret    
c0016d75:	8d 76 00             	lea    esi,[esi+0x0]

c0016d78 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c0016d78:	83 ec 0c             	sub    esp,0xc
c0016d7b:	83 ec 08             	sub    esp,0x8
c0016d7e:	68 ff ff 00 00       	push   0xffff
c0016d83:	6a 01                	push   0x1
c0016d85:	e8 4a ff ff ff       	call   c0016cd4 <__static_initialization_and_destruction_0(int, int)>
c0016d8a:	83 c4 10             	add    esp,0x10
c0016d8d:	83 c4 0c             	add    esp,0xc
c0016d90:	c3                   	ret    

c0016d91 <Vm::inbv(unsigned short)>:
c0016d91:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016d95:	66 81 fa fe fe       	cmp    dx,0xfefe
c0016d9a:	75 06                	jne    c0016da2 <Vm::inbv(unsigned short)+0x11>
c0016d9c:	a0 2c c7 02 c0       	mov    al,ds:0xc002c72c
c0016da1:	c3                   	ret    
c0016da2:	ec                   	in     al,dx
c0016da3:	c3                   	ret    

c0016da4 <Vm::outbv(unsigned short, unsigned char)>:
c0016da4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016da8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016dac:	66 81 fa fe fe       	cmp    dx,0xfefe
c0016db1:	75 25                	jne    c0016dd8 <Vm::outbv(unsigned short, unsigned char)+0x34>
c0016db3:	8b 0d 2c c7 02 c0    	mov    ecx,DWORD PTR ds:0xc002c72c
c0016db9:	8d 51 01             	lea    edx,[ecx+0x1]
c0016dbc:	88 81 40 c7 02 c0    	mov    BYTE PTR [ecx-0x3ffd38c0],al
c0016dc2:	89 15 2c c7 02 c0    	mov    DWORD PTR ds:0xc002c72c,edx
c0016dc8:	83 fa 20             	cmp    edx,0x20
c0016dcb:	75 0c                	jne    c0016dd9 <Vm::outbv(unsigned short, unsigned char)+0x35>
c0016dcd:	c7 05 2c c7 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc002c72c,0x1f
c0016dd7:	c3                   	ret    
c0016dd8:	ee                   	out    dx,al
c0016dd9:	c3                   	ret    

c0016dda <Vm::realToLinear(unsigned short, unsigned short)>:
c0016dda:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016ddf:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016de4:	c1 e0 04             	shl    eax,0x4
c0016de7:	01 d0                	add    eax,edx
c0016de9:	c3                   	ret    

c0016dea <Vm::getSegment(unsigned int)>:
c0016dea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016dee:	c1 e8 10             	shr    eax,0x10
c0016df1:	c3                   	ret    

c0016df2 <Vm::getOffset(unsigned int)>:
c0016df2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016df6:	c3                   	ret    

c0016df7 <Vm::mainloop2()>:
c0016df7:	83 ec 18             	sub    esp,0x18
c0016dfa:	fa                   	cli    
c0016dfb:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0016e01:	6a 02                	push   0x2
c0016e03:	c6 05 25 c7 02 c0 01 	mov    BYTE PTR ds:0xc002c725,0x1
c0016e0a:	e8 89 f5 ff ff       	call   c0016398 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0016e0f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016e14:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0016e18:	52                   	push   edx
c0016e19:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c0016e1d:	52                   	push   edx
c0016e1e:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c0016e22:	52                   	push   edx
c0016e23:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c0016e27:	50                   	push   eax
c0016e28:	e8 e2 93 fe ff       	call   c000020f <goToVM86>
c0016e2d:	83 c4 2c             	add    esp,0x2c
c0016e30:	c3                   	ret    

c0016e31 <Vm::mainVm8086Loop(void*)>:
c0016e31:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016e36:	48                   	dec    eax
c0016e37:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016e3c:	75 01                	jne    c0016e3f <Vm::mainVm8086Loop(void*)+0xe>
c0016e3e:	fb                   	sti    
c0016e3f:	eb b6                	jmp    c0016df7 <Vm::mainloop2()>

c0016e41 <Vm::mainloop3(unsigned long)>:
c0016e41:	83 ec 18             	sub    esp,0x18
c0016e44:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016e48:	fa                   	cli    
c0016e49:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0016e4f:	6a 02                	push   0x2
c0016e51:	c6 05 24 c7 02 c0 01 	mov    BYTE PTR ds:0xc002c724,0x1
c0016e58:	a3 20 c7 02 c0       	mov    ds:0xc002c720,eax
c0016e5d:	e8 36 f5 ff ff       	call   c0016398 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0016e62:	83 c4 1c             	add    esp,0x1c
c0016e65:	eb 90                	jmp    c0016df7 <Vm::mainloop2()>

c0016e67 <Vm::initialise8086()>:
c0016e67:	83 ec 0c             	sub    esp,0xc
c0016e6a:	68 80 00 00 00       	push   0x80
c0016e6f:	6a 00                	push   0x0
c0016e71:	68 31 6e 01 c0       	push   0xc0016e31
c0016e76:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c0016e7c:	e8 db f0 ff ff       	call   c0015f5c <Process::createThread(void (*)(void*), void*, int)>
c0016e81:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0016e88:	a3 28 c7 02 c0       	mov    ds:0xc002c728,eax
c0016e8d:	68 00 01 00 00       	push   0x100
c0016e92:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0016e97:	6a 00                	push   0x0
c0016e99:	6a 00                	push   0x0
c0016e9b:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016ea1:	e8 a4 30 ff ff       	call   c0009f4a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0016ea6:	83 c4 2c             	add    esp,0x2c
c0016ea9:	c3                   	ret    

c0016eaa <Vm::finish8086()>:
c0016eaa:	53                   	push   ebx
c0016eab:	83 ec 08             	sub    esp,0x8
c0016eae:	fa                   	cli    
c0016eaf:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0016eb5:	80 3d 24 c7 02 c0 00 	cmp    BYTE PTR ds:0xc002c724,0x0
c0016ebc:	75 15                	jne    c0016ed3 <Vm::finish8086()+0x29>
c0016ebe:	e8 e9 f2 ff ff       	call   c00161ac <schedule()>
c0016ec3:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016ec8:	48                   	dec    eax
c0016ec9:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016ece:	75 de                	jne    c0016eae <Vm::finish8086()+0x4>
c0016ed0:	fb                   	sti    
c0016ed1:	eb db                	jmp    c0016eae <Vm::finish8086()+0x4>
c0016ed3:	83 ec 0c             	sub    esp,0xc
c0016ed6:	8b 1d 20 c7 02 c0    	mov    ebx,DWORD PTR ds:0xc002c720
c0016edc:	ff 35 28 c7 02 c0    	push   DWORD PTR ds:0xc002c728
c0016ee2:	c6 05 24 c7 02 c0 00 	mov    BYTE PTR ds:0xc002c724,0x0
c0016ee9:	e8 d6 f7 ff ff       	call   c00166c4 <unblockTask(ThreadControlBlock*)>
c0016eee:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016ef3:	83 c4 10             	add    esp,0x10
c0016ef6:	8d 50 ff             	lea    edx,[eax-0x1]
c0016ef9:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c0016eff:	85 d2                	test   edx,edx
c0016f01:	75 01                	jne    c0016f04 <Vm::finish8086()+0x5a>
c0016f03:	fb                   	sti    
c0016f04:	89 d8                	mov    eax,ebx
c0016f06:	83 c4 08             	add    esp,0x8
c0016f09:	5b                   	pop    ebx
c0016f0a:	c3                   	ret    

c0016f0b <Vm::getOutput8086(unsigned char*)>:
c0016f0b:	57                   	push   edi
c0016f0c:	8b 0d 2c c7 02 c0    	mov    ecx,DWORD PTR ds:0xc002c72c
c0016f12:	56                   	push   esi
c0016f13:	be 40 c7 02 c0       	mov    esi,0xc002c740
c0016f18:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0016f1c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016f1e:	a1 2c c7 02 c0       	mov    eax,ds:0xc002c72c
c0016f23:	5e                   	pop    esi
c0016f24:	c7 05 2c c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c72c,0x0
c0016f2e:	5f                   	pop    edi
c0016f2f:	c3                   	ret    

c0016f30 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0016f30:	55                   	push   ebp
c0016f31:	57                   	push   edi
c0016f32:	56                   	push   esi
c0016f33:	53                   	push   ebx
c0016f34:	83 ec 0c             	sub    esp,0xc
c0016f37:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0016f3b:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0016f3f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0016f43:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0016f47:	fa                   	cli    
c0016f48:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0016f4e:	80 3d 25 c7 02 c0 00 	cmp    BYTE PTR ds:0xc002c725,0x0
c0016f55:	75 15                	jne    c0016f6c <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c0016f57:	e8 50 f2 ff ff       	call   c00161ac <schedule()>
c0016f5c:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016f61:	48                   	dec    eax
c0016f62:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016f67:	75 de                	jne    c0016f47 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0016f69:	fb                   	sti    
c0016f6a:	eb db                	jmp    c0016f47 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0016f6c:	a1 28 c7 02 c0       	mov    eax,ds:0xc002c728
c0016f71:	c7 05 2c c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c72c,0x0
c0016f7b:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0016f7f:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0016f83:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0016f87:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0016f8b:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0016f8f:	0f b7 ff             	movzx  edi,di
c0016f92:	0f b7 f6             	movzx  esi,si
c0016f95:	50                   	push   eax
c0016f96:	6a 20                	push   0x20
c0016f98:	6a 00                	push   0x0
c0016f9a:	68 40 c7 02 c0       	push   0xc002c740
c0016f9f:	e8 4c 95 fe ff       	call   c00004f0 <memset>
c0016fa4:	5a                   	pop    edx
c0016fa5:	59                   	pop    ecx
c0016fa6:	57                   	push   edi
c0016fa7:	56                   	push   esi
c0016fa8:	e8 2d fe ff ff       	call   c0016dda <Vm::realToLinear(unsigned short, unsigned short)>
c0016fad:	83 c4 10             	add    esp,0x10
c0016fb0:	89 c7                	mov    edi,eax
c0016fb2:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0016fb6:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0016fba:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016fbc:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016fc1:	c6 05 25 c7 02 c0 00 	mov    BYTE PTR ds:0xc002c725,0x0
c0016fc8:	48                   	dec    eax
c0016fc9:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016fce:	75 01                	jne    c0016fd1 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c0016fd0:	fb                   	sti    
c0016fd1:	83 ec 0c             	sub    esp,0xc
c0016fd4:	ff 35 28 c7 02 c0    	push   DWORD PTR ds:0xc002c728
c0016fda:	e8 e5 f6 ff ff       	call   c00166c4 <unblockTask(ThreadControlBlock*)>
c0016fdf:	83 c4 1c             	add    esp,0x1c
c0016fe2:	b0 01                	mov    al,0x1
c0016fe4:	5b                   	pop    ebx
c0016fe5:	5e                   	pop    esi
c0016fe6:	5f                   	pop    edi
c0016fe7:	5d                   	pop    ebp
c0016fe8:	c3                   	ret    

c0016fe9 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0016fe9:	55                   	push   ebp
c0016fea:	57                   	push   edi
c0016feb:	56                   	push   esi
c0016fec:	53                   	push   ebx
c0016fed:	83 ec 34             	sub    esp,0x34
c0016ff0:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0016ff4:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0016ff8:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0016ffc:	8b 6c 24 54          	mov    ebp,DWORD PTR [esp+0x54]
c0017000:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017004:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0017008:	68 3c 2c 02 c0       	push   0xc0022c3c
c001700d:	e8 63 39 ff ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c0017012:	83 c4 10             	add    esp,0x10
c0017015:	fa                   	cli    
c0017016:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c001701c:	8a 1d 25 c7 02 c0    	mov    bl,BYTE PTR ds:0xc002c725
c0017022:	84 db                	test   bl,bl
c0017024:	75 15                	jne    c001703b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x52>
c0017026:	e8 81 f1 ff ff       	call   c00161ac <schedule()>
c001702b:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0017030:	48                   	dec    eax
c0017031:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0017036:	75 dd                	jne    c0017015 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x2c>
c0017038:	fb                   	sti    
c0017039:	eb da                	jmp    c0017015 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x2c>
c001703b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001703f:	a1 28 c7 02 c0       	mov    eax,ds:0xc002c728
c0017044:	c7 05 2c c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c72c,0x0
c001704e:	66 89 50 5b          	mov    WORD PTR [eax+0x5b],dx
c0017052:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0017056:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c001705a:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c001705e:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0017062:	50                   	push   eax
c0017063:	6a 20                	push   0x20
c0017065:	6a 00                	push   0x0
c0017067:	68 40 c7 02 c0       	push   0xc002c740
c001706c:	e8 7f 94 fe ff       	call   c00004f0 <memset>
c0017071:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0017078:	e8 69 0a ff ff       	call   c0007ae6 <malloc>
c001707d:	83 c4 0c             	add    esp,0xc
c0017080:	89 c5                	mov    ebp,eax
c0017082:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c0017088:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001708c:	50                   	push   eax
c001708d:	e8 ea 4a ff ff       	call   c000bb7c <File::File(char const*, Process*)>
c0017092:	83 c4 10             	add    esp,0x10
c0017095:	85 ed                	test   ebp,ebp
c0017097:	75 0a                	jne    c00170a3 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xba>
c0017099:	83 ec 0c             	sub    esp,0xc
c001709c:	68 5e 2c 02 c0       	push   0xc0022c5e
c00170a1:	eb 2b                	jmp    c00170ce <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xe5>
c00170a3:	50                   	push   eax
c00170a4:	8d 44 24 17          	lea    eax,[esp+0x17]
c00170a8:	50                   	push   eax
c00170a9:	8d 44 24 20          	lea    eax,[esp+0x20]
c00170ad:	50                   	push   eax
c00170ae:	55                   	push   ebp
c00170af:	e8 e8 4d ff ff       	call   c000be9c <File::stat(unsigned long long*, bool*)>
c00170b4:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c00170b8:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c00170bc:	83 c4 10             	add    esp,0x10
c00170bf:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c00170c4:	74 27                	je     c00170ed <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x104>
c00170c6:	83 ec 0c             	sub    esp,0xc
c00170c9:	68 72 2c 02 c0       	push   0xc0022c72
c00170ce:	e8 f4 a5 ff ff       	call   c00116c7 <KePanic(char const*)>
c00170d3:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00170d8:	83 c4 10             	add    esp,0x10
c00170db:	48                   	dec    eax
c00170dc:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00170e1:	85 c0                	test   eax,eax
c00170e3:	75 01                	jne    c00170e6 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xfd>
c00170e5:	fb                   	sti    
c00170e6:	31 db                	xor    ebx,ebx
c00170e8:	e9 90 00 00 00       	jmp    c001717d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x194>
c00170ed:	51                   	push   ecx
c00170ee:	51                   	push   ecx
c00170ef:	6a 01                	push   0x1
c00170f1:	55                   	push   ebp
c00170f2:	e8 a3 4a ff ff       	call   c000bb9a <File::open(FileOpenMode)>
c00170f7:	83 c4 10             	add    esp,0x10
c00170fa:	85 c0                	test   eax,eax
c00170fc:	74 26                	je     c0017124 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x13b>
c00170fe:	83 ec 0c             	sub    esp,0xc
c0017101:	68 8b 2c 02 c0       	push   0xc0022c8b
c0017106:	e8 bc a5 ff ff       	call   c00116c7 <KePanic(char const*)>
c001710b:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0017110:	83 c4 10             	add    esp,0x10
c0017113:	48                   	dec    eax
c0017114:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0017119:	85 c0                	test   eax,eax
c001711b:	75 c9                	jne    c00170e6 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xfd>
c001711d:	fb                   	sti    
c001711e:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c0017122:	eb 59                	jmp    c001717d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x194>
c0017124:	0f b7 ff             	movzx  edi,di
c0017127:	50                   	push   eax
c0017128:	0f b7 f6             	movzx  esi,si
c001712b:	50                   	push   eax
c001712c:	57                   	push   edi
c001712d:	56                   	push   esi
c001712e:	e8 a7 fc ff ff       	call   c0016dda <Vm::realToLinear(unsigned short, unsigned short)>
c0017133:	5a                   	pop    edx
c0017134:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0017137:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001713b:	51                   	push   ecx
c001713c:	50                   	push   eax
c001713d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0017141:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0017145:	55                   	push   ebp
c0017146:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0017149:	83 c4 14             	add    esp,0x14
c001714c:	55                   	push   ebp
c001714d:	e8 a6 4a ff ff       	call   c000bbf8 <File::close()>
c0017152:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0017157:	83 c4 10             	add    esp,0x10
c001715a:	48                   	dec    eax
c001715b:	c6 05 25 c7 02 c0 00 	mov    BYTE PTR ds:0xc002c725,0x0
c0017162:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0017167:	85 c0                	test   eax,eax
c0017169:	75 01                	jne    c001716c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x183>
c001716b:	fb                   	sti    
c001716c:	83 ec 0c             	sub    esp,0xc
c001716f:	ff 35 28 c7 02 c0    	push   DWORD PTR ds:0xc002c728
c0017175:	e8 4a f5 ff ff       	call   c00166c4 <unblockTask(ThreadControlBlock*)>
c001717a:	83 c4 10             	add    esp,0x10
c001717d:	83 c4 2c             	add    esp,0x2c
c0017180:	88 d8                	mov    al,bl
c0017182:	5b                   	pop    ebx
c0017183:	5e                   	pop    esi
c0017184:	5f                   	pop    edi
c0017185:	5d                   	pop    ebp
c0017186:	c3                   	ret    

c0017187 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0017187:	57                   	push   edi
c0017188:	56                   	push   esi
c0017189:	53                   	push   ebx
c001718a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001718e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017192:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0017196:	83 e8 06             	sub    eax,0x6
c0017199:	0f b7 c0             	movzx  eax,ax
c001719c:	50                   	push   eax
c001719d:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c00171a2:	50                   	push   eax
c00171a3:	e8 32 fc ff ff       	call   c0016dda <Vm::realToLinear(unsigned short, unsigned short)>
c00171a8:	5a                   	pop    edx
c00171a9:	8b 73 38             	mov    esi,DWORD PTR [ebx+0x38]
c00171ac:	59                   	pop    ecx
c00171ad:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c00171b0:	8d 51 fa             	lea    edx,[ecx-0x6]
c00171b3:	81 e2 ff ff 00 00    	and    edx,0xffff
c00171b9:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c00171bc:	8d 56 02             	lea    edx,[esi+0x2]
c00171bf:	66 89 10             	mov    WORD PTR [eax],dx
c00171c2:	66 8b 53 3c          	mov    dx,WORD PTR [ebx+0x3c]
c00171c6:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c00171ca:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c00171cd:	66 8b 53 40          	mov    dx,WORD PTR [ebx+0x40]
c00171d1:	0f b6 f1             	movzx  esi,cl
c00171d4:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c00171d8:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00171de:	80 7a 5d 00          	cmp    BYTE PTR [edx+0x5d],0x0
c00171e2:	0f b6 d5             	movzx  edx,ch
c00171e5:	74 0a                	je     c00171f1 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x6a>
c00171e7:	c1 e2 08             	shl    edx,0x8
c00171ea:	09 f2                	or     edx,esi
c00171ec:	80 ce 02             	or     dh,0x2
c00171ef:	eb 08                	jmp    c00171f9 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x72>
c00171f1:	c1 e2 08             	shl    edx,0x8
c00171f4:	09 f2                	or     edx,esi
c00171f6:	80 e6 fd             	and    dh,0xfd
c00171f9:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c00171fd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017202:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0017206:	0f b7 04 bd 02 00 00 00 	movzx  eax,WORD PTR [edi*4+0x2]
c001720e:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c0017211:	0f b7 04 bd 00 00 00 00 	movzx  eax,WORD PTR [edi*4+0x0]
c0017219:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c001721c:	5b                   	pop    ebx
c001721d:	5e                   	pop    esi
c001721e:	5f                   	pop    edi
c001721f:	c3                   	ret    

c0017220 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0017220:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0017225:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001722a:	c1 e0 04             	shl    eax,0x4
c001722d:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0017230:	c3                   	ret    

c0017231 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0017231:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0017236:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001723b:	c1 e0 04             	shl    eax,0x4
c001723e:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c0017242:	c3                   	ret    

c0017243 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c0017243:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0017248:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001724d:	c1 e0 04             	shl    eax,0x4
c0017250:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c0017253:	c3                   	ret    

c0017254 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0017254:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0017259:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001725e:	c1 e0 04             	shl    eax,0x4
c0017261:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017265:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0017268:	c3                   	ret    

c0017269 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0017269:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001726e:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0017273:	c1 e0 04             	shl    eax,0x4
c0017276:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001727a:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001727e:	c3                   	ret    

c001727f <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001727f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0017284:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0017289:	c1 e0 04             	shl    eax,0x4
c001728c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017290:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c0017293:	c3                   	ret    

c0017294 <Vm::faultHandler(regs*)>:
c0017294:	55                   	push   ebp
c0017295:	57                   	push   edi
c0017296:	56                   	push   esi
c0017297:	53                   	push   ebx
c0017298:	83 ec 2c             	sub    esp,0x2c
c001729b:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001729f:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00172a2:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c00172a6:	0f b7 f8             	movzx  edi,ax
c00172a9:	52                   	push   edx
c00172aa:	0f b7 c0             	movzx  eax,ax
c00172ad:	50                   	push   eax
c00172ae:	e8 27 fb ff ff       	call   c0016dda <Vm::realToLinear(unsigned short, unsigned short)>
c00172b3:	5a                   	pop    edx
c00172b4:	59                   	pop    ecx
c00172b5:	89 c1                	mov    ecx,eax
c00172b7:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00172ba:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00172be:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c00172c3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00172c7:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c00172ca:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00172ce:	0f b7 44 24 14       	movzx  eax,WORD PTR [esp+0x14]
c00172d3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00172d7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00172db:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00172df:	e8 f6 fa ff ff       	call   c0016dda <Vm::realToLinear(unsigned short, unsigned short)>
c00172e4:	5e                   	pop    esi
c00172e5:	be 06 00 00 00       	mov    esi,0x6
c00172ea:	5d                   	pop    ebp
c00172eb:	31 ed                	xor    ebp,ebp
c00172ed:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00172f2:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c00172f5:	81 fa 9d 00 00 00    	cmp    edx,0x9d
c00172fb:	0f 84 74 02 00 00    	je     c0017575 <Vm::faultHandler(regs*)+0x2e1>
c0017301:	0f 87 94 00 00 00    	ja     c001739b <Vm::faultHandler(regs*)+0x107>
c0017307:	83 fa 66             	cmp    edx,0x66
c001730a:	0f 84 e2 01 00 00    	je     c00174f2 <Vm::faultHandler(regs*)+0x25e>
c0017310:	77 47                	ja     c0017359 <Vm::faultHandler(regs*)+0xc5>
c0017312:	83 fa 36             	cmp    edx,0x36
c0017315:	0f 84 ca 01 00 00    	je     c00174e5 <Vm::faultHandler(regs*)+0x251>
c001731b:	77 1a                	ja     c0017337 <Vm::faultHandler(regs*)+0xa3>
c001731d:	83 fa 26             	cmp    edx,0x26
c0017320:	0f 84 98 01 00 00    	je     c00174be <Vm::faultHandler(regs*)+0x22a>
c0017326:	83 fa 2e             	cmp    edx,0x2e
c0017329:	0f 85 21 06 00 00    	jne    c0017950 <Vm::faultHandler(regs*)+0x6bc>
c001732f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017332:	31 f6                	xor    esi,esi
c0017334:	41                   	inc    ecx
c0017335:	eb bb                	jmp    c00172f2 <Vm::faultHandler(regs*)+0x5e>
c0017337:	83 fa 64             	cmp    edx,0x64
c001733a:	0f 84 8b 01 00 00    	je     c00174cb <Vm::faultHandler(regs*)+0x237>
c0017340:	0f 87 92 01 00 00    	ja     c00174d8 <Vm::faultHandler(regs*)+0x244>
c0017346:	83 fa 3e             	cmp    edx,0x3e
c0017349:	0f 85 01 06 00 00    	jne    c0017950 <Vm::faultHandler(regs*)+0x6bc>
c001734f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017352:	be 01 00 00 00       	mov    esi,0x1
c0017357:	eb db                	jmp    c0017334 <Vm::faultHandler(regs*)+0xa0>
c0017359:	83 fa 6d             	cmp    edx,0x6d
c001735c:	0f 84 34 03 00 00    	je     c0017696 <Vm::faultHandler(regs*)+0x402>
c0017362:	77 17                	ja     c001737b <Vm::faultHandler(regs*)+0xe7>
c0017364:	83 fa 67             	cmp    edx,0x67
c0017367:	0f 84 92 01 00 00    	je     c00174ff <Vm::faultHandler(regs*)+0x26b>
c001736d:	83 fa 6c             	cmp    edx,0x6c
c0017370:	0f 84 b1 02 00 00    	je     c0017627 <Vm::faultHandler(regs*)+0x393>
c0017376:	e9 d5 05 00 00       	jmp    c0017950 <Vm::faultHandler(regs*)+0x6bc>
c001737b:	83 fa 6f             	cmp    edx,0x6f
c001737e:	0f 84 3d 04 00 00    	je     c00177c1 <Vm::faultHandler(regs*)+0x52d>
c0017384:	0f 82 9f 03 00 00    	jb     c0017729 <Vm::faultHandler(regs*)+0x495>
c001738a:	81 fa 9c 00 00 00    	cmp    edx,0x9c
c0017390:	0f 84 76 01 00 00    	je     c001750c <Vm::faultHandler(regs*)+0x278>
c0017396:	e9 b5 05 00 00       	jmp    c0017950 <Vm::faultHandler(regs*)+0x6bc>
c001739b:	81 fa ec 00 00 00    	cmp    edx,0xec
c00173a1:	0f 84 51 05 00 00    	je     c00178f8 <Vm::faultHandler(regs*)+0x664>
c00173a7:	0f 87 a9 00 00 00    	ja     c0017456 <Vm::faultHandler(regs*)+0x1c2>
c00173ad:	81 fa e4 00 00 00    	cmp    edx,0xe4
c00173b3:	0f 84 d0 04 00 00    	je     c0017889 <Vm::faultHandler(regs*)+0x5f5>
c00173b9:	77 78                	ja     c0017433 <Vm::faultHandler(regs*)+0x19f>
c00173bb:	81 fa cd 00 00 00    	cmp    edx,0xcd
c00173c1:	0f 84 0e 02 00 00    	je     c00175d5 <Vm::faultHandler(regs*)+0x341>
c00173c7:	81 fa cf 00 00 00    	cmp    edx,0xcf
c00173cd:	0f 85 7d 05 00 00    	jne    c0017950 <Vm::faultHandler(regs*)+0x6bc>
c00173d3:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c00173d7:	89 d1                	mov    ecx,edx
c00173d9:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c00173dc:	c1 e1 08             	shl    ecx,0x8
c00173df:	09 ca                	or     edx,ecx
c00173e1:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c00173e4:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c00173e8:	89 d1                	mov    ecx,edx
c00173ea:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c00173ee:	c1 e1 08             	shl    ecx,0x8
c00173f1:	09 ca                	or     edx,ecx
c00173f3:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c00173f6:	0f b6 50 05          	movzx  edx,BYTE PTR [eax+0x5]
c00173fa:	89 d1                	mov    ecx,edx
c00173fc:	0f b6 50 04          	movzx  edx,BYTE PTR [eax+0x4]
c0017400:	c1 e1 08             	shl    ecx,0x8
c0017403:	09 ca                	or     edx,ecx
c0017405:	81 ca 00 02 02 00    	or     edx,0x20200
c001740b:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001740e:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
c0017412:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0017418:	d1 e8                	shr    eax,1
c001741a:	83 e0 01             	and    eax,0x1
c001741d:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0017420:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0017423:	83 c0 06             	add    eax,0x6
c0017426:	25 ff ff 00 00       	and    eax,0xffff
c001742b:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001742e:	e9 19 05 00 00       	jmp    c001794c <Vm::faultHandler(regs*)+0x6b8>
c0017433:	81 fa e6 00 00 00    	cmp    edx,0xe6
c0017439:	0f 84 8f 04 00 00    	je     c00178ce <Vm::faultHandler(regs*)+0x63a>
c001743f:	0f 82 60 04 00 00    	jb     c00178a5 <Vm::faultHandler(regs*)+0x611>
c0017445:	81 fa e7 00 00 00    	cmp    edx,0xe7
c001744b:	0f 84 94 04 00 00    	je     c00178e5 <Vm::faultHandler(regs*)+0x651>
c0017451:	e9 fa 04 00 00       	jmp    c0017950 <Vm::faultHandler(regs*)+0x6bc>
c0017456:	81 fa ef 00 00 00    	cmp    edx,0xef
c001745c:	0f 84 d7 04 00 00    	je     c0017939 <Vm::faultHandler(regs*)+0x6a5>
c0017462:	77 2e                	ja     c0017492 <Vm::faultHandler(regs*)+0x1fe>
c0017464:	81 fa ed 00 00 00    	cmp    edx,0xed
c001746a:	0f 84 a4 04 00 00    	je     c0017914 <Vm::faultHandler(regs*)+0x680>
c0017470:	81 fa ee 00 00 00    	cmp    edx,0xee
c0017476:	0f 85 d4 04 00 00    	jne    c0017950 <Vm::faultHandler(regs*)+0x6bc>
c001747c:	50                   	push   eax
c001747d:	50                   	push   eax
c001747e:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0017482:	50                   	push   eax
c0017483:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0017487:	50                   	push   eax
c0017488:	e8 17 f9 ff ff       	call   c0016da4 <Vm::outbv(unsigned short, unsigned char)>
c001748d:	e9 9f 04 00 00       	jmp    c0017931 <Vm::faultHandler(regs*)+0x69d>
c0017492:	81 fa fa 00 00 00    	cmp    edx,0xfa
c0017498:	0f 84 6d 01 00 00    	je     c001760b <Vm::faultHandler(regs*)+0x377>
c001749e:	81 fa fb 00 00 00    	cmp    edx,0xfb
c00174a4:	0f 84 6f 01 00 00    	je     c0017619 <Vm::faultHandler(regs*)+0x385>
c00174aa:	81 fa f3 00 00 00    	cmp    edx,0xf3
c00174b0:	0f 85 9a 04 00 00    	jne    c0017950 <Vm::faultHandler(regs*)+0x6bc>
c00174b6:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00174b9:	e9 76 fe ff ff       	jmp    c0017334 <Vm::faultHandler(regs*)+0xa0>
c00174be:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00174c1:	be 02 00 00 00       	mov    esi,0x2
c00174c6:	e9 69 fe ff ff       	jmp    c0017334 <Vm::faultHandler(regs*)+0xa0>
c00174cb:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00174ce:	be 03 00 00 00       	mov    esi,0x3
c00174d3:	e9 5c fe ff ff       	jmp    c0017334 <Vm::faultHandler(regs*)+0xa0>
c00174d8:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00174db:	be 04 00 00 00       	mov    esi,0x4
c00174e0:	e9 4f fe ff ff       	jmp    c0017334 <Vm::faultHandler(regs*)+0xa0>
c00174e5:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00174e8:	be 05 00 00 00       	mov    esi,0x5
c00174ed:	e9 42 fe ff ff       	jmp    c0017334 <Vm::faultHandler(regs*)+0xa0>
c00174f2:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00174f5:	bd 01 00 00 00       	mov    ebp,0x1
c00174fa:	e9 35 fe ff ff       	jmp    c0017334 <Vm::faultHandler(regs*)+0xa0>
c00174ff:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017502:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0017507:	e9 28 fe ff ff       	jmp    c0017334 <Vm::faultHandler(regs*)+0xa0>
c001750c:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001750f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0017513:	83 e5 01             	and    ebp,0x1
c0017516:	74 30                	je     c0017548 <Vm::faultHandler(regs*)+0x2b4>
c0017518:	83 e9 04             	sub    ecx,0x4
c001751b:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0017521:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0017527:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001752a:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001752d:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0017533:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0017537:	0f 84 0c 04 00 00    	je     c0017949 <Vm::faultHandler(regs*)+0x6b5>
c001753d:	80 ce 02             	or     dh,0x2
c0017540:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0017543:	e9 01 04 00 00       	jmp    c0017949 <Vm::faultHandler(regs*)+0x6b5>
c0017548:	83 e9 02             	sub    ecx,0x2
c001754b:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0017551:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0017554:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0017558:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001755e:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0017562:	74 05                	je     c0017569 <Vm::faultHandler(regs*)+0x2d5>
c0017564:	80 ce 02             	or     dh,0x2
c0017567:	eb 03                	jmp    c001756c <Vm::faultHandler(regs*)+0x2d8>
c0017569:	80 e6 fd             	and    dh,0xfd
c001756c:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0017570:	e9 d4 03 00 00       	jmp    c0017949 <Vm::faultHandler(regs*)+0x6b5>
c0017575:	83 e5 01             	and    ebp,0x1
c0017578:	74 2a                	je     c00175a4 <Vm::faultHandler(regs*)+0x310>
c001757a:	8b 10                	mov    edx,DWORD PTR [eax]
c001757c:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0017582:	81 ca 00 02 02 00    	or     edx,0x20200
c0017588:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001758b:	8b 00                	mov    eax,DWORD PTR [eax]
c001758d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0017593:	c1 e8 09             	shr    eax,0x9
c0017596:	83 e0 01             	and    eax,0x1
c0017599:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c001759c:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001759f:	83 c0 04             	add    eax,0x4
c00175a2:	eb 24                	jmp    c00175c8 <Vm::faultHandler(regs*)+0x334>
c00175a4:	0f b7 10             	movzx  edx,WORD PTR [eax]
c00175a7:	81 ca 00 02 02 00    	or     edx,0x20200
c00175ad:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00175b0:	0f b7 00             	movzx  eax,WORD PTR [eax]
c00175b3:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00175b9:	c1 e8 09             	shr    eax,0x9
c00175bc:	83 e0 01             	and    eax,0x1
c00175bf:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00175c2:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00175c5:	83 c0 02             	add    eax,0x2
c00175c8:	25 ff ff 00 00       	and    eax,0xffff
c00175cd:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c00175d0:	e9 74 03 00 00       	jmp    c0017949 <Vm::faultHandler(regs*)+0x6b5>
c00175d5:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00175d9:	3d ee 00 00 00       	cmp    eax,0xee
c00175de:	75 10                	jne    c00175f0 <Vm::faultHandler(regs*)+0x35c>
c00175e0:	83 ec 0c             	sub    esp,0xc
c00175e3:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c00175e6:	e8 56 f8 ff ff       	call   c0016e41 <Vm::mainloop3(unsigned long)>
c00175eb:	e9 44 03 00 00       	jmp    c0017934 <Vm::faultHandler(regs*)+0x6a0>
c00175f0:	83 ec 0c             	sub    esp,0xc
c00175f3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00175f7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00175fb:	51                   	push   ecx
c00175fc:	50                   	push   eax
c00175fd:	53                   	push   ebx
c00175fe:	e8 84 fb ff ff       	call   c0017187 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c0017603:	83 c4 20             	add    esp,0x20
c0017606:	e9 41 03 00 00       	jmp    c001794c <Vm::faultHandler(regs*)+0x6b8>
c001760b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017610:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0017614:	e9 30 03 00 00       	jmp    c0017949 <Vm::faultHandler(regs*)+0x6b5>
c0017619:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001761e:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c0017622:	e9 22 03 00 00       	jmp    c0017949 <Vm::faultHandler(regs*)+0x6b5>
c0017627:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001762a:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c001762f:	74 2b                	je     c001765c <Vm::faultHandler(regs*)+0x3c8>
c0017631:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0017638:	76 22                	jbe    c001765c <Vm::faultHandler(regs*)+0x3c8>
c001763a:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001763e:	50                   	push   eax
c001763f:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0017643:	50                   	push   eax
c0017644:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0017648:	50                   	push   eax
c0017649:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001764d:	50                   	push   eax
c001764e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017652:	50                   	push   eax
c0017653:	6a 6c                	push   0x6c
c0017655:	6a 6c                	push   0x6c
c0017657:	e9 bd 01 00 00       	jmp    c0017819 <Vm::faultHandler(regs*)+0x585>
c001765c:	83 ec 0c             	sub    esp,0xc
c001765f:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0017663:	0f b7 f6             	movzx  esi,si
c0017666:	50                   	push   eax
c0017667:	e8 25 f7 ff ff       	call   c0016d91 <Vm::inbv(unsigned short)>
c001766c:	83 c4 0c             	add    esp,0xc
c001766f:	0f b6 c0             	movzx  eax,al
c0017672:	50                   	push   eax
c0017673:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c0017677:	50                   	push   eax
c0017678:	56                   	push   esi
c0017679:	e8 d6 fb ff ff       	call   c0017254 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001767e:	83 c4 10             	add    esp,0x10
c0017681:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017684:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0017688:	74 03                	je     c001768d <Vm::faultHandler(regs*)+0x3f9>
c001768a:	48                   	dec    eax
c001768b:	eb 01                	jmp    c001768e <Vm::faultHandler(regs*)+0x3fa>
c001768d:	40                   	inc    eax
c001768e:	0f b7 c0             	movzx  eax,ax
c0017691:	e9 8b 00 00 00       	jmp    c0017721 <Vm::faultHandler(regs*)+0x48d>
c0017696:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0017699:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001769c:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c00176a1:	74 29                	je     c00176cc <Vm::faultHandler(regs*)+0x438>
c00176a3:	3d ff ff 00 00       	cmp    eax,0xffff
c00176a8:	76 22                	jbe    c00176cc <Vm::faultHandler(regs*)+0x438>
c00176aa:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00176ae:	50                   	push   eax
c00176af:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00176b3:	50                   	push   eax
c00176b4:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00176b8:	50                   	push   eax
c00176b9:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00176bd:	50                   	push   eax
c00176be:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00176c2:	50                   	push   eax
c00176c3:	6a 6d                	push   0x6d
c00176c5:	6a 6d                	push   0x6d
c00176c7:	e9 4d 01 00 00       	jmp    c0017819 <Vm::faultHandler(regs*)+0x585>
c00176cc:	0f b7 c8             	movzx  ecx,ax
c00176cf:	0f b7 f6             	movzx  esi,si
c00176d2:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00176d5:	83 e5 01             	and    ebp,0x1
c00176d8:	74 20                	je     c00176fa <Vm::faultHandler(regs*)+0x466>
c00176da:	ed                   	in     eax,dx
c00176db:	55                   	push   ebp
c00176dc:	50                   	push   eax
c00176dd:	51                   	push   ecx
c00176de:	56                   	push   esi
c00176df:	e8 9b fb ff ff       	call   c001727f <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c00176e4:	83 c4 10             	add    esp,0x10
c00176e7:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00176ea:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00176ee:	74 05                	je     c00176f5 <Vm::faultHandler(regs*)+0x461>
c00176f0:	83 e8 04             	sub    eax,0x4
c00176f3:	eb 27                	jmp    c001771c <Vm::faultHandler(regs*)+0x488>
c00176f5:	83 c0 04             	add    eax,0x4
c00176f8:	eb 22                	jmp    c001771c <Vm::faultHandler(regs*)+0x488>
c00176fa:	66 ed                	in     ax,dx
c00176fc:	0f b7 c0             	movzx  eax,ax
c00176ff:	57                   	push   edi
c0017700:	50                   	push   eax
c0017701:	51                   	push   ecx
c0017702:	56                   	push   esi
c0017703:	e8 61 fb ff ff       	call   c0017269 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0017708:	83 c4 10             	add    esp,0x10
c001770b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001770e:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0017712:	74 05                	je     c0017719 <Vm::faultHandler(regs*)+0x485>
c0017714:	83 e8 02             	sub    eax,0x2
c0017717:	eb 03                	jmp    c001771c <Vm::faultHandler(regs*)+0x488>
c0017719:	83 c0 02             	add    eax,0x2
c001771c:	25 ff ff 00 00       	and    eax,0xffff
c0017721:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0017724:	e9 20 02 00 00       	jmp    c0017949 <Vm::faultHandler(regs*)+0x6b5>
c0017729:	8d 46 ff             	lea    eax,[esi-0x1]
c001772c:	0f b6 f0             	movzx  esi,al
c001772f:	83 fe 05             	cmp    esi,0x5
c0017732:	77 23                	ja     c0017757 <Vm::faultHandler(regs*)+0x4c3>
c0017734:	ff 24 b5 00 2d 02 c0 	jmp    DWORD PTR [esi*4-0x3ffdd300]
c001773b:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c0017740:	eb 15                	jmp    c0017757 <Vm::faultHandler(regs*)+0x4c3>
c0017742:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c0017746:	eb 0f                	jmp    c0017757 <Vm::faultHandler(regs*)+0x4c3>
c0017748:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c001774c:	eb 09                	jmp    c0017757 <Vm::faultHandler(regs*)+0x4c3>
c001774e:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c0017752:	eb 03                	jmp    c0017757 <Vm::faultHandler(regs*)+0x4c3>
c0017754:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c0017757:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001775a:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c001775f:	74 29                	je     c001778a <Vm::faultHandler(regs*)+0x4f6>
c0017761:	3d ff ff 00 00       	cmp    eax,0xffff
c0017766:	76 22                	jbe    c001778a <Vm::faultHandler(regs*)+0x4f6>
c0017768:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001776c:	50                   	push   eax
c001776d:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0017771:	50                   	push   eax
c0017772:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0017776:	50                   	push   eax
c0017777:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001777b:	50                   	push   eax
c001777c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017780:	50                   	push   eax
c0017781:	6a 6e                	push   0x6e
c0017783:	6a 6e                	push   0x6e
c0017785:	e9 8f 00 00 00       	jmp    c0017819 <Vm::faultHandler(regs*)+0x585>
c001778a:	0f b7 c0             	movzx  eax,ax
c001778d:	52                   	push   edx
c001778e:	52                   	push   edx
c001778f:	50                   	push   eax
c0017790:	57                   	push   edi
c0017791:	e8 8a fa ff ff       	call   c0017220 <Vm::readByteFromReal(unsigned short, unsigned short)>
c0017796:	59                   	pop    ecx
c0017797:	0f b6 c0             	movzx  eax,al
c001779a:	5e                   	pop    esi
c001779b:	50                   	push   eax
c001779c:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00177a0:	50                   	push   eax
c00177a1:	e8 fe f5 ff ff       	call   c0016da4 <Vm::outbv(unsigned short, unsigned char)>
c00177a6:	83 c4 10             	add    esp,0x10
c00177a9:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00177ac:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00177b0:	74 03                	je     c00177b5 <Vm::faultHandler(regs*)+0x521>
c00177b2:	48                   	dec    eax
c00177b3:	eb 01                	jmp    c00177b6 <Vm::faultHandler(regs*)+0x522>
c00177b5:	40                   	inc    eax
c00177b6:	0f b7 c0             	movzx  eax,ax
c00177b9:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00177bc:	e9 88 01 00 00       	jmp    c0017949 <Vm::faultHandler(regs*)+0x6b5>
c00177c1:	8d 46 ff             	lea    eax,[esi-0x1]
c00177c4:	0f b6 f0             	movzx  esi,al
c00177c7:	83 fe 05             	cmp    esi,0x5
c00177ca:	77 1e                	ja     c00177ea <Vm::faultHandler(regs*)+0x556>
c00177cc:	ff 24 b5 18 2d 02 c0 	jmp    DWORD PTR [esi*4-0x3ffdd2e8]
c00177d3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00177d7:	eb 11                	jmp    c00177ea <Vm::faultHandler(regs*)+0x556>
c00177d9:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c00177dc:	eb 0c                	jmp    c00177ea <Vm::faultHandler(regs*)+0x556>
c00177de:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c00177e1:	eb 07                	jmp    c00177ea <Vm::faultHandler(regs*)+0x556>
c00177e3:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00177e6:	eb 02                	jmp    c00177ea <Vm::faultHandler(regs*)+0x556>
c00177e8:	8b 3b                	mov    edi,DWORD PTR [ebx]
c00177ea:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c00177ed:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c00177f2:	74 37                	je     c001782b <Vm::faultHandler(regs*)+0x597>
c00177f4:	81 fe ff ff 00 00    	cmp    esi,0xffff
c00177fa:	76 2f                	jbe    c001782b <Vm::faultHandler(regs*)+0x597>
c00177fc:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0017800:	50                   	push   eax
c0017801:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0017805:	50                   	push   eax
c0017806:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001780a:	50                   	push   eax
c001780b:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001780f:	50                   	push   eax
c0017810:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017814:	50                   	push   eax
c0017815:	6a 6f                	push   0x6f
c0017817:	6a 6f                	push   0x6f
c0017819:	68 a4 2c 02 c0       	push   0xc0022ca4
c001781e:	e8 52 31 ff ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c0017823:	83 c4 20             	add    esp,0x20
c0017826:	e9 83 01 00 00       	jmp    c00179ae <Vm::faultHandler(regs*)+0x71a>
c001782b:	0f b7 d7             	movzx  edx,di
c001782e:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0017831:	0f b7 c6             	movzx  eax,si
c0017834:	81 e1 00 04 00 00    	and    ecx,0x400
c001783a:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c001783d:	83 e5 01             	and    ebp,0x1
c0017840:	74 1d                	je     c001785f <Vm::faultHandler(regs*)+0x5cb>
c0017842:	55                   	push   ebp
c0017843:	55                   	push   ebp
c0017844:	50                   	push   eax
c0017845:	52                   	push   edx
c0017846:	e8 f8 f9 ff ff       	call   c0017243 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001784b:	83 c4 10             	add    esp,0x10
c001784e:	89 fa                	mov    edx,edi
c0017850:	ef                   	out    dx,eax
c0017851:	85 c9                	test   ecx,ecx
c0017853:	74 05                	je     c001785a <Vm::faultHandler(regs*)+0x5c6>
c0017855:	83 ee 04             	sub    esi,0x4
c0017858:	eb 21                	jmp    c001787b <Vm::faultHandler(regs*)+0x5e7>
c001785a:	83 c6 04             	add    esi,0x4
c001785d:	eb 1c                	jmp    c001787b <Vm::faultHandler(regs*)+0x5e7>
c001785f:	55                   	push   ebp
c0017860:	55                   	push   ebp
c0017861:	50                   	push   eax
c0017862:	52                   	push   edx
c0017863:	e8 c9 f9 ff ff       	call   c0017231 <Vm::readWordFromReal(unsigned short, unsigned short)>
c0017868:	83 c4 10             	add    esp,0x10
c001786b:	89 fa                	mov    edx,edi
c001786d:	66 ef                	out    dx,ax
c001786f:	85 c9                	test   ecx,ecx
c0017871:	74 05                	je     c0017878 <Vm::faultHandler(regs*)+0x5e4>
c0017873:	83 ee 02             	sub    esi,0x2
c0017876:	eb 03                	jmp    c001787b <Vm::faultHandler(regs*)+0x5e7>
c0017878:	83 c6 02             	add    esi,0x2
c001787b:	81 e6 ff ff 00 00    	and    esi,0xffff
c0017881:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0017884:	e9 c0 00 00 00       	jmp    c0017949 <Vm::faultHandler(regs*)+0x6b5>
c0017889:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0017890:	83 ec 0c             	sub    esp,0xc
c0017893:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017897:	50                   	push   eax
c0017898:	e8 f4 f4 ff ff       	call   c0016d91 <Vm::inbv(unsigned short)>
c001789d:	0f b6 c0             	movzx  eax,al
c00178a0:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c00178a3:	eb 3a                	jmp    c00178df <Vm::faultHandler(regs*)+0x64b>
c00178a5:	83 e5 01             	and    ebp,0x1
c00178a8:	74 07                	je     c00178b1 <Vm::faultHandler(regs*)+0x61d>
c00178aa:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00178ae:	ed                   	in     eax,dx
c00178af:	eb 14                	jmp    c00178c5 <Vm::faultHandler(regs*)+0x631>
c00178b1:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c00178b4:	66 31 f6             	xor    si,si
c00178b7:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00178ba:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00178be:	66 ed                	in     ax,dx
c00178c0:	0f b7 c0             	movzx  eax,ax
c00178c3:	09 f0                	or     eax,esi
c00178c5:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00178c8:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00178cc:	eb 7e                	jmp    c001794c <Vm::faultHandler(regs*)+0x6b8>
c00178ce:	52                   	push   edx
c00178cf:	52                   	push   edx
c00178d0:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c00178d4:	50                   	push   eax
c00178d5:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00178d9:	50                   	push   eax
c00178da:	e8 c5 f4 ff ff       	call   c0016da4 <Vm::outbv(unsigned short, unsigned char)>
c00178df:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00178e3:	eb 4f                	jmp    c0017934 <Vm::faultHandler(regs*)+0x6a0>
c00178e5:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00178e8:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00178ec:	83 e5 01             	and    ebp,0x1
c00178ef:	74 03                	je     c00178f4 <Vm::faultHandler(regs*)+0x660>
c00178f1:	ef                   	out    dx,eax
c00178f2:	eb d4                	jmp    c00178c8 <Vm::faultHandler(regs*)+0x634>
c00178f4:	66 ef                	out    dx,ax
c00178f6:	eb d0                	jmp    c00178c8 <Vm::faultHandler(regs*)+0x634>
c00178f8:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c00178ff:	83 ec 0c             	sub    esp,0xc
c0017902:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0017906:	50                   	push   eax
c0017907:	e8 85 f4 ff ff       	call   c0016d91 <Vm::inbv(unsigned short)>
c001790c:	0f b6 c0             	movzx  eax,al
c001790f:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0017912:	eb 1d                	jmp    c0017931 <Vm::faultHandler(regs*)+0x69d>
c0017914:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0017917:	83 e5 01             	and    ebp,0x1
c001791a:	74 03                	je     c001791f <Vm::faultHandler(regs*)+0x68b>
c001791c:	ed                   	in     eax,dx
c001791d:	eb 0d                	jmp    c001792c <Vm::faultHandler(regs*)+0x698>
c001791f:	66 ed                	in     ax,dx
c0017921:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0017924:	0f b7 c0             	movzx  eax,ax
c0017927:	66 31 d2             	xor    dx,dx
c001792a:	09 d0                	or     eax,edx
c001792c:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001792f:	eb 18                	jmp    c0017949 <Vm::faultHandler(regs*)+0x6b5>
c0017931:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017934:	83 c4 10             	add    esp,0x10
c0017937:	eb 13                	jmp    c001794c <Vm::faultHandler(regs*)+0x6b8>
c0017939:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001793c:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001793f:	83 e5 01             	and    ebp,0x1
c0017942:	74 03                	je     c0017947 <Vm::faultHandler(regs*)+0x6b3>
c0017944:	ef                   	out    dx,eax
c0017945:	eb 02                	jmp    c0017949 <Vm::faultHandler(regs*)+0x6b5>
c0017947:	66 ef                	out    dx,ax
c0017949:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001794c:	b0 01                	mov    al,0x1
c001794e:	eb 60                	jmp    c00179b0 <Vm::faultHandler(regs*)+0x71c>
c0017950:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0017954:	50                   	push   eax
c0017955:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0017959:	50                   	push   eax
c001795a:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001795e:	50                   	push   eax
c001795f:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0017963:	50                   	push   eax
c0017964:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017968:	50                   	push   eax
c0017969:	52                   	push   edx
c001796a:	52                   	push   edx
c001796b:	68 d1 2c 02 c0       	push   0xc0022cd1
c0017970:	e8 00 30 ff ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c0017975:	83 c4 20             	add    esp,0x20
c0017978:	83 ec 0c             	sub    esp,0xc
c001797b:	6a 60                	push   0x60
c001797d:	e8 0f f4 ff ff       	call   c0016d91 <Vm::inbv(unsigned short)>
c0017982:	83 c4 10             	add    esp,0x10
c0017985:	0f b6 d0             	movzx  edx,al
c0017988:	83 fa 1c             	cmp    edx,0x1c
c001798b:	74 05                	je     c0017992 <Vm::faultHandler(regs*)+0x6fe>
c001798d:	83 fa 5a             	cmp    edx,0x5a
c0017990:	75 e6                	jne    c0017978 <Vm::faultHandler(regs*)+0x6e4>
c0017992:	0f b6 c0             	movzx  eax,al
c0017995:	83 f8 1c             	cmp    eax,0x1c
c0017998:	74 05                	je     c001799f <Vm::faultHandler(regs*)+0x70b>
c001799a:	83 f8 5a             	cmp    eax,0x5a
c001799d:	75 0f                	jne    c00179ae <Vm::faultHandler(regs*)+0x71a>
c001799f:	83 ec 0c             	sub    esp,0xc
c00179a2:	6a 60                	push   0x60
c00179a4:	e8 e8 f3 ff ff       	call   c0016d91 <Vm::inbv(unsigned short)>
c00179a9:	83 c4 10             	add    esp,0x10
c00179ac:	eb e4                	jmp    c0017992 <Vm::faultHandler(regs*)+0x6fe>
c00179ae:	31 c0                	xor    eax,eax
c00179b0:	83 c4 2c             	add    esp,0x2c
c00179b3:	5b                   	pop    ebx
c00179b4:	5e                   	pop    esi
c00179b5:	5f                   	pop    edi
c00179b6:	5d                   	pop    ebp
c00179b7:	c3                   	ret    

c00179b8 <noCopro(unsigned long)>:
c00179b8:	c3                   	ret    

c00179b9 <nmiHandler(regs*, void*)>:
c00179b9:	83 ec 0c             	sub    esp,0xc
c00179bc:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c00179c1:	83 ec 0c             	sub    esp,0xc
c00179c4:	50                   	push   eax
c00179c5:	e8 1e f9 fe ff       	call   c00072e8 <Computer::handleNMI()>
c00179ca:	83 c4 10             	add    esp,0x10
c00179cd:	90                   	nop
c00179ce:	83 c4 0c             	add    esp,0xc
c00179d1:	c3                   	ret    

c00179d2 <doubleFault(regs*, void*)>:
c00179d2:	55                   	push   ebp
c00179d3:	89 e5                	mov    ebp,esp
c00179d5:	83 ec 08             	sub    esp,0x8
c00179d8:	83 ec 0c             	sub    esp,0xc
c00179db:	68 30 2d 02 c0       	push   0xc0022d30
c00179e0:	e8 e2 9c ff ff       	call   c00116c7 <KePanic(char const*)>
c00179e5:	83 c4 10             	add    esp,0x10
c00179e8:	90                   	nop
c00179e9:	c9                   	leave  
c00179ea:	c3                   	ret    

c00179eb <displayDebugInfo(regs*)>:
c00179eb:	83 ec 1c             	sub    esp,0x1c
c00179ee:	0f 20 c0             	mov    eax,cr0
c00179f1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00179f5:	0f 20 d0             	mov    eax,cr2
c00179f8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00179fc:	0f 20 d8             	mov    eax,cr3
c00179ff:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017a03:	0f 20 e0             	mov    eax,cr4
c0017a06:	89 04 24             	mov    DWORD PTR [esp],eax
c0017a09:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a0d:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0017a10:	83 ec 08             	sub    esp,0x8
c0017a13:	50                   	push   eax
c0017a14:	68 4c 2d 02 c0       	push   0xc0022d4c
c0017a19:	e8 57 2f ff ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c0017a1e:	83 c4 10             	add    esp,0x10
c0017a21:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a25:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0017a28:	83 ec 08             	sub    esp,0x8
c0017a2b:	50                   	push   eax
c0017a2c:	68 3d 2d 02 c0       	push   0xc0022d3d
c0017a31:	e8 3f 2f ff ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c0017a36:	83 c4 10             	add    esp,0x10
c0017a39:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a3d:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0017a40:	83 ec 08             	sub    esp,0x8
c0017a43:	50                   	push   eax
c0017a44:	68 48 2d 02 c0       	push   0xc0022d48
c0017a49:	e8 27 2f ff ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c0017a4e:	83 c4 10             	add    esp,0x10
c0017a51:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a55:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017a58:	83 ec 08             	sub    esp,0x8
c0017a5b:	50                   	push   eax
c0017a5c:	68 57 2d 02 c0       	push   0xc0022d57
c0017a61:	e8 0f 2f ff ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c0017a66:	83 c4 10             	add    esp,0x10
c0017a69:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a6d:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c0017a70:	83 ec 08             	sub    esp,0x8
c0017a73:	50                   	push   eax
c0017a74:	68 62 2d 02 c0       	push   0xc0022d62
c0017a79:	e8 f7 2e ff ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c0017a7e:	83 c4 10             	add    esp,0x10
c0017a81:	83 ec 08             	sub    esp,0x8
c0017a84:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017a88:	68 6d 2d 02 c0       	push   0xc0022d6d
c0017a8d:	e8 e3 2e ff ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c0017a92:	83 c4 10             	add    esp,0x10
c0017a95:	83 ec 08             	sub    esp,0x8
c0017a98:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017a9c:	68 78 2d 02 c0       	push   0xc0022d78
c0017aa1:	e8 cf 2e ff ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c0017aa6:	83 c4 10             	add    esp,0x10
c0017aa9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017aad:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0017ab0:	c1 e0 05             	shl    eax,0x5
c0017ab3:	8d 90 00 41 02 c0    	lea    edx,[eax-0x3ffdbf00]
c0017ab9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017abd:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0017ac0:	83 ec 04             	sub    esp,0x4
c0017ac3:	52                   	push   edx
c0017ac4:	50                   	push   eax
c0017ac5:	68 83 2d 02 c0       	push   0xc0022d83
c0017aca:	e8 a6 2e ff ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c0017acf:	83 c4 10             	add    esp,0x10
c0017ad2:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017ad7:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017add:	83 ec 0c             	sub    esp,0xc
c0017ae0:	50                   	push   eax
c0017ae1:	e8 a3 0c ff ff       	call   c0008789 <setActiveTerminal(VgaText*)>
c0017ae6:	83 c4 10             	add    esp,0x10
c0017ae9:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017aee:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017af4:	83 ec 08             	sub    esp,0x8
c0017af7:	68 92 2d 02 c0       	push   0xc0022d92
c0017afc:	50                   	push   eax
c0017afd:	e8 d4 0f ff ff       	call   c0008ad6 <VgaText::puts(char const*)>
c0017b02:	83 c4 10             	add    esp,0x10
c0017b05:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017b0a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017b10:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017b14:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
c0017b17:	83 ec 08             	sub    esp,0x8
c0017b1a:	52                   	push   edx
c0017b1b:	50                   	push   eax
c0017b1c:	e8 6f 0f ff ff       	call   c0008a90 <VgaText::putx(unsigned int)>
c0017b21:	83 c4 10             	add    esp,0x10
c0017b24:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017b29:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017b2f:	83 ec 08             	sub    esp,0x8
c0017b32:	68 a0 2d 02 c0       	push   0xc0022da0
c0017b37:	50                   	push   eax
c0017b38:	e8 99 0f ff ff       	call   c0008ad6 <VgaText::puts(char const*)>
c0017b3d:	83 c4 10             	add    esp,0x10
c0017b40:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017b45:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017b4b:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0017b50:	8b 12                	mov    edx,DWORD PTR [edx]
c0017b52:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0017b55:	83 c2 0c             	add    edx,0xc
c0017b58:	83 ec 08             	sub    esp,0x8
c0017b5b:	52                   	push   edx
c0017b5c:	50                   	push   eax
c0017b5d:	e8 74 0f ff ff       	call   c0008ad6 <VgaText::puts(char const*)>
c0017b62:	83 c4 10             	add    esp,0x10
c0017b65:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017b6a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017b70:	83 ec 08             	sub    esp,0x8
c0017b73:	68 a9 2d 02 c0       	push   0xc0022da9
c0017b78:	50                   	push   eax
c0017b79:	e8 58 0f ff ff       	call   c0008ad6 <VgaText::puts(char const*)>
c0017b7e:	83 c4 10             	add    esp,0x10
c0017b81:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017b86:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017b8c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017b90:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c0017b93:	83 ec 08             	sub    esp,0x8
c0017b96:	52                   	push   edx
c0017b97:	50                   	push   eax
c0017b98:	e8 f3 0e ff ff       	call   c0008a90 <VgaText::putx(unsigned int)>
c0017b9d:	83 c4 10             	add    esp,0x10
c0017ba0:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017ba5:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017bab:	83 ec 08             	sub    esp,0x8
c0017bae:	68 b1 2d 02 c0       	push   0xc0022db1
c0017bb3:	50                   	push   eax
c0017bb4:	e8 1d 0f ff ff       	call   c0008ad6 <VgaText::puts(char const*)>
c0017bb9:	83 c4 10             	add    esp,0x10
c0017bbc:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017bc1:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017bc7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017bcb:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c0017bce:	83 ec 08             	sub    esp,0x8
c0017bd1:	52                   	push   edx
c0017bd2:	50                   	push   eax
c0017bd3:	e8 b8 0e ff ff       	call   c0008a90 <VgaText::putx(unsigned int)>
c0017bd8:	83 c4 10             	add    esp,0x10
c0017bdb:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017be0:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017be6:	83 ec 08             	sub    esp,0x8
c0017be9:	68 b9 2d 02 c0       	push   0xc0022db9
c0017bee:	50                   	push   eax
c0017bef:	e8 e2 0e ff ff       	call   c0008ad6 <VgaText::puts(char const*)>
c0017bf4:	83 c4 10             	add    esp,0x10
c0017bf7:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017bfc:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017c02:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017c06:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c0017c09:	83 ec 08             	sub    esp,0x8
c0017c0c:	52                   	push   edx
c0017c0d:	50                   	push   eax
c0017c0e:	e8 7d 0e ff ff       	call   c0008a90 <VgaText::putx(unsigned int)>
c0017c13:	83 c4 10             	add    esp,0x10
c0017c16:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017c1b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017c21:	83 ec 08             	sub    esp,0x8
c0017c24:	68 c1 2d 02 c0       	push   0xc0022dc1
c0017c29:	50                   	push   eax
c0017c2a:	e8 a7 0e ff ff       	call   c0008ad6 <VgaText::puts(char const*)>
c0017c2f:	83 c4 10             	add    esp,0x10
c0017c32:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017c37:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017c3d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017c41:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0017c44:	83 ec 08             	sub    esp,0x8
c0017c47:	52                   	push   edx
c0017c48:	50                   	push   eax
c0017c49:	e8 42 0e ff ff       	call   c0008a90 <VgaText::putx(unsigned int)>
c0017c4e:	83 c4 10             	add    esp,0x10
c0017c51:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017c56:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017c5c:	83 ec 08             	sub    esp,0x8
c0017c5f:	68 c9 2d 02 c0       	push   0xc0022dc9
c0017c64:	50                   	push   eax
c0017c65:	e8 6c 0e ff ff       	call   c0008ad6 <VgaText::puts(char const*)>
c0017c6a:	83 c4 10             	add    esp,0x10
c0017c6d:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017c72:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017c78:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017c7c:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c0017c7f:	83 ec 08             	sub    esp,0x8
c0017c82:	52                   	push   edx
c0017c83:	50                   	push   eax
c0017c84:	e8 07 0e ff ff       	call   c0008a90 <VgaText::putx(unsigned int)>
c0017c89:	83 c4 10             	add    esp,0x10
c0017c8c:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017c91:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017c97:	83 ec 08             	sub    esp,0x8
c0017c9a:	68 d1 2d 02 c0       	push   0xc0022dd1
c0017c9f:	50                   	push   eax
c0017ca0:	e8 31 0e ff ff       	call   c0008ad6 <VgaText::puts(char const*)>
c0017ca5:	83 c4 10             	add    esp,0x10
c0017ca8:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017cad:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017cb3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017cb7:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0017cba:	83 ec 08             	sub    esp,0x8
c0017cbd:	52                   	push   edx
c0017cbe:	50                   	push   eax
c0017cbf:	e8 cc 0d ff ff       	call   c0008a90 <VgaText::putx(unsigned int)>
c0017cc4:	83 c4 10             	add    esp,0x10
c0017cc7:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017ccc:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017cd2:	83 ec 08             	sub    esp,0x8
c0017cd5:	68 d9 2d 02 c0       	push   0xc0022dd9
c0017cda:	50                   	push   eax
c0017cdb:	e8 f6 0d ff ff       	call   c0008ad6 <VgaText::puts(char const*)>
c0017ce0:	83 c4 10             	add    esp,0x10
c0017ce3:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017ce8:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017cee:	83 ec 08             	sub    esp,0x8
c0017cf1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017cf5:	50                   	push   eax
c0017cf6:	e8 95 0d ff ff       	call   c0008a90 <VgaText::putx(unsigned int)>
c0017cfb:	83 c4 10             	add    esp,0x10
c0017cfe:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017d03:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017d09:	83 ec 08             	sub    esp,0x8
c0017d0c:	68 e2 2d 02 c0       	push   0xc0022de2
c0017d11:	50                   	push   eax
c0017d12:	e8 bf 0d ff ff       	call   c0008ad6 <VgaText::puts(char const*)>
c0017d17:	83 c4 10             	add    esp,0x10
c0017d1a:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017d1f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017d25:	83 ec 08             	sub    esp,0x8
c0017d28:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017d2c:	50                   	push   eax
c0017d2d:	e8 5e 0d ff ff       	call   c0008a90 <VgaText::putx(unsigned int)>
c0017d32:	83 c4 10             	add    esp,0x10
c0017d35:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017d3a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017d40:	83 ec 08             	sub    esp,0x8
c0017d43:	68 ea 2d 02 c0       	push   0xc0022dea
c0017d48:	50                   	push   eax
c0017d49:	e8 88 0d ff ff       	call   c0008ad6 <VgaText::puts(char const*)>
c0017d4e:	83 c4 10             	add    esp,0x10
c0017d51:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017d56:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017d5c:	83 ec 08             	sub    esp,0x8
c0017d5f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017d63:	50                   	push   eax
c0017d64:	e8 27 0d ff ff       	call   c0008a90 <VgaText::putx(unsigned int)>
c0017d69:	83 c4 10             	add    esp,0x10
c0017d6c:	fa                   	cli    
c0017d6d:	f4                   	hlt    
c0017d6e:	eb fe                	jmp    c0017d6e <displayDebugInfo(regs*)+0x383>

c0017d70 <HalSystemIdle()>:
c0017d70:	56                   	push   esi
c0017d71:	53                   	push   ebx
c0017d72:	83 ec 14             	sub    esp,0x14
c0017d75:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0017d7a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0017d80:	8a 80 8e 11 00 00    	mov    al,BYTE PTR [eax+0x118e]
c0017d86:	83 e0 04             	and    eax,0x4
c0017d89:	0f b6 c0             	movzx  eax,al
c0017d8c:	85 c0                	test   eax,eax
c0017d8e:	0f 95 c0             	setne  al
c0017d91:	0f b6 c0             	movzx  eax,al
c0017d94:	85 c0                	test   eax,eax
c0017d96:	74 4c                	je     c0017de4 <HalSystemIdle()+0x74>
c0017d98:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0017d9d:	83 ec 08             	sub    esp,0x8
c0017da0:	68 e1 00 00 00       	push   0xe1
c0017da5:	50                   	push   eax
c0017da6:	e8 47 f3 fe ff       	call   c00070f2 <Computer::rdmsr(unsigned int)>
c0017dab:	83 c4 10             	add    esp,0x10
c0017dae:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017db2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0017db6:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0017dbb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017dbf:	83 e2 02             	and    edx,0x2
c0017dc2:	89 d3                	mov    ebx,edx
c0017dc4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017dc8:	83 e2 00             	and    edx,0x0
c0017dcb:	89 d6                	mov    esi,edx
c0017dcd:	56                   	push   esi
c0017dce:	53                   	push   ebx
c0017dcf:	68 e1 00 00 00       	push   0xe1
c0017dd4:	50                   	push   eax
c0017dd5:	e8 44 f3 fe ff       	call   c000711e <Computer::wrmsr(unsigned int, unsigned long long)>
c0017dda:	83 c4 10             	add    esp,0x10
c0017ddd:	e8 b2 83 fe ff       	call   c0000194 <doTPAUSE>
c0017de2:	eb 01                	jmp    c0017de5 <HalSystemIdle()+0x75>
c0017de4:	f4                   	hlt    
c0017de5:	90                   	nop
c0017de6:	83 c4 14             	add    esp,0x14
c0017de9:	5b                   	pop    ebx
c0017dea:	5e                   	pop    esi
c0017deb:	c3                   	ret    

c0017dec <displayProgramFault(char const*)>:
c0017dec:	83 ec 0c             	sub    esp,0xc
c0017def:	83 ec 0c             	sub    esp,0xc
c0017df2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017df6:	e8 7a 2b ff ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c0017dfb:	83 c4 10             	add    esp,0x10
c0017dfe:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017e03:	8b 00                	mov    eax,DWORD PTR [eax]
c0017e05:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017e08:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017e0e:	85 c0                	test   eax,eax
c0017e10:	74 21                	je     c0017e33 <displayProgramFault(char const*)+0x47>
c0017e12:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017e17:	8b 00                	mov    eax,DWORD PTR [eax]
c0017e19:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017e1c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017e22:	6a 04                	push   0x4
c0017e24:	6a 0f                	push   0xf
c0017e26:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017e2a:	50                   	push   eax
c0017e2b:	e8 18 0d ff ff       	call   c0008b48 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0017e30:	83 c4 10             	add    esp,0x10
c0017e33:	90                   	nop
c0017e34:	83 c4 0c             	add    esp,0xc
c0017e37:	c3                   	ret    

c0017e38 <gpFault(regs*, void*)>:
c0017e38:	83 ec 1c             	sub    esp,0x1c
c0017e3b:	c7 05 74 c7 02 c0 94 72 01 c0 	mov    DWORD PTR ds:0xc002c774,0xc0017294
c0017e45:	a1 74 c7 02 c0       	mov    eax,ds:0xc002c774
c0017e4a:	85 c0                	test   eax,eax
c0017e4c:	74 1e                	je     c0017e6c <gpFault(regs*, void*)+0x34>
c0017e4e:	a1 74 c7 02 c0       	mov    eax,ds:0xc002c774
c0017e53:	83 ec 0c             	sub    esp,0xc
c0017e56:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017e5a:	ff d0                	call   eax
c0017e5c:	83 c4 10             	add    esp,0x10
c0017e5f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017e63:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0017e68:	85 c0                	test   eax,eax
c0017e6a:	75 2e                	jne    c0017e9a <gpFault(regs*, void*)+0x62>
c0017e6c:	83 ec 0c             	sub    esp,0xc
c0017e6f:	68 f2 2d 02 c0       	push   0xc0022df2
c0017e74:	e8 73 ff ff ff       	call   c0017dec <displayProgramFault(char const*)>
c0017e79:	83 c4 10             	add    esp,0x10
c0017e7c:	83 ec 0c             	sub    esp,0xc
c0017e7f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017e83:	e8 63 fb ff ff       	call   c00179eb <displayDebugInfo(regs*)>
c0017e88:	83 c4 10             	add    esp,0x10
c0017e8b:	83 ec 0c             	sub    esp,0xc
c0017e8e:	6a 00                	push   0x0
c0017e90:	e8 a3 ed ff ff       	call   c0016c38 <Thr::terminateFromIRQ(int)>
c0017e95:	83 c4 10             	add    esp,0x10
c0017e98:	eb 01                	jmp    c0017e9b <gpFault(regs*, void*)+0x63>
c0017e9a:	90                   	nop
c0017e9b:	83 c4 1c             	add    esp,0x1c
c0017e9e:	c3                   	ret    

c0017e9f <pgFault(regs*, void*)>:
c0017e9f:	83 ec 1c             	sub    esp,0x1c
c0017ea2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ea6:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0017ea9:	0f 20 d0             	mov    eax,cr2
c0017eac:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017eb0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017eb4:	83 ec 04             	sub    esp,0x4
c0017eb7:	52                   	push   edx
c0017eb8:	50                   	push   eax
c0017eb9:	68 d0 2e 02 c0       	push   0xc0022ed0
c0017ebe:	e8 b2 2a ff ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c0017ec3:	83 c4 10             	add    esp,0x10
c0017ec6:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017ecb:	8b 00                	mov    eax,DWORD PTR [eax]
c0017ecd:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017ed0:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0017ed6:	0f 20 d2             	mov    edx,cr2
c0017ed9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0017edd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017ee1:	83 ec 08             	sub    esp,0x8
c0017ee4:	52                   	push   edx
c0017ee5:	50                   	push   eax
c0017ee6:	e8 d5 24 ff ff       	call   c000a3c0 <VAS::tryLoadBackOffDisk(unsigned long)>
c0017eeb:	83 c4 10             	add    esp,0x10
c0017eee:	0f b6 c0             	movzx  eax,al
c0017ef1:	85 c0                	test   eax,eax
c0017ef3:	75 2e                	jne    c0017f23 <pgFault(regs*, void*)+0x84>
c0017ef5:	83 ec 0c             	sub    esp,0xc
c0017ef8:	68 0b 2e 02 c0       	push   0xc0022e0b
c0017efd:	e8 ea fe ff ff       	call   c0017dec <displayProgramFault(char const*)>
c0017f02:	83 c4 10             	add    esp,0x10
c0017f05:	83 ec 0c             	sub    esp,0xc
c0017f08:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017f0c:	e8 da fa ff ff       	call   c00179eb <displayDebugInfo(regs*)>
c0017f11:	83 c4 10             	add    esp,0x10
c0017f14:	83 ec 0c             	sub    esp,0xc
c0017f17:	6a 00                	push   0x0
c0017f19:	e8 1a ed ff ff       	call   c0016c38 <Thr::terminateFromIRQ(int)>
c0017f1e:	83 c4 10             	add    esp,0x10
c0017f21:	eb 01                	jmp    c0017f24 <pgFault(regs*, void*)+0x85>
c0017f23:	90                   	nop
c0017f24:	83 c4 1c             	add    esp,0x1c
c0017f27:	c3                   	ret    

c0017f28 <otherISRHandler(regs*, void*)>:
c0017f28:	83 ec 0c             	sub    esp,0xc
c0017f2b:	83 ec 0c             	sub    esp,0xc
c0017f2e:	68 f8 2e 02 c0       	push   0xc0022ef8
c0017f33:	e8 b4 fe ff ff       	call   c0017dec <displayProgramFault(char const*)>
c0017f38:	83 c4 10             	add    esp,0x10
c0017f3b:	83 ec 0c             	sub    esp,0xc
c0017f3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017f42:	e8 a4 fa ff ff       	call   c00179eb <displayDebugInfo(regs*)>
c0017f47:	83 c4 10             	add    esp,0x10
c0017f4a:	83 ec 0c             	sub    esp,0xc
c0017f4d:	6a 00                	push   0x0
c0017f4f:	e8 e4 ec ff ff       	call   c0016c38 <Thr::terminateFromIRQ(int)>
c0017f54:	83 c4 10             	add    esp,0x10
c0017f57:	90                   	nop
c0017f58:	83 c4 0c             	add    esp,0xc
c0017f5b:	c3                   	ret    

c0017f5c <opcodeFault(regs*, void*)>:
c0017f5c:	55                   	push   ebp
c0017f5d:	89 e5                	mov    ebp,esp
c0017f5f:	83 ec 08             	sub    esp,0x8
c0017f62:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017f65:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017f68:	83 ec 08             	sub    esp,0x8
c0017f6b:	50                   	push   eax
c0017f6c:	68 16 2e 02 c0       	push   0xc0022e16
c0017f71:	e8 ff 29 ff ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c0017f76:	83 c4 10             	add    esp,0x10
c0017f79:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0017f7e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0017f84:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0017f8a:	0f b6 c0             	movzx  eax,al
c0017f8d:	85 c0                	test   eax,eax
c0017f8f:	74 21                	je     c0017fb2 <opcodeFault(regs*, void*)+0x56>
c0017f91:	83 ec 0c             	sub    esp,0xc
c0017f94:	68 20 2f 02 c0       	push   0xc0022f20
c0017f99:	e8 d7 29 ff ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c0017f9e:	83 c4 10             	add    esp,0x10
c0017fa1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017fa4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017fa7:	8d 50 19             	lea    edx,[eax+0x19]
c0017faa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017fad:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0017fb0:	eb 2b                	jmp    c0017fdd <opcodeFault(regs*, void*)+0x81>
c0017fb2:	83 ec 0c             	sub    esp,0xc
c0017fb5:	68 24 2e 02 c0       	push   0xc0022e24
c0017fba:	e8 2d fe ff ff       	call   c0017dec <displayProgramFault(char const*)>
c0017fbf:	83 c4 10             	add    esp,0x10
c0017fc2:	83 ec 0c             	sub    esp,0xc
c0017fc5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0017fc8:	e8 1e fa ff ff       	call   c00179eb <displayDebugInfo(regs*)>
c0017fcd:	83 c4 10             	add    esp,0x10
c0017fd0:	83 ec 0c             	sub    esp,0xc
c0017fd3:	6a 00                	push   0x0
c0017fd5:	e8 5e ec ff ff       	call   c0016c38 <Thr::terminateFromIRQ(int)>
c0017fda:	83 c4 10             	add    esp,0x10
c0017fdd:	c9                   	leave  
c0017fde:	c3                   	ret    

c0017fdf <i386SaveCoprocessor(void*)>:
c0017fdf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017fe3:	83 c0 3f             	add    eax,0x3f
c0017fe6:	83 e0 c0             	and    eax,0xffffffc0
c0017fe9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017fed:	ff 25 70 c7 02 c0    	jmp    DWORD PTR ds:0xc002c770

c0017ff3 <i386LoadCoprocessor(void*)>:
c0017ff3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017ff7:	83 c0 3f             	add    eax,0x3f
c0017ffa:	83 e0 c0             	and    eax,0xffffffc0
c0017ffd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018001:	ff 25 6c c7 02 c0    	jmp    DWORD PTR ds:0xc002c76c

c0018007 <x87EmulHandler(regs*, void*)>:
c0018007:	53                   	push   ebx
c0018008:	83 ec 08             	sub    esp,0x8
c001800b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018010:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c0018014:	74 10                	je     c0018026 <x87EmulHandler(regs*, void*)+0x1f>
c0018016:	83 ec 0c             	sub    esp,0xc
c0018019:	68 31 2e 02 c0       	push   0xc0022e31
c001801e:	e8 a4 96 ff ff       	call   c00116c7 <KePanic(char const*)>
c0018023:	83 c4 10             	add    esp,0x10
c0018026:	0f 20 c0             	mov    eax,cr0
c0018029:	a8 08                	test   al,0x8
c001802b:	74 59                	je     c0018086 <x87EmulHandler(regs*, void*)+0x7f>
c001802d:	0f 06                	clts   
c001802f:	a1 68 c7 02 c0       	mov    eax,ds:0xc002c768
c0018034:	85 c0                	test   eax,eax
c0018036:	74 0e                	je     c0018046 <x87EmulHandler(regs*, void*)+0x3f>
c0018038:	83 ec 0c             	sub    esp,0xc
c001803b:	ff 70 55             	push   DWORD PTR [eax+0x55]
c001803e:	e8 9c ff ff ff       	call   c0017fdf <i386SaveCoprocessor(void*)>
c0018043:	83 c4 10             	add    esp,0x10
c0018046:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c001804c:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c0018050:	75 12                	jne    c0018064 <x87EmulHandler(regs*, void*)+0x5d>
c0018052:	83 ec 0c             	sub    esp,0xc
c0018055:	68 40 02 00 00       	push   0x240
c001805a:	e8 87 fa fe ff       	call   c0007ae6 <malloc>
c001805f:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c0018062:	eb 10                	jmp    c0018074 <x87EmulHandler(regs*, void*)+0x6d>
c0018064:	83 ec 0c             	sub    esp,0xc
c0018067:	a1 68 c7 02 c0       	mov    eax,ds:0xc002c768
c001806c:	ff 70 55             	push   DWORD PTR [eax+0x55]
c001806f:	e8 7f ff ff ff       	call   c0017ff3 <i386LoadCoprocessor(void*)>
c0018074:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018079:	83 c4 10             	add    esp,0x10
c001807c:	a3 68 c7 02 c0       	mov    ds:0xc002c768,eax
c0018081:	83 c4 08             	add    esp,0x8
c0018084:	5b                   	pop    ebx
c0018085:	c3                   	ret    
c0018086:	83 ec 0c             	sub    esp,0xc
c0018089:	68 45 2e 02 c0       	push   0xc0022e45
c001808e:	e8 e2 28 ff ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c0018093:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001809b:	83 c4 18             	add    esp,0x18
c001809e:	5b                   	pop    ebx
c001809f:	e9 94 eb ff ff       	jmp    c0016c38 <Thr::terminateFromIRQ(int)>

c00180a4 <HalInitialiseCoprocessor()>:
c00180a4:	83 ec 10             	sub    esp,0x10
c00180a7:	c7 05 68 c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c768,0x0
c00180b1:	6a 00                	push   0x0
c00180b3:	68 07 80 01 c0       	push   0xc0018007
c00180b8:	6a 07                	push   0x7
c00180ba:	e8 6b 4e ff ff       	call   c000cf2a <installISRHandler(int, void (*)(regs*, void*), void*)>
c00180bf:	e8 4c 70 00 00       	call   c001f110 <avxDetect>
c00180c4:	83 c4 10             	add    esp,0x10
c00180c7:	85 c0                	test   eax,eax
c00180c9:	74 1c                	je     c00180e7 <HalInitialiseCoprocessor()+0x43>
c00180cb:	c7 05 70 c7 02 c0 3a f1 01 c0 	mov    DWORD PTR ds:0xc002c770,0xc001f13a
c00180d5:	c7 05 6c c7 02 c0 4b f1 01 c0 	mov    DWORD PTR ds:0xc002c76c,0xc001f14b
c00180df:	83 c4 0c             	add    esp,0xc
c00180e2:	e9 75 70 00 00       	jmp    c001f15c <avxInit>
c00180e7:	e8 b4 73 00 00       	call   c001f4a0 <absolutelyNoChanceInHell>
c00180ec:	85 c0                	test   eax,eax
c00180ee:	74 1c                	je     c001810c <HalInitialiseCoprocessor()+0x68>
c00180f0:	c7 05 70 c7 02 c0 b8 f4 01 c0 	mov    DWORD PTR ds:0xc002c770,0xc001f4b8
c00180fa:	c7 05 6c c7 02 c0 c0 f4 01 c0 	mov    DWORD PTR ds:0xc002c76c,0xc001f4c0
c0018104:	83 c4 0c             	add    esp,0xc
c0018107:	e9 bc 73 00 00       	jmp    c001f4c8 <sseInit>
c001810c:	e8 d5 73 00 00       	call   c001f4e6 <x87Detect>
c0018111:	85 c0                	test   eax,eax
c0018113:	74 1c                	je     c0018131 <HalInitialiseCoprocessor()+0x8d>
c0018115:	c7 05 70 c7 02 c0 01 f5 01 c0 	mov    DWORD PTR ds:0xc002c770,0xc001f501
c001811f:	c7 05 6c c7 02 c0 08 f5 01 c0 	mov    DWORD PTR ds:0xc002c76c,0xc001f508
c0018129:	83 c4 0c             	add    esp,0xc
c001812c:	e9 de 73 00 00       	jmp    c001f50f <x87Init>
c0018131:	c7 05 70 c7 02 c0 b8 79 01 c0 	mov    DWORD PTR ds:0xc002c770,0xc00179b8
c001813b:	c7 05 6c c7 02 c0 b8 79 01 c0 	mov    DWORD PTR ds:0xc002c76c,0xc00179b8
c0018145:	0f 20 c0             	mov    eax,cr0
c0018148:	83 c8 04             	or     eax,0x4
c001814b:	0f 22 c0             	mov    cr0,eax
c001814e:	83 c4 0c             	add    esp,0xc
c0018151:	c3                   	ret    

c0018152 <HalPanic(char const*)>:
c0018152:	53                   	push   ebx
c0018153:	83 ec 10             	sub    esp,0x10
c0018156:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001815a:	fa                   	cli    
c001815b:	53                   	push   ebx
c001815c:	68 5b 2e 02 c0       	push   0xc0022e5b
c0018161:	e8 0f 28 ff ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c0018166:	a1 64 c7 02 c0       	mov    eax,ds:0xc002c764
c001816b:	83 c4 10             	add    esp,0x10
c001816e:	85 c0                	test   eax,eax
c0018170:	74 09                	je     c001817b <HalPanic(char const*)+0x29>
c0018172:	83 ec 0c             	sub    esp,0xc
c0018175:	53                   	push   ebx
c0018176:	ff d0                	call   eax
c0018178:	83 c4 10             	add    esp,0x10
c001817b:	a1 04 6f 02 c0       	mov    eax,ds:0xc0026f04
c0018180:	85 c0                	test   eax,eax
c0018182:	0f 84 dc 00 00 00    	je     c0018264 <HalPanic(char const*)+0x112>
c0018188:	52                   	push   edx
c0018189:	6a 01                	push   0x1
c001818b:	6a 0f                	push   0xf
c001818d:	50                   	push   eax
c001818e:	e8 51 04 ff ff       	call   c00085e4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0018193:	59                   	pop    ecx
c0018194:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c001819a:	e8 35 06 ff ff       	call   c00087d4 <VgaText::clearScreen()>
c001819f:	58                   	pop    eax
c00181a0:	5a                   	pop    edx
c00181a1:	68 b8 0f 02 c0       	push   0xc0020fb8
c00181a6:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c00181ac:	e8 6b 04 ff ff       	call   c000861c <VgaText::setTitle(char*)>
c00181b1:	83 c4 0c             	add    esp,0xc
c00181b4:	6a 01                	push   0x1
c00181b6:	6a 0f                	push   0xf
c00181b8:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c00181be:	e8 21 04 ff ff       	call   c00085e4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00181c3:	59                   	pop    ecx
c00181c4:	58                   	pop    eax
c00181c5:	68 74 2e 02 c0       	push   0xc0022e74
c00181ca:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c00181d0:	e8 01 09 ff ff       	call   c0008ad6 <VgaText::puts(char const*)>
c00181d5:	83 c4 0c             	add    esp,0xc
c00181d8:	6a 0f                	push   0xf
c00181da:	6a 01                	push   0x1
c00181dc:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c00181e2:	e8 fd 03 ff ff       	call   c00085e4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00181e7:	58                   	pop    eax
c00181e8:	5a                   	pop    edx
c00181e9:	68 7d 2e 02 c0       	push   0xc0022e7d
c00181ee:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c00181f4:	e8 dd 08 ff ff       	call   c0008ad6 <VgaText::puts(char const*)>
c00181f9:	83 c4 0c             	add    esp,0xc
c00181fc:	6a 01                	push   0x1
c00181fe:	6a 0f                	push   0xf
c0018200:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c0018206:	e8 d9 03 ff ff       	call   c00085e4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001820b:	59                   	pop    ecx
c001820c:	58                   	pop    eax
c001820d:	68 c1 2e 02 c0       	push   0xc0022ec1
c0018212:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c0018218:	e8 b9 08 ff ff       	call   c0008ad6 <VgaText::puts(char const*)>
c001821d:	58                   	pop    eax
c001821e:	5a                   	pop    edx
c001821f:	68 8a 2e 02 c0       	push   0xc0022e8a
c0018224:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c001822a:	e8 a7 08 ff ff       	call   c0008ad6 <VgaText::puts(char const*)>
c001822f:	59                   	pop    ecx
c0018230:	58                   	pop    eax
c0018231:	68 c4 2e 02 c0       	push   0xc0022ec4
c0018236:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c001823c:	e8 95 08 ff ff       	call   c0008ad6 <VgaText::puts(char const*)>
c0018241:	58                   	pop    eax
c0018242:	5a                   	pop    edx
c0018243:	53                   	push   ebx
c0018244:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c001824a:	e8 87 08 ff ff       	call   c0008ad6 <VgaText::puts(char const*)>
c001824f:	59                   	pop    ecx
c0018250:	5b                   	pop    ebx
c0018251:	68 c1 2e 02 c0       	push   0xc0022ec1
c0018256:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c001825c:	e8 75 08 ff ff       	call   c0008ad6 <VgaText::puts(char const*)>
c0018261:	83 c4 10             	add    esp,0x10
c0018264:	eb fe                	jmp    c0018264 <HalPanic(char const*)+0x112>

c0018266 <HalQueryPerformanceCounter()>:
c0018266:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001826b:	31 d2                	xor    edx,edx
c001826d:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0018273:	31 c0                	xor    eax,eax
c0018275:	f6 81 8c 11 00 00 02 	test   BYTE PTR [ecx+0x118c],0x2
c001827c:	74 02                	je     c0018280 <HalQueryPerformanceCounter()+0x1a>
c001827e:	0f 31                	rdtsc  
c0018280:	c3                   	ret    

c0018281 <HalInitialise()>:
c0018281:	53                   	push   ebx
c0018282:	83 ec 08             	sub    esp,0x8
c0018285:	e8 d0 4e ff ff       	call   c000d15a <setupINTS()>
c001828a:	80 3d e0 bb 02 c0 00 	cmp    BYTE PTR ds:0xc002bbe0,0x0
c0018291:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0018296:	75 0f                	jne    c00182a7 <HalInitialise()+0x26>
c0018298:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c001829e:	83 e2 fe             	and    edx,0xfffffffe
c00182a1:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c00182a7:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c00182ad:	c6 05 60 c7 02 c0 00 	mov    BYTE PTR ds:0xc002c760,0x0
c00182b4:	83 e2 fe             	and    edx,0xfffffffe
c00182b7:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c00182bd:	e8 9e 02 00 00       	call   c0018560 <picOpen()>
c00182c2:	80 3d 60 c7 02 c0 00 	cmp    BYTE PTR ds:0xc002c760,0x0
c00182c9:	74 0a                	je     c00182d5 <HalInitialise()+0x54>
c00182cb:	e8 e0 01 00 00       	call   c00184b0 <picDisable()>
c00182d0:	e8 ad 67 00 00       	call   c001ea82 <apicOpen()>
c00182d5:	bb 0f 00 00 00       	mov    ebx,0xf
c00182da:	50                   	push   eax
c00182db:	6a 00                	push   0x0
c00182dd:	68 28 7f 01 c0       	push   0xc0017f28
c00182e2:	6a 00                	push   0x0
c00182e4:	e8 41 4c ff ff       	call   c000cf2a <installISRHandler(int, void (*)(regs*, void*), void*)>
c00182e9:	83 c4 0c             	add    esp,0xc
c00182ec:	6a 00                	push   0x0
c00182ee:	68 28 7f 01 c0       	push   0xc0017f28
c00182f3:	6a 01                	push   0x1
c00182f5:	e8 30 4c ff ff       	call   c000cf2a <installISRHandler(int, void (*)(regs*, void*), void*)>
c00182fa:	83 c4 0c             	add    esp,0xc
c00182fd:	6a 00                	push   0x0
c00182ff:	68 b9 79 01 c0       	push   0xc00179b9
c0018304:	6a 02                	push   0x2
c0018306:	e8 1f 4c ff ff       	call   c000cf2a <installISRHandler(int, void (*)(regs*, void*), void*)>
c001830b:	83 c4 0c             	add    esp,0xc
c001830e:	6a 00                	push   0x0
c0018310:	68 28 7f 01 c0       	push   0xc0017f28
c0018315:	6a 03                	push   0x3
c0018317:	e8 0e 4c ff ff       	call   c000cf2a <installISRHandler(int, void (*)(regs*, void*), void*)>
c001831c:	83 c4 0c             	add    esp,0xc
c001831f:	6a 00                	push   0x0
c0018321:	68 28 7f 01 c0       	push   0xc0017f28
c0018326:	6a 04                	push   0x4
c0018328:	e8 fd 4b ff ff       	call   c000cf2a <installISRHandler(int, void (*)(regs*, void*), void*)>
c001832d:	83 c4 0c             	add    esp,0xc
c0018330:	6a 00                	push   0x0
c0018332:	68 28 7f 01 c0       	push   0xc0017f28
c0018337:	6a 05                	push   0x5
c0018339:	e8 ec 4b ff ff       	call   c000cf2a <installISRHandler(int, void (*)(regs*, void*), void*)>
c001833e:	83 c4 0c             	add    esp,0xc
c0018341:	6a 00                	push   0x0
c0018343:	68 5c 7f 01 c0       	push   0xc0017f5c
c0018348:	6a 06                	push   0x6
c001834a:	e8 db 4b ff ff       	call   c000cf2a <installISRHandler(int, void (*)(regs*, void*), void*)>
c001834f:	83 c4 0c             	add    esp,0xc
c0018352:	6a 00                	push   0x0
c0018354:	68 d2 79 01 c0       	push   0xc00179d2
c0018359:	6a 08                	push   0x8
c001835b:	e8 ca 4b ff ff       	call   c000cf2a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018360:	83 c4 0c             	add    esp,0xc
c0018363:	6a 00                	push   0x0
c0018365:	68 28 7f 01 c0       	push   0xc0017f28
c001836a:	6a 09                	push   0x9
c001836c:	e8 b9 4b ff ff       	call   c000cf2a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018371:	83 c4 0c             	add    esp,0xc
c0018374:	6a 00                	push   0x0
c0018376:	68 28 7f 01 c0       	push   0xc0017f28
c001837b:	6a 0a                	push   0xa
c001837d:	e8 a8 4b ff ff       	call   c000cf2a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018382:	83 c4 0c             	add    esp,0xc
c0018385:	6a 00                	push   0x0
c0018387:	68 28 7f 01 c0       	push   0xc0017f28
c001838c:	6a 0b                	push   0xb
c001838e:	e8 97 4b ff ff       	call   c000cf2a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018393:	83 c4 0c             	add    esp,0xc
c0018396:	6a 00                	push   0x0
c0018398:	68 38 7e 01 c0       	push   0xc0017e38
c001839d:	6a 0d                	push   0xd
c001839f:	e8 86 4b ff ff       	call   c000cf2a <installISRHandler(int, void (*)(regs*, void*), void*)>
c00183a4:	83 c4 0c             	add    esp,0xc
c00183a7:	6a 00                	push   0x0
c00183a9:	68 9f 7e 01 c0       	push   0xc0017e9f
c00183ae:	6a 0e                	push   0xe
c00183b0:	e8 75 4b ff ff       	call   c000cf2a <installISRHandler(int, void (*)(regs*, void*), void*)>
c00183b5:	83 c4 10             	add    esp,0x10
c00183b8:	50                   	push   eax
c00183b9:	6a 00                	push   0x0
c00183bb:	68 28 7f 01 c0       	push   0xc0017f28
c00183c0:	53                   	push   ebx
c00183c1:	43                   	inc    ebx
c00183c2:	e8 63 4b ff ff       	call   c000cf2a <installISRHandler(int, void (*)(regs*, void*), void*)>
c00183c7:	83 c4 10             	add    esp,0x10
c00183ca:	83 fb 1e             	cmp    ebx,0x1e
c00183cd:	75 e9                	jne    c00183b8 <HalInitialise()+0x137>
c00183cf:	50                   	push   eax
c00183d0:	6a 00                	push   0x0
c00183d2:	68 60 2b 01 c0       	push   0xc0012b60
c00183d7:	6a 60                	push   0x60
c00183d9:	e8 4c 4b ff ff       	call   c000cf2a <installISRHandler(int, void (*)(regs*, void*), void*)>
c00183de:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c00183e3:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c00183ed:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c00183f4:	e8 ed f6 fe ff       	call   c0007ae6 <malloc>
c00183f9:	89 04 24             	mov    DWORD PTR [esp],eax
c00183fc:	89 c3                	mov    ebx,eax
c00183fe:	e8 3b 09 00 00       	call   c0018d3e <RTC::RTC()>
c0018403:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c001840d:	5a                   	pop    edx
c001840e:	59                   	pop    ecx
c001840f:	53                   	push   ebx
c0018410:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018416:	e8 db 45 ff ff       	call   c000c9f6 <Device::addChild(Device*)>
c001841b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001841d:	6a 00                	push   0x0
c001841f:	6a 00                	push   0x0
c0018421:	6a 00                	push   0x0
c0018423:	53                   	push   ebx
c0018424:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0018427:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001842c:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c0018432:	83 c4 28             	add    esp,0x28
c0018435:	5b                   	pop    ebx
c0018436:	c3                   	ret    

c0018437 <HalMakeBeep(int)>:
c0018437:	53                   	push   ebx
c0018438:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001843c:	85 db                	test   ebx,ebx
c001843e:	75 07                	jne    c0018447 <HalMakeBeep(int)+0x10>
c0018440:	e4 61                	in     al,0x61
c0018442:	83 e0 fc             	and    eax,0xfffffffc
c0018445:	eb 26                	jmp    c001846d <HalMakeBeep(int)+0x36>
c0018447:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001844c:	99                   	cdq    
c001844d:	f7 fb                	idiv   ebx
c001844f:	89 c1                	mov    ecx,eax
c0018451:	b0 b6                	mov    al,0xb6
c0018453:	e6 43                	out    0x43,al
c0018455:	88 c8                	mov    al,cl
c0018457:	e6 42                	out    0x42,al
c0018459:	89 c8                	mov    eax,ecx
c001845b:	c1 e8 08             	shr    eax,0x8
c001845e:	e6 42                	out    0x42,al
c0018460:	e4 61                	in     al,0x61
c0018462:	89 c2                	mov    edx,eax
c0018464:	83 ca 03             	or     edx,0x3
c0018467:	38 d0                	cmp    al,dl
c0018469:	74 04                	je     c001846f <HalMakeBeep(int)+0x38>
c001846b:	88 d0                	mov    al,dl
c001846d:	e6 61                	out    0x61,al
c001846f:	5b                   	pop    ebx
c0018470:	c3                   	ret    

c0018471 <HalGetRand()>:
c0018471:	31 c0                	xor    eax,eax
c0018473:	c3                   	ret    

c0018474 <HalEndOfInterrupt(int)>:
c0018474:	80 3d 60 c7 02 c0 00 	cmp    BYTE PTR ds:0xc002c760,0x0
c001847b:	74 23                	je     c00184a0 <HalEndOfInterrupt(int)+0x2c>
c001847d:	83 ec 14             	sub    esp,0x14
c0018480:	6a 1b                	push   0x1b
c0018482:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018488:	e8 65 ec fe ff       	call   c00070f2 <Computer::rdmsr(unsigned int)>
c001848d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0018492:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c001849c:	83 c4 1c             	add    esp,0x1c
c001849f:	c3                   	ret    
c00184a0:	e9 3f 02 00 00       	jmp    c00186e4 <picEOI(int)>

c00184a5 <HalRestart()>:
c00184a5:	c3                   	ret    

c00184a6 <HalShutdown()>:
c00184a6:	c3                   	ret    

c00184a7 <HalSleep()>:
c00184a7:	c3                   	ret    

c00184a8 <picIoWait()>:
c00184a8:	eb 00                	jmp    c00184aa <picIoWait()+0x2>
c00184aa:	eb 00                	jmp    c00184ac <picIoWait()+0x4>
c00184ac:	90                   	nop
c00184ad:	c3                   	ret    
c00184ae:	66 90                	xchg   ax,ax

c00184b0 <picDisable()>:
c00184b0:	83 ec 10             	sub    esp,0x10
c00184b3:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c00184ba:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c00184bf:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00184c3:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c00184c8:	ee                   	out    dx,al
c00184c9:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c00184d0:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c00184d5:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c00184d9:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c00184de:	ee                   	out    dx,al
c00184df:	90                   	nop
c00184e0:	83 c4 10             	add    esp,0x10
c00184e3:	c3                   	ret    

c00184e4 <picGetIRQReg(int)>:
c00184e4:	83 ec 10             	sub    esp,0x10
c00184e7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00184eb:	0f b6 c0             	movzx  eax,al
c00184ee:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c00184f5:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c00184f9:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c00184fd:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0018502:	ee                   	out    dx,al
c0018503:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018507:	0f b6 c0             	movzx  eax,al
c001850a:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0018511:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0018515:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0018519:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001851e:	ee                   	out    dx,al
c001851f:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c0018526:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c001852b:	89 c2                	mov    edx,eax
c001852d:	ec                   	in     al,dx
c001852e:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0018532:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018536:	0f b6 c0             	movzx  eax,al
c0018539:	c1 e0 08             	shl    eax,0x8
c001853c:	89 c1                	mov    ecx,eax
c001853e:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c0018545:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c001854a:	89 c2                	mov    edx,eax
c001854c:	ec                   	in     al,dx
c001854d:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0018551:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0018555:	0f b6 c0             	movzx  eax,al
c0018558:	09 c8                	or     eax,ecx
c001855a:	83 c4 10             	add    esp,0x10
c001855d:	c3                   	ret    
c001855e:	66 90                	xchg   ax,ax

c0018560 <picOpen()>:
c0018560:	83 ec 50             	sub    esp,0x50
c0018563:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c001856a:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001856f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0018573:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018577:	ee                   	out    dx,al
c0018578:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c001857f:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0018584:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0018588:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001858c:	ee                   	out    dx,al
c001858d:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c0018595:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c001859d:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c00185a4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00185a8:	89 c2                	mov    edx,eax
c00185aa:	ec                   	in     al,dx
c00185ab:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c00185af:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c00185b3:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c00185b7:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c00185be:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00185c2:	89 c2                	mov    edx,eax
c00185c4:	ec                   	in     al,dx
c00185c5:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c00185c9:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c00185cd:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c00185d1:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c00185d8:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c00185dd:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c00185e1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00185e5:	ee                   	out    dx,al
c00185e6:	e8 bd fe ff ff       	call   c00184a8 <picIoWait()>
c00185eb:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c00185f2:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c00185f7:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c00185fb:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00185ff:	ee                   	out    dx,al
c0018600:	e8 a3 fe ff ff       	call   c00184a8 <picIoWait()>
c0018605:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0018609:	0f b6 c0             	movzx  eax,al
c001860c:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c0018613:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c0018617:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c001861b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001861f:	ee                   	out    dx,al
c0018620:	e8 83 fe ff ff       	call   c00184a8 <picIoWait()>
c0018625:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0018629:	0f b6 c0             	movzx  eax,al
c001862c:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c0018633:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0018637:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001863b:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001863f:	ee                   	out    dx,al
c0018640:	e8 63 fe ff ff       	call   c00184a8 <picIoWait()>
c0018645:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c001864c:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c0018651:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c0018655:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0018659:	ee                   	out    dx,al
c001865a:	e8 49 fe ff ff       	call   c00184a8 <picIoWait()>
c001865f:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c0018666:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c001866b:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001866f:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0018673:	ee                   	out    dx,al
c0018674:	e8 2f fe ff ff       	call   c00184a8 <picIoWait()>
c0018679:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c0018680:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c0018685:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c0018689:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001868d:	ee                   	out    dx,al
c001868e:	e8 15 fe ff ff       	call   c00184a8 <picIoWait()>
c0018693:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c001869a:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c001869f:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c00186a3:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00186a7:	ee                   	out    dx,al
c00186a8:	e8 fb fd ff ff       	call   c00184a8 <picIoWait()>
c00186ad:	0f b6 44 24 47       	movzx  eax,BYTE PTR [esp+0x47]
c00186b2:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c00186b9:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c00186bd:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00186c1:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00186c5:	ee                   	out    dx,al
c00186c6:	0f b6 44 24 46       	movzx  eax,BYTE PTR [esp+0x46]
c00186cb:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c00186d2:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c00186d6:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c00186da:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00186de:	ee                   	out    dx,al
c00186df:	90                   	nop
c00186e0:	83 c4 50             	add    esp,0x50
c00186e3:	c3                   	ret    

c00186e4 <picEOI(int)>:
c00186e4:	83 ec 10             	sub    esp,0x10
c00186e7:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c00186ec:	75 1e                	jne    c001870c <picEOI(int)+0x28>
c00186ee:	6a 0b                	push   0xb
c00186f0:	e8 ef fd ff ff       	call   c00184e4 <picGetIRQReg(int)>
c00186f5:	83 c4 04             	add    esp,0x4
c00186f8:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c00186fd:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c0018702:	25 80 00 00 00       	and    eax,0x80
c0018707:	74 73                	je     c001877c <picEOI(int)+0x98>
c0018709:	8d 76 00             	lea    esi,[esi+0x0]
c001870c:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0018711:	75 31                	jne    c0018744 <picEOI(int)+0x60>
c0018713:	6a 0b                	push   0xb
c0018715:	e8 ca fd ff ff       	call   c00184e4 <picGetIRQReg(int)>
c001871a:	83 c4 04             	add    esp,0x4
c001871d:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0018722:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018726:	98                   	cwde   
c0018727:	85 c0                	test   eax,eax
c0018729:	78 19                	js     c0018744 <picEOI(int)+0x60>
c001872b:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c0018732:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c0018737:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001873b:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0018740:	ee                   	out    dx,al
c0018741:	eb 3d                	jmp    c0018780 <picEOI(int)+0x9c>
c0018743:	90                   	nop
c0018744:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0018749:	7e 19                	jle    c0018764 <picEOI(int)+0x80>
c001874b:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0018752:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c0018757:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001875b:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0018760:	ee                   	out    dx,al
c0018761:	8d 76 00             	lea    esi,[esi+0x0]
c0018764:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c001876b:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c0018770:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0018774:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0018779:	ee                   	out    dx,al
c001877a:	eb 04                	jmp    c0018780 <picEOI(int)+0x9c>
c001877c:	90                   	nop
c001877d:	8d 76 00             	lea    esi,[esi+0x0]
c0018780:	83 c4 10             	add    esp,0x10
c0018783:	c3                   	ret    

c0018784 <RTC::open(int, int, void*)>:
c0018784:	31 c0                	xor    eax,eax
c0018786:	c3                   	ret    
c0018787:	90                   	nop

c0018788 <RTC::close(int, int, void*)>:
c0018788:	31 c0                	xor    eax,eax
c001878a:	c3                   	ret    
c001878b:	90                   	nop

c001878c <RTC::timeInSecondsUTC()>:
c001878c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018790:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0018796:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001879c:	c3                   	ret    
c001879d:	90                   	nop

c001879e <RTC::timeInDatetimeUTC()>:
c001879e:	53                   	push   ebx
c001879f:	83 ec 14             	sub    esp,0x14
c00187a2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00187a6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00187aa:	8b 10                	mov    edx,DWORD PTR [eax]
c00187ac:	50                   	push   eax
c00187ad:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00187b0:	83 c4 0c             	add    esp,0xc
c00187b3:	52                   	push   edx
c00187b4:	50                   	push   eax
c00187b5:	53                   	push   ebx
c00187b6:	e8 af 3f ff ff       	call   c000c76a <secondsToDatetime(unsigned long long)>
c00187bb:	89 d8                	mov    eax,ebx
c00187bd:	83 c4 14             	add    esp,0x14
c00187c0:	5b                   	pop    ebx
c00187c1:	c2 04 00             	ret    0x4

c00187c4 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c00187c4:	56                   	push   esi
c00187c5:	53                   	push   ebx
c00187c6:	83 ec 14             	sub    esp,0x14
c00187c9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00187cd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00187cf:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c00187d2:	8d 44 24 08          	lea    eax,[esp+0x8]
c00187d6:	52                   	push   edx
c00187d7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00187db:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00187df:	50                   	push   eax
c00187e0:	e8 85 3f ff ff       	call   c000c76a <secondsToDatetime(unsigned long long)>
c00187e5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00187e9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00187ed:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00187f1:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c00187f5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00187f9:	89 f0                	mov    eax,esi
c00187fb:	83 c4 20             	add    esp,0x20
c00187fe:	5b                   	pop    ebx
c00187ff:	5e                   	pop    esi
c0018800:	ff e0                	jmp    eax

c0018802 <RTC::~RTC()>:
c0018802:	83 ec 0c             	sub    esp,0xc
c0018805:	ba 60 2f 02 c0       	mov    edx,0xc0022f60
c001880a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001880e:	89 10                	mov    DWORD PTR [eax],edx
c0018810:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018814:	83 ec 0c             	sub    esp,0xc
c0018817:	50                   	push   eax
c0018818:	e8 df 3c ff ff       	call   c000c4fc <Clock::~Clock()>
c001881d:	83 c4 10             	add    esp,0x10
c0018820:	90                   	nop
c0018821:	83 c4 0c             	add    esp,0xc
c0018824:	c3                   	ret    
c0018825:	90                   	nop

c0018826 <RTC::~RTC()>:
c0018826:	83 ec 0c             	sub    esp,0xc
c0018829:	83 ec 0c             	sub    esp,0xc
c001882c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018830:	e8 cd ff ff ff       	call   c0018802 <RTC::~RTC()>
c0018835:	83 c4 10             	add    esp,0x10
c0018838:	83 ec 08             	sub    esp,0x8
c001883b:	68 60 01 00 00       	push   0x160
c0018840:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018844:	e8 ff 1f ff ff       	call   c000a848 <operator delete(void*, unsigned long)>
c0018849:	83 c4 10             	add    esp,0x10
c001884c:	83 c4 0c             	add    esp,0xc
c001884f:	c3                   	ret    

c0018850 <RTC::get_update_in_progress_flag()>:
c0018850:	83 ec 14             	sub    esp,0x14
c0018853:	6a 0a                	push   0xa
c0018855:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c001885b:	e8 4a e9 fe ff       	call   c00071aa <Computer::readCMOS(unsigned char)>
c0018860:	83 c4 1c             	add    esp,0x1c
c0018863:	0f b6 c0             	movzx  eax,al
c0018866:	c1 e8 07             	shr    eax,0x7
c0018869:	c3                   	ret    

c001886a <RTC::completeRTCRefresh()>:
c001886a:	55                   	push   ebp
c001886b:	57                   	push   edi
c001886c:	56                   	push   esi
c001886d:	53                   	push   ebx
c001886e:	83 ec 3c             	sub    esp,0x3c
c0018871:	8b 1d ec b8 02 c0    	mov    ebx,DWORD PTR ds:0xc002b8ec
c0018877:	83 ec 0c             	sub    esp,0xc
c001887a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001887e:	e8 cd ff ff ff       	call   c0018850 <RTC::get_update_in_progress_flag()>
c0018883:	83 c4 10             	add    esp,0x10
c0018886:	84 c0                	test   al,al
c0018888:	74 0e                	je     c0018898 <RTC::completeRTCRefresh()+0x2e>
c001888a:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0018890:	3b 05 ec b8 02 c0    	cmp    eax,DWORD PTR ds:0xc002b8ec
c0018896:	73 df                	jae    c0018877 <RTC::completeRTCRefresh()+0xd>
c0018898:	51                   	push   ecx
c0018899:	51                   	push   ecx
c001889a:	6a 00                	push   0x0
c001889c:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00188a2:	e8 03 e9 fe ff       	call   c00071aa <Computer::readCMOS(unsigned char)>
c00188a7:	5b                   	pop    ebx
c00188a8:	89 c7                	mov    edi,eax
c00188aa:	5e                   	pop    esi
c00188ab:	6a 02                	push   0x2
c00188ad:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00188b3:	e8 f2 e8 fe ff       	call   c00071aa <Computer::readCMOS(unsigned char)>
c00188b8:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c00188bc:	5d                   	pop    ebp
c00188bd:	58                   	pop    eax
c00188be:	6a 04                	push   0x4
c00188c0:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00188c6:	e8 df e8 fe ff       	call   c00071aa <Computer::readCMOS(unsigned char)>
c00188cb:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00188cf:	58                   	pop    eax
c00188d0:	5a                   	pop    edx
c00188d1:	6a 07                	push   0x7
c00188d3:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00188d9:	e8 cc e8 fe ff       	call   c00071aa <Computer::readCMOS(unsigned char)>
c00188de:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c00188e2:	59                   	pop    ecx
c00188e3:	5b                   	pop    ebx
c00188e4:	6a 08                	push   0x8
c00188e6:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00188ec:	e8 b9 e8 fe ff       	call   c00071aa <Computer::readCMOS(unsigned char)>
c00188f1:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c00188f5:	5e                   	pop    esi
c00188f6:	5d                   	pop    ebp
c00188f7:	6a 09                	push   0x9
c00188f9:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00188ff:	e8 a6 e8 fe ff       	call   c00071aa <Computer::readCMOS(unsigned char)>
c0018904:	0f b6 c0             	movzx  eax,al
c0018907:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001890b:	83 c4 10             	add    esp,0x10
c001890e:	8b 1d ec b8 02 c0    	mov    ebx,DWORD PTR ds:0xc002b8ec
c0018914:	83 ec 0c             	sub    esp,0xc
c0018917:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001891b:	e8 30 ff ff ff       	call   c0018850 <RTC::get_update_in_progress_flag()>
c0018920:	83 c4 10             	add    esp,0x10
c0018923:	84 c0                	test   al,al
c0018925:	74 0e                	je     c0018935 <RTC::completeRTCRefresh()+0xcb>
c0018927:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c001892d:	3b 05 ec b8 02 c0    	cmp    eax,DWORD PTR ds:0xc002b8ec
c0018933:	73 df                	jae    c0018914 <RTC::completeRTCRefresh()+0xaa>
c0018935:	51                   	push   ecx
c0018936:	51                   	push   ecx
c0018937:	6a 00                	push   0x0
c0018939:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c001893f:	e8 66 e8 fe ff       	call   c00071aa <Computer::readCMOS(unsigned char)>
c0018944:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0018948:	5b                   	pop    ebx
c0018949:	5e                   	pop    esi
c001894a:	6a 02                	push   0x2
c001894c:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018952:	e8 53 e8 fe ff       	call   c00071aa <Computer::readCMOS(unsigned char)>
c0018957:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001895b:	5d                   	pop    ebp
c001895c:	58                   	pop    eax
c001895d:	6a 04                	push   0x4
c001895f:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018965:	e8 40 e8 fe ff       	call   c00071aa <Computer::readCMOS(unsigned char)>
c001896a:	88 c3                	mov    bl,al
c001896c:	58                   	pop    eax
c001896d:	5a                   	pop    edx
c001896e:	6a 07                	push   0x7
c0018970:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018976:	e8 2f e8 fe ff       	call   c00071aa <Computer::readCMOS(unsigned char)>
c001897b:	59                   	pop    ecx
c001897c:	89 c6                	mov    esi,eax
c001897e:	5d                   	pop    ebp
c001897f:	6a 08                	push   0x8
c0018981:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018987:	e8 1e e8 fe ff       	call   c00071aa <Computer::readCMOS(unsigned char)>
c001898c:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0018990:	58                   	pop    eax
c0018991:	5a                   	pop    edx
c0018992:	6a 09                	push   0x9
c0018994:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c001899a:	e8 0b e8 fe ff       	call   c00071aa <Computer::readCMOS(unsigned char)>
c001899f:	89 f9                	mov    ecx,edi
c00189a1:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c00189a5:	0f b6 e8             	movzx  ebp,al
c00189a8:	83 c4 10             	add    esp,0x10
c00189ab:	38 4c 24 08          	cmp    BYTE PTR [esp+0x8],cl
c00189af:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00189b4:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c00189b9:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00189bd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00189c1:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c00189c5:	0f 94 c0             	sete   al
c00189c8:	0f b6 fb             	movzx  edi,bl
c00189cb:	3a 4c 24 18          	cmp    cl,BYTE PTR [esp+0x18]
c00189cf:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c00189d4:	0f 94 c2             	sete   dl
c00189d7:	21 d0                	and    eax,edx
c00189d9:	3a 5c 24 1c          	cmp    bl,BYTE PTR [esp+0x1c]
c00189dd:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c00189e1:	0f 94 c2             	sete   dl
c00189e4:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c00189e8:	21 c2                	and    edx,eax
c00189ea:	89 f0                	mov    eax,esi
c00189ec:	0f b6 c0             	movzx  eax,al
c00189ef:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00189f3:	89 f0                	mov    eax,esi
c00189f5:	3a 44 24 22          	cmp    al,BYTE PTR [esp+0x22]
c00189f9:	0f 94 c0             	sete   al
c00189fc:	21 d0                	and    eax,edx
c00189fe:	31 d2                	xor    edx,edx
c0018a00:	3a 4c 24 23          	cmp    cl,BYTE PTR [esp+0x23]
c0018a04:	0f 94 c2             	sete   dl
c0018a07:	85 c2                	test   edx,eax
c0018a09:	75 27                	jne    c0018a32 <RTC::completeRTCRefresh()+0x1c8>
c0018a0b:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0018a0f:	89 6c 24 24          	mov    DWORD PTR [esp+0x24],ebp
c0018a13:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0018a17:	88 5c 24 1c          	mov    BYTE PTR [esp+0x1c],bl
c0018a1b:	89 f0                	mov    eax,esi
c0018a1d:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0018a21:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0018a25:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018a29:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0018a2d:	e9 dc fe ff ff       	jmp    c001890e <RTC::completeRTCRefresh()+0xa4>
c0018a32:	39 6c 24 24          	cmp    DWORD PTR [esp+0x24],ebp
c0018a36:	75 d3                	jne    c0018a0b <RTC::completeRTCRefresh()+0x1a1>
c0018a38:	52                   	push   edx
c0018a39:	52                   	push   edx
c0018a3a:	6a 0b                	push   0xb
c0018a3c:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018a42:	e8 63 e7 fe ff       	call   c00071aa <Computer::readCMOS(unsigned char)>
c0018a47:	83 c4 10             	add    esp,0x10
c0018a4a:	a8 04                	test   al,0x4
c0018a4c:	75 7a                	jne    c0018ac8 <RTC::completeRTCRefresh()+0x25e>
c0018a4e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0018a52:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018a56:	83 e1 0f             	and    ecx,0xf
c0018a59:	c1 ea 04             	shr    edx,0x4
c0018a5c:	c1 ef 04             	shr    edi,0x4
c0018a5f:	6b d2 0a             	imul   edx,edx,0xa
c0018a62:	83 e6 0f             	and    esi,0xf
c0018a65:	01 d1                	add    ecx,edx
c0018a67:	c1 ed 04             	shr    ebp,0x4
c0018a6a:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0018a6e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0018a72:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018a76:	c1 ea 04             	shr    edx,0x4
c0018a79:	83 e1 0f             	and    ecx,0xf
c0018a7c:	6b d2 0a             	imul   edx,edx,0xa
c0018a7f:	6b ed 0a             	imul   ebp,ebp,0xa
c0018a82:	01 d1                	add    ecx,edx
c0018a84:	89 fa                	mov    edx,edi
c0018a86:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0018a8a:	83 e2 07             	and    edx,0x7
c0018a8d:	89 d9                	mov    ecx,ebx
c0018a8f:	6b d2 0a             	imul   edx,edx,0xa
c0018a92:	83 e1 0f             	and    ecx,0xf
c0018a95:	83 e3 80             	and    ebx,0xffffff80
c0018a98:	01 d1                	add    ecx,edx
c0018a9a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018a9e:	09 cb                	or     ebx,ecx
c0018aa0:	c1 ea 04             	shr    edx,0x4
c0018aa3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018aa7:	6b d2 0a             	imul   edx,edx,0xa
c0018aaa:	83 e1 0f             	and    ecx,0xf
c0018aad:	01 d6                	add    esi,edx
c0018aaf:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018ab3:	c1 ea 04             	shr    edx,0x4
c0018ab6:	6b d2 0a             	imul   edx,edx,0xa
c0018ab9:	01 d1                	add    ecx,edx
c0018abb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018abf:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c0018ac3:	83 e2 0f             	and    edx,0xf
c0018ac6:	01 d5                	add    ebp,edx
c0018ac8:	a8 02                	test   al,0x2
c0018aca:	75 15                	jne    c0018ae1 <RTC::completeRTCRefresh()+0x277>
c0018acc:	f6 c3 80             	test   bl,0x80
c0018acf:	74 10                	je     c0018ae1 <RTC::completeRTCRefresh()+0x277>
c0018ad1:	83 e3 7f             	and    ebx,0x7f
c0018ad4:	b9 18 00 00 00       	mov    ecx,0x18
c0018ad9:	8d 43 0c             	lea    eax,[ebx+0xc]
c0018adc:	99                   	cdq    
c0018add:	f7 f9                	idiv   ecx
c0018adf:	88 d3                	mov    bl,dl
c0018ae1:	8d bd d0 07 00 00    	lea    edi,[ebp+0x7d0]
c0018ae7:	81 ff e3 07 00 00    	cmp    edi,0x7e3
c0018aed:	77 06                	ja     c0018af5 <RTC::completeRTCRefresh()+0x28b>
c0018aef:	8d bd 34 08 00 00    	lea    edi,[ebp+0x834]
c0018af5:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018afa:	31 c9                	xor    ecx,ecx
c0018afc:	c1 e0 10             	shl    eax,0x10
c0018aff:	89 cd                	mov    ebp,ecx
c0018b01:	c1 e7 10             	shl    edi,0x10
c0018b04:	31 d2                	xor    edx,edx
c0018b06:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0018b0c:	09 c5                	or     ebp,eax
c0018b0e:	89 f0                	mov    eax,esi
c0018b10:	89 e9                	mov    ecx,ebp
c0018b12:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0018b16:	8a 6c 24 0c          	mov    ch,BYTE PTR [esp+0xc]
c0018b1a:	88 c2                	mov    dl,al
c0018b1c:	88 d9                	mov    cl,bl
c0018b1e:	8a 74 24 10          	mov    dh,BYTE PTR [esp+0x10]
c0018b22:	0f b7 c2             	movzx  eax,dx
c0018b25:	09 f8                	or     eax,edi
c0018b27:	89 c2                	mov    edx,eax
c0018b29:	50                   	push   eax
c0018b2a:	50                   	push   eax
c0018b2b:	51                   	push   ecx
c0018b2c:	52                   	push   edx
c0018b2d:	e8 b9 3a ff ff       	call   c000c5eb <datetimeToSeconds(datetime_t)>
c0018b32:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c0018b36:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c0018b3c:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c0018b42:	83 c4 4c             	add    esp,0x4c
c0018b45:	5b                   	pop    ebx
c0018b46:	5e                   	pop    esi
c0018b47:	5f                   	pop    edi
c0018b48:	5d                   	pop    ebp
c0018b49:	c3                   	ret    

c0018b4a <RTC::setTimeInDatetimeUTC(datetime_t)>:
c0018b4a:	55                   	push   ebp
c0018b4b:	57                   	push   edi
c0018b4c:	56                   	push   esi
c0018b4d:	53                   	push   ebx
c0018b4e:	83 ec 30             	sub    esp,0x30
c0018b51:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0018b55:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0018b59:	6a 00                	push   0x0
c0018b5b:	6a 00                	push   0x0
c0018b5d:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018b63:	e8 5c e7 fe ff       	call   c00072c4 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018b68:	83 c4 0c             	add    esp,0xc
c0018b6b:	6a 00                	push   0x0
c0018b6d:	6a 02                	push   0x2
c0018b6f:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018b75:	e8 4a e7 fe ff       	call   c00072c4 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018b7a:	31 d2                	xor    edx,edx
c0018b7c:	89 f9                	mov    ecx,edi
c0018b7e:	89 f8                	mov    eax,edi
c0018b80:	c1 e9 10             	shr    ecx,0x10
c0018b83:	0f b6 c4             	movzx  eax,ah
c0018b86:	88 4c 24 1c          	mov    BYTE PTR [esp+0x1c],cl
c0018b8a:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0018b8e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018b92:	b9 64 00 00 00       	mov    ecx,0x64
c0018b97:	89 f0                	mov    eax,esi
c0018b99:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0018b9d:	89 f0                	mov    eax,esi
c0018b9f:	0f b6 c4             	movzx  eax,ah
c0018ba2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018ba6:	89 f0                	mov    eax,esi
c0018ba8:	c1 e8 10             	shr    eax,0x10
c0018bab:	f7 f1                	div    ecx
c0018bad:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0018bb1:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0018bb5:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0018bb9:	59                   	pop    ecx
c0018bba:	5b                   	pop    ebx
c0018bbb:	89 fb                	mov    ebx,edi
c0018bbd:	6a 0b                	push   0xb
c0018bbf:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018bc5:	e8 e0 e5 fe ff       	call   c00071aa <Computer::readCMOS(unsigned char)>
c0018bca:	83 c4 10             	add    esp,0x10
c0018bcd:	89 c5                	mov    ebp,eax
c0018bcf:	a8 04                	test   al,0x4
c0018bd1:	75 6e                	jne    c0018c41 <RTC::setTimeInDatetimeUTC(datetime_t)+0xf7>
c0018bd3:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0018bd7:	31 d2                	xor    edx,edx
c0018bd9:	0f b6 c1             	movzx  eax,cl
c0018bdc:	b9 0a 00 00 00       	mov    ecx,0xa
c0018be1:	f7 f1                	div    ecx
c0018be3:	c1 e0 04             	shl    eax,0x4
c0018be6:	09 d0                	or     eax,edx
c0018be8:	31 d2                	xor    edx,edx
c0018bea:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018bee:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0018bf3:	f7 f1                	div    ecx
c0018bf5:	c1 e0 04             	shl    eax,0x4
c0018bf8:	09 d0                	or     eax,edx
c0018bfa:	31 d2                	xor    edx,edx
c0018bfc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018c00:	0f b6 c3             	movzx  eax,bl
c0018c03:	f7 f1                	div    ecx
c0018c05:	c1 e0 04             	shl    eax,0x4
c0018c08:	09 d0                	or     eax,edx
c0018c0a:	31 d2                	xor    edx,edx
c0018c0c:	89 c3                	mov    ebx,eax
c0018c0e:	89 f0                	mov    eax,esi
c0018c10:	0f b6 c0             	movzx  eax,al
c0018c13:	f7 f1                	div    ecx
c0018c15:	c1 e0 04             	shl    eax,0x4
c0018c18:	09 d0                	or     eax,edx
c0018c1a:	31 d2                	xor    edx,edx
c0018c1c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0018c20:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018c25:	f7 f1                	div    ecx
c0018c27:	c1 e0 04             	shl    eax,0x4
c0018c2a:	09 d0                	or     eax,edx
c0018c2c:	31 d2                	xor    edx,edx
c0018c2e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018c32:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018c36:	f7 f1                	div    ecx
c0018c38:	c1 e0 04             	shl    eax,0x4
c0018c3b:	09 d0                	or     eax,edx
c0018c3d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018c41:	83 e5 02             	and    ebp,0x2
c0018c44:	75 1e                	jne    c0018c64 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0018c46:	0f b6 c3             	movzx  eax,bl
c0018c49:	83 f8 0b             	cmp    eax,0xb
c0018c4c:	76 10                	jbe    c0018c5e <RTC::setTimeInDatetimeUTC(datetime_t)+0x114>
c0018c4e:	8d 53 f4             	lea    edx,[ebx-0xc]
c0018c51:	88 d3                	mov    bl,dl
c0018c53:	84 d2                	test   dl,dl
c0018c55:	75 02                	jne    c0018c59 <RTC::setTimeInDatetimeUTC(datetime_t)+0x10f>
c0018c57:	b3 0c                	mov    bl,0xc
c0018c59:	83 cb 80             	or     ebx,0xffffff80
c0018c5c:	eb 06                	jmp    c0018c64 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0018c5e:	85 c0                	test   eax,eax
c0018c60:	75 02                	jne    c0018c64 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0018c62:	b3 0c                	mov    bl,0xc
c0018c64:	0f b6 db             	movzx  ebx,bl
c0018c67:	50                   	push   eax
c0018c68:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0018c6d:	52                   	push   edx
c0018c6e:	6a 00                	push   0x0
c0018c70:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018c76:	e8 49 e6 fe ff       	call   c00072c4 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018c7b:	83 c4 0c             	add    esp,0xc
c0018c7e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018c83:	50                   	push   eax
c0018c84:	6a 02                	push   0x2
c0018c86:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018c8c:	e8 33 e6 fe ff       	call   c00072c4 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018c91:	83 c4 0c             	add    esp,0xc
c0018c94:	53                   	push   ebx
c0018c95:	6a 04                	push   0x4
c0018c97:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018c9d:	e8 22 e6 fe ff       	call   c00072c4 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018ca2:	83 c4 0c             	add    esp,0xc
c0018ca5:	0f b6 54 24 14       	movzx  edx,BYTE PTR [esp+0x14]
c0018caa:	52                   	push   edx
c0018cab:	6a 07                	push   0x7
c0018cad:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018cb3:	e8 0c e6 fe ff       	call   c00072c4 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018cb8:	83 c4 0c             	add    esp,0xc
c0018cbb:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0018cc0:	50                   	push   eax
c0018cc1:	6a 08                	push   0x8
c0018cc3:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018cc9:	e8 f6 e5 fe ff       	call   c00072c4 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018cce:	83 c4 0c             	add    esp,0xc
c0018cd1:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c0018cd6:	55                   	push   ebp
c0018cd7:	6a 09                	push   0x9
c0018cd9:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018cdf:	e8 e0 e5 fe ff       	call   c00072c4 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018ce4:	5a                   	pop    edx
c0018ce5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0018ce9:	e8 7c fb ff ff       	call   c001886a <RTC::completeRTCRefresh()>
c0018cee:	83 c4 3c             	add    esp,0x3c
c0018cf1:	b0 01                	mov    al,0x1
c0018cf3:	5b                   	pop    ebx
c0018cf4:	5e                   	pop    esi
c0018cf5:	5f                   	pop    edi
c0018cf6:	5d                   	pop    ebp
c0018cf7:	c3                   	ret    

c0018cf8 <rtcIRQHandler(regs*, void*)>:
c0018cf8:	53                   	push   ebx
c0018cf9:	83 ec 10             	sub    esp,0x10
c0018cfc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0018d00:	6a 0c                	push   0xc
c0018d02:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018d08:	e8 9d e4 fe ff       	call   c00071aa <Computer::readCMOS(unsigned char)>
c0018d0d:	83 c4 10             	add    esp,0x10
c0018d10:	a8 80                	test   al,0x80
c0018d12:	74 24                	je     c0018d38 <rtcIRQHandler(regs*, void*)+0x40>
c0018d14:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c0018d1b:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c0018d22:	66 ff 05 78 c7 02 c0 	inc    WORD PTR ds:0xc002c778
c0018d29:	75 0d                	jne    c0018d38 <rtcIRQHandler(regs*, void*)+0x40>
c0018d2b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0018d2f:	83 c4 08             	add    esp,0x8
c0018d32:	5b                   	pop    ebx
c0018d33:	e9 32 fb ff ff       	jmp    c001886a <RTC::completeRTCRefresh()>
c0018d38:	83 c4 08             	add    esp,0x8
c0018d3b:	5b                   	pop    ebx
c0018d3c:	c3                   	ret    
c0018d3d:	90                   	nop

c0018d3e <RTC::RTC()>:
c0018d3e:	83 ec 1c             	sub    esp,0x1c
c0018d41:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018d45:	83 ec 08             	sub    esp,0x8
c0018d48:	68 43 2f 02 c0       	push   0xc0022f43
c0018d4d:	50                   	push   eax
c0018d4e:	e8 73 37 ff ff       	call   c000c4c6 <Clock::Clock(char const*)>
c0018d53:	83 c4 10             	add    esp,0x10
c0018d56:	ba 60 2f 02 c0       	mov    edx,0xc0022f60
c0018d5b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018d5f:	89 10                	mov    DWORD PTR [eax],edx
c0018d61:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018d65:	83 ec 0c             	sub    esp,0xc
c0018d68:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018d6c:	6a 01                	push   0x1
c0018d6e:	68 f8 8c 01 c0       	push   0xc0018cf8
c0018d73:	6a 08                	push   0x8
c0018d75:	50                   	push   eax
c0018d76:	e8 27 3c ff ff       	call   c000c9a2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0018d7b:	83 c4 20             	add    esp,0x20
c0018d7e:	89 c2                	mov    edx,eax
c0018d80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018d84:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0018d8a:	fa                   	cli    
c0018d8b:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0018d90:	83 c0 01             	add    eax,0x1
c0018d93:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0018d98:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0018d9d:	83 ec 08             	sub    esp,0x8
c0018da0:	6a 0b                	push   0xb
c0018da2:	50                   	push   eax
c0018da3:	e8 02 e4 fe ff       	call   c00071aa <Computer::readCMOS(unsigned char)>
c0018da8:	83 c4 10             	add    esp,0x10
c0018dab:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0018daf:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0018db4:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0018db8:	83 ca 10             	or     edx,0x10
c0018dbb:	0f b6 d2             	movzx  edx,dl
c0018dbe:	83 ec 04             	sub    esp,0x4
c0018dc1:	52                   	push   edx
c0018dc2:	6a 0b                	push   0xb
c0018dc4:	50                   	push   eax
c0018dc5:	e8 fa e4 fe ff       	call   c00072c4 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018dca:	83 c4 10             	add    esp,0x10
c0018dcd:	83 ec 0c             	sub    esp,0xc
c0018dd0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018dd4:	e8 91 fa ff ff       	call   c001886a <RTC::completeRTCRefresh()>
c0018dd9:	83 c4 10             	add    esp,0x10
c0018ddc:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0018de1:	83 e8 01             	sub    eax,0x1
c0018de4:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0018de9:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0018dee:	85 c0                	test   eax,eax
c0018df0:	75 01                	jne    c0018df3 <RTC::RTC()+0xb5>
c0018df2:	fb                   	sti    
c0018df3:	90                   	nop
c0018df4:	83 c4 1c             	add    esp,0x1c
c0018df7:	c3                   	ret    

c0018df8 <HalConsoleScroll(int, int)>:
c0018df8:	83 ec 10             	sub    esp,0x10
c0018dfb:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c0018e03:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0018e0b:	90                   	nop
c0018e0c:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0018e11:	0f 8f e1 00 00 00    	jg     c0018ef8 <HalConsoleScroll(int, int)+0x100>
c0018e17:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0018e1f:	90                   	nop
c0018e20:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c0018e28:	0f 8f be 00 00 00    	jg     c0018eec <HalConsoleScroll(int, int)+0xf4>
c0018e2e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018e32:	89 d0                	mov    eax,edx
c0018e34:	c1 e0 02             	shl    eax,0x2
c0018e37:	01 d0                	add    eax,edx
c0018e39:	c1 e0 05             	shl    eax,0x5
c0018e3c:	89 c2                	mov    edx,eax
c0018e3e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018e42:	01 d0                	add    eax,edx
c0018e44:	89 c2                	mov    edx,eax
c0018e46:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018e4a:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0018e4d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018e51:	89 d0                	mov    eax,edx
c0018e53:	c1 e0 02             	shl    eax,0x2
c0018e56:	01 d0                	add    eax,edx
c0018e58:	c1 e0 05             	shl    eax,0x5
c0018e5b:	89 c2                	mov    edx,eax
c0018e5d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018e61:	01 d0                	add    eax,edx
c0018e63:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c0018e69:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018e6d:	01 c2                	add    edx,eax
c0018e6f:	8a 01                	mov    al,BYTE PTR [ecx]
c0018e71:	88 02                	mov    BYTE PTR [edx],al
c0018e73:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0018e78:	75 66                	jne    c0018ee0 <HalConsoleScroll(int, int)+0xe8>
c0018e7a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018e7e:	83 e0 01             	and    eax,0x1
c0018e81:	74 39                	je     c0018ebc <HalConsoleScroll(int, int)+0xc4>
c0018e83:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018e87:	83 e0 0f             	and    eax,0xf
c0018e8a:	88 c2                	mov    dl,al
c0018e8c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018e90:	c1 e0 04             	shl    eax,0x4
c0018e93:	09 d0                	or     eax,edx
c0018e95:	88 c1                	mov    cl,al
c0018e97:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018e9b:	89 d0                	mov    eax,edx
c0018e9d:	c1 e0 02             	shl    eax,0x2
c0018ea0:	01 d0                	add    eax,edx
c0018ea2:	c1 e0 05             	shl    eax,0x5
c0018ea5:	89 c2                	mov    edx,eax
c0018ea7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018eab:	01 d0                	add    eax,edx
c0018ead:	89 c2                	mov    edx,eax
c0018eaf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018eb3:	01 d0                	add    eax,edx
c0018eb5:	88 ca                	mov    dl,cl
c0018eb7:	88 10                	mov    BYTE PTR [eax],dl
c0018eb9:	eb 25                	jmp    c0018ee0 <HalConsoleScroll(int, int)+0xe8>
c0018ebb:	90                   	nop
c0018ebc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018ec0:	89 d0                	mov    eax,edx
c0018ec2:	c1 e0 02             	shl    eax,0x2
c0018ec5:	01 d0                	add    eax,edx
c0018ec7:	c1 e0 05             	shl    eax,0x5
c0018eca:	89 c2                	mov    edx,eax
c0018ecc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018ed0:	01 d0                	add    eax,edx
c0018ed2:	89 c2                	mov    edx,eax
c0018ed4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018ed8:	01 d0                	add    eax,edx
c0018eda:	c6 00 20             	mov    BYTE PTR [eax],0x20
c0018edd:	8d 76 00             	lea    esi,[esi+0x0]
c0018ee0:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c0018ee5:	e9 36 ff ff ff       	jmp    c0018e20 <HalConsoleScroll(int, int)+0x28>
c0018eea:	66 90                	xchg   ax,ax
c0018eec:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0018ef1:	e9 16 ff ff ff       	jmp    c0018e0c <HalConsoleScroll(int, int)+0x14>
c0018ef6:	66 90                	xchg   ax,ax
c0018ef8:	90                   	nop
c0018ef9:	83 c4 10             	add    esp,0x10
c0018efc:	c3                   	ret    
c0018efd:	8d 76 00             	lea    esi,[esi+0x0]

c0018f00 <HalConsoleWriteCharacter(char, int, int, int, int)>:
c0018f00:	83 ec 14             	sub    esp,0x14
c0018f03:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018f07:	88 04 24             	mov    BYTE PTR [esp],al
c0018f0a:	8a 04 24             	mov    al,BYTE PTR [esp]
c0018f0d:	0f b6 c0             	movzx  eax,al
c0018f10:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018f14:	89 d1                	mov    ecx,edx
c0018f16:	83 e1 0f             	and    ecx,0xf
c0018f19:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018f1d:	c1 e2 04             	shl    edx,0x4
c0018f20:	0f b6 d2             	movzx  edx,dl
c0018f23:	09 ca                	or     edx,ecx
c0018f25:	c1 e2 08             	shl    edx,0x8
c0018f28:	09 d0                	or     eax,edx
c0018f2a:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0018f2f:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c0018f37:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018f3b:	89 d0                	mov    eax,edx
c0018f3d:	c1 e0 02             	shl    eax,0x2
c0018f40:	01 d0                	add    eax,edx
c0018f42:	c1 e0 04             	shl    eax,0x4
c0018f45:	89 c2                	mov    edx,eax
c0018f47:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018f4b:	01 d0                	add    eax,edx
c0018f4d:	01 c0                	add    eax,eax
c0018f4f:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0018f53:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018f57:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0018f5c:	66 89 02             	mov    WORD PTR [edx],ax
c0018f5f:	90                   	nop
c0018f60:	83 c4 14             	add    esp,0x14
c0018f63:	c3                   	ret    

c0018f64 <HalConsoleCursorUpdate(int, int)>:
c0018f64:	83 ec 20             	sub    esp,0x20
c0018f67:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018f6b:	89 c2                	mov    edx,eax
c0018f6d:	c1 e2 02             	shl    edx,0x2
c0018f70:	01 d0                	add    eax,edx
c0018f72:	c1 e0 04             	shl    eax,0x4
c0018f75:	89 c2                	mov    edx,eax
c0018f77:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018f7b:	01 d0                	add    eax,edx
c0018f7d:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0018f82:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c0018f89:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c0018f8e:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0018f92:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018f96:	ee                   	out    dx,al
c0018f97:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0018f9c:	0f b6 c0             	movzx  eax,al
c0018f9f:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c0018fa6:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0018faa:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0018fae:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018fb2:	ee                   	out    dx,al
c0018fb3:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c0018fba:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c0018fbf:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0018fc3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018fc7:	ee                   	out    dx,al
c0018fc8:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c0018fcd:	c1 e8 08             	shr    eax,0x8
c0018fd0:	0f b6 c0             	movzx  eax,al
c0018fd3:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c0018fda:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0018fde:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0018fe2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018fe6:	ee                   	out    dx,al
c0018fe7:	90                   	nop
c0018fe8:	83 c4 20             	add    esp,0x20
c0018feb:	c3                   	ret    

c0018fec <FAT::getName()>:
c0018fec:	b8 94 2f 02 c0       	mov    eax,0xc0022f94
c0018ff1:	c3                   	ret    
c0018ff2:	66 90                	xchg   ax,ax

c0018ff4 <FAT::tell(void*, unsigned long long*)>:
c0018ff4:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018ff9:	75 09                	jne    c0019004 <FAT::tell(void*, unsigned long long*)+0x10>
c0018ffb:	b8 04 00 00 00       	mov    eax,0x4
c0019000:	c3                   	ret    
c0019001:	8d 76 00             	lea    esi,[esi+0x0]
c0019004:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0019009:	75 09                	jne    c0019014 <FAT::tell(void*, unsigned long long*)+0x20>
c001900b:	b8 04 00 00 00       	mov    eax,0x4
c0019010:	c3                   	ret    
c0019011:	8d 76 00             	lea    esi,[esi+0x0]
c0019014:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019018:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001901b:	ba 00 00 00 00       	mov    edx,0x0
c0019020:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019024:	89 01                	mov    DWORD PTR [ecx],eax
c0019026:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0019029:	b8 00 00 00 00       	mov    eax,0x0
c001902e:	c3                   	ret    
c001902f:	90                   	nop

c0019030 <FAT::stat(void*, unsigned long long*)>:
c0019030:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0019035:	75 09                	jne    c0019040 <FAT::stat(void*, unsigned long long*)+0x10>
c0019037:	b8 04 00 00 00       	mov    eax,0x4
c001903c:	c3                   	ret    
c001903d:	8d 76 00             	lea    esi,[esi+0x0]
c0019040:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0019045:	75 09                	jne    c0019050 <FAT::stat(void*, unsigned long long*)+0x20>
c0019047:	b8 04 00 00 00       	mov    eax,0x4
c001904c:	c3                   	ret    
c001904d:	8d 76 00             	lea    esi,[esi+0x0]
c0019050:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019054:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0019057:	ba 00 00 00 00       	mov    edx,0x0
c001905c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019060:	89 01                	mov    DWORD PTR [ecx],eax
c0019062:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0019065:	b8 00 00 00 00       	mov    eax,0x0
c001906a:	c3                   	ret    
c001906b:	90                   	nop

c001906c <FAT::~FAT()>:
c001906c:	83 ec 0c             	sub    esp,0xc
c001906f:	ba e0 2f 02 c0       	mov    edx,0xc0022fe0
c0019074:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019078:	89 10                	mov    DWORD PTR [eax],edx
c001907a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001907e:	83 ec 0c             	sub    esp,0xc
c0019081:	50                   	push   eax
c0019082:	e8 77 27 ff ff       	call   c000b7fe <Filesystem::~Filesystem()>
c0019087:	83 c4 10             	add    esp,0x10
c001908a:	90                   	nop
c001908b:	83 c4 0c             	add    esp,0xc
c001908e:	c3                   	ret    
c001908f:	90                   	nop

c0019090 <FAT::~FAT()>:
c0019090:	83 ec 0c             	sub    esp,0xc
c0019093:	83 ec 0c             	sub    esp,0xc
c0019096:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001909a:	e8 cd ff ff ff       	call   c001906c <FAT::~FAT()>
c001909f:	83 c4 10             	add    esp,0x10
c00190a2:	83 ec 08             	sub    esp,0x8
c00190a5:	6a 08                	push   0x8
c00190a7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00190ab:	e8 98 17 ff ff       	call   c000a848 <operator delete(void*, unsigned long)>
c00190b0:	83 c4 10             	add    esp,0x10
c00190b3:	83 c4 0c             	add    esp,0xc
c00190b6:	c3                   	ret    
c00190b7:	90                   	nop

c00190b8 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c00190b8:	83 ec 1c             	sub    esp,0x1c
c00190bb:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c00190c2:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c00190c7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00190cb:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c00190d2:	83 f8 ff             	cmp    eax,0xffffffff
c00190d5:	75 35                	jne    c001910c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c00190d7:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00190db:	88 c2                	mov    dl,al
c00190dd:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c00190e2:	01 d0                	add    eax,edx
c00190e4:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00190e8:	8b 15 80 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c780
c00190ee:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00190f2:	89 14 85 a0 c7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3860],edx
c00190f9:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c00190fe:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0019102:	89 14 85 20 c8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd37e0],edx
c0019109:	eb 19                	jmp    c0019124 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c001910b:	90                   	nop
c001910c:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0019110:	88 c2                	mov    dl,al
c0019112:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019116:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c001911d:	01 d0                	add    eax,edx
c001911f:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0019123:	90                   	nop
c0019124:	83 ec 04             	sub    esp,0x4
c0019127:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001912b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001912f:	8d 44 24 15          	lea    eax,[esp+0x15]
c0019133:	50                   	push   eax
c0019134:	e8 96 be fe ff       	call   c0004fcf <f_getlabel>
c0019139:	83 c4 10             	add    esp,0x10
c001913c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019140:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0019145:	75 09                	jne    c0019150 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c0019147:	b8 00 00 00 00       	mov    eax,0x0
c001914c:	eb 0a                	jmp    c0019158 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c001914e:	66 90                	xchg   ax,ax
c0019150:	b8 01 00 00 00       	mov    eax,0x1
c0019155:	8d 76 00             	lea    esi,[esi+0x0]
c0019158:	83 c4 1c             	add    esp,0x1c
c001915b:	c3                   	ret    

c001915c <FAT::setlabel(LogicalDisk*, int, char*)>:
c001915c:	57                   	push   edi
c001915d:	83 ec 58             	sub    esp,0x58
c0019160:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0019168:	8d 54 24 10          	lea    edx,[esp+0x10]
c001916c:	b8 00 00 00 00       	mov    eax,0x0
c0019171:	b9 0f 00 00 00       	mov    ecx,0xf
c0019176:	fc                   	cld    
c0019177:	89 d7                	mov    edi,edx
c0019179:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001917b:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001917f:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c0019186:	83 f8 ff             	cmp    eax,0xffffffff
c0019189:	75 35                	jne    c00191c0 <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c001918b:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001918f:	88 c2                	mov    dl,al
c0019191:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c0019196:	01 d0                	add    eax,edx
c0019198:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001919c:	8b 15 80 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c780
c00191a2:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00191a6:	89 14 85 a0 c7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3860],edx
c00191ad:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c00191b2:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c00191b6:	89 14 85 20 c8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd37e0],edx
c00191bd:	eb 19                	jmp    c00191d8 <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c00191bf:	90                   	nop
c00191c0:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00191c4:	88 c2                	mov    dl,al
c00191c6:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00191ca:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c00191d1:	01 d0                	add    eax,edx
c00191d3:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00191d7:	90                   	nop
c00191d8:	83 ec 08             	sub    esp,0x8
c00191db:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c00191df:	8d 44 24 18          	lea    eax,[esp+0x18]
c00191e3:	50                   	push   eax
c00191e4:	e8 57 76 fe ff       	call   c0000840 <strcat>
c00191e9:	83 c4 10             	add    esp,0x10
c00191ec:	83 ec 0c             	sub    esp,0xc
c00191ef:	8d 44 24 18          	lea    eax,[esp+0x18]
c00191f3:	50                   	push   eax
c00191f4:	e8 27 bf fe ff       	call   c0005120 <f_setlabel>
c00191f9:	83 c4 10             	add    esp,0x10
c00191fc:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0019200:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0019205:	75 09                	jne    c0019210 <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c0019207:	b8 00 00 00 00       	mov    eax,0x0
c001920c:	eb 0a                	jmp    c0019218 <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c001920e:	66 90                	xchg   ax,ax
c0019210:	b8 01 00 00 00       	mov    eax,0x1
c0019215:	8d 76 00             	lea    esi,[esi+0x0]
c0019218:	83 c4 58             	add    esp,0x58
c001921b:	5f                   	pop    edi
c001921c:	c3                   	ret    
c001921d:	90                   	nop
c001921e:	66 90                	xchg   ax,ax

c0019220 <FAT::format(LogicalDisk*, int, char const*, int)>:
c0019220:	83 ec 2c             	sub    esp,0x2c
c0019223:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001922b:	83 ec 08             	sub    esp,0x8
c001922e:	68 b8 2f 02 c0       	push   0xc0022fb8
c0019233:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019237:	e8 14 75 fe ff       	call   c0000750 <strcmp>
c001923c:	83 c4 10             	add    esp,0x10
c001923f:	85 c0                	test   eax,eax
c0019241:	0f 94 c0             	sete   al
c0019244:	0f b6 c0             	movzx  eax,al
c0019247:	85 c0                	test   eax,eax
c0019249:	74 0d                	je     c0019258 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c001924b:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0019253:	e9 c0 00 00 00       	jmp    c0019318 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0019258:	83 ec 08             	sub    esp,0x8
c001925b:	68 aa 2f 02 c0       	push   0xc0022faa
c0019260:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019264:	e8 e7 74 fe ff       	call   c0000750 <strcmp>
c0019269:	83 c4 10             	add    esp,0x10
c001926c:	85 c0                	test   eax,eax
c001926e:	0f 94 c0             	sete   al
c0019271:	0f b6 c0             	movzx  eax,al
c0019274:	85 c0                	test   eax,eax
c0019276:	74 10                	je     c0019288 <FAT::format(LogicalDisk*, int, char const*, int)+0x68>
c0019278:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0019280:	e9 93 00 00 00       	jmp    c0019318 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0019285:	8d 76 00             	lea    esi,[esi+0x0]
c0019288:	83 ec 08             	sub    esp,0x8
c001928b:	68 b0 2f 02 c0       	push   0xc0022fb0
c0019290:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019294:	e8 b7 74 fe ff       	call   c0000750 <strcmp>
c0019299:	83 c4 10             	add    esp,0x10
c001929c:	85 c0                	test   eax,eax
c001929e:	0f 94 c0             	sete   al
c00192a1:	0f b6 c0             	movzx  eax,al
c00192a4:	85 c0                	test   eax,eax
c00192a6:	74 0c                	je     c00192b4 <FAT::format(LogicalDisk*, int, char const*, int)+0x94>
c00192a8:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00192b0:	eb 66                	jmp    c0019318 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c00192b2:	66 90                	xchg   ax,ax
c00192b4:	83 ec 08             	sub    esp,0x8
c00192b7:	68 1c 06 02 c0       	push   0xc002061c
c00192bc:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00192c0:	e8 8b 74 fe ff       	call   c0000750 <strcmp>
c00192c5:	83 c4 10             	add    esp,0x10
c00192c8:	85 c0                	test   eax,eax
c00192ca:	0f 94 c0             	sete   al
c00192cd:	0f b6 c0             	movzx  eax,al
c00192d0:	85 c0                	test   eax,eax
c00192d2:	74 0c                	je     c00192e0 <FAT::format(LogicalDisk*, int, char const*, int)+0xc0>
c00192d4:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c00192dc:	eb 3a                	jmp    c0019318 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c00192de:	66 90                	xchg   ax,ax
c00192e0:	83 ec 08             	sub    esp,0x8
c00192e3:	68 b6 2f 02 c0       	push   0xc0022fb6
c00192e8:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00192ec:	e8 5f 74 fe ff       	call   c0000750 <strcmp>
c00192f1:	83 c4 10             	add    esp,0x10
c00192f4:	85 c0                	test   eax,eax
c00192f6:	0f 94 c0             	sete   al
c00192f9:	0f b6 c0             	movzx  eax,al
c00192fc:	85 c0                	test   eax,eax
c00192fe:	74 0c                	je     c001930c <FAT::format(LogicalDisk*, int, char const*, int)+0xec>
c0019300:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0019308:	eb 0e                	jmp    c0019318 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001930a:	66 90                	xchg   ax,ax
c001930c:	b8 08 00 00 00       	mov    eax,0x8
c0019311:	e9 ea 00 00 00       	jmp    c0019400 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0019316:	66 90                	xchg   ax,ax
c0019318:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001931f:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0019324:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019328:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c001932f:	83 f8 ff             	cmp    eax,0xffffffff
c0019332:	75 34                	jne    c0019368 <FAT::format(LogicalDisk*, int, char const*, int)+0x148>
c0019334:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0019338:	88 c2                	mov    dl,al
c001933a:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c001933f:	01 d0                	add    eax,edx
c0019341:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0019345:	8b 15 80 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c780
c001934b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001934f:	89 14 85 a0 c7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3860],edx
c0019356:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c001935b:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001935f:	89 14 85 20 c8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd37e0],edx
c0019366:	eb 18                	jmp    c0019380 <FAT::format(LogicalDisk*, int, char const*, int)+0x160>
c0019368:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001936c:	88 c2                	mov    dl,al
c001936e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019372:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c0019379:	01 d0                	add    eax,edx
c001937b:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001937f:	90                   	nop
c0019380:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019384:	88 04 24             	mov    BYTE PTR [esp],al
c0019387:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001938b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001938f:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0019397:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c001939c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00193a4:	83 ec 0c             	sub    esp,0xc
c00193a7:	68 00 20 00 00       	push   0x2000
c00193ac:	e8 35 e7 fe ff       	call   c0007ae6 <malloc>
c00193b1:	83 c4 10             	add    esp,0x10
c00193b4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00193b8:	68 00 20 00 00       	push   0x2000
c00193bd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00193c1:	8d 44 24 08          	lea    eax,[esp+0x8]
c00193c5:	50                   	push   eax
c00193c6:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c00193ca:	50                   	push   eax
c00193cb:	e8 4d c0 fe ff       	call   c000541d <f_mkfs>
c00193d0:	83 c4 10             	add    esp,0x10
c00193d3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00193d7:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00193dc:	75 0a                	jne    c00193e8 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c00193de:	b8 00 00 00 00       	mov    eax,0x0
c00193e3:	eb 1b                	jmp    c0019400 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c00193e5:	8d 76 00             	lea    esi,[esi+0x0]
c00193e8:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c00193ed:	75 09                	jne    c00193f8 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d8>
c00193ef:	b8 09 00 00 00       	mov    eax,0x9
c00193f4:	eb 0a                	jmp    c0019400 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c00193f6:	66 90                	xchg   ax,ax
c00193f8:	b8 01 00 00 00       	mov    eax,0x1
c00193fd:	8d 76 00             	lea    esi,[esi+0x0]
c0019400:	83 c4 2c             	add    esp,0x2c
c0019403:	c3                   	ret    

c0019404 <FAT::tryMount(LogicalDisk*, int)>:
c0019404:	81 ec 4c 03 00 00    	sub    esp,0x34c
c001940a:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c001940f:	83 f8 14             	cmp    eax,0x14
c0019412:	75 18                	jne    c001942c <FAT::tryMount(LogicalDisk*, int)+0x28>
c0019414:	83 ec 0c             	sub    esp,0xc
c0019417:	68 bc 2f 02 c0       	push   0xc0022fbc
c001941c:	e8 a6 82 ff ff       	call   c00116c7 <KePanic(char const*)>
c0019421:	83 c4 10             	add    esp,0x10
c0019424:	b0 00                	mov    al,0x0
c0019426:	e9 ed 01 00 00       	jmp    c0019618 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001942b:	90                   	nop
c001942c:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0019433:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0019439:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001943f:	3d 00 02 00 00       	cmp    eax,0x200
c0019444:	74 0a                	je     c0019450 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c0019446:	b0 00                	mov    al,0x0
c0019448:	e9 cb 01 00 00       	jmp    c0019618 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001944d:	8d 76 00             	lea    esi,[esi+0x0]
c0019450:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c0019458:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c001945f:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c0019466:	83 f8 ff             	cmp    eax,0xffffffff
c0019469:	74 09                	je     c0019474 <FAT::tryMount(LogicalDisk*, int)+0x70>
c001946b:	b0 01                	mov    al,0x1
c001946d:	e9 a6 01 00 00       	jmp    c0019618 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0019472:	66 90                	xchg   ax,ax
c0019474:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c001947e:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c0019486:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c001948d:	88 c2                	mov    dl,al
c001948f:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c0019494:	01 d0                	add    eax,edx
c0019496:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c001949d:	8b 15 80 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c780
c00194a3:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c00194aa:	89 14 85 a0 c7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3860],edx
c00194b1:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c00194b6:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c00194bd:	89 14 85 20 c8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd37e0],edx
c00194c4:	83 ec 0c             	sub    esp,0xc
c00194c7:	68 34 02 00 00       	push   0x234
c00194cc:	e8 15 e6 fe ff       	call   c0007ae6 <malloc>
c00194d1:	83 c4 10             	add    esp,0x10
c00194d4:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c00194db:	83 ec 04             	sub    esp,0x4
c00194de:	6a 00                	push   0x0
c00194e0:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c00194e7:	50                   	push   eax
c00194e8:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c00194ef:	e8 04 a7 fe ff       	call   c0003bf8 <f_mount>
c00194f4:	83 c4 10             	add    esp,0x10
c00194f7:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c00194fe:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c0019506:	74 1c                	je     c0019524 <FAT::tryMount(LogicalDisk*, int)+0x120>
c0019508:	83 ec 0c             	sub    esp,0xc
c001950b:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0019512:	e8 ef e5 fe ff       	call   c0007b06 <rfree>
c0019517:	83 c4 10             	add    esp,0x10
c001951a:	b0 00                	mov    al,0x0
c001951c:	e9 f7 00 00 00       	jmp    c0019618 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0019521:	8d 76 00             	lea    esi,[esi+0x0]
c0019524:	83 ec 04             	sub    esp,0x4
c0019527:	68 00 01 00 00       	push   0x100
c001952c:	6a 00                	push   0x0
c001952e:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0019535:	50                   	push   eax
c0019536:	e8 b5 6f fe ff       	call   c00004f0 <memset>
c001953b:	83 c4 10             	add    esp,0x10
c001953e:	83 ec 08             	sub    esp,0x8
c0019541:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0019548:	50                   	push   eax
c0019549:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0019550:	50                   	push   eax
c0019551:	e8 ea 72 fe ff       	call   c0000840 <strcat>
c0019556:	83 c4 10             	add    esp,0x10
c0019559:	83 ec 08             	sub    esp,0x8
c001955c:	68 ca 2f 02 c0       	push   0xc0022fca
c0019561:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0019568:	50                   	push   eax
c0019569:	e8 d2 72 fe ff       	call   c0000840 <strcat>
c001956e:	83 c4 10             	add    esp,0x10
c0019571:	83 ec 04             	sub    esp,0x4
c0019574:	6a 01                	push   0x1
c0019576:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c001957d:	50                   	push   eax
c001957e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019582:	50                   	push   eax
c0019583:	e8 d2 a6 fe ff       	call   c0003c5a <f_open>
c0019588:	83 c4 10             	add    esp,0x10
c001958b:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0019592:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c0019599:	85 c0                	test   eax,eax
c001959b:	74 0b                	je     c00195a8 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c001959d:	78 31                	js     c00195d0 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001959f:	83 e8 04             	sub    eax,0x4
c00195a2:	83 f8 01             	cmp    eax,0x1
c00195a5:	77 29                	ja     c00195d0 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c00195a7:	90                   	nop
c00195a8:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c00195b0:	83 ec 0c             	sub    esp,0xc
c00195b3:	8d 44 24 14          	lea    eax,[esp+0x14]
c00195b7:	50                   	push   eax
c00195b8:	e8 6c ae fe ff       	call   c0004429 <f_close>
c00195bd:	83 c4 10             	add    esp,0x10
c00195c0:	90                   	nop
c00195c1:	0f b6 84 24 3f 03 00 00 	movzx  eax,BYTE PTR [esp+0x33f]
c00195c9:	85 c0                	test   eax,eax
c00195cb:	74 43                	je     c0019610 <FAT::tryMount(LogicalDisk*, int)+0x20c>
c00195cd:	eb 31                	jmp    c0019600 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c00195cf:	90                   	nop
c00195d0:	83 ec 0c             	sub    esp,0xc
c00195d3:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c00195da:	e8 27 e5 fe ff       	call   c0007b06 <rfree>
c00195df:	83 c4 10             	add    esp,0x10
c00195e2:	83 ec 04             	sub    esp,0x4
c00195e5:	6a 00                	push   0x0
c00195e7:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c00195ee:	50                   	push   eax
c00195ef:	6a 00                	push   0x0
c00195f1:	e8 02 a6 fe ff       	call   c0003bf8 <f_mount>
c00195f6:	83 c4 10             	add    esp,0x10
c00195f9:	b0 00                	mov    al,0x0
c00195fb:	eb 1b                	jmp    c0019618 <FAT::tryMount(LogicalDisk*, int)+0x214>
c00195fd:	8d 76 00             	lea    esi,[esi+0x0]
c0019600:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c0019605:	83 c0 01             	add    eax,0x1
c0019608:	a3 80 c7 02 c0       	mov    ds:0xc002c780,eax
c001960d:	8d 76 00             	lea    esi,[esi+0x0]
c0019610:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c0019617:	90                   	nop
c0019618:	81 c4 4c 03 00 00    	add    esp,0x34c
c001961e:	c3                   	ret    
c001961f:	90                   	nop

c0019620 <FAT::allocateSwapfile(char const*, int)>:
c0019620:	55                   	push   ebp
c0019621:	57                   	push   edi
c0019622:	56                   	push   esi
c0019623:	53                   	push   ebx
c0019624:	81 ec 3c 04 00 00    	sub    esp,0x43c
c001962a:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c0019635:	83 ec 0c             	sub    esp,0xc
c0019638:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c001963f:	e8 a2 e4 fe ff       	call   c0007ae6 <malloc>
c0019644:	83 c4 10             	add    esp,0x10
c0019647:	89 c7                	mov    edi,eax
c0019649:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c001964e:	83 ec 04             	sub    esp,0x4
c0019651:	50                   	push   eax
c0019652:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c0019659:	57                   	push   edi
c001965a:	e8 1d 25 ff ff       	call   c000bb7c <File::File(char const*, Process*)>
c001965f:	83 c4 10             	add    esp,0x10
c0019662:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c0019669:	83 ec 04             	sub    esp,0x4
c001966c:	8d 44 24 13          	lea    eax,[esp+0x13]
c0019670:	50                   	push   eax
c0019671:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019675:	50                   	push   eax
c0019676:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001967d:	e8 1a 28 ff ff       	call   c000be9c <File::stat(unsigned long long*, bool*)>
c0019682:	83 c4 10             	add    esp,0x10
c0019685:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001968c:	c1 e0 14             	shl    eax,0x14
c001968f:	89 c7                	mov    edi,eax
c0019691:	89 c5                	mov    ebp,eax
c0019693:	c1 fd 1f             	sar    ebp,0x1f
c0019696:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001969a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001969e:	89 f9                	mov    ecx,edi
c00196a0:	31 c1                	xor    ecx,eax
c00196a2:	89 cb                	mov    ebx,ecx
c00196a4:	89 e9                	mov    ecx,ebp
c00196a6:	31 d1                	xor    ecx,edx
c00196a8:	89 ce                	mov    esi,ecx
c00196aa:	89 f0                	mov    eax,esi
c00196ac:	09 d8                	or     eax,ebx
c00196ae:	0f 84 9c 00 00 00    	je     c0019750 <FAT::allocateSwapfile(char const*, int)+0x130>
c00196b4:	83 ec 0c             	sub    esp,0xc
c00196b7:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00196be:	e8 a5 26 ff ff       	call   c000bd68 <File::unlink()>
c00196c3:	83 c4 10             	add    esp,0x10
c00196c6:	83 ec 08             	sub    esp,0x8
c00196c9:	6a 12                	push   0x12
c00196cb:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00196d2:	e8 c3 24 ff ff       	call   c000bb9a <File::open(FileOpenMode)>
c00196d7:	83 c4 10             	add    esp,0x10
c00196da:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c00196e1:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c00196e7:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c00196ee:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c00196f5:	c1 e0 14             	shl    eax,0x14
c00196f8:	83 ec 04             	sub    esp,0x4
c00196fb:	6a 01                	push   0x1
c00196fd:	50                   	push   eax
c00196fe:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c0019705:	e8 a6 bb fe ff       	call   c00052b0 <f_expand>
c001970a:	83 c4 10             	add    esp,0x10
c001970d:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0019714:	8b 00                	mov    eax,DWORD PTR [eax]
c0019716:	83 c0 10             	add    eax,0x10
c0019719:	8b 00                	mov    eax,DWORD PTR [eax]
c001971b:	83 ec 0c             	sub    esp,0xc
c001971e:	8d 54 24 24          	lea    edx,[esp+0x24]
c0019722:	52                   	push   edx
c0019723:	8d 54 24 30          	lea    edx,[esp+0x30]
c0019727:	52                   	push   edx
c0019728:	6a 00                	push   0x0
c001972a:	68 00 04 00 00       	push   0x400
c001972f:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0019736:	ff d0                	call   eax
c0019738:	83 c4 20             	add    esp,0x20
c001973b:	83 ec 0c             	sub    esp,0xc
c001973e:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019745:	e8 ae 24 ff ff       	call   c000bbf8 <File::close()>
c001974a:	83 c4 10             	add    esp,0x10
c001974d:	8d 76 00             	lea    esi,[esi+0x0]
c0019750:	83 ec 08             	sub    esp,0x8
c0019753:	6a 01                	push   0x1
c0019755:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001975c:	e8 39 24 ff ff       	call   c000bb9a <File::open(FileOpenMode)>
c0019761:	83 c4 10             	add    esp,0x10
c0019764:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001976b:	8b 00                	mov    eax,DWORD PTR [eax]
c001976d:	83 c0 0c             	add    eax,0xc
c0019770:	8b 00                	mov    eax,DWORD PTR [eax]
c0019772:	83 ec 0c             	sub    esp,0xc
c0019775:	8d 54 24 24          	lea    edx,[esp+0x24]
c0019779:	52                   	push   edx
c001977a:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c001977e:	52                   	push   edx
c001977f:	6a 00                	push   0x0
c0019781:	6a 04                	push   0x4
c0019783:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001978a:	ff d0                	call   eax
c001978c:	83 c4 20             	add    esp,0x20
c001978f:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0019796:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001979c:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c00197a3:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c00197aa:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c00197ad:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c00197b4:	83 ec 0c             	sub    esp,0xc
c00197b7:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00197be:	e8 35 24 ff ff       	call   c000bbf8 <File::close()>
c00197c3:	83 c4 10             	add    esp,0x10
c00197c6:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c00197cd:	ba 00 00 00 00       	mov    edx,0x0
c00197d2:	81 c4 3c 04 00 00    	add    esp,0x43c
c00197d8:	5b                   	pop    ebx
c00197d9:	5e                   	pop    esi
c00197da:	5f                   	pop    edi
c00197db:	5d                   	pop    ebp
c00197dc:	c3                   	ret    
c00197dd:	90                   	nop
c00197de:	66 90                	xchg   ax,ax

c00197e0 <FAT::readDir(void*, unsigned long, void*, int*)>:
c00197e0:	57                   	push   edi
c00197e1:	56                   	push   esi
c00197e2:	53                   	push   ebx
c00197e3:	81 ec 50 02 00 00    	sub    esp,0x250
c00197e9:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c00197f1:	74 0d                	je     c0019800 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c00197f3:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c00197fb:	75 0f                	jne    c001980c <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c00197fd:	8d 76 00             	lea    esi,[esi+0x0]
c0019800:	b8 04 00 00 00       	mov    eax,0x4
c0019805:	e9 3a 01 00 00       	jmp    c0019944 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001980a:	66 90                	xchg   ax,ax
c001980c:	83 ec 08             	sub    esp,0x8
c001980f:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0019816:	50                   	push   eax
c0019817:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c001981e:	e8 d3 ae fe ff       	call   c00046f6 <f_readdir>
c0019823:	83 c4 10             	add    esp,0x10
c0019826:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c001982d:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c0019834:	83 ec 0c             	sub    esp,0xc
c0019837:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001983e:	83 c0 16             	add    eax,0x16
c0019841:	50                   	push   eax
c0019842:	e8 29 6d fe ff       	call   c0000570 <strlen>
c0019847:	83 c4 10             	add    esp,0x10
c001984a:	ba 00 00 00 00       	mov    edx,0x0
c001984f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019853:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0019857:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c001985e:	0f b6 c0             	movzx  eax,al
c0019861:	83 e0 10             	and    eax,0x10
c0019864:	74 0a                	je     c0019870 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c0019866:	b8 02 00 00 00       	mov    eax,0x2
c001986b:	eb 0b                	jmp    c0019878 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c001986d:	8d 76 00             	lea    esi,[esi+0x0]
c0019870:	b8 01 00 00 00       	mov    eax,0x1
c0019875:	8d 76 00             	lea    esi,[esi+0x0]
c0019878:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001987c:	83 ec 08             	sub    esp,0x8
c001987f:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0019886:	83 c0 16             	add    eax,0x16
c0019889:	50                   	push   eax
c001988a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001988e:	83 c0 10             	add    eax,0x10
c0019891:	50                   	push   eax
c0019892:	e8 a9 6d fe ff       	call   c0000640 <strcpy>
c0019897:	83 c4 10             	add    esp,0x10
c001989a:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c00198a1:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c00198a8:	8d 44 24 08          	lea    eax,[esp+0x8]
c00198ac:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c00198b3:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c00198ba:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c00198c1:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c00198c8:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c00198cf:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c00198d6:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c00198dd:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c00198e4:	89 c6                	mov    esi,eax
c00198e6:	89 d7                	mov    edi,edx
c00198e8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00198ea:	89 c8                	mov    eax,ecx
c00198ec:	89 fa                	mov    edx,edi
c00198ee:	89 f3                	mov    ebx,esi
c00198f0:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c00198f7:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c00198fe:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c0019905:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c001990c:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0019912:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c0019919:	0f be c0             	movsx  eax,al
c001991c:	85 c0                	test   eax,eax
c001991e:	75 08                	jne    c0019928 <FAT::readDir(void*, unsigned long, void*, int*)+0x148>
c0019920:	b8 07 00 00 00       	mov    eax,0x7
c0019925:	eb 1d                	jmp    c0019944 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c0019927:	90                   	nop
c0019928:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c001992f:	85 c0                	test   eax,eax
c0019931:	75 09                	jne    c001993c <FAT::readDir(void*, unsigned long, void*, int*)+0x15c>
c0019933:	b8 00 00 00 00       	mov    eax,0x0
c0019938:	eb 0a                	jmp    c0019944 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001993a:	66 90                	xchg   ax,ax
c001993c:	b8 01 00 00 00       	mov    eax,0x1
c0019941:	8d 76 00             	lea    esi,[esi+0x0]
c0019944:	81 c4 50 02 00 00    	add    esp,0x250
c001994a:	5b                   	pop    ebx
c001994b:	5e                   	pop    esi
c001994c:	5f                   	pop    edi
c001994d:	c3                   	ret    
c001994e:	66 90                	xchg   ax,ax

c0019950 <FAT::read(void*, unsigned long, void*, int*)>:
c0019950:	83 ec 1c             	sub    esp,0x1c
c0019953:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0019958:	74 0a                	je     c0019964 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c001995a:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001995f:	75 0b                	jne    c001996c <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c0019961:	8d 76 00             	lea    esi,[esi+0x0]
c0019964:	b8 04 00 00 00       	mov    eax,0x4
c0019969:	eb 41                	jmp    c00199ac <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001996b:	90                   	nop
c001996c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019970:	50                   	push   eax
c0019971:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019975:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0019979:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001997d:	e8 9b a5 fe ff       	call   c0003f1d <f_read>
c0019982:	83 c4 10             	add    esp,0x10
c0019985:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019989:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001998d:	89 c2                	mov    edx,eax
c001998f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019993:	89 10                	mov    DWORD PTR [eax],edx
c0019995:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019999:	85 c0                	test   eax,eax
c001999b:	75 07                	jne    c00199a4 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c001999d:	b8 00 00 00 00       	mov    eax,0x0
c00199a2:	eb 08                	jmp    c00199ac <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c00199a4:	b8 01 00 00 00       	mov    eax,0x1
c00199a9:	8d 76 00             	lea    esi,[esi+0x0]
c00199ac:	83 c4 1c             	add    esp,0x1c
c00199af:	c3                   	ret    

c00199b0 <FAT::write(void*, unsigned long, void*, int*)>:
c00199b0:	83 ec 1c             	sub    esp,0x1c
c00199b3:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00199b8:	74 0a                	je     c00199c4 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c00199ba:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00199bf:	75 0b                	jne    c00199cc <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c00199c1:	8d 76 00             	lea    esi,[esi+0x0]
c00199c4:	b8 04 00 00 00       	mov    eax,0x4
c00199c9:	eb 41                	jmp    c0019a0c <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c00199cb:	90                   	nop
c00199cc:	8d 44 24 08          	lea    eax,[esp+0x8]
c00199d0:	50                   	push   eax
c00199d1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00199d5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00199d9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00199dd:	e8 3a a7 fe ff       	call   c000411c <f_write>
c00199e2:	83 c4 10             	add    esp,0x10
c00199e5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00199e9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00199ed:	89 c2                	mov    edx,eax
c00199ef:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00199f3:	89 10                	mov    DWORD PTR [eax],edx
c00199f5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00199f9:	85 c0                	test   eax,eax
c00199fb:	75 07                	jne    c0019a04 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c00199fd:	b8 00 00 00 00       	mov    eax,0x0
c0019a02:	eb 08                	jmp    c0019a0c <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0019a04:	b8 01 00 00 00       	mov    eax,0x1
c0019a09:	8d 76 00             	lea    esi,[esi+0x0]
c0019a0c:	83 c4 1c             	add    esp,0x1c
c0019a0f:	c3                   	ret    

c0019a10 <FAT::close(void*)>:
c0019a10:	83 ec 1c             	sub    esp,0x1c
c0019a13:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0019a18:	75 0a                	jne    c0019a24 <FAT::close(void*)+0x14>
c0019a1a:	b8 04 00 00 00       	mov    eax,0x4
c0019a1f:	eb 3f                	jmp    c0019a60 <FAT::close(void*)+0x50>
c0019a21:	8d 76 00             	lea    esi,[esi+0x0]
c0019a24:	83 ec 0c             	sub    esp,0xc
c0019a27:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019a2b:	e8 f9 a9 fe ff       	call   c0004429 <f_close>
c0019a30:	83 c4 10             	add    esp,0x10
c0019a33:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019a37:	83 ec 0c             	sub    esp,0xc
c0019a3a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019a3e:	e8 b3 e0 fe ff       	call   c0007af6 <free>
c0019a43:	83 c4 10             	add    esp,0x10
c0019a46:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019a4a:	85 c0                	test   eax,eax
c0019a4c:	75 0a                	jne    c0019a58 <FAT::close(void*)+0x48>
c0019a4e:	b8 00 00 00 00       	mov    eax,0x0
c0019a53:	eb 0b                	jmp    c0019a60 <FAT::close(void*)+0x50>
c0019a55:	8d 76 00             	lea    esi,[esi+0x0]
c0019a58:	b8 01 00 00 00       	mov    eax,0x1
c0019a5d:	8d 76 00             	lea    esi,[esi+0x0]
c0019a60:	83 c4 1c             	add    esp,0x1c
c0019a63:	c3                   	ret    

c0019a64 <FAT::closeDir(void*)>:
c0019a64:	83 ec 1c             	sub    esp,0x1c
c0019a67:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0019a6c:	75 0a                	jne    c0019a78 <FAT::closeDir(void*)+0x14>
c0019a6e:	b8 04 00 00 00       	mov    eax,0x4
c0019a73:	eb 3f                	jmp    c0019ab4 <FAT::closeDir(void*)+0x50>
c0019a75:	8d 76 00             	lea    esi,[esi+0x0]
c0019a78:	83 ec 0c             	sub    esp,0xc
c0019a7b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019a7f:	e8 50 ac fe ff       	call   c00046d4 <f_closedir>
c0019a84:	83 c4 10             	add    esp,0x10
c0019a87:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019a8b:	83 ec 0c             	sub    esp,0xc
c0019a8e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019a92:	e8 5f e0 fe ff       	call   c0007af6 <free>
c0019a97:	83 c4 10             	add    esp,0x10
c0019a9a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019a9e:	85 c0                	test   eax,eax
c0019aa0:	75 0a                	jne    c0019aac <FAT::closeDir(void*)+0x48>
c0019aa2:	b8 00 00 00 00       	mov    eax,0x0
c0019aa7:	eb 0b                	jmp    c0019ab4 <FAT::closeDir(void*)+0x50>
c0019aa9:	8d 76 00             	lea    esi,[esi+0x0]
c0019aac:	b8 01 00 00 00       	mov    eax,0x1
c0019ab1:	8d 76 00             	lea    esi,[esi+0x0]
c0019ab4:	83 c4 1c             	add    esp,0x1c
c0019ab7:	c3                   	ret    

c0019ab8 <FAT::truncate(void*, unsigned long long)>:
c0019ab8:	83 ec 2c             	sub    esp,0x2c
c0019abb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019abf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019ac3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019ac7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019acb:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0019ad0:	75 0a                	jne    c0019adc <FAT::truncate(void*, unsigned long long)+0x24>
c0019ad2:	b8 04 00 00 00       	mov    eax,0x4
c0019ad7:	eb 47                	jmp    c0019b20 <FAT::truncate(void*, unsigned long long)+0x68>
c0019ad9:	8d 76 00             	lea    esi,[esi+0x0]
c0019adc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019ae0:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0019ae3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019ae7:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0019aef:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019af3:	83 ec 08             	sub    esp,0x8
c0019af6:	50                   	push   eax
c0019af7:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0019afb:	e8 58 a9 fe ff       	call   c0004458 <f_lseek>
c0019b00:	83 c4 10             	add    esp,0x10
c0019b03:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019b07:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019b0b:	85 c0                	test   eax,eax
c0019b0d:	75 09                	jne    c0019b18 <FAT::truncate(void*, unsigned long long)+0x60>
c0019b0f:	b8 00 00 00 00       	mov    eax,0x0
c0019b14:	eb 0a                	jmp    c0019b20 <FAT::truncate(void*, unsigned long long)+0x68>
c0019b16:	66 90                	xchg   ax,ax
c0019b18:	b8 01 00 00 00       	mov    eax,0x1
c0019b1d:	8d 76 00             	lea    esi,[esi+0x0]
c0019b20:	83 c4 2c             	add    esp,0x2c
c0019b23:	c3                   	ret    

c0019b24 <FAT::seek(void*, unsigned long long)>:
c0019b24:	83 ec 2c             	sub    esp,0x2c
c0019b27:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019b2b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019b2f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019b33:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019b37:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0019b3c:	75 0a                	jne    c0019b48 <FAT::seek(void*, unsigned long long)+0x24>
c0019b3e:	b8 04 00 00 00       	mov    eax,0x4
c0019b43:	eb 33                	jmp    c0019b78 <FAT::seek(void*, unsigned long long)+0x54>
c0019b45:	8d 76 00             	lea    esi,[esi+0x0]
c0019b48:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019b4c:	83 ec 08             	sub    esp,0x8
c0019b4f:	50                   	push   eax
c0019b50:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0019b54:	e8 ff a8 fe ff       	call   c0004458 <f_lseek>
c0019b59:	83 c4 10             	add    esp,0x10
c0019b5c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019b60:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019b64:	85 c0                	test   eax,eax
c0019b66:	75 08                	jne    c0019b70 <FAT::seek(void*, unsigned long long)+0x4c>
c0019b68:	b8 00 00 00 00       	mov    eax,0x0
c0019b6d:	eb 09                	jmp    c0019b78 <FAT::seek(void*, unsigned long long)+0x54>
c0019b6f:	90                   	nop
c0019b70:	b8 01 00 00 00       	mov    eax,0x1
c0019b75:	8d 76 00             	lea    esi,[esi+0x0]
c0019b78:	83 c4 2c             	add    esp,0x2c
c0019b7b:	c3                   	ret    

c0019b7c <fatWrapperReadDisk>:
c0019b7c:	53                   	push   ebx
c0019b7d:	83 ec 18             	sub    esp,0x18
c0019b80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019b84:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019b88:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019b8d:	8b 0c 85 80 b8 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd4780]
c0019b94:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0019b98:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019b9c:	ba 00 00 00 00       	mov    edx,0x0
c0019ba1:	83 ec 0c             	sub    esp,0xc
c0019ba4:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019ba8:	53                   	push   ebx
c0019ba9:	52                   	push   edx
c0019baa:	50                   	push   eax
c0019bab:	51                   	push   ecx
c0019bac:	e8 27 42 ff ff       	call   c000ddd8 <LogicalDisk::read(unsigned long long, int, void*)>
c0019bb1:	83 c4 20             	add    esp,0x20
c0019bb4:	83 c4 18             	add    esp,0x18
c0019bb7:	5b                   	pop    ebx
c0019bb8:	c3                   	ret    
c0019bb9:	8d 76 00             	lea    esi,[esi+0x0]

c0019bbc <fatWrapperWriteDisk>:
c0019bbc:	53                   	push   ebx
c0019bbd:	83 ec 18             	sub    esp,0x18
c0019bc0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019bc4:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019bc8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019bcd:	8b 0c 85 80 b8 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd4780]
c0019bd4:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0019bd8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019bdc:	ba 00 00 00 00       	mov    edx,0x0
c0019be1:	83 ec 0c             	sub    esp,0xc
c0019be4:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019be8:	53                   	push   ebx
c0019be9:	52                   	push   edx
c0019bea:	50                   	push   eax
c0019beb:	51                   	push   ecx
c0019bec:	e8 53 42 ff ff       	call   c000de44 <LogicalDisk::write(unsigned long long, int, void*)>
c0019bf1:	83 c4 20             	add    esp,0x20
c0019bf4:	83 c4 18             	add    esp,0x18
c0019bf7:	5b                   	pop    ebx
c0019bf8:	c3                   	ret    
c0019bf9:	8d 76 00             	lea    esi,[esi+0x0]

c0019bfc <fatWrapperIoctl>:
c0019bfc:	53                   	push   ebx
c0019bfd:	83 ec 28             	sub    esp,0x28
c0019c00:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0019c04:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019c08:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0019c0c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0019c10:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019c15:	83 f8 02             	cmp    eax,0x2
c0019c18:	75 32                	jne    c0019c4c <fatWrapperIoctl+0x50>
c0019c1a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019c1e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019c22:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019c27:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c0019c2e:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0019c34:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0019c3a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019c3e:	66 89 02             	mov    WORD PTR [edx],ax
c0019c41:	b8 00 00 00 00       	mov    eax,0x0
c0019c46:	e9 c5 00 00 00       	jmp    c0019d10 <fatWrapperIoctl+0x114>
c0019c4b:	90                   	nop
c0019c4c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019c51:	83 f8 01             	cmp    eax,0x1
c0019c54:	75 6a                	jne    c0019cc0 <fatWrapperIoctl+0xc4>
c0019c56:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019c5a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019c5e:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019c63:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c0019c6a:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0019c70:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0019c76:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0019c7c:	89 c8                	mov    eax,ecx
c0019c7e:	89 da                	mov    edx,ebx
c0019c80:	0f a4 c2 0a          	shld   edx,eax,0xa
c0019c84:	c1 e0 0a             	shl    eax,0xa
c0019c87:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0019c8c:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c0019c93:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0019c99:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0019c9f:	89 cb                	mov    ebx,ecx
c0019ca1:	c1 fb 1f             	sar    ebx,0x1f
c0019ca4:	53                   	push   ebx
c0019ca5:	51                   	push   ecx
c0019ca6:	52                   	push   edx
c0019ca7:	50                   	push   eax
c0019ca8:	e8 73 5b 00 00       	call   c001f820 <__udivdi3>
c0019cad:	83 c4 10             	add    esp,0x10
c0019cb0:	89 c2                	mov    edx,eax
c0019cb2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019cb6:	89 10                	mov    DWORD PTR [eax],edx
c0019cb8:	b8 00 00 00 00       	mov    eax,0x0
c0019cbd:	eb 51                	jmp    c0019d10 <fatWrapperIoctl+0x114>
c0019cbf:	90                   	nop
c0019cc0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019cc5:	85 c0                	test   eax,eax
c0019cc7:	75 07                	jne    c0019cd0 <fatWrapperIoctl+0xd4>
c0019cc9:	b8 00 00 00 00       	mov    eax,0x0
c0019cce:	eb 40                	jmp    c0019d10 <fatWrapperIoctl+0x114>
c0019cd0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019cd5:	83 f8 03             	cmp    eax,0x3
c0019cd8:	75 1a                	jne    c0019cf4 <fatWrapperIoctl+0xf8>
c0019cda:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019cde:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019ce2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019ce6:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0019cec:	b8 00 00 00 00       	mov    eax,0x0
c0019cf1:	eb 1d                	jmp    c0019d10 <fatWrapperIoctl+0x114>
c0019cf3:	90                   	nop
c0019cf4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019cf9:	83 f8 04             	cmp    eax,0x4
c0019cfc:	75 0a                	jne    c0019d08 <fatWrapperIoctl+0x10c>
c0019cfe:	b8 00 00 00 00       	mov    eax,0x0
c0019d03:	eb 0b                	jmp    c0019d10 <fatWrapperIoctl+0x114>
c0019d05:	8d 76 00             	lea    esi,[esi+0x0]
c0019d08:	b8 04 00 00 00       	mov    eax,0x4
c0019d0d:	8d 76 00             	lea    esi,[esi+0x0]
c0019d10:	83 c4 28             	add    esp,0x28
c0019d13:	5b                   	pop    ebx
c0019d14:	c3                   	ret    
c0019d15:	90                   	nop
c0019d16:	66 90                	xchg   ax,ax

c0019d18 <FAT::FAT()>:
c0019d18:	83 ec 1c             	sub    esp,0x1c
c0019d1b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019d1f:	83 ec 0c             	sub    esp,0xc
c0019d22:	50                   	push   eax
c0019d23:	e8 b2 1a ff ff       	call   c000b7da <Filesystem::Filesystem()>
c0019d28:	83 c4 10             	add    esp,0x10
c0019d2b:	ba e0 2f 02 c0       	mov    edx,0xc0022fe0
c0019d30:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019d34:	89 10                	mov    DWORD PTR [eax],edx
c0019d36:	c7 05 80 c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c780,0x0
c0019d40:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0019d48:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0019d4d:	7f 19                	jg     c0019d68 <FAT::FAT()+0x50>
c0019d4f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019d53:	c7 04 85 a0 c7 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd3860],0xffffffff
c0019d5e:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0019d63:	eb e3                	jmp    c0019d48 <FAT::FAT()+0x30>
c0019d65:	8d 76 00             	lea    esi,[esi+0x0]
c0019d68:	90                   	nop
c0019d69:	83 c4 1c             	add    esp,0x1c
c0019d6c:	c3                   	ret    
c0019d6d:	90                   	nop
c0019d6e:	66 90                	xchg   ax,ax

c0019d70 <FAT::fixFilepath(char*)>:
c0019d70:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019d74:	8a 00                	mov    al,BYTE PTR [eax]
c0019d76:	0f be c0             	movsx  eax,al
c0019d79:	83 f8 40             	cmp    eax,0x40
c0019d7c:	7e 2e                	jle    c0019dac <FAT::fixFilepath(char*)+0x3c>
c0019d7e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019d82:	8a 00                	mov    al,BYTE PTR [eax]
c0019d84:	83 e8 41             	sub    eax,0x41
c0019d87:	88 c2                	mov    dl,al
c0019d89:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019d8d:	88 10                	mov    BYTE PTR [eax],dl
c0019d8f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019d93:	8a 00                	mov    al,BYTE PTR [eax]
c0019d95:	0f be c0             	movsx  eax,al
c0019d98:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c0019d9f:	83 c0 30             	add    eax,0x30
c0019da2:	88 c2                	mov    dl,al
c0019da4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019da8:	88 10                	mov    BYTE PTR [eax],dl
c0019daa:	66 90                	xchg   ax,ax
c0019dac:	90                   	nop
c0019dad:	c3                   	ret    
c0019dae:	66 90                	xchg   ax,ax

c0019db0 <FAT::open(char const*, void**, FileOpenMode)>:
c0019db0:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019db6:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019dbe:	74 0c                	je     c0019dcc <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c0019dc0:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0019dc8:	75 0e                	jne    c0019dd8 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c0019dca:	66 90                	xchg   ax,ax
c0019dcc:	b8 04 00 00 00       	mov    eax,0x4
c0019dd1:	e9 46 01 00 00       	jmp    c0019f1c <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c0019dd6:	66 90                	xchg   ax,ax
c0019dd8:	83 ec 08             	sub    esp,0x8
c0019ddb:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019de2:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019de6:	50                   	push   eax
c0019de7:	e8 54 68 fe ff       	call   c0000640 <strcpy>
c0019dec:	83 c4 10             	add    esp,0x10
c0019def:	83 ec 08             	sub    esp,0x8
c0019df2:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019df6:	50                   	push   eax
c0019df7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019dfe:	e8 6d ff ff ff       	call   c0019d70 <FAT::fixFilepath(char*)>
c0019e03:	83 c4 10             	add    esp,0x10
c0019e06:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0019e0e:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019e15:	83 e0 01             	and    eax,0x1
c0019e18:	74 12                	je     c0019e2c <FAT::open(char const*, void**, FileOpenMode)+0x7c>
c0019e1a:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019e21:	83 c8 01             	or     eax,0x1
c0019e24:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019e2b:	90                   	nop
c0019e2c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019e33:	83 e0 04             	and    eax,0x4
c0019e36:	74 24                	je     c0019e5c <FAT::open(char const*, void**, FileOpenMode)+0xac>
c0019e38:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019e3f:	83 c8 30             	or     eax,0x30
c0019e42:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019e49:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019e50:	83 c8 02             	or     eax,0x2
c0019e53:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019e5a:	66 90                	xchg   ax,ax
c0019e5c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019e63:	83 e0 02             	and    eax,0x2
c0019e66:	74 14                	je     c0019e7c <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c0019e68:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019e6f:	83 c8 02             	or     eax,0x2
c0019e72:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019e79:	8d 76 00             	lea    esi,[esi+0x0]
c0019e7c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019e83:	83 e0 08             	and    eax,0x8
c0019e86:	74 14                	je     c0019e9c <FAT::open(char const*, void**, FileOpenMode)+0xec>
c0019e88:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019e8f:	83 c8 04             	or     eax,0x4
c0019e92:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019e99:	8d 76 00             	lea    esi,[esi+0x0]
c0019e9c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019ea3:	83 e0 10             	and    eax,0x10
c0019ea6:	74 14                	je     c0019ebc <FAT::open(char const*, void**, FileOpenMode)+0x10c>
c0019ea8:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019eaf:	83 c8 08             	or     eax,0x8
c0019eb2:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019eb9:	8d 76 00             	lea    esi,[esi+0x0]
c0019ebc:	83 ec 0c             	sub    esp,0xc
c0019ebf:	68 28 02 00 00       	push   0x228
c0019ec4:	e8 1d dc fe ff       	call   c0007ae6 <malloc>
c0019ec9:	83 c4 10             	add    esp,0x10
c0019ecc:	89 c2                	mov    edx,eax
c0019ece:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019ed5:	89 10                	mov    DWORD PTR [eax],edx
c0019ed7:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c0019edf:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019ee6:	8b 00                	mov    eax,DWORD PTR [eax]
c0019ee8:	83 ec 04             	sub    esp,0x4
c0019eeb:	52                   	push   edx
c0019eec:	8d 54 24 10          	lea    edx,[esp+0x10]
c0019ef0:	52                   	push   edx
c0019ef1:	50                   	push   eax
c0019ef2:	e8 63 9d fe ff       	call   c0003c5a <f_open>
c0019ef7:	83 c4 10             	add    esp,0x10
c0019efa:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0019f01:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0019f09:	74 09                	je     c0019f14 <FAT::open(char const*, void**, FileOpenMode)+0x164>
c0019f0b:	b8 01 00 00 00       	mov    eax,0x1
c0019f10:	eb 0a                	jmp    c0019f1c <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c0019f12:	66 90                	xchg   ax,ax
c0019f14:	b8 00 00 00 00       	mov    eax,0x0
c0019f19:	8d 76 00             	lea    esi,[esi+0x0]
c0019f1c:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019f22:	c3                   	ret    
c0019f23:	90                   	nop

c0019f24 <FAT::openDir(char const*, void**)>:
c0019f24:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019f2a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019f32:	74 0c                	je     c0019f40 <FAT::openDir(char const*, void**)+0x1c>
c0019f34:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0019f3c:	75 0e                	jne    c0019f4c <FAT::openDir(char const*, void**)+0x28>
c0019f3e:	66 90                	xchg   ax,ax
c0019f40:	b8 04 00 00 00       	mov    eax,0x4
c0019f45:	e9 82 00 00 00       	jmp    c0019fcc <FAT::openDir(char const*, void**)+0xa8>
c0019f4a:	66 90                	xchg   ax,ax
c0019f4c:	83 ec 08             	sub    esp,0x8
c0019f4f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019f56:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019f5a:	50                   	push   eax
c0019f5b:	e8 e0 66 fe ff       	call   c0000640 <strcpy>
c0019f60:	83 c4 10             	add    esp,0x10
c0019f63:	83 ec 08             	sub    esp,0x8
c0019f66:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019f6a:	50                   	push   eax
c0019f6b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019f72:	e8 f9 fd ff ff       	call   c0019d70 <FAT::fixFilepath(char*)>
c0019f77:	83 c4 10             	add    esp,0x10
c0019f7a:	83 ec 0c             	sub    esp,0xc
c0019f7d:	6a 30                	push   0x30
c0019f7f:	e8 62 db fe ff       	call   c0007ae6 <malloc>
c0019f84:	83 c4 10             	add    esp,0x10
c0019f87:	89 c2                	mov    edx,eax
c0019f89:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019f90:	89 10                	mov    DWORD PTR [eax],edx
c0019f92:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019f99:	8b 00                	mov    eax,DWORD PTR [eax]
c0019f9b:	83 ec 08             	sub    esp,0x8
c0019f9e:	8d 54 24 14          	lea    edx,[esp+0x14]
c0019fa2:	52                   	push   edx
c0019fa3:	50                   	push   eax
c0019fa4:	e8 60 a6 fe ff       	call   c0004609 <f_opendir>
c0019fa9:	83 c4 10             	add    esp,0x10
c0019fac:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0019fb3:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0019fbb:	74 07                	je     c0019fc4 <FAT::openDir(char const*, void**)+0xa0>
c0019fbd:	b8 01 00 00 00       	mov    eax,0x1
c0019fc2:	eb 08                	jmp    c0019fcc <FAT::openDir(char const*, void**)+0xa8>
c0019fc4:	b8 00 00 00 00       	mov    eax,0x0
c0019fc9:	8d 76 00             	lea    esi,[esi+0x0]
c0019fcc:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019fd2:	c3                   	ret    
c0019fd3:	90                   	nop

c0019fd4 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0019fd4:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0019fda:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0019fe2:	75 0c                	jne    c0019ff0 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c0019fe4:	b8 04 00 00 00       	mov    eax,0x4
c0019fe9:	e9 d6 00 00 00       	jmp    c001a0c4 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019fee:	66 90                	xchg   ax,ax
c0019ff0:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0019ff8:	75 0a                	jne    c001a004 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c0019ffa:	b8 04 00 00 00       	mov    eax,0x4
c0019fff:	e9 c0 00 00 00       	jmp    c001a0c4 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001a004:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c001a00c:	75 0a                	jne    c001a018 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c001a00e:	b8 04 00 00 00       	mov    eax,0x4
c001a013:	e9 ac 00 00 00       	jmp    c001a0c4 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001a018:	83 ec 08             	sub    esp,0x8
c001a01b:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001a022:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001a029:	50                   	push   eax
c001a02a:	e8 11 66 fe ff       	call   c0000640 <strcpy>
c001a02f:	83 c4 10             	add    esp,0x10
c001a032:	83 ec 08             	sub    esp,0x8
c001a035:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001a03c:	50                   	push   eax
c001a03d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001a044:	e8 27 fd ff ff       	call   c0019d70 <FAT::fixFilepath(char*)>
c001a049:	83 c4 10             	add    esp,0x10
c001a04c:	83 ec 08             	sub    esp,0x8
c001a04f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001a053:	50                   	push   eax
c001a054:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001a05b:	50                   	push   eax
c001a05c:	e8 27 a7 fe ff       	call   c0004788 <f_stat>
c001a061:	83 c4 10             	add    esp,0x10
c001a064:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001a06b:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001a072:	85 c0                	test   eax,eax
c001a074:	74 0a                	je     c001a080 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c001a076:	83 f8 04             	cmp    eax,0x4
c001a079:	74 39                	je     c001a0b4 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c001a07b:	eb 3f                	jmp    c001a0bc <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c001a07d:	8d 76 00             	lea    esi,[esi+0x0]
c001a080:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001a084:	0f b6 c0             	movzx  eax,al
c001a087:	83 e0 10             	and    eax,0x10
c001a08a:	0f 95 c2             	setne  dl
c001a08d:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c001a094:	88 10                	mov    BYTE PTR [eax],dl
c001a096:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a09a:	ba 00 00 00 00       	mov    edx,0x0
c001a09f:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c001a0a6:	89 01                	mov    DWORD PTR [ecx],eax
c001a0a8:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001a0ab:	b8 00 00 00 00       	mov    eax,0x0
c001a0b0:	eb 12                	jmp    c001a0c4 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001a0b2:	66 90                	xchg   ax,ax
c001a0b4:	b8 02 00 00 00       	mov    eax,0x2
c001a0b9:	eb 09                	jmp    c001a0c4 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001a0bb:	90                   	nop
c001a0bc:	b8 01 00 00 00       	mov    eax,0x1
c001a0c1:	8d 76 00             	lea    esi,[esi+0x0]
c001a0c4:	81 c4 2c 02 00 00    	add    esp,0x22c
c001a0ca:	c3                   	ret    
c001a0cb:	90                   	nop

c001a0cc <FAT::unlink(char const*)>:
c001a0cc:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a0d2:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001a0da:	75 08                	jne    c001a0e4 <FAT::unlink(char const*)+0x18>
c001a0dc:	b8 04 00 00 00       	mov    eax,0x4
c001a0e1:	eb 61                	jmp    c001a144 <FAT::unlink(char const*)+0x78>
c001a0e3:	90                   	nop
c001a0e4:	83 ec 08             	sub    esp,0x8
c001a0e7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a0ee:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a0f2:	50                   	push   eax
c001a0f3:	e8 48 65 fe ff       	call   c0000640 <strcpy>
c001a0f8:	83 c4 10             	add    esp,0x10
c001a0fb:	83 ec 08             	sub    esp,0x8
c001a0fe:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a102:	50                   	push   eax
c001a103:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a10a:	e8 61 fc ff ff       	call   c0019d70 <FAT::fixFilepath(char*)>
c001a10f:	83 c4 10             	add    esp,0x10
c001a112:	83 ec 0c             	sub    esp,0xc
c001a115:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a119:	50                   	push   eax
c001a11a:	e8 db a8 fe ff       	call   c00049fa <f_unlink>
c001a11f:	83 c4 10             	add    esp,0x10
c001a122:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001a129:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001a130:	85 c0                	test   eax,eax
c001a132:	75 08                	jne    c001a13c <FAT::unlink(char const*)+0x70>
c001a134:	b8 00 00 00 00       	mov    eax,0x0
c001a139:	eb 09                	jmp    c001a144 <FAT::unlink(char const*)+0x78>
c001a13b:	90                   	nop
c001a13c:	b8 01 00 00 00       	mov    eax,0x1
c001a141:	8d 76 00             	lea    esi,[esi+0x0]
c001a144:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a14a:	c3                   	ret    
c001a14b:	90                   	nop

c001a14c <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c001a14c:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001a152:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c001a159:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c001a160:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001a164:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001a168:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001a170:	75 0a                	jne    c001a17c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c001a172:	b8 04 00 00 00       	mov    eax,0x4
c001a177:	e9 7c 01 00 00       	jmp    c001a2f8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1ac>
c001a17c:	83 ec 08             	sub    esp,0x8
c001a17f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001a186:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a18a:	50                   	push   eax
c001a18b:	e8 b0 64 fe ff       	call   c0000640 <strcpy>
c001a190:	83 c4 10             	add    esp,0x10
c001a193:	83 ec 08             	sub    esp,0x8
c001a196:	8d 44 24 20          	lea    eax,[esp+0x20]
c001a19a:	50                   	push   eax
c001a19b:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001a1a2:	e8 c9 fb ff ff       	call   c0019d70 <FAT::fixFilepath(char*)>
c001a1a7:	83 c4 10             	add    esp,0x10
c001a1aa:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001a1b2:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001a1ba:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a1bf:	83 e0 01             	and    eax,0x1
c001a1c2:	74 14                	je     c001a1d8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x8c>
c001a1c4:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a1cb:	83 c8 01             	or     eax,0x1
c001a1ce:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001a1d5:	8d 76 00             	lea    esi,[esi+0x0]
c001a1d8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a1dd:	83 e0 02             	and    eax,0x2
c001a1e0:	74 12                	je     c001a1f4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa8>
c001a1e2:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a1e9:	83 c8 20             	or     eax,0x20
c001a1ec:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001a1f3:	90                   	nop
c001a1f4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a1f9:	83 e0 04             	and    eax,0x4
c001a1fc:	74 12                	je     c001a210 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc4>
c001a1fe:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a205:	83 c8 04             	or     eax,0x4
c001a208:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001a20f:	90                   	nop
c001a210:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a215:	83 e0 08             	and    eax,0x8
c001a218:	74 12                	je     c001a22c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe0>
c001a21a:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a221:	83 c8 02             	or     eax,0x2
c001a224:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001a22b:	90                   	nop
c001a22c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a231:	83 e0 01             	and    eax,0x1
c001a234:	74 12                	je     c001a248 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfc>
c001a236:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001a23d:	83 c8 01             	or     eax,0x1
c001a240:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a247:	90                   	nop
c001a248:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a24d:	83 e0 02             	and    eax,0x2
c001a250:	74 12                	je     c001a264 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x118>
c001a252:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001a259:	83 c8 20             	or     eax,0x20
c001a25c:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a263:	90                   	nop
c001a264:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a269:	83 e0 04             	and    eax,0x4
c001a26c:	74 12                	je     c001a280 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x134>
c001a26e:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001a275:	83 c8 04             	or     eax,0x4
c001a278:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a27f:	90                   	nop
c001a280:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a285:	83 e0 08             	and    eax,0x8
c001a288:	74 12                	je     c001a29c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x150>
c001a28a:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001a291:	83 c8 02             	or     eax,0x2
c001a294:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a29b:	90                   	nop
c001a29c:	8a 94 24 1e 01 00 00 	mov    dl,BYTE PTR [esp+0x11e]
c001a2a3:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a2aa:	09 d0                	or     eax,edx
c001a2ac:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a2b3:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c001a2bb:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c001a2c3:	83 ec 04             	sub    esp,0x4
c001a2c6:	52                   	push   edx
c001a2c7:	50                   	push   eax
c001a2c8:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a2cc:	50                   	push   eax
c001a2cd:	e8 9d ab fe ff       	call   c0004e6f <f_chmod>
c001a2d2:	83 c4 10             	add    esp,0x10
c001a2d5:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001a2dc:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001a2e3:	85 c0                	test   eax,eax
c001a2e5:	75 09                	jne    c001a2f0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1a4>
c001a2e7:	b8 00 00 00 00       	mov    eax,0x0
c001a2ec:	eb 0a                	jmp    c001a2f8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1ac>
c001a2ee:	66 90                	xchg   ax,ax
c001a2f0:	b8 01 00 00 00       	mov    eax,0x1
c001a2f5:	8d 76 00             	lea    esi,[esi+0x0]
c001a2f8:	81 c4 2c 01 00 00    	add    esp,0x12c
c001a2fe:	c3                   	ret    
c001a2ff:	90                   	nop

c001a300 <FAT::rename(char const*, char const*)>:
c001a300:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001a306:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001a30e:	74 0c                	je     c001a31c <FAT::rename(char const*, char const*)+0x1c>
c001a310:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001a318:	75 0e                	jne    c001a328 <FAT::rename(char const*, char const*)+0x28>
c001a31a:	66 90                	xchg   ax,ax
c001a31c:	b8 04 00 00 00       	mov    eax,0x4
c001a321:	e9 9e 00 00 00       	jmp    c001a3c4 <FAT::rename(char const*, char const*)+0xc4>
c001a326:	66 90                	xchg   ax,ax
c001a328:	83 ec 08             	sub    esp,0x8
c001a32b:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001a332:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001a339:	50                   	push   eax
c001a33a:	e8 01 63 fe ff       	call   c0000640 <strcpy>
c001a33f:	83 c4 10             	add    esp,0x10
c001a342:	83 ec 08             	sub    esp,0x8
c001a345:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001a34c:	50                   	push   eax
c001a34d:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001a354:	e8 17 fa ff ff       	call   c0019d70 <FAT::fixFilepath(char*)>
c001a359:	83 c4 10             	add    esp,0x10
c001a35c:	83 ec 08             	sub    esp,0x8
c001a35f:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001a366:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a36a:	50                   	push   eax
c001a36b:	e8 d0 62 fe ff       	call   c0000640 <strcpy>
c001a370:	83 c4 10             	add    esp,0x10
c001a373:	83 ec 08             	sub    esp,0x8
c001a376:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a37a:	50                   	push   eax
c001a37b:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001a382:	e8 e9 f9 ff ff       	call   c0019d70 <FAT::fixFilepath(char*)>
c001a387:	83 c4 10             	add    esp,0x10
c001a38a:	83 ec 08             	sub    esp,0x8
c001a38d:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a391:	50                   	push   eax
c001a392:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001a399:	50                   	push   eax
c001a39a:	e8 18 a9 fe ff       	call   c0004cb7 <f_rename>
c001a39f:	83 c4 10             	add    esp,0x10
c001a3a2:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001a3a9:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001a3b0:	85 c0                	test   eax,eax
c001a3b2:	75 08                	jne    c001a3bc <FAT::rename(char const*, char const*)+0xbc>
c001a3b4:	b8 00 00 00 00       	mov    eax,0x0
c001a3b9:	eb 09                	jmp    c001a3c4 <FAT::rename(char const*, char const*)+0xc4>
c001a3bb:	90                   	nop
c001a3bc:	b8 01 00 00 00       	mov    eax,0x1
c001a3c1:	8d 76 00             	lea    esi,[esi+0x0]
c001a3c4:	81 c4 1c 02 00 00    	add    esp,0x21c
c001a3ca:	c3                   	ret    
c001a3cb:	90                   	nop

c001a3cc <FAT::mkdir(char const*)>:
c001a3cc:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a3d2:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001a3da:	75 08                	jne    c001a3e4 <FAT::mkdir(char const*)+0x18>
c001a3dc:	b8 04 00 00 00       	mov    eax,0x4
c001a3e1:	eb 61                	jmp    c001a444 <FAT::mkdir(char const*)+0x78>
c001a3e3:	90                   	nop
c001a3e4:	83 ec 08             	sub    esp,0x8
c001a3e7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a3ee:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a3f2:	50                   	push   eax
c001a3f3:	e8 48 62 fe ff       	call   c0000640 <strcpy>
c001a3f8:	83 c4 10             	add    esp,0x10
c001a3fb:	83 ec 08             	sub    esp,0x8
c001a3fe:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a402:	50                   	push   eax
c001a403:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a40a:	e8 61 f9 ff ff       	call   c0019d70 <FAT::fixFilepath(char*)>
c001a40f:	83 c4 10             	add    esp,0x10
c001a412:	83 ec 0c             	sub    esp,0xc
c001a415:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a419:	50                   	push   eax
c001a41a:	e8 fd a6 fe ff       	call   c0004b1c <f_mkdir>
c001a41f:	83 c4 10             	add    esp,0x10
c001a422:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001a429:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001a430:	85 c0                	test   eax,eax
c001a432:	75 08                	jne    c001a43c <FAT::mkdir(char const*)+0x70>
c001a434:	b8 00 00 00 00       	mov    eax,0x0
c001a439:	eb 09                	jmp    c001a444 <FAT::mkdir(char const*)+0x78>
c001a43b:	90                   	nop
c001a43c:	b8 01 00 00 00       	mov    eax,0x1
c001a441:	8d 76 00             	lea    esi,[esi+0x0]
c001a444:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a44a:	c3                   	ret    
c001a44b:	90                   	nop

c001a44c <FAT::exists(char const*)>:
c001a44c:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001a452:	83 ec 08             	sub    esp,0x8
c001a455:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001a45c:	8d 44 24 10          	lea    eax,[esp+0x10]
c001a460:	50                   	push   eax
c001a461:	e8 da 61 fe ff       	call   c0000640 <strcpy>
c001a466:	83 c4 10             	add    esp,0x10
c001a469:	83 ec 08             	sub    esp,0x8
c001a46c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001a470:	50                   	push   eax
c001a471:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001a478:	e8 f3 f8 ff ff       	call   c0019d70 <FAT::fixFilepath(char*)>
c001a47d:	83 c4 10             	add    esp,0x10
c001a480:	83 ec 08             	sub    esp,0x8
c001a483:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c001a48a:	50                   	push   eax
c001a48b:	8d 44 24 10          	lea    eax,[esp+0x10]
c001a48f:	50                   	push   eax
c001a490:	e8 f3 a2 fe ff       	call   c0004788 <f_stat>
c001a495:	83 c4 10             	add    esp,0x10
c001a498:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001a49f:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001a4a6:	85 c0                	test   eax,eax
c001a4a8:	75 06                	jne    c001a4b0 <FAT::exists(char const*)+0x64>
c001a4aa:	b0 01                	mov    al,0x1
c001a4ac:	eb 06                	jmp    c001a4b4 <FAT::exists(char const*)+0x68>
c001a4ae:	66 90                	xchg   ax,ax
c001a4b0:	b0 00                	mov    al,0x0
c001a4b2:	66 90                	xchg   ax,ax
c001a4b4:	81 c4 2c 02 00 00    	add    esp,0x22c
c001a4ba:	c3                   	ret    
c001a4bb:	90                   	nop

c001a4bc <isoReadDiscSectorHelper>:
c001a4bc:	83 ec 2c             	sub    esp,0x2c
c001a4bf:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001a4c3:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a4c7:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001a4cc:	83 e8 41             	sub    eax,0x41
c001a4cf:	8b 0c 85 80 b8 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd4780]
c001a4d6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a4da:	ba 00 00 00 00       	mov    edx,0x0
c001a4df:	83 ec 0c             	sub    esp,0xc
c001a4e2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a4e6:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a4ea:	52                   	push   edx
c001a4eb:	50                   	push   eax
c001a4ec:	51                   	push   ecx
c001a4ed:	e8 e6 38 ff ff       	call   c000ddd8 <LogicalDisk::read(unsigned long long, int, void*)>
c001a4f2:	83 c4 20             	add    esp,0x20
c001a4f5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a4f9:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001a4fe:	74 0c                	je     c001a50c <isoReadDiscSectorHelper+0x50>
c001a500:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a504:	c1 e0 0b             	shl    eax,0xb
c001a507:	eb 0b                	jmp    c001a514 <isoReadDiscSectorHelper+0x58>
c001a509:	8d 76 00             	lea    esi,[esi+0x0]
c001a50c:	b8 00 00 00 00       	mov    eax,0x0
c001a511:	8d 76 00             	lea    esi,[esi+0x0]
c001a514:	83 c4 2c             	add    esp,0x2c
c001a517:	c3                   	ret    

c001a518 <iso_kprintf>:
c001a518:	83 ec 0c             	sub    esp,0xc
c001a51b:	83 ec 08             	sub    esp,0x8
c001a51e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a522:	68 8e 2d 02 c0       	push   0xc0022d8e
c001a527:	e8 49 04 ff ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c001a52c:	83 c4 10             	add    esp,0x10
c001a52f:	90                   	nop
c001a530:	83 c4 0c             	add    esp,0xc
c001a533:	c3                   	ret    

c001a534 <iso_kprintfd>:
c001a534:	83 ec 0c             	sub    esp,0xc
c001a537:	83 ec 08             	sub    esp,0x8
c001a53a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a53e:	68 4e 14 02 c0       	push   0xc002144e
c001a543:	e8 2d 04 ff ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c001a548:	83 c4 10             	add    esp,0x10
c001a54b:	90                   	nop
c001a54c:	83 c4 0c             	add    esp,0xc
c001a54f:	c3                   	ret    

c001a550 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001a550:	b8 08 00 00 00       	mov    eax,0x8
c001a555:	c3                   	ret    

c001a556 <ISO9660::truncate(void*, unsigned long long)>:
c001a556:	b8 01 00 00 00       	mov    eax,0x1
c001a55b:	c3                   	ret    

c001a55c <ISO9660::getName()>:
c001a55c:	b8 44 30 02 c0       	mov    eax,0xc0023044
c001a561:	c3                   	ret    

c001a562 <ISO9660::closeDir(void*)>:
c001a562:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a566:	8b 00                	mov    eax,DWORD PTR [eax]
c001a568:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c001a56b:	90                   	nop

c001a56c <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001a56c:	b8 01 00 00 00       	mov    eax,0x1
c001a571:	c3                   	ret    

c001a572 <ISO9660::unlink(char const*)>:
c001a572:	b8 01 00 00 00       	mov    eax,0x1
c001a577:	c3                   	ret    

c001a578 <ISO9660::write(void*, unsigned long, void*, int*)>:
c001a578:	b8 03 00 00 00       	mov    eax,0x3
c001a57d:	c3                   	ret    

c001a57e <ISO9660::rename(char const*, char const*)>:
c001a57e:	b8 01 00 00 00       	mov    eax,0x1
c001a583:	c3                   	ret    

c001a584 <ISO9660::mkdir(char const*)>:
c001a584:	b8 01 00 00 00       	mov    eax,0x1
c001a589:	c3                   	ret    

c001a58a <ISO9660::~ISO9660()>:
c001a58a:	83 ec 0c             	sub    esp,0xc
c001a58d:	ba 84 31 02 c0       	mov    edx,0xc0023184
c001a592:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a596:	89 10                	mov    DWORD PTR [eax],edx
c001a598:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a59c:	83 ec 0c             	sub    esp,0xc
c001a59f:	50                   	push   eax
c001a5a0:	e8 59 12 ff ff       	call   c000b7fe <Filesystem::~Filesystem()>
c001a5a5:	83 c4 10             	add    esp,0x10
c001a5a8:	90                   	nop
c001a5a9:	83 c4 0c             	add    esp,0xc
c001a5ac:	c3                   	ret    
c001a5ad:	90                   	nop

c001a5ae <ISO9660::~ISO9660()>:
c001a5ae:	83 ec 0c             	sub    esp,0xc
c001a5b1:	83 ec 0c             	sub    esp,0xc
c001a5b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a5b8:	e8 cd ff ff ff       	call   c001a58a <ISO9660::~ISO9660()>
c001a5bd:	83 c4 10             	add    esp,0x10
c001a5c0:	83 ec 08             	sub    esp,0x8
c001a5c3:	6a 08                	push   0x8
c001a5c5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a5c9:	e8 7a 02 ff ff       	call   c000a848 <operator delete(void*, unsigned long)>
c001a5ce:	83 c4 10             	add    esp,0x10
c001a5d1:	83 c4 0c             	add    esp,0xc
c001a5d4:	c3                   	ret    
c001a5d5:	90                   	nop

c001a5d6 <ISO9660::exists(char const*)>:
c001a5d6:	83 ec 18             	sub    esp,0x18
c001a5d9:	68 5f 30 02 c0       	push   0xc002305f
c001a5de:	e8 e4 70 ff ff       	call   c00116c7 <KePanic(char const*)>
c001a5e3:	31 c0                	xor    eax,eax
c001a5e5:	83 c4 1c             	add    esp,0x1c
c001a5e8:	c3                   	ret    
c001a5e9:	90                   	nop

c001a5ea <ISO9660::open(char const*, void**, FileOpenMode)>:
c001a5ea:	56                   	push   esi
c001a5eb:	53                   	push   ebx
c001a5ec:	53                   	push   ebx
c001a5ed:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a5f1:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a5f5:	85 db                	test   ebx,ebx
c001a5f7:	0f 84 ca 00 00 00    	je     c001a6c7 <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001a5fd:	85 f6                	test   esi,esi
c001a5ff:	0f 84 c2 00 00 00    	je     c001a6c7 <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001a605:	b8 03 00 00 00       	mov    eax,0x3
c001a60a:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c001a60f:	0f 85 b7 00 00 00    	jne    c001a6cc <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001a615:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001a617:	0f be 05 80 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c880
c001a61e:	38 0d 80 c8 02 c0    	cmp    BYTE PTR ds:0xc002c880,cl
c001a624:	74 1b                	je     c001a641 <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c001a626:	85 c0                	test   eax,eax
c001a628:	74 10                	je     c001a63a <ISO9660::open(char const*, void**, FileOpenMode)+0x50>
c001a62a:	83 ec 0c             	sub    esp,0xc
c001a62d:	68 7d 30 02 c0       	push   0xc002307d
c001a632:	e8 90 70 ff ff       	call   c00116c7 <KePanic(char const*)>
c001a637:	83 c4 10             	add    esp,0x10
c001a63a:	8a 03                	mov    al,BYTE PTR [ebx]
c001a63c:	a2 80 c8 02 c0       	mov    ds:0xc002c880,al
c001a641:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a644:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c001a64b:	85 c0                	test   eax,eax
c001a64d:	74 09                	je     c001a658 <ISO9660::open(char const*, void**, FileOpenMode)+0x6e>
c001a64f:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001a656:	74 48                	je     c001a6a0 <ISO9660::open(char const*, void**, FileOpenMode)+0xb6>
c001a658:	83 ec 0c             	sub    esp,0xc
c001a65b:	68 8d 30 02 c0       	push   0xc002308d
c001a660:	e8 10 03 ff ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c001a665:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a668:	83 c4 10             	add    esp,0x10
c001a66b:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c001a672:	85 c0                	test   eax,eax
c001a674:	74 17                	je     c001a68d <ISO9660::open(char const*, void**, FileOpenMode)+0xa3>
c001a676:	83 ec 0c             	sub    esp,0xc
c001a679:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001a680:	68 ad 30 02 c0       	push   0xc00230ad
c001a685:	e8 eb 02 ff ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c001a68a:	83 c4 10             	add    esp,0x10
c001a68d:	83 ec 0c             	sub    esp,0xc
c001a690:	0f be 05 80 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c880
c001a697:	50                   	push   eax
c001a698:	e8 a9 c3 fe ff       	call   c0006a46 <init_percd>
c001a69d:	83 c4 10             	add    esp,0x10
c001a6a0:	83 c3 03             	add    ebx,0x3
c001a6a3:	51                   	push   ecx
c001a6a4:	51                   	push   ecx
c001a6a5:	6a 00                	push   0x0
c001a6a7:	53                   	push   ebx
c001a6a8:	e8 60 be fe ff       	call   c000650d <iso_open>
c001a6ad:	83 c4 10             	add    esp,0x10
c001a6b0:	89 c2                	mov    edx,eax
c001a6b2:	b8 01 00 00 00       	mov    eax,0x1
c001a6b7:	83 fa ff             	cmp    edx,0xffffffff
c001a6ba:	74 10                	je     c001a6cc <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001a6bc:	83 c2 32             	add    edx,0x32
c001a6bf:	31 c0                	xor    eax,eax
c001a6c1:	01 d2                	add    edx,edx
c001a6c3:	89 16                	mov    DWORD PTR [esi],edx
c001a6c5:	eb 05                	jmp    c001a6cc <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001a6c7:	b8 04 00 00 00       	mov    eax,0x4
c001a6cc:	5a                   	pop    edx
c001a6cd:	5b                   	pop    ebx
c001a6ce:	5e                   	pop    esi
c001a6cf:	c3                   	ret    

c001a6d0 <ISO9660::read(void*, unsigned long, void*, int*)>:
c001a6d0:	53                   	push   ebx
c001a6d1:	83 ec 08             	sub    esp,0x8
c001a6d4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a6d8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a6dc:	85 c0                	test   eax,eax
c001a6de:	74 2d                	je     c001a70d <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001a6e0:	85 db                	test   ebx,ebx
c001a6e2:	74 29                	je     c001a70d <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001a6e4:	b9 02 00 00 00       	mov    ecx,0x2
c001a6e9:	52                   	push   edx
c001a6ea:	99                   	cdq    
c001a6eb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a6ef:	f7 f9                	idiv   ecx
c001a6f1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a6f5:	83 e8 32             	sub    eax,0x32
c001a6f8:	50                   	push   eax
c001a6f9:	e8 b7 be fe ff       	call   c00065b5 <iso_read>
c001a6fe:	83 c4 10             	add    esp,0x10
c001a701:	89 03                	mov    DWORD PTR [ebx],eax
c001a703:	09 d0                	or     eax,edx
c001a705:	0f 94 c0             	sete   al
c001a708:	0f b6 c0             	movzx  eax,al
c001a70b:	eb 05                	jmp    c001a712 <ISO9660::read(void*, unsigned long, void*, int*)+0x42>
c001a70d:	b8 04 00 00 00       	mov    eax,0x4
c001a712:	83 c4 08             	add    esp,0x8
c001a715:	5b                   	pop    ebx
c001a716:	c3                   	ret    
c001a717:	90                   	nop

c001a718 <ISO9660::seek(void*, unsigned long long)>:
c001a718:	57                   	push   edi
c001a719:	56                   	push   esi
c001a71a:	b8 04 00 00 00       	mov    eax,0x4
c001a71f:	51                   	push   ecx
c001a720:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a724:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a728:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001a72c:	85 d2                	test   edx,edx
c001a72e:	74 26                	je     c001a756 <ISO9660::seek(void*, unsigned long long)+0x3e>
c001a730:	6a 00                	push   0x0
c001a732:	b9 02 00 00 00       	mov    ecx,0x2
c001a737:	57                   	push   edi
c001a738:	89 d0                	mov    eax,edx
c001a73a:	56                   	push   esi
c001a73b:	99                   	cdq    
c001a73c:	f7 f9                	idiv   ecx
c001a73e:	83 e8 32             	sub    eax,0x32
c001a741:	50                   	push   eax
c001a742:	e8 84 bf fe ff       	call   c00066cb <iso_seek>
c001a747:	83 c4 10             	add    esp,0x10
c001a74a:	31 f0                	xor    eax,esi
c001a74c:	31 fa                	xor    edx,edi
c001a74e:	09 d0                	or     eax,edx
c001a750:	0f 95 c0             	setne  al
c001a753:	0f b6 c0             	movzx  eax,al
c001a756:	5a                   	pop    edx
c001a757:	5e                   	pop    esi
c001a758:	5f                   	pop    edi
c001a759:	c3                   	ret    

c001a75a <ISO9660::tell(void*, unsigned long long*)>:
c001a75a:	53                   	push   ebx
c001a75b:	83 ec 08             	sub    esp,0x8
c001a75e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a762:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a766:	85 c0                	test   eax,eax
c001a768:	74 24                	je     c001a78e <ISO9660::tell(void*, unsigned long long*)+0x34>
c001a76a:	85 db                	test   ebx,ebx
c001a76c:	74 20                	je     c001a78e <ISO9660::tell(void*, unsigned long long*)+0x34>
c001a76e:	83 ec 0c             	sub    esp,0xc
c001a771:	b9 02 00 00 00       	mov    ecx,0x2
c001a776:	99                   	cdq    
c001a777:	f7 f9                	idiv   ecx
c001a779:	83 e8 32             	sub    eax,0x32
c001a77c:	50                   	push   eax
c001a77d:	e8 cd bf fe ff       	call   c000674f <iso_tell>
c001a782:	83 c4 10             	add    esp,0x10
c001a785:	89 03                	mov    DWORD PTR [ebx],eax
c001a787:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c001a78a:	31 c0                	xor    eax,eax
c001a78c:	eb 05                	jmp    c001a793 <ISO9660::tell(void*, unsigned long long*)+0x39>
c001a78e:	b8 04 00 00 00       	mov    eax,0x4
c001a793:	83 c4 08             	add    esp,0x8
c001a796:	5b                   	pop    ebx
c001a797:	c3                   	ret    

c001a798 <ISO9660::stat(void*, unsigned long long*)>:
c001a798:	53                   	push   ebx
c001a799:	83 ec 14             	sub    esp,0x14
c001a79c:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001a7a0:	68 d1 30 02 c0       	push   0xc00230d1
c001a7a5:	e8 cb 01 ff ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c001a7aa:	83 c4 10             	add    esp,0x10
c001a7ad:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a7b2:	74 2c                	je     c001a7e0 <ISO9660::stat(void*, unsigned long long*)+0x48>
c001a7b4:	85 db                	test   ebx,ebx
c001a7b6:	74 28                	je     c001a7e0 <ISO9660::stat(void*, unsigned long long*)+0x48>
c001a7b8:	83 ec 0c             	sub    esp,0xc
c001a7bb:	b9 02 00 00 00       	mov    ecx,0x2
c001a7c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a7c4:	99                   	cdq    
c001a7c5:	f7 f9                	idiv   ecx
c001a7c7:	83 e8 32             	sub    eax,0x32
c001a7ca:	50                   	push   eax
c001a7cb:	e8 b0 bf fe ff       	call   c0006780 <iso_total>
c001a7d0:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001a7d7:	89 03                	mov    DWORD PTR [ebx],eax
c001a7d9:	83 c4 10             	add    esp,0x10
c001a7dc:	31 c0                	xor    eax,eax
c001a7de:	eb 05                	jmp    c001a7e5 <ISO9660::stat(void*, unsigned long long*)+0x4d>
c001a7e0:	b8 04 00 00 00       	mov    eax,0x4
c001a7e5:	83 c4 08             	add    esp,0x8
c001a7e8:	5b                   	pop    ebx
c001a7e9:	c3                   	ret    

c001a7ea <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001a7ea:	55                   	push   ebp
c001a7eb:	57                   	push   edi
c001a7ec:	56                   	push   esi
c001a7ed:	53                   	push   ebx
c001a7ee:	83 ec 18             	sub    esp,0x18
c001a7f1:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001a7f5:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001a7f9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001a7fd:	68 d9 30 02 c0       	push   0xc00230d9
c001a802:	e8 6e 01 ff ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c001a807:	83 c4 10             	add    esp,0x10
c001a80a:	85 ff                	test   edi,edi
c001a80c:	0f 94 c0             	sete   al
c001a80f:	85 f6                	test   esi,esi
c001a811:	0f 94 c2             	sete   dl
c001a814:	09 d0                	or     eax,edx
c001a816:	a8 01                	test   al,0x1
c001a818:	0f 85 dd 00 00 00    	jne    c001a8fb <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001a81e:	85 db                	test   ebx,ebx
c001a820:	0f 84 d5 00 00 00    	je     c001a8fb <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001a826:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001a829:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c001a82f:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001a836:	0f be 05 80 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c880
c001a83d:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001a83f:	38 0d 80 c8 02 c0    	cmp    BYTE PTR ds:0xc002c880,cl
c001a845:	74 1b                	je     c001a862 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x78>
c001a847:	85 c0                	test   eax,eax
c001a849:	74 10                	je     c001a85b <ISO9660::stat(char const*, unsigned long long*, bool*)+0x71>
c001a84b:	83 ec 0c             	sub    esp,0xc
c001a84e:	68 7d 30 02 c0       	push   0xc002307d
c001a853:	e8 6f 6e ff ff       	call   c00116c7 <KePanic(char const*)>
c001a858:	83 c4 10             	add    esp,0x10
c001a85b:	8a 03                	mov    al,BYTE PTR [ebx]
c001a85d:	a2 80 c8 02 c0       	mov    ds:0xc002c880,al
c001a862:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a865:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c001a86c:	85 c0                	test   eax,eax
c001a86e:	74 09                	je     c001a879 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8f>
c001a870:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001a877:	74 51                	je     c001a8ca <ISO9660::stat(char const*, unsigned long long*, bool*)+0xe0>
c001a879:	83 ec 0c             	sub    esp,0xc
c001a87c:	68 e1 30 02 c0       	push   0xc00230e1
c001a881:	e8 ef 00 ff ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c001a886:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a889:	83 c4 10             	add    esp,0x10
c001a88c:	83 3c 85 7c b7 02 c0 00 	cmp    DWORD PTR [eax*4-0x3ffd4884],0x0
c001a894:	74 21                	je     c001a8b7 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xcd>
c001a896:	83 ec 0c             	sub    esp,0xc
c001a899:	68 01 31 02 c0       	push   0xc0023101
c001a89e:	e8 d2 00 ff ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c001a8a3:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a8a6:	83 c4 10             	add    esp,0x10
c001a8a9:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c001a8b0:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001a8b7:	83 ec 0c             	sub    esp,0xc
c001a8ba:	0f be 05 80 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c880
c001a8c1:	50                   	push   eax
c001a8c2:	e8 7f c1 fe ff       	call   c0006a46 <init_percd>
c001a8c7:	83 c4 10             	add    esp,0x10
c001a8ca:	83 c3 03             	add    ebx,0x3
c001a8cd:	52                   	push   edx
c001a8ce:	52                   	push   edx
c001a8cf:	6a 00                	push   0x0
c001a8d1:	53                   	push   ebx
c001a8d2:	e8 36 bc fe ff       	call   c000650d <iso_open>
c001a8d7:	83 c4 10             	add    esp,0x10
c001a8da:	89 c5                	mov    ebp,eax
c001a8dc:	83 f8 ff             	cmp    eax,0xffffffff
c001a8df:	75 21                	jne    c001a902 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x118>
c001a8e1:	50                   	push   eax
c001a8e2:	50                   	push   eax
c001a8e3:	6a 01                	push   0x1
c001a8e5:	53                   	push   ebx
c001a8e6:	e8 22 bc fe ff       	call   c000650d <iso_open>
c001a8eb:	83 c4 10             	add    esp,0x10
c001a8ee:	ba 02 00 00 00       	mov    edx,0x2
c001a8f3:	40                   	inc    eax
c001a8f4:	74 2b                	je     c001a921 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001a8f6:	c6 06 01             	mov    BYTE PTR [esi],0x1
c001a8f9:	eb 24                	jmp    c001a91f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x135>
c001a8fb:	ba 04 00 00 00       	mov    edx,0x4
c001a900:	eb 1f                	jmp    c001a921 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001a902:	83 ec 0c             	sub    esp,0xc
c001a905:	50                   	push   eax
c001a906:	e8 75 be fe ff       	call   c0006780 <iso_total>
c001a90b:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001a912:	89 07                	mov    DWORD PTR [edi],eax
c001a914:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001a917:	e8 7b bc fe ff       	call   c0006597 <iso_close>
c001a91c:	83 c4 10             	add    esp,0x10
c001a91f:	31 d2                	xor    edx,edx
c001a921:	83 c4 0c             	add    esp,0xc
c001a924:	89 d0                	mov    eax,edx
c001a926:	5b                   	pop    ebx
c001a927:	5e                   	pop    esi
c001a928:	5f                   	pop    edi
c001a929:	5d                   	pop    ebp
c001a92a:	c3                   	ret    
c001a92b:	90                   	nop

c001a92c <ISO9660::close(void*)>:
c001a92c:	83 ec 0c             	sub    esp,0xc
c001a92f:	b8 04 00 00 00       	mov    eax,0x4
c001a934:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a938:	85 d2                	test   edx,edx
c001a93a:	74 1b                	je     c001a957 <ISO9660::close(void*)+0x2b>
c001a93c:	83 ec 0c             	sub    esp,0xc
c001a93f:	b9 02 00 00 00       	mov    ecx,0x2
c001a944:	89 d0                	mov    eax,edx
c001a946:	99                   	cdq    
c001a947:	f7 f9                	idiv   ecx
c001a949:	83 e8 32             	sub    eax,0x32
c001a94c:	50                   	push   eax
c001a94d:	e8 45 bc fe ff       	call   c0006597 <iso_close>
c001a952:	83 c4 10             	add    esp,0x10
c001a955:	31 c0                	xor    eax,eax
c001a957:	83 c4 0c             	add    esp,0xc
c001a95a:	c3                   	ret    
c001a95b:	90                   	nop

c001a95c <ISO9660::openDir(char const*, void**)>:
c001a95c:	56                   	push   esi
c001a95d:	53                   	push   ebx
c001a95e:	50                   	push   eax
c001a95f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a963:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a967:	85 db                	test   ebx,ebx
c001a969:	0f 84 bd 00 00 00    	je     c001aa2c <ISO9660::openDir(char const*, void**)+0xd0>
c001a96f:	85 f6                	test   esi,esi
c001a971:	0f 84 b5 00 00 00    	je     c001aa2c <ISO9660::openDir(char const*, void**)+0xd0>
c001a977:	8a 13                	mov    dl,BYTE PTR [ebx]
c001a979:	0f be 05 80 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c880
c001a980:	38 15 80 c8 02 c0    	cmp    BYTE PTR ds:0xc002c880,dl
c001a986:	74 1b                	je     c001a9a3 <ISO9660::openDir(char const*, void**)+0x47>
c001a988:	85 c0                	test   eax,eax
c001a98a:	74 10                	je     c001a99c <ISO9660::openDir(char const*, void**)+0x40>
c001a98c:	83 ec 0c             	sub    esp,0xc
c001a98f:	68 7d 30 02 c0       	push   0xc002307d
c001a994:	e8 2e 6d ff ff       	call   c00116c7 <KePanic(char const*)>
c001a999:	83 c4 10             	add    esp,0x10
c001a99c:	8a 03                	mov    al,BYTE PTR [ebx]
c001a99e:	a2 80 c8 02 c0       	mov    ds:0xc002c880,al
c001a9a3:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a9a6:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c001a9ad:	85 c0                	test   eax,eax
c001a9af:	74 10                	je     c001a9c1 <ISO9660::openDir(char const*, void**)+0x65>
c001a9b1:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001a9b8:	74 1a                	je     c001a9d4 <ISO9660::openDir(char const*, void**)+0x78>
c001a9ba:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001a9c1:	83 ec 0c             	sub    esp,0xc
c001a9c4:	0f be 05 80 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c880
c001a9cb:	50                   	push   eax
c001a9cc:	e8 75 c0 fe ff       	call   c0006a46 <init_percd>
c001a9d1:	83 c4 10             	add    esp,0x10
c001a9d4:	83 c3 03             	add    ebx,0x3
c001a9d7:	50                   	push   eax
c001a9d8:	50                   	push   eax
c001a9d9:	6a 01                	push   0x1
c001a9db:	53                   	push   ebx
c001a9dc:	e8 2c bb fe ff       	call   c000650d <iso_open>
c001a9e1:	83 c4 10             	add    esp,0x10
c001a9e4:	89 c3                	mov    ebx,eax
c001a9e6:	83 f8 ff             	cmp    eax,0xffffffff
c001a9e9:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c001a9ee:	75 1c                	jne    c001aa0c <ISO9660::openDir(char const*, void**)+0xb0>
c001a9f0:	53                   	push   ebx
c001a9f1:	53                   	push   ebx
c001a9f2:	68 25 31 02 c0       	push   0xc0023125
c001a9f7:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a9fd:	e8 d4 e0 fe ff       	call   c0008ad6 <VgaText::puts(char const*)>
c001aa02:	83 c4 10             	add    esp,0x10
c001aa05:	b8 01 00 00 00       	mov    eax,0x1
c001aa0a:	eb 25                	jmp    c001aa31 <ISO9660::openDir(char const*, void**)+0xd5>
c001aa0c:	01 db                	add    ebx,ebx
c001aa0e:	51                   	push   ecx
c001aa0f:	83 c3 65             	add    ebx,0x65
c001aa12:	51                   	push   ecx
c001aa13:	68 38 31 02 c0       	push   0xc0023138
c001aa18:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001aa1e:	e8 b3 e0 fe ff       	call   c0008ad6 <VgaText::puts(char const*)>
c001aa23:	89 1e                	mov    DWORD PTR [esi],ebx
c001aa25:	83 c4 10             	add    esp,0x10
c001aa28:	31 c0                	xor    eax,eax
c001aa2a:	eb 05                	jmp    c001aa31 <ISO9660::openDir(char const*, void**)+0xd5>
c001aa2c:	b8 04 00 00 00       	mov    eax,0x4
c001aa31:	5a                   	pop    edx
c001aa32:	5b                   	pop    ebx
c001aa33:	5e                   	pop    esi
c001aa34:	c3                   	ret    
c001aa35:	90                   	nop

c001aa36 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001aa36:	55                   	push   ebp
c001aa37:	57                   	push   edi
c001aa38:	56                   	push   esi
c001aa39:	53                   	push   ebx
c001aa3a:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001aa40:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c001aa47:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001aa4e:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001aa56:	0f 84 e7 00 00 00    	je     c001ab43 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10d>
c001aa5c:	85 db                	test   ebx,ebx
c001aa5e:	0f 84 df 00 00 00    	je     c001ab43 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10d>
c001aa64:	83 ec 0c             	sub    esp,0xc
c001aa67:	68 4b 31 02 c0       	push   0xc002314b
c001aa6c:	e8 04 ff fe ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c001aa71:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c001aa78:	b9 02 00 00 00       	mov    ecx,0x2
c001aa7d:	99                   	cdq    
c001aa7e:	f7 f9                	idiv   ecx
c001aa80:	83 e8 32             	sub    eax,0x32
c001aa83:	89 04 24             	mov    DWORD PTR [esp],eax
c001aa86:	e8 47 bd fe ff       	call   c00067d2 <iso_readdir>
c001aa8b:	83 c4 10             	add    esp,0x10
c001aa8e:	89 c6                	mov    esi,eax
c001aa90:	85 c0                	test   eax,eax
c001aa92:	75 37                	jne    c001aacb <ISO9660::readDir(void*, unsigned long, void*, int*)+0x95>
c001aa94:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c001aa99:	56                   	push   esi
c001aa9a:	56                   	push   esi
c001aa9b:	68 56 31 02 c0       	push   0xc0023156
c001aaa0:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001aaa6:	e8 2b e0 fe ff       	call   c0008ad6 <VgaText::puts(char const*)>
c001aaab:	83 c4 0c             	add    esp,0xc
c001aaae:	68 10 01 00 00       	push   0x110
c001aab3:	6a 00                	push   0x0
c001aab5:	57                   	push   edi
c001aab6:	e8 35 5a fe ff       	call   c00004f0 <memset>
c001aabb:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001aac1:	83 c4 10             	add    esp,0x10
c001aac4:	b8 01 00 00 00       	mov    eax,0x1
c001aac9:	eb 7d                	jmp    c001ab48 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x112>
c001aacb:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001aad1:	8d 68 08             	lea    ebp,[eax+0x8]
c001aad4:	83 ec 0c             	sub    esp,0xc
c001aad7:	55                   	push   ebp
c001aad8:	e8 93 5a fe ff       	call   c0000570 <strlen>
c001aadd:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001aae5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001aae9:	83 c4 10             	add    esp,0x10
c001aaec:	83 7e 04 ff          	cmp    DWORD PTR [esi+0x4],0xffffffff
c001aaf0:	75 0a                	jne    c001aafc <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c001aaf2:	b8 02 00 00 00       	mov    eax,0x2
c001aaf7:	83 3e ff             	cmp    DWORD PTR [esi],0xffffffff
c001aafa:	74 05                	je     c001ab01 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xcb>
c001aafc:	b8 01 00 00 00       	mov    eax,0x1
c001ab01:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ab05:	50                   	push   eax
c001ab06:	50                   	push   eax
c001ab07:	55                   	push   ebp
c001ab08:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001ab0c:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001ab10:	50                   	push   eax
c001ab11:	e8 2a 5b fe ff       	call   c0000640 <strcpy>
c001ab16:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001ab1d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ab1f:	c7 03 10 01 00 00    	mov    DWORD PTR [ebx],0x110
c001ab25:	5a                   	pop    edx
c001ab26:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c001ab2b:	59                   	pop    ecx
c001ab2c:	68 69 31 02 c0       	push   0xc0023169
c001ab31:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001ab37:	e8 9a df fe ff       	call   c0008ad6 <VgaText::puts(char const*)>
c001ab3c:	83 c4 10             	add    esp,0x10
c001ab3f:	31 c0                	xor    eax,eax
c001ab41:	eb 05                	jmp    c001ab48 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x112>
c001ab43:	b8 04 00 00 00       	mov    eax,0x4
c001ab48:	81 c4 1c 01 00 00    	add    esp,0x11c
c001ab4e:	5b                   	pop    ebx
c001ab4f:	5e                   	pop    esi
c001ab50:	5f                   	pop    edi
c001ab51:	5d                   	pop    ebp
c001ab52:	c3                   	ret    

c001ab53 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001ab53:	57                   	push   edi
c001ab54:	56                   	push   esi
c001ab55:	53                   	push   ebx
c001ab56:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ab5a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001ab5e:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001ab62:	39 35 84 c8 02 c0    	cmp    DWORD PTR ds:0xc002c884,esi
c001ab68:	0f be cb             	movsx  ecx,bl
c001ab6b:	75 0b                	jne    c001ab78 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x25>
c001ab6d:	0f be 05 a0 43 02 c0 	movsx  eax,BYTE PTR ds:0xc00243a0
c001ab74:	39 c8                	cmp    eax,ecx
c001ab76:	74 47                	je     c001abbf <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001ab78:	83 ec 0c             	sub    esp,0xc
c001ab7b:	31 d2                	xor    edx,edx
c001ab7d:	68 a0 c8 02 c0       	push   0xc002c8a0
c001ab82:	6a 01                	push   0x1
c001ab84:	52                   	push   edx
c001ab85:	56                   	push   esi
c001ab86:	ff 34 8d 7c b7 02 c0 	push   DWORD PTR [ecx*4-0x3ffd4884]
c001ab8d:	e8 46 32 ff ff       	call   c000ddd8 <LogicalDisk::read(unsigned long long, int, void*)>
c001ab92:	83 c4 20             	add    esp,0x20
c001ab95:	85 c0                	test   eax,eax
c001ab97:	75 0e                	jne    c001aba7 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x54>
c001ab99:	89 35 84 c8 02 c0    	mov    DWORD PTR ds:0xc002c884,esi
c001ab9f:	88 1d a0 43 02 c0    	mov    BYTE PTR ds:0xc00243a0,bl
c001aba5:	eb 18                	jmp    c001abbf <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001aba7:	50                   	push   eax
c001aba8:	68 00 08 00 00       	push   0x800
c001abad:	6a 00                	push   0x0
c001abaf:	57                   	push   edi
c001abb0:	e8 3b 59 fe ff       	call   c00004f0 <memset>
c001abb5:	83 c4 10             	add    esp,0x10
c001abb8:	b8 01 00 00 00       	mov    eax,0x1
c001abbd:	eb 0e                	jmp    c001abcd <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x7a>
c001abbf:	be a0 c8 02 c0       	mov    esi,0xc002c8a0
c001abc4:	b9 00 08 00 00       	mov    ecx,0x800
c001abc9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001abcb:	31 c0                	xor    eax,eax
c001abcd:	5b                   	pop    ebx
c001abce:	5e                   	pop    esi
c001abcf:	5f                   	pop    edi
c001abd0:	c3                   	ret    
c001abd1:	90                   	nop

c001abd2 <ISO9660::tryMount(LogicalDisk*, int)>:
c001abd2:	53                   	push   ebx
c001abd3:	81 ec 0c 08 00 00    	sub    esp,0x80c
c001abd9:	c7 05 84 c8 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc002c884,0xdeadbeef
c001abe3:	8b 84 24 1c 08 00 00 	mov    eax,DWORD PTR [esp+0x81c]
c001abea:	8d 58 41             	lea    ebx,[eax+0x41]
c001abed:	0f be db             	movsx  ebx,bl
c001abf0:	53                   	push   ebx
c001abf1:	8d 44 24 08          	lea    eax,[esp+0x8]
c001abf5:	50                   	push   eax
c001abf6:	6a 10                	push   0x10
c001abf8:	e8 56 ff ff ff       	call   c001ab53 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001abfd:	83 c4 10             	add    esp,0x10
c001ac00:	31 d2                	xor    edx,edx
c001ac02:	85 c0                	test   eax,eax
c001ac04:	75 33                	jne    c001ac39 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001ac06:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001ac0b:	75 2c                	jne    c001ac39 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001ac0d:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001ac12:	75 25                	jne    c001ac39 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001ac14:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001ac19:	75 1e                	jne    c001ac39 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001ac1b:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001ac20:	75 17                	jne    c001ac39 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001ac22:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001ac27:	75 10                	jne    c001ac39 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001ac29:	83 ec 0c             	sub    esp,0xc
c001ac2c:	53                   	push   ebx
c001ac2d:	e8 14 be fe ff       	call   c0006a46 <init_percd>
c001ac32:	83 c4 10             	add    esp,0x10
c001ac35:	40                   	inc    eax
c001ac36:	0f 95 c2             	setne  dl
c001ac39:	88 d0                	mov    al,dl
c001ac3b:	81 c4 08 08 00 00    	add    esp,0x808
c001ac41:	5b                   	pop    ebx
c001ac42:	c3                   	ret    
c001ac43:	90                   	nop

c001ac44 <ISO9660::ISO9660()>:
c001ac44:	83 ec 0c             	sub    esp,0xc
c001ac47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac4b:	83 ec 0c             	sub    esp,0xc
c001ac4e:	50                   	push   eax
c001ac4f:	e8 86 0b ff ff       	call   c000b7da <Filesystem::Filesystem()>
c001ac54:	83 c4 10             	add    esp,0x10
c001ac57:	ba 84 31 02 c0       	mov    edx,0xc0023184
c001ac5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac60:	89 10                	mov    DWORD PTR [eax],edx
c001ac62:	e8 f1 be fe ff       	call   c0006b58 <fs_iso9660_init>
c001ac67:	90                   	nop
c001ac68:	83 c4 0c             	add    esp,0xc
c001ac6b:	c3                   	ret    

c001ac6c <SoundCard::beginPlayback()>:
c001ac6c:	c7 44 24 04 e8 31 02 c0 	mov    DWORD PTR [esp+0x4],0xc00231e8
c001ac74:	e9 4e 6a ff ff       	jmp    c00116c7 <KePanic(char const*)>
c001ac79:	90                   	nop

c001ac7a <SoundCard::stopPlayback()>:
c001ac7a:	c7 44 24 04 e8 31 02 c0 	mov    DWORD PTR [esp+0x4],0xc00231e8
c001ac82:	e9 40 6a ff ff       	jmp    c00116c7 <KePanic(char const*)>
c001ac87:	90                   	nop

c001ac88 <SoundCard::SoundCard(char const*)>:
c001ac88:	83 ec 1c             	sub    esp,0x1c
c001ac8b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ac8f:	83 ec 08             	sub    esp,0x8
c001ac92:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ac96:	50                   	push   eax
c001ac97:	e8 f2 1e ff ff       	call   c000cb8e <Device::Device(char const*)>
c001ac9c:	83 c4 10             	add    esp,0x10
c001ac9f:	ba 34 32 02 c0       	mov    edx,0xc0023234
c001aca4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001aca8:	89 10                	mov    DWORD PTR [eax],edx
c001acaa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001acae:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001acb5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001acb9:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c001acc3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001acc7:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c001acd1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001acd5:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c001acdf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ace3:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001aced:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001acf5:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001acfa:	7f 1a                	jg     c001ad16 <SoundCard::SoundCard(char const*)+0x8e>
c001acfc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ad00:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ad04:	83 c2 54             	add    edx,0x54
c001ad07:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001ad0f:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001ad14:	eb df                	jmp    c001acf5 <SoundCard::SoundCard(char const*)+0x6d>
c001ad16:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ad1a:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001ad21:	90                   	nop
c001ad22:	83 c4 1c             	add    esp,0x1c
c001ad25:	c3                   	ret    

c001ad26 <SoundCard::~SoundCard()>:
c001ad26:	83 ec 0c             	sub    esp,0xc
c001ad29:	ba 34 32 02 c0       	mov    edx,0xc0023234
c001ad2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad32:	89 10                	mov    DWORD PTR [eax],edx
c001ad34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad38:	83 ec 0c             	sub    esp,0xc
c001ad3b:	50                   	push   eax
c001ad3c:	e8 b7 1b ff ff       	call   c000c8f8 <Device::~Device()>
c001ad41:	83 c4 10             	add    esp,0x10
c001ad44:	90                   	nop
c001ad45:	83 c4 0c             	add    esp,0xc
c001ad48:	c3                   	ret    
c001ad49:	90                   	nop

c001ad4a <SoundCard::~SoundCard()>:
c001ad4a:	83 ec 0c             	sub    esp,0xc
c001ad4d:	83 ec 0c             	sub    esp,0xc
c001ad50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ad54:	e8 cd ff ff ff       	call   c001ad26 <SoundCard::~SoundCard()>
c001ad59:	83 c4 10             	add    esp,0x10
c001ad5c:	83 ec 08             	sub    esp,0x8
c001ad5f:	68 e8 01 00 00       	push   0x1e8
c001ad64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ad68:	e8 db fa fe ff       	call   c000a848 <operator delete(void*, unsigned long)>
c001ad6d:	83 c4 10             	add    esp,0x10
c001ad70:	83 c4 0c             	add    esp,0xc
c001ad73:	c3                   	ret    

c001ad74 <SoundCard::configureRates(int, int, int)>:
c001ad74:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ad78:	31 c0                	xor    eax,eax
c001ad7a:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c001ad81:	75 20                	jne    c001ada3 <SoundCard::configureRates(int, int, int)+0x2f>
c001ad83:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ad87:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c001ad8d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ad91:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c001ad97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad9b:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c001ada1:	b0 01                	mov    al,0x1
c001ada3:	c3                   	ret    

c001ada4 <SoundCard::getSamples16(int, short*)>:
c001ada4:	55                   	push   ebp
c001ada5:	57                   	push   edi
c001ada6:	31 ff                	xor    edi,edi
c001ada8:	56                   	push   esi
c001ada9:	53                   	push   ebx
c001adaa:	31 db                	xor    ebx,ebx
c001adac:	83 ec 10             	sub    esp,0x10
c001adaf:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001adb3:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001adb7:	8d 04 36             	lea    eax,[esi+esi*1]
c001adba:	50                   	push   eax
c001adbb:	6a 00                	push   0x0
c001adbd:	55                   	push   ebp
c001adbe:	e8 2d 57 fe ff       	call   c00004f0 <memset>
c001adc3:	83 c4 10             	add    esp,0x10
c001adc6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001adca:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c001add1:	85 c0                	test   eax,eax
c001add3:	74 1b                	je     c001adf0 <SoundCard::getSamples16(int, short*)+0x4c>
c001add5:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001add9:	75 15                	jne    c001adf0 <SoundCard::getSamples16(int, short*)+0x4c>
c001addb:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001addf:	55                   	push   ebp
c001ade0:	56                   	push   esi
c001ade1:	50                   	push   eax
c001ade2:	e8 f1 02 00 00       	call   c001b0d8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c001ade7:	83 c4 10             	add    esp,0x10
c001adea:	39 c7                	cmp    edi,eax
c001adec:	7d 02                	jge    c001adf0 <SoundCard::getSamples16(int, short*)+0x4c>
c001adee:	89 c7                	mov    edi,eax
c001adf0:	43                   	inc    ebx
c001adf1:	83 fb 20             	cmp    ebx,0x20
c001adf4:	75 d0                	jne    c001adc6 <SoundCard::getSamples16(int, short*)+0x22>
c001adf6:	83 c4 0c             	add    esp,0xc
c001adf9:	89 f8                	mov    eax,edi
c001adfb:	5b                   	pop    ebx
c001adfc:	5e                   	pop    esi
c001adfd:	5f                   	pop    edi
c001adfe:	5d                   	pop    ebp
c001adff:	c3                   	ret    

c001ae00 <SoundCard::getSamples32(int, int*)>:
c001ae00:	55                   	push   ebp
c001ae01:	57                   	push   edi
c001ae02:	31 ff                	xor    edi,edi
c001ae04:	56                   	push   esi
c001ae05:	31 f6                	xor    esi,esi
c001ae07:	53                   	push   ebx
c001ae08:	83 ec 10             	sub    esp,0x10
c001ae0b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ae0f:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001ae13:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001ae17:	c1 e0 02             	shl    eax,0x2
c001ae1a:	50                   	push   eax
c001ae1b:	6a 00                	push   0x0
c001ae1d:	55                   	push   ebp
c001ae1e:	e8 cd 56 fe ff       	call   c00004f0 <memset>
c001ae23:	83 c4 10             	add    esp,0x10
c001ae26:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c001ae2d:	85 c0                	test   eax,eax
c001ae2f:	74 1b                	je     c001ae4c <SoundCard::getSamples32(int, int*)+0x4c>
c001ae31:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001ae35:	75 15                	jne    c001ae4c <SoundCard::getSamples32(int, int*)+0x4c>
c001ae37:	53                   	push   ebx
c001ae38:	55                   	push   ebp
c001ae39:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ae3d:	50                   	push   eax
c001ae3e:	e8 61 03 00 00       	call   c001b1a4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c001ae43:	83 c4 10             	add    esp,0x10
c001ae46:	39 c6                	cmp    esi,eax
c001ae48:	7d 02                	jge    c001ae4c <SoundCard::getSamples32(int, int*)+0x4c>
c001ae4a:	89 c6                	mov    esi,eax
c001ae4c:	47                   	inc    edi
c001ae4d:	83 ff 20             	cmp    edi,0x20
c001ae50:	75 d4                	jne    c001ae26 <SoundCard::getSamples32(int, int*)+0x26>
c001ae52:	85 f6                	test   esi,esi
c001ae54:	0f b6 83 d8 01 00 00 	movzx  eax,BYTE PTR [ebx+0x1d8]
c001ae5b:	75 0f                	jne    c001ae6c <SoundCard::getSamples32(int, int*)+0x6c>
c001ae5d:	85 c0                	test   eax,eax
c001ae5f:	74 1b                	je     c001ae7c <SoundCard::getSamples32(int, int*)+0x7c>
c001ae61:	83 ec 0c             	sub    esp,0xc
c001ae64:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ae66:	53                   	push   ebx
c001ae67:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001ae6a:	eb 0d                	jmp    c001ae79 <SoundCard::getSamples32(int, int*)+0x79>
c001ae6c:	85 c0                	test   eax,eax
c001ae6e:	75 0c                	jne    c001ae7c <SoundCard::getSamples32(int, int*)+0x7c>
c001ae70:	83 ec 0c             	sub    esp,0xc
c001ae73:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ae75:	53                   	push   ebx
c001ae76:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001ae79:	83 c4 10             	add    esp,0x10
c001ae7c:	83 c4 0c             	add    esp,0xc
c001ae7f:	89 f0                	mov    eax,esi
c001ae81:	5b                   	pop    ebx
c001ae82:	5e                   	pop    esi
c001ae83:	5f                   	pop    edi
c001ae84:	5d                   	pop    ebp
c001ae85:	c3                   	ret    

c001ae86 <SoundCard::addChannel(SoundPort*)>:
c001ae86:	83 ec 0c             	sub    esp,0xc
c001ae89:	31 c0                	xor    eax,eax
c001ae8b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ae8f:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c001ae97:	74 1b                	je     c001aeb4 <SoundCard::addChannel(SoundPort*)+0x2e>
c001ae99:	40                   	inc    eax
c001ae9a:	83 f8 20             	cmp    eax,0x20
c001ae9d:	75 f0                	jne    c001ae8f <SoundCard::addChannel(SoundPort*)+0x9>
c001ae9f:	83 ec 0c             	sub    esp,0xc
c001aea2:	68 0d 32 02 c0       	push   0xc002320d
c001aea7:	e8 1b 68 ff ff       	call   c00116c7 <KePanic(char const*)>
c001aeac:	83 c4 10             	add    esp,0x10
c001aeaf:	83 c8 ff             	or     eax,0xffffffff
c001aeb2:	eb 0b                	jmp    c001aebf <SoundCard::addChannel(SoundPort*)+0x39>
c001aeb4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001aeb8:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c001aebf:	83 c4 0c             	add    esp,0xc
c001aec2:	c3                   	ret    
c001aec3:	90                   	nop

c001aec4 <SoundCard::removeChannel(int)>:
c001aec4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aec8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001aecc:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c001aed7:	c3                   	ret    

c001aed8 <SoundPort::SoundPort(int, int, int, int)>:
c001aed8:	83 ec 0c             	sub    esp,0xc
c001aedb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aedf:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001aee6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aeea:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001aeee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aef2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001aef6:	89 10                	mov    DWORD PTR [eax],edx
c001aef8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aefc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001af00:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001af03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af07:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001af0b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001af0e:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c001af13:	75 13                	jne    c001af28 <SoundPort::SoundPort(int, int, int, int)+0x50>
c001af15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af19:	8b 00                	mov    eax,DWORD PTR [eax]
c001af1b:	05 a0 0f 00 00       	add    eax,0xfa0
c001af20:	01 c0                	add    eax,eax
c001af22:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001af26:	66 90                	xchg   ax,ax
c001af28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af2c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001af30:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001af33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af37:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001af3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af42:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001af45:	c1 e0 02             	shl    eax,0x2
c001af48:	83 ec 0c             	sub    esp,0xc
c001af4b:	50                   	push   eax
c001af4c:	e8 95 cb fe ff       	call   c0007ae6 <malloc>
c001af51:	83 c4 10             	add    esp,0x10
c001af54:	89 c2                	mov    edx,eax
c001af56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af5a:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001af5d:	90                   	nop
c001af5e:	83 c4 0c             	add    esp,0xc
c001af61:	c3                   	ret    
c001af62:	66 90                	xchg   ax,ax

c001af64 <SoundPort::~SoundPort()>:
c001af64:	83 ec 0c             	sub    esp,0xc
c001af67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af6b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001af6e:	85 c0                	test   eax,eax
c001af70:	74 1e                	je     c001af90 <SoundPort::~SoundPort()+0x2c>
c001af72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af76:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001af79:	83 ec 0c             	sub    esp,0xc
c001af7c:	50                   	push   eax
c001af7d:	e8 74 cb fe ff       	call   c0007af6 <free>
c001af82:	83 c4 10             	add    esp,0x10
c001af85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af89:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001af90:	90                   	nop
c001af91:	83 c4 0c             	add    esp,0xc
c001af94:	c3                   	ret    
c001af95:	90                   	nop
c001af96:	66 90                	xchg   ax,ax

c001af98 <SoundPort::unpause()>:
c001af98:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001af9c:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c001afa0:	c3                   	ret    
c001afa1:	90                   	nop
c001afa2:	66 90                	xchg   ax,ax

c001afa4 <SoundPort::pause()>:
c001afa4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001afa8:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001afac:	c3                   	ret    
c001afad:	90                   	nop
c001afae:	66 90                	xchg   ax,ax

c001afb0 <SoundPort::getBufferUsed()>:
c001afb0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001afb4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001afb7:	c3                   	ret    

c001afb8 <SoundPort::getBufferSize()>:
c001afb8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001afbc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001afbf:	c3                   	ret    

c001afc0 <SoundPort::buffer16(short*, int)>:
c001afc0:	55                   	push   ebp
c001afc1:	57                   	push   edi
c001afc2:	56                   	push   esi
c001afc3:	53                   	push   ebx
c001afc4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001afc8:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c001afcc:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001afcf:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001afd2:	74 68                	je     c001b03c <SoundPort::buffer16(short*, int)+0x7c>
c001afd4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001afd8:	85 c9                	test   ecx,ecx
c001afda:	7e 60                	jle    c001b03c <SoundPort::buffer16(short*, int)+0x7c>
c001afdc:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c001afe0:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001afe3:	c1 e1 0f             	shl    ecx,0xf
c001afe6:	8d 70 01             	lea    esi,[eax+0x1]
c001afe9:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001afec:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001afef:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001aff2:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001aff5:	74 4d                	je     c001b044 <SoundPort::buffer16(short*, int)+0x84>
c001aff7:	31 f6                	xor    esi,esi
c001aff9:	eb 21                	jmp    c001b01c <SoundPort::buffer16(short*, int)+0x5c>
c001affb:	90                   	nop
c001affc:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c001b001:	8d 79 01             	lea    edi,[ecx+0x1]
c001b004:	c1 e3 0f             	shl    ebx,0xf
c001b007:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c001b00a:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c001b00d:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c001b010:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001b013:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001b016:	74 1c                	je     c001b034 <SoundPort::buffer16(short*, int)+0x74>
c001b018:	89 c6                	mov    esi,eax
c001b01a:	66 90                	xchg   ax,ax
c001b01c:	8d 46 01             	lea    eax,[esi+0x1]
c001b01f:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c001b023:	75 d7                	jne    c001affc <SoundPort::buffer16(short*, int)+0x3c>
c001b025:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b029:	8d 76 00             	lea    esi,[esi+0x0]
c001b02c:	5b                   	pop    ebx
c001b02d:	5e                   	pop    esi
c001b02e:	5f                   	pop    edi
c001b02f:	5d                   	pop    ebp
c001b030:	c3                   	ret    
c001b031:	8d 76 00             	lea    esi,[esi+0x0]
c001b034:	5b                   	pop    ebx
c001b035:	8d 46 02             	lea    eax,[esi+0x2]
c001b038:	5e                   	pop    esi
c001b039:	5f                   	pop    edi
c001b03a:	5d                   	pop    ebp
c001b03b:	c3                   	ret    
c001b03c:	5b                   	pop    ebx
c001b03d:	31 c0                	xor    eax,eax
c001b03f:	5e                   	pop    esi
c001b040:	5f                   	pop    edi
c001b041:	5d                   	pop    ebp
c001b042:	c3                   	ret    
c001b043:	90                   	nop
c001b044:	b8 01 00 00 00       	mov    eax,0x1
c001b049:	eb e1                	jmp    c001b02c <SoundPort::buffer16(short*, int)+0x6c>
c001b04b:	90                   	nop

c001b04c <SoundPort::buffer32(int*, int)>:
c001b04c:	55                   	push   ebp
c001b04d:	57                   	push   edi
c001b04e:	56                   	push   esi
c001b04f:	53                   	push   ebx
c001b050:	83 ec 04             	sub    esp,0x4
c001b053:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b057:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b05b:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001b05e:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001b062:	89 04 24             	mov    DWORD PTR [esp],eax
c001b065:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001b068:	74 5a                	je     c001b0c4 <SoundPort::buffer32(int*, int)+0x78>
c001b06a:	85 c0                	test   eax,eax
c001b06c:	7e 56                	jle    c001b0c4 <SoundPort::buffer32(int*, int)+0x78>
c001b06e:	8d 71 01             	lea    esi,[ecx+0x1]
c001b071:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001b074:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001b077:	8b 37                	mov    esi,DWORD PTR [edi]
c001b079:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c001b07c:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001b07f:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001b082:	74 4c                	je     c001b0d0 <SoundPort::buffer32(int*, int)+0x84>
c001b084:	31 f6                	xor    esi,esi
c001b086:	eb 1c                	jmp    c001b0a4 <SoundPort::buffer32(int*, int)+0x58>
c001b088:	8d 69 01             	lea    ebp,[ecx+0x1]
c001b08b:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c001b08e:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c001b091:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001b094:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001b098:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001b09b:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001b09e:	74 18                	je     c001b0b8 <SoundPort::buffer32(int*, int)+0x6c>
c001b0a0:	89 de                	mov    esi,ebx
c001b0a2:	66 90                	xchg   ax,ax
c001b0a4:	8d 5e 01             	lea    ebx,[esi+0x1]
c001b0a7:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c001b0aa:	75 dc                	jne    c001b088 <SoundPort::buffer32(int*, int)+0x3c>
c001b0ac:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001b0af:	90                   	nop
c001b0b0:	83 c4 04             	add    esp,0x4
c001b0b3:	5b                   	pop    ebx
c001b0b4:	5e                   	pop    esi
c001b0b5:	5f                   	pop    edi
c001b0b6:	5d                   	pop    ebp
c001b0b7:	c3                   	ret    
c001b0b8:	83 c4 04             	add    esp,0x4
c001b0bb:	8d 46 02             	lea    eax,[esi+0x2]
c001b0be:	5b                   	pop    ebx
c001b0bf:	5e                   	pop    esi
c001b0c0:	5f                   	pop    edi
c001b0c1:	5d                   	pop    ebp
c001b0c2:	c3                   	ret    
c001b0c3:	90                   	nop
c001b0c4:	83 c4 04             	add    esp,0x4
c001b0c7:	31 c0                	xor    eax,eax
c001b0c9:	5b                   	pop    ebx
c001b0ca:	5e                   	pop    esi
c001b0cb:	5f                   	pop    edi
c001b0cc:	5d                   	pop    ebp
c001b0cd:	c3                   	ret    
c001b0ce:	66 90                	xchg   ax,ax
c001b0d0:	b8 01 00 00 00       	mov    eax,0x1
c001b0d5:	eb d9                	jmp    c001b0b0 <SoundPort::buffer32(int*, int)+0x64>
c001b0d7:	90                   	nop

c001b0d8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c001b0d8:	57                   	push   edi
c001b0d9:	56                   	push   esi
c001b0da:	53                   	push   ebx
c001b0db:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b0df:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001b0e3:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c001b0e9:	39 03                	cmp    DWORD PTR [ebx],eax
c001b0eb:	74 13                	je     c001b100 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c001b0ed:	83 ec 0c             	sub    esp,0xc
c001b0f0:	68 60 32 02 c0       	push   0xc0023260
c001b0f5:	e8 cd 65 ff ff       	call   c00116c7 <KePanic(char const*)>
c001b0fa:	83 c4 10             	add    esp,0x10
c001b0fd:	8d 76 00             	lea    esi,[esi+0x0]
c001b100:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c001b106:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001b109:	74 11                	je     c001b11c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c001b10b:	83 ec 0c             	sub    esp,0xc
c001b10e:	68 9f 32 02 c0       	push   0xc002329f
c001b113:	e8 af 65 ff ff       	call   c00116c7 <KePanic(char const*)>
c001b118:	83 c4 10             	add    esp,0x10
c001b11b:	90                   	nop
c001b11c:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c001b122:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001b125:	74 11                	je     c001b138 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c001b127:	83 ec 0c             	sub    esp,0xc
c001b12a:	68 9f 32 02 c0       	push   0xc002329f
c001b12f:	e8 93 65 ff ff       	call   c00116c7 <KePanic(char const*)>
c001b134:	83 c4 10             	add    esp,0x10
c001b137:	90                   	nop
c001b138:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c001b13b:	3b 74 24 14          	cmp    esi,DWORD PTR [esp+0x14]
c001b13f:	7e 07                	jle    c001b148 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c001b141:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001b145:	8d 76 00             	lea    esi,[esi+0x0]
c001b148:	85 f6                	test   esi,esi
c001b14a:	7e 2c                	jle    c001b178 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa0>
c001b14c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b150:	8d 3c 36             	lea    edi,[esi+esi*1]
c001b153:	31 c9                	xor    ecx,ecx
c001b155:	01 d7                	add    edi,edx
c001b157:	90                   	nop
c001b158:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001b15b:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c001b15e:	85 c0                	test   eax,eax
c001b160:	79 06                	jns    c001b168 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c001b162:	05 ff 7f 00 00       	add    eax,0x7fff
c001b167:	90                   	nop
c001b168:	c1 f8 0f             	sar    eax,0xf
c001b16b:	83 c1 04             	add    ecx,0x4
c001b16e:	66 01 02             	add    WORD PTR [edx],ax
c001b171:	83 c2 02             	add    edx,0x2
c001b174:	39 d7                	cmp    edi,edx
c001b176:	75 e0                	jne    c001b158 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c001b178:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001b17b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001b17e:	83 ec 04             	sub    esp,0x4
c001b181:	29 f0                	sub    eax,esi
c001b183:	c1 e0 02             	shl    eax,0x2
c001b186:	50                   	push   eax
c001b187:	8d 04 b2             	lea    eax,[edx+esi*4]
c001b18a:	50                   	push   eax
c001b18b:	52                   	push   edx
c001b18c:	e8 3f 52 fe ff       	call   c00003d0 <memmove>
c001b191:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001b194:	83 c4 10             	add    esp,0x10
c001b197:	29 f0                	sub    eax,esi
c001b199:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001b19c:	89 f0                	mov    eax,esi
c001b19e:	5b                   	pop    ebx
c001b19f:	5e                   	pop    esi
c001b1a0:	5f                   	pop    edi
c001b1a1:	c3                   	ret    
c001b1a2:	66 90                	xchg   ax,ax

c001b1a4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c001b1a4:	57                   	push   edi
c001b1a5:	56                   	push   esi
c001b1a6:	53                   	push   ebx
c001b1a7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b1ab:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001b1af:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001b1b3:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c001b1b9:	39 06                	cmp    DWORD PTR [esi],eax
c001b1bb:	74 13                	je     c001b1d0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c001b1bd:	83 ec 0c             	sub    esp,0xc
c001b1c0:	68 80 32 02 c0       	push   0xc0023280
c001b1c5:	e8 fd 64 ff ff       	call   c00116c7 <KePanic(char const*)>
c001b1ca:	83 c4 10             	add    esp,0x10
c001b1cd:	8d 76 00             	lea    esi,[esi+0x0]
c001b1d0:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c001b1d6:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c001b1d9:	74 11                	je     c001b1ec <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c001b1db:	83 ec 0c             	sub    esp,0xc
c001b1de:	68 bb 32 02 c0       	push   0xc00232bb
c001b1e3:	e8 df 64 ff ff       	call   c00116c7 <KePanic(char const*)>
c001b1e8:	83 c4 10             	add    esp,0x10
c001b1eb:	90                   	nop
c001b1ec:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c001b1f2:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c001b1f5:	74 11                	je     c001b208 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c001b1f7:	83 ec 0c             	sub    esp,0xc
c001b1fa:	68 bb 32 02 c0       	push   0xc00232bb
c001b1ff:	e8 c3 64 ff ff       	call   c00116c7 <KePanic(char const*)>
c001b204:	83 c4 10             	add    esp,0x10
c001b207:	90                   	nop
c001b208:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001b20b:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c001b20f:	7e 07                	jle    c001b218 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c001b211:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001b215:	8d 76 00             	lea    esi,[esi+0x0]
c001b218:	85 ff                	test   edi,edi
c001b21a:	7e 1c                	jle    c001b238 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c001b21c:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c001b223:	31 c0                	xor    eax,eax
c001b225:	8d 76 00             	lea    esi,[esi+0x0]
c001b228:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001b22b:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001b22e:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c001b231:	83 c0 04             	add    eax,0x4
c001b234:	39 c1                	cmp    ecx,eax
c001b236:	75 f0                	jne    c001b228 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c001b238:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001b23b:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001b23e:	83 ec 04             	sub    esp,0x4
c001b241:	29 f8                	sub    eax,edi
c001b243:	c1 e0 02             	shl    eax,0x2
c001b246:	50                   	push   eax
c001b247:	8d 04 ba             	lea    eax,[edx+edi*4]
c001b24a:	50                   	push   eax
c001b24b:	52                   	push   edx
c001b24c:	e8 7f 51 fe ff       	call   c00003d0 <memmove>
c001b251:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001b254:	83 c4 10             	add    esp,0x10
c001b257:	29 f8                	sub    eax,edi
c001b259:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c001b25c:	89 f8                	mov    eax,edi
c001b25e:	5b                   	pop    ebx
c001b25f:	5e                   	pop    esi
c001b260:	5f                   	pop    edi
c001b261:	c3                   	ret    

c001b262 <PCI::open(int, int, void*)>:
c001b262:	83 ec 18             	sub    esp,0x18
c001b265:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b269:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001b26d:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001b273:	8b 10                	mov    edx,DWORD PTR [eax]
c001b275:	50                   	push   eax
c001b276:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001b279:	31 c0                	xor    eax,eax
c001b27b:	83 c4 1c             	add    esp,0x1c
c001b27e:	c3                   	ret    
c001b27f:	90                   	nop

c001b280 <PCI::close(int, int, void*)>:
c001b280:	31 c0                	xor    eax,eax
c001b282:	c3                   	ret    
c001b283:	90                   	nop

c001b284 <PCI::PCI()>:
c001b284:	83 ec 0c             	sub    esp,0xc
c001b287:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b28b:	83 ec 08             	sub    esp,0x8
c001b28e:	68 d7 32 02 c0       	push   0xc00232d7
c001b293:	50                   	push   eax
c001b294:	e8 bf 10 ff ff       	call   c000c358 <Bus::Bus(char const*)>
c001b299:	83 c4 10             	add    esp,0x10
c001b29c:	ba 80 33 02 c0       	mov    edx,0xc0023380
c001b2a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b2a5:	89 10                	mov    DWORD PTR [eax],edx
c001b2a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b2ab:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001b2b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b2b9:	a3 a0 d0 02 c0       	mov    ds:0xc002d0a0,eax
c001b2be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b2c2:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b2c8:	0f b6 d0             	movzx  edx,al
c001b2cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b2cf:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001b2d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b2da:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b2e0:	0f b6 d0             	movzx  edx,al
c001b2e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b2e7:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001b2ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b2f0:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b2f6:	8d 50 01             	lea    edx,[eax+0x1]
c001b2f9:	88 d1                	mov    cl,dl
c001b2fb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b2ff:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001b305:	0f b6 d0             	movzx  edx,al
c001b308:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b30c:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001b310:	83 c9 c0             	or     ecx,0xffffffc0
c001b313:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001b317:	90                   	nop
c001b318:	83 c4 0c             	add    esp,0xc
c001b31b:	c3                   	ret    

c001b31c <PCI::readBAR8(unsigned int, int)>:
c001b31c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b320:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b324:	f6 c2 01             	test   dl,0x1
c001b327:	74 07                	je     c001b330 <PCI::readBAR8(unsigned int, int)+0x14>
c001b329:	83 e2 fc             	and    edx,0xfffffffc
c001b32c:	01 c2                	add    edx,eax
c001b32e:	ec                   	in     al,dx
c001b32f:	c3                   	ret    
c001b330:	83 e2 f0             	and    edx,0xfffffff0
c001b333:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001b336:	c3                   	ret    
c001b337:	90                   	nop

c001b338 <PCI::readBAR16(unsigned int, int)>:
c001b338:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b33c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b340:	f6 c2 01             	test   dl,0x1
c001b343:	74 08                	je     c001b34d <PCI::readBAR16(unsigned int, int)+0x15>
c001b345:	83 e2 fc             	and    edx,0xfffffffc
c001b348:	01 c2                	add    edx,eax
c001b34a:	66 ed                	in     ax,dx
c001b34c:	c3                   	ret    
c001b34d:	83 e2 f0             	and    edx,0xfffffff0
c001b350:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001b354:	c3                   	ret    
c001b355:	90                   	nop

c001b356 <PCI::readBAR32(unsigned int, int)>:
c001b356:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b35a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b35e:	f6 c2 01             	test   dl,0x1
c001b361:	74 07                	je     c001b36a <PCI::readBAR32(unsigned int, int)+0x14>
c001b363:	83 e2 fc             	and    edx,0xfffffffc
c001b366:	01 c2                	add    edx,eax
c001b368:	ed                   	in     eax,dx
c001b369:	c3                   	ret    
c001b36a:	83 e2 f0             	and    edx,0xfffffff0
c001b36d:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001b370:	c3                   	ret    
c001b371:	90                   	nop

c001b372 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001b372:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b376:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b37a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b37e:	f6 c2 01             	test   dl,0x1
c001b381:	74 07                	je     c001b38a <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001b383:	83 e2 fc             	and    edx,0xfffffffc
c001b386:	01 ca                	add    edx,ecx
c001b388:	ee                   	out    dx,al
c001b389:	c3                   	ret    
c001b38a:	83 e2 f0             	and    edx,0xfffffff0
c001b38d:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001b390:	c3                   	ret    
c001b391:	90                   	nop

c001b392 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001b392:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b396:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b39a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b39e:	f6 c2 01             	test   dl,0x1
c001b3a1:	74 08                	je     c001b3ab <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001b3a3:	83 e2 fc             	and    edx,0xfffffffc
c001b3a6:	01 ca                	add    edx,ecx
c001b3a8:	66 ef                	out    dx,ax
c001b3aa:	c3                   	ret    
c001b3ab:	83 e2 f0             	and    edx,0xfffffff0
c001b3ae:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001b3b2:	c3                   	ret    
c001b3b3:	90                   	nop

c001b3b4 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001b3b4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b3b8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b3bc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b3c0:	f6 c2 01             	test   dl,0x1
c001b3c3:	74 07                	je     c001b3cc <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001b3c5:	83 e2 fc             	and    edx,0xfffffffc
c001b3c8:	01 ca                	add    edx,ecx
c001b3ca:	ef                   	out    dx,eax
c001b3cb:	c3                   	ret    
c001b3cc:	83 e2 f0             	and    edx,0xfffffff0
c001b3cf:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001b3d2:	c3                   	ret    
c001b3d3:	90                   	nop

c001b3d4 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001b3d4:	55                   	push   ebp
c001b3d5:	57                   	push   edi
c001b3d6:	56                   	push   esi
c001b3d7:	53                   	push   ebx
c001b3d8:	83 ec 0c             	sub    esp,0xc
c001b3db:	0f b6 74 24 2c       	movzx  esi,BYTE PTR [esp+0x2c]
c001b3e0:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001b3e4:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001b3e8:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001b3ec:	83 fe 07             	cmp    esi,0x7
c001b3ef:	76 10                	jbe    c001b401 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001b3f1:	83 ec 0c             	sub    esp,0xc
c001b3f4:	68 df 32 02 c0       	push   0xc00232df
c001b3f9:	e8 c9 62 ff ff       	call   c00116c7 <KePanic(char const*)>
c001b3fe:	83 c4 10             	add    esp,0x10
c001b401:	0f b6 db             	movzx  ebx,bl
c001b404:	83 fb 0f             	cmp    ebx,0xf
c001b407:	76 10                	jbe    c001b419 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x45>
c001b409:	83 ec 0c             	sub    esp,0xc
c001b40c:	68 0f 33 02 c0       	push   0xc002330f
c001b411:	e8 b1 62 ff ff       	call   c00116c7 <KePanic(char const*)>
c001b416:	83 c4 10             	add    esp,0x10
c001b419:	8d 04 36             	lea    eax,[esi+esi*1]
c001b41c:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b421:	83 c8 f0             	or     eax,0xfffffff0
c001b424:	ee                   	out    dx,al
c001b425:	ba fa 0c 00 00       	mov    edx,0xcfa
c001b42a:	89 e8                	mov    eax,ebp
c001b42c:	ee                   	out    dx,al
c001b42d:	83 c4 0c             	add    esp,0xc
c001b430:	89 d8                	mov    eax,ebx
c001b432:	89 f9                	mov    ecx,edi
c001b434:	c1 e0 08             	shl    eax,0x8
c001b437:	0f b6 d9             	movzx  ebx,cl
c001b43a:	83 e3 fc             	and    ebx,0xfffffffc
c001b43d:	09 d8                	or     eax,ebx
c001b43f:	5b                   	pop    ebx
c001b440:	0d 00 c0 ff ff       	or     eax,0xffffc000
c001b445:	5e                   	pop    esi
c001b446:	5f                   	pop    edi
c001b447:	5d                   	pop    ebp
c001b448:	c3                   	ret    
c001b449:	90                   	nop

c001b44a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001b44a:	57                   	push   edi
c001b44b:	56                   	push   esi
c001b44c:	53                   	push   ebx
c001b44d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b451:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b455:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001b45b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b45f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001b463:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b467:	83 ff 01             	cmp    edi,0x1
c001b46a:	75 3f                	jne    c001b4ab <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x61>
c001b46c:	89 de                	mov    esi,ebx
c001b46e:	0f b6 c0             	movzx  eax,al
c001b471:	81 e6 fc 00 00 00    	and    esi,0xfc
c001b477:	c1 e0 10             	shl    eax,0x10
c001b47a:	0f b6 c9             	movzx  ecx,cl
c001b47d:	09 f0                	or     eax,esi
c001b47f:	c1 e1 08             	shl    ecx,0x8
c001b482:	0f b6 d2             	movzx  edx,dl
c001b485:	09 c8                	or     eax,ecx
c001b487:	c1 e2 0b             	shl    edx,0xb
c001b48a:	09 d0                	or     eax,edx
c001b48c:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b491:	0d 00 00 00 80       	or     eax,0x80000000
c001b496:	ef                   	out    dx,eax
c001b497:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b49c:	ed                   	in     eax,dx
c001b49d:	83 e3 02             	and    ebx,0x2
c001b4a0:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001b4a7:	d3 e8                	shr    eax,cl
c001b4a9:	eb 44                	jmp    c001b4ef <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001b4ab:	83 ff 02             	cmp    edi,0x2
c001b4ae:	75 2d                	jne    c001b4dd <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x93>
c001b4b0:	83 ec 0c             	sub    esp,0xc
c001b4b3:	0f b6 c9             	movzx  ecx,cl
c001b4b6:	0f b6 d2             	movzx  edx,dl
c001b4b9:	0f b6 fb             	movzx  edi,bl
c001b4bc:	0f b6 c0             	movzx  eax,al
c001b4bf:	57                   	push   edi
c001b4c0:	51                   	push   ecx
c001b4c1:	52                   	push   edx
c001b4c2:	50                   	push   eax
c001b4c3:	56                   	push   esi
c001b4c4:	e8 0b ff ff ff       	call   c001b3d4 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b4c9:	89 c2                	mov    edx,eax
c001b4cb:	ed                   	in     eax,dx
c001b4cc:	83 e3 02             	and    ebx,0x2
c001b4cf:	83 c4 20             	add    esp,0x20
c001b4d2:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001b4d9:	d3 e8                	shr    eax,cl
c001b4db:	eb 12                	jmp    c001b4ef <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001b4dd:	83 ec 0c             	sub    esp,0xc
c001b4e0:	68 3f 33 02 c0       	push   0xc002333f
c001b4e5:	e8 dd 61 ff ff       	call   c00116c7 <KePanic(char const*)>
c001b4ea:	83 c4 10             	add    esp,0x10
c001b4ed:	31 c0                	xor    eax,eax
c001b4ef:	5b                   	pop    ebx
c001b4f0:	5e                   	pop    esi
c001b4f1:	5f                   	pop    edi
c001b4f2:	c3                   	ret    
c001b4f3:	90                   	nop

c001b4f4 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001b4f4:	83 ec 18             	sub    esp,0x18
c001b4f7:	6a 00                	push   0x0
c001b4f9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b4fe:	50                   	push   eax
c001b4ff:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b504:	50                   	push   eax
c001b505:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b50a:	50                   	push   eax
c001b50b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b50f:	e8 36 ff ff ff       	call   c001b44a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b514:	83 c4 2c             	add    esp,0x2c
c001b517:	c3                   	ret    

c001b518 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001b518:	83 ec 18             	sub    esp,0x18
c001b51b:	6a 0e                	push   0xe
c001b51d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b522:	50                   	push   eax
c001b523:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b528:	50                   	push   eax
c001b529:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b52e:	50                   	push   eax
c001b52f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b533:	e8 12 ff ff ff       	call   c001b44a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b538:	83 c4 2c             	add    esp,0x2c
c001b53b:	0f b6 c0             	movzx  eax,al
c001b53e:	c3                   	ret    
c001b53f:	90                   	nop

c001b540 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001b540:	55                   	push   ebp
c001b541:	57                   	push   edi
c001b542:	56                   	push   esi
c001b543:	53                   	push   ebx
c001b544:	83 ec 18             	sub    esp,0x18
c001b547:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001b54c:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001b551:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001b556:	6a 0a                	push   0xa
c001b558:	56                   	push   esi
c001b559:	55                   	push   ebp
c001b55a:	57                   	push   edi
c001b55b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b55f:	e8 e6 fe ff ff       	call   c001b44a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b564:	83 c4 14             	add    esp,0x14
c001b567:	89 c3                	mov    ebx,eax
c001b569:	6a 0a                	push   0xa
c001b56b:	0f b6 db             	movzx  ebx,bl
c001b56e:	56                   	push   esi
c001b56f:	55                   	push   ebp
c001b570:	57                   	push   edi
c001b571:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b575:	e8 d0 fe ff ff       	call   c001b44a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b57a:	83 c4 2c             	add    esp,0x2c
c001b57d:	25 00 ff 00 00       	and    eax,0xff00
c001b582:	09 d8                	or     eax,ebx
c001b584:	5b                   	pop    ebx
c001b585:	5e                   	pop    esi
c001b586:	5f                   	pop    edi
c001b587:	5d                   	pop    ebp
c001b588:	c3                   	ret    
c001b589:	90                   	nop

c001b58a <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001b58a:	83 ec 18             	sub    esp,0x18
c001b58d:	6a 08                	push   0x8
c001b58f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b594:	50                   	push   eax
c001b595:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b59a:	50                   	push   eax
c001b59b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b5a0:	50                   	push   eax
c001b5a1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b5a5:	e8 a0 fe ff ff       	call   c001b44a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b5aa:	83 c4 2c             	add    esp,0x2c
c001b5ad:	0f b6 c4             	movzx  eax,ah
c001b5b0:	c3                   	ret    
c001b5b1:	90                   	nop

c001b5b2 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001b5b2:	83 ec 18             	sub    esp,0x18
c001b5b5:	6a 08                	push   0x8
c001b5b7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b5bc:	50                   	push   eax
c001b5bd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b5c2:	50                   	push   eax
c001b5c3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b5c8:	50                   	push   eax
c001b5c9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b5cd:	e8 78 fe ff ff       	call   c001b44a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b5d2:	83 c4 2c             	add    esp,0x2c
c001b5d5:	c3                   	ret    

c001b5d6 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001b5d6:	83 ec 18             	sub    esp,0x18
c001b5d9:	6a 3c                	push   0x3c
c001b5db:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b5e0:	50                   	push   eax
c001b5e1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b5e6:	50                   	push   eax
c001b5e7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b5ec:	50                   	push   eax
c001b5ed:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b5f1:	e8 54 fe ff ff       	call   c001b44a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b5f6:	83 c4 2c             	add    esp,0x2c
c001b5f9:	c3                   	ret    

c001b5fa <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001b5fa:	83 ec 18             	sub    esp,0x18
c001b5fd:	6a 18                	push   0x18
c001b5ff:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b604:	50                   	push   eax
c001b605:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b60a:	50                   	push   eax
c001b60b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b610:	50                   	push   eax
c001b611:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b615:	e8 30 fe ff ff       	call   c001b44a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b61a:	83 c4 2c             	add    esp,0x2c
c001b61d:	0f b6 c4             	movzx  eax,ah
c001b620:	c3                   	ret    
c001b621:	90                   	nop

c001b622 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001b622:	55                   	push   ebp
c001b623:	57                   	push   edi
c001b624:	56                   	push   esi
c001b625:	53                   	push   ebx
c001b626:	83 ec 28             	sub    esp,0x28
c001b629:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001b62d:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001b632:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001b637:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001b63c:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001b643:	8d 43 12             	lea    eax,[ebx+0x12]
c001b646:	83 c3 10             	add    ebx,0x10
c001b649:	0f b6 c0             	movzx  eax,al
c001b64c:	0f b6 db             	movzx  ebx,bl
c001b64f:	50                   	push   eax
c001b650:	51                   	push   ecx
c001b651:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001b655:	57                   	push   edi
c001b656:	55                   	push   ebp
c001b657:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001b65b:	e8 ea fd ff ff       	call   c001b44a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b660:	83 c4 14             	add    esp,0x14
c001b663:	89 c6                	mov    esi,eax
c001b665:	53                   	push   ebx
c001b666:	c1 e6 10             	shl    esi,0x10
c001b669:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001b66d:	51                   	push   ecx
c001b66e:	57                   	push   edi
c001b66f:	55                   	push   ebp
c001b670:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001b674:	e8 d1 fd ff ff       	call   c001b44a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b679:	83 c4 3c             	add    esp,0x3c
c001b67c:	0f b7 c0             	movzx  eax,ax
c001b67f:	5b                   	pop    ebx
c001b680:	09 f0                	or     eax,esi
c001b682:	5e                   	pop    esi
c001b683:	5f                   	pop    edi
c001b684:	5d                   	pop    ebp
c001b685:	c3                   	ret    

c001b686 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001b686:	55                   	push   ebp
c001b687:	57                   	push   edi
c001b688:	56                   	push   esi
c001b689:	53                   	push   ebx
c001b68a:	83 ec 0c             	sub    esp,0xc
c001b68d:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001b691:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001b695:	89 f5                	mov    ebp,esi
c001b697:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c001b69d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b6a1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b6a5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b6a9:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001b6ad:	83 f9 01             	cmp    ecx,0x1
c001b6b0:	75 5d                	jne    c001b70f <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c001b6b2:	0f b6 c8             	movzx  ecx,al
c001b6b5:	0f b6 d2             	movzx  edx,dl
c001b6b8:	c1 e1 10             	shl    ecx,0x10
c001b6bb:	c1 e2 0b             	shl    edx,0xb
c001b6be:	89 f0                	mov    eax,esi
c001b6c0:	25 fc 00 00 00       	and    eax,0xfc
c001b6c5:	09 c1                	or     ecx,eax
c001b6c7:	89 e8                	mov    eax,ebp
c001b6c9:	0f b6 c0             	movzx  eax,al
c001b6cc:	c1 e0 08             	shl    eax,0x8
c001b6cf:	09 c1                	or     ecx,eax
c001b6d1:	09 d1                	or     ecx,edx
c001b6d3:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b6d8:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001b6de:	89 c8                	mov    eax,ecx
c001b6e0:	ef                   	out    dx,eax
c001b6e1:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b6e6:	ed                   	in     eax,dx
c001b6e7:	0f b7 db             	movzx  ebx,bx
c001b6ea:	83 e6 02             	and    esi,0x2
c001b6ed:	74 0a                	je     c001b6f9 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c001b6ef:	0f b7 d0             	movzx  edx,ax
c001b6f2:	c1 e3 10             	shl    ebx,0x10
c001b6f5:	09 d3                	or     ebx,edx
c001b6f7:	eb 05                	jmp    c001b6fe <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c001b6f9:	66 31 c0             	xor    ax,ax
c001b6fc:	09 c3                	or     ebx,eax
c001b6fe:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b703:	89 c8                	mov    eax,ecx
c001b705:	ef                   	out    dx,eax
c001b706:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b70b:	89 d8                	mov    eax,ebx
c001b70d:	eb 41                	jmp    c001b750 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001b70f:	83 f9 02             	cmp    ecx,0x2
c001b712:	75 45                	jne    c001b759 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c001b714:	83 ec 0c             	sub    esp,0xc
c001b717:	0f b6 d2             	movzx  edx,dl
c001b71a:	89 f1                	mov    ecx,esi
c001b71c:	0f b6 c0             	movzx  eax,al
c001b71f:	0f b6 f1             	movzx  esi,cl
c001b722:	89 e9                	mov    ecx,ebp
c001b724:	56                   	push   esi
c001b725:	0f b6 c9             	movzx  ecx,cl
c001b728:	51                   	push   ecx
c001b729:	52                   	push   edx
c001b72a:	50                   	push   eax
c001b72b:	57                   	push   edi
c001b72c:	e8 a3 fc ff ff       	call   c001b3d4 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b731:	89 c2                	mov    edx,eax
c001b733:	ed                   	in     eax,dx
c001b734:	83 c4 20             	add    esp,0x20
c001b737:	0f b7 db             	movzx  ebx,bx
c001b73a:	f6 c2 02             	test   dl,0x2
c001b73d:	74 0c                	je     c001b74b <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c001b73f:	0f b7 c8             	movzx  ecx,ax
c001b742:	89 d8                	mov    eax,ebx
c001b744:	c1 e0 10             	shl    eax,0x10
c001b747:	09 c8                	or     eax,ecx
c001b749:	eb 05                	jmp    c001b750 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001b74b:	66 31 c0             	xor    ax,ax
c001b74e:	09 d8                	or     eax,ebx
c001b750:	ef                   	out    dx,eax
c001b751:	83 c4 0c             	add    esp,0xc
c001b754:	5b                   	pop    ebx
c001b755:	5e                   	pop    esi
c001b756:	5f                   	pop    edi
c001b757:	5d                   	pop    ebp
c001b758:	c3                   	ret    
c001b759:	c7 44 24 20 3f 33 02 c0 	mov    DWORD PTR [esp+0x20],0xc002333f
c001b761:	83 c4 0c             	add    esp,0xc
c001b764:	5b                   	pop    ebx
c001b765:	5e                   	pop    esi
c001b766:	5f                   	pop    edi
c001b767:	5d                   	pop    ebp
c001b768:	e9 5a 5f ff ff       	jmp    c00116c7 <KePanic(char const*)>
c001b76d:	90                   	nop

c001b76e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001b76e:	55                   	push   ebp
c001b76f:	57                   	push   edi
c001b770:	56                   	push   esi
c001b771:	53                   	push   ebx
c001b772:	81 ec 4c 01 00 00    	sub    esp,0x14c
c001b778:	8b ac 24 84 01 00 00 	mov    ebp,DWORD PTR [esp+0x184]
c001b77f:	80 3d ac d0 02 c0 00 	cmp    BYTE PTR ds:0xc002d0ac,0x0
c001b786:	0f 85 bd 00 00 00    	jne    c001b849 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdb>
c001b78c:	83 ec 0c             	sub    esp,0xc
c001b78f:	68 14 01 00 00       	push   0x114
c001b794:	e8 4d c3 fe ff       	call   c0007ae6 <malloc>
c001b799:	83 c4 0c             	add    esp,0xc
c001b79c:	89 c3                	mov    ebx,eax
c001b79e:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c001b7a4:	68 45 33 02 c0       	push   0xc0023345
c001b7a9:	50                   	push   eax
c001b7aa:	e8 cd 03 ff ff       	call   c000bb7c <File::File(char const*, Process*)>
c001b7af:	83 c4 10             	add    esp,0x10
c001b7b2:	85 db                	test   ebx,ebx
c001b7b4:	0f 84 67 02 00 00    	je     c001ba21 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001b7ba:	56                   	push   esi
c001b7bb:	56                   	push   esi
c001b7bc:	6a 01                	push   0x1
c001b7be:	53                   	push   ebx
c001b7bf:	e8 d6 03 ff ff       	call   c000bb9a <File::open(FileOpenMode)>
c001b7c4:	83 c4 10             	add    esp,0x10
c001b7c7:	85 c0                	test   eax,eax
c001b7c9:	0f 85 52 02 00 00    	jne    c001ba21 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001b7cf:	52                   	push   edx
c001b7d0:	8d 44 24 3f          	lea    eax,[esp+0x3f]
c001b7d4:	50                   	push   eax
c001b7d5:	8d 44 24 48          	lea    eax,[esp+0x48]
c001b7d9:	50                   	push   eax
c001b7da:	53                   	push   ebx
c001b7db:	e8 bc 06 ff ff       	call   c000be9c <File::stat(unsigned long long*, bool*)>
c001b7e0:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001b7e4:	40                   	inc    eax
c001b7e5:	89 04 24             	mov    DWORD PTR [esp],eax
c001b7e8:	e8 f9 c2 fe ff       	call   c0007ae6 <malloc>
c001b7ed:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001b7f1:	a3 a8 d0 02 c0       	mov    ds:0xc002d0a8,eax
c001b7f6:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001b7fa:	59                   	pop    ecx
c001b7fb:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b7fd:	8d 4c 24 48          	lea    ecx,[esp+0x48]
c001b801:	51                   	push   ecx
c001b802:	50                   	push   eax
c001b803:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001b807:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001b80b:	53                   	push   ebx
c001b80c:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b80f:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c001b813:	83 c4 20             	add    esp,0x20
c001b816:	89 c8                	mov    eax,ecx
c001b818:	99                   	cdq    
c001b819:	3b 54 24 44          	cmp    edx,DWORD PTR [esp+0x44]
c001b81d:	0f 85 fe 01 00 00    	jne    c001ba21 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001b823:	3b 4c 24 40          	cmp    ecx,DWORD PTR [esp+0x40]
c001b827:	0f 85 f4 01 00 00    	jne    c001ba21 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001b82d:	83 ec 0c             	sub    esp,0xc
c001b830:	53                   	push   ebx
c001b831:	e8 c2 03 ff ff       	call   c000bbf8 <File::close()>
c001b836:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001b83a:	c6 05 ac d0 02 c0 01 	mov    BYTE PTR ds:0xc002d0ac,0x1
c001b841:	a3 a4 d0 02 c0       	mov    ds:0xc002d0a4,eax
c001b846:	83 c4 10             	add    esp,0x10
c001b849:	a1 a4 d0 02 c0       	mov    eax,ds:0xc002d0a4
c001b84e:	8b 1d a8 d0 02 c0    	mov    ebx,DWORD PTR ds:0xc002d0a8
c001b854:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b858:	31 f6                	xor    esi,esi
c001b85a:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c001b862:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c001b869:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c001b86e:	31 c9                	xor    ecx,ecx
c001b870:	66 8b 84 24 82 01 00 00 	mov    ax,WORD PTR [esp+0x182]
c001b878:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c001b87d:	0f b6 84 24 60 01 00 00 	movzx  eax,BYTE PTR [esp+0x160]
c001b885:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001b889:	0f b6 84 24 61 01 00 00 	movzx  eax,BYTE PTR [esp+0x161]
c001b891:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001b895:	39 74 24 04          	cmp    DWORD PTR [esp+0x4],esi
c001b899:	0f 8e 82 01 00 00    	jle    c001ba21 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001b89f:	8a 04 33             	mov    al,BYTE PTR [ebx+esi*1]
c001b8a2:	d4 40                	aam    0x40
c001b8a4:	d5 39                	aad    0x39
c001b8a6:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001b8aa:	8a 44 33 01          	mov    al,BYTE PTR [ebx+esi*1+0x1]
c001b8ae:	d4 40                	aam    0x40
c001b8b0:	d5 39                	aad    0x39
c001b8b2:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001b8b6:	8a 44 33 03          	mov    al,BYTE PTR [ebx+esi*1+0x3]
c001b8ba:	d4 40                	aam    0x40
c001b8bc:	d5 39                	aad    0x39
c001b8be:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001b8c2:	8a 44 33 04          	mov    al,BYTE PTR [ebx+esi*1+0x4]
c001b8c6:	d4 40                	aam    0x40
c001b8c8:	d5 39                	aad    0x39
c001b8ca:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001b8ce:	8a 44 33 06          	mov    al,BYTE PTR [ebx+esi*1+0x6]
c001b8d2:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c001b8d6:	3c 56                	cmp    al,0x56
c001b8d8:	74 43                	je     c001b91d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1af>
c001b8da:	d4 40                	aam    0x40
c001b8dc:	d5 39                	aad    0x39
c001b8de:	8d 48 d0             	lea    ecx,[eax-0x30]
c001b8e1:	8a 44 33 07          	mov    al,BYTE PTR [ebx+esi*1+0x7]
c001b8e5:	0f b6 c9             	movzx  ecx,cl
c001b8e8:	c1 e1 04             	shl    ecx,0x4
c001b8eb:	d4 40                	aam    0x40
c001b8ed:	d5 39                	aad    0x39
c001b8ef:	83 e8 30             	sub    eax,0x30
c001b8f2:	0f b6 c0             	movzx  eax,al
c001b8f5:	09 c1                	or     ecx,eax
c001b8f7:	8a 44 33 08          	mov    al,BYTE PTR [ebx+esi*1+0x8]
c001b8fb:	c1 e1 04             	shl    ecx,0x4
c001b8fe:	d4 40                	aam    0x40
c001b900:	d5 39                	aad    0x39
c001b902:	83 e8 30             	sub    eax,0x30
c001b905:	0f b6 c0             	movzx  eax,al
c001b908:	09 c1                	or     ecx,eax
c001b90a:	8a 44 33 09          	mov    al,BYTE PTR [ebx+esi*1+0x9]
c001b90e:	c1 e1 04             	shl    ecx,0x4
c001b911:	d4 40                	aam    0x40
c001b913:	d5 39                	aad    0x39
c001b915:	83 e8 30             	sub    eax,0x30
c001b918:	0f b6 c0             	movzx  eax,al
c001b91b:	09 c1                	or     ecx,eax
c001b91d:	8a 44 33 0b          	mov    al,BYTE PTR [ebx+esi*1+0xb]
c001b921:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001b925:	3c 58                	cmp    al,0x58
c001b927:	74 47                	je     c001b970 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x202>
c001b929:	d4 40                	aam    0x40
c001b92b:	d5 39                	aad    0x39
c001b92d:	8d 50 d0             	lea    edx,[eax-0x30]
c001b930:	8a 44 33 0c          	mov    al,BYTE PTR [ebx+esi*1+0xc]
c001b934:	0f b6 d2             	movzx  edx,dl
c001b937:	c1 e2 04             	shl    edx,0x4
c001b93a:	d4 40                	aam    0x40
c001b93c:	d5 39                	aad    0x39
c001b93e:	83 e8 30             	sub    eax,0x30
c001b941:	0f b6 c0             	movzx  eax,al
c001b944:	09 c2                	or     edx,eax
c001b946:	8a 44 33 0d          	mov    al,BYTE PTR [ebx+esi*1+0xd]
c001b94a:	c1 e2 04             	shl    edx,0x4
c001b94d:	d4 40                	aam    0x40
c001b94f:	d5 39                	aad    0x39
c001b951:	83 e8 30             	sub    eax,0x30
c001b954:	0f b6 c0             	movzx  eax,al
c001b957:	09 c2                	or     edx,eax
c001b959:	8a 44 33 0e          	mov    al,BYTE PTR [ebx+esi*1+0xe]
c001b95d:	c1 e2 04             	shl    edx,0x4
c001b960:	d4 40                	aam    0x40
c001b962:	d5 39                	aad    0x39
c001b964:	83 e8 30             	sub    eax,0x30
c001b967:	0f b6 c0             	movzx  eax,al
c001b96a:	09 c2                	or     edx,eax
c001b96c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b970:	83 c6 10             	add    esi,0x10
c001b973:	8d 7c 24 40          	lea    edi,[esp+0x40]
c001b977:	0f be 14 33          	movsx  edx,BYTE PTR [ebx+esi*1]
c001b97b:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b97f:	83 fa 0a             	cmp    edx,0xa
c001b982:	74 0b                	je     c001b98f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x221>
c001b984:	47                   	inc    edi
c001b985:	39 74 24 04          	cmp    DWORD PTR [esp+0x4],esi
c001b989:	75 19                	jne    c001b9a4 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x236>
c001b98b:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c001b98f:	31 c0                	xor    eax,eax
c001b991:	83 7c 24 10 0a       	cmp    DWORD PTR [esp+0x10],0xa
c001b996:	0f 94 c0             	sete   al
c001b999:	01 c6                	add    esi,eax
c001b99b:	80 7c 24 0a 56       	cmp    BYTE PTR [esp+0xa],0x56
c001b9a0:	75 0b                	jne    c001b9ad <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x23f>
c001b9a2:	eb 14                	jmp    c001b9b8 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x24a>
c001b9a4:	46                   	inc    esi
c001b9a5:	88 57 ff             	mov    BYTE PTR [edi-0x1],dl
c001b9a8:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001b9ab:	eb ca                	jmp    c001b977 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x209>
c001b9ad:	66 3b 4c 24 14       	cmp    cx,WORD PTR [esp+0x14]
c001b9b2:	0f 85 dd fe ff ff    	jne    c001b895 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001b9b8:	80 7c 24 0b 58       	cmp    BYTE PTR [esp+0xb],0x58
c001b9bd:	74 10                	je     c001b9cf <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x261>
c001b9bf:	66 8b 7c 24 16       	mov    di,WORD PTR [esp+0x16]
c001b9c4:	66 39 7c 24 0c       	cmp    WORD PTR [esp+0xc],di
c001b9c9:	0f 85 c6 fe ff ff    	jne    c001b895 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001b9cf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b9d3:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001b9d7:	83 e8 30             	sub    eax,0x30
c001b9da:	83 ef 30             	sub    edi,0x30
c001b9dd:	c1 e0 04             	shl    eax,0x4
c001b9e0:	09 f8                	or     eax,edi
c001b9e2:	0f b6 c0             	movzx  eax,al
c001b9e5:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c001b9e9:	0f 85 a6 fe ff ff    	jne    c001b895 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001b9ef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b9f3:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001b9f7:	83 e8 30             	sub    eax,0x30
c001b9fa:	83 ef 30             	sub    edi,0x30
c001b9fd:	c1 e0 04             	shl    eax,0x4
c001ba00:	09 f8                	or     eax,edi
c001ba02:	0f b6 c0             	movzx  eax,al
c001ba05:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c001ba09:	0f 85 86 fe ff ff    	jne    c001b895 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001ba0f:	50                   	push   eax
c001ba10:	50                   	push   eax
c001ba11:	8d 44 24 48          	lea    eax,[esp+0x48]
c001ba15:	50                   	push   eax
c001ba16:	55                   	push   ebp
c001ba17:	e8 24 4c fe ff       	call   c0000640 <strcpy>
c001ba1c:	83 c4 10             	add    esp,0x10
c001ba1f:	eb 06                	jmp    c001ba27 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b9>
c001ba21:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c001ba25:	31 ed                	xor    ebp,ebp
c001ba27:	81 c4 4c 01 00 00    	add    esp,0x14c
c001ba2d:	89 e8                	mov    eax,ebp
c001ba2f:	5b                   	pop    ebx
c001ba30:	5e                   	pop    esi
c001ba31:	5f                   	pop    edi
c001ba32:	5d                   	pop    ebp
c001ba33:	c3                   	ret    

c001ba34 <PCI::checkBus(unsigned char)>:
c001ba34:	56                   	push   esi
c001ba35:	53                   	push   ebx
c001ba36:	31 db                	xor    ebx,ebx
c001ba38:	51                   	push   ecx
c001ba39:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001ba3e:	52                   	push   edx
c001ba3f:	53                   	push   ebx
c001ba40:	43                   	inc    ebx
c001ba41:	56                   	push   esi
c001ba42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ba46:	e8 03 03 00 00       	call   c001bd4e <PCI::checkDevice(unsigned char, unsigned char)>
c001ba4b:	83 c4 10             	add    esp,0x10
c001ba4e:	83 fb 20             	cmp    ebx,0x20
c001ba51:	75 eb                	jne    c001ba3e <PCI::checkBus(unsigned char)+0xa>
c001ba53:	58                   	pop    eax
c001ba54:	5b                   	pop    ebx
c001ba55:	5e                   	pop    esi
c001ba56:	c3                   	ret    
c001ba57:	90                   	nop

c001ba58 <PCI::foundDevice(PCIDeviceInfo)>:
c001ba58:	55                   	push   ebp
c001ba59:	57                   	push   edi
c001ba5a:	56                   	push   esi
c001ba5b:	53                   	push   ebx
c001ba5c:	83 ec 1c             	sub    esp,0x1c
c001ba5f:	0f b7 44 24 36       	movzx  eax,WORD PTR [esp+0x36]
c001ba64:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001ba68:	3d ff ff 00 00       	cmp    eax,0xffff
c001ba6d:	0f 84 57 01 00 00    	je     c001bbca <PCI::foundDevice(PCIDeviceInfo)+0x172>
c001ba73:	0f b7 44 24 34       	movzx  eax,WORD PTR [esp+0x34]
c001ba78:	66 3d 06 04          	cmp    ax,0x406
c001ba7c:	75 2c                	jne    c001baaa <PCI::foundDevice(PCIDeviceInfo)+0x52>
c001ba7e:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001ba83:	50                   	push   eax
c001ba84:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001ba89:	50                   	push   eax
c001ba8a:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001ba8f:	50                   	push   eax
c001ba90:	53                   	push   ebx
c001ba91:	e8 64 fb ff ff       	call   c001b5fa <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001ba96:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001ba9a:	0f b6 c0             	movzx  eax,al
c001ba9d:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001baa1:	83 c4 2c             	add    esp,0x2c
c001baa4:	5b                   	pop    ebx
c001baa5:	5e                   	pop    esi
c001baa6:	5f                   	pop    edi
c001baa7:	5d                   	pop    ebp
c001baa8:	eb 8a                	jmp    c001ba34 <PCI::checkBus(unsigned char)>
c001baaa:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001baae:	8b 93 cc 00 00 00    	mov    edx,DWORD PTR [ebx+0xcc]
c001bab4:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001bab8:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001babc:	0f b6 7c 24 54       	movzx  edi,BYTE PTR [esp+0x54]
c001bac1:	85 d2                	test   edx,edx
c001bac3:	74 36                	je     c001bafb <PCI::foundDevice(PCIDeviceInfo)+0xa3>
c001bac5:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001bac8:	85 c9                	test   ecx,ecx
c001baca:	74 2b                	je     c001baf7 <PCI::foundDevice(PCIDeviceInfo)+0x9f>
c001bacc:	8b b1 18 01 00 00    	mov    esi,DWORD PTR [ecx+0x118]
c001bad2:	31 ee                	xor    esi,ebp
c001bad4:	81 e6 ff 00 ff ff    	and    esi,0xffff00ff
c001bada:	75 1b                	jne    c001baf7 <PCI::foundDevice(PCIDeviceInfo)+0x9f>
c001badc:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c001bae0:	39 b1 20 01 00 00    	cmp    DWORD PTR [ecx+0x120],esi
c001bae6:	75 0f                	jne    c001baf7 <PCI::foundDevice(PCIDeviceInfo)+0x9f>
c001bae8:	0f b6 89 38 01 00 00 	movzx  ecx,BYTE PTR [ecx+0x138]
c001baef:	39 f9                	cmp    ecx,edi
c001baf1:	0f 84 d3 00 00 00    	je     c001bbca <PCI::foundDevice(PCIDeviceInfo)+0x172>
c001baf7:	8b 12                	mov    edx,DWORD PTR [edx]
c001baf9:	eb c6                	jmp    c001bac1 <PCI::foundDevice(PCIDeviceInfo)+0x69>
c001bafb:	3d 01 06 00 00       	cmp    eax,0x601
c001bb00:	75 19                	jne    c001bb1b <PCI::foundDevice(PCIDeviceInfo)+0xc3>
c001bb02:	83 ec 0c             	sub    esp,0xc
c001bb05:	68 64 01 00 00       	push   0x164
c001bb0a:	e8 d7 bf fe ff       	call   c0007ae6 <malloc>
c001bb0f:	89 c5                	mov    ebp,eax
c001bb11:	89 04 24             	mov    DWORD PTR [esp],eax
c001bb14:	e8 a1 0e 00 00       	call   c001c9ba <SATABus::SATABus()>
c001bb19:	eb 1e                	jmp    c001bb39 <PCI::foundDevice(PCIDeviceInfo)+0xe1>
c001bb1b:	3d 01 01 00 00       	cmp    eax,0x101
c001bb20:	75 62                	jne    c001bb84 <PCI::foundDevice(PCIDeviceInfo)+0x12c>
c001bb22:	83 ec 0c             	sub    esp,0xc
c001bb25:	68 70 02 00 00       	push   0x270
c001bb2a:	e8 b7 bf fe ff       	call   c0007ae6 <malloc>
c001bb2f:	89 c5                	mov    ebp,eax
c001bb31:	89 04 24             	mov    DWORD PTR [esp],eax
c001bb34:	e8 e5 02 00 00       	call   c001be1e <IDE::IDE()>
c001bb39:	5f                   	pop    edi
c001bb3a:	58                   	pop    eax
c001bb3b:	55                   	push   ebp
c001bb3c:	53                   	push   ebx
c001bb3d:	e8 b4 0e ff ff       	call   c000c9f6 <Device::addChild(Device*)>
c001bb42:	83 ec 1c             	sub    esp,0x1c
c001bb45:	b9 09 00 00 00       	mov    ecx,0x9
c001bb4a:	fc                   	cld    
c001bb4b:	89 e7                	mov    edi,esp
c001bb4d:	8d 74 24 60          	lea    esi,[esp+0x60]
c001bb51:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001bb53:	55                   	push   ebp
c001bb54:	e8 e3 0d ff ff       	call   c000c93c <Device::preOpenPCI(PCIDeviceInfo)>
c001bb59:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001bb5c:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c001bb60:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c001bb68:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c001bb70:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c001bb78:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001bb7b:	83 c4 4c             	add    esp,0x4c
c001bb7e:	5b                   	pop    ebx
c001bb7f:	5e                   	pop    esi
c001bb80:	5f                   	pop    edi
c001bb81:	5d                   	pop    ebp
c001bb82:	ff e0                	jmp    eax
c001bb84:	83 ec 0c             	sub    esp,0xc
c001bb87:	68 58 01 00 00       	push   0x158
c001bb8c:	e8 55 bf fe ff       	call   c0007ae6 <malloc>
c001bb91:	89 c5                	mov    ebp,eax
c001bb93:	58                   	pop    eax
c001bb94:	5a                   	pop    edx
c001bb95:	68 5e 33 02 c0       	push   0xc002335e
c001bb9a:	55                   	push   ebp
c001bb9b:	e8 f4 10 ff ff       	call   c000cc94 <DriverlessDevice::DriverlessDevice(char const*)>
c001bba0:	59                   	pop    ecx
c001bba1:	5e                   	pop    esi
c001bba2:	55                   	push   ebp
c001bba3:	53                   	push   ebx
c001bba4:	e8 4d 0e ff ff       	call   c000c9f6 <Device::addChild(Device*)>
c001bba9:	83 c4 10             	add    esp,0x10
c001bbac:	b9 09 00 00 00       	mov    ecx,0x9
c001bbb1:	fc                   	cld    
c001bbb2:	8d 7c 24 34          	lea    edi,[esp+0x34]
c001bbb6:	89 fe                	mov    esi,edi
c001bbb8:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001bbba:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c001bbbe:	83 c4 1c             	add    esp,0x1c
c001bbc1:	5b                   	pop    ebx
c001bbc2:	5e                   	pop    esi
c001bbc3:	5f                   	pop    edi
c001bbc4:	5d                   	pop    ebp
c001bbc5:	e9 72 0d ff ff       	jmp    c000c93c <Device::preOpenPCI(PCIDeviceInfo)>
c001bbca:	83 c4 1c             	add    esp,0x1c
c001bbcd:	5b                   	pop    ebx
c001bbce:	5e                   	pop    esi
c001bbcf:	5f                   	pop    edi
c001bbd0:	5d                   	pop    ebp
c001bbd1:	c3                   	ret    

c001bbd2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001bbd2:	55                   	push   ebp
c001bbd3:	57                   	push   edi
c001bbd4:	56                   	push   esi
c001bbd5:	53                   	push   ebx
c001bbd6:	83 ec 68             	sub    esp,0x68
c001bbd9:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c001bbdd:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001bbe4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001bbe8:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001bbef:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c001bbf4:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001bbf8:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001bbff:	0f b6 5c 24 24       	movzx  ebx,BYTE PTR [esp+0x24]
c001bc04:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001bc08:	0f b6 7c 24 28       	movzx  edi,BYTE PTR [esp+0x28]
c001bc0d:	6a 0c                	push   0xc
c001bc0f:	57                   	push   edi
c001bc10:	53                   	push   ebx
c001bc11:	56                   	push   esi
c001bc12:	55                   	push   ebp
c001bc13:	e8 32 f8 ff ff       	call   c001b44a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bc18:	83 c4 20             	add    esp,0x20
c001bc1b:	57                   	push   edi
c001bc1c:	53                   	push   ebx
c001bc1d:	56                   	push   esi
c001bc1e:	55                   	push   ebp
c001bc1f:	e8 1c f9 ff ff       	call   c001b540 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001bc24:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c001bc29:	57                   	push   edi
c001bc2a:	53                   	push   ebx
c001bc2b:	56                   	push   esi
c001bc2c:	55                   	push   ebp
c001bc2d:	e8 a4 f9 ff ff       	call   c001b5d6 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001bc32:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001bc36:	83 c4 14             	add    esp,0x14
c001bc39:	6a 3c                	push   0x3c
c001bc3b:	57                   	push   edi
c001bc3c:	53                   	push   ebx
c001bc3d:	56                   	push   esi
c001bc3e:	55                   	push   ebp
c001bc3f:	e8 06 f8 ff ff       	call   c001b44a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bc44:	0f b6 c4             	movzx  eax,ah
c001bc47:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001bc4b:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001bc4f:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001bc53:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001bc58:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c001bc5e:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c001bc64:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001bc68:	83 c4 20             	add    esp,0x20
c001bc6b:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c001bc70:	74 30                	je     c001bca2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001bc72:	31 c0                	xor    eax,eax
c001bc74:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001bc78:	7e 28                	jle    c001bca2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001bc7a:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c001bc82:	39 cb                	cmp    ebx,ecx
c001bc84:	75 19                	jne    c001bc9f <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001bc86:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c001bc8e:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001bc92:	75 0b                	jne    c001bc9f <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001bc94:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c001bc9b:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001bc9f:	40                   	inc    eax
c001bca0:	eb d2                	jmp    c001bc74 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c001bca2:	31 d2                	xor    edx,edx
c001bca4:	83 ec 0c             	sub    esp,0xc
c001bca7:	57                   	push   edi
c001bca8:	53                   	push   ebx
c001bca9:	56                   	push   esi
c001bcaa:	52                   	push   edx
c001bcab:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001bcaf:	55                   	push   ebp
c001bcb0:	e8 6d f9 ff ff       	call   c001b622 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bcb5:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001bcb9:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001bcbd:	42                   	inc    edx
c001bcbe:	83 c4 20             	add    esp,0x20
c001bcc1:	83 fa 06             	cmp    edx,0x6
c001bcc4:	75 de                	jne    c001bca4 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c001bcc6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001bcca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bcce:	c1 e2 08             	shl    edx,0x8
c001bcd1:	83 ec 0c             	sub    esp,0xc
c001bcd4:	0f b6 c4             	movzx  eax,ah
c001bcd7:	09 d0                	or     eax,edx
c001bcd9:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c001bcde:	6a 02                	push   0x2
c001bce0:	57                   	push   edi
c001bce1:	53                   	push   ebx
c001bce2:	56                   	push   esi
c001bce3:	55                   	push   ebp
c001bce4:	e8 61 f7 ff ff       	call   c001b44a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bce9:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c001bcee:	83 c4 20             	add    esp,0x20
c001bcf1:	57                   	push   edi
c001bcf2:	53                   	push   ebx
c001bcf3:	56                   	push   esi
c001bcf4:	55                   	push   ebp
c001bcf5:	e8 90 f8 ff ff       	call   c001b58a <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001bcfa:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001bcfe:	57                   	push   edi
c001bcff:	53                   	push   ebx
c001bd00:	56                   	push   esi
c001bd01:	55                   	push   ebp
c001bd02:	e8 ed f7 ff ff       	call   c001b4f4 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001bd07:	b9 09 00 00 00       	mov    ecx,0x9
c001bd0c:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c001bd11:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001bd15:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001bd19:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001bd1d:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c001bd21:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001bd25:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c001bd29:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c001bd2d:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c001bd31:	83 ec 0c             	sub    esp,0xc
c001bd34:	fc                   	cld    
c001bd35:	89 e7                	mov    edi,esp
c001bd37:	8d 74 24 58          	lea    esi,[esp+0x58]
c001bd3b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001bd3d:	55                   	push   ebp
c001bd3e:	e8 15 fd ff ff       	call   c001ba58 <PCI::foundDevice(PCIDeviceInfo)>
c001bd43:	81 c4 8c 00 00 00    	add    esp,0x8c
c001bd49:	5b                   	pop    ebx
c001bd4a:	5e                   	pop    esi
c001bd4b:	5f                   	pop    edi
c001bd4c:	5d                   	pop    ebp
c001bd4d:	c3                   	ret    

c001bd4e <PCI::checkDevice(unsigned char, unsigned char)>:
c001bd4e:	55                   	push   ebp
c001bd4f:	57                   	push   edi
c001bd50:	56                   	push   esi
c001bd51:	53                   	push   ebx
c001bd52:	83 ec 0c             	sub    esp,0xc
c001bd55:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001bd59:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001bd5e:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001bd63:	6a 00                	push   0x0
c001bd65:	56                   	push   esi
c001bd66:	57                   	push   edi
c001bd67:	55                   	push   ebp
c001bd68:	e8 87 f7 ff ff       	call   c001b4f4 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001bd6d:	6a 00                	push   0x0
c001bd6f:	56                   	push   esi
c001bd70:	57                   	push   edi
c001bd71:	55                   	push   ebp
c001bd72:	e8 5b fe ff ff       	call   c001bbd2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001bd77:	83 c4 20             	add    esp,0x20
c001bd7a:	6a 00                	push   0x0
c001bd7c:	56                   	push   esi
c001bd7d:	57                   	push   edi
c001bd7e:	55                   	push   ebp
c001bd7f:	e8 94 f7 ff ff       	call   c001b518 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001bd84:	83 c4 10             	add    esp,0x10
c001bd87:	a8 80                	test   al,0x80
c001bd89:	74 2d                	je     c001bdb8 <PCI::checkDevice(unsigned char, unsigned char)+0x6a>
c001bd8b:	bb 01 00 00 00       	mov    ebx,0x1
c001bd90:	53                   	push   ebx
c001bd91:	56                   	push   esi
c001bd92:	57                   	push   edi
c001bd93:	55                   	push   ebp
c001bd94:	e8 5b f7 ff ff       	call   c001b4f4 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001bd99:	83 c4 10             	add    esp,0x10
c001bd9c:	0f b7 c0             	movzx  eax,ax
c001bd9f:	3d ff ff 00 00       	cmp    eax,0xffff
c001bda4:	74 0c                	je     c001bdb2 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001bda6:	53                   	push   ebx
c001bda7:	56                   	push   esi
c001bda8:	57                   	push   edi
c001bda9:	55                   	push   ebp
c001bdaa:	e8 23 fe ff ff       	call   c001bbd2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001bdaf:	83 c4 10             	add    esp,0x10
c001bdb2:	43                   	inc    ebx
c001bdb3:	83 fb 08             	cmp    ebx,0x8
c001bdb6:	75 d8                	jne    c001bd90 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001bdb8:	83 c4 0c             	add    esp,0xc
c001bdbb:	5b                   	pop    ebx
c001bdbc:	5e                   	pop    esi
c001bdbd:	5f                   	pop    edi
c001bdbe:	5d                   	pop    ebp
c001bdbf:	c3                   	ret    

c001bdc0 <PCI::detect()>:
c001bdc0:	56                   	push   esi
c001bdc1:	53                   	push   ebx
c001bdc2:	53                   	push   ebx
c001bdc3:	31 db                	xor    ebx,ebx
c001bdc5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bdc9:	6a 00                	push   0x0
c001bdcb:	6a 00                	push   0x0
c001bdcd:	6a 00                	push   0x0
c001bdcf:	56                   	push   esi
c001bdd0:	e8 43 f7 ff ff       	call   c001b518 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001bdd5:	83 c4 10             	add    esp,0x10
c001bdd8:	a8 80                	test   al,0x80
c001bdda:	75 21                	jne    c001bdfd <PCI::detect()+0x3d>
c001bddc:	51                   	push   ecx
c001bddd:	51                   	push   ecx
c001bdde:	6a 00                	push   0x0
c001bde0:	56                   	push   esi
c001bde1:	e8 4e fc ff ff       	call   c001ba34 <PCI::checkBus(unsigned char)>
c001bde6:	83 c4 10             	add    esp,0x10
c001bde9:	eb 2a                	jmp    c001be15 <PCI::detect()+0x55>
c001bdeb:	52                   	push   edx
c001bdec:	52                   	push   edx
c001bded:	53                   	push   ebx
c001bdee:	43                   	inc    ebx
c001bdef:	56                   	push   esi
c001bdf0:	e8 3f fc ff ff       	call   c001ba34 <PCI::checkBus(unsigned char)>
c001bdf5:	83 c4 10             	add    esp,0x10
c001bdf8:	83 fb 08             	cmp    ebx,0x8
c001bdfb:	74 18                	je     c001be15 <PCI::detect()+0x55>
c001bdfd:	53                   	push   ebx
c001bdfe:	6a 00                	push   0x0
c001be00:	6a 00                	push   0x0
c001be02:	56                   	push   esi
c001be03:	e8 ec f6 ff ff       	call   c001b4f4 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001be08:	83 c4 10             	add    esp,0x10
c001be0b:	0f b7 c0             	movzx  eax,ax
c001be0e:	3d ff ff 00 00       	cmp    eax,0xffff
c001be13:	74 d6                	je     c001bdeb <PCI::detect()+0x2b>
c001be15:	58                   	pop    eax
c001be16:	5b                   	pop    ebx
c001be17:	5e                   	pop    esi
c001be18:	c3                   	ret    
c001be19:	90                   	nop

c001be1a <IDE::close(int, int, void*)>:
c001be1a:	83 c8 ff             	or     eax,0xffffffff
c001be1d:	c3                   	ret    

c001be1e <IDE::IDE()>:
c001be1e:	83 ec 0c             	sub    esp,0xc
c001be21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001be25:	83 ec 08             	sub    esp,0x8
c001be28:	68 a4 33 02 c0       	push   0xc00233a4
c001be2d:	50                   	push   eax
c001be2e:	e8 05 0f ff ff       	call   c000cd38 <HardDiskController::HardDiskController(char const*)>
c001be33:	83 c4 10             	add    esp,0x10
c001be36:	ba 34 34 02 c0       	mov    edx,0xc0023434
c001be3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001be3f:	89 10                	mov    DWORD PTR [eax],edx
c001be41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001be45:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001be4c:	90                   	nop
c001be4d:	83 c4 0c             	add    esp,0xc
c001be50:	c3                   	ret    
c001be51:	90                   	nop

c001be52 <IDE::prepareInterrupt(unsigned char)>:
c001be52:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001be57:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001be5b:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001be63:	c3                   	ret    

c001be64 <selectDrive(unsigned char, unsigned char)>:
c001be64:	c3                   	ret    
c001be65:	90                   	nop

c001be66 <IDE::getBase(unsigned char)>:
c001be66:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001be6b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001be6f:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001be77:	c3                   	ret    

c001be78 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001be78:	55                   	push   ebp
c001be79:	57                   	push   edi
c001be7a:	56                   	push   esi
c001be7b:	53                   	push   ebx
c001be7c:	83 ec 1c             	sub    esp,0x1c
c001be7f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001be83:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001be87:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001be8a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001be8e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001be92:	80 f9 03             	cmp    cl,0x3
c001be95:	77 4f                	ja     c001bee6 <IDE::write(unsigned char, unsigned char, unsigned char)+0x6e>
c001be97:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001be9b:	0f b6 fa             	movzx  edi,dl
c001be9e:	0f b6 db             	movzx  ebx,bl
c001bea1:	8d 6f 2a             	lea    ebp,[edi+0x2a]
c001bea4:	0f b6 54 ee 10       	movzx  edx,BYTE PTR [esi+ebp*8+0x10]
c001bea9:	80 ca 80             	or     dl,0x80
c001beac:	52                   	push   edx
c001bead:	6a 0c                	push   0xc
c001beaf:	57                   	push   edi
c001beb0:	56                   	push   esi
c001beb1:	e8 c2 ff ff ff       	call   c001be78 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001beb6:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001bebb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001bebf:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001bec3:	ee                   	out    dx,al
c001bec4:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001bec9:	89 7c 24 44          	mov    DWORD PTR [esp+0x44],edi
c001becd:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001bed1:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001bed5:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001bedd:	83 c4 2c             	add    esp,0x2c
c001bee0:	5b                   	pop    ebx
c001bee1:	5e                   	pop    esi
c001bee2:	5f                   	pop    edi
c001bee3:	5d                   	pop    ebp
c001bee4:	eb 92                	jmp    c001be78 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bee6:	0f b6 cb             	movzx  ecx,bl
c001bee9:	83 f9 07             	cmp    ecx,0x7
c001beec:	77 12                	ja     c001bf00 <IDE::write(unsigned char, unsigned char, unsigned char)+0x88>
c001beee:	0f b6 d2             	movzx  edx,dl
c001bef1:	0f b6 db             	movzx  ebx,bl
c001bef4:	66 8b 94 d6 5a 01 00 00 	mov    dx,WORD PTR [esi+edx*8+0x15a]
c001befc:	01 da                	add    edx,ebx
c001befe:	eb 2f                	jmp    c001bf2f <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001bf00:	83 f9 0d             	cmp    ecx,0xd
c001bf03:	77 13                	ja     c001bf18 <IDE::write(unsigned char, unsigned char, unsigned char)+0xa0>
c001bf05:	0f b6 d2             	movzx  edx,dl
c001bf08:	0f b6 db             	movzx  ebx,bl
c001bf0b:	8b 94 d6 5c 01 00 00 	mov    edx,DWORD PTR [esi+edx*8+0x15c]
c001bf12:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001bf16:	eb 17                	jmp    c001bf2f <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001bf18:	83 f9 15             	cmp    ecx,0x15
c001bf1b:	77 13                	ja     c001bf30 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb8>
c001bf1d:	0f b6 d2             	movzx  edx,dl
c001bf20:	0f b6 db             	movzx  ebx,bl
c001bf23:	66 8b 94 d6 5e 01 00 00 	mov    dx,WORD PTR [esi+edx*8+0x15e]
c001bf2b:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001bf2f:	ee                   	out    dx,al
c001bf30:	83 c4 1c             	add    esp,0x1c
c001bf33:	5b                   	pop    ebx
c001bf34:	5e                   	pop    esi
c001bf35:	5f                   	pop    edi
c001bf36:	5d                   	pop    ebp
c001bf37:	c3                   	ret    

c001bf38 <IDE::read(unsigned char, unsigned char)>:
c001bf38:	55                   	push   ebp
c001bf39:	57                   	push   edi
c001bf3a:	56                   	push   esi
c001bf3b:	53                   	push   ebx
c001bf3c:	83 ec 1c             	sub    esp,0x1c
c001bf3f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001bf43:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001bf47:	8d 43 f8             	lea    eax,[ebx-0x8]
c001bf4a:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001bf4e:	3c 03                	cmp    al,0x3
c001bf50:	77 40                	ja     c001bf92 <IDE::read(unsigned char, unsigned char)+0x5a>
c001bf52:	0f b6 f9             	movzx  edi,cl
c001bf55:	8d 6f 2a             	lea    ebp,[edi+0x2a]
c001bf58:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001bf5d:	0c 80                	or     al,0x80
c001bf5f:	50                   	push   eax
c001bf60:	6a 0c                	push   0xc
c001bf62:	57                   	push   edi
c001bf63:	56                   	push   esi
c001bf64:	e8 0f ff ff ff       	call   c001be78 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bf69:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001bf6e:	0f b6 d3             	movzx  edx,bl
c001bf71:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001bf75:	ec                   	in     al,dx
c001bf76:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001bf7a:	0f b6 54 ee 10       	movzx  edx,BYTE PTR [esi+ebp*8+0x10]
c001bf7f:	52                   	push   edx
c001bf80:	6a 0c                	push   0xc
c001bf82:	57                   	push   edi
c001bf83:	56                   	push   esi
c001bf84:	e8 ef fe ff ff       	call   c001be78 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bf89:	83 c4 20             	add    esp,0x20
c001bf8c:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001bf90:	eb 4c                	jmp    c001bfde <IDE::read(unsigned char, unsigned char)+0xa6>
c001bf92:	0f b6 d3             	movzx  edx,bl
c001bf95:	83 fa 07             	cmp    edx,0x7
c001bf98:	77 12                	ja     c001bfac <IDE::read(unsigned char, unsigned char)+0x74>
c001bf9a:	0f b6 c9             	movzx  ecx,cl
c001bf9d:	0f b6 d3             	movzx  edx,bl
c001bfa0:	66 8b 84 ce 5a 01 00 00 	mov    ax,WORD PTR [esi+ecx*8+0x15a]
c001bfa8:	01 c2                	add    edx,eax
c001bfaa:	eb 31                	jmp    c001bfdd <IDE::read(unsigned char, unsigned char)+0xa5>
c001bfac:	83 fa 0d             	cmp    edx,0xd
c001bfaf:	77 13                	ja     c001bfc4 <IDE::read(unsigned char, unsigned char)+0x8c>
c001bfb1:	0f b6 c9             	movzx  ecx,cl
c001bfb4:	0f b6 d3             	movzx  edx,bl
c001bfb7:	8b 84 ce 5c 01 00 00 	mov    eax,DWORD PTR [esi+ecx*8+0x15c]
c001bfbe:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001bfc2:	eb 19                	jmp    c001bfdd <IDE::read(unsigned char, unsigned char)+0xa5>
c001bfc4:	31 c0                	xor    eax,eax
c001bfc6:	83 fa 15             	cmp    edx,0x15
c001bfc9:	77 13                	ja     c001bfde <IDE::read(unsigned char, unsigned char)+0xa6>
c001bfcb:	0f b6 c9             	movzx  ecx,cl
c001bfce:	0f b6 d3             	movzx  edx,bl
c001bfd1:	66 8b 84 ce 5e 01 00 00 	mov    ax,WORD PTR [esi+ecx*8+0x15e]
c001bfd9:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001bfdd:	ec                   	in     al,dx
c001bfde:	83 c4 1c             	add    esp,0x1c
c001bfe1:	5b                   	pop    ebx
c001bfe2:	5e                   	pop    esi
c001bfe3:	5f                   	pop    edi
c001bfe4:	5d                   	pop    ebp
c001bfe5:	c3                   	ret    

c001bfe6 <IDE::waitInterrupt(unsigned char)>:
c001bfe6:	55                   	push   ebp
c001bfe7:	57                   	push   edi
c001bfe8:	56                   	push   esi
c001bfe9:	53                   	push   ebx
c001bfea:	31 db                	xor    ebx,ebx
c001bfec:	83 ec 0c             	sub    esp,0xc
c001bfef:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001bff3:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001bff8:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001c000:	89 e8                	mov    eax,ebp
c001c002:	84 c0                	test   al,al
c001c004:	75 30                	jne    c001c036 <IDE::waitInterrupt(unsigned char)+0x50>
c001c006:	50                   	push   eax
c001c007:	6a 0c                	push   0xc
c001c009:	56                   	push   esi
c001c00a:	57                   	push   edi
c001c00b:	e8 28 ff ff ff       	call   c001bf38 <IDE::read(unsigned char, unsigned char)>
c001c010:	83 c4 10             	add    esp,0x10
c001c013:	a8 01                	test   al,0x1
c001c015:	75 27                	jne    c001c03e <IDE::waitInterrupt(unsigned char)+0x58>
c001c017:	f6 c3 04             	test   bl,0x4
c001c01a:	75 12                	jne    c001c02e <IDE::waitInterrupt(unsigned char)+0x48>
c001c01c:	83 fb 32             	cmp    ebx,0x32
c001c01f:	7e 0d                	jle    c001c02e <IDE::waitInterrupt(unsigned char)+0x48>
c001c021:	83 ec 0c             	sub    esp,0xc
c001c024:	6a 64                	push   0x64
c001c026:	e8 b1 a4 ff ff       	call   c00164dc <milliTenthSleep(unsigned int)>
c001c02b:	83 c4 10             	add    esp,0x10
c001c02e:	83 fb 3c             	cmp    ebx,0x3c
c001c031:	74 0b                	je     c001c03e <IDE::waitInterrupt(unsigned char)+0x58>
c001c033:	43                   	inc    ebx
c001c034:	eb c2                	jmp    c001bff8 <IDE::waitInterrupt(unsigned char)+0x12>
c001c036:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001c03e:	83 c4 0c             	add    esp,0xc
c001c041:	89 e8                	mov    eax,ebp
c001c043:	5b                   	pop    ebx
c001c044:	5e                   	pop    esi
c001c045:	5f                   	pop    edi
c001c046:	5d                   	pop    ebp
c001c047:	c3                   	ret    

c001c048 <ideChannel0IRQHandler(regs*, void*)>:
c001c048:	83 ec 10             	sub    esp,0x10
c001c04b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c04f:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001c056:	6a 07                	push   0x7
c001c058:	6a 00                	push   0x0
c001c05a:	50                   	push   eax
c001c05b:	e8 d8 fe ff ff       	call   c001bf38 <IDE::read(unsigned char, unsigned char)>
c001c060:	83 c4 1c             	add    esp,0x1c
c001c063:	c3                   	ret    

c001c064 <ideChannel1IRQHandler(regs*, void*)>:
c001c064:	83 ec 10             	sub    esp,0x10
c001c067:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c06b:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001c072:	6a 07                	push   0x7
c001c074:	6a 01                	push   0x1
c001c076:	50                   	push   eax
c001c077:	e8 bc fe ff ff       	call   c001bf38 <IDE::read(unsigned char, unsigned char)>
c001c07c:	83 c4 1c             	add    esp,0x1c
c001c07f:	c3                   	ret    

c001c080 <IDE::enableIRQs(unsigned char, bool)>:
c001c080:	57                   	push   edi
c001c081:	b8 02 00 00 00       	mov    eax,0x2
c001c086:	56                   	push   esi
c001c087:	53                   	push   ebx
c001c088:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c08c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001c090:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001c095:	74 02                	je     c001c099 <IDE::enableIRQs(unsigned char, bool)+0x19>
c001c097:	31 c0                	xor    eax,eax
c001c099:	0f b6 db             	movzx  ebx,bl
c001c09c:	bf 04 00 00 00       	mov    edi,0x4
c001c0a1:	88 84 de 60 01 00 00 	mov    BYTE PTR [esi+ebx*8+0x160],al
c001c0a8:	50                   	push   eax
c001c0a9:	6a 0c                	push   0xc
c001c0ab:	53                   	push   ebx
c001c0ac:	56                   	push   esi
c001c0ad:	e8 c6 fd ff ff       	call   c001be78 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c0b2:	83 c4 10             	add    esp,0x10
c001c0b5:	50                   	push   eax
c001c0b6:	6a 0c                	push   0xc
c001c0b8:	53                   	push   ebx
c001c0b9:	56                   	push   esi
c001c0ba:	e8 79 fe ff ff       	call   c001bf38 <IDE::read(unsigned char, unsigned char)>
c001c0bf:	83 c4 10             	add    esp,0x10
c001c0c2:	4f                   	dec    edi
c001c0c3:	75 f0                	jne    c001c0b5 <IDE::enableIRQs(unsigned char, bool)+0x35>
c001c0c5:	5b                   	pop    ebx
c001c0c6:	5e                   	pop    esi
c001c0c7:	5f                   	pop    edi
c001c0c8:	c3                   	ret    
c001c0c9:	90                   	nop

c001c0ca <IDE::open(int, int, void*)>:
c001c0ca:	55                   	push   ebp
c001c0cb:	57                   	push   edi
c001c0cc:	56                   	push   esi
c001c0cd:	53                   	push   ebx
c001c0ce:	83 ec 1c             	sub    esp,0x1c
c001c0d1:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001c0d5:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001c0de:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001c0e7:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001c0ee:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001c0f5:	0f 85 de 02 00 00    	jne    c001c3d9 <IDE::open(int, int, void*)+0x30f>
c001c0fb:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001c101:	88 04 24             	mov    BYTE PTR [esp],al
c001c104:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001c107:	83 e0 7f             	and    eax,0x7f
c001c10a:	83 f8 05             	cmp    eax,0x5
c001c10d:	74 05                	je     c001c114 <IDE::open(int, int, void*)+0x4a>
c001c10f:	83 f8 0f             	cmp    eax,0xf
c001c112:	75 32                	jne    c001c146 <IDE::open(int, int, void*)+0x7c>
c001c114:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001c11a:	83 e0 fc             	and    eax,0xfffffffc
c001c11d:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001c124:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001c12a:	83 e0 fc             	and    eax,0xfffffffc
c001c12d:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001c134:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001c13a:	83 e0 fc             	and    eax,0xfffffffc
c001c13d:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001c144:	eb 14                	jmp    c001c15a <IDE::open(int, int, void*)+0x90>
c001c146:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001c150:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001c15a:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001c161:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001c168:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c16c:	89 c6                	mov    esi,eax
c001c16e:	bf f8 0c 00 00       	mov    edi,0xcf8
c001c173:	c1 e6 10             	shl    esi,0x10
c001c176:	89 e8                	mov    eax,ebp
c001c178:	89 fa                	mov    edx,edi
c001c17a:	c1 e0 0b             	shl    eax,0xb
c001c17d:	09 f0                	or     eax,esi
c001c17f:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c001c186:	c1 e6 08             	shl    esi,0x8
c001c189:	09 c6                	or     esi,eax
c001c18b:	89 f0                	mov    eax,esi
c001c18d:	0d 08 00 00 80       	or     eax,0x80000008
c001c192:	ef                   	out    dx,eax
c001c193:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c001c198:	89 ca                	mov    edx,ecx
c001c19a:	ed                   	in     eax,dx
c001c19b:	c1 e8 10             	shr    eax,0x10
c001c19e:	3d ff ff 00 00       	cmp    eax,0xffff
c001c1a3:	0f 84 f9 00 00 00    	je     c001c2a2 <IDE::open(int, int, void*)+0x1d8>
c001c1a9:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c001c1af:	89 fa                	mov    edx,edi
c001c1b1:	89 f0                	mov    eax,esi
c001c1b3:	ef                   	out    dx,eax
c001c1b4:	b0 fe                	mov    al,0xfe
c001c1b6:	89 ca                	mov    edx,ecx
c001c1b8:	ee                   	out    dx,al
c001c1b9:	89 f0                	mov    eax,esi
c001c1bb:	89 fa                	mov    edx,edi
c001c1bd:	ef                   	out    dx,eax
c001c1be:	89 ca                	mov    edx,ecx
c001c1c0:	ed                   	in     eax,dx
c001c1c1:	3c fe                	cmp    al,0xfe
c001c1c3:	0f 85 a9 00 00 00    	jne    c001c272 <IDE::open(int, int, void*)+0x1a8>
c001c1c9:	8b 15 b8 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026eb8
c001c1cf:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c001c1d6:	74 33                	je     c001c20b <IDE::open(int, int, void*)+0x141>
c001c1d8:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001c1de:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001c1e2:	40                   	inc    eax
c001c1e3:	83 ec 0c             	sub    esp,0xc
c001c1e6:	0f b6 c0             	movzx  eax,al
c001c1e9:	50                   	push   eax
c001c1ea:	55                   	push   ebp
c001c1eb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c1ef:	ff b2 68 01 00 00    	push   DWORD PTR [edx+0x168]
c001c1f5:	51                   	push   ecx
c001c1f6:	e8 e5 37 ff ff       	call   c000f9e0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001c1fb:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001c200:	83 c4 1c             	add    esp,0x1c
c001c203:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001c209:	eb 0a                	jmp    c001c215 <IDE::open(int, int, void*)+0x14b>
c001c20b:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001c215:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001c21c:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001c223:	c1 e1 10             	shl    ecx,0x10
c001c226:	c1 e0 08             	shl    eax,0x8
c001c229:	bf f8 0c 00 00       	mov    edi,0xcf8
c001c22e:	09 c1                	or     ecx,eax
c001c230:	89 fa                	mov    edx,edi
c001c232:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001c239:	c1 e0 0b             	shl    eax,0xb
c001c23c:	09 c1                	or     ecx,eax
c001c23e:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001c244:	89 c8                	mov    eax,ecx
c001c246:	ef                   	out    dx,eax
c001c247:	be fc 0c 00 00       	mov    esi,0xcfc
c001c24c:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c001c252:	89 f2                	mov    edx,esi
c001c254:	ee                   	out    dx,al
c001c255:	89 c8                	mov    eax,ecx
c001c257:	89 fa                	mov    edx,edi
c001c259:	ef                   	out    dx,eax
c001c25a:	89 f2                	mov    edx,esi
c001c25c:	ed                   	in     eax,dx
c001c25d:	0f b6 c0             	movzx  eax,al
c001c260:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c001c266:	74 4a                	je     c001c2b2 <IDE::open(int, int, void*)+0x1e8>
c001c268:	83 ec 0c             	sub    esp,0xc
c001c26b:	68 bc 33 02 c0       	push   0xc00233bc
c001c270:	eb 38                	jmp    c001c2aa <IDE::open(int, int, void*)+0x1e0>
c001c272:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001c27b:	75 1b                	jne    c001c298 <IDE::open(int, int, void*)+0x1ce>
c001c27d:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c001c281:	3d 80 00 00 00       	cmp    eax,0x80
c001c286:	74 07                	je     c001c28f <IDE::open(int, int, void*)+0x1c5>
c001c288:	3d 8a 00 00 00       	cmp    eax,0x8a
c001c28d:	75 09                	jne    c001c298 <IDE::open(int, int, void*)+0x1ce>
c001c28f:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001c296:	eb 1a                	jmp    c001c2b2 <IDE::open(int, int, void*)+0x1e8>
c001c298:	83 ec 0c             	sub    esp,0xc
c001c29b:	68 c4 33 02 c0       	push   0xc00233c4
c001c2a0:	eb 08                	jmp    c001c2aa <IDE::open(int, int, void*)+0x1e0>
c001c2a2:	83 ec 0c             	sub    esp,0xc
c001c2a5:	68 f5 33 02 c0       	push   0xc00233f5
c001c2aa:	e8 18 54 ff ff       	call   c00116c7 <KePanic(char const*)>
c001c2af:	83 c4 10             	add    esp,0x10
c001c2b2:	f6 83 1f 01 00 00 80 	test   BYTE PTR [ebx+0x11f],0x80
c001c2b9:	74 1a                	je     c001c2d5 <IDE::open(int, int, void*)+0x20b>
c001c2bb:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001c2c1:	83 e0 fc             	and    eax,0xfffffffc
c001c2c4:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001c2cb:	83 c0 08             	add    eax,0x8
c001c2ce:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001c2d5:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001c2db:	89 c2                	mov    edx,eax
c001c2dd:	83 e2 0f             	and    edx,0xf
c001c2e0:	83 fa 08             	cmp    edx,0x8
c001c2e3:	75 0a                	jne    c001c2ef <IDE::open(int, int, void*)+0x225>
c001c2e5:	83 e8 02             	sub    eax,0x2
c001c2e8:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001c2ef:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001c2f5:	89 c2                	mov    edx,eax
c001c2f7:	83 e2 0f             	and    edx,0xf
c001c2fa:	83 fa 08             	cmp    edx,0x8
c001c2fd:	75 0a                	jne    c001c309 <IDE::open(int, int, void*)+0x23f>
c001c2ff:	83 e8 02             	sub    eax,0x2
c001c302:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001c309:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001c310:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001c317:	89 d0                	mov    eax,edx
c001c319:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001c31c:	8d 7a 01             	lea    edi,[edx+0x1]
c001c31f:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001c323:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001c327:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001c32b:	83 e1 3f             	and    ecx,0x3f
c001c32e:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001c332:	89 f9                	mov    ecx,edi
c001c334:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001c33b:	0f b6 c9             	movzx  ecx,cl
c001c33e:	8d 78 02             	lea    edi,[eax+0x2]
c001c341:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001c344:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001c348:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001c34c:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001c350:	83 e2 3f             	and    edx,0x3f
c001c353:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001c357:	89 f9                	mov    ecx,edi
c001c359:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001c35f:	0f b6 d1             	movzx  edx,cl
c001c362:	8d 78 03             	lea    edi,[eax+0x3]
c001c365:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001c368:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001c36c:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001c370:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001c374:	83 e1 3f             	and    ecx,0x3f
c001c377:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001c37b:	89 f9                	mov    ecx,edi
c001c37d:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001c383:	0f b6 c9             	movzx  ecx,cl
c001c386:	8d 78 04             	lea    edi,[eax+0x4]
c001c389:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001c38c:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001c390:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001c394:	89 fa                	mov    edx,edi
c001c396:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001c39c:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001c3a0:	83 e2 3f             	and    edx,0x3f
c001c3a3:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001c3a7:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001c3ae:	66 85 f6             	test   si,si
c001c3b1:	74 65                	je     c001c418 <IDE::open(int, int, void*)+0x34e>
c001c3b3:	89 f9                	mov    ecx,edi
c001c3b5:	83 c0 05             	add    eax,0x5
c001c3b8:	0f b6 d1             	movzx  edx,cl
c001c3bb:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001c3be:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001c3c2:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001c3c6:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001c3cc:	8a 44 93 07          	mov    al,BYTE PTR [ebx+edx*4+0x7]
c001c3d0:	83 e0 3f             	and    eax,0x3f
c001c3d3:	88 44 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],al
c001c3d7:	eb 3f                	jmp    c001c418 <IDE::open(int, int, void*)+0x34e>
c001c3d9:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001c3df:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001c3e6:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001c3ed:	05 06 02 00 00       	add    eax,0x206
c001c3f2:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001c3f9:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001c400:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001c407:	05 06 02 00 00       	add    eax,0x206
c001c40c:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001c413:	e9 bd fe ff ff       	jmp    c001c2d5 <IDE::open(int, int, void*)+0x20b>
c001c418:	50                   	push   eax
c001c419:	50                   	push   eax
c001c41a:	6a 00                	push   0x0
c001c41c:	53                   	push   ebx
c001c41d:	e8 30 fa ff ff       	call   c001be52 <IDE::prepareInterrupt(unsigned char)>
c001c422:	5a                   	pop    edx
c001c423:	59                   	pop    ecx
c001c424:	6a 01                	push   0x1
c001c426:	53                   	push   ebx
c001c427:	e8 26 fa ff ff       	call   c001be52 <IDE::prepareInterrupt(unsigned char)>
c001c42c:	83 c4 0c             	add    esp,0xc
c001c42f:	6a 00                	push   0x0
c001c431:	6a 00                	push   0x0
c001c433:	53                   	push   ebx
c001c434:	e8 47 fc ff ff       	call   c001c080 <IDE::enableIRQs(unsigned char, bool)>
c001c439:	83 c4 0c             	add    esp,0xc
c001c43c:	6a 00                	push   0x0
c001c43e:	6a 01                	push   0x1
c001c440:	53                   	push   ebx
c001c441:	e8 3a fc ff ff       	call   c001c080 <IDE::enableIRQs(unsigned char, bool)>
c001c446:	83 c4 10             	add    esp,0x10
c001c449:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001c450:	74 34                	je     c001c486 <IDE::open(int, int, void*)+0x3bc>
c001c452:	83 ec 0c             	sub    esp,0xc
c001c455:	53                   	push   ebx
c001c456:	6a 01                	push   0x1
c001c458:	68 48 c0 01 c0       	push   0xc001c048
c001c45d:	6a 0e                	push   0xe
c001c45f:	53                   	push   ebx
c001c460:	e8 3d 05 ff ff       	call   c000c9a2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c465:	83 c4 14             	add    esp,0x14
c001c468:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001c46e:	53                   	push   ebx
c001c46f:	6a 01                	push   0x1
c001c471:	68 64 c0 01 c0       	push   0xc001c064
c001c476:	6a 0f                	push   0xf
c001c478:	53                   	push   ebx
c001c479:	e8 24 05 ff ff       	call   c000c9a2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c47e:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001c484:	eb 38                	jmp    c001c4be <IDE::open(int, int, void*)+0x3f4>
c001c486:	83 ec 0c             	sub    esp,0xc
c001c489:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001c493:	53                   	push   ebx
c001c494:	6a 00                	push   0x0
c001c496:	68 48 c0 01 c0       	push   0xc001c048
c001c49b:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001c4a1:	53                   	push   ebx
c001c4a2:	e8 fb 04 ff ff       	call   c000c9a2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c4a7:	83 c4 14             	add    esp,0x14
c001c4aa:	53                   	push   ebx
c001c4ab:	6a 00                	push   0x0
c001c4ad:	68 64 c0 01 c0       	push   0xc001c064
c001c4b2:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001c4b8:	53                   	push   ebx
c001c4b9:	e8 e4 04 ff ff       	call   c000c9a2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c4be:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c4c0:	83 c4 20             	add    esp,0x20
c001c4c3:	83 ec 0c             	sub    esp,0xc
c001c4c6:	53                   	push   ebx
c001c4c7:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001c4ca:	83 c4 0c             	add    esp,0xc
c001c4cd:	6a 07                	push   0x7
c001c4cf:	6a 00                	push   0x0
c001c4d1:	53                   	push   ebx
c001c4d2:	e8 61 fa ff ff       	call   c001bf38 <IDE::read(unsigned char, unsigned char)>
c001c4d7:	83 c4 0c             	add    esp,0xc
c001c4da:	6a 07                	push   0x7
c001c4dc:	6a 01                	push   0x1
c001c4de:	53                   	push   ebx
c001c4df:	e8 54 fa ff ff       	call   c001bf38 <IDE::read(unsigned char, unsigned char)>
c001c4e4:	83 c4 0c             	add    esp,0xc
c001c4e7:	6a 01                	push   0x1
c001c4e9:	6a 00                	push   0x0
c001c4eb:	53                   	push   ebx
c001c4ec:	e8 8f fb ff ff       	call   c001c080 <IDE::enableIRQs(unsigned char, bool)>
c001c4f1:	83 c4 0c             	add    esp,0xc
c001c4f4:	6a 01                	push   0x1
c001c4f6:	6a 01                	push   0x1
c001c4f8:	53                   	push   ebx
c001c4f9:	e8 82 fb ff ff       	call   c001c080 <IDE::enableIRQs(unsigned char, bool)>
c001c4fe:	83 c4 2c             	add    esp,0x2c
c001c501:	31 c0                	xor    eax,eax
c001c503:	5b                   	pop    ebx
c001c504:	5e                   	pop    esi
c001c505:	5f                   	pop    edi
c001c506:	5d                   	pop    ebp
c001c507:	c3                   	ret    

c001c508 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001c508:	55                   	push   ebp
c001c509:	57                   	push   edi
c001c50a:	56                   	push   esi
c001c50b:	53                   	push   ebx
c001c50c:	83 ec 1c             	sub    esp,0x1c
c001c50f:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001c513:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001c517:	8d 42 f8             	lea    eax,[edx-0x8]
c001c51a:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001c51e:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001c522:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001c526:	3c 03                	cmp    al,0x3
c001c528:	77 5a                	ja     c001c584 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x7c>
c001c52a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001c52e:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001c532:	0f b6 db             	movzx  ebx,bl
c001c535:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001c538:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001c53d:	0c 80                	or     al,0x80
c001c53f:	50                   	push   eax
c001c540:	6a 0c                	push   0xc
c001c542:	53                   	push   ebx
c001c543:	56                   	push   esi
c001c544:	e8 2f f9 ff ff       	call   c001be78 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c549:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001c54e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001c552:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001c556:	0f b6 d2             	movzx  edx,dl
c001c559:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001c55d:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001c55f:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001c564:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001c568:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001c56c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001c570:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001c578:	83 c4 2c             	add    esp,0x2c
c001c57b:	5b                   	pop    ebx
c001c57c:	5e                   	pop    esi
c001c57d:	5f                   	pop    edi
c001c57e:	5d                   	pop    ebp
c001c57f:	e9 f4 f8 ff ff       	jmp    c001be78 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c584:	0f b6 c2             	movzx  eax,dl
c001c587:	83 f8 07             	cmp    eax,0x7
c001c58a:	77 12                	ja     c001c59e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x96>
c001c58c:	0f b6 c2             	movzx  eax,dl
c001c58f:	0f b6 db             	movzx  ebx,bl
c001c592:	66 8b 94 de 5a 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15a]
c001c59a:	01 c2                	add    edx,eax
c001c59c:	eb 2f                	jmp    c001c5cd <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001c59e:	83 f8 0d             	cmp    eax,0xd
c001c5a1:	77 13                	ja     c001c5b6 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xae>
c001c5a3:	0f b6 db             	movzx  ebx,bl
c001c5a6:	0f b6 d2             	movzx  edx,dl
c001c5a9:	8b 84 de 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*8+0x15c]
c001c5b0:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001c5b4:	eb 17                	jmp    c001c5cd <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001c5b6:	83 f8 15             	cmp    eax,0x15
c001c5b9:	77 14                	ja     c001c5cf <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc7>
c001c5bb:	0f b6 db             	movzx  ebx,bl
c001c5be:	0f b6 d2             	movzx  edx,dl
c001c5c1:	66 8b 84 de 5e 01 00 00 	mov    ax,WORD PTR [esi+ebx*8+0x15e]
c001c5c9:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001c5cd:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001c5cf:	83 c4 1c             	add    esp,0x1c
c001c5d2:	5b                   	pop    ebx
c001c5d3:	5e                   	pop    esi
c001c5d4:	5f                   	pop    edi
c001c5d5:	5d                   	pop    ebp
c001c5d6:	c3                   	ret    
c001c5d7:	90                   	nop

c001c5d8 <IDE::detect()>:
c001c5d8:	55                   	push   ebp
c001c5d9:	57                   	push   edi
c001c5da:	56                   	push   esi
c001c5db:	53                   	push   ebx
c001c5dc:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001c5e2:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001c5e9:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001c5f0:	0f 85 a4 02 00 00    	jne    c001c89a <IDE::detect()+0x2c2>
c001c5f6:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001c5fd:	31 f6                	xor    esi,esi
c001c5ff:	31 ed                	xor    ebp,ebp
c001c601:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001c609:	89 e8                	mov    eax,ebp
c001c60b:	c1 e0 06             	shl    eax,0x6
c001c60e:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001c616:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001c61a:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001c61e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c622:	c1 e0 04             	shl    eax,0x4
c001c625:	83 c8 a0             	or     eax,0xffffffa0
c001c628:	0f b6 c0             	movzx  eax,al
c001c62b:	50                   	push   eax
c001c62c:	6a 06                	push   0x6
c001c62e:	56                   	push   esi
c001c62f:	53                   	push   ebx
c001c630:	e8 43 f8 ff ff       	call   c001be78 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c635:	83 c4 0c             	add    esp,0xc
c001c638:	6a 0c                	push   0xc
c001c63a:	56                   	push   esi
c001c63b:	53                   	push   ebx
c001c63c:	e8 f7 f8 ff ff       	call   c001bf38 <IDE::read(unsigned char, unsigned char)>
c001c641:	83 c4 0c             	add    esp,0xc
c001c644:	6a 0c                	push   0xc
c001c646:	56                   	push   esi
c001c647:	53                   	push   ebx
c001c648:	e8 eb f8 ff ff       	call   c001bf38 <IDE::read(unsigned char, unsigned char)>
c001c64d:	83 c4 0c             	add    esp,0xc
c001c650:	6a 0c                	push   0xc
c001c652:	56                   	push   esi
c001c653:	53                   	push   ebx
c001c654:	e8 df f8 ff ff       	call   c001bf38 <IDE::read(unsigned char, unsigned char)>
c001c659:	83 c4 0c             	add    esp,0xc
c001c65c:	6a 0c                	push   0xc
c001c65e:	56                   	push   esi
c001c65f:	53                   	push   ebx
c001c660:	e8 d3 f8 ff ff       	call   c001bf38 <IDE::read(unsigned char, unsigned char)>
c001c665:	68 ec 00 00 00       	push   0xec
c001c66a:	6a 07                	push   0x7
c001c66c:	56                   	push   esi
c001c66d:	53                   	push   ebx
c001c66e:	e8 05 f8 ff ff       	call   c001be78 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c673:	83 c4 1c             	add    esp,0x1c
c001c676:	6a 0c                	push   0xc
c001c678:	56                   	push   esi
c001c679:	53                   	push   ebx
c001c67a:	e8 b9 f8 ff ff       	call   c001bf38 <IDE::read(unsigned char, unsigned char)>
c001c67f:	83 c4 0c             	add    esp,0xc
c001c682:	6a 0c                	push   0xc
c001c684:	56                   	push   esi
c001c685:	53                   	push   ebx
c001c686:	e8 ad f8 ff ff       	call   c001bf38 <IDE::read(unsigned char, unsigned char)>
c001c68b:	83 c4 0c             	add    esp,0xc
c001c68e:	6a 0c                	push   0xc
c001c690:	56                   	push   esi
c001c691:	53                   	push   ebx
c001c692:	e8 a1 f8 ff ff       	call   c001bf38 <IDE::read(unsigned char, unsigned char)>
c001c697:	83 c4 0c             	add    esp,0xc
c001c69a:	6a 0c                	push   0xc
c001c69c:	56                   	push   esi
c001c69d:	53                   	push   ebx
c001c69e:	e8 95 f8 ff ff       	call   c001bf38 <IDE::read(unsigned char, unsigned char)>
c001c6a3:	83 c4 0c             	add    esp,0xc
c001c6a6:	6a 0c                	push   0xc
c001c6a8:	56                   	push   esi
c001c6a9:	53                   	push   ebx
c001c6aa:	e8 89 f8 ff ff       	call   c001bf38 <IDE::read(unsigned char, unsigned char)>
c001c6af:	83 c4 10             	add    esp,0x10
c001c6b2:	84 c0                	test   al,al
c001c6b4:	0f 84 60 01 00 00    	je     c001c81a <IDE::detect()+0x242>
c001c6ba:	31 ff                	xor    edi,edi
c001c6bc:	50                   	push   eax
c001c6bd:	6a 0c                	push   0xc
c001c6bf:	56                   	push   esi
c001c6c0:	53                   	push   ebx
c001c6c1:	e8 72 f8 ff ff       	call   c001bf38 <IDE::read(unsigned char, unsigned char)>
c001c6c6:	83 c4 10             	add    esp,0x10
c001c6c9:	a8 01                	test   al,0x1
c001c6cb:	0f 85 6a 01 00 00    	jne    c001c83b <IDE::detect()+0x263>
c001c6d1:	a8 80                	test   al,0x80
c001c6d3:	75 04                	jne    c001c6d9 <IDE::detect()+0x101>
c001c6d5:	a8 08                	test   al,0x8
c001c6d7:	75 23                	jne    c001c6fc <IDE::detect()+0x124>
c001c6d9:	47                   	inc    edi
c001c6da:	81 ff 17 01 00 00    	cmp    edi,0x117
c001c6e0:	7e da                	jle    c001c6bc <IDE::detect()+0xe4>
c001c6e2:	83 ec 0c             	sub    esp,0xc
c001c6e5:	6a 32                	push   0x32
c001c6e7:	e8 f0 9d ff ff       	call   c00164dc <milliTenthSleep(unsigned int)>
c001c6ec:	83 c4 10             	add    esp,0x10
c001c6ef:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c001c6f5:	75 c5                	jne    c001c6bc <IDE::detect()+0xe4>
c001c6f7:	e9 3f 01 00 00       	jmp    c001c83b <IDE::detect()+0x263>
c001c6fc:	31 c9                	xor    ecx,ecx
c001c6fe:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001c702:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001c706:	83 ec 0c             	sub    esp,0xc
c001c709:	68 80 00 00 00       	push   0x80
c001c70e:	57                   	push   edi
c001c70f:	6a 00                	push   0x0
c001c711:	56                   	push   esi
c001c712:	53                   	push   ebx
c001c713:	e8 f0 fd ff ff       	call   c001c508 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001c718:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001c71d:	89 e8                	mov    eax,ebp
c001c71f:	89 d1                	mov    ecx,edx
c001c721:	c1 e0 06             	shl    eax,0x6
c001c724:	01 d8                	add    eax,ebx
c001c726:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001c72d:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001c734:	89 f2                	mov    edx,esi
c001c736:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001c73c:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001c740:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001c746:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001c74a:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001c751:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001c759:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001c760:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001c768:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001c76e:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001c775:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001c77b:	8d 54 24 58          	lea    edx,[esp+0x58]
c001c77f:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001c783:	83 c4 20             	add    esp,0x20
c001c786:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c001c789:	83 c0 02             	add    eax,0x2
c001c78c:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c001c792:	83 c7 02             	add    edi,0x2
c001c795:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c001c798:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c001c79e:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c001c7a2:	75 e2                	jne    c001c786 <IDE::detect()+0x1ae>
c001c7a4:	89 e8                	mov    eax,ebp
c001c7a6:	c1 e0 06             	shl    eax,0x6
c001c7a9:	01 d8                	add    eax,ebx
c001c7ab:	0f b7 90 74 01 00 00 	movzx  edx,WORD PTR [eax+0x174]
c001c7b2:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001c7b9:	c1 ea 09             	shr    edx,0x9
c001c7bc:	83 e2 01             	and    edx,0x1
c001c7bf:	80 e1 01             	and    cl,0x1
c001c7c2:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001c7c8:	75 22                	jne    c001c7ec <IDE::detect()+0x214>
c001c7ca:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c001c7d1:	74 46                	je     c001c819 <IDE::detect()+0x241>
c001c7d3:	83 ec 0c             	sub    esp,0xc
c001c7d6:	68 7c 01 00 00       	push   0x17c
c001c7db:	e8 06 b3 fe ff       	call   c0007ae6 <malloc>
c001c7e0:	89 c7                	mov    edi,eax
c001c7e2:	89 04 24             	mov    DWORD PTR [esp],eax
c001c7e5:	e8 1a 05 00 00       	call   c001cd04 <ATA::ATA()>
c001c7ea:	eb 17                	jmp    c001c803 <IDE::detect()+0x22b>
c001c7ec:	83 ec 0c             	sub    esp,0xc
c001c7ef:	68 84 01 00 00       	push   0x184
c001c7f4:	e8 ed b2 fe ff       	call   c0007ae6 <malloc>
c001c7f9:	89 c7                	mov    edi,eax
c001c7fb:	89 04 24             	mov    DWORD PTR [esp],eax
c001c7fe:	e8 45 0e 00 00       	call   c001d648 <ATAPI::ATAPI()>
c001c803:	5a                   	pop    edx
c001c804:	59                   	pop    ecx
c001c805:	57                   	push   edi
c001c806:	53                   	push   ebx
c001c807:	e8 ea 01 ff ff       	call   c000c9f6 <Device::addChild(Device*)>
c001c80c:	8b 07                	mov    eax,DWORD PTR [edi]
c001c80e:	53                   	push   ebx
c001c80f:	55                   	push   ebp
c001c810:	6a 00                	push   0x0
c001c812:	57                   	push   edi
c001c813:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c816:	83 c4 20             	add    esp,0x20
c001c819:	45                   	inc    ebp
c001c81a:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c001c81f:	74 0d                	je     c001c82e <IDE::detect()+0x256>
c001c821:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c001c829:	e9 db fd ff ff       	jmp    c001c609 <IDE::detect()+0x31>
c001c82e:	4e                   	dec    esi
c001c82f:	74 69                	je     c001c89a <IDE::detect()+0x2c2>
c001c831:	be 01 00 00 00       	mov    esi,0x1
c001c836:	e9 c6 fd ff ff       	jmp    c001c601 <IDE::detect()+0x29>
c001c83b:	50                   	push   eax
c001c83c:	6a 04                	push   0x4
c001c83e:	56                   	push   esi
c001c83f:	53                   	push   ebx
c001c840:	e8 f3 f6 ff ff       	call   c001bf38 <IDE::read(unsigned char, unsigned char)>
c001c845:	83 c4 0c             	add    esp,0xc
c001c848:	89 c7                	mov    edi,eax
c001c84a:	6a 05                	push   0x5
c001c84c:	56                   	push   esi
c001c84d:	53                   	push   ebx
c001c84e:	e8 e5 f6 ff ff       	call   c001bf38 <IDE::read(unsigned char, unsigned char)>
c001c853:	83 c4 10             	add    esp,0x10
c001c856:	89 f9                	mov    ecx,edi
c001c858:	0f b6 c0             	movzx  eax,al
c001c85b:	0f b6 f9             	movzx  edi,cl
c001c85e:	83 ff 14             	cmp    edi,0x14
c001c861:	75 07                	jne    c001c86a <IDE::detect()+0x292>
c001c863:	3d eb 00 00 00       	cmp    eax,0xeb
c001c868:	eb 0a                	jmp    c001c874 <IDE::detect()+0x29c>
c001c86a:	3d 96 00 00 00       	cmp    eax,0x96
c001c86f:	75 a9                	jne    c001c81a <IDE::detect()+0x242>
c001c871:	83 ff 69             	cmp    edi,0x69
c001c874:	75 a4                	jne    c001c81a <IDE::detect()+0x242>
c001c876:	68 a1 00 00 00       	push   0xa1
c001c87b:	6a 07                	push   0x7
c001c87d:	56                   	push   esi
c001c87e:	53                   	push   ebx
c001c87f:	e8 f4 f5 ff ff       	call   c001be78 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c884:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c001c88b:	e8 4c 9c ff ff       	call   c00164dc <milliTenthSleep(unsigned int)>
c001c890:	83 c4 10             	add    esp,0x10
c001c893:	b1 01                	mov    cl,0x1
c001c895:	e9 64 fe ff ff       	jmp    c001c6fe <IDE::detect()+0x126>
c001c89a:	81 c4 1c 02 00 00    	add    esp,0x21c
c001c8a0:	5b                   	pop    ebx
c001c8a1:	5e                   	pop    esi
c001c8a2:	5f                   	pop    edi
c001c8a3:	5d                   	pop    ebp
c001c8a4:	c3                   	ret    
c001c8a5:	90                   	nop

c001c8a6 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001c8a6:	55                   	push   ebp
c001c8a7:	57                   	push   edi
c001c8a8:	56                   	push   esi
c001c8a9:	53                   	push   ebx
c001c8aa:	83 ec 1c             	sub    esp,0x1c
c001c8ad:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c8b1:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001c8b5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c8b9:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001c8bd:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c8c1:	88 c3                	mov    bl,al
c001c8c3:	25 ff 00 00 00       	and    eax,0xff
c001c8c8:	0f 84 88 00 00 00    	je     c001c956 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c8ce:	83 ec 0c             	sub    esp,0xc
c001c8d1:	89 c7                	mov    edi,eax
c001c8d3:	68 1f 34 02 c0       	push   0xc002341f
c001c8d8:	e8 98 e0 fe ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c001c8dd:	83 c4 10             	add    esp,0x10
c001c8e0:	83 ff 01             	cmp    edi,0x1
c001c8e3:	74 6b                	je     c001c950 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaa>
c001c8e5:	83 ff 02             	cmp    edi,0x2
c001c8e8:	75 58                	jne    c001c942 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x9c>
c001c8ea:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c001c8ef:	01 ff                	add    edi,edi
c001c8f1:	50                   	push   eax
c001c8f2:	09 fe                	or     esi,edi
c001c8f4:	6a 01                	push   0x1
c001c8f6:	89 f0                	mov    eax,esi
c001c8f8:	0f b6 f0             	movzx  esi,al
c001c8fb:	c1 e6 06             	shl    esi,0x6
c001c8fe:	0f b6 84 35 6d 01 00 00 	movzx  eax,BYTE PTR [ebp+esi*1+0x16d]
c001c906:	50                   	push   eax
c001c907:	55                   	push   ebp
c001c908:	e8 2b f6 ff ff       	call   c001bf38 <IDE::read(unsigned char, unsigned char)>
c001c90d:	83 c4 10             	add    esp,0x10
c001c910:	a8 01                	test   al,0x1
c001c912:	74 02                	je     c001c916 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x70>
c001c914:	b3 07                	mov    bl,0x7
c001c916:	a8 02                	test   al,0x2
c001c918:	74 02                	je     c001c91c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x76>
c001c91a:	b3 03                	mov    bl,0x3
c001c91c:	a8 04                	test   al,0x4
c001c91e:	74 02                	je     c001c922 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7c>
c001c920:	b3 14                	mov    bl,0x14
c001c922:	a8 08                	test   al,0x8
c001c924:	74 02                	je     c001c928 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x82>
c001c926:	b3 03                	mov    bl,0x3
c001c928:	a8 10                	test   al,0x10
c001c92a:	74 02                	je     c001c92e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x88>
c001c92c:	b3 15                	mov    bl,0x15
c001c92e:	a8 20                	test   al,0x20
c001c930:	74 02                	je     c001c934 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8e>
c001c932:	b3 03                	mov    bl,0x3
c001c934:	a8 40                	test   al,0x40
c001c936:	74 02                	je     c001c93a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001c938:	b3 16                	mov    bl,0x16
c001c93a:	a8 80                	test   al,0x80
c001c93c:	74 18                	je     c001c956 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c93e:	b3 0d                	mov    bl,0xd
c001c940:	eb 14                	jmp    c001c956 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c942:	83 ff 03             	cmp    edi,0x3
c001c945:	74 0d                	je     c001c954 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xae>
c001c947:	83 ff 04             	cmp    edi,0x4
c001c94a:	75 0a                	jne    c001c956 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c94c:	b3 08                	mov    bl,0x8
c001c94e:	eb 06                	jmp    c001c956 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c950:	b3 13                	mov    bl,0x13
c001c952:	eb 02                	jmp    c001c956 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c954:	b3 17                	mov    bl,0x17
c001c956:	83 c4 1c             	add    esp,0x1c
c001c959:	88 d8                	mov    al,bl
c001c95b:	5b                   	pop    ebx
c001c95c:	5e                   	pop    esi
c001c95d:	5f                   	pop    edi
c001c95e:	5d                   	pop    ebp
c001c95f:	c3                   	ret    

c001c960 <IDE::polling(unsigned char, unsigned int)>:
c001c960:	57                   	push   edi
c001c961:	56                   	push   esi
c001c962:	53                   	push   ebx
c001c963:	bb 04 00 00 00       	mov    ebx,0x4
c001c968:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001c96c:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001c971:	52                   	push   edx
c001c972:	6a 0c                	push   0xc
c001c974:	56                   	push   esi
c001c975:	57                   	push   edi
c001c976:	e8 bd f5 ff ff       	call   c001bf38 <IDE::read(unsigned char, unsigned char)>
c001c97b:	83 c4 10             	add    esp,0x10
c001c97e:	4b                   	dec    ebx
c001c97f:	75 f0                	jne    c001c971 <IDE::polling(unsigned char, unsigned int)+0x11>
c001c981:	bb a0 86 01 00       	mov    ebx,0x186a0
c001c986:	50                   	push   eax
c001c987:	6a 0c                	push   0xc
c001c989:	56                   	push   esi
c001c98a:	57                   	push   edi
c001c98b:	e8 a8 f5 ff ff       	call   c001bf38 <IDE::read(unsigned char, unsigned char)>
c001c990:	83 c4 10             	add    esp,0x10
c001c993:	a8 01                	test   al,0x1
c001c995:	75 17                	jne    c001c9ae <IDE::polling(unsigned char, unsigned int)+0x4e>
c001c997:	a8 20                	test   al,0x20
c001c999:	75 0f                	jne    c001c9aa <IDE::polling(unsigned char, unsigned int)+0x4a>
c001c99b:	4b                   	dec    ebx
c001c99c:	74 10                	je     c001c9ae <IDE::polling(unsigned char, unsigned int)+0x4e>
c001c99e:	a8 80                	test   al,0x80
c001c9a0:	75 e4                	jne    c001c986 <IDE::polling(unsigned char, unsigned int)+0x26>
c001c9a2:	a8 08                	test   al,0x8
c001c9a4:	74 e0                	je     c001c986 <IDE::polling(unsigned char, unsigned int)+0x26>
c001c9a6:	31 c0                	xor    eax,eax
c001c9a8:	eb 06                	jmp    c001c9b0 <IDE::polling(unsigned char, unsigned int)+0x50>
c001c9aa:	b0 01                	mov    al,0x1
c001c9ac:	eb 02                	jmp    c001c9b0 <IDE::polling(unsigned char, unsigned int)+0x50>
c001c9ae:	b0 02                	mov    al,0x2
c001c9b0:	5b                   	pop    ebx
c001c9b1:	5e                   	pop    esi
c001c9b2:	5f                   	pop    edi
c001c9b3:	c3                   	ret    

c001c9b4 <SATABus::close(int, int, void*)>:
c001c9b4:	31 c0                	xor    eax,eax
c001c9b6:	c3                   	ret    
c001c9b7:	90                   	nop

c001c9b8 <SATABus::detect()>:
c001c9b8:	c3                   	ret    
c001c9b9:	90                   	nop

c001c9ba <SATABus::SATABus()>:
c001c9ba:	83 ec 0c             	sub    esp,0xc
c001c9bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c9c1:	83 ec 08             	sub    esp,0x8
c001c9c4:	68 58 34 02 c0       	push   0xc0023458
c001c9c9:	50                   	push   eax
c001c9ca:	e8 69 03 ff ff       	call   c000cd38 <HardDiskController::HardDiskController(char const*)>
c001c9cf:	83 c4 10             	add    esp,0x10
c001c9d2:	ba 84 34 02 c0       	mov    edx,0xc0023484
c001c9d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c9db:	89 10                	mov    DWORD PTR [eax],edx
c001c9dd:	83 ec 0c             	sub    esp,0xc
c001c9e0:	6a 50                	push   0x50
c001c9e2:	e8 d7 b4 fe ff       	call   c0007ebe <Phys::allocateContiguousPages(int)>
c001c9e7:	83 c4 10             	add    esp,0x10
c001c9ea:	89 c2                	mov    edx,eax
c001c9ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c9f0:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001c9f6:	83 ec 0c             	sub    esp,0xc
c001c9f9:	6a 50                	push   0x50
c001c9fb:	e8 3d cc fe ff       	call   c000963d <Virt::allocateKernelVirtualPages(int)>
c001ca00:	83 c4 10             	add    esp,0x10
c001ca03:	89 c2                	mov    edx,eax
c001ca05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca09:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001ca0f:	a1 b0 6f 02 c0       	mov    eax,ds:0xc0026fb0
c001ca14:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ca18:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001ca1e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ca22:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001ca28:	83 ec 0c             	sub    esp,0xc
c001ca2b:	6a 03                	push   0x3
c001ca2d:	6a 50                	push   0x50
c001ca2f:	51                   	push   ecx
c001ca30:	52                   	push   edx
c001ca31:	50                   	push   eax
c001ca32:	e8 13 d5 fe ff       	call   c0009f4a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001ca37:	83 c4 20             	add    esp,0x20
c001ca3a:	90                   	nop
c001ca3b:	83 c4 0c             	add    esp,0xc
c001ca3e:	c3                   	ret    
c001ca3f:	90                   	nop

c001ca40 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001ca40:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ca44:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001ca47:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001ca4a:	09 c2                	or     edx,eax
c001ca4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ca50:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001ca56:	8b 08                	mov    ecx,DWORD PTR [eax]
c001ca58:	31 c0                	xor    eax,eax
c001ca5a:	c1 e9 08             	shr    ecx,0x8
c001ca5d:	83 e1 0f             	and    ecx,0xf
c001ca60:	39 c8                	cmp    eax,ecx
c001ca62:	74 0a                	je     c001ca6e <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c001ca64:	f6 c2 01             	test   dl,0x1
c001ca67:	74 08                	je     c001ca71 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001ca69:	d1 ea                	shr    edx,1
c001ca6b:	40                   	inc    eax
c001ca6c:	eb f2                	jmp    c001ca60 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c001ca6e:	83 c8 ff             	or     eax,0xffffffff
c001ca71:	c3                   	ret    

c001ca72 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001ca72:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001ca76:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001ca79:	89 c2                	mov    edx,eax
c001ca7b:	c1 ea 08             	shr    edx,0x8
c001ca7e:	83 e2 0f             	and    edx,0xf
c001ca81:	4a                   	dec    edx
c001ca82:	75 32                	jne    c001cab6 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001ca84:	83 e0 0f             	and    eax,0xf
c001ca87:	83 f8 03             	cmp    eax,0x3
c001ca8a:	75 2a                	jne    c001cab6 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001ca8c:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001ca8f:	b8 02 00 00 00       	mov    eax,0x2
c001ca94:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001ca9a:	74 1c                	je     c001cab8 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001ca9c:	b8 04 00 00 00       	mov    eax,0x4
c001caa1:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001caa7:	74 0f                	je     c001cab8 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001caa9:	31 c0                	xor    eax,eax
c001caab:	83 fa 03             	cmp    edx,0x3
c001caae:	0f 94 c0             	sete   al
c001cab1:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001cab5:	c3                   	ret    
c001cab6:	31 c0                	xor    eax,eax
c001cab8:	c3                   	ret    
c001cab9:	90                   	nop

c001caba <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001caba:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cabe:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001cac1:	0f ba e2 0f          	bt     edx,0xf
c001cac5:	72 f7                	jb     c001cabe <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001cac7:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001caca:	83 ca 10             	or     edx,0x10
c001cacd:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001cad0:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001cad3:	83 ca 01             	or     edx,0x1
c001cad6:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001cad9:	c3                   	ret    

c001cada <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001cada:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cade:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001cae1:	83 e2 fe             	and    edx,0xfffffffe
c001cae4:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001cae7:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001caea:	83 e2 ef             	and    edx,0xffffffef
c001caed:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001caf0:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001caf3:	0f ba e2 0e          	bt     edx,0xe
c001caf7:	72 f7                	jb     c001caf0 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001caf9:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001cafc:	0f ba e2 0f          	bt     edx,0xf
c001cb00:	72 ee                	jb     c001caf0 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001cb02:	c3                   	ret    
c001cb03:	90                   	nop

c001cb04 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001cb04:	55                   	push   ebp
c001cb05:	57                   	push   edi
c001cb06:	56                   	push   esi
c001cb07:	53                   	push   ebx
c001cb08:	83 ec 1c             	sub    esp,0x1c
c001cb0b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001cb0f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001cb13:	53                   	push   ebx
c001cb14:	56                   	push   esi
c001cb15:	e8 c0 ff ff ff       	call   c001cada <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001cb1a:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001cb1e:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001cb24:	83 ec 0c             	sub    esp,0xc
c001cb27:	c1 e5 0a             	shl    ebp,0xa
c001cb2a:	01 e8                	add    eax,ebp
c001cb2c:	89 03                	mov    DWORD PTR [ebx],eax
c001cb2e:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cb30:	68 00 04 00 00       	push   0x400
c001cb35:	6a 00                	push   0x0
c001cb37:	50                   	push   eax
c001cb38:	e8 b3 39 fe ff       	call   c00004f0 <memset>
c001cb3d:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c001cb43:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001cb47:	01 e8                	add    eax,ebp
c001cb49:	83 c4 1c             	add    esp,0x1c
c001cb4c:	89 03                	mov    DWORD PTR [ebx],eax
c001cb4e:	c1 e2 08             	shl    edx,0x8
c001cb51:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001cb58:	8d ba 00 80 00 00    	lea    edi,[edx+0x8000]
c001cb5e:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001cb64:	01 f8                	add    eax,edi
c001cb66:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001cb69:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001cb6c:	68 00 01 00 00       	push   0x100
c001cb71:	6a 00                	push   0x0
c001cb73:	50                   	push   eax
c001cb74:	e8 77 39 fe ff       	call   c00004f0 <memset>
c001cb79:	8b 96 5c 01 00 00    	mov    edx,DWORD PTR [esi+0x15c]
c001cb7f:	01 fa                	add    edx,edi
c001cb81:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001cb85:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c001cb88:	c1 e7 0d             	shl    edi,0xd
c001cb8b:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001cb92:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c001cb98:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c001cb9e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001cba2:	31 ff                	xor    edi,edi
c001cba4:	83 c4 10             	add    esp,0x10
c001cba7:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c001cbad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cbb1:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001cbb7:	83 c5 20             	add    ebp,0x20
c001cbba:	01 f8                	add    eax,edi
c001cbbc:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001cbbf:	52                   	push   edx
c001cbc0:	68 00 01 00 00       	push   0x100
c001cbc5:	6a 00                	push   0x0
c001cbc7:	50                   	push   eax
c001cbc8:	e8 23 39 fe ff       	call   c00004f0 <memset>
c001cbcd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001cbd1:	83 c4 10             	add    esp,0x10
c001cbd4:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c001cbda:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c001cbe1:	01 f8                	add    eax,edi
c001cbe3:	81 c7 00 01 00 00    	add    edi,0x100
c001cbe9:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001cbec:	81 ff 00 20 00 00    	cmp    edi,0x2000
c001cbf2:	75 b3                	jne    c001cba7 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa3>
c001cbf4:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001cbfb:	50                   	push   eax
c001cbfc:	50                   	push   eax
c001cbfd:	53                   	push   ebx
c001cbfe:	56                   	push   esi
c001cbff:	e8 b6 fe ff ff       	call   c001caba <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001cc04:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001cc0b:	83 c4 2c             	add    esp,0x2c
c001cc0e:	5b                   	pop    ebx
c001cc0f:	5e                   	pop    esi
c001cc10:	5f                   	pop    edi
c001cc11:	5d                   	pop    ebp
c001cc12:	c3                   	ret    
c001cc13:	90                   	nop

c001cc14 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001cc14:	55                   	push   ebp
c001cc15:	57                   	push   edi
c001cc16:	56                   	push   esi
c001cc17:	53                   	push   ebx
c001cc18:	31 db                	xor    ebx,ebx
c001cc1a:	83 ec 0c             	sub    esp,0xc
c001cc1d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cc21:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001cc25:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c001cc28:	f7 c7 01 00 00 00    	test   edi,0x1
c001cc2e:	74 7a                	je     c001ccaa <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001cc30:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001cc34:	89 d8                	mov    eax,ebx
c001cc36:	c1 e0 07             	shl    eax,0x7
c001cc39:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c001cc40:	55                   	push   ebp
c001cc41:	56                   	push   esi
c001cc42:	e8 2b fe ff ff       	call   c001ca72 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001cc47:	5a                   	pop    edx
c001cc48:	83 f8 01             	cmp    eax,0x1
c001cc4b:	59                   	pop    ecx
c001cc4c:	75 21                	jne    c001cc6f <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c001cc4e:	50                   	push   eax
c001cc4f:	53                   	push   ebx
c001cc50:	55                   	push   ebp
c001cc51:	56                   	push   esi
c001cc52:	e8 ad fe ff ff       	call   c001cb04 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001cc57:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001cc5e:	e8 83 ae fe ff       	call   c0007ae6 <malloc>
c001cc63:	89 c5                	mov    ebp,eax
c001cc65:	89 04 24             	mov    DWORD PTR [esp],eax
c001cc68:	e8 99 10 00 00       	call   c001dd06 <SATA::SATA()>
c001cc6d:	eb 24                	jmp    c001cc93 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c001cc6f:	83 f8 04             	cmp    eax,0x4
c001cc72:	75 36                	jne    c001ccaa <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001cc74:	51                   	push   ecx
c001cc75:	53                   	push   ebx
c001cc76:	55                   	push   ebp
c001cc77:	56                   	push   esi
c001cc78:	e8 87 fe ff ff       	call   c001cb04 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001cc7d:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001cc84:	e8 5d ae fe ff       	call   c0007ae6 <malloc>
c001cc89:	89 c5                	mov    ebp,eax
c001cc8b:	89 04 24             	mov    DWORD PTR [esp],eax
c001cc8e:	e8 d5 17 00 00       	call   c001e468 <SATAPI::SATAPI()>
c001cc93:	58                   	pop    eax
c001cc94:	5a                   	pop    edx
c001cc95:	55                   	push   ebp
c001cc96:	56                   	push   esi
c001cc97:	e8 5a fd fe ff       	call   c000c9f6 <Device::addChild(Device*)>
c001cc9c:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001cc9f:	56                   	push   esi
c001cca0:	6a 00                	push   0x0
c001cca2:	53                   	push   ebx
c001cca3:	55                   	push   ebp
c001cca4:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001cca7:	83 c4 20             	add    esp,0x20
c001ccaa:	d1 ef                	shr    edi,1
c001ccac:	43                   	inc    ebx
c001ccad:	83 fb 20             	cmp    ebx,0x20
c001ccb0:	0f 85 72 ff ff ff    	jne    c001cc28 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c001ccb6:	83 c4 0c             	add    esp,0xc
c001ccb9:	5b                   	pop    ebx
c001ccba:	5e                   	pop    esi
c001ccbb:	5f                   	pop    edi
c001ccbc:	5d                   	pop    ebp
c001ccbd:	c3                   	ret    

c001ccbe <SATABus::open(int, int, void*)>:
c001ccbe:	83 ec 14             	sub    esp,0x14
c001ccc1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ccc5:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c001cccb:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001ccd1:	52                   	push   edx
c001ccd2:	50                   	push   eax
c001ccd3:	e8 3c ff ff ff       	call   c001cc14 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001ccd8:	31 c0                	xor    eax,eax
c001ccda:	83 c4 1c             	add    esp,0x1c
c001ccdd:	c3                   	ret    

c001ccde <ATA::close(int, int, void*)>:
c001ccde:	83 ec 0c             	sub    esp,0xc
c001cce1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cce5:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001cceb:	85 c0                	test   eax,eax
c001cced:	74 0c                	je     c001ccfb <ATA::close(int, int, void*)+0x1d>
c001ccef:	83 ec 0c             	sub    esp,0xc
c001ccf2:	8b 10                	mov    edx,DWORD PTR [eax]
c001ccf4:	50                   	push   eax
c001ccf5:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001ccf8:	83 c4 10             	add    esp,0x10
c001ccfb:	31 c0                	xor    eax,eax
c001ccfd:	83 c4 0c             	add    esp,0xc
c001cd00:	c3                   	ret    
c001cd01:	90                   	nop

c001cd02 <ATA::powerSaving(PowerSavingLevel)>:
c001cd02:	c3                   	ret    
c001cd03:	90                   	nop

c001cd04 <ATA::ATA()>:
c001cd04:	83 ec 0c             	sub    esp,0xc
c001cd07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd0b:	83 ec 04             	sub    esp,0x4
c001cd0e:	68 00 02 00 00       	push   0x200
c001cd13:	68 51 35 02 c0       	push   0xc0023551
c001cd18:	50                   	push   eax
c001cd19:	e8 a4 00 ff ff       	call   c000cdc2 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001cd1e:	83 c4 10             	add    esp,0x10
c001cd21:	ba c4 34 02 c0       	mov    edx,0xc00234c4
c001cd26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd2a:	89 10                	mov    DWORD PTR [eax],edx
c001cd2c:	90                   	nop
c001cd2d:	83 c4 0c             	add    esp,0xc
c001cd30:	c3                   	ret    
c001cd31:	90                   	nop

c001cd32 <ATA::flush(bool)>:
c001cd32:	53                   	push   ebx
c001cd33:	83 ec 08             	sub    esp,0x8
c001cd36:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001cd3a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001cd3f:	83 f8 01             	cmp    eax,0x1
c001cd42:	19 c0                	sbb    eax,eax
c001cd44:	83 e0 fd             	and    eax,0xfffffffd
c001cd47:	05 ea 00 00 00       	add    eax,0xea
c001cd4c:	50                   	push   eax
c001cd4d:	6a 07                	push   0x7
c001cd4f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cd56:	50                   	push   eax
c001cd57:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cd5d:	e8 16 f1 ff ff       	call   c001be78 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cd62:	83 c4 0c             	add    esp,0xc
c001cd65:	6a 00                	push   0x0
c001cd67:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cd6e:	50                   	push   eax
c001cd6f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cd75:	e8 e6 fb ff ff       	call   c001c960 <IDE::polling(unsigned char, unsigned int)>
c001cd7a:	83 c4 18             	add    esp,0x18
c001cd7d:	5b                   	pop    ebx
c001cd7e:	c3                   	ret    
c001cd7f:	90                   	nop

c001cd80 <ATA::readyForCommand()>:
c001cd80:	56                   	push   esi
c001cd81:	53                   	push   ebx
c001cd82:	53                   	push   ebx
c001cd83:	31 db                	xor    ebx,ebx
c001cd85:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001cd89:	51                   	push   ecx
c001cd8a:	6a 0c                	push   0xc
c001cd8c:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001cd93:	50                   	push   eax
c001cd94:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001cd9a:	e8 99 f1 ff ff       	call   c001bf38 <IDE::read(unsigned char, unsigned char)>
c001cd9f:	83 c4 10             	add    esp,0x10
c001cda2:	a8 88                	test   al,0x88
c001cda4:	74 1f                	je     c001cdc5 <ATA::readyForCommand()+0x45>
c001cda6:	43                   	inc    ebx
c001cda7:	83 fb 63             	cmp    ebx,0x63
c001cdaa:	7e dd                	jle    c001cd89 <ATA::readyForCommand()+0x9>
c001cdac:	83 ec 0c             	sub    esp,0xc
c001cdaf:	6a 0a                	push   0xa
c001cdb1:	e8 26 97 ff ff       	call   c00164dc <milliTenthSleep(unsigned int)>
c001cdb6:	83 c4 10             	add    esp,0x10
c001cdb9:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001cdbf:	75 c8                	jne    c001cd89 <ATA::readyForCommand()+0x9>
c001cdc1:	31 c0                	xor    eax,eax
c001cdc3:	eb 02                	jmp    c001cdc7 <ATA::readyForCommand()+0x47>
c001cdc5:	b0 01                	mov    al,0x1
c001cdc7:	5a                   	pop    edx
c001cdc8:	5b                   	pop    ebx
c001cdc9:	5e                   	pop    esi
c001cdca:	c3                   	ret    
c001cdcb:	90                   	nop

c001cdcc <ATA::access(unsigned long long, int, void*, bool)>:
c001cdcc:	55                   	push   ebp
c001cdcd:	57                   	push   edi
c001cdce:	56                   	push   esi
c001cdcf:	53                   	push   ebx
c001cdd0:	83 ec 2c             	sub    esp,0x2c
c001cdd3:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001cdd7:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001cddb:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001cddf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001cde3:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001cde7:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001cdeb:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001cdef:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001cdf5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001cdf9:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001cdff:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001ce03:	c1 e0 06             	shl    eax,0x6
c001ce06:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001ce0e:	74 5d                	je     c001ce6d <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c001ce10:	89 fa                	mov    edx,edi
c001ce12:	89 f0                	mov    eax,esi
c001ce14:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001ce18:	c1 ea 1c             	shr    edx,0x1c
c001ce1b:	89 d1                	mov    ecx,edx
c001ce1d:	09 c1                	or     ecx,eax
c001ce1f:	74 25                	je     c001ce46 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001ce21:	31 ed                	xor    ebp,ebp
c001ce23:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001ce2a:	89 fa                	mov    edx,edi
c001ce2c:	89 f0                	mov    eax,esi
c001ce2e:	0f ad d0             	shrd   eax,edx,cl
c001ce31:	d3 ea                	shr    edx,cl
c001ce33:	f6 c1 20             	test   cl,0x20
c001ce36:	74 02                	je     c001ce3a <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001ce38:	89 d0                	mov    eax,edx
c001ce3a:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001ce3e:	45                   	inc    ebp
c001ce3f:	83 fd 06             	cmp    ebp,0x6
c001ce42:	75 df                	jne    c001ce23 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001ce44:	eb 76                	jmp    c001cebc <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c001ce46:	89 f0                	mov    eax,esi
c001ce48:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001ce4d:	89 fa                	mov    edx,edi
c001ce4f:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001ce56:	0f ac d0 10          	shrd   eax,edx,0x10
c001ce5a:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001ce5f:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001ce63:	c1 ee 18             	shr    esi,0x18
c001ce66:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001ce6b:	eb 56                	jmp    c001cec3 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001ce6d:	6a 00                	push   0x0
c001ce6f:	6a 3f                	push   0x3f
c001ce71:	57                   	push   edi
c001ce72:	56                   	push   esi
c001ce73:	e8 a8 2a 00 00       	call   c001f920 <__umoddi3>
c001ce78:	83 c4 10             	add    esp,0x10
c001ce7b:	40                   	inc    eax
c001ce7c:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001ce80:	6a 00                	push   0x0
c001ce82:	68 f0 03 00 00       	push   0x3f0
c001ce87:	57                   	push   edi
c001ce88:	56                   	push   esi
c001ce89:	e8 92 29 00 00       	call   c001f820 <__udivdi3>
c001ce8e:	83 c4 10             	add    esp,0x10
c001ce91:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001ce96:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001ce9d:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001cea2:	6a 00                	push   0x0
c001cea4:	6a 3f                	push   0x3f
c001cea6:	57                   	push   edi
c001cea7:	56                   	push   esi
c001cea8:	e8 73 29 00 00       	call   c001f820 <__udivdi3>
c001cead:	83 c4 10             	add    esp,0x10
c001ceb0:	83 e0 0f             	and    eax,0xf
c001ceb3:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001ceb8:	89 c6                	mov    esi,eax
c001ceba:	eb 07                	jmp    c001cec3 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001cebc:	31 f6                	xor    esi,esi
c001cebe:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c001cec3:	bf 01 00 00 00       	mov    edi,0x1
c001cec8:	50                   	push   eax
c001cec9:	6a 00                	push   0x0
c001cecb:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ced2:	50                   	push   eax
c001ced3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ced7:	e8 a4 f1 ff ff       	call   c001c080 <IDE::enableIRQs(unsigned char, bool)>
c001cedc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cedf:	e8 9c fe ff ff       	call   c001cd80 <ATA::readyForCommand()>
c001cee4:	83 c4 10             	add    esp,0x10
c001cee7:	84 c0                	test   al,al
c001cee9:	0f 84 69 02 00 00    	je     c001d158 <ATA::access(unsigned long long, int, void*, bool)+0x38c>
c001ceef:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001cef5:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001cefb:	c1 e0 04             	shl    eax,0x4
c001cefe:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001cf05:	09 c6                	or     esi,eax
c001cf07:	f6 44 24 0e 03       	test   BYTE PTR [esp+0xe],0x3
c001cf0c:	75 05                	jne    c001cf13 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c001cf0e:	83 ce a0             	or     esi,0xffffffa0
c001cf11:	eb 03                	jmp    c001cf16 <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c001cf13:	83 ce e0             	or     esi,0xffffffe0
c001cf16:	89 f0                	mov    eax,esi
c001cf18:	0f b6 f0             	movzx  esi,al
c001cf1b:	56                   	push   esi
c001cf1c:	6a 06                	push   0x6
c001cf1e:	51                   	push   ecx
c001cf1f:	52                   	push   edx
c001cf20:	e8 53 ef ff ff       	call   c001be78 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cf25:	83 c4 10             	add    esp,0x10
c001cf28:	6a 00                	push   0x0
c001cf2a:	6a 01                	push   0x1
c001cf2c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cf33:	50                   	push   eax
c001cf34:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cf3a:	e8 39 ef ff ff       	call   c001be78 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cf3f:	83 c4 10             	add    esp,0x10
c001cf42:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c001cf47:	83 f8 02             	cmp    eax,0x2
c001cf4a:	75 6e                	jne    c001cfba <ATA::access(unsigned long long, int, void*, bool)+0x1ee>
c001cf4c:	6a 00                	push   0x0
c001cf4e:	6a 08                	push   0x8
c001cf50:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cf57:	50                   	push   eax
c001cf58:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cf5e:	e8 15 ef ff ff       	call   c001be78 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cf63:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001cf68:	50                   	push   eax
c001cf69:	6a 09                	push   0x9
c001cf6b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cf72:	50                   	push   eax
c001cf73:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cf79:	e8 fa ee ff ff       	call   c001be78 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cf7e:	83 c4 20             	add    esp,0x20
c001cf81:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001cf86:	50                   	push   eax
c001cf87:	6a 0a                	push   0xa
c001cf89:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cf90:	50                   	push   eax
c001cf91:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cf97:	e8 dc ee ff ff       	call   c001be78 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cf9c:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001cfa1:	50                   	push   eax
c001cfa2:	6a 0b                	push   0xb
c001cfa4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cfab:	50                   	push   eax
c001cfac:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cfb2:	e8 c1 ee ff ff       	call   c001be78 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cfb7:	83 c4 20             	add    esp,0x20
c001cfba:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001cfbf:	50                   	push   eax
c001cfc0:	6a 02                	push   0x2
c001cfc2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cfc9:	50                   	push   eax
c001cfca:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cfd0:	e8 a3 ee ff ff       	call   c001be78 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cfd5:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001cfda:	50                   	push   eax
c001cfdb:	6a 03                	push   0x3
c001cfdd:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cfe4:	50                   	push   eax
c001cfe5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cfeb:	e8 88 ee ff ff       	call   c001be78 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cff0:	83 c4 20             	add    esp,0x20
c001cff3:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001cff8:	50                   	push   eax
c001cff9:	6a 04                	push   0x4
c001cffb:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d002:	50                   	push   eax
c001d003:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d009:	e8 6a ee ff ff       	call   c001be78 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d00e:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d013:	50                   	push   eax
c001d014:	6a 05                	push   0x5
c001d016:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d01d:	50                   	push   eax
c001d01e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d024:	e8 4f ee ff ff       	call   c001be78 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d029:	83 c4 20             	add    esp,0x20
c001d02c:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001d031:	0f b6 54 24 0e       	movzx  edx,BYTE PTR [esp+0xe]
c001d036:	74 11                	je     c001d049 <ATA::access(unsigned long long, int, void*, bool)+0x27d>
c001d038:	b8 30 00 00 00       	mov    eax,0x30
c001d03d:	83 fa 02             	cmp    edx,0x2
c001d040:	75 16                	jne    c001d058 <ATA::access(unsigned long long, int, void*, bool)+0x28c>
c001d042:	b8 34 00 00 00       	mov    eax,0x34
c001d047:	eb 0f                	jmp    c001d058 <ATA::access(unsigned long long, int, void*, bool)+0x28c>
c001d049:	b8 20 00 00 00       	mov    eax,0x20
c001d04e:	83 fa 02             	cmp    edx,0x2
c001d051:	75 05                	jne    c001d058 <ATA::access(unsigned long long, int, void*, bool)+0x28c>
c001d053:	b8 24 00 00 00       	mov    eax,0x24
c001d058:	50                   	push   eax
c001d059:	6a 07                	push   0x7
c001d05b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d062:	50                   	push   eax
c001d063:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d069:	e8 0a ee ff ff       	call   c001be78 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d06e:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001d072:	83 c4 10             	add    esp,0x10
c001d075:	0f b6 6c 24 0f       	movzx  ebp,BYTE PTR [esp+0xf]
c001d07a:	85 f6                	test   esi,esi
c001d07c:	0f 84 b3 00 00 00    	je     c001d135 <ATA::access(unsigned long long, int, void*, bool)+0x369>
c001d082:	50                   	push   eax
c001d083:	6a 01                	push   0x1
c001d085:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d08c:	50                   	push   eax
c001d08d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d093:	e8 c8 f8 ff ff       	call   c001c960 <IDE::polling(unsigned char, unsigned int)>
c001d098:	83 c4 10             	add    esp,0x10
c001d09b:	0f b6 f8             	movzx  edi,al
c001d09e:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001d0a4:	85 ff                	test   edi,edi
c001d0a6:	74 1d                	je     c001d0c5 <ATA::access(unsigned long long, int, void*, bool)+0x2f9>
c001d0a8:	57                   	push   edi
c001d0a9:	0f b6 d2             	movzx  edx,dl
c001d0ac:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001d0b3:	50                   	push   eax
c001d0b4:	52                   	push   edx
c001d0b5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d0bb:	e8 e6 f7 ff ff       	call   c001c8a6 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001d0c0:	e9 90 00 00 00       	jmp    c001d155 <ATA::access(unsigned long long, int, void*, bool)+0x389>
c001d0c5:	85 ed                	test   ebp,ebp
c001d0c7:	74 3b                	je     c001d104 <ATA::access(unsigned long long, int, void*, bool)+0x338>
c001d0c9:	31 c9                	xor    ecx,ecx
c001d0cb:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001d0cf:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001d0d3:	66 8b 3c 48          	mov    di,WORD PTR [eax+ecx*2]
c001d0d7:	50                   	push   eax
c001d0d8:	50                   	push   eax
c001d0d9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d0e0:	50                   	push   eax
c001d0e1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d0e7:	e8 7a ed ff ff       	call   c001be66 <IDE::getBase(unsigned char)>
c001d0ec:	89 c2                	mov    edx,eax
c001d0ee:	89 f8                	mov    eax,edi
c001d0f0:	66 ef                	out    dx,ax
c001d0f2:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001d0f6:	83 c4 10             	add    esp,0x10
c001d0f9:	41                   	inc    ecx
c001d0fa:	81 f9 00 01 00 00    	cmp    ecx,0x100
c001d100:	75 c9                	jne    c001d0cb <ATA::access(unsigned long long, int, void*, bool)+0x2ff>
c001d102:	eb 23                	jmp    c001d127 <ATA::access(unsigned long long, int, void*, bool)+0x35b>
c001d104:	0f b6 d2             	movzx  edx,dl
c001d107:	51                   	push   ecx
c001d108:	51                   	push   ecx
c001d109:	52                   	push   edx
c001d10a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d110:	e8 51 ed ff ff       	call   c001be66 <IDE::getBase(unsigned char)>
c001d115:	b9 00 01 00 00       	mov    ecx,0x100
c001d11a:	89 c2                	mov    edx,eax
c001d11c:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001d120:	fc                   	cld    
c001d121:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001d124:	83 c4 10             	add    esp,0x10
c001d127:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001d12f:	4e                   	dec    esi
c001d130:	e9 45 ff ff ff       	jmp    c001d07a <ATA::access(unsigned long long, int, void*, bool)+0x2ae>
c001d135:	31 ff                	xor    edi,edi
c001d137:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001d13c:	74 1a                	je     c001d158 <ATA::access(unsigned long long, int, void*, bool)+0x38c>
c001d13e:	50                   	push   eax
c001d13f:	50                   	push   eax
c001d140:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c001d145:	83 f8 02             	cmp    eax,0x2
c001d148:	0f 94 c0             	sete   al
c001d14b:	0f b6 c0             	movzx  eax,al
c001d14e:	50                   	push   eax
c001d14f:	53                   	push   ebx
c001d150:	e8 dd fb ff ff       	call   c001cd32 <ATA::flush(bool)>
c001d155:	83 c4 10             	add    esp,0x10
c001d158:	83 c4 2c             	add    esp,0x2c
c001d15b:	89 f8                	mov    eax,edi
c001d15d:	5b                   	pop    ebx
c001d15e:	5e                   	pop    esi
c001d15f:	5f                   	pop    edi
c001d160:	5d                   	pop    ebp
c001d161:	c3                   	ret    

c001d162 <ATA::detectCHS()>:
c001d162:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d166:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001d16c:	c1 e0 06             	shl    eax,0x6
c001d16f:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001d175:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001d17f:	c7 44 24 04 a8 34 02 c0 	mov    DWORD PTR [esp+0x4],0xc00234a8
c001d187:	e9 3b 45 ff ff       	jmp    c00116c7 <KePanic(char const*)>

c001d18c <ATA::open(int, int, void*)>:
c001d18c:	53                   	push   ebx
c001d18d:	83 ec 08             	sub    esp,0x8
c001d190:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d194:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d198:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d19c:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001d1a2:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001d1a8:	c1 e0 06             	shl    eax,0x6
c001d1ab:	01 d0                	add    eax,edx
c001d1ad:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001d1b4:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001d1ba:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001d1c1:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001d1cb:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001d1d1:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001d1d8:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001d1df:	75 0c                	jne    c001d1ed <ATA::open(int, int, void*)+0x61>
c001d1e1:	83 ec 0c             	sub    esp,0xc
c001d1e4:	53                   	push   ebx
c001d1e5:	e8 78 ff ff ff       	call   c001d162 <ATA::detectCHS()>
c001d1ea:	83 c4 10             	add    esp,0x10
c001d1ed:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001d1f3:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001d1f9:	c1 e0 06             	shl    eax,0x6
c001d1fc:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001d203:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001d20d:	d1 e8                	shr    eax,1
c001d20f:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001d215:	6a 04                	push   0x4
c001d217:	6a 0c                	push   0xc
c001d219:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d220:	50                   	push   eax
c001d221:	52                   	push   edx
c001d222:	e8 51 ec ff ff       	call   c001be78 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d227:	90                   	nop
c001d228:	90                   	nop
c001d229:	6a 00                	push   0x0
c001d22b:	6a 0c                	push   0xc
c001d22d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d234:	50                   	push   eax
c001d235:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d23b:	e8 38 ec ff ff       	call   c001be78 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d240:	83 c4 14             	add    esp,0x14
c001d243:	53                   	push   ebx
c001d244:	e8 e1 fb fe ff       	call   c000ce2a <PhysicalDisk::startCache()>
c001d249:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d24c:	e8 1d 0e ff ff       	call   c000e06e <createPartitionsForDisk(PhysicalDisk*)>
c001d251:	31 c0                	xor    eax,eax
c001d253:	83 c4 18             	add    esp,0x18
c001d256:	5b                   	pop    ebx
c001d257:	c3                   	ret    

c001d258 <combineCharAndColour(char, unsigned char)>:
c001d258:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001d25d:	66 0f be 54 24 04    	movsx  dx,BYTE PTR [esp+0x4]
c001d263:	c1 e0 08             	shl    eax,0x8
c001d266:	09 d0                	or     eax,edx
c001d268:	c3                   	ret    

c001d269 <combineColours(unsigned char, unsigned char)>:
c001d269:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001d26e:	c1 e0 04             	shl    eax,0x4
c001d271:	0b 44 24 04          	or     eax,DWORD PTR [esp+0x4]
c001d275:	c3                   	ret    

c001d276 <ATA::read(unsigned long long, int, void*)>:
c001d276:	55                   	push   ebp
c001d277:	57                   	push   edi
c001d278:	56                   	push   esi
c001d279:	be 04 00 00 00       	mov    esi,0x4
c001d27e:	53                   	push   ebx
c001d27f:	83 ec 0c             	sub    esp,0xc
c001d282:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001d286:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d28a:	8d 7b ff             	lea    edi,[ebx-0x1]
c001d28d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d291:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001d295:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001d29b:	0f 87 a1 01 00 00    	ja     c001d442 <ATA::read(unsigned long long, int, void*)+0x1cc>
c001d2a1:	be 06 00 00 00       	mov    esi,0x6
c001d2a6:	85 c9                	test   ecx,ecx
c001d2a8:	0f 84 94 01 00 00    	je     c001d442 <ATA::read(unsigned long long, int, void*)+0x1cc>
c001d2ae:	55                   	push   ebp
c001d2af:	55                   	push   ebp
c001d2b0:	6a 00                	push   0x0
c001d2b2:	51                   	push   ecx
c001d2b3:	53                   	push   ebx
c001d2b4:	52                   	push   edx
c001d2b5:	50                   	push   eax
c001d2b6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d2ba:	e8 0d fb ff ff       	call   c001cdcc <ATA::access(unsigned long long, int, void*, bool)>
c001d2bf:	83 c4 20             	add    esp,0x20
c001d2c2:	89 c6                	mov    esi,eax
c001d2c4:	85 c0                	test   eax,eax
c001d2c6:	0f 85 71 01 00 00    	jne    c001d43d <ATA::read(unsigned long long, int, void*)+0x1c7>
c001d2cc:	03 1d b4 d0 02 c0    	add    ebx,DWORD PTR ds:0xc002d0b4
c001d2d2:	89 da                	mov    edx,ebx
c001d2d4:	50                   	push   eax
c001d2d5:	bd 10 27 00 00       	mov    ebp,0x2710
c001d2da:	50                   	push   eax
c001d2db:	89 1d b4 d0 02 c0    	mov    DWORD PTR ds:0xc002d0b4,ebx
c001d2e1:	6a 0f                	push   0xf
c001d2e3:	6a 00                	push   0x0
c001d2e5:	e8 7f ff ff ff       	call   c001d269 <combineColours(unsigned char, unsigned char)>
c001d2ea:	59                   	pop    ecx
c001d2eb:	b9 0a 00 00 00       	mov    ecx,0xa
c001d2f0:	5b                   	pop    ebx
c001d2f1:	0f b6 d8             	movzx  ebx,al
c001d2f4:	89 d0                	mov    eax,edx
c001d2f6:	53                   	push   ebx
c001d2f7:	99                   	cdq    
c001d2f8:	f7 fd                	idiv   ebp
c001d2fa:	99                   	cdq    
c001d2fb:	f7 f9                	idiv   ecx
c001d2fd:	83 c2 30             	add    edx,0x30
c001d300:	0f b6 d2             	movzx  edx,dl
c001d303:	52                   	push   edx
c001d304:	e8 4f ff ff ff       	call   c001d258 <combineCharAndColour(char, unsigned char)>
c001d309:	5f                   	pop    edi
c001d30a:	bf e8 03 00 00       	mov    edi,0x3e8
c001d30f:	5a                   	pop    edx
c001d310:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001d316:	53                   	push   ebx
c001d317:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d31c:	99                   	cdq    
c001d31d:	f7 ff                	idiv   edi
c001d31f:	99                   	cdq    
c001d320:	f7 f9                	idiv   ecx
c001d322:	8d 42 30             	lea    eax,[edx+0x30]
c001d325:	0f b6 c0             	movzx  eax,al
c001d328:	50                   	push   eax
c001d329:	e8 2a ff ff ff       	call   c001d258 <combineCharAndColour(char, unsigned char)>
c001d32e:	5f                   	pop    edi
c001d32f:	bf 64 00 00 00       	mov    edi,0x64
c001d334:	5a                   	pop    edx
c001d335:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001d33b:	53                   	push   ebx
c001d33c:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d341:	99                   	cdq    
c001d342:	f7 ff                	idiv   edi
c001d344:	99                   	cdq    
c001d345:	f7 f9                	idiv   ecx
c001d347:	8d 42 30             	lea    eax,[edx+0x30]
c001d34a:	0f b6 c0             	movzx  eax,al
c001d34d:	50                   	push   eax
c001d34e:	e8 05 ff ff ff       	call   c001d258 <combineCharAndColour(char, unsigned char)>
c001d353:	5a                   	pop    edx
c001d354:	5a                   	pop    edx
c001d355:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001d35b:	53                   	push   ebx
c001d35c:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d361:	99                   	cdq    
c001d362:	f7 f9                	idiv   ecx
c001d364:	99                   	cdq    
c001d365:	f7 f9                	idiv   ecx
c001d367:	8d 42 30             	lea    eax,[edx+0x30]
c001d36a:	0f b6 c0             	movzx  eax,al
c001d36d:	50                   	push   eax
c001d36e:	e8 e5 fe ff ff       	call   c001d258 <combineCharAndColour(char, unsigned char)>
c001d373:	5a                   	pop    edx
c001d374:	5a                   	pop    edx
c001d375:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001d37b:	53                   	push   ebx
c001d37c:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d381:	99                   	cdq    
c001d382:	f7 f9                	idiv   ecx
c001d384:	83 c2 30             	add    edx,0x30
c001d387:	0f b6 d2             	movzx  edx,dl
c001d38a:	52                   	push   edx
c001d38b:	e8 c8 fe ff ff       	call   c001d258 <combineCharAndColour(char, unsigned char)>
c001d390:	5a                   	pop    edx
c001d391:	5a                   	pop    edx
c001d392:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001d398:	53                   	push   ebx
c001d399:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d39e:	99                   	cdq    
c001d39f:	f7 fd                	idiv   ebp
c001d3a1:	99                   	cdq    
c001d3a2:	f7 f9                	idiv   ecx
c001d3a4:	8d 42 30             	lea    eax,[edx+0x30]
c001d3a7:	0f b6 c0             	movzx  eax,al
c001d3aa:	50                   	push   eax
c001d3ab:	e8 a8 fe ff ff       	call   c001d258 <combineCharAndColour(char, unsigned char)>
c001d3b0:	5d                   	pop    ebp
c001d3b1:	bd e8 03 00 00       	mov    ebp,0x3e8
c001d3b6:	5a                   	pop    edx
c001d3b7:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001d3bd:	53                   	push   ebx
c001d3be:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d3c3:	99                   	cdq    
c001d3c4:	f7 fd                	idiv   ebp
c001d3c6:	99                   	cdq    
c001d3c7:	f7 f9                	idiv   ecx
c001d3c9:	8d 42 30             	lea    eax,[edx+0x30]
c001d3cc:	0f b6 c0             	movzx  eax,al
c001d3cf:	50                   	push   eax
c001d3d0:	e8 83 fe ff ff       	call   c001d258 <combineCharAndColour(char, unsigned char)>
c001d3d5:	5d                   	pop    ebp
c001d3d6:	5a                   	pop    edx
c001d3d7:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001d3dd:	53                   	push   ebx
c001d3de:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d3e3:	99                   	cdq    
c001d3e4:	f7 ff                	idiv   edi
c001d3e6:	99                   	cdq    
c001d3e7:	f7 f9                	idiv   ecx
c001d3e9:	8d 42 30             	lea    eax,[edx+0x30]
c001d3ec:	0f b6 c0             	movzx  eax,al
c001d3ef:	50                   	push   eax
c001d3f0:	e8 63 fe ff ff       	call   c001d258 <combineCharAndColour(char, unsigned char)>
c001d3f5:	5f                   	pop    edi
c001d3f6:	5d                   	pop    ebp
c001d3f7:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001d3fd:	53                   	push   ebx
c001d3fe:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d403:	99                   	cdq    
c001d404:	f7 f9                	idiv   ecx
c001d406:	99                   	cdq    
c001d407:	f7 f9                	idiv   ecx
c001d409:	8d 42 30             	lea    eax,[edx+0x30]
c001d40c:	0f b6 c0             	movzx  eax,al
c001d40f:	50                   	push   eax
c001d410:	e8 43 fe ff ff       	call   c001d258 <combineCharAndColour(char, unsigned char)>
c001d415:	5a                   	pop    edx
c001d416:	5f                   	pop    edi
c001d417:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001d41d:	53                   	push   ebx
c001d41e:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d423:	99                   	cdq    
c001d424:	f7 f9                	idiv   ecx
c001d426:	83 c2 30             	add    edx,0x30
c001d429:	0f b6 d2             	movzx  edx,dl
c001d42c:	52                   	push   edx
c001d42d:	e8 26 fe ff ff       	call   c001d258 <combineCharAndColour(char, unsigned char)>
c001d432:	83 c4 10             	add    esp,0x10
c001d435:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001d43b:	eb 05                	jmp    c001d442 <ATA::read(unsigned long long, int, void*)+0x1cc>
c001d43d:	be 01 00 00 00       	mov    esi,0x1
c001d442:	83 c4 0c             	add    esp,0xc
c001d445:	89 f0                	mov    eax,esi
c001d447:	5b                   	pop    ebx
c001d448:	5e                   	pop    esi
c001d449:	5f                   	pop    edi
c001d44a:	5d                   	pop    ebp
c001d44b:	c3                   	ret    

c001d44c <ATA::write(unsigned long long, int, void*)>:
c001d44c:	55                   	push   ebp
c001d44d:	57                   	push   edi
c001d44e:	56                   	push   esi
c001d44f:	be 04 00 00 00       	mov    esi,0x4
c001d454:	53                   	push   ebx
c001d455:	83 ec 0c             	sub    esp,0xc
c001d458:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001d45c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d460:	8d 7b ff             	lea    edi,[ebx-0x1]
c001d463:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d467:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001d46b:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001d471:	0f 87 9c 01 00 00    	ja     c001d613 <ATA::write(unsigned long long, int, void*)+0x1c7>
c001d477:	be 06 00 00 00       	mov    esi,0x6
c001d47c:	85 c9                	test   ecx,ecx
c001d47e:	0f 84 8f 01 00 00    	je     c001d613 <ATA::write(unsigned long long, int, void*)+0x1c7>
c001d484:	55                   	push   ebp
c001d485:	55                   	push   ebp
c001d486:	6a 01                	push   0x1
c001d488:	51                   	push   ecx
c001d489:	53                   	push   ebx
c001d48a:	52                   	push   edx
c001d48b:	50                   	push   eax
c001d48c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d490:	e8 37 f9 ff ff       	call   c001cdcc <ATA::access(unsigned long long, int, void*, bool)>
c001d495:	83 c4 20             	add    esp,0x20
c001d498:	89 c6                	mov    esi,eax
c001d49a:	85 c0                	test   eax,eax
c001d49c:	0f 85 6c 01 00 00    	jne    c001d60e <ATA::write(unsigned long long, int, void*)+0x1c2>
c001d4a2:	01 1d b0 d0 02 c0    	add    DWORD PTR ds:0xc002d0b0,ebx
c001d4a8:	bd 10 27 00 00       	mov    ebp,0x2710
c001d4ad:	50                   	push   eax
c001d4ae:	50                   	push   eax
c001d4af:	6a 0f                	push   0xf
c001d4b1:	6a 00                	push   0x0
c001d4b3:	e8 b1 fd ff ff       	call   c001d269 <combineColours(unsigned char, unsigned char)>
c001d4b8:	5a                   	pop    edx
c001d4b9:	0f b6 d8             	movzx  ebx,al
c001d4bc:	59                   	pop    ecx
c001d4bd:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d4c2:	53                   	push   ebx
c001d4c3:	b9 0a 00 00 00       	mov    ecx,0xa
c001d4c8:	99                   	cdq    
c001d4c9:	f7 fd                	idiv   ebp
c001d4cb:	99                   	cdq    
c001d4cc:	f7 f9                	idiv   ecx
c001d4ce:	8d 42 30             	lea    eax,[edx+0x30]
c001d4d1:	0f b6 c0             	movzx  eax,al
c001d4d4:	50                   	push   eax
c001d4d5:	e8 7e fd ff ff       	call   c001d258 <combineCharAndColour(char, unsigned char)>
c001d4da:	5f                   	pop    edi
c001d4db:	bf e8 03 00 00       	mov    edi,0x3e8
c001d4e0:	5a                   	pop    edx
c001d4e1:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001d4e7:	53                   	push   ebx
c001d4e8:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d4ed:	99                   	cdq    
c001d4ee:	f7 ff                	idiv   edi
c001d4f0:	99                   	cdq    
c001d4f1:	f7 f9                	idiv   ecx
c001d4f3:	8d 42 30             	lea    eax,[edx+0x30]
c001d4f6:	0f b6 c0             	movzx  eax,al
c001d4f9:	50                   	push   eax
c001d4fa:	e8 59 fd ff ff       	call   c001d258 <combineCharAndColour(char, unsigned char)>
c001d4ff:	5f                   	pop    edi
c001d500:	bf 64 00 00 00       	mov    edi,0x64
c001d505:	5a                   	pop    edx
c001d506:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001d50c:	53                   	push   ebx
c001d50d:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d512:	99                   	cdq    
c001d513:	f7 ff                	idiv   edi
c001d515:	99                   	cdq    
c001d516:	f7 f9                	idiv   ecx
c001d518:	8d 42 30             	lea    eax,[edx+0x30]
c001d51b:	0f b6 c0             	movzx  eax,al
c001d51e:	50                   	push   eax
c001d51f:	e8 34 fd ff ff       	call   c001d258 <combineCharAndColour(char, unsigned char)>
c001d524:	5a                   	pop    edx
c001d525:	5a                   	pop    edx
c001d526:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001d52c:	53                   	push   ebx
c001d52d:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d532:	99                   	cdq    
c001d533:	f7 f9                	idiv   ecx
c001d535:	99                   	cdq    
c001d536:	f7 f9                	idiv   ecx
c001d538:	8d 42 30             	lea    eax,[edx+0x30]
c001d53b:	0f b6 c0             	movzx  eax,al
c001d53e:	50                   	push   eax
c001d53f:	e8 14 fd ff ff       	call   c001d258 <combineCharAndColour(char, unsigned char)>
c001d544:	5a                   	pop    edx
c001d545:	5a                   	pop    edx
c001d546:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001d54c:	53                   	push   ebx
c001d54d:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d552:	99                   	cdq    
c001d553:	f7 f9                	idiv   ecx
c001d555:	8d 42 30             	lea    eax,[edx+0x30]
c001d558:	0f b6 c0             	movzx  eax,al
c001d55b:	50                   	push   eax
c001d55c:	e8 f7 fc ff ff       	call   c001d258 <combineCharAndColour(char, unsigned char)>
c001d561:	5a                   	pop    edx
c001d562:	5a                   	pop    edx
c001d563:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001d569:	53                   	push   ebx
c001d56a:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d56f:	99                   	cdq    
c001d570:	f7 fd                	idiv   ebp
c001d572:	99                   	cdq    
c001d573:	f7 f9                	idiv   ecx
c001d575:	8d 42 30             	lea    eax,[edx+0x30]
c001d578:	0f b6 c0             	movzx  eax,al
c001d57b:	50                   	push   eax
c001d57c:	e8 d7 fc ff ff       	call   c001d258 <combineCharAndColour(char, unsigned char)>
c001d581:	5d                   	pop    ebp
c001d582:	bd e8 03 00 00       	mov    ebp,0x3e8
c001d587:	5a                   	pop    edx
c001d588:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001d58e:	53                   	push   ebx
c001d58f:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d594:	99                   	cdq    
c001d595:	f7 fd                	idiv   ebp
c001d597:	99                   	cdq    
c001d598:	f7 f9                	idiv   ecx
c001d59a:	8d 42 30             	lea    eax,[edx+0x30]
c001d59d:	0f b6 c0             	movzx  eax,al
c001d5a0:	50                   	push   eax
c001d5a1:	e8 b2 fc ff ff       	call   c001d258 <combineCharAndColour(char, unsigned char)>
c001d5a6:	5d                   	pop    ebp
c001d5a7:	5a                   	pop    edx
c001d5a8:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001d5ae:	53                   	push   ebx
c001d5af:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d5b4:	99                   	cdq    
c001d5b5:	f7 ff                	idiv   edi
c001d5b7:	99                   	cdq    
c001d5b8:	f7 f9                	idiv   ecx
c001d5ba:	8d 42 30             	lea    eax,[edx+0x30]
c001d5bd:	0f b6 c0             	movzx  eax,al
c001d5c0:	50                   	push   eax
c001d5c1:	e8 92 fc ff ff       	call   c001d258 <combineCharAndColour(char, unsigned char)>
c001d5c6:	5f                   	pop    edi
c001d5c7:	5d                   	pop    ebp
c001d5c8:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001d5ce:	53                   	push   ebx
c001d5cf:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d5d4:	99                   	cdq    
c001d5d5:	f7 f9                	idiv   ecx
c001d5d7:	99                   	cdq    
c001d5d8:	f7 f9                	idiv   ecx
c001d5da:	8d 42 30             	lea    eax,[edx+0x30]
c001d5dd:	0f b6 c0             	movzx  eax,al
c001d5e0:	50                   	push   eax
c001d5e1:	e8 72 fc ff ff       	call   c001d258 <combineCharAndColour(char, unsigned char)>
c001d5e6:	5a                   	pop    edx
c001d5e7:	5f                   	pop    edi
c001d5e8:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001d5ee:	53                   	push   ebx
c001d5ef:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d5f4:	99                   	cdq    
c001d5f5:	f7 f9                	idiv   ecx
c001d5f7:	83 c2 30             	add    edx,0x30
c001d5fa:	0f b6 d2             	movzx  edx,dl
c001d5fd:	52                   	push   edx
c001d5fe:	e8 55 fc ff ff       	call   c001d258 <combineCharAndColour(char, unsigned char)>
c001d603:	83 c4 10             	add    esp,0x10
c001d606:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001d60c:	eb 05                	jmp    c001d613 <ATA::write(unsigned long long, int, void*)+0x1c7>
c001d60e:	be 01 00 00 00       	mov    esi,0x1
c001d613:	83 c4 0c             	add    esp,0xc
c001d616:	89 f0                	mov    eax,esi
c001d618:	5b                   	pop    ebx
c001d619:	5e                   	pop    esi
c001d61a:	5f                   	pop    edi
c001d61b:	5d                   	pop    ebp
c001d61c:	c3                   	ret    
c001d61d:	90                   	nop

c001d61e <ATAPI::write(unsigned long long, int, void*)>:
c001d61e:	b8 03 00 00 00       	mov    eax,0x3
c001d623:	c3                   	ret    

c001d624 <ATAPI::close(int, int, void*)>:
c001d624:	83 ec 0c             	sub    esp,0xc
c001d627:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d62b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d631:	85 c0                	test   eax,eax
c001d633:	74 0c                	je     c001d641 <ATAPI::close(int, int, void*)+0x1d>
c001d635:	83 ec 0c             	sub    esp,0xc
c001d638:	8b 10                	mov    edx,DWORD PTR [eax]
c001d63a:	50                   	push   eax
c001d63b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001d63e:	83 c4 10             	add    esp,0x10
c001d641:	31 c0                	xor    eax,eax
c001d643:	83 c4 0c             	add    esp,0xc
c001d646:	c3                   	ret    
c001d647:	90                   	nop

c001d648 <ATAPI::ATAPI()>:
c001d648:	83 ec 0c             	sub    esp,0xc
c001d64b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d64f:	83 ec 04             	sub    esp,0x4
c001d652:	68 00 08 00 00       	push   0x800
c001d657:	68 f1 35 02 c0       	push   0xc00235f1
c001d65c:	50                   	push   eax
c001d65d:	e8 60 f7 fe ff       	call   c000cdc2 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001d662:	83 c4 10             	add    esp,0x10
c001d665:	ba 0c 35 02 c0       	mov    edx,0xc002350c
c001d66a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d66e:	89 10                	mov    DWORD PTR [eax],edx
c001d670:	90                   	nop
c001d671:	83 c4 0c             	add    esp,0xc
c001d674:	c3                   	ret    
c001d675:	90                   	nop

c001d676 <ATAPI::readyForCommand()>:
c001d676:	56                   	push   esi
c001d677:	53                   	push   ebx
c001d678:	53                   	push   ebx
c001d679:	31 db                	xor    ebx,ebx
c001d67b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d67f:	51                   	push   ecx
c001d680:	6a 0c                	push   0xc
c001d682:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001d689:	50                   	push   eax
c001d68a:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001d690:	e8 a3 e8 ff ff       	call   c001bf38 <IDE::read(unsigned char, unsigned char)>
c001d695:	83 c4 10             	add    esp,0x10
c001d698:	a8 88                	test   al,0x88
c001d69a:	74 25                	je     c001d6c1 <ATAPI::readyForCommand()+0x4b>
c001d69c:	43                   	inc    ebx
c001d69d:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001d6a3:	7e da                	jle    c001d67f <ATAPI::readyForCommand()+0x9>
c001d6a5:	83 ec 0c             	sub    esp,0xc
c001d6a8:	68 5e 01 00 00       	push   0x15e
c001d6ad:	e8 2a 8e ff ff       	call   c00164dc <milliTenthSleep(unsigned int)>
c001d6b2:	83 c4 10             	add    esp,0x10
c001d6b5:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001d6bb:	75 c2                	jne    c001d67f <ATAPI::readyForCommand()+0x9>
c001d6bd:	31 c0                	xor    eax,eax
c001d6bf:	eb 02                	jmp    c001d6c3 <ATAPI::readyForCommand()+0x4d>
c001d6c1:	b0 01                	mov    al,0x1
c001d6c3:	5a                   	pop    edx
c001d6c4:	5b                   	pop    ebx
c001d6c5:	5e                   	pop    esi
c001d6c6:	c3                   	ret    
c001d6c7:	90                   	nop

c001d6c8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001d6c8:	55                   	push   ebp
c001d6c9:	57                   	push   edi
c001d6ca:	56                   	push   esi
c001d6cb:	53                   	push   ebx
c001d6cc:	83 ec 20             	sub    esp,0x20
c001d6cf:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001d6d3:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001d6d7:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001d6db:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001d6df:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001d6e3:	6a 01                	push   0x1
c001d6e5:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d6ec:	50                   	push   eax
c001d6ed:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d6f3:	e8 88 e9 ff ff       	call   c001c080 <IDE::enableIRQs(unsigned char, bool)>
c001d6f8:	5e                   	pop    esi
c001d6f9:	58                   	pop    eax
c001d6fa:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d701:	50                   	push   eax
c001d702:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d708:	e8 45 e7 ff ff       	call   c001be52 <IDE::prepareInterrupt(unsigned char)>
c001d70d:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d710:	e8 61 ff ff ff       	call   c001d676 <ATAPI::readyForCommand()>
c001d715:	83 c4 10             	add    esp,0x10
c001d718:	84 c0                	test   al,al
c001d71a:	75 0a                	jne    c001d726 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001d71c:	bb 01 00 00 00       	mov    ebx,0x1
c001d721:	e9 60 02 00 00       	jmp    c001d986 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c001d726:	8b 87 74 01 00 00    	mov    eax,DWORD PTR [edi+0x174]
c001d72c:	c1 e0 04             	shl    eax,0x4
c001d72f:	0f b6 c0             	movzx  eax,al
c001d732:	50                   	push   eax
c001d733:	6a 06                	push   0x6
c001d735:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d73c:	50                   	push   eax
c001d73d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d743:	e8 30 e7 ff ff       	call   c001be78 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d748:	6a 00                	push   0x0
c001d74a:	6a 01                	push   0x1
c001d74c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d753:	50                   	push   eax
c001d754:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d75a:	e8 19 e7 ff ff       	call   c001be78 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d75f:	83 c4 20             	add    esp,0x20
c001d762:	0f b6 c3             	movzx  eax,bl
c001d765:	0f b6 df             	movzx  ebx,bh
c001d768:	50                   	push   eax
c001d769:	6a 04                	push   0x4
c001d76b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d772:	50                   	push   eax
c001d773:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d779:	e8 fa e6 ff ff       	call   c001be78 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d77e:	53                   	push   ebx
c001d77f:	6a 05                	push   0x5
c001d781:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d788:	50                   	push   eax
c001d789:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d78f:	e8 e4 e6 ff ff       	call   c001be78 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d794:	83 c4 20             	add    esp,0x20
c001d797:	68 a0 00 00 00       	push   0xa0
c001d79c:	6a 07                	push   0x7
c001d79e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d7a5:	50                   	push   eax
c001d7a6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d7ac:	e8 c7 e6 ff ff       	call   c001be78 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d7b1:	83 c4 0c             	add    esp,0xc
c001d7b4:	6a 01                	push   0x1
c001d7b6:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d7bd:	50                   	push   eax
c001d7be:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d7c4:	e8 97 f1 ff ff       	call   c001c960 <IDE::polling(unsigned char, unsigned int)>
c001d7c9:	83 c4 10             	add    esp,0x10
c001d7cc:	0f b6 d8             	movzx  ebx,al
c001d7cf:	8b 87 70 01 00 00    	mov    eax,DWORD PTR [edi+0x170]
c001d7d5:	85 db                	test   ebx,ebx
c001d7d7:	74 20                	je     c001d7f9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001d7d9:	53                   	push   ebx
c001d7da:	0f b6 c0             	movzx  eax,al
c001d7dd:	0f b6 97 74 01 00 00 	movzx  edx,BYTE PTR [edi+0x174]
c001d7e4:	52                   	push   edx
c001d7e5:	50                   	push   eax
c001d7e6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d7ec:	e8 b5 f0 ff ff       	call   c001c8a6 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001d7f1:	83 c4 10             	add    esp,0x10
c001d7f4:	e9 8d 01 00 00       	jmp    c001d986 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c001d7f9:	0f b6 c0             	movzx  eax,al
c001d7fc:	53                   	push   ebx
c001d7fd:	53                   	push   ebx
c001d7fe:	50                   	push   eax
c001d7ff:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d805:	e8 5c e6 ff ff       	call   c001be66 <IDE::getBase(unsigned char)>
c001d80a:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001d80e:	b9 06 00 00 00       	mov    ecx,0x6
c001d813:	89 c2                	mov    edx,eax
c001d815:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001d818:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001d81c:	83 c4 10             	add    esp,0x10
c001d81f:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001d824:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d828:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d82e:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d835:	85 db                	test   ebx,ebx
c001d837:	0f 84 ec 00 00 00    	je     c001d929 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x261>
c001d83d:	51                   	push   ecx
c001d83e:	51                   	push   ecx
c001d83f:	52                   	push   edx
c001d840:	50                   	push   eax
c001d841:	e8 a0 e7 ff ff       	call   c001bfe6 <IDE::waitInterrupt(unsigned char)>
c001d846:	83 c4 10             	add    esp,0x10
c001d849:	84 c0                	test   al,al
c001d84b:	0f 84 cb fe ff ff    	je     c001d71c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001d851:	56                   	push   esi
c001d852:	56                   	push   esi
c001d853:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d85a:	50                   	push   eax
c001d85b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d861:	e8 ec e5 ff ff       	call   c001be52 <IDE::prepareInterrupt(unsigned char)>
c001d866:	83 c4 0c             	add    esp,0xc
c001d869:	6a 04                	push   0x4
c001d86b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d872:	50                   	push   eax
c001d873:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d879:	e8 ba e6 ff ff       	call   c001bf38 <IDE::read(unsigned char, unsigned char)>
c001d87e:	83 c4 0c             	add    esp,0xc
c001d881:	89 c6                	mov    esi,eax
c001d883:	6a 05                	push   0x5
c001d885:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d88c:	50                   	push   eax
c001d88d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d893:	e8 a0 e6 ff ff       	call   c001bf38 <IDE::read(unsigned char, unsigned char)>
c001d898:	89 f1                	mov    ecx,esi
c001d89a:	0f b6 c0             	movzx  eax,al
c001d89d:	0f b6 f1             	movzx  esi,cl
c001d8a0:	c1 e0 08             	shl    eax,0x8
c001d8a3:	09 c6                	or     esi,eax
c001d8a5:	d1 fe                	sar    esi,1
c001d8a7:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001d8ab:	83 c4 10             	add    esp,0x10
c001d8ae:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001d8b3:	74 41                	je     c001d8f6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x22e>
c001d8b5:	31 c9                	xor    ecx,ecx
c001d8b7:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d8bd:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d8c4:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001d8c8:	75 0a                	jne    c001d8d4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x20c>
c001d8ca:	01 c9                	add    ecx,ecx
c001d8cc:	01 cd                	add    ebp,ecx
c001d8ce:	4b                   	dec    ebx
c001d8cf:	e9 54 ff ff ff       	jmp    c001d828 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x160>
c001d8d4:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001d8d9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001d8dd:	51                   	push   ecx
c001d8de:	51                   	push   ecx
c001d8df:	52                   	push   edx
c001d8e0:	50                   	push   eax
c001d8e1:	e8 80 e5 ff ff       	call   c001be66 <IDE::getBase(unsigned char)>
c001d8e6:	89 c2                	mov    edx,eax
c001d8e8:	89 f0                	mov    eax,esi
c001d8ea:	66 ef                	out    dx,ax
c001d8ec:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d8f0:	83 c4 10             	add    esp,0x10
c001d8f3:	41                   	inc    ecx
c001d8f4:	eb c1                	jmp    c001d8b7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1ef>
c001d8f6:	31 f6                	xor    esi,esi
c001d8f8:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d8fe:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d905:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001d909:	75 06                	jne    c001d911 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x249>
c001d90b:	01 f6                	add    esi,esi
c001d90d:	01 f5                	add    ebp,esi
c001d90f:	eb bd                	jmp    c001d8ce <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x206>
c001d911:	51                   	push   ecx
c001d912:	51                   	push   ecx
c001d913:	52                   	push   edx
c001d914:	50                   	push   eax
c001d915:	e8 4c e5 ff ff       	call   c001be66 <IDE::getBase(unsigned char)>
c001d91a:	89 c2                	mov    edx,eax
c001d91c:	66 ed                	in     ax,dx
c001d91e:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001d923:	83 c4 10             	add    esp,0x10
c001d926:	46                   	inc    esi
c001d927:	eb cf                	jmp    c001d8f8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x230>
c001d929:	51                   	push   ecx
c001d92a:	51                   	push   ecx
c001d92b:	52                   	push   edx
c001d92c:	50                   	push   eax
c001d92d:	e8 b4 e6 ff ff       	call   c001bfe6 <IDE::waitInterrupt(unsigned char)>
c001d932:	83 c4 10             	add    esp,0x10
c001d935:	84 c0                	test   al,al
c001d937:	0f 84 df fd ff ff    	je     c001d71c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001d93d:	bb a0 86 01 00       	mov    ebx,0x186a0
c001d942:	52                   	push   edx
c001d943:	52                   	push   edx
c001d944:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d94b:	50                   	push   eax
c001d94c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d952:	e8 fb e4 ff ff       	call   c001be52 <IDE::prepareInterrupt(unsigned char)>
c001d957:	83 c4 10             	add    esp,0x10
c001d95a:	50                   	push   eax
c001d95b:	50                   	push   eax
c001d95c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d963:	50                   	push   eax
c001d964:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d96a:	e8 f7 e4 ff ff       	call   c001be66 <IDE::getBase(unsigned char)>
c001d96f:	8d 50 07             	lea    edx,[eax+0x7]
c001d972:	ec                   	in     al,dx
c001d973:	83 c4 10             	add    esp,0x10
c001d976:	a8 88                	test   al,0x88
c001d978:	74 0a                	je     c001d984 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2bc>
c001d97a:	4b                   	dec    ebx
c001d97b:	75 dd                	jne    c001d95a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x292>
c001d97d:	bb 02 00 00 00       	mov    ebx,0x2
c001d982:	eb 02                	jmp    c001d986 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c001d984:	31 db                	xor    ebx,ebx
c001d986:	83 c4 1c             	add    esp,0x1c
c001d989:	89 d8                	mov    eax,ebx
c001d98b:	5b                   	pop    ebx
c001d98c:	5e                   	pop    esi
c001d98d:	5f                   	pop    edi
c001d98e:	5d                   	pop    ebp
c001d98f:	c3                   	ret    

c001d990 <ATAPI::diskRemoved()>:
c001d990:	53                   	push   ebx
c001d991:	83 ec 14             	sub    esp,0x14
c001d994:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001d998:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001d99f:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001d9a5:	e8 b4 03 ff ff       	call   c000dd5e <LogicalDisk::unmount()>
c001d9aa:	58                   	pop    eax
c001d9ab:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001d9b1:	e8 8a 0d ff ff       	call   c000e740 <VCache::writeWriteBuffer()>
c001d9b6:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001d9bc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d9c0:	83 c4 18             	add    esp,0x18
c001d9c3:	5b                   	pop    ebx
c001d9c4:	e9 67 0d ff ff       	jmp    c000e730 <VCache::invalidateReadBuffer()>
c001d9c9:	90                   	nop

c001d9ca <ATAPI::eject()>:
c001d9ca:	57                   	push   edi
c001d9cb:	b9 03 00 00 00       	mov    ecx,0x3
c001d9d0:	53                   	push   ebx
c001d9d1:	83 ec 14             	sub    esp,0x14
c001d9d4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d9d8:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001d9dc:	fc                   	cld    
c001d9dd:	31 c0                	xor    eax,eax
c001d9df:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d9e1:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001d9e6:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001d9eb:	50                   	push   eax
c001d9ec:	50                   	push   eax
c001d9ed:	6a 00                	push   0x0
c001d9ef:	6a 00                	push   0x0
c001d9f1:	6a 00                	push   0x0
c001d9f3:	6a 02                	push   0x2
c001d9f5:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d9f9:	50                   	push   eax
c001d9fa:	53                   	push   ebx
c001d9fb:	e8 c8 fc ff ff       	call   c001d6c8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001da00:	83 c4 14             	add    esp,0x14
c001da03:	53                   	push   ebx
c001da04:	e8 87 ff ff ff       	call   c001d990 <ATAPI::diskRemoved()>
c001da09:	83 c4 24             	add    esp,0x24
c001da0c:	31 c0                	xor    eax,eax
c001da0e:	5b                   	pop    ebx
c001da0f:	5f                   	pop    edi
c001da10:	c3                   	ret    
c001da11:	90                   	nop

c001da12 <ATAPI::diskInserted()>:
c001da12:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001da16:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001da1d:	c3                   	ret    

c001da1e <ATAPI::detectMedia()>:
c001da1e:	56                   	push   esi
c001da1f:	53                   	push   ebx
c001da20:	83 ec 28             	sub    esp,0x28
c001da23:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001da27:	6a 0c                	push   0xc
c001da29:	6a 00                	push   0x0
c001da2b:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001da2f:	56                   	push   esi
c001da30:	e8 bb 2a fe ff       	call   c00004f0 <memset>
c001da35:	58                   	pop    eax
c001da36:	5a                   	pop    edx
c001da37:	6a 00                	push   0x0
c001da39:	6a 00                	push   0x0
c001da3b:	6a 00                	push   0x0
c001da3d:	6a 00                	push   0x0
c001da3f:	56                   	push   esi
c001da40:	53                   	push   ebx
c001da41:	e8 82 fc ff ff       	call   c001d6c8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001da46:	83 c4 1c             	add    esp,0x1c
c001da49:	6a 0c                	push   0xc
c001da4b:	6a 00                	push   0x0
c001da4d:	56                   	push   esi
c001da4e:	e8 9d 2a fe ff       	call   c00004f0 <memset>
c001da53:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001da58:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001da5d:	59                   	pop    ecx
c001da5e:	58                   	pop    eax
c001da5f:	6a 01                	push   0x1
c001da61:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001da65:	50                   	push   eax
c001da66:	6a 00                	push   0x0
c001da68:	6a 12                	push   0x12
c001da6a:	56                   	push   esi
c001da6b:	53                   	push   ebx
c001da6c:	e8 57 fc ff ff       	call   c001d6c8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001da71:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001da75:	83 c4 20             	add    esp,0x20
c001da78:	83 e0 7f             	and    eax,0x7f
c001da7b:	83 f8 70             	cmp    eax,0x70
c001da7e:	74 15                	je     c001da95 <ATAPI::detectMedia()+0x77>
c001da80:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001da87:	75 0c                	jne    c001da95 <ATAPI::detectMedia()+0x77>
c001da89:	83 ec 0c             	sub    esp,0xc
c001da8c:	53                   	push   ebx
c001da8d:	e8 80 ff ff ff       	call   c001da12 <ATAPI::diskInserted()>
c001da92:	83 c4 10             	add    esp,0x10
c001da95:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001da99:	83 e0 0f             	and    eax,0xf
c001da9c:	83 f8 02             	cmp    eax,0x2
c001da9f:	75 1b                	jne    c001dabc <ATAPI::detectMedia()+0x9e>
c001daa1:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001daa6:	75 2d                	jne    c001dad5 <ATAPI::detectMedia()+0xb7>
c001daa8:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001daaf:	74 24                	je     c001dad5 <ATAPI::detectMedia()+0xb7>
c001dab1:	83 ec 0c             	sub    esp,0xc
c001dab4:	53                   	push   ebx
c001dab5:	e8 d6 fe ff ff       	call   c001d990 <ATAPI::diskRemoved()>
c001daba:	eb 16                	jmp    c001dad2 <ATAPI::detectMedia()+0xb4>
c001dabc:	85 c0                	test   eax,eax
c001dabe:	75 15                	jne    c001dad5 <ATAPI::detectMedia()+0xb7>
c001dac0:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001dac7:	75 0c                	jne    c001dad5 <ATAPI::detectMedia()+0xb7>
c001dac9:	83 ec 0c             	sub    esp,0xc
c001dacc:	53                   	push   ebx
c001dacd:	e8 40 ff ff ff       	call   c001da12 <ATAPI::diskInserted()>
c001dad2:	83 c4 10             	add    esp,0x10
c001dad5:	83 c4 24             	add    esp,0x24
c001dad8:	5b                   	pop    ebx
c001dad9:	5e                   	pop    esi
c001dada:	c3                   	ret    
c001dadb:	90                   	nop

c001dadc <ATAPI::open(int, int, void*)>:
c001dadc:	56                   	push   esi
c001dadd:	53                   	push   ebx
c001dade:	50                   	push   eax
c001dadf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001dae3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001dae7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001daeb:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001daf1:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001daf7:	c1 e0 06             	shl    eax,0x6
c001dafa:	01 d0                	add    eax,edx
c001dafc:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001db03:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001db09:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001db10:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001db1a:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001db20:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001db27:	6a 04                	push   0x4
c001db29:	6a 0c                	push   0xc
c001db2b:	51                   	push   ecx
c001db2c:	52                   	push   edx
c001db2d:	e8 46 e3 ff ff       	call   c001be78 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001db32:	90                   	nop
c001db33:	90                   	nop
c001db34:	6a 00                	push   0x0
c001db36:	6a 0c                	push   0xc
c001db38:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001db3f:	50                   	push   eax
c001db40:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001db46:	e8 2d e3 ff ff       	call   c001be78 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001db4b:	83 c4 14             	add    esp,0x14
c001db4e:	68 78 01 00 00       	push   0x178
c001db53:	e8 8e 9f fe ff       	call   c0007ae6 <malloc>
c001db58:	83 c4 0c             	add    esp,0xc
c001db5b:	89 c6                	mov    esi,eax
c001db5d:	6a 00                	push   0x0
c001db5f:	68 ff ff ff 7f       	push   0x7fffffff
c001db64:	6a 00                	push   0x0
c001db66:	6a 00                	push   0x0
c001db68:	53                   	push   ebx
c001db69:	68 a3 36 02 c0       	push   0xc00236a3
c001db6e:	50                   	push   eax
c001db6f:	e8 28 00 ff ff       	call   c000db9c <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001db74:	83 c4 14             	add    esp,0x14
c001db77:	56                   	push   esi
c001db78:	e8 df 00 ff ff       	call   c000dc5c <LogicalDisk::assignDriveLetter()>
c001db7d:	5a                   	pop    edx
c001db7e:	0f be c0             	movsx  eax,al
c001db81:	59                   	pop    ecx
c001db82:	50                   	push   eax
c001db83:	68 f4 34 02 c0       	push   0xc00234f4
c001db88:	e8 e8 cd fe ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c001db8d:	58                   	pop    eax
c001db8e:	5a                   	pop    edx
c001db8f:	56                   	push   esi
c001db90:	53                   	push   ebx
c001db91:	e8 60 ee fe ff       	call   c000c9f6 <Device::addChild(Device*)>
c001db96:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c001db9c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001db9f:	e8 86 f2 fe ff       	call   c000ce2a <PhysicalDisk::startCache()>
c001dba4:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001dbab:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001dbae:	e8 6b fe ff ff       	call   c001da1e <ATAPI::detectMedia()>
c001dbb3:	83 c4 14             	add    esp,0x14
c001dbb6:	31 c0                	xor    eax,eax
c001dbb8:	5b                   	pop    ebx
c001dbb9:	5e                   	pop    esi
c001dbba:	c3                   	ret    
c001dbbb:	90                   	nop

c001dbbc <ATAPI::read(unsigned long long, int, void*)>:
c001dbbc:	55                   	push   ebp
c001dbbd:	57                   	push   edi
c001dbbe:	56                   	push   esi
c001dbbf:	53                   	push   ebx
c001dbc0:	83 ec 1c             	sub    esp,0x1c
c001dbc3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001dbc7:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001dbcb:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001dbcf:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001dbd6:	74 3c                	je     c001dc14 <ATAPI::read(unsigned long long, int, void*)+0x58>
c001dbd8:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001dbdc:	b9 03 00 00 00       	mov    ecx,0x3
c001dbe1:	fc                   	cld    
c001dbe2:	31 c0                	xor    eax,eax
c001dbe4:	0f ce                	bswap  esi
c001dbe6:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001dbe8:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001dbed:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001dbf1:	89 e8                	mov    eax,ebp
c001dbf3:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001dbf7:	50                   	push   eax
c001dbf8:	50                   	push   eax
c001dbf9:	55                   	push   ebp
c001dbfa:	c1 e5 0b             	shl    ebp,0xb
c001dbfd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001dc01:	6a 00                	push   0x0
c001dc03:	55                   	push   ebp
c001dc04:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001dc08:	50                   	push   eax
c001dc09:	53                   	push   ebx
c001dc0a:	e8 b9 fa ff ff       	call   c001d6c8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001dc0f:	83 c4 20             	add    esp,0x20
c001dc12:	eb 1a                	jmp    c001dc2e <ATAPI::read(unsigned long long, int, void*)+0x72>
c001dc14:	83 ec 0c             	sub    esp,0xc
c001dc17:	53                   	push   ebx
c001dc18:	e8 01 fe ff ff       	call   c001da1e <ATAPI::detectMedia()>
c001dc1d:	83 c4 10             	add    esp,0x10
c001dc20:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001dc27:	75 af                	jne    c001dbd8 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001dc29:	b8 02 00 00 00       	mov    eax,0x2
c001dc2e:	83 c4 1c             	add    esp,0x1c
c001dc31:	5b                   	pop    ebx
c001dc32:	5e                   	pop    esi
c001dc33:	5f                   	pop    edi
c001dc34:	5d                   	pop    ebp
c001dc35:	c3                   	ret    

c001dc36 <SATA::close(int, int, void*)>:
c001dc36:	83 ec 0c             	sub    esp,0xc
c001dc39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc3d:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001dc43:	85 c0                	test   eax,eax
c001dc45:	74 0c                	je     c001dc53 <SATA::close(int, int, void*)+0x1d>
c001dc47:	83 ec 0c             	sub    esp,0xc
c001dc4a:	8b 10                	mov    edx,DWORD PTR [eax]
c001dc4c:	50                   	push   eax
c001dc4d:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001dc50:	83 c4 10             	add    esp,0x10
c001dc53:	31 c0                	xor    eax,eax
c001dc55:	83 c4 0c             	add    esp,0xc
c001dc58:	c3                   	ret    
c001dc59:	90                   	nop

c001dc5a <SATA::powerSaving(PowerSavingLevel)>:
c001dc5a:	c3                   	ret    
c001dc5b:	90                   	nop

c001dc5c <SATA::open(int, int, void*)>:
c001dc5c:	56                   	push   esi
c001dc5d:	53                   	push   ebx
c001dc5e:	50                   	push   eax
c001dc5f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001dc63:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001dc67:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001dc71:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001dc77:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001dc81:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001dc85:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001dc8f:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001dc95:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001dc9c:	e8 4e a1 fe ff       	call   c0007def <Phys::allocatePage()>
c001dca1:	89 c6                	mov    esi,eax
c001dca3:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001dca9:	81 c6 00 10 00 00    	add    esi,0x1000
c001dcaf:	e8 3b a1 fe ff       	call   c0007def <Phys::allocatePage()>
c001dcb4:	39 c6                	cmp    esi,eax
c001dcb6:	74 10                	je     c001dcc8 <SATA::open(int, int, void*)+0x6c>
c001dcb8:	83 ec 0c             	sub    esp,0xc
c001dcbb:	68 3c 35 02 c0       	push   0xc002353c
c001dcc0:	e8 02 3a ff ff       	call   c00116c7 <KePanic(char const*)>
c001dcc5:	83 c4 10             	add    esp,0x10
c001dcc8:	83 ec 0c             	sub    esp,0xc
c001dccb:	6a 02                	push   0x2
c001dccd:	e8 6b b9 fe ff       	call   c000963d <Virt::allocateKernelVirtualPages(int)>
c001dcd2:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001dcd8:	6a 03                	push   0x3
c001dcda:	50                   	push   eax
c001dcdb:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001dce1:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c001dce7:	e8 64 c0 fe ff       	call   c0009d50 <VAS::mapPage(unsigned long, unsigned long, int)>
c001dcec:	83 c4 14             	add    esp,0x14
c001dcef:	53                   	push   ebx
c001dcf0:	e8 35 f1 fe ff       	call   c000ce2a <PhysicalDisk::startCache()>
c001dcf5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001dcf8:	e8 71 03 ff ff       	call   c000e06e <createPartitionsForDisk(PhysicalDisk*)>
c001dcfd:	83 c4 14             	add    esp,0x14
c001dd00:	31 c0                	xor    eax,eax
c001dd02:	5b                   	pop    ebx
c001dd03:	5e                   	pop    esi
c001dd04:	c3                   	ret    
c001dd05:	90                   	nop

c001dd06 <SATA::SATA()>:
c001dd06:	83 ec 0c             	sub    esp,0xc
c001dd09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd0d:	83 ec 04             	sub    esp,0x4
c001dd10:	68 00 02 00 00       	push   0x200
c001dd15:	68 50 35 02 c0       	push   0xc0023550
c001dd1a:	50                   	push   eax
c001dd1b:	e8 a2 f0 fe ff       	call   c000cdc2 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001dd20:	83 c4 10             	add    esp,0x10
c001dd23:	ba c0 35 02 c0       	mov    edx,0xc00235c0
c001dd28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd2c:	89 10                	mov    DWORD PTR [eax],edx
c001dd2e:	90                   	nop
c001dd2f:	83 c4 0c             	add    esp,0xc
c001dd32:	c3                   	ret    
c001dd33:	90                   	nop

c001dd34 <SATA::access(unsigned long long, int, void*, bool)>:
c001dd34:	55                   	push   ebp
c001dd35:	57                   	push   edi
c001dd36:	56                   	push   esi
c001dd37:	53                   	push   ebx
c001dd38:	83 ec 2c             	sub    esp,0x2c
c001dd3b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001dd3f:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001dd43:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001dd47:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001dd4b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001dd4f:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001dd54:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001dd58:	7e 10                	jle    c001dd6a <SATA::access(unsigned long long, int, void*, bool)+0x36>
c001dd5a:	83 ec 0c             	sub    esp,0xc
c001dd5d:	68 60 35 02 c0       	push   0xc0023560
c001dd62:	e8 60 39 ff ff       	call   c00116c7 <KePanic(char const*)>
c001dd67:	83 c4 10             	add    esp,0x10
c001dd6a:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001dd70:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001dd76:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001dd7c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001dd80:	89 d0                	mov    eax,edx
c001dd82:	c1 e0 07             	shl    eax,0x7
c001dd85:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001dd89:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001dd93:	51                   	push   ecx
c001dd94:	8d 42 02             	lea    eax,[edx+0x2]
c001dd97:	51                   	push   ecx
c001dd98:	c1 e0 07             	shl    eax,0x7
c001dd9b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001dd9f:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001dda3:	50                   	push   eax
c001dda4:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001ddaa:	e8 91 ec ff ff       	call   c001ca40 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001ddaf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001ddb3:	83 c4 10             	add    esp,0x10
c001ddb6:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001ddbb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ddbf:	0f 84 57 01 00 00    	je     c001df1c <SATA::access(unsigned long long, int, void*, bool)+0x1e8>
c001ddc5:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001ddc9:	c1 e0 09             	shl    eax,0x9
c001ddcc:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001ddd1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ddd5:	74 0e                	je     c001dde5 <SATA::access(unsigned long long, int, void*, bool)+0xb1>
c001ddd7:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001dddd:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001dde1:	89 c1                	mov    ecx,eax
c001dde3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001dde5:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001ddeb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001ddef:	8d 42 02             	lea    eax,[edx+0x2]
c001ddf2:	c1 e0 07             	shl    eax,0x7
c001ddf5:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001ddf9:	8b 00                	mov    eax,DWORD PTR [eax]
c001ddfb:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001de01:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001de07:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001de0b:	c1 e1 05             	shl    ecx,0x5
c001de0e:	01 c8                	add    eax,ecx
c001de10:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001de14:	83 e1 01             	and    ecx,0x1
c001de17:	89 ce                	mov    esi,ecx
c001de19:	8a 08                	mov    cl,BYTE PTR [eax]
c001de1b:	c1 e6 06             	shl    esi,0x6
c001de1e:	83 e1 bf             	and    ecx,0xffffffbf
c001de21:	09 f1                	or     ecx,esi
c001de23:	88 08                	mov    BYTE PTR [eax],cl
c001de25:	8b 08                	mov    ecx,DWORD PTR [eax]
c001de27:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001de2d:	81 c9 05 00 01 00    	or     ecx,0x10005
c001de33:	89 08                	mov    DWORD PTR [eax],ecx
c001de35:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001de3b:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001de41:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001de47:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001de4a:	50                   	push   eax
c001de4b:	68 90 00 00 00       	push   0x90
c001de50:	6a 00                	push   0x0
c001de52:	56                   	push   esi
c001de53:	e8 98 26 fe ff       	call   c00004f0 <memset>
c001de58:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001de5e:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001de64:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001de68:	83 c4 10             	add    esp,0x10
c001de6b:	48                   	dec    eax
c001de6c:	25 ff ff 3f 00       	and    eax,0x3fffff
c001de71:	89 c1                	mov    ecx,eax
c001de73:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001de79:	25 00 00 c0 ff       	and    eax,0xffc00000
c001de7e:	09 c8                	or     eax,ecx
c001de80:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001de86:	8a 86 8f 00 00 00    	mov    al,BYTE PTR [esi+0x8f]
c001de8c:	83 c8 80             	or     eax,0xffffff80
c001de8f:	88 86 8f 00 00 00    	mov    BYTE PTR [esi+0x8f],al
c001de95:	66 8b 06             	mov    ax,WORD PTR [esi]
c001de98:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001de9c:	25 00 7f 00 00       	and    eax,0x7f00
c001dea1:	0d 27 80 ff ff       	or     eax,0xffff8027
c001dea6:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001deab:	66 89 06             	mov    WORD PTR [esi],ax
c001deae:	b0 35                	mov    al,0x35
c001deb0:	75 02                	jne    c001deb4 <SATA::access(unsigned long long, int, void*, bool)+0x180>
c001deb2:	b0 25                	mov    al,0x25
c001deb4:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001deb7:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c001debb:	89 e8                	mov    eax,ebp
c001debd:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001dec1:	c1 e8 10             	shr    eax,0x10
c001dec4:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001dec7:	89 e8                	mov    eax,ebp
c001dec9:	c1 e8 18             	shr    eax,0x18
c001decc:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001decf:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001ded3:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001ded6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001deda:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001dedd:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001dee1:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001dee5:	89 d6                	mov    esi,edx
c001dee7:	31 c0                	xor    eax,eax
c001dee9:	c1 e6 07             	shl    esi,0x7
c001deec:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001def0:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001def6:	80 e1 88             	and    cl,0x88
c001def9:	74 0a                	je     c001df05 <SATA::access(unsigned long long, int, void*, bool)+0x1d1>
c001defb:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001df00:	74 0a                	je     c001df0c <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c001df02:	40                   	inc    eax
c001df03:	eb eb                	jmp    c001def0 <SATA::access(unsigned long long, int, void*, bool)+0x1bc>
c001df05:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001df0a:	75 17                	jne    c001df23 <SATA::access(unsigned long long, int, void*, bool)+0x1ef>
c001df0c:	83 ec 0c             	sub    esp,0xc
c001df0f:	68 99 35 02 c0       	push   0xc0023599
c001df14:	e8 5c ca fe ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c001df19:	83 c4 10             	add    esp,0x10
c001df1c:	b8 01 00 00 00       	mov    eax,0x1
c001df21:	eb 5d                	jmp    c001df80 <SATA::access(unsigned long long, int, void*, bool)+0x24c>
c001df23:	b8 01 00 00 00       	mov    eax,0x1
c001df28:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001df2c:	c1 e2 07             	shl    edx,0x7
c001df2f:	d3 e0                	shl    eax,cl
c001df31:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c001df35:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001df3b:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001df41:	85 c8                	test   eax,ecx
c001df43:	74 16                	je     c001df5b <SATA::access(unsigned long long, int, void*, bool)+0x227>
c001df45:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001df4b:	0f ba e1 1e          	bt     ecx,0x1e
c001df4f:	73 ea                	jae    c001df3b <SATA::access(unsigned long long, int, void*, bool)+0x207>
c001df51:	83 ec 0c             	sub    esp,0xc
c001df54:	68 a7 35 02 c0       	push   0xc00235a7
c001df59:	eb b9                	jmp    c001df14 <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001df5b:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001df61:	0f ba e0 1e          	bt     eax,0x1e
c001df65:	72 b5                	jb     c001df1c <SATA::access(unsigned long long, int, void*, bool)+0x1e8>
c001df67:	31 c0                	xor    eax,eax
c001df69:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001df6e:	75 10                	jne    c001df80 <SATA::access(unsigned long long, int, void*, bool)+0x24c>
c001df70:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001df76:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001df7a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001df7e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001df80:	83 c4 2c             	add    esp,0x2c
c001df83:	5b                   	pop    ebx
c001df84:	5e                   	pop    esi
c001df85:	5f                   	pop    edi
c001df86:	5d                   	pop    ebp
c001df87:	c3                   	ret    

c001df88 <SATA::read(unsigned long long, int, void*)>:
c001df88:	55                   	push   ebp
c001df89:	57                   	push   edi
c001df8a:	56                   	push   esi
c001df8b:	be 04 00 00 00       	mov    esi,0x4
c001df90:	53                   	push   ebx
c001df91:	83 ec 0c             	sub    esp,0xc
c001df94:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001df98:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001df9c:	8d 7b ff             	lea    edi,[ebx-0x1]
c001df9f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001dfa3:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001dfa7:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001dfad:	0f 87 1a 02 00 00    	ja     c001e1cd <SATA::read(unsigned long long, int, void*)+0x245>
c001dfb3:	be 06 00 00 00       	mov    esi,0x6
c001dfb8:	85 c9                	test   ecx,ecx
c001dfba:	0f 84 0d 02 00 00    	je     c001e1cd <SATA::read(unsigned long long, int, void*)+0x245>
c001dfc0:	56                   	push   esi
c001dfc1:	56                   	push   esi
c001dfc2:	6a 00                	push   0x0
c001dfc4:	51                   	push   ecx
c001dfc5:	53                   	push   ebx
c001dfc6:	52                   	push   edx
c001dfc7:	50                   	push   eax
c001dfc8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001dfcc:	e8 63 fd ff ff       	call   c001dd34 <SATA::access(unsigned long long, int, void*, bool)>
c001dfd1:	83 c4 20             	add    esp,0x20
c001dfd4:	89 c6                	mov    esi,eax
c001dfd6:	85 c0                	test   eax,eax
c001dfd8:	0f 85 ea 01 00 00    	jne    c001e1c8 <SATA::read(unsigned long long, int, void*)+0x240>
c001dfde:	01 1d b4 d0 02 c0    	add    DWORD PTR ds:0xc002d0b4,ebx
c001dfe4:	bb 0a 00 00 00       	mov    ebx,0xa
c001dfe9:	50                   	push   eax
c001dfea:	50                   	push   eax
c001dfeb:	6a 0f                	push   0xf
c001dfed:	6a 00                	push   0x0
c001dfef:	e8 75 f2 ff ff       	call   c001d269 <combineColours(unsigned char, unsigned char)>
c001dff4:	5a                   	pop    edx
c001dff5:	0f b6 c0             	movzx  eax,al
c001dff8:	59                   	pop    ecx
c001dff9:	b9 10 27 00 00       	mov    ecx,0x2710
c001dffe:	50                   	push   eax
c001dfff:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e004:	99                   	cdq    
c001e005:	f7 f9                	idiv   ecx
c001e007:	99                   	cdq    
c001e008:	f7 fb                	idiv   ebx
c001e00a:	8d 42 30             	lea    eax,[edx+0x30]
c001e00d:	0f b6 c0             	movzx  eax,al
c001e010:	50                   	push   eax
c001e011:	e8 42 f2 ff ff       	call   c001d258 <combineCharAndColour(char, unsigned char)>
c001e016:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001e01c:	5f                   	pop    edi
c001e01d:	5d                   	pop    ebp
c001e01e:	bd e8 03 00 00       	mov    ebp,0x3e8
c001e023:	6a 0f                	push   0xf
c001e025:	6a 00                	push   0x0
c001e027:	e8 3d f2 ff ff       	call   c001d269 <combineColours(unsigned char, unsigned char)>
c001e02c:	5a                   	pop    edx
c001e02d:	0f b6 c0             	movzx  eax,al
c001e030:	59                   	pop    ecx
c001e031:	50                   	push   eax
c001e032:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e037:	99                   	cdq    
c001e038:	f7 fd                	idiv   ebp
c001e03a:	99                   	cdq    
c001e03b:	f7 fb                	idiv   ebx
c001e03d:	8d 42 30             	lea    eax,[edx+0x30]
c001e040:	0f b6 c0             	movzx  eax,al
c001e043:	50                   	push   eax
c001e044:	e8 0f f2 ff ff       	call   c001d258 <combineCharAndColour(char, unsigned char)>
c001e049:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001e04f:	5f                   	pop    edi
c001e050:	bf 64 00 00 00       	mov    edi,0x64
c001e055:	58                   	pop    eax
c001e056:	6a 0f                	push   0xf
c001e058:	6a 00                	push   0x0
c001e05a:	e8 0a f2 ff ff       	call   c001d269 <combineColours(unsigned char, unsigned char)>
c001e05f:	5a                   	pop    edx
c001e060:	0f b6 c0             	movzx  eax,al
c001e063:	59                   	pop    ecx
c001e064:	50                   	push   eax
c001e065:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e06a:	99                   	cdq    
c001e06b:	f7 ff                	idiv   edi
c001e06d:	99                   	cdq    
c001e06e:	f7 fb                	idiv   ebx
c001e070:	8d 42 30             	lea    eax,[edx+0x30]
c001e073:	0f b6 c0             	movzx  eax,al
c001e076:	50                   	push   eax
c001e077:	e8 dc f1 ff ff       	call   c001d258 <combineCharAndColour(char, unsigned char)>
c001e07c:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001e082:	58                   	pop    eax
c001e083:	5a                   	pop    edx
c001e084:	6a 0f                	push   0xf
c001e086:	6a 00                	push   0x0
c001e088:	e8 dc f1 ff ff       	call   c001d269 <combineColours(unsigned char, unsigned char)>
c001e08d:	59                   	pop    ecx
c001e08e:	0f b6 c0             	movzx  eax,al
c001e091:	5a                   	pop    edx
c001e092:	50                   	push   eax
c001e093:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e098:	99                   	cdq    
c001e099:	f7 fb                	idiv   ebx
c001e09b:	99                   	cdq    
c001e09c:	f7 fb                	idiv   ebx
c001e09e:	8d 42 30             	lea    eax,[edx+0x30]
c001e0a1:	0f b6 c0             	movzx  eax,al
c001e0a4:	50                   	push   eax
c001e0a5:	e8 ae f1 ff ff       	call   c001d258 <combineCharAndColour(char, unsigned char)>
c001e0aa:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001e0b0:	59                   	pop    ecx
c001e0b1:	58                   	pop    eax
c001e0b2:	6a 0f                	push   0xf
c001e0b4:	6a 00                	push   0x0
c001e0b6:	e8 ae f1 ff ff       	call   c001d269 <combineColours(unsigned char, unsigned char)>
c001e0bb:	5a                   	pop    edx
c001e0bc:	0f b6 c0             	movzx  eax,al
c001e0bf:	59                   	pop    ecx
c001e0c0:	50                   	push   eax
c001e0c1:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e0c6:	99                   	cdq    
c001e0c7:	f7 fb                	idiv   ebx
c001e0c9:	8d 42 30             	lea    eax,[edx+0x30]
c001e0cc:	0f b6 c0             	movzx  eax,al
c001e0cf:	50                   	push   eax
c001e0d0:	e8 83 f1 ff ff       	call   c001d258 <combineCharAndColour(char, unsigned char)>
c001e0d5:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001e0db:	58                   	pop    eax
c001e0dc:	5a                   	pop    edx
c001e0dd:	6a 0f                	push   0xf
c001e0df:	6a 00                	push   0x0
c001e0e1:	e8 83 f1 ff ff       	call   c001d269 <combineColours(unsigned char, unsigned char)>
c001e0e6:	59                   	pop    ecx
c001e0e7:	0f b6 c0             	movzx  eax,al
c001e0ea:	5a                   	pop    edx
c001e0eb:	b9 10 27 00 00       	mov    ecx,0x2710
c001e0f0:	50                   	push   eax
c001e0f1:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e0f6:	99                   	cdq    
c001e0f7:	f7 f9                	idiv   ecx
c001e0f9:	99                   	cdq    
c001e0fa:	f7 fb                	idiv   ebx
c001e0fc:	8d 42 30             	lea    eax,[edx+0x30]
c001e0ff:	0f b6 c0             	movzx  eax,al
c001e102:	50                   	push   eax
c001e103:	e8 50 f1 ff ff       	call   c001d258 <combineCharAndColour(char, unsigned char)>
c001e108:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001e10e:	59                   	pop    ecx
c001e10f:	58                   	pop    eax
c001e110:	6a 0f                	push   0xf
c001e112:	6a 00                	push   0x0
c001e114:	e8 50 f1 ff ff       	call   c001d269 <combineColours(unsigned char, unsigned char)>
c001e119:	5a                   	pop    edx
c001e11a:	0f b6 c0             	movzx  eax,al
c001e11d:	59                   	pop    ecx
c001e11e:	50                   	push   eax
c001e11f:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e124:	99                   	cdq    
c001e125:	f7 fd                	idiv   ebp
c001e127:	99                   	cdq    
c001e128:	f7 fb                	idiv   ebx
c001e12a:	8d 42 30             	lea    eax,[edx+0x30]
c001e12d:	0f b6 c0             	movzx  eax,al
c001e130:	50                   	push   eax
c001e131:	e8 22 f1 ff ff       	call   c001d258 <combineCharAndColour(char, unsigned char)>
c001e136:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001e13c:	5d                   	pop    ebp
c001e13d:	58                   	pop    eax
c001e13e:	6a 0f                	push   0xf
c001e140:	6a 00                	push   0x0
c001e142:	e8 22 f1 ff ff       	call   c001d269 <combineColours(unsigned char, unsigned char)>
c001e147:	5a                   	pop    edx
c001e148:	0f b6 c0             	movzx  eax,al
c001e14b:	59                   	pop    ecx
c001e14c:	50                   	push   eax
c001e14d:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e152:	99                   	cdq    
c001e153:	f7 ff                	idiv   edi
c001e155:	99                   	cdq    
c001e156:	f7 fb                	idiv   ebx
c001e158:	8d 42 30             	lea    eax,[edx+0x30]
c001e15b:	0f b6 c0             	movzx  eax,al
c001e15e:	50                   	push   eax
c001e15f:	e8 f4 f0 ff ff       	call   c001d258 <combineCharAndColour(char, unsigned char)>
c001e164:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001e16a:	5f                   	pop    edi
c001e16b:	5d                   	pop    ebp
c001e16c:	6a 0f                	push   0xf
c001e16e:	6a 00                	push   0x0
c001e170:	e8 f4 f0 ff ff       	call   c001d269 <combineColours(unsigned char, unsigned char)>
c001e175:	5a                   	pop    edx
c001e176:	0f b6 c0             	movzx  eax,al
c001e179:	59                   	pop    ecx
c001e17a:	50                   	push   eax
c001e17b:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e180:	99                   	cdq    
c001e181:	f7 fb                	idiv   ebx
c001e183:	99                   	cdq    
c001e184:	f7 fb                	idiv   ebx
c001e186:	8d 42 30             	lea    eax,[edx+0x30]
c001e189:	0f b6 c0             	movzx  eax,al
c001e18c:	50                   	push   eax
c001e18d:	e8 c6 f0 ff ff       	call   c001d258 <combineCharAndColour(char, unsigned char)>
c001e192:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001e198:	5f                   	pop    edi
c001e199:	5d                   	pop    ebp
c001e19a:	6a 0f                	push   0xf
c001e19c:	6a 00                	push   0x0
c001e19e:	e8 c6 f0 ff ff       	call   c001d269 <combineColours(unsigned char, unsigned char)>
c001e1a3:	5a                   	pop    edx
c001e1a4:	0f b6 c0             	movzx  eax,al
c001e1a7:	59                   	pop    ecx
c001e1a8:	50                   	push   eax
c001e1a9:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e1ae:	99                   	cdq    
c001e1af:	f7 fb                	idiv   ebx
c001e1b1:	83 c2 30             	add    edx,0x30
c001e1b4:	0f b6 d2             	movzx  edx,dl
c001e1b7:	52                   	push   edx
c001e1b8:	e8 9b f0 ff ff       	call   c001d258 <combineCharAndColour(char, unsigned char)>
c001e1bd:	83 c4 10             	add    esp,0x10
c001e1c0:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001e1c6:	eb 05                	jmp    c001e1cd <SATA::read(unsigned long long, int, void*)+0x245>
c001e1c8:	be 01 00 00 00       	mov    esi,0x1
c001e1cd:	83 c4 0c             	add    esp,0xc
c001e1d0:	89 f0                	mov    eax,esi
c001e1d2:	5b                   	pop    ebx
c001e1d3:	5e                   	pop    esi
c001e1d4:	5f                   	pop    edi
c001e1d5:	5d                   	pop    ebp
c001e1d6:	c3                   	ret    
c001e1d7:	90                   	nop

c001e1d8 <SATA::write(unsigned long long, int, void*)>:
c001e1d8:	55                   	push   ebp
c001e1d9:	b8 04 00 00 00       	mov    eax,0x4
c001e1de:	57                   	push   edi
c001e1df:	56                   	push   esi
c001e1e0:	53                   	push   ebx
c001e1e1:	83 ec 1c             	sub    esp,0x1c
c001e1e4:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001e1e8:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001e1ec:	8d 75 ff             	lea    esi,[ebp-0x1]
c001e1ef:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001e1f3:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c001e1f7:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001e1fd:	0f 87 32 02 00 00    	ja     c001e435 <SATA::write(unsigned long long, int, void*)+0x25d>
c001e203:	b8 06 00 00 00       	mov    eax,0x6
c001e208:	85 ff                	test   edi,edi
c001e20a:	0f 84 25 02 00 00    	je     c001e435 <SATA::write(unsigned long long, int, void*)+0x25d>
c001e210:	89 ee                	mov    esi,ebp
c001e212:	c1 e6 09             	shl    esi,0x9
c001e215:	01 fe                	add    esi,edi
c001e217:	89 c8                	mov    eax,ecx
c001e219:	89 da                	mov    edx,ebx
c001e21b:	83 c0 01             	add    eax,0x1
c001e21e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e222:	83 d2 00             	adc    edx,0x0
c001e225:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e229:	50                   	push   eax
c001e22a:	50                   	push   eax
c001e22b:	6a 01                	push   0x1
c001e22d:	57                   	push   edi
c001e22e:	81 c7 00 02 00 00    	add    edi,0x200
c001e234:	6a 01                	push   0x1
c001e236:	53                   	push   ebx
c001e237:	51                   	push   ecx
c001e238:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001e23c:	e8 f3 fa ff ff       	call   c001dd34 <SATA::access(unsigned long long, int, void*, bool)>
c001e241:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001e245:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001e249:	83 c4 20             	add    esp,0x20
c001e24c:	39 f7                	cmp    edi,esi
c001e24e:	75 c7                	jne    c001e217 <SATA::write(unsigned long long, int, void*)+0x3f>
c001e250:	bb 0a 00 00 00       	mov    ebx,0xa
c001e255:	01 2d b0 d0 02 c0    	add    DWORD PTR ds:0xc002d0b0,ebp
c001e25b:	bd 10 27 00 00       	mov    ebp,0x2710
c001e260:	50                   	push   eax
c001e261:	50                   	push   eax
c001e262:	6a 0f                	push   0xf
c001e264:	6a 00                	push   0x0
c001e266:	e8 fe ef ff ff       	call   c001d269 <combineColours(unsigned char, unsigned char)>
c001e26b:	5a                   	pop    edx
c001e26c:	0f b6 c0             	movzx  eax,al
c001e26f:	59                   	pop    ecx
c001e270:	50                   	push   eax
c001e271:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e276:	99                   	cdq    
c001e277:	f7 fd                	idiv   ebp
c001e279:	99                   	cdq    
c001e27a:	f7 fb                	idiv   ebx
c001e27c:	8d 42 30             	lea    eax,[edx+0x30]
c001e27f:	0f b6 c0             	movzx  eax,al
c001e282:	50                   	push   eax
c001e283:	e8 d0 ef ff ff       	call   c001d258 <combineCharAndColour(char, unsigned char)>
c001e288:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001e28e:	5e                   	pop    esi
c001e28f:	5f                   	pop    edi
c001e290:	bf e8 03 00 00       	mov    edi,0x3e8
c001e295:	6a 0f                	push   0xf
c001e297:	6a 00                	push   0x0
c001e299:	e8 cb ef ff ff       	call   c001d269 <combineColours(unsigned char, unsigned char)>
c001e29e:	5a                   	pop    edx
c001e29f:	0f b6 c0             	movzx  eax,al
c001e2a2:	59                   	pop    ecx
c001e2a3:	50                   	push   eax
c001e2a4:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e2a9:	99                   	cdq    
c001e2aa:	f7 ff                	idiv   edi
c001e2ac:	99                   	cdq    
c001e2ad:	f7 fb                	idiv   ebx
c001e2af:	8d 42 30             	lea    eax,[edx+0x30]
c001e2b2:	0f b6 c0             	movzx  eax,al
c001e2b5:	50                   	push   eax
c001e2b6:	e8 9d ef ff ff       	call   c001d258 <combineCharAndColour(char, unsigned char)>
c001e2bb:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001e2c1:	5e                   	pop    esi
c001e2c2:	be 64 00 00 00       	mov    esi,0x64
c001e2c7:	58                   	pop    eax
c001e2c8:	6a 0f                	push   0xf
c001e2ca:	6a 00                	push   0x0
c001e2cc:	e8 98 ef ff ff       	call   c001d269 <combineColours(unsigned char, unsigned char)>
c001e2d1:	5a                   	pop    edx
c001e2d2:	0f b6 c0             	movzx  eax,al
c001e2d5:	59                   	pop    ecx
c001e2d6:	50                   	push   eax
c001e2d7:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e2dc:	99                   	cdq    
c001e2dd:	f7 fe                	idiv   esi
c001e2df:	99                   	cdq    
c001e2e0:	f7 fb                	idiv   ebx
c001e2e2:	8d 42 30             	lea    eax,[edx+0x30]
c001e2e5:	0f b6 c0             	movzx  eax,al
c001e2e8:	50                   	push   eax
c001e2e9:	e8 6a ef ff ff       	call   c001d258 <combineCharAndColour(char, unsigned char)>
c001e2ee:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001e2f4:	58                   	pop    eax
c001e2f5:	5a                   	pop    edx
c001e2f6:	6a 0f                	push   0xf
c001e2f8:	6a 00                	push   0x0
c001e2fa:	e8 6a ef ff ff       	call   c001d269 <combineColours(unsigned char, unsigned char)>
c001e2ff:	59                   	pop    ecx
c001e300:	0f b6 c0             	movzx  eax,al
c001e303:	5a                   	pop    edx
c001e304:	50                   	push   eax
c001e305:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e30a:	99                   	cdq    
c001e30b:	f7 fb                	idiv   ebx
c001e30d:	99                   	cdq    
c001e30e:	f7 fb                	idiv   ebx
c001e310:	8d 42 30             	lea    eax,[edx+0x30]
c001e313:	0f b6 c0             	movzx  eax,al
c001e316:	50                   	push   eax
c001e317:	e8 3c ef ff ff       	call   c001d258 <combineCharAndColour(char, unsigned char)>
c001e31c:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001e322:	59                   	pop    ecx
c001e323:	58                   	pop    eax
c001e324:	6a 0f                	push   0xf
c001e326:	6a 00                	push   0x0
c001e328:	e8 3c ef ff ff       	call   c001d269 <combineColours(unsigned char, unsigned char)>
c001e32d:	5a                   	pop    edx
c001e32e:	0f b6 c0             	movzx  eax,al
c001e331:	59                   	pop    ecx
c001e332:	50                   	push   eax
c001e333:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e338:	99                   	cdq    
c001e339:	f7 fb                	idiv   ebx
c001e33b:	83 c2 30             	add    edx,0x30
c001e33e:	0f b6 d2             	movzx  edx,dl
c001e341:	52                   	push   edx
c001e342:	e8 11 ef ff ff       	call   c001d258 <combineCharAndColour(char, unsigned char)>
c001e347:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001e34d:	58                   	pop    eax
c001e34e:	5a                   	pop    edx
c001e34f:	6a 0f                	push   0xf
c001e351:	6a 00                	push   0x0
c001e353:	e8 11 ef ff ff       	call   c001d269 <combineColours(unsigned char, unsigned char)>
c001e358:	59                   	pop    ecx
c001e359:	0f b6 c0             	movzx  eax,al
c001e35c:	5a                   	pop    edx
c001e35d:	50                   	push   eax
c001e35e:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e363:	99                   	cdq    
c001e364:	f7 fd                	idiv   ebp
c001e366:	99                   	cdq    
c001e367:	f7 fb                	idiv   ebx
c001e369:	8d 42 30             	lea    eax,[edx+0x30]
c001e36c:	0f b6 c0             	movzx  eax,al
c001e36f:	50                   	push   eax
c001e370:	e8 e3 ee ff ff       	call   c001d258 <combineCharAndColour(char, unsigned char)>
c001e375:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001e37b:	59                   	pop    ecx
c001e37c:	5d                   	pop    ebp
c001e37d:	6a 0f                	push   0xf
c001e37f:	6a 00                	push   0x0
c001e381:	e8 e3 ee ff ff       	call   c001d269 <combineColours(unsigned char, unsigned char)>
c001e386:	5a                   	pop    edx
c001e387:	0f b6 c0             	movzx  eax,al
c001e38a:	59                   	pop    ecx
c001e38b:	50                   	push   eax
c001e38c:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e391:	99                   	cdq    
c001e392:	f7 ff                	idiv   edi
c001e394:	99                   	cdq    
c001e395:	f7 fb                	idiv   ebx
c001e397:	8d 42 30             	lea    eax,[edx+0x30]
c001e39a:	0f b6 c0             	movzx  eax,al
c001e39d:	50                   	push   eax
c001e39e:	e8 b5 ee ff ff       	call   c001d258 <combineCharAndColour(char, unsigned char)>
c001e3a3:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001e3a9:	5f                   	pop    edi
c001e3aa:	5d                   	pop    ebp
c001e3ab:	6a 0f                	push   0xf
c001e3ad:	6a 00                	push   0x0
c001e3af:	e8 b5 ee ff ff       	call   c001d269 <combineColours(unsigned char, unsigned char)>
c001e3b4:	5a                   	pop    edx
c001e3b5:	0f b6 c0             	movzx  eax,al
c001e3b8:	59                   	pop    ecx
c001e3b9:	50                   	push   eax
c001e3ba:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e3bf:	99                   	cdq    
c001e3c0:	f7 fe                	idiv   esi
c001e3c2:	99                   	cdq    
c001e3c3:	f7 fb                	idiv   ebx
c001e3c5:	8d 42 30             	lea    eax,[edx+0x30]
c001e3c8:	0f b6 c0             	movzx  eax,al
c001e3cb:	50                   	push   eax
c001e3cc:	e8 87 ee ff ff       	call   c001d258 <combineCharAndColour(char, unsigned char)>
c001e3d1:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001e3d7:	5e                   	pop    esi
c001e3d8:	5f                   	pop    edi
c001e3d9:	6a 0f                	push   0xf
c001e3db:	6a 00                	push   0x0
c001e3dd:	e8 87 ee ff ff       	call   c001d269 <combineColours(unsigned char, unsigned char)>
c001e3e2:	5d                   	pop    ebp
c001e3e3:	0f b6 c0             	movzx  eax,al
c001e3e6:	5a                   	pop    edx
c001e3e7:	50                   	push   eax
c001e3e8:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e3ed:	99                   	cdq    
c001e3ee:	f7 fb                	idiv   ebx
c001e3f0:	99                   	cdq    
c001e3f1:	f7 fb                	idiv   ebx
c001e3f3:	8d 42 30             	lea    eax,[edx+0x30]
c001e3f6:	0f b6 c0             	movzx  eax,al
c001e3f9:	50                   	push   eax
c001e3fa:	e8 59 ee ff ff       	call   c001d258 <combineCharAndColour(char, unsigned char)>
c001e3ff:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001e405:	59                   	pop    ecx
c001e406:	5e                   	pop    esi
c001e407:	6a 0f                	push   0xf
c001e409:	6a 00                	push   0x0
c001e40b:	e8 59 ee ff ff       	call   c001d269 <combineColours(unsigned char, unsigned char)>
c001e410:	5f                   	pop    edi
c001e411:	0f b6 c0             	movzx  eax,al
c001e414:	5d                   	pop    ebp
c001e415:	50                   	push   eax
c001e416:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e41b:	99                   	cdq    
c001e41c:	f7 fb                	idiv   ebx
c001e41e:	83 c2 30             	add    edx,0x30
c001e421:	0f b6 d2             	movzx  edx,dl
c001e424:	52                   	push   edx
c001e425:	e8 2e ee ff ff       	call   c001d258 <combineCharAndColour(char, unsigned char)>
c001e42a:	83 c4 10             	add    esp,0x10
c001e42d:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001e433:	31 c0                	xor    eax,eax
c001e435:	83 c4 1c             	add    esp,0x1c
c001e438:	5b                   	pop    ebx
c001e439:	5e                   	pop    esi
c001e43a:	5f                   	pop    edi
c001e43b:	5d                   	pop    ebp
c001e43c:	c3                   	ret    
c001e43d:	90                   	nop

c001e43e <SATAPI::write(unsigned long long, int, void*)>:
c001e43e:	b8 03 00 00 00       	mov    eax,0x3
c001e443:	c3                   	ret    

c001e444 <SATAPI::close(int, int, void*)>:
c001e444:	83 ec 0c             	sub    esp,0xc
c001e447:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e44b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001e451:	85 c0                	test   eax,eax
c001e453:	74 0c                	je     c001e461 <SATAPI::close(int, int, void*)+0x1d>
c001e455:	83 ec 0c             	sub    esp,0xc
c001e458:	8b 10                	mov    edx,DWORD PTR [eax]
c001e45a:	50                   	push   eax
c001e45b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001e45e:	83 c4 10             	add    esp,0x10
c001e461:	31 c0                	xor    eax,eax
c001e463:	83 c4 0c             	add    esp,0xc
c001e466:	c3                   	ret    
c001e467:	90                   	nop

c001e468 <SATAPI::SATAPI()>:
c001e468:	83 ec 0c             	sub    esp,0xc
c001e46b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e46f:	83 ec 04             	sub    esp,0x4
c001e472:	68 00 08 00 00       	push   0x800
c001e477:	68 f0 35 02 c0       	push   0xc00235f0
c001e47c:	50                   	push   eax
c001e47d:	e8 40 e9 fe ff       	call   c000cdc2 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001e482:	83 c4 10             	add    esp,0x10
c001e485:	ba e4 36 02 c0       	mov    edx,0xc00236e4
c001e48a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e48e:	89 10                	mov    DWORD PTR [eax],edx
c001e490:	90                   	nop
c001e491:	83 c4 0c             	add    esp,0xc
c001e494:	c3                   	ret    
c001e495:	90                   	nop

c001e496 <SATAPI::diskRemoved()>:
c001e496:	c3                   	ret    
c001e497:	90                   	nop

c001e498 <SATAPI::diskInserted()>:
c001e498:	83 ec 18             	sub    esp,0x18
c001e49b:	68 fc 35 02 c0       	push   0xc00235fc
c001e4a0:	e8 d0 c4 fe ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c001e4a5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e4a9:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c001e4b0:	83 c4 1c             	add    esp,0x1c
c001e4b3:	c3                   	ret    

c001e4b4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001e4b4:	55                   	push   ebp
c001e4b5:	57                   	push   edi
c001e4b6:	56                   	push   esi
c001e4b7:	53                   	push   ebx
c001e4b8:	83 ec 34             	sub    esp,0x34
c001e4bb:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001e4bf:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001e4c3:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001e4c7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001e4cb:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c001e4cf:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001e4d5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001e4db:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001e4df:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001e4e5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001e4e9:	83 c0 02             	add    eax,0x2
c001e4ec:	c1 e0 07             	shl    eax,0x7
c001e4ef:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001e4f3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e4f7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e4fb:	c1 e0 07             	shl    eax,0x7
c001e4fe:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001e502:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001e506:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001e510:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001e514:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001e51a:	e8 21 e5 ff ff       	call   c001ca40 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001e51f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001e523:	83 c4 10             	add    esp,0x10
c001e526:	b8 01 00 00 00       	mov    eax,0x1
c001e52b:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001e530:	0f 84 53 02 00 00    	je     c001e789 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d5>
c001e536:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001e53c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e540:	8b 00                	mov    eax,DWORD PTR [eax]
c001e542:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001e548:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001e54e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e552:	c1 e1 05             	shl    ecx,0x5
c001e555:	01 c8                	add    eax,ecx
c001e557:	8b 08                	mov    ecx,DWORD PTR [eax]
c001e559:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001e55f:	81 c9 25 00 01 00    	or     ecx,0x10025
c001e565:	89 08                	mov    DWORD PTR [eax],ecx
c001e567:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001e56d:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001e573:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001e579:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001e57c:	8d 7b 40             	lea    edi,[ebx+0x40]
c001e57f:	50                   	push   eax
c001e580:	68 90 00 00 00       	push   0x90
c001e585:	6a 00                	push   0x0
c001e587:	53                   	push   ebx
c001e588:	e8 63 1f fe ff       	call   c00004f0 <memset>
c001e58d:	b9 0c 00 00 00       	mov    ecx,0xc
c001e592:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001e596:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e598:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c001e59e:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001e5a2:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001e5a8:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001e5ac:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001e5b0:	48                   	dec    eax
c001e5b1:	25 ff ff 3f 00       	and    eax,0x3fffff
c001e5b6:	89 c1                	mov    ecx,eax
c001e5b8:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001e5be:	25 00 00 c0 ff       	and    eax,0xffc00000
c001e5c3:	09 c8                	or     eax,ecx
c001e5c5:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001e5cb:	8a 83 8f 00 00 00    	mov    al,BYTE PTR [ebx+0x8f]
c001e5d1:	83 c8 80             	or     eax,0xffffff80
c001e5d4:	88 83 8f 00 00 00    	mov    BYTE PTR [ebx+0x8f],al
c001e5da:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001e5dd:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001e5e1:	25 00 7f 00 00       	and    eax,0x7f00
c001e5e6:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c001e5ea:	0d 27 80 ff ff       	or     eax,0xffff8027
c001e5ef:	66 89 03             	mov    WORD PTR [ebx],ax
c001e5f2:	89 d0                	mov    eax,edx
c001e5f4:	c1 ea 18             	shr    edx,0x18
c001e5f7:	c1 e8 10             	shr    eax,0x10
c001e5fa:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c001e5fd:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001e600:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001e604:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001e607:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e60b:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001e60e:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001e612:	83 c4 10             	add    esp,0x10
c001e615:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001e619:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e61d:	31 c0                	xor    eax,eax
c001e61f:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c001e625:	80 e1 88             	and    cl,0x88
c001e628:	74 0a                	je     c001e634 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x180>
c001e62a:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001e62f:	74 0a                	je     c001e63b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x187>
c001e631:	40                   	inc    eax
c001e632:	eb eb                	jmp    c001e61f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c001e634:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001e639:	75 43                	jne    c001e67e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ca>
c001e63b:	83 ec 0c             	sub    esp,0xc
c001e63e:	68 14 36 02 c0       	push   0xc0023614
c001e643:	e8 2d c3 fe ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c001e648:	58                   	pop    eax
c001e649:	5a                   	pop    edx
c001e64a:	68 29 36 02 c0       	push   0xc0023629
c001e64f:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c001e655:	e8 7c a4 fe ff       	call   c0008ad6 <VgaText::puts(char const*)>
c001e65a:	59                   	pop    ecx
c001e65b:	5b                   	pop    ebx
c001e65c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001e660:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001e666:	e8 6f e4 ff ff       	call   c001cada <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001e66b:	5e                   	pop    esi
c001e66c:	5f                   	pop    edi
c001e66d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001e671:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001e677:	e8 3e e4 ff ff       	call   c001caba <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001e67c:	eb 48                	jmp    c001e6c6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x212>
c001e67e:	be 01 00 00 00       	mov    esi,0x1
c001e683:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001e687:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001e68b:	d3 e6                	shl    esi,cl
c001e68d:	c1 e7 07             	shl    edi,0x7
c001e690:	89 b2 38 01 00 00    	mov    DWORD PTR [edx+0x138],esi
c001e696:	bb a8 e4 ff ff       	mov    ebx,0xffffe4a8
c001e69b:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c001e69f:	8b 87 38 01 00 00    	mov    eax,DWORD PTR [edi+0x138]
c001e6a5:	85 c6                	test   esi,eax
c001e6a7:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c001e6ad:	0f 84 a3 00 00 00    	je     c001e756 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2a2>
c001e6b3:	0f ba e0 1e          	bt     eax,0x1e
c001e6b7:	73 1a                	jae    c001e6d3 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21f>
c001e6b9:	83 ec 0c             	sub    esp,0xc
c001e6bc:	68 3b 36 02 c0       	push   0xc002363b
c001e6c1:	e8 af c2 fe ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c001e6c6:	83 c4 10             	add    esp,0x10
c001e6c9:	b8 01 00 00 00       	mov    eax,0x1
c001e6ce:	e9 b6 00 00 00       	jmp    c001e789 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d5>
c001e6d3:	8d 83 70 17 00 00    	lea    eax,[ebx+0x1770]
c001e6d9:	83 f8 0d             	cmp    eax,0xd
c001e6dc:	77 0a                	ja     c001e6e8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x234>
c001e6de:	83 ec 0c             	sub    esp,0xc
c001e6e1:	68 c8 00 00 00       	push   0xc8
c001e6e6:	eb 28                	jmp    c001e710 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25c>
c001e6e8:	8d 83 88 13 00 00    	lea    eax,[ebx+0x1388]
c001e6ee:	83 f8 0d             	cmp    eax,0xd
c001e6f1:	77 0a                	ja     c001e6fd <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x249>
c001e6f3:	83 ec 0c             	sub    esp,0xc
c001e6f6:	68 58 02 00 00       	push   0x258
c001e6fb:	eb 13                	jmp    c001e710 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25c>
c001e6fd:	8d 83 a0 0f 00 00    	lea    eax,[ebx+0xfa0]
c001e703:	83 f8 06             	cmp    eax,0x6
c001e706:	77 10                	ja     c001e718 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001e708:	83 ec 0c             	sub    esp,0xc
c001e70b:	68 dc 05 00 00       	push   0x5dc
c001e710:	e8 c7 7d ff ff       	call   c00164dc <milliTenthSleep(unsigned int)>
c001e715:	83 c4 10             	add    esp,0x10
c001e718:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001e71c:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c001e71f:	75 06                	jne    c001e727 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x273>
c001e721:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c001e725:	74 15                	je     c001e73c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x288>
c001e727:	83 fb 06             	cmp    ebx,0x6
c001e72a:	77 10                	ja     c001e73c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x288>
c001e72c:	83 ec 0c             	sub    esp,0xc
c001e72f:	68 c4 09 00 00       	push   0x9c4
c001e734:	e8 a3 7d ff ff       	call   c00164dc <milliTenthSleep(unsigned int)>
c001e739:	83 c4 10             	add    esp,0x10
c001e73c:	43                   	inc    ebx
c001e73d:	81 fb b9 0b 00 00    	cmp    ebx,0xbb9
c001e743:	0f 85 56 ff ff ff    	jne    c001e69f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1eb>
c001e749:	83 ec 0c             	sub    esp,0xc
c001e74c:	68 4e 36 02 c0       	push   0xc002364e
c001e751:	e9 6b ff ff ff       	jmp    c001e6c1 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20d>
c001e756:	0f ba e0 1e          	bt     eax,0x1e
c001e75a:	73 0d                	jae    c001e769 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2b5>
c001e75c:	83 ec 0c             	sub    esp,0xc
c001e75f:	68 62 36 02 c0       	push   0xc0023662
c001e764:	e9 58 ff ff ff       	jmp    c001e6c1 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20d>
c001e769:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001e76e:	74 17                	je     c001e787 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d3>
c001e770:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001e775:	74 10                	je     c001e787 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d3>
c001e777:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c001e77d:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001e781:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001e785:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e787:	31 c0                	xor    eax,eax
c001e789:	83 c4 2c             	add    esp,0x2c
c001e78c:	5b                   	pop    ebx
c001e78d:	5e                   	pop    esi
c001e78e:	5f                   	pop    edi
c001e78f:	5d                   	pop    ebp
c001e790:	c3                   	ret    
c001e791:	90                   	nop

c001e792 <SATAPI::eject()>:
c001e792:	57                   	push   edi
c001e793:	b9 03 00 00 00       	mov    ecx,0x3
c001e798:	83 ec 18             	sub    esp,0x18
c001e79b:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001e79f:	fc                   	cld    
c001e7a0:	31 c0                	xor    eax,eax
c001e7a2:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e7a4:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001e7a9:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001e7ae:	50                   	push   eax
c001e7af:	6a 00                	push   0x0
c001e7b1:	6a 00                	push   0x0
c001e7b3:	6a 00                	push   0x0
c001e7b5:	6a 00                	push   0x0
c001e7b7:	6a 02                	push   0x2
c001e7b9:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001e7bd:	50                   	push   eax
c001e7be:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001e7c2:	e8 ed fc ff ff       	call   c001e4b4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001e7c7:	31 c0                	xor    eax,eax
c001e7c9:	83 c4 38             	add    esp,0x38
c001e7cc:	5f                   	pop    edi
c001e7cd:	c3                   	ret    

c001e7ce <SATAPI::detectMedia()>:
c001e7ce:	53                   	push   ebx
c001e7cf:	83 ec 14             	sub    esp,0x14
c001e7d2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001e7d6:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001e7dc:	e8 5f ff fe ff       	call   c000e740 <VCache::writeWriteBuffer()>
c001e7e1:	59                   	pop    ecx
c001e7e2:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001e7e8:	e8 43 ff fe ff       	call   c000e730 <VCache::invalidateReadBuffer()>
c001e7ed:	c7 04 24 77 36 02 c0 	mov    DWORD PTR [esp],0xc0023677
c001e7f4:	e8 7c c1 fe ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c001e7f9:	83 c4 10             	add    esp,0x10
c001e7fc:	31 c0                	xor    eax,eax
c001e7fe:	8b 14 85 80 b8 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd4780]
c001e805:	85 d2                	test   edx,edx
c001e807:	74 0f                	je     c001e818 <SATAPI::detectMedia()+0x4a>
c001e809:	39 9a 6c 01 00 00    	cmp    DWORD PTR [edx+0x16c],ebx
c001e80f:	75 07                	jne    c001e818 <SATAPI::detectMedia()+0x4a>
c001e811:	c6 82 70 01 00 00 01 	mov    BYTE PTR [edx+0x170],0x1
c001e818:	40                   	inc    eax
c001e819:	83 f8 1a             	cmp    eax,0x1a
c001e81c:	75 e0                	jne    c001e7fe <SATAPI::detectMedia()+0x30>
c001e81e:	83 c4 08             	add    esp,0x8
c001e821:	5b                   	pop    ebx
c001e822:	c3                   	ret    
c001e823:	90                   	nop

c001e824 <SATAPI::open(int, int, void*)>:
c001e824:	56                   	push   esi
c001e825:	53                   	push   ebx
c001e826:	51                   	push   ecx
c001e827:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e82b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e82f:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001e839:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001e83f:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001e849:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e84d:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001e857:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001e85d:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001e864:	e8 86 95 fe ff       	call   c0007def <Phys::allocatePage()>
c001e869:	89 c6                	mov    esi,eax
c001e86b:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001e871:	81 c6 00 10 00 00    	add    esi,0x1000
c001e877:	e8 73 95 fe ff       	call   c0007def <Phys::allocatePage()>
c001e87c:	39 c6                	cmp    esi,eax
c001e87e:	74 10                	je     c001e890 <SATAPI::open(int, int, void*)+0x6c>
c001e880:	83 ec 0c             	sub    esp,0xc
c001e883:	68 8c 36 02 c0       	push   0xc002368c
c001e888:	e8 3a 2e ff ff       	call   c00116c7 <KePanic(char const*)>
c001e88d:	83 c4 10             	add    esp,0x10
c001e890:	83 ec 0c             	sub    esp,0xc
c001e893:	6a 02                	push   0x2
c001e895:	e8 a3 ad fe ff       	call   c000963d <Virt::allocateKernelVirtualPages(int)>
c001e89a:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001e8a0:	6a 03                	push   0x3
c001e8a2:	50                   	push   eax
c001e8a3:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001e8a9:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c001e8af:	e8 9c b4 fe ff       	call   c0009d50 <VAS::mapPage(unsigned long, unsigned long, int)>
c001e8b4:	83 c4 14             	add    esp,0x14
c001e8b7:	68 78 01 00 00       	push   0x178
c001e8bc:	e8 25 92 fe ff       	call   c0007ae6 <malloc>
c001e8c1:	83 c4 0c             	add    esp,0xc
c001e8c4:	89 c6                	mov    esi,eax
c001e8c6:	6a 00                	push   0x0
c001e8c8:	68 ff ff ff 7f       	push   0x7fffffff
c001e8cd:	6a 00                	push   0x0
c001e8cf:	6a 00                	push   0x0
c001e8d1:	53                   	push   ebx
c001e8d2:	68 a2 36 02 c0       	push   0xc00236a2
c001e8d7:	50                   	push   eax
c001e8d8:	e8 bf f2 fe ff       	call   c000db9c <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001e8dd:	83 c4 14             	add    esp,0x14
c001e8e0:	56                   	push   esi
c001e8e1:	e8 76 f3 fe ff       	call   c000dc5c <LogicalDisk::assignDriveLetter()>
c001e8e6:	5a                   	pop    edx
c001e8e7:	0f be c0             	movsx  eax,al
c001e8ea:	59                   	pop    ecx
c001e8eb:	50                   	push   eax
c001e8ec:	68 f4 34 02 c0       	push   0xc00234f4
c001e8f1:	e8 7f c0 fe ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c001e8f6:	58                   	pop    eax
c001e8f7:	5a                   	pop    edx
c001e8f8:	56                   	push   esi
c001e8f9:	53                   	push   ebx
c001e8fa:	e8 f7 e0 fe ff       	call   c000c9f6 <Device::addChild(Device*)>
c001e8ff:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c001e905:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e908:	e8 1d e5 fe ff       	call   c000ce2a <PhysicalDisk::startCache()>
c001e90d:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001e914:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e917:	e8 b2 fe ff ff       	call   c001e7ce <SATAPI::detectMedia()>
c001e91c:	83 c4 14             	add    esp,0x14
c001e91f:	31 c0                	xor    eax,eax
c001e921:	5b                   	pop    ebx
c001e922:	5e                   	pop    esi
c001e923:	c3                   	ret    

c001e924 <SATAPI::read(unsigned long long, int, void*)>:
c001e924:	57                   	push   edi
c001e925:	56                   	push   esi
c001e926:	53                   	push   ebx
c001e927:	83 ec 30             	sub    esp,0x30
c001e92a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001e92e:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c001e932:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c001e936:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001e93a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e93e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e942:	83 fe 04             	cmp    esi,0x4
c001e945:	7e 10                	jle    c001e957 <SATAPI::read(unsigned long long, int, void*)+0x33>
c001e947:	83 ec 0c             	sub    esp,0xc
c001e94a:	68 b0 36 02 c0       	push   0xc00236b0
c001e94f:	e8 73 2d ff ff       	call   c00116c7 <KePanic(char const*)>
c001e954:	83 c4 10             	add    esp,0x10
c001e957:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001e95d:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001e963:	51                   	push   ecx
c001e964:	50                   	push   eax
c001e965:	83 c0 02             	add    eax,0x2
c001e968:	c1 e0 07             	shl    eax,0x7
c001e96b:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c001e971:	50                   	push   eax
c001e972:	52                   	push   edx
c001e973:	e8 8c e1 ff ff       	call   c001cb04 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001e978:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001e97c:	b9 03 00 00 00       	mov    ecx,0x3
c001e981:	fc                   	cld    
c001e982:	31 c0                	xor    eax,eax
c001e984:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e986:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c001e98b:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c001e990:	83 c4 0c             	add    esp,0xc
c001e993:	6a 00                	push   0x0
c001e995:	6a 00                	push   0x0
c001e997:	6a 00                	push   0x0
c001e999:	6a 00                	push   0x0
c001e99b:	6a 02                	push   0x2
c001e99d:	8d 44 24 30          	lea    eax,[esp+0x30]
c001e9a1:	50                   	push   eax
c001e9a2:	53                   	push   ebx
c001e9a3:	e8 0c fb ff ff       	call   c001e4b4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001e9a8:	83 c4 20             	add    esp,0x20
c001e9ab:	85 c0                	test   eax,eax
c001e9ad:	75 44                	jne    c001e9f3 <SATAPI::read(unsigned long long, int, void*)+0xcf>
c001e9af:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001e9b3:	b9 03 00 00 00       	mov    ecx,0x3
c001e9b8:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e9ba:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e9be:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c001e9c3:	0f c8                	bswap  eax
c001e9c5:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c001e9c9:	89 f0                	mov    eax,esi
c001e9cb:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001e9cf:	50                   	push   eax
c001e9d0:	56                   	push   esi
c001e9d1:	c1 e6 0b             	shl    esi,0xb
c001e9d4:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001e9d8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e9dc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e9e0:	56                   	push   esi
c001e9e1:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001e9e5:	50                   	push   eax
c001e9e6:	53                   	push   ebx
c001e9e7:	e8 c8 fa ff ff       	call   c001e4b4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001e9ec:	83 c4 20             	add    esp,0x20
c001e9ef:	85 c0                	test   eax,eax
c001e9f1:	74 14                	je     c001ea07 <SATAPI::read(unsigned long long, int, void*)+0xe3>
c001e9f3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e9f7:	83 ec 0c             	sub    esp,0xc
c001e9fa:	53                   	push   ebx
c001e9fb:	e8 ce fd ff ff       	call   c001e7ce <SATAPI::detectMedia()>
c001ea00:	83 c4 10             	add    esp,0x10
c001ea03:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ea07:	83 c4 30             	add    esp,0x30
c001ea0a:	5b                   	pop    ebx
c001ea0b:	5e                   	pop    esi
c001ea0c:	5f                   	pop    edi
c001ea0d:	c3                   	ret    

c001ea0e <IOAPIC::close(int, int, void*)>:
c001ea0e:	b8 00 00 00 00       	mov    eax,0x0
c001ea13:	c3                   	ret    

c001ea14 <apicGetBase()>:
c001ea14:	55                   	push   ebp
c001ea15:	89 e5                	mov    ebp,esp
c001ea17:	83 ec 18             	sub    esp,0x18
c001ea1a:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001ea1f:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001ea25:	83 e0 08             	and    eax,0x8
c001ea28:	0f b6 c0             	movzx  eax,al
c001ea2b:	85 c0                	test   eax,eax
c001ea2d:	75 07                	jne    c001ea36 <apicGetBase()+0x22>
c001ea2f:	b8 00 00 00 00       	mov    eax,0x0
c001ea34:	eb 21                	jmp    c001ea57 <apicGetBase()+0x43>
c001ea36:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001ea3b:	83 ec 08             	sub    esp,0x8
c001ea3e:	6a 1b                	push   0x1b
c001ea40:	50                   	push   eax
c001ea41:	e8 ac 86 fe ff       	call   c00070f2 <Computer::rdmsr(unsigned int)>
c001ea46:	83 c4 10             	add    esp,0x10
c001ea49:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001ea4c:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001ea4f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001ea52:	25 00 00 ff ff       	and    eax,0xffff0000
c001ea57:	c9                   	leave  
c001ea58:	c3                   	ret    
c001ea59:	90                   	nop

c001ea5a <IOAPIC::IOAPIC()>:
c001ea5a:	83 ec 0c             	sub    esp,0xc
c001ea5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea61:	83 ec 08             	sub    esp,0x8
c001ea64:	68 14 37 02 c0       	push   0xc0023714
c001ea69:	50                   	push   eax
c001ea6a:	e8 1f e1 fe ff       	call   c000cb8e <Device::Device(char const*)>
c001ea6f:	83 c4 10             	add    esp,0x10
c001ea72:	ba 24 37 02 c0       	mov    edx,0xc0023724
c001ea77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea7b:	89 10                	mov    DWORD PTR [eax],edx
c001ea7d:	90                   	nop
c001ea7e:	83 c4 0c             	add    esp,0xc
c001ea81:	c3                   	ret    

c001ea82 <apicOpen()>:
c001ea82:	55                   	push   ebp
c001ea83:	89 e5                	mov    ebp,esp
c001ea85:	53                   	push   ebx
c001ea86:	83 ec 34             	sub    esp,0x34
c001ea89:	a0 00 d1 02 c0       	mov    al,ds:0xc002d100
c001ea8e:	83 f0 01             	xor    eax,0x1
c001ea91:	0f b6 c0             	movzx  eax,al
c001ea94:	85 c0                	test   eax,eax
c001ea96:	0f 84 a3 00 00 00    	je     c001eb3f <apicOpen()+0xbd>
c001ea9c:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001eaa0:	a0 e0 bb 02 c0       	mov    al,ds:0xc002bbe0
c001eaa5:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001eaa9:	0f b6 c0             	movzx  eax,al
c001eaac:	39 c2                	cmp    edx,eax
c001eaae:	0f 83 84 00 00 00    	jae    c001eb38 <apicOpen()+0xb6>
c001eab4:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c001eabb:	83 ec 0c             	sub    esp,0xc
c001eabe:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001eac1:	e8 20 90 fe ff       	call   c0007ae6 <malloc>
c001eac6:	83 c4 10             	add    esp,0x10
c001eac9:	89 c3                	mov    ebx,eax
c001eacb:	83 ec 0c             	sub    esp,0xc
c001eace:	53                   	push   ebx
c001eacf:	e8 86 ff ff ff       	call   c001ea5a <IOAPIC::IOAPIC()>
c001ead4:	83 c4 10             	add    esp,0x10
c001ead7:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001eada:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c001eade:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001eae1:	89 14 85 e0 d0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2f20],edx
c001eae8:	a1 c0 d0 02 c0       	mov    eax,ds:0xc002d0c0
c001eaed:	83 c0 01             	add    eax,0x1
c001eaf0:	a3 c0 d0 02 c0       	mov    ds:0xc002d0c0,eax
c001eaf5:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001eafa:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c001eb00:	83 ec 08             	sub    esp,0x8
c001eb03:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001eb06:	50                   	push   eax
c001eb07:	e8 ea de fe ff       	call   c000c9f6 <Device::addChild(Device*)>
c001eb0c:	83 c4 10             	add    esp,0x10
c001eb0f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001eb12:	8b 00                	mov    eax,DWORD PTR [eax]
c001eb14:	83 c0 08             	add    eax,0x8
c001eb17:	8b 00                	mov    eax,DWORD PTR [eax]
c001eb19:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001eb1d:	6a 00                	push   0x0
c001eb1f:	6a 00                	push   0x0
c001eb21:	52                   	push   edx
c001eb22:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001eb25:	ff d0                	call   eax
c001eb27:	83 c4 10             	add    esp,0x10
c001eb2a:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001eb2d:	83 c0 01             	add    eax,0x1
c001eb30:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
c001eb33:	e9 68 ff ff ff       	jmp    c001eaa0 <apicOpen()+0x1e>
c001eb38:	c6 05 00 d1 02 c0 01 	mov    BYTE PTR ds:0xc002d100,0x1
c001eb3f:	e8 d0 fe ff ff       	call   c001ea14 <apicGetBase()>
c001eb44:	05 f0 00 00 00       	add    eax,0xf0
c001eb49:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001eb4c:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001eb4f:	8b 00                	mov    eax,DWORD PTR [eax]
c001eb51:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001eb54:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c001eb5b:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c001eb62:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001eb65:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001eb68:	89 10                	mov    DWORD PTR [eax],edx
c001eb6a:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001eb71:	a1 30 bb 02 c0       	mov    eax,ds:0xc002bb30
c001eb76:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001eb79:	7d 7c                	jge    c001ebf7 <apicOpen()+0x175>
c001eb7b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001eb7e:	8b 04 85 40 bb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd44c0]
c001eb85:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c001eb88:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001eb8b:	8b 04 85 40 bb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd44c0]
c001eb92:	c1 e8 08             	shr    eax,0x8
c001eb95:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001eb99:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001eb9c:	8b 04 85 40 bb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd44c0]
c001eba3:	c1 e8 18             	shr    eax,0x18
c001eba6:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001eba9:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c001ebad:	3d ff 00 00 00       	cmp    eax,0xff
c001ebb2:	75 3a                	jne    c001ebee <apicOpen()+0x16c>
c001ebb4:	e8 5b fe ff ff       	call   c001ea14 <apicGetBase()>
c001ebb9:	0f b6 55 df          	movzx  edx,BYTE PTR [ebp-0x21]
c001ebbd:	83 fa 01             	cmp    edx,0x1
c001ebc0:	75 07                	jne    c001ebc9 <apicOpen()+0x147>
c001ebc2:	ba 60 03 00 00       	mov    edx,0x360
c001ebc7:	eb 05                	jmp    c001ebce <apicOpen()+0x14c>
c001ebc9:	ba 50 03 00 00       	mov    edx,0x350
c001ebce:	01 d0                	add    eax,edx
c001ebd0:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001ebd3:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001ebd6:	8b 00                	mov    eax,DWORD PTR [eax]
c001ebd8:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001ebdb:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c001ebe2:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c001ebe6:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001ebe9:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001ebec:	89 10                	mov    DWORD PTR [eax],edx
c001ebee:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c001ebf2:	e9 7a ff ff ff       	jmp    c001eb71 <apicOpen()+0xef>
c001ebf7:	90                   	nop
c001ebf8:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001ebfb:	c9                   	leave  
c001ebfc:	c3                   	ret    
c001ebfd:	90                   	nop

c001ebfe <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001ebfe:	55                   	push   ebp
c001ebff:	89 e5                	mov    ebp,esp
c001ec01:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ec04:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001ec0a:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001ec0d:	72 1d                	jb     c001ec2c <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001ec0f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ec12:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001ec18:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ec1b:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001ec21:	01 d0                	add    eax,edx
c001ec23:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001ec26:	73 04                	jae    c001ec2c <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001ec28:	b0 01                	mov    al,0x1
c001ec2a:	eb 02                	jmp    c001ec2e <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001ec2c:	b0 00                	mov    al,0x0
c001ec2e:	5d                   	pop    ebp
c001ec2f:	c3                   	ret    

c001ec30 <IOAPIC::read(int)>:
c001ec30:	55                   	push   ebp
c001ec31:	89 e5                	mov    ebp,esp
c001ec33:	83 ec 10             	sub    esp,0x10
c001ec36:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ec39:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001ec3f:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001ec42:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001ec45:	0f b6 d0             	movzx  edx,al
c001ec48:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001ec4b:	89 10                	mov    DWORD PTR [eax],edx
c001ec4d:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001ec50:	83 c0 10             	add    eax,0x10
c001ec53:	8b 00                	mov    eax,DWORD PTR [eax]
c001ec55:	c9                   	leave  
c001ec56:	c3                   	ret    
c001ec57:	90                   	nop

c001ec58 <IOAPIC::open(int, int, void*)>:
c001ec58:	55                   	push   ebp
c001ec59:	89 e5                	mov    ebp,esp
c001ec5b:	57                   	push   edi
c001ec5c:	56                   	push   esi
c001ec5d:	53                   	push   ebx
c001ec5e:	83 ec 04             	sub    esp,0x4
c001ec61:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ec64:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001ec67:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001ec6d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ec70:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001ec76:	8b 14 85 20 bc 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd43e0]
c001ec7d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ec80:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001ec86:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ec89:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001ec8f:	8b 14 85 a0 bc 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd4360]
c001ec96:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ec99:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001ec9f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eca2:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001eca8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ecab:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001ecb1:	0f b6 f0             	movzx  esi,al
c001ecb4:	89 d0                	mov    eax,edx
c001ecb6:	ba 00 00 00 00       	mov    edx,0x0
c001ecbb:	89 c7                	mov    edi,eax
c001ecbd:	83 e7 ff             	and    edi,0xffffffff
c001ecc0:	89 f9                	mov    ecx,edi
c001ecc2:	0f b6 da             	movzx  ebx,dl
c001ecc5:	89 c8                	mov    eax,ecx
c001ecc7:	89 da                	mov    edx,ebx
c001ecc9:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001eccc:	8d 5e 08             	lea    ebx,[esi+0x8]
c001eccf:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001ecd3:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001ecd7:	83 e0 00             	and    eax,0x0
c001ecda:	09 d0                	or     eax,edx
c001ecdc:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001ece0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ece3:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001ece9:	8d 50 01             	lea    edx,[eax+0x1]
c001ecec:	88 d1                	mov    cl,dl
c001ecee:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001ecf1:	88 8a c5 00 00 00    	mov    BYTE PTR [edx+0xc5],cl
c001ecf7:	0f b6 d0             	movzx  edx,al
c001ecfa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ecfd:	83 c2 08             	add    edx,0x8
c001ed00:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001ed04:	0f b6 c9             	movzx  ecx,cl
c001ed07:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001ed0d:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001ed11:	6a 01                	push   0x1
c001ed13:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ed16:	e8 15 ff ff ff       	call   c001ec30 <IOAPIC::read(int)>
c001ed1b:	83 c4 08             	add    esp,0x8
c001ed1e:	c1 f8 10             	sar    eax,0x10
c001ed21:	0f b6 c0             	movzx  eax,al
c001ed24:	8d 50 01             	lea    edx,[eax+0x1]
c001ed27:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ed2a:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001ed30:	b8 00 00 00 00       	mov    eax,0x0
c001ed35:	8d 65 f4             	lea    esp,[ebp-0xc]
c001ed38:	5b                   	pop    ebx
c001ed39:	5e                   	pop    esi
c001ed3a:	5f                   	pop    edi
c001ed3b:	5d                   	pop    ebp
c001ed3c:	c3                   	ret    
c001ed3d:	90                   	nop

c001ed3e <IOAPIC::write(int, int)>:
c001ed3e:	55                   	push   ebp
c001ed3f:	89 e5                	mov    ebp,esp
c001ed41:	83 ec 10             	sub    esp,0x10
c001ed44:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ed47:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001ed4d:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001ed50:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001ed53:	0f b6 d0             	movzx  edx,al
c001ed56:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001ed59:	89 10                	mov    DWORD PTR [eax],edx
c001ed5b:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001ed5e:	8d 50 10             	lea    edx,[eax+0x10]
c001ed61:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001ed64:	89 02                	mov    DWORD PTR [edx],eax
c001ed66:	90                   	nop
c001ed67:	c9                   	leave  
c001ed68:	c3                   	ret    
c001ed69:	90                   	nop

c001ed6a <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c001ed6a:	55                   	push   ebp
c001ed6b:	89 e5                	mov    ebp,esp
c001ed6d:	53                   	push   ebx
c001ed6e:	83 ec 2c             	sub    esp,0x2c
c001ed71:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001ed74:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001ed77:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c001ed7a:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c001ed7d:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001ed80:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001ed83:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001ed86:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001ed89:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001ed8c:	88 d8                	mov    al,bl
c001ed8e:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c001ed91:	88 c8                	mov    al,cl
c001ed93:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c001ed96:	88 d0                	mov    al,dl
c001ed98:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c001ed9b:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001ed9f:	83 c0 08             	add    eax,0x8
c001eda2:	01 c0                	add    eax,eax
c001eda4:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001eda7:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001edab:	83 c0 08             	add    eax,0x8
c001edae:	01 c0                	add    eax,eax
c001edb0:	83 c0 01             	add    eax,0x1
c001edb3:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001edb6:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001edb9:	50                   	push   eax
c001edba:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001edbd:	e8 6e fe ff ff       	call   c001ec30 <IOAPIC::read(int)>
c001edc2:	83 c4 08             	add    esp,0x8
c001edc5:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001edc8:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c001edcf:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001edd2:	c1 e0 18             	shl    eax,0x18
c001edd5:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c001edd8:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001eddb:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001edde:	52                   	push   edx
c001eddf:	50                   	push   eax
c001ede0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ede3:	e8 56 ff ff ff       	call   c001ed3e <IOAPIC::write(int, int)>
c001ede8:	83 c4 0c             	add    esp,0xc
c001edeb:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001edee:	50                   	push   eax
c001edef:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001edf2:	e8 39 fe ff ff       	call   c001ec30 <IOAPIC::read(int)>
c001edf7:	83 c4 08             	add    esp,0x8
c001edfa:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001edfd:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c001ee04:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c001ee0b:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c001ee12:	0f b6 45 d4          	movzx  eax,BYTE PTR [ebp-0x2c]
c001ee16:	85 c0                	test   eax,eax
c001ee18:	74 09                	je     c001ee23 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb9>
c001ee1a:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c001ee21:	eb 07                	jmp    c001ee2a <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc0>
c001ee23:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c001ee2a:	0f b6 45 d0          	movzx  eax,BYTE PTR [ebp-0x30]
c001ee2e:	85 c0                	test   eax,eax
c001ee30:	74 09                	je     c001ee3b <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd1>
c001ee32:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c001ee39:	eb 07                	jmp    c001ee42 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd8>
c001ee3b:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c001ee42:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c001ee49:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c001ee4d:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001ee50:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001ee53:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001ee56:	52                   	push   edx
c001ee57:	50                   	push   eax
c001ee58:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ee5b:	e8 de fe ff ff       	call   c001ed3e <IOAPIC::write(int, int)>
c001ee60:	83 c4 0c             	add    esp,0xc
c001ee63:	90                   	nop
c001ee64:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001ee67:	c9                   	leave  
c001ee68:	c3                   	ret    
c001ee69:	66 90                	xchg   ax,ax
c001ee6b:	90                   	nop

c001ee6c <APICTimer::close(int, int, void*)>:
c001ee6c:	b8 00 00 00 00       	mov    eax,0x0
c001ee71:	c3                   	ret    
c001ee72:	66 90                	xchg   ax,ax

c001ee74 <apicTimerHandler(regs*, void*)>:
c001ee74:	83 ec 0c             	sub    esp,0xc
c001ee77:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ee7b:	8b 08                	mov    ecx,DWORD PTR [eax]
c001ee7d:	b8 10 27 00 00       	mov    eax,0x2710
c001ee82:	ba 00 00 00 00       	mov    edx,0x0
c001ee87:	f7 f1                	div    ecx
c001ee89:	83 ec 0c             	sub    esp,0xc
c001ee8c:	50                   	push   eax
c001ee8d:	e8 c6 f5 fe ff       	call   c000e458 <timerHandler(unsigned int)>
c001ee92:	83 c4 10             	add    esp,0x10
c001ee95:	90                   	nop
c001ee96:	83 c4 0c             	add    esp,0xc
c001ee99:	c3                   	ret    
c001ee9a:	66 90                	xchg   ax,ax

c001ee9c <APICTimer::open(int, int, void*)>:
c001ee9c:	83 ec 0c             	sub    esp,0xc
c001ee9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eea3:	8b 00                	mov    eax,DWORD PTR [eax]
c001eea5:	83 c0 24             	add    eax,0x24
c001eea8:	8b 00                	mov    eax,DWORD PTR [eax]
c001eeaa:	83 ec 08             	sub    esp,0x8
c001eead:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eeb1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eeb5:	ff d0                	call   eax
c001eeb7:	83 c4 10             	add    esp,0x10
c001eeba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eebe:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001eec2:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001eec8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eecc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001eed0:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001eed6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001eeda:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001eee0:	83 ec 0c             	sub    esp,0xc
c001eee3:	51                   	push   ecx
c001eee4:	6a 01                	push   0x1
c001eee6:	68 74 ee 01 c0       	push   0xc001ee74
c001eeeb:	52                   	push   edx
c001eeec:	50                   	push   eax
c001eeed:	e8 b0 da fe ff       	call   c000c9a2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001eef2:	83 c4 20             	add    esp,0x20
c001eef5:	89 c2                	mov    edx,eax
c001eef7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eefb:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001ef01:	b8 00 00 00 00       	mov    eax,0x0
c001ef06:	83 c4 0c             	add    esp,0xc
c001ef09:	c3                   	ret    
c001ef0a:	66 90                	xchg   ax,ax

c001ef0c <APICTimer::write(int)>:
c001ef0c:	83 ec 0c             	sub    esp,0xc
c001ef0f:	83 ec 0c             	sub    esp,0xc
c001ef12:	68 48 37 02 c0       	push   0xc0023748
c001ef17:	e8 ab 27 ff ff       	call   c00116c7 <KePanic(char const*)>
c001ef1c:	83 c4 10             	add    esp,0x10
c001ef1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef23:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ef27:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001ef2d:	90                   	nop
c001ef2e:	83 c4 0c             	add    esp,0xc
c001ef31:	c3                   	ret    
c001ef32:	66 90                	xchg   ax,ax

c001ef34 <APICTimer::APICTimer()>:
c001ef34:	83 ec 0c             	sub    esp,0xc
c001ef37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef3b:	83 ec 08             	sub    esp,0x8
c001ef3e:	68 58 37 02 c0       	push   0xc0023758
c001ef43:	50                   	push   eax
c001ef44:	e8 43 f4 fe ff       	call   c000e38c <Timer::Timer(char const*)>
c001ef49:	83 c4 10             	add    esp,0x10
c001ef4c:	ba 6c 37 02 c0       	mov    edx,0xc002376c
c001ef51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef55:	89 10                	mov    DWORD PTR [eax],edx
c001ef57:	90                   	nop
c001ef58:	83 c4 0c             	add    esp,0xc
c001ef5b:	c3                   	ret    

c001ef5c <PIT::write(int)>:
c001ef5c:	83 ec 10             	sub    esp,0x10
c001ef5f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ef63:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ef67:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001ef6d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ef71:	a3 04 d1 02 c0       	mov    ds:0xc002d104,eax
c001ef76:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001ef7b:	89 c2                	mov    edx,eax
c001ef7d:	c1 fa 1f             	sar    edx,0x1f
c001ef80:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001ef84:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ef88:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001ef8f:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001ef94:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001ef98:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001ef9d:	ee                   	out    dx,al
c001ef9e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001efa2:	0f b6 c0             	movzx  eax,al
c001efa5:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001efac:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001efb0:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001efb4:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001efb9:	ee                   	out    dx,al
c001efba:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001efbe:	c1 f8 08             	sar    eax,0x8
c001efc1:	0f b6 c0             	movzx  eax,al
c001efc4:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001efcb:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001efcf:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001efd3:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001efd8:	ee                   	out    dx,al
c001efd9:	90                   	nop
c001efda:	83 c4 10             	add    esp,0x10
c001efdd:	c3                   	ret    
c001efde:	66 90                	xchg   ax,ax

c001efe0 <pitHandler(regs*, void*)>:
c001efe0:	83 ec 0c             	sub    esp,0xc
c001efe3:	8b 0d 04 d1 02 c0    	mov    ecx,DWORD PTR ds:0xc002d104
c001efe9:	b8 10 27 00 00       	mov    eax,0x2710
c001efee:	89 c2                	mov    edx,eax
c001eff0:	c1 fa 1f             	sar    edx,0x1f
c001eff3:	f7 f9                	idiv   ecx
c001eff5:	83 ec 0c             	sub    esp,0xc
c001eff8:	50                   	push   eax
c001eff9:	e8 5a f4 fe ff       	call   c000e458 <timerHandler(unsigned int)>
c001effe:	83 c4 10             	add    esp,0x10
c001f001:	90                   	nop
c001f002:	83 c4 0c             	add    esp,0xc
c001f005:	c3                   	ret    
c001f006:	66 90                	xchg   ax,ax

c001f008 <PIT::open(int, int, void*)>:
c001f008:	83 ec 0c             	sub    esp,0xc
c001f00b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f00f:	8b 00                	mov    eax,DWORD PTR [eax]
c001f011:	83 c0 24             	add    eax,0x24
c001f014:	8b 00                	mov    eax,DWORD PTR [eax]
c001f016:	83 ec 08             	sub    esp,0x8
c001f019:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f01d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f021:	ff d0                	call   eax
c001f023:	83 c4 10             	add    esp,0x10
c001f026:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f02a:	83 ec 0c             	sub    esp,0xc
c001f02d:	6a 00                	push   0x0
c001f02f:	6a 01                	push   0x1
c001f031:	68 e0 ef 01 c0       	push   0xc001efe0
c001f036:	6a 00                	push   0x0
c001f038:	50                   	push   eax
c001f039:	e8 64 d9 fe ff       	call   c000c9a2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001f03e:	83 c4 20             	add    esp,0x20
c001f041:	89 c2                	mov    edx,eax
c001f043:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f047:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001f04d:	b8 00 00 00 00       	mov    eax,0x0
c001f052:	83 c4 0c             	add    esp,0xc
c001f055:	c3                   	ret    
c001f056:	66 90                	xchg   ax,ax

c001f058 <PIT::close(int, int, void*)>:
c001f058:	83 ec 0c             	sub    esp,0xc
c001f05b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f05f:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001f069:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f06d:	6a 01                	push   0x1
c001f06f:	68 e0 ef 01 c0       	push   0xc001efe0
c001f074:	6a 00                	push   0x0
c001f076:	50                   	push   eax
c001f077:	e8 5c d9 fe ff       	call   c000c9d8 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001f07c:	83 c4 10             	add    esp,0x10
c001f07f:	b8 00 00 00 00       	mov    eax,0x0
c001f084:	83 c4 0c             	add    esp,0xc
c001f087:	c3                   	ret    

c001f088 <PIT::PIT()>:
c001f088:	83 ec 0c             	sub    esp,0xc
c001f08b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f08f:	83 ec 08             	sub    esp,0x8
c001f092:	68 94 37 02 c0       	push   0xc0023794
c001f097:	50                   	push   eax
c001f098:	e8 ef f2 fe ff       	call   c000e38c <Timer::Timer(char const*)>
c001f09d:	83 c4 10             	add    esp,0x10
c001f0a0:	ba bc 37 02 c0       	mov    edx,0xc00237bc
c001f0a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0a9:	89 10                	mov    DWORD PTR [eax],edx
c001f0ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0af:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001f0b5:	0f b6 d0             	movzx  edx,al
c001f0b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0bc:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001f0c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0c7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001f0cd:	0f b6 d0             	movzx  edx,al
c001f0d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0d4:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001f0d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0dd:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001f0e3:	8d 50 01             	lea    edx,[eax+0x1]
c001f0e6:	88 d1                	mov    cl,dl
c001f0e8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f0ec:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001f0f2:	0f b6 d0             	movzx  edx,al
c001f0f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0f9:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001f0fd:	83 e1 3f             	and    ecx,0x3f
c001f100:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001f104:	90                   	nop
c001f105:	83 c4 0c             	add    esp,0xc
c001f108:	c3                   	ret    
c001f109:	66 90                	xchg   ax,ax
c001f10b:	66 90                	xchg   ax,ax
c001f10d:	66 90                	xchg   ax,ax
c001f10f:	90                   	nop

c001f110 <avxDetect>:
c001f110:	b8 01 00 00 00       	mov    eax,0x1
c001f115:	0f a2                	cpuid  
c001f117:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c001f11d:	74 15                	je     c001f134 <avxDetect.noAVX>
c001f11f:	b8 01 00 00 00       	mov    eax,0x1
c001f124:	0f a2                	cpuid  
c001f126:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c001f12c:	74 06                	je     c001f134 <avxDetect.noAVX>
c001f12e:	b8 01 00 00 00       	mov    eax,0x1
c001f133:	c3                   	ret    

c001f134 <avxDetect.noAVX>:
c001f134:	b8 00 00 00 00       	mov    eax,0x0
c001f139:	c3                   	ret    

c001f13a <avxSave>:
c001f13a:	53                   	push   ebx
c001f13b:	52                   	push   edx
c001f13c:	31 c0                	xor    eax,eax
c001f13e:	48                   	dec    eax
c001f13f:	89 c2                	mov    edx,eax
c001f141:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f145:	0f ae 23             	xsave  [ebx]
c001f148:	5a                   	pop    edx
c001f149:	5b                   	pop    ebx
c001f14a:	c3                   	ret    

c001f14b <avxLoad>:
c001f14b:	53                   	push   ebx
c001f14c:	52                   	push   edx
c001f14d:	31 c0                	xor    eax,eax
c001f14f:	48                   	dec    eax
c001f150:	89 c2                	mov    edx,eax
c001f152:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f156:	0f ae 2b             	xrstor [ebx]
c001f159:	5a                   	pop    edx
c001f15a:	5b                   	pop    ebx
c001f15b:	c3                   	ret    

c001f15c <avxInit>:
c001f15c:	e8 67 03 00 00       	call   c001f4c8 <sseInit>
c001f161:	50                   	push   eax
c001f162:	51                   	push   ecx
c001f163:	0f 20 e0             	mov    eax,cr4
c001f166:	0d 00 00 04 00       	or     eax,0x40000
c001f16b:	0f 22 e0             	mov    cr4,eax
c001f16e:	31 c9                	xor    ecx,ecx
c001f170:	0f 01 d0             	xgetbv 
c001f173:	0d 07 00 00 00       	or     eax,0x7
c001f178:	0f 01 d1             	xsetbv 
c001f17b:	59                   	pop    ecx
c001f17c:	58                   	pop    eax
c001f17d:	c3                   	ret    

c001f17e <avxClose>:
c001f17e:	c3                   	ret    

c001f17f <wouldSheSayYes>:
c001f17f:	c3                   	ret    
c001f180:	49                   	dec    ecx
c001f181:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c001f185:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c001f189:	75 20                	jne    c001f1ab <isr0+0xb>
c001f18b:	4e                   	dec    esi
c001f18c:	79 61                	jns    c001f1ef <isr7+0x3>
c001f18e:	68 2e 2e 2e 00       	push   0x2e2e2e
c001f193:	66 90                	xchg   ax,ax
c001f195:	66 90                	xchg   ax,ax
c001f197:	66 90                	xchg   ax,ax
c001f199:	66 90                	xchg   ax,ax
c001f19b:	66 90                	xchg   ax,ax
c001f19d:	66 90                	xchg   ax,ax
c001f19f:	90                   	nop

c001f1a0 <isr0>:
c001f1a0:	fa                   	cli    
c001f1a1:	68 00 00 00 00       	push   0x0
c001f1a6:	68 00 00 00 00       	push   0x0
c001f1ab:	e9 56 01 00 00       	jmp    c001f306 <int_common_stub>

c001f1b0 <isr1>:
c001f1b0:	fa                   	cli    
c001f1b1:	6a 00                	push   0x0
c001f1b3:	6a 01                	push   0x1
c001f1b5:	e9 4c 01 00 00       	jmp    c001f306 <int_common_stub>

c001f1ba <isr2>:
c001f1ba:	fa                   	cli    
c001f1bb:	6a 00                	push   0x0
c001f1bd:	6a 02                	push   0x2
c001f1bf:	e9 42 01 00 00       	jmp    c001f306 <int_common_stub>

c001f1c4 <isr3>:
c001f1c4:	fa                   	cli    
c001f1c5:	6a 00                	push   0x0
c001f1c7:	6a 03                	push   0x3
c001f1c9:	e9 38 01 00 00       	jmp    c001f306 <int_common_stub>

c001f1ce <isr4>:
c001f1ce:	fa                   	cli    
c001f1cf:	6a 00                	push   0x0
c001f1d1:	6a 04                	push   0x4
c001f1d3:	e9 2e 01 00 00       	jmp    c001f306 <int_common_stub>

c001f1d8 <isr5>:
c001f1d8:	fa                   	cli    
c001f1d9:	6a 00                	push   0x0
c001f1db:	6a 05                	push   0x5
c001f1dd:	e9 24 01 00 00       	jmp    c001f306 <int_common_stub>

c001f1e2 <isr6>:
c001f1e2:	fa                   	cli    
c001f1e3:	6a 00                	push   0x0
c001f1e5:	6a 06                	push   0x6
c001f1e7:	e9 1a 01 00 00       	jmp    c001f306 <int_common_stub>

c001f1ec <isr7>:
c001f1ec:	fa                   	cli    
c001f1ed:	6a 00                	push   0x0
c001f1ef:	6a 07                	push   0x7
c001f1f1:	e9 10 01 00 00       	jmp    c001f306 <int_common_stub>

c001f1f6 <isr8>:
c001f1f6:	fa                   	cli    
c001f1f7:	6a 08                	push   0x8
c001f1f9:	e9 08 01 00 00       	jmp    c001f306 <int_common_stub>

c001f1fe <isr9>:
c001f1fe:	fa                   	cli    
c001f1ff:	6a 00                	push   0x0
c001f201:	6a 09                	push   0x9
c001f203:	e9 fe 00 00 00       	jmp    c001f306 <int_common_stub>

c001f208 <isr10>:
c001f208:	fa                   	cli    
c001f209:	6a 0a                	push   0xa
c001f20b:	e9 f6 00 00 00       	jmp    c001f306 <int_common_stub>

c001f210 <isr11>:
c001f210:	fa                   	cli    
c001f211:	6a 0b                	push   0xb
c001f213:	e9 ee 00 00 00       	jmp    c001f306 <int_common_stub>

c001f218 <isr12>:
c001f218:	fa                   	cli    
c001f219:	6a 0c                	push   0xc
c001f21b:	e9 e6 00 00 00       	jmp    c001f306 <int_common_stub>

c001f220 <isr13>:
c001f220:	fa                   	cli    
c001f221:	6a 0d                	push   0xd
c001f223:	53                   	push   ebx
c001f224:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f228:	81 fb f6 f3 01 c0    	cmp    ebx,0xc001f3f6
c001f22e:	5b                   	pop    ebx
c001f22f:	0f 84 c3 01 00 00    	je     c001f3f8 <finishSignal2>
c001f235:	e9 cc 00 00 00       	jmp    c001f306 <int_common_stub>

c001f23a <isr14>:
c001f23a:	fa                   	cli    
c001f23b:	6a 0e                	push   0xe
c001f23d:	e9 c4 00 00 00       	jmp    c001f306 <int_common_stub>

c001f242 <isr15>:
c001f242:	fa                   	cli    
c001f243:	6a 00                	push   0x0
c001f245:	6a 0f                	push   0xf
c001f247:	e9 ba 00 00 00       	jmp    c001f306 <int_common_stub>

c001f24c <isr16>:
c001f24c:	fa                   	cli    
c001f24d:	6a 00                	push   0x0
c001f24f:	6a 10                	push   0x10
c001f251:	e9 b0 00 00 00       	jmp    c001f306 <int_common_stub>

c001f256 <isr17>:
c001f256:	fa                   	cli    
c001f257:	6a 00                	push   0x0
c001f259:	6a 11                	push   0x11
c001f25b:	e9 a6 00 00 00       	jmp    c001f306 <int_common_stub>

c001f260 <isr18>:
c001f260:	fa                   	cli    
c001f261:	6a 00                	push   0x0
c001f263:	6a 12                	push   0x12
c001f265:	e9 9c 00 00 00       	jmp    c001f306 <int_common_stub>

c001f26a <irq3>:
c001f26a:	fa                   	cli    
c001f26b:	6a 00                	push   0x0
c001f26d:	6a 23                	push   0x23
c001f26f:	e9 92 00 00 00       	jmp    c001f306 <int_common_stub>

c001f274 <irq4>:
c001f274:	fa                   	cli    
c001f275:	6a 00                	push   0x0
c001f277:	6a 24                	push   0x24
c001f279:	e9 88 00 00 00       	jmp    c001f306 <int_common_stub>

c001f27e <irq5>:
c001f27e:	fa                   	cli    
c001f27f:	6a 00                	push   0x0
c001f281:	6a 25                	push   0x25
c001f283:	e9 7e 00 00 00       	jmp    c001f306 <int_common_stub>

c001f288 <irq6>:
c001f288:	fa                   	cli    
c001f289:	6a 00                	push   0x0
c001f28b:	6a 26                	push   0x26
c001f28d:	e9 74 00 00 00       	jmp    c001f306 <int_common_stub>

c001f292 <irq7>:
c001f292:	fa                   	cli    
c001f293:	6a 00                	push   0x0
c001f295:	6a 27                	push   0x27
c001f297:	e9 6a 00 00 00       	jmp    c001f306 <int_common_stub>

c001f29c <irq8>:
c001f29c:	fa                   	cli    
c001f29d:	6a 00                	push   0x0
c001f29f:	6a 28                	push   0x28
c001f2a1:	e9 60 00 00 00       	jmp    c001f306 <int_common_stub>

c001f2a6 <irq9>:
c001f2a6:	fa                   	cli    
c001f2a7:	6a 00                	push   0x0
c001f2a9:	6a 29                	push   0x29
c001f2ab:	e9 56 00 00 00       	jmp    c001f306 <int_common_stub>

c001f2b0 <irq10>:
c001f2b0:	fa                   	cli    
c001f2b1:	6a 00                	push   0x0
c001f2b3:	6a 2a                	push   0x2a
c001f2b5:	e9 4c 00 00 00       	jmp    c001f306 <int_common_stub>

c001f2ba <irq11>:
c001f2ba:	fa                   	cli    
c001f2bb:	6a 00                	push   0x0
c001f2bd:	6a 2b                	push   0x2b
c001f2bf:	e9 42 00 00 00       	jmp    c001f306 <int_common_stub>

c001f2c4 <irq12>:
c001f2c4:	fa                   	cli    
c001f2c5:	6a 00                	push   0x0
c001f2c7:	6a 2c                	push   0x2c
c001f2c9:	e9 38 00 00 00       	jmp    c001f306 <int_common_stub>

c001f2ce <irq13>:
c001f2ce:	fa                   	cli    
c001f2cf:	6a 00                	push   0x0
c001f2d1:	6a 2d                	push   0x2d
c001f2d3:	e9 2e 00 00 00       	jmp    c001f306 <int_common_stub>

c001f2d8 <irq14>:
c001f2d8:	fa                   	cli    
c001f2d9:	6a 00                	push   0x0
c001f2db:	6a 2e                	push   0x2e
c001f2dd:	e9 24 00 00 00       	jmp    c001f306 <int_common_stub>

c001f2e2 <irq15>:
c001f2e2:	fa                   	cli    
c001f2e3:	6a 00                	push   0x0
c001f2e5:	6a 2f                	push   0x2f
c001f2e7:	e9 1a 00 00 00       	jmp    c001f306 <int_common_stub>

c001f2ec <irq1>:
c001f2ec:	fa                   	cli    
c001f2ed:	6a 00                	push   0x0
c001f2ef:	6a 21                	push   0x21
c001f2f1:	eb 13                	jmp    c001f306 <int_common_stub>

c001f2f3 <irq2>:
c001f2f3:	fa                   	cli    
c001f2f4:	6a 00                	push   0x0
c001f2f6:	6a 22                	push   0x22
c001f2f8:	eb 0c                	jmp    c001f306 <int_common_stub>

c001f2fa <isr96>:
c001f2fa:	6a 00                	push   0x0
c001f2fc:	6a 60                	push   0x60
c001f2fe:	fb                   	sti    
c001f2ff:	eb 37                	jmp    c001f338 <syscall_common_stub>

c001f301 <irq0>:
c001f301:	fa                   	cli    
c001f302:	6a 00                	push   0x0
c001f304:	6a 20                	push   0x20

c001f306 <int_common_stub>:
c001f306:	60                   	pusha  
c001f307:	1e                   	push   ds
c001f308:	06                   	push   es
c001f309:	0f a0                	push   fs
c001f30b:	0f a8                	push   gs
c001f30d:	66 b8 10 00          	mov    ax,0x10
c001f311:	66 8e d8             	mov    ds,ax
c001f314:	66 8e c0             	mov    es,ax
c001f317:	66 8e e0             	mov    fs,ax
c001f31a:	66 8e e8             	mov    gs,ax
c001f31d:	54                   	push   esp
c001f31e:	fc                   	cld    
c001f31f:	e8 7c db fe ff       	call   c000cea0 <int_handler>
c001f324:	81 c4 04 00 00 00    	add    esp,0x4
c001f32a:	0f a9                	pop    gs
c001f32c:	0f a1                	pop    fs
c001f32e:	07                   	pop    es
c001f32f:	1f                   	pop    ds
c001f330:	61                   	popa   
c001f331:	81 c4 08 00 00 00    	add    esp,0x8
c001f337:	cf                   	iret   

c001f338 <syscall_common_stub>:
c001f338:	60                   	pusha  
c001f339:	1e                   	push   ds
c001f33a:	06                   	push   es
c001f33b:	0f a0                	push   fs
c001f33d:	0f a8                	push   gs
c001f33f:	66 b8 10 00          	mov    ax,0x10
c001f343:	66 8e d8             	mov    ds,ax
c001f346:	66 8e c0             	mov    es,ax
c001f349:	66 8e e0             	mov    fs,ax
c001f34c:	66 8e e8             	mov    gs,ax
c001f34f:	54                   	push   esp
c001f350:	fc                   	cld    
c001f351:	e8 4a db fe ff       	call   c000cea0 <int_handler>
c001f356:	81 c4 04 00 00 00    	add    esp,0x4
c001f35c:	0f a9                	pop    gs
c001f35e:	0f a1                	pop    fs
c001f360:	07                   	pop    es
c001f361:	1f                   	pop    ds
c001f362:	e8 77 29 ff ff       	call   c0011cde <KiCheckSignalZ>
c001f367:	3d 00 00 00 00       	cmp    eax,0x0
c001f36c:	0f 84 c0 00 00 00    	je     c001f432 <skipSignals>
c001f372:	a3 08 20 00 c2       	mov    ds:0xc2002008,eax
c001f377:	61                   	popa   
c001f378:	53                   	push   ebx
c001f379:	8b 1d 08 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002008
c001f37f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c001f382:	5b                   	pop    ebx
c001f383:	a1 08 20 00 c2       	mov    eax,ds:0xc2002008
c001f388:	89 58 10             	mov    DWORD PTR [eax+0x10],ebx
c001f38b:	89 48 14             	mov    DWORD PTR [eax+0x14],ecx
c001f38e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f391:	89 70 1c             	mov    DWORD PTR [eax+0x1c],esi
c001f394:	89 78 20             	mov    DWORD PTR [eax+0x20],edi
c001f397:	89 68 24             	mov    DWORD PTR [eax+0x24],ebp
c001f39a:	81 c4 08 00 00 00    	add    esp,0x8
c001f3a0:	5e                   	pop    esi
c001f3a1:	5b                   	pop    ebx
c001f3a2:	59                   	pop    ecx
c001f3a3:	5a                   	pop    edx
c001f3a4:	89 70 2c             	mov    DWORD PTR [eax+0x2c],esi
c001f3a7:	89 48 30             	mov    DWORD PTR [eax+0x30],ecx
c001f3aa:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001f3ad:	52                   	push   edx
c001f3ae:	51                   	push   ecx
c001f3af:	53                   	push   ebx
c001f3b0:	56                   	push   esi
c001f3b1:	81 ec 08 00 00 00    	sub    esp,0x8
c001f3b7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c001f3ba:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001f3bd:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
c001f3c0:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f3c3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001f3c6:	60                   	pusha  
c001f3c7:	8b 35 08 20 00 c2    	mov    esi,DWORD PTR ds:0xc2002008
c001f3cd:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c001f3d0:	89 e3                	mov    ebx,esp
c001f3d2:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c001f3d5:	52                   	push   edx
c001f3d6:	68 f6 f3 01 c0       	push   0xc001f3f6
c001f3db:	89 63 34             	mov    DWORD PTR [ebx+0x34],esp
c001f3de:	89 dc                	mov    esp,ebx
c001f3e0:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c001f3e3:	68 23 00 00 00       	push   0x23
c001f3e8:	51                   	push   ecx
c001f3e9:	68 02 02 00 00       	push   0x202
c001f3ee:	68 1b 00 00 00       	push   0x1b
c001f3f3:	ff 36                	push   DWORD PTR [esi]
c001f3f5:	cf                   	iret   

c001f3f6 <finishSignal>:
c001f3f6:	cd 0f                	int    0xf

c001f3f8 <finishSignal2>:
c001f3f8:	ff 35 08 20 00 c2    	push   DWORD PTR ds:0xc2002008
c001f3fe:	e8 58 29 ff ff       	call   c0011d5b <KiFinishSignalZ>
c001f403:	8b 2d 08 20 00 c2    	mov    ebp,DWORD PTR ds:0xc2002008
c001f409:	68 23 00 00 00       	push   0x23
c001f40e:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001f411:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c001f414:	68 1b 00 00 00       	push   0x1b
c001f419:	ff 75 2c             	push   DWORD PTR [ebp+0x2c]
c001f41c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001f41f:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c001f422:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c001f425:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001f428:	8b 75 1c             	mov    esi,DWORD PTR [ebp+0x1c]
c001f42b:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c001f42e:	8b 6d 24             	mov    ebp,DWORD PTR [ebp+0x24]
c001f431:	cf                   	iret   

c001f432 <skipSignals>:
c001f432:	61                   	popa   
c001f433:	81 c4 08 00 00 00    	add    esp,0x8
c001f439:	cf                   	iret   
c001f43a:	90                   	nop
c001f43b:	90                   	nop

c001f43c <irq16>:
c001f43c:	fa                   	cli    
c001f43d:	6a 00                	push   0x0
c001f43f:	6a 30                	push   0x30
c001f441:	e9 c0 fe ff ff       	jmp    c001f306 <int_common_stub>

c001f446 <irq17>:
c001f446:	fa                   	cli    
c001f447:	6a 00                	push   0x0
c001f449:	6a 31                	push   0x31
c001f44b:	e9 b6 fe ff ff       	jmp    c001f306 <int_common_stub>

c001f450 <irq18>:
c001f450:	fa                   	cli    
c001f451:	6a 00                	push   0x0
c001f453:	6a 32                	push   0x32
c001f455:	e9 ac fe ff ff       	jmp    c001f306 <int_common_stub>

c001f45a <irq19>:
c001f45a:	fa                   	cli    
c001f45b:	6a 00                	push   0x0
c001f45d:	6a 33                	push   0x33
c001f45f:	e9 a2 fe ff ff       	jmp    c001f306 <int_common_stub>

c001f464 <irq20>:
c001f464:	fa                   	cli    
c001f465:	6a 00                	push   0x0
c001f467:	6a 34                	push   0x34
c001f469:	e9 98 fe ff ff       	jmp    c001f306 <int_common_stub>

c001f46e <irq21>:
c001f46e:	fa                   	cli    
c001f46f:	6a 00                	push   0x0
c001f471:	6a 35                	push   0x35
c001f473:	e9 8e fe ff ff       	jmp    c001f306 <int_common_stub>

c001f478 <irq22>:
c001f478:	fa                   	cli    
c001f479:	6a 00                	push   0x0
c001f47b:	6a 36                	push   0x36
c001f47d:	e9 84 fe ff ff       	jmp    c001f306 <int_common_stub>

c001f482 <irq23>:
c001f482:	fa                   	cli    
c001f483:	6a 00                	push   0x0
c001f485:	6a 37                	push   0x37
c001f487:	e9 7a fe ff ff       	jmp    c001f306 <int_common_stub>
c001f48c:	66 90                	xchg   ax,ax
c001f48e:	66 90                	xchg   ax,ax

c001f490 <i386GetRDRAND>:
c001f490:	b9 64 00 00 00       	mov    ecx,0x64

c001f495 <retry>:
c001f495:	0f c7 f0             	rdrand eax
c001f498:	72 05                	jb     c001f49f <retry.done>
c001f49a:	e2 f9                	loop   c001f495 <retry>

c001f49c <retry.fail>:
c001f49c:	31 c0                	xor    eax,eax
c001f49e:	c3                   	ret    

c001f49f <retry.done>:
c001f49f:	c3                   	ret    

c001f4a0 <absolutelyNoChanceInHell>:
c001f4a0:	b8 01 00 00 00       	mov    eax,0x1
c001f4a5:	0f a2                	cpuid  
c001f4a7:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001f4ad:	74 06                	je     c001f4b5 <sseDetect.noSSE>
c001f4af:	b8 01 00 00 00       	mov    eax,0x1
c001f4b4:	c3                   	ret    

c001f4b5 <sseDetect.noSSE>:
c001f4b5:	31 c0                	xor    eax,eax
c001f4b7:	c3                   	ret    

c001f4b8 <sseSave>:
c001f4b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f4bc:	0f ae 00             	fxsave [eax]
c001f4bf:	c3                   	ret    

c001f4c0 <sseLoad>:
c001f4c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f4c4:	0f ae 08             	fxrstor [eax]
c001f4c7:	c3                   	ret    

c001f4c8 <sseInit>:
c001f4c8:	e8 42 00 00 00       	call   c001f50f <x87Init>
c001f4cd:	0f 20 e0             	mov    eax,cr4
c001f4d0:	66 0d 00 06          	or     ax,0x600
c001f4d4:	0f 22 e0             	mov    cr4,eax
c001f4d7:	c3                   	ret    

c001f4d8 <sseClose>:
c001f4d8:	c3                   	ret    
c001f4d9:	66 90                	xchg   ax,ax
c001f4db:	66 90                	xchg   ax,ax
c001f4dd:	66 90                	xchg   ax,ax
c001f4df:	90                   	nop

c001f4e0 <value_37F>:
c001f4e0:	7f 03                	jg     c001f4e5 <value_37A+0x1>

c001f4e2 <value_37E>:
c001f4e2:	7e 03                	jle    c001f4e7 <x87Detect+0x1>

c001f4e4 <value_37A>:
c001f4e4:	7a 03                	jp     c001f4e9 <x87Detect+0x3>

c001f4e6 <x87Detect>:
c001f4e6:	b8 01 00 00 00       	mov    eax,0x1
c001f4eb:	0f a2                	cpuid  
c001f4ed:	f7 c2 01 00 00 00    	test   edx,0x1
c001f4f3:	74 06                	je     c001f4fb <x87Detect.nox87>
c001f4f5:	b8 01 00 00 00       	mov    eax,0x1
c001f4fa:	c3                   	ret    

c001f4fb <x87Detect.nox87>:
c001f4fb:	b8 00 00 00 00       	mov    eax,0x0
c001f500:	c3                   	ret    

c001f501 <x87Save>:
c001f501:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f505:	dd 30                	fnsave [eax]
c001f507:	c3                   	ret    

c001f508 <x87Load>:
c001f508:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f50c:	dd 20                	frstor [eax]
c001f50e:	c3                   	ret    

c001f50f <x87Init>:
c001f50f:	0f 20 c0             	mov    eax,cr0
c001f512:	66 25 fb ff          	and    ax,0xfffb
c001f516:	66 0d 22 00          	or     ax,0x22
c001f51a:	0f 22 c0             	mov    cr0,eax
c001f51d:	db e3                	fninit 
c001f51f:	0f 06                	clts   
c001f521:	d9 2d e4 f4 01 c0    	fldcw  WORD PTR ds:0xc001f4e4
c001f527:	c3                   	ret    

c001f528 <x87Close>:
c001f528:	c3                   	ret    
c001f529:	66 90                	xchg   ax,ax
c001f52b:	90                   	nop

c001f52c <__do_global_ctors_aux>:
c001f52c:	a1 e0 04 02 c0       	mov    eax,ds:0xc00204e0
c001f531:	83 f8 ff             	cmp    eax,0xffffffff
c001f534:	74 1a                	je     c001f550 <__do_global_ctors_aux+0x24>
c001f536:	55                   	push   ebp
c001f537:	89 e5                	mov    ebp,esp
c001f539:	53                   	push   ebx
c001f53a:	52                   	push   edx
c001f53b:	bb e0 04 02 c0       	mov    ebx,0xc00204e0
c001f540:	ff d0                	call   eax
c001f542:	83 eb 04             	sub    ebx,0x4
c001f545:	8b 03                	mov    eax,DWORD PTR [ebx]
c001f547:	83 f8 ff             	cmp    eax,0xffffffff
c001f54a:	75 f4                	jne    c001f540 <__do_global_ctors_aux+0x14>
c001f54c:	58                   	pop    eax
c001f54d:	5b                   	pop    ebx
c001f54e:	5d                   	pop    ebp
c001f54f:	c3                   	ret    
c001f550:	c3                   	ret    
c001f551:	66 90                	xchg   ax,ax
c001f553:	90                   	nop

c001f554 <__divdi3>:
c001f554:	55                   	push   ebp
c001f555:	57                   	push   edi
c001f556:	56                   	push   esi
c001f557:	53                   	push   ebx
c001f558:	83 ec 1c             	sub    esp,0x1c
c001f55b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001f55f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f563:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001f566:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001f56a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001f56e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001f572:	85 db                	test   ebx,ebx
c001f574:	0f 88 8e 00 00 00    	js     c001f608 <__divdi3+0xb4>
c001f57a:	89 dd                	mov    ebp,ebx
c001f57c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001f584:	89 d3                	mov    ebx,edx
c001f586:	85 d2                	test   edx,edx
c001f588:	79 0d                	jns    c001f597 <__divdi3+0x43>
c001f58a:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001f58e:	f7 d8                	neg    eax
c001f590:	83 d2 00             	adc    edx,0x0
c001f593:	f7 da                	neg    edx
c001f595:	89 d3                	mov    ebx,edx
c001f597:	89 c7                	mov    edi,eax
c001f599:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001f59c:	85 db                	test   ebx,ebx
c001f59e:	75 48                	jne    c001f5e8 <__divdi3+0x94>
c001f5a0:	39 ef                	cmp    edi,ebp
c001f5a2:	76 24                	jbe    c001f5c8 <__divdi3+0x74>
c001f5a4:	89 ea                	mov    edx,ebp
c001f5a6:	f7 f7                	div    edi
c001f5a8:	89 c1                	mov    ecx,eax
c001f5aa:	31 f6                	xor    esi,esi
c001f5ac:	89 c8                	mov    eax,ecx
c001f5ae:	89 f2                	mov    edx,esi
c001f5b0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f5b4:	85 c9                	test   ecx,ecx
c001f5b6:	74 07                	je     c001f5bf <__divdi3+0x6b>
c001f5b8:	f7 d8                	neg    eax
c001f5ba:	83 d2 00             	adc    edx,0x0
c001f5bd:	f7 da                	neg    edx
c001f5bf:	83 c4 1c             	add    esp,0x1c
c001f5c2:	5b                   	pop    ebx
c001f5c3:	5e                   	pop    esi
c001f5c4:	5f                   	pop    edi
c001f5c5:	5d                   	pop    ebp
c001f5c6:	c3                   	ret    
c001f5c7:	90                   	nop
c001f5c8:	85 ff                	test   edi,edi
c001f5ca:	75 0b                	jne    c001f5d7 <__divdi3+0x83>
c001f5cc:	b8 01 00 00 00       	mov    eax,0x1
c001f5d1:	31 d2                	xor    edx,edx
c001f5d3:	f7 f3                	div    ebx
c001f5d5:	89 c7                	mov    edi,eax
c001f5d7:	31 d2                	xor    edx,edx
c001f5d9:	89 e8                	mov    eax,ebp
c001f5db:	f7 f7                	div    edi
c001f5dd:	89 c6                	mov    esi,eax
c001f5df:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001f5e2:	f7 f7                	div    edi
c001f5e4:	89 c1                	mov    ecx,eax
c001f5e6:	eb c4                	jmp    c001f5ac <__divdi3+0x58>
c001f5e8:	39 eb                	cmp    ebx,ebp
c001f5ea:	77 3c                	ja     c001f628 <__divdi3+0xd4>
c001f5ec:	0f bd f3             	bsr    esi,ebx
c001f5ef:	83 f6 1f             	xor    esi,0x1f
c001f5f2:	75 40                	jne    c001f634 <__divdi3+0xe0>
c001f5f4:	39 eb                	cmp    ebx,ebp
c001f5f6:	72 09                	jb     c001f601 <__divdi3+0xad>
c001f5f8:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001f5fb:	0f 87 97 00 00 00    	ja     c001f698 <__divdi3+0x144>
c001f601:	b9 01 00 00 00       	mov    ecx,0x1
c001f606:	eb a4                	jmp    c001f5ac <__divdi3+0x58>
c001f608:	f7 d9                	neg    ecx
c001f60a:	83 d3 00             	adc    ebx,0x0
c001f60d:	f7 db                	neg    ebx
c001f60f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001f612:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001f616:	89 dd                	mov    ebp,ebx
c001f618:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001f620:	e9 5f ff ff ff       	jmp    c001f584 <__divdi3+0x30>
c001f625:	8d 76 00             	lea    esi,[esi+0x0]
c001f628:	31 f6                	xor    esi,esi
c001f62a:	31 c9                	xor    ecx,ecx
c001f62c:	e9 7b ff ff ff       	jmp    c001f5ac <__divdi3+0x58>
c001f631:	8d 76 00             	lea    esi,[esi+0x0]
c001f634:	b8 20 00 00 00       	mov    eax,0x20
c001f639:	29 f0                	sub    eax,esi
c001f63b:	89 f1                	mov    ecx,esi
c001f63d:	d3 e3                	shl    ebx,cl
c001f63f:	89 fa                	mov    edx,edi
c001f641:	88 c1                	mov    cl,al
c001f643:	d3 ea                	shr    edx,cl
c001f645:	09 da                	or     edx,ebx
c001f647:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001f64b:	89 f1                	mov    ecx,esi
c001f64d:	d3 e7                	shl    edi,cl
c001f64f:	89 eb                	mov    ebx,ebp
c001f651:	88 c1                	mov    cl,al
c001f653:	d3 eb                	shr    ebx,cl
c001f655:	89 f1                	mov    ecx,esi
c001f657:	d3 e5                	shl    ebp,cl
c001f659:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001f65c:	88 c1                	mov    cl,al
c001f65e:	d3 ea                	shr    edx,cl
c001f660:	09 d5                	or     ebp,edx
c001f662:	89 e8                	mov    eax,ebp
c001f664:	89 da                	mov    edx,ebx
c001f666:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001f66a:	89 d3                	mov    ebx,edx
c001f66c:	89 c5                	mov    ebp,eax
c001f66e:	f7 e7                	mul    edi
c001f670:	39 d3                	cmp    ebx,edx
c001f672:	72 18                	jb     c001f68c <__divdi3+0x138>
c001f674:	74 0a                	je     c001f680 <__divdi3+0x12c>
c001f676:	89 e9                	mov    ecx,ebp
c001f678:	31 f6                	xor    esi,esi
c001f67a:	e9 2d ff ff ff       	jmp    c001f5ac <__divdi3+0x58>
c001f67f:	90                   	nop
c001f680:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001f683:	89 f1                	mov    ecx,esi
c001f685:	d3 e7                	shl    edi,cl
c001f687:	39 c7                	cmp    edi,eax
c001f689:	73 eb                	jae    c001f676 <__divdi3+0x122>
c001f68b:	90                   	nop
c001f68c:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001f68f:	31 f6                	xor    esi,esi
c001f691:	e9 16 ff ff ff       	jmp    c001f5ac <__divdi3+0x58>
c001f696:	66 90                	xchg   ax,ax
c001f698:	31 c9                	xor    ecx,ecx
c001f69a:	e9 0d ff ff ff       	jmp    c001f5ac <__divdi3+0x58>
c001f69f:	90                   	nop

c001f6a0 <__moddi3>:
c001f6a0:	55                   	push   ebp
c001f6a1:	57                   	push   edi
c001f6a2:	56                   	push   esi
c001f6a3:	53                   	push   ebx
c001f6a4:	83 ec 2c             	sub    esp,0x2c
c001f6a7:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001f6ab:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001f6af:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001f6b3:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001f6b7:	85 db                	test   ebx,ebx
c001f6b9:	0f 88 85 00 00 00    	js     c001f744 <__moddi3+0xa4>
c001f6bf:	89 de                	mov    esi,ebx
c001f6c1:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001f6c9:	89 d7                	mov    edi,edx
c001f6cb:	85 d2                	test   edx,edx
c001f6cd:	79 09                	jns    c001f6d8 <__moddi3+0x38>
c001f6cf:	f7 d8                	neg    eax
c001f6d1:	83 d2 00             	adc    edx,0x0
c001f6d4:	f7 da                	neg    edx
c001f6d6:	89 d7                	mov    edi,edx
c001f6d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f6dc:	89 cd                	mov    ebp,ecx
c001f6de:	85 ff                	test   edi,edi
c001f6e0:	75 52                	jne    c001f734 <__moddi3+0x94>
c001f6e2:	89 c3                	mov    ebx,eax
c001f6e4:	39 f0                	cmp    eax,esi
c001f6e6:	76 24                	jbe    c001f70c <__moddi3+0x6c>
c001f6e8:	89 c8                	mov    eax,ecx
c001f6ea:	89 f2                	mov    edx,esi
c001f6ec:	f7 f3                	div    ebx
c001f6ee:	89 d6                	mov    esi,edx
c001f6f0:	89 f0                	mov    eax,esi
c001f6f2:	31 d2                	xor    edx,edx
c001f6f4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f6f8:	85 c9                	test   ecx,ecx
c001f6fa:	74 07                	je     c001f703 <__moddi3+0x63>
c001f6fc:	f7 d8                	neg    eax
c001f6fe:	83 d2 00             	adc    edx,0x0
c001f701:	f7 da                	neg    edx
c001f703:	83 c4 2c             	add    esp,0x2c
c001f706:	5b                   	pop    ebx
c001f707:	5e                   	pop    esi
c001f708:	5f                   	pop    edi
c001f709:	5d                   	pop    ebp
c001f70a:	c3                   	ret    
c001f70b:	90                   	nop
c001f70c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f710:	85 db                	test   ebx,ebx
c001f712:	75 0d                	jne    c001f721 <__moddi3+0x81>
c001f714:	b8 01 00 00 00       	mov    eax,0x1
c001f719:	31 d2                	xor    edx,edx
c001f71b:	f7 f7                	div    edi
c001f71d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f721:	89 f0                	mov    eax,esi
c001f723:	31 d2                	xor    edx,edx
c001f725:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001f729:	f7 f7                	div    edi
c001f72b:	89 e8                	mov    eax,ebp
c001f72d:	f7 f7                	div    edi
c001f72f:	89 d6                	mov    esi,edx
c001f731:	eb bd                	jmp    c001f6f0 <__moddi3+0x50>
c001f733:	90                   	nop
c001f734:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001f738:	39 f7                	cmp    edi,esi
c001f73a:	76 20                	jbe    c001f75c <__moddi3+0xbc>
c001f73c:	89 c8                	mov    eax,ecx
c001f73e:	89 f2                	mov    edx,esi
c001f740:	eb b2                	jmp    c001f6f4 <__moddi3+0x54>
c001f742:	66 90                	xchg   ax,ax
c001f744:	f7 d9                	neg    ecx
c001f746:	83 d3 00             	adc    ebx,0x0
c001f749:	f7 db                	neg    ebx
c001f74b:	89 de                	mov    esi,ebx
c001f74d:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001f755:	e9 6f ff ff ff       	jmp    c001f6c9 <__moddi3+0x29>
c001f75a:	66 90                	xchg   ax,ax
c001f75c:	0f bd c7             	bsr    eax,edi
c001f75f:	83 f0 1f             	xor    eax,0x1f
c001f762:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001f766:	75 24                	jne    c001f78c <__moddi3+0xec>
c001f768:	39 f7                	cmp    edi,esi
c001f76a:	72 06                	jb     c001f772 <__moddi3+0xd2>
c001f76c:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001f770:	77 0c                	ja     c001f77e <__moddi3+0xde>
c001f772:	89 e9                	mov    ecx,ebp
c001f774:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001f778:	19 fe                	sbb    esi,edi
c001f77a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001f77e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f782:	89 f2                	mov    edx,esi
c001f784:	e9 6b ff ff ff       	jmp    c001f6f4 <__moddi3+0x54>
c001f789:	8d 76 00             	lea    esi,[esi+0x0]
c001f78c:	b8 20 00 00 00       	mov    eax,0x20
c001f791:	89 c2                	mov    edx,eax
c001f793:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001f797:	29 da                	sub    edx,ebx
c001f799:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001f79d:	88 d9                	mov    cl,bl
c001f79f:	d3 e7                	shl    edi,cl
c001f7a1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f7a5:	88 d1                	mov    cl,dl
c001f7a7:	d3 e8                	shr    eax,cl
c001f7a9:	09 c7                	or     edi,eax
c001f7ab:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001f7af:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001f7b3:	89 d8                	mov    eax,ebx
c001f7b5:	88 d9                	mov    cl,bl
c001f7b7:	d3 e7                	shl    edi,cl
c001f7b9:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f7bd:	89 f3                	mov    ebx,esi
c001f7bf:	88 d1                	mov    cl,dl
c001f7c1:	d3 eb                	shr    ebx,cl
c001f7c3:	89 c7                	mov    edi,eax
c001f7c5:	88 c1                	mov    cl,al
c001f7c7:	d3 e6                	shl    esi,cl
c001f7c9:	89 e8                	mov    eax,ebp
c001f7cb:	88 d1                	mov    cl,dl
c001f7cd:	d3 e8                	shr    eax,cl
c001f7cf:	09 f0                	or     eax,esi
c001f7d1:	89 f9                	mov    ecx,edi
c001f7d3:	d3 e5                	shl    ebp,cl
c001f7d5:	89 da                	mov    edx,ebx
c001f7d7:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001f7db:	89 d3                	mov    ebx,edx
c001f7dd:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f7e1:	89 c6                	mov    esi,eax
c001f7e3:	89 d1                	mov    ecx,edx
c001f7e5:	39 d3                	cmp    ebx,edx
c001f7e7:	72 27                	jb     c001f810 <__moddi3+0x170>
c001f7e9:	74 21                	je     c001f80c <__moddi3+0x16c>
c001f7eb:	29 f5                	sub    ebp,esi
c001f7ed:	19 cb                	sbb    ebx,ecx
c001f7ef:	89 de                	mov    esi,ebx
c001f7f1:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001f7f5:	d3 e6                	shl    esi,cl
c001f7f7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001f7fb:	89 f9                	mov    ecx,edi
c001f7fd:	d3 ed                	shr    ebp,cl
c001f7ff:	09 ee                	or     esi,ebp
c001f801:	89 f0                	mov    eax,esi
c001f803:	d3 eb                	shr    ebx,cl
c001f805:	89 da                	mov    edx,ebx
c001f807:	e9 e8 fe ff ff       	jmp    c001f6f4 <__moddi3+0x54>
c001f80c:	39 c5                	cmp    ebp,eax
c001f80e:	73 db                	jae    c001f7eb <__moddi3+0x14b>
c001f810:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001f814:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001f818:	89 d1                	mov    ecx,edx
c001f81a:	89 c6                	mov    esi,eax
c001f81c:	eb cd                	jmp    c001f7eb <__moddi3+0x14b>
c001f81e:	66 90                	xchg   ax,ax

c001f820 <__udivdi3>:
c001f820:	55                   	push   ebp
c001f821:	57                   	push   edi
c001f822:	56                   	push   esi
c001f823:	53                   	push   ebx
c001f824:	83 ec 1c             	sub    esp,0x1c
c001f827:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001f82b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001f82f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001f833:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001f837:	85 d2                	test   edx,edx
c001f839:	75 41                	jne    c001f87c <__udivdi3+0x5c>
c001f83b:	39 f7                	cmp    edi,esi
c001f83d:	76 15                	jbe    c001f854 <__udivdi3+0x34>
c001f83f:	89 e8                	mov    eax,ebp
c001f841:	89 f2                	mov    edx,esi
c001f843:	f7 f7                	div    edi
c001f845:	31 db                	xor    ebx,ebx
c001f847:	89 da                	mov    edx,ebx
c001f849:	83 c4 1c             	add    esp,0x1c
c001f84c:	5b                   	pop    ebx
c001f84d:	5e                   	pop    esi
c001f84e:	5f                   	pop    edi
c001f84f:	5d                   	pop    ebp
c001f850:	c3                   	ret    
c001f851:	8d 76 00             	lea    esi,[esi+0x0]
c001f854:	89 f9                	mov    ecx,edi
c001f856:	85 ff                	test   edi,edi
c001f858:	75 0b                	jne    c001f865 <__udivdi3+0x45>
c001f85a:	b8 01 00 00 00       	mov    eax,0x1
c001f85f:	31 d2                	xor    edx,edx
c001f861:	f7 f7                	div    edi
c001f863:	89 c1                	mov    ecx,eax
c001f865:	31 d2                	xor    edx,edx
c001f867:	89 f0                	mov    eax,esi
c001f869:	f7 f1                	div    ecx
c001f86b:	89 c3                	mov    ebx,eax
c001f86d:	89 e8                	mov    eax,ebp
c001f86f:	f7 f1                	div    ecx
c001f871:	89 da                	mov    edx,ebx
c001f873:	83 c4 1c             	add    esp,0x1c
c001f876:	5b                   	pop    ebx
c001f877:	5e                   	pop    esi
c001f878:	5f                   	pop    edi
c001f879:	5d                   	pop    ebp
c001f87a:	c3                   	ret    
c001f87b:	90                   	nop
c001f87c:	39 f2                	cmp    edx,esi
c001f87e:	77 1c                	ja     c001f89c <__udivdi3+0x7c>
c001f880:	0f bd da             	bsr    ebx,edx
c001f883:	83 f3 1f             	xor    ebx,0x1f
c001f886:	75 24                	jne    c001f8ac <__udivdi3+0x8c>
c001f888:	39 f2                	cmp    edx,esi
c001f88a:	72 08                	jb     c001f894 <__udivdi3+0x74>
c001f88c:	39 ef                	cmp    edi,ebp
c001f88e:	0f 87 84 00 00 00    	ja     c001f918 <__udivdi3+0xf8>
c001f894:	b8 01 00 00 00       	mov    eax,0x1
c001f899:	eb ac                	jmp    c001f847 <__udivdi3+0x27>
c001f89b:	90                   	nop
c001f89c:	31 db                	xor    ebx,ebx
c001f89e:	31 c0                	xor    eax,eax
c001f8a0:	89 da                	mov    edx,ebx
c001f8a2:	83 c4 1c             	add    esp,0x1c
c001f8a5:	5b                   	pop    ebx
c001f8a6:	5e                   	pop    esi
c001f8a7:	5f                   	pop    edi
c001f8a8:	5d                   	pop    ebp
c001f8a9:	c3                   	ret    
c001f8aa:	66 90                	xchg   ax,ax
c001f8ac:	b8 20 00 00 00       	mov    eax,0x20
c001f8b1:	29 d8                	sub    eax,ebx
c001f8b3:	88 d9                	mov    cl,bl
c001f8b5:	d3 e2                	shl    edx,cl
c001f8b7:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001f8bb:	89 fa                	mov    edx,edi
c001f8bd:	88 c1                	mov    cl,al
c001f8bf:	d3 ea                	shr    edx,cl
c001f8c1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f8c5:	09 d1                	or     ecx,edx
c001f8c7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001f8cb:	88 d9                	mov    cl,bl
c001f8cd:	d3 e7                	shl    edi,cl
c001f8cf:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f8d3:	89 f7                	mov    edi,esi
c001f8d5:	88 c1                	mov    cl,al
c001f8d7:	d3 ef                	shr    edi,cl
c001f8d9:	88 d9                	mov    cl,bl
c001f8db:	d3 e6                	shl    esi,cl
c001f8dd:	89 ea                	mov    edx,ebp
c001f8df:	88 c1                	mov    cl,al
c001f8e1:	d3 ea                	shr    edx,cl
c001f8e3:	09 d6                	or     esi,edx
c001f8e5:	89 f0                	mov    eax,esi
c001f8e7:	89 fa                	mov    edx,edi
c001f8e9:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001f8ed:	89 d7                	mov    edi,edx
c001f8ef:	89 c6                	mov    esi,eax
c001f8f1:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f8f5:	39 d7                	cmp    edi,edx
c001f8f7:	72 13                	jb     c001f90c <__udivdi3+0xec>
c001f8f9:	74 09                	je     c001f904 <__udivdi3+0xe4>
c001f8fb:	89 f0                	mov    eax,esi
c001f8fd:	31 db                	xor    ebx,ebx
c001f8ff:	e9 43 ff ff ff       	jmp    c001f847 <__udivdi3+0x27>
c001f904:	88 d9                	mov    cl,bl
c001f906:	d3 e5                	shl    ebp,cl
c001f908:	39 c5                	cmp    ebp,eax
c001f90a:	73 ef                	jae    c001f8fb <__udivdi3+0xdb>
c001f90c:	8d 46 ff             	lea    eax,[esi-0x1]
c001f90f:	31 db                	xor    ebx,ebx
c001f911:	e9 31 ff ff ff       	jmp    c001f847 <__udivdi3+0x27>
c001f916:	66 90                	xchg   ax,ax
c001f918:	31 c0                	xor    eax,eax
c001f91a:	e9 28 ff ff ff       	jmp    c001f847 <__udivdi3+0x27>
c001f91f:	90                   	nop

c001f920 <__umoddi3>:
c001f920:	55                   	push   ebp
c001f921:	57                   	push   edi
c001f922:	56                   	push   esi
c001f923:	53                   	push   ebx
c001f924:	83 ec 1c             	sub    esp,0x1c
c001f927:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001f92b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f92f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001f933:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001f937:	89 da                	mov    edx,ebx
c001f939:	85 c0                	test   eax,eax
c001f93b:	75 37                	jne    c001f974 <__umoddi3+0x54>
c001f93d:	39 df                	cmp    edi,ebx
c001f93f:	76 13                	jbe    c001f954 <__umoddi3+0x34>
c001f941:	89 f0                	mov    eax,esi
c001f943:	f7 f7                	div    edi
c001f945:	89 d0                	mov    eax,edx
c001f947:	31 d2                	xor    edx,edx
c001f949:	83 c4 1c             	add    esp,0x1c
c001f94c:	5b                   	pop    ebx
c001f94d:	5e                   	pop    esi
c001f94e:	5f                   	pop    edi
c001f94f:	5d                   	pop    ebp
c001f950:	c3                   	ret    
c001f951:	8d 76 00             	lea    esi,[esi+0x0]
c001f954:	89 fd                	mov    ebp,edi
c001f956:	85 ff                	test   edi,edi
c001f958:	75 0b                	jne    c001f965 <__umoddi3+0x45>
c001f95a:	b8 01 00 00 00       	mov    eax,0x1
c001f95f:	31 d2                	xor    edx,edx
c001f961:	f7 f7                	div    edi
c001f963:	89 c5                	mov    ebp,eax
c001f965:	89 d8                	mov    eax,ebx
c001f967:	31 d2                	xor    edx,edx
c001f969:	f7 f5                	div    ebp
c001f96b:	89 f0                	mov    eax,esi
c001f96d:	f7 f5                	div    ebp
c001f96f:	89 d0                	mov    eax,edx
c001f971:	eb d4                	jmp    c001f947 <__umoddi3+0x27>
c001f973:	90                   	nop
c001f974:	89 f1                	mov    ecx,esi
c001f976:	39 d8                	cmp    eax,ebx
c001f978:	76 0a                	jbe    c001f984 <__umoddi3+0x64>
c001f97a:	89 f0                	mov    eax,esi
c001f97c:	83 c4 1c             	add    esp,0x1c
c001f97f:	5b                   	pop    ebx
c001f980:	5e                   	pop    esi
c001f981:	5f                   	pop    edi
c001f982:	5d                   	pop    ebp
c001f983:	c3                   	ret    
c001f984:	0f bd e8             	bsr    ebp,eax
c001f987:	83 f5 1f             	xor    ebp,0x1f
c001f98a:	75 1c                	jne    c001f9a8 <__umoddi3+0x88>
c001f98c:	39 d8                	cmp    eax,ebx
c001f98e:	72 04                	jb     c001f994 <__umoddi3+0x74>
c001f990:	39 f7                	cmp    edi,esi
c001f992:	77 08                	ja     c001f99c <__umoddi3+0x7c>
c001f994:	89 da                	mov    edx,ebx
c001f996:	29 fe                	sub    esi,edi
c001f998:	19 c2                	sbb    edx,eax
c001f99a:	89 f1                	mov    ecx,esi
c001f99c:	89 c8                	mov    eax,ecx
c001f99e:	83 c4 1c             	add    esp,0x1c
c001f9a1:	5b                   	pop    ebx
c001f9a2:	5e                   	pop    esi
c001f9a3:	5f                   	pop    edi
c001f9a4:	5d                   	pop    ebp
c001f9a5:	c3                   	ret    
c001f9a6:	66 90                	xchg   ax,ax
c001f9a8:	ba 20 00 00 00       	mov    edx,0x20
c001f9ad:	29 ea                	sub    edx,ebp
c001f9af:	89 e9                	mov    ecx,ebp
c001f9b1:	d3 e0                	shl    eax,cl
c001f9b3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f9b7:	89 f8                	mov    eax,edi
c001f9b9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001f9bd:	88 d1                	mov    cl,dl
c001f9bf:	d3 e8                	shr    eax,cl
c001f9c1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f9c5:	09 c1                	or     ecx,eax
c001f9c7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001f9cb:	89 e9                	mov    ecx,ebp
c001f9cd:	d3 e7                	shl    edi,cl
c001f9cf:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f9d3:	89 d8                	mov    eax,ebx
c001f9d5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f9d9:	88 d1                	mov    cl,dl
c001f9db:	d3 e8                	shr    eax,cl
c001f9dd:	89 c7                	mov    edi,eax
c001f9df:	89 e9                	mov    ecx,ebp
c001f9e1:	d3 e3                	shl    ebx,cl
c001f9e3:	89 f0                	mov    eax,esi
c001f9e5:	88 d1                	mov    cl,dl
c001f9e7:	d3 e8                	shr    eax,cl
c001f9e9:	09 d8                	or     eax,ebx
c001f9eb:	89 e9                	mov    ecx,ebp
c001f9ed:	d3 e6                	shl    esi,cl
c001f9ef:	89 f3                	mov    ebx,esi
c001f9f1:	89 fa                	mov    edx,edi
c001f9f3:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001f9f7:	89 d1                	mov    ecx,edx
c001f9f9:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f9fd:	89 c6                	mov    esi,eax
c001f9ff:	89 d7                	mov    edi,edx
c001fa01:	39 d1                	cmp    ecx,edx
c001fa03:	72 27                	jb     c001fa2c <__umoddi3+0x10c>
c001fa05:	74 21                	je     c001fa28 <__umoddi3+0x108>
c001fa07:	89 ca                	mov    edx,ecx
c001fa09:	29 f3                	sub    ebx,esi
c001fa0b:	19 fa                	sbb    edx,edi
c001fa0d:	89 d0                	mov    eax,edx
c001fa0f:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001fa13:	d3 e0                	shl    eax,cl
c001fa15:	89 e9                	mov    ecx,ebp
c001fa17:	d3 eb                	shr    ebx,cl
c001fa19:	09 d8                	or     eax,ebx
c001fa1b:	d3 ea                	shr    edx,cl
c001fa1d:	83 c4 1c             	add    esp,0x1c
c001fa20:	5b                   	pop    ebx
c001fa21:	5e                   	pop    esi
c001fa22:	5f                   	pop    edi
c001fa23:	5d                   	pop    ebp
c001fa24:	c3                   	ret    
c001fa25:	8d 76 00             	lea    esi,[esi+0x0]
c001fa28:	39 c3                	cmp    ebx,eax
c001fa2a:	73 db                	jae    c001fa07 <__umoddi3+0xe7>
c001fa2c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001fa30:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001fa34:	89 d7                	mov    edi,edx
c001fa36:	89 c6                	mov    esi,eax
c001fa38:	eb cd                	jmp    c001fa07 <__umoddi3+0xe7>

Disassembly of section .init:

c001fa3a <_init>:
c001fa3a:	55                   	push   ebp
c001fa3b:	89 e5                	mov    ebp,esp
c001fa3d:	e8 b2 06 fe ff       	call   c00000f4 <frame_dummy>
c001fa42:	e8 e5 fa ff ff       	call   c001f52c <__do_global_ctors_aux>
c001fa47:	5d                   	pop    ebp
c001fa48:	c3                   	ret    

Disassembly of section .fini:

c001fa49 <_fini>:
c001fa49:	55                   	push   ebp
c001fa4a:	89 e5                	mov    ebp,esp
c001fa4c:	e8 33 06 fe ff       	call   c0000084 <__do_global_dtors_aux>
c001fa51:	5d                   	pop    ebp
c001fa52:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001fa54 <Computer::~Computer()>:
c001fa54:	83 ec 0c             	sub    esp,0xc
c001fa57:	ba c8 0d 02 c0       	mov    edx,0xc0020dc8
c001fa5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa60:	89 10                	mov    DWORD PTR [eax],edx
c001fa62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa66:	83 ec 0c             	sub    esp,0xc
c001fa69:	50                   	push   eax
c001fa6a:	e8 89 ce fe ff       	call   c000c8f8 <Device::~Device()>
c001fa6f:	83 c4 10             	add    esp,0x10
c001fa72:	90                   	nop
c001fa73:	83 c4 0c             	add    esp,0xc
c001fa76:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001fa78 <Computer::~Computer()>:
c001fa78:	83 ec 0c             	sub    esp,0xc
c001fa7b:	83 ec 0c             	sub    esp,0xc
c001fa7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fa82:	e8 cd ff ff ff       	call   c001fa54 <Computer::~Computer()>
c001fa87:	83 c4 10             	add    esp,0x10
c001fa8a:	83 ec 08             	sub    esp,0x8
c001fa8d:	68 70 01 00 00       	push   0x170
c001fa92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fa96:	e8 ad ad fe ff       	call   c000a848 <operator delete(void*, unsigned long)>
c001fa9b:	83 c4 10             	add    esp,0x10
c001fa9e:	83 c4 0c             	add    esp,0xc
c001faa1:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001faa2 <idleCommon()>:
c001faa2:	83 ec 0c             	sub    esp,0xc
c001faa5:	fa                   	cli    
c001faa6:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c001faac:	e8 fb 66 ff ff       	call   c00161ac <schedule()>
c001fab1:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001fab6:	48                   	dec    eax
c001fab7:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c001fabc:	75 01                	jne    c001fabf <idleCommon()+0x1d>
c001fabe:	fb                   	sti    
c001fabf:	83 c4 0c             	add    esp,0xc
c001fac2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001fac4 <LinkedList<UnixFile>::~LinkedList()>:
c001fac4:	90                   	nop
c001fac5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001fac6 <LinkedList<UnixFile>::LinkedList()>:
c001fac6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001faca:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fad0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fad4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fadb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fadf:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fae6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001faea:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001faf0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001faf4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fafb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001faff:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fb06:	90                   	nop
c001fb07:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001fb08 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001fb08:	83 ec 0c             	sub    esp,0xc
c001fb0b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001fb10:	75 10                	jne    c001fb22 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001fb12:	83 ec 0c             	sub    esp,0xc
c001fb15:	68 dc 0f 02 c0       	push   0xc0020fdc
c001fb1a:	e8 a8 1b ff ff       	call   c00116c7 <KePanic(char const*)>
c001fb1f:	83 c4 10             	add    esp,0x10
c001fb22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb26:	8b 00                	mov    eax,DWORD PTR [eax]
c001fb28:	85 c0                	test   eax,eax
c001fb2a:	74 34                	je     c001fb60 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001fb2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb30:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fb33:	85 c0                	test   eax,eax
c001fb35:	74 29                	je     c001fb60 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001fb37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb3b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fb3e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fb42:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fb45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb49:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fb4d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fb50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb54:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fb57:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fb5e:	eb 65                	jmp    c001fbc5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001fb60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb64:	8b 00                	mov    eax,DWORD PTR [eax]
c001fb66:	85 c0                	test   eax,eax
c001fb68:	75 4b                	jne    c001fbb5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001fb6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb6e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fb71:	85 c0                	test   eax,eax
c001fb73:	75 40                	jne    c001fbb5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001fb75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb79:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fb7d:	89 10                	mov    DWORD PTR [eax],edx
c001fb7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb83:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fb87:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fb8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb8e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fb91:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fb98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb9c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fb9f:	85 c0                	test   eax,eax
c001fba1:	74 22                	je     c001fbc5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001fba3:	83 ec 0c             	sub    esp,0xc
c001fba6:	68 fe 0f 02 c0       	push   0xc0020ffe
c001fbab:	e8 17 1b ff ff       	call   c00116c7 <KePanic(char const*)>
c001fbb0:	83 c4 10             	add    esp,0x10
c001fbb3:	eb 10                	jmp    c001fbc5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001fbb5:	83 ec 0c             	sub    esp,0xc
c001fbb8:	68 08 10 02 c0       	push   0xc0021008
c001fbbd:	e8 05 1b ff ff       	call   c00116c7 <KePanic(char const*)>
c001fbc2:	83 c4 10             	add    esp,0x10
c001fbc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbc9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fbcc:	8d 50 01             	lea    edx,[eax+0x1]
c001fbcf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbd3:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fbd6:	90                   	nop
c001fbd7:	83 c4 0c             	add    esp,0xc
c001fbda:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001fbdc <LinkedList<UnixFile>::getFirstElement()>:
c001fbdc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fbe0:	8b 00                	mov    eax,DWORD PTR [eax]
c001fbe2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001fbe4 <LinkedList<UnixFile>::removeFirst()>:
c001fbe4:	83 ec 0c             	sub    esp,0xc
c001fbe7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbeb:	8b 00                	mov    eax,DWORD PTR [eax]
c001fbed:	85 c0                	test   eax,eax
c001fbef:	75 12                	jne    c001fc03 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001fbf1:	83 ec 0c             	sub    esp,0xc
c001fbf4:	68 14 10 02 c0       	push   0xc0021014
c001fbf9:	e8 c9 1a ff ff       	call   c00116c7 <KePanic(char const*)>
c001fbfe:	83 c4 10             	add    esp,0x10
c001fc01:	eb 7e                	jmp    c001fc81 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001fc03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc07:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fc0a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fc0d:	85 c0                	test   eax,eax
c001fc0f:	74 10                	je     c001fc21 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001fc11:	83 ec 0c             	sub    esp,0xc
c001fc14:	68 5f 10 02 c0       	push   0xc002105f
c001fc19:	e8 a9 1a ff ff       	call   c00116c7 <KePanic(char const*)>
c001fc1e:	83 c4 10             	add    esp,0x10
c001fc21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc25:	8b 00                	mov    eax,DWORD PTR [eax]
c001fc27:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fc2a:	85 c0                	test   eax,eax
c001fc2c:	75 33                	jne    c001fc61 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001fc2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc32:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fc38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc3c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fc43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc47:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fc4a:	83 f8 01             	cmp    eax,0x1
c001fc4d:	74 21                	je     c001fc70 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001fc4f:	83 ec 0c             	sub    esp,0xc
c001fc52:	68 38 10 02 c0       	push   0xc0021038
c001fc57:	e8 6b 1a ff ff       	call   c00116c7 <KePanic(char const*)>
c001fc5c:	83 c4 10             	add    esp,0x10
c001fc5f:	eb 0f                	jmp    c001fc70 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001fc61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc65:	8b 00                	mov    eax,DWORD PTR [eax]
c001fc67:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001fc6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc6e:	89 10                	mov    DWORD PTR [eax],edx
c001fc70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc74:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fc77:	8d 50 ff             	lea    edx,[eax-0x1]
c001fc7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc7e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fc81:	83 c4 0c             	add    esp,0xc
c001fc84:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001fc86 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001fc86:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fc8a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fc8d:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001fc8e <DriverlessDevice::~DriverlessDevice()>:
c001fc8e:	ba 7c 1c 02 c0       	mov    edx,0xc0021c7c
c001fc93:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fc97:	89 10                	mov    DWORD PTR [eax],edx
c001fc99:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fc9d:	50                   	push   eax
c001fc9e:	e8 55 cc fe ff       	call   c000c8f8 <Device::~Device()>
c001fca3:	83 c4 04             	add    esp,0x4
c001fca6:	90                   	nop
c001fca7:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001fca8 <DriverlessDevice::~DriverlessDevice()>:
c001fca8:	83 ec 0c             	sub    esp,0xc
c001fcab:	83 ec 0c             	sub    esp,0xc
c001fcae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fcb2:	e8 d7 ff ff ff       	call   c001fc8e <DriverlessDevice::~DriverlessDevice()>
c001fcb7:	83 c4 10             	add    esp,0x10
c001fcba:	83 ec 08             	sub    esp,0x8
c001fcbd:	68 58 01 00 00       	push   0x158
c001fcc2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fcc6:	e8 7d ab fe ff       	call   c000a848 <operator delete(void*, unsigned long)>
c001fccb:	83 c4 10             	add    esp,0x10
c001fcce:	83 c4 0c             	add    esp,0xc
c001fcd1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001fcd2 <LinkedList<Device>::addElement(Device*)>:
c001fcd2:	83 ec 0c             	sub    esp,0xc
c001fcd5:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001fcda:	75 10                	jne    c001fcec <LinkedList<Device>::addElement(Device*)+0x1a>
c001fcdc:	83 ec 0c             	sub    esp,0xc
c001fcdf:	68 dc 0f 02 c0       	push   0xc0020fdc
c001fce4:	e8 de 19 ff ff       	call   c00116c7 <KePanic(char const*)>
c001fce9:	83 c4 10             	add    esp,0x10
c001fcec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcf0:	8b 00                	mov    eax,DWORD PTR [eax]
c001fcf2:	85 c0                	test   eax,eax
c001fcf4:	74 3a                	je     c001fd30 <LinkedList<Device>::addElement(Device*)+0x5e>
c001fcf6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcfa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fcfd:	85 c0                	test   eax,eax
c001fcff:	74 2f                	je     c001fd30 <LinkedList<Device>::addElement(Device*)+0x5e>
c001fd01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd05:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fd08:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fd0c:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001fd12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd16:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fd1a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fd1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd21:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fd24:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001fd2e:	eb 68                	jmp    c001fd98 <LinkedList<Device>::addElement(Device*)+0xc6>
c001fd30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd34:	8b 00                	mov    eax,DWORD PTR [eax]
c001fd36:	85 c0                	test   eax,eax
c001fd38:	75 4e                	jne    c001fd88 <LinkedList<Device>::addElement(Device*)+0xb6>
c001fd3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd3e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fd41:	85 c0                	test   eax,eax
c001fd43:	75 43                	jne    c001fd88 <LinkedList<Device>::addElement(Device*)+0xb6>
c001fd45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd49:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fd4d:	89 10                	mov    DWORD PTR [eax],edx
c001fd4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd53:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fd57:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fd5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd5e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fd61:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001fd6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd6f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fd72:	85 c0                	test   eax,eax
c001fd74:	74 22                	je     c001fd98 <LinkedList<Device>::addElement(Device*)+0xc6>
c001fd76:	83 ec 0c             	sub    esp,0xc
c001fd79:	68 fe 0f 02 c0       	push   0xc0020ffe
c001fd7e:	e8 44 19 ff ff       	call   c00116c7 <KePanic(char const*)>
c001fd83:	83 c4 10             	add    esp,0x10
c001fd86:	eb 10                	jmp    c001fd98 <LinkedList<Device>::addElement(Device*)+0xc6>
c001fd88:	83 ec 0c             	sub    esp,0xc
c001fd8b:	68 08 10 02 c0       	push   0xc0021008
c001fd90:	e8 32 19 ff ff       	call   c00116c7 <KePanic(char const*)>
c001fd95:	83 c4 10             	add    esp,0x10
c001fd98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd9c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fd9f:	8d 50 01             	lea    edx,[eax+0x1]
c001fda2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fda6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fda9:	90                   	nop
c001fdaa:	83 c4 0c             	add    esp,0xc
c001fdad:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001fdae <LinkedList<Device>::LinkedList()>:
c001fdae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fdb2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fdb8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fdbc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fdc3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fdc7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fdce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fdd2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fdd8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fddc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fde3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fde7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fdee:	90                   	nop
c001fdef:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001fdf0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001fdf0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fdf4:	8b 00                	mov    eax,DWORD PTR [eax]
c001fdf6:	85 c0                	test   eax,eax
c001fdf8:	75 0e                	jne    c001fe08 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001fdfa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fdfe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fe01:	85 c0                	test   eax,eax
c001fe03:	75 03                	jne    c001fe08 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001fe05:	b0 01                	mov    al,0x1
c001fe07:	c3                   	ret    
c001fe08:	b0 00                	mov    al,0x0
c001fe0a:	90                   	nop
c001fe0b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001fe0c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001fe0c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fe10:	8b 00                	mov    eax,DWORD PTR [eax]
c001fe12:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001fe14 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001fe14:	83 ec 0c             	sub    esp,0xc
c001fe17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe1b:	8b 00                	mov    eax,DWORD PTR [eax]
c001fe1d:	85 c0                	test   eax,eax
c001fe1f:	75 17                	jne    c001fe38 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c001fe21:	83 ec 0c             	sub    esp,0xc
c001fe24:	68 14 10 02 c0       	push   0xc0021014
c001fe29:	e8 99 18 ff ff       	call   c00116c7 <KePanic(char const*)>
c001fe2e:	83 c4 10             	add    esp,0x10
c001fe31:	e9 96 00 00 00       	jmp    c001fecc <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb8>
c001fe36:	66 90                	xchg   ax,ax
c001fe38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe3c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fe3f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001fe42:	85 c0                	test   eax,eax
c001fe44:	0f 95 c0             	setne  al
c001fe47:	0f b6 c0             	movzx  eax,al
c001fe4a:	85 c0                	test   eax,eax
c001fe4c:	74 12                	je     c001fe60 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x4c>
c001fe4e:	83 ec 0c             	sub    esp,0xc
c001fe51:	68 5f 10 02 c0       	push   0xc002105f
c001fe56:	e8 6c 18 ff ff       	call   c00116c7 <KePanic(char const*)>
c001fe5b:	83 c4 10             	add    esp,0x10
c001fe5e:	66 90                	xchg   ax,ax
c001fe60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe64:	8b 00                	mov    eax,DWORD PTR [eax]
c001fe66:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001fe69:	85 c0                	test   eax,eax
c001fe6b:	0f 94 c0             	sete   al
c001fe6e:	0f b6 c0             	movzx  eax,al
c001fe71:	85 c0                	test   eax,eax
c001fe73:	74 33                	je     c001fea8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x94>
c001fe75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe79:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fe7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe83:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fe8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe8e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fe91:	83 f8 01             	cmp    eax,0x1
c001fe94:	74 22                	je     c001feb8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c001fe96:	83 ec 0c             	sub    esp,0xc
c001fe99:	68 38 10 02 c0       	push   0xc0021038
c001fe9e:	e8 24 18 ff ff       	call   c00116c7 <KePanic(char const*)>
c001fea3:	83 c4 10             	add    esp,0x10
c001fea6:	eb 10                	jmp    c001feb8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c001fea8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001feac:	8b 00                	mov    eax,DWORD PTR [eax]
c001feae:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001feb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001feb5:	89 10                	mov    DWORD PTR [eax],edx
c001feb7:	90                   	nop
c001feb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001febc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001febf:	8d 50 ff             	lea    edx,[eax-0x1]
c001fec2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fec6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fec9:	8d 76 00             	lea    esi,[esi+0x0]
c001fecc:	83 c4 0c             	add    esp,0xc
c001fecf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001fed0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001fed0:	83 ec 0c             	sub    esp,0xc
c001fed3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001fed8:	75 12                	jne    c001feec <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c001feda:	83 ec 0c             	sub    esp,0xc
c001fedd:	68 dc 0f 02 c0       	push   0xc0020fdc
c001fee2:	e8 e0 17 ff ff       	call   c00116c7 <KePanic(char const*)>
c001fee7:	83 c4 10             	add    esp,0x10
c001feea:	66 90                	xchg   ax,ax
c001feec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fef0:	8b 00                	mov    eax,DWORD PTR [eax]
c001fef2:	85 c0                	test   eax,eax
c001fef4:	74 36                	je     c001ff2c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001fef6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fefa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fefd:	85 c0                	test   eax,eax
c001feff:	74 2b                	je     c001ff2c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001ff01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff05:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ff08:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ff0c:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001ff0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff13:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ff17:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ff1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff1e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ff21:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001ff28:	eb 6a                	jmp    c001ff94 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001ff2a:	66 90                	xchg   ax,ax
c001ff2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff30:	8b 00                	mov    eax,DWORD PTR [eax]
c001ff32:	85 c0                	test   eax,eax
c001ff34:	75 4e                	jne    c001ff84 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001ff36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff3a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ff3d:	85 c0                	test   eax,eax
c001ff3f:	75 43                	jne    c001ff84 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001ff41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff45:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ff49:	89 10                	mov    DWORD PTR [eax],edx
c001ff4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff4f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ff53:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ff56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff5a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ff5d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001ff64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff68:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ff6b:	85 c0                	test   eax,eax
c001ff6d:	74 25                	je     c001ff94 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001ff6f:	83 ec 0c             	sub    esp,0xc
c001ff72:	68 fe 0f 02 c0       	push   0xc0020ffe
c001ff77:	e8 4b 17 ff ff       	call   c00116c7 <KePanic(char const*)>
c001ff7c:	83 c4 10             	add    esp,0x10
c001ff7f:	eb 13                	jmp    c001ff94 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001ff81:	8d 76 00             	lea    esi,[esi+0x0]
c001ff84:	83 ec 0c             	sub    esp,0xc
c001ff87:	68 08 10 02 c0       	push   0xc0021008
c001ff8c:	e8 36 17 ff ff       	call   c00116c7 <KePanic(char const*)>
c001ff91:	83 c4 10             	add    esp,0x10
c001ff94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff98:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ff9b:	8d 50 01             	lea    edx,[eax+0x1]
c001ff9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffa2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ffa5:	90                   	nop
c001ffa6:	83 c4 0c             	add    esp,0xc
c001ffa9:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001ffac <ACPI::~ACPI()>:
c001ffac:	83 ec 0c             	sub    esp,0xc
c001ffaf:	ba f8 22 02 c0       	mov    edx,0xc00222f8
c001ffb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffb8:	89 10                	mov    DWORD PTR [eax],edx
c001ffba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffbe:	83 ec 0c             	sub    esp,0xc
c001ffc1:	50                   	push   eax
c001ffc2:	e8 31 c9 fe ff       	call   c000c8f8 <Device::~Device()>
c001ffc7:	83 c4 10             	add    esp,0x10
c001ffca:	90                   	nop
c001ffcb:	83 c4 0c             	add    esp,0xc
c001ffce:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001ffd0 <ACPI::~ACPI()>:
c001ffd0:	83 ec 0c             	sub    esp,0xc
c001ffd3:	83 ec 0c             	sub    esp,0xc
c001ffd6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ffda:	e8 cd ff ff ff       	call   c001ffac <ACPI::~ACPI()>
c001ffdf:	83 c4 10             	add    esp,0x10
c001ffe2:	83 ec 08             	sub    esp,0x8
c001ffe5:	68 64 12 00 00       	push   0x1264
c001ffea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ffee:	e8 55 a8 fe ff       	call   c000a848 <operator delete(void*, unsigned long)>
c001fff3:	83 c4 10             	add    esp,0x10
c001fff6:	83 c4 0c             	add    esp,0xc
c001fff9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c001fffc <LinkedList<Device>::~LinkedList()>:
c001fffc:	90                   	nop
c001fffd:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c0020000 <LinkedList<Device>::isEmpty()>:
c0020000:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020004:	8b 00                	mov    eax,DWORD PTR [eax]
c0020006:	85 c0                	test   eax,eax
c0020008:	75 0e                	jne    c0020018 <LinkedList<Device>::isEmpty()+0x18>
c002000a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002000e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0020011:	85 c0                	test   eax,eax
c0020013:	75 03                	jne    c0020018 <LinkedList<Device>::isEmpty()+0x18>
c0020015:	b0 01                	mov    al,0x1
c0020017:	c3                   	ret    
c0020018:	b0 00                	mov    al,0x0
c002001a:	90                   	nop
c002001b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c002001c <LinkedList<Device>::getFirstElement()>:
c002001c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020020:	8b 00                	mov    eax,DWORD PTR [eax]
c0020022:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c0020024 <LinkedList<Device>::removeFirst()>:
c0020024:	83 ec 0c             	sub    esp,0xc
c0020027:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002002b:	8b 00                	mov    eax,DWORD PTR [eax]
c002002d:	85 c0                	test   eax,eax
c002002f:	75 17                	jne    c0020048 <LinkedList<Device>::removeFirst()+0x24>
c0020031:	83 ec 0c             	sub    esp,0xc
c0020034:	68 14 10 02 c0       	push   0xc0021014
c0020039:	e8 89 16 ff ff       	call   c00116c7 <KePanic(char const*)>
c002003e:	83 c4 10             	add    esp,0x10
c0020041:	e9 92 00 00 00       	jmp    c00200d8 <LinkedList<Device>::removeFirst()+0xb4>
c0020046:	66 90                	xchg   ax,ax
c0020048:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002004c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002004f:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0020055:	85 c0                	test   eax,eax
c0020057:	74 13                	je     c002006c <LinkedList<Device>::removeFirst()+0x48>
c0020059:	83 ec 0c             	sub    esp,0xc
c002005c:	68 5f 10 02 c0       	push   0xc002105f
c0020061:	e8 61 16 ff ff       	call   c00116c7 <KePanic(char const*)>
c0020066:	83 c4 10             	add    esp,0x10
c0020069:	8d 76 00             	lea    esi,[esi+0x0]
c002006c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020070:	8b 00                	mov    eax,DWORD PTR [eax]
c0020072:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0020078:	85 c0                	test   eax,eax
c002007a:	75 34                	jne    c00200b0 <LinkedList<Device>::removeFirst()+0x8c>
c002007c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020080:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0020086:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002008a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0020091:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020095:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0020098:	83 f8 01             	cmp    eax,0x1
c002009b:	74 27                	je     c00200c4 <LinkedList<Device>::removeFirst()+0xa0>
c002009d:	83 ec 0c             	sub    esp,0xc
c00200a0:	68 38 10 02 c0       	push   0xc0021038
c00200a5:	e8 1d 16 ff ff       	call   c00116c7 <KePanic(char const*)>
c00200aa:	83 c4 10             	add    esp,0x10
c00200ad:	eb 15                	jmp    c00200c4 <LinkedList<Device>::removeFirst()+0xa0>
c00200af:	90                   	nop
c00200b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200b4:	8b 00                	mov    eax,DWORD PTR [eax]
c00200b6:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c00200bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200c0:	89 10                	mov    DWORD PTR [eax],edx
c00200c2:	66 90                	xchg   ax,ax
c00200c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200c8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00200cb:	8d 50 ff             	lea    edx,[eax-0x1]
c00200ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200d2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00200d5:	8d 76 00             	lea    esi,[esi+0x0]
c00200d8:	83 c4 0c             	add    esp,0xc
c00200db:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c00200dc <CPU::~CPU()>:
c00200dc:	83 ec 0c             	sub    esp,0xc
c00200df:	ba a0 24 02 c0       	mov    edx,0xc00224a0
c00200e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200e8:	89 10                	mov    DWORD PTR [eax],edx
c00200ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200ee:	83 ec 0c             	sub    esp,0xc
c00200f1:	50                   	push   eax
c00200f2:	e8 01 c8 fe ff       	call   c000c8f8 <Device::~Device()>
c00200f7:	83 c4 10             	add    esp,0x10
c00200fa:	90                   	nop
c00200fb:	83 c4 0c             	add    esp,0xc
c00200fe:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0020100 <CPU::~CPU()>:
c0020100:	83 ec 0c             	sub    esp,0xc
c0020103:	83 ec 0c             	sub    esp,0xc
c0020106:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002010a:	e8 cd ff ff ff       	call   c00200dc <CPU::~CPU()>
c002010f:	83 c4 10             	add    esp,0x10
c0020112:	83 ec 08             	sub    esp,0x8
c0020115:	68 94 11 00 00       	push   0x1194
c002011a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002011e:	e8 25 a7 fe ff       	call   c000a848 <operator delete(void*, unsigned long)>
c0020123:	83 c4 10             	add    esp,0x10
c0020126:	83 c4 0c             	add    esp,0xc
c0020129:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c002012c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c002012c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020130:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0020133:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0020134 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0020134:	90                   	nop
c0020135:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0020138 <ThreadControlBlock::ThreadControlBlock()>:
c0020138:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002013c:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0020143:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020147:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c002014e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020152:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0020159:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002015d:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c0020164:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020168:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c002016f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020173:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0020177:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002017b:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c002017f:	90                   	nop
c0020180:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c0020184 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c0020184:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020188:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002018e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020192:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0020199:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002019d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00201a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00201a8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00201ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00201b2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00201b9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00201bd:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00201c4:	90                   	nop
c00201c5:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c00201c6 <PCI::~PCI()>:
c00201c6:	83 ec 0c             	sub    esp,0xc
c00201c9:	ba 80 33 02 c0       	mov    edx,0xc0023380
c00201ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201d2:	89 10                	mov    DWORD PTR [eax],edx
c00201d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201d8:	83 ec 0c             	sub    esp,0xc
c00201db:	50                   	push   eax
c00201dc:	e8 af c1 fe ff       	call   c000c390 <Bus::~Bus()>
c00201e1:	83 c4 10             	add    esp,0x10
c00201e4:	90                   	nop
c00201e5:	83 c4 0c             	add    esp,0xc
c00201e8:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c00201ea <PCI::~PCI()>:
c00201ea:	83 ec 0c             	sub    esp,0xc
c00201ed:	83 ec 0c             	sub    esp,0xc
c00201f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00201f4:	e8 cd ff ff ff       	call   c00201c6 <PCI::~PCI()>
c00201f9:	83 c4 10             	add    esp,0x10
c00201fc:	83 ec 08             	sub    esp,0x8
c00201ff:	68 5c 01 00 00       	push   0x15c
c0020204:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020208:	e8 3b a6 fe ff       	call   c000a848 <operator delete(void*, unsigned long)>
c002020d:	83 c4 10             	add    esp,0x10
c0020210:	83 c4 0c             	add    esp,0xc
c0020213:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0020214 <IDE::~IDE()>:
c0020214:	83 ec 0c             	sub    esp,0xc
c0020217:	ba 34 34 02 c0       	mov    edx,0xc0023434
c002021c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020220:	89 10                	mov    DWORD PTR [eax],edx
c0020222:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020226:	83 ec 0c             	sub    esp,0xc
c0020229:	50                   	push   eax
c002022a:	e8 41 cb fe ff       	call   c000cd70 <HardDiskController::~HardDiskController()>
c002022f:	83 c4 10             	add    esp,0x10
c0020232:	90                   	nop
c0020233:	83 c4 0c             	add    esp,0xc
c0020236:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0020238 <IDE::~IDE()>:
c0020238:	83 ec 0c             	sub    esp,0xc
c002023b:	83 ec 0c             	sub    esp,0xc
c002023e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020242:	e8 cd ff ff ff       	call   c0020214 <IDE::~IDE()>
c0020247:	83 c4 10             	add    esp,0x10
c002024a:	83 ec 08             	sub    esp,0x8
c002024d:	68 70 02 00 00       	push   0x270
c0020252:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020256:	e8 ed a5 fe ff       	call   c000a848 <operator delete(void*, unsigned long)>
c002025b:	83 c4 10             	add    esp,0x10
c002025e:	83 c4 0c             	add    esp,0xc
c0020261:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0020262 <SATABus::~SATABus()>:
c0020262:	83 ec 0c             	sub    esp,0xc
c0020265:	ba 84 34 02 c0       	mov    edx,0xc0023484
c002026a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002026e:	89 10                	mov    DWORD PTR [eax],edx
c0020270:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020274:	83 ec 0c             	sub    esp,0xc
c0020277:	50                   	push   eax
c0020278:	e8 f3 ca fe ff       	call   c000cd70 <HardDiskController::~HardDiskController()>
c002027d:	83 c4 10             	add    esp,0x10
c0020280:	90                   	nop
c0020281:	83 c4 0c             	add    esp,0xc
c0020284:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c0020286 <SATABus::~SATABus()>:
c0020286:	83 ec 0c             	sub    esp,0xc
c0020289:	83 ec 0c             	sub    esp,0xc
c002028c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020290:	e8 cd ff ff ff       	call   c0020262 <SATABus::~SATABus()>
c0020295:	83 c4 10             	add    esp,0x10
c0020298:	83 ec 08             	sub    esp,0x8
c002029b:	68 64 01 00 00       	push   0x164
c00202a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00202a4:	e8 9f a5 fe ff       	call   c000a848 <operator delete(void*, unsigned long)>
c00202a9:	83 c4 10             	add    esp,0x10
c00202ac:	83 c4 0c             	add    esp,0xc
c00202af:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c00202b0 <ATA::~ATA()>:
c00202b0:	83 ec 0c             	sub    esp,0xc
c00202b3:	ba c4 34 02 c0       	mov    edx,0xc00234c4
c00202b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00202bc:	89 10                	mov    DWORD PTR [eax],edx
c00202be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00202c2:	83 ec 0c             	sub    esp,0xc
c00202c5:	50                   	push   eax
c00202c6:	e8 87 cb fe ff       	call   c000ce52 <PhysicalDisk::~PhysicalDisk()>
c00202cb:	83 c4 10             	add    esp,0x10
c00202ce:	90                   	nop
c00202cf:	83 c4 0c             	add    esp,0xc
c00202d2:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c00202d4 <ATA::~ATA()>:
c00202d4:	83 ec 0c             	sub    esp,0xc
c00202d7:	83 ec 0c             	sub    esp,0xc
c00202da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00202de:	e8 cd ff ff ff       	call   c00202b0 <ATA::~ATA()>
c00202e3:	83 c4 10             	add    esp,0x10
c00202e6:	83 ec 08             	sub    esp,0x8
c00202e9:	68 7c 01 00 00       	push   0x17c
c00202ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00202f2:	e8 51 a5 fe ff       	call   c000a848 <operator delete(void*, unsigned long)>
c00202f7:	83 c4 10             	add    esp,0x10
c00202fa:	83 c4 0c             	add    esp,0xc
c00202fd:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c00202fe <ATAPI::~ATAPI()>:
c00202fe:	83 ec 0c             	sub    esp,0xc
c0020301:	ba 0c 35 02 c0       	mov    edx,0xc002350c
c0020306:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002030a:	89 10                	mov    DWORD PTR [eax],edx
c002030c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020310:	83 ec 0c             	sub    esp,0xc
c0020313:	50                   	push   eax
c0020314:	e8 39 cb fe ff       	call   c000ce52 <PhysicalDisk::~PhysicalDisk()>
c0020319:	83 c4 10             	add    esp,0x10
c002031c:	90                   	nop
c002031d:	83 c4 0c             	add    esp,0xc
c0020320:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0020322 <ATAPI::~ATAPI()>:
c0020322:	83 ec 0c             	sub    esp,0xc
c0020325:	83 ec 0c             	sub    esp,0xc
c0020328:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002032c:	e8 cd ff ff ff       	call   c00202fe <ATAPI::~ATAPI()>
c0020331:	83 c4 10             	add    esp,0x10
c0020334:	83 ec 08             	sub    esp,0x8
c0020337:	68 84 01 00 00       	push   0x184
c002033c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020340:	e8 03 a5 fe ff       	call   c000a848 <operator delete(void*, unsigned long)>
c0020345:	83 c4 10             	add    esp,0x10
c0020348:	83 c4 0c             	add    esp,0xc
c002034b:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c002034c <SATA::~SATA()>:
c002034c:	83 ec 0c             	sub    esp,0xc
c002034f:	ba c0 35 02 c0       	mov    edx,0xc00235c0
c0020354:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020358:	89 10                	mov    DWORD PTR [eax],edx
c002035a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002035e:	83 ec 0c             	sub    esp,0xc
c0020361:	50                   	push   eax
c0020362:	e8 eb ca fe ff       	call   c000ce52 <PhysicalDisk::~PhysicalDisk()>
c0020367:	83 c4 10             	add    esp,0x10
c002036a:	90                   	nop
c002036b:	83 c4 0c             	add    esp,0xc
c002036e:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0020370 <SATA::~SATA()>:
c0020370:	83 ec 0c             	sub    esp,0xc
c0020373:	83 ec 0c             	sub    esp,0xc
c0020376:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002037a:	e8 cd ff ff ff       	call   c002034c <SATA::~SATA()>
c002037f:	83 c4 10             	add    esp,0x10
c0020382:	83 ec 08             	sub    esp,0x8
c0020385:	68 7c 01 00 00       	push   0x17c
c002038a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002038e:	e8 b5 a4 fe ff       	call   c000a848 <operator delete(void*, unsigned long)>
c0020393:	83 c4 10             	add    esp,0x10
c0020396:	83 c4 0c             	add    esp,0xc
c0020399:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c002039a <SATAPI::~SATAPI()>:
c002039a:	83 ec 0c             	sub    esp,0xc
c002039d:	ba e4 36 02 c0       	mov    edx,0xc00236e4
c00203a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00203a6:	89 10                	mov    DWORD PTR [eax],edx
c00203a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00203ac:	83 ec 0c             	sub    esp,0xc
c00203af:	50                   	push   eax
c00203b0:	e8 9d ca fe ff       	call   c000ce52 <PhysicalDisk::~PhysicalDisk()>
c00203b5:	83 c4 10             	add    esp,0x10
c00203b8:	90                   	nop
c00203b9:	83 c4 0c             	add    esp,0xc
c00203bc:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c00203be <SATAPI::~SATAPI()>:
c00203be:	83 ec 0c             	sub    esp,0xc
c00203c1:	83 ec 0c             	sub    esp,0xc
c00203c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00203c8:	e8 cd ff ff ff       	call   c002039a <SATAPI::~SATAPI()>
c00203cd:	83 c4 10             	add    esp,0x10
c00203d0:	83 ec 08             	sub    esp,0x8
c00203d3:	68 84 01 00 00       	push   0x184
c00203d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00203dc:	e8 67 a4 fe ff       	call   c000a848 <operator delete(void*, unsigned long)>
c00203e1:	83 c4 10             	add    esp,0x10
c00203e4:	83 c4 0c             	add    esp,0xc
c00203e7:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c00203e8 <IOAPIC::~IOAPIC()>:
c00203e8:	83 ec 0c             	sub    esp,0xc
c00203eb:	ba 24 37 02 c0       	mov    edx,0xc0023724
c00203f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00203f4:	89 10                	mov    DWORD PTR [eax],edx
c00203f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00203fa:	83 ec 0c             	sub    esp,0xc
c00203fd:	50                   	push   eax
c00203fe:	e8 f5 c4 fe ff       	call   c000c8f8 <Device::~Device()>
c0020403:	83 c4 10             	add    esp,0x10
c0020406:	90                   	nop
c0020407:	83 c4 0c             	add    esp,0xc
c002040a:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c002040c <IOAPIC::~IOAPIC()>:
c002040c:	83 ec 0c             	sub    esp,0xc
c002040f:	83 ec 0c             	sub    esp,0xc
c0020412:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020416:	e8 cd ff ff ff       	call   c00203e8 <IOAPIC::~IOAPIC()>
c002041b:	83 c4 10             	add    esp,0x10
c002041e:	83 ec 08             	sub    esp,0x8
c0020421:	68 68 01 00 00       	push   0x168
c0020426:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002042a:	e8 19 a4 fe ff       	call   c000a848 <operator delete(void*, unsigned long)>
c002042f:	83 c4 10             	add    esp,0x10
c0020432:	83 c4 0c             	add    esp,0xc
c0020435:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0020438 <APICTimer::~APICTimer()>:
c0020438:	83 ec 0c             	sub    esp,0xc
c002043b:	ba 6c 37 02 c0       	mov    edx,0xc002376c
c0020440:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020444:	89 10                	mov    DWORD PTR [eax],edx
c0020446:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002044a:	83 ec 0c             	sub    esp,0xc
c002044d:	50                   	push   eax
c002044e:	e8 71 df fe ff       	call   c000e3c4 <Timer::~Timer()>
c0020453:	83 c4 10             	add    esp,0x10
c0020456:	90                   	nop
c0020457:	83 c4 0c             	add    esp,0xc
c002045a:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c002045c <APICTimer::~APICTimer()>:
c002045c:	83 ec 0c             	sub    esp,0xc
c002045f:	83 ec 0c             	sub    esp,0xc
c0020462:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020466:	e8 cd ff ff ff       	call   c0020438 <APICTimer::~APICTimer()>
c002046b:	83 c4 10             	add    esp,0x10
c002046e:	83 ec 08             	sub    esp,0x8
c0020471:	68 60 01 00 00       	push   0x160
c0020476:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002047a:	e8 c9 a3 fe ff       	call   c000a848 <operator delete(void*, unsigned long)>
c002047f:	83 c4 10             	add    esp,0x10
c0020482:	83 c4 0c             	add    esp,0xc
c0020485:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0020488 <PIT::~PIT()>:
c0020488:	83 ec 0c             	sub    esp,0xc
c002048b:	ba bc 37 02 c0       	mov    edx,0xc00237bc
c0020490:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020494:	89 10                	mov    DWORD PTR [eax],edx
c0020496:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002049a:	83 ec 0c             	sub    esp,0xc
c002049d:	50                   	push   eax
c002049e:	e8 21 df fe ff       	call   c000e3c4 <Timer::~Timer()>
c00204a3:	83 c4 10             	add    esp,0x10
c00204a6:	90                   	nop
c00204a7:	83 c4 0c             	add    esp,0xc
c00204aa:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c00204ac <PIT::~PIT()>:
c00204ac:	83 ec 0c             	sub    esp,0xc
c00204af:	83 ec 0c             	sub    esp,0xc
c00204b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00204b6:	e8 cd ff ff ff       	call   c0020488 <PIT::~PIT()>
c00204bb:	83 c4 10             	add    esp,0x10
c00204be:	83 ec 08             	sub    esp,0x8
c00204c1:	68 5c 01 00 00       	push   0x15c
c00204c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00204ca:	e8 79 a3 fe ff       	call   c000a848 <operator delete(void*, unsigned long)>
c00204cf:	83 c4 10             	add    esp,0x10
c00204d2:	83 c4 0c             	add    esp,0xc
c00204d5:	c3                   	ret    

Disassembly of section userkernel:

c0025000 <KiDefaultSignalHandlerAbort(int)>:
c0025000:	57                   	push   edi
c0025001:	b9 07 00 00 00       	mov    ecx,0x7
c0025006:	56                   	push   esi
c0025007:	be d1 25 02 c0       	mov    esi,0xc00225d1
c002500c:	83 ec 24             	sub    esp,0x24
c002500f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025013:	fc                   	cld    
c0025014:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0025016:	8d 44 24 04          	lea    eax,[esp+0x4]
c002501a:	50                   	push   eax
c002501b:	6a 00                	push   0x0
c002501d:	6a 38                	push   0x38
c002501f:	6a 01                	push   0x1
c0025021:	e8 2c 00 00 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0025026:	83 c4 34             	add    esp,0x34
c0025029:	5e                   	pop    esi
c002502a:	5f                   	pop    edi
c002502b:	c3                   	ret    

c002502c <KiDefaultSignalHandlerTerminate(int)>:
c002502c:	57                   	push   edi
c002502d:	b9 08 00 00 00       	mov    ecx,0x8
c0025032:	56                   	push   esi
c0025033:	be ed 25 02 c0       	mov    esi,0xc00225ed
c0025038:	83 ec 24             	sub    esp,0x24
c002503b:	89 e7                	mov    edi,esp
c002503d:	fc                   	cld    
c002503e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0025040:	54                   	push   esp
c0025041:	6a 00                	push   0x0
c0025043:	6a 37                	push   0x37
c0025045:	6a 01                	push   0x1
c0025047:	e8 06 00 00 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c002504c:	83 c4 34             	add    esp,0x34
c002504f:	5e                   	pop    esi
c0025050:	5f                   	pop    edi
c0025051:	c3                   	ret    

c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c0025052:	53                   	push   ebx
c0025053:	83 ec 10             	sub    esp,0x10
c0025056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002505a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c002505e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0025062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0025066:	cd 60                	int    0x60
c0025068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002506c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0025070:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0025074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0025078:	83 c4 10             	add    esp,0x10
c002507b:	5b                   	pop    ebx
c002507c:	c3                   	ret    

Disassembly of section align_previous:

c0026000 <DO_NOT_DELETE()>:
c0026000:	c3                   	ret    
