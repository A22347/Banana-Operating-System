
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 de fb 00 00       	call   c000fbfe <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 13 7f 02 00       	call   c0027f38 <_init>
c0000025:	c3                   	ret    
c0000026:	bb e2 8a 02 c0       	mov    ebx,0xc0028ae2
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb f0 8a 02 c0    	cmp    ebx,0xc0028af0
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 f8 d0 02 c0       	mov    eax,0xc002d0f8
c0000049:	3d f8 d0 02 c0       	cmp    eax,0xc002d0f8
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 f8 d0 02 c0       	push   0xc002d0f8
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 f8 d0 02 c0       	mov    eax,0xc002d0f8
c0000075:	2d f8 d0 02 c0       	sub    eax,0xc002d0f8
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 f8 d0 02 c0       	push   0xc002d0f8
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 28 d7 02 c0 00 	cmp    BYTE PTR ds:0xc002d728,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb f8 8a 02 c0       	mov    ebx,0xc0028af8
c00000bb:	81 eb f4 8a 02 c0    	sub    ebx,0xc0028af4
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be f4 8a 02 c0       	mov    esi,0xc0028af4
c00000ca:	a1 2c d7 02 c0       	mov    eax,ds:0xc002d72c
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 2c d7 02 c0       	mov    ds:0xc002d72c,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 2c d7 02 c0       	mov    eax,ds:0xc002d72c
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 f8 d0 02 c0       	push   0xc002d0f8
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 28 d7 02 c0 01 	mov    BYTE PTR ds:0xc002d728,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 30 d7 02 c0       	push   0xc002d730
c000012c:	68 f8 d0 02 c0       	push   0xc002d0f8
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <voodooXADD>:
c00001b4:	55                   	push   ebp
c00001b5:	89 e5                	mov    ebp,esp
c00001b7:	60                   	pusha  
c00001b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00001bb:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00001be:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00001c1:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c00001c4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00001c7:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c00001ca:	0f 02 ff             	lar    edi,di
c00001cd:	c1 ef 0d             	shr    edi,0xd
c00001d0:	66 81 e7 03 00       	and    di,0x3
c00001d5:	75 09                	jne    c00001e0 <voodooXADD.usermode>
c00001d7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c00001da:	81 c4 14 00 00 00    	add    esp,0x14

c00001e0 <voodooXADD.usermode>:
c00001e0:	89 35 7b 02 00 c0    	mov    DWORD PTR ds:0xc000027b,esi
c00001e6:	89 25 77 02 00 c0    	mov    DWORD PTR ds:0xc0000277,esp
c00001ec:	60                   	pusha  
c00001ed:	b0 90                	mov    al,0x90
c00001ef:	b9 20 00 00 00       	mov    ecx,0x20
c00001f4:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c00001f9:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00001fb:	61                   	popa   
c00001fc:	60                   	pusha  
c00001fd:	89 d6                	mov    esi,edx
c00001ff:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c0000204:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000206:	61                   	popa   
c0000207:	60                   	pusha  
c0000208:	89 d6                	mov    esi,edx
c000020a:	bf 5e 02 00 c0       	mov    edi,0xc000025e
c000020f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000211:	61                   	popa   
c0000212:	b1 90                	mov    cl,0x90
c0000214:	85 db                	test   ebx,ebx
c0000216:	74 06                	je     c000021e <voodooXADD.skipChange>
c0000218:	8a 8b 4d 02 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffdb3]

c000021e <voodooXADD.skipChange>:
c000021e:	88 8b 4e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffdb2],cl
c0000224:	80 ab 4f 02 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffdb1],0x3a
c000022b:	88 8b 5e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffda2],cl
c0000231:	80 ab 5f 02 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffda1],0xbe
c0000238:	89 c4                	mov    esp,eax
c000023a:	81 c4 10 00 00 00    	add    esp,0x10
c0000240:	5f                   	pop    edi
c0000241:	5e                   	pop    esi
c0000242:	5d                   	pop    ebp
c0000243:	5b                   	pop    ebx
c0000244:	5b                   	pop    ebx
c0000245:	5a                   	pop    edx
c0000246:	59                   	pop    ecx
c0000247:	58                   	pop    eax
c0000248:	8b 25 7b 02 00 c0    	mov    esp,DWORD PTR ds:0xc000027b

c000024e <voodooXADD.helper>:
c000024e:	90                   	nop
c000024f:	90                   	nop
c0000250:	90                   	nop
c0000251:	90                   	nop
c0000252:	90                   	nop
c0000253:	90                   	nop
c0000254:	90                   	nop
c0000255:	90                   	nop
c0000256:	90                   	nop
c0000257:	90                   	nop
c0000258:	90                   	nop
c0000259:	90                   	nop
c000025a:	90                   	nop
c000025b:	90                   	nop
c000025c:	90                   	nop
c000025d:	90                   	nop
c000025e:	90                   	nop
c000025f:	90                   	nop
c0000260:	90                   	nop
c0000261:	90                   	nop
c0000262:	90                   	nop
c0000263:	90                   	nop
c0000264:	90                   	nop
c0000265:	90                   	nop
c0000266:	90                   	nop
c0000267:	90                   	nop
c0000268:	90                   	nop
c0000269:	90                   	nop
c000026a:	90                   	nop
c000026b:	90                   	nop
c000026c:	90                   	nop
c000026d:	90                   	nop
c000026e:	8b 25 77 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000277
c0000274:	61                   	popa   
c0000275:	c9                   	leave  
c0000276:	c3                   	ret    

c0000277 <voodooXADD.oldStack>:
c0000277:	00 00                	add    BYTE PTR [eax],al
	...

c000027b <voodooXADD.newStack>:
c000027b:	00 00                	add    BYTE PTR [eax],al
	...

c000027f <doTPAUSE>:
c000027f:	fb                   	sti    
c0000280:	31 c0                	xor    eax,eax
c0000282:	31 d2                	xor    edx,edx
c0000284:	66 0f ae f0          	tpause eax
c0000288:	c3                   	ret    

c0000289 <hasLegacyFPU>:
c0000289:	0f 20 c2             	mov    edx,cr0
c000028c:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000292:	0f 22 c2             	mov    cr0,edx
c0000295:	db e3                	fninit 
c0000297:	dd 3d ac 02 00 c0    	fnstsw WORD PTR ds:0xc00002ac
c000029d:	31 c0                	xor    eax,eax
c000029f:	66 81 3d ac 02 00 c0 00 00 	cmp    WORD PTR ds:0xc00002ac,0x0
c00002a8:	75 01                	jne    c00002ab <hasLegacyFPU.nofpu>

c00002aa <hasLegacyFPU.hasfpu>:
c00002aa:	40                   	inc    eax

c00002ab <hasLegacyFPU.nofpu>:
c00002ab:	c3                   	ret    

c00002ac <testword>:
c00002ac:	aa                   	stos   BYTE PTR es:[edi],al
c00002ad:	55                   	push   ebp

c00002ae <is486>:
c00002ae:	0f 09                	wbinvd 
c00002b0:	31 c0                	xor    eax,eax
c00002b2:	40                   	inc    eax
c00002b3:	c3                   	ret    
c00002b4:	90                   	nop
c00002b5:	90                   	nop
c00002b6:	90                   	nop
c00002b7:	90                   	nop
c00002b8:	90                   	nop
c00002b9:	90                   	nop
c00002ba:	90                   	nop
c00002bb:	90                   	nop
c00002bc:	90                   	nop
c00002bd:	90                   	nop
c00002be:	90                   	nop
c00002bf:	90                   	nop
c00002c0:	90                   	nop
c00002c1:	90                   	nop
c00002c2:	90                   	nop
c00002c3:	90                   	nop
c00002c4:	90                   	nop
c00002c5:	90                   	nop
c00002c6:	90                   	nop
c00002c7:	90                   	nop
c00002c8:	90                   	nop
c00002c9:	90                   	nop
c00002ca:	90                   	nop
c00002cb:	90                   	nop
c00002cc:	90                   	nop
c00002cd:	90                   	nop
c00002ce:	90                   	nop
c00002cf:	90                   	nop
c00002d0:	90                   	nop
c00002d1:	90                   	nop
c00002d2:	90                   	nop
c00002d3:	90                   	nop
c00002d4:	90                   	nop
c00002d5:	90                   	nop
c00002d6:	90                   	nop
c00002d7:	90                   	nop
c00002d8:	90                   	nop
c00002d9:	90                   	nop
c00002da:	90                   	nop
c00002db:	90                   	nop
c00002dc:	90                   	nop
c00002dd:	90                   	nop
c00002de:	90                   	nop
c00002df:	90                   	nop
c00002e0:	90                   	nop
c00002e1:	31 c0                	xor    eax,eax
c00002e3:	c3                   	ret    

c00002e4 <detectCPUID>:
c00002e4:	9c                   	pushf  
c00002e5:	9c                   	pushf  
c00002e6:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002ed:	9d                   	popf   
c00002ee:	9c                   	pushf  
c00002ef:	58                   	pop    eax
c00002f0:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002f3:	9d                   	popf   
c00002f4:	25 00 00 20 00       	and    eax,0x200000
c00002f9:	c3                   	ret    

c00002fa <goToVM86>:
c00002fa:	55                   	push   ebp
c00002fb:	89 e5                	mov    ebp,esp
c00002fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000300:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000303:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0000306:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0000309:	25 ff ff 00 00       	and    eax,0xffff
c000030e:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000314:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000031a:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000320:	52                   	push   edx
c0000321:	51                   	push   ecx
c0000322:	68 02 02 02 00       	push   0x20202
c0000327:	53                   	push   ebx
c0000328:	50                   	push   eax
c0000329:	cf                   	iret   

c000032a <goToUsermode>:
c000032a:	55                   	push   ebp
c000032b:	89 e5                	mov    ebp,esp
c000032d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000330:	66 b8 23 00          	mov    ax,0x23
c0000334:	66 8e d8             	mov    ds,ax
c0000337:	66 8e c0             	mov    es,ax
c000033a:	66 8e e0             	mov    fs,ax
c000033d:	66 8e e8             	mov    gs,ax
c0000340:	89 e0                	mov    eax,esp
c0000342:	68 23 00 00 00       	push   0x23
c0000347:	50                   	push   eax
c0000348:	68 02 02 00 00       	push   0x202
c000034d:	68 1b 00 00 00       	push   0x1b
c0000352:	53                   	push   ebx
c0000353:	cf                   	iret   

c0000354 <switchToThreadASMFirstTime>:
c0000354:	9c                   	pushf  
c0000355:	fa                   	cli    
c0000356:	50                   	push   eax
c0000357:	53                   	push   ebx
c0000358:	51                   	push   ecx
c0000359:	52                   	push   edx
c000035a:	56                   	push   esi
c000035b:	57                   	push   edi
c000035c:	55                   	push   ebp
c000035d:	e9 11 00 00 00       	jmp    c0000373 <commonThreadSwitch>

c0000362 <switchToThreadASM>:
c0000362:	9c                   	pushf  
c0000363:	50                   	push   eax
c0000364:	53                   	push   ebx
c0000365:	51                   	push   ecx
c0000366:	52                   	push   edx
c0000367:	56                   	push   esi
c0000368:	57                   	push   edi
c0000369:	55                   	push   ebp
c000036a:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000370:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000373 <commonThreadSwitch>:
c0000373:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000377:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c000037d:	8b 06                	mov    eax,DWORD PTR [esi]
c000037f:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000382:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000385:	0f 20 d9             	mov    ecx,cr3
c0000388:	39 c8                	cmp    eax,ecx
c000038a:	74 03                	je     c000038f <commonThreadSwitch.doneVAS>
c000038c:	0f 22 d8             	mov    cr3,eax

c000038f <commonThreadSwitch.doneVAS>:
c000038f:	85 d2                	test   edx,edx
c0000391:	75 11                	jne    c00003a4 <commonThreadSwitch.firstTime>
c0000393:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c0000396:	e8 e9 ce 01 00       	call   c001d284 <changeTSS>
c000039b:	5d                   	pop    ebp
c000039c:	5f                   	pop    edi
c000039d:	5e                   	pop    esi
c000039e:	5a                   	pop    edx
c000039f:	59                   	pop    ecx
c00003a0:	5b                   	pop    ebx
c00003a1:	58                   	pop    eax
c00003a2:	9d                   	popf   
c00003a3:	c3                   	ret    

c00003a4 <commonThreadSwitch.firstTime>:
c00003a4:	fa                   	cli    
c00003a5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00003a8:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00003ad:	60                   	pusha  
c00003ae:	e8 40 25 01 00       	call   c00128f3 <mapVASFirstTime>
c00003b3:	61                   	popa   
c00003b4:	89 c4                	mov    esp,eax
c00003b6:	56                   	push   esi
c00003b7:	52                   	push   edx
c00003b8:	e8 c7 ce 01 00       	call   c001d284 <changeTSS>
c00003bd:	5a                   	pop    edx
c00003be:	5e                   	pop    esi
c00003bf:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00003c6:	5d                   	pop    ebp
c00003c7:	5f                   	pop    edi
c00003c8:	5e                   	pop    esi
c00003c9:	59                   	pop    ecx
c00003ca:	59                   	pop    ecx
c00003cb:	5b                   	pop    ebx
c00003cc:	58                   	pop    eax
c00003cd:	81 c4 04 00 00 00    	add    esp,0x4
c00003d3:	6a 02                	push   0x2
c00003d5:	9d                   	popf   
c00003d6:	52                   	push   edx
c00003d7:	e8 15 d3 01 00       	call   c001d6f1 <taskStartupFunction>
c00003dc:	5a                   	pop    edx
c00003dd:	50                   	push   eax
c00003de:	ff d2                	call   edx
c00003e0:	e8 c3 d8 01 00       	call   c001dca8 <taskReturned>
c00003e5:	e9 fb ff ff ff       	jmp    c00003e5 <commonThreadSwitch.firstTime+0x41>

c00003ea <asmQuickAcquireLock>:
c00003ea:	55                   	push   ebp
c00003eb:	89 e5                	mov    ebp,esp
c00003ed:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003f0 <asmQuickAcquireLock.retry>:
c00003f0:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003f5:	72 02                	jb     c00003f9 <asmQuickAcquireLock.spin_with_pause>
c00003f7:	fa                   	cli    
c00003f8:	c3                   	ret    

c00003f9 <asmQuickAcquireLock.spin_with_pause>:
c00003f9:	f3 90                	pause  
c00003fb:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000401:	75 f6                	jne    c00003f9 <asmQuickAcquireLock.spin_with_pause>
c0000403:	e9 e8 ff ff ff       	jmp    c00003f0 <asmQuickAcquireLock.retry>

c0000408 <asmQuickReleaseLock>:
c0000408:	55                   	push   ebp
c0000409:	89 e5                	mov    ebp,esp
c000040b:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000412:	5d                   	pop    ebp
c0000413:	c3                   	ret    

c0000414 <asmAcquireLock>:
c0000414:	55                   	push   ebp
c0000415:	89 e5                	mov    ebp,esp
c0000417:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000041a <asmAcquireLock.retry>:
c000041a:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000041f:	72 05                	jb     c0000426 <asmAcquireLock.spin_with_pause>
c0000421:	9c                   	pushf  
c0000422:	58                   	pop    eax
c0000423:	fa                   	cli    
c0000424:	5d                   	pop    ebp
c0000425:	c3                   	ret    

c0000426 <asmAcquireLock.spin_with_pause>:
c0000426:	f3 90                	pause  
c0000428:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c000042e:	75 f6                	jne    c0000426 <asmAcquireLock.spin_with_pause>
c0000430:	e9 e5 ff ff ff       	jmp    c000041a <asmAcquireLock.retry>

c0000435 <asmReleaseLock>:
c0000435:	55                   	push   ebp
c0000436:	89 e5                	mov    ebp,esp
c0000438:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000043b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000043e:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000444:	52                   	push   edx
c0000445:	9d                   	popf   
c0000446:	5d                   	pop    ebp
c0000447:	c3                   	ret    

c0000448 <loadGDT>:
c0000448:	0f 01 15 70 db 02 c0 	lgdtd  ds:0xc002db70
c000044f:	66 b8 10 00          	mov    ax,0x10
c0000453:	66 8e d8             	mov    ds,ax
c0000456:	66 8e c0             	mov    es,ax
c0000459:	66 8e e0             	mov    fs,ax
c000045c:	66 8e e8             	mov    gs,ax
c000045f:	66 8e d0             	mov    ss,ax
c0000462:	e9 00 00 00 00       	jmp    c0000467 <flush2>

c0000467 <flush2>:
c0000467:	c3                   	ret    

c0000468 <isr0>:
c0000468:	fa                   	cli    
c0000469:	68 00 00 00 00       	push   0x0
c000046e:	68 00 00 00 00       	push   0x0
c0000473:	e9 44 01 00 00       	jmp    c00005bc <int_common_stub>

c0000478 <isr1>:
c0000478:	fa                   	cli    
c0000479:	6a 00                	push   0x0
c000047b:	6a 01                	push   0x1
c000047d:	e9 3a 01 00 00       	jmp    c00005bc <int_common_stub>

c0000482 <isr2>:
c0000482:	fa                   	cli    
c0000483:	6a 00                	push   0x0
c0000485:	6a 02                	push   0x2
c0000487:	e9 30 01 00 00       	jmp    c00005bc <int_common_stub>

c000048c <isr3>:
c000048c:	fa                   	cli    
c000048d:	6a 00                	push   0x0
c000048f:	6a 03                	push   0x3
c0000491:	e9 26 01 00 00       	jmp    c00005bc <int_common_stub>

c0000496 <isr4>:
c0000496:	fa                   	cli    
c0000497:	6a 00                	push   0x0
c0000499:	6a 04                	push   0x4
c000049b:	e9 1c 01 00 00       	jmp    c00005bc <int_common_stub>

c00004a0 <isr5>:
c00004a0:	fa                   	cli    
c00004a1:	6a 00                	push   0x0
c00004a3:	6a 05                	push   0x5
c00004a5:	e9 12 01 00 00       	jmp    c00005bc <int_common_stub>

c00004aa <isr6>:
c00004aa:	fa                   	cli    
c00004ab:	6a 00                	push   0x0
c00004ad:	6a 06                	push   0x6
c00004af:	e9 08 01 00 00       	jmp    c00005bc <int_common_stub>

c00004b4 <isr7>:
c00004b4:	fa                   	cli    
c00004b5:	6a 00                	push   0x0
c00004b7:	6a 07                	push   0x7
c00004b9:	e9 fe 00 00 00       	jmp    c00005bc <int_common_stub>

c00004be <isr8>:
c00004be:	fa                   	cli    
c00004bf:	6a 08                	push   0x8
c00004c1:	e9 f6 00 00 00       	jmp    c00005bc <int_common_stub>

c00004c6 <isr9>:
c00004c6:	fa                   	cli    
c00004c7:	6a 00                	push   0x0
c00004c9:	6a 09                	push   0x9
c00004cb:	e9 ec 00 00 00       	jmp    c00005bc <int_common_stub>

c00004d0 <isr10>:
c00004d0:	fa                   	cli    
c00004d1:	6a 0a                	push   0xa
c00004d3:	e9 e4 00 00 00       	jmp    c00005bc <int_common_stub>

c00004d8 <isr11>:
c00004d8:	fa                   	cli    
c00004d9:	6a 0b                	push   0xb
c00004db:	e9 dc 00 00 00       	jmp    c00005bc <int_common_stub>

c00004e0 <isr12>:
c00004e0:	fa                   	cli    
c00004e1:	6a 0c                	push   0xc
c00004e3:	e9 d4 00 00 00       	jmp    c00005bc <int_common_stub>

c00004e8 <isr13>:
c00004e8:	fa                   	cli    
c00004e9:	6a 0d                	push   0xd
c00004eb:	e9 cc 00 00 00       	jmp    c00005bc <int_common_stub>

c00004f0 <isr14>:
c00004f0:	fa                   	cli    
c00004f1:	6a 0e                	push   0xe
c00004f3:	e9 c4 00 00 00       	jmp    c00005bc <int_common_stub>

c00004f8 <isr15>:
c00004f8:	fa                   	cli    
c00004f9:	6a 00                	push   0x0
c00004fb:	6a 0f                	push   0xf
c00004fd:	e9 ba 00 00 00       	jmp    c00005bc <int_common_stub>

c0000502 <isr16>:
c0000502:	fa                   	cli    
c0000503:	6a 00                	push   0x0
c0000505:	6a 10                	push   0x10
c0000507:	e9 b0 00 00 00       	jmp    c00005bc <int_common_stub>

c000050c <isr17>:
c000050c:	fa                   	cli    
c000050d:	6a 00                	push   0x0
c000050f:	6a 11                	push   0x11
c0000511:	e9 a6 00 00 00       	jmp    c00005bc <int_common_stub>

c0000516 <isr18>:
c0000516:	fa                   	cli    
c0000517:	6a 00                	push   0x0
c0000519:	6a 12                	push   0x12
c000051b:	e9 9c 00 00 00       	jmp    c00005bc <int_common_stub>

c0000520 <irq3>:
c0000520:	fa                   	cli    
c0000521:	6a 00                	push   0x0
c0000523:	6a 23                	push   0x23
c0000525:	e9 92 00 00 00       	jmp    c00005bc <int_common_stub>

c000052a <irq4>:
c000052a:	fa                   	cli    
c000052b:	6a 00                	push   0x0
c000052d:	6a 24                	push   0x24
c000052f:	e9 88 00 00 00       	jmp    c00005bc <int_common_stub>

c0000534 <irq5>:
c0000534:	fa                   	cli    
c0000535:	6a 00                	push   0x0
c0000537:	6a 25                	push   0x25
c0000539:	e9 7e 00 00 00       	jmp    c00005bc <int_common_stub>

c000053e <irq6>:
c000053e:	fa                   	cli    
c000053f:	6a 00                	push   0x0
c0000541:	6a 26                	push   0x26
c0000543:	e9 74 00 00 00       	jmp    c00005bc <int_common_stub>

c0000548 <irq7>:
c0000548:	fa                   	cli    
c0000549:	6a 00                	push   0x0
c000054b:	6a 27                	push   0x27
c000054d:	e9 6a 00 00 00       	jmp    c00005bc <int_common_stub>

c0000552 <irq8>:
c0000552:	fa                   	cli    
c0000553:	6a 00                	push   0x0
c0000555:	6a 28                	push   0x28
c0000557:	e9 60 00 00 00       	jmp    c00005bc <int_common_stub>

c000055c <irq9>:
c000055c:	fa                   	cli    
c000055d:	6a 00                	push   0x0
c000055f:	6a 29                	push   0x29
c0000561:	e9 56 00 00 00       	jmp    c00005bc <int_common_stub>

c0000566 <irq10>:
c0000566:	fa                   	cli    
c0000567:	6a 00                	push   0x0
c0000569:	6a 2a                	push   0x2a
c000056b:	e9 4c 00 00 00       	jmp    c00005bc <int_common_stub>

c0000570 <irq11>:
c0000570:	fa                   	cli    
c0000571:	6a 00                	push   0x0
c0000573:	6a 2b                	push   0x2b
c0000575:	e9 42 00 00 00       	jmp    c00005bc <int_common_stub>

c000057a <irq12>:
c000057a:	fa                   	cli    
c000057b:	6a 00                	push   0x0
c000057d:	6a 2c                	push   0x2c
c000057f:	e9 38 00 00 00       	jmp    c00005bc <int_common_stub>

c0000584 <irq13>:
c0000584:	fa                   	cli    
c0000585:	6a 00                	push   0x0
c0000587:	6a 2d                	push   0x2d
c0000589:	e9 2e 00 00 00       	jmp    c00005bc <int_common_stub>

c000058e <irq14>:
c000058e:	fa                   	cli    
c000058f:	6a 00                	push   0x0
c0000591:	6a 2e                	push   0x2e
c0000593:	e9 24 00 00 00       	jmp    c00005bc <int_common_stub>

c0000598 <irq15>:
c0000598:	fa                   	cli    
c0000599:	6a 00                	push   0x0
c000059b:	6a 2f                	push   0x2f
c000059d:	e9 1a 00 00 00       	jmp    c00005bc <int_common_stub>

c00005a2 <irq1>:
c00005a2:	fa                   	cli    
c00005a3:	6a 00                	push   0x0
c00005a5:	6a 21                	push   0x21
c00005a7:	eb 13                	jmp    c00005bc <int_common_stub>

c00005a9 <irq2>:
c00005a9:	fa                   	cli    
c00005aa:	6a 00                	push   0x0
c00005ac:	6a 22                	push   0x22
c00005ae:	eb 0c                	jmp    c00005bc <int_common_stub>

c00005b0 <isr96>:
c00005b0:	6a 00                	push   0x0
c00005b2:	6a 60                	push   0x60
c00005b4:	fb                   	sti    
c00005b5:	eb 05                	jmp    c00005bc <int_common_stub>

c00005b7 <irq0>:
c00005b7:	fa                   	cli    
c00005b8:	6a 00                	push   0x0
c00005ba:	6a 20                	push   0x20

c00005bc <int_common_stub>:
c00005bc:	60                   	pusha  
c00005bd:	1e                   	push   ds
c00005be:	06                   	push   es
c00005bf:	0f a0                	push   fs
c00005c1:	0f a8                	push   gs
c00005c3:	66 b8 10 00          	mov    ax,0x10
c00005c7:	66 8e d8             	mov    ds,ax
c00005ca:	66 8e c0             	mov    es,ax
c00005cd:	66 8e e0             	mov    fs,ax
c00005d0:	66 8e e8             	mov    gs,ax
c00005d3:	54                   	push   esp
c00005d4:	e8 1e 42 01 00       	call   c00147f7 <int_handler>
c00005d9:	81 c4 04 00 00 00    	add    esp,0x4
c00005df:	0f a9                	pop    gs
c00005e1:	0f a1                	pop    fs
c00005e3:	07                   	pop    es
c00005e4:	1f                   	pop    ds
c00005e5:	61                   	popa   
c00005e6:	81 c4 08 00 00 00    	add    esp,0x8
c00005ec:	cf                   	iret   

c00005ed <irq16>:
c00005ed:	fa                   	cli    
c00005ee:	6a 00                	push   0x0
c00005f0:	6a 30                	push   0x30
c00005f2:	e9 c5 ff ff ff       	jmp    c00005bc <int_common_stub>

c00005f7 <irq17>:
c00005f7:	fa                   	cli    
c00005f8:	6a 00                	push   0x0
c00005fa:	6a 31                	push   0x31
c00005fc:	e9 bb ff ff ff       	jmp    c00005bc <int_common_stub>

c0000601 <irq18>:
c0000601:	fa                   	cli    
c0000602:	6a 00                	push   0x0
c0000604:	6a 32                	push   0x32
c0000606:	e9 b1 ff ff ff       	jmp    c00005bc <int_common_stub>

c000060b <irq19>:
c000060b:	fa                   	cli    
c000060c:	6a 00                	push   0x0
c000060e:	6a 33                	push   0x33
c0000610:	e9 a7 ff ff ff       	jmp    c00005bc <int_common_stub>

c0000615 <irq20>:
c0000615:	fa                   	cli    
c0000616:	6a 00                	push   0x0
c0000618:	6a 34                	push   0x34
c000061a:	e9 9d ff ff ff       	jmp    c00005bc <int_common_stub>

c000061f <irq21>:
c000061f:	fa                   	cli    
c0000620:	6a 00                	push   0x0
c0000622:	6a 35                	push   0x35
c0000624:	e9 93 ff ff ff       	jmp    c00005bc <int_common_stub>

c0000629 <irq22>:
c0000629:	fa                   	cli    
c000062a:	6a 00                	push   0x0
c000062c:	6a 36                	push   0x36
c000062e:	e9 89 ff ff ff       	jmp    c00005bc <int_common_stub>

c0000633 <irq23>:
c0000633:	fa                   	cli    
c0000634:	6a 00                	push   0x0
c0000636:	6a 37                	push   0x37
c0000638:	e9 7f ff ff ff       	jmp    c00005bc <int_common_stub>
c000063d:	66 90                	xchg   ax,ax
c000063f:	90                   	nop

c0000640 <memcmp>:
c0000640:	56                   	push   esi
c0000641:	53                   	push   ebx
c0000642:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000646:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000064a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000064e:	85 f6                	test   esi,esi
c0000650:	74 1d                	je     c000066f <memcmp+0x2f>
c0000652:	8a 08                	mov    cl,BYTE PTR [eax]
c0000654:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000657:	38 cb                	cmp    bl,cl
c0000659:	75 19                	jne    c0000674 <memcmp+0x34>
c000065b:	01 c6                	add    esi,eax
c000065d:	eb 0a                	jmp    c0000669 <memcmp+0x29>
c000065f:	90                   	nop
c0000660:	8a 08                	mov    cl,BYTE PTR [eax]
c0000662:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000665:	38 d9                	cmp    cl,bl
c0000667:	75 0b                	jne    c0000674 <memcmp+0x34>
c0000669:	40                   	inc    eax
c000066a:	42                   	inc    edx
c000066b:	39 f0                	cmp    eax,esi
c000066d:	75 f1                	jne    c0000660 <memcmp+0x20>
c000066f:	31 c0                	xor    eax,eax
c0000671:	5b                   	pop    ebx
c0000672:	5e                   	pop    esi
c0000673:	c3                   	ret    
c0000674:	0f b6 c1             	movzx  eax,cl
c0000677:	29 d8                	sub    eax,ebx
c0000679:	5b                   	pop    ebx
c000067a:	5e                   	pop    esi
c000067b:	c3                   	ret    

c000067c <memmove>:
c000067c:	55                   	push   ebp
c000067d:	57                   	push   edi
c000067e:	56                   	push   esi
c000067f:	53                   	push   ebx
c0000680:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000684:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0000688:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000068c:	39 dd                	cmp    ebp,ebx
c000068e:	0f 83 80 00 00 00    	jae    c0000714 <memmove+0x98>
c0000694:	85 d2                	test   edx,edx
c0000696:	74 74                	je     c000070c <memmove+0x90>
c0000698:	8d 4b 04             	lea    ecx,[ebx+0x4]
c000069b:	8d 75 04             	lea    esi,[ebp+0x4]
c000069e:	39 cd                	cmp    ebp,ecx
c00006a0:	0f 93 c1             	setae  cl
c00006a3:	39 f3                	cmp    ebx,esi
c00006a5:	0f 93 c0             	setae  al
c00006a8:	89 c6                	mov    esi,eax
c00006aa:	09 ce                	or     esi,ecx
c00006ac:	8d 4a ff             	lea    ecx,[edx-0x1]
c00006af:	89 f0                	mov    eax,esi
c00006b1:	83 f9 0c             	cmp    ecx,0xc
c00006b4:	0f 97 c1             	seta   cl
c00006b7:	84 c8                	test   al,cl
c00006b9:	74 75                	je     c0000730 <memmove+0xb4>
c00006bb:	89 e9                	mov    ecx,ebp
c00006bd:	09 d9                	or     ecx,ebx
c00006bf:	83 e1 03             	and    ecx,0x3
c00006c2:	75 6c                	jne    c0000730 <memmove+0xb4>
c00006c4:	89 d7                	mov    edi,edx
c00006c6:	89 d9                	mov    ecx,ebx
c00006c8:	83 e7 fc             	and    edi,0xfffffffc
c00006cb:	89 ee                	mov    esi,ebp
c00006cd:	01 df                	add    edi,ebx
c00006cf:	90                   	nop
c00006d0:	8b 01                	mov    eax,DWORD PTR [ecx]
c00006d2:	83 c6 04             	add    esi,0x4
c00006d5:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c00006d8:	83 c1 04             	add    ecx,0x4
c00006db:	39 f9                	cmp    ecx,edi
c00006dd:	75 f1                	jne    c00006d0 <memmove+0x54>
c00006df:	89 d1                	mov    ecx,edx
c00006e1:	89 d7                	mov    edi,edx
c00006e3:	83 e1 fc             	and    ecx,0xfffffffc
c00006e6:	29 cf                	sub    edi,ecx
c00006e8:	01 cb                	add    ebx,ecx
c00006ea:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c00006ee:	39 ca                	cmp    edx,ecx
c00006f0:	74 1a                	je     c000070c <memmove+0x90>
c00006f2:	8a 03                	mov    al,BYTE PTR [ebx]
c00006f4:	83 ff 01             	cmp    edi,0x1
c00006f7:	88 06                	mov    BYTE PTR [esi],al
c00006f9:	74 11                	je     c000070c <memmove+0x90>
c00006fb:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00006fe:	83 ff 02             	cmp    edi,0x2
c0000701:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000704:	74 06                	je     c000070c <memmove+0x90>
c0000706:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000709:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000070c:	5b                   	pop    ebx
c000070d:	89 e8                	mov    eax,ebp
c000070f:	5e                   	pop    esi
c0000710:	5f                   	pop    edi
c0000711:	5d                   	pop    ebp
c0000712:	c3                   	ret    
c0000713:	90                   	nop
c0000714:	76 f6                	jbe    c000070c <memmove+0x90>
c0000716:	85 d2                	test   edx,edx
c0000718:	74 f2                	je     c000070c <memmove+0x90>
c000071a:	4b                   	dec    ebx
c000071b:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000071e:	66 90                	xchg   ax,ax
c0000720:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0000723:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c0000726:	4a                   	dec    edx
c0000727:	75 f7                	jne    c0000720 <memmove+0xa4>
c0000729:	5b                   	pop    ebx
c000072a:	89 e8                	mov    eax,ebp
c000072c:	5e                   	pop    esi
c000072d:	5f                   	pop    edi
c000072e:	5d                   	pop    ebp
c000072f:	c3                   	ret    
c0000730:	01 ea                	add    edx,ebp
c0000732:	89 e9                	mov    ecx,ebp
c0000734:	8a 03                	mov    al,BYTE PTR [ebx]
c0000736:	41                   	inc    ecx
c0000737:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c000073a:	43                   	inc    ebx
c000073b:	39 d1                	cmp    ecx,edx
c000073d:	75 f5                	jne    c0000734 <memmove+0xb8>
c000073f:	eb cb                	jmp    c000070c <memmove+0x90>
c0000741:	8d 76 00             	lea    esi,[esi+0x0]

c0000744 <memcpy>:
c0000744:	57                   	push   edi
c0000745:	56                   	push   esi
c0000746:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000074a:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000074e:	a8 03                	test   al,0x3
c0000750:	74 12                	je     c0000764 <memcpy+0x20>
c0000752:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000756:	89 c1                	mov    ecx,eax
c0000758:	fc                   	cld    
c0000759:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000075b:	29 c7                	sub    edi,eax
c000075d:	5e                   	pop    esi
c000075e:	89 f8                	mov    eax,edi
c0000760:	5f                   	pop    edi
c0000761:	c3                   	ret    
c0000762:	66 90                	xchg   ax,ax
c0000764:	89 c1                	mov    ecx,eax
c0000766:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000076a:	c1 e9 02             	shr    ecx,0x2
c000076d:	fc                   	cld    
c000076e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0000770:	29 c7                	sub    edi,eax
c0000772:	5e                   	pop    esi
c0000773:	89 f8                	mov    eax,edi
c0000775:	5f                   	pop    edi
c0000776:	c3                   	ret    
c0000777:	90                   	nop

c0000778 <memset>:
c0000778:	57                   	push   edi
c0000779:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000077d:	85 c9                	test   ecx,ecx
c000077f:	74 0b                	je     c000078c <memset+0x14>
c0000781:	fc                   	cld    
c0000782:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000786:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000078a:	f3 aa                	rep stos BYTE PTR es:[edi],al
c000078c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000790:	5f                   	pop    edi
c0000791:	c3                   	ret    
c0000792:	66 90                	xchg   ax,ax

c0000794 <strlen>:
c0000794:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000798:	31 c0                	xor    eax,eax
c000079a:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c000079d:	74 09                	je     c00007a8 <strlen+0x14>
c000079f:	90                   	nop
c00007a0:	40                   	inc    eax
c00007a1:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c00007a5:	75 f9                	jne    c00007a0 <strlen+0xc>
c00007a7:	c3                   	ret    
c00007a8:	c3                   	ret    
c00007a9:	8d 76 00             	lea    esi,[esi+0x0]

c00007ac <strpbrk>:
c00007ac:	57                   	push   edi
c00007ad:	56                   	push   esi
c00007ae:	53                   	push   ebx
c00007af:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007b3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00007b7:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007b9:	84 db                	test   bl,bl
c00007bb:	74 21                	je     c00007de <strpbrk+0x32>
c00007bd:	8a 07                	mov    al,BYTE PTR [edi]
c00007bf:	84 c0                	test   al,al
c00007c1:	74 14                	je     c00007d7 <strpbrk+0x2b>
c00007c3:	38 d8                	cmp    al,bl
c00007c5:	74 19                	je     c00007e0 <strpbrk+0x34>
c00007c7:	89 fa                	mov    edx,edi
c00007c9:	eb 05                	jmp    c00007d0 <strpbrk+0x24>
c00007cb:	90                   	nop
c00007cc:	38 d9                	cmp    cl,bl
c00007ce:	74 10                	je     c00007e0 <strpbrk+0x34>
c00007d0:	42                   	inc    edx
c00007d1:	8a 0a                	mov    cl,BYTE PTR [edx]
c00007d3:	84 c9                	test   cl,cl
c00007d5:	75 f5                	jne    c00007cc <strpbrk+0x20>
c00007d7:	46                   	inc    esi
c00007d8:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007da:	84 db                	test   bl,bl
c00007dc:	75 e1                	jne    c00007bf <strpbrk+0x13>
c00007de:	31 f6                	xor    esi,esi
c00007e0:	89 f0                	mov    eax,esi
c00007e2:	5b                   	pop    ebx
c00007e3:	5e                   	pop    esi
c00007e4:	5f                   	pop    edi
c00007e5:	c3                   	ret    
c00007e6:	66 90                	xchg   ax,ax

c00007e8 <strtok>:
c00007e8:	56                   	push   esi
c00007e9:	53                   	push   ebx
c00007ea:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00007ee:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007f2:	85 db                	test   ebx,ebx
c00007f4:	75 07                	jne    c00007fd <strtok+0x15>
c00007f6:	eb 2c                	jmp    c0000824 <strtok+0x3c>
c00007f8:	43                   	inc    ebx
c00007f9:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00007fd:	56                   	push   esi
c00007fe:	53                   	push   ebx
c00007ff:	e8 a8 ff ff ff       	call   c00007ac <strpbrk>
c0000804:	5a                   	pop    edx
c0000805:	a3 48 d7 02 c0       	mov    ds:0xc002d748,eax
c000080a:	59                   	pop    ecx
c000080b:	39 d8                	cmp    eax,ebx
c000080d:	74 e9                	je     c00007f8 <strtok+0x10>
c000080f:	85 c0                	test   eax,eax
c0000811:	74 1b                	je     c000082e <strtok+0x46>
c0000813:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000816:	8d 50 01             	lea    edx,[eax+0x1]
c0000819:	89 d8                	mov    eax,ebx
c000081b:	89 15 48 d7 02 c0    	mov    DWORD PTR ds:0xc002d748,edx
c0000821:	5b                   	pop    ebx
c0000822:	5e                   	pop    esi
c0000823:	c3                   	ret    
c0000824:	8b 1d 48 d7 02 c0    	mov    ebx,DWORD PTR ds:0xc002d748
c000082a:	85 db                	test   ebx,ebx
c000082c:	75 cf                	jne    c00007fd <strtok+0x15>
c000082e:	31 c0                	xor    eax,eax
c0000830:	5b                   	pop    ebx
c0000831:	5e                   	pop    esi
c0000832:	c3                   	ret    
c0000833:	90                   	nop

c0000834 <strcpy>:
c0000834:	53                   	push   ebx
c0000835:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000839:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000083d:	89 c3                	mov    ebx,eax
c000083f:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000841:	84 d2                	test   dl,dl
c0000843:	74 0d                	je     c0000852 <strcpy+0x1e>
c0000845:	8d 76 00             	lea    esi,[esi+0x0]
c0000848:	88 13                	mov    BYTE PTR [ebx],dl
c000084a:	41                   	inc    ecx
c000084b:	43                   	inc    ebx
c000084c:	8a 11                	mov    dl,BYTE PTR [ecx]
c000084e:	84 d2                	test   dl,dl
c0000850:	75 f6                	jne    c0000848 <strcpy+0x14>
c0000852:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000855:	5b                   	pop    ebx
c0000856:	c3                   	ret    
c0000857:	90                   	nop

c0000858 <strncpy>:
c0000858:	55                   	push   ebp
c0000859:	57                   	push   edi
c000085a:	56                   	push   esi
c000085b:	53                   	push   ebx
c000085c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000860:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000864:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000868:	85 c0                	test   eax,eax
c000086a:	74 39                	je     c00008a5 <strncpy+0x4d>
c000086c:	8a 1e                	mov    bl,BYTE PTR [esi]
c000086e:	8d 48 ff             	lea    ecx,[eax-0x1]
c0000871:	8d 55 01             	lea    edx,[ebp+0x1]
c0000874:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0000877:	84 db                	test   bl,bl
c0000879:	74 31                	je     c00008ac <strncpy+0x54>
c000087b:	85 c9                	test   ecx,ecx
c000087d:	74 26                	je     c00008a5 <strncpy+0x4d>
c000087f:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c0000882:	8d 48 fe             	lea    ecx,[eax-0x2]
c0000885:	8d 55 02             	lea    edx,[ebp+0x2]
c0000888:	8d 46 02             	lea    eax,[esi+0x2]
c000088b:	88 5d 01             	mov    BYTE PTR [ebp+0x1],bl
c000088e:	84 db                	test   bl,bl
c0000890:	75 0f                	jne    c00008a1 <strncpy+0x49>
c0000892:	eb 18                	jmp    c00008ac <strncpy+0x54>
c0000894:	40                   	inc    eax
c0000895:	42                   	inc    edx
c0000896:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
c0000899:	49                   	dec    ecx
c000089a:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c000089d:	84 db                	test   bl,bl
c000089f:	74 0b                	je     c00008ac <strncpy+0x54>
c00008a1:	85 c9                	test   ecx,ecx
c00008a3:	75 ef                	jne    c0000894 <strncpy+0x3c>
c00008a5:	5b                   	pop    ebx
c00008a6:	89 e8                	mov    eax,ebp
c00008a8:	5e                   	pop    esi
c00008a9:	5f                   	pop    edi
c00008aa:	5d                   	pop    ebp
c00008ab:	c3                   	ret    
c00008ac:	85 c9                	test   ecx,ecx
c00008ae:	74 f5                	je     c00008a5 <strncpy+0x4d>
c00008b0:	fc                   	cld    
c00008b1:	31 c0                	xor    eax,eax
c00008b3:	89 d7                	mov    edi,edx
c00008b5:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00008b7:	89 e8                	mov    eax,ebp
c00008b9:	5b                   	pop    ebx
c00008ba:	5e                   	pop    esi
c00008bb:	5f                   	pop    edi
c00008bc:	5d                   	pop    ebp
c00008bd:	c3                   	ret    
c00008be:	66 90                	xchg   ax,ax

c00008c0 <strcmp>:
c00008c0:	56                   	push   esi
c00008c1:	53                   	push   ebx
c00008c2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00008c6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008ca:	8a 16                	mov    dl,BYTE PTR [esi]
c00008cc:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00008cf:	38 d1                	cmp    cl,dl
c00008d1:	75 1d                	jne    c00008f0 <strcmp+0x30>
c00008d3:	84 c9                	test   cl,cl
c00008d5:	74 21                	je     c00008f8 <strcmp+0x38>
c00008d7:	b8 01 00 00 00       	mov    eax,0x1
c00008dc:	eb 07                	jmp    c00008e5 <strcmp+0x25>
c00008de:	66 90                	xchg   ax,ax
c00008e0:	40                   	inc    eax
c00008e1:	84 d2                	test   dl,dl
c00008e3:	74 13                	je     c00008f8 <strcmp+0x38>
c00008e5:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00008e8:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c00008ec:	38 ca                	cmp    dl,cl
c00008ee:	74 f0                	je     c00008e0 <strcmp+0x20>
c00008f0:	0f b6 c2             	movzx  eax,dl
c00008f3:	5b                   	pop    ebx
c00008f4:	29 c8                	sub    eax,ecx
c00008f6:	5e                   	pop    esi
c00008f7:	c3                   	ret    
c00008f8:	31 c0                	xor    eax,eax
c00008fa:	5b                   	pop    ebx
c00008fb:	5e                   	pop    esi
c00008fc:	c3                   	ret    
c00008fd:	8d 76 00             	lea    esi,[esi+0x0]

c0000900 <strchr>:
c0000900:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000904:	8a 10                	mov    dl,BYTE PTR [eax]
c0000906:	84 d2                	test   dl,dl
c0000908:	74 15                	je     c000091f <strchr+0x1f>
c000090a:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000090e:	38 ca                	cmp    dl,cl
c0000910:	75 06                	jne    c0000918 <strchr+0x18>
c0000912:	eb 0e                	jmp    c0000922 <strchr+0x22>
c0000914:	38 ca                	cmp    dl,cl
c0000916:	74 09                	je     c0000921 <strchr+0x21>
c0000918:	40                   	inc    eax
c0000919:	8a 10                	mov    dl,BYTE PTR [eax]
c000091b:	84 d2                	test   dl,dl
c000091d:	75 f5                	jne    c0000914 <strchr+0x14>
c000091f:	31 c0                	xor    eax,eax
c0000921:	c3                   	ret    
c0000922:	c3                   	ret    
c0000923:	90                   	nop

c0000924 <strncmp>:
c0000924:	57                   	push   edi
c0000925:	56                   	push   esi
c0000926:	53                   	push   ebx
c0000927:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000092b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000092f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0000933:	85 ff                	test   edi,edi
c0000935:	74 28                	je     c000095f <strncmp+0x3b>
c0000937:	8a 16                	mov    dl,BYTE PTR [esi]
c0000939:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000093c:	38 d1                	cmp    cl,dl
c000093e:	75 28                	jne    c0000968 <strncmp+0x44>
c0000940:	8d 46 01             	lea    eax,[esi+0x1]
c0000943:	84 c9                	test   cl,cl
c0000945:	74 18                	je     c000095f <strncmp+0x3b>
c0000947:	01 fe                	add    esi,edi
c0000949:	eb 0f                	jmp    c000095a <strncmp+0x36>
c000094b:	90                   	nop
c000094c:	8a 10                	mov    dl,BYTE PTR [eax]
c000094e:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000951:	38 ca                	cmp    dl,cl
c0000953:	75 13                	jne    c0000968 <strncmp+0x44>
c0000955:	40                   	inc    eax
c0000956:	84 d2                	test   dl,dl
c0000958:	74 05                	je     c000095f <strncmp+0x3b>
c000095a:	43                   	inc    ebx
c000095b:	39 c6                	cmp    esi,eax
c000095d:	75 ed                	jne    c000094c <strncmp+0x28>
c000095f:	5b                   	pop    ebx
c0000960:	31 c0                	xor    eax,eax
c0000962:	5e                   	pop    esi
c0000963:	5f                   	pop    edi
c0000964:	c3                   	ret    
c0000965:	8d 76 00             	lea    esi,[esi+0x0]
c0000968:	5b                   	pop    ebx
c0000969:	0f b6 c2             	movzx  eax,dl
c000096c:	5e                   	pop    esi
c000096d:	29 c8                	sub    eax,ecx
c000096f:	5f                   	pop    edi
c0000970:	c3                   	ret    
c0000971:	8d 76 00             	lea    esi,[esi+0x0]

c0000974 <strcat>:
c0000974:	56                   	push   esi
c0000975:	53                   	push   ebx
c0000976:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000097a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000097e:	89 c3                	mov    ebx,eax
c0000980:	eb 04                	jmp    c0000986 <strcat+0x12>
c0000982:	66 90                	xchg   ax,ax
c0000984:	89 d3                	mov    ebx,edx
c0000986:	8d 53 01             	lea    edx,[ebx+0x1]
c0000989:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c000098d:	75 f5                	jne    c0000984 <strcat+0x10>
c000098f:	31 d2                	xor    edx,edx
c0000991:	8d 76 00             	lea    esi,[esi+0x0]
c0000994:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000997:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c000099a:	42                   	inc    edx
c000099b:	84 c9                	test   cl,cl
c000099d:	75 f5                	jne    c0000994 <strcat+0x20>
c000099f:	5b                   	pop    ebx
c00009a0:	5e                   	pop    esi
c00009a1:	c3                   	ret    
c00009a2:	66 90                	xchg   ax,ax

c00009a4 <strncat>:
c00009a4:	56                   	push   esi
c00009a5:	53                   	push   ebx
c00009a6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00009aa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00009ae:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00009b2:	85 f6                	test   esi,esi
c00009b4:	74 1e                	je     c00009d4 <strncat+0x30>
c00009b6:	89 c2                	mov    edx,eax
c00009b8:	42                   	inc    edx
c00009b9:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00009bd:	75 f9                	jne    c00009b8 <strncat+0x14>
c00009bf:	01 ce                	add    esi,ecx
c00009c1:	eb 06                	jmp    c00009c9 <strncat+0x25>
c00009c3:	90                   	nop
c00009c4:	39 f1                	cmp    ecx,esi
c00009c6:	74 10                	je     c00009d8 <strncat+0x34>
c00009c8:	42                   	inc    edx
c00009c9:	41                   	inc    ecx
c00009ca:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00009cd:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00009d0:	84 db                	test   bl,bl
c00009d2:	75 f0                	jne    c00009c4 <strncat+0x20>
c00009d4:	5b                   	pop    ebx
c00009d5:	5e                   	pop    esi
c00009d6:	c3                   	ret    
c00009d7:	90                   	nop
c00009d8:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00009db:	5b                   	pop    ebx
c00009dc:	5e                   	pop    esi
c00009dd:	c3                   	ret    
c00009de:	66 90                	xchg   ax,ax

c00009e0 <strstr>:
c00009e0:	57                   	push   edi
c00009e1:	56                   	push   esi
c00009e2:	53                   	push   ebx
c00009e3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00009e7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00009eb:	57                   	push   edi
c00009ec:	e8 a3 fd ff ff       	call   c0000794 <strlen>
c00009f1:	59                   	pop    ecx
c00009f2:	85 c0                	test   eax,eax
c00009f4:	74 2a                	je     c0000a20 <strstr+0x40>
c00009f6:	89 c6                	mov    esi,eax
c00009f8:	eb 12                	jmp    c0000a0c <strstr+0x2c>
c00009fa:	66 90                	xchg   ax,ax
c00009fc:	56                   	push   esi
c00009fd:	57                   	push   edi
c00009fe:	53                   	push   ebx
c00009ff:	e8 3c fc ff ff       	call   c0000640 <memcmp>
c0000a04:	83 c4 0c             	add    esp,0xc
c0000a07:	85 c0                	test   eax,eax
c0000a09:	74 15                	je     c0000a20 <strstr+0x40>
c0000a0b:	43                   	inc    ebx
c0000a0c:	53                   	push   ebx
c0000a0d:	e8 82 fd ff ff       	call   c0000794 <strlen>
c0000a12:	5a                   	pop    edx
c0000a13:	39 f0                	cmp    eax,esi
c0000a15:	73 e5                	jae    c00009fc <strstr+0x1c>
c0000a17:	5b                   	pop    ebx
c0000a18:	31 c0                	xor    eax,eax
c0000a1a:	5e                   	pop    esi
c0000a1b:	5f                   	pop    edi
c0000a1c:	c3                   	ret    
c0000a1d:	8d 76 00             	lea    esi,[esi+0x0]
c0000a20:	89 d8                	mov    eax,ebx
c0000a22:	5b                   	pop    ebx
c0000a23:	5e                   	pop    esi
c0000a24:	5f                   	pop    edi
c0000a25:	c3                   	ret    
c0000a26:	66 90                	xchg   ax,ax

c0000a28 <toupper>:
c0000a28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a2c:	0f b6 d0             	movzx  edx,al
c0000a2f:	f6 82 00 8b 02 c0 02 	test   BYTE PTR [edx-0x3ffd7500],0x2
c0000a36:	74 03                	je     c0000a3b <toupper+0x13>
c0000a38:	83 e8 20             	sub    eax,0x20
c0000a3b:	c3                   	ret    

c0000a3c <tolower>:
c0000a3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a40:	0f b6 d0             	movzx  edx,al
c0000a43:	f6 82 00 8b 02 c0 01 	test   BYTE PTR [edx-0x3ffd7500],0x1
c0000a4a:	74 03                	je     c0000a4f <tolower+0x13>
c0000a4c:	83 c0 20             	add    eax,0x20
c0000a4f:	c3                   	ret    

c0000a50 <simple_strtoul>:
c0000a50:	55                   	push   ebp
c0000a51:	57                   	push   edi
c0000a52:	56                   	push   esi
c0000a53:	53                   	push   ebx
c0000a54:	83 ec 08             	sub    esp,0x8
c0000a57:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000a5b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000a5f:	90                   	nop
c0000a60:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0000a63:	f6 82 00 8b 02 c0 08 	test   BYTE PTR [edx-0x3ffd7500],0x8
c0000a6a:	75 05                	jne    c0000a71 <simple_strtoul+0x21>
c0000a6c:	80 fa 09             	cmp    dl,0x9
c0000a6f:	75 03                	jne    c0000a74 <simple_strtoul+0x24>
c0000a71:	41                   	inc    ecx
c0000a72:	eb ec                	jmp    c0000a60 <simple_strtoul+0x10>
c0000a74:	80 fa 2d             	cmp    dl,0x2d
c0000a77:	0f 84 1b 01 00 00    	je     c0000b98 <simple_strtoul+0x148>
c0000a7d:	80 fa 2b             	cmp    dl,0x2b
c0000a80:	0f 84 c2 00 00 00    	je     c0000b48 <simple_strtoul+0xf8>
c0000a86:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a8e:	85 f6                	test   esi,esi
c0000a90:	0f 85 c3 00 00 00    	jne    c0000b59 <simple_strtoul+0x109>
c0000a96:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000a98:	80 fa 30             	cmp    dl,0x30
c0000a9b:	0f 84 47 01 00 00    	je     c0000be8 <simple_strtoul+0x198>
c0000aa1:	be 0a 00 00 00       	mov    esi,0xa
c0000aa6:	84 d2                	test   dl,dl
c0000aa8:	0f 84 6f 01 00 00    	je     c0000c1d <simple_strtoul+0x1cd>
c0000aae:	31 ed                	xor    ebp,ebp
c0000ab0:	31 ff                	xor    edi,edi
c0000ab2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000ab9:	eb 2b                	jmp    c0000ae6 <simple_strtoul+0x96>
c0000abb:	90                   	nop
c0000abc:	83 eb 30             	sub    ebx,0x30
c0000abf:	39 f3                	cmp    ebx,esi
c0000ac1:	73 4d                	jae    c0000b10 <simple_strtoul+0xc0>
c0000ac3:	31 d2                	xor    edx,edx
c0000ac5:	89 d8                	mov    eax,ebx
c0000ac7:	f7 d0                	not    eax
c0000ac9:	f7 f6                	div    esi
c0000acb:	39 f8                	cmp    eax,edi
c0000acd:	0f 82 b1 00 00 00    	jb     c0000b84 <simple_strtoul+0x134>
c0000ad3:	0f af fe             	imul   edi,esi
c0000ad6:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000add:	01 df                	add    edi,ebx
c0000adf:	41                   	inc    ecx
c0000ae0:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000ae2:	84 d2                	test   dl,dl
c0000ae4:	74 2a                	je     c0000b10 <simple_strtoul+0xc0>
c0000ae6:	0f b6 da             	movzx  ebx,dl
c0000ae9:	f6 83 00 8b 02 c0 04 	test   BYTE PTR [ebx-0x3ffd7500],0x4
c0000af0:	75 ca                	jne    c0000abc <simple_strtoul+0x6c>
c0000af2:	0f be d2             	movsx  edx,dl
c0000af5:	52                   	push   edx
c0000af6:	e8 2d ff ff ff       	call   c0000a28 <toupper>
c0000afb:	5b                   	pop    ebx
c0000afc:	0f b6 d0             	movzx  edx,al
c0000aff:	f6 82 00 8b 02 c0 01 	test   BYTE PTR [edx-0x3ffd7500],0x1
c0000b06:	74 08                	je     c0000b10 <simple_strtoul+0xc0>
c0000b08:	8d 58 c9             	lea    ebx,[eax-0x37]
c0000b0b:	39 f3                	cmp    ebx,esi
c0000b0d:	72 b4                	jb     c0000ac3 <simple_strtoul+0x73>
c0000b0f:	90                   	nop
c0000b10:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b14:	85 c0                	test   eax,eax
c0000b16:	74 14                	je     c0000b2c <simple_strtoul+0xdc>
c0000b18:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000b1b:	09 f8                	or     eax,edi
c0000b1d:	75 71                	jne    c0000b90 <simple_strtoul+0x140>
c0000b1f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b23:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000b27:	31 ff                	xor    edi,edi
c0000b29:	89 30                	mov    DWORD PTR [eax],esi
c0000b2b:	90                   	nop
c0000b2c:	4d                   	dec    ebp
c0000b2d:	75 05                	jne    c0000b34 <simple_strtoul+0xe4>
c0000b2f:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000b34:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000b39:	75 02                	jne    c0000b3d <simple_strtoul+0xed>
c0000b3b:	f7 df                	neg    edi
c0000b3d:	83 c4 08             	add    esp,0x8
c0000b40:	89 f8                	mov    eax,edi
c0000b42:	5b                   	pop    ebx
c0000b43:	5e                   	pop    esi
c0000b44:	5f                   	pop    edi
c0000b45:	5d                   	pop    ebp
c0000b46:	c3                   	ret    
c0000b47:	90                   	nop
c0000b48:	41                   	inc    ecx
c0000b49:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000b51:	85 f6                	test   esi,esi
c0000b53:	0f 84 3d ff ff ff    	je     c0000a96 <simple_strtoul+0x46>
c0000b59:	8d 46 fe             	lea    eax,[esi-0x2]
c0000b5c:	83 f8 22             	cmp    eax,0x22
c0000b5f:	77 6a                	ja     c0000bcb <simple_strtoul+0x17b>
c0000b61:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000b63:	83 fe 08             	cmp    esi,0x8
c0000b66:	0f 84 a2 00 00 00    	je     c0000c0e <simple_strtoul+0x1be>
c0000b6c:	83 fe 10             	cmp    esi,0x10
c0000b6f:	0f 85 31 ff ff ff    	jne    c0000aa6 <simple_strtoul+0x56>
c0000b75:	80 fa 30             	cmp    dl,0x30
c0000b78:	74 2c                	je     c0000ba6 <simple_strtoul+0x156>
c0000b7a:	be 10 00 00 00       	mov    esi,0x10
c0000b7f:	e9 22 ff ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>
c0000b84:	bd 01 00 00 00       	mov    ebp,0x1
c0000b89:	31 ff                	xor    edi,edi
c0000b8b:	e9 4f ff ff ff       	jmp    c0000adf <simple_strtoul+0x8f>
c0000b90:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b94:	89 08                	mov    DWORD PTR [eax],ecx
c0000b96:	eb 94                	jmp    c0000b2c <simple_strtoul+0xdc>
c0000b98:	41                   	inc    ecx
c0000b99:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000ba1:	e9 e8 fe ff ff       	jmp    c0000a8e <simple_strtoul+0x3e>
c0000ba6:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000baa:	88 04 24             	mov    BYTE PTR [esp],al
c0000bad:	50                   	push   eax
c0000bae:	e8 89 fe ff ff       	call   c0000a3c <tolower>
c0000bb3:	5e                   	pop    esi
c0000bb4:	83 f8 78             	cmp    eax,0x78
c0000bb7:	0f 84 84 00 00 00    	je     c0000c41 <simple_strtoul+0x1f1>
c0000bbd:	41                   	inc    ecx
c0000bbe:	be 10 00 00 00       	mov    esi,0x10
c0000bc3:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bc6:	e9 db fe ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>
c0000bcb:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000bcf:	85 ff                	test   edi,edi
c0000bd1:	74 5c                	je     c0000c2f <simple_strtoul+0x1df>
c0000bd3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000bd7:	85 c9                	test   ecx,ecx
c0000bd9:	75 4e                	jne    c0000c29 <simple_strtoul+0x1d9>
c0000bdb:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000be1:	31 ff                	xor    edi,edi
c0000be3:	e9 4c ff ff ff       	jmp    c0000b34 <simple_strtoul+0xe4>
c0000be8:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000bec:	88 04 24             	mov    BYTE PTR [esp],al
c0000bef:	50                   	push   eax
c0000bf0:	e8 47 fe ff ff       	call   c0000a3c <tolower>
c0000bf5:	5d                   	pop    ebp
c0000bf6:	83 f8 78             	cmp    eax,0x78
c0000bf9:	74 3b                	je     c0000c36 <simple_strtoul+0x1e6>
c0000bfb:	41                   	inc    ecx
c0000bfc:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bff:	80 fa 30             	cmp    dl,0x30
c0000c02:	74 13                	je     c0000c17 <simple_strtoul+0x1c7>
c0000c04:	be 08 00 00 00       	mov    esi,0x8
c0000c09:	e9 98 fe ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>
c0000c0e:	80 fa 30             	cmp    dl,0x30
c0000c11:	0f 85 8f fe ff ff    	jne    c0000aa6 <simple_strtoul+0x56>
c0000c17:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
c0000c1a:	41                   	inc    ecx
c0000c1b:	eb e7                	jmp    c0000c04 <simple_strtoul+0x1b4>
c0000c1d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000c21:	85 d2                	test   edx,edx
c0000c23:	74 0a                	je     c0000c2f <simple_strtoul+0x1df>
c0000c25:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000c29:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000c2d:	89 30                	mov    DWORD PTR [eax],esi
c0000c2f:	31 ff                	xor    edi,edi
c0000c31:	e9 fe fe ff ff       	jmp    c0000b34 <simple_strtoul+0xe4>
c0000c36:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c39:	83 c1 02             	add    ecx,0x2
c0000c3c:	e9 34 ff ff ff       	jmp    c0000b75 <simple_strtoul+0x125>
c0000c41:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c44:	be 10 00 00 00       	mov    esi,0x10
c0000c49:	83 c1 02             	add    ecx,0x2
c0000c4c:	e9 55 fe ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>

c0000c51 <largebin_index>:
c0000c51:	89 c2                	mov    edx,eax
c0000c53:	c1 ea 08             	shr    edx,0x8
c0000c56:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c5c:	77 10                	ja     c0000c6e <largebin_index+0x1d>
c0000c5e:	0f bd d2             	bsr    edx,edx
c0000c61:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c64:	d3 e8                	shr    eax,cl
c0000c66:	83 e0 03             	and    eax,0x3
c0000c69:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c6d:	c3                   	ret    
c0000c6e:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c73:	c3                   	ret    

c0000c74 <malloc_init_state>:
c0000c74:	53                   	push   ebx
c0000c75:	8d 50 34             	lea    edx,[eax+0x34]
c0000c78:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c7e:	89 d1                	mov    ecx,edx
c0000c80:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c83:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c86:	83 c2 08             	add    edx,0x8
c0000c89:	39 da                	cmp    edx,ebx
c0000c8b:	75 f3                	jne    c0000c80 <malloc_init_state+0xc>
c0000c8d:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c8f:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c99:	83 e2 03             	and    edx,0x3
c0000c9c:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000ca6:	83 ca 48             	or     edx,0x48
c0000ca9:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000cb3:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000cbd:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000cc4:	89 10                	mov    DWORD PTR [eax],edx
c0000cc6:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000cc9:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000cd3:	5b                   	pop    ebx
c0000cd4:	c3                   	ret    

c0000cd5 <malloc_consolidate>:
c0000cd5:	8b 10                	mov    edx,DWORD PTR [eax]
c0000cd7:	85 d2                	test   edx,edx
c0000cd9:	0f 84 d8 00 00 00    	je     c0000db7 <malloc_consolidate+0xe2>
c0000cdf:	55                   	push   ebp
c0000ce0:	83 e2 fd             	and    edx,0xfffffffd
c0000ce3:	57                   	push   edi
c0000ce4:	89 c5                	mov    ebp,eax
c0000ce6:	56                   	push   esi
c0000ce7:	8d 78 34             	lea    edi,[eax+0x34]
c0000cea:	53                   	push   ebx
c0000ceb:	83 ec 10             	sub    esp,0x10
c0000cee:	89 10                	mov    DWORD PTR [eax],edx
c0000cf0:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000cf4:	c1 ea 03             	shr    edx,0x3
c0000cf7:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000cfb:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000cff:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000d02:	85 d2                	test   edx,edx
c0000d04:	0f 84 98 00 00 00    	je     c0000da2 <malloc_consolidate+0xcd>
c0000d0a:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000d11:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000d14:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000d17:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000d1b:	89 f9                	mov    ecx,edi
c0000d1d:	83 e1 fe             	and    ecx,0xfffffffe
c0000d20:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000d23:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000d26:	83 e3 fc             	and    ebx,0xfffffffc
c0000d29:	83 e7 01             	and    edi,0x1
c0000d2c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000d2f:	75 14                	jne    c0000d45 <malloc_consolidate+0x70>
c0000d31:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000d33:	29 fa                	sub    edx,edi
c0000d35:	01 f9                	add    ecx,edi
c0000d37:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d3a:	89 fb                	mov    ebx,edi
c0000d3c:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d3f:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d42:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d45:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d48:	74 40                	je     c0000d8a <malloc_consolidate+0xb5>
c0000d4a:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d4d:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d50:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d54:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d57:	83 e7 01             	and    edi,0x1
c0000d5a:	75 0e                	jne    c0000d6a <malloc_consolidate+0x95>
c0000d5c:	01 d9                	add    ecx,ebx
c0000d5e:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d61:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d64:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d67:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d6a:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d6d:	89 ce                	mov    esi,ecx
c0000d6f:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d72:	83 ce 01             	or     esi,0x1
c0000d75:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d78:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d7b:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d7e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d82:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d85:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d88:	eb 0c                	jmp    c0000d96 <malloc_consolidate+0xc1>
c0000d8a:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d8d:	83 c9 01             	or     ecx,0x1
c0000d90:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d93:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d96:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d9a:	85 d2                	test   edx,edx
c0000d9c:	0f 85 6f ff ff ff    	jne    c0000d11 <malloc_consolidate+0x3c>
c0000da2:	83 c5 04             	add    ebp,0x4
c0000da5:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000da9:	0f 85 50 ff ff ff    	jne    c0000cff <malloc_consolidate+0x2a>
c0000daf:	83 c4 10             	add    esp,0x10
c0000db2:	5b                   	pop    ebx
c0000db3:	5e                   	pop    esi
c0000db4:	5f                   	pop    edi
c0000db5:	5d                   	pop    ebp
c0000db6:	c3                   	ret    
c0000db7:	e9 b8 fe ff ff       	jmp    c0000c74 <malloc_init_state>

c0000dbc <dlfree>:
c0000dbc:	57                   	push   edi
c0000dbd:	56                   	push   esi
c0000dbe:	53                   	push   ebx
c0000dbf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000dc3:	85 db                	test   ebx,ebx
c0000dc5:	0f 84 e2 00 00 00    	je     c0000ead <dlfree+0xf1>
c0000dcb:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000dce:	8b 0d 60 d7 02 c0    	mov    ecx,DWORD PTR ds:0xc002d760
c0000dd4:	89 f0                	mov    eax,esi
c0000dd6:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000dd9:	83 e0 fc             	and    eax,0xfffffffc
c0000ddc:	39 c1                	cmp    ecx,eax
c0000dde:	72 24                	jb     c0000e04 <dlfree+0x48>
c0000de0:	83 c9 03             	or     ecx,0x3
c0000de3:	c1 e8 03             	shr    eax,0x3
c0000de6:	89 0d 60 d7 02 c0    	mov    DWORD PTR ds:0xc002d760,ecx
c0000dec:	83 e8 02             	sub    eax,0x2
c0000def:	8b 0c 85 64 d7 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd289c]
c0000df6:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000df8:	89 14 85 64 d7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd289c],edx
c0000dff:	e9 a9 00 00 00       	jmp    c0000ead <dlfree+0xf1>
c0000e04:	83 e6 02             	and    esi,0x2
c0000e07:	0f 85 a0 00 00 00    	jne    c0000ead <dlfree+0xf1>
c0000e0d:	83 c9 01             	or     ecx,0x1
c0000e10:	8d 34 02             	lea    esi,[edx+eax*1]
c0000e13:	89 0d 60 d7 02 c0    	mov    DWORD PTR ds:0xc002d760,ecx
c0000e19:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000e1c:	83 e1 fc             	and    ecx,0xfffffffc
c0000e1f:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000e23:	75 13                	jne    c0000e38 <dlfree+0x7c>
c0000e25:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000e28:	29 da                	sub    edx,ebx
c0000e2a:	01 d8                	add    eax,ebx
c0000e2c:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000e2f:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000e32:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e35:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e38:	39 35 8c d7 02 c0    	cmp    DWORD PTR ds:0xc002d78c,esi
c0000e3e:	74 40                	je     c0000e80 <dlfree+0xc4>
c0000e40:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000e44:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000e47:	80 e3 01             	and    bl,0x1
c0000e4a:	75 0e                	jne    c0000e5a <dlfree+0x9e>
c0000e4c:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e4f:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000e52:	01 c8                	add    eax,ecx
c0000e54:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e57:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e5a:	8b 0d 9c d7 02 c0    	mov    ecx,DWORD PTR ds:0xc002d79c
c0000e60:	c7 42 0c 94 d7 02 c0 	mov    DWORD PTR [edx+0xc],0xc002d794
c0000e67:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e6a:	89 15 9c d7 02 c0    	mov    DWORD PTR ds:0xc002d79c,edx
c0000e70:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e73:	89 c1                	mov    ecx,eax
c0000e75:	83 c9 01             	or     ecx,0x1
c0000e78:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e7b:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e7e:	eb 10                	jmp    c0000e90 <dlfree+0xd4>
c0000e80:	01 c8                	add    eax,ecx
c0000e82:	89 c1                	mov    ecx,eax
c0000e84:	83 c9 01             	or     ecx,0x1
c0000e87:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e8a:	89 15 8c d7 02 c0    	mov    DWORD PTR ds:0xc002d78c,edx
c0000e90:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e95:	76 16                	jbe    c0000ead <dlfree+0xf1>
c0000e97:	f6 05 60 d7 02 c0 02 	test   BYTE PTR ds:0xc002d760,0x2
c0000e9e:	74 0d                	je     c0000ead <dlfree+0xf1>
c0000ea0:	5b                   	pop    ebx
c0000ea1:	b8 60 d7 02 c0       	mov    eax,0xc002d760
c0000ea6:	5e                   	pop    esi
c0000ea7:	5f                   	pop    edi
c0000ea8:	e9 28 fe ff ff       	jmp    c0000cd5 <malloc_consolidate>
c0000ead:	5b                   	pop    ebx
c0000eae:	5e                   	pop    esi
c0000eaf:	5f                   	pop    edi
c0000eb0:	c3                   	ret    

c0000eb1 <sYSMALLOc>:
c0000eb1:	55                   	push   ebp
c0000eb2:	57                   	push   edi
c0000eb3:	56                   	push   esi
c0000eb4:	53                   	push   ebx
c0000eb5:	89 d3                	mov    ebx,edx
c0000eb7:	83 ec 2c             	sub    esp,0x2c
c0000eba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000ebe:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000ec4:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000ec7:	8d 42 ff             	lea    eax,[edx-0x1]
c0000eca:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000ece:	74 1f                	je     c0000eef <sYSMALLOc+0x3e>
c0000ed0:	89 d8                	mov    eax,ebx
c0000ed2:	e8 fe fd ff ff       	call   c0000cd5 <malloc_consolidate>
c0000ed7:	83 ec 0c             	sub    esp,0xc
c0000eda:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000ede:	83 e8 07             	sub    eax,0x7
c0000ee1:	50                   	push   eax
c0000ee2:	e8 30 02 00 00       	call   c0001117 <dlmalloc>
c0000ee7:	83 c4 10             	add    esp,0x10
c0000eea:	e9 20 02 00 00       	jmp    c000110f <sYSMALLOc+0x25e>
c0000eef:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000ef2:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000ef8:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000efb:	83 e0 fc             	and    eax,0xfffffffc
c0000efe:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000f02:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000f06:	83 c0 10             	add    eax,0x10
c0000f09:	01 c1                	add    ecx,eax
c0000f0b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000f0f:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000f16:	74 04                	je     c0000f1c <sYSMALLOc+0x6b>
c0000f18:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000f1c:	f7 da                	neg    edx
c0000f1e:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000f22:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000f26:	21 d1                	and    ecx,edx
c0000f28:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000f2c:	7f 07                	jg     c0000f35 <sYSMALLOc+0x84>
c0000f2e:	31 c0                	xor    eax,eax
c0000f30:	e9 da 01 00 00       	jmp    c000110f <sYSMALLOc+0x25e>
c0000f35:	83 ec 0c             	sub    esp,0xc
c0000f38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000f3c:	e8 5c e7 00 00       	call   c000f69d <sbrk>
c0000f41:	83 c4 10             	add    esp,0x10
c0000f44:	89 c6                	mov    esi,eax
c0000f46:	83 f8 ff             	cmp    eax,0xffffffff
c0000f49:	74 e3                	je     c0000f2e <sYSMALLOc+0x7d>
c0000f4b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f4f:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000f53:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000f56:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000f5c:	39 f1                	cmp    ecx,esi
c0000f5e:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000f64:	75 13                	jne    c0000f79 <sYSMALLOc+0xc8>
c0000f66:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f6a:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f6e:	83 c8 01             	or     eax,0x1
c0000f71:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f74:	e9 3e 01 00 00       	jmp    c00010b7 <sYSMALLOc+0x206>
c0000f79:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000f7f:	88 d0                	mov    al,dl
c0000f81:	83 e0 01             	and    eax,0x1
c0000f84:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f89:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000f8d:	0f 95 c0             	setne  al
c0000f90:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000f94:	39 f1                	cmp    ecx,esi
c0000f96:	76 12                	jbe    c0000faa <sYSMALLOc+0xf9>
c0000f98:	84 c0                	test   al,al
c0000f9a:	74 0e                	je     c0000faa <sYSMALLOc+0xf9>
c0000f9c:	83 e2 fe             	and    edx,0xfffffffe
c0000f9f:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000fa5:	e9 83 00 00 00       	jmp    c000102d <sYSMALLOc+0x17c>
c0000faa:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000faf:	74 7c                	je     c000102d <sYSMALLOc+0x17c>
c0000fb1:	84 c0                	test   al,al
c0000fb3:	74 0c                	je     c0000fc1 <sYSMALLOc+0x110>
c0000fb5:	89 f0                	mov    eax,esi
c0000fb7:	29 c8                	sub    eax,ecx
c0000fb9:	01 e8                	add    eax,ebp
c0000fbb:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000fc1:	89 f2                	mov    edx,esi
c0000fc3:	83 e2 07             	and    edx,0x7
c0000fc6:	74 0c                	je     c0000fd4 <sYSMALLOc+0x123>
c0000fc8:	b8 08 00 00 00       	mov    eax,0x8
c0000fcd:	29 d0                	sub    eax,edx
c0000fcf:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000fd2:	eb 04                	jmp    c0000fd8 <sYSMALLOc+0x127>
c0000fd4:	89 f5                	mov    ebp,esi
c0000fd6:	31 c0                	xor    eax,eax
c0000fd8:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000fdc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000fe0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000fe4:	01 c1                	add    ecx,eax
c0000fe6:	83 ec 0c             	sub    esp,0xc
c0000fe9:	01 f1                	add    ecx,esi
c0000feb:	01 ca                	add    edx,ecx
c0000fed:	29 c8                	sub    eax,ecx
c0000fef:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000ff3:	01 c2                	add    edx,eax
c0000ff5:	52                   	push   edx
c0000ff6:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000ffa:	e8 9e e6 00 00       	call   c000f69d <sbrk>
c0000fff:	83 c4 10             	add    esp,0x10
c0001002:	83 f8 ff             	cmp    eax,0xffffffff
c0001005:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001009:	75 0f                	jne    c000101a <sYSMALLOc+0x169>
c000100b:	83 ec 0c             	sub    esp,0xc
c000100e:	6a 00                	push   0x0
c0001010:	e8 88 e6 00 00       	call   c000f69d <sbrk>
c0001015:	83 c4 10             	add    esp,0x10
c0001018:	eb 30                	jmp    c000104a <sYSMALLOc+0x199>
c000101a:	39 c6                	cmp    esi,eax
c000101c:	76 33                	jbe    c0001051 <sYSMALLOc+0x1a0>
c000101e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001022:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001029:	01 f0                	add    eax,esi
c000102b:	eb 1d                	jmp    c000104a <sYSMALLOc+0x199>
c000102d:	83 ec 0c             	sub    esp,0xc
c0001030:	89 f5                	mov    ebp,esi
c0001032:	6a 00                	push   0x0
c0001034:	e8 64 e6 00 00       	call   c000f69d <sbrk>
c0001039:	89 c2                	mov    edx,eax
c000103b:	29 f2                	sub    edx,esi
c000103d:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0001041:	83 c4 10             	add    esp,0x10
c0001044:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c000104a:	31 d2                	xor    edx,edx
c000104c:	83 f8 ff             	cmp    eax,0xffffffff
c000104f:	74 66                	je     c00010b7 <sYSMALLOc+0x206>
c0001051:	29 e8                	sub    eax,ebp
c0001053:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0001056:	01 d0                	add    eax,edx
c0001058:	83 c8 01             	or     eax,0x1
c000105b:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000105e:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0001064:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0001069:	74 4c                	je     c00010b7 <sYSMALLOc+0x206>
c000106b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000106f:	83 e8 0c             	sub    eax,0xc
c0001072:	83 e0 f8             	and    eax,0xfffffff8
c0001075:	89 c2                	mov    edx,eax
c0001077:	83 ca 01             	or     edx,0x1
c000107a:	83 f8 0f             	cmp    eax,0xf
c000107d:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001080:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0001088:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001090:	76 25                	jbe    c00010b7 <sYSMALLOc+0x206>
c0001092:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0001098:	83 ec 0c             	sub    esp,0xc
c000109b:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c00010a5:	83 c7 08             	add    edi,0x8
c00010a8:	57                   	push   edi
c00010a9:	e8 0e fd ff ff       	call   c0000dbc <dlfree>
c00010ae:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c00010b4:	83 c4 10             	add    esp,0x10
c00010b7:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c00010bd:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c00010c3:	73 06                	jae    c00010cb <sYSMALLOc+0x21a>
c00010c5:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c00010cb:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c00010d1:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c00010d7:	73 06                	jae    c00010df <sYSMALLOc+0x22e>
c00010d9:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c00010df:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00010e2:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010e5:	83 e2 fc             	and    edx,0xfffffffc
c00010e8:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00010ec:	0f 82 3c fe ff ff    	jb     c0000f2e <sYSMALLOc+0x7d>
c00010f2:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00010f6:	8d 0c 38             	lea    ecx,[eax+edi*1]
c00010f9:	29 fa                	sub    edx,edi
c00010fb:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00010fe:	83 ca 01             	or     edx,0x1
c0001101:	89 fb                	mov    ebx,edi
c0001103:	83 c0 08             	add    eax,0x8
c0001106:	83 cb 01             	or     ebx,0x1
c0001109:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c000110c:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000110f:	83 c4 2c             	add    esp,0x2c
c0001112:	5b                   	pop    ebx
c0001113:	5e                   	pop    esi
c0001114:	5f                   	pop    edi
c0001115:	5d                   	pop    ebp
c0001116:	c3                   	ret    

c0001117 <dlmalloc>:
c0001117:	55                   	push   ebp
c0001118:	57                   	push   edi
c0001119:	56                   	push   esi
c000111a:	53                   	push   ebx
c000111b:	83 ec 1c             	sub    esp,0x1c
c000111e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001122:	83 f8 df             	cmp    eax,0xffffffdf
c0001125:	0f 87 70 03 00 00    	ja     c000149b <dlmalloc+0x384>
c000112b:	83 c0 0b             	add    eax,0xb
c000112e:	be 10 00 00 00       	mov    esi,0x10
c0001133:	83 f8 0f             	cmp    eax,0xf
c0001136:	76 05                	jbe    c000113d <dlmalloc+0x26>
c0001138:	83 e0 f8             	and    eax,0xfffffff8
c000113b:	89 c6                	mov    esi,eax
c000113d:	8b 3d 60 d7 02 c0    	mov    edi,DWORD PTR ds:0xc002d760
c0001143:	f7 c7 01 00 00 00    	test   edi,0x1
c0001149:	75 17                	jne    c0001162 <dlmalloc+0x4b>
c000114b:	85 ff                	test   edi,edi
c000114d:	0f 85 05 03 00 00    	jne    c0001458 <dlmalloc+0x341>
c0001153:	b8 60 d7 02 c0       	mov    eax,0xc002d760
c0001158:	e8 78 fb ff ff       	call   c0000cd5 <malloc_consolidate>
c000115d:	e9 f6 02 00 00       	jmp    c0001458 <dlmalloc+0x341>
c0001162:	39 f7                	cmp    edi,esi
c0001164:	72 1f                	jb     c0001185 <dlmalloc+0x6e>
c0001166:	89 f2                	mov    edx,esi
c0001168:	c1 ea 03             	shr    edx,0x3
c000116b:	83 ea 02             	sub    edx,0x2
c000116e:	8b 04 95 64 d7 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd289c]
c0001175:	85 c0                	test   eax,eax
c0001177:	74 0c                	je     c0001185 <dlmalloc+0x6e>
c0001179:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c000117c:	89 0c 95 64 d7 02 c0 	mov    DWORD PTR [edx*4-0x3ffd289c],ecx
c0001183:	eb 30                	jmp    c00011b5 <dlmalloc+0x9e>
c0001185:	89 f0                	mov    eax,esi
c0001187:	81 fe ff 00 00 00    	cmp    esi,0xff
c000118d:	77 2e                	ja     c00011bd <dlmalloc+0xa6>
c000118f:	c1 e8 03             	shr    eax,0x3
c0001192:	8d 14 c5 94 d7 02 c0 	lea    edx,[eax*8-0x3ffd286c]
c0001199:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000119d:	8d 5a f8             	lea    ebx,[edx-0x8]
c00011a0:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00011a3:	39 c3                	cmp    ebx,eax
c00011a5:	74 2e                	je     c00011d5 <dlmalloc+0xbe>
c00011a7:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00011aa:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00011af:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00011b2:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00011b5:	83 c0 08             	add    eax,0x8
c00011b8:	e9 e0 02 00 00       	jmp    c000149d <dlmalloc+0x386>
c00011bd:	e8 8f fa ff ff       	call   c0000c51 <largebin_index>
c00011c2:	83 e7 02             	and    edi,0x2
c00011c5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00011c9:	74 0a                	je     c00011d5 <dlmalloc+0xbe>
c00011cb:	b8 60 d7 02 c0       	mov    eax,0xc002d760
c00011d0:	e8 00 fb ff ff       	call   c0000cd5 <malloc_consolidate>
c00011d5:	8d 46 10             	lea    eax,[esi+0x10]
c00011d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011dc:	8b 1d a0 d7 02 c0    	mov    ebx,DWORD PTR ds:0xc002d7a0
c00011e2:	81 fb 94 d7 02 c0    	cmp    ebx,0xc002d794
c00011e8:	0f 84 13 01 00 00    	je     c0001301 <dlmalloc+0x1ea>
c00011ee:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00011f1:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00011f4:	83 e7 fc             	and    edi,0xfffffffc
c00011f7:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011fd:	77 4c                	ja     c000124b <dlmalloc+0x134>
c00011ff:	3d 94 d7 02 c0       	cmp    eax,0xc002d794
c0001204:	75 45                	jne    c000124b <dlmalloc+0x134>
c0001206:	39 1d 90 d7 02 c0    	cmp    DWORD PTR ds:0xc002d790,ebx
c000120c:	75 3d                	jne    c000124b <dlmalloc+0x134>
c000120e:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0001212:	73 37                	jae    c000124b <dlmalloc+0x134>
c0001214:	8d 04 33             	lea    eax,[ebx+esi*1]
c0001217:	89 fa                	mov    edx,edi
c0001219:	a3 9c d7 02 c0       	mov    ds:0xc002d79c,eax
c000121e:	a3 a0 d7 02 c0       	mov    ds:0xc002d7a0,eax
c0001223:	a3 90 d7 02 c0       	mov    ds:0xc002d790,eax
c0001228:	29 f2                	sub    edx,esi
c000122a:	c7 40 08 94 d7 02 c0 	mov    DWORD PTR [eax+0x8],0xc002d794
c0001231:	c7 40 0c 94 d7 02 c0 	mov    DWORD PTR [eax+0xc],0xc002d794
c0001238:	83 ce 01             	or     esi,0x1
c000123b:	89 d1                	mov    ecx,edx
c000123d:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001240:	83 c9 01             	or     ecx,0x1
c0001243:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001246:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001249:	eb 15                	jmp    c0001260 <dlmalloc+0x149>
c000124b:	a3 a0 d7 02 c0       	mov    ds:0xc002d7a0,eax
c0001250:	39 fe                	cmp    esi,edi
c0001252:	c7 40 08 94 d7 02 c0 	mov    DWORD PTR [eax+0x8],0xc002d794
c0001259:	75 0d                	jne    c0001268 <dlmalloc+0x151>
c000125b:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001260:	8d 43 08             	lea    eax,[ebx+0x8]
c0001263:	e9 35 02 00 00       	jmp    c000149d <dlmalloc+0x386>
c0001268:	89 f8                	mov    eax,edi
c000126a:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001270:	77 19                	ja     c000128b <dlmalloc+0x174>
c0001272:	c1 e8 03             	shr    eax,0x3
c0001275:	8d 14 00             	lea    edx,[eax+eax*1]
c0001278:	83 c2 0d             	add    edx,0xd
c000127b:	8d 2c 95 58 d7 02 c0 	lea    ebp,[edx*4-0x3ffd28a8]
c0001282:	8b 14 95 60 d7 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd28a0]
c0001289:	eb 46                	jmp    c00012d1 <dlmalloc+0x1ba>
c000128b:	e8 c1 f9 ff ff       	call   c0000c51 <largebin_index>
c0001290:	8d 14 00             	lea    edx,[eax+eax*1]
c0001293:	83 c2 0d             	add    edx,0xd
c0001296:	8d 0c 95 60 d7 02 c0 	lea    ecx,[edx*4-0x3ffd28a0]
c000129d:	8b 14 95 60 d7 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd28a0]
c00012a4:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00012a7:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00012ab:	89 d5                	mov    ebp,edx
c00012ad:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00012b1:	74 1e                	je     c00012d1 <dlmalloc+0x1ba>
c00012b3:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00012b6:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00012b9:	77 12                	ja     c00012cd <dlmalloc+0x1b6>
c00012bb:	83 cf 01             	or     edi,0x1
c00012be:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00012c1:	76 05                	jbe    c00012c8 <dlmalloc+0x1b1>
c00012c3:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00012c6:	eb f6                	jmp    c00012be <dlmalloc+0x1a7>
c00012c8:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00012cb:	eb 04                	jmp    c00012d1 <dlmalloc+0x1ba>
c00012cd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00012d1:	89 c7                	mov    edi,eax
c00012d3:	88 c1                	mov    cl,al
c00012d5:	c1 ff 05             	sar    edi,0x5
c00012d8:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00012dc:	bf 01 00 00 00       	mov    edi,0x1
c00012e1:	d3 e7                	shl    edi,cl
c00012e3:	89 f8                	mov    eax,edi
c00012e5:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00012e9:	09 04 bd 94 da 02 c0 	or     DWORD PTR [edi*4-0x3ffd256c],eax
c00012f0:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00012f3:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00012f6:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00012f9:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00012fc:	e9 db fe ff ff       	jmp    c00011dc <dlmalloc+0xc5>
c0001301:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001307:	76 78                	jbe    c0001381 <dlmalloc+0x26a>
c0001309:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000130d:	8d 04 c5 94 d7 02 c0 	lea    eax,[eax*8-0x3ffd286c]
c0001314:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001317:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000131a:	39 ca                	cmp    edx,ecx
c000131c:	74 63                	je     c0001381 <dlmalloc+0x26a>
c000131e:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0001321:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001324:	83 e3 fc             	and    ebx,0xfffffffc
c0001327:	39 de                	cmp    esi,ebx
c0001329:	77 52                	ja     c000137d <dlmalloc+0x266>
c000132b:	89 df                	mov    edi,ebx
c000132d:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001330:	29 f7                	sub    edi,esi
c0001332:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001335:	01 d3                	add    ebx,edx
c0001337:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000133a:	83 ff 0f             	cmp    edi,0xf
c000133d:	8d 42 08             	lea    eax,[edx+0x8]
c0001340:	77 09                	ja     c000134b <dlmalloc+0x234>
c0001342:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001346:	e9 52 01 00 00       	jmp    c000149d <dlmalloc+0x386>
c000134b:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000134e:	83 ce 01             	or     esi,0x1
c0001351:	89 0d 9c d7 02 c0    	mov    DWORD PTR ds:0xc002d79c,ecx
c0001357:	89 0d a0 d7 02 c0    	mov    DWORD PTR ds:0xc002d7a0,ecx
c000135d:	c7 41 08 94 d7 02 c0 	mov    DWORD PTR [ecx+0x8],0xc002d794
c0001364:	c7 41 0c 94 d7 02 c0 	mov    DWORD PTR [ecx+0xc],0xc002d794
c000136b:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000136e:	89 fa                	mov    edx,edi
c0001370:	83 ca 01             	or     edx,0x1
c0001373:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001376:	89 3b                	mov    DWORD PTR [ebx],edi
c0001378:	e9 20 01 00 00       	jmp    c000149d <dlmalloc+0x386>
c000137d:	89 c2                	mov    edx,eax
c000137f:	eb 99                	jmp    c000131a <dlmalloc+0x203>
c0001381:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001385:	b8 01 00 00 00       	mov    eax,0x1
c000138a:	41                   	inc    ecx
c000138b:	89 cb                	mov    ebx,ecx
c000138d:	8d 14 cd 8c d7 02 c0 	lea    edx,[ecx*8-0x3ffd2874]
c0001394:	c1 eb 05             	shr    ebx,0x5
c0001397:	d3 e0                	shl    eax,cl
c0001399:	8b 3c 9d 94 da 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd256c]
c00013a0:	39 f8                	cmp    eax,edi
c00013a2:	77 04                	ja     c00013a8 <dlmalloc+0x291>
c00013a4:	85 c0                	test   eax,eax
c00013a6:	75 26                	jne    c00013ce <dlmalloc+0x2b7>
c00013a8:	43                   	inc    ebx
c00013a9:	83 fb 02             	cmp    ebx,0x2
c00013ac:	0f 87 a6 00 00 00    	ja     c0001458 <dlmalloc+0x341>
c00013b2:	8b 3c 9d 94 da 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd256c]
c00013b9:	85 ff                	test   edi,edi
c00013bb:	74 eb                	je     c00013a8 <dlmalloc+0x291>
c00013bd:	89 d8                	mov    eax,ebx
c00013bf:	c1 e0 06             	shl    eax,0x6
c00013c2:	8d 14 85 8c d7 02 c0 	lea    edx,[eax*4-0x3ffd2874]
c00013c9:	b8 01 00 00 00       	mov    eax,0x1
c00013ce:	85 f8                	test   eax,edi
c00013d0:	75 07                	jne    c00013d9 <dlmalloc+0x2c2>
c00013d2:	83 c2 08             	add    edx,0x8
c00013d5:	01 c0                	add    eax,eax
c00013d7:	eb f5                	jmp    c00013ce <dlmalloc+0x2b7>
c00013d9:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00013dc:	39 ca                	cmp    edx,ecx
c00013de:	75 14                	jne    c00013f4 <dlmalloc+0x2dd>
c00013e0:	89 c1                	mov    ecx,eax
c00013e2:	83 c2 08             	add    edx,0x8
c00013e5:	f7 d1                	not    ecx
c00013e7:	01 c0                	add    eax,eax
c00013e9:	21 cf                	and    edi,ecx
c00013eb:	89 3c 9d 94 da 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd256c],edi
c00013f2:	eb ac                	jmp    c00013a0 <dlmalloc+0x289>
c00013f4:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00013f7:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00013fa:	83 e0 fc             	and    eax,0xfffffffc
c00013fd:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001400:	89 c3                	mov    ebx,eax
c0001402:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001405:	29 f3                	sub    ebx,esi
c0001407:	8d 14 01             	lea    edx,[ecx+eax*1]
c000140a:	83 fb 0f             	cmp    ebx,0xf
c000140d:	8d 41 08             	lea    eax,[ecx+0x8]
c0001410:	77 09                	ja     c000141b <dlmalloc+0x304>
c0001412:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001416:	e9 82 00 00 00       	jmp    c000149d <dlmalloc+0x386>
c000141b:	8d 3c 31             	lea    edi,[ecx+esi*1]
c000141e:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001424:	89 3d 9c d7 02 c0    	mov    DWORD PTR ds:0xc002d79c,edi
c000142a:	89 3d a0 d7 02 c0    	mov    DWORD PTR ds:0xc002d7a0,edi
c0001430:	c7 47 08 94 d7 02 c0 	mov    DWORD PTR [edi+0x8],0xc002d794
c0001437:	c7 47 0c 94 d7 02 c0 	mov    DWORD PTR [edi+0xc],0xc002d794
c000143e:	77 06                	ja     c0001446 <dlmalloc+0x32f>
c0001440:	89 3d 90 d7 02 c0    	mov    DWORD PTR ds:0xc002d790,edi
c0001446:	83 ce 01             	or     esi,0x1
c0001449:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c000144c:	89 d9                	mov    ecx,ebx
c000144e:	83 c9 01             	or     ecx,0x1
c0001451:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001454:	89 1a                	mov    DWORD PTR [edx],ebx
c0001456:	eb 45                	jmp    c000149d <dlmalloc+0x386>
c0001458:	a1 8c d7 02 c0       	mov    eax,ds:0xc002d78c
c000145d:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001460:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001463:	83 e2 fc             	and    edx,0xfffffffc
c0001466:	39 d1                	cmp    ecx,edx
c0001468:	77 1e                	ja     c0001488 <dlmalloc+0x371>
c000146a:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000146d:	89 f3                	mov    ebx,esi
c000146f:	89 0d 8c d7 02 c0    	mov    DWORD PTR ds:0xc002d78c,ecx
c0001475:	83 cb 01             	or     ebx,0x1
c0001478:	29 f2                	sub    edx,esi
c000147a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000147d:	83 ca 01             	or     edx,0x1
c0001480:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001483:	e9 2d fd ff ff       	jmp    c00011b5 <dlmalloc+0x9e>
c0001488:	83 c4 1c             	add    esp,0x1c
c000148b:	89 f0                	mov    eax,esi
c000148d:	5b                   	pop    ebx
c000148e:	ba 60 d7 02 c0       	mov    edx,0xc002d760
c0001493:	5e                   	pop    esi
c0001494:	5f                   	pop    edi
c0001495:	5d                   	pop    ebp
c0001496:	e9 16 fa ff ff       	jmp    c0000eb1 <sYSMALLOc>
c000149b:	31 c0                	xor    eax,eax
c000149d:	83 c4 1c             	add    esp,0x1c
c00014a0:	5b                   	pop    ebx
c00014a1:	5e                   	pop    esi
c00014a2:	5f                   	pop    edi
c00014a3:	5d                   	pop    ebp
c00014a4:	c3                   	ret    

c00014a5 <iALLOc>:
c00014a5:	55                   	push   ebp
c00014a6:	89 c5                	mov    ebp,eax
c00014a8:	57                   	push   edi
c00014a9:	56                   	push   esi
c00014aa:	53                   	push   ebx
c00014ab:	83 ec 2c             	sub    esp,0x2c
c00014ae:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00014b2:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00014b6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00014ba:	83 3d 60 d7 02 c0 00 	cmp    DWORD PTR ds:0xc002d760,0x0
c00014c1:	75 12                	jne    c00014d5 <iALLOc+0x30>
c00014c3:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00014c7:	b8 60 d7 02 c0       	mov    eax,0xc002d760
c00014cc:	e8 04 f8 ff ff       	call   c0000cd5 <malloc_consolidate>
c00014d1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00014d5:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014da:	74 12                	je     c00014ee <iALLOc+0x49>
c00014dc:	85 ed                	test   ebp,ebp
c00014de:	0f 84 64 01 00 00    	je     c0001648 <iALLOc+0x1a3>
c00014e4:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00014ec:	eb 33                	jmp    c0001521 <iALLOc+0x7c>
c00014ee:	85 ed                	test   ebp,ebp
c00014f0:	75 14                	jne    c0001506 <iALLOc+0x61>
c00014f2:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00014fa:	83 c4 2c             	add    esp,0x2c
c00014fd:	5b                   	pop    ebx
c00014fe:	5e                   	pop    esi
c00014ff:	5f                   	pop    edi
c0001500:	5d                   	pop    ebp
c0001501:	e9 11 fc ff ff       	jmp    c0001117 <dlmalloc>
c0001506:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c000150d:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001515:	83 f8 0f             	cmp    eax,0xf
c0001518:	76 07                	jbe    c0001521 <iALLOc+0x7c>
c000151a:	83 e0 f8             	and    eax,0xfffffff8
c000151d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0001521:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001526:	75 09                	jne    c0001531 <iALLOc+0x8c>
c0001528:	89 d0                	mov    eax,edx
c000152a:	8d 3c aa             	lea    edi,[edx+ebp*4]
c000152d:	31 f6                	xor    esi,esi
c000152f:	eb 3b                	jmp    c000156c <iALLOc+0xc7>
c0001531:	8b 02                	mov    eax,DWORD PTR [edx]
c0001533:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c000153b:	83 c0 0b             	add    eax,0xb
c000153e:	83 f8 0f             	cmp    eax,0xf
c0001541:	76 07                	jbe    c000154a <iALLOc+0xa5>
c0001543:	83 e0 f8             	and    eax,0xfffffff8
c0001546:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000154a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000154e:	0f af f5             	imul   esi,ebp
c0001551:	eb 25                	jmp    c0001578 <iALLOc+0xd3>
c0001553:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001555:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001558:	bb 10 00 00 00       	mov    ebx,0x10
c000155d:	83 f9 0f             	cmp    ecx,0xf
c0001560:	76 05                	jbe    c0001567 <iALLOc+0xc2>
c0001562:	83 e1 f8             	and    ecx,0xfffffff8
c0001565:	89 cb                	mov    ebx,ecx
c0001567:	01 de                	add    esi,ebx
c0001569:	83 c0 04             	add    eax,0x4
c000156c:	39 c7                	cmp    edi,eax
c000156e:	75 e3                	jne    c0001553 <iALLOc+0xae>
c0001570:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001578:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000157c:	8b 1d b4 da 02 c0    	mov    ebx,DWORD PTR ds:0xc002dab4
c0001582:	83 ec 0c             	sub    esp,0xc
c0001585:	c7 05 b4 da 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002dab4,0x0
c000158f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001593:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001597:	50                   	push   eax
c0001598:	e8 7a fb ff ff       	call   c0001117 <dlmalloc>
c000159d:	83 c4 10             	add    esp,0x10
c00015a0:	89 1d b4 da 02 c0    	mov    DWORD PTR ds:0xc002dab4,ebx
c00015a6:	85 c0                	test   eax,eax
c00015a8:	0f 84 92 00 00 00    	je     c0001640 <iALLOc+0x19b>
c00015ae:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00015b1:	8d 78 f8             	lea    edi,[eax-0x8]
c00015b4:	83 e3 fc             	and    ebx,0xfffffffc
c00015b7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00015bb:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00015c0:	74 1e                	je     c00015e0 <iALLOc+0x13b>
c00015c2:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00015c6:	89 d9                	mov    ecx,ebx
c00015c8:	52                   	push   edx
c00015c9:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00015cd:	83 e9 04             	sub    ecx,0x4
c00015d0:	51                   	push   ecx
c00015d1:	6a 00                	push   0x0
c00015d3:	50                   	push   eax
c00015d4:	e8 9f f1 ff ff       	call   c0000778 <memset>
c00015d9:	83 c4 10             	add    esp,0x10
c00015dc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00015e0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015e5:	75 14                	jne    c00015fb <iALLOc+0x156>
c00015e7:	8d 04 37             	lea    eax,[edi+esi*1]
c00015ea:	29 f3                	sub    ebx,esi
c00015ec:	8d 48 08             	lea    ecx,[eax+0x8]
c00015ef:	83 cb 01             	or     ebx,0x1
c00015f2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015f6:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015f9:	89 f3                	mov    ebx,esi
c00015fb:	31 c0                	xor    eax,eax
c00015fd:	4d                   	dec    ebp
c00015fe:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001601:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001605:	39 c5                	cmp    ebp,eax
c0001607:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c000160a:	74 2c                	je     c0001638 <iALLOc+0x193>
c000160c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001610:	85 c9                	test   ecx,ecx
c0001612:	75 15                	jne    c0001629 <iALLOc+0x184>
c0001614:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001617:	8d 71 0b             	lea    esi,[ecx+0xb]
c000161a:	b9 10 00 00 00       	mov    ecx,0x10
c000161f:	83 fe 0f             	cmp    esi,0xf
c0001622:	76 05                	jbe    c0001629 <iALLOc+0x184>
c0001624:	83 e6 f8             	and    esi,0xfffffff8
c0001627:	89 f1                	mov    ecx,esi
c0001629:	89 ce                	mov    esi,ecx
c000162b:	29 cb                	sub    ebx,ecx
c000162d:	83 ce 01             	or     esi,0x1
c0001630:	40                   	inc    eax
c0001631:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001634:	01 cf                	add    edi,ecx
c0001636:	eb c6                	jmp    c00015fe <iALLOc+0x159>
c0001638:	83 cb 01             	or     ebx,0x1
c000163b:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000163e:	eb 08                	jmp    c0001648 <iALLOc+0x1a3>
c0001640:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001648:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000164c:	83 c4 2c             	add    esp,0x2c
c000164f:	5b                   	pop    ebx
c0001650:	5e                   	pop    esi
c0001651:	5f                   	pop    edi
c0001652:	5d                   	pop    ebp
c0001653:	c3                   	ret    

c0001654 <dlrealloc>:
c0001654:	55                   	push   ebp
c0001655:	57                   	push   edi
c0001656:	56                   	push   esi
c0001657:	53                   	push   ebx
c0001658:	83 ec 1c             	sub    esp,0x1c
c000165b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000165f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001663:	85 db                	test   ebx,ebx
c0001665:	75 10                	jne    c0001677 <dlrealloc+0x23>
c0001667:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000166b:	83 c4 1c             	add    esp,0x1c
c000166e:	5b                   	pop    ebx
c000166f:	5e                   	pop    esi
c0001670:	5f                   	pop    edi
c0001671:	5d                   	pop    ebp
c0001672:	e9 a0 fa ff ff       	jmp    c0001117 <dlmalloc>
c0001677:	83 f8 df             	cmp    eax,0xffffffdf
c000167a:	76 07                	jbe    c0001683 <dlrealloc+0x2f>
c000167c:	31 db                	xor    ebx,ebx
c000167e:	e9 7c 01 00 00       	jmp    c00017ff <dlrealloc+0x1ab>
c0001683:	83 c0 0b             	add    eax,0xb
c0001686:	bf 10 00 00 00       	mov    edi,0x10
c000168b:	83 f8 0f             	cmp    eax,0xf
c000168e:	76 05                	jbe    c0001695 <dlrealloc+0x41>
c0001690:	83 e0 f8             	and    eax,0xfffffff8
c0001693:	89 c7                	mov    edi,eax
c0001695:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001698:	8d 6b f8             	lea    ebp,[ebx-0x8]
c000169b:	89 c6                	mov    esi,eax
c000169d:	83 e6 fc             	and    esi,0xfffffffc
c00016a0:	a8 02                	test   al,0x2
c00016a2:	75 d8                	jne    c000167c <dlrealloc+0x28>
c00016a4:	39 f7                	cmp    edi,esi
c00016a6:	0f 86 15 01 00 00    	jbe    c00017c1 <dlrealloc+0x16d>
c00016ac:	8d 54 35 00          	lea    edx,[ebp+esi*1+0x0]
c00016b0:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00016b3:	39 15 8c d7 02 c0    	cmp    DWORD PTR ds:0xc002d78c,edx
c00016b9:	75 33                	jne    c00016ee <dlrealloc+0x9a>
c00016bb:	83 e1 fc             	and    ecx,0xfffffffc
c00016be:	01 f1                	add    ecx,esi
c00016c0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00016c4:	8d 4f 10             	lea    ecx,[edi+0x10]
c00016c7:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00016cb:	77 49                	ja     c0001716 <dlrealloc+0xc2>
c00016cd:	01 fd                	add    ebp,edi
c00016cf:	83 e0 01             	and    eax,0x1
c00016d2:	09 f8                	or     eax,edi
c00016d4:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00016d7:	89 2d 8c d7 02 c0    	mov    DWORD PTR ds:0xc002d78c,ebp
c00016dd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016e1:	29 f8                	sub    eax,edi
c00016e3:	83 c8 01             	or     eax,0x1
c00016e6:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00016e9:	e9 11 01 00 00       	jmp    c00017ff <dlrealloc+0x1ab>
c00016ee:	89 c8                	mov    eax,ecx
c00016f0:	83 e0 fe             	and    eax,0xfffffffe
c00016f3:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00016f8:	75 1c                	jne    c0001716 <dlrealloc+0xc2>
c00016fa:	83 e1 fc             	and    ecx,0xfffffffc
c00016fd:	01 f1                	add    ecx,esi
c00016ff:	39 cf                	cmp    edi,ecx
c0001701:	77 13                	ja     c0001716 <dlrealloc+0xc2>
c0001703:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001706:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001709:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c000170c:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c000170f:	89 ce                	mov    esi,ecx
c0001711:	e9 ab 00 00 00       	jmp    c00017c1 <dlrealloc+0x16d>
c0001716:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000171a:	8d 47 f9             	lea    eax,[edi-0x7]
c000171d:	83 ec 0c             	sub    esp,0xc
c0001720:	50                   	push   eax
c0001721:	e8 f1 f9 ff ff       	call   c0001117 <dlmalloc>
c0001726:	83 c4 10             	add    esp,0x10
c0001729:	89 c1                	mov    ecx,eax
c000172b:	85 c0                	test   eax,eax
c000172d:	0f 84 49 ff ff ff    	je     c000167c <dlrealloc+0x28>
c0001733:	8d 40 f8             	lea    eax,[eax-0x8]
c0001736:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000173a:	39 c2                	cmp    edx,eax
c000173c:	75 0a                	jne    c0001748 <dlrealloc+0xf4>
c000173e:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001741:	83 e0 fc             	and    eax,0xfffffffc
c0001744:	01 c6                	add    esi,eax
c0001746:	eb 79                	jmp    c00017c1 <dlrealloc+0x16d>
c0001748:	83 ee 04             	sub    esi,0x4
c000174b:	83 fe 27             	cmp    esi,0x27
c000174e:	76 16                	jbe    c0001766 <dlrealloc+0x112>
c0001750:	50                   	push   eax
c0001751:	56                   	push   esi
c0001752:	53                   	push   ebx
c0001753:	51                   	push   ecx
c0001754:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0001758:	e8 e7 ef ff ff       	call   c0000744 <memcpy>
c000175d:	83 c4 10             	add    esp,0x10
c0001760:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0001764:	eb 43                	jmp    c00017a9 <dlrealloc+0x155>
c0001766:	8b 03                	mov    eax,DWORD PTR [ebx]
c0001768:	83 fe 13             	cmp    esi,0x13
c000176b:	89 01                	mov    DWORD PTR [ecx],eax
c000176d:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0001770:	89 41 04             	mov    DWORD PTR [ecx+0x4],eax
c0001773:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0001776:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0001779:	76 2e                	jbe    c00017a9 <dlrealloc+0x155>
c000177b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000177e:	83 fe 1b             	cmp    esi,0x1b
c0001781:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001784:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0001787:	89 41 10             	mov    DWORD PTR [ecx+0x10],eax
c000178a:	76 1d                	jbe    c00017a9 <dlrealloc+0x155>
c000178c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000178f:	83 fe 23             	cmp    esi,0x23
c0001792:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0001795:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0001798:	89 41 18             	mov    DWORD PTR [ecx+0x18],eax
c000179b:	76 0c                	jbe    c00017a9 <dlrealloc+0x155>
c000179d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00017a0:	89 41 1c             	mov    DWORD PTR [ecx+0x1c],eax
c00017a3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00017a6:	89 41 20             	mov    DWORD PTR [ecx+0x20],eax
c00017a9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00017ad:	83 ec 0c             	sub    esp,0xc
c00017b0:	53                   	push   ebx
c00017b1:	e8 06 f6 ff ff       	call   c0000dbc <dlfree>
c00017b6:	83 c4 10             	add    esp,0x10
c00017b9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00017bd:	89 cb                	mov    ebx,ecx
c00017bf:	eb 3e                	jmp    c00017ff <dlrealloc+0x1ab>
c00017c1:	89 f2                	mov    edx,esi
c00017c3:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00017c6:	29 fa                	sub    edx,edi
c00017c8:	83 e1 01             	and    ecx,0x1
c00017cb:	8d 44 35 00          	lea    eax,[ebp+esi*1+0x0]
c00017cf:	83 fa 0f             	cmp    edx,0xf
c00017d2:	77 0b                	ja     c00017df <dlrealloc+0x18b>
c00017d4:	09 ce                	or     esi,ecx
c00017d6:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00017d9:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017dd:	eb 20                	jmp    c00017ff <dlrealloc+0x1ab>
c00017df:	01 fd                	add    ebp,edi
c00017e1:	83 ec 0c             	sub    esp,0xc
c00017e4:	09 cf                	or     edi,ecx
c00017e6:	83 ca 01             	or     edx,0x1
c00017e9:	89 7b fc             	mov    DWORD PTR [ebx-0x4],edi
c00017ec:	83 c5 08             	add    ebp,0x8
c00017ef:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
c00017f2:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017f6:	55                   	push   ebp
c00017f7:	e8 c0 f5 ff ff       	call   c0000dbc <dlfree>
c00017fc:	83 c4 10             	add    esp,0x10
c00017ff:	83 c4 1c             	add    esp,0x1c
c0001802:	89 d8                	mov    eax,ebx
c0001804:	5b                   	pop    ebx
c0001805:	5e                   	pop    esi
c0001806:	5f                   	pop    edi
c0001807:	5d                   	pop    ebp
c0001808:	c3                   	ret    

c0001809 <dlmemalign>:
c0001809:	55                   	push   ebp
c000180a:	57                   	push   edi
c000180b:	56                   	push   esi
c000180c:	53                   	push   ebx
c000180d:	83 ec 0c             	sub    esp,0xc
c0001810:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0001814:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001818:	83 fa 08             	cmp    edx,0x8
c000181b:	77 10                	ja     c000182d <dlmemalign+0x24>
c000181d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0001821:	83 c4 0c             	add    esp,0xc
c0001824:	5b                   	pop    ebx
c0001825:	5e                   	pop    esi
c0001826:	5f                   	pop    edi
c0001827:	5d                   	pop    ebp
c0001828:	e9 ea f8 ff ff       	jmp    c0001117 <dlmalloc>
c000182d:	bf 10 00 00 00       	mov    edi,0x10
c0001832:	83 fa 0f             	cmp    edx,0xf
c0001835:	76 13                	jbe    c000184a <dlmemalign+0x41>
c0001837:	8d 4a ff             	lea    ecx,[edx-0x1]
c000183a:	85 d1                	test   ecx,edx
c000183c:	75 04                	jne    c0001842 <dlmemalign+0x39>
c000183e:	89 d7                	mov    edi,edx
c0001840:	eb 08                	jmp    c000184a <dlmemalign+0x41>
c0001842:	39 d7                	cmp    edi,edx
c0001844:	73 04                	jae    c000184a <dlmemalign+0x41>
c0001846:	01 ff                	add    edi,edi
c0001848:	eb f8                	jmp    c0001842 <dlmemalign+0x39>
c000184a:	83 f8 df             	cmp    eax,0xffffffdf
c000184d:	76 07                	jbe    c0001856 <dlmemalign+0x4d>
c000184f:	31 c0                	xor    eax,eax
c0001851:	e9 ce 00 00 00       	jmp    c0001924 <dlmemalign+0x11b>
c0001856:	83 c0 0b             	add    eax,0xb
c0001859:	bd 10 00 00 00       	mov    ebp,0x10
c000185e:	83 f8 0f             	cmp    eax,0xf
c0001861:	76 05                	jbe    c0001868 <dlmemalign+0x5f>
c0001863:	83 e0 f8             	and    eax,0xfffffff8
c0001866:	89 c5                	mov    ebp,eax
c0001868:	83 ec 0c             	sub    esp,0xc
c000186b:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000186f:	50                   	push   eax
c0001870:	e8 a2 f8 ff ff       	call   c0001117 <dlmalloc>
c0001875:	83 c4 10             	add    esp,0x10
c0001878:	89 c1                	mov    ecx,eax
c000187a:	85 c0                	test   eax,eax
c000187c:	74 d1                	je     c000184f <dlmemalign+0x46>
c000187e:	31 d2                	xor    edx,edx
c0001880:	8d 70 f8             	lea    esi,[eax-0x8]
c0001883:	f7 f7                	div    edi
c0001885:	85 d2                	test   edx,edx
c0001887:	74 62                	je     c00018eb <dlmemalign+0xe2>
c0001889:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c000188d:	89 f8                	mov    eax,edi
c000188f:	f7 d8                	neg    eax
c0001891:	21 c3                	and    ebx,eax
c0001893:	83 eb 08             	sub    ebx,0x8
c0001896:	89 d8                	mov    eax,ebx
c0001898:	29 f0                	sub    eax,esi
c000189a:	83 f8 0f             	cmp    eax,0xf
c000189d:	77 02                	ja     c00018a1 <dlmemalign+0x98>
c000189f:	01 fb                	add    ebx,edi
c00018a1:	89 d8                	mov    eax,ebx
c00018a3:	29 f0                	sub    eax,esi
c00018a5:	89 c6                	mov    esi,eax
c00018a7:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00018aa:	89 c2                	mov    edx,eax
c00018ac:	83 e2 fc             	and    edx,0xfffffffc
c00018af:	29 f2                	sub    edx,esi
c00018b1:	a8 02                	test   al,0x2
c00018b3:	74 10                	je     c00018c5 <dlmemalign+0xbc>
c00018b5:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00018b8:	83 ca 02             	or     edx,0x2
c00018bb:	8d 43 08             	lea    eax,[ebx+0x8]
c00018be:	89 33                	mov    DWORD PTR [ebx],esi
c00018c0:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00018c3:	eb 5f                	jmp    c0001924 <dlmemalign+0x11b>
c00018c5:	83 ec 0c             	sub    esp,0xc
c00018c8:	89 d0                	mov    eax,edx
c00018ca:	83 c8 01             	or     eax,0x1
c00018cd:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00018d0:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00018d5:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00018d8:	83 e0 01             	and    eax,0x1
c00018db:	09 f0                	or     eax,esi
c00018dd:	89 de                	mov    esi,ebx
c00018df:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00018e2:	51                   	push   ecx
c00018e3:	e8 d4 f4 ff ff       	call   c0000dbc <dlfree>
c00018e8:	83 c4 10             	add    esp,0x10
c00018eb:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018ee:	a8 02                	test   al,0x2
c00018f0:	75 2f                	jne    c0001921 <dlmemalign+0x118>
c00018f2:	83 e0 fc             	and    eax,0xfffffffc
c00018f5:	8d 55 10             	lea    edx,[ebp+0x10]
c00018f8:	39 c2                	cmp    edx,eax
c00018fa:	73 25                	jae    c0001921 <dlmemalign+0x118>
c00018fc:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00018ff:	83 ec 0c             	sub    esp,0xc
c0001902:	29 e8                	sub    eax,ebp
c0001904:	83 c2 08             	add    edx,0x8
c0001907:	83 c8 01             	or     eax,0x1
c000190a:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c000190d:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001910:	83 e0 01             	and    eax,0x1
c0001913:	09 c5                	or     ebp,eax
c0001915:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001918:	52                   	push   edx
c0001919:	e8 9e f4 ff ff       	call   c0000dbc <dlfree>
c000191e:	83 c4 10             	add    esp,0x10
c0001921:	8d 46 08             	lea    eax,[esi+0x8]
c0001924:	83 c4 0c             	add    esp,0xc
c0001927:	5b                   	pop    ebx
c0001928:	5e                   	pop    esi
c0001929:	5f                   	pop    edi
c000192a:	5d                   	pop    ebp
c000192b:	c3                   	ret    

c000192c <dlcalloc>:
c000192c:	53                   	push   ebx
c000192d:	83 ec 14             	sub    esp,0x14
c0001930:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001934:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001939:	50                   	push   eax
c000193a:	e8 d8 f7 ff ff       	call   c0001117 <dlmalloc>
c000193f:	83 c4 10             	add    esp,0x10
c0001942:	89 c3                	mov    ebx,eax
c0001944:	85 c0                	test   eax,eax
c0001946:	74 77                	je     c00019bf <dlcalloc+0x93>
c0001948:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c000194b:	89 d0                	mov    eax,edx
c000194d:	83 e0 fc             	and    eax,0xfffffffc
c0001950:	80 e2 02             	and    dl,0x2
c0001953:	75 5a                	jne    c00019af <dlcalloc+0x83>
c0001955:	83 e8 04             	sub    eax,0x4
c0001958:	83 f8 27             	cmp    eax,0x27
c000195b:	76 03                	jbe    c0001960 <dlcalloc+0x34>
c000195d:	51                   	push   ecx
c000195e:	eb 53                	jmp    c00019b3 <dlcalloc+0x87>
c0001960:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001966:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000196d:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001974:	83 f8 13             	cmp    eax,0x13
c0001977:	76 46                	jbe    c00019bf <dlcalloc+0x93>
c0001979:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001980:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001987:	83 f8 1b             	cmp    eax,0x1b
c000198a:	76 33                	jbe    c00019bf <dlcalloc+0x93>
c000198c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001993:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000199a:	83 f8 23             	cmp    eax,0x23
c000199d:	76 20                	jbe    c00019bf <dlcalloc+0x93>
c000199f:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00019a6:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00019ad:	eb 10                	jmp    c00019bf <dlcalloc+0x93>
c00019af:	83 e8 08             	sub    eax,0x8
c00019b2:	52                   	push   edx
c00019b3:	50                   	push   eax
c00019b4:	6a 00                	push   0x0
c00019b6:	53                   	push   ebx
c00019b7:	e8 bc ed ff ff       	call   c0000778 <memset>
c00019bc:	83 c4 10             	add    esp,0x10
c00019bf:	89 d8                	mov    eax,ebx
c00019c1:	83 c4 08             	add    esp,0x8
c00019c4:	5b                   	pop    ebx
c00019c5:	c3                   	ret    

c00019c6 <dlcfree>:
c00019c6:	e9 f1 f3 ff ff       	jmp    c0000dbc <dlfree>

c00019cb <dlindependent_calloc>:
c00019cb:	83 ec 28             	sub    esp,0x28
c00019ce:	b9 03 00 00 00       	mov    ecx,0x3
c00019d3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019d7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00019db:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00019df:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00019e3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019e7:	e8 b9 fa ff ff       	call   c00014a5 <iALLOc>
c00019ec:	83 c4 2c             	add    esp,0x2c
c00019ef:	c3                   	ret    

c00019f0 <dlindependent_comalloc>:
c00019f0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00019f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019f8:	31 c9                	xor    ecx,ecx
c00019fa:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00019fe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001a02:	e9 9e fa ff ff       	jmp    c00014a5 <iALLOc>

c0001a07 <dlvalloc>:
c0001a07:	83 ec 0c             	sub    esp,0xc
c0001a0a:	83 3d 60 d7 02 c0 00 	cmp    DWORD PTR ds:0xc002d760,0x0
c0001a11:	75 0a                	jne    c0001a1d <dlvalloc+0x16>
c0001a13:	b8 60 d7 02 c0       	mov    eax,0xc002d760
c0001a18:	e8 b8 f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001a1d:	50                   	push   eax
c0001a1e:	50                   	push   eax
c0001a1f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001a23:	ff 35 bc da 02 c0    	push   DWORD PTR ds:0xc002dabc
c0001a29:	e8 db fd ff ff       	call   c0001809 <dlmemalign>
c0001a2e:	83 c4 1c             	add    esp,0x1c
c0001a31:	c3                   	ret    

c0001a32 <dlpvalloc>:
c0001a32:	83 ec 0c             	sub    esp,0xc
c0001a35:	83 3d 60 d7 02 c0 00 	cmp    DWORD PTR ds:0xc002d760,0x0
c0001a3c:	75 0a                	jne    c0001a48 <dlpvalloc+0x16>
c0001a3e:	b8 60 d7 02 c0       	mov    eax,0xc002d760
c0001a43:	e8 8d f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001a48:	a1 bc da 02 c0       	mov    eax,ds:0xc002dabc
c0001a4d:	89 c1                	mov    ecx,eax
c0001a4f:	52                   	push   edx
c0001a50:	f7 d9                	neg    ecx
c0001a52:	52                   	push   edx
c0001a53:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001a57:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001a5b:	21 ca                	and    edx,ecx
c0001a5d:	52                   	push   edx
c0001a5e:	50                   	push   eax
c0001a5f:	e8 a5 fd ff ff       	call   c0001809 <dlmemalign>
c0001a64:	83 c4 1c             	add    esp,0x1c
c0001a67:	c3                   	ret    

c0001a68 <dlmalloc_trim>:
c0001a68:	b8 60 d7 02 c0       	mov    eax,0xc002d760
c0001a6d:	e8 63 f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001a72:	31 c0                	xor    eax,eax
c0001a74:	c3                   	ret    

c0001a75 <dlmalloc_usable_size>:
c0001a75:	53                   	push   ebx
c0001a76:	31 c0                	xor    eax,eax
c0001a78:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001a7c:	85 c9                	test   ecx,ecx
c0001a7e:	74 24                	je     c0001aa4 <dlmalloc_usable_size+0x2f>
c0001a80:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a83:	f6 c2 02             	test   dl,0x2
c0001a86:	74 08                	je     c0001a90 <dlmalloc_usable_size+0x1b>
c0001a88:	83 e2 fc             	and    edx,0xfffffffc
c0001a8b:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a8e:	eb 14                	jmp    c0001aa4 <dlmalloc_usable_size+0x2f>
c0001a90:	89 d3                	mov    ebx,edx
c0001a92:	31 c0                	xor    eax,eax
c0001a94:	83 e3 fe             	and    ebx,0xfffffffe
c0001a97:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a9c:	74 06                	je     c0001aa4 <dlmalloc_usable_size+0x2f>
c0001a9e:	83 e2 fc             	and    edx,0xfffffffc
c0001aa1:	8d 42 fc             	lea    eax,[edx-0x4]
c0001aa4:	5b                   	pop    ebx
c0001aa5:	c3                   	ret    

c0001aa6 <dlmallinfo>:
c0001aa6:	55                   	push   ebp
c0001aa7:	57                   	push   edi
c0001aa8:	56                   	push   esi
c0001aa9:	53                   	push   ebx
c0001aaa:	83 ec 08             	sub    esp,0x8
c0001aad:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001ab1:	83 3d 8c d7 02 c0 00 	cmp    DWORD PTR ds:0xc002d78c,0x0
c0001ab8:	75 0a                	jne    c0001ac4 <dlmallinfo+0x1e>
c0001aba:	b8 60 d7 02 c0       	mov    eax,0xc002d760
c0001abf:	e8 11 f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001ac4:	a1 8c d7 02 c0       	mov    eax,ds:0xc002d78c
c0001ac9:	31 ed                	xor    ebp,ebp
c0001acb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001ace:	31 c9                	xor    ecx,ecx
c0001ad0:	83 e0 fc             	and    eax,0xfffffffc
c0001ad3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001ad7:	31 c0                	xor    eax,eax
c0001ad9:	8b 14 85 64 d7 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd289c]
c0001ae0:	85 d2                	test   edx,edx
c0001ae2:	74 0e                	je     c0001af2 <dlmallinfo+0x4c>
c0001ae4:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001ae7:	45                   	inc    ebp
c0001ae8:	83 e6 fc             	and    esi,0xfffffffc
c0001aeb:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001aee:	01 f1                	add    ecx,esi
c0001af0:	eb ee                	jmp    c0001ae0 <dlmallinfo+0x3a>
c0001af2:	40                   	inc    eax
c0001af3:	83 f8 0a             	cmp    eax,0xa
c0001af6:	75 e1                	jne    c0001ad9 <dlmallinfo+0x33>
c0001af8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001afc:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001b03:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001b06:	b8 94 d7 02 c0       	mov    eax,0xc002d794
c0001b0b:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001b0e:	39 f0                	cmp    eax,esi
c0001b10:	74 10                	je     c0001b22 <dlmallinfo+0x7c>
c0001b12:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001b15:	ff 04 24             	inc    DWORD PTR [esp]
c0001b18:	83 e7 fc             	and    edi,0xfffffffc
c0001b1b:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001b1e:	01 fa                	add    edx,edi
c0001b20:	eb ec                	jmp    c0001b0e <dlmallinfo+0x68>
c0001b22:	83 c0 08             	add    eax,0x8
c0001b25:	3d 8c da 02 c0       	cmp    eax,0xc002da8c
c0001b2a:	75 df                	jne    c0001b0b <dlmallinfo+0x65>
c0001b2c:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001b2f:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001b32:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001b35:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c0001b3a:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001b3d:	89 03                	mov    DWORD PTR [ebx],eax
c0001b3f:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001b42:	8b 35 b0 da 02 c0    	mov    esi,DWORD PTR ds:0xc002dab0
c0001b48:	29 d0                	sub    eax,edx
c0001b4a:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001b4d:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001b50:	8b 35 c4 da 02 c0    	mov    esi,DWORD PTR ds:0xc002dac4
c0001b56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b5a:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001b5d:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001b60:	8b 35 d4 da 02 c0    	mov    esi,DWORD PTR ds:0xc002dad4
c0001b66:	89 d8                	mov    eax,ebx
c0001b68:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001b6b:	83 c4 08             	add    esp,0x8
c0001b6e:	5b                   	pop    ebx
c0001b6f:	5e                   	pop    esi
c0001b70:	5f                   	pop    edi
c0001b71:	5d                   	pop    ebp
c0001b72:	c2 04 00             	ret    0x4

c0001b75 <dlmalloc_stats>:
c0001b75:	83 ec 30             	sub    esp,0x30
c0001b78:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001b7c:	50                   	push   eax
c0001b7d:	e8 24 ff ff ff       	call   c0001aa6 <dlmallinfo>
c0001b82:	83 c4 30             	add    esp,0x30
c0001b85:	c3                   	ret    

c0001b86 <dlmallopt>:
c0001b86:	56                   	push   esi
c0001b87:	b8 60 d7 02 c0       	mov    eax,0xc002d760
c0001b8c:	53                   	push   ebx
c0001b8d:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b91:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b95:	e8 3b f1 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001b9a:	8d 46 04             	lea    eax,[esi+0x4]
c0001b9d:	83 f8 05             	cmp    eax,0x5
c0001ba0:	77 67                	ja     c0001c09 <dlmallopt+0x83>
c0001ba2:	ff 24 85 04 8c 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd73fc]
c0001ba9:	83 fb 50             	cmp    ebx,0x50
c0001bac:	77 5b                	ja     c0001c09 <dlmallopt+0x83>
c0001bae:	ba 08 00 00 00       	mov    edx,0x8
c0001bb3:	85 db                	test   ebx,ebx
c0001bb5:	74 12                	je     c0001bc9 <dlmallopt+0x43>
c0001bb7:	83 c3 0b             	add    ebx,0xb
c0001bba:	ba 10 00 00 00       	mov    edx,0x10
c0001bbf:	83 fb 0f             	cmp    ebx,0xf
c0001bc2:	76 05                	jbe    c0001bc9 <dlmallopt+0x43>
c0001bc4:	89 da                	mov    edx,ebx
c0001bc6:	83 e2 f8             	and    edx,0xfffffff8
c0001bc9:	a1 60 d7 02 c0       	mov    eax,ds:0xc002d760
c0001bce:	83 e0 03             	and    eax,0x3
c0001bd1:	09 d0                	or     eax,edx
c0001bd3:	a3 60 d7 02 c0       	mov    ds:0xc002d760,eax
c0001bd8:	eb 31                	jmp    c0001c0b <dlmallopt+0x85>
c0001bda:	89 1d a4 da 02 c0    	mov    DWORD PTR ds:0xc002daa4,ebx
c0001be0:	eb 06                	jmp    c0001be8 <dlmallopt+0x62>
c0001be2:	89 1d a8 da 02 c0    	mov    DWORD PTR ds:0xc002daa8,ebx
c0001be8:	be 01 00 00 00       	mov    esi,0x1
c0001bed:	eb 1c                	jmp    c0001c0b <dlmallopt+0x85>
c0001bef:	89 1d ac da 02 c0    	mov    DWORD PTR ds:0xc002daac,ebx
c0001bf5:	eb f1                	jmp    c0001be8 <dlmallopt+0x62>
c0001bf7:	31 f6                	xor    esi,esi
c0001bf9:	85 db                	test   ebx,ebx
c0001bfb:	75 0e                	jne    c0001c0b <dlmallopt+0x85>
c0001bfd:	c7 05 b4 da 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002dab4,0x0
c0001c07:	eb df                	jmp    c0001be8 <dlmallopt+0x62>
c0001c09:	31 f6                	xor    esi,esi
c0001c0b:	89 f0                	mov    eax,esi
c0001c0d:	5b                   	pop    ebx
c0001c0e:	5e                   	pop    esi
c0001c0f:	c3                   	ret    

c0001c10 <disk_status>:
c0001c10:	31 c0                	xor    eax,eax
c0001c12:	c3                   	ret    

c0001c13 <disk_initialize>:
c0001c13:	31 c0                	xor    eax,eax
c0001c15:	c3                   	ret    

c0001c16 <disk_read>:
c0001c16:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c1b:	0f b6 04 85 40 12 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcedc0]
c0001c23:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c27:	e9 74 ea 01 00       	jmp    c00206a0 <fatWrapperReadDisk>

c0001c2c <disk_write>:
c0001c2c:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c31:	0f b6 04 85 40 12 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcedc0]
c0001c39:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c3d:	e9 a5 ea 01 00       	jmp    c00206e7 <fatWrapperWriteDisk>

c0001c42 <disk_ioctl>:
c0001c42:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001c47:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001c4b:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c50:	0f b6 04 85 40 12 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcedc0]
c0001c58:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c5c:	e9 cd ea 01 00       	jmp    c002072e <fatWrapperIoctl>

c0001c61 <ld_word>:
c0001c61:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c65:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c68:	c1 e2 08             	shl    edx,0x8
c0001c6b:	09 d0                	or     eax,edx
c0001c6d:	c3                   	ret    

c0001c6e <ld_dword>:
c0001c6e:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001c72:	89 d1                	mov    ecx,edx
c0001c74:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c78:	c1 e1 08             	shl    ecx,0x8
c0001c7b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c7e:	09 ca                	or     edx,ecx
c0001c80:	c1 e2 08             	shl    edx,0x8
c0001c83:	09 d0                	or     eax,edx
c0001c85:	c3                   	ret    

c0001c86 <ld_qword>:
c0001c86:	57                   	push   edi
c0001c87:	56                   	push   esi
c0001c88:	53                   	push   ebx
c0001c89:	31 db                	xor    ebx,ebx
c0001c8b:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001c8e:	89 df                	mov    edi,ebx
c0001c90:	89 ce                	mov    esi,ecx
c0001c92:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001c96:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c9a:	c1 e6 08             	shl    esi,0x8
c0001c9d:	09 f2                	or     edx,esi
c0001c9f:	89 d6                	mov    esi,edx
c0001ca1:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001ca5:	0f a4 f7 08          	shld   edi,esi,0x8
c0001ca9:	c1 e6 08             	shl    esi,0x8
c0001cac:	09 f2                	or     edx,esi
c0001cae:	89 d6                	mov    esi,edx
c0001cb0:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001cb4:	0f a4 f7 08          	shld   edi,esi,0x8
c0001cb8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001cbb:	c1 e6 08             	shl    esi,0x8
c0001cbe:	89 fb                	mov    ebx,edi
c0001cc0:	09 f2                	or     edx,esi
c0001cc2:	89 d1                	mov    ecx,edx
c0001cc4:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001cc8:	c1 e1 08             	shl    ecx,0x8
c0001ccb:	89 da                	mov    edx,ebx
c0001ccd:	09 c8                	or     eax,ecx
c0001ccf:	5b                   	pop    ebx
c0001cd0:	5e                   	pop    esi
c0001cd1:	5f                   	pop    edi
c0001cd2:	c3                   	ret    

c0001cd3 <st_word>:
c0001cd3:	66 89 10             	mov    WORD PTR [eax],dx
c0001cd6:	c3                   	ret    

c0001cd7 <st_dword>:
c0001cd7:	89 10                	mov    DWORD PTR [eax],edx
c0001cd9:	c3                   	ret    

c0001cda <st_qword>:
c0001cda:	89 10                	mov    DWORD PTR [eax],edx
c0001cdc:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001cdf:	c3                   	ret    

c0001ce0 <mem_cpy>:
c0001ce0:	85 c9                	test   ecx,ecx
c0001ce2:	74 10                	je     c0001cf4 <mem_cpy+0x14>
c0001ce4:	57                   	push   edi
c0001ce5:	01 c1                	add    ecx,eax
c0001ce7:	56                   	push   esi
c0001ce8:	89 c7                	mov    edi,eax
c0001cea:	89 d6                	mov    esi,edx
c0001cec:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001ced:	39 f9                	cmp    ecx,edi
c0001cef:	75 fb                	jne    c0001cec <mem_cpy+0xc>
c0001cf1:	5e                   	pop    esi
c0001cf2:	5f                   	pop    edi
c0001cf3:	c3                   	ret    
c0001cf4:	c3                   	ret    

c0001cf5 <mem_set>:
c0001cf5:	01 c1                	add    ecx,eax
c0001cf7:	40                   	inc    eax
c0001cf8:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001cfb:	39 c8                	cmp    eax,ecx
c0001cfd:	75 f8                	jne    c0001cf7 <mem_set+0x2>
c0001cff:	c3                   	ret    

c0001d00 <mem_cmp>:
c0001d00:	57                   	push   edi
c0001d01:	56                   	push   esi
c0001d02:	89 c6                	mov    esi,eax
c0001d04:	53                   	push   ebx
c0001d05:	46                   	inc    esi
c0001d06:	42                   	inc    edx
c0001d07:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001d0b:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001d0f:	29 fb                	sub    ebx,edi
c0001d11:	89 cf                	mov    edi,ecx
c0001d13:	29 f7                	sub    edi,esi
c0001d15:	01 c7                	add    edi,eax
c0001d17:	74 04                	je     c0001d1d <mem_cmp+0x1d>
c0001d19:	85 db                	test   ebx,ebx
c0001d1b:	74 e8                	je     c0001d05 <mem_cmp+0x5>
c0001d1d:	89 d8                	mov    eax,ebx
c0001d1f:	5b                   	pop    ebx
c0001d20:	5e                   	pop    esi
c0001d21:	5f                   	pop    edi
c0001d22:	c3                   	ret    

c0001d23 <chk_chr>:
c0001d23:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001d26:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001d29:	74 07                	je     c0001d32 <chk_chr+0xf>
c0001d2b:	39 d1                	cmp    ecx,edx
c0001d2d:	74 03                	je     c0001d32 <chk_chr+0xf>
c0001d2f:	40                   	inc    eax
c0001d30:	eb f1                	jmp    c0001d23 <chk_chr>
c0001d32:	89 c8                	mov    eax,ecx
c0001d34:	c3                   	ret    

c0001d35 <dbc_1st>:
c0001d35:	31 c0                	xor    eax,eax
c0001d37:	c3                   	ret    

c0001d38 <dbc_2nd>:
c0001d38:	31 c0                	xor    eax,eax
c0001d3a:	c3                   	ret    

c0001d3b <tchar2uni>:
c0001d3b:	57                   	push   edi
c0001d3c:	89 c7                	mov    edi,eax
c0001d3e:	56                   	push   esi
c0001d3f:	53                   	push   ebx
c0001d40:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001d42:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001d44:	8d 73 01             	lea    esi,[ebx+0x1]
c0001d47:	84 c9                	test   cl,cl
c0001d49:	78 0a                	js     c0001d55 <tchar2uni+0x1a>
c0001d4b:	0f b6 d1             	movzx  edx,cl
c0001d4e:	89 f3                	mov    ebx,esi
c0001d50:	e9 9f 00 00 00       	jmp    c0001df4 <tchar2uni+0xb9>
c0001d55:	88 ca                	mov    dl,cl
c0001d57:	83 e2 e0             	and    edx,0xffffffe0
c0001d5a:	80 fa c0             	cmp    dl,0xc0
c0001d5d:	75 0c                	jne    c0001d6b <tchar2uni+0x30>
c0001d5f:	89 ca                	mov    edx,ecx
c0001d61:	b9 01 00 00 00       	mov    ecx,0x1
c0001d66:	83 e2 1f             	and    edx,0x1f
c0001d69:	eb 2e                	jmp    c0001d99 <tchar2uni+0x5e>
c0001d6b:	88 ca                	mov    dl,cl
c0001d6d:	83 e2 f0             	and    edx,0xfffffff0
c0001d70:	80 fa e0             	cmp    dl,0xe0
c0001d73:	75 0c                	jne    c0001d81 <tchar2uni+0x46>
c0001d75:	89 ca                	mov    edx,ecx
c0001d77:	b9 02 00 00 00       	mov    ecx,0x2
c0001d7c:	83 e2 0f             	and    edx,0xf
c0001d7f:	eb 18                	jmp    c0001d99 <tchar2uni+0x5e>
c0001d81:	88 ca                	mov    dl,cl
c0001d83:	83 e2 f8             	and    edx,0xfffffff8
c0001d86:	88 d0                	mov    al,dl
c0001d88:	83 ca ff             	or     edx,0xffffffff
c0001d8b:	3c f0                	cmp    al,0xf0
c0001d8d:	75 6c                	jne    c0001dfb <tchar2uni+0xc0>
c0001d8f:	89 ca                	mov    edx,ecx
c0001d91:	b9 03 00 00 00       	mov    ecx,0x3
c0001d96:	83 e2 07             	and    edx,0x7
c0001d99:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001d9d:	46                   	inc    esi
c0001d9e:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001da1:	88 c8                	mov    al,cl
c0001da3:	83 e0 c0             	and    eax,0xffffffc0
c0001da6:	3c 80                	cmp    al,0x80
c0001da8:	75 4e                	jne    c0001df8 <tchar2uni+0xbd>
c0001daa:	c1 e2 06             	shl    edx,0x6
c0001dad:	83 e1 3f             	and    ecx,0x3f
c0001db0:	09 ca                	or     edx,ecx
c0001db2:	39 de                	cmp    esi,ebx
c0001db4:	75 e7                	jne    c0001d9d <tchar2uni+0x62>
c0001db6:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001db9:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001dbf:	77 37                	ja     c0001df8 <tchar2uni+0xbd>
c0001dc1:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001dc7:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001dcd:	76 29                	jbe    c0001df8 <tchar2uni+0xbd>
c0001dcf:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001dd5:	76 1d                	jbe    c0001df4 <tchar2uni+0xb9>
c0001dd7:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001ddd:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001de3:	c1 e1 06             	shl    ecx,0x6
c0001de6:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001dec:	09 ca                	or     edx,ecx
c0001dee:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001df4:	89 1f                	mov    DWORD PTR [edi],ebx
c0001df6:	eb 03                	jmp    c0001dfb <tchar2uni+0xc0>
c0001df8:	83 ca ff             	or     edx,0xffffffff
c0001dfb:	5b                   	pop    ebx
c0001dfc:	89 d0                	mov    eax,edx
c0001dfe:	5e                   	pop    esi
c0001dff:	5f                   	pop    edi
c0001e00:	c3                   	ret    

c0001e01 <put_utf>:
c0001e01:	53                   	push   ebx
c0001e02:	83 f8 7f             	cmp    eax,0x7f
c0001e05:	89 c3                	mov    ebx,eax
c0001e07:	b0 00                	mov    al,0x0
c0001e09:	77 11                	ja     c0001e1c <put_utf+0x1b>
c0001e0b:	85 c9                	test   ecx,ecx
c0001e0d:	0f 84 e5 00 00 00    	je     c0001ef8 <put_utf+0xf7>
c0001e13:	88 1a                	mov    BYTE PTR [edx],bl
c0001e15:	b0 01                	mov    al,0x1
c0001e17:	e9 dc 00 00 00       	jmp    c0001ef8 <put_utf+0xf7>
c0001e1c:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001e22:	77 23                	ja     c0001e47 <put_utf+0x46>
c0001e24:	83 f9 01             	cmp    ecx,0x1
c0001e27:	0f 86 cb 00 00 00    	jbe    c0001ef8 <put_utf+0xf7>
c0001e2d:	89 d8                	mov    eax,ebx
c0001e2f:	83 e3 3f             	and    ebx,0x3f
c0001e32:	c1 e8 06             	shr    eax,0x6
c0001e35:	83 cb 80             	or     ebx,0xffffff80
c0001e38:	83 c8 c0             	or     eax,0xffffffc0
c0001e3b:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001e3e:	88 02                	mov    BYTE PTR [edx],al
c0001e40:	b0 02                	mov    al,0x2
c0001e42:	e9 b1 00 00 00       	jmp    c0001ef8 <put_utf+0xf7>
c0001e47:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001e4d:	77 40                	ja     c0001e8f <put_utf+0x8e>
c0001e4f:	83 f9 02             	cmp    ecx,0x2
c0001e52:	0f 86 a0 00 00 00    	jbe    c0001ef8 <put_utf+0xf7>
c0001e58:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001e5e:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e64:	0f 86 8e 00 00 00    	jbe    c0001ef8 <put_utf+0xf7>
c0001e6a:	89 d8                	mov    eax,ebx
c0001e6c:	c1 e8 0c             	shr    eax,0xc
c0001e6f:	83 c8 e0             	or     eax,0xffffffe0
c0001e72:	88 02                	mov    BYTE PTR [edx],al
c0001e74:	89 d8                	mov    eax,ebx
c0001e76:	83 e3 3f             	and    ebx,0x3f
c0001e79:	c1 e8 06             	shr    eax,0x6
c0001e7c:	83 cb 80             	or     ebx,0xffffff80
c0001e7f:	83 e0 3f             	and    eax,0x3f
c0001e82:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001e85:	83 c8 80             	or     eax,0xffffff80
c0001e88:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001e8b:	b0 03                	mov    al,0x3
c0001e8d:	eb 69                	jmp    c0001ef8 <put_utf+0xf7>
c0001e8f:	83 f9 03             	cmp    ecx,0x3
c0001e92:	76 64                	jbe    c0001ef8 <put_utf+0xf7>
c0001e94:	89 d9                	mov    ecx,ebx
c0001e96:	0f b7 c3             	movzx  eax,bx
c0001e99:	66 31 c9             	xor    cx,cx
c0001e9c:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001ea2:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001ea8:	c1 e9 06             	shr    ecx,0x6
c0001eab:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001eb1:	77 43                	ja     c0001ef6 <put_utf+0xf5>
c0001eb3:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001eb9:	77 3b                	ja     c0001ef6 <put_utf+0xf5>
c0001ebb:	09 cb                	or     ebx,ecx
c0001ebd:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001ec3:	89 d8                	mov    eax,ebx
c0001ec5:	c1 e8 12             	shr    eax,0x12
c0001ec8:	83 c8 f0             	or     eax,0xfffffff0
c0001ecb:	88 02                	mov    BYTE PTR [edx],al
c0001ecd:	89 d8                	mov    eax,ebx
c0001ecf:	c1 e8 0c             	shr    eax,0xc
c0001ed2:	83 e0 3f             	and    eax,0x3f
c0001ed5:	83 c8 80             	or     eax,0xffffff80
c0001ed8:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001edb:	89 d8                	mov    eax,ebx
c0001edd:	83 e3 3f             	and    ebx,0x3f
c0001ee0:	c1 e8 06             	shr    eax,0x6
c0001ee3:	83 cb 80             	or     ebx,0xffffff80
c0001ee6:	83 e0 3f             	and    eax,0x3f
c0001ee9:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001eec:	83 c8 80             	or     eax,0xffffff80
c0001eef:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001ef2:	b0 04                	mov    al,0x4
c0001ef4:	eb 02                	jmp    c0001ef8 <put_utf+0xf7>
c0001ef6:	31 c0                	xor    eax,eax
c0001ef8:	5b                   	pop    ebx
c0001ef9:	c3                   	ret    

c0001efa <clst2sect>:
c0001efa:	89 c1                	mov    ecx,eax
c0001efc:	83 ea 02             	sub    edx,0x2
c0001eff:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001f02:	83 e8 02             	sub    eax,0x2
c0001f05:	39 d0                	cmp    eax,edx
c0001f07:	76 0d                	jbe    c0001f16 <clst2sect+0x1c>
c0001f09:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001f0d:	f7 e2                	mul    edx
c0001f0f:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001f12:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001f15:	c3                   	ret    
c0001f16:	31 c0                	xor    eax,eax
c0001f18:	31 d2                	xor    edx,edx
c0001f1a:	c3                   	ret    

c0001f1b <clmt_clust>:
c0001f1b:	57                   	push   edi
c0001f1c:	89 cf                	mov    edi,ecx
c0001f1e:	56                   	push   esi
c0001f1f:	89 d6                	mov    esi,edx
c0001f21:	53                   	push   ebx
c0001f22:	0f ac fe 09          	shrd   esi,edi,0x9
c0001f26:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001f29:	89 f2                	mov    edx,esi
c0001f2b:	8b 00                	mov    eax,DWORD PTR [eax]
c0001f2d:	c1 ef 09             	shr    edi,0x9
c0001f30:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001f34:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001f37:	89 f9                	mov    ecx,edi
c0001f39:	31 ff                	xor    edi,edi
c0001f3b:	57                   	push   edi
c0001f3c:	56                   	push   esi
c0001f3d:	51                   	push   ecx
c0001f3e:	52                   	push   edx
c0001f3f:	e8 58 43 02 00       	call   c002629c <__udivdi3>
c0001f44:	83 c4 10             	add    esp,0x10
c0001f47:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001f49:	85 d2                	test   edx,edx
c0001f4b:	74 10                	je     c0001f5d <clmt_clust+0x42>
c0001f4d:	39 d0                	cmp    eax,edx
c0001f4f:	72 07                	jb     c0001f58 <clmt_clust+0x3d>
c0001f51:	29 d0                	sub    eax,edx
c0001f53:	83 c3 08             	add    ebx,0x8
c0001f56:	eb ef                	jmp    c0001f47 <clmt_clust+0x2c>
c0001f58:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001f5b:	89 c2                	mov    edx,eax
c0001f5d:	5b                   	pop    ebx
c0001f5e:	89 d0                	mov    eax,edx
c0001f60:	5e                   	pop    esi
c0001f61:	5f                   	pop    edi
c0001f62:	c3                   	ret    

c0001f63 <pick_lfn>:
c0001f63:	55                   	push   ebp
c0001f64:	57                   	push   edi
c0001f65:	56                   	push   esi
c0001f66:	89 d6                	mov    esi,edx
c0001f68:	53                   	push   ebx
c0001f69:	89 c3                	mov    ebx,eax
c0001f6b:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001f6e:	e8 ee fc ff ff       	call   c0001c61 <ld_word>
c0001f73:	66 85 c0             	test   ax,ax
c0001f76:	74 04                	je     c0001f7c <pick_lfn+0x19>
c0001f78:	31 c0                	xor    eax,eax
c0001f7a:	eb 5c                	jmp    c0001fd8 <pick_lfn+0x75>
c0001f7c:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001f7f:	bd 01 00 00 00       	mov    ebp,0x1
c0001f84:	83 e1 bf             	and    ecx,0xffffffbf
c0001f87:	31 ff                	xor    edi,edi
c0001f89:	49                   	dec    ecx
c0001f8a:	6b c9 0d             	imul   ecx,ecx,0xd
c0001f8d:	0f b6 87 20 8d 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffd72e0]
c0001f94:	01 f0                	add    eax,esi
c0001f96:	e8 c6 fc ff ff       	call   c0001c61 <ld_word>
c0001f9b:	66 85 ed             	test   bp,bp
c0001f9e:	74 11                	je     c0001fb1 <pick_lfn+0x4e>
c0001fa0:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fa6:	77 d0                	ja     c0001f78 <pick_lfn+0x15>
c0001fa8:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001fac:	89 c5                	mov    ebp,eax
c0001fae:	41                   	inc    ecx
c0001faf:	eb 04                	jmp    c0001fb5 <pick_lfn+0x52>
c0001fb1:	66 40                	inc    ax
c0001fb3:	75 c3                	jne    c0001f78 <pick_lfn+0x15>
c0001fb5:	47                   	inc    edi
c0001fb6:	83 ff 0d             	cmp    edi,0xd
c0001fb9:	75 d2                	jne    c0001f8d <pick_lfn+0x2a>
c0001fbb:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001fbe:	74 13                	je     c0001fd3 <pick_lfn+0x70>
c0001fc0:	66 85 ed             	test   bp,bp
c0001fc3:	74 0e                	je     c0001fd3 <pick_lfn+0x70>
c0001fc5:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fcb:	77 ab                	ja     c0001f78 <pick_lfn+0x15>
c0001fcd:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001fd3:	b8 01 00 00 00       	mov    eax,0x1
c0001fd8:	5b                   	pop    ebx
c0001fd9:	5e                   	pop    esi
c0001fda:	5f                   	pop    edi
c0001fdb:	5d                   	pop    ebp
c0001fdc:	c3                   	ret    

c0001fdd <put_lfn>:
c0001fdd:	55                   	push   ebp
c0001fde:	31 ed                	xor    ebp,ebp
c0001fe0:	57                   	push   edi
c0001fe1:	89 d7                	mov    edi,edx
c0001fe3:	56                   	push   esi
c0001fe4:	31 f6                	xor    esi,esi
c0001fe6:	53                   	push   ebx
c0001fe7:	83 ec 08             	sub    esp,0x8
c0001fea:	89 04 24             	mov    DWORD PTR [esp],eax
c0001fed:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001ff1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001ff5:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001ffb:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001ffe:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002001:	31 d2                	xor    edx,edx
c0002003:	e8 cb fc ff ff       	call   c0001cd3 <st_word>
c0002008:	0f b6 d9             	movzx  ebx,cl
c000200b:	4b                   	dec    ebx
c000200c:	6b db 0d             	imul   ebx,ebx,0xd
c000200f:	66 83 fe ff          	cmp    si,0xffff
c0002013:	74 08                	je     c000201d <put_lfn+0x40>
c0002015:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002018:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c000201c:	43                   	inc    ebx
c000201d:	0f b6 85 20 8d 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffd72e0]
c0002024:	0f b7 d6             	movzx  edx,si
c0002027:	01 f8                	add    eax,edi
c0002029:	e8 a5 fc ff ff       	call   c0001cd3 <st_word>
c000202e:	66 85 f6             	test   si,si
c0002031:	75 03                	jne    c0002036 <put_lfn+0x59>
c0002033:	83 ce ff             	or     esi,0xffffffff
c0002036:	45                   	inc    ebp
c0002037:	83 fd 0d             	cmp    ebp,0xd
c000203a:	75 d3                	jne    c000200f <put_lfn+0x32>
c000203c:	66 46                	inc    si
c000203e:	74 0a                	je     c000204a <put_lfn+0x6d>
c0002040:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002043:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002048:	75 09                	jne    c0002053 <put_lfn+0x76>
c000204a:	88 c8                	mov    al,cl
c000204c:	83 c8 40             	or     eax,0x40
c000204f:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0002053:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0002057:	88 07                	mov    BYTE PTR [edi],al
c0002059:	83 c4 08             	add    esp,0x8
c000205c:	5b                   	pop    ebx
c000205d:	5e                   	pop    esi
c000205e:	5f                   	pop    edi
c000205f:	5d                   	pop    ebp
c0002060:	c3                   	ret    

c0002061 <gen_numname>:
c0002061:	57                   	push   edi
c0002062:	89 cf                	mov    edi,ecx
c0002064:	56                   	push   esi
c0002065:	b9 0b 00 00 00       	mov    ecx,0xb
c000206a:	53                   	push   ebx
c000206b:	89 c6                	mov    esi,eax
c000206d:	83 ec 10             	sub    esp,0x10
c0002070:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002074:	e8 67 fc ff ff       	call   c0001ce0 <mem_cpy>
c0002079:	83 fb 05             	cmp    ebx,0x5
c000207c:	76 2d                	jbe    c00020ab <gen_numname+0x4a>
c000207e:	66 8b 07             	mov    ax,WORD PTR [edi]
c0002081:	66 85 c0             	test   ax,ax
c0002084:	74 25                	je     c00020ab <gen_numname+0x4a>
c0002086:	83 c7 02             	add    edi,0x2
c0002089:	ba 10 00 00 00       	mov    edx,0x10
c000208e:	01 db                	add    ebx,ebx
c0002090:	89 c1                	mov    ecx,eax
c0002092:	66 d1 e8             	shr    ax,1
c0002095:	83 e1 01             	and    ecx,0x1
c0002098:	01 cb                	add    ebx,ecx
c000209a:	0f ba e3 10          	bt     ebx,0x10
c000209e:	73 06                	jae    c00020a6 <gen_numname+0x45>
c00020a0:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00020a6:	4a                   	dec    edx
c00020a7:	75 e5                	jne    c000208e <gen_numname+0x2d>
c00020a9:	eb d3                	jmp    c000207e <gen_numname+0x1d>
c00020ab:	b8 07 00 00 00       	mov    eax,0x7
c00020b0:	88 d9                	mov    cl,bl
c00020b2:	83 e1 0f             	and    ecx,0xf
c00020b5:	8d 51 30             	lea    edx,[ecx+0x30]
c00020b8:	80 fa 39             	cmp    dl,0x39
c00020bb:	76 03                	jbe    c00020c0 <gen_numname+0x5f>
c00020bd:	8d 51 37             	lea    edx,[ecx+0x37]
c00020c0:	8d 48 ff             	lea    ecx,[eax-0x1]
c00020c3:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00020c7:	89 da                	mov    edx,ebx
c00020c9:	c1 ea 04             	shr    edx,0x4
c00020cc:	83 fb 0f             	cmp    ebx,0xf
c00020cf:	76 06                	jbe    c00020d7 <gen_numname+0x76>
c00020d1:	89 c8                	mov    eax,ecx
c00020d3:	89 d3                	mov    ebx,edx
c00020d5:	eb d9                	jmp    c00020b0 <gen_numname+0x4f>
c00020d7:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00020dc:	31 d2                	xor    edx,edx
c00020de:	8d 58 fe             	lea    ebx,[eax-0x2]
c00020e1:	8d 04 16             	lea    eax,[esi+edx*1]
c00020e4:	39 ca                	cmp    edx,ecx
c00020e6:	73 18                	jae    c0002100 <gen_numname+0x9f>
c00020e8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00020eb:	3c 20                	cmp    al,0x20
c00020ed:	74 11                	je     c0002100 <gen_numname+0x9f>
c00020ef:	e8 41 fc ff ff       	call   c0001d35 <dbc_1st>
c00020f4:	85 c0                	test   eax,eax
c00020f6:	74 05                	je     c00020fd <gen_numname+0x9c>
c00020f8:	39 d3                	cmp    ebx,edx
c00020fa:	74 04                	je     c0002100 <gen_numname+0x9f>
c00020fc:	42                   	inc    edx
c00020fd:	42                   	inc    edx
c00020fe:	eb e1                	jmp    c00020e1 <gen_numname+0x80>
c0002100:	b0 20                	mov    al,0x20
c0002102:	83 f9 07             	cmp    ecx,0x7
c0002105:	77 05                	ja     c000210c <gen_numname+0xab>
c0002107:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c000210b:	41                   	inc    ecx
c000210c:	42                   	inc    edx
c000210d:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002111:	83 fa 07             	cmp    edx,0x7
c0002114:	76 ea                	jbe    c0002100 <gen_numname+0x9f>
c0002116:	83 c4 10             	add    esp,0x10
c0002119:	5b                   	pop    ebx
c000211a:	5e                   	pop    esi
c000211b:	5f                   	pop    edi
c000211c:	c3                   	ret    

c000211d <sum_sfn>:
c000211d:	31 c9                	xor    ecx,ecx
c000211f:	31 d2                	xor    edx,edx
c0002121:	d0 ca                	ror    dl,1
c0002123:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0002126:	41                   	inc    ecx
c0002127:	83 f9 0b             	cmp    ecx,0xb
c000212a:	75 f5                	jne    c0002121 <sum_sfn+0x4>
c000212c:	88 d0                	mov    al,dl
c000212e:	c3                   	ret    

c000212f <xdir_sum>:
c000212f:	56                   	push   esi
c0002130:	31 c9                	xor    ecx,ecx
c0002132:	53                   	push   ebx
c0002133:	31 d2                	xor    edx,edx
c0002135:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0002139:	43                   	inc    ebx
c000213a:	c1 e3 05             	shl    ebx,0x5
c000213d:	83 fa 02             	cmp    edx,0x2
c0002140:	74 0b                	je     c000214d <xdir_sum+0x1e>
c0002142:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0002146:	66 d1 c9             	ror    cx,1
c0002149:	01 f1                	add    ecx,esi
c000214b:	eb 05                	jmp    c0002152 <xdir_sum+0x23>
c000214d:	ba 03 00 00 00       	mov    edx,0x3
c0002152:	42                   	inc    edx
c0002153:	39 d3                	cmp    ebx,edx
c0002155:	77 e6                	ja     c000213d <xdir_sum+0xe>
c0002157:	89 c8                	mov    eax,ecx
c0002159:	5b                   	pop    ebx
c000215a:	5e                   	pop    esi
c000215b:	c3                   	ret    

c000215c <xsum32>:
c000215c:	d1 ca                	ror    edx,1
c000215e:	0f b6 c0             	movzx  eax,al
c0002161:	01 d0                	add    eax,edx
c0002163:	c3                   	ret    

c0002164 <get_xfileinfo>:
c0002164:	55                   	push   ebp
c0002165:	31 c9                	xor    ecx,ecx
c0002167:	57                   	push   edi
c0002168:	bd 40 00 00 00       	mov    ebp,0x40
c000216d:	56                   	push   esi
c000216e:	31 ff                	xor    edi,edi
c0002170:	53                   	push   ebx
c0002171:	89 c6                	mov    esi,eax
c0002173:	83 ec 0c             	sub    esp,0xc
c0002176:	89 d3                	mov    ebx,edx
c0002178:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000217f:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0002183:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0002186:	76 6d                	jbe    c00021f5 <get_xfileinfo+0x91>
c0002188:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c000218e:	76 0b                	jbe    c000219b <get_xfileinfo+0x37>
c0002190:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0002194:	bf 01 00 00 00       	mov    edi,0x1
c0002199:	eb 63                	jmp    c00021fe <get_xfileinfo+0x9a>
c000219b:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c00021a1:	75 03                	jne    c00021a6 <get_xfileinfo+0x42>
c00021a3:	83 c5 02             	add    ebp,0x2
c00021a6:	8d 04 2e             	lea    eax,[esi+ebp*1]
c00021a9:	83 c5 02             	add    ebp,0x2
c00021ac:	e8 b0 fa ff ff       	call   c0001c61 <ld_word>
c00021b1:	ff 04 24             	inc    DWORD PTR [esp]
c00021b4:	66 85 c9             	test   cx,cx
c00021b7:	75 0d                	jne    c00021c6 <get_xfileinfo+0x62>
c00021b9:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c00021bf:	66 81 fa ff 07       	cmp    dx,0x7ff
c00021c4:	76 2b                	jbe    c00021f1 <get_xfileinfo+0x8d>
c00021c6:	c1 e1 10             	shl    ecx,0x10
c00021c9:	ba ff 00 00 00       	mov    edx,0xff
c00021ce:	0f b7 c0             	movzx  eax,ax
c00021d1:	29 fa                	sub    edx,edi
c00021d3:	09 c8                	or     eax,ecx
c00021d5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00021d9:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c00021dd:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00021e1:	e8 1b fc ff ff       	call   c0001e01 <put_utf>
c00021e6:	84 c0                	test   al,al
c00021e8:	74 a6                	je     c0002190 <get_xfileinfo+0x2c>
c00021ea:	0f b6 c0             	movzx  eax,al
c00021ed:	01 c7                	add    edi,eax
c00021ef:	31 c0                	xor    eax,eax
c00021f1:	89 c1                	mov    ecx,eax
c00021f3:	eb 8a                	jmp    c000217f <get_xfileinfo+0x1b>
c00021f5:	85 ff                	test   edi,edi
c00021f7:	74 97                	je     c0002190 <get_xfileinfo+0x2c>
c00021f9:	66 85 c9             	test   cx,cx
c00021fc:	75 92                	jne    c0002190 <get_xfileinfo+0x2c>
c00021fe:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0002203:	31 c0                	xor    eax,eax
c0002205:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0002209:	31 d2                	xor    edx,edx
c000220b:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c000220e:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c0002211:	80 e1 10             	and    cl,0x10
c0002214:	75 08                	jne    c000221e <get_xfileinfo+0xba>
c0002216:	8d 46 38             	lea    eax,[esi+0x38]
c0002219:	e8 68 fa ff ff       	call   c0001c86 <ld_qword>
c000221e:	89 03                	mov    DWORD PTR [ebx],eax
c0002220:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0002223:	8d 46 0c             	lea    eax,[esi+0xc]
c0002226:	e8 36 fa ff ff       	call   c0001c61 <ld_word>
c000222b:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c000222f:	8d 46 0e             	lea    eax,[esi+0xe]
c0002232:	e8 2a fa ff ff       	call   c0001c61 <ld_word>
c0002237:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c000223b:	83 c4 0c             	add    esp,0xc
c000223e:	5b                   	pop    ebx
c000223f:	5e                   	pop    esi
c0002240:	5f                   	pop    edi
c0002241:	5d                   	pop    ebp
c0002242:	c3                   	ret    

c0002243 <get_ldnumber>:
c0002243:	8b 10                	mov    edx,DWORD PTR [eax]
c0002245:	85 d2                	test   edx,edx
c0002247:	74 14                	je     c000225d <get_ldnumber+0x1a>
c0002249:	56                   	push   esi
c000224a:	53                   	push   ebx
c000224b:	89 d3                	mov    ebx,edx
c000224d:	43                   	inc    ebx
c000224e:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002251:	80 f9 1f             	cmp    cl,0x1f
c0002254:	76 0d                	jbe    c0002263 <get_ldnumber+0x20>
c0002256:	80 f9 3a             	cmp    cl,0x3a
c0002259:	75 f2                	jne    c000224d <get_ldnumber+0xa>
c000225b:	eb 0a                	jmp    c0002267 <get_ldnumber+0x24>
c000225d:	83 c9 ff             	or     ecx,0xffffffff
c0002260:	89 c8                	mov    eax,ecx
c0002262:	c3                   	ret    
c0002263:	31 c9                	xor    ecx,ecx
c0002265:	eb 24                	jmp    c000228b <get_ldnumber+0x48>
c0002267:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c000226a:	8d 4e d0             	lea    ecx,[esi-0x30]
c000226d:	80 f9 09             	cmp    cl,0x9
c0002270:	77 16                	ja     c0002288 <get_ldnumber+0x45>
c0002272:	83 c2 02             	add    edx,0x2
c0002275:	83 c9 ff             	or     ecx,0xffffffff
c0002278:	39 d3                	cmp    ebx,edx
c000227a:	75 0f                	jne    c000228b <get_ldnumber+0x48>
c000227c:	89 f2                	mov    edx,esi
c000227e:	89 18                	mov    DWORD PTR [eax],ebx
c0002280:	0f be ca             	movsx  ecx,dl
c0002283:	83 e9 30             	sub    ecx,0x30
c0002286:	eb 03                	jmp    c000228b <get_ldnumber+0x48>
c0002288:	83 c9 ff             	or     ecx,0xffffffff
c000228b:	89 c8                	mov    eax,ecx
c000228d:	5b                   	pop    ebx
c000228e:	5e                   	pop    esi
c000228f:	c3                   	ret    

c0002290 <crc32>:
c0002290:	56                   	push   esi
c0002291:	89 d6                	mov    esi,edx
c0002293:	53                   	push   ebx
c0002294:	b2 01                	mov    dl,0x1
c0002296:	bb 08 00 00 00       	mov    ebx,0x8
c000229b:	89 f1                	mov    ecx,esi
c000229d:	84 d1                	test   cl,dl
c000229f:	0f 95 c1             	setne  cl
c00022a2:	0f b6 c9             	movzx  ecx,cl
c00022a5:	31 c1                	xor    ecx,eax
c00022a7:	89 c8                	mov    eax,ecx
c00022a9:	d1 e8                	shr    eax,1
c00022ab:	80 e1 01             	and    cl,0x1
c00022ae:	74 05                	je     c00022b5 <crc32+0x25>
c00022b0:	35 20 83 b8 ed       	xor    eax,0xedb88320
c00022b5:	d1 e2                	shl    edx,1
c00022b7:	4b                   	dec    ebx
c00022b8:	75 e1                	jne    c000229b <crc32+0xb>
c00022ba:	5b                   	pop    ebx
c00022bb:	5e                   	pop    esi
c00022bc:	c3                   	ret    

c00022bd <test_gpt_header>:
c00022bd:	55                   	push   ebp
c00022be:	b9 10 00 00 00       	mov    ecx,0x10
c00022c3:	57                   	push   edi
c00022c4:	ba 20 8c 02 c0       	mov    edx,0xc0028c20
c00022c9:	56                   	push   esi
c00022ca:	31 ff                	xor    edi,edi
c00022cc:	53                   	push   ebx
c00022cd:	89 c3                	mov    ebx,eax
c00022cf:	e8 2c fa ff ff       	call   c0001d00 <mem_cmp>
c00022d4:	85 c0                	test   eax,eax
c00022d6:	75 55                	jne    c000232d <test_gpt_header+0x70>
c00022d8:	89 c7                	mov    edi,eax
c00022da:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00022df:	83 ce ff             	or     esi,0xffffffff
c00022e2:	31 d2                	xor    edx,edx
c00022e4:	83 fd 03             	cmp    ebp,0x3
c00022e7:	76 05                	jbe    c00022ee <test_gpt_header+0x31>
c00022e9:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00022ee:	89 f0                	mov    eax,esi
c00022f0:	45                   	inc    ebp
c00022f1:	e8 9a ff ff ff       	call   c0002290 <crc32>
c00022f6:	83 fd 4c             	cmp    ebp,0x4c
c00022f9:	89 c6                	mov    esi,eax
c00022fb:	75 e5                	jne    c00022e2 <test_gpt_header+0x25>
c00022fd:	8d 43 10             	lea    eax,[ebx+0x10]
c0002300:	f7 d6                	not    esi
c0002302:	e8 67 f9 ff ff       	call   c0001c6e <ld_dword>
c0002307:	39 c6                	cmp    esi,eax
c0002309:	75 22                	jne    c000232d <test_gpt_header+0x70>
c000230b:	8d 43 54             	lea    eax,[ebx+0x54]
c000230e:	e8 5b f9 ff ff       	call   c0001c6e <ld_dword>
c0002313:	83 c0 80             	add    eax,0xffffff80
c0002316:	75 15                	jne    c000232d <test_gpt_header+0x70>
c0002318:	8d 43 50             	lea    eax,[ebx+0x50]
c000231b:	e8 4e f9 ff ff       	call   c0001c6e <ld_dword>
c0002320:	3d 80 00 00 00       	cmp    eax,0x80
c0002325:	0f 96 c0             	setbe  al
c0002328:	0f b6 c0             	movzx  eax,al
c000232b:	89 c7                	mov    edi,eax
c000232d:	5b                   	pop    ebx
c000232e:	89 f8                	mov    eax,edi
c0002330:	5e                   	pop    esi
c0002331:	5f                   	pop    edi
c0002332:	5d                   	pop    ebp
c0002333:	c3                   	ret    

c0002334 <make_rand>:
c0002334:	56                   	push   esi
c0002335:	85 c0                	test   eax,eax
c0002337:	53                   	push   ebx
c0002338:	75 05                	jne    c000233f <make_rand+0xb>
c000233a:	b8 01 00 00 00       	mov    eax,0x1
c000233f:	01 d1                	add    ecx,edx
c0002341:	bb 08 00 00 00       	mov    ebx,0x8
c0002346:	89 c6                	mov    esi,eax
c0002348:	d1 e8                	shr    eax,1
c000234a:	83 e6 01             	and    esi,0x1
c000234d:	85 f6                	test   esi,esi
c000234f:	74 05                	je     c0002356 <make_rand+0x22>
c0002351:	35 00 00 00 a3       	xor    eax,0xa3000000
c0002356:	4b                   	dec    ebx
c0002357:	75 ed                	jne    c0002346 <make_rand+0x12>
c0002359:	42                   	inc    edx
c000235a:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c000235d:	39 ca                	cmp    edx,ecx
c000235f:	75 e0                	jne    c0002341 <make_rand+0xd>
c0002361:	5b                   	pop    ebx
c0002362:	5e                   	pop    esi
c0002363:	c3                   	ret    

c0002364 <validate>:
c0002364:	56                   	push   esi
c0002365:	53                   	push   ebx
c0002366:	89 d6                	mov    esi,edx
c0002368:	51                   	push   ecx
c0002369:	85 c0                	test   eax,eax
c000236b:	75 09                	jne    c0002376 <validate+0x12>
c000236d:	b8 09 00 00 00       	mov    eax,0x9
c0002372:	31 c9                	xor    ecx,ecx
c0002374:	eb 2f                	jmp    c00023a5 <validate+0x41>
c0002376:	89 c3                	mov    ebx,eax
c0002378:	8b 00                	mov    eax,DWORD PTR [eax]
c000237a:	85 c0                	test   eax,eax
c000237c:	74 ef                	je     c000236d <validate+0x9>
c000237e:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0002381:	74 ea                	je     c000236d <validate+0x9>
c0002383:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0002387:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c000238b:	75 e0                	jne    c000236d <validate+0x9>
c000238d:	83 ec 0c             	sub    esp,0xc
c0002390:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002394:	50                   	push   eax
c0002395:	e8 76 f8 ff ff       	call   c0001c10 <disk_status>
c000239a:	83 c4 10             	add    esp,0x10
c000239d:	a8 01                	test   al,0x1
c000239f:	75 cc                	jne    c000236d <validate+0x9>
c00023a1:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00023a3:	31 c0                	xor    eax,eax
c00023a5:	89 0e                	mov    DWORD PTR [esi],ecx
c00023a7:	5a                   	pop    edx
c00023a8:	5b                   	pop    ebx
c00023a9:	5e                   	pop    esi
c00023aa:	c3                   	ret    

c00023ab <sync_window>:
c00023ab:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00023af:	0f 84 85 00 00 00    	je     c000243a <sync_window+0x8f>
c00023b5:	55                   	push   ebp
c00023b6:	8d 68 54             	lea    ebp,[eax+0x54]
c00023b9:	57                   	push   edi
c00023ba:	56                   	push   esi
c00023bb:	53                   	push   ebx
c00023bc:	89 c3                	mov    ebx,eax
c00023be:	83 ec 28             	sub    esp,0x28
c00023c1:	6a 01                	push   0x1
c00023c3:	ff 70 50             	push   DWORD PTR [eax+0x50]
c00023c6:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c00023c9:	55                   	push   ebp
c00023ca:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00023ce:	50                   	push   eax
c00023cf:	e8 58 f8 ff ff       	call   c0001c2c <disk_write>
c00023d4:	83 c4 20             	add    esp,0x20
c00023d7:	ba 01 00 00 00       	mov    edx,0x1
c00023dc:	85 c0                	test   eax,eax
c00023de:	75 50                	jne    c0002430 <sync_window+0x85>
c00023e0:	31 ff                	xor    edi,edi
c00023e2:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00023e5:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00023e9:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00023ed:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00023f0:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00023f3:	89 c6                	mov    esi,eax
c00023f5:	89 d7                	mov    edi,edx
c00023f7:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00023fa:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00023fe:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c0002401:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0002405:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0002409:	73 23                	jae    c000242e <sync_window+0x83>
c000240b:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c000240f:	75 1d                	jne    c000242e <sync_window+0x83>
c0002411:	83 ec 0c             	sub    esp,0xc
c0002414:	6a 01                	push   0x1
c0002416:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000241a:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000241e:	52                   	push   edx
c000241f:	50                   	push   eax
c0002420:	55                   	push   ebp
c0002421:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002425:	50                   	push   eax
c0002426:	e8 01 f8 ff ff       	call   c0001c2c <disk_write>
c000242b:	83 c4 20             	add    esp,0x20
c000242e:	31 d2                	xor    edx,edx
c0002430:	83 c4 1c             	add    esp,0x1c
c0002433:	89 d0                	mov    eax,edx
c0002435:	5b                   	pop    ebx
c0002436:	5e                   	pop    esi
c0002437:	5f                   	pop    edi
c0002438:	5d                   	pop    ebp
c0002439:	c3                   	ret    
c000243a:	31 d2                	xor    edx,edx
c000243c:	89 d0                	mov    eax,edx
c000243e:	c3                   	ret    

c000243f <move_window>:
c000243f:	56                   	push   esi
c0002440:	53                   	push   ebx
c0002441:	89 c3                	mov    ebx,eax
c0002443:	83 ec 14             	sub    esp,0x14
c0002446:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c0002449:	75 07                	jne    c0002452 <move_window+0x13>
c000244b:	31 f6                	xor    esi,esi
c000244d:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c0002450:	74 59                	je     c00024ab <move_window+0x6c>
c0002452:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002456:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000245a:	89 d8                	mov    eax,ebx
c000245c:	e8 4a ff ff ff       	call   c00023ab <sync_window>
c0002461:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002465:	89 c6                	mov    esi,eax
c0002467:	85 c0                	test   eax,eax
c0002469:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000246d:	75 3c                	jne    c00024ab <move_window+0x6c>
c000246f:	83 ec 0c             	sub    esp,0xc
c0002472:	8d 43 54             	lea    eax,[ebx+0x54]
c0002475:	6a 01                	push   0x1
c0002477:	51                   	push   ecx
c0002478:	52                   	push   edx
c0002479:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000247d:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0002481:	50                   	push   eax
c0002482:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002486:	50                   	push   eax
c0002487:	e8 8a f7 ff ff       	call   c0001c16 <disk_read>
c000248c:	83 c4 20             	add    esp,0x20
c000248f:	85 c0                	test   eax,eax
c0002491:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002495:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002499:	74 0a                	je     c00024a5 <move_window+0x66>
c000249b:	83 ca ff             	or     edx,0xffffffff
c000249e:	be 01 00 00 00       	mov    esi,0x1
c00024a3:	89 d1                	mov    ecx,edx
c00024a5:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c00024a8:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c00024ab:	89 f0                	mov    eax,esi
c00024ad:	83 c4 14             	add    esp,0x14
c00024b0:	5b                   	pop    ebx
c00024b1:	5e                   	pop    esi
c00024b2:	c3                   	ret    

c00024b3 <check_fs>:
c00024b3:	53                   	push   ebx
c00024b4:	89 c3                	mov    ebx,eax
c00024b6:	83 ec 08             	sub    esp,0x8
c00024b9:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00024bd:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c00024c4:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c00024cb:	e8 6f ff ff ff       	call   c000243f <move_window>
c00024d0:	ba 04 00 00 00       	mov    edx,0x4
c00024d5:	85 c0                	test   eax,eax
c00024d7:	0f 85 89 00 00 00    	jne    c0002566 <check_fs+0xb3>
c00024dd:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00024e3:	e8 79 f7 ff ff       	call   c0001c61 <ld_word>
c00024e8:	ba 03 00 00 00       	mov    edx,0x3
c00024ed:	66 3d 55 aa          	cmp    ax,0xaa55
c00024f1:	75 73                	jne    c0002566 <check_fs+0xb3>
c00024f3:	ba 40 8d 02 c0       	mov    edx,0xc0028d40
c00024f8:	8d 43 54             	lea    eax,[ebx+0x54]
c00024fb:	b9 0b 00 00 00       	mov    ecx,0xb
c0002500:	e8 fb f7 ff ff       	call   c0001d00 <mem_cmp>
c0002505:	ba 01 00 00 00       	mov    edx,0x1
c000250a:	85 c0                	test   eax,eax
c000250c:	74 58                	je     c0002566 <check_fs+0xb3>
c000250e:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c0002511:	8d 50 18             	lea    edx,[eax+0x18]
c0002514:	80 fa 01             	cmp    dl,0x1
c0002517:	76 09                	jbe    c0002522 <check_fs+0x6f>
c0002519:	ba 02 00 00 00       	mov    edx,0x2
c000251e:	3c eb                	cmp    al,0xeb
c0002520:	75 44                	jne    c0002566 <check_fs+0xb3>
c0002522:	ba 74 bf 02 c0       	mov    edx,0xc002bf74
c0002527:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c000252d:	b9 03 00 00 00       	mov    ecx,0x3
c0002532:	e8 c9 f7 ff ff       	call   c0001d00 <mem_cmp>
c0002537:	31 d2                	xor    edx,edx
c0002539:	85 c0                	test   eax,eax
c000253b:	74 29                	je     c0002566 <check_fs+0xb3>
c000253d:	ba 4c 8d 02 c0       	mov    edx,0xc0028d4c
c0002542:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c0002548:	b9 05 00 00 00       	mov    ecx,0x5
c000254d:	e8 ae f7 ff ff       	call   c0001d00 <mem_cmp>
c0002552:	31 d2                	xor    edx,edx
c0002554:	85 c0                	test   eax,eax
c0002556:	74 0e                	je     c0002566 <check_fs+0xb3>
c0002558:	31 d2                	xor    edx,edx
c000255a:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c0002561:	0f 95 c2             	setne  dl
c0002564:	01 d2                	add    edx,edx
c0002566:	89 d0                	mov    eax,edx
c0002568:	83 c4 08             	add    esp,0x8
c000256b:	5b                   	pop    ebx
c000256c:	c3                   	ret    

c000256d <find_volume>:
c000256d:	55                   	push   ebp
c000256e:	31 c9                	xor    ecx,ecx
c0002570:	57                   	push   edi
c0002571:	56                   	push   esi
c0002572:	89 d6                	mov    esi,edx
c0002574:	53                   	push   ebx
c0002575:	31 d2                	xor    edx,edx
c0002577:	83 ec 3c             	sub    esp,0x3c
c000257a:	89 c3                	mov    ebx,eax
c000257c:	e8 32 ff ff ff       	call   c00024b3 <check_fs>
c0002581:	83 f8 02             	cmp    eax,0x2
c0002584:	74 0e                	je     c0002594 <find_volume+0x27>
c0002586:	0f 87 5d 01 00 00    	ja     c00026e9 <find_volume+0x17c>
c000258c:	85 f6                	test   esi,esi
c000258e:	0f 84 55 01 00 00    	je     c00026e9 <find_volume+0x17c>
c0002594:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c000259b:	0f 85 dd 00 00 00    	jne    c000267e <find_volume+0x111>
c00025a1:	31 c9                	xor    ecx,ecx
c00025a3:	ba 01 00 00 00       	mov    edx,0x1
c00025a8:	89 d8                	mov    eax,ebx
c00025aa:	e8 90 fe ff ff       	call   c000243f <move_window>
c00025af:	85 c0                	test   eax,eax
c00025b1:	74 0a                	je     c00025bd <find_volume+0x50>
c00025b3:	b8 04 00 00 00       	mov    eax,0x4
c00025b8:	e9 2c 01 00 00       	jmp    c00026e9 <find_volume+0x17c>
c00025bd:	8d 6b 54             	lea    ebp,[ebx+0x54]
c00025c0:	89 e8                	mov    eax,ebp
c00025c2:	e8 f6 fc ff ff       	call   c00022bd <test_gpt_header>
c00025c7:	85 c0                	test   eax,eax
c00025c9:	75 0a                	jne    c00025d5 <find_volume+0x68>
c00025cb:	b8 03 00 00 00       	mov    eax,0x3
c00025d0:	e9 14 01 00 00       	jmp    c00026e9 <find_volume+0x17c>
c00025d5:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00025db:	e8 8e f6 ff ff       	call   c0001c6e <ld_dword>
c00025e0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00025e4:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00025ea:	e8 97 f6 ff ff       	call   c0001c86 <ld_qword>
c00025ef:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00025f7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00025fb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00025ff:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002607:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000260b:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c000260f:	74 ba                	je     c00025cb <find_volume+0x5e>
c0002611:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0002615:	31 c9                	xor    ecx,ecx
c0002617:	c1 e7 07             	shl    edi,0x7
c000261a:	89 d8                	mov    eax,ebx
c000261c:	89 fa                	mov    edx,edi
c000261e:	c1 ea 09             	shr    edx,0x9
c0002621:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0002625:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c0002629:	e8 11 fe ff ff       	call   c000243f <move_window>
c000262e:	85 c0                	test   eax,eax
c0002630:	75 81                	jne    c00025b3 <find_volume+0x46>
c0002632:	81 e7 80 01 00 00    	and    edi,0x180
c0002638:	b9 10 00 00 00       	mov    ecx,0x10
c000263d:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c0002641:	ba 30 8d 02 c0       	mov    edx,0xc0028d30
c0002646:	e8 b5 f6 ff ff       	call   c0001d00 <mem_cmp>
c000264b:	85 c0                	test   eax,eax
c000264d:	75 29                	jne    c0002678 <find_volume+0x10b>
c000264f:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002653:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c0002657:	e8 2a f6 ff ff       	call   c0001c86 <ld_qword>
c000265c:	89 d1                	mov    ecx,edx
c000265e:	89 c2                	mov    edx,eax
c0002660:	89 d8                	mov    eax,ebx
c0002662:	e8 4c fe ff ff       	call   c00024b3 <check_fs>
c0002667:	85 f6                	test   esi,esi
c0002669:	75 07                	jne    c0002672 <find_volume+0x105>
c000266b:	83 f8 01             	cmp    eax,0x1
c000266e:	77 08                	ja     c0002678 <find_volume+0x10b>
c0002670:	eb 77                	jmp    c00026e9 <find_volume+0x17c>
c0002672:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002676:	74 71                	je     c00026e9 <find_volume+0x17c>
c0002678:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000267c:	eb 89                	jmp    c0002607 <find_volume+0x9a>
c000267e:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0002682:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c0002688:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c000268e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002692:	89 cd                	mov    ebp,ecx
c0002694:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0002698:	89 f8                	mov    eax,edi
c000269a:	83 c7 10             	add    edi,0x10
c000269d:	e8 cc f5 ff ff       	call   c0001c6e <ld_dword>
c00026a2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00026a6:	89 01                	mov    DWORD PTR [ecx],eax
c00026a8:	83 c1 04             	add    ecx,0x4
c00026ab:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00026af:	75 e3                	jne    c0002694 <find_volume+0x127>
c00026b1:	31 ff                	xor    edi,edi
c00026b3:	85 f6                	test   esi,esi
c00026b5:	74 03                	je     c00026ba <find_volume+0x14d>
c00026b7:	8d 7e ff             	lea    edi,[esi-0x1]
c00026ba:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c00026be:	85 d2                	test   edx,edx
c00026c0:	74 14                	je     c00026d6 <find_volume+0x169>
c00026c2:	31 c9                	xor    ecx,ecx
c00026c4:	89 d8                	mov    eax,ebx
c00026c6:	e8 e8 fd ff ff       	call   c00024b3 <check_fs>
c00026cb:	83 f8 01             	cmp    eax,0x1
c00026ce:	76 19                	jbe    c00026e9 <find_volume+0x17c>
c00026d0:	85 f6                	test   esi,esi
c00026d2:	74 0f                	je     c00026e3 <find_volume+0x176>
c00026d4:	eb 13                	jmp    c00026e9 <find_volume+0x17c>
c00026d6:	85 f6                	test   esi,esi
c00026d8:	0f 85 ed fe ff ff    	jne    c00025cb <find_volume+0x5e>
c00026de:	b8 03 00 00 00       	mov    eax,0x3
c00026e3:	47                   	inc    edi
c00026e4:	83 ff 03             	cmp    edi,0x3
c00026e7:	76 d1                	jbe    c00026ba <find_volume+0x14d>
c00026e9:	83 c4 3c             	add    esp,0x3c
c00026ec:	5b                   	pop    ebx
c00026ed:	5e                   	pop    esi
c00026ee:	5f                   	pop    edi
c00026ef:	5d                   	pop    ebp
c00026f0:	c3                   	ret    

c00026f1 <mount_volume>:
c00026f1:	55                   	push   ebp
c00026f2:	57                   	push   edi
c00026f3:	89 cf                	mov    edi,ecx
c00026f5:	56                   	push   esi
c00026f6:	53                   	push   ebx
c00026f7:	bb 0b 00 00 00       	mov    ebx,0xb
c00026fc:	83 ec 3c             	sub    esp,0x3c
c00026ff:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0002705:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002709:	e8 35 fb ff ff       	call   c0002243 <get_ldnumber>
c000270e:	85 c0                	test   eax,eax
c0002710:	0f 88 3a 05 00 00    	js     c0002c50 <mount_volume+0x55f>
c0002716:	8b 2c 85 00 db 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd2500]
c000271d:	89 c6                	mov    esi,eax
c000271f:	bb 0c 00 00 00       	mov    ebx,0xc
c0002724:	85 ed                	test   ebp,ebp
c0002726:	0f 84 24 05 00 00    	je     c0002c50 <mount_volume+0x55f>
c000272c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002730:	83 e7 fe             	and    edi,0xfffffffe
c0002733:	89 2a                	mov    DWORD PTR [edx],ebp
c0002735:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c0002739:	74 32                	je     c000276d <mount_volume+0x7c>
c000273b:	83 ec 0c             	sub    esp,0xc
c000273e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0002742:	50                   	push   eax
c0002743:	e8 c8 f4 ff ff       	call   c0001c10 <disk_status>
c0002748:	83 c4 10             	add    esp,0x10
c000274b:	a8 01                	test   al,0x1
c000274d:	75 1e                	jne    c000276d <mount_volume+0x7c>
c000274f:	31 db                	xor    ebx,ebx
c0002751:	89 f9                	mov    ecx,edi
c0002753:	84 c9                	test   cl,cl
c0002755:	0f 84 f5 04 00 00    	je     c0002c50 <mount_volume+0x55f>
c000275b:	a8 04                	test   al,0x4
c000275d:	0f 84 ed 04 00 00    	je     c0002c50 <mount_volume+0x55f>
c0002763:	bb 0a 00 00 00       	mov    ebx,0xa
c0002768:	e9 e3 04 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c000276d:	83 ec 0c             	sub    esp,0xc
c0002770:	89 f0                	mov    eax,esi
c0002772:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0002776:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c0002779:	0f b6 f0             	movzx  esi,al
c000277c:	bb 03 00 00 00       	mov    ebx,0x3
c0002781:	56                   	push   esi
c0002782:	e8 8c f4 ff ff       	call   c0001c13 <disk_initialize>
c0002787:	83 c4 10             	add    esp,0x10
c000278a:	a8 01                	test   al,0x1
c000278c:	0f 85 be 04 00 00    	jne    c0002c50 <mount_volume+0x55f>
c0002792:	89 f9                	mov    ecx,edi
c0002794:	84 c9                	test   cl,cl
c0002796:	74 04                	je     c000279c <mount_volume+0xab>
c0002798:	a8 04                	test   al,0x4
c000279a:	75 c7                	jne    c0002763 <mount_volume+0x72>
c000279c:	31 d2                	xor    edx,edx
c000279e:	89 e8                	mov    eax,ebp
c00027a0:	e8 c8 fd ff ff       	call   c000256d <find_volume>
c00027a5:	83 f8 04             	cmp    eax,0x4
c00027a8:	75 0a                	jne    c00027b4 <mount_volume+0xc3>
c00027aa:	bb 01 00 00 00       	mov    ebx,0x1
c00027af:	e9 9c 04 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c00027b4:	83 f8 01             	cmp    eax,0x1
c00027b7:	76 0a                	jbe    c00027c3 <mount_volume+0xd2>
c00027b9:	bb 0d 00 00 00       	mov    ebx,0xd
c00027be:	e9 8d 04 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c00027c3:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c00027c6:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c00027c9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00027cd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00027d1:	75 17                	jne    c00027ea <mount_volume+0xf9>
c00027d3:	b8 0b 00 00 00       	mov    eax,0xb
c00027d8:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00027dd:	75 da                	jne    c00027b9 <mount_volume+0xc8>
c00027df:	40                   	inc    eax
c00027e0:	83 f8 40             	cmp    eax,0x40
c00027e3:	75 f3                	jne    c00027d8 <mount_volume+0xe7>
c00027e5:	e9 5a 02 00 00       	jmp    c0002a44 <mount_volume+0x353>
c00027ea:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00027ed:	e8 6f f4 ff ff       	call   c0001c61 <ld_word>
c00027f2:	66 3d 00 02          	cmp    ax,0x200
c00027f6:	75 c1                	jne    c00027b9 <mount_volume+0xc8>
c00027f8:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00027fb:	e8 61 f4 ff ff       	call   c0001c61 <ld_word>
c0002800:	0f b7 c0             	movzx  eax,ax
c0002803:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002807:	85 c0                	test   eax,eax
c0002809:	75 0c                	jne    c0002817 <mount_volume+0x126>
c000280b:	8d 45 78             	lea    eax,[ebp+0x78]
c000280e:	e8 5b f4 ff ff       	call   c0001c6e <ld_dword>
c0002813:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002817:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000281b:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c000281e:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c0002821:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0002825:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002828:	48                   	dec    eax
c0002829:	3c 01                	cmp    al,0x1
c000282b:	77 8c                	ja     c00027b9 <mount_volume+0xc8>
c000282d:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c0002831:	89 c3                	mov    ebx,eax
c0002833:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0002837:	66 85 c0             	test   ax,ax
c000283a:	0f 84 79 ff ff ff    	je     c00027b9 <mount_volume+0xc8>
c0002840:	8d 40 ff             	lea    eax,[eax-0x1]
c0002843:	85 d8                	test   eax,ebx
c0002845:	0f 85 6e ff ff ff    	jne    c00027b9 <mount_volume+0xc8>
c000284b:	8d 45 65             	lea    eax,[ebp+0x65]
c000284e:	e8 0e f4 ff ff       	call   c0001c61 <ld_word>
c0002853:	89 c7                	mov    edi,eax
c0002855:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c0002859:	a8 0f                	test   al,0xf
c000285b:	0f 85 58 ff ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002861:	8d 45 67             	lea    eax,[ebp+0x67]
c0002864:	e8 f8 f3 ff ff       	call   c0001c61 <ld_word>
c0002869:	0f b7 f0             	movzx  esi,ax
c000286c:	85 f6                	test   esi,esi
c000286e:	75 0a                	jne    c000287a <mount_volume+0x189>
c0002870:	8d 45 74             	lea    eax,[ebp+0x74]
c0002873:	e8 f6 f3 ff ff       	call   c0001c6e <ld_dword>
c0002878:	89 c6                	mov    esi,eax
c000287a:	8d 45 62             	lea    eax,[ebp+0x62]
c000287d:	e8 df f3 ff ff       	call   c0001c61 <ld_word>
c0002882:	66 85 c0             	test   ax,ax
c0002885:	0f 84 2e ff ff ff    	je     c00027b9 <mount_volume+0xc8>
c000288b:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0002890:	0f b7 c8             	movzx  ecx,ax
c0002893:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c0002898:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000289c:	89 fa                	mov    edx,edi
c000289e:	66 c1 ea 04          	shr    dx,0x4
c00028a2:	0f b7 d2             	movzx  edx,dx
c00028a5:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c00028a9:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00028ac:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00028b0:	39 c6                	cmp    esi,eax
c00028b2:	0f 82 01 ff ff ff    	jb     c00027b9 <mount_volume+0xc8>
c00028b8:	29 c6                	sub    esi,eax
c00028ba:	31 d2                	xor    edx,edx
c00028bc:	89 f0                	mov    eax,esi
c00028be:	f7 f3                	div    ebx
c00028c0:	39 de                	cmp    esi,ebx
c00028c2:	0f 82 f1 fe ff ff    	jb     c00027b9 <mount_volume+0xc8>
c00028c8:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00028cd:	0f 87 e6 fe ff ff    	ja     c00027b9 <mount_volume+0xc8>
c00028d3:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00028d8:	0f 86 63 03 00 00    	jbe    c0002c41 <mount_volume+0x550>
c00028de:	bb 03 00 00 00       	mov    ebx,0x3
c00028e3:	8d 70 02             	lea    esi,[eax+0x2]
c00028e6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028ea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00028ee:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00028f1:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00028f4:	31 d2                	xor    edx,edx
c00028f6:	89 c8                	mov    eax,ecx
c00028f8:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00028fb:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028ff:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002903:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0002907:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000290b:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c000290e:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002911:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002915:	31 d2                	xor    edx,edx
c0002917:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000291b:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000291f:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002922:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002925:	83 fb 03             	cmp    ebx,0x3
c0002928:	75 2b                	jne    c0002955 <mount_volume+0x264>
c000292a:	8d 45 7e             	lea    eax,[ebp+0x7e]
c000292d:	e8 2f f3 ff ff       	call   c0001c61 <ld_word>
c0002932:	66 09 c7             	or     di,ax
c0002935:	0f 85 7e fe ff ff    	jne    c00027b9 <mount_volume+0xc8>
c000293b:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c0002941:	c1 e6 02             	shl    esi,0x2
c0002944:	e8 25 f3 ff ff       	call   c0001c6e <ld_dword>
c0002949:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002950:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002953:	eb 30                	jmp    c0002985 <mount_volume+0x294>
c0002955:	66 85 ff             	test   di,di
c0002958:	0f 84 5b fe ff ff    	je     c00027b9 <mount_volume+0xc8>
c000295e:	31 d2                	xor    edx,edx
c0002960:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002964:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0002968:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000296c:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000296f:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c0002972:	83 fb 02             	cmp    ebx,0x2
c0002975:	75 04                	jne    c000297b <mount_volume+0x28a>
c0002977:	01 f6                	add    esi,esi
c0002979:	eb 0a                	jmp    c0002985 <mount_volume+0x294>
c000297b:	8d 04 76             	lea    eax,[esi+esi*2]
c000297e:	83 e6 01             	and    esi,0x1
c0002981:	d1 e8                	shr    eax,1
c0002983:	01 c6                	add    esi,eax
c0002985:	81 c6 ff 01 00 00    	add    esi,0x1ff
c000298b:	c1 ee 09             	shr    esi,0x9
c000298e:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002992:	0f 87 21 fe ff ff    	ja     c00027b9 <mount_volume+0xc8>
c0002998:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c000299f:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c00029a6:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c00029aa:	83 fb 03             	cmp    ebx,0x3
c00029ad:	75 7a                	jne    c0002a29 <mount_volume+0x338>
c00029af:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c00029b5:	e8 a7 f2 ff ff       	call   c0001c61 <ld_word>
c00029ba:	66 48                	dec    ax
c00029bc:	75 6b                	jne    c0002a29 <mount_volume+0x338>
c00029be:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00029c2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00029c6:	83 c2 01             	add    edx,0x1
c00029c9:	89 e8                	mov    eax,ebp
c00029cb:	83 d1 00             	adc    ecx,0x0
c00029ce:	e8 6c fa ff ff       	call   c000243f <move_window>
c00029d3:	85 c0                	test   eax,eax
c00029d5:	75 52                	jne    c0002a29 <mount_volume+0x338>
c00029d7:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00029db:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00029e1:	e8 7b f2 ff ff       	call   c0001c61 <ld_word>
c00029e6:	66 3d 55 aa          	cmp    ax,0xaa55
c00029ea:	75 3d                	jne    c0002a29 <mount_volume+0x338>
c00029ec:	8d 45 54             	lea    eax,[ebp+0x54]
c00029ef:	e8 7a f2 ff ff       	call   c0001c6e <ld_dword>
c00029f4:	3d 52 52 61 41       	cmp    eax,0x41615252
c00029f9:	75 2e                	jne    c0002a29 <mount_volume+0x338>
c00029fb:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c0002a01:	e8 68 f2 ff ff       	call   c0001c6e <ld_dword>
c0002a06:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002a0b:	75 1c                	jne    c0002a29 <mount_volume+0x338>
c0002a0d:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c0002a13:	e8 56 f2 ff ff       	call   c0001c6e <ld_dword>
c0002a18:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0002a1b:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c0002a21:	e8 48 f2 ff ff       	call   c0001c6e <ld_dword>
c0002a26:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c0002a29:	66 a1 e0 da 02 c0    	mov    ax,ds:0xc002dae0
c0002a2f:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0002a32:	40                   	inc    eax
c0002a33:	31 db                	xor    ebx,ebx
c0002a35:	66 a3 e0 da 02 c0    	mov    ds:0xc002dae0,ax
c0002a3b:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002a3f:	e9 0c 02 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c0002a44:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002a4a:	e8 12 f2 ff ff       	call   c0001c61 <ld_word>
c0002a4f:	66 3d 00 01          	cmp    ax,0x100
c0002a53:	0f 85 60 fd ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002a59:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002a60:	0f 85 53 fd ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002a66:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002a6c:	e8 15 f2 ff ff       	call   c0001c86 <ld_qword>
c0002a71:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002a75:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002a79:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002a7f:	e8 ea f1 ff ff       	call   c0001c6e <ld_dword>
c0002a84:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002a87:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002a8d:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002a90:	fe c8                	dec    al
c0002a92:	0f 85 21 fd ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002a98:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002a9f:	bb 01 00 00 00       	mov    ebx,0x1
c0002aa4:	d3 e3                	shl    ebx,cl
c0002aa6:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c0002aaa:	66 85 db             	test   bx,bx
c0002aad:	0f 84 06 fd ff ff    	je     c00027b9 <mount_volume+0xc8>
c0002ab3:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c0002ab9:	e8 b0 f1 ff ff       	call   c0001c6e <ld_dword>
c0002abe:	89 c6                	mov    esi,eax
c0002ac0:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c0002ac5:	0f 87 ee fc ff ff    	ja     c00027b9 <mount_volume+0xc8>
c0002acb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002acf:	8d 40 02             	lea    eax,[eax+0x2]
c0002ad2:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002ad5:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c0002ad8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002adc:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002adf:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002ae5:	e8 84 f1 ff ff       	call   c0001c6e <ld_dword>
c0002aea:	31 d2                	xor    edx,edx
c0002aec:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002af0:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002af4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002af8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0002afc:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002aff:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002b02:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002b08:	e8 61 f1 ff ff       	call   c0001c6e <ld_dword>
c0002b0d:	31 d2                	xor    edx,edx
c0002b0f:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002b13:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002b17:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002b1b:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002b1e:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002b21:	0f b7 c3             	movzx  eax,bx
c0002b24:	31 d2                	xor    edx,edx
c0002b26:	0f af f0             	imul   esi,eax
c0002b29:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002b2d:	89 f0                	mov    eax,esi
c0002b2f:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002b33:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002b37:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002b3b:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002b3f:	39 c1                	cmp    ecx,eax
c0002b41:	89 df                	mov    edi,ebx
c0002b43:	19 d7                	sbb    edi,edx
c0002b45:	0f 82 6e fc ff ff    	jb     c00027b9 <mount_volume+0xc8>
c0002b4b:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002b51:	31 db                	xor    ebx,ebx
c0002b53:	e8 16 f1 ff ff       	call   c0001c6e <ld_dword>
c0002b58:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002b5f:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002b62:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002b6a:	85 db                	test   ebx,ebx
c0002b6c:	75 39                	jne    c0002ba7 <mount_volume+0x4b6>
c0002b6e:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002b72:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002b76:	0f 86 3d fc ff ff    	jbe    c00027b9 <mount_volume+0xc8>
c0002b7c:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002b7f:	31 ff                	xor    edi,edi
c0002b81:	89 e8                	mov    eax,ebp
c0002b83:	e8 72 f3 ff ff       	call   c0001efa <clst2sect>
c0002b88:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002b8c:	01 c6                	add    esi,eax
c0002b8e:	89 e8                	mov    eax,ebp
c0002b90:	11 d7                	adc    edi,edx
c0002b92:	89 f2                	mov    edx,esi
c0002b94:	89 f9                	mov    ecx,edi
c0002b96:	e8 a4 f8 ff ff       	call   c000243f <move_window>
c0002b9b:	85 c0                	test   eax,eax
c0002b9d:	0f 85 07 fc ff ff    	jne    c00027aa <mount_volume+0xb9>
c0002ba3:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002ba7:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002bac:	74 0b                	je     c0002bb9 <mount_volume+0x4c8>
c0002bae:	83 c3 20             	add    ebx,0x20
c0002bb1:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002bb7:	eb b1                	jmp    c0002b6a <mount_volume+0x479>
c0002bb9:	8d 75 54             	lea    esi,[ebp+0x54]
c0002bbc:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002bc0:	e8 a9 f0 ff ff       	call   c0001c6e <ld_dword>
c0002bc5:	89 c3                	mov    ebx,eax
c0002bc7:	83 f8 01             	cmp    eax,0x1
c0002bca:	0f 86 e9 fb ff ff    	jbe    c00027b9 <mount_volume+0xc8>
c0002bd0:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002bd3:	0f 86 e0 fb ff ff    	jbe    c00027b9 <mount_volume+0xc8>
c0002bd9:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002bdc:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002be0:	0f af c2             	imul   eax,edx
c0002be3:	31 d2                	xor    edx,edx
c0002be5:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002be8:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002beb:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002bee:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002bf1:	31 c9                	xor    ecx,ecx
c0002bf3:	89 da                	mov    edx,ebx
c0002bf5:	89 e8                	mov    eax,ebp
c0002bf7:	c1 ea 07             	shr    edx,0x7
c0002bfa:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002bfd:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002c00:	e8 3a f8 ff ff       	call   c000243f <move_window>
c0002c05:	85 c0                	test   eax,eax
c0002c07:	0f 85 9d fb ff ff    	jne    c00027aa <mount_volume+0xb9>
c0002c0d:	89 d8                	mov    eax,ebx
c0002c0f:	83 e0 7f             	and    eax,0x7f
c0002c12:	8d 04 86             	lea    eax,[esi+eax*4]
c0002c15:	e8 54 f0 ff ff       	call   c0001c6e <ld_dword>
c0002c1a:	83 f8 ff             	cmp    eax,0xffffffff
c0002c1d:	74 0a                	je     c0002c29 <mount_volume+0x538>
c0002c1f:	43                   	inc    ebx
c0002c20:	39 d8                	cmp    eax,ebx
c0002c22:	74 cd                	je     c0002bf1 <mount_volume+0x500>
c0002c24:	e9 90 fb ff ff       	jmp    c00027b9 <mount_volume+0xc8>
c0002c29:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002c30:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002c37:	bb 04 00 00 00       	mov    ebx,0x4
c0002c3c:	e9 e8 fd ff ff       	jmp    c0002a29 <mount_volume+0x338>
c0002c41:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002c46:	19 db                	sbb    ebx,ebx
c0002c48:	83 c3 02             	add    ebx,0x2
c0002c4b:	e9 93 fc ff ff       	jmp    c00028e3 <mount_volume+0x1f2>
c0002c50:	83 c4 3c             	add    esp,0x3c
c0002c53:	89 d8                	mov    eax,ebx
c0002c55:	5b                   	pop    ebx
c0002c56:	5e                   	pop    esi
c0002c57:	5f                   	pop    edi
c0002c58:	5d                   	pop    ebp
c0002c59:	c3                   	ret    

c0002c5a <find_bitmap>:
c0002c5a:	55                   	push   ebp
c0002c5b:	57                   	push   edi
c0002c5c:	89 c7                	mov    edi,eax
c0002c5e:	56                   	push   esi
c0002c5f:	8d 72 fe             	lea    esi,[edx-0x2]
c0002c62:	53                   	push   ebx
c0002c63:	83 ec 1c             	sub    esp,0x1c
c0002c66:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002c69:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002c6d:	83 e8 02             	sub    eax,0x2
c0002c70:	39 f0                	cmp    eax,esi
c0002c72:	77 02                	ja     c0002c76 <find_bitmap+0x1c>
c0002c74:	31 f6                	xor    esi,esi
c0002c76:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002c7a:	89 f3                	mov    ebx,esi
c0002c7c:	31 ed                	xor    ebp,ebp
c0002c7e:	31 c9                	xor    ecx,ecx
c0002c80:	89 da                	mov    edx,ebx
c0002c82:	89 f8                	mov    eax,edi
c0002c84:	c1 ea 0c             	shr    edx,0xc
c0002c87:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002c8a:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002c8d:	e8 ad f7 ff ff       	call   c000243f <move_window>
c0002c92:	85 c0                	test   eax,eax
c0002c94:	75 68                	jne    c0002cfe <find_bitmap+0xa4>
c0002c96:	89 da                	mov    edx,ebx
c0002c98:	89 d9                	mov    ecx,ebx
c0002c9a:	c1 ea 03             	shr    edx,0x3
c0002c9d:	83 e1 07             	and    ecx,0x7
c0002ca0:	b8 01 00 00 00       	mov    eax,0x1
c0002ca5:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002cab:	d3 e0                	shl    eax,cl
c0002cad:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002cb0:	83 e9 02             	sub    ecx,0x2
c0002cb3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002cb7:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002cbb:	43                   	inc    ebx
c0002cbc:	21 c1                	and    ecx,eax
c0002cbe:	d1 e0                	shl    eax,1
c0002cc0:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002cc4:	77 09                	ja     c0002ccf <find_bitmap+0x75>
c0002cc6:	31 db                	xor    ebx,ebx
c0002cc8:	ba 00 02 00 00       	mov    edx,0x200
c0002ccd:	31 c0                	xor    eax,eax
c0002ccf:	84 c9                	test   cl,cl
c0002cd1:	75 10                	jne    c0002ce3 <find_bitmap+0x89>
c0002cd3:	45                   	inc    ebp
c0002cd4:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002cd8:	75 0f                	jne    c0002ce9 <find_bitmap+0x8f>
c0002cda:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002cde:	83 c0 02             	add    eax,0x2
c0002ce1:	eb 22                	jmp    c0002d05 <find_bitmap+0xab>
c0002ce3:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002ce7:	31 ed                	xor    ebp,ebp
c0002ce9:	39 de                	cmp    esi,ebx
c0002ceb:	74 16                	je     c0002d03 <find_bitmap+0xa9>
c0002ced:	84 c0                	test   al,al
c0002cef:	75 c6                	jne    c0002cb7 <find_bitmap+0x5d>
c0002cf1:	42                   	inc    edx
c0002cf2:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002cf8:	77 84                	ja     c0002c7e <find_bitmap+0x24>
c0002cfa:	b0 01                	mov    al,0x1
c0002cfc:	eb b9                	jmp    c0002cb7 <find_bitmap+0x5d>
c0002cfe:	83 c8 ff             	or     eax,0xffffffff
c0002d01:	eb 02                	jmp    c0002d05 <find_bitmap+0xab>
c0002d03:	31 c0                	xor    eax,eax
c0002d05:	83 c4 1c             	add    esp,0x1c
c0002d08:	5b                   	pop    ebx
c0002d09:	5e                   	pop    esi
c0002d0a:	5f                   	pop    edi
c0002d0b:	5d                   	pop    ebp
c0002d0c:	c3                   	ret    

c0002d0d <change_bitmap>:
c0002d0d:	55                   	push   ebp
c0002d0e:	89 cd                	mov    ebp,ecx
c0002d10:	57                   	push   edi
c0002d11:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002d14:	56                   	push   esi
c0002d15:	89 c7                	mov    edi,eax
c0002d17:	53                   	push   ebx
c0002d18:	89 c8                	mov    eax,ecx
c0002d1a:	83 ec 1c             	sub    esp,0x1c
c0002d1d:	31 d2                	xor    edx,edx
c0002d1f:	89 ce                	mov    esi,ecx
c0002d21:	c1 e8 0c             	shr    eax,0xc
c0002d24:	bb 01 00 00 00       	mov    ebx,0x1
c0002d29:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002d2c:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002d2f:	c1 ee 03             	shr    esi,0x3
c0002d32:	83 e1 07             	and    ecx,0x7
c0002d35:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002d3b:	d3 e3                	shl    ebx,cl
c0002d3d:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002d41:	89 c1                	mov    ecx,eax
c0002d43:	89 d3                	mov    ebx,edx
c0002d45:	83 c1 01             	add    ecx,0x1
c0002d48:	83 d3 00             	adc    ebx,0x0
c0002d4b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d4f:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002d53:	89 d1                	mov    ecx,edx
c0002d55:	89 c2                	mov    edx,eax
c0002d57:	89 f8                	mov    eax,edi
c0002d59:	e8 e1 f6 ff ff       	call   c000243f <move_window>
c0002d5e:	89 c1                	mov    ecx,eax
c0002d60:	85 c0                	test   eax,eax
c0002d62:	75 48                	jne    c0002dac <change_bitmap+0x9f>
c0002d64:	31 d2                	xor    edx,edx
c0002d66:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002d6a:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002d6e:	0f 95 c2             	setne  dl
c0002d71:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002d75:	74 3c                	je     c0002db3 <change_bitmap+0xa6>
c0002d77:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002d7b:	4d                   	dec    ebp
c0002d7c:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002d80:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002d84:	74 32                	je     c0002db8 <change_bitmap+0xab>
c0002d86:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002d8a:	75 d8                	jne    c0002d64 <change_bitmap+0x57>
c0002d8c:	8d 46 01             	lea    eax,[esi+0x1]
c0002d8f:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002d94:	89 c3                	mov    ebx,eax
c0002d96:	31 f6                	xor    esi,esi
c0002d98:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002d9c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002da0:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002da6:	74 99                	je     c0002d41 <change_bitmap+0x34>
c0002da8:	89 de                	mov    esi,ebx
c0002daa:	eb b8                	jmp    c0002d64 <change_bitmap+0x57>
c0002dac:	b9 01 00 00 00       	mov    ecx,0x1
c0002db1:	eb 05                	jmp    c0002db8 <change_bitmap+0xab>
c0002db3:	b9 02 00 00 00       	mov    ecx,0x2
c0002db8:	83 c4 1c             	add    esp,0x1c
c0002dbb:	89 c8                	mov    eax,ecx
c0002dbd:	5b                   	pop    ebx
c0002dbe:	5e                   	pop    esi
c0002dbf:	5f                   	pop    edi
c0002dc0:	5d                   	pop    ebp
c0002dc1:	c3                   	ret    

c0002dc2 <put_fat>:
c0002dc2:	83 fa 01             	cmp    edx,0x1
c0002dc5:	0f 86 7b 01 00 00    	jbe    c0002f46 <put_fat+0x184>
c0002dcb:	55                   	push   ebp
c0002dcc:	57                   	push   edi
c0002dcd:	89 cf                	mov    edi,ecx
c0002dcf:	56                   	push   esi
c0002dd0:	b9 02 00 00 00       	mov    ecx,0x2
c0002dd5:	53                   	push   ebx
c0002dd6:	89 c6                	mov    esi,eax
c0002dd8:	83 ec 1c             	sub    esp,0x1c
c0002ddb:	89 d3                	mov    ebx,edx
c0002ddd:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002de0:	0f 86 68 01 00 00    	jbe    c0002f4e <put_fat+0x18c>
c0002de6:	8a 00                	mov    al,BYTE PTR [eax]
c0002de8:	3c 02                	cmp    al,0x2
c0002dea:	0f 84 c7 00 00 00    	je     c0002eb7 <put_fat+0xf5>
c0002df0:	77 09                	ja     c0002dfb <put_fat+0x39>
c0002df2:	fe c8                	dec    al
c0002df4:	74 17                	je     c0002e0d <put_fat+0x4b>
c0002df6:	e9 53 01 00 00       	jmp    c0002f4e <put_fat+0x18c>
c0002dfb:	b9 02 00 00 00       	mov    ecx,0x2
c0002e00:	3c 04                	cmp    al,0x4
c0002e02:	0f 86 e1 00 00 00    	jbe    c0002ee9 <put_fat+0x127>
c0002e08:	e9 41 01 00 00       	jmp    c0002f4e <put_fat+0x18c>
c0002e0d:	89 d5                	mov    ebp,edx
c0002e0f:	31 c9                	xor    ecx,ecx
c0002e11:	d1 ed                	shr    ebp,1
c0002e13:	89 f0                	mov    eax,esi
c0002e15:	01 d5                	add    ebp,edx
c0002e17:	89 ea                	mov    edx,ebp
c0002e19:	c1 ea 09             	shr    edx,0x9
c0002e1c:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e1f:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e22:	e8 18 f6 ff ff       	call   c000243f <move_window>
c0002e27:	89 c1                	mov    ecx,eax
c0002e29:	85 c0                	test   eax,eax
c0002e2b:	0f 85 1d 01 00 00    	jne    c0002f4e <put_fat+0x18c>
c0002e31:	8d 46 54             	lea    eax,[esi+0x54]
c0002e34:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e38:	8d 45 01             	lea    eax,[ebp+0x1]
c0002e3b:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e41:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002e45:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e49:	89 f8                	mov    eax,edi
c0002e4b:	83 e3 01             	and    ebx,0x1
c0002e4e:	74 0d                	je     c0002e5d <put_fat+0x9b>
c0002e50:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002e53:	89 fa                	mov    edx,edi
c0002e55:	83 e0 0f             	and    eax,0xf
c0002e58:	c1 e2 04             	shl    edx,0x4
c0002e5b:	09 d0                	or     eax,edx
c0002e5d:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002e60:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002e64:	31 c9                	xor    ecx,ecx
c0002e66:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e6a:	c1 ea 09             	shr    edx,0x9
c0002e6d:	89 f0                	mov    eax,esi
c0002e6f:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e72:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e75:	e8 c5 f5 ff ff       	call   c000243f <move_window>
c0002e7a:	89 c1                	mov    ecx,eax
c0002e7c:	85 c0                	test   eax,eax
c0002e7e:	0f 85 ca 00 00 00    	jne    c0002f4e <put_fat+0x18c>
c0002e84:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002e88:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e8e:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e92:	85 db                	test   ebx,ebx
c0002e94:	74 07                	je     c0002e9d <put_fat+0xdb>
c0002e96:	c1 ef 04             	shr    edi,0x4
c0002e99:	89 fa                	mov    edx,edi
c0002e9b:	eb 0e                	jmp    c0002eab <put_fat+0xe9>
c0002e9d:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002ea0:	c1 ef 08             	shr    edi,0x8
c0002ea3:	83 e2 f0             	and    edx,0xfffffff0
c0002ea6:	83 e7 0f             	and    edi,0xf
c0002ea9:	09 fa                	or     edx,edi
c0002eab:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002eae:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002eb2:	e9 97 00 00 00       	jmp    c0002f4e <put_fat+0x18c>
c0002eb7:	31 c9                	xor    ecx,ecx
c0002eb9:	c1 ea 08             	shr    edx,0x8
c0002ebc:	89 f0                	mov    eax,esi
c0002ebe:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ec1:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ec4:	e8 76 f5 ff ff       	call   c000243f <move_window>
c0002ec9:	89 c1                	mov    ecx,eax
c0002ecb:	85 c0                	test   eax,eax
c0002ecd:	75 7f                	jne    c0002f4e <put_fat+0x18c>
c0002ecf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002ed3:	01 db                	add    ebx,ebx
c0002ed5:	0f b7 d7             	movzx  edx,di
c0002ed8:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002ede:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002ee2:	e8 ec ed ff ff       	call   c0001cd3 <st_word>
c0002ee7:	eb 53                	jmp    c0002f3c <put_fat+0x17a>
c0002ee9:	31 c9                	xor    ecx,ecx
c0002eeb:	c1 ea 07             	shr    edx,0x7
c0002eee:	89 f0                	mov    eax,esi
c0002ef0:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ef3:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ef6:	e8 44 f5 ff ff       	call   c000243f <move_window>
c0002efb:	89 c1                	mov    ecx,eax
c0002efd:	85 c0                	test   eax,eax
c0002eff:	75 4d                	jne    c0002f4e <put_fat+0x18c>
c0002f01:	c1 e3 02             	shl    ebx,0x2
c0002f04:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002f0a:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002f0d:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002f11:	74 1c                	je     c0002f2f <put_fat+0x16d>
c0002f13:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002f17:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002f1d:	89 d8                	mov    eax,ebx
c0002f1f:	e8 4a ed ff ff       	call   c0001c6e <ld_dword>
c0002f24:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f28:	25 00 00 00 f0       	and    eax,0xf0000000
c0002f2d:	09 c7                	or     edi,eax
c0002f2f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002f33:	89 fa                	mov    edx,edi
c0002f35:	89 d8                	mov    eax,ebx
c0002f37:	e8 9b ed ff ff       	call   c0001cd7 <st_dword>
c0002f3c:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002f40:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f44:	eb 08                	jmp    c0002f4e <put_fat+0x18c>
c0002f46:	b9 02 00 00 00       	mov    ecx,0x2
c0002f4b:	89 c8                	mov    eax,ecx
c0002f4d:	c3                   	ret    
c0002f4e:	83 c4 1c             	add    esp,0x1c
c0002f51:	89 c8                	mov    eax,ecx
c0002f53:	5b                   	pop    ebx
c0002f54:	5e                   	pop    esi
c0002f55:	5f                   	pop    edi
c0002f56:	5d                   	pop    ebp
c0002f57:	c3                   	ret    

c0002f58 <fill_last_frag>:
c0002f58:	57                   	push   edi
c0002f59:	89 cf                	mov    edi,ecx
c0002f5b:	56                   	push   esi
c0002f5c:	89 d6                	mov    esi,edx
c0002f5e:	53                   	push   ebx
c0002f5f:	89 c3                	mov    ebx,eax
c0002f61:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002f64:	85 c0                	test   eax,eax
c0002f66:	74 21                	je     c0002f89 <fill_last_frag+0x31>
c0002f68:	89 f9                	mov    ecx,edi
c0002f6a:	83 f8 01             	cmp    eax,0x1
c0002f6d:	76 05                	jbe    c0002f74 <fill_last_frag+0x1c>
c0002f6f:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002f72:	29 c1                	sub    ecx,eax
c0002f74:	8d 56 01             	lea    edx,[esi+0x1]
c0002f77:	29 c2                	sub    edx,eax
c0002f79:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f7b:	e8 42 fe ff ff       	call   c0002dc2 <put_fat>
c0002f80:	85 c0                	test   eax,eax
c0002f82:	75 05                	jne    c0002f89 <fill_last_frag+0x31>
c0002f84:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002f87:	eb d8                	jmp    c0002f61 <fill_last_frag+0x9>
c0002f89:	5b                   	pop    ebx
c0002f8a:	5e                   	pop    esi
c0002f8b:	5f                   	pop    edi
c0002f8c:	c3                   	ret    

c0002f8d <fill_first_frag>:
c0002f8d:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002f91:	75 2d                	jne    c0002fc0 <fill_first_frag+0x33>
c0002f93:	57                   	push   edi
c0002f94:	56                   	push   esi
c0002f95:	53                   	push   ebx
c0002f96:	89 c3                	mov    ebx,eax
c0002f98:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002f9b:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002f9e:	01 d7                	add    edi,edx
c0002fa0:	39 fa                	cmp    edx,edi
c0002fa2:	74 14                	je     c0002fb8 <fill_first_frag+0x2b>
c0002fa4:	8d 72 01             	lea    esi,[edx+0x1]
c0002fa7:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002fa9:	89 f1                	mov    ecx,esi
c0002fab:	e8 12 fe ff ff       	call   c0002dc2 <put_fat>
c0002fb0:	89 f2                	mov    edx,esi
c0002fb2:	85 c0                	test   eax,eax
c0002fb4:	74 ea                	je     c0002fa0 <fill_first_frag+0x13>
c0002fb6:	eb 0b                	jmp    c0002fc3 <fill_first_frag+0x36>
c0002fb8:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002fbc:	31 c0                	xor    eax,eax
c0002fbe:	eb 03                	jmp    c0002fc3 <fill_first_frag+0x36>
c0002fc0:	31 c0                	xor    eax,eax
c0002fc2:	c3                   	ret    
c0002fc3:	5b                   	pop    ebx
c0002fc4:	5e                   	pop    esi
c0002fc5:	5f                   	pop    edi
c0002fc6:	c3                   	ret    

c0002fc7 <get_fat>:
c0002fc7:	83 fa 01             	cmp    edx,0x1
c0002fca:	0f 86 db 01 00 00    	jbe    c00031ab <get_fat+0x1e4>
c0002fd0:	55                   	push   ebp
c0002fd1:	b9 01 00 00 00       	mov    ecx,0x1
c0002fd6:	57                   	push   edi
c0002fd7:	56                   	push   esi
c0002fd8:	53                   	push   ebx
c0002fd9:	83 ec 1c             	sub    esp,0x1c
c0002fdc:	8b 38                	mov    edi,DWORD PTR [eax]
c0002fde:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002fe1:	0f 86 cc 01 00 00    	jbe    c00031b3 <get_fat+0x1ec>
c0002fe7:	89 c3                	mov    ebx,eax
c0002fe9:	89 d6                	mov    esi,edx
c0002feb:	8a 07                	mov    al,BYTE PTR [edi]
c0002fed:	3c 02                	cmp    al,0x2
c0002fef:	0f 84 99 00 00 00    	je     c000308e <get_fat+0xc7>
c0002ff5:	77 09                	ja     c0003000 <get_fat+0x39>
c0002ff7:	fe c8                	dec    al
c0002ff9:	74 1a                	je     c0003015 <get_fat+0x4e>
c0002ffb:	e9 b3 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c0003000:	3c 03                	cmp    al,0x3
c0003002:	0f 84 b5 00 00 00    	je     c00030bd <get_fat+0xf6>
c0003008:	3c 04                	cmp    al,0x4
c000300a:	0f 84 e3 00 00 00    	je     c00030f3 <get_fat+0x12c>
c0003010:	e9 9e 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c0003015:	89 d3                	mov    ebx,edx
c0003017:	31 c9                	xor    ecx,ecx
c0003019:	d1 eb                	shr    ebx,1
c000301b:	89 f8                	mov    eax,edi
c000301d:	01 d3                	add    ebx,edx
c000301f:	89 da                	mov    edx,ebx
c0003021:	c1 ea 09             	shr    edx,0x9
c0003024:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003027:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000302a:	e8 10 f4 ff ff       	call   c000243f <move_window>
c000302f:	85 c0                	test   eax,eax
c0003031:	74 08                	je     c000303b <get_fat+0x74>
c0003033:	83 c9 ff             	or     ecx,0xffffffff
c0003036:	e9 78 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c000303b:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000303e:	31 c9                	xor    ecx,ecx
c0003040:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0003046:	89 ea                	mov    edx,ebp
c0003048:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c000304c:	c1 ea 09             	shr    edx,0x9
c000304f:	89 f8                	mov    eax,edi
c0003051:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003054:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003057:	e8 e3 f3 ff ff       	call   c000243f <move_window>
c000305c:	85 c0                	test   eax,eax
c000305e:	75 d3                	jne    c0003033 <get_fat+0x6c>
c0003060:	0f b6 c3             	movzx  eax,bl
c0003063:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003069:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c000306e:	c1 e3 08             	shl    ebx,0x8
c0003071:	09 c3                	or     ebx,eax
c0003073:	89 d9                	mov    ecx,ebx
c0003075:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c000307b:	83 e6 01             	and    esi,0x1
c000307e:	0f 84 2f 01 00 00    	je     c00031b3 <get_fat+0x1ec>
c0003084:	89 d9                	mov    ecx,ebx
c0003086:	c1 e9 04             	shr    ecx,0x4
c0003089:	e9 25 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c000308e:	31 c9                	xor    ecx,ecx
c0003090:	c1 ea 08             	shr    edx,0x8
c0003093:	89 f8                	mov    eax,edi
c0003095:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003098:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000309b:	e8 9f f3 ff ff       	call   c000243f <move_window>
c00030a0:	85 c0                	test   eax,eax
c00030a2:	75 8f                	jne    c0003033 <get_fat+0x6c>
c00030a4:	01 f6                	add    esi,esi
c00030a6:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00030ac:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030b0:	e8 ac eb ff ff       	call   c0001c61 <ld_word>
c00030b5:	0f b7 c8             	movzx  ecx,ax
c00030b8:	e9 f6 00 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c00030bd:	31 c9                	xor    ecx,ecx
c00030bf:	c1 ea 07             	shr    edx,0x7
c00030c2:	89 f8                	mov    eax,edi
c00030c4:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c00030c7:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c00030ca:	e8 70 f3 ff ff       	call   c000243f <move_window>
c00030cf:	85 c0                	test   eax,eax
c00030d1:	0f 85 5c ff ff ff    	jne    c0003033 <get_fat+0x6c>
c00030d7:	c1 e6 02             	shl    esi,0x2
c00030da:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00030e0:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030e4:	e8 85 eb ff ff       	call   c0001c6e <ld_dword>
c00030e9:	25 ff ff ff 0f       	and    eax,0xfffffff
c00030ee:	e9 b4 00 00 00       	jmp    c00031a7 <get_fat+0x1e0>
c00030f3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00030f6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00030f9:	89 d1                	mov    ecx,edx
c00030fb:	09 c1                	or     ecx,eax
c00030fd:	74 06                	je     c0003105 <get_fat+0x13e>
c00030ff:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0003103:	75 0f                	jne    c0003114 <get_fat+0x14d>
c0003105:	b9 01 00 00 00       	mov    ecx,0x1
c000310a:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c000310e:	0f 85 9f 00 00 00    	jne    c00031b3 <get_fat+0x1ec>
c0003114:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0003118:	89 f5                	mov    ebp,esi
c000311a:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c000311f:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c0003122:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c0003125:	80 f9 02             	cmp    cl,0x2
c0003128:	75 35                	jne    c000315f <get_fat+0x198>
c000312a:	83 c0 ff             	add    eax,0xffffffff
c000312d:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c0003132:	83 d2 ff             	adc    edx,0xffffffff
c0003135:	31 db                	xor    ebx,ebx
c0003137:	0f ac d0 09          	shrd   eax,edx,0x9
c000313b:	53                   	push   ebx
c000313c:	c1 ea 09             	shr    edx,0x9
c000313f:	51                   	push   ecx
c0003140:	52                   	push   edx
c0003141:	50                   	push   eax
c0003142:	e8 55 31 02 00       	call   c002629c <__udivdi3>
c0003147:	83 c4 10             	add    esp,0x10
c000314a:	b9 01 00 00 00       	mov    ecx,0x1
c000314f:	39 c5                	cmp    ebp,eax
c0003151:	77 60                	ja     c00031b3 <get_fat+0x1ec>
c0003153:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003158:	74 59                	je     c00031b3 <get_fat+0x1ec>
c000315a:	8d 4e 01             	lea    ecx,[esi+0x1]
c000315d:	eb 54                	jmp    c00031b3 <get_fat+0x1ec>
c000315f:	80 f9 03             	cmp    cl,0x3
c0003162:	75 05                	jne    c0003169 <get_fat+0x1a2>
c0003164:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0003167:	77 f1                	ja     c000315a <get_fat+0x193>
c0003169:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c000316e:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0003172:	75 3f                	jne    c00031b3 <get_fat+0x1ec>
c0003174:	31 c9                	xor    ecx,ecx
c0003176:	89 f2                	mov    edx,esi
c0003178:	89 f8                	mov    eax,edi
c000317a:	c1 ea 07             	shr    edx,0x7
c000317d:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003180:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003183:	e8 b7 f2 ff ff       	call   c000243f <move_window>
c0003188:	85 c0                	test   eax,eax
c000318a:	0f 85 a3 fe ff ff    	jne    c0003033 <get_fat+0x6c>
c0003190:	c1 e6 02             	shl    esi,0x2
c0003193:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0003199:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c000319d:	e8 cc ea ff ff       	call   c0001c6e <ld_dword>
c00031a2:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00031a7:	89 c1                	mov    ecx,eax
c00031a9:	eb 08                	jmp    c00031b3 <get_fat+0x1ec>
c00031ab:	b9 01 00 00 00       	mov    ecx,0x1
c00031b0:	89 c8                	mov    eax,ecx
c00031b2:	c3                   	ret    
c00031b3:	83 c4 1c             	add    esp,0x1c
c00031b6:	89 c8                	mov    eax,ecx
c00031b8:	5b                   	pop    ebx
c00031b9:	5e                   	pop    esi
c00031ba:	5f                   	pop    edi
c00031bb:	5d                   	pop    ebp
c00031bc:	c3                   	ret    

c00031bd <dir_sdi>:
c00031bd:	55                   	push   ebp
c00031be:	57                   	push   edi
c00031bf:	56                   	push   esi
c00031c0:	53                   	push   ebx
c00031c1:	89 c3                	mov    ebx,eax
c00031c3:	83 ec 1c             	sub    esp,0x1c
c00031c6:	8b 38                	mov    edi,DWORD PTR [eax]
c00031c8:	31 c0                	xor    eax,eax
c00031ca:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00031cd:	0f 94 c0             	sete   al
c00031d0:	48                   	dec    eax
c00031d1:	25 00 00 20 f0       	and    eax,0xf0200000
c00031d6:	05 00 00 00 10       	add    eax,0x10000000
c00031db:	39 d0                	cmp    eax,edx
c00031dd:	77 0a                	ja     c00031e9 <dir_sdi+0x2c>
c00031df:	b8 02 00 00 00       	mov    eax,0x2
c00031e4:	e9 c4 00 00 00       	jmp    c00032ad <dir_sdi+0xf0>
c00031e9:	89 d6                	mov    esi,edx
c00031eb:	f6 c2 1f             	test   dl,0x1f
c00031ee:	75 ef                	jne    c00031df <dir_sdi+0x22>
c00031f0:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00031f3:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c00031f6:	85 c9                	test   ecx,ecx
c00031f8:	75 2d                	jne    c0003227 <dir_sdi+0x6a>
c00031fa:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c00031fd:	77 1b                	ja     c000321a <dir_sdi+0x5d>
c00031ff:	89 f2                	mov    edx,esi
c0003201:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0003205:	c1 ea 05             	shr    edx,0x5
c0003208:	39 c2                	cmp    edx,eax
c000320a:	73 d3                	jae    c00031df <dir_sdi+0x22>
c000320c:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c000320f:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c0003212:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003215:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003218:	eb 4b                	jmp    c0003265 <dir_sdi+0xa8>
c000321a:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c000321d:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0003221:	85 c0                	test   eax,eax
c0003223:	74 da                	je     c00031ff <dir_sdi+0x42>
c0003225:	89 c1                	mov    ecx,eax
c0003227:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c000322b:	c1 e5 09             	shl    ebp,0x9
c000322e:	89 ca                	mov    edx,ecx
c0003230:	39 ee                	cmp    esi,ebp
c0003232:	72 1c                	jb     c0003250 <dir_sdi+0x93>
c0003234:	89 d8                	mov    eax,ebx
c0003236:	e8 8c fd ff ff       	call   c0002fc7 <get_fat>
c000323b:	89 c1                	mov    ecx,eax
c000323d:	83 f8 ff             	cmp    eax,0xffffffff
c0003240:	74 66                	je     c00032a8 <dir_sdi+0xeb>
c0003242:	83 f8 01             	cmp    eax,0x1
c0003245:	76 98                	jbe    c00031df <dir_sdi+0x22>
c0003247:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c000324a:	76 93                	jbe    c00031df <dir_sdi+0x22>
c000324c:	29 ee                	sub    esi,ebp
c000324e:	eb de                	jmp    c000322e <dir_sdi+0x71>
c0003250:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003254:	89 f8                	mov    eax,edi
c0003256:	e8 9f ec ff ff       	call   c0001efa <clst2sect>
c000325b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000325f:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003262:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003265:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0003268:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000326b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000326e:	89 d1                	mov    ecx,edx
c0003270:	09 c1                	or     ecx,eax
c0003272:	0f 84 67 ff ff ff    	je     c00031df <dir_sdi+0x22>
c0003278:	89 f1                	mov    ecx,esi
c000327a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003282:	c1 e9 09             	shr    ecx,0x9
c0003285:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003289:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000328d:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0003291:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003294:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000329a:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000329d:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00032a1:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00032a4:	31 c0                	xor    eax,eax
c00032a6:	eb 05                	jmp    c00032ad <dir_sdi+0xf0>
c00032a8:	b8 01 00 00 00       	mov    eax,0x1
c00032ad:	83 c4 1c             	add    esp,0x1c
c00032b0:	5b                   	pop    ebx
c00032b1:	5e                   	pop    esi
c00032b2:	5f                   	pop    edi
c00032b3:	5d                   	pop    ebp
c00032b4:	c3                   	ret    

c00032b5 <create_chain>:
c00032b5:	55                   	push   ebp
c00032b6:	89 c5                	mov    ebp,eax
c00032b8:	57                   	push   edi
c00032b9:	56                   	push   esi
c00032ba:	53                   	push   ebx
c00032bb:	83 ec 1c             	sub    esp,0x1c
c00032be:	85 d2                	test   edx,edx
c00032c0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00032c4:	8b 30                	mov    esi,DWORD PTR [eax]
c00032c6:	75 0e                	jne    c00032d6 <create_chain+0x21>
c00032c8:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00032cb:	85 ff                	test   edi,edi
c00032cd:	74 39                	je     c0003308 <create_chain+0x53>
c00032cf:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c00032d2:	77 39                	ja     c000330d <create_chain+0x58>
c00032d4:	eb 32                	jmp    c0003308 <create_chain+0x53>
c00032d6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00032da:	e8 e8 fc ff ff       	call   c0002fc7 <get_fat>
c00032df:	89 c3                	mov    ebx,eax
c00032e1:	83 f8 01             	cmp    eax,0x1
c00032e4:	77 0a                	ja     c00032f0 <create_chain+0x3b>
c00032e6:	bb 01 00 00 00       	mov    ebx,0x1
c00032eb:	e9 ba 01 00 00       	jmp    c00034aa <create_chain+0x1f5>
c00032f0:	83 f8 ff             	cmp    eax,0xffffffff
c00032f3:	0f 84 62 01 00 00    	je     c000345b <create_chain+0x1a6>
c00032f9:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00032fc:	0f 87 a8 01 00 00    	ja     c00034aa <create_chain+0x1f5>
c0003302:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0003306:	eb 05                	jmp    c000330d <create_chain+0x58>
c0003308:	bf 01 00 00 00       	mov    edi,0x1
c000330d:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c0003311:	75 07                	jne    c000331a <create_chain+0x65>
c0003313:	31 db                	xor    ebx,ebx
c0003315:	e9 90 01 00 00       	jmp    c00034aa <create_chain+0x1f5>
c000331a:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c000331d:	75 74                	jne    c0003393 <create_chain+0xde>
c000331f:	b9 01 00 00 00       	mov    ecx,0x1
c0003324:	89 fa                	mov    edx,edi
c0003326:	89 f0                	mov    eax,esi
c0003328:	e8 2d f9 ff ff       	call   c0002c5a <find_bitmap>
c000332d:	89 c3                	mov    ebx,eax
c000332f:	8d 40 ff             	lea    eax,[eax-0x1]
c0003332:	83 f8 fd             	cmp    eax,0xfffffffd
c0003335:	0f 87 6f 01 00 00    	ja     c00034aa <create_chain+0x1f5>
c000333b:	83 ec 0c             	sub    esp,0xc
c000333e:	b9 01 00 00 00       	mov    ecx,0x1
c0003343:	6a 01                	push   0x1
c0003345:	89 da                	mov    edx,ebx
c0003347:	89 f0                	mov    eax,esi
c0003349:	e8 bf f9 ff ff       	call   c0002d0d <change_bitmap>
c000334e:	83 c4 10             	add    esp,0x10
c0003351:	83 f8 02             	cmp    eax,0x2
c0003354:	74 90                	je     c00032e6 <create_chain+0x31>
c0003356:	83 f8 01             	cmp    eax,0x1
c0003359:	0f 84 fc 00 00 00    	je     c000345b <create_chain+0x1a6>
c000335f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003364:	75 09                	jne    c000336f <create_chain+0xba>
c0003366:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c000336a:	e9 0c 01 00 00       	jmp    c000347b <create_chain+0x1c6>
c000336f:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c0003373:	0f 85 e7 00 00 00    	jne    c0003460 <create_chain+0x1ab>
c0003379:	8d 57 01             	lea    edx,[edi+0x1]
c000337c:	39 da                	cmp    edx,ebx
c000337e:	0f 84 f7 00 00 00    	je     c000347b <create_chain+0x1c6>
c0003384:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c0003387:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c000338b:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c000338e:	e9 cd 00 00 00       	jmp    c0003460 <create_chain+0x1ab>
c0003393:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0003397:	75 41                	jne    c00033da <create_chain+0x125>
c0003399:	8d 5f 01             	lea    ebx,[edi+0x1]
c000339c:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c000339f:	77 05                	ja     c00033a6 <create_chain+0xf1>
c00033a1:	bb 02 00 00 00       	mov    ebx,0x2
c00033a6:	89 da                	mov    edx,ebx
c00033a8:	89 e8                	mov    eax,ebp
c00033aa:	e8 18 fc ff ff       	call   c0002fc7 <get_fat>
c00033af:	83 f8 01             	cmp    eax,0x1
c00033b2:	0f 84 2e ff ff ff    	je     c00032e6 <create_chain+0x31>
c00033b8:	83 f8 ff             	cmp    eax,0xffffffff
c00033bb:	0f 84 9a 00 00 00    	je     c000345b <create_chain+0x1a6>
c00033c1:	85 c0                	test   eax,eax
c00033c3:	74 11                	je     c00033d6 <create_chain+0x121>
c00033c5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00033c8:	83 f8 01             	cmp    eax,0x1
c00033cb:	76 0d                	jbe    c00033da <create_chain+0x125>
c00033cd:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00033d0:	76 08                	jbe    c00033da <create_chain+0x125>
c00033d2:	89 c7                	mov    edi,eax
c00033d4:	eb 04                	jmp    c00033da <create_chain+0x125>
c00033d6:	85 db                	test   ebx,ebx
c00033d8:	75 38                	jne    c0003412 <create_chain+0x15d>
c00033da:	89 fb                	mov    ebx,edi
c00033dc:	43                   	inc    ebx
c00033dd:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00033e0:	77 0e                	ja     c00033f0 <create_chain+0x13b>
c00033e2:	83 ff 01             	cmp    edi,0x1
c00033e5:	0f 86 28 ff ff ff    	jbe    c0003313 <create_chain+0x5e>
c00033eb:	bb 02 00 00 00       	mov    ebx,0x2
c00033f0:	89 da                	mov    edx,ebx
c00033f2:	89 e8                	mov    eax,ebp
c00033f4:	e8 ce fb ff ff       	call   c0002fc7 <get_fat>
c00033f9:	85 c0                	test   eax,eax
c00033fb:	74 15                	je     c0003412 <create_chain+0x15d>
c00033fd:	83 f8 01             	cmp    eax,0x1
c0003400:	0f 84 e0 fe ff ff    	je     c00032e6 <create_chain+0x31>
c0003406:	40                   	inc    eax
c0003407:	74 52                	je     c000345b <create_chain+0x1a6>
c0003409:	39 fb                	cmp    ebx,edi
c000340b:	75 cf                	jne    c00033dc <create_chain+0x127>
c000340d:	e9 01 ff ff ff       	jmp    c0003313 <create_chain+0x5e>
c0003412:	83 c9 ff             	or     ecx,0xffffffff
c0003415:	89 da                	mov    edx,ebx
c0003417:	89 f0                	mov    eax,esi
c0003419:	e8 a4 f9 ff ff       	call   c0002dc2 <put_fat>
c000341e:	85 c0                	test   eax,eax
c0003420:	75 32                	jne    c0003454 <create_chain+0x19f>
c0003422:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003427:	74 11                	je     c000343a <create_chain+0x185>
c0003429:	89 d9                	mov    ecx,ebx
c000342b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000342f:	89 f0                	mov    eax,esi
c0003431:	e8 8c f9 ff ff       	call   c0002dc2 <put_fat>
c0003436:	85 c0                	test   eax,eax
c0003438:	75 1a                	jne    c0003454 <create_chain+0x19f>
c000343a:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000343d:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003440:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c0003443:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003446:	39 d0                	cmp    eax,edx
c0003448:	77 04                	ja     c000344e <create_chain+0x199>
c000344a:	48                   	dec    eax
c000344b:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c000344e:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c0003452:	eb 56                	jmp    c00034aa <create_chain+0x1f5>
c0003454:	48                   	dec    eax
c0003455:	0f 85 8b fe ff ff    	jne    c00032e6 <create_chain+0x31>
c000345b:	83 cb ff             	or     ebx,0xffffffff
c000345e:	eb 4a                	jmp    c00034aa <create_chain+0x1f5>
c0003460:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003464:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003467:	41                   	inc    ecx
c0003468:	39 d9                	cmp    ecx,ebx
c000346a:	75 19                	jne    c0003485 <create_chain+0x1d0>
c000346c:	b9 02 00 00 00       	mov    ecx,0x2
c0003471:	85 d2                	test   edx,edx
c0003473:	74 03                	je     c0003478 <create_chain+0x1c3>
c0003475:	8d 4a 01             	lea    ecx,[edx+0x1]
c0003478:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c000347b:	85 c0                	test   eax,eax
c000347d:	0f 85 63 fe ff ff    	jne    c00032e6 <create_chain+0x31>
c0003483:	eb b5                	jmp    c000343a <create_chain+0x185>
c0003485:	85 d2                	test   edx,edx
c0003487:	75 07                	jne    c0003490 <create_chain+0x1db>
c0003489:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003490:	89 d9                	mov    ecx,ebx
c0003492:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003496:	89 e8                	mov    eax,ebp
c0003498:	e8 bb fa ff ff       	call   c0002f58 <fill_last_frag>
c000349d:	85 c0                	test   eax,eax
c000349f:	75 b3                	jne    c0003454 <create_chain+0x19f>
c00034a1:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c00034a8:	eb 90                	jmp    c000343a <create_chain+0x185>
c00034aa:	83 c4 1c             	add    esp,0x1c
c00034ad:	89 d8                	mov    eax,ebx
c00034af:	5b                   	pop    ebx
c00034b0:	5e                   	pop    esi
c00034b1:	5f                   	pop    edi
c00034b2:	5d                   	pop    ebp
c00034b3:	c3                   	ret    

c00034b4 <remove_chain>:
c00034b4:	55                   	push   ebp
c00034b5:	57                   	push   edi
c00034b6:	56                   	push   esi
c00034b7:	53                   	push   ebx
c00034b8:	83 ec 1c             	sub    esp,0x1c
c00034bb:	83 fa 01             	cmp    edx,0x1
c00034be:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00034c2:	8b 18                	mov    ebx,DWORD PTR [eax]
c00034c4:	77 0a                	ja     c00034d0 <remove_chain+0x1c>
c00034c6:	b8 02 00 00 00       	mov    eax,0x2
c00034cb:	e9 24 01 00 00       	jmp    c00035f4 <remove_chain+0x140>
c00034d0:	89 d6                	mov    esi,edx
c00034d2:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c00034d5:	76 ef                	jbe    c00034c6 <remove_chain+0x12>
c00034d7:	89 c7                	mov    edi,eax
c00034d9:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00034de:	75 06                	jne    c00034e6 <remove_chain+0x32>
c00034e0:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00034e4:	eb 54                	jmp    c000353a <remove_chain+0x86>
c00034e6:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034e9:	75 06                	jne    c00034f1 <remove_chain+0x3d>
c00034eb:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00034ef:	74 ef                	je     c00034e0 <remove_chain+0x2c>
c00034f1:	83 c9 ff             	or     ecx,0xffffffff
c00034f4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00034f8:	89 d8                	mov    eax,ebx
c00034fa:	e8 c3 f8 ff ff       	call   c0002dc2 <put_fat>
c00034ff:	85 c0                	test   eax,eax
c0003501:	74 dd                	je     c00034e0 <remove_chain+0x2c>
c0003503:	e9 ec 00 00 00       	jmp    c00035f4 <remove_chain+0x140>
c0003508:	83 f8 01             	cmp    eax,0x1
c000350b:	74 b9                	je     c00034c6 <remove_chain+0x12>
c000350d:	83 f8 ff             	cmp    eax,0xffffffff
c0003510:	74 6d                	je     c000357f <remove_chain+0xcb>
c0003512:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003515:	75 6f                	jne    c0003586 <remove_chain+0xd2>
c0003517:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000351a:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c000351d:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003520:	39 d0                	cmp    eax,edx
c0003522:	73 08                	jae    c000352c <remove_chain+0x78>
c0003524:	40                   	inc    eax
c0003525:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c0003529:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000352c:	8d 4e 01             	lea    ecx,[esi+0x1]
c000352f:	39 e9                	cmp    ecx,ebp
c0003531:	75 64                	jne    c0003597 <remove_chain+0xe3>
c0003533:	89 ee                	mov    esi,ebp
c0003535:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0003538:	76 0f                	jbe    c0003549 <remove_chain+0x95>
c000353a:	89 f2                	mov    edx,esi
c000353c:	89 f8                	mov    eax,edi
c000353e:	e8 84 fa ff ff       	call   c0002fc7 <get_fat>
c0003543:	89 c5                	mov    ebp,eax
c0003545:	85 c0                	test   eax,eax
c0003547:	75 bf                	jne    c0003508 <remove_chain+0x54>
c0003549:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000354c:	0f 85 a0 00 00 00    	jne    c00035f2 <remove_chain+0x13e>
c0003552:	eb 6c                	jmp    c00035c0 <remove_chain+0x10c>
c0003554:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c0003557:	84 c0                	test   al,al
c0003559:	75 7d                	jne    c00035d8 <remove_chain+0x124>
c000355b:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000355e:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c0003562:	0f 84 86 00 00 00    	je     c00035ee <remove_chain+0x13a>
c0003568:	89 da                	mov    edx,ebx
c000356a:	89 f8                	mov    eax,edi
c000356c:	e8 56 fa ff ff       	call   c0002fc7 <get_fat>
c0003571:	83 f8 01             	cmp    eax,0x1
c0003574:	0f 86 4c ff ff ff    	jbe    c00034c6 <remove_chain+0x12>
c000357a:	83 f8 ff             	cmp    eax,0xffffffff
c000357d:	75 4e                	jne    c00035cd <remove_chain+0x119>
c000357f:	b8 01 00 00 00       	mov    eax,0x1
c0003584:	eb 6e                	jmp    c00035f4 <remove_chain+0x140>
c0003586:	31 c9                	xor    ecx,ecx
c0003588:	89 f2                	mov    edx,esi
c000358a:	89 d8                	mov    eax,ebx
c000358c:	e8 31 f8 ff ff       	call   c0002dc2 <put_fat>
c0003591:	85 c0                	test   eax,eax
c0003593:	74 82                	je     c0003517 <remove_chain+0x63>
c0003595:	eb 5d                	jmp    c00035f4 <remove_chain+0x140>
c0003597:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000359a:	75 1b                	jne    c00035b7 <remove_chain+0x103>
c000359c:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00035a0:	89 d8                	mov    eax,ebx
c00035a2:	83 ec 0c             	sub    esp,0xc
c00035a5:	6a 00                	push   0x0
c00035a7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00035ab:	e8 5d f7 ff ff       	call   c0002d0d <change_bitmap>
c00035b0:	83 c4 10             	add    esp,0x10
c00035b3:	85 c0                	test   eax,eax
c00035b5:	75 3d                	jne    c00035f4 <remove_chain+0x140>
c00035b7:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c00035bb:	e9 73 ff ff ff       	jmp    c0003533 <remove_chain+0x7f>
c00035c0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00035c5:	75 8d                	jne    c0003554 <remove_chain+0xa0>
c00035c7:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c00035cb:	eb 25                	jmp    c00035f2 <remove_chain+0x13e>
c00035cd:	8d 53 01             	lea    edx,[ebx+0x1]
c00035d0:	89 c3                	mov    ebx,eax
c00035d2:	39 c2                	cmp    edx,eax
c00035d4:	74 88                	je     c000355e <remove_chain+0xaa>
c00035d6:	eb 1a                	jmp    c00035f2 <remove_chain+0x13e>
c00035d8:	3c 03                	cmp    al,0x3
c00035da:	75 16                	jne    c00035f2 <remove_chain+0x13e>
c00035dc:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00035df:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035e3:	77 0d                	ja     c00035f2 <remove_chain+0x13e>
c00035e5:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00035e8:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035ec:	72 04                	jb     c00035f2 <remove_chain+0x13e>
c00035ee:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00035f2:	31 c0                	xor    eax,eax
c00035f4:	83 c4 1c             	add    esp,0x1c
c00035f7:	5b                   	pop    ebx
c00035f8:	5e                   	pop    esi
c00035f9:	5f                   	pop    edi
c00035fa:	5d                   	pop    ebp
c00035fb:	c3                   	ret    

c00035fc <dir_clear>:
c00035fc:	55                   	push   ebp
c00035fd:	57                   	push   edi
c00035fe:	56                   	push   esi
c00035ff:	89 c6                	mov    esi,eax
c0003601:	53                   	push   ebx
c0003602:	83 ec 1c             	sub    esp,0x1c
c0003605:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003609:	e8 9d ed ff ff       	call   c00023ab <sync_window>
c000360e:	85 c0                	test   eax,eax
c0003610:	0f 85 de 00 00 00    	jne    c00036f4 <dir_clear+0xf8>
c0003616:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000361a:	89 f0                	mov    eax,esi
c000361c:	8d 6e 54             	lea    ebp,[esi+0x54]
c000361f:	e8 d6 e8 ff ff       	call   c0001efa <clst2sect>
c0003624:	b9 00 02 00 00       	mov    ecx,0x200
c0003629:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000362d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003631:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c0003634:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c0003637:	89 e8                	mov    eax,ebp
c0003639:	31 d2                	xor    edx,edx
c000363b:	e8 b5 e6 ff ff       	call   c0001cf5 <mem_set>
c0003640:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0003644:	c1 e3 09             	shl    ebx,0x9
c0003647:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c000364d:	76 1f                	jbe    c000366e <dir_clear+0x72>
c000364f:	bb 00 80 00 00       	mov    ebx,0x8000
c0003654:	eb 18                	jmp    c000366e <dir_clear+0x72>
c0003656:	83 ec 0c             	sub    esp,0xc
c0003659:	53                   	push   ebx
c000365a:	e8 35 4e 00 00       	call   c0008494 <ff_memalloc>
c000365f:	83 c4 10             	add    esp,0x10
c0003662:	89 c7                	mov    edi,eax
c0003664:	85 c0                	test   eax,eax
c0003666:	0f 85 8f 00 00 00    	jne    c00036fb <dir_clear+0xff>
c000366c:	d1 eb                	shr    ebx,1
c000366e:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0003674:	77 e0                	ja     c0003656 <dir_clear+0x5a>
c0003676:	31 db                	xor    ebx,ebx
c0003678:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000367c:	39 d8                	cmp    eax,ebx
c000367e:	76 66                	jbe    c00036e6 <dir_clear+0xea>
c0003680:	83 ec 0c             	sub    esp,0xc
c0003683:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003687:	6a 01                	push   0x1
c0003689:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000368d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003691:	55                   	push   ebp
c0003692:	50                   	push   eax
c0003693:	e8 94 e5 ff ff       	call   c0001c2c <disk_write>
c0003698:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c000369d:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c00036a2:	83 c4 20             	add    esp,0x20
c00036a5:	85 c0                	test   eax,eax
c00036a7:	75 3d                	jne    c00036e6 <dir_clear+0xea>
c00036a9:	43                   	inc    ebx
c00036aa:	eb cc                	jmp    c0003678 <dir_clear+0x7c>
c00036ac:	83 ec 0c             	sub    esp,0xc
c00036af:	31 d2                	xor    edx,edx
c00036b1:	55                   	push   ebp
c00036b2:	89 d8                	mov    eax,ebx
c00036b4:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00036b8:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00036bc:	52                   	push   edx
c00036bd:	50                   	push   eax
c00036be:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00036c2:	57                   	push   edi
c00036c3:	50                   	push   eax
c00036c4:	e8 63 e5 ff ff       	call   c0001c2c <disk_write>
c00036c9:	83 c4 20             	add    esp,0x20
c00036cc:	85 c0                	test   eax,eax
c00036ce:	75 0a                	jne    c00036da <dir_clear+0xde>
c00036d0:	01 eb                	add    ebx,ebp
c00036d2:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036d6:	39 d8                	cmp    eax,ebx
c00036d8:	77 d2                	ja     c00036ac <dir_clear+0xb0>
c00036da:	83 ec 0c             	sub    esp,0xc
c00036dd:	57                   	push   edi
c00036de:	e8 c7 4d 00 00       	call   c00084aa <ff_memfree>
c00036e3:	83 c4 10             	add    esp,0x10
c00036e6:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036ea:	39 d8                	cmp    eax,ebx
c00036ec:	0f 95 c0             	setne  al
c00036ef:	0f b6 c0             	movzx  eax,al
c00036f2:	eb 19                	jmp    c000370d <dir_clear+0x111>
c00036f4:	b8 01 00 00 00       	mov    eax,0x1
c00036f9:	eb 12                	jmp    c000370d <dir_clear+0x111>
c00036fb:	89 d9                	mov    ecx,ebx
c00036fd:	31 d2                	xor    edx,edx
c00036ff:	c1 eb 09             	shr    ebx,0x9
c0003702:	e8 ee e5 ff ff       	call   c0001cf5 <mem_set>
c0003707:	89 dd                	mov    ebp,ebx
c0003709:	31 db                	xor    ebx,ebx
c000370b:	eb c5                	jmp    c00036d2 <dir_clear+0xd6>
c000370d:	83 c4 1c             	add    esp,0x1c
c0003710:	5b                   	pop    ebx
c0003711:	5e                   	pop    esi
c0003712:	5f                   	pop    edi
c0003713:	5d                   	pop    ebp
c0003714:	c3                   	ret    

c0003715 <dir_next>:
c0003715:	55                   	push   ebp
c0003716:	57                   	push   edi
c0003717:	56                   	push   esi
c0003718:	53                   	push   ebx
c0003719:	89 c3                	mov    ebx,eax
c000371b:	83 ec 1c             	sub    esp,0x1c
c000371e:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003720:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003724:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0003727:	8d 78 20             	lea    edi,[eax+0x20]
c000372a:	31 c0                	xor    eax,eax
c000372c:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0003730:	0f 94 c0             	sete   al
c0003733:	48                   	dec    eax
c0003734:	25 00 00 20 f0       	and    eax,0xf0200000
c0003739:	05 00 00 00 10       	add    eax,0x10000000
c000373e:	39 f8                	cmp    eax,edi
c0003740:	77 0e                	ja     c0003750 <dir_next+0x3b>
c0003742:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003749:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003750:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003753:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003756:	b8 04 00 00 00       	mov    eax,0x4
c000375b:	89 ce                	mov    esi,ecx
c000375d:	09 d6                	or     esi,edx
c000375f:	0f 84 da 00 00 00    	je     c000383f <dir_next+0x12a>
c0003765:	89 f8                	mov    eax,edi
c0003767:	25 ff 01 00 00       	and    eax,0x1ff
c000376c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003770:	0f 85 b9 00 00 00    	jne    c000382f <dir_next+0x11a>
c0003776:	83 c2 01             	add    edx,0x1
c0003779:	83 d1 00             	adc    ecx,0x0
c000377c:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c000377f:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0003782:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0003785:	85 d2                	test   edx,edx
c0003787:	75 29                	jne    c00037b2 <dir_next+0x9d>
c0003789:	89 fa                	mov    edx,edi
c000378b:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000378f:	c1 ea 05             	shr    edx,0x5
c0003792:	39 c2                	cmp    edx,eax
c0003794:	0f 82 95 00 00 00    	jb     c000382f <dir_next+0x11a>
c000379a:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00037a1:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00037a8:	b8 04 00 00 00       	mov    eax,0x4
c00037ad:	e9 8d 00 00 00       	jmp    c000383f <dir_next+0x12a>
c00037b2:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00037b6:	89 f9                	mov    ecx,edi
c00037b8:	48                   	dec    eax
c00037b9:	c1 e9 09             	shr    ecx,0x9
c00037bc:	85 c8                	test   eax,ecx
c00037be:	75 6f                	jne    c000382f <dir_next+0x11a>
c00037c0:	89 d8                	mov    eax,ebx
c00037c2:	e8 00 f8 ff ff       	call   c0002fc7 <get_fat>
c00037c7:	89 c6                	mov    esi,eax
c00037c9:	83 f8 01             	cmp    eax,0x1
c00037cc:	77 07                	ja     c00037d5 <dir_next+0xc0>
c00037ce:	b8 02 00 00 00       	mov    eax,0x2
c00037d3:	eb 6a                	jmp    c000383f <dir_next+0x12a>
c00037d5:	83 f8 ff             	cmp    eax,0xffffffff
c00037d8:	75 07                	jne    c00037e1 <dir_next+0xcc>
c00037da:	b8 01 00 00 00       	mov    eax,0x1
c00037df:	eb 5e                	jmp    c000383f <dir_next+0x12a>
c00037e1:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00037e4:	77 37                	ja     c000381d <dir_next+0x108>
c00037e6:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00037eb:	74 ad                	je     c000379a <dir_next+0x85>
c00037ed:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00037f0:	89 d8                	mov    eax,ebx
c00037f2:	e8 be fa ff ff       	call   c00032b5 <create_chain>
c00037f7:	89 c6                	mov    esi,eax
c00037f9:	b8 07 00 00 00       	mov    eax,0x7
c00037fe:	85 f6                	test   esi,esi
c0003800:	74 3d                	je     c000383f <dir_next+0x12a>
c0003802:	83 fe 01             	cmp    esi,0x1
c0003805:	74 c7                	je     c00037ce <dir_next+0xb9>
c0003807:	83 fe ff             	cmp    esi,0xffffffff
c000380a:	74 ce                	je     c00037da <dir_next+0xc5>
c000380c:	89 f2                	mov    edx,esi
c000380e:	89 e8                	mov    eax,ebp
c0003810:	e8 e7 fd ff ff       	call   c00035fc <dir_clear>
c0003815:	85 c0                	test   eax,eax
c0003817:	75 c1                	jne    c00037da <dir_next+0xc5>
c0003819:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c000381d:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0003820:	89 f2                	mov    edx,esi
c0003822:	89 e8                	mov    eax,ebp
c0003824:	e8 d1 e6 ff ff       	call   c0001efa <clst2sect>
c0003829:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000382c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000382f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003833:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c0003836:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c000383a:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000383d:	31 c0                	xor    eax,eax
c000383f:	83 c4 1c             	add    esp,0x1c
c0003842:	5b                   	pop    ebx
c0003843:	5e                   	pop    esi
c0003844:	5f                   	pop    edi
c0003845:	5d                   	pop    ebp
c0003846:	c3                   	ret    

c0003847 <load_xdir>:
c0003847:	55                   	push   ebp
c0003848:	57                   	push   edi
c0003849:	56                   	push   esi
c000384a:	89 c6                	mov    esi,eax
c000384c:	53                   	push   ebx
c000384d:	83 ec 1c             	sub    esp,0x1c
c0003850:	8b 00                	mov    eax,DWORD PTR [eax]
c0003852:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003855:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003858:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000385b:	e8 df eb ff ff       	call   c000243f <move_window>
c0003860:	89 c3                	mov    ebx,eax
c0003862:	85 c0                	test   eax,eax
c0003864:	0f 85 0c 01 00 00    	jne    c0003976 <load_xdir+0x12f>
c000386a:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000386d:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003870:	0f 85 fb 00 00 00    	jne    c0003971 <load_xdir+0x12a>
c0003876:	89 f8                	mov    eax,edi
c0003878:	b9 20 00 00 00       	mov    ecx,0x20
c000387d:	e8 5e e4 ff ff       	call   c0001ce0 <mem_cpy>
c0003882:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0003886:	40                   	inc    eax
c0003887:	c1 e0 05             	shl    eax,0x5
c000388a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000388e:	83 e8 60             	sub    eax,0x60
c0003891:	3d 00 02 00 00       	cmp    eax,0x200
c0003896:	0f 87 d5 00 00 00    	ja     c0003971 <load_xdir+0x12a>
c000389c:	31 d2                	xor    edx,edx
c000389e:	89 f0                	mov    eax,esi
c00038a0:	e8 70 fe ff ff       	call   c0003715 <dir_next>
c00038a5:	89 c3                	mov    ebx,eax
c00038a7:	83 f8 04             	cmp    eax,0x4
c00038aa:	0f 84 c1 00 00 00    	je     c0003971 <load_xdir+0x12a>
c00038b0:	85 c0                	test   eax,eax
c00038b2:	0f 85 be 00 00 00    	jne    c0003976 <load_xdir+0x12f>
c00038b8:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00038bb:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00038be:	8b 06                	mov    eax,DWORD PTR [esi]
c00038c0:	e8 7a eb ff ff       	call   c000243f <move_window>
c00038c5:	89 c3                	mov    ebx,eax
c00038c7:	85 c0                	test   eax,eax
c00038c9:	0f 85 a7 00 00 00    	jne    c0003976 <load_xdir+0x12f>
c00038cf:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00038d2:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c00038d5:	0f 85 96 00 00 00    	jne    c0003971 <load_xdir+0x12a>
c00038db:	8d 47 20             	lea    eax,[edi+0x20]
c00038de:	b9 20 00 00 00       	mov    ecx,0x20
c00038e3:	e8 f8 e3 ff ff       	call   c0001ce0 <mem_cpy>
c00038e8:	31 d2                	xor    edx,edx
c00038ea:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00038ee:	b9 0f 00 00 00       	mov    ecx,0xf
c00038f3:	83 c0 2c             	add    eax,0x2c
c00038f6:	f7 f1                	div    ecx
c00038f8:	c1 e0 05             	shl    eax,0x5
c00038fb:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00038ff:	77 70                	ja     c0003971 <load_xdir+0x12a>
c0003901:	bd 40 00 00 00       	mov    ebp,0x40
c0003906:	31 d2                	xor    edx,edx
c0003908:	89 f0                	mov    eax,esi
c000390a:	e8 06 fe ff ff       	call   c0003715 <dir_next>
c000390f:	89 c3                	mov    ebx,eax
c0003911:	83 f8 04             	cmp    eax,0x4
c0003914:	74 5b                	je     c0003971 <load_xdir+0x12a>
c0003916:	85 c0                	test   eax,eax
c0003918:	75 5c                	jne    c0003976 <load_xdir+0x12f>
c000391a:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000391d:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003920:	8b 06                	mov    eax,DWORD PTR [esi]
c0003922:	e8 18 eb ff ff       	call   c000243f <move_window>
c0003927:	89 c3                	mov    ebx,eax
c0003929:	85 c0                	test   eax,eax
c000392b:	75 49                	jne    c0003976 <load_xdir+0x12f>
c000392d:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003930:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c0003933:	75 3c                	jne    c0003971 <load_xdir+0x12a>
c0003935:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c000393b:	77 0d                	ja     c000394a <load_xdir+0x103>
c000393d:	8d 04 2f             	lea    eax,[edi+ebp*1]
c0003940:	b9 20 00 00 00       	mov    ecx,0x20
c0003945:	e8 96 e3 ff ff       	call   c0001ce0 <mem_cpy>
c000394a:	83 c5 20             	add    ebp,0x20
c000394d:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0003951:	77 b3                	ja     c0003906 <load_xdir+0xbf>
c0003953:	81 fd 60 02 00 00    	cmp    ebp,0x260
c0003959:	77 1b                	ja     c0003976 <load_xdir+0x12f>
c000395b:	89 f8                	mov    eax,edi
c000395d:	e8 cd e7 ff ff       	call   c000212f <xdir_sum>
c0003962:	89 c1                	mov    ecx,eax
c0003964:	8d 47 02             	lea    eax,[edi+0x2]
c0003967:	e8 f5 e2 ff ff       	call   c0001c61 <ld_word>
c000396c:	66 39 c1             	cmp    cx,ax
c000396f:	74 05                	je     c0003976 <load_xdir+0x12f>
c0003971:	bb 02 00 00 00       	mov    ebx,0x2
c0003976:	83 c4 1c             	add    esp,0x1c
c0003979:	89 d8                	mov    eax,ebx
c000397b:	5b                   	pop    ebx
c000397c:	5e                   	pop    esi
c000397d:	5f                   	pop    edi
c000397e:	5d                   	pop    ebp
c000397f:	c3                   	ret    

c0003980 <load_obj_xdir>:
c0003980:	53                   	push   ebx
c0003981:	89 c3                	mov    ebx,eax
c0003983:	83 ec 08             	sub    esp,0x8
c0003986:	8b 02                	mov    eax,DWORD PTR [edx]
c0003988:	89 03                	mov    DWORD PTR [ebx],eax
c000398a:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000398d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003990:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003993:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0003996:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003999:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00039a0:	30 c0                	xor    al,al
c00039a2:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00039a9:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00039ac:	89 d8                	mov    eax,ebx
c00039ae:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c00039b1:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c00039b4:	e8 04 f8 ff ff       	call   c00031bd <dir_sdi>
c00039b9:	85 c0                	test   eax,eax
c00039bb:	75 0b                	jne    c00039c8 <load_obj_xdir+0x48>
c00039bd:	89 d8                	mov    eax,ebx
c00039bf:	83 c4 08             	add    esp,0x8
c00039c2:	5b                   	pop    ebx
c00039c3:	e9 7f fe ff ff       	jmp    c0003847 <load_xdir>
c00039c8:	83 c4 08             	add    esp,0x8
c00039cb:	5b                   	pop    ebx
c00039cc:	c3                   	ret    

c00039cd <dir_read>:
c00039cd:	55                   	push   ebp
c00039ce:	bd 04 00 00 00       	mov    ebp,0x4
c00039d3:	57                   	push   edi
c00039d4:	56                   	push   esi
c00039d5:	be ff ff ff ff       	mov    esi,0xffffffff
c00039da:	53                   	push   ebx
c00039db:	89 c3                	mov    ebx,eax
c00039dd:	83 ec 1c             	sub    esp,0x1c
c00039e0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00039e4:	8b 38                	mov    edi,DWORD PTR [eax]
c00039e6:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00039eb:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00039ee:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00039f1:	89 c8                	mov    eax,ecx
c00039f3:	09 d0                	or     eax,edx
c00039f5:	0f 84 25 01 00 00    	je     c0003b20 <dir_read+0x153>
c00039fb:	89 f8                	mov    eax,edi
c00039fd:	e8 3d ea ff ff       	call   c000243f <move_window>
c0003a02:	89 c5                	mov    ebp,eax
c0003a04:	85 c0                	test   eax,eax
c0003a06:	0f 85 23 01 00 00    	jne    c0003b2f <dir_read+0x162>
c0003a0c:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003a0f:	8a 0a                	mov    cl,BYTE PTR [edx]
c0003a11:	84 c9                	test   cl,cl
c0003a13:	0f 84 11 01 00 00    	je     c0003b2a <dir_read+0x15d>
c0003a19:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003a1c:	75 48                	jne    c0003a66 <dir_read+0x99>
c0003a1e:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003a23:	74 10                	je     c0003a35 <dir_read+0x68>
c0003a25:	80 f9 83             	cmp    cl,0x83
c0003a28:	0f 85 dd 00 00 00    	jne    c0003b0b <dir_read+0x13e>
c0003a2e:	31 ed                	xor    ebp,ebp
c0003a30:	e9 08 01 00 00       	jmp    c0003b3d <dir_read+0x170>
c0003a35:	80 f9 85             	cmp    cl,0x85
c0003a38:	0f 85 cd 00 00 00    	jne    c0003b0b <dir_read+0x13e>
c0003a3e:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a41:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a44:	89 d8                	mov    eax,ebx
c0003a46:	e8 fc fd ff ff       	call   c0003847 <load_xdir>
c0003a4b:	89 c5                	mov    ebp,eax
c0003a4d:	85 c0                	test   eax,eax
c0003a4f:	0f 85 da 00 00 00    	jne    c0003b2f <dir_read+0x162>
c0003a55:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003a58:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003a5b:	83 e0 3f             	and    eax,0x3f
c0003a5e:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a61:	e9 d7 00 00 00       	jmp    c0003b3d <dir_read+0x170>
c0003a66:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003a69:	83 e0 3f             	and    eax,0x3f
c0003a6c:	80 f9 2e             	cmp    cl,0x2e
c0003a6f:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003a73:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a76:	0f 84 8a 00 00 00    	je     c0003b06 <dir_read+0x139>
c0003a7c:	80 f9 e5             	cmp    cl,0xe5
c0003a7f:	0f 84 81 00 00 00    	je     c0003b06 <dir_read+0x139>
c0003a85:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a89:	83 e0 1f             	and    eax,0x1f
c0003a8c:	83 f8 08             	cmp    eax,0x8
c0003a8f:	0f 94 c0             	sete   al
c0003a92:	0f b6 c0             	movzx  eax,al
c0003a95:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003a99:	75 6b                	jne    c0003b06 <dir_read+0x139>
c0003a9b:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003aa0:	75 44                	jne    c0003ae6 <dir_read+0x119>
c0003aa2:	f6 c1 40             	test   cl,0x40
c0003aa5:	74 12                	je     c0003ab9 <dir_read+0xec>
c0003aa7:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003aaa:	83 e1 bf             	and    ecx,0xffffffbf
c0003aad:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003ab1:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003ab4:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003ab7:	eb 06                	jmp    c0003abf <dir_read+0xf2>
c0003ab9:	89 f0                	mov    eax,esi
c0003abb:	38 c8                	cmp    al,cl
c0003abd:	75 47                	jne    c0003b06 <dir_read+0x139>
c0003abf:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003ac3:	be ff ff ff ff       	mov    esi,0xffffffff
c0003ac8:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c0003acb:	75 3e                	jne    c0003b0b <dir_read+0x13e>
c0003acd:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003ad1:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003ad4:	e8 8a e4 ff ff       	call   c0001f63 <pick_lfn>
c0003ad9:	85 c0                	test   eax,eax
c0003adb:	74 2e                	je     c0003b0b <dir_read+0x13e>
c0003add:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003ae1:	8d 71 ff             	lea    esi,[ecx-0x1]
c0003ae4:	eb 25                	jmp    c0003b0b <dir_read+0x13e>
c0003ae6:	89 f0                	mov    eax,esi
c0003ae8:	84 c0                	test   al,al
c0003aea:	75 11                	jne    c0003afd <dir_read+0x130>
c0003aec:	89 d0                	mov    eax,edx
c0003aee:	e8 2a e6 ff ff       	call   c000211d <sum_sfn>
c0003af3:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003af7:	0f 84 31 ff ff ff    	je     c0003a2e <dir_read+0x61>
c0003afd:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003b04:	eb 37                	jmp    c0003b3d <dir_read+0x170>
c0003b06:	be ff ff ff ff       	mov    esi,0xffffffff
c0003b0b:	31 d2                	xor    edx,edx
c0003b0d:	89 d8                	mov    eax,ebx
c0003b0f:	e8 01 fc ff ff       	call   c0003715 <dir_next>
c0003b14:	89 c5                	mov    ebp,eax
c0003b16:	85 c0                	test   eax,eax
c0003b18:	0f 84 cd fe ff ff    	je     c00039eb <dir_read+0x1e>
c0003b1e:	eb 0f                	jmp    c0003b2f <dir_read+0x162>
c0003b20:	85 ed                	test   ebp,ebp
c0003b22:	0f 84 06 ff ff ff    	je     c0003a2e <dir_read+0x61>
c0003b28:	eb 05                	jmp    c0003b2f <dir_read+0x162>
c0003b2a:	bd 04 00 00 00       	mov    ebp,0x4
c0003b2f:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003b36:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003b3d:	83 c4 1c             	add    esp,0x1c
c0003b40:	89 e8                	mov    eax,ebp
c0003b42:	5b                   	pop    ebx
c0003b43:	5e                   	pop    esi
c0003b44:	5f                   	pop    edi
c0003b45:	5d                   	pop    ebp
c0003b46:	c3                   	ret    

c0003b47 <dir_alloc>:
c0003b47:	55                   	push   ebp
c0003b48:	89 d5                	mov    ebp,edx
c0003b4a:	57                   	push   edi
c0003b4b:	31 d2                	xor    edx,edx
c0003b4d:	56                   	push   esi
c0003b4e:	53                   	push   ebx
c0003b4f:	89 c3                	mov    ebx,eax
c0003b51:	83 ec 0c             	sub    esp,0xc
c0003b54:	8b 38                	mov    edi,DWORD PTR [eax]
c0003b56:	e8 62 f6 ff ff       	call   c00031bd <dir_sdi>
c0003b5b:	85 c0                	test   eax,eax
c0003b5d:	75 4e                	jne    c0003bad <dir_alloc+0x66>
c0003b5f:	31 f6                	xor    esi,esi
c0003b61:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003b64:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003b67:	89 f8                	mov    eax,edi
c0003b69:	e8 d1 e8 ff ff       	call   c000243f <move_window>
c0003b6e:	85 c0                	test   eax,eax
c0003b70:	75 3b                	jne    c0003bad <dir_alloc+0x66>
c0003b72:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003b75:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003b78:	8a 12                	mov    dl,BYTE PTR [edx]
c0003b7a:	75 07                	jne    c0003b83 <dir_alloc+0x3c>
c0003b7c:	f7 d2                	not    edx
c0003b7e:	c0 ea 07             	shr    dl,0x7
c0003b81:	eb 0d                	jmp    c0003b90 <dir_alloc+0x49>
c0003b83:	84 d2                	test   dl,dl
c0003b85:	0f 94 c1             	sete   cl
c0003b88:	80 fa e5             	cmp    dl,0xe5
c0003b8b:	0f 94 c2             	sete   dl
c0003b8e:	09 ca                	or     edx,ecx
c0003b90:	84 d2                	test   dl,dl
c0003b92:	74 07                	je     c0003b9b <dir_alloc+0x54>
c0003b94:	46                   	inc    esi
c0003b95:	39 ee                	cmp    esi,ebp
c0003b97:	75 04                	jne    c0003b9d <dir_alloc+0x56>
c0003b99:	eb 1c                	jmp    c0003bb7 <dir_alloc+0x70>
c0003b9b:	31 f6                	xor    esi,esi
c0003b9d:	ba 01 00 00 00       	mov    edx,0x1
c0003ba2:	89 d8                	mov    eax,ebx
c0003ba4:	e8 6c fb ff ff       	call   c0003715 <dir_next>
c0003ba9:	85 c0                	test   eax,eax
c0003bab:	74 b4                	je     c0003b61 <dir_alloc+0x1a>
c0003bad:	83 f8 04             	cmp    eax,0x4
c0003bb0:	75 05                	jne    c0003bb7 <dir_alloc+0x70>
c0003bb2:	b8 07 00 00 00       	mov    eax,0x7
c0003bb7:	83 c4 0c             	add    esp,0xc
c0003bba:	5b                   	pop    ebx
c0003bbb:	5e                   	pop    esi
c0003bbc:	5f                   	pop    edi
c0003bbd:	5d                   	pop    ebp
c0003bbe:	c3                   	ret    

c0003bbf <store_xdir>:
c0003bbf:	55                   	push   ebp
c0003bc0:	57                   	push   edi
c0003bc1:	89 c7                	mov    edi,eax
c0003bc3:	56                   	push   esi
c0003bc4:	53                   	push   ebx
c0003bc5:	83 ec 0c             	sub    esp,0xc
c0003bc8:	8b 00                	mov    eax,DWORD PTR [eax]
c0003bca:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0003bcd:	89 e8                	mov    eax,ebp
c0003bcf:	e8 5b e5 ff ff       	call   c000212f <xdir_sum>
c0003bd4:	0f b7 d0             	movzx  edx,ax
c0003bd7:	8d 45 02             	lea    eax,[ebp+0x2]
c0003bda:	e8 f4 e0 ff ff       	call   c0001cd3 <st_word>
c0003bdf:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003be3:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003be6:	89 f8                	mov    eax,edi
c0003be8:	e8 d0 f5 ff ff       	call   c00031bd <dir_sdi>
c0003bed:	89 c6                	mov    esi,eax
c0003bef:	85 f6                	test   esi,esi
c0003bf1:	75 3d                	jne    c0003c30 <store_xdir+0x71>
c0003bf3:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003bf6:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003bf9:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bfb:	e8 3f e8 ff ff       	call   c000243f <move_window>
c0003c00:	89 c6                	mov    esi,eax
c0003c02:	85 c0                	test   eax,eax
c0003c04:	75 2a                	jne    c0003c30 <store_xdir+0x71>
c0003c06:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003c09:	b9 20 00 00 00       	mov    ecx,0x20
c0003c0e:	89 ea                	mov    edx,ebp
c0003c10:	e8 cb e0 ff ff       	call   c0001ce0 <mem_cpy>
c0003c15:	8b 07                	mov    eax,DWORD PTR [edi]
c0003c17:	85 db                	test   ebx,ebx
c0003c19:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003c1d:	74 11                	je     c0003c30 <store_xdir+0x71>
c0003c1f:	31 d2                	xor    edx,edx
c0003c21:	89 f8                	mov    eax,edi
c0003c23:	83 c5 20             	add    ebp,0x20
c0003c26:	e8 ea fa ff ff       	call   c0003715 <dir_next>
c0003c2b:	4b                   	dec    ebx
c0003c2c:	89 c6                	mov    esi,eax
c0003c2e:	eb bf                	jmp    c0003bef <store_xdir+0x30>
c0003c30:	89 f0                	mov    eax,esi
c0003c32:	83 fe 02             	cmp    esi,0x2
c0003c35:	76 05                	jbe    c0003c3c <store_xdir+0x7d>
c0003c37:	b8 02 00 00 00       	mov    eax,0x2
c0003c3c:	83 c4 0c             	add    esp,0xc
c0003c3f:	5b                   	pop    ebx
c0003c40:	5e                   	pop    esi
c0003c41:	5f                   	pop    edi
c0003c42:	5d                   	pop    ebp
c0003c43:	c3                   	ret    

c0003c44 <dir_remove>:
c0003c44:	57                   	push   edi
c0003c45:	56                   	push   esi
c0003c46:	53                   	push   ebx
c0003c47:	89 c3                	mov    ebx,eax
c0003c49:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003c4c:	8b 30                	mov    esi,DWORD PTR [eax]
c0003c4e:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003c51:	83 fa ff             	cmp    edx,0xffffffff
c0003c54:	74 09                	je     c0003c5f <dir_remove+0x1b>
c0003c56:	e8 62 f5 ff ff       	call   c00031bd <dir_sdi>
c0003c5b:	85 c0                	test   eax,eax
c0003c5d:	75 41                	jne    c0003ca0 <dir_remove+0x5c>
c0003c5f:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003c62:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003c65:	89 f0                	mov    eax,esi
c0003c67:	e8 d3 e7 ff ff       	call   c000243f <move_window>
c0003c6c:	85 c0                	test   eax,eax
c0003c6e:	75 26                	jne    c0003c96 <dir_remove+0x52>
c0003c70:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003c73:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003c76:	75 05                	jne    c0003c7d <dir_remove+0x39>
c0003c78:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003c7b:	eb 03                	jmp    c0003c80 <dir_remove+0x3c>
c0003c7d:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003c80:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003c84:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003c87:	73 17                	jae    c0003ca0 <dir_remove+0x5c>
c0003c89:	31 d2                	xor    edx,edx
c0003c8b:	89 d8                	mov    eax,ebx
c0003c8d:	e8 83 fa ff ff       	call   c0003715 <dir_next>
c0003c92:	85 c0                	test   eax,eax
c0003c94:	74 c9                	je     c0003c5f <dir_remove+0x1b>
c0003c96:	83 f8 04             	cmp    eax,0x4
c0003c99:	75 05                	jne    c0003ca0 <dir_remove+0x5c>
c0003c9b:	b8 02 00 00 00       	mov    eax,0x2
c0003ca0:	5b                   	pop    ebx
c0003ca1:	5e                   	pop    esi
c0003ca2:	5f                   	pop    edi
c0003ca3:	c3                   	ret    

c0003ca4 <create_name>:
c0003ca4:	55                   	push   ebp
c0003ca5:	89 d5                	mov    ebp,edx
c0003ca7:	57                   	push   edi
c0003ca8:	89 c7                	mov    edi,eax
c0003caa:	56                   	push   esi
c0003cab:	31 f6                	xor    esi,esi
c0003cad:	53                   	push   ebx
c0003cae:	83 ec 3c             	sub    esp,0x3c
c0003cb1:	8b 02                	mov    eax,DWORD PTR [edx]
c0003cb3:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003cb7:	8b 07                	mov    eax,DWORD PTR [edi]
c0003cb9:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003cbc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003cc0:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003cc4:	e8 72 e0 ff ff       	call   c0001d3b <tchar2uni>
c0003cc9:	89 c3                	mov    ebx,eax
c0003ccb:	83 f8 ff             	cmp    eax,0xffffffff
c0003cce:	75 0a                	jne    c0003cda <create_name+0x36>
c0003cd0:	b8 06 00 00 00       	mov    eax,0x6
c0003cd5:	e9 9e 02 00 00       	jmp    c0003f78 <create_name+0x2d4>
c0003cda:	3d ff ff 00 00       	cmp    eax,0xffff
c0003cdf:	76 0c                	jbe    c0003ced <create_name+0x49>
c0003ce1:	c1 e8 10             	shr    eax,0x10
c0003ce4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003ce8:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003cec:	46                   	inc    esi
c0003ced:	66 83 fb 1f          	cmp    bx,0x1f
c0003cf1:	76 4f                	jbe    c0003d42 <create_name+0x9e>
c0003cf3:	66 83 fb 5c          	cmp    bx,0x5c
c0003cf7:	74 35                	je     c0003d2e <create_name+0x8a>
c0003cf9:	66 83 fb 2f          	cmp    bx,0x2f
c0003cfd:	74 2f                	je     c0003d2e <create_name+0x8a>
c0003cff:	66 83 fb 7f          	cmp    bx,0x7f
c0003d03:	77 11                	ja     c0003d16 <create_name+0x72>
c0003d05:	0f b7 d3             	movzx  edx,bx
c0003d08:	b8 52 8d 02 c0       	mov    eax,0xc0028d52
c0003d0d:	e8 11 e0 ff ff       	call   c0001d23 <chk_chr>
c0003d12:	85 c0                	test   eax,eax
c0003d14:	75 ba                	jne    c0003cd0 <create_name+0x2c>
c0003d16:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003d1c:	77 b2                	ja     c0003cd0 <create_name+0x2c>
c0003d1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d22:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003d26:	46                   	inc    esi
c0003d27:	eb 97                	jmp    c0003cc0 <create_name+0x1c>
c0003d29:	40                   	inc    eax
c0003d2a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003d2e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d32:	8a 10                	mov    dl,BYTE PTR [eax]
c0003d34:	80 fa 2f             	cmp    dl,0x2f
c0003d37:	74 f0                	je     c0003d29 <create_name+0x85>
c0003d39:	80 fa 5c             	cmp    dl,0x5c
c0003d3c:	74 eb                	je     c0003d29 <create_name+0x85>
c0003d3e:	31 db                	xor    ebx,ebx
c0003d40:	eb 02                	jmp    c0003d44 <create_name+0xa0>
c0003d42:	b3 04                	mov    bl,0x4
c0003d44:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d48:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003d4b:	85 f6                	test   esi,esi
c0003d4d:	74 18                	je     c0003d67 <create_name+0xc3>
c0003d4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d53:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003d58:	66 83 f8 20          	cmp    ax,0x20
c0003d5c:	74 06                	je     c0003d64 <create_name+0xc0>
c0003d5e:	66 83 f8 2e          	cmp    ax,0x2e
c0003d62:	75 03                	jne    c0003d67 <create_name+0xc3>
c0003d64:	4e                   	dec    esi
c0003d65:	eb e4                	jmp    c0003d4b <create_name+0xa7>
c0003d67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d6b:	31 ed                	xor    ebp,ebp
c0003d6d:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003d73:	85 f6                	test   esi,esi
c0003d75:	0f 84 55 ff ff ff    	je     c0003cd0 <create_name+0x2c>
c0003d7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d7f:	8d 55 01             	lea    edx,[ebp+0x1]
c0003d82:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003d86:	66 83 f8 20          	cmp    ax,0x20
c0003d8a:	75 04                	jne    c0003d90 <create_name+0xec>
c0003d8c:	89 d5                	mov    ebp,edx
c0003d8e:	eb eb                	jmp    c0003d7b <create_name+0xd7>
c0003d90:	85 ed                	test   ebp,ebp
c0003d92:	75 06                	jne    c0003d9a <create_name+0xf6>
c0003d94:	66 83 f8 2e          	cmp    ax,0x2e
c0003d98:	75 08                	jne    c0003da2 <create_name+0xfe>
c0003d9a:	83 cb 03             	or     ebx,0x3
c0003d9d:	eb 03                	jmp    c0003da2 <create_name+0xfe>
c0003d9f:	4e                   	dec    esi
c0003da0:	74 0c                	je     c0003dae <create_name+0x10a>
c0003da2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003da6:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003dac:	75 f1                	jne    c0003d9f <create_name+0xfb>
c0003dae:	b9 0b 00 00 00       	mov    ecx,0xb
c0003db3:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003db6:	ba 20 00 00 00       	mov    edx,0x20
c0003dbb:	e8 35 df ff ff       	call   c0001cf5 <mem_set>
c0003dc0:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003dc8:	31 c9                	xor    ecx,ecx
c0003dca:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003dcf:	8d 45 01             	lea    eax,[ebp+0x1]
c0003dd2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003dd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003dda:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003dde:	66 85 ed             	test   bp,bp
c0003de1:	0f 84 30 01 00 00    	je     c0003f17 <create_name+0x273>
c0003de7:	66 83 fd 20          	cmp    bp,0x20
c0003deb:	74 10                	je     c0003dfd <create_name+0x159>
c0003ded:	66 83 fd 2e          	cmp    bp,0x2e
c0003df1:	75 13                	jne    c0003e06 <create_name+0x162>
c0003df3:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003df7:	0f 84 6b 01 00 00    	je     c0003f68 <create_name+0x2c4>
c0003dfd:	83 cb 03             	or     ebx,0x3
c0003e00:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003e04:	eb c9                	jmp    c0003dcf <create_name+0x12b>
c0003e06:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003e0a:	73 0b                	jae    c0003e17 <create_name+0x173>
c0003e0c:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e10:	75 47                	jne    c0003e59 <create_name+0x1b5>
c0003e12:	e9 51 01 00 00       	jmp    c0003f68 <create_name+0x2c4>
c0003e17:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003e1c:	75 10                	jne    c0003e2e <create_name+0x18a>
c0003e1e:	83 cb 03             	or     ebx,0x3
c0003e21:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e29:	e9 e9 00 00 00       	jmp    c0003f17 <create_name+0x273>
c0003e2e:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e32:	74 0d                	je     c0003e41 <create_name+0x19d>
c0003e34:	83 cb 03             	or     ebx,0x3
c0003e37:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e3b:	0f 87 d6 00 00 00    	ja     c0003f17 <create_name+0x273>
c0003e41:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003e46:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003e4a:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e52:	b9 08 00 00 00       	mov    ecx,0x8
c0003e57:	eb a7                	jmp    c0003e00 <create_name+0x15c>
c0003e59:	66 83 fd 7f          	cmp    bp,0x7f
c0003e5d:	76 68                	jbe    c0003ec7 <create_name+0x223>
c0003e5f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003e63:	88 da                	mov    dl,bl
c0003e65:	83 ca 02             	or     edx,0x2
c0003e68:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003e6c:	50                   	push   eax
c0003e6d:	50                   	push   eax
c0003e6e:	68 b5 01 00 00       	push   0x1b5
c0003e73:	55                   	push   ebp
c0003e74:	e8 48 46 00 00       	call   c00084c1 <ff_uni2oem>
c0003e79:	83 c4 10             	add    esp,0x10
c0003e7c:	89 c5                	mov    ebp,eax
c0003e7e:	a8 80                	test   al,0x80
c0003e80:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003e84:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e88:	74 0c                	je     c0003e96 <create_name+0x1f2>
c0003e8a:	83 e5 7f             	and    ebp,0x7f
c0003e8d:	0f b6 ad a0 8c 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffd7360]
c0003e94:	eb 2a                	jmp    c0003ec0 <create_name+0x21c>
c0003e96:	66 3d ff 00          	cmp    ax,0xff
c0003e9a:	76 24                	jbe    c0003ec0 <create_name+0x21c>
c0003e9c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003ea0:	48                   	dec    eax
c0003ea1:	39 c8                	cmp    eax,ecx
c0003ea3:	77 0c                	ja     c0003eb1 <create_name+0x20d>
c0003ea5:	83 cb 03             	or     ebx,0x3
c0003ea8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003eac:	e9 4f ff ff ff       	jmp    c0003e00 <create_name+0x15c>
c0003eb1:	89 e8                	mov    eax,ebp
c0003eb3:	88 d3                	mov    bl,dl
c0003eb5:	66 c1 e8 08          	shr    ax,0x8
c0003eb9:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003ebd:	41                   	inc    ecx
c0003ebe:	eb 4b                	jmp    c0003f0b <create_name+0x267>
c0003ec0:	88 d3                	mov    bl,dl
c0003ec2:	66 85 ed             	test   bp,bp
c0003ec5:	74 19                	je     c0003ee0 <create_name+0x23c>
c0003ec7:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003ecb:	0f b7 d5             	movzx  edx,bp
c0003ece:	b8 5b 8d 02 c0       	mov    eax,0xc0028d5b
c0003ed3:	e8 4b de ff ff       	call   c0001d23 <chk_chr>
c0003ed8:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003edc:	85 c0                	test   eax,eax
c0003ede:	74 0a                	je     c0003eea <create_name+0x246>
c0003ee0:	83 cb 03             	or     ebx,0x3
c0003ee3:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003ee8:	eb 21                	jmp    c0003f0b <create_name+0x267>
c0003eea:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003eed:	66 83 f8 19          	cmp    ax,0x19
c0003ef1:	77 07                	ja     c0003efa <create_name+0x256>
c0003ef3:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003ef8:	eb 11                	jmp    c0003f0b <create_name+0x267>
c0003efa:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003efd:	66 83 f8 19          	cmp    ax,0x19
c0003f01:	77 08                	ja     c0003f0b <create_name+0x267>
c0003f03:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003f08:	83 ed 20             	sub    ebp,0x20
c0003f0b:	89 e8                	mov    eax,ebp
c0003f0d:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003f11:	41                   	inc    ecx
c0003f12:	e9 e9 fe ff ff       	jmp    c0003e00 <create_name+0x15c>
c0003f17:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003f1b:	75 04                	jne    c0003f21 <create_name+0x27d>
c0003f1d:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003f21:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003f26:	75 05                	jne    c0003f2d <create_name+0x289>
c0003f28:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003f2d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f31:	83 e0 0c             	and    eax,0xc
c0003f34:	3c 0c                	cmp    al,0xc
c0003f36:	74 0b                	je     c0003f43 <create_name+0x29f>
c0003f38:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f3c:	83 e0 03             	and    eax,0x3
c0003f3f:	3c 03                	cmp    al,0x3
c0003f41:	75 05                	jne    c0003f48 <create_name+0x2a4>
c0003f43:	83 cb 02             	or     ebx,0x2
c0003f46:	eb 19                	jmp    c0003f61 <create_name+0x2bd>
c0003f48:	f6 c3 02             	test   bl,0x2
c0003f4b:	75 14                	jne    c0003f61 <create_name+0x2bd>
c0003f4d:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003f52:	74 03                	je     c0003f57 <create_name+0x2b3>
c0003f54:	83 cb 10             	or     ebx,0x10
c0003f57:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003f5c:	74 03                	je     c0003f61 <create_name+0x2bd>
c0003f5e:	83 cb 08             	or     ebx,0x8
c0003f61:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003f64:	31 c0                	xor    eax,eax
c0003f66:	eb 10                	jmp    c0003f78 <create_name+0x2d4>
c0003f68:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003f6d:	0f 85 ce fe ff ff    	jne    c0003e41 <create_name+0x19d>
c0003f73:	e9 a6 fe ff ff       	jmp    c0003e1e <create_name+0x17a>
c0003f78:	83 c4 3c             	add    esp,0x3c
c0003f7b:	5b                   	pop    ebx
c0003f7c:	5e                   	pop    esi
c0003f7d:	5f                   	pop    edi
c0003f7e:	5d                   	pop    ebp
c0003f7f:	c3                   	ret    

c0003f80 <xname_sum>:
c0003f80:	56                   	push   esi
c0003f81:	53                   	push   ebx
c0003f82:	89 c6                	mov    esi,eax
c0003f84:	51                   	push   ecx
c0003f85:	31 db                	xor    ebx,ebx
c0003f87:	83 c6 02             	add    esi,0x2
c0003f8a:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003f8e:	66 85 c0             	test   ax,ax
c0003f91:	74 1f                	je     c0003fb2 <xname_sum+0x32>
c0003f93:	83 ec 0c             	sub    esp,0xc
c0003f96:	66 d1 cb             	ror    bx,1
c0003f99:	50                   	push   eax
c0003f9a:	e8 1e 46 00 00       	call   c00085bd <ff_wtoupper>
c0003f9f:	83 c4 10             	add    esp,0x10
c0003fa2:	0f b6 d0             	movzx  edx,al
c0003fa5:	66 c1 e8 08          	shr    ax,0x8
c0003fa9:	01 d3                	add    ebx,edx
c0003fab:	66 d1 cb             	ror    bx,1
c0003fae:	01 c3                	add    ebx,eax
c0003fb0:	eb d5                	jmp    c0003f87 <xname_sum+0x7>
c0003fb2:	89 d8                	mov    eax,ebx
c0003fb4:	5a                   	pop    edx
c0003fb5:	5b                   	pop    ebx
c0003fb6:	5e                   	pop    esi
c0003fb7:	c3                   	ret    

c0003fb8 <create_xdir>:
c0003fb8:	55                   	push   ebp
c0003fb9:	b9 40 00 00 00       	mov    ecx,0x40
c0003fbe:	57                   	push   edi
c0003fbf:	bd 01 00 00 00       	mov    ebp,0x1
c0003fc4:	56                   	push   esi
c0003fc5:	31 ff                	xor    edi,edi
c0003fc7:	53                   	push   ebx
c0003fc8:	be 40 00 00 00       	mov    esi,0x40
c0003fcd:	89 c3                	mov    ebx,eax
c0003fcf:	83 ec 1c             	sub    esp,0x1c
c0003fd2:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003fd6:	31 d2                	xor    edx,edx
c0003fd8:	e8 18 dd ff ff       	call   c0001cf5 <mem_set>
c0003fdd:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003fe0:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003fe4:	31 c9                	xor    ecx,ecx
c0003fe6:	8d 46 01             	lea    eax,[esi+0x1]
c0003fe9:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003fed:	83 c6 02             	add    esi,0x2
c0003ff0:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003ff4:	66 85 ed             	test   bp,bp
c0003ff7:	74 12                	je     c000400b <create_xdir+0x53>
c0003ff9:	0f b6 c1             	movzx  eax,cl
c0003ffc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004000:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0004004:	66 83 fd 01          	cmp    bp,0x1
c0004008:	80 d9 ff             	sbb    cl,0xff
c000400b:	8d 04 33             	lea    eax,[ebx+esi*1]
c000400e:	0f b7 d5             	movzx  edx,bp
c0004011:	83 c6 02             	add    esi,0x2
c0004014:	e8 ba dc ff ff       	call   c0001cd3 <st_word>
c0004019:	f7 c6 1f 00 00 00    	test   esi,0x1f
c000401f:	75 d3                	jne    c0003ff4 <create_xdir+0x3c>
c0004021:	8d 47 01             	lea    eax,[edi+0x1]
c0004024:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004028:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000402c:	0f b6 c1             	movzx  eax,cl
c000402f:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0004034:	74 07                	je     c000403d <create_xdir+0x85>
c0004036:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c000403b:	eb a9                	jmp    c0003fe6 <create_xdir+0x2e>
c000403d:	8d 47 02             	lea    eax,[edi+0x2]
c0004040:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0004043:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0004046:	89 d0                	mov    eax,edx
c0004048:	e8 33 ff ff ff       	call   c0003f80 <xname_sum>
c000404d:	83 c4 1c             	add    esp,0x1c
c0004050:	0f b7 d0             	movzx  edx,ax
c0004053:	8d 43 24             	lea    eax,[ebx+0x24]
c0004056:	5b                   	pop    ebx
c0004057:	5e                   	pop    esi
c0004058:	5f                   	pop    edi
c0004059:	5d                   	pop    ebp
c000405a:	e9 74 dc ff ff       	jmp    c0001cd3 <st_word>

c000405f <cmp_lfn>:
c000405f:	55                   	push   ebp
c0004060:	57                   	push   edi
c0004061:	89 d7                	mov    edi,edx
c0004063:	56                   	push   esi
c0004064:	53                   	push   ebx
c0004065:	83 ec 1c             	sub    esp,0x1c
c0004068:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000406c:	8d 42 1a             	lea    eax,[edx+0x1a]
c000406f:	e8 ed db ff ff       	call   c0001c61 <ld_word>
c0004074:	66 85 c0             	test   ax,ax
c0004077:	74 07                	je     c0004080 <cmp_lfn+0x21>
c0004079:	31 c0                	xor    eax,eax
c000407b:	e9 9a 00 00 00       	jmp    c000411a <cmp_lfn+0xbb>
c0004080:	8a 1f                	mov    bl,BYTE PTR [edi]
c0004082:	bd 01 00 00 00       	mov    ebp,0x1
c0004087:	83 e3 3f             	and    ebx,0x3f
c000408a:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004092:	4b                   	dec    ebx
c0004093:	6b db 0d             	imul   ebx,ebx,0xd
c0004096:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000409a:	0f b6 80 20 8d 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd72e0]
c00040a1:	01 f8                	add    eax,edi
c00040a3:	e8 b9 db ff ff       	call   c0001c61 <ld_word>
c00040a8:	66 85 ed             	test   bp,bp
c00040ab:	89 c6                	mov    esi,eax
c00040ad:	74 3c                	je     c00040eb <cmp_lfn+0x8c>
c00040af:	81 fb ff 00 00 00    	cmp    ebx,0xff
c00040b5:	77 c2                	ja     c0004079 <cmp_lfn+0x1a>
c00040b7:	83 ec 0c             	sub    esp,0xc
c00040ba:	0f b7 c0             	movzx  eax,ax
c00040bd:	50                   	push   eax
c00040be:	e8 fa 44 00 00       	call   c00085bd <ff_wtoupper>
c00040c3:	89 c5                	mov    ebp,eax
c00040c5:	8d 43 01             	lea    eax,[ebx+0x1]
c00040c8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00040cc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00040d0:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c00040d4:	89 04 24             	mov    DWORD PTR [esp],eax
c00040d7:	e8 e1 44 00 00       	call   c00085bd <ff_wtoupper>
c00040dc:	83 c4 10             	add    esp,0x10
c00040df:	39 c5                	cmp    ebp,eax
c00040e1:	75 96                	jne    c0004079 <cmp_lfn+0x1a>
c00040e3:	89 f5                	mov    ebp,esi
c00040e5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00040e9:	eb 04                	jmp    c00040ef <cmp_lfn+0x90>
c00040eb:	66 46                	inc    si
c00040ed:	75 8a                	jne    c0004079 <cmp_lfn+0x1a>
c00040ef:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c00040f3:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c00040f8:	75 9c                	jne    c0004096 <cmp_lfn+0x37>
c00040fa:	f6 07 40             	test   BYTE PTR [edi],0x40
c00040fd:	74 16                	je     c0004115 <cmp_lfn+0xb6>
c00040ff:	66 85 ed             	test   bp,bp
c0004102:	74 11                	je     c0004115 <cmp_lfn+0xb6>
c0004104:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004108:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c000410d:	0f 94 c0             	sete   al
c0004110:	0f b6 c0             	movzx  eax,al
c0004113:	eb 05                	jmp    c000411a <cmp_lfn+0xbb>
c0004115:	b8 01 00 00 00       	mov    eax,0x1
c000411a:	83 c4 1c             	add    esp,0x1c
c000411d:	5b                   	pop    ebx
c000411e:	5e                   	pop    esi
c000411f:	5f                   	pop    edi
c0004120:	5d                   	pop    ebp
c0004121:	c3                   	ret    

c0004122 <dir_find>:
c0004122:	55                   	push   ebp
c0004123:	31 d2                	xor    edx,edx
c0004125:	57                   	push   edi
c0004126:	56                   	push   esi
c0004127:	53                   	push   ebx
c0004128:	89 c3                	mov    ebx,eax
c000412a:	83 ec 1c             	sub    esp,0x1c
c000412d:	8b 30                	mov    esi,DWORD PTR [eax]
c000412f:	e8 89 f0 ff ff       	call   c00031bd <dir_sdi>
c0004134:	89 04 24             	mov    DWORD PTR [esp],eax
c0004137:	85 c0                	test   eax,eax
c0004139:	0f 85 9e 01 00 00    	jne    c00042dd <dir_find+0x1bb>
c000413f:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004142:	0f 85 8d 00 00 00    	jne    c00041d5 <dir_find+0xb3>
c0004148:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000414b:	e8 30 fe ff ff       	call   c0003f80 <xname_sum>
c0004150:	89 c7                	mov    edi,eax
c0004152:	31 d2                	xor    edx,edx
c0004154:	89 d8                	mov    eax,ebx
c0004156:	e8 72 f8 ff ff       	call   c00039cd <dir_read>
c000415b:	85 c0                	test   eax,eax
c000415d:	0f 85 5e 01 00 00    	jne    c00042c1 <dir_find+0x19f>
c0004163:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0004166:	8d 41 24             	lea    eax,[ecx+0x24]
c0004169:	e8 f3 da ff ff       	call   c0001c61 <ld_word>
c000416e:	66 39 f8             	cmp    ax,di
c0004171:	75 df                	jne    c0004152 <dir_find+0x30>
c0004173:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c0004176:	31 ed                	xor    ebp,ebp
c0004178:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000417c:	ba 40 00 00 00       	mov    edx,0x40
c0004181:	89 e9                	mov    ecx,ebp
c0004183:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c0004187:	0f 84 42 01 00 00    	je     c00042cf <dir_find+0x1ad>
c000418d:	f6 c2 1f             	test   dl,0x1f
c0004190:	75 03                	jne    c0004195 <dir_find+0x73>
c0004192:	83 c2 02             	add    edx,0x2
c0004195:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004199:	89 d0                	mov    eax,edx
c000419b:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c000419e:	e8 be da ff ff       	call   c0001c61 <ld_word>
c00041a3:	83 ec 0c             	sub    esp,0xc
c00041a6:	0f b7 c0             	movzx  eax,ax
c00041a9:	50                   	push   eax
c00041aa:	e8 0e 44 00 00       	call   c00085bd <ff_wtoupper>
c00041af:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00041b3:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00041b6:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c00041ba:	89 04 24             	mov    DWORD PTR [esp],eax
c00041bd:	e8 fb 43 00 00       	call   c00085bd <ff_wtoupper>
c00041c2:	83 c4 10             	add    esp,0x10
c00041c5:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c00041c9:	75 87                	jne    c0004152 <dir_find+0x30>
c00041cb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00041cf:	45                   	inc    ebp
c00041d0:	83 c2 02             	add    edx,0x2
c00041d3:	eb ac                	jmp    c0004181 <dir_find+0x5f>
c00041d5:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00041dc:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c00041e1:	bf ff ff ff ff       	mov    edi,0xffffffff
c00041e6:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00041e9:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00041ec:	89 f0                	mov    eax,esi
c00041ee:	e8 4c e2 ff ff       	call   c000243f <move_window>
c00041f3:	85 c0                	test   eax,eax
c00041f5:	0f 85 c6 00 00 00    	jne    c00042c1 <dir_find+0x19f>
c00041fb:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c00041fe:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c0004201:	84 c9                	test   cl,cl
c0004203:	0f 84 bd 00 00 00    	je     c00042c6 <dir_find+0x1a4>
c0004209:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c000420c:	88 d0                	mov    al,dl
c000420e:	83 e0 3f             	and    eax,0x3f
c0004211:	80 f9 e5             	cmp    cl,0xe5
c0004214:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0004217:	0f 84 87 00 00 00    	je     c00042a4 <dir_find+0x182>
c000421d:	80 e2 08             	and    dl,0x8
c0004220:	74 06                	je     c0004228 <dir_find+0x106>
c0004222:	3c 0f                	cmp    al,0xf
c0004224:	75 7e                	jne    c00042a4 <dir_find+0x182>
c0004226:	eb 04                	jmp    c000422c <dir_find+0x10a>
c0004228:	3c 0f                	cmp    al,0xf
c000422a:	75 4c                	jne    c0004278 <dir_find+0x156>
c000422c:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c0004230:	75 7e                	jne    c00042b0 <dir_find+0x18e>
c0004232:	f6 c1 40             	test   cl,0x40
c0004235:	74 12                	je     c0004249 <dir_find+0x127>
c0004237:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c000423a:	83 e1 bf             	and    ecx,0xffffffbf
c000423d:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0004241:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004244:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004247:	eb 06                	jmp    c000424f <dir_find+0x12d>
c0004249:	89 f8                	mov    eax,edi
c000424b:	38 c8                	cmp    al,cl
c000424d:	75 5c                	jne    c00042ab <dir_find+0x189>
c000424f:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0004253:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004258:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c000425b:	75 53                	jne    c00042b0 <dir_find+0x18e>
c000425d:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0004261:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004264:	89 ea                	mov    edx,ebp
c0004266:	e8 f4 fd ff ff       	call   c000405f <cmp_lfn>
c000426b:	85 c0                	test   eax,eax
c000426d:	74 41                	je     c00042b0 <dir_find+0x18e>
c000426f:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0004273:	8d 79 ff             	lea    edi,[ecx-0x1]
c0004276:	eb 38                	jmp    c00042b0 <dir_find+0x18e>
c0004278:	89 f8                	mov    eax,edi
c000427a:	84 c0                	test   al,al
c000427c:	75 0d                	jne    c000428b <dir_find+0x169>
c000427e:	89 e8                	mov    eax,ebp
c0004280:	e8 98 de ff ff       	call   c000211d <sum_sfn>
c0004285:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c0004289:	74 52                	je     c00042dd <dir_find+0x1bb>
c000428b:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c000428f:	75 13                	jne    c00042a4 <dir_find+0x182>
c0004291:	8d 53 3c             	lea    edx,[ebx+0x3c]
c0004294:	b9 0b 00 00 00       	mov    ecx,0xb
c0004299:	89 e8                	mov    eax,ebp
c000429b:	e8 60 da ff ff       	call   c0001d00 <mem_cmp>
c00042a0:	85 c0                	test   eax,eax
c00042a2:	74 39                	je     c00042dd <dir_find+0x1bb>
c00042a4:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00042ab:	bf ff ff ff ff       	mov    edi,0xffffffff
c00042b0:	31 d2                	xor    edx,edx
c00042b2:	89 d8                	mov    eax,ebx
c00042b4:	e8 5c f4 ff ff       	call   c0003715 <dir_next>
c00042b9:	85 c0                	test   eax,eax
c00042bb:	0f 84 25 ff ff ff    	je     c00041e6 <dir_find+0xc4>
c00042c1:	89 04 24             	mov    DWORD PTR [esp],eax
c00042c4:	eb 17                	jmp    c00042dd <dir_find+0x1bb>
c00042c6:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00042cd:	eb 0e                	jmp    c00042dd <dir_find+0x1bb>
c00042cf:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00042d2:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c00042d7:	0f 85 75 fe ff ff    	jne    c0004152 <dir_find+0x30>
c00042dd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00042e0:	83 c4 1c             	add    esp,0x1c
c00042e3:	5b                   	pop    ebx
c00042e4:	5e                   	pop    esi
c00042e5:	5f                   	pop    edi
c00042e6:	5d                   	pop    ebp
c00042e7:	c3                   	ret    

c00042e8 <dir_register>:
c00042e8:	55                   	push   ebp
c00042e9:	57                   	push   edi
c00042ea:	56                   	push   esi
c00042eb:	be 06 00 00 00       	mov    esi,0x6
c00042f0:	53                   	push   ebx
c00042f1:	83 ec 6c             	sub    esp,0x6c
c00042f4:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00042f8:	0f 85 62 02 00 00    	jne    c0004560 <dir_register+0x278>
c00042fe:	8b 28                	mov    ebp,DWORD PTR [eax]
c0004300:	31 ff                	xor    edi,edi
c0004302:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0004305:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c000430a:	74 03                	je     c000430f <dir_register+0x27>
c000430c:	47                   	inc    edi
c000430d:	eb f6                	jmp    c0004305 <dir_register+0x1d>
c000430f:	89 c3                	mov    ebx,eax
c0004311:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0004315:	0f 85 e1 00 00 00    	jne    c00043fc <dir_register+0x114>
c000431b:	83 c7 0e             	add    edi,0xe
c000431e:	b9 0f 00 00 00       	mov    ecx,0xf
c0004323:	89 f8                	mov    eax,edi
c0004325:	31 d2                	xor    edx,edx
c0004327:	f7 f1                	div    ecx
c0004329:	8d 50 02             	lea    edx,[eax+0x2]
c000432c:	89 c7                	mov    edi,eax
c000432e:	89 d8                	mov    eax,ebx
c0004330:	e8 12 f8 ff ff       	call   c0003b47 <dir_alloc>
c0004335:	89 c6                	mov    esi,eax
c0004337:	85 c0                	test   eax,eax
c0004339:	0f 85 21 02 00 00    	jne    c0004560 <dir_register+0x278>
c000433f:	81 c7 01 00 00 08    	add    edi,0x8000001
c0004345:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004348:	c1 e7 05             	shl    edi,0x5
c000434b:	29 f8                	sub    eax,edi
c000434d:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004350:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004353:	a8 04                	test   al,0x4
c0004355:	0f 84 91 00 00 00    	je     c00043ec <dir_register+0x104>
c000435b:	83 e0 fb             	and    eax,0xfffffffb
c000435e:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004361:	89 d8                	mov    eax,ebx
c0004363:	e8 25 ec ff ff       	call   c0002f8d <fill_first_frag>
c0004368:	85 c0                	test   eax,eax
c000436a:	0f 85 ee 01 00 00    	jne    c000455e <dir_register+0x276>
c0004370:	83 c9 ff             	or     ecx,0xffffffff
c0004373:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0004376:	89 d8                	mov    eax,ebx
c0004378:	e8 db eb ff ff       	call   c0002f58 <fill_last_frag>
c000437d:	85 c0                	test   eax,eax
c000437f:	0f 85 d9 01 00 00    	jne    c000455e <dir_register+0x276>
c0004385:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0004389:	74 61                	je     c00043ec <dir_register+0x104>
c000438b:	89 da                	mov    edx,ebx
c000438d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004391:	e8 ea f5 ff ff       	call   c0003980 <load_obj_xdir>
c0004396:	85 c0                	test   eax,eax
c0004398:	0f 85 c0 01 00 00    	jne    c000455e <dir_register+0x276>
c000439e:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c00043a2:	31 c9                	xor    ecx,ecx
c00043a4:	c1 e2 09             	shl    edx,0x9
c00043a7:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c00043aa:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c00043ad:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00043b0:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00043b3:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043b6:	83 c0 38             	add    eax,0x38
c00043b9:	e8 1c d9 ff ff       	call   c0001cda <st_qword>
c00043be:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043c1:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00043c4:	83 c0 28             	add    eax,0x28
c00043c7:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00043ca:	e8 0b d9 ff ff       	call   c0001cda <st_qword>
c00043cf:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c00043d2:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00043d5:	83 c8 01             	or     eax,0x1
c00043d8:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00043db:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043df:	e8 db f7 ff ff       	call   c0003bbf <store_xdir>
c00043e4:	85 c0                	test   eax,eax
c00043e6:	0f 85 72 01 00 00    	jne    c000455e <dir_register+0x276>
c00043ec:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00043ef:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043f2:	e8 c1 fb ff ff       	call   c0003fb8 <create_xdir>
c00043f7:	e9 64 01 00 00       	jmp    c0004560 <dir_register+0x278>
c00043fc:	8d 40 3c             	lea    eax,[eax+0x3c]
c00043ff:	b9 0c 00 00 00       	mov    ecx,0xc
c0004404:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004408:	89 c2                	mov    edx,eax
c000440a:	8d 44 24 14          	lea    eax,[esp+0x14]
c000440e:	e8 cd d8 ff ff       	call   c0001ce0 <mem_cpy>
c0004413:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0004418:	74 58                	je     c0004472 <dir_register+0x18a>
c000441a:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c000441e:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0004426:	83 ec 0c             	sub    esp,0xc
c0004429:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c000442c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004430:	8d 54 24 24          	lea    edx,[esp+0x24]
c0004434:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004438:	e8 24 dc ff ff       	call   c0002061 <gen_numname>
c000443d:	89 d8                	mov    eax,ebx
c000443f:	e8 de fc ff ff       	call   c0004122 <dir_find>
c0004444:	83 c4 10             	add    esp,0x10
c0004447:	89 c6                	mov    esi,eax
c0004449:	85 c0                	test   eax,eax
c000444b:	75 15                	jne    c0004462 <dir_register+0x17a>
c000444d:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0004451:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c0004456:	75 ce                	jne    c0004426 <dir_register+0x13e>
c0004458:	be 07 00 00 00       	mov    esi,0x7
c000445d:	e9 fe 00 00 00       	jmp    c0004560 <dir_register+0x278>
c0004462:	83 f8 04             	cmp    eax,0x4
c0004465:	0f 85 f5 00 00 00    	jne    c0004560 <dir_register+0x278>
c000446b:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000446f:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c0004472:	b9 01 00 00 00       	mov    ecx,0x1
c0004477:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c000447c:	74 0f                	je     c000448d <dir_register+0x1a5>
c000447e:	b9 0d 00 00 00       	mov    ecx,0xd
c0004483:	8d 47 0c             	lea    eax,[edi+0xc]
c0004486:	31 d2                	xor    edx,edx
c0004488:	f7 f1                	div    ecx
c000448a:	8d 48 01             	lea    ecx,[eax+0x1]
c000448d:	89 ca                	mov    edx,ecx
c000448f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004493:	89 d8                	mov    eax,ebx
c0004495:	e8 ad f6 ff ff       	call   c0003b47 <dir_alloc>
c000449a:	89 c6                	mov    esi,eax
c000449c:	85 c0                	test   eax,eax
c000449e:	0f 85 bc 00 00 00    	jne    c0004560 <dir_register+0x278>
c00044a4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00044a8:	49                   	dec    ecx
c00044a9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00044ad:	74 6a                	je     c0004519 <dir_register+0x231>
c00044af:	89 c8                	mov    eax,ecx
c00044b1:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00044b4:	c1 e0 05             	shl    eax,0x5
c00044b7:	29 c2                	sub    edx,eax
c00044b9:	89 d8                	mov    eax,ebx
c00044bb:	e8 fd ec ff ff       	call   c00031bd <dir_sdi>
c00044c0:	89 c6                	mov    esi,eax
c00044c2:	85 c0                	test   eax,eax
c00044c4:	0f 85 96 00 00 00    	jne    c0004560 <dir_register+0x278>
c00044ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00044ce:	e8 4a dc ff ff       	call   c000211d <sum_sfn>
c00044d3:	0f b6 f8             	movzx  edi,al
c00044d6:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00044d9:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044dc:	89 e8                	mov    eax,ebp
c00044de:	e8 5c df ff ff       	call   c000243f <move_window>
c00044e3:	89 c6                	mov    esi,eax
c00044e5:	85 c0                	test   eax,eax
c00044e7:	75 77                	jne    c0004560 <dir_register+0x278>
c00044e9:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00044ee:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00044f1:	83 ec 0c             	sub    esp,0xc
c00044f4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00044f7:	57                   	push   edi
c00044f8:	e8 e0 da ff ff       	call   c0001fdd <put_lfn>
c00044fd:	31 d2                	xor    edx,edx
c00044ff:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004503:	89 d8                	mov    eax,ebx
c0004505:	e8 0b f2 ff ff       	call   c0003715 <dir_next>
c000450a:	83 c4 10             	add    esp,0x10
c000450d:	89 c6                	mov    esi,eax
c000450f:	85 c0                	test   eax,eax
c0004511:	75 4d                	jne    c0004560 <dir_register+0x278>
c0004513:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0004517:	75 bd                	jne    c00044d6 <dir_register+0x1ee>
c0004519:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000451c:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000451f:	89 e8                	mov    eax,ebp
c0004521:	e8 19 df ff ff       	call   c000243f <move_window>
c0004526:	89 c6                	mov    esi,eax
c0004528:	85 c0                	test   eax,eax
c000452a:	75 34                	jne    c0004560 <dir_register+0x278>
c000452c:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000452f:	b9 20 00 00 00       	mov    ecx,0x20
c0004534:	31 d2                	xor    edx,edx
c0004536:	e8 ba d7 ff ff       	call   c0001cf5 <mem_set>
c000453b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000453e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004542:	b9 0b 00 00 00       	mov    ecx,0xb
c0004547:	e8 94 d7 ff ff       	call   c0001ce0 <mem_cpy>
c000454c:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c000454f:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004552:	83 e0 18             	and    eax,0x18
c0004555:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0004558:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c000455c:	eb 02                	jmp    c0004560 <dir_register+0x278>
c000455e:	89 c6                	mov    esi,eax
c0004560:	83 c4 6c             	add    esp,0x6c
c0004563:	89 f0                	mov    eax,esi
c0004565:	5b                   	pop    ebx
c0004566:	5e                   	pop    esi
c0004567:	5f                   	pop    edi
c0004568:	5d                   	pop    ebp
c0004569:	c3                   	ret    

c000456a <sync_fs>:
c000456a:	56                   	push   esi
c000456b:	53                   	push   ebx
c000456c:	53                   	push   ebx
c000456d:	89 c3                	mov    ebx,eax
c000456f:	e8 37 de ff ff       	call   c00023ab <sync_window>
c0004574:	85 c0                	test   eax,eax
c0004576:	0f 85 b1 00 00 00    	jne    c000462d <sync_fs+0xc3>
c000457c:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c000457f:	0f 85 8e 00 00 00    	jne    c0004613 <sync_fs+0xa9>
c0004585:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0004589:	0f 85 84 00 00 00    	jne    c0004613 <sync_fs+0xa9>
c000458f:	b9 00 02 00 00       	mov    ecx,0x200
c0004594:	8d 73 54             	lea    esi,[ebx+0x54]
c0004597:	31 d2                	xor    edx,edx
c0004599:	89 f0                	mov    eax,esi
c000459b:	e8 55 d7 ff ff       	call   c0001cf5 <mem_set>
c00045a0:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00045a6:	ba 55 aa 00 00       	mov    edx,0xaa55
c00045ab:	e8 23 d7 ff ff       	call   c0001cd3 <st_word>
c00045b0:	ba 52 52 61 41       	mov    edx,0x41615252
c00045b5:	89 f0                	mov    eax,esi
c00045b7:	e8 1b d7 ff ff       	call   c0001cd7 <st_dword>
c00045bc:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c00045c2:	ba 72 72 41 61       	mov    edx,0x61417272
c00045c7:	e8 0b d7 ff ff       	call   c0001cd7 <st_dword>
c00045cc:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00045cf:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c00045d5:	e8 fd d6 ff ff       	call   c0001cd7 <st_dword>
c00045da:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00045dd:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00045e3:	e8 ef d6 ff ff       	call   c0001cd7 <st_dword>
c00045e8:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00045eb:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00045ee:	83 c0 01             	add    eax,0x1
c00045f1:	83 d2 00             	adc    edx,0x0
c00045f4:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00045f7:	83 ec 0c             	sub    esp,0xc
c00045fa:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00045fd:	6a 01                	push   0x1
c00045ff:	52                   	push   edx
c0004600:	50                   	push   eax
c0004601:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004605:	56                   	push   esi
c0004606:	50                   	push   eax
c0004607:	e8 20 d6 ff ff       	call   c0001c2c <disk_write>
c000460c:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0004610:	83 c4 20             	add    esp,0x20
c0004613:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004617:	51                   	push   ecx
c0004618:	6a 00                	push   0x0
c000461a:	6a 00                	push   0x0
c000461c:	50                   	push   eax
c000461d:	e8 20 d6 ff ff       	call   c0001c42 <disk_ioctl>
c0004622:	83 c4 10             	add    esp,0x10
c0004625:	85 c0                	test   eax,eax
c0004627:	0f 95 c0             	setne  al
c000462a:	0f b6 c0             	movzx  eax,al
c000462d:	5a                   	pop    edx
c000462e:	5b                   	pop    ebx
c000462f:	5e                   	pop    esi
c0004630:	c3                   	ret    

c0004631 <create_partition>:
c0004631:	55                   	push   ebp
c0004632:	0f b6 c0             	movzx  eax,al
c0004635:	57                   	push   edi
c0004636:	56                   	push   esi
c0004637:	53                   	push   ebx
c0004638:	83 ec 60             	sub    esp,0x60
c000463b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000463f:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0004643:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0004647:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000464b:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c000464f:	50                   	push   eax
c0004650:	6a 01                	push   0x1
c0004652:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004656:	e8 e7 d5 ff ff       	call   c0001c42 <disk_ioctl>
c000465b:	83 c4 10             	add    esp,0x10
c000465e:	85 c0                	test   eax,eax
c0004660:	74 0a                	je     c000466c <create_partition+0x3b>
c0004662:	b8 01 00 00 00       	mov    eax,0x1
c0004667:	e9 67 05 00 00       	jmp    c0004bd3 <create_partition+0x5a2>
c000466c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004670:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0004674:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004678:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000467c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0004681:	0f 86 ed 03 00 00    	jbe    c0004a74 <create_partition+0x443>
c0004687:	83 c0 df             	add    eax,0xffffffdf
c000468a:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0004692:	83 d2 ff             	adc    edx,0xffffffff
c0004695:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004699:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000469d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00046a1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00046a5:	83 c0 bd             	add    eax,0xffffffbd
c00046a8:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00046af:	83 d2 ff             	adc    edx,0xffffffff
c00046b2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00046b6:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00046ba:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00046c2:	be 22 00 00 00       	mov    esi,0x22
c00046c7:	31 ff                	xor    edi,edi
c00046c9:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c00046d1:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c00046d9:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00046e1:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00046e5:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00046eb:	75 0e                	jne    c00046fb <create_partition+0xca>
c00046ed:	b9 00 02 00 00       	mov    ecx,0x200
c00046f2:	31 d2                	xor    edx,edx
c00046f4:	89 d8                	mov    eax,ebx
c00046f6:	e8 fa d5 ff ff       	call   c0001cf5 <mem_set>
c00046fb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00046ff:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0004703:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004707:	0b 04 24             	or     eax,DWORD PTR [esp]
c000470a:	0f 84 23 01 00 00    	je     c0004833 <create_partition+0x202>
c0004710:	89 f0                	mov    eax,esi
c0004712:	89 fa                	mov    edx,edi
c0004714:	05 ff 07 00 00       	add    eax,0x7ff
c0004719:	83 d2 00             	adc    edx,0x0
c000471c:	89 c1                	mov    ecx,eax
c000471e:	89 d7                	mov    edi,edx
c0004720:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004726:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000472a:	89 ce                	mov    esi,ecx
c000472c:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0004730:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0004734:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c0004738:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c000473b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000473f:	89 04 24             	mov    DWORD PTR [esp],eax
c0004742:	b8 64 00 00 00       	mov    eax,0x64
c0004747:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000474a:	b8 00 00 00 00       	mov    eax,0x0
c000474f:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004753:	72 41                	jb     c0004796 <create_partition+0x165>
c0004755:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0004759:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000475d:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c0004761:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0004766:	01 c1                	add    ecx,eax
c0004768:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000476c:	f7 24 24             	mul    DWORD PTR [esp]
c000476f:	6a 00                	push   0x0
c0004771:	01 ca                	add    edx,ecx
c0004773:	6a 64                	push   0x64
c0004775:	52                   	push   edx
c0004776:	50                   	push   eax
c0004777:	e8 20 1b 02 00       	call   c002629c <__udivdi3>
c000477c:	83 c4 10             	add    esp,0x10
c000477f:	05 ff 07 00 00       	add    eax,0x7ff
c0004784:	83 d2 00             	adc    edx,0x0
c0004787:	89 c1                	mov    ecx,eax
c0004789:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000478d:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004793:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0004796:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004799:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000479d:	01 f0                	add    eax,esi
c000479f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00047a3:	11 fa                	adc    edx,edi
c00047a5:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00047a9:	19 d1                	sbb    ecx,edx
c00047ab:	73 2e                	jae    c00047db <create_partition+0x1aa>
c00047ad:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00047b1:	89 f8                	mov    eax,edi
c00047b3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00047ba:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c00047be:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00047c6:	73 6b                	jae    c0004833 <create_partition+0x202>
c00047c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00047cc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00047d0:	29 f0                	sub    eax,esi
c00047d2:	19 fa                	sbb    edx,edi
c00047d4:	89 04 24             	mov    DWORD PTR [esp],eax
c00047d7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00047db:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00047df:	0b 04 24             	or     eax,DWORD PTR [esp]
c00047e2:	74 4f                	je     c0004833 <create_partition+0x202>
c00047e4:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00047e7:	b9 10 00 00 00       	mov    ecx,0x10
c00047ec:	ba 30 8d 02 c0       	mov    edx,0xc0028d30
c00047f1:	e8 ea d4 ff ff       	call   c0001ce0 <mem_cpy>
c00047f6:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00047fa:	b9 10 00 00 00       	mov    ecx,0x10
c00047ff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004803:	e8 2c db ff ff       	call   c0002334 <make_rand>
c0004808:	89 f2                	mov    edx,esi
c000480a:	89 f9                	mov    ecx,edi
c000480c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004810:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c0004814:	e8 c1 d4 ff ff       	call   c0001cda <st_qword>
c0004819:	03 34 24             	add    esi,DWORD PTR [esp]
c000481c:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c0004820:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0004824:	89 f2                	mov    edx,esi
c0004826:	89 f9                	mov    ecx,edi
c0004828:	83 c2 ff             	add    edx,0xffffffff
c000482b:	83 d1 ff             	adc    ecx,0xffffffff
c000482e:	e8 a7 d4 ff ff       	call   c0001cda <st_qword>
c0004833:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004837:	83 e8 80             	sub    eax,0xffffff80
c000483a:	89 c5                	mov    ebp,eax
c000483c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004840:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004846:	75 6b                	jne    c00048b3 <create_partition+0x282>
c0004848:	45                   	inc    ebp
c0004849:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000484d:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c0004852:	e8 39 da ff ff       	call   c0002290 <crc32>
c0004857:	81 fd 00 02 00 00    	cmp    ebp,0x200
c000485d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004861:	75 e5                	jne    c0004848 <create_partition+0x217>
c0004863:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004867:	31 d2                	xor    edx,edx
c0004869:	83 ec 0c             	sub    esp,0xc
c000486c:	c1 ed 09             	shr    ebp,0x9
c000486f:	6a 01                	push   0x1
c0004871:	8d 45 02             	lea    eax,[ebp+0x2]
c0004874:	52                   	push   edx
c0004875:	50                   	push   eax
c0004876:	53                   	push   ebx
c0004877:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000487b:	e8 ac d3 ff ff       	call   c0001c2c <disk_write>
c0004880:	83 c4 20             	add    esp,0x20
c0004883:	85 c0                	test   eax,eax
c0004885:	0f 85 d7 fd ff ff    	jne    c0004662 <create_partition+0x31>
c000488b:	83 ec 0c             	sub    esp,0xc
c000488e:	31 d2                	xor    edx,edx
c0004890:	6a 01                	push   0x1
c0004892:	89 e8                	mov    eax,ebp
c0004894:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0004898:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000489c:	52                   	push   edx
c000489d:	50                   	push   eax
c000489e:	53                   	push   ebx
c000489f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00048a3:	e8 84 d3 ff ff       	call   c0001c2c <disk_write>
c00048a8:	83 c4 20             	add    esp,0x20
c00048ab:	85 c0                	test   eax,eax
c00048ad:	0f 85 af fd ff ff    	jne    c0004662 <create_partition+0x31>
c00048b3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00048b7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00048bb:	3d 00 40 00 00       	cmp    eax,0x4000
c00048c0:	74 0d                	je     c00048cf <create_partition+0x29e>
c00048c2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00048c6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00048ca:	e9 12 fe ff ff       	jmp    c00046e1 <create_partition+0xb0>
c00048cf:	31 d2                	xor    edx,edx
c00048d1:	b9 00 02 00 00       	mov    ecx,0x200
c00048d6:	89 d8                	mov    eax,ebx
c00048d8:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00048db:	e8 15 d4 ff ff       	call   c0001cf5 <mem_set>
c00048e0:	8d 7b 48             	lea    edi,[ebx+0x48]
c00048e3:	b9 10 00 00 00       	mov    ecx,0x10
c00048e8:	ba 20 8c 02 c0       	mov    edx,0xc0028c20
c00048ed:	89 d8                	mov    eax,ebx
c00048ef:	e8 ec d3 ff ff       	call   c0001ce0 <mem_cpy>
c00048f4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00048f8:	8d 43 58             	lea    eax,[ebx+0x58]
c00048fb:	f7 d2                	not    edx
c00048fd:	e8 d5 d3 ff ff       	call   c0001cd7 <st_dword>
c0004902:	8d 43 18             	lea    eax,[ebx+0x18]
c0004905:	31 c9                	xor    ecx,ecx
c0004907:	89 04 24             	mov    DWORD PTR [esp],eax
c000490a:	ba 01 00 00 00       	mov    edx,0x1
c000490f:	e8 c6 d3 ff ff       	call   c0001cda <st_qword>
c0004914:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004918:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000491c:	83 c2 ff             	add    edx,0xffffffff
c000491f:	89 e8                	mov    eax,ebp
c0004921:	83 d1 ff             	adc    ecx,0xffffffff
c0004924:	e8 b1 d3 ff ff       	call   c0001cda <st_qword>
c0004929:	31 c9                	xor    ecx,ecx
c000492b:	8d 43 28             	lea    eax,[ebx+0x28]
c000492e:	ba 22 00 00 00       	mov    edx,0x22
c0004933:	e8 a2 d3 ff ff       	call   c0001cda <st_qword>
c0004938:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000493c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004940:	83 c2 de             	add    edx,0xffffffde
c0004943:	8d 43 30             	lea    eax,[ebx+0x30]
c0004946:	83 d1 ff             	adc    ecx,0xffffffff
c0004949:	31 f6                	xor    esi,esi
c000494b:	e8 8a d3 ff ff       	call   c0001cda <st_qword>
c0004950:	8d 43 54             	lea    eax,[ebx+0x54]
c0004953:	ba 80 00 00 00       	mov    edx,0x80
c0004958:	e8 7a d3 ff ff       	call   c0001cd7 <st_dword>
c000495d:	8d 43 50             	lea    eax,[ebx+0x50]
c0004960:	ba 80 00 00 00       	mov    edx,0x80
c0004965:	e8 6d d3 ff ff       	call   c0001cd7 <st_dword>
c000496a:	ba 02 00 00 00       	mov    edx,0x2
c000496f:	89 f8                	mov    eax,edi
c0004971:	e8 61 d3 ff ff       	call   c0001cd7 <st_dword>
c0004976:	8d 53 38             	lea    edx,[ebx+0x38]
c0004979:	b9 10 00 00 00       	mov    ecx,0x10
c000497e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004982:	e8 ad d9 ff ff       	call   c0002334 <make_rand>
c0004987:	83 c8 ff             	or     eax,0xffffffff
c000498a:	46                   	inc    esi
c000498b:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c0004990:	e8 fb d8 ff ff       	call   c0002290 <crc32>
c0004995:	83 fe 5c             	cmp    esi,0x5c
c0004998:	75 f0                	jne    c000498a <create_partition+0x359>
c000499a:	f7 d0                	not    eax
c000499c:	8d 73 10             	lea    esi,[ebx+0x10]
c000499f:	89 c2                	mov    edx,eax
c00049a1:	89 f0                	mov    eax,esi
c00049a3:	e8 2f d3 ff ff       	call   c0001cd7 <st_dword>
c00049a8:	83 ec 0c             	sub    esp,0xc
c00049ab:	6a 01                	push   0x1
c00049ad:	6a 00                	push   0x0
c00049af:	6a 01                	push   0x1
c00049b1:	53                   	push   ebx
c00049b2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00049b6:	e8 71 d2 ff ff       	call   c0001c2c <disk_write>
c00049bb:	83 c4 20             	add    esp,0x20
c00049be:	85 c0                	test   eax,eax
c00049c0:	0f 85 9c fc ff ff    	jne    c0004662 <create_partition+0x31>
c00049c6:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00049ca:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00049ce:	83 c2 ff             	add    edx,0xffffffff
c00049d1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00049d4:	83 d1 ff             	adc    ecx,0xffffffff
c00049d7:	e8 fe d2 ff ff       	call   c0001cda <st_qword>
c00049dc:	ba 01 00 00 00       	mov    edx,0x1
c00049e1:	31 c9                	xor    ecx,ecx
c00049e3:	89 e8                	mov    eax,ebp
c00049e5:	e8 f0 d2 ff ff       	call   c0001cda <st_qword>
c00049ea:	89 f8                	mov    eax,edi
c00049ec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00049f0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00049f4:	31 ff                	xor    edi,edi
c00049f6:	e8 df d2 ff ff       	call   c0001cda <st_qword>
c00049fb:	89 f0                	mov    eax,esi
c00049fd:	31 d2                	xor    edx,edx
c00049ff:	e8 d3 d2 ff ff       	call   c0001cd7 <st_dword>
c0004a04:	83 c8 ff             	or     eax,0xffffffff
c0004a07:	47                   	inc    edi
c0004a08:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c0004a0d:	e8 7e d8 ff ff       	call   c0002290 <crc32>
c0004a12:	83 ff 5c             	cmp    edi,0x5c
c0004a15:	75 f0                	jne    c0004a07 <create_partition+0x3d6>
c0004a17:	f7 d0                	not    eax
c0004a19:	89 c2                	mov    edx,eax
c0004a1b:	89 f0                	mov    eax,esi
c0004a1d:	e8 b5 d2 ff ff       	call   c0001cd7 <st_dword>
c0004a22:	83 ec 0c             	sub    esp,0xc
c0004a25:	6a 01                	push   0x1
c0004a27:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0004a2b:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004a2f:	83 c0 ff             	add    eax,0xffffffff
c0004a32:	83 d2 ff             	adc    edx,0xffffffff
c0004a35:	52                   	push   edx
c0004a36:	50                   	push   eax
c0004a37:	53                   	push   ebx
c0004a38:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004a3c:	e8 eb d1 ff ff       	call   c0001c2c <disk_write>
c0004a41:	83 c4 20             	add    esp,0x20
c0004a44:	85 c0                	test   eax,eax
c0004a46:	0f 85 16 fc ff ff    	jne    c0004662 <create_partition+0x31>
c0004a4c:	31 d2                	xor    edx,edx
c0004a4e:	89 d8                	mov    eax,ebx
c0004a50:	b9 00 02 00 00       	mov    ecx,0x200
c0004a55:	e8 9b d2 ff ff       	call   c0001cf5 <mem_set>
c0004a5a:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004a60:	b9 10 00 00 00       	mov    ecx,0x10
c0004a65:	ba 30 8c 02 c0       	mov    edx,0xc0028c30
c0004a6a:	e8 71 d2 ff ff       	call   c0001ce0 <mem_cpy>
c0004a6f:	e9 21 01 00 00       	jmp    c0004b95 <create_partition+0x564>
c0004a74:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004a78:	b9 05 00 00 00       	mov    ecx,0x5
c0004a7d:	89 04 24             	mov    DWORD PTR [esp],eax
c0004a80:	bf 08 00 00 00       	mov    edi,0x8
c0004a85:	89 f8                	mov    eax,edi
c0004a87:	31 d2                	xor    edx,edx
c0004a89:	0f b6 f0             	movzx  esi,al
c0004a8c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a8f:	f7 f6                	div    esi
c0004a91:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004a96:	76 0a                	jbe    c0004aa2 <create_partition+0x471>
c0004a98:	d1 e7                	shl    edi,1
c0004a9a:	49                   	dec    ecx
c0004a9b:	75 e8                	jne    c0004a85 <create_partition+0x454>
c0004a9d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004aa2:	b9 00 02 00 00       	mov    ecx,0x200
c0004aa7:	31 d2                	xor    edx,edx
c0004aa9:	89 d8                	mov    eax,ebx
c0004aab:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c0004ab1:	e8 3f d2 ff ff       	call   c0001cf5 <mem_set>
c0004ab6:	b9 64 00 00 00       	mov    ecx,0x64
c0004abb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004abe:	31 d2                	xor    edx,edx
c0004ac0:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0004ac8:	f7 f1                	div    ecx
c0004aca:	b9 3f 00 00 00       	mov    ecx,0x3f
c0004acf:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004ad3:	89 f8                	mov    eax,edi
c0004ad5:	0f b6 c0             	movzx  eax,al
c0004ad8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004adc:	e9 80 00 00 00       	jmp    c0004b61 <create_partition+0x530>
c0004ae1:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004ae4:	29 cf                	sub    edi,ecx
c0004ae6:	89 ca                	mov    edx,ecx
c0004ae8:	89 f0                	mov    eax,esi
c0004aea:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004aef:	e8 e3 d1 ff ff       	call   c0001cd7 <st_dword>
c0004af4:	8d 46 04             	lea    eax,[esi+0x4]
c0004af7:	89 fa                	mov    edx,edi
c0004af9:	83 c6 10             	add    esi,0x10
c0004afc:	e8 d6 d1 ff ff       	call   c0001cd7 <st_dword>
c0004b01:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0004b05:	31 d2                	xor    edx,edx
c0004b07:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004b0a:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004b0e:	89 c8                	mov    eax,ecx
c0004b10:	01 f9                	add    ecx,edi
c0004b12:	f7 f5                	div    ebp
c0004b14:	89 d5                	mov    ebp,edx
c0004b16:	31 d2                	xor    edx,edx
c0004b18:	45                   	inc    ebp
c0004b19:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b1d:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004b20:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004b23:	89 c2                	mov    edx,eax
c0004b25:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004b28:	c1 ea 02             	shr    edx,0x2
c0004b2b:	83 e2 c0             	and    edx,0xffffffc0
c0004b2e:	09 ea                	or     edx,ebp
c0004b30:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004b35:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004b38:	31 d2                	xor    edx,edx
c0004b3a:	f7 f5                	div    ebp
c0004b3c:	89 d7                	mov    edi,edx
c0004b3e:	31 d2                	xor    edx,edx
c0004b40:	47                   	inc    edi
c0004b41:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b45:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004b48:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004b4b:	89 c5                	mov    ebp,eax
c0004b4d:	c1 ed 02             	shr    ebp,0x2
c0004b50:	83 e5 c0             	and    ebp,0xffffffc0
c0004b53:	09 ef                	or     edi,ebp
c0004b55:	89 fa                	mov    edx,edi
c0004b57:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004b5a:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004b5f:	74 34                	je     c0004b95 <create_partition+0x564>
c0004b61:	85 c9                	test   ecx,ecx
c0004b63:	74 30                	je     c0004b95 <create_partition+0x564>
c0004b65:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004b68:	76 2b                	jbe    c0004b95 <create_partition+0x564>
c0004b6a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b6e:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004b72:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004b75:	83 ff 64             	cmp    edi,0x64
c0004b78:	76 4b                	jbe    c0004bc5 <create_partition+0x594>
c0004b7a:	89 f8                	mov    eax,edi
c0004b7c:	01 c8                	add    eax,ecx
c0004b7e:	0f 82 5d ff ff ff    	jb     c0004ae1 <create_partition+0x4b0>
c0004b84:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004b87:	0f 87 54 ff ff ff    	ja     c0004ae1 <create_partition+0x4b0>
c0004b8d:	85 ff                	test   edi,edi
c0004b8f:	0f 85 51 ff ff ff    	jne    c0004ae6 <create_partition+0x4b5>
c0004b95:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004b9b:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004ba0:	e8 2e d1 ff ff       	call   c0001cd3 <st_word>
c0004ba5:	83 ec 0c             	sub    esp,0xc
c0004ba8:	6a 01                	push   0x1
c0004baa:	6a 00                	push   0x0
c0004bac:	6a 00                	push   0x0
c0004bae:	53                   	push   ebx
c0004baf:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004bb3:	e8 74 d0 ff ff       	call   c0001c2c <disk_write>
c0004bb8:	83 c4 20             	add    esp,0x20
c0004bbb:	85 c0                	test   eax,eax
c0004bbd:	0f 95 c0             	setne  al
c0004bc0:	0f b6 c0             	movzx  eax,al
c0004bc3:	eb 0e                	jmp    c0004bd3 <create_partition+0x5a2>
c0004bc5:	74 07                	je     c0004bce <create_partition+0x59d>
c0004bc7:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c0004bcc:	eb ac                	jmp    c0004b7a <create_partition+0x549>
c0004bce:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004bd1:	eb a7                	jmp    c0004b7a <create_partition+0x549>
c0004bd3:	83 c4 5c             	add    esp,0x5c
c0004bd6:	5b                   	pop    ebx
c0004bd7:	5e                   	pop    esi
c0004bd8:	5f                   	pop    edi
c0004bd9:	5d                   	pop    ebp
c0004bda:	c3                   	ret    

c0004bdb <get_fileinfo>:
c0004bdb:	55                   	push   ebp
c0004bdc:	57                   	push   edi
c0004bdd:	56                   	push   esi
c0004bde:	53                   	push   ebx
c0004bdf:	83 ec 1c             	sub    esp,0x1c
c0004be2:	8b 30                	mov    esi,DWORD PTR [eax]
c0004be4:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004be8:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004bec:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004bef:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004bf2:	0f 84 dc 01 00 00    	je     c0004dd4 <get_fileinfo+0x1f9>
c0004bf8:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004bfb:	75 0f                	jne    c0004c0c <get_fileinfo+0x31>
c0004bfd:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004c00:	83 c4 1c             	add    esp,0x1c
c0004c03:	5b                   	pop    ebx
c0004c04:	5e                   	pop    esi
c0004c05:	5f                   	pop    edi
c0004c06:	5d                   	pop    ebp
c0004c07:	e9 58 d5 ff ff       	jmp    c0002164 <get_xfileinfo>
c0004c0c:	89 d3                	mov    ebx,edx
c0004c0e:	89 c6                	mov    esi,eax
c0004c10:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004c14:	74 6a                	je     c0004c80 <get_fileinfo+0xa5>
c0004c16:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004c1e:	31 ed                	xor    ebp,ebp
c0004c20:	31 ff                	xor    edi,edi
c0004c22:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004c26:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004c2a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004c2d:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004c31:	66 85 d2             	test   dx,dx
c0004c34:	74 3e                	je     c0004c74 <get_fileinfo+0x99>
c0004c36:	66 85 ed             	test   bp,bp
c0004c39:	75 0c                	jne    c0004c47 <get_fileinfo+0x6c>
c0004c3b:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004c41:	66 3d ff 07          	cmp    ax,0x7ff
c0004c45:	76 22                	jbe    c0004c69 <get_fileinfo+0x8e>
c0004c47:	b9 ff 00 00 00       	mov    ecx,0xff
c0004c4c:	89 e8                	mov    eax,ebp
c0004c4e:	29 f9                	sub    ecx,edi
c0004c50:	c1 e0 10             	shl    eax,0x10
c0004c53:	09 d0                	or     eax,edx
c0004c55:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004c59:	e8 a3 d1 ff ff       	call   c0001e01 <put_utf>
c0004c5e:	84 c0                	test   al,al
c0004c60:	74 10                	je     c0004c72 <get_fileinfo+0x97>
c0004c62:	0f b6 c0             	movzx  eax,al
c0004c65:	31 d2                	xor    edx,edx
c0004c67:	01 c7                	add    edi,eax
c0004c69:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004c6e:	89 d5                	mov    ebp,edx
c0004c70:	eb b0                	jmp    c0004c22 <get_fileinfo+0x47>
c0004c72:	31 ff                	xor    edi,edi
c0004c74:	66 85 ed             	test   bp,bp
c0004c77:	74 02                	je     c0004c7b <get_fileinfo+0xa0>
c0004c79:	31 ff                	xor    edi,edi
c0004c7b:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004c80:	31 ff                	xor    edi,edi
c0004c82:	31 c9                	xor    ecx,ecx
c0004c84:	83 f9 0a             	cmp    ecx,0xa
c0004c87:	0f 87 ad 00 00 00    	ja     c0004d3a <get_fileinfo+0x15f>
c0004c8d:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c90:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004c93:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004c97:	66 83 fa 20          	cmp    dx,0x20
c0004c9b:	0f 84 92 00 00 00    	je     c0004d33 <get_fileinfo+0x158>
c0004ca1:	66 83 fa 05          	cmp    dx,0x5
c0004ca5:	75 05                	jne    c0004cac <get_fileinfo+0xd1>
c0004ca7:	ba e5 00 00 00       	mov    edx,0xe5
c0004cac:	83 ff 0b             	cmp    edi,0xb
c0004caf:	77 0b                	ja     c0004cbc <get_fileinfo+0xe1>
c0004cb1:	83 fd 09             	cmp    ebp,0x9
c0004cb4:	75 06                	jne    c0004cbc <get_fileinfo+0xe1>
c0004cb6:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004cbb:	47                   	inc    edi
c0004cbc:	0f b7 c2             	movzx  eax,dx
c0004cbf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004cc3:	e8 6d d0 ff ff       	call   c0001d35 <dbc_1st>
c0004cc8:	85 c0                	test   eax,eax
c0004cca:	74 2f                	je     c0004cfb <get_fileinfo+0x120>
c0004ccc:	83 fd 08             	cmp    ebp,0x8
c0004ccf:	74 2a                	je     c0004cfb <get_fileinfo+0x120>
c0004cd1:	83 fd 0b             	cmp    ebp,0xb
c0004cd4:	74 25                	je     c0004cfb <get_fileinfo+0x120>
c0004cd6:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004cd9:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004cdd:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004ce1:	e8 52 d0 ff ff       	call   c0001d38 <dbc_2nd>
c0004ce6:	85 c0                	test   eax,eax
c0004ce8:	74 11                	je     c0004cfb <get_fileinfo+0x120>
c0004cea:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004cee:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004cf3:	c1 e2 08             	shl    edx,0x8
c0004cf6:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004cf9:	09 c2                	or     edx,eax
c0004cfb:	0f b7 d2             	movzx  edx,dx
c0004cfe:	50                   	push   eax
c0004cff:	50                   	push   eax
c0004d00:	68 b5 01 00 00       	push   0x1b5
c0004d05:	52                   	push   edx
c0004d06:	e8 46 38 00 00       	call   c0008551 <ff_oem2uni>
c0004d0b:	83 c4 10             	add    esp,0x10
c0004d0e:	66 85 c0             	test   ax,ax
c0004d11:	75 04                	jne    c0004d17 <get_fileinfo+0x13c>
c0004d13:	31 ff                	xor    edi,edi
c0004d15:	eb 23                	jmp    c0004d3a <get_fileinfo+0x15f>
c0004d17:	b9 0c 00 00 00       	mov    ecx,0xc
c0004d1c:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004d20:	29 f9                	sub    ecx,edi
c0004d22:	0f b7 c0             	movzx  eax,ax
c0004d25:	e8 d7 d0 ff ff       	call   c0001e01 <put_utf>
c0004d2a:	84 c0                	test   al,al
c0004d2c:	74 e5                	je     c0004d13 <get_fileinfo+0x138>
c0004d2e:	0f b6 c0             	movzx  eax,al
c0004d31:	01 c7                	add    edi,eax
c0004d33:	89 e9                	mov    ecx,ebp
c0004d35:	e9 4a ff ff ff       	jmp    c0004c84 <get_fileinfo+0xa9>
c0004d3a:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004d3f:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004d43:	75 54                	jne    c0004d99 <get_fileinfo+0x1be>
c0004d45:	85 ff                	test   edi,edi
c0004d47:	75 0b                	jne    c0004d54 <get_fileinfo+0x179>
c0004d49:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004d4d:	ba 01 00 00 00       	mov    edx,0x1
c0004d52:	eb 33                	jmp    c0004d87 <get_fileinfo+0x1ac>
c0004d54:	b1 08                	mov    cl,0x8
c0004d56:	31 d2                	xor    edx,edx
c0004d58:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004d5e:	84 c0                	test   al,al
c0004d60:	74 25                	je     c0004d87 <get_fileinfo+0x1ac>
c0004d62:	66 83 f8 2e          	cmp    ax,0x2e
c0004d66:	74 16                	je     c0004d7e <get_fileinfo+0x1a3>
c0004d68:	8d 78 bf             	lea    edi,[eax-0x41]
c0004d6b:	66 83 ff 19          	cmp    di,0x19
c0004d6f:	77 0f                	ja     c0004d80 <get_fileinfo+0x1a5>
c0004d71:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004d74:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004d77:	74 07                	je     c0004d80 <get_fileinfo+0x1a5>
c0004d79:	83 c0 20             	add    eax,0x20
c0004d7c:	eb 02                	jmp    c0004d80 <get_fileinfo+0x1a5>
c0004d7e:	b1 10                	mov    cl,0x10
c0004d80:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004d84:	42                   	inc    edx
c0004d85:	eb d1                	jmp    c0004d58 <get_fileinfo+0x17d>
c0004d87:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004d8c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d8f:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004d93:	75 04                	jne    c0004d99 <get_fileinfo+0x1be>
c0004d95:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004d99:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d9c:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004d9f:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004da2:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004da5:	83 c0 1c             	add    eax,0x1c
c0004da8:	e8 c1 ce ff ff       	call   c0001c6e <ld_dword>
c0004dad:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004db4:	89 03                	mov    DWORD PTR [ebx],eax
c0004db6:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004db9:	83 c0 16             	add    eax,0x16
c0004dbc:	e8 a0 ce ff ff       	call   c0001c61 <ld_word>
c0004dc1:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004dc5:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004dc8:	83 c0 18             	add    eax,0x18
c0004dcb:	e8 91 ce ff ff       	call   c0001c61 <ld_word>
c0004dd0:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004dd4:	83 c4 1c             	add    esp,0x1c
c0004dd7:	5b                   	pop    ebx
c0004dd8:	5e                   	pop    esi
c0004dd9:	5f                   	pop    edi
c0004dda:	5d                   	pop    ebp
c0004ddb:	c3                   	ret    

c0004ddc <ld_clust.isra.0>:
c0004ddc:	56                   	push   esi
c0004ddd:	89 c6                	mov    esi,eax
c0004ddf:	53                   	push   ebx
c0004de0:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004de3:	89 d3                	mov    ebx,edx
c0004de5:	e8 77 ce ff ff       	call   c0001c61 <ld_word>
c0004dea:	0f b7 c8             	movzx  ecx,ax
c0004ded:	89 f0                	mov    eax,esi
c0004def:	3c 03                	cmp    al,0x3
c0004df1:	75 0d                	jne    c0004e00 <ld_clust.isra.0+0x24>
c0004df3:	8d 43 14             	lea    eax,[ebx+0x14]
c0004df6:	e8 66 ce ff ff       	call   c0001c61 <ld_word>
c0004dfb:	c1 e0 10             	shl    eax,0x10
c0004dfe:	09 c1                	or     ecx,eax
c0004e00:	89 c8                	mov    eax,ecx
c0004e02:	5b                   	pop    ebx
c0004e03:	5e                   	pop    esi
c0004e04:	c3                   	ret    

c0004e05 <st_clust.isra.1>:
c0004e05:	56                   	push   esi
c0004e06:	89 c6                	mov    esi,eax
c0004e08:	53                   	push   ebx
c0004e09:	89 d3                	mov    ebx,edx
c0004e0b:	0f b7 d1             	movzx  edx,cx
c0004e0e:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004e11:	e8 bd ce ff ff       	call   c0001cd3 <st_word>
c0004e16:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004e19:	75 0f                	jne    c0004e2a <st_clust.isra.1+0x25>
c0004e1b:	c1 e9 10             	shr    ecx,0x10
c0004e1e:	8d 43 14             	lea    eax,[ebx+0x14]
c0004e21:	89 ca                	mov    edx,ecx
c0004e23:	5b                   	pop    ebx
c0004e24:	5e                   	pop    esi
c0004e25:	e9 a9 ce ff ff       	jmp    c0001cd3 <st_word>
c0004e2a:	5b                   	pop    ebx
c0004e2b:	5e                   	pop    esi
c0004e2c:	c3                   	ret    

c0004e2d <init_alloc_info.isra.2>:
c0004e2d:	56                   	push   esi
c0004e2e:	53                   	push   ebx
c0004e2f:	89 c6                	mov    esi,eax
c0004e31:	89 d3                	mov    ebx,edx
c0004e33:	51                   	push   ecx
c0004e34:	8b 00                	mov    eax,DWORD PTR [eax]
c0004e36:	83 c0 34             	add    eax,0x34
c0004e39:	e8 30 ce ff ff       	call   c0001c6e <ld_dword>
c0004e3e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004e41:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e43:	83 c0 38             	add    eax,0x38
c0004e46:	e8 3b ce ff ff       	call   c0001c86 <ld_qword>
c0004e4b:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004e4e:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004e51:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e53:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004e56:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e5d:	83 e0 02             	and    eax,0x2
c0004e60:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004e63:	5b                   	pop    ebx
c0004e64:	5b                   	pop    ebx
c0004e65:	5e                   	pop    esi
c0004e66:	c3                   	ret    

c0004e67 <follow_path>:
c0004e67:	56                   	push   esi
c0004e68:	53                   	push   ebx
c0004e69:	89 c3                	mov    ebx,eax
c0004e6b:	83 ec 14             	sub    esp,0x14
c0004e6e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004e72:	8b 30                	mov    esi,DWORD PTR [eax]
c0004e74:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e78:	8a 10                	mov    dl,BYTE PTR [eax]
c0004e7a:	80 fa 5c             	cmp    dl,0x5c
c0004e7d:	75 07                	jne    c0004e86 <follow_path+0x1f>
c0004e7f:	40                   	inc    eax
c0004e80:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e84:	eb ee                	jmp    c0004e74 <follow_path+0xd>
c0004e86:	80 fa 2f             	cmp    dl,0x2f
c0004e89:	74 f4                	je     c0004e7f <follow_path+0x18>
c0004e8b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004e92:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e99:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004e9c:	77 52                	ja     c0004ef0 <follow_path+0x89>
c0004e9e:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004ea2:	31 d2                	xor    edx,edx
c0004ea4:	89 d8                	mov    eax,ebx
c0004ea6:	e8 12 e3 ff ff       	call   c00031bd <dir_sdi>
c0004eab:	eb 7c                	jmp    c0004f29 <follow_path+0xc2>
c0004ead:	89 d8                	mov    eax,ebx
c0004eaf:	e8 6e f2 ff ff       	call   c0004122 <dir_find>
c0004eb4:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004eb7:	85 c0                	test   eax,eax
c0004eb9:	75 46                	jne    c0004f01 <follow_path+0x9a>
c0004ebb:	80 e2 04             	and    dl,0x4
c0004ebe:	75 69                	jne    c0004f29 <follow_path+0xc2>
c0004ec0:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004ec4:	74 5e                	je     c0004f24 <follow_path+0xbd>
c0004ec6:	8a 06                	mov    al,BYTE PTR [esi]
c0004ec8:	3c 04                	cmp    al,0x4
c0004eca:	75 41                	jne    c0004f0d <follow_path+0xa6>
c0004ecc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004ecf:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004ed3:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004ed6:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004ed9:	30 c0                	xor    al,al
c0004edb:	09 d0                	or     eax,edx
c0004edd:	89 da                	mov    edx,ebx
c0004edf:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004ee2:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004ee5:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004ee8:	8d 46 10             	lea    eax,[esi+0x10]
c0004eeb:	e8 3d ff ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c0004ef0:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004ef4:	89 d8                	mov    eax,ebx
c0004ef6:	e8 a9 ed ff ff       	call   c0003ca4 <create_name>
c0004efb:	85 c0                	test   eax,eax
c0004efd:	74 ae                	je     c0004ead <follow_path+0x46>
c0004eff:	eb 28                	jmp    c0004f29 <follow_path+0xc2>
c0004f01:	83 f8 04             	cmp    eax,0x4
c0004f04:	75 23                	jne    c0004f29 <follow_path+0xc2>
c0004f06:	80 e2 04             	and    dl,0x4
c0004f09:	74 19                	je     c0004f24 <follow_path+0xbd>
c0004f0b:	eb 1c                	jmp    c0004f29 <follow_path+0xc2>
c0004f0d:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004f10:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004f16:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004f1a:	e8 bd fe ff ff       	call   c0004ddc <ld_clust.isra.0>
c0004f1f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004f22:	eb cc                	jmp    c0004ef0 <follow_path+0x89>
c0004f24:	b8 05 00 00 00       	mov    eax,0x5
c0004f29:	83 c4 14             	add    esp,0x14
c0004f2c:	5b                   	pop    ebx
c0004f2d:	5e                   	pop    esi
c0004f2e:	c3                   	ret    

c0004f2f <f_mount>:
c0004f2f:	53                   	push   ebx
c0004f30:	83 ec 18             	sub    esp,0x18
c0004f33:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004f37:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004f3b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f3f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004f43:	e8 fb d2 ff ff       	call   c0002243 <get_ldnumber>
c0004f48:	89 c2                	mov    edx,eax
c0004f4a:	b8 0b 00 00 00       	mov    eax,0xb
c0004f4f:	85 d2                	test   edx,edx
c0004f51:	78 39                	js     c0004f8c <f_mount+0x5d>
c0004f53:	8b 04 95 00 db 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd2500]
c0004f5a:	85 c0                	test   eax,eax
c0004f5c:	74 03                	je     c0004f61 <f_mount+0x32>
c0004f5e:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f61:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f65:	85 c0                	test   eax,eax
c0004f67:	74 03                	je     c0004f6c <f_mount+0x3d>
c0004f69:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f70:	89 04 95 00 db 02 c0 	mov    DWORD PTR [edx*4-0x3ffd2500],eax
c0004f77:	31 c0                	xor    eax,eax
c0004f79:	84 db                	test   bl,bl
c0004f7b:	74 0f                	je     c0004f8c <f_mount+0x5d>
c0004f7d:	31 c9                	xor    ecx,ecx
c0004f7f:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f83:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f87:	e8 65 d7 ff ff       	call   c00026f1 <mount_volume>
c0004f8c:	83 c4 18             	add    esp,0x18
c0004f8f:	5b                   	pop    ebx
c0004f90:	c3                   	ret    

c0004f91 <f_open>:
c0004f91:	55                   	push   ebp
c0004f92:	bd 09 00 00 00       	mov    ebp,0x9
c0004f97:	57                   	push   edi
c0004f98:	56                   	push   esi
c0004f99:	53                   	push   ebx
c0004f9a:	83 ec 7c             	sub    esp,0x7c
c0004f9d:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004fa4:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004fab:	85 db                	test   ebx,ebx
c0004fad:	0f 84 10 04 00 00    	je     c00053c3 <f_open+0x432>
c0004fb3:	89 fe                	mov    esi,edi
c0004fb5:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004fb9:	83 e6 3f             	and    esi,0x3f
c0004fbc:	89 f0                	mov    eax,esi
c0004fbe:	0f b6 c8             	movzx  ecx,al
c0004fc1:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004fc8:	e8 24 d7 ff ff       	call   c00026f1 <mount_volume>
c0004fcd:	89 c5                	mov    ebp,eax
c0004fcf:	85 c0                	test   eax,eax
c0004fd1:	0f 85 e6 03 00 00    	jne    c00053bd <f_open+0x42c>
c0004fd7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fdb:	bd 11 00 00 00       	mov    ebp,0x11
c0004fe0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004fe4:	83 ec 0c             	sub    esp,0xc
c0004fe7:	68 60 04 00 00       	push   0x460
c0004fec:	e8 a3 34 00 00       	call   c0008494 <ff_memalloc>
c0004ff1:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004ff5:	83 c4 10             	add    esp,0x10
c0004ff8:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004ffd:	0f 84 c0 03 00 00    	je     c00053c3 <f_open+0x432>
c0005003:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005007:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000500b:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0005011:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0005014:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005017:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c000501e:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005022:	e8 40 fe ff ff       	call   c0004e67 <follow_path>
c0005027:	89 c5                	mov    ebp,eax
c0005029:	85 c0                	test   eax,eax
c000502b:	75 0c                	jne    c0005039 <f_open+0xa8>
c000502d:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0005032:	79 05                	jns    c0005039 <f_open+0xa8>
c0005034:	bd 06 00 00 00       	mov    ebp,0x6
c0005039:	f7 c7 1c 00 00 00    	test   edi,0x1c
c000503f:	0f 84 84 01 00 00    	je     c00051c9 <f_open+0x238>
c0005045:	85 ed                	test   ebp,ebp
c0005047:	74 20                	je     c0005069 <f_open+0xd8>
c0005049:	83 fd 04             	cmp    ebp,0x4
c000504c:	0f 85 58 03 00 00    	jne    c00053aa <f_open+0x419>
c0005052:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005056:	83 ce 08             	or     esi,0x8
c0005059:	e8 8a f2 ff ff       	call   c00042e8 <dir_register>
c000505e:	89 c5                	mov    ebp,eax
c0005060:	85 c0                	test   eax,eax
c0005062:	74 2f                	je     c0005093 <f_open+0x102>
c0005064:	e9 41 03 00 00       	jmp    c00053aa <f_open+0x419>
c0005069:	bd 07 00 00 00       	mov    ebp,0x7
c000506e:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0005073:	0f 85 31 03 00 00    	jne    c00053aa <f_open+0x419>
c0005079:	bd 08 00 00 00       	mov    ebp,0x8
c000507e:	f7 c7 04 00 00 00    	test   edi,0x4
c0005084:	0f 85 20 03 00 00    	jne    c00053aa <f_open+0x419>
c000508a:	83 e7 08             	and    edi,0x8
c000508d:	0f 84 65 01 00 00    	je     c00051f8 <f_open+0x267>
c0005093:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005097:	8a 02                	mov    al,BYTE PTR [edx]
c0005099:	3c 04                	cmp    al,0x4
c000509b:	0f 85 97 00 00 00    	jne    c0005138 <f_open+0x1a7>
c00050a1:	8d 42 10             	lea    eax,[edx+0x10]
c00050a4:	89 13                	mov    DWORD PTR [ebx],edx
c00050a6:	89 da                	mov    edx,ebx
c00050a8:	e8 80 fd ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c00050ad:	31 d2                	xor    edx,edx
c00050af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050b3:	b9 1e 00 00 00       	mov    ecx,0x1e
c00050b8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050bb:	83 c0 02             	add    eax,0x2
c00050be:	e8 32 cc ff ff       	call   c0001cf5 <mem_set>
c00050c3:	b9 1a 00 00 00       	mov    ecx,0x1a
c00050c8:	31 d2                	xor    edx,edx
c00050ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050ce:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050d1:	83 c0 26             	add    eax,0x26
c00050d4:	e8 1c cc ff ff       	call   c0001cf5 <mem_set>
c00050d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050dd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00050e0:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c00050e4:	ba 00 00 21 50       	mov    edx,0x50210000
c00050e9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050ec:	83 c0 08             	add    eax,0x8
c00050ef:	e8 e3 cb ff ff       	call   c0001cd7 <st_dword>
c00050f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050f8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050fb:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c00050ff:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005103:	e8 b7 ea ff ff       	call   c0003bbf <store_xdir>
c0005108:	89 c5                	mov    ebp,eax
c000510a:	85 c0                	test   eax,eax
c000510c:	0f 85 98 02 00 00    	jne    c00053aa <f_open+0x419>
c0005112:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0005115:	85 d2                	test   edx,edx
c0005117:	0f 84 db 00 00 00    	je     c00051f8 <f_open+0x267>
c000511d:	31 c9                	xor    ecx,ecx
c000511f:	89 d8                	mov    eax,ebx
c0005121:	e8 8e e3 ff ff       	call   c00034b4 <remove_chain>
c0005126:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000512a:	89 c5                	mov    ebp,eax
c000512c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000512f:	48                   	dec    eax
c0005130:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0005133:	e9 b8 00 00 00       	jmp    c00051f0 <f_open+0x25f>
c0005138:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c000513c:	89 ea                	mov    edx,ebp
c000513e:	e8 99 fc ff ff       	call   c0004ddc <ld_clust.isra.0>
c0005143:	ba 00 00 21 50       	mov    edx,0x50210000
c0005148:	89 c7                	mov    edi,eax
c000514a:	8d 45 0e             	lea    eax,[ebp+0xe]
c000514d:	e8 85 cb ff ff       	call   c0001cd7 <st_dword>
c0005152:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005156:	31 c9                	xor    ecx,ecx
c0005158:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c000515c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005160:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0005164:	e8 9c fc ff ff       	call   c0004e05 <st_clust.isra.1>
c0005169:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000516d:	31 d2                	xor    edx,edx
c000516f:	83 c0 1c             	add    eax,0x1c
c0005172:	e8 60 cb ff ff       	call   c0001cd7 <st_dword>
c0005177:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000517b:	85 ff                	test   edi,edi
c000517d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005181:	74 75                	je     c00051f8 <f_open+0x267>
c0005183:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005187:	31 c9                	xor    ecx,ecx
c0005189:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c000518c:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c000518f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005193:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005197:	89 fa                	mov    edx,edi
c0005199:	8d 44 24 24          	lea    eax,[esp+0x24]
c000519d:	e8 12 e3 ff ff       	call   c00034b4 <remove_chain>
c00051a2:	89 c5                	mov    ebp,eax
c00051a4:	85 c0                	test   eax,eax
c00051a6:	0f 85 fe 01 00 00    	jne    c00053aa <f_open+0x419>
c00051ac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00051b0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00051b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051b8:	4f                   	dec    edi
c00051b9:	e8 81 d2 ff ff       	call   c000243f <move_window>
c00051be:	89 c5                	mov    ebp,eax
c00051c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051c4:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c00051c7:	eb 27                	jmp    c00051f0 <f_open+0x25f>
c00051c9:	85 ed                	test   ebp,ebp
c00051cb:	0f 85 d9 01 00 00    	jne    c00053aa <f_open+0x419>
c00051d1:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c00051d5:	bd 04 00 00 00       	mov    ebp,0x4
c00051da:	a8 10                	test   al,0x10
c00051dc:	0f 85 c8 01 00 00    	jne    c00053aa <f_open+0x419>
c00051e2:	83 e7 02             	and    edi,0x2
c00051e5:	74 11                	je     c00051f8 <f_open+0x267>
c00051e7:	bd 07 00 00 00       	mov    ebp,0x7
c00051ec:	a8 01                	test   al,0x1
c00051ee:	eb 02                	jmp    c00051f2 <f_open+0x261>
c00051f0:	85 ed                	test   ebp,ebp
c00051f2:	0f 85 b2 01 00 00    	jne    c00053aa <f_open+0x419>
c00051f8:	f7 c6 08 00 00 00    	test   esi,0x8
c00051fe:	74 03                	je     c0005203 <f_open+0x272>
c0005200:	83 ce 40             	or     esi,0x40
c0005203:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005207:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c000520a:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c000520d:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c0005210:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c0005213:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0005217:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c000521a:	8a 02                	mov    al,BYTE PTR [edx]
c000521c:	3c 04                	cmp    al,0x4
c000521e:	75 2a                	jne    c000524a <f_open+0x2b9>
c0005220:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005224:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0005229:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000522c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0005230:	30 c0                	xor    al,al
c0005232:	09 c8                	or     eax,ecx
c0005234:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0005237:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000523b:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000523e:	8d 42 10             	lea    eax,[edx+0x10]
c0005241:	89 da                	mov    edx,ebx
c0005243:	e8 e5 fb ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c0005248:	eb 1c                	jmp    c0005266 <f_open+0x2d5>
c000524a:	89 fa                	mov    edx,edi
c000524c:	e8 8b fb ff ff       	call   c0004ddc <ld_clust.isra.0>
c0005251:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005254:	8d 47 1c             	lea    eax,[edi+0x1c]
c0005257:	e8 12 ca ff ff       	call   c0001c6e <ld_dword>
c000525c:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0005263:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005266:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000526a:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0005271:	89 03                	mov    DWORD PTR [ebx],eax
c0005273:	31 d2                	xor    edx,edx
c0005275:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005279:	b9 00 02 00 00       	mov    ecx,0x200
c000527e:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005282:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c0005286:	89 f0                	mov    eax,esi
c0005288:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000528f:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0005292:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c0005299:	8d 43 50             	lea    eax,[ebx+0x50]
c000529c:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c00052a3:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00052aa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00052ae:	e8 42 ca ff ff       	call   c0001cf5 <mem_set>
c00052b3:	83 e6 20             	and    esi,0x20
c00052b6:	75 07                	jne    c00052bf <f_open+0x32e>
c00052b8:	31 ed                	xor    ebp,ebp
c00052ba:	e9 eb 00 00 00       	jmp    c00053aa <f_open+0x419>
c00052bf:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00052c2:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00052c5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00052c9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00052cd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00052d1:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00052d5:	74 e1                	je     c00052b8 <f_open+0x327>
c00052d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052db:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00052df:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00052e2:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00052e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00052e9:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00052ec:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00052f0:	31 ff                	xor    edi,edi
c00052f2:	c1 e5 09             	shl    ebp,0x9
c00052f5:	89 ee                	mov    esi,ebp
c00052f7:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00052fb:	89 f8                	mov    eax,edi
c00052fd:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005301:	73 22                	jae    c0005325 <f_open+0x394>
c0005303:	89 d8                	mov    eax,ebx
c0005305:	e8 bd dc ff ff       	call   c0002fc7 <get_fat>
c000530a:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c000530e:	89 c2                	mov    edx,eax
c0005310:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c0005314:	83 f8 01             	cmp    eax,0x1
c0005317:	76 10                	jbe    c0005329 <f_open+0x398>
c0005319:	83 f8 ff             	cmp    eax,0xffffffff
c000531c:	75 d9                	jne    c00052f7 <f_open+0x366>
c000531e:	bd 01 00 00 00       	mov    ebp,0x1
c0005323:	eb 09                	jmp    c000532e <f_open+0x39d>
c0005325:	31 ed                	xor    ebp,ebp
c0005327:	eb 05                	jmp    c000532e <f_open+0x39d>
c0005329:	bd 02 00 00 00       	mov    ebp,0x2
c000532e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0005331:	85 ed                	test   ebp,ebp
c0005333:	75 75                	jne    c00053aa <f_open+0x419>
c0005335:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005339:	25 ff 01 00 00       	and    eax,0x1ff
c000533e:	0f 84 74 ff ff ff    	je     c00052b8 <f_open+0x327>
c0005344:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0005348:	bd 02 00 00 00       	mov    ebp,0x2
c000534d:	89 c8                	mov    eax,ecx
c000534f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0005353:	e8 a2 cb ff ff       	call   c0001efa <clst2sect>
c0005358:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000535c:	89 d7                	mov    edi,edx
c000535e:	09 c7                	or     edi,eax
c0005360:	74 48                	je     c00053aa <f_open+0x419>
c0005362:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005366:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000536a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005372:	0f ac fe 09          	shrd   esi,edi,0x9
c0005376:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000537a:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000537e:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0005381:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0005385:	83 ec 0c             	sub    esp,0xc
c0005388:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c000538b:	6a 01                	push   0x1
c000538d:	52                   	push   edx
c000538e:	50                   	push   eax
c000538f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0005393:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005397:	50                   	push   eax
c0005398:	e8 79 c8 ff ff       	call   c0001c16 <disk_read>
c000539d:	83 c4 20             	add    esp,0x20
c00053a0:	85 c0                	test   eax,eax
c00053a2:	0f 95 c0             	setne  al
c00053a5:	0f b6 c0             	movzx  eax,al
c00053a8:	89 c5                	mov    ebp,eax
c00053aa:	83 ec 0c             	sub    esp,0xc
c00053ad:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00053b1:	e8 f4 30 00 00       	call   c00084aa <ff_memfree>
c00053b6:	83 c4 10             	add    esp,0x10
c00053b9:	85 ed                	test   ebp,ebp
c00053bb:	74 06                	je     c00053c3 <f_open+0x432>
c00053bd:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00053c3:	83 c4 7c             	add    esp,0x7c
c00053c6:	89 e8                	mov    eax,ebp
c00053c8:	5b                   	pop    ebx
c00053c9:	5e                   	pop    esi
c00053ca:	5f                   	pop    edi
c00053cb:	5d                   	pop    ebp
c00053cc:	c3                   	ret    

c00053cd <f_read>:
c00053cd:	55                   	push   ebp
c00053ce:	57                   	push   edi
c00053cf:	56                   	push   esi
c00053d0:	53                   	push   ebx
c00053d1:	83 ec 2c             	sub    esp,0x2c
c00053d4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00053d8:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00053dc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00053e2:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00053e6:	89 d8                	mov    eax,ebx
c00053e8:	e8 77 cf ff ff       	call   c0002364 <validate>
c00053ed:	89 c5                	mov    ebp,eax
c00053ef:	85 c0                	test   eax,eax
c00053f1:	0f 85 4c 02 00 00    	jne    c0005643 <f_read+0x276>
c00053f7:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00053fb:	85 ed                	test   ebp,ebp
c00053fd:	0f 85 40 02 00 00    	jne    c0005643 <f_read+0x276>
c0005403:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0005407:	0f 84 31 02 00 00    	je     c000563e <f_read+0x271>
c000540d:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005410:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005413:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0005416:	bf 00 00 00 00       	mov    edi,0x0
c000541b:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c000541e:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0005422:	89 d1                	mov    ecx,edx
c0005424:	19 f9                	sbb    ecx,edi
c0005426:	0f 83 cf 00 00 00    	jae    c00054fb <f_read+0x12e>
c000542c:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005430:	e9 c6 00 00 00       	jmp    c00054fb <f_read+0x12e>
c0005435:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005438:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000543b:	89 d0                	mov    eax,edx
c000543d:	25 ff 01 00 00       	and    eax,0x1ff
c0005442:	0f 85 c9 01 00 00    	jne    c0005611 <f_read+0x244>
c0005448:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000544c:	89 d6                	mov    esi,edx
c000544e:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005452:	89 cf                	mov    edi,ecx
c0005454:	48                   	dec    eax
c0005455:	0f ac fe 09          	shrd   esi,edi,0x9
c0005459:	21 f0                	and    eax,esi
c000545b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000545f:	0f 84 a6 00 00 00    	je     c000550b <f_read+0x13e>
c0005465:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005469:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000546c:	89 c8                	mov    eax,ecx
c000546e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0005471:	e8 84 ca ff ff       	call   c0001efa <clst2sect>
c0005476:	89 d7                	mov    edi,edx
c0005478:	09 c7                	or     edi,eax
c000547a:	0f 84 b4 00 00 00    	je     c0005534 <f_read+0x167>
c0005480:	31 ff                	xor    edi,edi
c0005482:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005486:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005489:	01 c6                	add    esi,eax
c000548b:	11 d7                	adc    edi,edx
c000548d:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005495:	0f 86 fd 00 00 00    	jbe    c0005598 <f_read+0x1cb>
c000549b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000549f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00054a3:	c1 e8 09             	shr    eax,0x9
c00054a6:	89 04 24             	mov    DWORD PTR [esp],eax
c00054a9:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00054ad:	03 14 24             	add    edx,DWORD PTR [esp]
c00054b0:	39 c2                	cmp    edx,eax
c00054b2:	76 07                	jbe    c00054bb <f_read+0xee>
c00054b4:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00054b8:	89 04 24             	mov    DWORD PTR [esp],eax
c00054bb:	83 ec 0c             	sub    esp,0xc
c00054be:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00054c2:	57                   	push   edi
c00054c3:	56                   	push   esi
c00054c4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00054c8:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00054cc:	50                   	push   eax
c00054cd:	e8 44 c7 ff ff       	call   c0001c16 <disk_read>
c00054d2:	83 c4 20             	add    esp,0x20
c00054d5:	85 c0                	test   eax,eax
c00054d7:	75 6e                	jne    c0005547 <f_read+0x17a>
c00054d9:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054dd:	78 7e                	js     c000555d <f_read+0x190>
c00054df:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00054e2:	c1 e6 09             	shl    esi,0x9
c00054e5:	31 ff                	xor    edi,edi
c00054e7:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00054eb:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00054ef:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00054f3:	01 30                	add    DWORD PTR [eax],esi
c00054f5:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00054f8:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00054fb:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0005500:	0f 85 2f ff ff ff    	jne    c0005435 <f_read+0x68>
c0005506:	e9 38 01 00 00       	jmp    c0005643 <f_read+0x276>
c000550b:	89 c8                	mov    eax,ecx
c000550d:	09 d0                	or     eax,edx
c000550f:	75 05                	jne    c0005516 <f_read+0x149>
c0005511:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005514:	eb 19                	jmp    c000552f <f_read+0x162>
c0005516:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c000551a:	74 09                	je     c0005525 <f_read+0x158>
c000551c:	89 d8                	mov    eax,ebx
c000551e:	e8 f8 c9 ff ff       	call   c0001f1b <clmt_clust>
c0005523:	eb 0a                	jmp    c000552f <f_read+0x162>
c0005525:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005528:	89 d8                	mov    eax,ebx
c000552a:	e8 98 da ff ff       	call   c0002fc7 <get_fat>
c000552f:	83 f8 01             	cmp    eax,0x1
c0005532:	77 0e                	ja     c0005542 <f_read+0x175>
c0005534:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005538:	bd 02 00 00 00       	mov    ebp,0x2
c000553d:	e9 01 01 00 00       	jmp    c0005643 <f_read+0x276>
c0005542:	83 f8 ff             	cmp    eax,0xffffffff
c0005545:	75 0e                	jne    c0005555 <f_read+0x188>
c0005547:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000554b:	bd 01 00 00 00       	mov    ebp,0x1
c0005550:	e9 ee 00 00 00       	jmp    c0005643 <f_read+0x276>
c0005555:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005558:	e9 08 ff ff ff       	jmp    c0005465 <f_read+0x98>
c000555d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005560:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005563:	29 f0                	sub    eax,esi
c0005565:	19 fa                	sbb    edx,edi
c0005567:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000556a:	89 d7                	mov    edi,edx
c000556c:	ba 00 00 00 00       	mov    edx,0x0
c0005571:	89 f9                	mov    ecx,edi
c0005573:	19 d1                	sbb    ecx,edx
c0005575:	0f 83 64 ff ff ff    	jae    c00054df <f_read+0x112>
c000557b:	89 c7                	mov    edi,eax
c000557d:	8d 53 50             	lea    edx,[ebx+0x50]
c0005580:	c1 e7 09             	shl    edi,0x9
c0005583:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005587:	b9 00 02 00 00       	mov    ecx,0x200
c000558c:	01 f8                	add    eax,edi
c000558e:	e8 4d c7 ff ff       	call   c0001ce0 <mem_cpy>
c0005593:	e9 47 ff ff ff       	jmp    c00054df <f_read+0x112>
c0005598:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000559b:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000559e:	89 04 24             	mov    DWORD PTR [esp],eax
c00055a1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00055a5:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c00055a9:	75 05                	jne    c00055b0 <f_read+0x1e3>
c00055ab:	39 34 24             	cmp    DWORD PTR [esp],esi
c00055ae:	74 5b                	je     c000560b <f_read+0x23e>
c00055b0:	8d 43 50             	lea    eax,[ebx+0x50]
c00055b3:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00055b7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00055bb:	79 2a                	jns    c00055e7 <f_read+0x21a>
c00055bd:	83 ec 0c             	sub    esp,0xc
c00055c0:	6a 01                	push   0x1
c00055c2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00055c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00055ca:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055ce:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00055d2:	50                   	push   eax
c00055d3:	e8 54 c6 ff ff       	call   c0001c2c <disk_write>
c00055d8:	83 c4 20             	add    esp,0x20
c00055db:	85 c0                	test   eax,eax
c00055dd:	0f 85 64 ff ff ff    	jne    c0005547 <f_read+0x17a>
c00055e3:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00055e7:	83 ec 0c             	sub    esp,0xc
c00055ea:	6a 01                	push   0x1
c00055ec:	57                   	push   edi
c00055ed:	56                   	push   esi
c00055ee:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055f2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00055f6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00055fa:	50                   	push   eax
c00055fb:	e8 16 c6 ff ff       	call   c0001c16 <disk_read>
c0005600:	83 c4 20             	add    esp,0x20
c0005603:	85 c0                	test   eax,eax
c0005605:	0f 85 3c ff ff ff    	jne    c0005547 <f_read+0x17a>
c000560b:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000560e:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005611:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005614:	ba 00 02 00 00       	mov    edx,0x200
c0005619:	25 ff 01 00 00       	and    eax,0x1ff
c000561e:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0005622:	29 c2                	sub    edx,eax
c0005624:	39 d6                	cmp    esi,edx
c0005626:	76 02                	jbe    c000562a <f_read+0x25d>
c0005628:	89 d6                	mov    esi,edx
c000562a:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c000562e:	89 f1                	mov    ecx,esi
c0005630:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005634:	e8 a7 c6 ff ff       	call   c0001ce0 <mem_cpy>
c0005639:	e9 a7 fe ff ff       	jmp    c00054e5 <f_read+0x118>
c000563e:	bd 07 00 00 00       	mov    ebp,0x7
c0005643:	83 c4 2c             	add    esp,0x2c
c0005646:	89 e8                	mov    eax,ebp
c0005648:	5b                   	pop    ebx
c0005649:	5e                   	pop    esi
c000564a:	5f                   	pop    edi
c000564b:	5d                   	pop    ebp
c000564c:	c3                   	ret    

c000564d <f_write>:
c000564d:	55                   	push   ebp
c000564e:	57                   	push   edi
c000564f:	56                   	push   esi
c0005650:	53                   	push   ebx
c0005651:	83 ec 2c             	sub    esp,0x2c
c0005654:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005658:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000565c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005662:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005666:	89 d8                	mov    eax,ebx
c0005668:	e8 f7 cc ff ff       	call   c0002364 <validate>
c000566d:	89 c5                	mov    ebp,eax
c000566f:	85 c0                	test   eax,eax
c0005671:	0f 85 86 02 00 00    	jne    c00058fd <f_write+0x2b0>
c0005677:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c000567b:	85 ed                	test   ebp,ebp
c000567d:	0f 85 7a 02 00 00    	jne    c00058fd <f_write+0x2b0>
c0005683:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005687:	0f 84 6b 02 00 00    	je     c00058f8 <f_write+0x2ab>
c000568d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005691:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005694:	0f 84 43 01 00 00    	je     c00057dd <f_write+0x190>
c000569a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000569d:	89 c1                	mov    ecx,eax
c000569f:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00056a3:	0f 83 34 01 00 00    	jae    c00057dd <f_write+0x190>
c00056a9:	f7 d0                	not    eax
c00056ab:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00056af:	e9 29 01 00 00       	jmp    c00057dd <f_write+0x190>
c00056b4:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00056b7:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00056ba:	89 d0                	mov    eax,edx
c00056bc:	25 ff 01 00 00       	and    eax,0x1ff
c00056c1:	0f 85 00 02 00 00    	jne    c00058c7 <f_write+0x27a>
c00056c7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00056cb:	89 d6                	mov    esi,edx
c00056cd:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00056d1:	89 cf                	mov    edi,ecx
c00056d3:	48                   	dec    eax
c00056d4:	0f ac fe 09          	shrd   esi,edi,0x9
c00056d8:	21 f0                	and    eax,esi
c00056da:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00056de:	0f 84 06 01 00 00    	je     c00057ea <f_write+0x19d>
c00056e4:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00056e8:	0f 88 6e 01 00 00    	js     c000585c <f_write+0x20f>
c00056ee:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00056f2:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00056f5:	89 c8                	mov    eax,ecx
c00056f7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00056fb:	e8 fa c7 ff ff       	call   c0001efa <clst2sect>
c0005700:	89 d1                	mov    ecx,edx
c0005702:	09 c1                	or     ecx,eax
c0005704:	0f 84 1c 01 00 00    	je     c0005826 <f_write+0x1d9>
c000570a:	31 ff                	xor    edi,edi
c000570c:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005710:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0005714:	01 c6                	add    esi,eax
c0005716:	11 d7                	adc    edi,edx
c0005718:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005720:	0f 86 63 01 00 00    	jbe    c0005889 <f_write+0x23c>
c0005726:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000572a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000572e:	c1 e8 09             	shr    eax,0x9
c0005731:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005735:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005739:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c000573d:	39 c2                	cmp    edx,eax
c000573f:	76 08                	jbe    c0005749 <f_write+0xfc>
c0005741:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0005745:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005749:	83 ec 0c             	sub    esp,0xc
c000574c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005750:	57                   	push   edi
c0005751:	56                   	push   esi
c0005752:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005756:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000575a:	50                   	push   eax
c000575b:	e8 cc c4 ff ff       	call   c0001c2c <disk_write>
c0005760:	83 c4 20             	add    esp,0x20
c0005763:	85 c0                	test   eax,eax
c0005765:	0f 85 ce 00 00 00    	jne    c0005839 <f_write+0x1ec>
c000576b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000576e:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005771:	29 f0                	sub    eax,esi
c0005773:	19 fa                	sbb    edx,edi
c0005775:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0005779:	89 d7                	mov    edi,edx
c000577b:	ba 00 00 00 00       	mov    edx,0x0
c0005780:	89 f9                	mov    ecx,edi
c0005782:	19 d1                	sbb    ecx,edx
c0005784:	73 1c                	jae    c00057a2 <f_write+0x155>
c0005786:	89 c7                	mov    edi,eax
c0005788:	b9 00 02 00 00       	mov    ecx,0x200
c000578d:	c1 e7 09             	shl    edi,0x9
c0005790:	8d 43 50             	lea    eax,[ebx+0x50]
c0005793:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c0005797:	89 fa                	mov    edx,edi
c0005799:	e8 42 c5 ff ff       	call   c0001ce0 <mem_cpy>
c000579e:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00057a2:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00057a6:	c1 e6 09             	shl    esi,0x9
c00057a9:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00057ad:	31 ff                	xor    edi,edi
c00057af:	01 30                	add    DWORD PTR [eax],esi
c00057b1:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00057b5:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00057b9:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057bc:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c00057bf:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00057c2:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c00057c5:	89 c1                	mov    ecx,eax
c00057c7:	39 f2                	cmp    edx,esi
c00057c9:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00057cc:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00057cf:	19 f9                	sbb    ecx,edi
c00057d1:	73 04                	jae    c00057d7 <f_write+0x18a>
c00057d3:	89 f2                	mov    edx,esi
c00057d5:	89 f8                	mov    eax,edi
c00057d7:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00057da:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00057dd:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00057e2:	0f 85 cc fe ff ff    	jne    c00056b4 <f_write+0x67>
c00057e8:	eb 2e                	jmp    c0005818 <f_write+0x1cb>
c00057ea:	89 c8                	mov    eax,ecx
c00057ec:	09 d0                	or     eax,edx
c00057ee:	75 0b                	jne    c00057fb <f_write+0x1ae>
c00057f0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00057f3:	31 d2                	xor    edx,edx
c00057f5:	85 c0                	test   eax,eax
c00057f7:	75 28                	jne    c0005821 <f_write+0x1d4>
c00057f9:	eb 12                	jmp    c000580d <f_write+0x1c0>
c00057fb:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00057ff:	74 09                	je     c000580a <f_write+0x1bd>
c0005801:	89 d8                	mov    eax,ebx
c0005803:	e8 13 c7 ff ff       	call   c0001f1b <clmt_clust>
c0005808:	eb 0a                	jmp    c0005814 <f_write+0x1c7>
c000580a:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000580d:	89 d8                	mov    eax,ebx
c000580f:	e8 a1 da ff ff       	call   c00032b5 <create_chain>
c0005814:	85 c0                	test   eax,eax
c0005816:	75 09                	jne    c0005821 <f_write+0x1d4>
c0005818:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c000581c:	e9 dc 00 00 00       	jmp    c00058fd <f_write+0x2b0>
c0005821:	83 f8 01             	cmp    eax,0x1
c0005824:	75 0e                	jne    c0005834 <f_write+0x1e7>
c0005826:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c000582a:	bd 02 00 00 00       	mov    ebp,0x2
c000582f:	e9 c9 00 00 00       	jmp    c00058fd <f_write+0x2b0>
c0005834:	83 f8 ff             	cmp    eax,0xffffffff
c0005837:	75 0e                	jne    c0005847 <f_write+0x1fa>
c0005839:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000583d:	bd 01 00 00 00       	mov    ebp,0x1
c0005842:	e9 b6 00 00 00       	jmp    c00058fd <f_write+0x2b0>
c0005847:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000584a:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000584e:	0f 85 90 fe ff ff    	jne    c00056e4 <f_write+0x97>
c0005854:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005857:	e9 88 fe ff ff       	jmp    c00056e4 <f_write+0x97>
c000585c:	83 ec 0c             	sub    esp,0xc
c000585f:	8d 43 50             	lea    eax,[ebx+0x50]
c0005862:	6a 01                	push   0x1
c0005864:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005867:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000586a:	50                   	push   eax
c000586b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000586f:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005873:	50                   	push   eax
c0005874:	e8 b3 c3 ff ff       	call   c0001c2c <disk_write>
c0005879:	83 c4 20             	add    esp,0x20
c000587c:	85 c0                	test   eax,eax
c000587e:	75 b9                	jne    c0005839 <f_write+0x1ec>
c0005880:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005884:	e9 65 fe ff ff       	jmp    c00056ee <f_write+0xa1>
c0005889:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c000588c:	75 05                	jne    c0005893 <f_write+0x246>
c000588e:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c0005891:	74 2e                	je     c00058c1 <f_write+0x274>
c0005893:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0005896:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005899:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c000589c:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c000589f:	73 20                	jae    c00058c1 <f_write+0x274>
c00058a1:	83 ec 0c             	sub    esp,0xc
c00058a4:	8d 43 50             	lea    eax,[ebx+0x50]
c00058a7:	6a 01                	push   0x1
c00058a9:	57                   	push   edi
c00058aa:	56                   	push   esi
c00058ab:	50                   	push   eax
c00058ac:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00058b0:	50                   	push   eax
c00058b1:	e8 60 c3 ff ff       	call   c0001c16 <disk_read>
c00058b6:	83 c4 20             	add    esp,0x20
c00058b9:	85 c0                	test   eax,eax
c00058bb:	0f 85 78 ff ff ff    	jne    c0005839 <f_write+0x1ec>
c00058c1:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00058c4:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00058c7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00058ca:	ba 00 02 00 00       	mov    edx,0x200
c00058cf:	25 ff 01 00 00       	and    eax,0x1ff
c00058d4:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00058d8:	29 c2                	sub    edx,eax
c00058da:	39 d6                	cmp    esi,edx
c00058dc:	76 02                	jbe    c00058e0 <f_write+0x293>
c00058de:	89 d6                	mov    esi,edx
c00058e0:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00058e4:	89 f1                	mov    ecx,esi
c00058e6:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00058ea:	e8 f1 c3 ff ff       	call   c0001ce0 <mem_cpy>
c00058ef:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00058f3:	e9 b1 fe ff ff       	jmp    c00057a9 <f_write+0x15c>
c00058f8:	bd 07 00 00 00       	mov    ebp,0x7
c00058fd:	83 c4 2c             	add    esp,0x2c
c0005900:	89 e8                	mov    eax,ebp
c0005902:	5b                   	pop    ebx
c0005903:	5e                   	pop    esi
c0005904:	5f                   	pop    edi
c0005905:	5d                   	pop    ebp
c0005906:	c3                   	ret    

c0005907 <f_sync>:
c0005907:	56                   	push   esi
c0005908:	53                   	push   ebx
c0005909:	83 ec 64             	sub    esp,0x64
c000590c:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0005910:	8d 54 24 10          	lea    edx,[esp+0x10]
c0005914:	89 d8                	mov    eax,ebx
c0005916:	e8 49 ca ff ff       	call   c0002364 <validate>
c000591b:	85 c0                	test   eax,eax
c000591d:	0f 85 ba 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005923:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0005926:	f6 c2 40             	test   dl,0x40
c0005929:	0f 84 ae 01 00 00    	je     c0005add <f_sync+0x1d6>
c000592f:	84 d2                	test   dl,dl
c0005931:	79 33                	jns    c0005966 <f_sync+0x5f>
c0005933:	83 ec 0c             	sub    esp,0xc
c0005936:	8d 43 50             	lea    eax,[ebx+0x50]
c0005939:	6a 01                	push   0x1
c000593b:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000593e:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005941:	50                   	push   eax
c0005942:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005946:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000594a:	50                   	push   eax
c000594b:	e8 dc c2 ff ff       	call   c0001c2c <disk_write>
c0005950:	83 c4 20             	add    esp,0x20
c0005953:	89 c2                	mov    edx,eax
c0005955:	b8 01 00 00 00       	mov    eax,0x1
c000595a:	85 d2                	test   edx,edx
c000595c:	0f 85 7b 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005962:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005966:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000596a:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000596d:	0f 85 11 01 00 00    	jne    c0005a84 <f_sync+0x17d>
c0005973:	89 d8                	mov    eax,ebx
c0005975:	e8 13 d6 ff ff       	call   c0002f8d <fill_first_frag>
c000597a:	85 c0                	test   eax,eax
c000597c:	0f 85 5b 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005982:	83 c9 ff             	or     ecx,0xffffffff
c0005985:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005988:	89 d8                	mov    eax,ebx
c000598a:	e8 c9 d5 ff ff       	call   c0002f58 <fill_last_frag>
c000598f:	85 c0                	test   eax,eax
c0005991:	0f 85 46 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005997:	83 ec 0c             	sub    esp,0xc
c000599a:	68 60 04 00 00       	push   0x460
c000599f:	e8 f0 2a 00 00       	call   c0008494 <ff_memalloc>
c00059a4:	83 c4 10             	add    esp,0x10
c00059a7:	89 c6                	mov    esi,eax
c00059a9:	b8 11 00 00 00       	mov    eax,0x11
c00059ae:	85 f6                	test   esi,esi
c00059b0:	0f 84 27 01 00 00    	je     c0005add <f_sync+0x1d6>
c00059b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059ba:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00059c0:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00059c3:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00059c6:	89 da                	mov    edx,ebx
c00059c8:	8d 44 24 14          	lea    eax,[esp+0x14]
c00059cc:	e8 af df ff ff       	call   c0003980 <load_obj_xdir>
c00059d1:	85 c0                	test   eax,eax
c00059d3:	0f 85 95 00 00 00    	jne    c0005a6e <f_sync+0x167>
c00059d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059dd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00059e0:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00059e4:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00059e7:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00059ea:	83 ca 01             	or     edx,0x1
c00059ed:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00059f0:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00059f3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059f6:	83 c0 34             	add    eax,0x34
c00059f9:	e8 d9 c2 ff ff       	call   c0001cd7 <st_dword>
c00059fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a02:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a05:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a08:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005a0b:	83 c0 38             	add    eax,0x38
c0005a0e:	e8 c7 c2 ff ff       	call   c0001cda <st_qword>
c0005a13:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005a16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a1a:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a1d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a20:	83 c0 28             	add    eax,0x28
c0005a23:	e8 b2 c2 ff ff       	call   c0001cda <st_qword>
c0005a28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a2c:	ba 00 00 21 50       	mov    edx,0x50210000
c0005a31:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a34:	83 c0 0c             	add    eax,0xc
c0005a37:	e8 9b c2 ff ff       	call   c0001cd7 <st_dword>
c0005a3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a40:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005a43:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005a47:	31 d2                	xor    edx,edx
c0005a49:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a4c:	83 c0 10             	add    eax,0x10
c0005a4f:	e8 83 c2 ff ff       	call   c0001cd7 <st_dword>
c0005a54:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005a58:	e8 62 e1 ff ff       	call   c0003bbf <store_xdir>
c0005a5d:	85 c0                	test   eax,eax
c0005a5f:	75 0d                	jne    c0005a6e <f_sync+0x167>
c0005a61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a65:	e8 00 eb ff ff       	call   c000456a <sync_fs>
c0005a6a:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005a6e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005a72:	83 ec 0c             	sub    esp,0xc
c0005a75:	56                   	push   esi
c0005a76:	e8 2f 2a 00 00       	call   c00084aa <ff_memfree>
c0005a7b:	83 c4 10             	add    esp,0x10
c0005a7e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a82:	eb 59                	jmp    c0005add <f_sync+0x1d6>
c0005a84:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005a87:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005a8a:	e8 b0 c9 ff ff       	call   c000243f <move_window>
c0005a8f:	85 c0                	test   eax,eax
c0005a91:	75 4a                	jne    c0005add <f_sync+0x1d6>
c0005a93:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005a96:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005a9a:	89 f2                	mov    edx,esi
c0005a9c:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005a9f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005aa1:	e8 5f f3 ff ff       	call   c0004e05 <st_clust.isra.1>
c0005aa6:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005aa9:	8d 46 1c             	lea    eax,[esi+0x1c]
c0005aac:	e8 26 c2 ff ff       	call   c0001cd7 <st_dword>
c0005ab1:	8d 46 16             	lea    eax,[esi+0x16]
c0005ab4:	ba 00 00 21 50       	mov    edx,0x50210000
c0005ab9:	e8 19 c2 ff ff       	call   c0001cd7 <st_dword>
c0005abe:	8d 46 12             	lea    eax,[esi+0x12]
c0005ac1:	31 d2                	xor    edx,edx
c0005ac3:	e8 0b c2 ff ff       	call   c0001cd3 <st_word>
c0005ac8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005acc:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005ad0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005ad4:	e8 91 ea ff ff       	call   c000456a <sync_fs>
c0005ad9:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005add:	83 c4 64             	add    esp,0x64
c0005ae0:	5b                   	pop    ebx
c0005ae1:	5e                   	pop    esi
c0005ae2:	c3                   	ret    

c0005ae3 <f_close>:
c0005ae3:	53                   	push   ebx
c0005ae4:	83 ec 24             	sub    esp,0x24
c0005ae7:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0005aeb:	53                   	push   ebx
c0005aec:	e8 16 fe ff ff       	call   c0005907 <f_sync>
c0005af1:	83 c4 10             	add    esp,0x10
c0005af4:	85 c0                	test   eax,eax
c0005af6:	75 15                	jne    c0005b0d <f_close+0x2a>
c0005af8:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005afc:	89 d8                	mov    eax,ebx
c0005afe:	e8 61 c8 ff ff       	call   c0002364 <validate>
c0005b03:	85 c0                	test   eax,eax
c0005b05:	75 06                	jne    c0005b0d <f_close+0x2a>
c0005b07:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005b0d:	83 c4 18             	add    esp,0x18
c0005b10:	5b                   	pop    ebx
c0005b11:	c3                   	ret    

c0005b12 <f_lseek>:
c0005b12:	55                   	push   ebp
c0005b13:	57                   	push   edi
c0005b14:	56                   	push   esi
c0005b15:	53                   	push   ebx
c0005b16:	83 ec 3c             	sub    esp,0x3c
c0005b19:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005b1d:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005b21:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005b25:	89 04 24             	mov    DWORD PTR [esp],eax
c0005b28:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005b2c:	89 d8                	mov    eax,ebx
c0005b2e:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005b32:	e8 2d c8 ff ff       	call   c0002364 <validate>
c0005b37:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b3b:	85 c0                	test   eax,eax
c0005b3d:	0f 85 7a 04 00 00    	jne    c0005fbd <f_lseek+0x4ab>
c0005b43:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005b47:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b4b:	85 c0                	test   eax,eax
c0005b4d:	0f 85 6a 04 00 00    	jne    c0005fbd <f_lseek+0x4ab>
c0005b53:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005b57:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005b5a:	74 0c                	je     c0005b68 <f_lseek+0x56>
c0005b5c:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005b5f:	85 c0                	test   eax,eax
c0005b61:	75 1f                	jne    c0005b82 <f_lseek+0x70>
c0005b63:	e9 b5 01 00 00       	jmp    c0005d1d <f_lseek+0x20b>
c0005b68:	83 c9 ff             	or     ecx,0xffffffff
c0005b6b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005b6e:	89 d8                	mov    eax,ebx
c0005b70:	e8 e3 d3 ff ff       	call   c0002f58 <fill_last_frag>
c0005b75:	85 c0                	test   eax,eax
c0005b77:	74 e3                	je     c0005b5c <f_lseek+0x4a>
c0005b79:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b7d:	e9 3b 04 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005b82:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005b87:	0f 85 ac 00 00 00    	jne    c0005c39 <f_lseek+0x127>
c0005b8d:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005b91:	0f 85 a2 00 00 00    	jne    c0005c39 <f_lseek+0x127>
c0005b97:	8d 78 04             	lea    edi,[eax+0x4]
c0005b9a:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005b9d:	8b 00                	mov    eax,DWORD PTR [eax]
c0005b9f:	be 02 00 00 00       	mov    esi,0x2
c0005ba4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005ba8:	85 ed                	test   ebp,ebp
c0005baa:	74 73                	je     c0005c1f <f_lseek+0x10d>
c0005bac:	89 e9                	mov    ecx,ebp
c0005bae:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005bb5:	ff 04 24             	inc    DWORD PTR [esp]
c0005bb8:	89 ca                	mov    edx,ecx
c0005bba:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005bbe:	89 d8                	mov    eax,ebx
c0005bc0:	e8 02 d4 ff ff       	call   c0002fc7 <get_fat>
c0005bc5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005bc9:	83 f8 01             	cmp    eax,0x1
c0005bcc:	77 11                	ja     c0005bdf <f_lseek+0xcd>
c0005bce:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005bd2:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005bda:	e9 de 03 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005bdf:	83 f8 ff             	cmp    eax,0xffffffff
c0005be2:	75 11                	jne    c0005bf5 <f_lseek+0xe3>
c0005be4:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005be8:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005bf0:	e9 c8 03 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005bf5:	8d 51 01             	lea    edx,[ecx+0x1]
c0005bf8:	89 c1                	mov    ecx,eax
c0005bfa:	39 c2                	cmp    edx,eax
c0005bfc:	74 b7                	je     c0005bb5 <f_lseek+0xa3>
c0005bfe:	83 c6 02             	add    esi,0x2
c0005c01:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005c05:	72 0b                	jb     c0005c12 <f_lseek+0x100>
c0005c07:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005c0a:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005c0d:	89 0f                	mov    DWORD PTR [edi],ecx
c0005c0f:	83 c7 08             	add    edi,0x8
c0005c12:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005c16:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005c19:	76 04                	jbe    c0005c1f <f_lseek+0x10d>
c0005c1b:	89 c5                	mov    ebp,eax
c0005c1d:	eb 8d                	jmp    c0005bac <f_lseek+0x9a>
c0005c1f:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005c22:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005c26:	89 30                	mov    DWORD PTR [eax],esi
c0005c28:	0f 87 87 03 00 00    	ja     c0005fb5 <f_lseek+0x4a3>
c0005c2e:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005c34:	e9 84 03 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005c39:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005c3c:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005c3f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c43:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c47:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c4b:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005c4e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c52:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005c56:	73 0f                	jae    c0005c67 <f_lseek+0x155>
c0005c58:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005c5b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005c5f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c63:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c67:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c6b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005c6f:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005c72:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005c75:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c79:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005c7d:	0f 84 3a 03 00 00    	je     c0005fbd <f_lseek+0x4ab>
c0005c83:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005c87:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005c8b:	83 c6 ff             	add    esi,0xffffffff
c0005c8e:	89 d8                	mov    eax,ebx
c0005c90:	83 d7 ff             	adc    edi,0xffffffff
c0005c93:	89 f2                	mov    edx,esi
c0005c95:	89 f9                	mov    ecx,edi
c0005c97:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005c9b:	89 34 24             	mov    DWORD PTR [esp],esi
c0005c9e:	e8 78 c2 ff ff       	call   c0001f1b <clmt_clust>
c0005ca3:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005ca7:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005caa:	89 c2                	mov    edx,eax
c0005cac:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005cb0:	89 c8                	mov    eax,ecx
c0005cb2:	e8 43 c2 ff ff       	call   c0001efa <clst2sect>
c0005cb7:	89 d7                	mov    edi,edx
c0005cb9:	09 c7                	or     edi,eax
c0005cbb:	0f 84 0d ff ff ff    	je     c0005bce <f_lseek+0xbc>
c0005cc1:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005cc5:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005ccb:	0f 84 ec 02 00 00    	je     c0005fbd <f_lseek+0x4ab>
c0005cd1:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005cd5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005cd9:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005cdc:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005ce0:	0f ac fe 09          	shrd   esi,edi,0x9
c0005ce4:	4d                   	dec    ebp
c0005ce5:	31 ff                	xor    edi,edi
c0005ce7:	21 ee                	and    esi,ebp
c0005ce9:	01 c6                	add    esi,eax
c0005ceb:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005cee:	11 d7                	adc    edi,edx
c0005cf0:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005cf3:	39 fa                	cmp    edx,edi
c0005cf5:	75 08                	jne    c0005cff <f_lseek+0x1ed>
c0005cf7:	39 f0                	cmp    eax,esi
c0005cf9:	0f 84 be 02 00 00    	je     c0005fbd <f_lseek+0x4ab>
c0005cff:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005d02:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005d06:	0f 89 80 02 00 00    	jns    c0005f8c <f_lseek+0x47a>
c0005d0c:	83 ec 0c             	sub    esp,0xc
c0005d0f:	6a 01                	push   0x1
c0005d11:	52                   	push   edx
c0005d12:	50                   	push   eax
c0005d13:	55                   	push   ebp
c0005d14:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005d18:	e9 5a 02 00 00       	jmp    c0005f77 <f_lseek+0x465>
c0005d1d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005d21:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005d24:	74 16                	je     c0005d3c <f_lseek+0x22a>
c0005d26:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005d2b:	76 0f                	jbe    c0005d3c <f_lseek+0x22a>
c0005d2d:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005d34:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005d3c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005d3f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005d42:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005d45:	89 c7                	mov    edi,eax
c0005d47:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005d4b:	73 0d                	jae    c0005d5a <f_lseek+0x248>
c0005d4d:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005d51:	75 07                	jne    c0005d5a <f_lseek+0x248>
c0005d53:	89 14 24             	mov    DWORD PTR [esp],edx
c0005d56:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005d5a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005d5d:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005d60:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005d64:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005d6b:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005d72:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005d75:	75 09                	jne    c0005d80 <f_lseek+0x26e>
c0005d77:	31 f6                	xor    esi,esi
c0005d79:	31 ff                	xor    edi,edi
c0005d7b:	e9 af 01 00 00       	jmp    c0005f2f <f_lseek+0x41d>
c0005d80:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005d84:	89 d7                	mov    edi,edx
c0005d86:	c1 e1 09             	shl    ecx,0x9
c0005d89:	09 c7                	or     edi,eax
c0005d8b:	89 cd                	mov    ebp,ecx
c0005d8d:	74 6d                	je     c0005dfc <f_lseek+0x2ea>
c0005d8f:	83 c0 ff             	add    eax,0xffffffff
c0005d92:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005d96:	83 d2 ff             	adc    edx,0xffffffff
c0005d99:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005d9c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005da0:	83 c0 ff             	add    eax,0xffffffff
c0005da3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005da7:	83 d2 ff             	adc    edx,0xffffffff
c0005daa:	31 ff                	xor    edi,edi
c0005dac:	57                   	push   edi
c0005dad:	51                   	push   ecx
c0005dae:	52                   	push   edx
c0005daf:	50                   	push   eax
c0005db0:	e8 e7 04 02 00       	call   c002629c <__udivdi3>
c0005db5:	83 c4 10             	add    esp,0x10
c0005db8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005dbc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005dc0:	57                   	push   edi
c0005dc1:	55                   	push   ebp
c0005dc2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005dc6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005dca:	e8 cd 04 02 00       	call   c002629c <__udivdi3>
c0005dcf:	83 c4 10             	add    esp,0x10
c0005dd2:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005dd6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005dda:	19 d1                	sbb    ecx,edx
c0005ddc:	72 1e                	jb     c0005dfc <f_lseek+0x2ea>
c0005dde:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005de2:	89 e9                	mov    ecx,ebp
c0005de4:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005de7:	f7 d9                	neg    ecx
c0005de9:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005dec:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005df0:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005df3:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005df6:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005dfa:	eb 28                	jmp    c0005e24 <f_lseek+0x312>
c0005dfc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005dff:	85 c0                	test   eax,eax
c0005e01:	75 1e                	jne    c0005e21 <f_lseek+0x30f>
c0005e03:	31 d2                	xor    edx,edx
c0005e05:	89 d8                	mov    eax,ebx
c0005e07:	e8 a9 d4 ff ff       	call   c00032b5 <create_chain>
c0005e0c:	83 f8 01             	cmp    eax,0x1
c0005e0f:	0f 84 b9 fd ff ff    	je     c0005bce <f_lseek+0xbc>
c0005e15:	83 f8 ff             	cmp    eax,0xffffffff
c0005e18:	0f 84 c6 fd ff ff    	je     c0005be4 <f_lseek+0xd2>
c0005e1e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005e21:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005e24:	85 c0                	test   eax,eax
c0005e26:	0f 84 4b ff ff ff    	je     c0005d77 <f_lseek+0x265>
c0005e2c:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005e30:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005e38:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005e3b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e3f:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005e42:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005e45:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005e49:	0f 83 9d 00 00 00    	jae    c0005eec <f_lseek+0x3da>
c0005e4f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005e53:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e57:	29 34 24             	sub    DWORD PTR [esp],esi
c0005e5a:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005e5e:	01 f2                	add    edx,esi
c0005e60:	11 f9                	adc    ecx,edi
c0005e62:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005e66:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005e6a:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005e6d:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005e70:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005e73:	f6 c1 02             	test   cl,0x2
c0005e76:	74 35                	je     c0005ead <f_lseek+0x39b>
c0005e78:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005e7c:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005e7f:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005e82:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005e86:	73 16                	jae    c0005e9e <f_lseek+0x38c>
c0005e88:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005e8c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005e90:	88 ca                	mov    dl,cl
c0005e92:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005e95:	83 ca 40             	or     edx,0x40
c0005e98:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005e9b:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005e9e:	89 c2                	mov    edx,eax
c0005ea0:	89 d8                	mov    eax,ebx
c0005ea2:	e8 0e d4 ff ff       	call   c00032b5 <create_chain>
c0005ea7:	85 c0                	test   eax,eax
c0005ea9:	75 0b                	jne    c0005eb6 <f_lseek+0x3a4>
c0005eab:	eb 30                	jmp    c0005edd <f_lseek+0x3cb>
c0005ead:	89 c2                	mov    edx,eax
c0005eaf:	89 d8                	mov    eax,ebx
c0005eb1:	e8 11 d1 ff ff       	call   c0002fc7 <get_fat>
c0005eb6:	83 f8 ff             	cmp    eax,0xffffffff
c0005eb9:	0f 84 25 fd ff ff    	je     c0005be4 <f_lseek+0xd2>
c0005ebf:	83 f8 01             	cmp    eax,0x1
c0005ec2:	0f 86 06 fd ff ff    	jbe    c0005bce <f_lseek+0xbc>
c0005ec8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005ecc:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005ecf:	0f 86 f9 fc ff ff    	jbe    c0005bce <f_lseek+0xbc>
c0005ed5:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005ed8:	e9 5b ff ff ff       	jmp    c0005e38 <f_lseek+0x326>
c0005edd:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005ee4:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005eec:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005eef:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005ef3:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005ef6:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005ef9:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005efc:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005f02:	0f 84 6f fe ff ff    	je     c0005d77 <f_lseek+0x265>
c0005f08:	89 c2                	mov    edx,eax
c0005f0a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005f0e:	e8 e7 bf ff ff       	call   c0001efa <clst2sect>
c0005f13:	89 d7                	mov    edi,edx
c0005f15:	09 c7                	or     edi,eax
c0005f17:	0f 84 b1 fc ff ff    	je     c0005bce <f_lseek+0xbc>
c0005f1d:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005f21:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005f24:	0f ac fe 09          	shrd   esi,edi,0x9
c0005f28:	c1 ef 09             	shr    edi,0x9
c0005f2b:	01 c6                	add    esi,eax
c0005f2d:	11 d7                	adc    edi,edx
c0005f2f:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005f32:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005f35:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005f38:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005f3b:	19 d1                	sbb    ecx,edx
c0005f3d:	73 0a                	jae    c0005f49 <f_lseek+0x437>
c0005f3f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005f42:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005f45:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005f49:	a9 ff 01 00 00       	test   eax,0x1ff
c0005f4e:	74 6d                	je     c0005fbd <f_lseek+0x4ab>
c0005f50:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005f53:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005f56:	39 fa                	cmp    edx,edi
c0005f58:	75 04                	jne    c0005f5e <f_lseek+0x44c>
c0005f5a:	39 f0                	cmp    eax,esi
c0005f5c:	74 5f                	je     c0005fbd <f_lseek+0x4ab>
c0005f5e:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005f61:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005f65:	79 25                	jns    c0005f8c <f_lseek+0x47a>
c0005f67:	83 ec 0c             	sub    esp,0xc
c0005f6a:	6a 01                	push   0x1
c0005f6c:	52                   	push   edx
c0005f6d:	50                   	push   eax
c0005f6e:	55                   	push   ebp
c0005f6f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f73:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f77:	50                   	push   eax
c0005f78:	e8 af bc ff ff       	call   c0001c2c <disk_write>
c0005f7d:	83 c4 20             	add    esp,0x20
c0005f80:	85 c0                	test   eax,eax
c0005f82:	0f 85 5c fc ff ff    	jne    c0005be4 <f_lseek+0xd2>
c0005f88:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005f8c:	83 ec 0c             	sub    esp,0xc
c0005f8f:	6a 01                	push   0x1
c0005f91:	57                   	push   edi
c0005f92:	56                   	push   esi
c0005f93:	55                   	push   ebp
c0005f94:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f98:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f9c:	50                   	push   eax
c0005f9d:	e8 74 bc ff ff       	call   c0001c16 <disk_read>
c0005fa2:	83 c4 20             	add    esp,0x20
c0005fa5:	85 c0                	test   eax,eax
c0005fa7:	0f 85 37 fc ff ff    	jne    c0005be4 <f_lseek+0xd2>
c0005fad:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005fb0:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005fb3:	eb 08                	jmp    c0005fbd <f_lseek+0x4ab>
c0005fb5:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005fbd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005fc1:	83 c4 3c             	add    esp,0x3c
c0005fc4:	5b                   	pop    ebx
c0005fc5:	5e                   	pop    esi
c0005fc6:	5f                   	pop    edi
c0005fc7:	5d                   	pop    ebp
c0005fc8:	c3                   	ret    

c0005fc9 <f_opendir>:
c0005fc9:	56                   	push   esi
c0005fca:	b8 09 00 00 00       	mov    eax,0x9
c0005fcf:	53                   	push   ebx
c0005fd0:	83 ec 24             	sub    esp,0x24
c0005fd3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005fd7:	85 db                	test   ebx,ebx
c0005fd9:	0f 84 e6 00 00 00    	je     c00060c5 <f_opendir+0xfc>
c0005fdf:	31 c9                	xor    ecx,ecx
c0005fe1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005fe5:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005fe9:	e8 03 c7 ff ff       	call   c00026f1 <mount_volume>
c0005fee:	85 c0                	test   eax,eax
c0005ff0:	0f 85 c9 00 00 00    	jne    c00060bf <f_opendir+0xf6>
c0005ff6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005ffa:	83 ec 0c             	sub    esp,0xc
c0005ffd:	89 03                	mov    DWORD PTR [ebx],eax
c0005fff:	68 60 04 00 00       	push   0x460
c0006004:	e8 8b 24 00 00       	call   c0008494 <ff_memalloc>
c0006009:	83 c4 10             	add    esp,0x10
c000600c:	89 c6                	mov    esi,eax
c000600e:	b8 11 00 00 00       	mov    eax,0x11
c0006013:	85 f6                	test   esi,esi
c0006015:	0f 84 aa 00 00 00    	je     c00060c5 <f_opendir+0xfc>
c000601b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000601f:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006025:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006028:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000602b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000602f:	89 d8                	mov    eax,ebx
c0006031:	e8 31 ee ff ff       	call   c0004e67 <follow_path>
c0006036:	85 c0                	test   eax,eax
c0006038:	75 61                	jne    c000609b <f_opendir+0xd2>
c000603a:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c000603e:	78 46                	js     c0006086 <f_opendir+0xbd>
c0006040:	b8 05 00 00 00       	mov    eax,0x5
c0006045:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0006049:	74 50                	je     c000609b <f_opendir+0xd2>
c000604b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000604f:	8a 01                	mov    al,BYTE PTR [ecx]
c0006051:	3c 04                	cmp    al,0x4
c0006053:	75 26                	jne    c000607b <f_opendir+0xb2>
c0006055:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0006058:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000605b:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000605e:	30 d2                	xor    dl,dl
c0006060:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0006064:	09 c2                	or     edx,eax
c0006066:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0006069:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c000606c:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000606f:	89 da                	mov    edx,ebx
c0006071:	8d 41 10             	lea    eax,[ecx+0x10]
c0006074:	e8 b4 ed ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c0006079:	eb 0b                	jmp    c0006086 <f_opendir+0xbd>
c000607b:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000607e:	e8 59 ed ff ff       	call   c0004ddc <ld_clust.isra.0>
c0006083:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0006086:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000608a:	31 d2                	xor    edx,edx
c000608c:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0006090:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0006094:	89 d8                	mov    eax,ebx
c0006096:	e8 22 d1 ff ff       	call   c00031bd <dir_sdi>
c000609b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000609f:	83 ec 0c             	sub    esp,0xc
c00060a2:	56                   	push   esi
c00060a3:	e8 02 24 00 00       	call   c00084aa <ff_memfree>
c00060a8:	83 c4 10             	add    esp,0x10
c00060ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00060af:	83 f8 04             	cmp    eax,0x4
c00060b2:	74 06                	je     c00060ba <f_opendir+0xf1>
c00060b4:	85 c0                	test   eax,eax
c00060b6:	74 0d                	je     c00060c5 <f_opendir+0xfc>
c00060b8:	eb 05                	jmp    c00060bf <f_opendir+0xf6>
c00060ba:	b8 05 00 00 00       	mov    eax,0x5
c00060bf:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060c5:	83 c4 24             	add    esp,0x24
c00060c8:	5b                   	pop    ebx
c00060c9:	5e                   	pop    esi
c00060ca:	c3                   	ret    

c00060cb <f_closedir>:
c00060cb:	53                   	push   ebx
c00060cc:	83 ec 18             	sub    esp,0x18
c00060cf:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00060d3:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00060d7:	89 d8                	mov    eax,ebx
c00060d9:	e8 86 c2 ff ff       	call   c0002364 <validate>
c00060de:	85 c0                	test   eax,eax
c00060e0:	75 06                	jne    c00060e8 <f_closedir+0x1d>
c00060e2:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060e8:	83 c4 18             	add    esp,0x18
c00060eb:	5b                   	pop    ebx
c00060ec:	c3                   	ret    

c00060ed <f_readdir>:
c00060ed:	57                   	push   edi
c00060ee:	56                   	push   esi
c00060ef:	53                   	push   ebx
c00060f0:	83 ec 20             	sub    esp,0x20
c00060f3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00060f7:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00060fb:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00060ff:	89 d8                	mov    eax,ebx
c0006101:	e8 5e c2 ff ff       	call   c0002364 <validate>
c0006106:	85 c0                	test   eax,eax
c0006108:	75 77                	jne    c0006181 <f_readdir+0x94>
c000610a:	85 ff                	test   edi,edi
c000610c:	75 0b                	jne    c0006119 <f_readdir+0x2c>
c000610e:	31 d2                	xor    edx,edx
c0006110:	89 d8                	mov    eax,ebx
c0006112:	e8 a6 d0 ff ff       	call   c00031bd <dir_sdi>
c0006117:	eb 68                	jmp    c0006181 <f_readdir+0x94>
c0006119:	83 ec 0c             	sub    esp,0xc
c000611c:	68 60 04 00 00       	push   0x460
c0006121:	e8 6e 23 00 00       	call   c0008494 <ff_memalloc>
c0006126:	83 c4 10             	add    esp,0x10
c0006129:	89 c6                	mov    esi,eax
c000612b:	b8 11 00 00 00       	mov    eax,0x11
c0006130:	85 f6                	test   esi,esi
c0006132:	74 4d                	je     c0006181 <f_readdir+0x94>
c0006134:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006138:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c000613e:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006141:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006144:	31 d2                	xor    edx,edx
c0006146:	89 d8                	mov    eax,ebx
c0006148:	e8 80 d8 ff ff       	call   c00039cd <dir_read>
c000614d:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0006152:	75 19                	jne    c000616d <f_readdir+0x80>
c0006154:	89 fa                	mov    edx,edi
c0006156:	89 d8                	mov    eax,ebx
c0006158:	e8 7e ea ff ff       	call   c0004bdb <get_fileinfo>
c000615d:	31 d2                	xor    edx,edx
c000615f:	89 d8                	mov    eax,ebx
c0006161:	e8 af d5 ff ff       	call   c0003715 <dir_next>
c0006166:	83 f8 04             	cmp    eax,0x4
c0006169:	75 02                	jne    c000616d <f_readdir+0x80>
c000616b:	31 c0                	xor    eax,eax
c000616d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006171:	83 ec 0c             	sub    esp,0xc
c0006174:	56                   	push   esi
c0006175:	e8 30 23 00 00       	call   c00084aa <ff_memfree>
c000617a:	83 c4 10             	add    esp,0x10
c000617d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006181:	83 c4 20             	add    esp,0x20
c0006184:	5b                   	pop    ebx
c0006185:	5e                   	pop    esi
c0006186:	5f                   	pop    edi
c0006187:	c3                   	ret    

c0006188 <f_stat>:
c0006188:	57                   	push   edi
c0006189:	31 c9                	xor    ecx,ecx
c000618b:	56                   	push   esi
c000618c:	53                   	push   ebx
c000618d:	83 ec 50             	sub    esp,0x50
c0006190:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0006194:	8d 54 24 04          	lea    edx,[esp+0x4]
c0006198:	8d 44 24 60          	lea    eax,[esp+0x60]
c000619c:	e8 50 c5 ff ff       	call   c00026f1 <mount_volume>
c00061a1:	89 c3                	mov    ebx,eax
c00061a3:	85 c0                	test   eax,eax
c00061a5:	75 67                	jne    c000620e <f_stat+0x86>
c00061a7:	83 ec 0c             	sub    esp,0xc
c00061aa:	bb 11 00 00 00       	mov    ebx,0x11
c00061af:	68 60 04 00 00       	push   0x460
c00061b4:	e8 db 22 00 00       	call   c0008494 <ff_memalloc>
c00061b9:	83 c4 10             	add    esp,0x10
c00061bc:	89 c6                	mov    esi,eax
c00061be:	85 c0                	test   eax,eax
c00061c0:	74 4c                	je     c000620e <f_stat+0x86>
c00061c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00061c6:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00061cc:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00061cf:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00061d2:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00061d6:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061da:	e8 88 ec ff ff       	call   c0004e67 <follow_path>
c00061df:	89 c3                	mov    ebx,eax
c00061e1:	85 c0                	test   eax,eax
c00061e3:	75 1d                	jne    c0006202 <f_stat+0x7a>
c00061e5:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00061ea:	78 11                	js     c00061fd <f_stat+0x75>
c00061ec:	85 ff                	test   edi,edi
c00061ee:	74 12                	je     c0006202 <f_stat+0x7a>
c00061f0:	89 fa                	mov    edx,edi
c00061f2:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061f6:	e8 e0 e9 ff ff       	call   c0004bdb <get_fileinfo>
c00061fb:	eb 05                	jmp    c0006202 <f_stat+0x7a>
c00061fd:	bb 06 00 00 00       	mov    ebx,0x6
c0006202:	83 ec 0c             	sub    esp,0xc
c0006205:	56                   	push   esi
c0006206:	e8 9f 22 00 00       	call   c00084aa <ff_memfree>
c000620b:	83 c4 10             	add    esp,0x10
c000620e:	83 c4 50             	add    esp,0x50
c0006211:	89 d8                	mov    eax,ebx
c0006213:	5b                   	pop    ebx
c0006214:	5e                   	pop    esi
c0006215:	5f                   	pop    edi
c0006216:	c3                   	ret    

c0006217 <f_getfree>:
c0006217:	55                   	push   ebp
c0006218:	31 c9                	xor    ecx,ecx
c000621a:	57                   	push   edi
c000621b:	56                   	push   esi
c000621c:	53                   	push   ebx
c000621d:	83 ec 5c             	sub    esp,0x5c
c0006220:	8d 54 24 24          	lea    edx,[esp+0x24]
c0006224:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006228:	e8 c4 c4 ff ff       	call   c00026f1 <mount_volume>
c000622d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006231:	85 c0                	test   eax,eax
c0006233:	0f 85 9d 01 00 00    	jne    c00063d6 <f_getfree+0x1bf>
c0006239:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000623d:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0006241:	89 02                	mov    DWORD PTR [edx],eax
c0006243:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c0006246:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0006249:	8d 71 fe             	lea    esi,[ecx-0x2]
c000624c:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0006250:	39 f2                	cmp    edx,esi
c0006252:	77 0b                	ja     c000625f <f_getfree+0x48>
c0006254:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0006258:	89 10                	mov    DWORD PTR [eax],edx
c000625a:	e9 77 01 00 00       	jmp    c00063d6 <f_getfree+0x1bf>
c000625f:	8a 10                	mov    dl,BYTE PTR [eax]
c0006261:	80 fa 01             	cmp    dl,0x1
c0006264:	75 3a                	jne    c00062a0 <f_getfree+0x89>
c0006266:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000626a:	be 02 00 00 00       	mov    esi,0x2
c000626f:	31 db                	xor    ebx,ebx
c0006271:	89 f2                	mov    edx,esi
c0006273:	8d 44 24 28          	lea    eax,[esp+0x28]
c0006277:	e8 4b cd ff ff       	call   c0002fc7 <get_fat>
c000627c:	83 f8 ff             	cmp    eax,0xffffffff
c000627f:	0f 84 28 01 00 00    	je     c00063ad <f_getfree+0x196>
c0006285:	83 f8 01             	cmp    eax,0x1
c0006288:	0f 84 29 01 00 00    	je     c00063b7 <f_getfree+0x1a0>
c000628e:	83 d3 00             	adc    ebx,0x0
c0006291:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006295:	46                   	inc    esi
c0006296:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c0006299:	77 d6                	ja     c0006271 <f_getfree+0x5a>
c000629b:	e9 25 01 00 00       	jmp    c00063c5 <f_getfree+0x1ae>
c00062a0:	80 fa 04             	cmp    dl,0x4
c00062a3:	0f 85 88 00 00 00    	jne    c0006331 <f_getfree+0x11a>
c00062a9:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c00062ac:	31 ed                	xor    ebp,ebp
c00062ae:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00062b1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062b5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062b9:	31 db                	xor    ebx,ebx
c00062bb:	85 ed                	test   ebp,ebp
c00062bd:	75 3f                	jne    c00062fe <f_getfree+0xe7>
c00062bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00062c3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00062c7:	83 c0 01             	add    eax,0x1
c00062ca:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00062ce:	83 d2 00             	adc    edx,0x0
c00062d1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00062d5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00062d9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062dd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00062e1:	e8 59 c1 ff ff       	call   c000243f <move_window>
c00062e6:	85 c0                	test   eax,eax
c00062e8:	0f 85 d3 00 00 00    	jne    c00063c1 <f_getfree+0x1aa>
c00062ee:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00062f2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00062f6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062fa:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062fe:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006302:	8d 4e f8             	lea    ecx,[esi-0x8]
c0006305:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c0006309:	89 cf                	mov    edi,ecx
c000630b:	85 f6                	test   esi,esi
c000630d:	74 12                	je     c0006321 <f_getfree+0x10a>
c000630f:	88 c1                	mov    cl,al
c0006311:	83 e1 01             	and    ecx,0x1
c0006314:	80 f9 01             	cmp    cl,0x1
c0006317:	83 d3 00             	adc    ebx,0x0
c000631a:	d0 e8                	shr    al,1
c000631c:	4e                   	dec    esi
c000631d:	39 fe                	cmp    esi,edi
c000631f:	75 ea                	jne    c000630b <f_getfree+0xf4>
c0006321:	45                   	inc    ebp
c0006322:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0006328:	85 f6                	test   esi,esi
c000632a:	75 8f                	jne    c00062bb <f_getfree+0xa4>
c000632c:	e9 94 00 00 00       	jmp    c00063c5 <f_getfree+0x1ae>
c0006331:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0006334:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0006337:	31 f6                	xor    esi,esi
c0006339:	31 db                	xor    ebx,ebx
c000633b:	85 f6                	test   esi,esi
c000633d:	75 1b                	jne    c000635a <f_getfree+0x143>
c000633f:	89 d7                	mov    edi,edx
c0006341:	89 cd                	mov    ebp,ecx
c0006343:	83 c7 01             	add    edi,0x1
c0006346:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000634a:	83 d5 00             	adc    ebp,0x0
c000634d:	e8 ed c0 ff ff       	call   c000243f <move_window>
c0006352:	85 c0                	test   eax,eax
c0006354:	75 6b                	jne    c00063c1 <f_getfree+0x1aa>
c0006356:	89 fa                	mov    edx,edi
c0006358:	89 e9                	mov    ecx,ebp
c000635a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000635e:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0006362:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c0006366:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0006369:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000636d:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006371:	75 11                	jne    c0006384 <f_getfree+0x16d>
c0006373:	e8 e9 b8 ff ff       	call   c0001c61 <ld_word>
c0006378:	66 83 f8 01          	cmp    ax,0x1
c000637c:	83 d3 00             	adc    ebx,0x0
c000637f:	83 c6 02             	add    esi,0x2
c0006382:	eb 13                	jmp    c0006397 <f_getfree+0x180>
c0006384:	e8 e5 b8 ff ff       	call   c0001c6e <ld_dword>
c0006389:	25 ff ff ff 0f       	and    eax,0xfffffff
c000638e:	83 f8 01             	cmp    eax,0x1
c0006391:	83 d3 00             	adc    ebx,0x0
c0006394:	83 c6 04             	add    esi,0x4
c0006397:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000639d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00063a1:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00063a5:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c00063a9:	75 90                	jne    c000633b <f_getfree+0x124>
c00063ab:	eb 18                	jmp    c00063c5 <f_getfree+0x1ae>
c00063ad:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00063b5:	eb 0e                	jmp    c00063c5 <f_getfree+0x1ae>
c00063b7:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00063bf:	eb 04                	jmp    c00063c5 <f_getfree+0x1ae>
c00063c1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00063c5:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00063c9:	89 18                	mov    DWORD PTR [eax],ebx
c00063cb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00063cf:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c00063d2:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00063d6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00063da:	83 c4 5c             	add    esp,0x5c
c00063dd:	5b                   	pop    ebx
c00063de:	5e                   	pop    esi
c00063df:	5f                   	pop    edi
c00063e0:	5d                   	pop    ebp
c00063e1:	c3                   	ret    

c00063e2 <f_truncate>:
c00063e2:	56                   	push   esi
c00063e3:	53                   	push   ebx
c00063e4:	83 ec 14             	sub    esp,0x14
c00063e7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00063eb:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00063ef:	89 d8                	mov    eax,ebx
c00063f1:	e8 6e bf ff ff       	call   c0002364 <validate>
c00063f6:	89 c6                	mov    esi,eax
c00063f8:	85 c0                	test   eax,eax
c00063fa:	0f 85 d2 00 00 00    	jne    c00064d2 <f_truncate+0xf0>
c0006400:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c0006404:	85 f6                	test   esi,esi
c0006406:	0f 85 c6 00 00 00    	jne    c00064d2 <f_truncate+0xf0>
c000640c:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0006410:	0f 84 b7 00 00 00    	je     c00064cd <f_truncate+0xeb>
c0006416:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006419:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000641c:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000641f:	89 d1                	mov    ecx,edx
c0006421:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c0006424:	0f 83 a8 00 00 00    	jae    c00064d2 <f_truncate+0xf0>
c000642a:	09 c2                	or     edx,eax
c000642c:	75 15                	jne    c0006443 <f_truncate+0x61>
c000642e:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0006431:	31 c9                	xor    ecx,ecx
c0006433:	89 d8                	mov    eax,ebx
c0006435:	e8 7a d0 ff ff       	call   c00034b4 <remove_chain>
c000643a:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0006441:	eb 35                	jmp    c0006478 <f_truncate+0x96>
c0006443:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006446:	89 d8                	mov    eax,ebx
c0006448:	e8 7a cb ff ff       	call   c0002fc7 <get_fat>
c000644d:	89 c2                	mov    edx,eax
c000644f:	b8 01 00 00 00       	mov    eax,0x1
c0006454:	83 fa ff             	cmp    edx,0xffffffff
c0006457:	74 1f                	je     c0006478 <f_truncate+0x96>
c0006459:	b8 02 00 00 00       	mov    eax,0x2
c000645e:	83 fa 01             	cmp    edx,0x1
c0006461:	74 15                	je     c0006478 <f_truncate+0x96>
c0006463:	31 c0                	xor    eax,eax
c0006465:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006469:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c000646c:	76 0a                	jbe    c0006478 <f_truncate+0x96>
c000646e:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0006471:	89 d8                	mov    eax,ebx
c0006473:	e8 3c d0 ff ff       	call   c00034b4 <remove_chain>
c0006478:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000647b:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000647e:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0006481:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0006484:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0006487:	83 ca 40             	or     edx,0x40
c000648a:	85 c0                	test   eax,eax
c000648c:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c000648f:	75 35                	jne    c00064c6 <f_truncate+0xe4>
c0006491:	84 d2                	test   dl,dl
c0006493:	79 3d                	jns    c00064d2 <f_truncate+0xf0>
c0006495:	83 ec 0c             	sub    esp,0xc
c0006498:	8d 43 50             	lea    eax,[ebx+0x50]
c000649b:	6a 01                	push   0x1
c000649d:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c00064a0:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00064a3:	50                   	push   eax
c00064a4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00064a8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00064ac:	50                   	push   eax
c00064ad:	e8 7a b7 ff ff       	call   c0001c2c <disk_write>
c00064b2:	83 c4 20             	add    esp,0x20
c00064b5:	85 c0                	test   eax,eax
c00064b7:	75 08                	jne    c00064c1 <f_truncate+0xdf>
c00064b9:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00064bd:	31 f6                	xor    esi,esi
c00064bf:	eb 11                	jmp    c00064d2 <f_truncate+0xf0>
c00064c1:	b8 01 00 00 00       	mov    eax,0x1
c00064c6:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c00064c9:	89 c6                	mov    esi,eax
c00064cb:	eb 05                	jmp    c00064d2 <f_truncate+0xf0>
c00064cd:	be 07 00 00 00       	mov    esi,0x7
c00064d2:	89 f0                	mov    eax,esi
c00064d4:	83 c4 14             	add    esp,0x14
c00064d7:	5b                   	pop    ebx
c00064d8:	5e                   	pop    esi
c00064d9:	c3                   	ret    

c00064da <f_unlink>:
c00064da:	56                   	push   esi
c00064db:	b9 02 00 00 00       	mov    ecx,0x2
c00064e0:	53                   	push   ebx
c00064e1:	81 ec e4 00 00 00    	sub    esp,0xe4
c00064e7:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00064eb:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00064f2:	e8 fa c1 ff ff       	call   c00026f1 <mount_volume>
c00064f7:	85 c0                	test   eax,eax
c00064f9:	0f 85 55 01 00 00    	jne    c0006654 <f_unlink+0x17a>
c00064ff:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006503:	83 ec 0c             	sub    esp,0xc
c0006506:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000650a:	68 60 04 00 00       	push   0x460
c000650f:	e8 80 1f 00 00       	call   c0008494 <ff_memalloc>
c0006514:	83 c4 10             	add    esp,0x10
c0006517:	89 c3                	mov    ebx,eax
c0006519:	b8 11 00 00 00       	mov    eax,0x11
c000651e:	85 db                	test   ebx,ebx
c0006520:	0f 84 2e 01 00 00    	je     c0006654 <f_unlink+0x17a>
c0006526:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000652a:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006530:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006533:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006536:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c000653d:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006541:	e8 21 e9 ff ff       	call   c0004e67 <follow_path>
c0006546:	85 c0                	test   eax,eax
c0006548:	0f 85 f2 00 00 00    	jne    c0006640 <f_unlink+0x166>
c000654e:	b8 06 00 00 00       	mov    eax,0x6
c0006553:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c000655b:	0f 88 df 00 00 00    	js     c0006640 <f_unlink+0x166>
c0006561:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c0006566:	74 0a                	je     c0006572 <f_unlink+0x98>
c0006568:	b8 07 00 00 00       	mov    eax,0x7
c000656d:	e9 ce 00 00 00       	jmp    c0006640 <f_unlink+0x166>
c0006572:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006576:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000657a:	8a 02                	mov    al,BYTE PTR [edx]
c000657c:	3c 04                	cmp    al,0x4
c000657e:	75 12                	jne    c0006592 <f_unlink+0xb8>
c0006580:	8d 42 10             	lea    eax,[edx+0x10]
c0006583:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006587:	e8 a1 e8 ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c000658c:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0006590:	eb 0e                	jmp    c00065a0 <f_unlink+0xc6>
c0006592:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0006599:	e8 3e e8 ff ff       	call   c0004ddc <ld_clust.isra.0>
c000659e:	89 c6                	mov    esi,eax
c00065a0:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c00065a5:	75 12                	jne    c00065b9 <f_unlink+0xdf>
c00065a7:	8d 44 24 48          	lea    eax,[esp+0x48]
c00065ab:	e8 94 d6 ff ff       	call   c0003c44 <dir_remove>
c00065b0:	85 c0                	test   eax,eax
c00065b2:	74 6c                	je     c0006620 <f_unlink+0x146>
c00065b4:	e9 87 00 00 00       	jmp    c0006640 <f_unlink+0x166>
c00065b9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00065bd:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c00065c4:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c00065cb:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00065ce:	75 21                	jne    c00065f1 <f_unlink+0x117>
c00065d0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00065d4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00065d8:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00065df:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00065e6:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00065ea:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00065f1:	31 d2                	xor    edx,edx
c00065f3:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00065fa:	e8 be cb ff ff       	call   c00031bd <dir_sdi>
c00065ff:	85 c0                	test   eax,eax
c0006601:	75 3d                	jne    c0006640 <f_unlink+0x166>
c0006603:	31 d2                	xor    edx,edx
c0006605:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c000660c:	e8 bc d3 ff ff       	call   c00039cd <dir_read>
c0006611:	85 c0                	test   eax,eax
c0006613:	0f 84 4f ff ff ff    	je     c0006568 <f_unlink+0x8e>
c0006619:	83 f8 04             	cmp    eax,0x4
c000661c:	75 22                	jne    c0006640 <f_unlink+0x166>
c000661e:	eb 87                	jmp    c00065a7 <f_unlink+0xcd>
c0006620:	85 f6                	test   esi,esi
c0006622:	75 0b                	jne    c000662f <f_unlink+0x155>
c0006624:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006628:	e8 3d df ff ff       	call   c000456a <sync_fs>
c000662d:	eb 11                	jmp    c0006640 <f_unlink+0x166>
c000662f:	31 c9                	xor    ecx,ecx
c0006631:	89 f2                	mov    edx,esi
c0006633:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006637:	e8 78 ce ff ff       	call   c00034b4 <remove_chain>
c000663c:	85 c0                	test   eax,eax
c000663e:	74 e4                	je     c0006624 <f_unlink+0x14a>
c0006640:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006644:	83 ec 0c             	sub    esp,0xc
c0006647:	53                   	push   ebx
c0006648:	e8 5d 1e 00 00       	call   c00084aa <ff_memfree>
c000664d:	83 c4 10             	add    esp,0x10
c0006650:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006654:	81 c4 e4 00 00 00    	add    esp,0xe4
c000665a:	5b                   	pop    ebx
c000665b:	5e                   	pop    esi
c000665c:	c3                   	ret    

c000665d <f_mkdir>:
c000665d:	57                   	push   edi
c000665e:	b9 02 00 00 00       	mov    ecx,0x2
c0006663:	56                   	push   esi
c0006664:	53                   	push   ebx
c0006665:	83 c4 80             	add    esp,0xffffff80
c0006668:	8d 54 24 08          	lea    edx,[esp+0x8]
c000666c:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c0006673:	e8 79 c0 ff ff       	call   c00026f1 <mount_volume>
c0006678:	89 c3                	mov    ebx,eax
c000667a:	85 c0                	test   eax,eax
c000667c:	0f 85 fe 01 00 00    	jne    c0006880 <f_mkdir+0x223>
c0006682:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006686:	bb 11 00 00 00       	mov    ebx,0x11
c000668b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000668f:	83 ec 0c             	sub    esp,0xc
c0006692:	68 60 04 00 00       	push   0x460
c0006697:	e8 f8 1d 00 00       	call   c0008494 <ff_memalloc>
c000669c:	83 c4 10             	add    esp,0x10
c000669f:	89 c7                	mov    edi,eax
c00066a1:	85 c0                	test   eax,eax
c00066a3:	0f 84 d7 01 00 00    	je     c0006880 <f_mkdir+0x223>
c00066a9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066ad:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c00066b3:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c00066b6:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00066b9:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00066c0:	8d 44 24 34          	lea    eax,[esp+0x34]
c00066c4:	e8 9e e7 ff ff       	call   c0004e67 <follow_path>
c00066c9:	89 c3                	mov    ebx,eax
c00066cb:	85 c0                	test   eax,eax
c00066cd:	74 3e                	je     c000670d <f_mkdir+0xb0>
c00066cf:	83 f8 04             	cmp    eax,0x4
c00066d2:	75 3e                	jne    c0006712 <f_mkdir+0xb5>
c00066d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066d8:	31 d2                	xor    edx,edx
c00066da:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00066de:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066e2:	e8 ce cb ff ff       	call   c00032b5 <create_chain>
c00066e7:	89 c6                	mov    esi,eax
c00066e9:	85 c0                	test   eax,eax
c00066eb:	74 0c                	je     c00066f9 <f_mkdir+0x9c>
c00066ed:	bb 02 00 00 00       	mov    ebx,0x2
c00066f2:	83 f8 01             	cmp    eax,0x1
c00066f5:	74 07                	je     c00066fe <f_mkdir+0xa1>
c00066f7:	eb 2a                	jmp    c0006723 <f_mkdir+0xc6>
c00066f9:	bb 07 00 00 00       	mov    ebx,0x7
c00066fe:	31 c9                	xor    ecx,ecx
c0006700:	89 f2                	mov    edx,esi
c0006702:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006706:	e8 a9 cd ff ff       	call   c00034b4 <remove_chain>
c000670b:	eb 05                	jmp    c0006712 <f_mkdir+0xb5>
c000670d:	bb 08 00 00 00       	mov    ebx,0x8
c0006712:	83 ec 0c             	sub    esp,0xc
c0006715:	57                   	push   edi
c0006716:	e8 8f 1d 00 00       	call   c00084aa <ff_memfree>
c000671b:	83 c4 10             	add    esp,0x10
c000671e:	e9 5d 01 00 00       	jmp    c0006880 <f_mkdir+0x223>
c0006723:	bb 01 00 00 00       	mov    ebx,0x1
c0006728:	83 f8 ff             	cmp    eax,0xffffffff
c000672b:	74 d1                	je     c00066fe <f_mkdir+0xa1>
c000672d:	89 f2                	mov    edx,esi
c000672f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006733:	e8 c4 ce ff ff       	call   c00035fc <dir_clear>
c0006738:	89 c3                	mov    ebx,eax
c000673a:	85 c0                	test   eax,eax
c000673c:	75 c0                	jne    c00066fe <f_mkdir+0xa1>
c000673e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006742:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006745:	74 69                	je     c00067b0 <f_mkdir+0x153>
c0006747:	b9 0b 00 00 00       	mov    ecx,0xb
c000674c:	83 c0 54             	add    eax,0x54
c000674f:	ba 20 00 00 00       	mov    edx,0x20
c0006754:	e8 9c b5 ff ff       	call   c0001cf5 <mem_set>
c0006759:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000675d:	ba 00 00 21 50       	mov    edx,0x50210000
c0006762:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c0006766:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c000676a:	83 c0 6a             	add    eax,0x6a
c000676d:	e8 65 b5 ff ff       	call   c0001cd7 <st_dword>
c0006772:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006776:	89 f1                	mov    ecx,esi
c0006778:	8d 50 54             	lea    edx,[eax+0x54]
c000677b:	e8 85 e6 ff ff       	call   c0004e05 <st_clust.isra.1>
c0006780:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006784:	b9 20 00 00 00       	mov    ecx,0x20
c0006789:	8d 50 54             	lea    edx,[eax+0x54]
c000678c:	83 c0 74             	add    eax,0x74
c000678f:	e8 4c b5 ff ff       	call   c0001ce0 <mem_cpy>
c0006794:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006798:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000679c:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c00067a0:	8d 50 74             	lea    edx,[eax+0x74]
c00067a3:	e8 5d e6 ff ff       	call   c0004e05 <st_clust.isra.1>
c00067a8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067ac:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00067b0:	8d 44 24 34          	lea    eax,[esp+0x34]
c00067b4:	e8 2f db ff ff       	call   c00042e8 <dir_register>
c00067b9:	89 c3                	mov    ebx,eax
c00067bb:	85 c0                	test   eax,eax
c00067bd:	0f 85 3b ff ff ff    	jne    c00066fe <f_mkdir+0xa1>
c00067c3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067c7:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00067ca:	75 74                	jne    c0006840 <f_mkdir+0x1e3>
c00067cc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067cf:	ba 00 00 21 50       	mov    edx,0x50210000
c00067d4:	83 c0 0c             	add    eax,0xc
c00067d7:	e8 fb b4 ff ff       	call   c0001cd7 <st_dword>
c00067dc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067e0:	89 f2                	mov    edx,esi
c00067e2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067e5:	83 c0 34             	add    eax,0x34
c00067e8:	e8 ea b4 ff ff       	call   c0001cd7 <st_dword>
c00067ed:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067f1:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067f5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067f8:	c1 e2 09             	shl    edx,0x9
c00067fb:	83 c0 38             	add    eax,0x38
c00067fe:	e8 d4 b4 ff ff       	call   c0001cd7 <st_dword>
c0006803:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006807:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c000680b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000680e:	c1 e2 09             	shl    edx,0x9
c0006811:	83 c0 28             	add    eax,0x28
c0006814:	e8 be b4 ff ff       	call   c0001cd7 <st_dword>
c0006819:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000681d:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006820:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c0006824:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006827:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c000682b:	8d 44 24 34          	lea    eax,[esp+0x34]
c000682f:	e8 8b d3 ff ff       	call   c0003bbf <store_xdir>
c0006834:	89 c3                	mov    ebx,eax
c0006836:	85 c0                	test   eax,eax
c0006838:	0f 85 d4 fe ff ff    	jne    c0006712 <f_mkdir+0xb5>
c000683e:	eb 30                	jmp    c0006870 <f_mkdir+0x213>
c0006840:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006844:	ba 00 00 21 50       	mov    edx,0x50210000
c0006849:	83 c0 16             	add    eax,0x16
c000684c:	e8 86 b4 ff ff       	call   c0001cd7 <st_dword>
c0006851:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006855:	89 f1                	mov    ecx,esi
c0006857:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000685b:	e8 a5 e5 ff ff       	call   c0004e05 <st_clust.isra.1>
c0006860:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006864:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0006868:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000686c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006870:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006874:	e8 f1 dc ff ff       	call   c000456a <sync_fs>
c0006879:	89 c3                	mov    ebx,eax
c000687b:	e9 92 fe ff ff       	jmp    c0006712 <f_mkdir+0xb5>
c0006880:	83 ec 80             	sub    esp,0xffffff80
c0006883:	89 d8                	mov    eax,ebx
c0006885:	5b                   	pop    ebx
c0006886:	5e                   	pop    esi
c0006887:	5f                   	pop    edi
c0006888:	c3                   	ret    

c0006889 <f_rename>:
c0006889:	55                   	push   ebp
c000688a:	57                   	push   edi
c000688b:	56                   	push   esi
c000688c:	53                   	push   ebx
c000688d:	81 ec fc 00 00 00    	sub    esp,0xfc
c0006893:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c000689a:	e8 a4 b9 ff ff       	call   c0002243 <get_ldnumber>
c000689f:	b9 02 00 00 00       	mov    ecx,0x2
c00068a4:	8d 54 24 14          	lea    edx,[esp+0x14]
c00068a8:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c00068af:	e8 3d be ff ff       	call   c00026f1 <mount_volume>
c00068b4:	85 c0                	test   eax,eax
c00068b6:	0f 85 b5 02 00 00    	jne    c0006b71 <f_rename+0x2e8>
c00068bc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068c0:	83 ec 0c             	sub    esp,0xc
c00068c3:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00068c7:	68 60 04 00 00       	push   0x460
c00068cc:	e8 c3 1b 00 00       	call   c0008494 <ff_memalloc>
c00068d1:	83 c4 10             	add    esp,0x10
c00068d4:	89 c3                	mov    ebx,eax
c00068d6:	b8 11 00 00 00       	mov    eax,0x11
c00068db:	85 db                	test   ebx,ebx
c00068dd:	0f 84 8e 02 00 00    	je     c0006b71 <f_rename+0x2e8>
c00068e3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068e7:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00068ed:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00068f0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00068f3:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00068fa:	8d 44 24 58          	lea    eax,[esp+0x58]
c00068fe:	e8 64 e5 ff ff       	call   c0004e67 <follow_path>
c0006903:	85 c0                	test   eax,eax
c0006905:	0f 85 52 02 00 00    	jne    c0006b5d <f_rename+0x2d4>
c000690b:	b8 06 00 00 00       	mov    eax,0x6
c0006910:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c0006918:	0f 85 3f 02 00 00    	jne    c0006b5d <f_rename+0x2d4>
c000691e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006922:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006925:	0f 85 05 01 00 00    	jne    c0006a30 <f_rename+0x1a7>
c000692b:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000692e:	b9 40 00 00 00       	mov    ecx,0x40
c0006933:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006937:	e8 a4 b3 ff ff       	call   c0001ce0 <mem_cpy>
c000693c:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006941:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006945:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000694c:	e8 8f b3 ff ff       	call   c0001ce0 <mem_cpy>
c0006951:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006958:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000695f:	e8 03 e5 ff ff       	call   c0004e67 <follow_path>
c0006964:	85 c0                	test   eax,eax
c0006966:	75 29                	jne    c0006991 <f_rename+0x108>
c0006968:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000696c:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006973:	74 0a                	je     c000697f <f_rename+0xf6>
c0006975:	b8 08 00 00 00       	mov    eax,0x8
c000697a:	e9 de 01 00 00       	jmp    c0006b5d <f_rename+0x2d4>
c000697f:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006986:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c000698d:	75 e6                	jne    c0006975 <f_rename+0xec>
c000698f:	eb 09                	jmp    c000699a <f_rename+0x111>
c0006991:	83 f8 04             	cmp    eax,0x4
c0006994:	0f 85 c3 01 00 00    	jne    c0006b5d <f_rename+0x2d4>
c000699a:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00069a1:	e8 42 d9 ff ff       	call   c00042e8 <dir_register>
c00069a6:	85 c0                	test   eax,eax
c00069a8:	0f 85 af 01 00 00    	jne    c0006b5d <f_rename+0x2d4>
c00069ae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069b2:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c00069b5:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00069b8:	89 c5                	mov    ebp,eax
c00069ba:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c00069bd:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00069c1:	8d 46 24             	lea    eax,[esi+0x24]
c00069c4:	e8 98 b2 ff ff       	call   c0001c61 <ld_word>
c00069c9:	b9 40 00 00 00       	mov    ecx,0x40
c00069ce:	89 c7                	mov    edi,eax
c00069d0:	8d 54 24 18          	lea    edx,[esp+0x18]
c00069d4:	89 f0                	mov    eax,esi
c00069d6:	e8 05 b3 ff ff       	call   c0001ce0 <mem_cpy>
c00069db:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069df:	89 e9                	mov    ecx,ebp
c00069e1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069e4:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00069e7:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00069eb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069ef:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069f2:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00069f5:	0f b7 d7             	movzx  edx,di
c00069f8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069fb:	83 c0 24             	add    eax,0x24
c00069fe:	e8 d0 b2 ff ff       	call   c0001cd3 <st_word>
c0006a03:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a07:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006a0a:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0006a0d:	a8 10                	test   al,0x10
c0006a0f:	75 06                	jne    c0006a17 <f_rename+0x18e>
c0006a11:	83 c8 20             	or     eax,0x20
c0006a14:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0006a17:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a1e:	e8 9c d1 ff ff       	call   c0003bbf <store_xdir>
c0006a23:	85 c0                	test   eax,eax
c0006a25:	0f 84 1c 01 00 00    	je     c0006b47 <f_rename+0x2be>
c0006a2b:	e9 2d 01 00 00       	jmp    c0006b5d <f_rename+0x2d4>
c0006a30:	b9 20 00 00 00       	mov    ecx,0x20
c0006a35:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006a3c:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006a40:	e8 9b b2 ff ff       	call   c0001ce0 <mem_cpy>
c0006a45:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006a4a:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006a4e:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a55:	e8 86 b2 ff ff       	call   c0001ce0 <mem_cpy>
c0006a5a:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006a61:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a68:	e8 fa e3 ff ff       	call   c0004e67 <follow_path>
c0006a6d:	85 c0                	test   eax,eax
c0006a6f:	75 27                	jne    c0006a98 <f_rename+0x20f>
c0006a71:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006a75:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006a7c:	0f 85 f3 fe ff ff    	jne    c0006975 <f_rename+0xec>
c0006a82:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006a89:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006a90:	0f 85 df fe ff ff    	jne    c0006975 <f_rename+0xec>
c0006a96:	eb 09                	jmp    c0006aa1 <f_rename+0x218>
c0006a98:	83 f8 04             	cmp    eax,0x4
c0006a9b:	0f 85 bc 00 00 00    	jne    c0006b5d <f_rename+0x2d4>
c0006aa1:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006aa8:	e8 3b d8 ff ff       	call   c00042e8 <dir_register>
c0006aad:	85 c0                	test   eax,eax
c0006aaf:	0f 85 a8 00 00 00    	jne    c0006b5d <f_rename+0x2d4>
c0006ab5:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c0006abc:	b9 13 00 00 00       	mov    ecx,0x13
c0006ac1:	8d 46 0d             	lea    eax,[esi+0xd]
c0006ac4:	8d 54 24 25          	lea    edx,[esp+0x25]
c0006ac8:	e8 13 b2 ff ff       	call   c0001ce0 <mem_cpy>
c0006acd:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0006ad1:	a8 10                	test   al,0x10
c0006ad3:	75 03                	jne    c0006ad8 <f_rename+0x24f>
c0006ad5:	83 c8 20             	or     eax,0x20
c0006ad8:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0006adb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006adf:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006ae3:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006ae7:	74 5e                	je     c0006b47 <f_rename+0x2be>
c0006ae9:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c0006af0:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c0006af4:	74 51                	je     c0006b47 <f_rename+0x2be>
c0006af6:	89 f2                	mov    edx,esi
c0006af8:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0006afc:	8a 07                	mov    al,BYTE PTR [edi]
c0006afe:	e8 d9 e2 ff ff       	call   c0004ddc <ld_clust.isra.0>
c0006b03:	89 c2                	mov    edx,eax
c0006b05:	89 f8                	mov    eax,edi
c0006b07:	e8 ee b3 ff ff       	call   c0001efa <clst2sect>
c0006b0c:	89 c6                	mov    esi,eax
c0006b0e:	89 d1                	mov    ecx,edx
c0006b10:	b8 02 00 00 00       	mov    eax,0x2
c0006b15:	09 f2                	or     edx,esi
c0006b17:	74 44                	je     c0006b5d <f_rename+0x2d4>
c0006b19:	89 f2                	mov    edx,esi
c0006b1b:	89 f8                	mov    eax,edi
c0006b1d:	e8 1d b9 ff ff       	call   c000243f <move_window>
c0006b22:	85 c0                	test   eax,eax
c0006b24:	75 37                	jne    c0006b5d <f_rename+0x2d4>
c0006b26:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b2a:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006b2e:	75 17                	jne    c0006b47 <f_rename+0x2be>
c0006b30:	8d 50 74             	lea    edx,[eax+0x74]
c0006b33:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006b3a:	e8 c6 e2 ff ff       	call   c0004e05 <st_clust.isra.1>
c0006b3f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b43:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b47:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006b4b:	e8 f4 d0 ff ff       	call   c0003c44 <dir_remove>
c0006b50:	85 c0                	test   eax,eax
c0006b52:	75 09                	jne    c0006b5d <f_rename+0x2d4>
c0006b54:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b58:	e8 0d da ff ff       	call   c000456a <sync_fs>
c0006b5d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b61:	83 ec 0c             	sub    esp,0xc
c0006b64:	53                   	push   ebx
c0006b65:	e8 40 19 00 00       	call   c00084aa <ff_memfree>
c0006b6a:	83 c4 10             	add    esp,0x10
c0006b6d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b71:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006b77:	5b                   	pop    ebx
c0006b78:	5e                   	pop    esi
c0006b79:	5f                   	pop    edi
c0006b7a:	5d                   	pop    ebp
c0006b7b:	c3                   	ret    

c0006b7c <f_chmod>:
c0006b7c:	57                   	push   edi
c0006b7d:	b9 02 00 00 00       	mov    ecx,0x2
c0006b82:	56                   	push   esi
c0006b83:	53                   	push   ebx
c0006b84:	83 ec 60             	sub    esp,0x60
c0006b87:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006b8b:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006b8f:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b93:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006b97:	e8 55 bb ff ff       	call   c00026f1 <mount_volume>
c0006b9c:	85 c0                	test   eax,eax
c0006b9e:	0f 85 af 00 00 00    	jne    c0006c53 <f_chmod+0xd7>
c0006ba4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ba8:	83 ec 0c             	sub    esp,0xc
c0006bab:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006baf:	68 60 04 00 00       	push   0x460
c0006bb4:	e8 db 18 00 00       	call   c0008494 <ff_memalloc>
c0006bb9:	83 c4 10             	add    esp,0x10
c0006bbc:	89 c6                	mov    esi,eax
c0006bbe:	b8 11 00 00 00       	mov    eax,0x11
c0006bc3:	85 f6                	test   esi,esi
c0006bc5:	0f 84 88 00 00 00    	je     c0006c53 <f_chmod+0xd7>
c0006bcb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bcf:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006bd5:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006bd8:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006bdb:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006bdf:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006be3:	e8 7f e2 ff ff       	call   c0004e67 <follow_path>
c0006be8:	85 c0                	test   eax,eax
c0006bea:	75 53                	jne    c0006c3f <f_chmod+0xc3>
c0006bec:	b8 06 00 00 00       	mov    eax,0x6
c0006bf1:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006bf6:	75 47                	jne    c0006c3f <f_chmod+0xc3>
c0006bf8:	89 f9                	mov    ecx,edi
c0006bfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bfe:	83 e1 27             	and    ecx,0x27
c0006c01:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006c04:	75 1d                	jne    c0006c23 <f_chmod+0xa7>
c0006c06:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006c09:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006c0c:	21 cb                	and    ebx,ecx
c0006c0e:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006c11:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006c14:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c18:	e8 a2 cf ff ff       	call   c0003bbf <store_xdir>
c0006c1d:	85 c0                	test   eax,eax
c0006c1f:	75 1e                	jne    c0006c3f <f_chmod+0xc3>
c0006c21:	eb 13                	jmp    c0006c36 <f_chmod+0xba>
c0006c23:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006c27:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006c2a:	21 cb                	and    ebx,ecx
c0006c2c:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006c2f:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006c32:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006c36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c3a:	e8 2b d9 ff ff       	call   c000456a <sync_fs>
c0006c3f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c43:	83 ec 0c             	sub    esp,0xc
c0006c46:	56                   	push   esi
c0006c47:	e8 5e 18 00 00       	call   c00084aa <ff_memfree>
c0006c4c:	83 c4 10             	add    esp,0x10
c0006c4f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c53:	83 c4 60             	add    esp,0x60
c0006c56:	5b                   	pop    ebx
c0006c57:	5e                   	pop    esi
c0006c58:	5f                   	pop    edi
c0006c59:	c3                   	ret    

c0006c5a <f_utime>:
c0006c5a:	56                   	push   esi
c0006c5b:	b9 02 00 00 00       	mov    ecx,0x2
c0006c60:	53                   	push   ebx
c0006c61:	83 ec 64             	sub    esp,0x64
c0006c64:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006c68:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006c6c:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006c70:	e8 7c ba ff ff       	call   c00026f1 <mount_volume>
c0006c75:	85 c0                	test   eax,eax
c0006c77:	0f 85 b5 00 00 00    	jne    c0006d32 <f_utime+0xd8>
c0006c7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c81:	83 ec 0c             	sub    esp,0xc
c0006c84:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006c88:	68 60 04 00 00       	push   0x460
c0006c8d:	e8 02 18 00 00       	call   c0008494 <ff_memalloc>
c0006c92:	83 c4 10             	add    esp,0x10
c0006c95:	89 c3                	mov    ebx,eax
c0006c97:	b8 11 00 00 00       	mov    eax,0x11
c0006c9c:	85 db                	test   ebx,ebx
c0006c9e:	0f 84 8e 00 00 00    	je     c0006d32 <f_utime+0xd8>
c0006ca4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ca8:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006cae:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006cb1:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006cb4:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006cb8:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cbc:	e8 a6 e1 ff ff       	call   c0004e67 <follow_path>
c0006cc1:	85 c0                	test   eax,eax
c0006cc3:	75 59                	jne    c0006d1e <f_utime+0xc4>
c0006cc5:	b8 06 00 00 00       	mov    eax,0x6
c0006cca:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006ccf:	75 4d                	jne    c0006d1e <f_utime+0xc4>
c0006cd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cd5:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006cd9:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006cdd:	c1 e2 10             	shl    edx,0x10
c0006ce0:	09 ca                	or     edx,ecx
c0006ce2:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006ce5:	75 1a                	jne    c0006d01 <f_utime+0xa7>
c0006ce7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006cea:	83 c0 0c             	add    eax,0xc
c0006ced:	e8 e5 af ff ff       	call   c0001cd7 <st_dword>
c0006cf2:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cf6:	e8 c4 ce ff ff       	call   c0003bbf <store_xdir>
c0006cfb:	85 c0                	test   eax,eax
c0006cfd:	75 1f                	jne    c0006d1e <f_utime+0xc4>
c0006cff:	eb 14                	jmp    c0006d15 <f_utime+0xbb>
c0006d01:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006d05:	83 c0 16             	add    eax,0x16
c0006d08:	e8 ca af ff ff       	call   c0001cd7 <st_dword>
c0006d0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d11:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006d15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d19:	e8 4c d8 ff ff       	call   c000456a <sync_fs>
c0006d1e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006d22:	83 ec 0c             	sub    esp,0xc
c0006d25:	53                   	push   ebx
c0006d26:	e8 7f 17 00 00       	call   c00084aa <ff_memfree>
c0006d2b:	83 c4 10             	add    esp,0x10
c0006d2e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006d32:	83 c4 64             	add    esp,0x64
c0006d35:	5b                   	pop    ebx
c0006d36:	5e                   	pop    esi
c0006d37:	c3                   	ret    

c0006d38 <f_getlabel>:
c0006d38:	55                   	push   ebp
c0006d39:	31 c9                	xor    ecx,ecx
c0006d3b:	57                   	push   edi
c0006d3c:	56                   	push   esi
c0006d3d:	53                   	push   ebx
c0006d3e:	83 ec 6c             	sub    esp,0x6c
c0006d41:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006d45:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d4c:	e8 a0 b9 ff ff       	call   c00026f1 <mount_volume>
c0006d51:	89 c6                	mov    esi,eax
c0006d53:	85 c0                	test   eax,eax
c0006d55:	0f 85 c1 01 00 00    	jne    c0006f1c <f_getlabel+0x1e4>
c0006d5b:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006d63:	0f 84 5f 01 00 00    	je     c0006ec8 <f_getlabel+0x190>
c0006d69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d6d:	31 d2                	xor    edx,edx
c0006d6f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006d73:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006d7b:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d7f:	e8 39 c4 ff ff       	call   c00031bd <dir_sdi>
c0006d84:	85 c0                	test   eax,eax
c0006d86:	0f 85 2d 01 00 00    	jne    c0006eb9 <f_getlabel+0x181>
c0006d8c:	ba 01 00 00 00       	mov    edx,0x1
c0006d91:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d95:	e8 33 cc ff ff       	call   c00039cd <dir_read>
c0006d9a:	85 c0                	test   eax,eax
c0006d9c:	0f 85 17 01 00 00    	jne    c0006eb9 <f_getlabel+0x181>
c0006da2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006da6:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006da9:	74 09                	je     c0006db4 <f_getlabel+0x7c>
c0006dab:	31 db                	xor    ebx,ebx
c0006dad:	31 c9                	xor    ecx,ecx
c0006daf:	e9 c8 00 00 00       	jmp    c0006e7c <f_getlabel+0x144>
c0006db4:	31 ed                	xor    ebp,ebp
c0006db6:	31 db                	xor    ebx,ebx
c0006db8:	31 ff                	xor    edi,edi
c0006dba:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006dbe:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006dc2:	39 fa                	cmp    edx,edi
c0006dc4:	76 4b                	jbe    c0006e11 <f_getlabel+0xd9>
c0006dc6:	47                   	inc    edi
c0006dc7:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006dca:	01 d0                	add    eax,edx
c0006dcc:	e8 90 ae ff ff       	call   c0001c61 <ld_word>
c0006dd1:	66 85 ed             	test   bp,bp
c0006dd4:	75 0d                	jne    c0006de3 <f_getlabel+0xab>
c0006dd6:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006ddc:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006de1:	76 28                	jbe    c0006e0b <f_getlabel+0xd3>
c0006de3:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006dea:	89 e9                	mov    ecx,ebp
c0006dec:	01 da                	add    edx,ebx
c0006dee:	c1 e1 10             	shl    ecx,0x10
c0006df1:	0f b7 c0             	movzx  eax,ax
c0006df4:	09 c8                	or     eax,ecx
c0006df6:	b9 04 00 00 00       	mov    ecx,0x4
c0006dfb:	e8 01 b0 ff ff       	call   c0001e01 <put_utf>
c0006e00:	84 c0                	test   al,al
c0006e02:	74 0b                	je     c0006e0f <f_getlabel+0xd7>
c0006e04:	0f b6 c0             	movzx  eax,al
c0006e07:	01 c3                	add    ebx,eax
c0006e09:	31 c0                	xor    eax,eax
c0006e0b:	89 c5                	mov    ebp,eax
c0006e0d:	eb ab                	jmp    c0006dba <f_getlabel+0x82>
c0006e0f:	31 db                	xor    ebx,ebx
c0006e11:	66 85 ed             	test   bp,bp
c0006e14:	74 02                	je     c0006e18 <f_getlabel+0xe0>
c0006e16:	31 db                	xor    ebx,ebx
c0006e18:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006e1f:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006e23:	e9 a0 00 00 00       	jmp    c0006ec8 <f_getlabel+0x190>
c0006e28:	83 ff 0b             	cmp    edi,0xb
c0006e2b:	74 11                	je     c0006e3e <f_getlabel+0x106>
c0006e2d:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006e32:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006e36:	8d 79 02             	lea    edi,[ecx+0x2]
c0006e39:	c1 e0 08             	shl    eax,0x8
c0006e3c:	09 c2                	or     edx,eax
c0006e3e:	0f b7 d2             	movzx  edx,dx
c0006e41:	50                   	push   eax
c0006e42:	50                   	push   eax
c0006e43:	68 b5 01 00 00       	push   0x1b5
c0006e48:	52                   	push   edx
c0006e49:	e8 03 17 00 00       	call   c0008551 <ff_oem2uni>
c0006e4e:	83 c4 10             	add    esp,0x10
c0006e51:	66 85 c0             	test   ax,ax
c0006e54:	74 46                	je     c0006e9c <f_getlabel+0x164>
c0006e56:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006e5d:	0f b7 c0             	movzx  eax,ax
c0006e60:	01 da                	add    edx,ebx
c0006e62:	b9 04 00 00 00       	mov    ecx,0x4
c0006e67:	e8 95 af ff ff       	call   c0001e01 <put_utf>
c0006e6c:	84 c0                	test   al,al
c0006e6e:	74 2c                	je     c0006e9c <f_getlabel+0x164>
c0006e70:	0f b6 c0             	movzx  eax,al
c0006e73:	01 c3                	add    ebx,eax
c0006e75:	83 ff 0b             	cmp    edi,0xb
c0006e78:	74 24                	je     c0006e9e <f_getlabel+0x166>
c0006e7a:	89 f9                	mov    ecx,edi
c0006e7c:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006e80:	8d 79 01             	lea    edi,[ecx+0x1]
c0006e83:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006e88:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006e8d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006e91:	e8 9f ae ff ff       	call   c0001d35 <dbc_1st>
c0006e96:	85 c0                	test   eax,eax
c0006e98:	74 a4                	je     c0006e3e <f_getlabel+0x106>
c0006e9a:	eb 8c                	jmp    c0006e28 <f_getlabel+0xf0>
c0006e9c:	31 db                	xor    ebx,ebx
c0006e9e:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006ea5:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006ea8:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006eaf:	74 17                	je     c0006ec8 <f_getlabel+0x190>
c0006eb1:	4b                   	dec    ebx
c0006eb2:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006eb5:	74 ee                	je     c0006ea5 <f_getlabel+0x16d>
c0006eb7:	eb 0f                	jmp    c0006ec8 <f_getlabel+0x190>
c0006eb9:	83 f8 04             	cmp    eax,0x4
c0006ebc:	75 5c                	jne    c0006f1a <f_getlabel+0x1e2>
c0006ebe:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006ec5:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006ec8:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006ed0:	74 4a                	je     c0006f1c <f_getlabel+0x1e4>
c0006ed2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ed6:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006ed9:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006edc:	e8 5e b5 ff ff       	call   c000243f <move_window>
c0006ee1:	89 c6                	mov    esi,eax
c0006ee3:	85 c0                	test   eax,eax
c0006ee5:	75 35                	jne    c0006f1c <f_getlabel+0x1e4>
c0006ee7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006eeb:	b8 43 00 00 00       	mov    eax,0x43
c0006ef0:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006ef2:	80 f9 03             	cmp    cl,0x3
c0006ef5:	74 0f                	je     c0006f06 <f_getlabel+0x1ce>
c0006ef7:	31 c0                	xor    eax,eax
c0006ef9:	80 f9 04             	cmp    cl,0x4
c0006efc:	0f 94 c0             	sete   al
c0006eff:	48                   	dec    eax
c0006f00:	83 e0 c3             	and    eax,0xffffffc3
c0006f03:	83 c0 64             	add    eax,0x64
c0006f06:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006f0a:	e8 5f ad ff ff       	call   c0001c6e <ld_dword>
c0006f0f:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006f16:	89 07                	mov    DWORD PTR [edi],eax
c0006f18:	eb 02                	jmp    c0006f1c <f_getlabel+0x1e4>
c0006f1a:	89 c6                	mov    esi,eax
c0006f1c:	83 c4 6c             	add    esp,0x6c
c0006f1f:	89 f0                	mov    eax,esi
c0006f21:	5b                   	pop    ebx
c0006f22:	5e                   	pop    esi
c0006f23:	5f                   	pop    edi
c0006f24:	5d                   	pop    ebp
c0006f25:	c3                   	ret    

c0006f26 <f_setlabel>:
c0006f26:	56                   	push   esi
c0006f27:	b9 02 00 00 00       	mov    ecx,0x2
c0006f2c:	53                   	push   ebx
c0006f2d:	83 ec 74             	sub    esp,0x74
c0006f30:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006f34:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f3b:	e8 b1 b7 ff ff       	call   c00026f1 <mount_volume>
c0006f40:	89 c6                	mov    esi,eax
c0006f42:	85 c0                	test   eax,eax
c0006f44:	0f 85 41 02 00 00    	jne    c000718b <f_setlabel+0x265>
c0006f4a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f4e:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006f51:	0f 85 8e 00 00 00    	jne    c0006fe5 <f_setlabel+0xbf>
c0006f57:	b9 16 00 00 00       	mov    ecx,0x16
c0006f5c:	31 d2                	xor    edx,edx
c0006f5e:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006f62:	31 db                	xor    ebx,ebx
c0006f64:	e8 8c ad ff ff       	call   c0001cf5 <mem_set>
c0006f69:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006f70:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006f73:	0f 86 0a 01 00 00    	jbe    c0007083 <f_setlabel+0x15d>
c0006f79:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f80:	e8 b6 ad ff ff       	call   c0001d3b <tchar2uni>
c0006f85:	89 c6                	mov    esi,eax
c0006f87:	3d ff ff 00 00       	cmp    eax,0xffff
c0006f8c:	76 2a                	jbe    c0006fb8 <f_setlabel+0x92>
c0006f8e:	83 f8 ff             	cmp    eax,0xffffffff
c0006f91:	74 05                	je     c0006f98 <f_setlabel+0x72>
c0006f93:	83 fb 09             	cmp    ebx,0x9
c0006f96:	76 0a                	jbe    c0006fa2 <f_setlabel+0x7c>
c0006f98:	be 06 00 00 00       	mov    esi,0x6
c0006f9d:	e9 e9 01 00 00       	jmp    c000718b <f_setlabel+0x265>
c0006fa2:	89 c2                	mov    edx,eax
c0006fa4:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006fa8:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006fab:	c1 ea 10             	shr    edx,0x10
c0006fae:	01 c8                	add    eax,ecx
c0006fb0:	43                   	inc    ebx
c0006fb1:	e8 1d ad ff ff       	call   c0001cd3 <st_word>
c0006fb6:	eb 04                	jmp    c0006fbc <f_setlabel+0x96>
c0006fb8:	85 c0                	test   eax,eax
c0006fba:	74 dc                	je     c0006f98 <f_setlabel+0x72>
c0006fbc:	89 f2                	mov    edx,esi
c0006fbe:	b8 77 8c 02 c0       	mov    eax,0xc0028c77
c0006fc3:	e8 5b ad ff ff       	call   c0001d23 <chk_chr>
c0006fc8:	85 c0                	test   eax,eax
c0006fca:	75 cc                	jne    c0006f98 <f_setlabel+0x72>
c0006fcc:	83 fb 0a             	cmp    ebx,0xa
c0006fcf:	77 c7                	ja     c0006f98 <f_setlabel+0x72>
c0006fd1:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006fd4:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006fd8:	0f b7 d6             	movzx  edx,si
c0006fdb:	01 c8                	add    eax,ecx
c0006fdd:	43                   	inc    ebx
c0006fde:	e8 f0 ac ff ff       	call   c0001cd3 <st_word>
c0006fe3:	eb 84                	jmp    c0006f69 <f_setlabel+0x43>
c0006fe5:	b9 0b 00 00 00       	mov    ecx,0xb
c0006fea:	ba 20 00 00 00       	mov    edx,0x20
c0006fef:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006ff3:	31 db                	xor    ebx,ebx
c0006ff5:	e8 fb ac ff ff       	call   c0001cf5 <mem_set>
c0006ffa:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0007001:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0007004:	76 60                	jbe    c0007066 <f_setlabel+0x140>
c0007006:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c000700d:	e8 29 ad ff ff       	call   c0001d3b <tchar2uni>
c0007012:	3d ff ff 00 00       	cmp    eax,0xffff
c0007017:	0f 87 7b ff ff ff    	ja     c0006f98 <f_setlabel+0x72>
c000701d:	83 ec 0c             	sub    esp,0xc
c0007020:	50                   	push   eax
c0007021:	e8 97 15 00 00       	call   c00085bd <ff_wtoupper>
c0007026:	5a                   	pop    edx
c0007027:	59                   	pop    ecx
c0007028:	68 b5 01 00 00       	push   0x1b5
c000702d:	50                   	push   eax
c000702e:	e8 8e 14 00 00       	call   c00084c1 <ff_uni2oem>
c0007033:	83 c4 10             	add    esp,0x10
c0007036:	89 c6                	mov    esi,eax
c0007038:	66 85 c0             	test   ax,ax
c000703b:	0f 84 57 ff ff ff    	je     c0006f98 <f_setlabel+0x72>
c0007041:	0f b7 d0             	movzx  edx,ax
c0007044:	b8 70 8c 02 c0       	mov    eax,0xc0028c70
c0007049:	e8 d5 ac ff ff       	call   c0001d23 <chk_chr>
c000704e:	85 c0                	test   eax,eax
c0007050:	0f 85 42 ff ff ff    	jne    c0006f98 <f_setlabel+0x72>
c0007056:	66 81 fe ff 00       	cmp    si,0xff
c000705b:	0f 87 14 01 00 00    	ja     c0007175 <f_setlabel+0x24f>
c0007061:	e9 fa 00 00 00       	jmp    c0007160 <f_setlabel+0x23a>
c0007066:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c000706b:	0f 84 27 ff ff ff    	je     c0006f98 <f_setlabel+0x72>
c0007071:	85 db                	test   ebx,ebx
c0007073:	74 0e                	je     c0007083 <f_setlabel+0x15d>
c0007075:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007078:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c000707d:	75 04                	jne    c0007083 <f_setlabel+0x15d>
c000707f:	89 c3                	mov    ebx,eax
c0007081:	eb ee                	jmp    c0007071 <f_setlabel+0x14b>
c0007083:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007087:	31 d2                	xor    edx,edx
c0007089:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000708d:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0007095:	8d 44 24 24          	lea    eax,[esp+0x24]
c0007099:	e8 1f c1 ff ff       	call   c00031bd <dir_sdi>
c000709e:	89 c6                	mov    esi,eax
c00070a0:	85 c0                	test   eax,eax
c00070a2:	0f 85 e3 00 00 00    	jne    c000718b <f_setlabel+0x265>
c00070a8:	ba 01 00 00 00       	mov    edx,0x1
c00070ad:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070b1:	e8 17 c9 ff ff       	call   c00039cd <dir_read>
c00070b6:	85 c0                	test   eax,eax
c00070b8:	75 21                	jne    c00070db <f_setlabel+0x1b5>
c00070ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00070be:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070c2:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c00070c5:	74 5d                	je     c0007124 <f_setlabel+0x1fe>
c00070c7:	85 db                	test   ebx,ebx
c00070c9:	74 0b                	je     c00070d6 <f_setlabel+0x1b0>
c00070cb:	b9 0b 00 00 00       	mov    ecx,0xb
c00070d0:	8d 54 24 0e          	lea    edx,[esp+0xe]
c00070d4:	eb 70                	jmp    c0007146 <f_setlabel+0x220>
c00070d6:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c00070d9:	eb 70                	jmp    c000714b <f_setlabel+0x225>
c00070db:	83 f8 04             	cmp    eax,0x4
c00070de:	75 7c                	jne    c000715c <f_setlabel+0x236>
c00070e0:	85 db                	test   ebx,ebx
c00070e2:	0f 84 a3 00 00 00    	je     c000718b <f_setlabel+0x265>
c00070e8:	ba 01 00 00 00       	mov    edx,0x1
c00070ed:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070f1:	e8 51 ca ff ff       	call   c0003b47 <dir_alloc>
c00070f6:	89 c6                	mov    esi,eax
c00070f8:	85 c0                	test   eax,eax
c00070fa:	0f 85 8b 00 00 00    	jne    c000718b <f_setlabel+0x265>
c0007100:	31 d2                	xor    edx,edx
c0007102:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007106:	b9 20 00 00 00       	mov    ecx,0x20
c000710b:	e8 e5 ab ff ff       	call   c0001cf5 <mem_set>
c0007110:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007114:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0007117:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000711b:	75 18                	jne    c0007135 <f_setlabel+0x20f>
c000711d:	c6 00 83             	mov    BYTE PTR [eax],0x83
c0007120:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007124:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0007127:	b9 16 00 00 00       	mov    ecx,0x16
c000712c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007130:	83 c0 02             	add    eax,0x2
c0007133:	eb 9b                	jmp    c00070d0 <f_setlabel+0x1aa>
c0007135:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0007139:	b9 0b 00 00 00       	mov    ecx,0xb
c000713e:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0007142:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007146:	e8 95 ab ff ff       	call   c0001ce0 <mem_cpy>
c000714b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000714f:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0007153:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007157:	e8 0e d4 ff ff       	call   c000456a <sync_fs>
c000715c:	89 c6                	mov    esi,eax
c000715e:	eb 2b                	jmp    c000718b <f_setlabel+0x265>
c0007160:	83 fb 0a             	cmp    ebx,0xa
c0007163:	0f 87 2f fe ff ff    	ja     c0006f98 <f_setlabel+0x72>
c0007169:	89 f0                	mov    eax,esi
c000716b:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c000716f:	43                   	inc    ebx
c0007170:	e9 85 fe ff ff       	jmp    c0006ffa <f_setlabel+0xd4>
c0007175:	83 fb 09             	cmp    ebx,0x9
c0007178:	0f 87 1a fe ff ff    	ja     c0006f98 <f_setlabel+0x72>
c000717e:	89 f0                	mov    eax,esi
c0007180:	66 c1 e8 08          	shr    ax,0x8
c0007184:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007188:	43                   	inc    ebx
c0007189:	eb de                	jmp    c0007169 <f_setlabel+0x243>
c000718b:	89 f0                	mov    eax,esi
c000718d:	83 c4 74             	add    esp,0x74
c0007190:	5b                   	pop    ebx
c0007191:	5e                   	pop    esi
c0007192:	c3                   	ret    

c0007193 <f_forward>:
c0007193:	55                   	push   ebp
c0007194:	57                   	push   edi
c0007195:	56                   	push   esi
c0007196:	53                   	push   ebx
c0007197:	83 ec 2c             	sub    esp,0x2c
c000719a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000719e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00071a2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00071a8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00071ac:	89 d8                	mov    eax,ebx
c00071ae:	e8 b1 b1 ff ff       	call   c0002364 <validate>
c00071b3:	89 c5                	mov    ebp,eax
c00071b5:	85 c0                	test   eax,eax
c00071b7:	0f 85 aa 01 00 00    	jne    c0007367 <f_forward+0x1d4>
c00071bd:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00071c1:	85 ed                	test   ebp,ebp
c00071c3:	0f 85 9e 01 00 00    	jne    c0007367 <f_forward+0x1d4>
c00071c9:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00071cd:	0f 84 8f 01 00 00    	je     c0007362 <f_forward+0x1cf>
c00071d3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00071d6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00071d9:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00071dc:	bf 00 00 00 00       	mov    edi,0x0
c00071e1:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00071e4:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00071e8:	89 d1                	mov    ecx,edx
c00071ea:	19 f9                	sbb    ecx,edi
c00071ec:	0f 83 cf 00 00 00    	jae    c00072c1 <f_forward+0x12e>
c00071f2:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00071f6:	e9 c6 00 00 00       	jmp    c00072c1 <f_forward+0x12e>
c00071fb:	50                   	push   eax
c00071fc:	50                   	push   eax
c00071fd:	6a 00                	push   0x0
c00071ff:	6a 00                	push   0x0
c0007201:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0007205:	83 c4 10             	add    esp,0x10
c0007208:	85 c0                	test   eax,eax
c000720a:	0f 84 57 01 00 00    	je     c0007367 <f_forward+0x1d4>
c0007210:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007213:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007217:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000721a:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c000721e:	89 d7                	mov    edi,edx
c0007220:	8d 4e ff             	lea    ecx,[esi-0x1]
c0007223:	89 c6                	mov    esi,eax
c0007225:	0f ac fe 09          	shrd   esi,edi,0x9
c0007229:	21 ce                	and    esi,ecx
c000722b:	89 c1                	mov    ecx,eax
c000722d:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0007233:	0f 84 98 00 00 00    	je     c00072d1 <f_forward+0x13e>
c0007239:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000723d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007240:	89 c8                	mov    eax,ecx
c0007242:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007246:	e8 af ac ff ff       	call   c0001efa <clst2sect>
c000724b:	89 d7                	mov    edi,edx
c000724d:	09 c7                	or     edi,eax
c000724f:	0f 84 9e 00 00 00    	je     c00072f3 <f_forward+0x160>
c0007255:	31 ff                	xor    edi,edi
c0007257:	8d 4b 50             	lea    ecx,[ebx+0x50]
c000725a:	01 c6                	add    esi,eax
c000725c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007260:	11 d7                	adc    edi,edx
c0007262:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0007265:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0007268:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000726c:	39 fa                	cmp    edx,edi
c000726e:	0f 85 a2 00 00 00    	jne    c0007316 <f_forward+0x183>
c0007274:	39 f0                	cmp    eax,esi
c0007276:	0f 85 9a 00 00 00    	jne    c0007316 <f_forward+0x183>
c000727c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000727f:	ba 00 02 00 00       	mov    edx,0x200
c0007284:	25 ff 01 00 00       	and    eax,0x1ff
c0007289:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c000728d:	29 c2                	sub    edx,eax
c000728f:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0007292:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0007295:	39 d1                	cmp    ecx,edx
c0007297:	76 02                	jbe    c000729b <f_forward+0x108>
c0007299:	89 d1                	mov    ecx,edx
c000729b:	8d 73 50             	lea    esi,[ebx+0x50]
c000729e:	52                   	push   edx
c000729f:	01 c6                	add    esi,eax
c00072a1:	52                   	push   edx
c00072a2:	51                   	push   ecx
c00072a3:	56                   	push   esi
c00072a4:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00072a8:	83 c4 10             	add    esp,0x10
c00072ab:	85 c0                	test   eax,eax
c00072ad:	74 44                	je     c00072f3 <f_forward+0x160>
c00072af:	31 ff                	xor    edi,edi
c00072b1:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c00072b4:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00072b7:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00072bb:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c00072bf:	01 07                	add    DWORD PTR [edi],eax
c00072c1:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00072c6:	0f 85 2f ff ff ff    	jne    c00071fb <f_forward+0x68>
c00072cc:	e9 96 00 00 00       	jmp    c0007367 <f_forward+0x1d4>
c00072d1:	85 f6                	test   esi,esi
c00072d3:	0f 85 60 ff ff ff    	jne    c0007239 <f_forward+0xa6>
c00072d9:	89 d7                	mov    edi,edx
c00072db:	09 c7                	or     edi,eax
c00072dd:	75 05                	jne    c00072e4 <f_forward+0x151>
c00072df:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00072e2:	eb 0a                	jmp    c00072ee <f_forward+0x15b>
c00072e4:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00072e7:	89 d8                	mov    eax,ebx
c00072e9:	e8 d9 bc ff ff       	call   c0002fc7 <get_fat>
c00072ee:	83 f8 01             	cmp    eax,0x1
c00072f1:	77 0b                	ja     c00072fe <f_forward+0x16b>
c00072f3:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00072f7:	bd 02 00 00 00       	mov    ebp,0x2
c00072fc:	eb 69                	jmp    c0007367 <f_forward+0x1d4>
c00072fe:	83 f8 ff             	cmp    eax,0xffffffff
c0007301:	75 0b                	jne    c000730e <f_forward+0x17b>
c0007303:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0007307:	bd 01 00 00 00       	mov    ebp,0x1
c000730c:	eb 59                	jmp    c0007367 <f_forward+0x1d4>
c000730e:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0007311:	e9 23 ff ff ff       	jmp    c0007239 <f_forward+0xa6>
c0007316:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000731a:	79 20                	jns    c000733c <f_forward+0x1a9>
c000731c:	83 ec 0c             	sub    esp,0xc
c000731f:	6a 01                	push   0x1
c0007321:	52                   	push   edx
c0007322:	50                   	push   eax
c0007323:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007327:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000732b:	50                   	push   eax
c000732c:	e8 fb a8 ff ff       	call   c0001c2c <disk_write>
c0007331:	83 c4 20             	add    esp,0x20
c0007334:	85 c0                	test   eax,eax
c0007336:	75 cb                	jne    c0007303 <f_forward+0x170>
c0007338:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000733c:	83 ec 0c             	sub    esp,0xc
c000733f:	6a 01                	push   0x1
c0007341:	57                   	push   edi
c0007342:	56                   	push   esi
c0007343:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007347:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000734b:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000734f:	50                   	push   eax
c0007350:	e8 c1 a8 ff ff       	call   c0001c16 <disk_read>
c0007355:	83 c4 20             	add    esp,0x20
c0007358:	85 c0                	test   eax,eax
c000735a:	0f 84 1c ff ff ff    	je     c000727c <f_forward+0xe9>
c0007360:	eb a1                	jmp    c0007303 <f_forward+0x170>
c0007362:	bd 07 00 00 00       	mov    ebp,0x7
c0007367:	83 c4 2c             	add    esp,0x2c
c000736a:	89 e8                	mov    eax,ebp
c000736c:	5b                   	pop    ebx
c000736d:	5e                   	pop    esi
c000736e:	5f                   	pop    edi
c000736f:	5d                   	pop    ebp
c0007370:	c3                   	ret    

c0007371 <f_mkfs>:
c0007371:	55                   	push   ebp
c0007372:	57                   	push   edi
c0007373:	56                   	push   esi
c0007374:	53                   	push   ebx
c0007375:	bb 0b 00 00 00       	mov    ebx,0xb
c000737a:	81 ec 9c 00 00 00    	sub    esp,0x9c
c0007380:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c0007387:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c000738e:	e8 b0 ae ff ff       	call   c0002243 <get_ldnumber>
c0007393:	85 c0                	test   eax,eax
c0007395:	0f 88 ec 10 00 00    	js     c0008487 <f_mkfs+0x1116>
c000739b:	8b 14 85 00 db 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd2500]
c00073a2:	85 d2                	test   edx,edx
c00073a4:	74 03                	je     c00073a9 <f_mkfs+0x38>
c00073a6:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00073a9:	85 f6                	test   esi,esi
c00073ab:	75 05                	jne    c00073b2 <f_mkfs+0x41>
c00073ad:	be 60 8c 02 c0       	mov    esi,0xc0028c60
c00073b2:	83 ec 0c             	sub    esp,0xc
c00073b5:	0f b6 c0             	movzx  eax,al
c00073b8:	bb 03 00 00 00       	mov    ebx,0x3
c00073bd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00073c1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073c5:	e8 49 a8 ff ff       	call   c0001c13 <disk_initialize>
c00073ca:	83 c4 10             	add    esp,0x10
c00073cd:	a8 01                	test   al,0x1
c00073cf:	0f 85 b2 10 00 00    	jne    c0008487 <f_mkfs+0x1116>
c00073d5:	bb 0a 00 00 00       	mov    ebx,0xa
c00073da:	a8 04                	test   al,0x4
c00073dc:	0f 85 a5 10 00 00    	jne    c0008487 <f_mkfs+0x1116>
c00073e2:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00073e5:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c00073e9:	85 c0                	test   eax,eax
c00073eb:	75 20                	jne    c000740d <f_mkfs+0x9c>
c00073ed:	51                   	push   ecx
c00073ee:	8d 44 24 78          	lea    eax,[esp+0x78]
c00073f2:	50                   	push   eax
c00073f3:	6a 03                	push   0x3
c00073f5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073f9:	e8 44 a8 ff ff       	call   c0001c42 <disk_ioctl>
c00073fe:	83 c4 10             	add    esp,0x10
c0007401:	85 c0                	test   eax,eax
c0007403:	74 08                	je     c000740d <f_mkfs+0x9c>
c0007405:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c000740d:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007411:	8d 42 ff             	lea    eax,[edx-0x1]
c0007414:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007419:	77 04                	ja     c000741f <f_mkfs+0xae>
c000741b:	85 c2                	test   edx,eax
c000741d:	74 08                	je     c0007427 <f_mkfs+0xb6>
c000741f:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007427:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c000742a:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c000742e:	48                   	dec    eax
c000742f:	3c 01                	cmp    al,0x1
c0007431:	76 05                	jbe    c0007438 <f_mkfs+0xc7>
c0007433:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c0007438:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000743b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000743f:	48                   	dec    eax
c0007440:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007445:	77 07                	ja     c000744e <f_mkfs+0xdd>
c0007447:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c000744c:	74 08                	je     c0007456 <f_mkfs+0xe5>
c000744e:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c0007456:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0007459:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c000745f:	77 07                	ja     c0007468 <f_mkfs+0xf7>
c0007461:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007464:	85 d8                	test   eax,ebx
c0007466:	74 02                	je     c000746a <f_mkfs+0xf9>
c0007468:	31 db                	xor    ebx,ebx
c000746a:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c0007475:	77 0a                	ja     c0007481 <f_mkfs+0x110>
c0007477:	bb 11 00 00 00       	mov    ebx,0x11
c000747c:	e9 06 10 00 00       	jmp    c0008487 <f_mkfs+0x1116>
c0007481:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c0007488:	8b 36                	mov    esi,DWORD PTR [esi]
c000748a:	85 ed                	test   ebp,ebp
c000748c:	75 1e                	jne    c00074ac <f_mkfs+0x13b>
c000748e:	83 ec 0c             	sub    esp,0xc
c0007491:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c0007498:	25 00 fe ff ff       	and    eax,0xfffffe00
c000749d:	50                   	push   eax
c000749e:	e8 f1 0f 00 00       	call   c0008494 <ff_memalloc>
c00074a3:	83 c4 10             	add    esp,0x10
c00074a6:	89 c5                	mov    ebp,eax
c00074a8:	85 c0                	test   eax,eax
c00074aa:	74 cb                	je     c0007477 <f_mkfs+0x106>
c00074ac:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c00074b4:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c00074bc:	52                   	push   edx
c00074bd:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c00074c1:	50                   	push   eax
c00074c2:	6a 01                	push   0x1
c00074c4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074c8:	e8 75 a7 ff ff       	call   c0001c42 <disk_ioctl>
c00074cd:	83 c4 10             	add    esp,0x10
c00074d0:	85 c0                	test   eax,eax
c00074d2:	0f 85 4a 0f 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c00074d8:	89 f1                	mov    ecx,esi
c00074da:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00074e2:	83 e1 0f             	and    ecx,0xf
c00074e5:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00074ed:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c00074f1:	83 e6 08             	and    esi,0x8
c00074f4:	75 56                	jne    c000754c <f_mkfs+0x1db>
c00074f6:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c00074fa:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c00074fe:	83 ff 00             	cmp    edi,0x0
c0007501:	76 20                	jbe    c0007523 <f_mkfs+0x1b2>
c0007503:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c0007508:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c0007510:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c0007516:	83 d7 ff             	adc    edi,0xffffffff
c0007519:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000751d:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007521:	eb 21                	jmp    c0007544 <f_mkfs+0x1d3>
c0007523:	ba 3f 00 00 00       	mov    edx,0x3f
c0007528:	39 f2                	cmp    edx,esi
c000752a:	19 f8                	sbb    eax,edi
c000752c:	73 1e                	jae    c000754c <f_mkfs+0x1db>
c000752e:	83 c6 c1             	add    esi,0xffffffc1
c0007531:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0007539:	83 d7 ff             	adc    edi,0xffffffff
c000753c:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007540:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007544:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000754c:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007550:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0007554:	89 04 24             	mov    DWORD PTR [esp],eax
c0007557:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000755b:	31 c0                	xor    eax,eax
c000755d:	ba 7f 00 00 00       	mov    edx,0x7f
c0007562:	89 c7                	mov    edi,eax
c0007564:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007567:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c000756b:	0f 83 c5 0a 00 00    	jae    c0008036 <f_mkfs+0xcc5>
c0007571:	89 df                	mov    edi,ebx
c0007573:	c1 ef 09             	shr    edi,0x9
c0007576:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000757a:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c0007581:	c1 ef 09             	shr    edi,0x9
c0007584:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c0007589:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c000758d:	74 29                	je     c00075b8 <f_mkfs+0x247>
c000758f:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c0007595:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c000759a:	0f 97 c2             	seta   dl
c000759d:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c00075a0:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00075a4:	0f 92 c0             	setb   al
c00075a7:	08 c2                	or     dl,al
c00075a9:	75 5b                	jne    c0007606 <f_mkfs+0x295>
c00075ab:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00075af:	83 e0 07             	and    eax,0x7
c00075b2:	3c 04                	cmp    al,0x4
c00075b4:	74 50                	je     c0007606 <f_mkfs+0x295>
c00075b6:	eb 1b                	jmp    c00075d3 <f_mkfs+0x262>
c00075b8:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00075bd:	0f 87 73 0a 00 00    	ja     c0008036 <f_mkfs+0xcc5>
c00075c3:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00075c9:	76 08                	jbe    c00075d3 <f_mkfs+0x262>
c00075cb:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c00075d3:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00075d7:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c00075db:	83 e0 01             	and    eax,0x1
c00075de:	80 e1 02             	and    cl,0x2
c00075e1:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c00075e5:	74 0d                	je     c00075f4 <f_mkfs+0x283>
c00075e7:	84 c0                	test   al,al
c00075e9:	0f 84 53 09 00 00    	je     c0007f42 <f_mkfs+0xbd1>
c00075ef:	e9 12 08 00 00       	jmp    c0007e06 <f_mkfs+0xa95>
c00075f4:	bb 13 00 00 00       	mov    ebx,0x13
c00075f9:	84 c0                	test   al,al
c00075fb:	0f 85 05 08 00 00    	jne    c0007e06 <f_mkfs+0xa95>
c0007601:	e9 39 0e 00 00       	jmp    c000843f <f_mkfs+0x10ce>
c0007606:	31 c0                	xor    eax,eax
c0007608:	ba ff 0f 00 00       	mov    edx,0xfff
c000760d:	89 c7                	mov    edi,eax
c000760f:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007612:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007616:	0f 83 1a 0a 00 00    	jae    c0008036 <f_mkfs+0xcc5>
c000761c:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c0007622:	77 39                	ja     c000765d <f_mkfs+0x2ec>
c0007624:	ba ff ff 07 00       	mov    edx,0x7ffff
c0007629:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0007631:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007634:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007638:	73 08                	jae    c0007642 <f_mkfs+0x2d1>
c000763a:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c0007642:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c0007647:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000764a:	b8 00 00 00 00       	mov    eax,0x0
c000764f:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007653:	73 08                	jae    c000765d <f_mkfs+0x2ec>
c0007655:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c000765d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007661:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007665:	83 c0 20             	add    eax,0x20
c0007668:	83 d2 00             	adc    edx,0x0
c000766b:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000766f:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0007673:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007677:	31 d2                	xor    edx,edx
c0007679:	31 ff                	xor    edi,edi
c000767b:	52                   	push   edx
c000767c:	89 fb                	mov    ebx,edi
c000767e:	50                   	push   eax
c000767f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007683:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007687:	e8 10 ec 01 00       	call   c002629c <__udivdi3>
c000768c:	83 c4 10             	add    esp,0x10
c000768f:	c1 e0 02             	shl    eax,0x2
c0007692:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0007696:	05 07 02 00 00       	add    eax,0x207
c000769b:	89 f1                	mov    ecx,esi
c000769d:	c1 e8 09             	shr    eax,0x9
c00076a0:	83 c1 ff             	add    ecx,0xffffffff
c00076a3:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c00076a7:	83 d3 ff             	adc    ebx,0xffffffff
c00076aa:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00076ae:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c00076b2:	31 d2                	xor    edx,edx
c00076b4:	01 c8                	add    eax,ecx
c00076b6:	11 da                	adc    edx,ebx
c00076b8:	89 c1                	mov    ecx,eax
c00076ba:	f7 de                	neg    esi
c00076bc:	89 d0                	mov    eax,edx
c00076be:	83 d7 00             	adc    edi,0x0
c00076c1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00076c5:	f7 df                	neg    edi
c00076c7:	21 f1                	and    ecx,esi
c00076c9:	21 f8                	and    eax,edi
c00076cb:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00076cf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00076d3:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00076d7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00076db:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c00076df:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00076e2:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c00076e6:	0f ac d0 01          	shrd   eax,edx,0x1
c00076ea:	89 df                	mov    edi,ebx
c00076ec:	d1 ea                	shr    edx,1
c00076ee:	39 c1                	cmp    ecx,eax
c00076f0:	19 d7                	sbb    edi,edx
c00076f2:	0f 83 3e 09 00 00    	jae    c0008036 <f_mkfs+0xcc5>
c00076f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00076fc:	31 d2                	xor    edx,edx
c00076fe:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c0007702:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007706:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000770a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000770d:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c0007711:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c0007715:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007719:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000771d:	83 f8 0f             	cmp    eax,0xf
c0007720:	0f 86 10 09 00 00    	jbe    c0008036 <f_mkfs+0xcc5>
c0007726:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c000772e:	0f 87 02 09 00 00    	ja     c0008036 <f_mkfs+0xcc5>
c0007734:	31 d2                	xor    edx,edx
c0007736:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000773a:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0007742:	83 c0 07             	add    eax,0x7
c0007745:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000774d:	c1 e8 03             	shr    eax,0x3
c0007750:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007757:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000775b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000775f:	c1 e0 09             	shl    eax,0x9
c0007762:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007766:	48                   	dec    eax
c0007767:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000776b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000776f:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c0007773:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007777:	31 d2                	xor    edx,edx
c0007779:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000777d:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0007784:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007788:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000778d:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0007791:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0007795:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007799:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000779d:	31 ff                	xor    edi,edi
c000779f:	31 f6                	xor    esi,esi
c00077a1:	31 db                	xor    ebx,ebx
c00077a3:	85 ff                	test   edi,edi
c00077a5:	74 05                	je     c00077ac <f_mkfs+0x43b>
c00077a7:	4f                   	dec    edi
c00077a8:	74 44                	je     c00077ee <f_mkfs+0x47d>
c00077aa:	eb 4f                	jmp    c00077fb <f_mkfs+0x48a>
c00077ac:	83 ec 0c             	sub    esp,0xc
c00077af:	0f b7 c3             	movzx  eax,bx
c00077b2:	50                   	push   eax
c00077b3:	e8 05 0e 00 00       	call   c00085bd <ff_wtoupper>
c00077b8:	83 c4 10             	add    esp,0x10
c00077bb:	89 c1                	mov    ecx,eax
c00077bd:	8d 53 01             	lea    edx,[ebx+0x1]
c00077c0:	66 39 c3             	cmp    bx,ax
c00077c3:	75 3e                	jne    c0007803 <f_mkfs+0x492>
c00077c5:	be 01 00 00 00       	mov    esi,0x1
c00077ca:	89 df                	mov    edi,ebx
c00077cc:	66 01 f7             	add    di,si
c00077cf:	75 07                	jne    c00077d8 <f_mkfs+0x467>
c00077d1:	83 fe 7f             	cmp    esi,0x7f
c00077d4:	77 31                	ja     c0007807 <f_mkfs+0x496>
c00077d6:	eb 16                	jmp    c00077ee <f_mkfs+0x47d>
c00077d8:	83 ec 0c             	sub    esp,0xc
c00077db:	0f b7 ff             	movzx  edi,di
c00077de:	57                   	push   edi
c00077df:	e8 d9 0d 00 00       	call   c00085bd <ff_wtoupper>
c00077e4:	83 c4 10             	add    esp,0x10
c00077e7:	39 c7                	cmp    edi,eax
c00077e9:	75 e6                	jne    c00077d1 <f_mkfs+0x460>
c00077eb:	46                   	inc    esi
c00077ec:	eb dc                	jmp    c00077ca <f_mkfs+0x459>
c00077ee:	31 c0                	xor    eax,eax
c00077f0:	89 d9                	mov    ecx,ebx
c00077f2:	4e                   	dec    esi
c00077f3:	0f 95 c0             	setne  al
c00077f6:	43                   	inc    ebx
c00077f7:	89 c7                	mov    edi,eax
c00077f9:	eb 14                	jmp    c000780f <f_mkfs+0x49e>
c00077fb:	89 f1                	mov    ecx,esi
c00077fd:	01 f3                	add    ebx,esi
c00077ff:	31 ff                	xor    edi,edi
c0007801:	eb 0c                	jmp    c000780f <f_mkfs+0x49e>
c0007803:	89 d3                	mov    ebx,edx
c0007805:	eb 08                	jmp    c000780f <f_mkfs+0x49e>
c0007807:	bf 02 00 00 00       	mov    edi,0x2
c000780c:	83 c9 ff             	or     ecx,0xffffffff
c000780f:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007813:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007816:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c000781a:	0f b6 c1             	movzx  eax,cl
c000781d:	e8 3a a9 ff ff       	call   c000215c <xsum32>
c0007822:	66 c1 e9 08          	shr    cx,0x8
c0007826:	89 c2                	mov    edx,eax
c0007828:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000782b:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c000782f:	0f b7 c1             	movzx  eax,cx
c0007832:	e8 25 a9 ff ff       	call   c000215c <xsum32>
c0007837:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c000783c:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007840:	66 85 db             	test   bx,bx
c0007843:	74 1f                	je     c0007864 <f_mkfs+0x4f3>
c0007845:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007848:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c000784f:	83 c0 02             	add    eax,0x2
c0007852:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c0007858:	39 c2                	cmp    edx,eax
c000785a:	74 08                	je     c0007864 <f_mkfs+0x4f3>
c000785c:	89 04 24             	mov    DWORD PTR [esp],eax
c000785f:	e9 3f ff ff ff       	jmp    c00077a3 <f_mkfs+0x432>
c0007864:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007867:	83 ec 0c             	sub    esp,0xc
c000786a:	05 01 02 00 00       	add    eax,0x201
c000786f:	c1 e8 09             	shr    eax,0x9
c0007872:	50                   	push   eax
c0007873:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007877:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000787b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000787f:	55                   	push   ebp
c0007880:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007884:	e8 a3 a3 ff ff       	call   c0001c2c <disk_write>
c0007889:	83 c4 20             	add    esp,0x20
c000788c:	85 c0                	test   eax,eax
c000788e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007891:	0f 85 8b 0b 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007897:	89 d0                	mov    eax,edx
c0007899:	31 d2                	xor    edx,edx
c000789b:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c000789f:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c00078a3:	66 85 db             	test   bx,bx
c00078a6:	74 04                	je     c00078ac <f_mkfs+0x53b>
c00078a8:	31 c0                	xor    eax,eax
c00078aa:	eb b0                	jmp    c000785c <f_mkfs+0x4eb>
c00078ac:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00078b0:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c00078b4:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c00078b8:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c00078be:	31 d2                	xor    edx,edx
c00078c0:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c00078cb:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00078cf:	c1 eb 09             	shr    ebx,0x9
c00078d2:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c00078d9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00078dd:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00078e1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00078e5:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00078e9:	8d 70 01             	lea    esi,[eax+0x1]
c00078ec:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00078f0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00078f4:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c00078fb:	31 d2                	xor    edx,edx
c00078fd:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007902:	89 04 24             	mov    DWORD PTR [esp],eax
c0007905:	89 c1                	mov    ecx,eax
c0007907:	89 e8                	mov    eax,ebp
c0007909:	e8 e7 a3 ff ff       	call   c0001cf5 <mem_set>
c000790e:	31 c0                	xor    eax,eax
c0007910:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007913:	76 10                	jbe    c0007925 <f_mkfs+0x5b4>
c0007915:	83 fe 07             	cmp    esi,0x7
c0007918:	76 0b                	jbe    c0007925 <f_mkfs+0x5b4>
c000791a:	40                   	inc    eax
c000791b:	83 ee 08             	sub    esi,0x8
c000791e:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c0007923:	eb eb                	jmp    c0007910 <f_mkfs+0x59f>
c0007925:	b2 01                	mov    dl,0x1
c0007927:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c000792b:	85 f6                	test   esi,esi
c000792d:	74 0c                	je     c000793b <f_mkfs+0x5ca>
c000792f:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007932:	76 07                	jbe    c000793b <f_mkfs+0x5ca>
c0007934:	08 11                	or     BYTE PTR [ecx],dl
c0007936:	4e                   	dec    esi
c0007937:	d1 e2                	shl    edx,1
c0007939:	eb f0                	jmp    c000792b <f_mkfs+0x5ba>
c000793b:	89 df                	mov    edi,ebx
c000793d:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007941:	76 04                	jbe    c0007947 <f_mkfs+0x5d6>
c0007943:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007947:	83 ec 0c             	sub    esp,0xc
c000794a:	57                   	push   edi
c000794b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000794f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007953:	55                   	push   ebp
c0007954:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007958:	e8 cf a2 ff ff       	call   c0001c2c <disk_write>
c000795d:	83 c4 20             	add    esp,0x20
c0007960:	85 c0                	test   eax,eax
c0007962:	0f 85 ba 0a 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007968:	31 d2                	xor    edx,edx
c000796a:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c000796e:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007972:	29 fb                	sub    ebx,edi
c0007974:	0f 85 7a ff ff ff    	jne    c00078f4 <f_mkfs+0x583>
c000797a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000797e:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007986:	31 f6                	xor    esi,esi
c0007988:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000798c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000798f:	31 d2                	xor    edx,edx
c0007991:	89 e8                	mov    eax,ebp
c0007993:	e8 5d a3 ff ff       	call   c0001cf5 <mem_set>
c0007998:	31 c9                	xor    ecx,ecx
c000799a:	85 db                	test   ebx,ebx
c000799c:	75 40                	jne    c00079de <f_mkfs+0x66d>
c000799e:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00079a3:	89 e8                	mov    eax,ebp
c00079a5:	bb 02 00 00 00       	mov    ebx,0x2
c00079aa:	e8 28 a3 ff ff       	call   c0001cd7 <st_dword>
c00079af:	8d 45 04             	lea    eax,[ebp+0x4]
c00079b2:	83 ca ff             	or     edx,0xffffffff
c00079b5:	e8 1d a3 ff ff       	call   c0001cd7 <st_dword>
c00079ba:	b9 08 00 00 00       	mov    ecx,0x8
c00079bf:	eb 1d                	jmp    c00079de <f_mkfs+0x66d>
c00079c1:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00079c4:	76 3b                	jbe    c0007a01 <f_mkfs+0x690>
c00079c6:	43                   	inc    ebx
c00079c7:	83 fe 01             	cmp    esi,0x1
c00079ca:	89 da                	mov    edx,ebx
c00079cc:	77 03                	ja     c00079d1 <f_mkfs+0x660>
c00079ce:	83 ca ff             	or     edx,0xffffffff
c00079d1:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00079d5:	4e                   	dec    esi
c00079d6:	e8 fc a2 ff ff       	call   c0001cd7 <st_dword>
c00079db:	83 c1 04             	add    ecx,0x4
c00079de:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00079e2:	85 f6                	test   esi,esi
c00079e4:	75 db                	jne    c00079c1 <f_mkfs+0x650>
c00079e6:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c00079eb:	77 14                	ja     c0007a01 <f_mkfs+0x690>
c00079ed:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c00079f1:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c00079f8:	85 f6                	test   esi,esi
c00079fa:	74 05                	je     c0007a01 <f_mkfs+0x690>
c00079fc:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00079ff:	77 dd                	ja     c00079de <f_mkfs+0x66d>
c0007a01:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0007a05:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007a09:	39 cf                	cmp    edi,ecx
c0007a0b:	76 02                	jbe    c0007a0f <f_mkfs+0x69e>
c0007a0d:	89 cf                	mov    edi,ecx
c0007a0f:	83 ec 0c             	sub    esp,0xc
c0007a12:	57                   	push   edi
c0007a13:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007a17:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007a1b:	55                   	push   ebp
c0007a1c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a20:	e8 07 a2 ff ff       	call   c0001c2c <disk_write>
c0007a25:	83 c4 20             	add    esp,0x20
c0007a28:	85 c0                	test   eax,eax
c0007a2a:	0f 85 f2 09 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007a30:	31 d2                	xor    edx,edx
c0007a32:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c0007a36:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007a3a:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007a3e:	0f 85 48 ff ff ff    	jne    c000798c <f_mkfs+0x61b>
c0007a44:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007a47:	31 d2                	xor    edx,edx
c0007a49:	89 e8                	mov    eax,ebp
c0007a4b:	31 ff                	xor    edi,edi
c0007a4d:	e8 a3 a2 ff ff       	call   c0001cf5 <mem_set>
c0007a52:	8d 45 34             	lea    eax,[ebp+0x34]
c0007a55:	ba 02 00 00 00       	mov    edx,0x2
c0007a5a:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007a5e:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007a62:	e8 70 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a67:	8d 45 38             	lea    eax,[ebp+0x38]
c0007a6a:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007a6e:	e8 64 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a73:	8d 45 44             	lea    eax,[ebp+0x44]
c0007a76:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007a7a:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007a7e:	e8 54 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a83:	8d 45 54             	lea    eax,[ebp+0x54]
c0007a86:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007a8a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007a8e:	83 c2 02             	add    edx,0x2
c0007a91:	e8 41 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a96:	8d 45 58             	lea    eax,[ebp+0x58]
c0007a99:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007a9d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007aa1:	e8 31 a2 ff ff       	call   c0001cd7 <st_dword>
c0007aa6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007aaa:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007aaf:	89 c6                	mov    esi,eax
c0007ab1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007ab5:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007ab9:	89 04 24             	mov    DWORD PTR [esp],eax
c0007abc:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007ac0:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007ac3:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007ac7:	39 cb                	cmp    ebx,ecx
c0007ac9:	76 02                	jbe    c0007acd <f_mkfs+0x75c>
c0007acb:	89 cb                	mov    ebx,ecx
c0007acd:	83 ec 0c             	sub    esp,0xc
c0007ad0:	53                   	push   ebx
c0007ad1:	57                   	push   edi
c0007ad2:	56                   	push   esi
c0007ad3:	55                   	push   ebp
c0007ad4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007ad8:	e8 4f a1 ff ff       	call   c0001c2c <disk_write>
c0007add:	83 c4 20             	add    esp,0x20
c0007ae0:	85 c0                	test   eax,eax
c0007ae2:	0f 85 3a 09 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007ae8:	31 d2                	xor    edx,edx
c0007aea:	b9 00 02 00 00       	mov    ecx,0x200
c0007aef:	89 e8                	mov    eax,ebp
c0007af1:	e8 ff a1 ff ff       	call   c0001cf5 <mem_set>
c0007af6:	31 d2                	xor    edx,edx
c0007af8:	01 de                	add    esi,ebx
c0007afa:	11 d7                	adc    edi,edx
c0007afc:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007aff:	75 bf                	jne    c0007ac0 <f_mkfs+0x74f>
c0007b01:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007b05:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007b09:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007b11:	b9 00 02 00 00       	mov    ecx,0x200
c0007b16:	31 d2                	xor    edx,edx
c0007b18:	89 e8                	mov    eax,ebp
c0007b1a:	e8 d6 a1 ff ff       	call   c0001cf5 <mem_set>
c0007b1f:	b9 0b 00 00 00       	mov    ecx,0xb
c0007b24:	ba 40 8d 02 c0       	mov    edx,0xc0028d40
c0007b29:	89 e8                	mov    eax,ebp
c0007b2b:	e8 b0 a1 ff ff       	call   c0001ce0 <mem_cpy>
c0007b30:	8d 45 40             	lea    eax,[ebp+0x40]
c0007b33:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007b37:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007b3b:	e8 9a a1 ff ff       	call   c0001cda <st_qword>
c0007b40:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007b44:	8d 45 48             	lea    eax,[ebp+0x48]
c0007b47:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007b4b:	e8 8a a1 ff ff       	call   c0001cda <st_qword>
c0007b50:	8d 45 50             	lea    eax,[ebp+0x50]
c0007b53:	ba 20 00 00 00       	mov    edx,0x20
c0007b58:	e8 7a a1 ff ff       	call   c0001cd7 <st_dword>
c0007b5d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007b61:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007b65:	e8 6d a1 ff ff       	call   c0001cd7 <st_dword>
c0007b6a:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007b6e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007b72:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007b76:	e8 5c a1 ff ff       	call   c0001cd7 <st_dword>
c0007b7b:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007b7e:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007b82:	e8 50 a1 ff ff       	call   c0001cd7 <st_dword>
c0007b87:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007b8b:	8d 50 02             	lea    edx,[eax+0x2]
c0007b8e:	8d 45 60             	lea    eax,[ebp+0x60]
c0007b91:	e8 41 a1 ff ff       	call   c0001cd7 <st_dword>
c0007b96:	8d 45 64             	lea    eax,[ebp+0x64]
c0007b99:	ba 00 00 21 50       	mov    edx,0x50210000
c0007b9e:	e8 34 a1 ff ff       	call   c0001cd7 <st_dword>
c0007ba3:	8d 45 68             	lea    eax,[ebp+0x68]
c0007ba6:	ba 00 01 00 00       	mov    edx,0x100
c0007bab:	e8 23 a1 ff ff       	call   c0001cd3 <st_word>
c0007bb0:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007bb4:	b8 0a 00 00 00       	mov    eax,0xa
c0007bb9:	48                   	dec    eax
c0007bba:	74 05                	je     c0007bc1 <f_mkfs+0x850>
c0007bbc:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007bbf:	eb f8                	jmp    c0007bb9 <f_mkfs+0x848>
c0007bc1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007bc5:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007bc9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007bcd:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007bd1:	74 05                	je     c0007bd8 <f_mkfs+0x867>
c0007bd3:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007bd6:	eb f5                	jmp    c0007bcd <f_mkfs+0x85c>
c0007bd8:	8d 45 78             	lea    eax,[ebp+0x78]
c0007bdb:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007be0:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007be6:	31 db                	xor    ebx,ebx
c0007be8:	e8 e6 a0 ff ff       	call   c0001cd3 <st_word>
c0007bed:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007bf3:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007bf8:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bfb:	e8 d3 a0 ff ff       	call   c0001cd3 <st_word>
c0007c00:	31 c9                	xor    ecx,ecx
c0007c02:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007c05:	83 f8 01             	cmp    eax,0x1
c0007c08:	76 13                	jbe    c0007c1d <f_mkfs+0x8ac>
c0007c0a:	83 f9 70             	cmp    ecx,0x70
c0007c0d:	74 0e                	je     c0007c1d <f_mkfs+0x8ac>
c0007c0f:	89 da                	mov    edx,ebx
c0007c11:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007c16:	e8 41 a5 ff ff       	call   c000215c <xsum32>
c0007c1b:	89 c3                	mov    ebx,eax
c0007c1d:	41                   	inc    ecx
c0007c1e:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c24:	75 dc                	jne    c0007c02 <f_mkfs+0x891>
c0007c26:	89 f0                	mov    eax,esi
c0007c28:	89 fa                	mov    edx,edi
c0007c2a:	83 c0 01             	add    eax,0x1
c0007c2d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007c31:	83 d2 00             	adc    edx,0x0
c0007c34:	83 ec 0c             	sub    esp,0xc
c0007c37:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007c3b:	6a 01                	push   0x1
c0007c3d:	57                   	push   edi
c0007c3e:	56                   	push   esi
c0007c3f:	55                   	push   ebp
c0007c40:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c44:	e8 e3 9f ff ff       	call   c0001c2c <disk_write>
c0007c49:	83 c4 20             	add    esp,0x20
c0007c4c:	85 c0                	test   eax,eax
c0007c4e:	0f 85 ce 07 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007c54:	31 d2                	xor    edx,edx
c0007c56:	b9 00 02 00 00       	mov    ecx,0x200
c0007c5b:	89 e8                	mov    eax,ebp
c0007c5d:	e8 93 a0 ff ff       	call   c0001cf5 <mem_set>
c0007c62:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007c67:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007c6a:	e8 64 a0 ff ff       	call   c0001cd3 <st_word>
c0007c6f:	89 f0                	mov    eax,esi
c0007c71:	89 fa                	mov    edx,edi
c0007c73:	83 c0 09             	add    eax,0x9
c0007c76:	83 d2 00             	adc    edx,0x0
c0007c79:	89 04 24             	mov    DWORD PTR [esp],eax
c0007c7c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007c80:	31 c9                	xor    ecx,ecx
c0007c82:	41                   	inc    ecx
c0007c83:	89 da                	mov    edx,ebx
c0007c85:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007c8a:	e8 cd a4 ff ff       	call   c000215c <xsum32>
c0007c8f:	89 c3                	mov    ebx,eax
c0007c91:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c97:	75 e9                	jne    c0007c82 <f_mkfs+0x911>
c0007c99:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007c9d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007ca1:	83 c0 01             	add    eax,0x1
c0007ca4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007ca8:	83 d2 00             	adc    edx,0x0
c0007cab:	83 ec 0c             	sub    esp,0xc
c0007cae:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007cb2:	6a 01                	push   0x1
c0007cb4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007cb8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007cbc:	55                   	push   ebp
c0007cbd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007cc1:	e8 66 9f ff ff       	call   c0001c2c <disk_write>
c0007cc6:	83 c4 20             	add    esp,0x20
c0007cc9:	85 c0                	test   eax,eax
c0007ccb:	0f 85 51 07 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007cd1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007cd5:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007cd9:	75 09                	jne    c0007ce4 <f_mkfs+0x973>
c0007cdb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007cde:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007ce2:	74 12                	je     c0007cf6 <f_mkfs+0x985>
c0007ce4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007ce8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007cec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007cf0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007cf4:	eb 8a                	jmp    c0007c80 <f_mkfs+0x90f>
c0007cf6:	31 d2                	xor    edx,edx
c0007cf8:	b9 00 02 00 00       	mov    ecx,0x200
c0007cfd:	89 e8                	mov    eax,ebp
c0007cff:	e8 f1 9f ff ff       	call   c0001cf5 <mem_set>
c0007d04:	83 c6 0b             	add    esi,0xb
c0007d07:	83 d7 00             	adc    edi,0x0
c0007d0a:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007d0e:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007d12:	31 c9                	xor    ecx,ecx
c0007d14:	41                   	inc    ecx
c0007d15:	89 da                	mov    edx,ebx
c0007d17:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007d1c:	e8 3b a4 ff ff       	call   c000215c <xsum32>
c0007d21:	89 c3                	mov    ebx,eax
c0007d23:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007d29:	75 e9                	jne    c0007d14 <f_mkfs+0x9a3>
c0007d2b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d2e:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d32:	83 c6 01             	add    esi,0x1
c0007d35:	83 d7 00             	adc    edi,0x0
c0007d38:	83 ec 0c             	sub    esp,0xc
c0007d3b:	6a 01                	push   0x1
c0007d3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d41:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d45:	55                   	push   ebp
c0007d46:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d4a:	e8 dd 9e ff ff       	call   c0001c2c <disk_write>
c0007d4f:	83 c4 20             	add    esp,0x20
c0007d52:	85 c0                	test   eax,eax
c0007d54:	0f 85 c8 06 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007d5a:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007d5e:	75 06                	jne    c0007d66 <f_mkfs+0x9f5>
c0007d60:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007d64:	74 09                	je     c0007d6f <f_mkfs+0x9fe>
c0007d66:	89 34 24             	mov    DWORD PTR [esp],esi
c0007d69:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007d6d:	eb a3                	jmp    c0007d12 <f_mkfs+0x9a1>
c0007d6f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007d73:	89 da                	mov    edx,ebx
c0007d75:	01 e8                	add    eax,ebp
c0007d77:	e8 5b 9f ff ff       	call   c0001cd7 <st_dword>
c0007d7c:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007d81:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007d89:	75 e4                	jne    c0007d6f <f_mkfs+0x9fe>
c0007d8b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d8e:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d92:	83 c6 02             	add    esi,0x2
c0007d95:	83 d7 00             	adc    edi,0x0
c0007d98:	83 ec 0c             	sub    esp,0xc
c0007d9b:	6a 01                	push   0x1
c0007d9d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007da1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007da5:	55                   	push   ebp
c0007da6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007daa:	e8 7d 9e ff ff       	call   c0001c2c <disk_write>
c0007daf:	83 c4 20             	add    esp,0x20
c0007db2:	85 c0                	test   eax,eax
c0007db4:	0f 85 68 06 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007dba:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007dbf:	74 0d                	je     c0007dce <f_mkfs+0xa5d>
c0007dc1:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007dc9:	e9 43 fd ff ff       	jmp    c0007b11 <f_mkfs+0x7a0>
c0007dce:	b1 07                	mov    cl,0x7
c0007dd0:	e9 e3 05 00 00       	jmp    c00083b8 <f_mkfs+0x1047>
c0007dd5:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007dda:	0f 85 4f 02 00 00    	jne    c000802f <f_mkfs+0xcbe>
c0007de0:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007de5:	0f 86 22 02 00 00    	jbe    c000800d <f_mkfs+0xc9c>
c0007deb:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007df0:	0f 85 81 06 00 00    	jne    c0008477 <f_mkfs+0x1106>
c0007df6:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007df9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007dfd:	83 f8 40             	cmp    eax,0x40
c0007e00:	0f 87 51 06 00 00    	ja     c0008457 <f_mkfs+0x10e6>
c0007e06:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007e0a:	85 ff                	test   edi,edi
c0007e0c:	75 1c                	jne    c0007e2a <f_mkfs+0xab9>
c0007e0e:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007e11:	ba 40 8c 02 c0       	mov    edx,0xc0028c40
c0007e16:	c1 e9 0c             	shr    ecx,0xc
c0007e19:	bf 01 00 00 00       	mov    edi,0x1
c0007e1e:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007e21:	66 85 c0             	test   ax,ax
c0007e24:	0f 85 95 01 00 00    	jne    c0007fbf <f_mkfs+0xc4e>
c0007e2a:	31 d2                	xor    edx,edx
c0007e2c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007e2f:	f7 f7                	div    edi
c0007e31:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007e36:	0f 86 95 01 00 00    	jbe    c0007fd1 <f_mkfs+0xc60>
c0007e3c:	83 c0 02             	add    eax,0x2
c0007e3f:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007e44:	01 c0                	add    eax,eax
c0007e46:	05 ff 01 00 00       	add    eax,0x1ff
c0007e4b:	be 01 00 00 00       	mov    esi,0x1
c0007e50:	c1 e8 09             	shr    eax,0x9
c0007e53:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007e57:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007e5b:	c1 e0 05             	shl    eax,0x5
c0007e5e:	c1 e8 09             	shr    eax,0x9
c0007e61:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007e65:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007e6a:	31 d2                	xor    edx,edx
c0007e6c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007e70:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007e74:	89 f0                	mov    eax,esi
c0007e76:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007e7a:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007e7e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007e82:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007e86:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007e8a:	31 d2                	xor    edx,edx
c0007e8c:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007e91:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007e95:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007e99:	31 db                	xor    ebx,ebx
c0007e9b:	01 c8                	add    eax,ecx
c0007e9d:	11 da                	adc    edx,ebx
c0007e9f:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007ea3:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007ea7:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007eab:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007eaf:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007eb3:	f7 da                	neg    edx
c0007eb5:	21 d1                	and    ecx,edx
c0007eb7:	29 d9                	sub    ecx,ebx
c0007eb9:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007ebe:	0f 85 20 01 00 00    	jne    c0007fe4 <f_mkfs+0xc73>
c0007ec4:	31 db                	xor    ebx,ebx
c0007ec6:	01 ce                	add    esi,ecx
c0007ec8:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007ecc:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007ed0:	31 d2                	xor    edx,edx
c0007ed2:	89 f8                	mov    eax,edi
c0007ed4:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007ed8:	c1 e0 04             	shl    eax,0x4
c0007edb:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007edf:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007ee3:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007ee7:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007eeb:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007eee:	19 d3                	sbb    ebx,edx
c0007ef0:	0f 82 40 01 00 00    	jb     c0008036 <f_mkfs+0xcc5>
c0007ef6:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007ef9:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007efd:	89 c8                	mov    eax,ecx
c0007eff:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007f04:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007f08:	29 f0                	sub    eax,esi
c0007f0a:	29 d0                	sub    eax,edx
c0007f0c:	31 d2                	xor    edx,edx
c0007f0e:	f7 f7                	div    edi
c0007f10:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007f15:	89 c3                	mov    ebx,eax
c0007f17:	0f 85 b8 fe ff ff    	jne    c0007dd5 <f_mkfs+0xa64>
c0007f1d:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007f22:	0f 87 1d 01 00 00    	ja     c0008045 <f_mkfs+0xcd4>
c0007f28:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007f2d:	0f 85 03 01 00 00    	jne    c0008036 <f_mkfs+0xcc5>
c0007f33:	83 ff 01             	cmp    edi,0x1
c0007f36:	0f 86 fa 00 00 00    	jbe    c0008036 <f_mkfs+0xcc5>
c0007f3c:	d1 ef                	shr    edi,1
c0007f3e:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007f42:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007f46:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f49:	85 db                	test   ebx,ebx
c0007f4b:	75 2d                	jne    c0007f7a <f_mkfs+0xc09>
c0007f4d:	89 cb                	mov    ebx,ecx
c0007f4f:	ba 50 8c 02 c0       	mov    edx,0xc0028c50
c0007f54:	c1 eb 11             	shr    ebx,0x11
c0007f57:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007f5f:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007f62:	66 85 c0             	test   ax,ax
c0007f65:	74 11                	je     c0007f78 <f_mkfs+0xc07>
c0007f67:	83 c2 02             	add    edx,0x2
c0007f6a:	39 d8                	cmp    eax,ebx
c0007f6c:	77 0a                	ja     c0007f78 <f_mkfs+0xc07>
c0007f6e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007f72:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007f76:	eb e7                	jmp    c0007f5f <f_mkfs+0xbee>
c0007f78:	31 db                	xor    ebx,ebx
c0007f7a:	31 d2                	xor    edx,edx
c0007f7c:	89 c8                	mov    eax,ecx
c0007f7e:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007f82:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007f89:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007f8e:	c1 ea 09             	shr    edx,0x9
c0007f91:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007f96:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007f9a:	0f 87 96 00 00 00    	ja     c0008036 <f_mkfs+0xcc5>
c0007fa0:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007fa4:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007fac:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007fb0:	be 20 00 00 00       	mov    esi,0x20
c0007fb5:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007fba:	e9 a6 fe ff ff       	jmp    c0007e65 <f_mkfs+0xaf4>
c0007fbf:	83 c2 02             	add    edx,0x2
c0007fc2:	39 c8                	cmp    eax,ecx
c0007fc4:	0f 87 60 fe ff ff    	ja     c0007e2a <f_mkfs+0xab9>
c0007fca:	01 ff                	add    edi,edi
c0007fcc:	e9 4d fe ff ff       	jmp    c0007e1e <f_mkfs+0xaad>
c0007fd1:	8d 04 40             	lea    eax,[eax+eax*2]
c0007fd4:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007fd9:	40                   	inc    eax
c0007fda:	d1 e8                	shr    eax,1
c0007fdc:	83 c0 03             	add    eax,0x3
c0007fdf:	e9 62 fe ff ff       	jmp    c0007e46 <f_mkfs+0xad5>
c0007fe4:	31 d2                	xor    edx,edx
c0007fe6:	89 c8                	mov    eax,ecx
c0007fe8:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007fec:	85 d2                	test   edx,edx
c0007fee:	74 0c                	je     c0007ffc <f_mkfs+0xc8b>
c0007ff0:	49                   	dec    ecx
c0007ff1:	46                   	inc    esi
c0007ff2:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007ff7:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007ffc:	89 c8                	mov    eax,ecx
c0007ffe:	31 d2                	xor    edx,edx
c0008000:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0008004:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0008008:	e9 c3 fe ff ff       	jmp    c0007ed0 <f_mkfs+0xb5f>
c000800d:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008012:	77 31                	ja     c0008045 <f_mkfs+0xcd4>
c0008014:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0008019:	75 1b                	jne    c0008036 <f_mkfs+0xcc5>
c000801b:	8d 04 3f             	lea    eax,[edi+edi*1]
c000801e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008022:	3d 80 00 00 00       	cmp    eax,0x80
c0008027:	0f 86 d9 fd ff ff    	jbe    c0007e06 <f_mkfs+0xa95>
c000802d:	eb 07                	jmp    c0008036 <f_mkfs+0xcc5>
c000802f:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008034:	76 0a                	jbe    c0008040 <f_mkfs+0xccf>
c0008036:	bb 0e 00 00 00       	mov    ebx,0xe
c000803b:	e9 ff 03 00 00       	jmp    c000843f <f_mkfs+0x10ce>
c0008040:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0008045:	31 d2                	xor    edx,edx
c0008047:	b9 00 02 00 00       	mov    ecx,0x200
c000804c:	89 e8                	mov    eax,ebp
c000804e:	e8 a2 9c ff ff       	call   c0001cf5 <mem_set>
c0008053:	b9 0b 00 00 00       	mov    ecx,0xb
c0008058:	ba 62 8d 02 c0       	mov    edx,0xc0028d62
c000805d:	89 e8                	mov    eax,ebp
c000805f:	e8 7c 9c ff ff       	call   c0001ce0 <mem_cpy>
c0008064:	8d 45 0b             	lea    eax,[ebp+0xb]
c0008067:	ba 00 02 00 00       	mov    edx,0x200
c000806c:	e8 62 9c ff ff       	call   c0001cd3 <st_word>
c0008071:	89 f8                	mov    eax,edi
c0008073:	0f b7 d6             	movzx  edx,si
c0008076:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c0008079:	8d 45 0e             	lea    eax,[ebp+0xe]
c000807c:	e8 52 9c ff ff       	call   c0001cd3 <st_word>
c0008081:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c0008085:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000808a:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c000808d:	75 08                	jne    c0008097 <f_mkfs+0xd26>
c000808f:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0008097:	8d 45 11             	lea    eax,[ebp+0x11]
c000809a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000809e:	e8 30 9c ff ff       	call   c0001cd3 <st_word>
c00080a3:	b8 ff ff 00 00       	mov    eax,0xffff
c00080a8:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c00080ac:	39 d0                	cmp    eax,edx
c00080ae:	b8 00 00 00 00       	mov    eax,0x0
c00080b3:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c00080b7:	72 0a                	jb     c00080c3 <f_mkfs+0xd52>
c00080b9:	8d 45 13             	lea    eax,[ebp+0x13]
c00080bc:	e8 12 9c ff ff       	call   c0001cd3 <st_word>
c00080c1:	eb 08                	jmp    c00080cb <f_mkfs+0xd5a>
c00080c3:	8d 45 20             	lea    eax,[ebp+0x20]
c00080c6:	e8 0c 9c ff ff       	call   c0001cd7 <st_dword>
c00080cb:	8d 45 18             	lea    eax,[ebp+0x18]
c00080ce:	ba 3f 00 00 00       	mov    edx,0x3f
c00080d3:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c00080d7:	e8 f7 9b ff ff       	call   c0001cd3 <st_word>
c00080dc:	8d 45 1a             	lea    eax,[ebp+0x1a]
c00080df:	ba ff 00 00 00       	mov    edx,0xff
c00080e4:	e8 ea 9b ff ff       	call   c0001cd3 <st_word>
c00080e9:	8d 45 1c             	lea    eax,[ebp+0x1c]
c00080ec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00080f0:	e8 e2 9b ff ff       	call   c0001cd7 <st_dword>
c00080f5:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00080fa:	75 57                	jne    c0008153 <f_mkfs+0xde2>
c00080fc:	8d 45 43             	lea    eax,[ebp+0x43]
c00080ff:	ba 00 00 21 50       	mov    edx,0x50210000
c0008104:	e8 ce 9b ff ff       	call   c0001cd7 <st_dword>
c0008109:	8d 45 24             	lea    eax,[ebp+0x24]
c000810c:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008110:	e8 c2 9b ff ff       	call   c0001cd7 <st_dword>
c0008115:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0008118:	ba 02 00 00 00       	mov    edx,0x2
c000811d:	e8 b5 9b ff ff       	call   c0001cd7 <st_dword>
c0008122:	8d 45 30             	lea    eax,[ebp+0x30]
c0008125:	ba 01 00 00 00       	mov    edx,0x1
c000812a:	e8 a4 9b ff ff       	call   c0001cd3 <st_word>
c000812f:	8d 45 32             	lea    eax,[ebp+0x32]
c0008132:	ba 06 00 00 00       	mov    edx,0x6
c0008137:	e8 97 9b ff ff       	call   c0001cd3 <st_word>
c000813c:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0008140:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0008144:	8d 45 47             	lea    eax,[ebp+0x47]
c0008147:	b9 13 00 00 00       	mov    ecx,0x13
c000814c:	ba 6e 8d 02 c0       	mov    edx,0xc0028d6e
c0008151:	eb 2f                	jmp    c0008182 <f_mkfs+0xe11>
c0008153:	8d 45 27             	lea    eax,[ebp+0x27]
c0008156:	ba 00 00 21 50       	mov    edx,0x50210000
c000815b:	e8 77 9b ff ff       	call   c0001cd7 <st_dword>
c0008160:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0008165:	8d 45 16             	lea    eax,[ebp+0x16]
c0008168:	e8 66 9b ff ff       	call   c0001cd3 <st_word>
c000816d:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0008171:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c0008175:	8d 45 2b             	lea    eax,[ebp+0x2b]
c0008178:	b9 13 00 00 00       	mov    ecx,0x13
c000817d:	ba 82 8d 02 c0       	mov    edx,0xc0028d82
c0008182:	e8 59 9b ff ff       	call   c0001ce0 <mem_cpy>
c0008187:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c000818d:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008192:	89 f0                	mov    eax,esi
c0008194:	e8 3a 9b ff ff       	call   c0001cd3 <st_word>
c0008199:	83 ec 0c             	sub    esp,0xc
c000819c:	6a 01                	push   0x1
c000819e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00081a2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00081a6:	55                   	push   ebp
c00081a7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081ab:	e8 7c 9a ff ff       	call   c0001c2c <disk_write>
c00081b0:	83 c4 20             	add    esp,0x20
c00081b3:	85 c0                	test   eax,eax
c00081b5:	0f 85 67 02 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c00081bb:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00081c0:	0f 85 b7 00 00 00    	jne    c000827d <f_mkfs+0xf0c>
c00081c6:	83 ec 0c             	sub    esp,0xc
c00081c9:	6a 01                	push   0x1
c00081cb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00081cf:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00081d3:	83 c0 06             	add    eax,0x6
c00081d6:	83 d2 00             	adc    edx,0x0
c00081d9:	52                   	push   edx
c00081da:	50                   	push   eax
c00081db:	55                   	push   ebp
c00081dc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081e0:	e8 47 9a ff ff       	call   c0001c2c <disk_write>
c00081e5:	83 c4 20             	add    esp,0x20
c00081e8:	b9 00 02 00 00       	mov    ecx,0x200
c00081ed:	31 d2                	xor    edx,edx
c00081ef:	89 e8                	mov    eax,ebp
c00081f1:	e8 ff 9a ff ff       	call   c0001cf5 <mem_set>
c00081f6:	ba 52 52 61 41       	mov    edx,0x41615252
c00081fb:	89 e8                	mov    eax,ebp
c00081fd:	e8 d5 9a ff ff       	call   c0001cd7 <st_dword>
c0008202:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0008208:	ba 72 72 41 61       	mov    edx,0x61417272
c000820d:	e8 c5 9a ff ff       	call   c0001cd7 <st_dword>
c0008212:	8d 53 ff             	lea    edx,[ebx-0x1]
c0008215:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c000821b:	e8 b7 9a ff ff       	call   c0001cd7 <st_dword>
c0008220:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0008226:	ba 02 00 00 00       	mov    edx,0x2
c000822b:	e8 a7 9a ff ff       	call   c0001cd7 <st_dword>
c0008230:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008235:	89 f0                	mov    eax,esi
c0008237:	e8 97 9a ff ff       	call   c0001cd3 <st_word>
c000823c:	83 ec 0c             	sub    esp,0xc
c000823f:	6a 01                	push   0x1
c0008241:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008245:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008249:	83 c0 07             	add    eax,0x7
c000824c:	83 d2 00             	adc    edx,0x0
c000824f:	52                   	push   edx
c0008250:	50                   	push   eax
c0008251:	55                   	push   ebp
c0008252:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008256:	e8 d1 99 ff ff       	call   c0001c2c <disk_write>
c000825b:	83 c4 14             	add    esp,0x14
c000825e:	6a 01                	push   0x1
c0008260:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008264:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008268:	83 c0 01             	add    eax,0x1
c000826b:	83 d2 00             	adc    edx,0x0
c000826e:	52                   	push   edx
c000826f:	50                   	push   eax
c0008270:	55                   	push   ebp
c0008271:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008275:	e8 b2 99 ff ff       	call   c0001c2c <disk_write>
c000827a:	83 c4 20             	add    esp,0x20
c000827d:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c0008284:	31 d2                	xor    edx,edx
c0008286:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c000828c:	31 db                	xor    ebx,ebx
c000828e:	89 e8                	mov    eax,ebp
c0008290:	e8 60 9a ff ff       	call   c0001cf5 <mem_set>
c0008295:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c000829a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00082a1:	0f 94 c3             	sete   bl
c00082a4:	4b                   	dec    ebx
c00082a5:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00082ab:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00082b1:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00082b6:	75 21                	jne    c00082d9 <f_mkfs+0xf68>
c00082b8:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00082bd:	89 e8                	mov    eax,ebp
c00082bf:	e8 13 9a ff ff       	call   c0001cd7 <st_dword>
c00082c4:	8d 45 04             	lea    eax,[ebp+0x4]
c00082c7:	83 ca ff             	or     edx,0xffffffff
c00082ca:	e8 08 9a ff ff       	call   c0001cd7 <st_dword>
c00082cf:	8d 45 08             	lea    eax,[ebp+0x8]
c00082d2:	ba ff ff ff 0f       	mov    edx,0xfffffff
c00082d7:	eb 04                	jmp    c00082dd <f_mkfs+0xf6c>
c00082d9:	89 da                	mov    edx,ebx
c00082db:	89 e8                	mov    eax,ebp
c00082dd:	e8 f5 99 ff ff       	call   c0001cd7 <st_dword>
c00082e2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00082e6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00082ea:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00082ee:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00082f2:	39 ce                	cmp    esi,ecx
c00082f4:	76 02                	jbe    c00082f8 <f_mkfs+0xf87>
c00082f6:	89 ce                	mov    esi,ecx
c00082f8:	83 ec 0c             	sub    esp,0xc
c00082fb:	56                   	push   esi
c00082fc:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008300:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008304:	55                   	push   ebp
c0008305:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008309:	e8 1e 99 ff ff       	call   c0001c2c <disk_write>
c000830e:	83 c4 20             	add    esp,0x20
c0008311:	85 c0                	test   eax,eax
c0008313:	0f 85 09 01 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0008319:	31 d2                	xor    edx,edx
c000831b:	b9 00 02 00 00       	mov    ecx,0x200
c0008320:	89 e8                	mov    eax,ebp
c0008322:	e8 ce 99 ff ff       	call   c0001cf5 <mem_set>
c0008327:	31 d2                	xor    edx,edx
c0008329:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c000832d:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008331:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0008335:	75 b3                	jne    c00082ea <f_mkfs+0xf79>
c0008337:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000833a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008341:	40                   	inc    eax
c0008342:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c0008346:	0f 87 65 ff ff ff    	ja     c00082b1 <f_mkfs+0xf40>
c000834c:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008351:	74 04                	je     c0008357 <f_mkfs+0xfe6>
c0008353:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0008357:	89 fb                	mov    ebx,edi
c0008359:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c000835d:	76 04                	jbe    c0008363 <f_mkfs+0xff2>
c000835f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008363:	83 ec 0c             	sub    esp,0xc
c0008366:	53                   	push   ebx
c0008367:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000836b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000836f:	55                   	push   ebp
c0008370:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008374:	e8 b3 98 ff ff       	call   c0001c2c <disk_write>
c0008379:	83 c4 20             	add    esp,0x20
c000837c:	85 c0                	test   eax,eax
c000837e:	0f 85 9e 00 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0008384:	31 d2                	xor    edx,edx
c0008386:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c000838a:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c000838e:	29 df                	sub    edi,ebx
c0008390:	75 c5                	jne    c0008357 <f_mkfs+0xfe6>
c0008392:	b1 0c                	mov    cl,0xc
c0008394:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008399:	74 1d                	je     c00083b8 <f_mkfs+0x1047>
c000839b:	b8 ff ff 00 00       	mov    eax,0xffff
c00083a0:	b1 06                	mov    cl,0x6
c00083a2:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c00083a6:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c00083aa:	72 0c                	jb     c00083b8 <f_mkfs+0x1047>
c00083ac:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c00083b1:	0f 94 c1             	sete   cl
c00083b4:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00083b8:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c00083bd:	75 4c                	jne    c000840b <f_mkfs+0x109a>
c00083bf:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00083c3:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00083c7:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00083ce:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c00083d5:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c00083e0:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c00083eb:	0f b6 c9             	movzx  ecx,cl
c00083ee:	83 ec 0c             	sub    esp,0xc
c00083f1:	55                   	push   ebp
c00083f2:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c00083f9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00083fd:	e8 2f c2 ff ff       	call   c0004631 <create_partition>
c0008402:	83 c4 10             	add    esp,0x10
c0008405:	89 c3                	mov    ebx,eax
c0008407:	85 c0                	test   eax,eax
c0008409:	75 34                	jne    c000843f <f_mkfs+0x10ce>
c000840b:	31 db                	xor    ebx,ebx
c000840d:	50                   	push   eax
c000840e:	6a 00                	push   0x0
c0008410:	6a 00                	push   0x0
c0008412:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008416:	e8 27 98 ff ff       	call   c0001c42 <disk_ioctl>
c000841b:	83 c4 10             	add    esp,0x10
c000841e:	85 c0                	test   eax,eax
c0008420:	74 1d                	je     c000843f <f_mkfs+0x10ce>
c0008422:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000842a:	75 0c                	jne    c0008438 <f_mkfs+0x10c7>
c000842c:	83 ec 0c             	sub    esp,0xc
c000842f:	55                   	push   ebp
c0008430:	e8 75 00 00 00       	call   c00084aa <ff_memfree>
c0008435:	83 c4 10             	add    esp,0x10
c0008438:	bb 01 00 00 00       	mov    ebx,0x1
c000843d:	eb 48                	jmp    c0008487 <f_mkfs+0x1116>
c000843f:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008447:	75 3e                	jne    c0008487 <f_mkfs+0x1116>
c0008449:	83 ec 0c             	sub    esp,0xc
c000844c:	55                   	push   ebp
c000844d:	e8 58 00 00 00       	call   c00084aa <ff_memfree>
c0008452:	83 c4 10             	add    esp,0x10
c0008455:	eb 30                	jmp    c0008487 <f_mkfs+0x1116>
c0008457:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000845c:	0f 85 eb fa ff ff    	jne    c0007f4d <f_mkfs+0xbdc>
c0008462:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008466:	81 ff 80 00 00 00    	cmp    edi,0x80
c000846c:	0f 86 b8 f9 ff ff    	jbe    c0007e2a <f_mkfs+0xab9>
c0008472:	e9 bf fb ff ff       	jmp    c0008036 <f_mkfs+0xcc5>
c0008477:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000847c:	0f 85 c0 fa ff ff    	jne    c0007f42 <f_mkfs+0xbd1>
c0008482:	e9 af fb ff ff       	jmp    c0008036 <f_mkfs+0xcc5>
c0008487:	81 c4 9c 00 00 00    	add    esp,0x9c
c000848d:	89 d8                	mov    eax,ebx
c000848f:	5b                   	pop    ebx
c0008490:	5e                   	pop    esi
c0008491:	5f                   	pop    edi
c0008492:	5d                   	pop    ebp
c0008493:	c3                   	ret    

c0008494 <ff_memalloc>:
c0008494:	83 ec 0c             	sub    esp,0xc
c0008497:	83 ec 0c             	sub    esp,0xc
c000849a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000849e:	e8 a3 73 00 00       	call   c000f846 <malloc>
c00084a3:	83 c4 10             	add    esp,0x10
c00084a6:	83 c4 0c             	add    esp,0xc
c00084a9:	c3                   	ret    

c00084aa <ff_memfree>:
c00084aa:	83 ec 0c             	sub    esp,0xc
c00084ad:	83 ec 0c             	sub    esp,0xc
c00084b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084b4:	e8 9d 73 00 00       	call   c000f856 <free>
c00084b9:	83 c4 10             	add    esp,0x10
c00084bc:	90                   	nop
c00084bd:	83 c4 0c             	add    esp,0xc
c00084c0:	c3                   	ret    

c00084c1 <ff_uni2oem>:
c00084c1:	83 ec 14             	sub    esp,0x14
c00084c4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00084c8:	66 89 04 24          	mov    WORD PTR [esp],ax
c00084cc:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00084d3:	c7 44 24 0c a0 90 02 c0 	mov    DWORD PTR [esp+0xc],0xc00290a0
c00084db:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c00084e0:	77 0b                	ja     c00084ed <ff_uni2oem+0x2c>
c00084e2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00084e6:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00084eb:	eb 5b                	jmp    c0008548 <ff_uni2oem+0x87>
c00084ed:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c00084f5:	77 51                	ja     c0008548 <ff_uni2oem+0x87>
c00084f7:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00084fd:	75 49                	jne    c0008548 <ff_uni2oem+0x87>
c00084ff:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008506:	eb 0b                	jmp    c0008513 <ff_uni2oem+0x52>
c0008508:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000850d:	40                   	inc    eax
c000850e:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008513:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0008519:	77 1b                	ja     c0008536 <ff_uni2oem+0x75>
c000851b:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0008520:	01 c0                	add    eax,eax
c0008522:	89 c2                	mov    edx,eax
c0008524:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008528:	01 d0                	add    eax,edx
c000852a:	66 8b 00             	mov    ax,WORD PTR [eax]
c000852d:	0f b7 c0             	movzx  eax,ax
c0008530:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0008534:	75 d2                	jne    c0008508 <ff_uni2oem+0x47>
c0008536:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000853b:	83 e8 80             	sub    eax,0xffffff80
c000853e:	25 ff 00 00 00       	and    eax,0xff
c0008543:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008548:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000854d:	83 c4 14             	add    esp,0x14
c0008550:	c3                   	ret    

c0008551 <ff_oem2uni>:
c0008551:	83 ec 18             	sub    esp,0x18
c0008554:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008558:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000855c:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0008561:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008565:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c000856c:	c7 44 24 10 a0 90 02 c0 	mov    DWORD PTR [esp+0x10],0xc00290a0
c0008574:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c000857a:	77 0b                	ja     c0008587 <ff_oem2uni+0x36>
c000857c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008580:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0008585:	eb 2d                	jmp    c00085b4 <ff_oem2uni+0x63>
c0008587:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c000858d:	75 25                	jne    c00085b4 <ff_oem2uni+0x63>
c000858f:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c0008596:	77 1c                	ja     c00085b4 <ff_oem2uni+0x63>
c0008598:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c000859d:	05 80 ff ff 7f       	add    eax,0x7fffff80
c00085a2:	01 c0                	add    eax,eax
c00085a4:	89 c2                	mov    edx,eax
c00085a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00085aa:	01 d0                	add    eax,edx
c00085ac:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085af:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00085b4:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00085b9:	83 c4 18             	add    esp,0x18
c00085bc:	c3                   	ret    

c00085bd <ff_wtoupper>:
c00085bd:	83 ec 10             	sub    esp,0x10
c00085c0:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00085c8:	0f 87 3e 01 00 00    	ja     c000870c <ff_wtoupper+0x14f>
c00085ce:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00085d2:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00085d7:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c00085de:	77 07                	ja     c00085e7 <ff_wtoupper+0x2a>
c00085e0:	b8 a0 8e 02 c0       	mov    eax,0xc0028ea0
c00085e5:	eb 05                	jmp    c00085ec <ff_wtoupper+0x2f>
c00085e7:	b8 e0 8d 02 c0       	mov    eax,0xc0028de0
c00085ec:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00085f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00085f4:	8d 50 02             	lea    edx,[eax+0x2]
c00085f7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00085fb:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085fe:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0008603:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0008609:	0f 84 f4 00 00 00    	je     c0008703 <ff_wtoupper+0x146>
c000860f:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008614:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0008619:	0f 82 e4 00 00 00    	jb     c0008703 <ff_wtoupper+0x146>
c000861f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008623:	8d 50 02             	lea    edx,[eax+0x2]
c0008626:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000862a:	66 8b 00             	mov    ax,WORD PTR [eax]
c000862d:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0008632:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0008637:	66 c1 e8 08          	shr    ax,0x8
c000863b:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0008640:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0008647:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c000864c:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0008651:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0008656:	01 ca                	add    edx,ecx
c0008658:	39 d0                	cmp    eax,edx
c000865a:	0f 8d 86 00 00 00    	jge    c00086e6 <ff_wtoupper+0x129>
c0008660:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008665:	83 f8 08             	cmp    eax,0x8
c0008668:	0f 87 94 00 00 00    	ja     c0008702 <ff_wtoupper+0x145>
c000866e:	8b 04 85 a0 8d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7260]
c0008675:	ff e0                	jmp    eax
c0008677:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c000867c:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0008681:	29 c2                	sub    edx,eax
c0008683:	89 d0                	mov    eax,edx
c0008685:	01 c0                	add    eax,eax
c0008687:	89 c2                	mov    edx,eax
c0008689:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000868d:	01 d0                	add    eax,edx
c000868f:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008692:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008697:	eb 4b                	jmp    c00086e4 <ff_wtoupper+0x127>
c0008699:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000869e:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00086a2:	83 e0 01             	and    eax,0x1
c00086a5:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c00086aa:	eb 38                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086ac:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c00086b2:	eb 30                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086b4:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c00086ba:	eb 28                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086bc:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c00086c2:	eb 20                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086c4:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c00086ca:	eb 18                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086cc:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c00086d2:	eb 10                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086d4:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c00086da:	eb 08                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086dc:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c00086e3:	90                   	nop
c00086e4:	eb 1c                	jmp    c0008702 <ff_wtoupper+0x145>
c00086e6:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c00086ec:	0f 85 fe fe ff ff    	jne    c00085f0 <ff_wtoupper+0x33>
c00086f2:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00086f7:	01 c0                	add    eax,eax
c00086f9:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00086fd:	e9 ee fe ff ff       	jmp    c00085f0 <ff_wtoupper+0x33>
c0008702:	90                   	nop
c0008703:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008708:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000870c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008710:	83 c4 10             	add    esp,0x10
c0008713:	c3                   	ret    

c0008714 <psrc_set_converter>:
c0008714:	56                   	push   esi
c0008715:	89 d6                	mov    esi,edx
c0008717:	53                   	push   ebx
c0008718:	89 c3                	mov    ebx,eax
c000871a:	83 ec 0c             	sub    esp,0xc
c000871d:	52                   	push   edx
c000871e:	50                   	push   eax
c000871f:	e8 6f 55 00 00       	call   c000dc93 <sinc_set_converter>
c0008724:	83 c4 10             	add    esp,0x10
c0008727:	85 c0                	test   eax,eax
c0008729:	74 25                	je     c0008750 <psrc_set_converter+0x3c>
c000872b:	50                   	push   eax
c000872c:	50                   	push   eax
c000872d:	56                   	push   esi
c000872e:	53                   	push   ebx
c000872f:	e8 17 5d 00 00       	call   c000e44b <zoh_set_converter>
c0008734:	83 c4 10             	add    esp,0x10
c0008737:	85 c0                	test   eax,eax
c0008739:	74 15                	je     c0008750 <psrc_set_converter+0x3c>
c000873b:	51                   	push   ecx
c000873c:	51                   	push   ecx
c000873d:	56                   	push   esi
c000873e:	53                   	push   ebx
c000873f:	e8 0f 11 00 00       	call   c0009853 <linear_set_converter>
c0008744:	83 c4 10             	add    esp,0x10
c0008747:	ba 0a 00 00 00       	mov    edx,0xa
c000874c:	85 c0                	test   eax,eax
c000874e:	75 02                	jne    c0008752 <psrc_set_converter+0x3e>
c0008750:	31 d2                	xor    edx,edx
c0008752:	89 d0                	mov    eax,edx
c0008754:	5a                   	pop    edx
c0008755:	5b                   	pop    ebx
c0008756:	5e                   	pop    esi
c0008757:	c3                   	ret    

c0008758 <src_delete>:
c0008758:	53                   	push   ebx
c0008759:	83 ec 08             	sub    esp,0x8
c000875c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008760:	85 db                	test   ebx,ebx
c0008762:	74 29                	je     c000878d <src_delete+0x35>
c0008764:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0008767:	85 c0                	test   eax,eax
c0008769:	74 0c                	je     c0008777 <src_delete+0x1f>
c000876b:	83 ec 0c             	sub    esp,0xc
c000876e:	50                   	push   eax
c000876f:	e8 e2 70 00 00       	call   c000f856 <free>
c0008774:	83 c4 10             	add    esp,0x10
c0008777:	50                   	push   eax
c0008778:	6a 3c                	push   0x3c
c000877a:	6a 00                	push   0x0
c000877c:	53                   	push   ebx
c000877d:	e8 f6 7f ff ff       	call   c0000778 <memset>
c0008782:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008785:	e8 cc 70 00 00       	call   c000f856 <free>
c000878a:	83 c4 10             	add    esp,0x10
c000878d:	31 c0                	xor    eax,eax
c000878f:	83 c4 08             	add    esp,0x8
c0008792:	5b                   	pop    ebx
c0008793:	c3                   	ret    

c0008794 <src_process>:
c0008794:	55                   	push   ebp
c0008795:	57                   	push   edi
c0008796:	56                   	push   esi
c0008797:	53                   	push   ebx
c0008798:	83 ec 1c             	sub    esp,0x1c
c000879b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000879f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00087a3:	85 ed                	test   ebp,ebp
c00087a5:	0f 84 6f 01 00 00    	je     c000891a <src_process+0x186>
c00087ab:	83 7d 20 00          	cmp    DWORD PTR [ebp+0x20],0x0
c00087af:	0f 84 6c 01 00 00    	je     c0008921 <src_process+0x18d>
c00087b5:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c00087b9:	0f 84 62 01 00 00    	je     c0008921 <src_process+0x18d>
c00087bf:	81 7d 18 2b 02 00 00 	cmp    DWORD PTR [ebp+0x18],0x22b
c00087c6:	0f 85 5c 01 00 00    	jne    c0008928 <src_process+0x194>
c00087cc:	85 db                	test   ebx,ebx
c00087ce:	0f 84 5b 01 00 00    	je     c000892f <src_process+0x19b>
c00087d4:	8b 33                	mov    esi,DWORD PTR [ebx]
c00087d6:	85 f6                	test   esi,esi
c00087d8:	0f 84 58 01 00 00    	je     c0008936 <src_process+0x1a2>
c00087de:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00087e1:	85 ff                	test   edi,edi
c00087e3:	0f 84 4d 01 00 00    	je     c0008936 <src_process+0x1a2>
c00087e9:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00087ec:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00087ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00087f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00087f7:	68 00 00 70 3f       	push   0x3f700000
c00087fc:	6a 00                	push   0x0
c00087fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008802:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008806:	e8 64 f5 01 00       	call   c0027d6f <__ltdf2>
c000880b:	83 c4 10             	add    esp,0x10
c000880e:	85 c0                	test   eax,eax
c0008810:	0f 88 27 01 00 00    	js     c000893d <src_process+0x1a9>
c0008816:	68 00 00 70 40       	push   0x40700000
c000881b:	6a 00                	push   0x0
c000881d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008821:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008825:	e8 27 f5 01 00       	call   c0027d51 <__gtdf2>
c000882a:	83 c4 10             	add    esp,0x10
c000882d:	85 c0                	test   eax,eax
c000882f:	0f 8f 08 01 00 00    	jg     c000893d <src_process+0x1a9>
c0008835:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008839:	79 07                	jns    c0008842 <src_process+0xae>
c000883b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008842:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0008845:	85 c0                	test   eax,eax
c0008847:	79 50                	jns    c0008899 <src_process+0x105>
c0008849:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008850:	39 fe                	cmp    esi,edi
c0008852:	72 37                	jb     c000888b <src_process+0xf7>
c0008854:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000885b:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008862:	68 00 00 70 3f       	push   0x3f700000
c0008867:	6a 00                	push   0x0
c0008869:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000886c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000886f:	e8 fb f4 01 00       	call   c0027d6f <__ltdf2>
c0008874:	83 c4 10             	add    esp,0x10
c0008877:	85 c0                	test   eax,eax
c0008879:	79 37                	jns    c00088b2 <src_process+0x11e>
c000887b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000887f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008883:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0008886:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c0008889:	eb 27                	jmp    c00088b2 <src_process+0x11e>
c000888b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000888e:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008892:	8d 04 86             	lea    eax,[esi+eax*4]
c0008895:	39 c7                	cmp    edi,eax
c0008897:	eb 0d                	jmp    c00088a6 <src_process+0x112>
c0008899:	39 fe                	cmp    esi,edi
c000889b:	72 ee                	jb     c000888b <src_process+0xf7>
c000889d:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c00088a1:	8d 04 87             	lea    eax,[edi+eax*4]
c00088a4:	39 c6                	cmp    esi,eax
c00088a6:	73 ac                	jae    c0008854 <src_process+0xc0>
c00088a8:	b8 10 00 00 00       	mov    eax,0x10
c00088ad:	e9 90 00 00 00       	jmp    c0008942 <src_process+0x1ae>
c00088b2:	83 ec 10             	sub    esp,0x10
c00088b5:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00088b8:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00088bb:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00088be:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c00088c1:	e8 ae eb 01 00       	call   c0027474 <__subdf3>
c00088c6:	83 c4 18             	add    esp,0x18
c00088c9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00088cd:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00088d1:	52                   	push   edx
c00088d2:	50                   	push   eax
c00088d3:	e8 28 f6 01 00       	call   c0027f00 <fabs>
c00088d8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00088dc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00088e0:	83 c4 10             	add    esp,0x10
c00088e3:	68 af 03 d2 3c       	push   0x3cd203af
c00088e8:	68 16 56 e7 9e       	push   0x9ee75616
c00088ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088f5:	e8 75 f4 01 00       	call   c0027d6f <__ltdf2>
c00088fa:	83 c4 10             	add    esp,0x10
c00088fd:	85 c0                	test   eax,eax
c00088ff:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0008903:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c0008907:	79 05                	jns    c000890e <src_process+0x17a>
c0008909:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c000890c:	eb 03                	jmp    c0008911 <src_process+0x17d>
c000890e:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0008911:	83 c4 1c             	add    esp,0x1c
c0008914:	5b                   	pop    ebx
c0008915:	5e                   	pop    esi
c0008916:	5f                   	pop    edi
c0008917:	5d                   	pop    ebp
c0008918:	ff e0                	jmp    eax
c000891a:	b8 02 00 00 00       	mov    eax,0x2
c000891f:	eb 21                	jmp    c0008942 <src_process+0x1ae>
c0008921:	b8 07 00 00 00       	mov    eax,0x7
c0008926:	eb 1a                	jmp    c0008942 <src_process+0x1ae>
c0008928:	b8 12 00 00 00       	mov    eax,0x12
c000892d:	eb 13                	jmp    c0008942 <src_process+0x1ae>
c000892f:	b8 03 00 00 00       	mov    eax,0x3
c0008934:	eb 0c                	jmp    c0008942 <src_process+0x1ae>
c0008936:	b8 04 00 00 00       	mov    eax,0x4
c000893b:	eb 05                	jmp    c0008942 <src_process+0x1ae>
c000893d:	b8 06 00 00 00       	mov    eax,0x6
c0008942:	83 c4 1c             	add    esp,0x1c
c0008945:	5b                   	pop    ebx
c0008946:	5e                   	pop    esi
c0008947:	5f                   	pop    edi
c0008948:	5d                   	pop    ebp
c0008949:	c3                   	ret    

c000894a <src_callback_read>:
c000894a:	55                   	push   ebp
c000894b:	57                   	push   edi
c000894c:	56                   	push   esi
c000894d:	53                   	push   ebx
c000894e:	83 ec 3c             	sub    esp,0x3c
c0008951:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0008955:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0008959:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000895d:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
c0008961:	85 ed                	test   ebp,ebp
c0008963:	0f 8e 52 01 00 00    	jle    c0008abb <src_callback_read+0x171>
c0008969:	85 db                	test   ebx,ebx
c000896b:	0f 84 4a 01 00 00    	je     c0008abb <src_callback_read+0x171>
c0008971:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c0008978:	74 0c                	je     c0008986 <src_callback_read+0x3c>
c000897a:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008981:	e9 35 01 00 00       	jmp    c0008abb <src_callback_read+0x171>
c0008986:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c000898a:	75 0c                	jne    c0008998 <src_callback_read+0x4e>
c000898c:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c0008993:	e9 23 01 00 00       	jmp    c0008abb <src_callback_read+0x171>
c0008998:	51                   	push   ecx
c0008999:	6a 24                	push   0x24
c000899b:	6a 00                	push   0x0
c000899d:	8d 44 24 18          	lea    eax,[esp+0x18]
c00089a1:	50                   	push   eax
c00089a2:	e8 d1 7d ff ff       	call   c0000778 <memset>
c00089a7:	83 c4 10             	add    esp,0x10
c00089aa:	68 00 00 70 3f       	push   0x3f700000
c00089af:	6a 00                	push   0x0
c00089b1:	57                   	push   edi
c00089b2:	56                   	push   esi
c00089b3:	e8 b7 f3 01 00       	call   c0027d6f <__ltdf2>
c00089b8:	83 c4 10             	add    esp,0x10
c00089bb:	85 c0                	test   eax,eax
c00089bd:	78 3e                	js     c00089fd <src_callback_read+0xb3>
c00089bf:	68 00 00 70 40       	push   0x40700000
c00089c4:	6a 00                	push   0x0
c00089c6:	57                   	push   edi
c00089c7:	56                   	push   esi
c00089c8:	e8 84 f3 01 00       	call   c0027d51 <__gtdf2>
c00089cd:	83 c4 10             	add    esp,0x10
c00089d0:	85 c0                	test   eax,eax
c00089d2:	7f 29                	jg     c00089fd <src_callback_read+0xb3>
c00089d4:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00089d8:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c00089dc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00089e0:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c00089e4:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00089e7:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c00089eb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00089ef:	31 f6                	xor    esi,esi
c00089f1:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c00089f4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00089f8:	e9 97 00 00 00       	jmp    c0008a94 <src_callback_read+0x14a>
c00089fd:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c0008a04:	e9 b2 00 00 00       	jmp    c0008abb <src_callback_read+0x171>
c0008a09:	8d 44 24 04          	lea    eax,[esp+0x4]
c0008a0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008a11:	52                   	push   edx
c0008a12:	52                   	push   edx
c0008a13:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008a17:	50                   	push   eax
c0008a18:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008a1b:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c0008a1e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008a22:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0008a26:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008a2a:	83 c4 10             	add    esp,0x10
c0008a2d:	85 c0                	test   eax,eax
c0008a2f:	75 08                	jne    c0008a39 <src_callback_read+0xef>
c0008a31:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0008a39:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c0008a40:	50                   	push   eax
c0008a41:	50                   	push   eax
c0008a42:	8d 44 24 14          	lea    eax,[esp+0x14]
c0008a46:	50                   	push   eax
c0008a47:	53                   	push   ebx
c0008a48:	e8 47 fd ff ff       	call   c0008794 <src_process>
c0008a4d:	83 c4 10             	add    esp,0x10
c0008a50:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008a57:	85 c0                	test   eax,eax
c0008a59:	75 49                	jne    c0008aa4 <src_callback_read+0x15a>
c0008a5b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008a5f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008a62:	89 f9                	mov    ecx,edi
c0008a64:	29 7c 24 14          	sub    DWORD PTR [esp+0x14],edi
c0008a68:	0f af ca             	imul   ecx,edx
c0008a6b:	c1 e1 02             	shl    ecx,0x2
c0008a6e:	01 4c 24 0c          	add    DWORD PTR [esp+0xc],ecx
c0008a72:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008a76:	0f af d1             	imul   edx,ecx
c0008a79:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0008a7d:	c1 e2 02             	shl    edx,0x2
c0008a80:	01 54 24 10          	add    DWORD PTR [esp+0x10],edx
c0008a84:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008a87:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0008a8c:	74 12                	je     c0008aa0 <src_callback_read+0x156>
c0008a8e:	39 d5                	cmp    ebp,edx
c0008a90:	7e 14                	jle    c0008aa6 <src_callback_read+0x15c>
c0008a92:	89 d6                	mov    esi,edx
c0008a94:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0008a99:	75 9e                	jne    c0008a39 <src_callback_read+0xef>
c0008a9b:	e9 69 ff ff ff       	jmp    c0008a09 <src_callback_read+0xbf>
c0008aa0:	85 c9                	test   ecx,ecx
c0008aa2:	75 ea                	jne    c0008a8e <src_callback_read+0x144>
c0008aa4:	89 f2                	mov    edx,esi
c0008aa6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008aaa:	85 c0                	test   eax,eax
c0008aac:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0008aaf:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008ab3:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0008ab6:	74 05                	je     c0008abd <src_callback_read+0x173>
c0008ab8:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008abb:	31 d2                	xor    edx,edx
c0008abd:	83 c4 3c             	add    esp,0x3c
c0008ac0:	89 d0                	mov    eax,edx
c0008ac2:	5b                   	pop    ebx
c0008ac3:	5e                   	pop    esi
c0008ac4:	5f                   	pop    edi
c0008ac5:	5d                   	pop    ebp
c0008ac6:	c3                   	ret    

c0008ac7 <src_set_ratio>:
c0008ac7:	57                   	push   edi
c0008ac8:	ba 02 00 00 00       	mov    edx,0x2
c0008acd:	56                   	push   esi
c0008ace:	53                   	push   ebx
c0008acf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008ad3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008ad7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0008adb:	85 db                	test   ebx,ebx
c0008add:	74 4c                	je     c0008b2b <src_set_ratio+0x64>
c0008adf:	ba 07 00 00 00       	mov    edx,0x7
c0008ae4:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c0008ae8:	74 41                	je     c0008b2b <src_set_ratio+0x64>
c0008aea:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0008aee:	74 3b                	je     c0008b2b <src_set_ratio+0x64>
c0008af0:	68 00 00 70 3f       	push   0x3f700000
c0008af5:	6a 00                	push   0x0
c0008af7:	57                   	push   edi
c0008af8:	56                   	push   esi
c0008af9:	e8 71 f2 01 00       	call   c0027d6f <__ltdf2>
c0008afe:	83 c4 10             	add    esp,0x10
c0008b01:	ba 06 00 00 00       	mov    edx,0x6
c0008b06:	85 c0                	test   eax,eax
c0008b08:	78 21                	js     c0008b2b <src_set_ratio+0x64>
c0008b0a:	68 00 00 70 40       	push   0x40700000
c0008b0f:	6a 00                	push   0x0
c0008b11:	57                   	push   edi
c0008b12:	56                   	push   esi
c0008b13:	e8 39 f2 01 00       	call   c0027d51 <__gtdf2>
c0008b18:	83 c4 10             	add    esp,0x10
c0008b1b:	ba 06 00 00 00       	mov    edx,0x6
c0008b20:	85 c0                	test   eax,eax
c0008b22:	7f 07                	jg     c0008b2b <src_set_ratio+0x64>
c0008b24:	89 33                	mov    DWORD PTR [ebx],esi
c0008b26:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0008b29:	31 d2                	xor    edx,edx
c0008b2b:	5b                   	pop    ebx
c0008b2c:	89 d0                	mov    eax,edx
c0008b2e:	5e                   	pop    esi
c0008b2f:	5f                   	pop    edi
c0008b30:	c3                   	ret    

c0008b31 <src_get_channels>:
c0008b31:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008b35:	b8 02 00 00 00       	mov    eax,0x2
c0008b3a:	85 d2                	test   edx,edx
c0008b3c:	74 14                	je     c0008b52 <src_get_channels+0x21>
c0008b3e:	b8 07 00 00 00       	mov    eax,0x7
c0008b43:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c0008b47:	74 09                	je     c0008b52 <src_get_channels+0x21>
c0008b49:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c0008b4d:	74 03                	je     c0008b52 <src_get_channels+0x21>
c0008b4f:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008b52:	c3                   	ret    

c0008b53 <src_reset>:
c0008b53:	53                   	push   ebx
c0008b54:	b8 02 00 00 00       	mov    eax,0x2
c0008b59:	83 ec 08             	sub    esp,0x8
c0008b5c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008b60:	85 db                	test   ebx,ebx
c0008b62:	74 36                	je     c0008b9a <src_reset+0x47>
c0008b64:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0008b67:	85 c0                	test   eax,eax
c0008b69:	74 09                	je     c0008b74 <src_reset+0x21>
c0008b6b:	83 ec 0c             	sub    esp,0xc
c0008b6e:	53                   	push   ebx
c0008b6f:	ff d0                	call   eax
c0008b71:	83 c4 10             	add    esp,0x10
c0008b74:	31 c0                	xor    eax,eax
c0008b76:	31 d2                	xor    edx,edx
c0008b78:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0008b7b:	89 03                	mov    DWORD PTR [ebx],eax
c0008b7d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008b80:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0008b83:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0008b8a:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0008b91:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008b98:	31 c0                	xor    eax,eax
c0008b9a:	83 c4 08             	add    esp,0x8
c0008b9d:	5b                   	pop    ebx
c0008b9e:	c3                   	ret    

c0008b9f <src_new>:
c0008b9f:	57                   	push   edi
c0008ba0:	56                   	push   esi
c0008ba1:	53                   	push   ebx
c0008ba2:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008ba6:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0008baa:	85 f6                	test   esi,esi
c0008bac:	74 73                	je     c0008c21 <src_new+0x82>
c0008bae:	85 ff                	test   edi,edi
c0008bb0:	7f 08                	jg     c0008bba <src_new+0x1b>
c0008bb2:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008bb8:	eb 1e                	jmp    c0008bd8 <src_new+0x39>
c0008bba:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0008bc0:	50                   	push   eax
c0008bc1:	50                   	push   eax
c0008bc2:	6a 3c                	push   0x3c
c0008bc4:	6a 01                	push   0x1
c0008bc6:	e8 ab 6c 00 00       	call   c000f876 <calloc>
c0008bcb:	83 c4 10             	add    esp,0x10
c0008bce:	89 c3                	mov    ebx,eax
c0008bd0:	85 c0                	test   eax,eax
c0008bd2:	75 10                	jne    c0008be4 <src_new+0x45>
c0008bd4:	85 f6                	test   esi,esi
c0008bd6:	75 04                	jne    c0008bdc <src_new+0x3d>
c0008bd8:	31 db                	xor    ebx,ebx
c0008bda:	eb 4b                	jmp    c0008c27 <src_new+0x88>
c0008bdc:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0008be2:	eb 43                	jmp    c0008c27 <src_new+0x88>
c0008be4:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008be7:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c0008bee:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008bf2:	e8 1d fb ff ff       	call   c0008714 <psrc_set_converter>
c0008bf7:	85 c0                	test   eax,eax
c0008bf9:	74 18                	je     c0008c13 <src_new+0x74>
c0008bfb:	85 f6                	test   esi,esi
c0008bfd:	74 06                	je     c0008c05 <src_new+0x66>
c0008bff:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c0008c05:	83 ec 0c             	sub    esp,0xc
c0008c08:	53                   	push   ebx
c0008c09:	31 db                	xor    ebx,ebx
c0008c0b:	e8 46 6c 00 00       	call   c000f856 <free>
c0008c10:	83 c4 10             	add    esp,0x10
c0008c13:	83 ec 0c             	sub    esp,0xc
c0008c16:	53                   	push   ebx
c0008c17:	e8 37 ff ff ff       	call   c0008b53 <src_reset>
c0008c1c:	83 c4 10             	add    esp,0x10
c0008c1f:	eb 06                	jmp    c0008c27 <src_new+0x88>
c0008c21:	85 ff                	test   edi,edi
c0008c23:	7f 9b                	jg     c0008bc0 <src_new+0x21>
c0008c25:	eb b1                	jmp    c0008bd8 <src_new+0x39>
c0008c27:	89 d8                	mov    eax,ebx
c0008c29:	5b                   	pop    ebx
c0008c2a:	5e                   	pop    esi
c0008c2b:	5f                   	pop    edi
c0008c2c:	c3                   	ret    

c0008c2d <src_callback_new>:
c0008c2d:	56                   	push   esi
c0008c2e:	53                   	push   ebx
c0008c2f:	53                   	push   ebx
c0008c30:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008c34:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008c38:	85 f6                	test   esi,esi
c0008c3a:	75 0e                	jne    c0008c4a <src_callback_new+0x1d>
c0008c3c:	31 db                	xor    ebx,ebx
c0008c3e:	85 c0                	test   eax,eax
c0008c40:	74 47                	je     c0008c89 <src_callback_new+0x5c>
c0008c42:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c0008c48:	eb 3f                	jmp    c0008c89 <src_callback_new+0x5c>
c0008c4a:	85 c0                	test   eax,eax
c0008c4c:	74 06                	je     c0008c54 <src_callback_new+0x27>
c0008c4e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008c54:	51                   	push   ecx
c0008c55:	50                   	push   eax
c0008c56:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c5a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c5e:	e8 3c ff ff ff       	call   c0008b9f <src_new>
c0008c63:	83 c4 10             	add    esp,0x10
c0008c66:	89 c3                	mov    ebx,eax
c0008c68:	85 c0                	test   eax,eax
c0008c6a:	74 1d                	je     c0008c89 <src_callback_new+0x5c>
c0008c6c:	83 ec 0c             	sub    esp,0xc
c0008c6f:	50                   	push   eax
c0008c70:	e8 de fe ff ff       	call   c0008b53 <src_reset>
c0008c75:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008c79:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008c80:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008c83:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008c86:	83 c4 10             	add    esp,0x10
c0008c89:	89 d8                	mov    eax,ebx
c0008c8b:	5a                   	pop    edx
c0008c8c:	5b                   	pop    ebx
c0008c8d:	5e                   	pop    esi
c0008c8e:	c3                   	ret    

c0008c8f <src_get_name>:
c0008c8f:	53                   	push   ebx
c0008c90:	83 ec 14             	sub    esp,0x14
c0008c93:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008c97:	53                   	push   ebx
c0008c98:	e8 d0 4f 00 00       	call   c000dc6d <sinc_get_name>
c0008c9d:	83 c4 10             	add    esp,0x10
c0008ca0:	85 c0                	test   eax,eax
c0008ca2:	75 1d                	jne    c0008cc1 <src_get_name+0x32>
c0008ca4:	83 ec 0c             	sub    esp,0xc
c0008ca7:	53                   	push   ebx
c0008ca8:	e8 80 57 00 00       	call   c000e42d <zoh_get_name>
c0008cad:	83 c4 10             	add    esp,0x10
c0008cb0:	85 c0                	test   eax,eax
c0008cb2:	75 0d                	jne    c0008cc1 <src_get_name+0x32>
c0008cb4:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cb8:	83 c4 08             	add    esp,0x8
c0008cbb:	5b                   	pop    ebx
c0008cbc:	e9 74 0b 00 00       	jmp    c0009835 <linear_get_name>
c0008cc1:	83 c4 08             	add    esp,0x8
c0008cc4:	5b                   	pop    ebx
c0008cc5:	c3                   	ret    

c0008cc6 <src_get_description>:
c0008cc6:	53                   	push   ebx
c0008cc7:	83 ec 14             	sub    esp,0x14
c0008cca:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008cce:	53                   	push   ebx
c0008ccf:	e8 ac 4f 00 00       	call   c000dc80 <sinc_get_description>
c0008cd4:	83 c4 10             	add    esp,0x10
c0008cd7:	85 c0                	test   eax,eax
c0008cd9:	75 1d                	jne    c0008cf8 <src_get_description+0x32>
c0008cdb:	83 ec 0c             	sub    esp,0xc
c0008cde:	53                   	push   ebx
c0008cdf:	e8 58 57 00 00       	call   c000e43c <zoh_get_description>
c0008ce4:	83 c4 10             	add    esp,0x10
c0008ce7:	85 c0                	test   eax,eax
c0008ce9:	75 0d                	jne    c0008cf8 <src_get_description+0x32>
c0008ceb:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cef:	83 c4 08             	add    esp,0x8
c0008cf2:	5b                   	pop    ebx
c0008cf3:	e9 4c 0b 00 00       	jmp    c0009844 <linear_get_description>
c0008cf8:	83 c4 08             	add    esp,0x8
c0008cfb:	5b                   	pop    ebx
c0008cfc:	c3                   	ret    

c0008cfd <src_get_version>:
c0008cfd:	b8 a0 91 02 c0       	mov    eax,0xc00291a0
c0008d02:	c3                   	ret    

c0008d03 <src_is_valid_ratio>:
c0008d03:	83 ec 1c             	sub    esp,0x1c
c0008d06:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008d0a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008d0e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008d12:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008d16:	68 00 00 70 3f       	push   0x3f700000
c0008d1b:	6a 00                	push   0x0
c0008d1d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d21:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d25:	e8 45 f0 01 00       	call   c0027d6f <__ltdf2>
c0008d2a:	83 c4 10             	add    esp,0x10
c0008d2d:	31 d2                	xor    edx,edx
c0008d2f:	85 c0                	test   eax,eax
c0008d31:	78 1e                	js     c0008d51 <src_is_valid_ratio+0x4e>
c0008d33:	68 00 00 70 40       	push   0x40700000
c0008d38:	6a 00                	push   0x0
c0008d3a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d3e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d42:	e8 0a f0 01 00       	call   c0027d51 <__gtdf2>
c0008d47:	31 d2                	xor    edx,edx
c0008d49:	83 c4 10             	add    esp,0x10
c0008d4c:	85 c0                	test   eax,eax
c0008d4e:	0f 9e c2             	setle  dl
c0008d51:	89 d0                	mov    eax,edx
c0008d53:	83 c4 1c             	add    esp,0x1c
c0008d56:	c3                   	ret    

c0008d57 <src_error>:
c0008d57:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d5b:	31 c0                	xor    eax,eax
c0008d5d:	85 d2                	test   edx,edx
c0008d5f:	74 03                	je     c0008d64 <src_error+0xd>
c0008d61:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008d64:	c3                   	ret    

c0008d65 <src_strerror>:
c0008d65:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d69:	31 c0                	xor    eax,eax
c0008d6b:	83 fa 17             	cmp    edx,0x17
c0008d6e:	77 07                	ja     c0008d77 <src_strerror+0x12>
c0008d70:	8b 04 95 00 96 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6a00]
c0008d77:	c3                   	ret    

c0008d78 <src_simple>:
c0008d78:	56                   	push   esi
c0008d79:	53                   	push   ebx
c0008d7a:	83 ec 18             	sub    esp,0x18
c0008d7d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008d81:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008d85:	50                   	push   eax
c0008d86:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d8a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d8e:	e8 0c fe ff ff       	call   c0008b9f <src_new>
c0008d93:	83 c4 10             	add    esp,0x10
c0008d96:	85 c0                	test   eax,eax
c0008d98:	75 06                	jne    c0008da0 <src_simple+0x28>
c0008d9a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008d9e:	eb 25                	jmp    c0008dc5 <src_simple+0x4d>
c0008da0:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008da7:	89 c3                	mov    ebx,eax
c0008da9:	50                   	push   eax
c0008daa:	50                   	push   eax
c0008dab:	56                   	push   esi
c0008dac:	53                   	push   ebx
c0008dad:	e8 e2 f9 ff ff       	call   c0008794 <src_process>
c0008db2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008db5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008db9:	e8 9a f9 ff ff       	call   c0008758 <src_delete>
c0008dbe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008dc2:	83 c4 10             	add    esp,0x10
c0008dc5:	83 c4 14             	add    esp,0x14
c0008dc8:	5b                   	pop    ebx
c0008dc9:	5e                   	pop    esi
c0008dca:	c3                   	ret    

c0008dcb <src_short_to_float_array>:
c0008dcb:	53                   	push   ebx
c0008dcc:	83 ec 18             	sub    esp,0x18
c0008dcf:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008dd3:	85 db                	test   ebx,ebx
c0008dd5:	74 54                	je     c0008e2b <src_short_to_float_array+0x60>
c0008dd7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008ddb:	4b                   	dec    ebx
c0008ddc:	83 ec 0c             	sub    esp,0xc
c0008ddf:	0f bf 04 58          	movsx  eax,WORD PTR [eax+ebx*2]
c0008de3:	50                   	push   eax
c0008de4:	e8 1a ed 01 00       	call   c0027b03 <__floatsidf>
c0008de9:	83 c4 10             	add    esp,0x10
c0008dec:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008df0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008df4:	68 00 00 00 3f       	push   0x3f000000
c0008df9:	6a 00                	push   0x0
c0008dfb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e03:	e8 98 e6 01 00       	call   c00274a0 <__muldf3>
c0008e08:	59                   	pop    ecx
c0008e09:	59                   	pop    ecx
c0008e0a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008e0e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008e12:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e16:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e1a:	e8 54 ef 01 00       	call   c0027d73 <__truncdfsf2>
c0008e1f:	83 c4 10             	add    esp,0x10
c0008e22:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008e26:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008e29:	eb a8                	jmp    c0008dd3 <src_short_to_float_array+0x8>
c0008e2b:	83 c4 18             	add    esp,0x18
c0008e2e:	5b                   	pop    ebx
c0008e2f:	c3                   	ret    

c0008e30 <src_float_to_short_array>:
c0008e30:	56                   	push   esi
c0008e31:	53                   	push   ebx
c0008e32:	83 ec 14             	sub    esp,0x14
c0008e35:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008e39:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008e3d:	85 db                	test   ebx,ebx
c0008e3f:	0f 84 a4 00 00 00    	je     c0008ee9 <src_float_to_short_array+0xb9>
c0008e45:	83 ec 0c             	sub    esp,0xc
c0008e48:	4b                   	dec    ebx
c0008e49:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008e4d:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008e50:	e8 42 f0 01 00       	call   c0027e97 <__extendsfdf2>
c0008e55:	83 c4 10             	add    esp,0x10
c0008e58:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e5c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e60:	68 00 00 e0 41       	push   0x41e00000
c0008e65:	6a 00                	push   0x0
c0008e67:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e6b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e6f:	e8 2c e6 01 00       	call   c00274a0 <__muldf3>
c0008e74:	83 c4 10             	add    esp,0x10
c0008e77:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e7b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e7f:	68 ff ff df 41       	push   0x41dfffff
c0008e84:	68 00 00 c0 ff       	push   0xffc00000
c0008e89:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e8d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e91:	e8 d7 ee 01 00       	call   c0027d6d <__gedf2>
c0008e96:	83 c4 10             	add    esp,0x10
c0008e99:	85 c0                	test   eax,eax
c0008e9b:	78 08                	js     c0008ea5 <src_float_to_short_array+0x75>
c0008e9d:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008ea3:	eb 98                	jmp    c0008e3d <src_float_to_short_array+0xd>
c0008ea5:	68 00 00 e0 c1       	push   0xc1e00000
c0008eaa:	6a 00                	push   0x0
c0008eac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008eb0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008eb4:	e8 b8 ee 01 00       	call   c0027d71 <__ledf2>
c0008eb9:	83 c4 10             	add    esp,0x10
c0008ebc:	85 c0                	test   eax,eax
c0008ebe:	7f 0b                	jg     c0008ecb <src_float_to_short_array+0x9b>
c0008ec0:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008ec6:	e9 72 ff ff ff       	jmp    c0008e3d <src_float_to_short_array+0xd>
c0008ecb:	50                   	push   eax
c0008ecc:	50                   	push   eax
c0008ecd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ed1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ed5:	e8 46 f0 01 00       	call   c0027f20 <lrint>
c0008eda:	83 c4 10             	add    esp,0x10
c0008edd:	c1 f8 10             	sar    eax,0x10
c0008ee0:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008ee4:	e9 54 ff ff ff       	jmp    c0008e3d <src_float_to_short_array+0xd>
c0008ee9:	83 c4 14             	add    esp,0x14
c0008eec:	5b                   	pop    ebx
c0008eed:	5e                   	pop    esi
c0008eee:	c3                   	ret    

c0008eef <src_int_to_float_array>:
c0008eef:	53                   	push   ebx
c0008ef0:	83 ec 18             	sub    esp,0x18
c0008ef3:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008ef7:	85 db                	test   ebx,ebx
c0008ef9:	74 52                	je     c0008f4d <src_int_to_float_array+0x5e>
c0008efb:	83 ec 0c             	sub    esp,0xc
c0008efe:	4b                   	dec    ebx
c0008eff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008f03:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008f06:	e8 f8 eb 01 00       	call   c0027b03 <__floatsidf>
c0008f0b:	83 c4 10             	add    esp,0x10
c0008f0e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f12:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f16:	68 00 00 00 3e       	push   0x3e000000
c0008f1b:	6a 00                	push   0x0
c0008f1d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f21:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f25:	e8 76 e5 01 00       	call   c00274a0 <__muldf3>
c0008f2a:	59                   	pop    ecx
c0008f2b:	59                   	pop    ecx
c0008f2c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008f30:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008f34:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f3c:	e8 32 ee 01 00       	call   c0027d73 <__truncdfsf2>
c0008f41:	83 c4 10             	add    esp,0x10
c0008f44:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008f48:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008f4b:	eb aa                	jmp    c0008ef7 <src_int_to_float_array+0x8>
c0008f4d:	83 c4 18             	add    esp,0x18
c0008f50:	5b                   	pop    ebx
c0008f51:	c3                   	ret    

c0008f52 <src_float_to_int_array>:
c0008f52:	56                   	push   esi
c0008f53:	53                   	push   ebx
c0008f54:	83 ec 14             	sub    esp,0x14
c0008f57:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008f5b:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008f5f:	85 db                	test   ebx,ebx
c0008f61:	0f 84 a2 00 00 00    	je     c0009009 <src_float_to_int_array+0xb7>
c0008f67:	83 ec 0c             	sub    esp,0xc
c0008f6a:	4b                   	dec    ebx
c0008f6b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008f6f:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008f72:	e8 20 ef 01 00       	call   c0027e97 <__extendsfdf2>
c0008f77:	83 c4 10             	add    esp,0x10
c0008f7a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f7e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f82:	68 00 00 e0 41       	push   0x41e00000
c0008f87:	6a 00                	push   0x0
c0008f89:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f8d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f91:	e8 0a e5 01 00       	call   c00274a0 <__muldf3>
c0008f96:	83 c4 10             	add    esp,0x10
c0008f99:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f9d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008fa1:	68 ff ff df 41       	push   0x41dfffff
c0008fa6:	68 00 00 c0 ff       	push   0xffc00000
c0008fab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008faf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fb3:	e8 b5 ed 01 00       	call   c0027d6d <__gedf2>
c0008fb8:	83 c4 10             	add    esp,0x10
c0008fbb:	85 c0                	test   eax,eax
c0008fbd:	78 09                	js     c0008fc8 <src_float_to_int_array+0x76>
c0008fbf:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008fc6:	eb 97                	jmp    c0008f5f <src_float_to_int_array+0xd>
c0008fc8:	68 00 00 e0 c1       	push   0xc1e00000
c0008fcd:	6a 00                	push   0x0
c0008fcf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fd3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fd7:	e8 95 ed 01 00       	call   c0027d71 <__ledf2>
c0008fdc:	83 c4 10             	add    esp,0x10
c0008fdf:	85 c0                	test   eax,eax
c0008fe1:	7f 0c                	jg     c0008fef <src_float_to_int_array+0x9d>
c0008fe3:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008fea:	e9 70 ff ff ff       	jmp    c0008f5f <src_float_to_int_array+0xd>
c0008fef:	50                   	push   eax
c0008ff0:	50                   	push   eax
c0008ff1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ff5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ff9:	e8 22 ef 01 00       	call   c0027f20 <lrint>
c0008ffe:	83 c4 10             	add    esp,0x10
c0009001:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0009004:	e9 56 ff ff ff       	jmp    c0008f5f <src_float_to_int_array+0xd>
c0009009:	83 c4 14             	add    esp,0x14
c000900c:	5b                   	pop    ebx
c000900d:	5e                   	pop    esi
c000900e:	c3                   	ret    

c000900f <linear_vari_process>:
c000900f:	55                   	push   ebp
c0009010:	31 d2                	xor    edx,edx
c0009012:	57                   	push   edi
c0009013:	56                   	push   esi
c0009014:	53                   	push   ebx
c0009015:	83 ec 3c             	sub    esp,0x3c
c0009018:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000901c:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0009020:	0f 8e d3 07 00 00    	jle    c00097f9 <linear_vari_process+0x7ea>
c0009026:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000902a:	ba 05 00 00 00       	mov    edx,0x5
c000902f:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0009032:	85 db                	test   ebx,ebx
c0009034:	0f 84 bf 07 00 00    	je     c00097f9 <linear_vari_process+0x7ea>
c000903a:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000903d:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0009041:	74 19                	je     c000905c <linear_vari_process+0x4d>
c0009043:	31 d2                	xor    edx,edx
c0009045:	39 c2                	cmp    edx,eax
c0009047:	7d 0c                	jge    c0009055 <linear_vari_process+0x46>
c0009049:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000904b:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000904e:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c0009052:	42                   	inc    edx
c0009053:	eb f0                	jmp    c0009045 <linear_vari_process+0x36>
c0009055:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000905c:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000905f:	0f af d0             	imul   edx,eax
c0009062:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0009065:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c0009069:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0009070:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0009073:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000907a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000907e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009081:	8b 00                	mov    eax,DWORD PTR [eax]
c0009083:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009087:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000908b:	68 00 00 70 3f       	push   0x3f700000
c0009090:	6a 00                	push   0x0
c0009092:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009096:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000909a:	e8 d0 ec 01 00       	call   c0027d6f <__ltdf2>
c000909f:	83 c4 10             	add    esp,0x10
c00090a2:	ba 16 00 00 00       	mov    edx,0x16
c00090a7:	85 c0                	test   eax,eax
c00090a9:	0f 88 4a 07 00 00    	js     c00097f9 <linear_vari_process+0x7ea>
c00090af:	68 00 00 70 40       	push   0x40700000
c00090b4:	6a 00                	push   0x0
c00090b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090be:	e8 8e ec 01 00       	call   c0027d51 <__gtdf2>
c00090c3:	83 c4 10             	add    esp,0x10
c00090c6:	ba 16 00 00 00       	mov    edx,0x16
c00090cb:	85 c0                	test   eax,eax
c00090cd:	0f 8f 26 07 00 00    	jg     c00097f9 <linear_vari_process+0x7ea>
c00090d3:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00090d7:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00090da:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00090dd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00090e1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00090e5:	68 00 00 f0 3f       	push   0x3ff00000
c00090ea:	6a 00                	push   0x0
c00090ec:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090f0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090f4:	e8 76 ec 01 00       	call   c0027d6f <__ltdf2>
c00090f9:	83 c4 10             	add    esp,0x10
c00090fc:	85 c0                	test   eax,eax
c00090fe:	0f 89 89 02 00 00    	jns    c000938d <linear_vari_process+0x37e>
c0009104:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c0009107:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c000910a:	0f 8d 7d 02 00 00    	jge    c000938d <linear_vari_process+0x37e>
c0009110:	83 ec 0c             	sub    esp,0xc
c0009113:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009116:	e8 e8 e9 01 00       	call   c0027b03 <__floatsidf>
c000911b:	83 c4 10             	add    esp,0x10
c000911e:	89 04 24             	mov    DWORD PTR [esp],eax
c0009121:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009125:	68 00 00 f0 3f       	push   0x3ff00000
c000912a:	6a 00                	push   0x0
c000912c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009130:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009134:	e8 ea dc 01 00       	call   c0026e23 <__adddf3>
c0009139:	83 c4 10             	add    esp,0x10
c000913c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009140:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009144:	52                   	push   edx
c0009145:	50                   	push   eax
c0009146:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000914a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000914e:	e8 4d e3 01 00       	call   c00274a0 <__muldf3>
c0009153:	5d                   	pop    ebp
c0009154:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009158:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000915c:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000915f:	e8 9f e9 01 00       	call   c0027b03 <__floatsidf>
c0009164:	83 c4 10             	add    esp,0x10
c0009167:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000916b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000916f:	52                   	push   edx
c0009170:	50                   	push   eax
c0009171:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009175:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009179:	e8 a5 dc 01 00       	call   c0026e23 <__adddf3>
c000917e:	59                   	pop    ecx
c000917f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009183:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009187:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000918a:	e8 74 e9 01 00       	call   c0027b03 <__floatsidf>
c000918f:	83 c4 10             	add    esp,0x10
c0009192:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009196:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000919a:	52                   	push   edx
c000919b:	50                   	push   eax
c000919c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091a0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091a4:	e8 c4 eb 01 00       	call   c0027d6d <__gedf2>
c00091a9:	83 c4 10             	add    esp,0x10
c00091ac:	85 c0                	test   eax,eax
c00091ae:	0f 89 d9 01 00 00    	jns    c000938d <linear_vari_process+0x37e>
c00091b4:	85 ff                	test   edi,edi
c00091b6:	0f 8e f4 00 00 00    	jle    c00092b0 <linear_vari_process+0x2a1>
c00091bc:	83 ec 10             	sub    esp,0x10
c00091bf:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00091c2:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00091c5:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00091c9:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00091cc:	ff 30                	push   DWORD PTR [eax]
c00091ce:	e8 a1 e2 01 00       	call   c0027474 <__subdf3>
c00091d3:	83 c4 18             	add    esp,0x18
c00091d6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00091da:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00091de:	52                   	push   edx
c00091df:	50                   	push   eax
c00091e0:	e8 1b ed 01 00       	call   c0027f00 <fabs>
c00091e5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00091e9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00091ed:	83 c4 10             	add    esp,0x10
c00091f0:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00091f5:	68 23 42 92 0c       	push   0xc924223
c00091fa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091fe:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009202:	e8 4a eb 01 00       	call   c0027d51 <__gtdf2>
c0009207:	83 c4 10             	add    esp,0x10
c000920a:	85 c0                	test   eax,eax
c000920c:	0f 8e 9e 00 00 00    	jle    c00092b0 <linear_vari_process+0x2a1>
c0009212:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009216:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009219:	8b 00                	mov    eax,DWORD PTR [eax]
c000921b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000921f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009222:	52                   	push   edx
c0009223:	50                   	push   eax
c0009224:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009227:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000922a:	e8 45 e2 01 00       	call   c0027474 <__subdf3>
c000922f:	59                   	pop    ecx
c0009230:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009234:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009238:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000923b:	e8 c3 e8 01 00       	call   c0027b03 <__floatsidf>
c0009240:	83 c4 10             	add    esp,0x10
c0009243:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009247:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000924b:	52                   	push   edx
c000924c:	50                   	push   eax
c000924d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009251:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009255:	e8 46 e2 01 00       	call   c00274a0 <__muldf3>
c000925a:	5f                   	pop    edi
c000925b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000925f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009263:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009266:	e8 98 e8 01 00       	call   c0027b03 <__floatsidf>
c000926b:	83 c4 10             	add    esp,0x10
c000926e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009272:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009276:	52                   	push   edx
c0009277:	50                   	push   eax
c0009278:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000927c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009280:	e8 ff e4 01 00       	call   c0027784 <__divdf3>
c0009285:	83 c4 10             	add    esp,0x10
c0009288:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000928c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009290:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009294:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009298:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000929c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00092a0:	e8 7e db 01 00       	call   c0026e23 <__adddf3>
c00092a5:	83 c4 10             	add    esp,0x10
c00092a8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00092ac:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00092b0:	31 ff                	xor    edi,edi
c00092b2:	39 7b 04             	cmp    DWORD PTR [ebx+0x4],edi
c00092b5:	0f 8e 9d 00 00 00    	jle    c0009358 <linear_vari_process+0x349>
c00092bb:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00092be:	8b 6c bb 1c          	mov    ebp,DWORD PTR [ebx+edi*4+0x1c]
c00092c2:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00092c5:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00092c9:	89 04 24             	mov    DWORD PTR [esp],eax
c00092cc:	8b 06                	mov    eax,DWORD PTR [esi]
c00092ce:	52                   	push   edx
c00092cf:	52                   	push   edx
c00092d0:	55                   	push   ebp
c00092d1:	ff 34 b8             	push   DWORD PTR [eax+edi*4]
c00092d4:	47                   	inc    edi
c00092d5:	e8 de d4 01 00       	call   c00267b8 <__subsf3>
c00092da:	89 04 24             	mov    DWORD PTR [esp],eax
c00092dd:	e8 b5 eb 01 00       	call   c0027e97 <__extendsfdf2>
c00092e2:	83 c4 10             	add    esp,0x10
c00092e5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092e9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092f1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092f5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092f9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092fd:	e8 9e e1 01 00       	call   c00274a0 <__muldf3>
c0009302:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009305:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009309:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000930d:	e8 85 eb 01 00       	call   c0027e97 <__extendsfdf2>
c0009312:	83 c4 10             	add    esp,0x10
c0009315:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009319:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000931d:	52                   	push   edx
c000931e:	50                   	push   eax
c000931f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009323:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009327:	e8 f7 da 01 00       	call   c0026e23 <__adddf3>
c000932c:	59                   	pop    ecx
c000932d:	5d                   	pop    ebp
c000932e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009332:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009336:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000933a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000933e:	e8 30 ea 01 00       	call   c0027d73 <__truncdfsf2>
c0009343:	83 c4 10             	add    esp,0x10
c0009346:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0009349:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000934d:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009350:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009353:	e9 5a ff ff ff       	jmp    c00092b2 <linear_vari_process+0x2a3>
c0009358:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000935c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009360:	68 00 00 f0 3f       	push   0x3ff00000
c0009365:	6a 00                	push   0x0
c0009367:	e8 18 e4 01 00       	call   c0027784 <__divdf3>
c000936c:	83 c4 10             	add    esp,0x10
c000936f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009372:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009376:	52                   	push   edx
c0009377:	50                   	push   eax
c0009378:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000937c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009380:	e8 9e da 01 00       	call   c0026e23 <__adddf3>
c0009385:	83 c4 10             	add    esp,0x10
c0009388:	e9 50 fd ff ff       	jmp    c00090dd <linear_vari_process+0xce>
c000938d:	50                   	push   eax
c000938e:	50                   	push   eax
c000938f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009393:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009397:	e8 84 eb 01 00       	call   c0027f20 <lrint>
c000939c:	83 ec 0c             	sub    esp,0xc
c000939f:	50                   	push   eax
c00093a0:	e8 5e e7 01 00       	call   c0027b03 <__floatsidf>
c00093a5:	83 c4 10             	add    esp,0x10
c00093a8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00093ac:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00093b0:	52                   	push   edx
c00093b1:	50                   	push   eax
c00093b2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093b6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093ba:	e8 b5 e0 01 00       	call   c0027474 <__subdf3>
c00093bf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00093c3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00093c7:	83 c4 20             	add    esp,0x20
c00093ca:	6a 00                	push   0x0
c00093cc:	6a 00                	push   0x0
c00093ce:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093d2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093d6:	e8 94 e9 01 00       	call   c0027d6f <__ltdf2>
c00093db:	83 c4 10             	add    esp,0x10
c00093de:	85 c0                	test   eax,eax
c00093e0:	79 1e                	jns    c0009400 <linear_vari_process+0x3f1>
c00093e2:	68 00 00 f0 3f       	push   0x3ff00000
c00093e7:	6a 00                	push   0x0
c00093e9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093f1:	e8 2d da 01 00       	call   c0026e23 <__adddf3>
c00093f6:	83 c4 10             	add    esp,0x10
c00093f9:	89 04 24             	mov    DWORD PTR [esp],eax
c00093fc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009400:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0009403:	83 ec 10             	sub    esp,0x10
c0009406:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000940a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000940e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009412:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009416:	e8 59 e0 01 00       	call   c0027474 <__subdf3>
c000941b:	83 c4 18             	add    esp,0x18
c000941e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009422:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009426:	52                   	push   edx
c0009427:	50                   	push   eax
c0009428:	e8 f3 ea 01 00       	call   c0027f20 <lrint>
c000942d:	83 c4 10             	add    esp,0x10
c0009430:	0f af f8             	imul   edi,eax
c0009433:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0009436:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c0009439:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000943c:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c000943f:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c0009442:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0009446:	0f 8d 13 03 00 00    	jge    c000975f <linear_vari_process+0x750>
c000944c:	83 ec 0c             	sub    esp,0xc
c000944f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009452:	e8 ac e6 01 00       	call   c0027b03 <__floatsidf>
c0009457:	83 c4 10             	add    esp,0x10
c000945a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000945e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009462:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009466:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000946a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000946e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009472:	e8 29 e0 01 00       	call   c00274a0 <__muldf3>
c0009477:	89 3c 24             	mov    DWORD PTR [esp],edi
c000947a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000947e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009482:	e8 7c e6 01 00       	call   c0027b03 <__floatsidf>
c0009487:	83 c4 10             	add    esp,0x10
c000948a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000948e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009492:	52                   	push   edx
c0009493:	50                   	push   eax
c0009494:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009498:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000949c:	e8 82 d9 01 00       	call   c0026e23 <__adddf3>
c00094a1:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00094a4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094a8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094ac:	e8 52 e6 01 00       	call   c0027b03 <__floatsidf>
c00094b1:	83 c4 10             	add    esp,0x10
c00094b4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094b8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094bc:	52                   	push   edx
c00094bd:	50                   	push   eax
c00094be:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094c2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094c6:	e8 a4 e8 01 00       	call   c0027d6f <__ltdf2>
c00094cb:	83 c4 10             	add    esp,0x10
c00094ce:	85 c0                	test   eax,eax
c00094d0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00094d4:	0f 89 85 02 00 00    	jns    c000975f <linear_vari_process+0x750>
c00094da:	85 c9                	test   ecx,ecx
c00094dc:	0f 8e f5 00 00 00    	jle    c00095d7 <linear_vari_process+0x5c8>
c00094e2:	83 ec 10             	sub    esp,0x10
c00094e5:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00094e8:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00094eb:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00094ef:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00094f2:	ff 30                	push   DWORD PTR [eax]
c00094f4:	e8 7b df 01 00       	call   c0027474 <__subdf3>
c00094f9:	83 c4 18             	add    esp,0x18
c00094fc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009500:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009504:	52                   	push   edx
c0009505:	50                   	push   eax
c0009506:	e8 f5 e9 01 00       	call   c0027f00 <fabs>
c000950b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000950f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009513:	83 c4 10             	add    esp,0x10
c0009516:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000951b:	68 23 42 92 0c       	push   0xc924223
c0009520:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009524:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009528:	e8 24 e8 01 00       	call   c0027d51 <__gtdf2>
c000952d:	83 c4 10             	add    esp,0x10
c0009530:	85 c0                	test   eax,eax
c0009532:	0f 8e 9f 00 00 00    	jle    c00095d7 <linear_vari_process+0x5c8>
c0009538:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000953c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000953f:	8b 00                	mov    eax,DWORD PTR [eax]
c0009541:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009545:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009549:	52                   	push   edx
c000954a:	50                   	push   eax
c000954b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000954e:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009551:	e8 1e df 01 00       	call   c0027474 <__subdf3>
c0009556:	5f                   	pop    edi
c0009557:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000955b:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000955f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009562:	e8 9c e5 01 00       	call   c0027b03 <__floatsidf>
c0009567:	83 c4 10             	add    esp,0x10
c000956a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000956e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009572:	52                   	push   edx
c0009573:	50                   	push   eax
c0009574:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009578:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000957c:	e8 1f df 01 00       	call   c00274a0 <__muldf3>
c0009581:	5d                   	pop    ebp
c0009582:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009586:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000958a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000958d:	e8 71 e5 01 00       	call   c0027b03 <__floatsidf>
c0009592:	83 c4 10             	add    esp,0x10
c0009595:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009599:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000959d:	52                   	push   edx
c000959e:	50                   	push   eax
c000959f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095a7:	e8 d8 e1 01 00       	call   c0027784 <__divdf3>
c00095ac:	83 c4 10             	add    esp,0x10
c00095af:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00095b3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00095b7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00095bb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00095bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095c3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095c7:	e8 57 d8 01 00       	call   c0026e23 <__adddf3>
c00095cc:	83 c4 10             	add    esp,0x10
c00095cf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00095d3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00095d7:	31 ff                	xor    edi,edi
c00095d9:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00095dc:	39 f8                	cmp    eax,edi
c00095de:	0f 8e ac 00 00 00    	jle    c0009690 <linear_vari_process+0x681>
c00095e4:	8b 16                	mov    edx,DWORD PTR [esi]
c00095e6:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00095e9:	29 c1                	sub    ecx,eax
c00095eb:	89 c8                	mov    eax,ecx
c00095ed:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00095f0:	01 f8                	add    eax,edi
c00095f2:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00095f6:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c00095f9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00095fc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009600:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009603:	51                   	push   ecx
c0009604:	01 f8                	add    eax,edi
c0009606:	51                   	push   ecx
c0009607:	47                   	inc    edi
c0009608:	55                   	push   ebp
c0009609:	ff 34 82             	push   DWORD PTR [edx+eax*4]
c000960c:	e8 a7 d1 01 00       	call   c00267b8 <__subsf3>
c0009611:	89 04 24             	mov    DWORD PTR [esp],eax
c0009614:	e8 7e e8 01 00       	call   c0027e97 <__extendsfdf2>
c0009619:	83 c4 10             	add    esp,0x10
c000961c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009620:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009624:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009628:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000962c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009630:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009634:	e8 67 de 01 00       	call   c00274a0 <__muldf3>
c0009639:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000963c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009640:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009644:	e8 4e e8 01 00       	call   c0027e97 <__extendsfdf2>
c0009649:	83 c4 10             	add    esp,0x10
c000964c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009650:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009654:	52                   	push   edx
c0009655:	50                   	push   eax
c0009656:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000965a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000965e:	e8 c0 d7 01 00       	call   c0026e23 <__adddf3>
c0009663:	5d                   	pop    ebp
c0009664:	59                   	pop    ecx
c0009665:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009669:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000966d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009671:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009675:	e8 f9 e6 01 00       	call   c0027d73 <__truncdfsf2>
c000967a:	83 c4 10             	add    esp,0x10
c000967d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009681:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009685:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009688:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000968b:	e9 49 ff ff ff       	jmp    c00095d9 <linear_vari_process+0x5ca>
c0009690:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009694:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009698:	68 00 00 f0 3f       	push   0x3ff00000
c000969d:	6a 00                	push   0x0
c000969f:	e8 e0 e0 01 00       	call   c0027784 <__divdf3>
c00096a4:	83 c4 10             	add    esp,0x10
c00096a7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00096ab:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00096af:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00096b3:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00096b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096bf:	e8 5f d7 01 00       	call   c0026e23 <__adddf3>
c00096c4:	59                   	pop    ecx
c00096c5:	5f                   	pop    edi
c00096c6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096ca:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096d6:	e8 45 e8 01 00       	call   c0027f20 <lrint>
c00096db:	83 ec 0c             	sub    esp,0xc
c00096de:	50                   	push   eax
c00096df:	e8 1f e4 01 00       	call   c0027b03 <__floatsidf>
c00096e4:	83 c4 10             	add    esp,0x10
c00096e7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096eb:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096ef:	52                   	push   edx
c00096f0:	50                   	push   eax
c00096f1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096f5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096f9:	e8 76 dd 01 00       	call   c0027474 <__subdf3>
c00096fe:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009702:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009706:	83 c4 20             	add    esp,0x20
c0009709:	6a 00                	push   0x0
c000970b:	6a 00                	push   0x0
c000970d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009711:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009715:	e8 55 e6 01 00       	call   c0027d6f <__ltdf2>
c000971a:	83 c4 10             	add    esp,0x10
c000971d:	85 c0                	test   eax,eax
c000971f:	79 1e                	jns    c000973f <linear_vari_process+0x730>
c0009721:	68 00 00 f0 3f       	push   0x3ff00000
c0009726:	6a 00                	push   0x0
c0009728:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000972c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009730:	e8 ee d6 01 00       	call   c0026e23 <__adddf3>
c0009735:	83 c4 10             	add    esp,0x10
c0009738:	89 04 24             	mov    DWORD PTR [esp],eax
c000973b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000973f:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0009742:	83 ec 10             	sub    esp,0x10
c0009745:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009749:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000974d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009751:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009755:	e8 1a dd 01 00       	call   c0027474 <__subdf3>
c000975a:	e9 bc fc ff ff       	jmp    c000941b <linear_vari_process+0x40c>
c000975f:	39 fd                	cmp    ebp,edi
c0009761:	7d 38                	jge    c000979b <linear_vari_process+0x78c>
c0009763:	83 ec 0c             	sub    esp,0xc
c0009766:	89 f8                	mov    eax,edi
c0009768:	29 e8                	sub    eax,ebp
c000976a:	99                   	cdq    
c000976b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000976e:	50                   	push   eax
c000976f:	e8 8f e3 01 00       	call   c0027b03 <__floatsidf>
c0009774:	83 c4 10             	add    esp,0x10
c0009777:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000977b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000977f:	52                   	push   edx
c0009780:	50                   	push   eax
c0009781:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009785:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009789:	e8 95 d6 01 00       	call   c0026e23 <__adddf3>
c000978e:	83 c4 10             	add    esp,0x10
c0009791:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c0009794:	89 04 24             	mov    DWORD PTR [esp],eax
c0009797:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000979b:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c000979f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00097a2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00097a6:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c00097a9:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c00097ac:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00097af:	85 c0                	test   eax,eax
c00097b1:	7f 29                	jg     c00097dc <linear_vari_process+0x7cd>
c00097b3:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c00097b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00097bb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00097bf:	89 01                	mov    DWORD PTR [ecx],eax
c00097c1:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00097c4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00097c7:	99                   	cdq    
c00097c8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00097cb:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c00097ce:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00097d1:	99                   	cdq    
c00097d2:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00097d5:	31 d2                	xor    edx,edx
c00097d7:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00097da:	eb 1d                	jmp    c00097f9 <linear_vari_process+0x7ea>
c00097dc:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c00097df:	31 d2                	xor    edx,edx
c00097e1:	29 c8                	sub    eax,ecx
c00097e3:	c1 e0 02             	shl    eax,0x2
c00097e6:	39 d1                	cmp    ecx,edx
c00097e8:	7e c9                	jle    c00097b3 <linear_vari_process+0x7a4>
c00097ea:	8b 3e                	mov    edi,DWORD PTR [esi]
c00097ec:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c00097ef:	83 c0 04             	add    eax,0x4
c00097f2:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c00097f6:	42                   	inc    edx
c00097f7:	eb ed                	jmp    c00097e6 <linear_vari_process+0x7d7>
c00097f9:	83 c4 3c             	add    esp,0x3c
c00097fc:	89 d0                	mov    eax,edx
c00097fe:	5b                   	pop    ebx
c00097ff:	5e                   	pop    esi
c0009800:	5f                   	pop    edi
c0009801:	5d                   	pop    ebp
c0009802:	c3                   	ret    

c0009803 <linear_reset>:
c0009803:	83 ec 0c             	sub    esp,0xc
c0009806:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000980a:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000980d:	85 c0                	test   eax,eax
c000980f:	74 20                	je     c0009831 <linear_reset+0x2e>
c0009811:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c0009814:	83 c0 1c             	add    eax,0x1c
c0009817:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000981a:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c0009821:	c1 e2 02             	shl    edx,0x2
c0009824:	51                   	push   ecx
c0009825:	52                   	push   edx
c0009826:	6a 00                	push   0x0
c0009828:	50                   	push   eax
c0009829:	e8 4a 6f ff ff       	call   c0000778 <memset>
c000982e:	83 c4 10             	add    esp,0x10
c0009831:	83 c4 0c             	add    esp,0xc
c0009834:	c3                   	ret    

c0009835 <linear_get_name>:
c0009835:	31 c0                	xor    eax,eax
c0009837:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c000983c:	75 05                	jne    c0009843 <linear_get_name+0xe>
c000983e:	b8 60 96 02 c0       	mov    eax,0xc0029660
c0009843:	c3                   	ret    

c0009844 <linear_get_description>:
c0009844:	31 c0                	xor    eax,eax
c0009846:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c000984b:	75 05                	jne    c0009852 <linear_get_description+0xe>
c000984d:	b8 74 96 02 c0       	mov    eax,0xc0029674
c0009852:	c3                   	ret    

c0009853 <linear_set_converter>:
c0009853:	53                   	push   ebx
c0009854:	b8 0a 00 00 00       	mov    eax,0xa
c0009859:	83 ec 08             	sub    esp,0x8
c000985c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009860:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c0009865:	75 6e                	jne    c00098d5 <linear_set_converter+0x82>
c0009867:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000986a:	85 c0                	test   eax,eax
c000986c:	74 13                	je     c0009881 <linear_set_converter+0x2e>
c000986e:	83 ec 0c             	sub    esp,0xc
c0009871:	50                   	push   eax
c0009872:	e8 df 5f 00 00       	call   c000f856 <free>
c0009877:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000987e:	83 c4 10             	add    esp,0x10
c0009881:	50                   	push   eax
c0009882:	50                   	push   eax
c0009883:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009886:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000988d:	50                   	push   eax
c000988e:	6a 01                	push   0x1
c0009890:	e8 e1 5f 00 00       	call   c000f876 <calloc>
c0009895:	83 c4 10             	add    esp,0x10
c0009898:	89 c2                	mov    edx,eax
c000989a:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000989d:	85 d2                	test   edx,edx
c000989f:	b8 01 00 00 00       	mov    eax,0x1
c00098a4:	74 2f                	je     c00098d5 <linear_set_converter+0x82>
c00098a6:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00098a9:	83 ec 0c             	sub    esp,0xc
c00098ac:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00098af:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c00098b5:	c7 43 24 0f 90 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000900f
c00098bc:	c7 43 20 0f 90 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000900f
c00098c3:	c7 43 28 03 98 00 c0 	mov    DWORD PTR [ebx+0x28],0xc0009803
c00098ca:	53                   	push   ebx
c00098cb:	e8 33 ff ff ff       	call   c0009803 <linear_reset>
c00098d0:	83 c4 10             	add    esp,0x10
c00098d3:	31 c0                	xor    eax,eax
c00098d5:	83 c4 08             	add    esp,0x8
c00098d8:	5b                   	pop    ebx
c00098d9:	c3                   	ret    

c00098da <int_to_fp>:
c00098da:	c1 e0 0c             	shl    eax,0xc
c00098dd:	c3                   	ret    

c00098de <fp_to_int>:
c00098de:	c1 f8 0c             	sar    eax,0xc
c00098e1:	c3                   	ret    

c00098e2 <fp_fraction_part>:
c00098e2:	25 ff 0f 00 00       	and    eax,0xfff
c00098e7:	c3                   	ret    

c00098e8 <fp_to_double>:
c00098e8:	83 ec 1c             	sub    esp,0x1c
c00098eb:	e8 f2 ff ff ff       	call   c00098e2 <fp_fraction_part>
c00098f0:	83 ec 0c             	sub    esp,0xc
c00098f3:	50                   	push   eax
c00098f4:	e8 0a e2 01 00       	call   c0027b03 <__floatsidf>
c00098f9:	83 c4 10             	add    esp,0x10
c00098fc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009900:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009904:	68 00 00 30 3f       	push   0x3f300000
c0009909:	6a 00                	push   0x0
c000990b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000990f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009913:	e8 88 db 01 00       	call   c00274a0 <__muldf3>
c0009918:	83 c4 2c             	add    esp,0x2c
c000991b:	c3                   	ret    

c000991c <calc_output_single>:
c000991c:	55                   	push   ebp
c000991d:	57                   	push   edi
c000991e:	56                   	push   esi
c000991f:	89 c6                	mov    esi,eax
c0009921:	53                   	push   ebx
c0009922:	89 d3                	mov    ebx,edx
c0009924:	83 ec 4c             	sub    esp,0x4c
c0009927:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000992b:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000992e:	e8 a7 ff ff ff       	call   c00098da <int_to_fp>
c0009933:	8b 7e 34             	mov    edi,DWORD PTR [esi+0x34]
c0009936:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000993a:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c000993e:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c0009942:	8b 7e 30             	mov    edi,DWORD PTR [esi+0x30]
c0009945:	99                   	cdq    
c0009946:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000994e:	f7 fb                	idiv   ebx
c0009950:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0009958:	89 da                	mov    edx,ebx
c000995a:	0f af d0             	imul   edx,eax
c000995d:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009961:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009965:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009969:	29 c2                	sub    edx,eax
c000996b:	8d 2c 96             	lea    ebp,[esi+edx*4]
c000996e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009972:	83 c5 04             	add    ebp,0x4
c0009975:	e8 6e ff ff ff       	call   c00098e8 <fp_to_double>
c000997a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000997e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009982:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009986:	e8 53 ff ff ff       	call   c00098de <fp_to_int>
c000998b:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c000998e:	52                   	push   edx
c000998f:	52                   	push   edx
c0009990:	51                   	push   ecx
c0009991:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009995:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009999:	e8 1a ce 01 00       	call   c00267b8 <__subsf3>
c000999e:	89 04 24             	mov    DWORD PTR [esp],eax
c00099a1:	e8 f1 e4 01 00       	call   c0027e97 <__extendsfdf2>
c00099a6:	83 c4 10             	add    esp,0x10
c00099a9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099ad:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099b1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00099b5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00099b9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00099bd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00099c1:	e8 da da 01 00       	call   c00274a0 <__muldf3>
c00099c6:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00099ca:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00099ce:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00099d1:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c00099d5:	e8 bd e4 01 00       	call   c0027e97 <__extendsfdf2>
c00099da:	83 c4 10             	add    esp,0x10
c00099dd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099e1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099e5:	52                   	push   edx
c00099e6:	50                   	push   eax
c00099e7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099eb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099ef:	e8 2f d4 01 00       	call   c0026e23 <__adddf3>
c00099f4:	59                   	pop    ecx
c00099f5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00099f9:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00099fd:	ff b5 40 08 00 00    	push   DWORD PTR [ebp+0x840]
c0009a03:	e8 8f e4 01 00       	call   c0027e97 <__extendsfdf2>
c0009a08:	83 c4 10             	add    esp,0x10
c0009a0b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009a0f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009a13:	52                   	push   edx
c0009a14:	50                   	push   eax
c0009a15:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009a19:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009a1d:	e8 7e da 01 00       	call   c00274a0 <__muldf3>
c0009a22:	83 c4 10             	add    esp,0x10
c0009a25:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009a29:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009a2d:	52                   	push   edx
c0009a2e:	50                   	push   eax
c0009a2f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a33:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a37:	e8 e7 d3 01 00       	call   c0026e23 <__adddf3>
c0009a3c:	83 c4 10             	add    esp,0x10
c0009a3f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009a43:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009a47:	29 5c 24 10          	sub    DWORD PTR [esp+0x10],ebx
c0009a4b:	0f 89 1d ff ff ff    	jns    c000996e <calc_output_single+0x52>
c0009a51:	89 d9                	mov    ecx,ebx
c0009a53:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009a57:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0009a5b:	89 dd                	mov    ebp,ebx
c0009a5d:	29 c8                	sub    eax,ecx
c0009a5f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0009a67:	99                   	cdq    
c0009a68:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009a70:	f7 fb                	idiv   ebx
c0009a72:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009a76:	0f af e8             	imul   ebp,eax
c0009a79:	8d 44 02 01          	lea    eax,[edx+eax*1+0x1]
c0009a7d:	01 cd                	add    ebp,ecx
c0009a7f:	8d 34 86             	lea    esi,[esi+eax*4]
c0009a82:	89 e8                	mov    eax,ebp
c0009a84:	83 ee 04             	sub    esi,0x4
c0009a87:	e8 5c fe ff ff       	call   c00098e8 <fp_to_double>
c0009a8c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009a90:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009a94:	89 e8                	mov    eax,ebp
c0009a96:	29 dd                	sub    ebp,ebx
c0009a98:	e8 41 fe ff ff       	call   c00098de <fp_to_int>
c0009a9d:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009aa0:	52                   	push   edx
c0009aa1:	52                   	push   edx
c0009aa2:	51                   	push   ecx
c0009aa3:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
c0009aa7:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009aab:	e8 08 cd 01 00       	call   c00267b8 <__subsf3>
c0009ab0:	89 04 24             	mov    DWORD PTR [esp],eax
c0009ab3:	e8 df e3 01 00       	call   c0027e97 <__extendsfdf2>
c0009ab8:	83 c4 10             	add    esp,0x10
c0009abb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009abf:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009ac3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ac7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009acb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009acf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ad3:	e8 c8 d9 01 00       	call   c00274a0 <__muldf3>
c0009ad8:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0009adc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009ae0:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009ae3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009ae7:	e8 ab e3 01 00       	call   c0027e97 <__extendsfdf2>
c0009aec:	83 c4 10             	add    esp,0x10
c0009aef:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009af3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009af7:	52                   	push   edx
c0009af8:	50                   	push   eax
c0009af9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009afd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b01:	e8 1d d3 01 00       	call   c0026e23 <__adddf3>
c0009b06:	59                   	pop    ecx
c0009b07:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009b0b:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009b0f:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c0009b15:	e8 7d e3 01 00       	call   c0027e97 <__extendsfdf2>
c0009b1a:	83 c4 10             	add    esp,0x10
c0009b1d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009b21:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009b25:	52                   	push   edx
c0009b26:	50                   	push   eax
c0009b27:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b2b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b2f:	e8 6c d9 01 00       	call   c00274a0 <__muldf3>
c0009b34:	83 c4 10             	add    esp,0x10
c0009b37:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009b3b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009b3f:	52                   	push   edx
c0009b40:	50                   	push   eax
c0009b41:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b45:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b49:	e8 d5 d2 01 00       	call   c0026e23 <__adddf3>
c0009b4e:	83 c4 10             	add    esp,0x10
c0009b51:	85 ed                	test   ebp,ebp
c0009b53:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009b57:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009b5b:	0f 8f 21 ff ff ff    	jg     c0009a82 <calc_output_single+0x166>
c0009b61:	52                   	push   edx
c0009b62:	50                   	push   eax
c0009b63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b67:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b6b:	e8 b3 d2 01 00       	call   c0026e23 <__adddf3>
c0009b70:	83 c4 5c             	add    esp,0x5c
c0009b73:	5b                   	pop    ebx
c0009b74:	5e                   	pop    esi
c0009b75:	5f                   	pop    edi
c0009b76:	5d                   	pop    ebp
c0009b77:	c3                   	ret    

c0009b78 <calc_output_stereo>:
c0009b78:	55                   	push   ebp
c0009b79:	89 cd                	mov    ebp,ecx
c0009b7b:	57                   	push   edi
c0009b7c:	56                   	push   esi
c0009b7d:	53                   	push   ebx
c0009b7e:	89 c3                	mov    ebx,eax
c0009b80:	83 ec 6c             	sub    esp,0x6c
c0009b83:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009b87:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0009b8e:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0009b95:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009b99:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009b9d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009ba0:	e8 35 fd ff ff       	call   c00098da <int_to_fp>
c0009ba5:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0009bad:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009bb1:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0009bb9:	29 c8                	sub    eax,ecx
c0009bbb:	99                   	cdq    
c0009bbc:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009bc0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009bc4:	0f af d0             	imul   edx,eax
c0009bc7:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0009bca:	31 d2                	xor    edx,edx
c0009bcc:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0009bd0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009bd4:	8b 73 34             	mov    esi,DWORD PTR [ebx+0x34]
c0009bd7:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0009bdb:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c0009bde:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0009be2:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0009be6:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c0009be9:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009bee:	29 c1                	sub    ecx,eax
c0009bf0:	31 c0                	xor    eax,eax
c0009bf2:	8d 3c 8b             	lea    edi,[ebx+ecx*4]
c0009bf5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009bf9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009bfd:	83 c7 08             	add    edi,0x8
c0009c00:	e8 e3 fc ff ff       	call   c00098e8 <fp_to_double>
c0009c05:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009c09:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009c0d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009c11:	e8 c8 fc ff ff       	call   c00098de <fp_to_int>
c0009c16:	8b 0c 86             	mov    ecx,DWORD PTR [esi+eax*4]
c0009c19:	52                   	push   edx
c0009c1a:	52                   	push   edx
c0009c1b:	51                   	push   ecx
c0009c1c:	89 4c 24 68          	mov    DWORD PTR [esp+0x68],ecx
c0009c20:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009c24:	e8 8f cb 01 00       	call   c00267b8 <__subsf3>
c0009c29:	89 04 24             	mov    DWORD PTR [esp],eax
c0009c2c:	e8 66 e2 01 00       	call   c0027e97 <__extendsfdf2>
c0009c31:	83 c4 10             	add    esp,0x10
c0009c34:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c38:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c3c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c40:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c44:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c48:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c4c:	e8 4f d8 01 00       	call   c00274a0 <__muldf3>
c0009c51:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0009c55:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009c59:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009c5c:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009c60:	e8 32 e2 01 00       	call   c0027e97 <__extendsfdf2>
c0009c65:	83 c4 10             	add    esp,0x10
c0009c68:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c6c:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c70:	52                   	push   edx
c0009c71:	50                   	push   eax
c0009c72:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c76:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c7a:	e8 a4 d1 01 00       	call   c0026e23 <__adddf3>
c0009c7f:	59                   	pop    ecx
c0009c80:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0009c84:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c0009c88:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009c8e:	e8 04 e2 01 00       	call   c0027e97 <__extendsfdf2>
c0009c93:	83 c4 10             	add    esp,0x10
c0009c96:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c9a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c9e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009ca2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009ca6:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009caa:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cae:	e8 ed d7 01 00       	call   c00274a0 <__muldf3>
c0009cb3:	83 c4 10             	add    esp,0x10
c0009cb6:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009cba:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009cbe:	52                   	push   edx
c0009cbf:	50                   	push   eax
c0009cc0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cc8:	e8 56 d1 01 00       	call   c0026e23 <__adddf3>
c0009ccd:	59                   	pop    ecx
c0009cce:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009cd2:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009cd6:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009cdc:	e8 b6 e1 01 00       	call   c0027e97 <__extendsfdf2>
c0009ce1:	83 c4 10             	add    esp,0x10
c0009ce4:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009ce8:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009cec:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cf0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cf4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cf8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cfc:	e8 9f d7 01 00       	call   c00274a0 <__muldf3>
c0009d01:	83 c4 10             	add    esp,0x10
c0009d04:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009d08:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009d0c:	52                   	push   edx
c0009d0d:	50                   	push   eax
c0009d0e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009d12:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009d16:	e8 08 d1 01 00       	call   c0026e23 <__adddf3>
c0009d1b:	83 c4 10             	add    esp,0x10
c0009d1e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009d22:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009d26:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009d2a:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0009d2e:	0f 89 c5 fe ff ff    	jns    c0009bf9 <calc_output_stereo+0x81>
c0009d34:	29 e9                	sub    ecx,ebp
c0009d36:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009d3a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0009d3e:	29 c8                	sub    eax,ecx
c0009d40:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009d48:	99                   	cdq    
c0009d49:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009d4d:	31 d2                	xor    edx,edx
c0009d4f:	0f af f8             	imul   edi,eax
c0009d52:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009d56:	40                   	inc    eax
c0009d57:	01 cf                	add    edi,ecx
c0009d59:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009d5e:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009d62:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0009d6a:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c0009d6d:	31 c0                	xor    eax,eax
c0009d6f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009d73:	89 f8                	mov    eax,edi
c0009d75:	83 eb 08             	sub    ebx,0x8
c0009d78:	e8 6b fb ff ff       	call   c00098e8 <fp_to_double>
c0009d7d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009d81:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009d85:	89 f8                	mov    eax,edi
c0009d87:	e8 52 fb ff ff       	call   c00098de <fp_to_int>
c0009d8c:	8b 2c 86             	mov    ebp,DWORD PTR [esi+eax*4]
c0009d8f:	52                   	push   edx
c0009d90:	52                   	push   edx
c0009d91:	55                   	push   ebp
c0009d92:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009d96:	e8 1d ca 01 00       	call   c00267b8 <__subsf3>
c0009d9b:	89 04 24             	mov    DWORD PTR [esp],eax
c0009d9e:	e8 f4 e0 01 00       	call   c0027e97 <__extendsfdf2>
c0009da3:	83 c4 10             	add    esp,0x10
c0009da6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009daa:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009dae:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009db2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009db6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009dba:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009dbe:	e8 dd d6 01 00       	call   c00274a0 <__muldf3>
c0009dc3:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009dc6:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009dca:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009dce:	e8 c4 e0 01 00       	call   c0027e97 <__extendsfdf2>
c0009dd3:	83 c4 10             	add    esp,0x10
c0009dd6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009dda:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009dde:	52                   	push   edx
c0009ddf:	50                   	push   eax
c0009de0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009de4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009de8:	e8 36 d0 01 00       	call   c0026e23 <__adddf3>
c0009ded:	59                   	pop    ecx
c0009dee:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009df2:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009df6:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c0009dfc:	e8 96 e0 01 00       	call   c0027e97 <__extendsfdf2>
c0009e01:	83 c4 10             	add    esp,0x10
c0009e04:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e08:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e0c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e10:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e14:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e18:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e1c:	e8 7f d6 01 00       	call   c00274a0 <__muldf3>
c0009e21:	83 c4 10             	add    esp,0x10
c0009e24:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e28:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e2c:	52                   	push   edx
c0009e2d:	50                   	push   eax
c0009e2e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e32:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e36:	e8 e8 cf 01 00       	call   c0026e23 <__adddf3>
c0009e3b:	5d                   	pop    ebp
c0009e3c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009e40:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009e44:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c0009e4a:	e8 48 e0 01 00       	call   c0027e97 <__extendsfdf2>
c0009e4f:	83 c4 10             	add    esp,0x10
c0009e52:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e56:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e5a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e5e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e62:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e66:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e6a:	e8 31 d6 01 00       	call   c00274a0 <__muldf3>
c0009e6f:	83 c4 10             	add    esp,0x10
c0009e72:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009e76:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009e7a:	52                   	push   edx
c0009e7b:	50                   	push   eax
c0009e7c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e80:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e84:	e8 9a cf 01 00       	call   c0026e23 <__adddf3>
c0009e89:	83 c4 10             	add    esp,0x10
c0009e8c:	2b 7c 24 08          	sub    edi,DWORD PTR [esp+0x8]
c0009e90:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009e94:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009e98:	85 ff                	test   edi,edi
c0009e9a:	0f 8f d3 fe ff ff    	jg     c0009d73 <calc_output_stereo+0x1fb>
c0009ea0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ea4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ea8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009eac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009eb0:	e8 6e cf 01 00       	call   c0026e23 <__adddf3>
c0009eb5:	83 c4 10             	add    esp,0x10
c0009eb8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009ebc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009ec0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ec4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ec8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ecc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ed0:	e8 cb d5 01 00       	call   c00274a0 <__muldf3>
c0009ed5:	59                   	pop    ecx
c0009ed6:	5b                   	pop    ebx
c0009ed7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009edb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009edf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ee3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ee7:	e8 87 de 01 00       	call   c0027d73 <__truncdfsf2>
c0009eec:	83 c4 10             	add    esp,0x10
c0009eef:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c0009ef6:	89 03                	mov    DWORD PTR [ebx],eax
c0009ef8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009efc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f00:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f04:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f08:	e8 16 cf 01 00       	call   c0026e23 <__adddf3>
c0009f0d:	83 c4 10             	add    esp,0x10
c0009f10:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009f14:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009f18:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009f1c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009f20:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f24:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f28:	e8 73 d5 01 00       	call   c00274a0 <__muldf3>
c0009f2d:	5e                   	pop    esi
c0009f2e:	5f                   	pop    edi
c0009f2f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f33:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f37:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f3f:	e8 2f de 01 00       	call   c0027d73 <__truncdfsf2>
c0009f44:	8b 9c 24 98 00 00 00 	mov    ebx,DWORD PTR [esp+0x98]
c0009f4b:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009f4e:	83 c4 7c             	add    esp,0x7c
c0009f51:	5b                   	pop    ebx
c0009f52:	5e                   	pop    esi
c0009f53:	5f                   	pop    edi
c0009f54:	5d                   	pop    ebp
c0009f55:	c3                   	ret    

c0009f56 <calc_output_quad>:
c0009f56:	55                   	push   ebp
c0009f57:	57                   	push   edi
c0009f58:	56                   	push   esi
c0009f59:	89 c6                	mov    esi,eax
c0009f5b:	53                   	push   ebx
c0009f5c:	83 ec 7c             	sub    esp,0x7c
c0009f5f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009f63:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0009f67:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0009f6e:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c0009f75:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f79:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f7d:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009f80:	e8 55 f9 ff ff       	call   c00098da <int_to_fp>
c0009f85:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0009f88:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0009f8b:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009f8f:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009f93:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0009f97:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009f9b:	99                   	cdq    
c0009f9c:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0009fa0:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009fa4:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c0009fa7:	31 d2                	xor    edx,edx
c0009fa9:	0f af d8             	imul   ebx,eax
c0009fac:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0009fb4:	0f af c7             	imul   eax,edi
c0009fb7:	03 5c 24 28          	add    ebx,DWORD PTR [esp+0x28]
c0009fbb:	29 c1                	sub    ecx,eax
c0009fbd:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0009fc5:	31 c0                	xor    eax,eax
c0009fc7:	8d 3c 8e             	lea    edi,[esi+ecx*4]
c0009fca:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009fce:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009fd2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009fd6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009fda:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009fde:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009fe2:	89 d8                	mov    eax,ebx
c0009fe4:	83 c7 10             	add    edi,0x10
c0009fe7:	e8 fc f8 ff ff       	call   c00098e8 <fp_to_double>
c0009fec:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009ff0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009ff4:	89 d8                	mov    eax,ebx
c0009ff6:	e8 e3 f8 ff ff       	call   c00098de <fp_to_int>
c0009ffb:	8b 4c 85 00          	mov    ecx,DWORD PTR [ebp+eax*4+0x0]
c0009fff:	52                   	push   edx
c000a000:	52                   	push   edx
c000a001:	51                   	push   ecx
c000a002:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
c000a006:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a00a:	e8 a9 c7 01 00       	call   c00267b8 <__subsf3>
c000a00f:	89 04 24             	mov    DWORD PTR [esp],eax
c000a012:	e8 80 de 01 00       	call   c0027e97 <__extendsfdf2>
c000a017:	83 c4 10             	add    esp,0x10
c000a01a:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a01e:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a022:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a026:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a02a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a02e:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a032:	e8 69 d4 01 00       	call   c00274a0 <__muldf3>
c000a037:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c000a03b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a03f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a042:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a046:	e8 4c de 01 00       	call   c0027e97 <__extendsfdf2>
c000a04b:	83 c4 10             	add    esp,0x10
c000a04e:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a052:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a056:	52                   	push   edx
c000a057:	50                   	push   eax
c000a058:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a05c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a060:	e8 be cd 01 00       	call   c0026e23 <__adddf3>
c000a065:	59                   	pop    ecx
c000a066:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a06a:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a06e:	ff b7 34 08 00 00    	push   DWORD PTR [edi+0x834]
c000a074:	e8 1e de 01 00       	call   c0027e97 <__extendsfdf2>
c000a079:	83 c4 10             	add    esp,0x10
c000a07c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a080:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a084:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a088:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a08c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a090:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a094:	e8 07 d4 01 00       	call   c00274a0 <__muldf3>
c000a099:	83 c4 10             	add    esp,0x10
c000a09c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0a0:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0a4:	52                   	push   edx
c000a0a5:	50                   	push   eax
c000a0a6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a0aa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a0ae:	e8 70 cd 01 00       	call   c0026e23 <__adddf3>
c000a0b3:	59                   	pop    ecx
c000a0b4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a0b8:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a0bc:	ff b7 38 08 00 00    	push   DWORD PTR [edi+0x838]
c000a0c2:	e8 d0 dd 01 00       	call   c0027e97 <__extendsfdf2>
c000a0c7:	83 c4 10             	add    esp,0x10
c000a0ca:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0ce:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0da:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0de:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0e2:	e8 b9 d3 01 00       	call   c00274a0 <__muldf3>
c000a0e7:	83 c4 10             	add    esp,0x10
c000a0ea:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0ee:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0f2:	52                   	push   edx
c000a0f3:	50                   	push   eax
c000a0f4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0f8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0fc:	e8 22 cd 01 00       	call   c0026e23 <__adddf3>
c000a101:	59                   	pop    ecx
c000a102:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a106:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a10a:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c000a110:	e8 82 dd 01 00       	call   c0027e97 <__extendsfdf2>
c000a115:	83 c4 10             	add    esp,0x10
c000a118:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a11c:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a120:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a124:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a128:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a12c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a130:	e8 6b d3 01 00       	call   c00274a0 <__muldf3>
c000a135:	83 c4 10             	add    esp,0x10
c000a138:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a13c:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a140:	52                   	push   edx
c000a141:	50                   	push   eax
c000a142:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a146:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a14a:	e8 d4 cc 01 00       	call   c0026e23 <__adddf3>
c000a14f:	59                   	pop    ecx
c000a150:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a154:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a158:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c000a15e:	e8 34 dd 01 00       	call   c0027e97 <__extendsfdf2>
c000a163:	83 c4 10             	add    esp,0x10
c000a166:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a16a:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a16e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a172:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a176:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a17a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a17e:	e8 1d d3 01 00       	call   c00274a0 <__muldf3>
c000a183:	83 c4 10             	add    esp,0x10
c000a186:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a18a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a18e:	52                   	push   edx
c000a18f:	50                   	push   eax
c000a190:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a194:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a198:	e8 86 cc 01 00       	call   c0026e23 <__adddf3>
c000a19d:	83 c4 10             	add    esp,0x10
c000a1a0:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a1a4:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a1a8:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a1ac:	0f 89 30 fe ff ff    	jns    c0009fe2 <calc_output_quad+0x8c>
c000a1b2:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a1b6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a1ba:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a1be:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000a1c2:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000a1ca:	29 c8                	sub    eax,ecx
c000a1cc:	99                   	cdq    
c000a1cd:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000a1d1:	31 d2                	xor    edx,edx
c000a1d3:	0f af d8             	imul   ebx,eax
c000a1d6:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a1da:	40                   	inc    eax
c000a1db:	01 cb                	add    ebx,ecx
c000a1dd:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c000a1e2:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000a1e6:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
c000a1ea:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a1ee:	8d 34 86             	lea    esi,[esi+eax*4]
c000a1f1:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c000a1f9:	31 c0                	xor    eax,eax
c000a1fb:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a1ff:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a203:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a207:	89 d8                	mov    eax,ebx
c000a209:	83 ee 10             	sub    esi,0x10
c000a20c:	e8 d7 f6 ff ff       	call   c00098e8 <fp_to_double>
c000a211:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a215:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a219:	89 d8                	mov    eax,ebx
c000a21b:	e8 be f6 ff ff       	call   c00098de <fp_to_int>
c000a220:	8b 7c 85 00          	mov    edi,DWORD PTR [ebp+eax*4+0x0]
c000a224:	52                   	push   edx
c000a225:	52                   	push   edx
c000a226:	57                   	push   edi
c000a227:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a22b:	e8 88 c5 01 00       	call   c00267b8 <__subsf3>
c000a230:	89 04 24             	mov    DWORD PTR [esp],eax
c000a233:	e8 5f dc 01 00       	call   c0027e97 <__extendsfdf2>
c000a238:	83 c4 10             	add    esp,0x10
c000a23b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a23f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a243:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a247:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a24b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a24f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a253:	e8 48 d2 01 00       	call   c00274a0 <__muldf3>
c000a258:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a25b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a25f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a263:	e8 2f dc 01 00       	call   c0027e97 <__extendsfdf2>
c000a268:	83 c4 10             	add    esp,0x10
c000a26b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a26f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a273:	52                   	push   edx
c000a274:	50                   	push   eax
c000a275:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a279:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a27d:	e8 a1 cb 01 00       	call   c0026e23 <__adddf3>
c000a282:	59                   	pop    ecx
c000a283:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a287:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a28b:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a291:	e8 01 dc 01 00       	call   c0027e97 <__extendsfdf2>
c000a296:	83 c4 10             	add    esp,0x10
c000a299:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a29d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2a1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2a5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2a9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2ad:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2b1:	e8 ea d1 01 00       	call   c00274a0 <__muldf3>
c000a2b6:	83 c4 10             	add    esp,0x10
c000a2b9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2bd:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2c1:	52                   	push   edx
c000a2c2:	50                   	push   eax
c000a2c3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a2c7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a2cb:	e8 53 cb 01 00       	call   c0026e23 <__adddf3>
c000a2d0:	5f                   	pop    edi
c000a2d1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a2d5:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a2d9:	ff b6 58 08 00 00    	push   DWORD PTR [esi+0x858]
c000a2df:	e8 b3 db 01 00       	call   c0027e97 <__extendsfdf2>
c000a2e4:	83 c4 10             	add    esp,0x10
c000a2e7:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2eb:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2f7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2fb:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2ff:	e8 9c d1 01 00       	call   c00274a0 <__muldf3>
c000a304:	83 c4 10             	add    esp,0x10
c000a307:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a30b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a30f:	52                   	push   edx
c000a310:	50                   	push   eax
c000a311:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a315:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a319:	e8 05 cb 01 00       	call   c0026e23 <__adddf3>
c000a31e:	59                   	pop    ecx
c000a31f:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a323:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a327:	ff b6 5c 08 00 00    	push   DWORD PTR [esi+0x85c]
c000a32d:	e8 65 db 01 00       	call   c0027e97 <__extendsfdf2>
c000a332:	83 c4 10             	add    esp,0x10
c000a335:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a339:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a33d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a341:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a345:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a349:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a34d:	e8 4e d1 01 00       	call   c00274a0 <__muldf3>
c000a352:	83 c4 10             	add    esp,0x10
c000a355:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a359:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a35d:	52                   	push   edx
c000a35e:	50                   	push   eax
c000a35f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a363:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a367:	e8 b7 ca 01 00       	call   c0026e23 <__adddf3>
c000a36c:	5f                   	pop    edi
c000a36d:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000a371:	89 54 24 60          	mov    DWORD PTR [esp+0x60],edx
c000a375:	ff b6 60 08 00 00    	push   DWORD PTR [esi+0x860]
c000a37b:	e8 17 db 01 00       	call   c0027e97 <__extendsfdf2>
c000a380:	83 c4 10             	add    esp,0x10
c000a383:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a387:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a38b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a38f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a393:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a397:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a39b:	e8 00 d1 01 00       	call   c00274a0 <__muldf3>
c000a3a0:	83 c4 10             	add    esp,0x10
c000a3a3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a3a7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a3ab:	52                   	push   edx
c000a3ac:	50                   	push   eax
c000a3ad:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a3b1:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a3b5:	e8 69 ca 01 00       	call   c0026e23 <__adddf3>
c000a3ba:	83 c4 10             	add    esp,0x10
c000a3bd:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a3c1:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000a3c5:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000a3c9:	85 db                	test   ebx,ebx
c000a3cb:	0f 8f 36 fe ff ff    	jg     c000a207 <calc_output_quad+0x2b1>
c000a3d1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3d5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3d9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3dd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3e1:	e8 3d ca 01 00       	call   c0026e23 <__adddf3>
c000a3e6:	83 c4 10             	add    esp,0x10
c000a3e9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a3ed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a3f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a401:	e8 9a d0 01 00       	call   c00274a0 <__muldf3>
c000a406:	59                   	pop    ecx
c000a407:	5b                   	pop    ebx
c000a408:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a40c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a410:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a414:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a418:	e8 56 d9 01 00       	call   c0027d73 <__truncdfsf2>
c000a41d:	83 c4 10             	add    esp,0x10
c000a420:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a427:	89 06                	mov    DWORD PTR [esi],eax
c000a429:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a42d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a431:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a435:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a439:	e8 e5 c9 01 00       	call   c0026e23 <__adddf3>
c000a43e:	83 c4 10             	add    esp,0x10
c000a441:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a445:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a449:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a44d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a451:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a455:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a459:	e8 42 d0 01 00       	call   c00274a0 <__muldf3>
c000a45e:	5e                   	pop    esi
c000a45f:	5f                   	pop    edi
c000a460:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a464:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a468:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a46c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a470:	e8 fe d8 01 00       	call   c0027d73 <__truncdfsf2>
c000a475:	83 c4 10             	add    esp,0x10
c000a478:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a47f:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c000a482:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a486:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a48a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a48e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a492:	e8 8c c9 01 00       	call   c0026e23 <__adddf3>
c000a497:	83 c4 10             	add    esp,0x10
c000a49a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a49e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a4a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4b2:	e8 e9 cf 01 00       	call   c00274a0 <__muldf3>
c000a4b7:	5d                   	pop    ebp
c000a4b8:	59                   	pop    ecx
c000a4b9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a4bd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a4c1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c9:	e8 a5 d8 01 00       	call   c0027d73 <__truncdfsf2>
c000a4ce:	83 c4 10             	add    esp,0x10
c000a4d1:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a4d8:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a4db:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4df:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4e3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4e7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4eb:	e8 33 c9 01 00       	call   c0026e23 <__adddf3>
c000a4f0:	83 c4 10             	add    esp,0x10
c000a4f3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a4f7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a4fb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a503:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a507:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a50b:	e8 90 cf 01 00       	call   c00274a0 <__muldf3>
c000a510:	5b                   	pop    ebx
c000a511:	5e                   	pop    esi
c000a512:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a516:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a51a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a51e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a522:	e8 4c d8 01 00       	call   c0027d73 <__truncdfsf2>
c000a527:	8b 8c 24 a8 00 00 00 	mov    ecx,DWORD PTR [esp+0xa8]
c000a52e:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000a531:	81 c4 8c 00 00 00    	add    esp,0x8c
c000a537:	5b                   	pop    ebx
c000a538:	5e                   	pop    esi
c000a539:	5f                   	pop    edi
c000a53a:	5d                   	pop    ebp
c000a53b:	c3                   	ret    

c000a53c <calc_output_hex>:
c000a53c:	55                   	push   ebp
c000a53d:	89 cd                	mov    ebp,ecx
c000a53f:	57                   	push   edi
c000a540:	56                   	push   esi
c000a541:	53                   	push   ebx
c000a542:	89 c3                	mov    ebx,eax
c000a544:	81 ec 8c 00 00 00    	sub    esp,0x8c
c000a54a:	89 14 24             	mov    DWORD PTR [esp],edx
c000a54d:	8b 84 24 a0 00 00 00 	mov    eax,DWORD PTR [esp+0xa0]
c000a554:	8b 94 24 a4 00 00 00 	mov    edx,DWORD PTR [esp+0xa4]
c000a55b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a55f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a563:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a566:	e8 6f f3 ff ff       	call   c00098da <int_to_fp>
c000a56b:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c000a56e:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a572:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000a575:	29 c8                	sub    eax,ecx
c000a577:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000a57b:	99                   	cdq    
c000a57c:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c000a584:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a587:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000a58f:	0f af f8             	imul   edi,eax
c000a592:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000a595:	01 cf                	add    edi,ecx
c000a597:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a59b:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000a59e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a5a2:	0f af c2             	imul   eax,edx
c000a5a5:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a5a9:	29 c1                	sub    ecx,eax
c000a5ab:	31 d2                	xor    edx,edx
c000a5ad:	31 c0                	xor    eax,eax
c000a5af:	8d 34 8b             	lea    esi,[ebx+ecx*4]
c000a5b2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a5b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a5ba:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a5be:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a5c2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a5c6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a5ca:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a5ce:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a5d2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a5d6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a5da:	89 f8                	mov    eax,edi
c000a5dc:	e8 07 f3 ff ff       	call   c00098e8 <fp_to_double>
c000a5e1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a5e5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a5e9:	89 f8                	mov    eax,edi
c000a5eb:	e8 ee f2 ff ff       	call   c00098de <fp_to_int>
c000a5f0:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a5f4:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a5f7:	52                   	push   edx
c000a5f8:	52                   	push   edx
c000a5f9:	51                   	push   ecx
c000a5fa:	89 4c 24 74          	mov    DWORD PTR [esp+0x74],ecx
c000a5fe:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a605:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a609:	e8 aa c1 01 00       	call   c00267b8 <__subsf3>
c000a60e:	89 04 24             	mov    DWORD PTR [esp],eax
c000a611:	e8 81 d8 01 00       	call   c0027e97 <__extendsfdf2>
c000a616:	83 c4 10             	add    esp,0x10
c000a619:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a61d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a621:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a625:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a629:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a62d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a631:	e8 6a ce 01 00       	call   c00274a0 <__muldf3>
c000a636:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a63a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a63e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a641:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a645:	e8 4d d8 01 00       	call   c0027e97 <__extendsfdf2>
c000a64a:	83 c4 10             	add    esp,0x10
c000a64d:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a651:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a655:	52                   	push   edx
c000a656:	50                   	push   eax
c000a657:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a65b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a65f:	e8 bf c7 01 00       	call   c0026e23 <__adddf3>
c000a664:	59                   	pop    ecx
c000a665:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a669:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a66d:	ff b6 44 08 00 00    	push   DWORD PTR [esi+0x844]
c000a673:	e8 1f d8 01 00       	call   c0027e97 <__extendsfdf2>
c000a678:	83 c4 10             	add    esp,0x10
c000a67b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a67f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a683:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a687:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a68b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a68f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a693:	e8 08 ce 01 00       	call   c00274a0 <__muldf3>
c000a698:	83 c4 10             	add    esp,0x10
c000a69b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a69f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6a3:	52                   	push   edx
c000a6a4:	50                   	push   eax
c000a6a5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a6a9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a6ad:	e8 71 c7 01 00       	call   c0026e23 <__adddf3>
c000a6b2:	59                   	pop    ecx
c000a6b3:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a6b7:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a6bb:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c000a6c1:	e8 d1 d7 01 00       	call   c0027e97 <__extendsfdf2>
c000a6c6:	83 c4 10             	add    esp,0x10
c000a6c9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6cd:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6d9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6dd:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6e1:	e8 ba cd 01 00       	call   c00274a0 <__muldf3>
c000a6e6:	83 c4 10             	add    esp,0x10
c000a6e9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6ed:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6f1:	52                   	push   edx
c000a6f2:	50                   	push   eax
c000a6f3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6f7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6fb:	e8 23 c7 01 00       	call   c0026e23 <__adddf3>
c000a700:	59                   	pop    ecx
c000a701:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000a705:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c000a709:	ff b6 4c 08 00 00    	push   DWORD PTR [esi+0x84c]
c000a70f:	e8 83 d7 01 00       	call   c0027e97 <__extendsfdf2>
c000a714:	83 c4 10             	add    esp,0x10
c000a717:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a71b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a71f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a723:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a727:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a72b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a72f:	e8 6c cd 01 00       	call   c00274a0 <__muldf3>
c000a734:	83 c4 10             	add    esp,0x10
c000a737:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a73b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a73f:	52                   	push   edx
c000a740:	50                   	push   eax
c000a741:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a745:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a749:	e8 d5 c6 01 00       	call   c0026e23 <__adddf3>
c000a74e:	59                   	pop    ecx
c000a74f:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a753:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a757:	ff b6 50 08 00 00    	push   DWORD PTR [esi+0x850]
c000a75d:	e8 35 d7 01 00       	call   c0027e97 <__extendsfdf2>
c000a762:	83 c4 10             	add    esp,0x10
c000a765:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a769:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a76d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a771:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a775:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a779:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a77d:	e8 1e cd 01 00       	call   c00274a0 <__muldf3>
c000a782:	83 c4 10             	add    esp,0x10
c000a785:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a789:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a78d:	52                   	push   edx
c000a78e:	50                   	push   eax
c000a78f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a793:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a797:	e8 87 c6 01 00       	call   c0026e23 <__adddf3>
c000a79c:	59                   	pop    ecx
c000a79d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a7a1:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a7a5:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a7ab:	e8 e7 d6 01 00       	call   c0027e97 <__extendsfdf2>
c000a7b0:	83 c4 10             	add    esp,0x10
c000a7b3:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7b7:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7c3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7c7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7cb:	e8 d0 cc 01 00       	call   c00274a0 <__muldf3>
c000a7d0:	83 c4 10             	add    esp,0x10
c000a7d3:	83 c6 18             	add    esi,0x18
c000a7d6:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7da:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7de:	52                   	push   edx
c000a7df:	50                   	push   eax
c000a7e0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7e4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7e8:	e8 36 c6 01 00       	call   c0026e23 <__adddf3>
c000a7ed:	59                   	pop    ecx
c000a7ee:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a7f2:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a7f6:	ff b6 40 08 00 00    	push   DWORD PTR [esi+0x840]
c000a7fc:	e8 96 d6 01 00       	call   c0027e97 <__extendsfdf2>
c000a801:	83 c4 10             	add    esp,0x10
c000a804:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a808:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a80c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a810:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a814:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a818:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a81c:	e8 7f cc 01 00       	call   c00274a0 <__muldf3>
c000a821:	83 c4 10             	add    esp,0x10
c000a824:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a828:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a82c:	52                   	push   edx
c000a82d:	50                   	push   eax
c000a82e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a832:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a836:	e8 e8 c5 01 00       	call   c0026e23 <__adddf3>
c000a83b:	83 c4 10             	add    esp,0x10
c000a83e:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a842:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a846:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c000a849:	0f 89 8b fd ff ff    	jns    c000a5da <calc_output_hex+0x9e>
c000a84f:	31 f6                	xor    esi,esi
c000a851:	31 ff                	xor    edi,edi
c000a853:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a857:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a85a:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
c000a85e:	29 e9                	sub    ecx,ebp
c000a860:	89 74 24 58          	mov    DWORD PTR [esp+0x58],esi
c000a864:	29 c8                	sub    eax,ecx
c000a866:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a869:	99                   	cdq    
c000a86a:	89 7c 24 5c          	mov    DWORD PTR [esp+0x5c],edi
c000a86e:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a871:	89 74 24 60          	mov    DWORD PTR [esp+0x60],esi
c000a875:	0f af e8             	imul   ebp,eax
c000a878:	89 7c 24 64          	mov    DWORD PTR [esp+0x64],edi
c000a87c:	40                   	inc    eax
c000a87d:	01 cd                	add    ebp,ecx
c000a87f:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c000a884:	89 74 24 68          	mov    DWORD PTR [esp+0x68],esi
c000a888:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a88c:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000a890:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c000a893:	89 7c 24 6c          	mov    DWORD PTR [esp+0x6c],edi
c000a897:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000a89b:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000a89f:	89 e8                	mov    eax,ebp
c000a8a1:	e8 42 f0 ff ff       	call   c00098e8 <fp_to_double>
c000a8a6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a8aa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a8ae:	89 e8                	mov    eax,ebp
c000a8b0:	e8 29 f0 ff ff       	call   c00098de <fp_to_int>
c000a8b5:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a8b9:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a8bc:	52                   	push   edx
c000a8bd:	52                   	push   edx
c000a8be:	51                   	push   ecx
c000a8bf:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c000a8c6:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a8cd:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a8d1:	e8 e2 be 01 00       	call   c00267b8 <__subsf3>
c000a8d6:	89 04 24             	mov    DWORD PTR [esp],eax
c000a8d9:	e8 b9 d5 01 00       	call   c0027e97 <__extendsfdf2>
c000a8de:	83 c4 10             	add    esp,0x10
c000a8e1:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8e5:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8f1:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8f5:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8f9:	e8 a2 cb 01 00       	call   c00274a0 <__muldf3>
c000a8fe:	8b 8c 24 8c 00 00 00 	mov    ecx,DWORD PTR [esp+0x8c]
c000a905:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a909:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a90c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a910:	e8 82 d5 01 00       	call   c0027e97 <__extendsfdf2>
c000a915:	83 c4 10             	add    esp,0x10
c000a918:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a91c:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a920:	52                   	push   edx
c000a921:	50                   	push   eax
c000a922:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a926:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a92a:	e8 f4 c4 01 00       	call   c0026e23 <__adddf3>
c000a92f:	59                   	pop    ecx
c000a930:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a934:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a938:	ff b3 44 08 00 00    	push   DWORD PTR [ebx+0x844]
c000a93e:	e8 54 d5 01 00       	call   c0027e97 <__extendsfdf2>
c000a943:	83 c4 10             	add    esp,0x10
c000a946:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a94a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a94e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a952:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a956:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a95a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a95e:	e8 3d cb 01 00       	call   c00274a0 <__muldf3>
c000a963:	83 c4 10             	add    esp,0x10
c000a966:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a96a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a96e:	52                   	push   edx
c000a96f:	50                   	push   eax
c000a970:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a974:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a978:	e8 a6 c4 01 00       	call   c0026e23 <__adddf3>
c000a97d:	59                   	pop    ecx
c000a97e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a982:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a986:	ff b3 48 08 00 00    	push   DWORD PTR [ebx+0x848]
c000a98c:	e8 06 d5 01 00       	call   c0027e97 <__extendsfdf2>
c000a991:	83 c4 10             	add    esp,0x10
c000a994:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a998:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a99c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9a0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9a4:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9a8:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9ac:	e8 ef ca 01 00       	call   c00274a0 <__muldf3>
c000a9b1:	83 c4 10             	add    esp,0x10
c000a9b4:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9b8:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9bc:	52                   	push   edx
c000a9bd:	50                   	push   eax
c000a9be:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a9c2:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a9c6:	e8 58 c4 01 00       	call   c0026e23 <__adddf3>
c000a9cb:	59                   	pop    ecx
c000a9cc:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000a9d0:	89 54 24 78          	mov    DWORD PTR [esp+0x78],edx
c000a9d4:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c000a9da:	e8 b8 d4 01 00       	call   c0027e97 <__extendsfdf2>
c000a9df:	83 c4 10             	add    esp,0x10
c000a9e2:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9e6:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9f2:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9f6:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9fa:	e8 a1 ca 01 00       	call   c00274a0 <__muldf3>
c000a9ff:	83 c4 10             	add    esp,0x10
c000aa02:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa06:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa0a:	52                   	push   edx
c000aa0b:	50                   	push   eax
c000aa0c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000aa10:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000aa14:	e8 0a c4 01 00       	call   c0026e23 <__adddf3>
c000aa19:	59                   	pop    ecx
c000aa1a:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000aa1e:	89 54 24 70          	mov    DWORD PTR [esp+0x70],edx
c000aa22:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000aa28:	e8 6a d4 01 00       	call   c0027e97 <__extendsfdf2>
c000aa2d:	83 c4 10             	add    esp,0x10
c000aa30:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa34:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa3c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa40:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa44:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa48:	e8 53 ca 01 00       	call   c00274a0 <__muldf3>
c000aa4d:	83 c4 10             	add    esp,0x10
c000aa50:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa54:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa58:	52                   	push   edx
c000aa59:	50                   	push   eax
c000aa5a:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa5e:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa62:	e8 bc c3 01 00       	call   c0026e23 <__adddf3>
c000aa67:	59                   	pop    ecx
c000aa68:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000aa6c:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000aa70:	ff b3 54 08 00 00    	push   DWORD PTR [ebx+0x854]
c000aa76:	e8 1c d4 01 00       	call   c0027e97 <__extendsfdf2>
c000aa7b:	83 c4 10             	add    esp,0x10
c000aa7e:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa82:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa86:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa8a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa8e:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa92:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa96:	e8 05 ca 01 00       	call   c00274a0 <__muldf3>
c000aa9b:	83 c4 10             	add    esp,0x10
c000aa9e:	83 eb 18             	sub    ebx,0x18
c000aaa1:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aaa5:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aaa9:	52                   	push   edx
c000aaaa:	50                   	push   eax
c000aaab:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aaaf:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aab3:	e8 6b c3 01 00       	call   c0026e23 <__adddf3>
c000aab8:	59                   	pop    ecx
c000aab9:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000aabd:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c000aac1:	ff b3 70 08 00 00    	push   DWORD PTR [ebx+0x870]
c000aac7:	e8 cb d3 01 00       	call   c0027e97 <__extendsfdf2>
c000aacc:	83 c4 10             	add    esp,0x10
c000aacf:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aad3:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aad7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aadb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aadf:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aae3:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aae7:	e8 b4 c9 01 00       	call   c00274a0 <__muldf3>
c000aaec:	83 c4 10             	add    esp,0x10
c000aaef:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aaf3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000aaf7:	52                   	push   edx
c000aaf8:	50                   	push   eax
c000aaf9:	57                   	push   edi
c000aafa:	56                   	push   esi
c000aafb:	e8 23 c3 01 00       	call   c0026e23 <__adddf3>
c000ab00:	83 c4 10             	add    esp,0x10
c000ab03:	89 c6                	mov    esi,eax
c000ab05:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c000ab08:	89 d7                	mov    edi,edx
c000ab0a:	85 ed                	test   ebp,ebp
c000ab0c:	0f 8f 8d fd ff ff    	jg     c000a89f <calc_output_hex+0x363>
c000ab12:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab16:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab1a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab1e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab22:	e8 fc c2 01 00       	call   c0026e23 <__adddf3>
c000ab27:	83 c4 10             	add    esp,0x10
c000ab2a:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab2d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab31:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab35:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab39:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab3d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab41:	e8 5a c9 01 00       	call   c00274a0 <__muldf3>
c000ab46:	59                   	pop    ecx
c000ab47:	5b                   	pop    ebx
c000ab48:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab4c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab50:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab54:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab58:	e8 16 d2 01 00       	call   c0027d73 <__truncdfsf2>
c000ab5d:	83 c4 10             	add    esp,0x10
c000ab60:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ab67:	89 03                	mov    DWORD PTR [ebx],eax
c000ab69:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab6d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab71:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab75:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab79:	e8 a5 c2 01 00       	call   c0026e23 <__adddf3>
c000ab7e:	83 c4 10             	add    esp,0x10
c000ab81:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab84:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab88:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab8c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab90:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab94:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab98:	e8 03 c9 01 00       	call   c00274a0 <__muldf3>
c000ab9d:	5d                   	pop    ebp
c000ab9e:	59                   	pop    ecx
c000ab9f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aba3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aba7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abab:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abaf:	e8 bf d1 01 00       	call   c0027d73 <__truncdfsf2>
c000abb4:	83 c4 10             	add    esp,0x10
c000abb7:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000abbe:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000abc1:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000abc5:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000abc9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000abcd:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000abd1:	e8 4d c2 01 00       	call   c0026e23 <__adddf3>
c000abd6:	83 c4 10             	add    esp,0x10
c000abd9:	89 04 24             	mov    DWORD PTR [esp],eax
c000abdc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000abe0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abe4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abe8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abec:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abf0:	e8 ab c8 01 00       	call   c00274a0 <__muldf3>
c000abf5:	5b                   	pop    ebx
c000abf6:	5d                   	pop    ebp
c000abf7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000abfb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000abff:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac03:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac07:	e8 67 d1 01 00       	call   c0027d73 <__truncdfsf2>
c000ac0c:	83 c4 10             	add    esp,0x10
c000ac0f:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac16:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ac19:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac1d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac21:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ac25:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ac29:	e8 f5 c1 01 00       	call   c0026e23 <__adddf3>
c000ac2e:	83 c4 10             	add    esp,0x10
c000ac31:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac34:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac38:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac3c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac40:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac44:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac48:	e8 53 c8 01 00       	call   c00274a0 <__muldf3>
c000ac4d:	59                   	pop    ecx
c000ac4e:	5b                   	pop    ebx
c000ac4f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac53:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac57:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5f:	e8 0f d1 01 00       	call   c0027d73 <__truncdfsf2>
c000ac64:	83 c4 10             	add    esp,0x10
c000ac67:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac6e:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000ac71:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac75:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac79:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac7d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac81:	e8 9d c1 01 00       	call   c0026e23 <__adddf3>
c000ac86:	83 c4 10             	add    esp,0x10
c000ac89:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac8c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac90:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac94:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac98:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac9c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aca0:	e8 fb c7 01 00       	call   c00274a0 <__muldf3>
c000aca5:	5d                   	pop    ebp
c000aca6:	59                   	pop    ecx
c000aca7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000acab:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000acaf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb7:	e8 b7 d0 01 00       	call   c0027d73 <__truncdfsf2>
c000acbc:	83 c4 10             	add    esp,0x10
c000acbf:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000acc6:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000acc9:	57                   	push   edi
c000acca:	56                   	push   esi
c000accb:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000accf:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000acd3:	e8 4b c1 01 00       	call   c0026e23 <__adddf3>
c000acd8:	83 c4 10             	add    esp,0x10
c000acdb:	89 04 24             	mov    DWORD PTR [esp],eax
c000acde:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ace2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ace6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acea:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acf2:	e8 a9 c7 01 00       	call   c00274a0 <__muldf3>
c000acf7:	5b                   	pop    ebx
c000acf8:	5e                   	pop    esi
c000acf9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000acfd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ad01:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad05:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad09:	e8 65 d0 01 00       	call   c0027d73 <__truncdfsf2>
c000ad0e:	8b bc 24 b8 00 00 00 	mov    edi,DWORD PTR [esp+0xb8]
c000ad15:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000ad18:	81 c4 9c 00 00 00    	add    esp,0x9c
c000ad1e:	5b                   	pop    ebx
c000ad1f:	5e                   	pop    esi
c000ad20:	5f                   	pop    edi
c000ad21:	5d                   	pop    ebp
c000ad22:	c3                   	ret    

c000ad23 <sinc_reset>:
c000ad23:	56                   	push   esi
c000ad24:	53                   	push   ebx
c000ad25:	51                   	push   ecx
c000ad26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad2a:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000ad2d:	85 db                	test   ebx,ebx
c000ad2f:	74 59                	je     c000ad8a <sinc_reset+0x67>
c000ad31:	31 d2                	xor    edx,edx
c000ad33:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000ad3a:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000ad3d:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000ad40:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000ad47:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c000ad4e:	31 c0                	xor    eax,eax
c000ad50:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c000ad56:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c000ad59:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000ad5c:	52                   	push   edx
c000ad5d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad60:	c1 e0 02             	shl    eax,0x2
c000ad63:	50                   	push   eax
c000ad64:	6a 00                	push   0x0
c000ad66:	56                   	push   esi
c000ad67:	e8 0c 5a ff ff       	call   c0000778 <memset>
c000ad6c:	83 c4 0c             	add    esp,0xc
c000ad6f:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ad72:	c1 e0 02             	shl    eax,0x2
c000ad75:	50                   	push   eax
c000ad76:	68 aa 00 00 00       	push   0xaa
c000ad7b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad7e:	8d 04 86             	lea    eax,[esi+eax*4]
c000ad81:	50                   	push   eax
c000ad82:	e8 f1 59 ff ff       	call   c0000778 <memset>
c000ad87:	83 c4 10             	add    esp,0x10
c000ad8a:	58                   	pop    eax
c000ad8b:	5b                   	pop    ebx
c000ad8c:	5e                   	pop    esi
c000ad8d:	c3                   	ret    

c000ad8e <calc_output_multi>:
c000ad8e:	55                   	push   ebp
c000ad8f:	57                   	push   edi
c000ad90:	56                   	push   esi
c000ad91:	89 c6                	mov    esi,eax
c000ad93:	53                   	push   ebx
c000ad94:	83 ec 4c             	sub    esp,0x4c
c000ad97:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000ad9b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000ad9f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ada3:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000ada7:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c000adab:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000adaf:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000adb3:	8d 46 44             	lea    eax,[esi+0x44]
c000adb6:	89 04 24             	mov    DWORD PTR [esp],eax
c000adb9:	8d 86 44 04 00 00    	lea    eax,[esi+0x444]
c000adbf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000adc3:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000adc6:	e8 0f eb ff ff       	call   c00098da <int_to_fp>
c000adcb:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000adce:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000add2:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000add6:	99                   	cdq    
c000add7:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000addb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000addf:	0f af d0             	imul   edx,eax
c000ade2:	0f af c3             	imul   eax,ebx
c000ade5:	03 54 24 28          	add    edx,DWORD PTR [esp+0x28]
c000ade9:	29 c1                	sub    ecx,eax
c000adeb:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000adef:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000adf3:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000adfa:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000adfe:	57                   	push   edi
c000adff:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ae03:	6a 00                	push   0x0
c000ae05:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ae09:	e8 6a 59 ff ff       	call   c0000778 <memset>
c000ae0e:	83 c4 10             	add    esp,0x10
c000ae11:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ae15:	89 df                	mov    edi,ebx
c000ae17:	e8 cc ea ff ff       	call   c00098e8 <fp_to_double>
c000ae1c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae20:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ae24:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ae28:	e8 b1 ea ff ff       	call   c00098de <fp_to_int>
c000ae2d:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000ae30:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000ae33:	51                   	push   ecx
c000ae34:	51                   	push   ecx
c000ae35:	55                   	push   ebp
c000ae36:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000ae3a:	e8 79 b9 01 00       	call   c00267b8 <__subsf3>
c000ae3f:	89 04 24             	mov    DWORD PTR [esp],eax
c000ae42:	e8 50 d0 01 00       	call   c0027e97 <__extendsfdf2>
c000ae47:	83 c4 10             	add    esp,0x10
c000ae4a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae4e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae52:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae56:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae5a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae5e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae62:	e8 39 c6 01 00       	call   c00274a0 <__muldf3>
c000ae67:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ae6a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ae6e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ae72:	e8 20 d0 01 00       	call   c0027e97 <__extendsfdf2>
c000ae77:	83 c4 10             	add    esp,0x10
c000ae7a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae7e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae82:	52                   	push   edx
c000ae83:	50                   	push   eax
c000ae84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae8c:	e8 92 bf 01 00       	call   c0026e23 <__adddf3>
c000ae91:	83 c4 10             	add    esp,0x10
c000ae94:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae98:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ae9c:	89 f8                	mov    eax,edi
c000ae9e:	b9 08 00 00 00       	mov    ecx,0x8
c000aea3:	99                   	cdq    
c000aea4:	f7 f9                	idiv   ecx
c000aea6:	4a                   	dec    edx
c000aea7:	83 fa 06             	cmp    edx,0x6
c000aeaa:	77 07                	ja     c000aeb3 <calc_output_multi+0x125>
c000aeac:	ff 24 95 a4 96 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd695c]
c000aeb3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aeb6:	4f                   	dec    edi
c000aeb7:	83 ec 0c             	sub    esp,0xc
c000aeba:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000aebd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aec1:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000aec8:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000aecc:	e8 c6 cf 01 00       	call   c0027e97 <__extendsfdf2>
c000aed1:	83 c4 10             	add    esp,0x10
c000aed4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aed8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aedc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aee0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aee4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aee8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aeec:	e8 af c5 01 00       	call   c00274a0 <__muldf3>
c000aef1:	83 c4 10             	add    esp,0x10
c000aef4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aef8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aefc:	52                   	push   edx
c000aefd:	50                   	push   eax
c000aefe:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af01:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af04:	e8 1a bf 01 00       	call   c0026e23 <__adddf3>
c000af09:	83 c4 10             	add    esp,0x10
c000af0c:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af0f:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af12:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af15:	4f                   	dec    edi
c000af16:	83 ec 0c             	sub    esp,0xc
c000af19:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af1c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af20:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af27:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af2b:	e8 67 cf 01 00       	call   c0027e97 <__extendsfdf2>
c000af30:	83 c4 10             	add    esp,0x10
c000af33:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af37:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af3f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af43:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af47:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af4b:	e8 50 c5 01 00       	call   c00274a0 <__muldf3>
c000af50:	83 c4 10             	add    esp,0x10
c000af53:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af57:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af5b:	52                   	push   edx
c000af5c:	50                   	push   eax
c000af5d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af60:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af63:	e8 bb be 01 00       	call   c0026e23 <__adddf3>
c000af68:	83 c4 10             	add    esp,0x10
c000af6b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af6e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af71:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af74:	4f                   	dec    edi
c000af75:	83 ec 0c             	sub    esp,0xc
c000af78:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af7b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af7f:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af86:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af8a:	e8 08 cf 01 00       	call   c0027e97 <__extendsfdf2>
c000af8f:	83 c4 10             	add    esp,0x10
c000af92:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af96:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af9a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af9e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afa2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afa6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afaa:	e8 f1 c4 01 00       	call   c00274a0 <__muldf3>
c000afaf:	83 c4 10             	add    esp,0x10
c000afb2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afb6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afba:	52                   	push   edx
c000afbb:	50                   	push   eax
c000afbc:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000afbf:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000afc2:	e8 5c be 01 00       	call   c0026e23 <__adddf3>
c000afc7:	83 c4 10             	add    esp,0x10
c000afca:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000afcd:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000afd0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000afd3:	4f                   	dec    edi
c000afd4:	83 ec 0c             	sub    esp,0xc
c000afd7:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000afda:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000afde:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000afe5:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000afe9:	e8 a9 ce 01 00       	call   c0027e97 <__extendsfdf2>
c000afee:	83 c4 10             	add    esp,0x10
c000aff1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aff5:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aff9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000affd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b001:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b005:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b009:	e8 92 c4 01 00       	call   c00274a0 <__muldf3>
c000b00e:	83 c4 10             	add    esp,0x10
c000b011:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b015:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b019:	52                   	push   edx
c000b01a:	50                   	push   eax
c000b01b:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b01e:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b021:	e8 fd bd 01 00       	call   c0026e23 <__adddf3>
c000b026:	83 c4 10             	add    esp,0x10
c000b029:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b02c:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b02f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b032:	4f                   	dec    edi
c000b033:	83 ec 0c             	sub    esp,0xc
c000b036:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b039:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b03d:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b044:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b048:	e8 4a ce 01 00       	call   c0027e97 <__extendsfdf2>
c000b04d:	83 c4 10             	add    esp,0x10
c000b050:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b054:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b058:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b05c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b060:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b064:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b068:	e8 33 c4 01 00       	call   c00274a0 <__muldf3>
c000b06d:	83 c4 10             	add    esp,0x10
c000b070:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b074:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b078:	52                   	push   edx
c000b079:	50                   	push   eax
c000b07a:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b07d:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b080:	e8 9e bd 01 00       	call   c0026e23 <__adddf3>
c000b085:	83 c4 10             	add    esp,0x10
c000b088:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b08b:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b08e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b091:	4f                   	dec    edi
c000b092:	83 ec 0c             	sub    esp,0xc
c000b095:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b098:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b09c:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b0a3:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b0a7:	e8 eb cd 01 00       	call   c0027e97 <__extendsfdf2>
c000b0ac:	83 c4 10             	add    esp,0x10
c000b0af:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0b3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0bf:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0c3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0c7:	e8 d4 c3 01 00       	call   c00274a0 <__muldf3>
c000b0cc:	83 c4 10             	add    esp,0x10
c000b0cf:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0d3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0d7:	52                   	push   edx
c000b0d8:	50                   	push   eax
c000b0d9:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b0dc:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b0df:	e8 3f bd 01 00       	call   c0026e23 <__adddf3>
c000b0e4:	83 c4 10             	add    esp,0x10
c000b0e7:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b0ea:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b0ed:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b0f0:	4f                   	dec    edi
c000b0f1:	83 ec 0c             	sub    esp,0xc
c000b0f4:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b0f7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b0fb:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b102:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b106:	e8 8c cd 01 00       	call   c0027e97 <__extendsfdf2>
c000b10b:	83 c4 10             	add    esp,0x10
c000b10e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b112:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b116:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b11a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b11e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b122:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b126:	e8 75 c3 01 00       	call   c00274a0 <__muldf3>
c000b12b:	83 c4 10             	add    esp,0x10
c000b12e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b132:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b136:	52                   	push   edx
c000b137:	50                   	push   eax
c000b138:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b13b:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b13e:	e8 e0 bc 01 00       	call   c0026e23 <__adddf3>
c000b143:	83 c4 10             	add    esp,0x10
c000b146:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b149:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b14c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b14f:	4f                   	dec    edi
c000b150:	83 ec 0c             	sub    esp,0xc
c000b153:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b156:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b15a:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b161:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b165:	e8 2d cd 01 00       	call   c0027e97 <__extendsfdf2>
c000b16a:	83 c4 10             	add    esp,0x10
c000b16d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b171:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b175:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b179:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b17d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b181:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b185:	e8 16 c3 01 00       	call   c00274a0 <__muldf3>
c000b18a:	83 c4 10             	add    esp,0x10
c000b18d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b191:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b195:	52                   	push   edx
c000b196:	50                   	push   eax
c000b197:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b19a:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b19d:	e8 81 bc 01 00       	call   c0026e23 <__adddf3>
c000b1a2:	83 c4 10             	add    esp,0x10
c000b1a5:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b1a8:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b1ab:	85 ff                	test   edi,edi
c000b1ad:	0f 8f e9 fc ff ff    	jg     c000ae9c <calc_output_multi+0x10e>
c000b1b3:	01 5c 24 08          	add    DWORD PTR [esp+0x8],ebx
c000b1b7:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b1bb:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b1bf:	0f 89 4c fc ff ff    	jns    c000ae11 <calc_output_multi+0x83>
c000b1c5:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000b1c9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b1cd:	29 c8                	sub    eax,ecx
c000b1cf:	99                   	cdq    
c000b1d0:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000b1d4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000b1d8:	0f af d0             	imul   edx,eax
c000b1db:	40                   	inc    eax
c000b1dc:	01 d1                	add    ecx,edx
c000b1de:	0f af c3             	imul   eax,ebx
c000b1e1:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000b1e5:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c000b1e8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b1ec:	55                   	push   ebp
c000b1ed:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1f1:	6a 00                	push   0x0
c000b1f3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b1f7:	e8 7c 55 ff ff       	call   c0000778 <memset>
c000b1fc:	83 c4 10             	add    esp,0x10
c000b1ff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b203:	e8 e0 e6 ff ff       	call   c00098e8 <fp_to_double>
c000b208:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b20c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b210:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b214:	e8 c5 e6 ff ff       	call   c00098de <fp_to_int>
c000b219:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000b21c:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000b21f:	57                   	push   edi
c000b220:	57                   	push   edi
c000b221:	89 df                	mov    edi,ebx
c000b223:	55                   	push   ebp
c000b224:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000b228:	e8 8b b5 01 00       	call   c00267b8 <__subsf3>
c000b22d:	89 04 24             	mov    DWORD PTR [esp],eax
c000b230:	e8 62 cc 01 00       	call   c0027e97 <__extendsfdf2>
c000b235:	83 c4 10             	add    esp,0x10
c000b238:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b23c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b240:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b244:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b248:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b24c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b250:	e8 4b c2 01 00       	call   c00274a0 <__muldf3>
c000b255:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b258:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b25c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b260:	e8 32 cc 01 00       	call   c0027e97 <__extendsfdf2>
c000b265:	83 c4 10             	add    esp,0x10
c000b268:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b26c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b270:	52                   	push   edx
c000b271:	50                   	push   eax
c000b272:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b276:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b27a:	e8 a4 bb 01 00       	call   c0026e23 <__adddf3>
c000b27f:	83 c4 10             	add    esp,0x10
c000b282:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b286:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b28a:	89 f8                	mov    eax,edi
c000b28c:	b9 08 00 00 00       	mov    ecx,0x8
c000b291:	99                   	cdq    
c000b292:	f7 f9                	idiv   ecx
c000b294:	4a                   	dec    edx
c000b295:	83 fa 06             	cmp    edx,0x6
c000b298:	77 07                	ja     c000b2a1 <calc_output_multi+0x513>
c000b29a:	ff 24 95 c0 96 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd6940]
c000b2a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b2a5:	4f                   	dec    edi
c000b2a6:	83 ec 0c             	sub    esp,0xc
c000b2a9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b2ac:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b2b0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b2b7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b2bb:	e8 d7 cb 01 00       	call   c0027e97 <__extendsfdf2>
c000b2c0:	83 c4 10             	add    esp,0x10
c000b2c3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2c7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2cb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2cf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2d3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2d7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2db:	e8 c0 c1 01 00       	call   c00274a0 <__muldf3>
c000b2e0:	83 c4 10             	add    esp,0x10
c000b2e3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2e7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2eb:	52                   	push   edx
c000b2ec:	50                   	push   eax
c000b2ed:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b2f0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b2f3:	e8 2b bb 01 00       	call   c0026e23 <__adddf3>
c000b2f8:	83 c4 10             	add    esp,0x10
c000b2fb:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b2fe:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b301:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b305:	4f                   	dec    edi
c000b306:	83 ec 0c             	sub    esp,0xc
c000b309:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b30c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b310:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b317:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b31b:	e8 77 cb 01 00       	call   c0027e97 <__extendsfdf2>
c000b320:	83 c4 10             	add    esp,0x10
c000b323:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b327:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b32b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b32f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b333:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b337:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b33b:	e8 60 c1 01 00       	call   c00274a0 <__muldf3>
c000b340:	83 c4 10             	add    esp,0x10
c000b343:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b347:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b34b:	52                   	push   edx
c000b34c:	50                   	push   eax
c000b34d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b350:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b353:	e8 cb ba 01 00       	call   c0026e23 <__adddf3>
c000b358:	83 c4 10             	add    esp,0x10
c000b35b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b35e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b361:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b365:	4f                   	dec    edi
c000b366:	83 ec 0c             	sub    esp,0xc
c000b369:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b36c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b370:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b377:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b37b:	e8 17 cb 01 00       	call   c0027e97 <__extendsfdf2>
c000b380:	83 c4 10             	add    esp,0x10
c000b383:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b387:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b38b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b38f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b393:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b397:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b39b:	e8 00 c1 01 00       	call   c00274a0 <__muldf3>
c000b3a0:	83 c4 10             	add    esp,0x10
c000b3a3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3a7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3ab:	52                   	push   edx
c000b3ac:	50                   	push   eax
c000b3ad:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b3b0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b3b3:	e8 6b ba 01 00       	call   c0026e23 <__adddf3>
c000b3b8:	83 c4 10             	add    esp,0x10
c000b3bb:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b3be:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b3c1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b3c5:	4f                   	dec    edi
c000b3c6:	83 ec 0c             	sub    esp,0xc
c000b3c9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b3cc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b3d0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b3d7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b3db:	e8 b7 ca 01 00       	call   c0027e97 <__extendsfdf2>
c000b3e0:	83 c4 10             	add    esp,0x10
c000b3e3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3e7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3eb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3f3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3f7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3fb:	e8 a0 c0 01 00       	call   c00274a0 <__muldf3>
c000b400:	83 c4 10             	add    esp,0x10
c000b403:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b407:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b40b:	52                   	push   edx
c000b40c:	50                   	push   eax
c000b40d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b410:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b413:	e8 0b ba 01 00       	call   c0026e23 <__adddf3>
c000b418:	83 c4 10             	add    esp,0x10
c000b41b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b41e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b421:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b425:	4f                   	dec    edi
c000b426:	83 ec 0c             	sub    esp,0xc
c000b429:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b42c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b430:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b437:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b43b:	e8 57 ca 01 00       	call   c0027e97 <__extendsfdf2>
c000b440:	83 c4 10             	add    esp,0x10
c000b443:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b447:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b44b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b44f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b453:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b457:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b45b:	e8 40 c0 01 00       	call   c00274a0 <__muldf3>
c000b460:	83 c4 10             	add    esp,0x10
c000b463:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b467:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b46b:	52                   	push   edx
c000b46c:	50                   	push   eax
c000b46d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b470:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b473:	e8 ab b9 01 00       	call   c0026e23 <__adddf3>
c000b478:	83 c4 10             	add    esp,0x10
c000b47b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b47e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b481:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b485:	4f                   	dec    edi
c000b486:	83 ec 0c             	sub    esp,0xc
c000b489:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b48c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b490:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b497:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b49b:	e8 f7 c9 01 00       	call   c0027e97 <__extendsfdf2>
c000b4a0:	83 c4 10             	add    esp,0x10
c000b4a3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4a7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4ab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4b3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4b7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4bb:	e8 e0 bf 01 00       	call   c00274a0 <__muldf3>
c000b4c0:	83 c4 10             	add    esp,0x10
c000b4c3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4c7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4cb:	52                   	push   edx
c000b4cc:	50                   	push   eax
c000b4cd:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b4d0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b4d3:	e8 4b b9 01 00       	call   c0026e23 <__adddf3>
c000b4d8:	83 c4 10             	add    esp,0x10
c000b4db:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b4de:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b4e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4e5:	4f                   	dec    edi
c000b4e6:	83 ec 0c             	sub    esp,0xc
c000b4e9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b4ec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b4f0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b4f7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b4fb:	e8 97 c9 01 00       	call   c0027e97 <__extendsfdf2>
c000b500:	83 c4 10             	add    esp,0x10
c000b503:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b507:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b50b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b50f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b513:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b517:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b51b:	e8 80 bf 01 00       	call   c00274a0 <__muldf3>
c000b520:	83 c4 10             	add    esp,0x10
c000b523:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b527:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b52b:	52                   	push   edx
c000b52c:	50                   	push   eax
c000b52d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b530:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b533:	e8 eb b8 01 00       	call   c0026e23 <__adddf3>
c000b538:	83 c4 10             	add    esp,0x10
c000b53b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b53e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b541:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b545:	4f                   	dec    edi
c000b546:	83 ec 0c             	sub    esp,0xc
c000b549:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b54c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b550:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b557:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b55b:	e8 37 c9 01 00       	call   c0027e97 <__extendsfdf2>
c000b560:	83 c4 10             	add    esp,0x10
c000b563:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b567:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b56b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b56f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b573:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b577:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b57b:	e8 20 bf 01 00       	call   c00274a0 <__muldf3>
c000b580:	83 c4 10             	add    esp,0x10
c000b583:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b587:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b58b:	52                   	push   edx
c000b58c:	50                   	push   eax
c000b58d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b590:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b593:	e8 8b b8 01 00       	call   c0026e23 <__adddf3>
c000b598:	83 c4 10             	add    esp,0x10
c000b59b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b59e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b5a1:	85 ff                	test   edi,edi
c000b5a3:	0f 8f e1 fc ff ff    	jg     c000b28a <calc_output_multi+0x4fc>
c000b5a9:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b5ad:	29 5c 24 08          	sub    DWORD PTR [esp+0x8],ebx
c000b5b1:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b5b5:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000b5ba:	0f 8f 3f fc ff ff    	jg     c000b1ff <calc_output_multi+0x471>
c000b5c0:	be 08 00 00 00       	mov    esi,0x8
c000b5c5:	89 d8                	mov    eax,ebx
c000b5c7:	99                   	cdq    
c000b5c8:	f7 fe                	idiv   esi
c000b5ca:	4a                   	dec    edx
c000b5cb:	83 fa 06             	cmp    edx,0x6
c000b5ce:	77 07                	ja     c000b5d7 <calc_output_multi+0x849>
c000b5d0:	ff 24 95 dc 96 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd6924]
c000b5d7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5db:	4b                   	dec    ebx
c000b5dc:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5e0:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5e3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b5e7:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5eb:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5ee:	e8 30 b8 01 00       	call   c0026e23 <__adddf3>
c000b5f3:	83 c4 10             	add    esp,0x10
c000b5f6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b5fa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b5fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b602:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b606:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b60a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b60e:	e8 8d be 01 00       	call   c00274a0 <__muldf3>
c000b613:	5d                   	pop    ebp
c000b614:	59                   	pop    ecx
c000b615:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b619:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b61d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b621:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b625:	e8 49 c7 01 00       	call   c0027d73 <__truncdfsf2>
c000b62a:	83 c4 10             	add    esp,0x10
c000b62d:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b631:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b634:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b638:	4b                   	dec    ebx
c000b639:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b63d:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b640:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b644:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b648:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b64b:	e8 d3 b7 01 00       	call   c0026e23 <__adddf3>
c000b650:	83 c4 10             	add    esp,0x10
c000b653:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b657:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b65b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b65f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b663:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b667:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b66b:	e8 30 be 01 00       	call   c00274a0 <__muldf3>
c000b670:	59                   	pop    ecx
c000b671:	5f                   	pop    edi
c000b672:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b676:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b67a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b67e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b682:	e8 ec c6 01 00       	call   c0027d73 <__truncdfsf2>
c000b687:	83 c4 10             	add    esp,0x10
c000b68a:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b68e:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b691:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b695:	4b                   	dec    ebx
c000b696:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b69a:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b69d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6a1:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6a5:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6a8:	e8 76 b7 01 00       	call   c0026e23 <__adddf3>
c000b6ad:	83 c4 10             	add    esp,0x10
c000b6b0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b6b4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b6b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6c8:	e8 d3 bd 01 00       	call   c00274a0 <__muldf3>
c000b6cd:	5f                   	pop    edi
c000b6ce:	5d                   	pop    ebp
c000b6cf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b6d3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b6d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6df:	e8 8f c6 01 00       	call   c0027d73 <__truncdfsf2>
c000b6e4:	83 c4 10             	add    esp,0x10
c000b6e7:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b6eb:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b6ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b6f2:	4b                   	dec    ebx
c000b6f3:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6f7:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6fa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6fe:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b702:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b705:	e8 19 b7 01 00       	call   c0026e23 <__adddf3>
c000b70a:	83 c4 10             	add    esp,0x10
c000b70d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b711:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b715:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b719:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b71d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b721:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b725:	e8 76 bd 01 00       	call   c00274a0 <__muldf3>
c000b72a:	5d                   	pop    ebp
c000b72b:	59                   	pop    ecx
c000b72c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b730:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b734:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b738:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b73c:	e8 32 c6 01 00       	call   c0027d73 <__truncdfsf2>
c000b741:	83 c4 10             	add    esp,0x10
c000b744:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b748:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b74b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b74f:	4b                   	dec    ebx
c000b750:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b754:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b757:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b75b:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b75f:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b762:	e8 bc b6 01 00       	call   c0026e23 <__adddf3>
c000b767:	83 c4 10             	add    esp,0x10
c000b76a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b76e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b772:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b776:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b77a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b77e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b782:	e8 19 bd 01 00       	call   c00274a0 <__muldf3>
c000b787:	59                   	pop    ecx
c000b788:	5f                   	pop    edi
c000b789:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b78d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b791:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b795:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b799:	e8 d5 c5 01 00       	call   c0027d73 <__truncdfsf2>
c000b79e:	83 c4 10             	add    esp,0x10
c000b7a1:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b7a5:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b7a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7ac:	4b                   	dec    ebx
c000b7ad:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7b1:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b7b8:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7bc:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7bf:	e8 5f b6 01 00       	call   c0026e23 <__adddf3>
c000b7c4:	83 c4 10             	add    esp,0x10
c000b7c7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b7cb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b7cf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7df:	e8 bc bc 01 00       	call   c00274a0 <__muldf3>
c000b7e4:	5f                   	pop    edi
c000b7e5:	5d                   	pop    ebp
c000b7e6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b7ea:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b7ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7f2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7f6:	e8 78 c5 01 00       	call   c0027d73 <__truncdfsf2>
c000b7fb:	83 c4 10             	add    esp,0x10
c000b7fe:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b802:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b805:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b809:	4b                   	dec    ebx
c000b80a:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b80e:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b811:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b815:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b819:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b81c:	e8 02 b6 01 00       	call   c0026e23 <__adddf3>
c000b821:	83 c4 10             	add    esp,0x10
c000b824:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b828:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b82c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b830:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b834:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b838:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b83c:	e8 5f bc 01 00       	call   c00274a0 <__muldf3>
c000b841:	5d                   	pop    ebp
c000b842:	59                   	pop    ecx
c000b843:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b847:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b84b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b84f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b853:	e8 1b c5 01 00       	call   c0027d73 <__truncdfsf2>
c000b858:	83 c4 10             	add    esp,0x10
c000b85b:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b85f:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b862:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b866:	4b                   	dec    ebx
c000b867:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b86b:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b86e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b872:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b876:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b879:	e8 a5 b5 01 00       	call   c0026e23 <__adddf3>
c000b87e:	83 c4 10             	add    esp,0x10
c000b881:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b885:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b889:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b88d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b891:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b895:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b899:	e8 02 bc 01 00       	call   c00274a0 <__muldf3>
c000b89e:	59                   	pop    ecx
c000b89f:	5f                   	pop    edi
c000b8a0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b8a4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b8a8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8ac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8b0:	e8 be c4 01 00       	call   c0027d73 <__truncdfsf2>
c000b8b5:	83 c4 10             	add    esp,0x10
c000b8b8:	85 db                	test   ebx,ebx
c000b8ba:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000b8be:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c000b8c1:	0f 8f fe fc ff ff    	jg     c000b5c5 <calc_output_multi+0x837>
c000b8c7:	83 c4 4c             	add    esp,0x4c
c000b8ca:	5b                   	pop    ebx
c000b8cb:	5e                   	pop    esi
c000b8cc:	5f                   	pop    edi
c000b8cd:	5d                   	pop    ebp
c000b8ce:	c3                   	ret    

c000b8cf <double_to_fp>:
c000b8cf:	83 ec 0c             	sub    esp,0xc
c000b8d2:	68 00 00 b0 40       	push   0x40b00000
c000b8d7:	6a 00                	push   0x0
c000b8d9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8e1:	e8 ba bb 01 00       	call   c00274a0 <__muldf3>
c000b8e6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b8ea:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b8ee:	83 c4 1c             	add    esp,0x1c
c000b8f1:	e9 2a c6 01 00       	jmp    c0027f20 <lrint>

c000b8f6 <prepare_data>:
c000b8f6:	55                   	push   ebp
c000b8f7:	57                   	push   edi
c000b8f8:	56                   	push   esi
c000b8f9:	53                   	push   ebx
c000b8fa:	83 ec 1c             	sub    esp,0x1c
c000b8fd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b901:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b905:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c000b909:	0f 89 57 01 00 00    	jns    c000ba66 <prepare_data+0x170>
c000b90f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000b912:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b915:	85 d2                	test   edx,edx
c000b917:	75 0d                	jne    c000b926 <prepare_data+0x30>
c000b919:	8d 14 36             	lea    edx,[esi+esi*1]
c000b91c:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000b91f:	29 d0                	sub    eax,edx
c000b921:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b924:	eb 44                	jmp    c000b96a <prepare_data+0x74>
c000b926:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c000b929:	8d 0c 37             	lea    ecx,[edi+esi*1]
c000b92c:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c000b92f:	39 c1                	cmp    ecx,eax
c000b931:	7d 04                	jge    c000b937 <prepare_data+0x41>
c000b933:	29 d0                	sub    eax,edx
c000b935:	eb 2d                	jmp    c000b964 <prepare_data+0x6e>
c000b937:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c000b93d:	29 d7                	sub    edi,edx
c000b93f:	01 f7                	add    edi,esi
c000b941:	51                   	push   ecx
c000b942:	29 f2                	sub    edx,esi
c000b944:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c000b94b:	8d 14 90             	lea    edx,[eax+edx*4]
c000b94e:	51                   	push   ecx
c000b94f:	52                   	push   edx
c000b950:	50                   	push   eax
c000b951:	e8 26 4d ff ff       	call   c000067c <memmove>
c000b956:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b959:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b95c:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b95f:	29 f0                	sub    eax,esi
c000b961:	83 c4 10             	add    esp,0x10
c000b964:	29 f0                	sub    eax,esi
c000b966:	79 02                	jns    c000b96a <prepare_data+0x74>
c000b968:	31 c0                	xor    eax,eax
c000b96a:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000b96d:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c000b970:	29 ef                	sub    edi,ebp
c000b972:	39 c7                	cmp    edi,eax
c000b974:	7e 02                	jle    c000b978 <prepare_data+0x82>
c000b976:	89 c7                	mov    edi,eax
c000b978:	89 f8                	mov    eax,edi
c000b97a:	99                   	cdq    
c000b97b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000b97e:	b8 15 00 00 00       	mov    eax,0x15
c000b983:	29 d7                	sub    edi,edx
c000b985:	0f 88 dd 00 00 00    	js     c000ba68 <prepare_data+0x172>
c000b98b:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c000b98e:	8d 14 39             	lea    edx,[ecx+edi*1]
c000b991:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c000b994:	0f 8f ce 00 00 00    	jg     c000ba68 <prepare_data+0x172>
c000b99a:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c000b9a0:	50                   	push   eax
c000b9a1:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b9a8:	50                   	push   eax
c000b9a9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b9ad:	8b 00                	mov    eax,DWORD PTR [eax]
c000b9af:	8d 04 a8             	lea    eax,[eax+ebp*4]
c000b9b2:	50                   	push   eax
c000b9b3:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b9b6:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b9ba:	50                   	push   eax
c000b9bb:	e8 84 4d ff ff       	call   c0000744 <memcpy>
c000b9c0:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c000b9c3:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000b9c6:	01 fd                	add    ebp,edi
c000b9c8:	01 f9                	add    ecx,edi
c000b9ca:	83 c4 10             	add    esp,0x10
c000b9cd:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c000b9d0:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c000b9d3:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c000b9d6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b9da:	0f 85 86 00 00 00    	jne    c000ba66 <prepare_data+0x170>
c000b9e0:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000b9e3:	89 e8                	mov    eax,ebp
c000b9e5:	8d 3c 36             	lea    edi,[esi+esi*1]
c000b9e8:	29 c8                	sub    eax,ecx
c000b9ea:	39 f8                	cmp    eax,edi
c000b9ec:	7d 78                	jge    c000ba66 <prepare_data+0x170>
c000b9ee:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b9f2:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c000b9f6:	74 6e                	je     c000ba66 <prepare_data+0x170>
c000b9f8:	8d 7e 04             	lea    edi,[esi+0x4]
c000b9fb:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000b9ff:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000ba02:	29 ef                	sub    edi,ebp
c000ba04:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000ba08:	7c 29                	jl     c000ba33 <prepare_data+0x13d>
c000ba0a:	8d 3c 30             	lea    edi,[eax+esi*1]
c000ba0d:	29 f1                	sub    ecx,esi
c000ba0f:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000ba16:	55                   	push   ebp
c000ba17:	50                   	push   eax
c000ba18:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000ba1b:	50                   	push   eax
c000ba1c:	52                   	push   edx
c000ba1d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ba21:	e8 56 4c ff ff       	call   c000067c <memmove>
c000ba26:	83 c4 10             	add    esp,0x10
c000ba29:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000ba2c:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000ba2f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ba33:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000ba36:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000ba39:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c000ba3c:	83 c6 05             	add    esi,0x5
c000ba3f:	78 07                	js     c000ba48 <prepare_data+0x152>
c000ba41:	8d 3c 30             	lea    edi,[eax+esi*1]
c000ba44:	39 cf                	cmp    edi,ecx
c000ba46:	7e 04                	jle    c000ba4c <prepare_data+0x156>
c000ba48:	89 ce                	mov    esi,ecx
c000ba4a:	29 c6                	sub    esi,eax
c000ba4c:	8d 04 82             	lea    eax,[edx+eax*4]
c000ba4f:	51                   	push   ecx
c000ba50:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c000ba57:	51                   	push   ecx
c000ba58:	6a 00                	push   0x0
c000ba5a:	50                   	push   eax
c000ba5b:	e8 18 4d ff ff       	call   c0000778 <memset>
c000ba60:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c000ba63:	83 c4 10             	add    esp,0x10
c000ba66:	31 c0                	xor    eax,eax
c000ba68:	83 c4 1c             	add    esp,0x1c
c000ba6b:	5b                   	pop    ebx
c000ba6c:	5e                   	pop    esi
c000ba6d:	5f                   	pop    edi
c000ba6e:	5d                   	pop    ebp
c000ba6f:	c3                   	ret    

c000ba70 <sinc_multichan_vari_process>:
c000ba70:	55                   	push   ebp
c000ba71:	ba 05 00 00 00       	mov    edx,0x5
c000ba76:	57                   	push   edi
c000ba77:	56                   	push   esi
c000ba78:	53                   	push   ebx
c000ba79:	83 ec 4c             	sub    esp,0x4c
c000ba7c:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c000ba80:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000ba84:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000ba87:	85 db                	test   ebx,ebx
c000ba89:	0f 84 9b 06 00 00    	je     c000c12a <sinc_multichan_vari_process+0x6ba>
c000ba8f:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000ba92:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ba95:	0f af c5             	imul   eax,ebp
c000ba98:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ba9b:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000ba9e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000baa5:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000baac:	0f af c5             	imul   eax,ebp
c000baaf:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000bab2:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000bab5:	8b 06                	mov    eax,DWORD PTR [esi]
c000bab7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000babb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000babf:	68 00 00 70 3f       	push   0x3f700000
c000bac4:	6a 00                	push   0x0
c000bac6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bace:	e8 9c c2 01 00       	call   c0027d6f <__ltdf2>
c000bad3:	83 c4 10             	add    esp,0x10
c000bad6:	ba 16 00 00 00       	mov    edx,0x16
c000badb:	85 c0                	test   eax,eax
c000badd:	0f 88 47 06 00 00    	js     c000c12a <sinc_multichan_vari_process+0x6ba>
c000bae3:	68 00 00 70 40       	push   0x40700000
c000bae8:	6a 00                	push   0x0
c000baea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baf2:	e8 5a c2 01 00       	call   c0027d51 <__gtdf2>
c000baf7:	83 c4 10             	add    esp,0x10
c000bafa:	ba 16 00 00 00       	mov    edx,0x16
c000baff:	85 c0                	test   eax,eax
c000bb01:	0f 8f 23 06 00 00    	jg     c000c12a <sinc_multichan_vari_process+0x6ba>
c000bb07:	83 ec 0c             	sub    esp,0xc
c000bb0a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000bb0d:	e8 f1 bf 01 00       	call   c0027b03 <__floatsidf>
c000bb12:	83 c4 10             	add    esp,0x10
c000bb15:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb19:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb1d:	68 00 00 00 40       	push   0x40000000
c000bb22:	6a 00                	push   0x0
c000bb24:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb28:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb2c:	e8 f2 b2 01 00       	call   c0026e23 <__adddf3>
c000bb31:	59                   	pop    ecx
c000bb32:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bb36:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bb3a:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bb3d:	e8 c1 bf 01 00       	call   c0027b03 <__floatsidf>
c000bb42:	83 c4 10             	add    esp,0x10
c000bb45:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb49:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb4d:	52                   	push   edx
c000bb4e:	50                   	push   eax
c000bb4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb57:	e8 28 bc 01 00       	call   c0027784 <__divdf3>
c000bb5c:	83 c4 10             	add    esp,0x10
c000bb5f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb63:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb67:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c000bb6a:	8b 57 20             	mov    edx,DWORD PTR [edi+0x20]
c000bb6d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb71:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb75:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb79:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb7d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb81:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb85:	e8 c7 c1 01 00       	call   c0027d51 <__gtdf2>
c000bb8a:	83 c4 10             	add    esp,0x10
c000bb8d:	85 c0                	test   eax,eax
c000bb8f:	7e 2d                	jle    c000bbbe <sinc_multichan_vari_process+0x14e>
c000bb91:	68 00 00 f0 3f       	push   0x3ff00000
c000bb96:	6a 00                	push   0x0
c000bb98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bba0:	e8 ca c1 01 00       	call   c0027d6f <__ltdf2>
c000bba5:	83 c4 10             	add    esp,0x10
c000bba8:	85 c0                	test   eax,eax
c000bbaa:	79 4d                	jns    c000bbf9 <sinc_multichan_vari_process+0x189>
c000bbac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bbb0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bbb4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bbb8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bbbc:	eb 1b                	jmp    c000bbd9 <sinc_multichan_vari_process+0x169>
c000bbbe:	68 00 00 f0 3f       	push   0x3ff00000
c000bbc3:	6a 00                	push   0x0
c000bbc5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bbc9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bbcd:	e8 9d c1 01 00       	call   c0027d6f <__ltdf2>
c000bbd2:	83 c4 10             	add    esp,0x10
c000bbd5:	85 c0                	test   eax,eax
c000bbd7:	79 20                	jns    c000bbf9 <sinc_multichan_vari_process+0x189>
c000bbd9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bbdd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bbe1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbe5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbe9:	e8 96 bb 01 00       	call   c0027784 <__divdf3>
c000bbee:	83 c4 10             	add    esp,0x10
c000bbf1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bbf5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bbf9:	50                   	push   eax
c000bbfa:	50                   	push   eax
c000bbfb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbff:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc03:	e8 18 c3 01 00       	call   c0027f20 <lrint>
c000bc08:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000bc0b:	40                   	inc    eax
c000bc0c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc10:	0f af c5             	imul   eax,ebp
c000bc13:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bc17:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000bc1a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc1e:	58                   	pop    eax
c000bc1f:	5a                   	pop    edx
c000bc20:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc24:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc28:	e8 f3 c2 01 00       	call   c0027f20 <lrint>
c000bc2d:	83 ec 0c             	sub    esp,0xc
c000bc30:	50                   	push   eax
c000bc31:	e8 cd be 01 00       	call   c0027b03 <__floatsidf>
c000bc36:	83 c4 10             	add    esp,0x10
c000bc39:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bc3d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bc41:	52                   	push   edx
c000bc42:	50                   	push   eax
c000bc43:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc47:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc4b:	e8 24 b8 01 00       	call   c0027474 <__subdf3>
c000bc50:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc54:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc58:	83 c4 20             	add    esp,0x20
c000bc5b:	6a 00                	push   0x0
c000bc5d:	6a 00                	push   0x0
c000bc5f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc67:	e8 03 c1 01 00       	call   c0027d6f <__ltdf2>
c000bc6c:	83 c4 10             	add    esp,0x10
c000bc6f:	85 c0                	test   eax,eax
c000bc71:	79 1f                	jns    c000bc92 <sinc_multichan_vari_process+0x222>
c000bc73:	68 00 00 f0 3f       	push   0x3ff00000
c000bc78:	6a 00                	push   0x0
c000bc7a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc7e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc82:	e8 9c b1 01 00       	call   c0026e23 <__adddf3>
c000bc87:	83 c4 10             	add    esp,0x10
c000bc8a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bc8e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bc92:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000bc95:	83 ec 10             	sub    esp,0x10
c000bc98:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bc9c:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000bc9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bca3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bca7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bcab:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bcaf:	e8 c0 b7 01 00       	call   c0027474 <__subdf3>
c000bcb4:	83 c4 18             	add    esp,0x18
c000bcb7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bcbb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bcbf:	52                   	push   edx
c000bcc0:	50                   	push   eax
c000bcc1:	e8 5a c2 01 00       	call   c0027f20 <lrint>
c000bcc6:	0f af e8             	imul   ebp,eax
c000bcc9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bccd:	01 e8                	add    eax,ebp
c000bccf:	99                   	cdq    
c000bcd0:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000bcd3:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bcd6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bcda:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bcde:	68 00 00 f0 3f       	push   0x3ff00000
c000bce3:	6a 00                	push   0x0
c000bce5:	e8 9a ba 01 00       	call   c0027784 <__divdf3>
c000bcea:	83 c4 10             	add    esp,0x10
c000bced:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bcf1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bcf5:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000bcfa:	68 23 42 92 0c       	push   0xc924223
c000bcff:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd03:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd07:	e8 17 b1 01 00       	call   c0026e23 <__adddf3>
c000bd0c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000bd10:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000bd14:	83 c4 20             	add    esp,0x20
c000bd17:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bd1f:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000bd27:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000bd2a:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000bd2d:	7d 50                	jge    c000bd7f <sinc_multichan_vari_process+0x30f>
c000bd2f:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd32:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd35:	01 c8                	add    eax,ecx
c000bd37:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd3a:	99                   	cdq    
c000bd3b:	f7 f9                	idiv   ecx
c000bd3d:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd41:	7d 0c                	jge    c000bd4f <sinc_multichan_vari_process+0x2df>
c000bd43:	8b 6b 3c             	mov    ebp,DWORD PTR [ebx+0x3c]
c000bd46:	85 ed                	test   ebp,ebp
c000bd48:	79 6b                	jns    c000bdb5 <sinc_multichan_vari_process+0x345>
c000bd4a:	e9 e6 00 00 00       	jmp    c000be35 <sinc_multichan_vari_process+0x3c5>
c000bd4f:	50                   	push   eax
c000bd50:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bd54:	57                   	push   edi
c000bd55:	53                   	push   ebx
c000bd56:	e8 9b fb ff ff       	call   c000b8f6 <prepare_data>
c000bd5b:	83 c4 10             	add    esp,0x10
c000bd5e:	89 c2                	mov    edx,eax
c000bd60:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000bd63:	85 c0                	test   eax,eax
c000bd65:	0f 85 bf 03 00 00    	jne    c000c12a <sinc_multichan_vari_process+0x6ba>
c000bd6b:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd6e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd71:	01 c8                	add    eax,ecx
c000bd73:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd76:	99                   	cdq    
c000bd77:	f7 f9                	idiv   ecx
c000bd79:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd7d:	7c c4                	jl     c000bd43 <sinc_multichan_vari_process+0x2d3>
c000bd7f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bd83:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bd87:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000bd8a:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c000bd8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd91:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bd95:	89 06                	mov    DWORD PTR [esi],eax
c000bd97:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c000bd9a:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bd9d:	99                   	cdq    
c000bd9e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bda1:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000bda4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000bda7:	99                   	cdq    
c000bda8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bdab:	31 d2                	xor    edx,edx
c000bdad:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000bdb0:	e9 75 03 00 00       	jmp    c000c12a <sinc_multichan_vari_process+0x6ba>
c000bdb5:	83 ec 0c             	sub    esp,0xc
c000bdb8:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000bdbb:	e8 43 bd 01 00       	call   c0027b03 <__floatsidf>
c000bdc0:	83 c4 10             	add    esp,0x10
c000bdc3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bdc7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdcb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bdcf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bdd3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdd7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bddb:	e8 43 b0 01 00       	call   c0026e23 <__adddf3>
c000bde0:	83 c4 10             	add    esp,0x10
c000bde3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bde7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdeb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdef:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdf3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdf7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdfb:	e8 23 b0 01 00       	call   c0026e23 <__adddf3>
c000be00:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000be03:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be07:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be0b:	e8 f3 bc 01 00       	call   c0027b03 <__floatsidf>
c000be10:	83 c4 10             	add    esp,0x10
c000be13:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be17:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be1b:	52                   	push   edx
c000be1c:	50                   	push   eax
c000be1d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be21:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be25:	e8 43 bf 01 00       	call   c0027d6d <__gedf2>
c000be2a:	83 c4 10             	add    esp,0x10
c000be2d:	85 c0                	test   eax,eax
c000be2f:	0f 89 4a ff ff ff    	jns    c000bd7f <sinc_multichan_vari_process+0x30f>
c000be35:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000be39:	0f 8e ed 00 00 00    	jle    c000bf2c <sinc_multichan_vari_process+0x4bc>
c000be3f:	83 ec 10             	sub    esp,0x10
c000be42:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000be45:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000be48:	ff 76 04             	push   DWORD PTR [esi+0x4]
c000be4b:	ff 36                	push   DWORD PTR [esi]
c000be4d:	e8 22 b6 01 00       	call   c0027474 <__subdf3>
c000be52:	83 c4 18             	add    esp,0x18
c000be55:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be59:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be5d:	52                   	push   edx
c000be5e:	50                   	push   eax
c000be5f:	e8 9c c0 01 00       	call   c0027f00 <fabs>
c000be64:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be68:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be6c:	83 c4 10             	add    esp,0x10
c000be6f:	68 df 7c db 3d       	push   0x3ddb7cdf
c000be74:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000be79:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be7d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be81:	e8 cb be 01 00       	call   c0027d51 <__gtdf2>
c000be86:	83 c4 10             	add    esp,0x10
c000be89:	85 c0                	test   eax,eax
c000be8b:	0f 8e 9b 00 00 00    	jle    c000bf2c <sinc_multichan_vari_process+0x4bc>
c000be91:	8b 06                	mov    eax,DWORD PTR [esi]
c000be93:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000be96:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000be9a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000be9e:	52                   	push   edx
c000be9f:	50                   	push   eax
c000bea0:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000bea3:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000bea6:	e8 c9 b5 01 00       	call   c0027474 <__subdf3>
c000beab:	59                   	pop    ecx
c000beac:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000beb0:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000beb4:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000beb7:	e8 47 bc 01 00       	call   c0027b03 <__floatsidf>
c000bebc:	83 c4 10             	add    esp,0x10
c000bebf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bec3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bec7:	52                   	push   edx
c000bec8:	50                   	push   eax
c000bec9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000becd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bed1:	e8 ca b5 01 00       	call   c00274a0 <__muldf3>
c000bed6:	5d                   	pop    ebp
c000bed7:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bedb:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bedf:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000bee2:	e8 1c bc 01 00       	call   c0027b03 <__floatsidf>
c000bee7:	83 c4 10             	add    esp,0x10
c000beea:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000beee:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bef2:	52                   	push   edx
c000bef3:	50                   	push   eax
c000bef4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bef8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000befc:	e8 83 b8 01 00       	call   c0027784 <__divdf3>
c000bf01:	83 c4 10             	add    esp,0x10
c000bf04:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf08:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bf0c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bf10:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bf14:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf18:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf1c:	e8 02 af 01 00       	call   c0026e23 <__adddf3>
c000bf21:	83 c4 10             	add    esp,0x10
c000bf24:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bf28:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bf2c:	83 ec 0c             	sub    esp,0xc
c000bf2f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bf32:	e8 cc bb 01 00       	call   c0027b03 <__floatsidf>
c000bf37:	83 c4 10             	add    esp,0x10
c000bf3a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf3e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf52:	e8 18 be 01 00       	call   c0027d6f <__ltdf2>
c000bf57:	83 c4 10             	add    esp,0x10
c000bf5a:	85 c0                	test   eax,eax
c000bf5c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bf60:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bf64:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000bf68:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000bf6c:	78 10                	js     c000bf7e <sinc_multichan_vari_process+0x50e>
c000bf6e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bf72:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bf76:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf7a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bf7e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf82:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf86:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf8a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf8e:	e8 0d b5 01 00       	call   c00274a0 <__muldf3>
c000bf93:	59                   	pop    ecx
c000bf94:	5d                   	pop    ebp
c000bf95:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf99:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf9d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bfa1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bfa5:	e8 25 f9 ff ff       	call   c000b8cf <double_to_fp>
c000bfaa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bfae:	89 c5                	mov    ebp,eax
c000bfb0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bfb4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bfb8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bfbc:	e8 df b4 01 00       	call   c00274a0 <__muldf3>
c000bfc1:	83 c4 18             	add    esp,0x18
c000bfc4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bfc8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bfcc:	52                   	push   edx
c000bfcd:	50                   	push   eax
c000bfce:	e8 fc f8 ff ff       	call   c000b8cf <double_to_fp>
c000bfd3:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000bfd6:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000bfda:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000bfdd:	8d 04 90             	lea    eax,[eax+edx*4]
c000bfe0:	50                   	push   eax
c000bfe1:	50                   	push   eax
c000bfe2:	50                   	push   eax
c000bfe3:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bfe6:	e8 18 bb 01 00       	call   c0027b03 <__floatsidf>
c000bfeb:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bfef:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000bff3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bff7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bffb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfff:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c003:	e8 7c b7 01 00       	call   c0027784 <__divdf3>
c000c008:	83 c4 1c             	add    esp,0x1c
c000c00b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000c00f:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000c013:	52                   	push   edx
c000c014:	89 ea                	mov    edx,ebp
c000c016:	50                   	push   eax
c000c017:	89 d8                	mov    eax,ebx
c000c019:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c01c:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c000c020:	e8 69 ed ff ff       	call   c000ad8e <calc_output_multi>
c000c025:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000c028:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c000c02b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c02f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c033:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c037:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c03b:	e8 44 b7 01 00       	call   c0027784 <__divdf3>
c000c040:	83 c4 10             	add    esp,0x10
c000c043:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c047:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c04b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c04f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c053:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c057:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c05b:	e8 c3 ad 01 00       	call   c0026e23 <__adddf3>
c000c060:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c064:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c068:	83 c4 28             	add    esp,0x28
c000c06b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c06f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c073:	e8 a8 be 01 00       	call   c0027f20 <lrint>
c000c078:	83 ec 0c             	sub    esp,0xc
c000c07b:	50                   	push   eax
c000c07c:	e8 82 ba 01 00       	call   c0027b03 <__floatsidf>
c000c081:	83 c4 10             	add    esp,0x10
c000c084:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c088:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c08c:	52                   	push   edx
c000c08d:	50                   	push   eax
c000c08e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c092:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c096:	e8 d9 b3 01 00       	call   c0027474 <__subdf3>
c000c09b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c09f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c0a3:	83 c4 20             	add    esp,0x20
c000c0a6:	6a 00                	push   0x0
c000c0a8:	6a 00                	push   0x0
c000c0aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0b2:	e8 b8 bc 01 00       	call   c0027d6f <__ltdf2>
c000c0b7:	83 c4 10             	add    esp,0x10
c000c0ba:	85 c0                	test   eax,eax
c000c0bc:	79 20                	jns    c000c0de <sinc_multichan_vari_process+0x66e>
c000c0be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0ce:	e8 50 ad 01 00       	call   c0026e23 <__adddf3>
c000c0d3:	83 c4 10             	add    esp,0x10
c000c0d6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c0da:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c0de:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c0e1:	83 ec 10             	sub    esp,0x10
c000c0e4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c0e8:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000c0eb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0f3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0f7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0fb:	e8 74 b3 01 00       	call   c0027474 <__subdf3>
c000c100:	83 c4 18             	add    esp,0x18
c000c103:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c107:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c10b:	52                   	push   edx
c000c10c:	50                   	push   eax
c000c10d:	e8 0e be 01 00       	call   c0027f20 <lrint>
c000c112:	0f af e8             	imul   ebp,eax
c000c115:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c119:	83 c4 10             	add    esp,0x10
c000c11c:	01 e8                	add    eax,ebp
c000c11e:	99                   	cdq    
c000c11f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c122:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c125:	e9 fd fb ff ff       	jmp    c000bd27 <sinc_multichan_vari_process+0x2b7>
c000c12a:	83 c4 4c             	add    esp,0x4c
c000c12d:	89 d0                	mov    eax,edx
c000c12f:	5b                   	pop    ebx
c000c130:	5e                   	pop    esi
c000c131:	5f                   	pop    edi
c000c132:	5d                   	pop    ebp
c000c133:	c3                   	ret    

c000c134 <sinc_hex_vari_process>:
c000c134:	55                   	push   ebp
c000c135:	ba 05 00 00 00       	mov    edx,0x5
c000c13a:	57                   	push   edi
c000c13b:	56                   	push   esi
c000c13c:	53                   	push   ebx
c000c13d:	83 ec 4c             	sub    esp,0x4c
c000c140:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c144:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c148:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c14b:	85 db                	test   ebx,ebx
c000c14d:	0f 84 9c 06 00 00    	je     c000c7ef <sinc_hex_vari_process+0x6bb>
c000c153:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c156:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c159:	0f af c7             	imul   eax,edi
c000c15c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c15f:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c162:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c169:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c170:	0f af c7             	imul   eax,edi
c000c173:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c176:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c179:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c17c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c180:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c184:	68 00 00 70 3f       	push   0x3f700000
c000c189:	6a 00                	push   0x0
c000c18b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c18f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c193:	e8 d7 bb 01 00       	call   c0027d6f <__ltdf2>
c000c198:	83 c4 10             	add    esp,0x10
c000c19b:	ba 16 00 00 00       	mov    edx,0x16
c000c1a0:	85 c0                	test   eax,eax
c000c1a2:	0f 88 47 06 00 00    	js     c000c7ef <sinc_hex_vari_process+0x6bb>
c000c1a8:	68 00 00 70 40       	push   0x40700000
c000c1ad:	6a 00                	push   0x0
c000c1af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1b7:	e8 95 bb 01 00       	call   c0027d51 <__gtdf2>
c000c1bc:	83 c4 10             	add    esp,0x10
c000c1bf:	ba 16 00 00 00       	mov    edx,0x16
c000c1c4:	85 c0                	test   eax,eax
c000c1c6:	0f 8f 23 06 00 00    	jg     c000c7ef <sinc_hex_vari_process+0x6bb>
c000c1cc:	83 ec 0c             	sub    esp,0xc
c000c1cf:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c1d2:	e8 2c b9 01 00       	call   c0027b03 <__floatsidf>
c000c1d7:	83 c4 10             	add    esp,0x10
c000c1da:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c1de:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c1e2:	68 00 00 00 40       	push   0x40000000
c000c1e7:	6a 00                	push   0x0
c000c1e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1f1:	e8 2d ac 01 00       	call   c0026e23 <__adddf3>
c000c1f6:	59                   	pop    ecx
c000c1f7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c1fb:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c1ff:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c202:	e8 fc b8 01 00       	call   c0027b03 <__floatsidf>
c000c207:	83 c4 10             	add    esp,0x10
c000c20a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c20e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c212:	52                   	push   edx
c000c213:	50                   	push   eax
c000c214:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c218:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c21c:	e8 63 b5 01 00       	call   c0027784 <__divdf3>
c000c221:	83 c4 10             	add    esp,0x10
c000c224:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c228:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c22c:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c22f:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c232:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c236:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c23a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c23e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c242:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c246:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c24a:	e8 02 bb 01 00       	call   c0027d51 <__gtdf2>
c000c24f:	83 c4 10             	add    esp,0x10
c000c252:	85 c0                	test   eax,eax
c000c254:	7e 2d                	jle    c000c283 <sinc_hex_vari_process+0x14f>
c000c256:	68 00 00 f0 3f       	push   0x3ff00000
c000c25b:	6a 00                	push   0x0
c000c25d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c261:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c265:	e8 05 bb 01 00       	call   c0027d6f <__ltdf2>
c000c26a:	83 c4 10             	add    esp,0x10
c000c26d:	85 c0                	test   eax,eax
c000c26f:	79 4d                	jns    c000c2be <sinc_hex_vari_process+0x18a>
c000c271:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c275:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c279:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c27d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c281:	eb 1b                	jmp    c000c29e <sinc_hex_vari_process+0x16a>
c000c283:	68 00 00 f0 3f       	push   0x3ff00000
c000c288:	6a 00                	push   0x0
c000c28a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c28e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c292:	e8 d8 ba 01 00       	call   c0027d6f <__ltdf2>
c000c297:	83 c4 10             	add    esp,0x10
c000c29a:	85 c0                	test   eax,eax
c000c29c:	79 20                	jns    c000c2be <sinc_hex_vari_process+0x18a>
c000c29e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c2a2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c2a6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2aa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2ae:	e8 d1 b4 01 00       	call   c0027784 <__divdf3>
c000c2b3:	83 c4 10             	add    esp,0x10
c000c2b6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c2ba:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c2be:	50                   	push   eax
c000c2bf:	50                   	push   eax
c000c2c0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2c4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2c8:	e8 53 bc 01 00       	call   c0027f20 <lrint>
c000c2cd:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c2d0:	40                   	inc    eax
c000c2d1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c2d5:	0f af c7             	imul   eax,edi
c000c2d8:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c2dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c2df:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2e3:	58                   	pop    eax
c000c2e4:	5a                   	pop    edx
c000c2e5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2e9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2ed:	e8 2e bc 01 00       	call   c0027f20 <lrint>
c000c2f2:	83 ec 0c             	sub    esp,0xc
c000c2f5:	50                   	push   eax
c000c2f6:	e8 08 b8 01 00       	call   c0027b03 <__floatsidf>
c000c2fb:	83 c4 10             	add    esp,0x10
c000c2fe:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c302:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c306:	52                   	push   edx
c000c307:	50                   	push   eax
c000c308:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c30c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c310:	e8 5f b1 01 00       	call   c0027474 <__subdf3>
c000c315:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c319:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c31d:	83 c4 20             	add    esp,0x20
c000c320:	6a 00                	push   0x0
c000c322:	6a 00                	push   0x0
c000c324:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c328:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c32c:	e8 3e ba 01 00       	call   c0027d6f <__ltdf2>
c000c331:	83 c4 10             	add    esp,0x10
c000c334:	85 c0                	test   eax,eax
c000c336:	79 1f                	jns    c000c357 <sinc_hex_vari_process+0x223>
c000c338:	68 00 00 f0 3f       	push   0x3ff00000
c000c33d:	6a 00                	push   0x0
c000c33f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c343:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c347:	e8 d7 aa 01 00       	call   c0026e23 <__adddf3>
c000c34c:	83 c4 10             	add    esp,0x10
c000c34f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c353:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c357:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c35a:	83 ec 10             	sub    esp,0x10
c000c35d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c361:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c364:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c368:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c36c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c370:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c374:	e8 fb b0 01 00       	call   c0027474 <__subdf3>
c000c379:	83 c4 18             	add    esp,0x18
c000c37c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c380:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c384:	52                   	push   edx
c000c385:	50                   	push   eax
c000c386:	e8 95 bb 01 00       	call   c0027f20 <lrint>
c000c38b:	0f af f8             	imul   edi,eax
c000c38e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c392:	01 f8                	add    eax,edi
c000c394:	99                   	cdq    
c000c395:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c398:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c39b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c39f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c3a3:	68 00 00 f0 3f       	push   0x3ff00000
c000c3a8:	6a 00                	push   0x0
c000c3aa:	e8 d5 b3 01 00       	call   c0027784 <__divdf3>
c000c3af:	83 c4 10             	add    esp,0x10
c000c3b2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c3b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c3ba:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c3bf:	68 23 42 92 0c       	push   0xc924223
c000c3c4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c3c8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c3cc:	e8 52 aa 01 00       	call   c0026e23 <__adddf3>
c000c3d1:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c3d5:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c3d9:	83 c4 20             	add    esp,0x20
c000c3dc:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c3e4:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c3ec:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c3ef:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c3f2:	7d 50                	jge    c000c444 <sinc_hex_vari_process+0x310>
c000c3f4:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c3f7:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c3fa:	01 c8                	add    eax,ecx
c000c3fc:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c3ff:	99                   	cdq    
c000c400:	f7 f9                	idiv   ecx
c000c402:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c406:	7d 0c                	jge    c000c414 <sinc_hex_vari_process+0x2e0>
c000c408:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c40b:	85 ff                	test   edi,edi
c000c40d:	79 6c                	jns    c000c47b <sinc_hex_vari_process+0x347>
c000c40f:	e9 e7 00 00 00       	jmp    c000c4fb <sinc_hex_vari_process+0x3c7>
c000c414:	50                   	push   eax
c000c415:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c419:	56                   	push   esi
c000c41a:	53                   	push   ebx
c000c41b:	e8 d6 f4 ff ff       	call   c000b8f6 <prepare_data>
c000c420:	83 c4 10             	add    esp,0x10
c000c423:	89 c2                	mov    edx,eax
c000c425:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c428:	85 c0                	test   eax,eax
c000c42a:	0f 85 bf 03 00 00    	jne    c000c7ef <sinc_hex_vari_process+0x6bb>
c000c430:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c433:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c436:	01 c8                	add    eax,ecx
c000c438:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c43b:	99                   	cdq    
c000c43c:	f7 f9                	idiv   ecx
c000c43e:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c442:	7c c4                	jl     c000c408 <sinc_hex_vari_process+0x2d4>
c000c444:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c448:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c44c:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c44f:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c452:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c456:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c45a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c45d:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c460:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c463:	99                   	cdq    
c000c464:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c467:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c46a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c46d:	99                   	cdq    
c000c46e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c471:	31 d2                	xor    edx,edx
c000c473:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c476:	e9 74 03 00 00       	jmp    c000c7ef <sinc_hex_vari_process+0x6bb>
c000c47b:	83 ec 0c             	sub    esp,0xc
c000c47e:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c481:	e8 7d b6 01 00       	call   c0027b03 <__floatsidf>
c000c486:	83 c4 10             	add    esp,0x10
c000c489:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c48d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c491:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c495:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c499:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c49d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4a1:	e8 7d a9 01 00       	call   c0026e23 <__adddf3>
c000c4a6:	83 c4 10             	add    esp,0x10
c000c4a9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c4ad:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c4b1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4b5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4bd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4c1:	e8 5d a9 01 00       	call   c0026e23 <__adddf3>
c000c4c6:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c4c9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c4cd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c4d1:	e8 2d b6 01 00       	call   c0027b03 <__floatsidf>
c000c4d6:	83 c4 10             	add    esp,0x10
c000c4d9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c4dd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4e1:	52                   	push   edx
c000c4e2:	50                   	push   eax
c000c4e3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4e7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4eb:	e8 7d b8 01 00       	call   c0027d6d <__gedf2>
c000c4f0:	83 c4 10             	add    esp,0x10
c000c4f3:	85 c0                	test   eax,eax
c000c4f5:	0f 89 49 ff ff ff    	jns    c000c444 <sinc_hex_vari_process+0x310>
c000c4fb:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c4ff:	0f 8e ef 00 00 00    	jle    c000c5f4 <sinc_hex_vari_process+0x4c0>
c000c505:	83 ec 10             	sub    esp,0x10
c000c508:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c50b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c50e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c511:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c514:	e8 5b af 01 00       	call   c0027474 <__subdf3>
c000c519:	83 c4 18             	add    esp,0x18
c000c51c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c520:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c524:	52                   	push   edx
c000c525:	50                   	push   eax
c000c526:	e8 d5 b9 01 00       	call   c0027f00 <fabs>
c000c52b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c52f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c533:	83 c4 10             	add    esp,0x10
c000c536:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c53b:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c540:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c544:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c548:	e8 04 b8 01 00       	call   c0027d51 <__gtdf2>
c000c54d:	83 c4 10             	add    esp,0x10
c000c550:	85 c0                	test   eax,eax
c000c552:	0f 8e 9c 00 00 00    	jle    c000c5f4 <sinc_hex_vari_process+0x4c0>
c000c558:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c55b:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c55e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c562:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c566:	52                   	push   edx
c000c567:	50                   	push   eax
c000c568:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c56b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c56e:	e8 01 af 01 00       	call   c0027474 <__subdf3>
c000c573:	59                   	pop    ecx
c000c574:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c578:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c57c:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c57f:	e8 7f b5 01 00       	call   c0027b03 <__floatsidf>
c000c584:	83 c4 10             	add    esp,0x10
c000c587:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c58b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c58f:	52                   	push   edx
c000c590:	50                   	push   eax
c000c591:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c595:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c599:	e8 02 af 01 00       	call   c00274a0 <__muldf3>
c000c59e:	5f                   	pop    edi
c000c59f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c5a3:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c5a7:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c5aa:	e8 54 b5 01 00       	call   c0027b03 <__floatsidf>
c000c5af:	83 c4 10             	add    esp,0x10
c000c5b2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c5b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c5ba:	52                   	push   edx
c000c5bb:	50                   	push   eax
c000c5bc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5c0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5c4:	e8 bb b1 01 00       	call   c0027784 <__divdf3>
c000c5c9:	83 c4 10             	add    esp,0x10
c000c5cc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c5d0:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c5d4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5d8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5dc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5e0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5e4:	e8 3a a8 01 00       	call   c0026e23 <__adddf3>
c000c5e9:	83 c4 10             	add    esp,0x10
c000c5ec:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c5f0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c5f4:	83 ec 0c             	sub    esp,0xc
c000c5f7:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c5fa:	e8 04 b5 01 00       	call   c0027b03 <__floatsidf>
c000c5ff:	83 c4 10             	add    esp,0x10
c000c602:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c606:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c60a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c60e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c612:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c616:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c61a:	e8 50 b7 01 00       	call   c0027d6f <__ltdf2>
c000c61f:	83 c4 10             	add    esp,0x10
c000c622:	85 c0                	test   eax,eax
c000c624:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c628:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c62c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000c630:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000c634:	78 10                	js     c000c646 <sinc_hex_vari_process+0x512>
c000c636:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c63a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c63e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c642:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c646:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c64a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c64e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c652:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c656:	e8 45 ae 01 00       	call   c00274a0 <__muldf3>
c000c65b:	59                   	pop    ecx
c000c65c:	5f                   	pop    edi
c000c65d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c661:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c665:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c669:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c66d:	e8 5d f2 ff ff       	call   c000b8cf <double_to_fp>
c000c672:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c676:	89 c7                	mov    edi,eax
c000c678:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c67c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c680:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c684:	e8 17 ae 01 00       	call   c00274a0 <__muldf3>
c000c689:	83 c4 18             	add    esp,0x18
c000c68c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c690:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c694:	52                   	push   edx
c000c695:	50                   	push   eax
c000c696:	e8 34 f2 ff ff       	call   c000b8cf <double_to_fp>
c000c69b:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c69e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c6a2:	83 c4 0c             	add    esp,0xc
c000c6a5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c6a8:	8d 04 90             	lea    eax,[eax+edx*4]
c000c6ab:	50                   	push   eax
c000c6ac:	50                   	push   eax
c000c6ad:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c6b0:	e8 4e b4 01 00       	call   c0027b03 <__floatsidf>
c000c6b5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c6b9:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c6bd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6c1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6c5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6c9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6cd:	e8 b2 b0 01 00       	call   c0027784 <__divdf3>
c000c6d2:	83 c4 18             	add    esp,0x18
c000c6d5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c6d9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c6dd:	52                   	push   edx
c000c6de:	89 fa                	mov    edx,edi
c000c6e0:	50                   	push   eax
c000c6e1:	89 d8                	mov    eax,ebx
c000c6e3:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000c6e7:	e8 50 de ff ff       	call   c000a53c <calc_output_hex>
c000c6ec:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000c6f0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6f4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6f8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6fc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c700:	e8 7f b0 01 00       	call   c0027784 <__divdf3>
c000c705:	83 c4 10             	add    esp,0x10
c000c708:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c70c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c710:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c714:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c718:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c71c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c720:	e8 fe a6 01 00       	call   c0026e23 <__adddf3>
c000c725:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c729:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c72d:	83 c4 18             	add    esp,0x18
c000c730:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c734:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c738:	e8 e3 b7 01 00       	call   c0027f20 <lrint>
c000c73d:	83 ec 0c             	sub    esp,0xc
c000c740:	50                   	push   eax
c000c741:	e8 bd b3 01 00       	call   c0027b03 <__floatsidf>
c000c746:	83 c4 10             	add    esp,0x10
c000c749:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c74d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c751:	52                   	push   edx
c000c752:	50                   	push   eax
c000c753:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c757:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c75b:	e8 14 ad 01 00       	call   c0027474 <__subdf3>
c000c760:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c764:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c768:	83 c4 20             	add    esp,0x20
c000c76b:	6a 00                	push   0x0
c000c76d:	6a 00                	push   0x0
c000c76f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c773:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c777:	e8 f3 b5 01 00       	call   c0027d6f <__ltdf2>
c000c77c:	83 c4 10             	add    esp,0x10
c000c77f:	85 c0                	test   eax,eax
c000c781:	79 20                	jns    c000c7a3 <sinc_hex_vari_process+0x66f>
c000c783:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c787:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c78b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c78f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c793:	e8 8b a6 01 00       	call   c0026e23 <__adddf3>
c000c798:	83 c4 10             	add    esp,0x10
c000c79b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c79f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c7a3:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c7a6:	83 ec 10             	sub    esp,0x10
c000c7a9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c7ad:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c7b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7b8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c7bc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c7c0:	e8 af ac 01 00       	call   c0027474 <__subdf3>
c000c7c5:	83 c4 18             	add    esp,0x18
c000c7c8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c7cc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c7d0:	52                   	push   edx
c000c7d1:	50                   	push   eax
c000c7d2:	e8 49 b7 01 00       	call   c0027f20 <lrint>
c000c7d7:	0f af f8             	imul   edi,eax
c000c7da:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c7de:	83 c4 10             	add    esp,0x10
c000c7e1:	01 f8                	add    eax,edi
c000c7e3:	99                   	cdq    
c000c7e4:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c7e7:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c7ea:	e9 fd fb ff ff       	jmp    c000c3ec <sinc_hex_vari_process+0x2b8>
c000c7ef:	83 c4 4c             	add    esp,0x4c
c000c7f2:	89 d0                	mov    eax,edx
c000c7f4:	5b                   	pop    ebx
c000c7f5:	5e                   	pop    esi
c000c7f6:	5f                   	pop    edi
c000c7f7:	5d                   	pop    ebp
c000c7f8:	c3                   	ret    

c000c7f9 <sinc_quad_vari_process>:
c000c7f9:	55                   	push   ebp
c000c7fa:	ba 05 00 00 00       	mov    edx,0x5
c000c7ff:	57                   	push   edi
c000c800:	56                   	push   esi
c000c801:	53                   	push   ebx
c000c802:	83 ec 4c             	sub    esp,0x4c
c000c805:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c809:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c80d:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c810:	85 db                	test   ebx,ebx
c000c812:	0f 84 9c 06 00 00    	je     c000ceb4 <sinc_quad_vari_process+0x6bb>
c000c818:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c81b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c81e:	0f af c7             	imul   eax,edi
c000c821:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c824:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c827:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c82e:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c835:	0f af c7             	imul   eax,edi
c000c838:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c83b:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c83e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c841:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c845:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c849:	68 00 00 70 3f       	push   0x3f700000
c000c84e:	6a 00                	push   0x0
c000c850:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c854:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c858:	e8 12 b5 01 00       	call   c0027d6f <__ltdf2>
c000c85d:	83 c4 10             	add    esp,0x10
c000c860:	ba 16 00 00 00       	mov    edx,0x16
c000c865:	85 c0                	test   eax,eax
c000c867:	0f 88 47 06 00 00    	js     c000ceb4 <sinc_quad_vari_process+0x6bb>
c000c86d:	68 00 00 70 40       	push   0x40700000
c000c872:	6a 00                	push   0x0
c000c874:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c878:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c87c:	e8 d0 b4 01 00       	call   c0027d51 <__gtdf2>
c000c881:	83 c4 10             	add    esp,0x10
c000c884:	ba 16 00 00 00       	mov    edx,0x16
c000c889:	85 c0                	test   eax,eax
c000c88b:	0f 8f 23 06 00 00    	jg     c000ceb4 <sinc_quad_vari_process+0x6bb>
c000c891:	83 ec 0c             	sub    esp,0xc
c000c894:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c897:	e8 67 b2 01 00       	call   c0027b03 <__floatsidf>
c000c89c:	83 c4 10             	add    esp,0x10
c000c89f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8a7:	68 00 00 00 40       	push   0x40000000
c000c8ac:	6a 00                	push   0x0
c000c8ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8b6:	e8 68 a5 01 00       	call   c0026e23 <__adddf3>
c000c8bb:	59                   	pop    ecx
c000c8bc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c8c0:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c8c4:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c8c7:	e8 37 b2 01 00       	call   c0027b03 <__floatsidf>
c000c8cc:	83 c4 10             	add    esp,0x10
c000c8cf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8d3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8d7:	52                   	push   edx
c000c8d8:	50                   	push   eax
c000c8d9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8dd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8e1:	e8 9e ae 01 00       	call   c0027784 <__divdf3>
c000c8e6:	83 c4 10             	add    esp,0x10
c000c8e9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8ed:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8f1:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c8f4:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c8f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8fb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c903:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c907:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c90b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c90f:	e8 3d b4 01 00       	call   c0027d51 <__gtdf2>
c000c914:	83 c4 10             	add    esp,0x10
c000c917:	85 c0                	test   eax,eax
c000c919:	7e 2d                	jle    c000c948 <sinc_quad_vari_process+0x14f>
c000c91b:	68 00 00 f0 3f       	push   0x3ff00000
c000c920:	6a 00                	push   0x0
c000c922:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c926:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c92a:	e8 40 b4 01 00       	call   c0027d6f <__ltdf2>
c000c92f:	83 c4 10             	add    esp,0x10
c000c932:	85 c0                	test   eax,eax
c000c934:	79 4d                	jns    c000c983 <sinc_quad_vari_process+0x18a>
c000c936:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c93a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c93e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c942:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c946:	eb 1b                	jmp    c000c963 <sinc_quad_vari_process+0x16a>
c000c948:	68 00 00 f0 3f       	push   0x3ff00000
c000c94d:	6a 00                	push   0x0
c000c94f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c953:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c957:	e8 13 b4 01 00       	call   c0027d6f <__ltdf2>
c000c95c:	83 c4 10             	add    esp,0x10
c000c95f:	85 c0                	test   eax,eax
c000c961:	79 20                	jns    c000c983 <sinc_quad_vari_process+0x18a>
c000c963:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c967:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c96b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c96f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c973:	e8 0c ae 01 00       	call   c0027784 <__divdf3>
c000c978:	83 c4 10             	add    esp,0x10
c000c97b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c97f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c983:	50                   	push   eax
c000c984:	50                   	push   eax
c000c985:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c989:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c98d:	e8 8e b5 01 00       	call   c0027f20 <lrint>
c000c992:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c995:	40                   	inc    eax
c000c996:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c99a:	0f af c7             	imul   eax,edi
c000c99d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c9a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c9a4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9a8:	58                   	pop    eax
c000c9a9:	5a                   	pop    edx
c000c9aa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c9ae:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c9b2:	e8 69 b5 01 00       	call   c0027f20 <lrint>
c000c9b7:	83 ec 0c             	sub    esp,0xc
c000c9ba:	50                   	push   eax
c000c9bb:	e8 43 b1 01 00       	call   c0027b03 <__floatsidf>
c000c9c0:	83 c4 10             	add    esp,0x10
c000c9c3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c9c7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c9cb:	52                   	push   edx
c000c9cc:	50                   	push   eax
c000c9cd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9d1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9d5:	e8 9a aa 01 00       	call   c0027474 <__subdf3>
c000c9da:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9de:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c9e2:	83 c4 20             	add    esp,0x20
c000c9e5:	6a 00                	push   0x0
c000c9e7:	6a 00                	push   0x0
c000c9e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9f1:	e8 79 b3 01 00       	call   c0027d6f <__ltdf2>
c000c9f6:	83 c4 10             	add    esp,0x10
c000c9f9:	85 c0                	test   eax,eax
c000c9fb:	79 1f                	jns    c000ca1c <sinc_quad_vari_process+0x223>
c000c9fd:	68 00 00 f0 3f       	push   0x3ff00000
c000ca02:	6a 00                	push   0x0
c000ca04:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca08:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca0c:	e8 12 a4 01 00       	call   c0026e23 <__adddf3>
c000ca11:	83 c4 10             	add    esp,0x10
c000ca14:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ca18:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ca1c:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ca1f:	83 ec 10             	sub    esp,0x10
c000ca22:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ca26:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ca29:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca2d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca31:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca35:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca39:	e8 36 aa 01 00       	call   c0027474 <__subdf3>
c000ca3e:	83 c4 18             	add    esp,0x18
c000ca41:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ca45:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ca49:	52                   	push   edx
c000ca4a:	50                   	push   eax
c000ca4b:	e8 d0 b4 01 00       	call   c0027f20 <lrint>
c000ca50:	0f af f8             	imul   edi,eax
c000ca53:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ca57:	01 f8                	add    eax,edi
c000ca59:	99                   	cdq    
c000ca5a:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ca5d:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ca60:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca64:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca68:	68 00 00 f0 3f       	push   0x3ff00000
c000ca6d:	6a 00                	push   0x0
c000ca6f:	e8 10 ad 01 00       	call   c0027784 <__divdf3>
c000ca74:	83 c4 10             	add    esp,0x10
c000ca77:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca7b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca7f:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000ca84:	68 23 42 92 0c       	push   0xc924223
c000ca89:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca8d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca91:	e8 8d a3 01 00       	call   c0026e23 <__adddf3>
c000ca96:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000ca9a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000ca9e:	83 c4 20             	add    esp,0x20
c000caa1:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000caa9:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000cab1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000cab4:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000cab7:	7d 50                	jge    c000cb09 <sinc_quad_vari_process+0x310>
c000cab9:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cabc:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cabf:	01 c8                	add    eax,ecx
c000cac1:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cac4:	99                   	cdq    
c000cac5:	f7 f9                	idiv   ecx
c000cac7:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cacb:	7d 0c                	jge    c000cad9 <sinc_quad_vari_process+0x2e0>
c000cacd:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000cad0:	85 ff                	test   edi,edi
c000cad2:	79 6c                	jns    c000cb40 <sinc_quad_vari_process+0x347>
c000cad4:	e9 e7 00 00 00       	jmp    c000cbc0 <sinc_quad_vari_process+0x3c7>
c000cad9:	50                   	push   eax
c000cada:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cade:	56                   	push   esi
c000cadf:	53                   	push   ebx
c000cae0:	e8 11 ee ff ff       	call   c000b8f6 <prepare_data>
c000cae5:	83 c4 10             	add    esp,0x10
c000cae8:	89 c2                	mov    edx,eax
c000caea:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000caed:	85 c0                	test   eax,eax
c000caef:	0f 85 bf 03 00 00    	jne    c000ceb4 <sinc_quad_vari_process+0x6bb>
c000caf5:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000caf8:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cafb:	01 c8                	add    eax,ecx
c000cafd:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cb00:	99                   	cdq    
c000cb01:	f7 f9                	idiv   ecx
c000cb03:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cb07:	7c c4                	jl     c000cacd <sinc_quad_vari_process+0x2d4>
c000cb09:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cb0d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cb11:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000cb14:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cb17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb1b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cb1f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000cb22:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000cb25:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000cb28:	99                   	cdq    
c000cb29:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cb2c:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000cb2f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000cb32:	99                   	cdq    
c000cb33:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cb36:	31 d2                	xor    edx,edx
c000cb38:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000cb3b:	e9 74 03 00 00       	jmp    c000ceb4 <sinc_quad_vari_process+0x6bb>
c000cb40:	83 ec 0c             	sub    esp,0xc
c000cb43:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000cb46:	e8 b8 af 01 00       	call   c0027b03 <__floatsidf>
c000cb4b:	83 c4 10             	add    esp,0x10
c000cb4e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb52:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb56:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb5a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb5e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb62:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb66:	e8 b8 a2 01 00       	call   c0026e23 <__adddf3>
c000cb6b:	83 c4 10             	add    esp,0x10
c000cb6e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb72:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb76:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb7a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb7e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb82:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb86:	e8 98 a2 01 00       	call   c0026e23 <__adddf3>
c000cb8b:	89 3c 24             	mov    DWORD PTR [esp],edi
c000cb8e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cb92:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cb96:	e8 68 af 01 00       	call   c0027b03 <__floatsidf>
c000cb9b:	83 c4 10             	add    esp,0x10
c000cb9e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cba2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cba6:	52                   	push   edx
c000cba7:	50                   	push   eax
c000cba8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbac:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbb0:	e8 b8 b1 01 00       	call   c0027d6d <__gedf2>
c000cbb5:	83 c4 10             	add    esp,0x10
c000cbb8:	85 c0                	test   eax,eax
c000cbba:	0f 89 49 ff ff ff    	jns    c000cb09 <sinc_quad_vari_process+0x310>
c000cbc0:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000cbc4:	0f 8e ef 00 00 00    	jle    c000ccb9 <sinc_quad_vari_process+0x4c0>
c000cbca:	83 ec 10             	sub    esp,0x10
c000cbcd:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cbd0:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cbd3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000cbd6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000cbd9:	e8 96 a8 01 00       	call   c0027474 <__subdf3>
c000cbde:	83 c4 18             	add    esp,0x18
c000cbe1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cbe5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cbe9:	52                   	push   edx
c000cbea:	50                   	push   eax
c000cbeb:	e8 10 b3 01 00       	call   c0027f00 <fabs>
c000cbf0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cbf4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cbf8:	83 c4 10             	add    esp,0x10
c000cbfb:	68 df 7c db 3d       	push   0x3ddb7cdf
c000cc00:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000cc05:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc09:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc0d:	e8 3f b1 01 00       	call   c0027d51 <__gtdf2>
c000cc12:	83 c4 10             	add    esp,0x10
c000cc15:	85 c0                	test   eax,eax
c000cc17:	0f 8e 9c 00 00 00    	jle    c000ccb9 <sinc_quad_vari_process+0x4c0>
c000cc1d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cc20:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cc23:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cc27:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cc2b:	52                   	push   edx
c000cc2c:	50                   	push   eax
c000cc2d:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cc30:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cc33:	e8 3c a8 01 00       	call   c0027474 <__subdf3>
c000cc38:	59                   	pop    ecx
c000cc39:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc3d:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc41:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000cc44:	e8 ba ae 01 00       	call   c0027b03 <__floatsidf>
c000cc49:	83 c4 10             	add    esp,0x10
c000cc4c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc50:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc54:	52                   	push   edx
c000cc55:	50                   	push   eax
c000cc56:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc5a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc5e:	e8 3d a8 01 00       	call   c00274a0 <__muldf3>
c000cc63:	5f                   	pop    edi
c000cc64:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc68:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc6c:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000cc6f:	e8 8f ae 01 00       	call   c0027b03 <__floatsidf>
c000cc74:	83 c4 10             	add    esp,0x10
c000cc77:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc7b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc7f:	52                   	push   edx
c000cc80:	50                   	push   eax
c000cc81:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc85:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc89:	e8 f6 aa 01 00       	call   c0027784 <__divdf3>
c000cc8e:	83 c4 10             	add    esp,0x10
c000cc91:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cc95:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cc99:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc9d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cca1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cca5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cca9:	e8 75 a1 01 00       	call   c0026e23 <__adddf3>
c000ccae:	83 c4 10             	add    esp,0x10
c000ccb1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ccb5:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ccb9:	83 ec 0c             	sub    esp,0xc
c000ccbc:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000ccbf:	e8 3f ae 01 00       	call   c0027b03 <__floatsidf>
c000ccc4:	83 c4 10             	add    esp,0x10
c000ccc7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cccb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cccf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccd3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccd7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccdb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccdf:	e8 8b b0 01 00       	call   c0027d6f <__ltdf2>
c000cce4:	83 c4 10             	add    esp,0x10
c000cce7:	85 c0                	test   eax,eax
c000cce9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000cced:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ccf1:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ccf5:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000ccf9:	78 10                	js     c000cd0b <sinc_quad_vari_process+0x512>
c000ccfb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ccff:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000cd03:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cd07:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cd0b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd0f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd13:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd17:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd1b:	e8 80 a7 01 00       	call   c00274a0 <__muldf3>
c000cd20:	59                   	pop    ecx
c000cd21:	5f                   	pop    edi
c000cd22:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cd26:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd2a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd2e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd32:	e8 98 eb ff ff       	call   c000b8cf <double_to_fp>
c000cd37:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd3b:	89 c7                	mov    edi,eax
c000cd3d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd41:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd45:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd49:	e8 52 a7 01 00       	call   c00274a0 <__muldf3>
c000cd4e:	83 c4 18             	add    esp,0x18
c000cd51:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cd55:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cd59:	52                   	push   edx
c000cd5a:	50                   	push   eax
c000cd5b:	e8 6f eb ff ff       	call   c000b8cf <double_to_fp>
c000cd60:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000cd63:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cd67:	83 c4 0c             	add    esp,0xc
c000cd6a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000cd6d:	8d 04 90             	lea    eax,[eax+edx*4]
c000cd70:	50                   	push   eax
c000cd71:	50                   	push   eax
c000cd72:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cd75:	e8 89 ad 01 00       	call   c0027b03 <__floatsidf>
c000cd7a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cd7e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000cd82:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd86:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd8a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd8e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd92:	e8 ed a9 01 00       	call   c0027784 <__divdf3>
c000cd97:	83 c4 18             	add    esp,0x18
c000cd9a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd9e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cda2:	52                   	push   edx
c000cda3:	89 fa                	mov    edx,edi
c000cda5:	50                   	push   eax
c000cda6:	89 d8                	mov    eax,ebx
c000cda8:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000cdac:	e8 a5 d1 ff ff       	call   c0009f56 <calc_output_quad>
c000cdb1:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000cdb5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdb9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdbd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cdc1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cdc5:	e8 ba a9 01 00       	call   c0027784 <__divdf3>
c000cdca:	83 c4 10             	add    esp,0x10
c000cdcd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cdd1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cdd5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cdd9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cddd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde5:	e8 39 a0 01 00       	call   c0026e23 <__adddf3>
c000cdea:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000cdee:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000cdf2:	83 c4 18             	add    esp,0x18
c000cdf5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdf9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdfd:	e8 1e b1 01 00       	call   c0027f20 <lrint>
c000ce02:	83 ec 0c             	sub    esp,0xc
c000ce05:	50                   	push   eax
c000ce06:	e8 f8 ac 01 00       	call   c0027b03 <__floatsidf>
c000ce0b:	83 c4 10             	add    esp,0x10
c000ce0e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ce12:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ce16:	52                   	push   edx
c000ce17:	50                   	push   eax
c000ce18:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce1c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce20:	e8 4f a6 01 00       	call   c0027474 <__subdf3>
c000ce25:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce29:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce2d:	83 c4 20             	add    esp,0x20
c000ce30:	6a 00                	push   0x0
c000ce32:	6a 00                	push   0x0
c000ce34:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce3c:	e8 2e af 01 00       	call   c0027d6f <__ltdf2>
c000ce41:	83 c4 10             	add    esp,0x10
c000ce44:	85 c0                	test   eax,eax
c000ce46:	79 20                	jns    c000ce68 <sinc_quad_vari_process+0x66f>
c000ce48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce50:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce54:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce58:	e8 c6 9f 01 00       	call   c0026e23 <__adddf3>
c000ce5d:	83 c4 10             	add    esp,0x10
c000ce60:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ce64:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ce68:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ce6b:	83 ec 10             	sub    esp,0x10
c000ce6e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ce72:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ce75:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce79:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce7d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce81:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce85:	e8 ea a5 01 00       	call   c0027474 <__subdf3>
c000ce8a:	83 c4 18             	add    esp,0x18
c000ce8d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce91:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce95:	52                   	push   edx
c000ce96:	50                   	push   eax
c000ce97:	e8 84 b0 01 00       	call   c0027f20 <lrint>
c000ce9c:	0f af f8             	imul   edi,eax
c000ce9f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000cea3:	83 c4 10             	add    esp,0x10
c000cea6:	01 f8                	add    eax,edi
c000cea8:	99                   	cdq    
c000cea9:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ceac:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ceaf:	e9 fd fb ff ff       	jmp    c000cab1 <sinc_quad_vari_process+0x2b8>
c000ceb4:	83 c4 4c             	add    esp,0x4c
c000ceb7:	89 d0                	mov    eax,edx
c000ceb9:	5b                   	pop    ebx
c000ceba:	5e                   	pop    esi
c000cebb:	5f                   	pop    edi
c000cebc:	5d                   	pop    ebp
c000cebd:	c3                   	ret    

c000cebe <sinc_stereo_vari_process>:
c000cebe:	55                   	push   ebp
c000cebf:	ba 05 00 00 00       	mov    edx,0x5
c000cec4:	57                   	push   edi
c000cec5:	56                   	push   esi
c000cec6:	53                   	push   ebx
c000cec7:	83 ec 4c             	sub    esp,0x4c
c000ceca:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000cece:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000ced2:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000ced5:	85 db                	test   ebx,ebx
c000ced7:	0f 84 9c 06 00 00    	je     c000d579 <sinc_stereo_vari_process+0x6bb>
c000cedd:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000cee0:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cee3:	0f af c7             	imul   eax,edi
c000cee6:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000cee9:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000ceec:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000cef3:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000cefa:	0f af c7             	imul   eax,edi
c000cefd:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000cf00:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cf03:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cf06:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cf0a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cf0e:	68 00 00 70 3f       	push   0x3f700000
c000cf13:	6a 00                	push   0x0
c000cf15:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf19:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf1d:	e8 4d ae 01 00       	call   c0027d6f <__ltdf2>
c000cf22:	83 c4 10             	add    esp,0x10
c000cf25:	ba 16 00 00 00       	mov    edx,0x16
c000cf2a:	85 c0                	test   eax,eax
c000cf2c:	0f 88 47 06 00 00    	js     c000d579 <sinc_stereo_vari_process+0x6bb>
c000cf32:	68 00 00 70 40       	push   0x40700000
c000cf37:	6a 00                	push   0x0
c000cf39:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf3d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf41:	e8 0b ae 01 00       	call   c0027d51 <__gtdf2>
c000cf46:	83 c4 10             	add    esp,0x10
c000cf49:	ba 16 00 00 00       	mov    edx,0x16
c000cf4e:	85 c0                	test   eax,eax
c000cf50:	0f 8f 23 06 00 00    	jg     c000d579 <sinc_stereo_vari_process+0x6bb>
c000cf56:	83 ec 0c             	sub    esp,0xc
c000cf59:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000cf5c:	e8 a2 ab 01 00       	call   c0027b03 <__floatsidf>
c000cf61:	83 c4 10             	add    esp,0x10
c000cf64:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf68:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cf6c:	68 00 00 00 40       	push   0x40000000
c000cf71:	6a 00                	push   0x0
c000cf73:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf77:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf7b:	e8 a3 9e 01 00       	call   c0026e23 <__adddf3>
c000cf80:	59                   	pop    ecx
c000cf81:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cf85:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cf89:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cf8c:	e8 72 ab 01 00       	call   c0027b03 <__floatsidf>
c000cf91:	83 c4 10             	add    esp,0x10
c000cf94:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cf98:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cf9c:	52                   	push   edx
c000cf9d:	50                   	push   eax
c000cf9e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfa2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfa6:	e8 d9 a7 01 00       	call   c0027784 <__divdf3>
c000cfab:	83 c4 10             	add    esp,0x10
c000cfae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cfb2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cfb6:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000cfb9:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000cfbc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cfc0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cfc4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfc8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfcc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfd0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfd4:	e8 78 ad 01 00       	call   c0027d51 <__gtdf2>
c000cfd9:	83 c4 10             	add    esp,0x10
c000cfdc:	85 c0                	test   eax,eax
c000cfde:	7e 2d                	jle    c000d00d <sinc_stereo_vari_process+0x14f>
c000cfe0:	68 00 00 f0 3f       	push   0x3ff00000
c000cfe5:	6a 00                	push   0x0
c000cfe7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfeb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfef:	e8 7b ad 01 00       	call   c0027d6f <__ltdf2>
c000cff4:	83 c4 10             	add    esp,0x10
c000cff7:	85 c0                	test   eax,eax
c000cff9:	79 4d                	jns    c000d048 <sinc_stereo_vari_process+0x18a>
c000cffb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfff:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d003:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d007:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d00b:	eb 1b                	jmp    c000d028 <sinc_stereo_vari_process+0x16a>
c000d00d:	68 00 00 f0 3f       	push   0x3ff00000
c000d012:	6a 00                	push   0x0
c000d014:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d018:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d01c:	e8 4e ad 01 00       	call   c0027d6f <__ltdf2>
c000d021:	83 c4 10             	add    esp,0x10
c000d024:	85 c0                	test   eax,eax
c000d026:	79 20                	jns    c000d048 <sinc_stereo_vari_process+0x18a>
c000d028:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d02c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d030:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d034:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d038:	e8 47 a7 01 00       	call   c0027784 <__divdf3>
c000d03d:	83 c4 10             	add    esp,0x10
c000d040:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d044:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d048:	50                   	push   eax
c000d049:	50                   	push   eax
c000d04a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d04e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d052:	e8 c9 ae 01 00       	call   c0027f20 <lrint>
c000d057:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d05a:	40                   	inc    eax
c000d05b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d05f:	0f af c7             	imul   eax,edi
c000d062:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000d066:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d069:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d06d:	58                   	pop    eax
c000d06e:	5a                   	pop    edx
c000d06f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d073:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d077:	e8 a4 ae 01 00       	call   c0027f20 <lrint>
c000d07c:	83 ec 0c             	sub    esp,0xc
c000d07f:	50                   	push   eax
c000d080:	e8 7e aa 01 00       	call   c0027b03 <__floatsidf>
c000d085:	83 c4 10             	add    esp,0x10
c000d088:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d08c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d090:	52                   	push   edx
c000d091:	50                   	push   eax
c000d092:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d096:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d09a:	e8 d5 a3 01 00       	call   c0027474 <__subdf3>
c000d09f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d0a3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d0a7:	83 c4 20             	add    esp,0x20
c000d0aa:	6a 00                	push   0x0
c000d0ac:	6a 00                	push   0x0
c000d0ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0b6:	e8 b4 ac 01 00       	call   c0027d6f <__ltdf2>
c000d0bb:	83 c4 10             	add    esp,0x10
c000d0be:	85 c0                	test   eax,eax
c000d0c0:	79 1f                	jns    c000d0e1 <sinc_stereo_vari_process+0x223>
c000d0c2:	68 00 00 f0 3f       	push   0x3ff00000
c000d0c7:	6a 00                	push   0x0
c000d0c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0d1:	e8 4d 9d 01 00       	call   c0026e23 <__adddf3>
c000d0d6:	83 c4 10             	add    esp,0x10
c000d0d9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d0dd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d0e1:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d0e4:	83 ec 10             	sub    esp,0x10
c000d0e7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d0eb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d0ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0f6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0fa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0fe:	e8 71 a3 01 00       	call   c0027474 <__subdf3>
c000d103:	83 c4 18             	add    esp,0x18
c000d106:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d10a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d10e:	52                   	push   edx
c000d10f:	50                   	push   eax
c000d110:	e8 0b ae 01 00       	call   c0027f20 <lrint>
c000d115:	0f af f8             	imul   edi,eax
c000d118:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d11c:	01 f8                	add    eax,edi
c000d11e:	99                   	cdq    
c000d11f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d122:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d125:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d129:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d12d:	68 00 00 f0 3f       	push   0x3ff00000
c000d132:	6a 00                	push   0x0
c000d134:	e8 4b a6 01 00       	call   c0027784 <__divdf3>
c000d139:	83 c4 10             	add    esp,0x10
c000d13c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d140:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d144:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d149:	68 23 42 92 0c       	push   0xc924223
c000d14e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d152:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d156:	e8 c8 9c 01 00       	call   c0026e23 <__adddf3>
c000d15b:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000d15f:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000d163:	83 c4 20             	add    esp,0x20
c000d166:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000d16e:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000d176:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d179:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d17c:	7d 50                	jge    c000d1ce <sinc_stereo_vari_process+0x310>
c000d17e:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d181:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d184:	01 c8                	add    eax,ecx
c000d186:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d189:	99                   	cdq    
c000d18a:	f7 f9                	idiv   ecx
c000d18c:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d190:	7d 0c                	jge    c000d19e <sinc_stereo_vari_process+0x2e0>
c000d192:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d195:	85 ff                	test   edi,edi
c000d197:	79 6c                	jns    c000d205 <sinc_stereo_vari_process+0x347>
c000d199:	e9 e7 00 00 00       	jmp    c000d285 <sinc_stereo_vari_process+0x3c7>
c000d19e:	50                   	push   eax
c000d19f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d1a3:	56                   	push   esi
c000d1a4:	53                   	push   ebx
c000d1a5:	e8 4c e7 ff ff       	call   c000b8f6 <prepare_data>
c000d1aa:	83 c4 10             	add    esp,0x10
c000d1ad:	89 c2                	mov    edx,eax
c000d1af:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000d1b2:	85 c0                	test   eax,eax
c000d1b4:	0f 85 bf 03 00 00    	jne    c000d579 <sinc_stereo_vari_process+0x6bb>
c000d1ba:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d1bd:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d1c0:	01 c8                	add    eax,ecx
c000d1c2:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d1c5:	99                   	cdq    
c000d1c6:	f7 f9                	idiv   ecx
c000d1c8:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d1cc:	7c c4                	jl     c000d192 <sinc_stereo_vari_process+0x2d4>
c000d1ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d1d2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d1d6:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000d1d9:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d1dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1e0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d1e4:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000d1e7:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000d1ea:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d1ed:	99                   	cdq    
c000d1ee:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1f1:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d1f4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d1f7:	99                   	cdq    
c000d1f8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1fb:	31 d2                	xor    edx,edx
c000d1fd:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d200:	e9 74 03 00 00       	jmp    c000d579 <sinc_stereo_vari_process+0x6bb>
c000d205:	83 ec 0c             	sub    esp,0xc
c000d208:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d20b:	e8 f3 a8 01 00       	call   c0027b03 <__floatsidf>
c000d210:	83 c4 10             	add    esp,0x10
c000d213:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d217:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d21b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d21f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d223:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d227:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d22b:	e8 f3 9b 01 00       	call   c0026e23 <__adddf3>
c000d230:	83 c4 10             	add    esp,0x10
c000d233:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d237:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d23b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d23f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d243:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d247:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d24b:	e8 d3 9b 01 00       	call   c0026e23 <__adddf3>
c000d250:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d253:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d257:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d25b:	e8 a3 a8 01 00       	call   c0027b03 <__floatsidf>
c000d260:	83 c4 10             	add    esp,0x10
c000d263:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d267:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d26b:	52                   	push   edx
c000d26c:	50                   	push   eax
c000d26d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d271:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d275:	e8 f3 aa 01 00       	call   c0027d6d <__gedf2>
c000d27a:	83 c4 10             	add    esp,0x10
c000d27d:	85 c0                	test   eax,eax
c000d27f:	0f 89 49 ff ff ff    	jns    c000d1ce <sinc_stereo_vari_process+0x310>
c000d285:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d289:	0f 8e ef 00 00 00    	jle    c000d37e <sinc_stereo_vari_process+0x4c0>
c000d28f:	83 ec 10             	sub    esp,0x10
c000d292:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d295:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d298:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d29b:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d29e:	e8 d1 a1 01 00       	call   c0027474 <__subdf3>
c000d2a3:	83 c4 18             	add    esp,0x18
c000d2a6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d2aa:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d2ae:	52                   	push   edx
c000d2af:	50                   	push   eax
c000d2b0:	e8 4b ac 01 00       	call   c0027f00 <fabs>
c000d2b5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d2b9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d2bd:	83 c4 10             	add    esp,0x10
c000d2c0:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d2c5:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d2ca:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2ce:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2d2:	e8 7a aa 01 00       	call   c0027d51 <__gtdf2>
c000d2d7:	83 c4 10             	add    esp,0x10
c000d2da:	85 c0                	test   eax,eax
c000d2dc:	0f 8e 9c 00 00 00    	jle    c000d37e <sinc_stereo_vari_process+0x4c0>
c000d2e2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d2e5:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d2e8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d2ec:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d2f0:	52                   	push   edx
c000d2f1:	50                   	push   eax
c000d2f2:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d2f5:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d2f8:	e8 77 a1 01 00       	call   c0027474 <__subdf3>
c000d2fd:	59                   	pop    ecx
c000d2fe:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d302:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d306:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d309:	e8 f5 a7 01 00       	call   c0027b03 <__floatsidf>
c000d30e:	83 c4 10             	add    esp,0x10
c000d311:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d315:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d319:	52                   	push   edx
c000d31a:	50                   	push   eax
c000d31b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d31f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d323:	e8 78 a1 01 00       	call   c00274a0 <__muldf3>
c000d328:	5f                   	pop    edi
c000d329:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d32d:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d331:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d334:	e8 ca a7 01 00       	call   c0027b03 <__floatsidf>
c000d339:	83 c4 10             	add    esp,0x10
c000d33c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d340:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d344:	52                   	push   edx
c000d345:	50                   	push   eax
c000d346:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d34a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d34e:	e8 31 a4 01 00       	call   c0027784 <__divdf3>
c000d353:	83 c4 10             	add    esp,0x10
c000d356:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d35a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d35e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d362:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d366:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d36a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d36e:	e8 b0 9a 01 00       	call   c0026e23 <__adddf3>
c000d373:	83 c4 10             	add    esp,0x10
c000d376:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d37a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d37e:	83 ec 0c             	sub    esp,0xc
c000d381:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d384:	e8 7a a7 01 00       	call   c0027b03 <__floatsidf>
c000d389:	83 c4 10             	add    esp,0x10
c000d38c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d390:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d394:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d398:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d39c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3a4:	e8 c6 a9 01 00       	call   c0027d6f <__ltdf2>
c000d3a9:	83 c4 10             	add    esp,0x10
c000d3ac:	85 c0                	test   eax,eax
c000d3ae:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d3b2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d3b6:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000d3ba:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000d3be:	78 10                	js     c000d3d0 <sinc_stereo_vari_process+0x512>
c000d3c0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d3c4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d3c8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d3cc:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d3d0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3dc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3e0:	e8 bb a0 01 00       	call   c00274a0 <__muldf3>
c000d3e5:	59                   	pop    ecx
c000d3e6:	5f                   	pop    edi
c000d3e7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d3eb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d3ef:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3f3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3f7:	e8 d3 e4 ff ff       	call   c000b8cf <double_to_fp>
c000d3fc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d400:	89 c7                	mov    edi,eax
c000d402:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d406:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d40a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d40e:	e8 8d a0 01 00       	call   c00274a0 <__muldf3>
c000d413:	83 c4 18             	add    esp,0x18
c000d416:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d41a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d41e:	52                   	push   edx
c000d41f:	50                   	push   eax
c000d420:	e8 aa e4 ff ff       	call   c000b8cf <double_to_fp>
c000d425:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000d428:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d42c:	83 c4 0c             	add    esp,0xc
c000d42f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d432:	8d 04 90             	lea    eax,[eax+edx*4]
c000d435:	50                   	push   eax
c000d436:	50                   	push   eax
c000d437:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d43a:	e8 c4 a6 01 00       	call   c0027b03 <__floatsidf>
c000d43f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d443:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d447:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d44b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d44f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d453:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d457:	e8 28 a3 01 00       	call   c0027784 <__divdf3>
c000d45c:	83 c4 18             	add    esp,0x18
c000d45f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d463:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d467:	52                   	push   edx
c000d468:	89 fa                	mov    edx,edi
c000d46a:	50                   	push   eax
c000d46b:	89 d8                	mov    eax,ebx
c000d46d:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d471:	e8 02 c7 ff ff       	call   c0009b78 <calc_output_stereo>
c000d476:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000d47a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d47e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d482:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d486:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d48a:	e8 f5 a2 01 00       	call   c0027784 <__divdf3>
c000d48f:	83 c4 10             	add    esp,0x10
c000d492:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d496:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d49a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d49e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4a2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4a6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4aa:	e8 74 99 01 00       	call   c0026e23 <__adddf3>
c000d4af:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d4b3:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d4b7:	83 c4 18             	add    esp,0x18
c000d4ba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d4be:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d4c2:	e8 59 aa 01 00       	call   c0027f20 <lrint>
c000d4c7:	83 ec 0c             	sub    esp,0xc
c000d4ca:	50                   	push   eax
c000d4cb:	e8 33 a6 01 00       	call   c0027b03 <__floatsidf>
c000d4d0:	83 c4 10             	add    esp,0x10
c000d4d3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d4d7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d4db:	52                   	push   edx
c000d4dc:	50                   	push   eax
c000d4dd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4e1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4e5:	e8 8a 9f 01 00       	call   c0027474 <__subdf3>
c000d4ea:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d4ee:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d4f2:	83 c4 20             	add    esp,0x20
c000d4f5:	6a 00                	push   0x0
c000d4f7:	6a 00                	push   0x0
c000d4f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d501:	e8 69 a8 01 00       	call   c0027d6f <__ltdf2>
c000d506:	83 c4 10             	add    esp,0x10
c000d509:	85 c0                	test   eax,eax
c000d50b:	79 20                	jns    c000d52d <sinc_stereo_vari_process+0x66f>
c000d50d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d511:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d515:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d519:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d51d:	e8 01 99 01 00       	call   c0026e23 <__adddf3>
c000d522:	83 c4 10             	add    esp,0x10
c000d525:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d529:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d52d:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d530:	83 ec 10             	sub    esp,0x10
c000d533:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d537:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d53a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d53e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d542:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d546:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d54a:	e8 25 9f 01 00       	call   c0027474 <__subdf3>
c000d54f:	83 c4 18             	add    esp,0x18
c000d552:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d556:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d55a:	52                   	push   edx
c000d55b:	50                   	push   eax
c000d55c:	e8 bf a9 01 00       	call   c0027f20 <lrint>
c000d561:	0f af f8             	imul   edi,eax
c000d564:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d568:	83 c4 10             	add    esp,0x10
c000d56b:	01 f8                	add    eax,edi
c000d56d:	99                   	cdq    
c000d56e:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d571:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d574:	e9 fd fb ff ff       	jmp    c000d176 <sinc_stereo_vari_process+0x2b8>
c000d579:	83 c4 4c             	add    esp,0x4c
c000d57c:	89 d0                	mov    eax,edx
c000d57e:	5b                   	pop    ebx
c000d57f:	5e                   	pop    esi
c000d580:	5f                   	pop    edi
c000d581:	5d                   	pop    ebp
c000d582:	c3                   	ret    

c000d583 <sinc_mono_vari_process>:
c000d583:	55                   	push   ebp
c000d584:	ba 05 00 00 00       	mov    edx,0x5
c000d589:	57                   	push   edi
c000d58a:	56                   	push   esi
c000d58b:	53                   	push   ebx
c000d58c:	83 ec 4c             	sub    esp,0x4c
c000d58f:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d593:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000d597:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000d59a:	85 db                	test   ebx,ebx
c000d59c:	0f 84 c1 06 00 00    	je     c000dc63 <sinc_mono_vari_process+0x6e0>
c000d5a2:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000d5a5:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d5a8:	0f af c7             	imul   eax,edi
c000d5ab:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000d5ae:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000d5b1:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000d5b8:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000d5bf:	0f af c7             	imul   eax,edi
c000d5c2:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000d5c5:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d5c9:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d5cc:	8b 00                	mov    eax,DWORD PTR [eax]
c000d5ce:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d5d2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d5d6:	68 00 00 70 3f       	push   0x3f700000
c000d5db:	6a 00                	push   0x0
c000d5dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5e1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5e5:	e8 85 a7 01 00       	call   c0027d6f <__ltdf2>
c000d5ea:	83 c4 10             	add    esp,0x10
c000d5ed:	ba 16 00 00 00       	mov    edx,0x16
c000d5f2:	85 c0                	test   eax,eax
c000d5f4:	0f 88 69 06 00 00    	js     c000dc63 <sinc_mono_vari_process+0x6e0>
c000d5fa:	68 00 00 70 40       	push   0x40700000
c000d5ff:	6a 00                	push   0x0
c000d601:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d605:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d609:	e8 43 a7 01 00       	call   c0027d51 <__gtdf2>
c000d60e:	83 c4 10             	add    esp,0x10
c000d611:	ba 16 00 00 00       	mov    edx,0x16
c000d616:	85 c0                	test   eax,eax
c000d618:	0f 8f 45 06 00 00    	jg     c000dc63 <sinc_mono_vari_process+0x6e0>
c000d61e:	83 ec 0c             	sub    esp,0xc
c000d621:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000d624:	e8 da a4 01 00       	call   c0027b03 <__floatsidf>
c000d629:	83 c4 10             	add    esp,0x10
c000d62c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d630:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d634:	68 00 00 00 40       	push   0x40000000
c000d639:	6a 00                	push   0x0
c000d63b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d63f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d643:	e8 db 97 01 00       	call   c0026e23 <__adddf3>
c000d648:	59                   	pop    ecx
c000d649:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d64d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d651:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d654:	e8 aa a4 01 00       	call   c0027b03 <__floatsidf>
c000d659:	83 c4 10             	add    esp,0x10
c000d65c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d660:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d664:	52                   	push   edx
c000d665:	50                   	push   eax
c000d666:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d66a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d66e:	e8 11 a1 01 00       	call   c0027784 <__divdf3>
c000d673:	83 c4 10             	add    esp,0x10
c000d676:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d67a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d67e:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000d681:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000d684:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d688:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d68c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d690:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d694:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d698:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d69c:	e8 b0 a6 01 00       	call   c0027d51 <__gtdf2>
c000d6a1:	83 c4 10             	add    esp,0x10
c000d6a4:	85 c0                	test   eax,eax
c000d6a6:	7e 2d                	jle    c000d6d5 <sinc_mono_vari_process+0x152>
c000d6a8:	68 00 00 f0 3f       	push   0x3ff00000
c000d6ad:	6a 00                	push   0x0
c000d6af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6b7:	e8 b3 a6 01 00       	call   c0027d6f <__ltdf2>
c000d6bc:	83 c4 10             	add    esp,0x10
c000d6bf:	85 c0                	test   eax,eax
c000d6c1:	79 4d                	jns    c000d710 <sinc_mono_vari_process+0x18d>
c000d6c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6c7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d6cb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d6cf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d6d3:	eb 1b                	jmp    c000d6f0 <sinc_mono_vari_process+0x16d>
c000d6d5:	68 00 00 f0 3f       	push   0x3ff00000
c000d6da:	6a 00                	push   0x0
c000d6dc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6e4:	e8 86 a6 01 00       	call   c0027d6f <__ltdf2>
c000d6e9:	83 c4 10             	add    esp,0x10
c000d6ec:	85 c0                	test   eax,eax
c000d6ee:	79 20                	jns    c000d710 <sinc_mono_vari_process+0x18d>
c000d6f0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6f4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6f8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6fc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d700:	e8 7f a0 01 00       	call   c0027784 <__divdf3>
c000d705:	83 c4 10             	add    esp,0x10
c000d708:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d70c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d710:	50                   	push   eax
c000d711:	50                   	push   eax
c000d712:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d716:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d71a:	e8 01 a8 01 00       	call   c0027f20 <lrint>
c000d71f:	40                   	inc    eax
c000d720:	0f af c7             	imul   eax,edi
c000d723:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d727:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d72b:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000d72e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d731:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d735:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d739:	58                   	pop    eax
c000d73a:	5a                   	pop    edx
c000d73b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d73f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d743:	e8 d8 a7 01 00       	call   c0027f20 <lrint>
c000d748:	83 ec 0c             	sub    esp,0xc
c000d74b:	50                   	push   eax
c000d74c:	e8 b2 a3 01 00       	call   c0027b03 <__floatsidf>
c000d751:	83 c4 10             	add    esp,0x10
c000d754:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d758:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d75c:	52                   	push   edx
c000d75d:	50                   	push   eax
c000d75e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d762:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d766:	e8 09 9d 01 00       	call   c0027474 <__subdf3>
c000d76b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d76f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d773:	83 c4 20             	add    esp,0x20
c000d776:	6a 00                	push   0x0
c000d778:	6a 00                	push   0x0
c000d77a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d77e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d782:	e8 e8 a5 01 00       	call   c0027d6f <__ltdf2>
c000d787:	83 c4 10             	add    esp,0x10
c000d78a:	85 c0                	test   eax,eax
c000d78c:	79 1f                	jns    c000d7ad <sinc_mono_vari_process+0x22a>
c000d78e:	68 00 00 f0 3f       	push   0x3ff00000
c000d793:	6a 00                	push   0x0
c000d795:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d799:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d79d:	e8 81 96 01 00       	call   c0026e23 <__adddf3>
c000d7a2:	83 c4 10             	add    esp,0x10
c000d7a5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d7a9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d7ad:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000d7b0:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d7b3:	83 ec 10             	sub    esp,0x10
c000d7b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7be:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7c2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7c6:	e8 a9 9c 01 00       	call   c0027474 <__subdf3>
c000d7cb:	83 c4 18             	add    esp,0x18
c000d7ce:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d7d2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d7d6:	52                   	push   edx
c000d7d7:	50                   	push   eax
c000d7d8:	e8 43 a7 01 00       	call   c0027f20 <lrint>
c000d7dd:	0f af f8             	imul   edi,eax
c000d7e0:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000d7e3:	31 ff                	xor    edi,edi
c000d7e5:	bd 00 00 f0 3f       	mov    ebp,0x3ff00000
c000d7ea:	99                   	cdq    
c000d7eb:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d7ee:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d7f1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7f5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7f9:	55                   	push   ebp
c000d7fa:	57                   	push   edi
c000d7fb:	e8 84 9f 01 00       	call   c0027784 <__divdf3>
c000d800:	83 c4 10             	add    esp,0x10
c000d803:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d807:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d80b:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d810:	68 23 42 92 0c       	push   0xc924223
c000d815:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d819:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d81d:	e8 01 96 01 00       	call   c0026e23 <__adddf3>
c000d822:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000d826:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000d82a:	83 c4 20             	add    esp,0x20
c000d82d:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000d831:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000d835:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d838:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d83b:	7d 54                	jge    c000d891 <sinc_mono_vari_process+0x30e>
c000d83d:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d840:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d843:	01 c8                	add    eax,ecx
c000d845:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d848:	99                   	cdq    
c000d849:	f7 f9                	idiv   ecx
c000d84b:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d84f:	7d 0c                	jge    c000d85d <sinc_mono_vari_process+0x2da>
c000d851:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d854:	85 ff                	test   edi,edi
c000d856:	79 73                	jns    c000d8cb <sinc_mono_vari_process+0x348>
c000d858:	e9 ee 00 00 00       	jmp    c000d94b <sinc_mono_vari_process+0x3c8>
c000d85d:	50                   	push   eax
c000d85e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d862:	56                   	push   esi
c000d863:	53                   	push   ebx
c000d864:	e8 8d e0 ff ff       	call   c000b8f6 <prepare_data>
c000d869:	89 c2                	mov    edx,eax
c000d86b:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d86f:	83 c4 10             	add    esp,0x10
c000d872:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000d875:	85 d2                	test   edx,edx
c000d877:	0f 85 e6 03 00 00    	jne    c000dc63 <sinc_mono_vari_process+0x6e0>
c000d87d:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d880:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d883:	01 c8                	add    eax,ecx
c000d885:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d888:	99                   	cdq    
c000d889:	f7 f9                	idiv   ecx
c000d88b:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d88f:	7c c0                	jl     c000d851 <sinc_mono_vari_process+0x2ce>
c000d891:	8b 4c 24 60          	mov    ecx,DWORD PTR [esp+0x60]
c000d895:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d899:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d89d:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000d8a0:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000d8a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d8a7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d8ab:	89 01                	mov    DWORD PTR [ecx],eax
c000d8ad:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000d8b0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d8b3:	99                   	cdq    
c000d8b4:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d8b7:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d8ba:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d8bd:	99                   	cdq    
c000d8be:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d8c1:	31 d2                	xor    edx,edx
c000d8c3:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d8c6:	e9 98 03 00 00       	jmp    c000dc63 <sinc_mono_vari_process+0x6e0>
c000d8cb:	83 ec 0c             	sub    esp,0xc
c000d8ce:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d8d1:	e8 2d a2 01 00       	call   c0027b03 <__floatsidf>
c000d8d6:	83 c4 10             	add    esp,0x10
c000d8d9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8dd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d8e1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8e5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8e9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8ed:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8f1:	e8 2d 95 01 00       	call   c0026e23 <__adddf3>
c000d8f6:	83 c4 10             	add    esp,0x10
c000d8f9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8fd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d901:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d905:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d909:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d90d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d911:	e8 0d 95 01 00       	call   c0026e23 <__adddf3>
c000d916:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d919:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d91d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d921:	e8 dd a1 01 00       	call   c0027b03 <__floatsidf>
c000d926:	83 c4 10             	add    esp,0x10
c000d929:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d92d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d931:	52                   	push   edx
c000d932:	50                   	push   eax
c000d933:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d937:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d93b:	e8 11 a4 01 00       	call   c0027d51 <__gtdf2>
c000d940:	83 c4 10             	add    esp,0x10
c000d943:	85 c0                	test   eax,eax
c000d945:	0f 8f 46 ff ff ff    	jg     c000d891 <sinc_mono_vari_process+0x30e>
c000d94b:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d94f:	0f 8e f5 00 00 00    	jle    c000da4a <sinc_mono_vari_process+0x4c7>
c000d955:	83 ec 10             	sub    esp,0x10
c000d958:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d95b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d95e:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000d962:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d965:	ff 30                	push   DWORD PTR [eax]
c000d967:	e8 08 9b 01 00       	call   c0027474 <__subdf3>
c000d96c:	83 c4 18             	add    esp,0x18
c000d96f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d973:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d977:	52                   	push   edx
c000d978:	50                   	push   eax
c000d979:	e8 82 a5 01 00       	call   c0027f00 <fabs>
c000d97e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d982:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d986:	83 c4 10             	add    esp,0x10
c000d989:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d98e:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d993:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d997:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d99b:	e8 b1 a3 01 00       	call   c0027d51 <__gtdf2>
c000d9a0:	83 c4 10             	add    esp,0x10
c000d9a3:	85 c0                	test   eax,eax
c000d9a5:	0f 8e 9f 00 00 00    	jle    c000da4a <sinc_mono_vari_process+0x4c7>
c000d9ab:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d9af:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d9b2:	8b 00                	mov    eax,DWORD PTR [eax]
c000d9b4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d9b8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d9bc:	52                   	push   edx
c000d9bd:	50                   	push   eax
c000d9be:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d9c1:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d9c4:	e8 ab 9a 01 00       	call   c0027474 <__subdf3>
c000d9c9:	5f                   	pop    edi
c000d9ca:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d9ce:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d9d2:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d9d5:	e8 29 a1 01 00       	call   c0027b03 <__floatsidf>
c000d9da:	83 c4 10             	add    esp,0x10
c000d9dd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9e1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9e5:	52                   	push   edx
c000d9e6:	50                   	push   eax
c000d9e7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9eb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9ef:	e8 ac 9a 01 00       	call   c00274a0 <__muldf3>
c000d9f4:	5d                   	pop    ebp
c000d9f5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d9f9:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d9fd:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000da00:	e8 fe a0 01 00       	call   c0027b03 <__floatsidf>
c000da05:	83 c4 10             	add    esp,0x10
c000da08:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da0c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da10:	52                   	push   edx
c000da11:	50                   	push   eax
c000da12:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da16:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da1a:	e8 65 9d 01 00       	call   c0027784 <__divdf3>
c000da1f:	83 c4 10             	add    esp,0x10
c000da22:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da26:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da2a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da2e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da32:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da36:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da3a:	e8 e4 93 01 00       	call   c0026e23 <__adddf3>
c000da3f:	83 c4 10             	add    esp,0x10
c000da42:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000da46:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000da4a:	83 ec 0c             	sub    esp,0xc
c000da4d:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000da50:	e8 ae a0 01 00       	call   c0027b03 <__floatsidf>
c000da55:	83 c4 10             	add    esp,0x10
c000da58:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da5c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da70:	e8 fa a2 01 00       	call   c0027d6f <__ltdf2>
c000da75:	83 c4 10             	add    esp,0x10
c000da78:	85 c0                	test   eax,eax
c000da7a:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000da7e:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000da82:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000da86:	89 6c 24 2c          	mov    DWORD PTR [esp+0x2c],ebp
c000da8a:	78 10                	js     c000da9c <sinc_mono_vari_process+0x519>
c000da8c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000da90:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000da94:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da98:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da9c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000daa0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000daa4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000daa8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000daac:	e8 ef 99 01 00       	call   c00274a0 <__muldf3>
c000dab1:	59                   	pop    ecx
c000dab2:	5f                   	pop    edi
c000dab3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dab7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dabb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dabf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dac3:	e8 07 de ff ff       	call   c000b8cf <double_to_fp>
c000dac8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dacc:	89 c7                	mov    edi,eax
c000dace:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dad2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dad6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dada:	e8 c1 99 01 00       	call   c00274a0 <__muldf3>
c000dadf:	83 c4 18             	add    esp,0x18
c000dae2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000dae6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000daea:	52                   	push   edx
c000daeb:	50                   	push   eax
c000daec:	e8 de dd ff ff       	call   c000b8cf <double_to_fp>
c000daf1:	83 ec 0c             	sub    esp,0xc
c000daf4:	89 c5                	mov    ebp,eax
c000daf6:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000daf9:	e8 05 a0 01 00       	call   c0027b03 <__floatsidf>
c000dafe:	83 c4 10             	add    esp,0x10
c000db01:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db05:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db09:	52                   	push   edx
c000db0a:	50                   	push   eax
c000db0b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db0f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db13:	e8 6c 9c 01 00       	call   c0027784 <__divdf3>
c000db18:	83 c4 10             	add    esp,0x10
c000db1b:	89 e9                	mov    ecx,ebp
c000db1d:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db21:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db25:	89 d8                	mov    eax,ebx
c000db27:	89 fa                	mov    edx,edi
c000db29:	e8 ee bd ff ff       	call   c000991c <calc_output_single>
c000db2e:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000db31:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000db34:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db38:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db3c:	52                   	push   edx
c000db3d:	50                   	push   eax
c000db3e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db42:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db46:	e8 55 99 01 00       	call   c00274a0 <__muldf3>
c000db4b:	59                   	pop    ecx
c000db4c:	59                   	pop    ecx
c000db4d:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db51:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db55:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db59:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db5d:	e8 11 a2 01 00       	call   c0027d73 <__truncdfsf2>
c000db62:	83 c4 10             	add    esp,0x10
c000db65:	89 04 af             	mov    DWORD PTR [edi+ebp*4],eax
c000db68:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000db6b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db6f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db73:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db77:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db7b:	e8 04 9c 01 00       	call   c0027784 <__divdf3>
c000db80:	83 c4 10             	add    esp,0x10
c000db83:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db87:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db8b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db8f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db93:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db97:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db9b:	e8 83 92 01 00       	call   c0026e23 <__adddf3>
c000dba0:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000dba4:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000dba8:	83 c4 18             	add    esp,0x18
c000dbab:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dbaf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dbb3:	e8 68 a3 01 00       	call   c0027f20 <lrint>
c000dbb8:	83 ec 0c             	sub    esp,0xc
c000dbbb:	50                   	push   eax
c000dbbc:	e8 42 9f 01 00       	call   c0027b03 <__floatsidf>
c000dbc1:	83 c4 10             	add    esp,0x10
c000dbc4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dbc8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dbcc:	52                   	push   edx
c000dbcd:	50                   	push   eax
c000dbce:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbd2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbd6:	e8 99 98 01 00       	call   c0027474 <__subdf3>
c000dbdb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dbdf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dbe3:	83 c4 20             	add    esp,0x20
c000dbe6:	6a 00                	push   0x0
c000dbe8:	6a 00                	push   0x0
c000dbea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbf2:	e8 78 a1 01 00       	call   c0027d6f <__ltdf2>
c000dbf7:	83 c4 10             	add    esp,0x10
c000dbfa:	85 c0                	test   eax,eax
c000dbfc:	79 20                	jns    c000dc1e <sinc_mono_vari_process+0x69b>
c000dbfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc06:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc0a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc0e:	e8 10 92 01 00       	call   c0026e23 <__adddf3>
c000dc13:	83 c4 10             	add    esp,0x10
c000dc16:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dc1a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dc1e:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000dc21:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000dc24:	83 ec 10             	sub    esp,0x10
c000dc27:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc2b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc2f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dc33:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dc37:	e8 38 98 01 00       	call   c0027474 <__subdf3>
c000dc3c:	83 c4 18             	add    esp,0x18
c000dc3f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dc43:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dc47:	52                   	push   edx
c000dc48:	50                   	push   eax
c000dc49:	e8 d2 a2 01 00       	call   c0027f20 <lrint>
c000dc4e:	83 c4 10             	add    esp,0x10
c000dc51:	0f af f8             	imul   edi,eax
c000dc54:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000dc57:	99                   	cdq    
c000dc58:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000dc5b:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000dc5e:	e9 d2 fb ff ff       	jmp    c000d835 <sinc_mono_vari_process+0x2b2>
c000dc63:	83 c4 4c             	add    esp,0x4c
c000dc66:	89 d0                	mov    eax,edx
c000dc68:	5b                   	pop    ebx
c000dc69:	5e                   	pop    esi
c000dc6a:	5f                   	pop    edi
c000dc6b:	5d                   	pop    ebp
c000dc6c:	c3                   	ret    

c000dc6d <sinc_get_name>:
c000dc6d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc71:	31 c0                	xor    eax,eax
c000dc73:	83 fa 02             	cmp    edx,0x2
c000dc76:	77 07                	ja     c000dc7f <sinc_get_name+0x12>
c000dc78:	8b 04 95 04 97 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd68fc]
c000dc7f:	c3                   	ret    

c000dc80 <sinc_get_description>:
c000dc80:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc84:	31 c0                	xor    eax,eax
c000dc86:	83 fa 02             	cmp    edx,0x2
c000dc89:	77 07                	ja     c000dc92 <sinc_get_description+0x12>
c000dc8b:	8b 04 95 f8 96 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6908]
c000dc92:	c3                   	ret    

c000dc93 <sinc_set_converter>:
c000dc93:	53                   	push   ebx
c000dc94:	81 ec 58 08 00 00    	sub    esp,0x858
c000dc9a:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000dca1:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000dca4:	85 c0                	test   eax,eax
c000dca6:	74 13                	je     c000dcbb <sinc_set_converter+0x28>
c000dca8:	83 ec 0c             	sub    esp,0xc
c000dcab:	50                   	push   eax
c000dcac:	e8 a5 1b 00 00       	call   c000f856 <free>
c000dcb1:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000dcb8:	83 c4 10             	add    esp,0x10
c000dcbb:	50                   	push   eax
c000dcbc:	68 44 08 00 00       	push   0x844
c000dcc1:	6a 00                	push   0x0
c000dcc3:	8d 44 24 18          	lea    eax,[esp+0x18]
c000dcc7:	50                   	push   eax
c000dcc8:	e8 ab 2a ff ff       	call   c0000778 <memset>
c000dccd:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000dcd0:	83 c4 10             	add    esp,0x10
c000dcd3:	b8 0b 00 00 00       	mov    eax,0xb
c000dcd8:	81 fa 80 00 00 00    	cmp    edx,0x80
c000dcde:	7f 6e                	jg     c000dd4e <sinc_set_converter+0xbb>
c000dce0:	83 fa 01             	cmp    edx,0x1
c000dce3:	75 10                	jne    c000dcf5 <sinc_set_converter+0x62>
c000dce5:	c7 43 24 83 d5 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d583
c000dcec:	c7 43 20 83 d5 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d583
c000dcf3:	eb 4d                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dcf5:	83 fa 02             	cmp    edx,0x2
c000dcf8:	75 10                	jne    c000dd0a <sinc_set_converter+0x77>
c000dcfa:	c7 43 24 be ce 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000cebe
c000dd01:	c7 43 20 be ce 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000cebe
c000dd08:	eb 38                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dd0a:	83 fa 04             	cmp    edx,0x4
c000dd0d:	75 10                	jne    c000dd1f <sinc_set_converter+0x8c>
c000dd0f:	c7 43 24 f9 c7 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c7f9
c000dd16:	c7 43 20 f9 c7 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c7f9
c000dd1d:	eb 23                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dd1f:	83 fa 06             	cmp    edx,0x6
c000dd22:	75 10                	jne    c000dd34 <sinc_set_converter+0xa1>
c000dd24:	c7 43 24 34 c1 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c134
c000dd2b:	c7 43 20 34 c1 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c134
c000dd32:	eb 0e                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dd34:	c7 43 24 70 ba 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000ba70
c000dd3b:	c7 43 20 70 ba 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000ba70
c000dd42:	c7 43 28 23 ad 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000ad23
c000dd49:	b8 0a 00 00 00       	mov    eax,0xa
c000dd4e:	81 c4 58 08 00 00    	add    esp,0x858
c000dd54:	5b                   	pop    ebx
c000dd55:	c3                   	ret    

c000dd56 <zoh_vari_process>:
c000dd56:	55                   	push   ebp
c000dd57:	31 d2                	xor    edx,edx
c000dd59:	57                   	push   edi
c000dd5a:	56                   	push   esi
c000dd5b:	53                   	push   ebx
c000dd5c:	83 ec 3c             	sub    esp,0x3c
c000dd5f:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000dd63:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000dd67:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000dd6b:	0f 8e 80 06 00 00    	jle    c000e3f1 <zoh_vari_process+0x69b>
c000dd71:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000dd74:	ba 05 00 00 00       	mov    edx,0x5
c000dd79:	85 db                	test   ebx,ebx
c000dd7b:	0f 84 70 06 00 00    	je     c000e3f1 <zoh_vari_process+0x69b>
c000dd81:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000dd84:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000dd88:	74 19                	je     c000dda3 <zoh_vari_process+0x4d>
c000dd8a:	31 d2                	xor    edx,edx
c000dd8c:	39 c2                	cmp    edx,eax
c000dd8e:	7d 0c                	jge    c000dd9c <zoh_vari_process+0x46>
c000dd90:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000dd92:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000dd95:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000dd99:	42                   	inc    edx
c000dd9a:	eb f0                	jmp    c000dd8c <zoh_vari_process+0x36>
c000dd9c:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000dda3:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000dda6:	0f af d0             	imul   edx,eax
c000dda9:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000ddac:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000ddb0:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000ddb7:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000ddba:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000ddc1:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000ddc4:	8b 07                	mov    eax,DWORD PTR [edi]
c000ddc6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ddca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ddce:	68 00 00 70 3f       	push   0x3f700000
c000ddd3:	6a 00                	push   0x0
c000ddd5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddd9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dddd:	e8 8d 9f 01 00       	call   c0027d6f <__ltdf2>
c000dde2:	83 c4 10             	add    esp,0x10
c000dde5:	ba 16 00 00 00       	mov    edx,0x16
c000ddea:	85 c0                	test   eax,eax
c000ddec:	0f 88 ff 05 00 00    	js     c000e3f1 <zoh_vari_process+0x69b>
c000ddf2:	68 00 00 70 40       	push   0x40700000
c000ddf7:	6a 00                	push   0x0
c000ddf9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddfd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de01:	e8 4b 9f 01 00       	call   c0027d51 <__gtdf2>
c000de06:	83 c4 10             	add    esp,0x10
c000de09:	ba 16 00 00 00       	mov    edx,0x16
c000de0e:	85 c0                	test   eax,eax
c000de10:	0f 8f db 05 00 00    	jg     c000e3f1 <zoh_vari_process+0x69b>
c000de16:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000de19:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c000de1c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000de20:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000de24:	68 00 00 f0 3f       	push   0x3ff00000
c000de29:	6a 00                	push   0x0
c000de2b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de2f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de33:	e8 37 9f 01 00       	call   c0027d6f <__ltdf2>
c000de38:	83 c4 10             	add    esp,0x10
c000de3b:	85 c0                	test   eax,eax
c000de3d:	0f 89 da 01 00 00    	jns    c000e01d <zoh_vari_process+0x2c7>
c000de43:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000de46:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c000de49:	0f 8d ce 01 00 00    	jge    c000e01d <zoh_vari_process+0x2c7>
c000de4f:	83 ec 0c             	sub    esp,0xc
c000de52:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000de55:	e8 a9 9c 01 00       	call   c0027b03 <__floatsidf>
c000de5a:	83 c4 10             	add    esp,0x10
c000de5d:	89 04 24             	mov    DWORD PTR [esp],eax
c000de60:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000de64:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de68:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de6c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de70:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de74:	e8 27 96 01 00       	call   c00274a0 <__muldf3>
c000de79:	59                   	pop    ecx
c000de7a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de7e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de82:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000de85:	e8 79 9c 01 00       	call   c0027b03 <__floatsidf>
c000de8a:	83 c4 10             	add    esp,0x10
c000de8d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de91:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de95:	52                   	push   edx
c000de96:	50                   	push   eax
c000de97:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de9b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de9f:	e8 7f 8f 01 00       	call   c0026e23 <__adddf3>
c000dea4:	59                   	pop    ecx
c000dea5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dea9:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000dead:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000deb0:	e8 4e 9c 01 00       	call   c0027b03 <__floatsidf>
c000deb5:	83 c4 10             	add    esp,0x10
c000deb8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000debc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dec0:	52                   	push   edx
c000dec1:	50                   	push   eax
c000dec2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dec6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000deca:	e8 9e 9e 01 00       	call   c0027d6d <__gedf2>
c000decf:	83 c4 10             	add    esp,0x10
c000ded2:	85 c0                	test   eax,eax
c000ded4:	0f 89 43 01 00 00    	jns    c000e01d <zoh_vari_process+0x2c7>
c000deda:	85 ed                	test   ebp,ebp
c000dedc:	0f 8e ec 00 00 00    	jle    c000dfce <zoh_vari_process+0x278>
c000dee2:	83 ec 10             	sub    esp,0x10
c000dee5:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000dee8:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000deeb:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000deee:	ff 37                	push   DWORD PTR [edi]
c000def0:	e8 7f 95 01 00       	call   c0027474 <__subdf3>
c000def5:	83 c4 18             	add    esp,0x18
c000def8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000defc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df00:	52                   	push   edx
c000df01:	50                   	push   eax
c000df02:	e8 f9 9f 01 00       	call   c0027f00 <fabs>
c000df07:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000df0b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000df0f:	83 c4 10             	add    esp,0x10
c000df12:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000df17:	68 23 42 92 0c       	push   0xc924223
c000df1c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000df20:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000df24:	e8 28 9e 01 00       	call   c0027d51 <__gtdf2>
c000df29:	83 c4 10             	add    esp,0x10
c000df2c:	85 c0                	test   eax,eax
c000df2e:	0f 8e 9a 00 00 00    	jle    c000dfce <zoh_vari_process+0x278>
c000df34:	8b 07                	mov    eax,DWORD PTR [edi]
c000df36:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000df39:	89 04 24             	mov    DWORD PTR [esp],eax
c000df3c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000df40:	52                   	push   edx
c000df41:	50                   	push   eax
c000df42:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000df45:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000df48:	e8 27 95 01 00       	call   c0027474 <__subdf3>
c000df4d:	59                   	pop    ecx
c000df4e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df52:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df56:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000df59:	e8 a5 9b 01 00       	call   c0027b03 <__floatsidf>
c000df5e:	83 c4 10             	add    esp,0x10
c000df61:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df65:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df69:	52                   	push   edx
c000df6a:	50                   	push   eax
c000df6b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df6f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df73:	e8 28 95 01 00       	call   c00274a0 <__muldf3>
c000df78:	5d                   	pop    ebp
c000df79:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df7d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df81:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000df84:	e8 7a 9b 01 00       	call   c0027b03 <__floatsidf>
c000df89:	83 c4 10             	add    esp,0x10
c000df8c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df90:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df94:	52                   	push   edx
c000df95:	50                   	push   eax
c000df96:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df9a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df9e:	e8 e1 97 01 00       	call   c0027784 <__divdf3>
c000dfa3:	83 c4 10             	add    esp,0x10
c000dfa6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dfaa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dfae:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dfb2:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dfb6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfbe:	e8 60 8e 01 00       	call   c0026e23 <__adddf3>
c000dfc3:	83 c4 10             	add    esp,0x10
c000dfc6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dfca:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dfce:	31 c0                	xor    eax,eax
c000dfd0:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000dfd3:	7e 13                	jle    c000dfe8 <zoh_vari_process+0x292>
c000dfd5:	8b 6c 83 1c          	mov    ebp,DWORD PTR [ebx+eax*4+0x1c]
c000dfd9:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000dfdc:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000dfdf:	40                   	inc    eax
c000dfe0:	89 2c 8a             	mov    DWORD PTR [edx+ecx*4],ebp
c000dfe3:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000dfe6:	eb e8                	jmp    c000dfd0 <zoh_vari_process+0x27a>
c000dfe8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dfec:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dff0:	68 00 00 f0 3f       	push   0x3ff00000
c000dff5:	6a 00                	push   0x0
c000dff7:	e8 88 97 01 00       	call   c0027784 <__divdf3>
c000dffc:	83 c4 10             	add    esp,0x10
c000dfff:	89 04 24             	mov    DWORD PTR [esp],eax
c000e002:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e006:	52                   	push   edx
c000e007:	50                   	push   eax
c000e008:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e00c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e010:	e8 0e 8e 01 00       	call   c0026e23 <__adddf3>
c000e015:	83 c4 10             	add    esp,0x10
c000e018:	e9 ff fd ff ff       	jmp    c000de1c <zoh_vari_process+0xc6>
c000e01d:	55                   	push   ebp
c000e01e:	55                   	push   ebp
c000e01f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e023:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e027:	e8 f4 9e 01 00       	call   c0027f20 <lrint>
c000e02c:	83 ec 0c             	sub    esp,0xc
c000e02f:	50                   	push   eax
c000e030:	e8 ce 9a 01 00       	call   c0027b03 <__floatsidf>
c000e035:	83 c4 10             	add    esp,0x10
c000e038:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e03c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e040:	52                   	push   edx
c000e041:	50                   	push   eax
c000e042:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e046:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e04a:	e8 25 94 01 00       	call   c0027474 <__subdf3>
c000e04f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e053:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e057:	83 c4 20             	add    esp,0x20
c000e05a:	6a 00                	push   0x0
c000e05c:	6a 00                	push   0x0
c000e05e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e062:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e066:	e8 04 9d 01 00       	call   c0027d6f <__ltdf2>
c000e06b:	83 c4 10             	add    esp,0x10
c000e06e:	85 c0                	test   eax,eax
c000e070:	79 1e                	jns    c000e090 <zoh_vari_process+0x33a>
c000e072:	68 00 00 f0 3f       	push   0x3ff00000
c000e077:	6a 00                	push   0x0
c000e079:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e07d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e081:	e8 9d 8d 01 00       	call   c0026e23 <__adddf3>
c000e086:	83 c4 10             	add    esp,0x10
c000e089:	89 04 24             	mov    DWORD PTR [esp],eax
c000e08c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e090:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e093:	83 ec 10             	sub    esp,0x10
c000e096:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e09a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e09e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0a2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0a6:	e8 c9 93 01 00       	call   c0027474 <__subdf3>
c000e0ab:	83 c4 18             	add    esp,0x18
c000e0ae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0b2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0b6:	52                   	push   edx
c000e0b7:	50                   	push   eax
c000e0b8:	e8 63 9e 01 00       	call   c0027f20 <lrint>
c000e0bd:	83 c4 10             	add    esp,0x10
c000e0c0:	0f af e8             	imul   ebp,eax
c000e0c3:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000e0c6:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000e0c9:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000e0cd:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e0d0:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000e0d3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e0d7:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000e0da:	0f 8d 7a 02 00 00    	jge    c000e35a <zoh_vari_process+0x604>
c000e0e0:	83 ec 0c             	sub    esp,0xc
c000e0e3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e0e6:	e8 18 9a 01 00       	call   c0027b03 <__floatsidf>
c000e0eb:	83 c4 10             	add    esp,0x10
c000e0ee:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0f2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0f6:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0fa:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0fe:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e102:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e106:	e8 95 93 01 00       	call   c00274a0 <__muldf3>
c000e10b:	59                   	pop    ecx
c000e10c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e110:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e114:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e118:	e8 e6 99 01 00       	call   c0027b03 <__floatsidf>
c000e11d:	83 c4 10             	add    esp,0x10
c000e120:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e124:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e128:	52                   	push   edx
c000e129:	50                   	push   eax
c000e12a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e12e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e132:	e8 ec 8c 01 00       	call   c0026e23 <__adddf3>
c000e137:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000e13a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e13e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e142:	e8 bc 99 01 00       	call   c0027b03 <__floatsidf>
c000e147:	83 c4 10             	add    esp,0x10
c000e14a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e14e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e152:	52                   	push   edx
c000e153:	50                   	push   eax
c000e154:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e158:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e15c:	e8 10 9c 01 00       	call   c0027d71 <__ledf2>
c000e161:	83 c4 10             	add    esp,0x10
c000e164:	85 c0                	test   eax,eax
c000e166:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e16a:	0f 8f ea 01 00 00    	jg     c000e35a <zoh_vari_process+0x604>
c000e170:	85 c9                	test   ecx,ecx
c000e172:	0f 8e ed 00 00 00    	jle    c000e265 <zoh_vari_process+0x50f>
c000e178:	83 ec 10             	sub    esp,0x10
c000e17b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e17e:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e181:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000e184:	ff 37                	push   DWORD PTR [edi]
c000e186:	e8 e9 92 01 00       	call   c0027474 <__subdf3>
c000e18b:	83 c4 18             	add    esp,0x18
c000e18e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e192:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e196:	52                   	push   edx
c000e197:	50                   	push   eax
c000e198:	e8 63 9d 01 00       	call   c0027f00 <fabs>
c000e19d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e1a1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e1a5:	83 c4 10             	add    esp,0x10
c000e1a8:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000e1ad:	68 23 42 92 0c       	push   0xc924223
c000e1b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1ba:	e8 92 9b 01 00       	call   c0027d51 <__gtdf2>
c000e1bf:	83 c4 10             	add    esp,0x10
c000e1c2:	85 c0                	test   eax,eax
c000e1c4:	0f 8e 9b 00 00 00    	jle    c000e265 <zoh_vari_process+0x50f>
c000e1ca:	8b 07                	mov    eax,DWORD PTR [edi]
c000e1cc:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000e1cf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e1d3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e1d7:	52                   	push   edx
c000e1d8:	50                   	push   eax
c000e1d9:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e1dc:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e1df:	e8 90 92 01 00       	call   c0027474 <__subdf3>
c000e1e4:	5d                   	pop    ebp
c000e1e5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e1e9:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e1ed:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000e1f0:	e8 0e 99 01 00       	call   c0027b03 <__floatsidf>
c000e1f5:	83 c4 10             	add    esp,0x10
c000e1f8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e1fc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e200:	52                   	push   edx
c000e201:	50                   	push   eax
c000e202:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e206:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e20a:	e8 91 92 01 00       	call   c00274a0 <__muldf3>
c000e20f:	59                   	pop    ecx
c000e210:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e214:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e218:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000e21b:	e8 e3 98 01 00       	call   c0027b03 <__floatsidf>
c000e220:	83 c4 10             	add    esp,0x10
c000e223:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e227:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e22b:	52                   	push   edx
c000e22c:	50                   	push   eax
c000e22d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e231:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e235:	e8 4a 95 01 00       	call   c0027784 <__divdf3>
c000e23a:	83 c4 10             	add    esp,0x10
c000e23d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e241:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e245:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e249:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e24d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e251:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e255:	e8 c9 8b 01 00       	call   c0026e23 <__adddf3>
c000e25a:	83 c4 10             	add    esp,0x10
c000e25d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e261:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e265:	31 d2                	xor    edx,edx
c000e267:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e26a:	39 d0                	cmp    eax,edx
c000e26c:	7e 1d                	jle    c000e28b <zoh_vari_process+0x535>
c000e26e:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000e271:	29 c1                	sub    ecx,eax
c000e273:	89 c8                	mov    eax,ecx
c000e275:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e277:	01 d0                	add    eax,edx
c000e279:	42                   	inc    edx
c000e27a:	8b 2c 81             	mov    ebp,DWORD PTR [ecx+eax*4]
c000e27d:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000e280:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e283:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000e286:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000e289:	eb dc                	jmp    c000e267 <zoh_vari_process+0x511>
c000e28b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e28f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e293:	68 00 00 f0 3f       	push   0x3ff00000
c000e298:	6a 00                	push   0x0
c000e29a:	e8 e5 94 01 00       	call   c0027784 <__divdf3>
c000e29f:	83 c4 10             	add    esp,0x10
c000e2a2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2a6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2aa:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e2ae:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e2b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2ba:	e8 64 8b 01 00       	call   c0026e23 <__adddf3>
c000e2bf:	5d                   	pop    ebp
c000e2c0:	59                   	pop    ecx
c000e2c1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e2c5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e2c9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2cd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2d1:	e8 4a 9c 01 00       	call   c0027f20 <lrint>
c000e2d6:	83 ec 0c             	sub    esp,0xc
c000e2d9:	50                   	push   eax
c000e2da:	e8 24 98 01 00       	call   c0027b03 <__floatsidf>
c000e2df:	83 c4 10             	add    esp,0x10
c000e2e2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2e6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2ea:	52                   	push   edx
c000e2eb:	50                   	push   eax
c000e2ec:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2f0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2f4:	e8 7b 91 01 00       	call   c0027474 <__subdf3>
c000e2f9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e2fd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e301:	83 c4 20             	add    esp,0x20
c000e304:	6a 00                	push   0x0
c000e306:	6a 00                	push   0x0
c000e308:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e30c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e310:	e8 5a 9a 01 00       	call   c0027d6f <__ltdf2>
c000e315:	83 c4 10             	add    esp,0x10
c000e318:	85 c0                	test   eax,eax
c000e31a:	79 1e                	jns    c000e33a <zoh_vari_process+0x5e4>
c000e31c:	68 00 00 f0 3f       	push   0x3ff00000
c000e321:	6a 00                	push   0x0
c000e323:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e327:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e32b:	e8 f3 8a 01 00       	call   c0026e23 <__adddf3>
c000e330:	83 c4 10             	add    esp,0x10
c000e333:	89 04 24             	mov    DWORD PTR [esp],eax
c000e336:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e33a:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e33d:	83 ec 10             	sub    esp,0x10
c000e340:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e344:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e348:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e34c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e350:	e8 1f 91 01 00       	call   c0027474 <__subdf3>
c000e355:	e9 51 fd ff ff       	jmp    c000e0ab <zoh_vari_process+0x355>
c000e35a:	3b 6c 24 10          	cmp    ebp,DWORD PTR [esp+0x10]
c000e35e:	7d 3a                	jge    c000e39a <zoh_vari_process+0x644>
c000e360:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e364:	83 ec 0c             	sub    esp,0xc
c000e367:	29 e8                	sub    eax,ebp
c000e369:	99                   	cdq    
c000e36a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e36d:	50                   	push   eax
c000e36e:	e8 90 97 01 00       	call   c0027b03 <__floatsidf>
c000e373:	83 c4 10             	add    esp,0x10
c000e376:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e37a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e37e:	52                   	push   edx
c000e37f:	50                   	push   eax
c000e380:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e384:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e388:	e8 96 8a 01 00       	call   c0026e23 <__adddf3>
c000e38d:	83 c4 10             	add    esp,0x10
c000e390:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000e393:	89 04 24             	mov    DWORD PTR [esp],eax
c000e396:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e39a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000e39d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e3a1:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c000e3a4:	89 57 0c             	mov    DWORD PTR [edi+0xc],edx
c000e3a7:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e3aa:	85 c0                	test   eax,eax
c000e3ac:	7f 25                	jg     c000e3d3 <zoh_vari_process+0x67d>
c000e3ae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e3b2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e3b6:	89 07                	mov    DWORD PTR [edi],eax
c000e3b8:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c000e3bb:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e3be:	99                   	cdq    
c000e3bf:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e3c2:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000e3c5:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000e3c8:	99                   	cdq    
c000e3c9:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e3cc:	31 d2                	xor    edx,edx
c000e3ce:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000e3d1:	eb 1e                	jmp    c000e3f1 <zoh_vari_process+0x69b>
c000e3d3:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000e3d6:	31 d2                	xor    edx,edx
c000e3d8:	29 c8                	sub    eax,ecx
c000e3da:	c1 e0 02             	shl    eax,0x2
c000e3dd:	39 d1                	cmp    ecx,edx
c000e3df:	7e cd                	jle    c000e3ae <zoh_vari_process+0x658>
c000e3e1:	8b 2e                	mov    ebp,DWORD PTR [esi]
c000e3e3:	8b 6c 05 00          	mov    ebp,DWORD PTR [ebp+eax*1+0x0]
c000e3e7:	83 c0 04             	add    eax,0x4
c000e3ea:	89 6c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ebp
c000e3ee:	42                   	inc    edx
c000e3ef:	eb ec                	jmp    c000e3dd <zoh_vari_process+0x687>
c000e3f1:	83 c4 3c             	add    esp,0x3c
c000e3f4:	89 d0                	mov    eax,edx
c000e3f6:	5b                   	pop    ebx
c000e3f7:	5e                   	pop    esi
c000e3f8:	5f                   	pop    edi
c000e3f9:	5d                   	pop    ebp
c000e3fa:	c3                   	ret    

c000e3fb <zoh_reset>:
c000e3fb:	83 ec 0c             	sub    esp,0xc
c000e3fe:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e402:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000e405:	85 c0                	test   eax,eax
c000e407:	74 20                	je     c000e429 <zoh_reset+0x2e>
c000e409:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000e40c:	83 c0 1c             	add    eax,0x1c
c000e40f:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000e412:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000e419:	c1 e2 02             	shl    edx,0x2
c000e41c:	51                   	push   ecx
c000e41d:	52                   	push   edx
c000e41e:	6a 00                	push   0x0
c000e420:	50                   	push   eax
c000e421:	e8 52 23 ff ff       	call   c0000778 <memset>
c000e426:	83 c4 10             	add    esp,0x10
c000e429:	83 c4 0c             	add    esp,0xc
c000e42c:	c3                   	ret    

c000e42d <zoh_get_name>:
c000e42d:	31 c0                	xor    eax,eax
c000e42f:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e434:	75 05                	jne    c000e43b <zoh_get_name+0xe>
c000e436:	b8 1e 98 02 c0       	mov    eax,0xc002981e
c000e43b:	c3                   	ret    

c000e43c <zoh_get_description>:
c000e43c:	31 c0                	xor    eax,eax
c000e43e:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e443:	75 05                	jne    c000e44a <zoh_get_description+0xe>
c000e445:	b8 2f 98 02 c0       	mov    eax,0xc002982f
c000e44a:	c3                   	ret    

c000e44b <zoh_set_converter>:
c000e44b:	53                   	push   ebx
c000e44c:	b8 0a 00 00 00       	mov    eax,0xa
c000e451:	83 ec 08             	sub    esp,0x8
c000e454:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e458:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000e45d:	75 6e                	jne    c000e4cd <zoh_set_converter+0x82>
c000e45f:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000e462:	85 c0                	test   eax,eax
c000e464:	74 13                	je     c000e479 <zoh_set_converter+0x2e>
c000e466:	83 ec 0c             	sub    esp,0xc
c000e469:	50                   	push   eax
c000e46a:	e8 e7 13 00 00       	call   c000f856 <free>
c000e46f:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e476:	83 c4 10             	add    esp,0x10
c000e479:	50                   	push   eax
c000e47a:	50                   	push   eax
c000e47b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e47e:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000e485:	50                   	push   eax
c000e486:	6a 01                	push   0x1
c000e488:	e8 e9 13 00 00       	call   c000f876 <calloc>
c000e48d:	83 c4 10             	add    esp,0x10
c000e490:	89 c2                	mov    edx,eax
c000e492:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000e495:	85 d2                	test   edx,edx
c000e497:	b8 01 00 00 00       	mov    eax,0x1
c000e49c:	74 2f                	je     c000e4cd <zoh_set_converter+0x82>
c000e49e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e4a1:	83 ec 0c             	sub    esp,0xc
c000e4a4:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000e4a7:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000e4ad:	c7 43 24 56 dd 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000dd56
c000e4b4:	c7 43 20 56 dd 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000dd56
c000e4bb:	c7 43 28 fb e3 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000e3fb
c000e4c2:	53                   	push   ebx
c000e4c3:	e8 33 ff ff ff       	call   c000e3fb <zoh_reset>
c000e4c8:	83 c4 10             	add    esp,0x10
c000e4cb:	31 c0                	xor    eax,eax
c000e4cd:	83 c4 08             	add    esp,0x8
c000e4d0:	5b                   	pop    ebx
c000e4d1:	c3                   	ret    

c000e4d2 <CPU::current()>:
c000e4d2:	a1 68 db 02 c0       	mov    eax,ds:0xc002db68
c000e4d7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e4dd:	90                   	nop
c000e4de:	c3                   	ret    

c000e4df <operator new(unsigned long)>:
c000e4df:	83 ec 0c             	sub    esp,0xc
c000e4e2:	83 ec 0c             	sub    esp,0xc
c000e4e5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e4e9:	e8 58 13 00 00       	call   c000f846 <malloc>
c000e4ee:	83 c4 10             	add    esp,0x10
c000e4f1:	83 c4 0c             	add    esp,0xc
c000e4f4:	c3                   	ret    

c000e4f5 <Krnl::resolveCompatibilitySymbol(char*)>:
c000e4f5:	83 ec 0c             	sub    esp,0xc
c000e4f8:	83 ec 08             	sub    esp,0x8
c000e4fb:	68 66 98 02 c0       	push   0xc0029866
c000e500:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e504:	e8 b7 23 ff ff       	call   c00008c0 <strcmp>
c000e509:	83 c4 10             	add    esp,0x10
c000e50c:	85 c0                	test   eax,eax
c000e50e:	0f 94 c0             	sete   al
c000e511:	84 c0                	test   al,al
c000e513:	74 0a                	je     c000e51f <Krnl::resolveCompatibilitySymbol(char*)+0x2a>
c000e515:	b8 68 db 02 c0       	mov    eax,0xc002db68
c000e51a:	e9 e3 00 00 00       	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e51f:	83 ec 08             	sub    esp,0x8
c000e522:	68 6f 98 02 c0       	push   0xc002986f
c000e527:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e52b:	e8 90 23 ff ff       	call   c00008c0 <strcmp>
c000e530:	83 c4 10             	add    esp,0x10
c000e533:	85 c0                	test   eax,eax
c000e535:	0f 94 c0             	sete   al
c000e538:	84 c0                	test   al,al
c000e53a:	74 0a                	je     c000e546 <Krnl::resolveCompatibilitySymbol(char*)+0x51>
c000e53c:	b8 9c 62 02 c0       	mov    eax,0xc002629c
c000e541:	e9 bc 00 00 00       	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e546:	83 ec 08             	sub    esp,0x8
c000e549:	68 79 98 02 c0       	push   0xc0029879
c000e54e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e552:	e8 69 23 ff ff       	call   c00008c0 <strcmp>
c000e557:	83 c4 10             	add    esp,0x10
c000e55a:	85 c0                	test   eax,eax
c000e55c:	0f 94 c0             	sete   al
c000e55f:	84 c0                	test   al,al
c000e561:	74 0a                	je     c000e56d <Krnl::resolveCompatibilitySymbol(char*)+0x78>
c000e563:	b8 d0 5f 02 c0       	mov    eax,0xc0025fd0
c000e568:	e9 95 00 00 00       	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e56d:	83 ec 08             	sub    esp,0x8
c000e570:	68 82 98 02 c0       	push   0xc0029882
c000e575:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e579:	e8 42 23 ff ff       	call   c00008c0 <strcmp>
c000e57e:	83 c4 10             	add    esp,0x10
c000e581:	85 c0                	test   eax,eax
c000e583:	0f 94 c0             	sete   al
c000e586:	84 c0                	test   al,al
c000e588:	74 07                	je     c000e591 <Krnl::resolveCompatibilitySymbol(char*)+0x9c>
c000e58a:	b8 9c 63 02 c0       	mov    eax,0xc002639c
c000e58f:	eb 71                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e591:	83 ec 08             	sub    esp,0x8
c000e594:	68 8c 98 02 c0       	push   0xc002988c
c000e599:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e59d:	e8 1e 23 ff ff       	call   c00008c0 <strcmp>
c000e5a2:	83 c4 10             	add    esp,0x10
c000e5a5:	85 c0                	test   eax,eax
c000e5a7:	0f 94 c0             	sete   al
c000e5aa:	84 c0                	test   al,al
c000e5ac:	74 07                	je     c000e5b5 <Krnl::resolveCompatibilitySymbol(char*)+0xc0>
c000e5ae:	b8 1c 61 02 c0       	mov    eax,0xc002611c
c000e5b3:	eb 4d                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5b5:	83 ec 08             	sub    esp,0x8
c000e5b8:	68 95 98 02 c0       	push   0xc0029895
c000e5bd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5c1:	e8 fa 22 ff ff       	call   c00008c0 <strcmp>
c000e5c6:	83 c4 10             	add    esp,0x10
c000e5c9:	85 c0                	test   eax,eax
c000e5cb:	0f 94 c0             	sete   al
c000e5ce:	84 c0                	test   al,al
c000e5d0:	74 07                	je     c000e5d9 <Krnl::resolveCompatibilitySymbol(char*)+0xe4>
c000e5d2:	b8 6c db 02 c0       	mov    eax,0xc002db6c
c000e5d7:	eb 29                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5d9:	83 ec 08             	sub    esp,0x8
c000e5dc:	68 a2 98 02 c0       	push   0xc00298a2
c000e5e1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5e5:	e8 d6 22 ff ff       	call   c00008c0 <strcmp>
c000e5ea:	83 c4 10             	add    esp,0x10
c000e5ed:	85 c0                	test   eax,eax
c000e5ef:	0f 94 c0             	sete   al
c000e5f2:	84 c0                	test   al,al
c000e5f4:	74 07                	je     c000e5fd <Krnl::resolveCompatibilitySymbol(char*)+0x108>
c000e5f6:	b8 6d db 02 c0       	mov    eax,0xc002db6d
c000e5fb:	eb 05                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5fd:	b8 00 00 00 00       	mov    eax,0x0
c000e602:	83 c4 0c             	add    esp,0xc
c000e605:	c3                   	ret    

c000e606 <Computer::close(int, int, void*)>:
c000e606:	57                   	push   edi
c000e607:	56                   	push   esi
c000e608:	53                   	push   ebx
c000e609:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e60d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e611:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e615:	83 ec 0c             	sub    esp,0xc
c000e618:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000e61e:	e8 8f 5a 00 00       	call   c00140b2 <Device::closeAll()>
c000e623:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e629:	83 c4 10             	add    esp,0x10
c000e62c:	8b 10                	mov    edx,DWORD PTR [eax]
c000e62e:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000e632:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000e63a:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000e63e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e642:	5b                   	pop    ebx
c000e643:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000e646:	5e                   	pop    esi
c000e647:	5f                   	pop    edi
c000e648:	ff e0                	jmp    eax

c000e64a <Krnl::firstTask()>:
c000e64a:	53                   	push   ebx
c000e64b:	83 ec 14             	sub    esp,0x14
c000e64e:	fb                   	sti    
c000e64f:	68 3f 07 00 00       	push   0x73f
c000e654:	e8 ed 11 00 00       	call   c000f846 <malloc>
c000e659:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e660:	89 c3                	mov    ebx,eax
c000e662:	ff 35 d4 10 03 c0    	push   DWORD PTR ds:0xc00310d4
c000e668:	68 af 98 02 c0       	push   0xc00298af
c000e66d:	6a 01                	push   0x1
c000e66f:	50                   	push   eax
c000e670:	e8 7d ee 00 00       	call   c001d4f2 <Process::Process(bool, char const*, Process*, char**)>
c000e675:	83 c4 20             	add    esp,0x20
c000e678:	68 ff 00 00 00       	push   0xff
c000e67d:	6a 00                	push   0x0
c000e67f:	68 db f1 00 c0       	push   0xc000f1db
c000e684:	53                   	push   ebx
c000e685:	e8 66 f1 00 00       	call   c001d7f0 <Process::createThread(void (*)(void*), void*, int)>
c000e68a:	6a 7a                	push   0x7a
c000e68c:	6a 00                	push   0x0
c000e68e:	68 4e e0 01 c0       	push   0xc001e04e
c000e693:	ff 35 d4 10 03 c0    	push   DWORD PTR ds:0xc00310d4
c000e699:	e8 52 f1 00 00       	call   c001d7f0 <Process::createThread(void (*)(void*), void*, int)>
c000e69e:	83 c4 20             	add    esp,0x20
c000e6a1:	a3 88 10 03 c0       	mov    ds:0xc0031088,eax
c000e6a6:	c6 05 6d db 02 c0 01 	mov    BYTE PTR ds:0xc002db6d,0x1
c000e6ad:	e8 1d fd 00 00       	call   c001e3cf <Vm::initialise8086()>
c000e6b2:	e8 e3 47 00 00       	call   c0012e9a <Fs::initVFS()>
c000e6b7:	a1 68 db 02 c0       	mov    eax,ds:0xc002db68
c000e6bc:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c000e6c2:	8b 10                	mov    edx,DWORD PTR [eax]
c000e6c4:	6a 00                	push   0x0
c000e6c6:	6a 00                	push   0x0
c000e6c8:	6a 00                	push   0x0
c000e6ca:	50                   	push   eax
c000e6cb:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e6ce:	e8 d9 d7 00 00       	call   c001beac <Sys::loadSyscalls()>
c000e6d3:	e8 1e b8 00 00       	call   c0019ef6 <Krnl::loadSystemEnv()>
c000e6d8:	83 c4 0c             	add    esp,0xc
c000e6db:	6a 3a                	push   0x3a
c000e6dd:	68 bc 98 02 c0       	push   0xc00298bc
c000e6e2:	68 c5 98 02 c0       	push   0xc00298c5
c000e6e7:	e8 30 c5 00 00       	call   c001ac1c <Reg::readIntWithDefault(char*, char*, int)>
c000e6ec:	89 04 24             	mov    DWORD PTR [esp],eax
c000e6ef:	e8 8e 52 00 00       	call   c0013982 <User::loadClockSettings(int)>
c000e6f4:	58                   	pop    eax
c000e6f5:	a1 68 db 02 c0       	mov    eax,ds:0xc002db68
c000e6fa:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c000e700:	e8 81 59 00 00       	call   c0014086 <Device::loadDriversForAll()>
c000e705:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000e70c:	e8 14 b3 00 00       	call   c0019a25 <Krnl::startCPU(int)>
c000e711:	5a                   	pop    edx
c000e712:	8b 1d 68 db 02 c0    	mov    ebx,DWORD PTR ds:0xc002db68
c000e718:	59                   	pop    ecx
c000e719:	6a 01                	push   0x1
c000e71b:	68 cd 98 02 c0       	push   0xc00298cd
c000e720:	e8 f2 e8 00 00       	call   c001d017 <Thr::loadDLL(char const*, bool)>
c000e725:	5a                   	pop    edx
c000e726:	59                   	pop    ecx
c000e727:	53                   	push   ebx
c000e728:	50                   	push   eax
c000e729:	e8 1d eb 00 00       	call   c001d24b <Thr::executeDLL(unsigned long, void*)>
c000e72e:	83 c4 10             	add    esp,0x10
c000e731:	83 ec 0c             	sub    esp,0xc
c000e734:	6a 02                	push   0x2
c000e736:	e8 19 f4 00 00       	call   c001db54 <blockTask(TaskState)>
c000e73b:	83 c4 10             	add    esp,0x10
c000e73e:	eb f1                	jmp    c000e731 <Krnl::firstTask()+0xe7>

c000e740 <Computer::Computer()>:
c000e740:	83 ec 0c             	sub    esp,0xc
c000e743:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e747:	83 ec 08             	sub    esp,0x8
c000e74a:	68 e9 98 02 c0       	push   0xc00298e9
c000e74f:	50                   	push   eax
c000e750:	e8 d7 59 00 00       	call   c001412c <Device::Device(char const*)>
c000e755:	83 c4 10             	add    esp,0x10
c000e758:	ba 88 9a 02 c0       	mov    edx,0xc0029a88
c000e75d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e761:	89 10                	mov    DWORD PTR [eax],edx
c000e763:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e767:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000e771:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e775:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000e77f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e783:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000e789:	83 ca 04             	or     edx,0x4
c000e78c:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000e792:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e796:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e79c:	0f b6 d0             	movzx  edx,al
c000e79f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7a3:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000e7aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7ae:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7b4:	0f b6 d0             	movzx  edx,al
c000e7b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7bb:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000e7c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7c4:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7ca:	8d 50 01             	lea    edx,[eax+0x1]
c000e7cd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e7d1:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e7d7:	0f b6 d0             	movzx  edx,al
c000e7da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7de:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e7e2:	83 e1 3f             	and    ecx,0x3f
c000e7e5:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e7e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7ed:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7f3:	0f b6 d0             	movzx  edx,al
c000e7f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7fa:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000e801:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e805:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e80b:	0f b6 d0             	movzx  edx,al
c000e80e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e812:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e817:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e81b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e821:	8d 50 01             	lea    edx,[eax+0x1]
c000e824:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e828:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e82e:	0f b6 d0             	movzx  edx,al
c000e831:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e835:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e839:	83 e1 3f             	and    ecx,0x3f
c000e83c:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e840:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e844:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e84a:	0f b6 d0             	movzx  edx,al
c000e84d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e851:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000e858:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e85c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e862:	0f b6 d0             	movzx  edx,al
c000e865:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e869:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e86e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e872:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e878:	8d 50 01             	lea    edx,[eax+0x1]
c000e87b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e87f:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e885:	0f b6 d0             	movzx  edx,al
c000e888:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e88c:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e890:	83 e1 3f             	and    ecx,0x3f
c000e893:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e897:	90                   	nop
c000e898:	83 c4 0c             	add    esp,0xc
c000e89b:	c3                   	ret    

c000e89c <Computer::setBootMessage(char const*)>:
c000e89c:	c3                   	ret    
c000e89d:	90                   	nop

c000e89e <Computer::detectFeatures()>:
c000e89e:	55                   	push   ebp
c000e89f:	57                   	push   edi
c000e8a0:	56                   	push   esi
c000e8a1:	53                   	push   ebx
c000e8a2:	83 ec 1c             	sub    esp,0x1c
c000e8a5:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e8a9:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000e8b3:	e8 2c 1a ff ff       	call   c00002e4 <detectCPUID>
c000e8b8:	85 c0                	test   eax,eax
c000e8ba:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e8c0:	0f 95 c2             	setne  dl
c000e8c3:	83 e0 fd             	and    eax,0xfffffffd
c000e8c6:	d1 e2                	shl    edx,1
c000e8c8:	09 d0                	or     eax,edx
c000e8ca:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e8d0:	a8 02                	test   al,0x2
c000e8d2:	75 46                	jne    c000e91a <Computer::detectFeatures()+0x7c>
c000e8d4:	f6 05 81 db 02 c0 04 	test   BYTE PTR ds:0xc002db81,0x4
c000e8db:	74 07                	je     c000e8e4 <Computer::detectFeatures()+0x46>
c000e8dd:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000e8e4:	e8 7d 76 01 00       	call   c0025f66 <x87Detect>
c000e8e9:	83 e0 01             	and    eax,0x1
c000e8ec:	c1 e0 04             	shl    eax,0x4
c000e8ef:	88 c2                	mov    dl,al
c000e8f1:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e8f7:	83 e0 ef             	and    eax,0xffffffef
c000e8fa:	09 d0                	or     eax,edx
c000e8fc:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e902:	a8 10                	test   al,0x10
c000e904:	0f 85 2a 01 00 00    	jne    c000ea34 <Computer::detectFeatures()+0x196>
c000e90a:	84 c0                	test   al,al
c000e90c:	0f 88 45 01 00 00    	js     c000ea57 <Computer::detectFeatures()+0x1b9>
c000e912:	83 c4 1c             	add    esp,0x1c
c000e915:	5b                   	pop    ebx
c000e916:	5e                   	pop    esi
c000e917:	5f                   	pop    edi
c000e918:	5d                   	pop    ebp
c000e919:	c3                   	ret    
c000e91a:	83 ec 0c             	sub    esp,0xc
c000e91d:	6a 20                	push   0x20
c000e91f:	e8 5e 9f 00 00       	call   c0018882 <CPU::cpuidCheckEDX(unsigned int)>
c000e924:	83 e0 01             	and    eax,0x1
c000e927:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e92e:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e934:	83 e0 f7             	and    eax,0xfffffff7
c000e937:	09 d0                	or     eax,edx
c000e939:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e93f:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000e946:	e8 37 9f 00 00       	call   c0018882 <CPU::cpuidCheckEDX(unsigned int)>
c000e94b:	83 e0 01             	and    eax,0x1
c000e94e:	88 c2                	mov    dl,al
c000e950:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e956:	83 e0 fe             	and    eax,0xfffffffe
c000e959:	09 d0                	or     eax,edx
c000e95b:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e961:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000e968:	e8 15 9f 00 00       	call   c0018882 <CPU::cpuidCheckEDX(unsigned int)>
c000e96d:	c1 e0 07             	shl    eax,0x7
c000e970:	88 c2                	mov    dl,al
c000e972:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e978:	83 e0 7f             	and    eax,0x7f
c000e97b:	09 d0                	or     eax,edx
c000e97d:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e983:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000e98a:	e8 f3 9e 00 00       	call   c0018882 <CPU::cpuidCheckEDX(unsigned int)>
c000e98f:	83 c4 10             	add    esp,0x10
c000e992:	83 e0 01             	and    eax,0x1
c000e995:	c1 e0 05             	shl    eax,0x5
c000e998:	88 c2                	mov    dl,al
c000e99a:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e9a0:	83 e0 df             	and    eax,0xffffffdf
c000e9a3:	09 d0                	or     eax,edx
c000e9a5:	f7 05 80 db 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc002db80,0x401
c000e9af:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9b5:	0f 84 c2 00 00 00    	je     c000ea7d <Computer::detectFeatures()+0x1df>
c000e9bb:	83 e0 fe             	and    eax,0xfffffffe
c000e9be:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9c4:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e9ca:	88 c2                	mov    dl,al
c000e9cc:	83 e2 09             	and    edx,0x9
c000e9cf:	fe ca                	dec    dl
c000e9d1:	75 09                	jne    c000e9dc <Computer::detectFeatures()+0x13e>
c000e9d3:	83 e0 fe             	and    eax,0xfffffffe
c000e9d6:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9dc:	83 ec 0c             	sub    esp,0xc
c000e9df:	8d 44 24 18          	lea    eax,[esp+0x18]
c000e9e3:	50                   	push   eax
c000e9e4:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000e9e8:	55                   	push   ebp
c000e9e9:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000e9ed:	57                   	push   edi
c000e9ee:	8d 74 24 18          	lea    esi,[esp+0x18]
c000e9f2:	56                   	push   esi
c000e9f3:	68 00 00 00 80       	push   0x80000000
c000e9f8:	e8 01 9e 00 00       	call   c00187fe <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e9fd:	83 c4 20             	add    esp,0x20
c000ea00:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000ea07:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ea0b:	0f 86 c3 fe ff ff    	jbe    c000e8d4 <Computer::detectFeatures()+0x36>
c000ea11:	83 ec 0c             	sub    esp,0xc
c000ea14:	50                   	push   eax
c000ea15:	55                   	push   ebp
c000ea16:	57                   	push   edi
c000ea17:	56                   	push   esi
c000ea18:	68 01 00 00 80       	push   0x80000001
c000ea1d:	e8 dc 9d 00 00       	call   c00187fe <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ea22:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000ea2c:	83 c4 20             	add    esp,0x20
c000ea2f:	e9 a0 fe ff ff       	jmp    c000e8d4 <Computer::detectFeatures()+0x36>
c000ea34:	e8 e7 74 01 00       	call   c0025f20 <absolutelyNoChanceInHell>
c000ea39:	88 c2                	mov    dl,al
c000ea3b:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea41:	c1 e2 07             	shl    edx,0x7
c000ea44:	83 e0 7f             	and    eax,0x7f
c000ea47:	09 d0                	or     eax,edx
c000ea49:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea4f:	84 c0                	test   al,al
c000ea51:	0f 89 bb fe ff ff    	jns    c000e912 <Computer::detectFeatures()+0x74>
c000ea57:	e8 a4 74 01 00       	call   c0025f00 <avxDetect>
c000ea5c:	83 e0 01             	and    eax,0x1
c000ea5f:	c1 e0 05             	shl    eax,0x5
c000ea62:	88 c2                	mov    dl,al
c000ea64:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000ea6a:	83 e0 df             	and    eax,0xffffffdf
c000ea6d:	09 d0                	or     eax,edx
c000ea6f:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000ea75:	83 c4 1c             	add    esp,0x1c
c000ea78:	5b                   	pop    ebx
c000ea79:	5e                   	pop    esi
c000ea7a:	5f                   	pop    edi
c000ea7b:	5d                   	pop    ebp
c000ea7c:	c3                   	ret    
c000ea7d:	83 ec 0c             	sub    esp,0xc
c000ea80:	68 00 02 00 00       	push   0x200
c000ea85:	e8 f8 9d 00 00       	call   c0018882 <CPU::cpuidCheckEDX(unsigned int)>
c000ea8a:	83 c4 10             	add    esp,0x10
c000ea8d:	83 e0 01             	and    eax,0x1
c000ea90:	88 c2                	mov    dl,al
c000ea92:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea98:	83 e0 fe             	and    eax,0xfffffffe
c000ea9b:	09 d0                	or     eax,edx
c000ea9d:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000eaa3:	e9 1c ff ff ff       	jmp    c000e9c4 <Computer::detectFeatures()+0x126>

c000eaa8 <Computer::displayFeatures()>:
c000eaa8:	53                   	push   ebx
c000eaa9:	83 ec 14             	sub    esp,0x14
c000eaac:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000eab0:	68 f9 98 02 c0       	push   0xc00298f9
c000eab5:	e8 5b 40 00 00       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c000eaba:	83 c4 10             	add    esp,0x10
c000eabd:	f6 83 e8 01 00 00 01 	test   BYTE PTR [ebx+0x1e8],0x1
c000eac4:	0f 85 73 02 00 00    	jne    c000ed3d <Computer::displayFeatures()+0x295>
c000eaca:	b8 f6 98 02 c0       	mov    eax,0xc00298f6
c000eacf:	83 ec 08             	sub    esp,0x8
c000ead2:	50                   	push   eax
c000ead3:	68 0c 99 02 c0       	push   0xc002990c
c000ead8:	e8 38 40 00 00       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c000eadd:	83 c4 10             	add    esp,0x10
c000eae0:	f6 83 e8 01 00 00 04 	test   BYTE PTR [ebx+0x1e8],0x4
c000eae7:	0f 85 8c 02 00 00    	jne    c000ed79 <Computer::displayFeatures()+0x2d1>
c000eaed:	b8 f6 98 02 c0       	mov    eax,0xc00298f6
c000eaf2:	83 ec 08             	sub    esp,0x8
c000eaf5:	50                   	push   eax
c000eaf6:	68 1d 99 02 c0       	push   0xc002991d
c000eafb:	e8 15 40 00 00       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c000eb00:	83 c4 10             	add    esp,0x10
c000eb03:	f6 83 e8 01 00 00 02 	test   BYTE PTR [ebx+0x1e8],0x2
c000eb0a:	0f 85 5f 02 00 00    	jne    c000ed6f <Computer::displayFeatures()+0x2c7>
c000eb10:	b8 f6 98 02 c0       	mov    eax,0xc00298f6
c000eb15:	83 ec 08             	sub    esp,0x8
c000eb18:	50                   	push   eax
c000eb19:	68 2e 99 02 c0       	push   0xc002992e
c000eb1e:	e8 f2 3f 00 00       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c000eb23:	83 c4 10             	add    esp,0x10
c000eb26:	f6 83 e8 01 00 00 08 	test   BYTE PTR [ebx+0x1e8],0x8
c000eb2d:	0f 85 32 02 00 00    	jne    c000ed65 <Computer::displayFeatures()+0x2bd>
c000eb33:	b8 f6 98 02 c0       	mov    eax,0xc00298f6
c000eb38:	83 ec 08             	sub    esp,0x8
c000eb3b:	50                   	push   eax
c000eb3c:	68 3f 99 02 c0       	push   0xc002993f
c000eb41:	e8 cf 3f 00 00       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c000eb46:	83 c4 10             	add    esp,0x10
c000eb49:	f6 83 e8 01 00 00 10 	test   BYTE PTR [ebx+0x1e8],0x10
c000eb50:	0f 85 05 02 00 00    	jne    c000ed5b <Computer::displayFeatures()+0x2b3>
c000eb56:	b8 f6 98 02 c0       	mov    eax,0xc00298f6
c000eb5b:	83 ec 08             	sub    esp,0x8
c000eb5e:	50                   	push   eax
c000eb5f:	68 50 99 02 c0       	push   0xc0029950
c000eb64:	e8 ac 3f 00 00       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c000eb69:	83 c4 10             	add    esp,0x10
c000eb6c:	f6 83 e8 01 00 00 20 	test   BYTE PTR [ebx+0x1e8],0x20
c000eb73:	0f 85 d8 01 00 00    	jne    c000ed51 <Computer::displayFeatures()+0x2a9>
c000eb79:	b8 f6 98 02 c0       	mov    eax,0xc00298f6
c000eb7e:	83 ec 08             	sub    esp,0x8
c000eb81:	50                   	push   eax
c000eb82:	68 61 99 02 c0       	push   0xc0029961
c000eb87:	e8 89 3f 00 00       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c000eb8c:	83 c4 10             	add    esp,0x10
c000eb8f:	f6 83 e8 01 00 00 40 	test   BYTE PTR [ebx+0x1e8],0x40
c000eb96:	0f 85 ab 01 00 00    	jne    c000ed47 <Computer::displayFeatures()+0x29f>
c000eb9c:	b8 f6 98 02 c0       	mov    eax,0xc00298f6
c000eba1:	83 ec 08             	sub    esp,0x8
c000eba4:	50                   	push   eax
c000eba5:	68 72 99 02 c0       	push   0xc0029972
c000ebaa:	e8 66 3f 00 00       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c000ebaf:	83 c4 10             	add    esp,0x10
c000ebb2:	80 bb e8 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e8],0x0
c000ebb9:	0f 88 1b 02 00 00    	js     c000edda <Computer::displayFeatures()+0x332>
c000ebbf:	b8 f6 98 02 c0       	mov    eax,0xc00298f6
c000ebc4:	83 ec 08             	sub    esp,0x8
c000ebc7:	50                   	push   eax
c000ebc8:	68 83 99 02 c0       	push   0xc0029983
c000ebcd:	e8 43 3f 00 00       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c000ebd2:	83 c4 10             	add    esp,0x10
c000ebd5:	f6 83 e9 01 00 00 01 	test   BYTE PTR [ebx+0x1e9],0x1
c000ebdc:	0f 85 a1 01 00 00    	jne    c000ed83 <Computer::displayFeatures()+0x2db>
c000ebe2:	b8 f6 98 02 c0       	mov    eax,0xc00298f6
c000ebe7:	83 ec 08             	sub    esp,0x8
c000ebea:	50                   	push   eax
c000ebeb:	68 94 99 02 c0       	push   0xc0029994
c000ebf0:	e8 20 3f 00 00       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c000ebf5:	83 c4 10             	add    esp,0x10
c000ebf8:	f6 83 e9 01 00 00 02 	test   BYTE PTR [ebx+0x1e9],0x2
c000ebff:	0f 85 cb 01 00 00    	jne    c000edd0 <Computer::displayFeatures()+0x328>
c000ec05:	b8 f6 98 02 c0       	mov    eax,0xc00298f6
c000ec0a:	83 ec 08             	sub    esp,0x8
c000ec0d:	50                   	push   eax
c000ec0e:	68 a5 99 02 c0       	push   0xc00299a5
c000ec13:	e8 fd 3e 00 00       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c000ec18:	83 c4 10             	add    esp,0x10
c000ec1b:	f6 83 e9 01 00 00 10 	test   BYTE PTR [ebx+0x1e9],0x10
c000ec22:	0f 85 9e 01 00 00    	jne    c000edc6 <Computer::displayFeatures()+0x31e>
c000ec28:	b8 f6 98 02 c0       	mov    eax,0xc00298f6
c000ec2d:	83 ec 08             	sub    esp,0x8
c000ec30:	50                   	push   eax
c000ec31:	68 b6 99 02 c0       	push   0xc00299b6
c000ec36:	e8 da 3e 00 00       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c000ec3b:	83 c4 10             	add    esp,0x10
c000ec3e:	f6 83 e9 01 00 00 04 	test   BYTE PTR [ebx+0x1e9],0x4
c000ec45:	0f 85 71 01 00 00    	jne    c000edbc <Computer::displayFeatures()+0x314>
c000ec4b:	b8 f6 98 02 c0       	mov    eax,0xc00298f6
c000ec50:	83 ec 08             	sub    esp,0x8
c000ec53:	50                   	push   eax
c000ec54:	68 c7 99 02 c0       	push   0xc00299c7
c000ec59:	e8 b7 3e 00 00       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c000ec5e:	83 c4 10             	add    esp,0x10
c000ec61:	f6 83 e9 01 00 00 08 	test   BYTE PTR [ebx+0x1e9],0x8
c000ec68:	0f 85 44 01 00 00    	jne    c000edb2 <Computer::displayFeatures()+0x30a>
c000ec6e:	b8 f6 98 02 c0       	mov    eax,0xc00298f6
c000ec73:	83 ec 08             	sub    esp,0x8
c000ec76:	50                   	push   eax
c000ec77:	68 d8 99 02 c0       	push   0xc00299d8
c000ec7c:	e8 94 3e 00 00       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c000ec81:	83 c4 10             	add    esp,0x10
c000ec84:	f6 83 e9 01 00 00 20 	test   BYTE PTR [ebx+0x1e9],0x20
c000ec8b:	0f 85 17 01 00 00    	jne    c000eda8 <Computer::displayFeatures()+0x300>
c000ec91:	b8 f6 98 02 c0       	mov    eax,0xc00298f6
c000ec96:	83 ec 08             	sub    esp,0x8
c000ec99:	50                   	push   eax
c000ec9a:	68 e9 99 02 c0       	push   0xc00299e9
c000ec9f:	e8 71 3e 00 00       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c000eca4:	83 c4 10             	add    esp,0x10
c000eca7:	f6 83 e9 01 00 00 40 	test   BYTE PTR [ebx+0x1e9],0x40
c000ecae:	0f 85 ea 00 00 00    	jne    c000ed9e <Computer::displayFeatures()+0x2f6>
c000ecb4:	b8 f6 98 02 c0       	mov    eax,0xc00298f6
c000ecb9:	83 ec 08             	sub    esp,0x8
c000ecbc:	50                   	push   eax
c000ecbd:	68 fa 99 02 c0       	push   0xc00299fa
c000ecc2:	e8 4e 3e 00 00       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c000ecc7:	83 c4 10             	add    esp,0x10
c000ecca:	80 bb e9 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e9],0x0
c000ecd1:	0f 88 0d 01 00 00    	js     c000ede4 <Computer::displayFeatures()+0x33c>
c000ecd7:	b8 f6 98 02 c0       	mov    eax,0xc00298f6
c000ecdc:	83 ec 08             	sub    esp,0x8
c000ecdf:	50                   	push   eax
c000ece0:	68 0b 9a 02 c0       	push   0xc0029a0b
c000ece5:	e8 2b 3e 00 00       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c000ecea:	83 c4 10             	add    esp,0x10
c000eced:	f6 83 ea 01 00 00 02 	test   BYTE PTR [ebx+0x1ea],0x2
c000ecf4:	0f 85 9a 00 00 00    	jne    c000ed94 <Computer::displayFeatures()+0x2ec>
c000ecfa:	b8 f6 98 02 c0       	mov    eax,0xc00298f6
c000ecff:	83 ec 08             	sub    esp,0x8
c000ed02:	50                   	push   eax
c000ed03:	68 1c 9a 02 c0       	push   0xc0029a1c
c000ed08:	e8 08 3e 00 00       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c000ed0d:	83 c4 10             	add    esp,0x10
c000ed10:	f6 83 ea 01 00 00 01 	test   BYTE PTR [ebx+0x1ea],0x1
c000ed17:	75 74                	jne    c000ed8d <Computer::displayFeatures()+0x2e5>
c000ed19:	b8 f6 98 02 c0       	mov    eax,0xc00298f6
c000ed1e:	83 ec 08             	sub    esp,0x8
c000ed21:	50                   	push   eax
c000ed22:	68 2d 9a 02 c0       	push   0xc0029a2d
c000ed27:	e8 e9 3d 00 00       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c000ed2c:	c7 44 24 20 10 b3 02 c0 	mov    DWORD PTR [esp+0x20],0xc002b310
c000ed34:	83 c4 18             	add    esp,0x18
c000ed37:	5b                   	pop    ebx
c000ed38:	e9 d8 3d 00 00       	jmp    c0012b15 <Dbg::kprintf(char const*, ...)>
c000ed3d:	b8 f2 98 02 c0       	mov    eax,0xc00298f2
c000ed42:	e9 88 fd ff ff       	jmp    c000eacf <Computer::displayFeatures()+0x27>
c000ed47:	b8 f2 98 02 c0       	mov    eax,0xc00298f2
c000ed4c:	e9 50 fe ff ff       	jmp    c000eba1 <Computer::displayFeatures()+0xf9>
c000ed51:	b8 f2 98 02 c0       	mov    eax,0xc00298f2
c000ed56:	e9 23 fe ff ff       	jmp    c000eb7e <Computer::displayFeatures()+0xd6>
c000ed5b:	b8 f2 98 02 c0       	mov    eax,0xc00298f2
c000ed60:	e9 f6 fd ff ff       	jmp    c000eb5b <Computer::displayFeatures()+0xb3>
c000ed65:	b8 f2 98 02 c0       	mov    eax,0xc00298f2
c000ed6a:	e9 c9 fd ff ff       	jmp    c000eb38 <Computer::displayFeatures()+0x90>
c000ed6f:	b8 f2 98 02 c0       	mov    eax,0xc00298f2
c000ed74:	e9 9c fd ff ff       	jmp    c000eb15 <Computer::displayFeatures()+0x6d>
c000ed79:	b8 f2 98 02 c0       	mov    eax,0xc00298f2
c000ed7e:	e9 6f fd ff ff       	jmp    c000eaf2 <Computer::displayFeatures()+0x4a>
c000ed83:	b8 f2 98 02 c0       	mov    eax,0xc00298f2
c000ed88:	e9 5a fe ff ff       	jmp    c000ebe7 <Computer::displayFeatures()+0x13f>
c000ed8d:	b8 f2 98 02 c0       	mov    eax,0xc00298f2
c000ed92:	eb 8a                	jmp    c000ed1e <Computer::displayFeatures()+0x276>
c000ed94:	b8 f2 98 02 c0       	mov    eax,0xc00298f2
c000ed99:	e9 61 ff ff ff       	jmp    c000ecff <Computer::displayFeatures()+0x257>
c000ed9e:	b8 f2 98 02 c0       	mov    eax,0xc00298f2
c000eda3:	e9 11 ff ff ff       	jmp    c000ecb9 <Computer::displayFeatures()+0x211>
c000eda8:	b8 f2 98 02 c0       	mov    eax,0xc00298f2
c000edad:	e9 e4 fe ff ff       	jmp    c000ec96 <Computer::displayFeatures()+0x1ee>
c000edb2:	b8 f2 98 02 c0       	mov    eax,0xc00298f2
c000edb7:	e9 b7 fe ff ff       	jmp    c000ec73 <Computer::displayFeatures()+0x1cb>
c000edbc:	b8 f2 98 02 c0       	mov    eax,0xc00298f2
c000edc1:	e9 8a fe ff ff       	jmp    c000ec50 <Computer::displayFeatures()+0x1a8>
c000edc6:	b8 f2 98 02 c0       	mov    eax,0xc00298f2
c000edcb:	e9 5d fe ff ff       	jmp    c000ec2d <Computer::displayFeatures()+0x185>
c000edd0:	b8 f2 98 02 c0       	mov    eax,0xc00298f2
c000edd5:	e9 30 fe ff ff       	jmp    c000ec0a <Computer::displayFeatures()+0x162>
c000edda:	b8 f2 98 02 c0       	mov    eax,0xc00298f2
c000eddf:	e9 e0 fd ff ff       	jmp    c000ebc4 <Computer::displayFeatures()+0x11c>
c000ede4:	b8 f2 98 02 c0       	mov    eax,0xc00298f2
c000ede9:	e9 ee fe ff ff       	jmp    c000ecdc <Computer::displayFeatures()+0x234>

c000edee <Computer::rdmsr(unsigned int)>:
c000edee:	83 ec 0c             	sub    esp,0xc
c000edf1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000edf5:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000edfc:	74 0a                	je     c000ee08 <Computer::rdmsr(unsigned int)+0x1a>
c000edfe:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ee02:	0f 32                	rdmsr  
c000ee04:	83 c4 0c             	add    esp,0xc
c000ee07:	c3                   	ret    
c000ee08:	83 ec 0c             	sub    esp,0xc
c000ee0b:	68 3e 9a 02 c0       	push   0xc0029a3e
c000ee10:	e8 1a b2 00 00       	call   c001a02f <Krnl::panic(char const*)>
c000ee15:	83 c4 10             	add    esp,0x10
c000ee18:	eb e4                	jmp    c000edfe <Computer::rdmsr(unsigned int)+0x10>

c000ee1a <Computer::wrmsr(unsigned int, unsigned long long)>:
c000ee1a:	57                   	push   edi
c000ee1b:	56                   	push   esi
c000ee1c:	52                   	push   edx
c000ee1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ee21:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ee25:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000ee29:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ee30:	74 0e                	je     c000ee40 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000ee32:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ee36:	89 f0                	mov    eax,esi
c000ee38:	89 fa                	mov    edx,edi
c000ee3a:	0f 30                	wrmsr  
c000ee3c:	58                   	pop    eax
c000ee3d:	5e                   	pop    esi
c000ee3e:	5f                   	pop    edi
c000ee3f:	c3                   	ret    
c000ee40:	83 ec 0c             	sub    esp,0xc
c000ee43:	68 44 9a 02 c0       	push   0xc0029a44
c000ee48:	e8 e2 b1 00 00       	call   c001a02f <Krnl::panic(char const*)>
c000ee4d:	83 c4 10             	add    esp,0x10
c000ee50:	eb e0                	jmp    c000ee32 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000ee52 <Computer::nmiEnabled()>:
c000ee52:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee56:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000ee5c:	c3                   	ret    
c000ee5d:	90                   	nop

c000ee5e <Computer::readCMOS(unsigned char)>:
c000ee5e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee62:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ee69:	19 c0                	sbb    eax,eax
c000ee6b:	83 e0 80             	and    eax,0xffffff80
c000ee6e:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ee72:	e6 70                	out    0x70,al
c000ee74:	e4 71                	in     al,0x71
c000ee76:	c3                   	ret    
c000ee77:	90                   	nop

c000ee78 <Computer::enableNMI(bool)>:
c000ee78:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ee7c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee80:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000ee86:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000ee8e:	eb ce                	jmp    c000ee5e <Computer::readCMOS(unsigned char)>

c000ee90 <Computer::open(int, int, void*)>:
c000ee90:	56                   	push   esi
c000ee91:	53                   	push   ebx
c000ee92:	83 ec 10             	sub    esp,0x10
c000ee95:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ee99:	f6 05 80 db 02 c0 04 	test   BYTE PTR ds:0xc002db80,0x4
c000eea0:	68 68 12 00 00       	push   0x1268
c000eea5:	0f 94 05 a4 ca 02 c0 	sete   BYTE PTR ds:0xc002caa4
c000eeac:	e8 95 09 00 00       	call   c000f846 <malloc>
c000eeb1:	89 04 24             	mov    DWORD PTR [esp],eax
c000eeb4:	89 c6                	mov    esi,eax
c000eeb6:	e8 97 8e 00 00       	call   c0017d52 <ACPI::ACPI()>
c000eebb:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000eec1:	58                   	pop    eax
c000eec2:	5a                   	pop    edx
c000eec3:	56                   	push   esi
c000eec4:	53                   	push   ebx
c000eec5:	e8 72 50 00 00       	call   c0013f3c <Device::addChild(Device*)>
c000eeca:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eecd:	e8 cc f9 ff ff       	call   c000e89e <Computer::detectFeatures()>
c000eed2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eed5:	e8 ce fb ff ff       	call   c000eaa8 <Computer::displayFeatures()>
c000eeda:	59                   	pop    ecx
c000eedb:	5e                   	pop    esi
c000eedc:	6a 01                	push   0x1
c000eede:	53                   	push   ebx
c000eedf:	e8 94 ff ff ff       	call   c000ee78 <Computer::enableNMI(bool)>
c000eee4:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000eeeb:	e8 56 09 00 00       	call   c000f846 <malloc>
c000eef0:	89 04 24             	mov    DWORD PTR [esp],eax
c000eef3:	89 c6                	mov    esi,eax
c000eef5:	e8 40 9a 00 00       	call   c001893a <CPU::CPU()>
c000eefa:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000ef00:	58                   	pop    eax
c000ef01:	5a                   	pop    edx
c000ef02:	56                   	push   esi
c000ef03:	53                   	push   ebx
c000ef04:	e8 33 50 00 00       	call   c0013f3c <Device::addChild(Device*)>
c000ef09:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ef0f:	8b 10                	mov    edx,DWORD PTR [eax]
c000ef11:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ef15:	6a 00                	push   0x0
c000ef17:	6a 00                	push   0x0
c000ef19:	50                   	push   eax
c000ef1a:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ef1d:	83 c4 20             	add    esp,0x20
c000ef20:	e8 9d 55 00 00       	call   c00144c2 <setupFPU()>
c000ef25:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000ef2b:	85 c0                	test   eax,eax
c000ef2d:	74 1f                	je     c000ef4e <Computer::open(int, int, void*)+0xbe>
c000ef2f:	83 ec 08             	sub    esp,0x8
c000ef32:	50                   	push   eax
c000ef33:	53                   	push   ebx
c000ef34:	e8 03 50 00 00       	call   c0013f3c <Device::addChild(Device*)>
c000ef39:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000ef3f:	8b 10                	mov    edx,DWORD PTR [eax]
c000ef41:	6a 00                	push   0x0
c000ef43:	6a 00                	push   0x0
c000ef45:	6a 00                	push   0x0
c000ef47:	50                   	push   eax
c000ef48:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ef4b:	83 c4 20             	add    esp,0x20
c000ef4e:	83 ec 0c             	sub    esp,0xc
c000ef51:	68 4a e6 00 c0       	push   0xc000e64a
c000ef56:	e8 95 e9 00 00       	call   c001d8f0 <setupMultitasking(void (*)())>
c000ef5b:	83 c4 14             	add    esp,0x14
c000ef5e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ef63:	5b                   	pop    ebx
c000ef64:	5e                   	pop    esi
c000ef65:	c3                   	ret    

c000ef66 <Computer::disableNMI()>:
c000ef66:	6a 00                	push   0x0
c000ef68:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000ef6c:	e8 07 ff ff ff       	call   c000ee78 <Computer::enableNMI(bool)>
c000ef71:	58                   	pop    eax
c000ef72:	5a                   	pop    edx
c000ef73:	c3                   	ret    

c000ef74 <Computer::writeCMOS(unsigned char, unsigned char)>:
c000ef74:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ef78:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ef7f:	19 c0                	sbb    eax,eax
c000ef81:	83 e0 80             	and    eax,0xffffff80
c000ef84:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ef88:	e6 70                	out    0x70,al
c000ef8a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ef8e:	e6 71                	out    0x71,al
c000ef90:	c3                   	ret    
c000ef91:	90                   	nop

c000ef92 <Computer::handleNMI()>:
c000ef92:	56                   	push   esi
c000ef93:	53                   	push   ebx
c000ef94:	83 ec 10             	sub    esp,0x10
c000ef97:	e4 92                	in     al,0x92
c000ef99:	89 c6                	mov    esi,eax
c000ef9b:	e4 61                	in     al,0x61
c000ef9d:	68 4a 9a 02 c0       	push   0xc0029a4a
c000efa2:	88 c3                	mov    bl,al
c000efa4:	e8 6c 3b 00 00       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c000efa9:	83 c4 10             	add    esp,0x10
c000efac:	83 e6 10             	and    esi,0x10
c000efaf:	75 0d                	jne    c000efbe <Computer::handleNMI()+0x2c>
c000efb1:	f6 c3 40             	test   bl,0x40
c000efb4:	75 1d                	jne    c000efd3 <Computer::handleNMI()+0x41>
c000efb6:	84 db                	test   bl,bl
c000efb8:	78 2d                	js     c000efe7 <Computer::handleNMI()+0x55>
c000efba:	58                   	pop    eax
c000efbb:	5b                   	pop    ebx
c000efbc:	5e                   	pop    esi
c000efbd:	c3                   	ret    
c000efbe:	83 ec 0c             	sub    esp,0xc
c000efc1:	68 5b 9a 02 c0       	push   0xc0029a5b
c000efc6:	e8 64 b0 00 00       	call   c001a02f <Krnl::panic(char const*)>
c000efcb:	83 c4 10             	add    esp,0x10
c000efce:	f6 c3 40             	test   bl,0x40
c000efd1:	74 e3                	je     c000efb6 <Computer::handleNMI()+0x24>
c000efd3:	83 ec 0c             	sub    esp,0xc
c000efd6:	68 68 9a 02 c0       	push   0xc0029a68
c000efdb:	e8 4f b0 00 00       	call   c001a02f <Krnl::panic(char const*)>
c000efe0:	83 c4 10             	add    esp,0x10
c000efe3:	84 db                	test   bl,bl
c000efe5:	79 d3                	jns    c000efba <Computer::handleNMI()+0x28>
c000efe7:	c7 44 24 10 72 9a 02 c0 	mov    DWORD PTR [esp+0x10],0xc0029a72
c000efef:	5a                   	pop    edx
c000eff0:	5b                   	pop    ebx
c000eff1:	5e                   	pop    esi
c000eff2:	e9 38 b0 00 00       	jmp    c001a02f <Krnl::panic(char const*)>
c000eff7:	90                   	nop

c000eff8 <Computer::setDiskActivityLight(int, bool)>:
c000eff8:	56                   	push   esi
c000eff9:	53                   	push   ebx
c000effa:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000effe:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000f003:	77 1b                	ja     c000f020 <Computer::setDiskActivityLight(int, bool)+0x28>
c000f005:	e4 92                	in     al,0x92
c000f007:	bb 40 00 00 00       	mov    ebx,0x40
c000f00c:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000f010:	89 da                	mov    edx,ebx
c000f012:	d3 e2                	shl    edx,cl
c000f014:	89 f1                	mov    ecx,esi
c000f016:	f7 d2                	not    edx
c000f018:	d3 e3                	shl    ebx,cl
c000f01a:	21 d0                	and    eax,edx
c000f01c:	09 d8                	or     eax,ebx
c000f01e:	e6 92                	out    0x92,al
c000f020:	5b                   	pop    ebx
c000f021:	5e                   	pop    esi
c000f022:	c3                   	ret    
c000f023:	90                   	nop

c000f024 <GDTEntry::setBase(unsigned int)>:
c000f024:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f028:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f02c:	89 c1                	mov    ecx,eax
c000f02e:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000f032:	c1 e9 10             	shr    ecx,0x10
c000f035:	c1 e8 18             	shr    eax,0x18
c000f038:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000f03b:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000f03e:	c3                   	ret    
c000f03f:	90                   	nop

c000f040 <GDTEntry::setLimit(unsigned int)>:
c000f040:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f044:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f048:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000f04b:	66 89 01             	mov    WORD PTR [ecx],ax
c000f04e:	83 e2 f0             	and    edx,0xfffffff0
c000f051:	c1 e8 10             	shr    eax,0x10
c000f054:	83 e0 0f             	and    eax,0xf
c000f057:	09 d0                	or     eax,edx
c000f059:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000f05c:	c3                   	ret    
c000f05d:	90                   	nop

c000f05e <GDT::GDT()>:
c000f05e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f062:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f068:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f06c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f072:	90                   	nop
c000f073:	c3                   	ret    

c000f074 <GDT::addEntry(GDTEntry)>:
c000f074:	53                   	push   ebx
c000f075:	83 ec 0c             	sub    esp,0xc
c000f078:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000f07c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f07e:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f085:	52                   	push   edx
c000f086:	50                   	push   eax
c000f087:	68 ac 9a 02 c0       	push   0xc0029aac
c000f08c:	e8 84 3a 00 00       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c000f091:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f093:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f097:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f09b:	89 54 c3 04          	mov    DWORD PTR [ebx+eax*8+0x4],edx
c000f09f:	89 4c c3 08          	mov    DWORD PTR [ebx+eax*8+0x8],ecx
c000f0a3:	8d 50 01             	lea    edx,[eax+0x1]
c000f0a6:	c1 e0 03             	shl    eax,0x3
c000f0a9:	89 13                	mov    DWORD PTR [ebx],edx
c000f0ab:	83 c4 18             	add    esp,0x18
c000f0ae:	5b                   	pop    ebx
c000f0af:	c3                   	ret    

c000f0b0 <GDT::getNumberOfEntries()>:
c000f0b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0b4:	8b 00                	mov    eax,DWORD PTR [eax]
c000f0b6:	c3                   	ret    
c000f0b7:	90                   	nop

c000f0b8 <GDT::flush()>:
c000f0b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0bc:	8b 10                	mov    edx,DWORD PTR [eax]
c000f0be:	83 c0 04             	add    eax,0x4
c000f0c1:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000f0c8:	a3 72 db 02 c0       	mov    ds:0xc002db72,eax
c000f0cd:	66 89 15 70 db 02 c0 	mov    WORD PTR ds:0xc002db70,dx
c000f0d4:	e9 6f 13 ff ff       	jmp    c0000448 <loadGDT>
c000f0d9:	90                   	nop

c000f0da <GDT::setup()>:
c000f0da:	55                   	push   ebp
c000f0db:	57                   	push   edi
c000f0dc:	56                   	push   esi
c000f0dd:	53                   	push   ebx
c000f0de:	83 ec 3c             	sub    esp,0x3c
c000f0e1:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000f0e5:	6a 00                	push   0x0
c000f0e7:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000f0eb:	53                   	push   ebx
c000f0ec:	e8 33 ff ff ff       	call   c000f024 <GDTEntry::setBase(unsigned int)>
c000f0f1:	6a 00                	push   0x0
c000f0f3:	53                   	push   ebx
c000f0f4:	e8 47 ff ff ff       	call   c000f040 <GDTEntry::setLimit(unsigned int)>
c000f0f9:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000f101:	6a 00                	push   0x0
c000f103:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000f107:	53                   	push   ebx
c000f108:	e8 17 ff ff ff       	call   c000f024 <GDTEntry::setBase(unsigned int)>
c000f10d:	68 ff ff ff 00       	push   0xffffff
c000f112:	53                   	push   ebx
c000f113:	e8 28 ff ff ff       	call   c000f040 <GDTEntry::setLimit(unsigned int)>
c000f118:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f11c:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f121:	0d 00 9a c0 00       	or     eax,0xc09a00
c000f126:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f12a:	83 c4 20             	add    esp,0x20
c000f12d:	6a 00                	push   0x0
c000f12f:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000f133:	53                   	push   ebx
c000f134:	e8 eb fe ff ff       	call   c000f024 <GDTEntry::setBase(unsigned int)>
c000f139:	68 ff ff ff 00       	push   0xffffff
c000f13e:	53                   	push   ebx
c000f13f:	e8 fc fe ff ff       	call   c000f040 <GDTEntry::setLimit(unsigned int)>
c000f144:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f148:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f14c:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000f150:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000f154:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000f158:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f15d:	0d 00 92 c0 00       	or     eax,0xc09200
c000f162:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f166:	89 d8                	mov    eax,ebx
c000f168:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000f16c:	80 cc 60             	or     ah,0x60
c000f16f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f173:	83 c4 0c             	add    esp,0xc
c000f176:	89 f8                	mov    eax,edi
c000f178:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f17c:	80 cc 60             	or     ah,0x60
c000f17f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f183:	89 c7                	mov    edi,eax
c000f185:	55                   	push   ebp
c000f186:	e8 e9 fe ff ff       	call   c000f074 <GDT::addEntry(GDTEntry)>
c000f18b:	83 c4 0c             	add    esp,0xc
c000f18e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f192:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f196:	55                   	push   ebp
c000f197:	e8 d8 fe ff ff       	call   c000f074 <GDT::addEntry(GDTEntry)>
c000f19c:	83 c4 0c             	add    esp,0xc
c000f19f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f1a3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f1a7:	55                   	push   ebp
c000f1a8:	e8 c7 fe ff ff       	call   c000f074 <GDT::addEntry(GDTEntry)>
c000f1ad:	83 c4 0c             	add    esp,0xc
c000f1b0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f1b4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f1b8:	53                   	push   ebx
c000f1b9:	51                   	push   ecx
c000f1ba:	55                   	push   ebp
c000f1bb:	e8 b4 fe ff ff       	call   c000f074 <GDT::addEntry(GDTEntry)>
c000f1c0:	83 c4 0c             	add    esp,0xc
c000f1c3:	57                   	push   edi
c000f1c4:	56                   	push   esi
c000f1c5:	55                   	push   ebp
c000f1c6:	e8 a9 fe ff ff       	call   c000f074 <GDT::addEntry(GDTEntry)>
c000f1cb:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000f1ce:	e8 e5 fe ff ff       	call   c000f0b8 <GDT::flush()>
c000f1d3:	83 c4 4c             	add    esp,0x4c
c000f1d6:	5b                   	pop    ebx
c000f1d7:	5e                   	pop    esi
c000f1d8:	5f                   	pop    edi
c000f1d9:	5d                   	pop    ebp
c000f1da:	c3                   	ret    

c000f1db <idleFunction(void*)>:
c000f1db:	53                   	push   ebx
c000f1dc:	83 ec 08             	sub    esp,0x8
c000f1df:	e8 dc e4 00 00       	call   c001d6c0 <unlockScheduler()>
c000f1e4:	a1 68 db 02 c0       	mov    eax,ds:0xc002db68
c000f1e9:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c000f1ef:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c000f1f6:	74 3c                	je     c000f234 <idleFunction(void*)+0x59>
c000f1f8:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000f1ff:	74 33                	je     c000f234 <idleFunction(void*)+0x59>
c000f201:	31 db                	xor    ebx,ebx
c000f203:	52                   	push   edx
c000f204:	52                   	push   edx
c000f205:	68 e1 00 00 00       	push   0xe1
c000f20a:	50                   	push   eax
c000f20b:	e8 de fb ff ff       	call   c000edee <Computer::rdmsr(unsigned int)>
c000f210:	53                   	push   ebx
c000f211:	83 e0 02             	and    eax,0x2
c000f214:	50                   	push   eax
c000f215:	68 e1 00 00 00       	push   0xe1
c000f21a:	ff 35 68 db 02 c0    	push   DWORD PTR ds:0xc002db68
c000f220:	e8 f5 fb ff ff       	call   c000ee1a <Computer::wrmsr(unsigned int, unsigned long long)>
c000f225:	83 c4 20             	add    esp,0x20
c000f228:	e8 52 10 ff ff       	call   c000027f <doTPAUSE>
c000f22d:	e8 6e 8d 01 00       	call   c0027fa0 <idleCommon()>
c000f232:	eb f4                	jmp    c000f228 <idleFunction(void*)+0x4d>
c000f234:	fb                   	sti    
c000f235:	f4                   	hlt    
c000f236:	e8 65 8d 01 00       	call   c0027fa0 <idleCommon()>
c000f23b:	eb f7                	jmp    c000f234 <idleFunction(void*)+0x59>
c000f23d:	90                   	nop

c000f23e <IDTEntry::IDTEntry(bool)>:
c000f23e:	83 ec 04             	sub    esp,0x4
c000f241:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f245:	88 04 24             	mov    BYTE PTR [esp],al
c000f248:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f24c:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000f252:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f256:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000f25a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f25e:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f261:	83 e2 f0             	and    edx,0xfffffff0
c000f264:	83 ca 0e             	or     edx,0xe
c000f267:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f26a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f26e:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f271:	83 e2 ef             	and    edx,0xffffffef
c000f274:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f277:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000f27b:	74 04                	je     c000f281 <IDTEntry::IDTEntry(bool)+0x43>
c000f27d:	b2 03                	mov    dl,0x3
c000f27f:	eb 02                	jmp    c000f283 <IDTEntry::IDTEntry(bool)+0x45>
c000f281:	b2 00                	mov    dl,0x0
c000f283:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f287:	83 e2 03             	and    edx,0x3
c000f28a:	88 d1                	mov    cl,dl
c000f28c:	c1 e1 05             	shl    ecx,0x5
c000f28f:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f292:	83 e2 9f             	and    edx,0xffffff9f
c000f295:	09 ca                	or     edx,ecx
c000f297:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f29a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f29e:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f2a1:	83 ca 80             	or     edx,0xffffff80
c000f2a4:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f2a7:	90                   	nop
c000f2a8:	83 c4 04             	add    esp,0x4
c000f2ab:	c3                   	ret    

c000f2ac <IDTEntry::setOffset(unsigned int)>:
c000f2ac:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f2b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2b4:	66 89 02             	mov    WORD PTR [edx],ax
c000f2b7:	c1 e8 10             	shr    eax,0x10
c000f2ba:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000f2be:	c3                   	ret    
c000f2bf:	90                   	nop

c000f2c0 <IDT::IDT()>:
c000f2c0:	90                   	nop
c000f2c1:	c3                   	ret    

c000f2c2 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000f2c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f2c6:	83 c0 30             	add    eax,0x30
c000f2c9:	c3                   	ret    

c000f2ca <IDT::addEntry(IDTEntry, int)>:
c000f2ca:	53                   	push   ebx
c000f2cb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2cf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000f2d3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f2d7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f2db:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000f2de:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000f2e2:	5b                   	pop    ebx
c000f2e3:	c3                   	ret    

c000f2e4 <IDT::addEntry(int, void (*)(), bool)>:
c000f2e4:	53                   	push   ebx
c000f2e5:	83 ec 10             	sub    esp,0x10
c000f2e8:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f2ed:	50                   	push   eax
c000f2ee:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000f2f2:	53                   	push   ebx
c000f2f3:	e8 46 ff ff ff       	call   c000f23e <IDTEntry::IDTEntry(bool)>
c000f2f8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f2fc:	53                   	push   ebx
c000f2fd:	e8 aa ff ff ff       	call   c000f2ac <IDTEntry::setOffset(unsigned int)>
c000f302:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f306:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f30a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f30e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f312:	e8 b3 ff ff ff       	call   c000f2ca <IDT::addEntry(IDTEntry, int)>
c000f317:	83 c4 30             	add    esp,0x30
c000f31a:	5b                   	pop    ebx
c000f31b:	c3                   	ret    

c000f31c <IDT::flush()>:
c000f31c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f320:	66 c7 05 78 db 02 c0 ff 07 	mov    WORD PTR ds:0xc002db78,0x7ff
c000f329:	a3 7a db 02 c0       	mov    ds:0xc002db7a,eax
c000f32e:	0f 01 1d 78 db 02 c0 	lidtd  ds:0xc002db78
c000f335:	c3                   	ret    

c000f336 <IDT::setup()>:
c000f336:	57                   	push   edi
c000f337:	56                   	push   esi
c000f338:	53                   	push   ebx
c000f339:	83 ec 10             	sub    esp,0x10
c000f33c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f340:	6a 00                	push   0x0
c000f342:	68 68 04 00 c0       	push   0xc0000468
c000f347:	6a 00                	push   0x0
c000f349:	53                   	push   ebx
c000f34a:	e8 95 ff ff ff       	call   c000f2e4 <IDT::addEntry(int, void (*)(), bool)>
c000f34f:	6a 00                	push   0x0
c000f351:	68 78 04 00 c0       	push   0xc0000478
c000f356:	6a 01                	push   0x1
c000f358:	53                   	push   ebx
c000f359:	e8 86 ff ff ff       	call   c000f2e4 <IDT::addEntry(int, void (*)(), bool)>
c000f35e:	83 c4 20             	add    esp,0x20
c000f361:	6a 00                	push   0x0
c000f363:	68 82 04 00 c0       	push   0xc0000482
c000f368:	6a 02                	push   0x2
c000f36a:	53                   	push   ebx
c000f36b:	e8 74 ff ff ff       	call   c000f2e4 <IDT::addEntry(int, void (*)(), bool)>
c000f370:	6a 00                	push   0x0
c000f372:	68 8c 04 00 c0       	push   0xc000048c
c000f377:	6a 03                	push   0x3
c000f379:	53                   	push   ebx
c000f37a:	e8 65 ff ff ff       	call   c000f2e4 <IDT::addEntry(int, void (*)(), bool)>
c000f37f:	83 c4 20             	add    esp,0x20
c000f382:	6a 00                	push   0x0
c000f384:	68 96 04 00 c0       	push   0xc0000496
c000f389:	6a 04                	push   0x4
c000f38b:	53                   	push   ebx
c000f38c:	e8 53 ff ff ff       	call   c000f2e4 <IDT::addEntry(int, void (*)(), bool)>
c000f391:	6a 00                	push   0x0
c000f393:	68 a0 04 00 c0       	push   0xc00004a0
c000f398:	6a 05                	push   0x5
c000f39a:	53                   	push   ebx
c000f39b:	e8 44 ff ff ff       	call   c000f2e4 <IDT::addEntry(int, void (*)(), bool)>
c000f3a0:	83 c4 20             	add    esp,0x20
c000f3a3:	6a 00                	push   0x0
c000f3a5:	68 aa 04 00 c0       	push   0xc00004aa
c000f3aa:	6a 06                	push   0x6
c000f3ac:	53                   	push   ebx
c000f3ad:	e8 32 ff ff ff       	call   c000f2e4 <IDT::addEntry(int, void (*)(), bool)>
c000f3b2:	6a 00                	push   0x0
c000f3b4:	68 b4 04 00 c0       	push   0xc00004b4
c000f3b9:	6a 07                	push   0x7
c000f3bb:	53                   	push   ebx
c000f3bc:	e8 23 ff ff ff       	call   c000f2e4 <IDT::addEntry(int, void (*)(), bool)>
c000f3c1:	83 c4 20             	add    esp,0x20
c000f3c4:	6a 00                	push   0x0
c000f3c6:	68 be 04 00 c0       	push   0xc00004be
c000f3cb:	6a 08                	push   0x8
c000f3cd:	53                   	push   ebx
c000f3ce:	e8 11 ff ff ff       	call   c000f2e4 <IDT::addEntry(int, void (*)(), bool)>
c000f3d3:	6a 00                	push   0x0
c000f3d5:	68 c6 04 00 c0       	push   0xc00004c6
c000f3da:	6a 09                	push   0x9
c000f3dc:	53                   	push   ebx
c000f3dd:	e8 02 ff ff ff       	call   c000f2e4 <IDT::addEntry(int, void (*)(), bool)>
c000f3e2:	83 c4 20             	add    esp,0x20
c000f3e5:	6a 00                	push   0x0
c000f3e7:	68 d0 04 00 c0       	push   0xc00004d0
c000f3ec:	6a 0a                	push   0xa
c000f3ee:	53                   	push   ebx
c000f3ef:	e8 f0 fe ff ff       	call   c000f2e4 <IDT::addEntry(int, void (*)(), bool)>
c000f3f4:	6a 00                	push   0x0
c000f3f6:	68 d8 04 00 c0       	push   0xc00004d8
c000f3fb:	6a 0b                	push   0xb
c000f3fd:	53                   	push   ebx
c000f3fe:	e8 e1 fe ff ff       	call   c000f2e4 <IDT::addEntry(int, void (*)(), bool)>
c000f403:	83 c4 20             	add    esp,0x20
c000f406:	6a 00                	push   0x0
c000f408:	68 e0 04 00 c0       	push   0xc00004e0
c000f40d:	6a 0c                	push   0xc
c000f40f:	53                   	push   ebx
c000f410:	e8 cf fe ff ff       	call   c000f2e4 <IDT::addEntry(int, void (*)(), bool)>
c000f415:	6a 00                	push   0x0
c000f417:	68 e8 04 00 c0       	push   0xc00004e8
c000f41c:	6a 0d                	push   0xd
c000f41e:	53                   	push   ebx
c000f41f:	e8 c0 fe ff ff       	call   c000f2e4 <IDT::addEntry(int, void (*)(), bool)>
c000f424:	83 c4 20             	add    esp,0x20
c000f427:	6a 00                	push   0x0
c000f429:	68 f0 04 00 c0       	push   0xc00004f0
c000f42e:	6a 0e                	push   0xe
c000f430:	53                   	push   ebx
c000f431:	e8 ae fe ff ff       	call   c000f2e4 <IDT::addEntry(int, void (*)(), bool)>
c000f436:	6a 00                	push   0x0
c000f438:	68 f8 04 00 c0       	push   0xc00004f8
c000f43d:	6a 0f                	push   0xf
c000f43f:	53                   	push   ebx
c000f440:	e8 9f fe ff ff       	call   c000f2e4 <IDT::addEntry(int, void (*)(), bool)>
c000f445:	83 c4 20             	add    esp,0x20
c000f448:	6a 00                	push   0x0
c000f44a:	68 02 05 00 c0       	push   0xc0000502
c000f44f:	6a 10                	push   0x10
c000f451:	53                   	push   ebx
c000f452:	e8 8d fe ff ff       	call   c000f2e4 <IDT::addEntry(int, void (*)(), bool)>
c000f457:	6a 00                	push   0x0
c000f459:	68 0c 05 00 c0       	push   0xc000050c
c000f45e:	6a 11                	push   0x11
c000f460:	53                   	push   ebx
c000f461:	e8 7e fe ff ff       	call   c000f2e4 <IDT::addEntry(int, void (*)(), bool)>
c000f466:	83 c4 20             	add    esp,0x20
c000f469:	6a 00                	push   0x0
c000f46b:	68 16 05 00 c0       	push   0xc0000516
c000f470:	6a 12                	push   0x12
c000f472:	53                   	push   ebx
c000f473:	e8 6c fe ff ff       	call   c000f2e4 <IDT::addEntry(int, void (*)(), bool)>
c000f478:	6a 01                	push   0x1
c000f47a:	68 b0 05 00 c0       	push   0xc00005b0
c000f47f:	6a 60                	push   0x60
c000f481:	53                   	push   ebx
c000f482:	e8 5d fe ff ff       	call   c000f2e4 <IDT::addEntry(int, void (*)(), bool)>
c000f487:	83 c4 20             	add    esp,0x20
c000f48a:	6a 00                	push   0x0
c000f48c:	68 b7 05 00 c0       	push   0xc00005b7
c000f491:	6a 20                	push   0x20
c000f493:	53                   	push   ebx
c000f494:	e8 4b fe ff ff       	call   c000f2e4 <IDT::addEntry(int, void (*)(), bool)>
c000f499:	6a 00                	push   0x0
c000f49b:	68 a2 05 00 c0       	push   0xc00005a2
c000f4a0:	6a 21                	push   0x21
c000f4a2:	53                   	push   ebx
c000f4a3:	e8 3c fe ff ff       	call   c000f2e4 <IDT::addEntry(int, void (*)(), bool)>
c000f4a8:	83 c4 20             	add    esp,0x20
c000f4ab:	6a 00                	push   0x0
c000f4ad:	68 a9 05 00 c0       	push   0xc00005a9
c000f4b2:	6a 22                	push   0x22
c000f4b4:	53                   	push   ebx
c000f4b5:	e8 2a fe ff ff       	call   c000f2e4 <IDT::addEntry(int, void (*)(), bool)>
c000f4ba:	6a 00                	push   0x0
c000f4bc:	68 20 05 00 c0       	push   0xc0000520
c000f4c1:	6a 23                	push   0x23
c000f4c3:	53                   	push   ebx
c000f4c4:	e8 1b fe ff ff       	call   c000f2e4 <IDT::addEntry(int, void (*)(), bool)>
c000f4c9:	83 c4 20             	add    esp,0x20
c000f4cc:	6a 00                	push   0x0
c000f4ce:	68 2a 05 00 c0       	push   0xc000052a
c000f4d3:	6a 24                	push   0x24
c000f4d5:	53                   	push   ebx
c000f4d6:	e8 09 fe ff ff       	call   c000f2e4 <IDT::addEntry(int, void (*)(), bool)>
c000f4db:	6a 00                	push   0x0
c000f4dd:	68 34 05 00 c0       	push   0xc0000534
c000f4e2:	6a 25                	push   0x25
c000f4e4:	53                   	push   ebx
c000f4e5:	e8 fa fd ff ff       	call   c000f2e4 <IDT::addEntry(int, void (*)(), bool)>
c000f4ea:	83 c4 20             	add    esp,0x20
c000f4ed:	6a 00                	push   0x0
c000f4ef:	68 3e 05 00 c0       	push   0xc000053e
c000f4f4:	6a 26                	push   0x26
c000f4f6:	53                   	push   ebx
c000f4f7:	e8 e8 fd ff ff       	call   c000f2e4 <IDT::addEntry(int, void (*)(), bool)>
c000f4fc:	6a 00                	push   0x0
c000f4fe:	68 48 05 00 c0       	push   0xc0000548
c000f503:	6a 27                	push   0x27
c000f505:	53                   	push   ebx
c000f506:	e8 d9 fd ff ff       	call   c000f2e4 <IDT::addEntry(int, void (*)(), bool)>
c000f50b:	83 c4 20             	add    esp,0x20
c000f50e:	6a 00                	push   0x0
c000f510:	68 52 05 00 c0       	push   0xc0000552
c000f515:	6a 28                	push   0x28
c000f517:	53                   	push   ebx
c000f518:	e8 c7 fd ff ff       	call   c000f2e4 <IDT::addEntry(int, void (*)(), bool)>
c000f51d:	6a 00                	push   0x0
c000f51f:	68 5c 05 00 c0       	push   0xc000055c
c000f524:	6a 29                	push   0x29
c000f526:	53                   	push   ebx
c000f527:	e8 b8 fd ff ff       	call   c000f2e4 <IDT::addEntry(int, void (*)(), bool)>
c000f52c:	83 c4 20             	add    esp,0x20
c000f52f:	6a 00                	push   0x0
c000f531:	68 66 05 00 c0       	push   0xc0000566
c000f536:	6a 2a                	push   0x2a
c000f538:	53                   	push   ebx
c000f539:	e8 a6 fd ff ff       	call   c000f2e4 <IDT::addEntry(int, void (*)(), bool)>
c000f53e:	6a 00                	push   0x0
c000f540:	68 70 05 00 c0       	push   0xc0000570
c000f545:	6a 2b                	push   0x2b
c000f547:	53                   	push   ebx
c000f548:	e8 97 fd ff ff       	call   c000f2e4 <IDT::addEntry(int, void (*)(), bool)>
c000f54d:	83 c4 20             	add    esp,0x20
c000f550:	6a 00                	push   0x0
c000f552:	68 7a 05 00 c0       	push   0xc000057a
c000f557:	6a 2c                	push   0x2c
c000f559:	53                   	push   ebx
c000f55a:	e8 85 fd ff ff       	call   c000f2e4 <IDT::addEntry(int, void (*)(), bool)>
c000f55f:	6a 00                	push   0x0
c000f561:	68 84 05 00 c0       	push   0xc0000584
c000f566:	6a 2d                	push   0x2d
c000f568:	53                   	push   ebx
c000f569:	e8 76 fd ff ff       	call   c000f2e4 <IDT::addEntry(int, void (*)(), bool)>
c000f56e:	83 c4 20             	add    esp,0x20
c000f571:	6a 00                	push   0x0
c000f573:	68 8e 05 00 c0       	push   0xc000058e
c000f578:	6a 2e                	push   0x2e
c000f57a:	53                   	push   ebx
c000f57b:	e8 64 fd ff ff       	call   c000f2e4 <IDT::addEntry(int, void (*)(), bool)>
c000f580:	6a 00                	push   0x0
c000f582:	68 98 05 00 c0       	push   0xc0000598
c000f587:	6a 2f                	push   0x2f
c000f589:	53                   	push   ebx
c000f58a:	e8 55 fd ff ff       	call   c000f2e4 <IDT::addEntry(int, void (*)(), bool)>
c000f58f:	83 c4 20             	add    esp,0x20
c000f592:	6a 00                	push   0x0
c000f594:	68 ed 05 00 c0       	push   0xc00005ed
c000f599:	6a 30                	push   0x30
c000f59b:	53                   	push   ebx
c000f59c:	e8 43 fd ff ff       	call   c000f2e4 <IDT::addEntry(int, void (*)(), bool)>
c000f5a1:	6a 00                	push   0x0
c000f5a3:	68 f7 05 00 c0       	push   0xc00005f7
c000f5a8:	6a 31                	push   0x31
c000f5aa:	53                   	push   ebx
c000f5ab:	e8 34 fd ff ff       	call   c000f2e4 <IDT::addEntry(int, void (*)(), bool)>
c000f5b0:	83 c4 20             	add    esp,0x20
c000f5b3:	6a 00                	push   0x0
c000f5b5:	68 01 06 00 c0       	push   0xc0000601
c000f5ba:	6a 32                	push   0x32
c000f5bc:	53                   	push   ebx
c000f5bd:	e8 22 fd ff ff       	call   c000f2e4 <IDT::addEntry(int, void (*)(), bool)>
c000f5c2:	6a 00                	push   0x0
c000f5c4:	68 0b 06 00 c0       	push   0xc000060b
c000f5c9:	6a 33                	push   0x33
c000f5cb:	53                   	push   ebx
c000f5cc:	e8 13 fd ff ff       	call   c000f2e4 <IDT::addEntry(int, void (*)(), bool)>
c000f5d1:	83 c4 20             	add    esp,0x20
c000f5d4:	6a 00                	push   0x0
c000f5d6:	68 15 06 00 c0       	push   0xc0000615
c000f5db:	6a 34                	push   0x34
c000f5dd:	53                   	push   ebx
c000f5de:	e8 01 fd ff ff       	call   c000f2e4 <IDT::addEntry(int, void (*)(), bool)>
c000f5e3:	6a 00                	push   0x0
c000f5e5:	68 1f 06 00 c0       	push   0xc000061f
c000f5ea:	6a 35                	push   0x35
c000f5ec:	53                   	push   ebx
c000f5ed:	e8 f2 fc ff ff       	call   c000f2e4 <IDT::addEntry(int, void (*)(), bool)>
c000f5f2:	83 c4 20             	add    esp,0x20
c000f5f5:	6a 00                	push   0x0
c000f5f7:	68 29 06 00 c0       	push   0xc0000629
c000f5fc:	6a 36                	push   0x36
c000f5fe:	53                   	push   ebx
c000f5ff:	e8 e0 fc ff ff       	call   c000f2e4 <IDT::addEntry(int, void (*)(), bool)>
c000f604:	6a 00                	push   0x0
c000f606:	68 33 06 00 c0       	push   0xc0000633
c000f60b:	6a 37                	push   0x37
c000f60d:	53                   	push   ebx
c000f60e:	e8 d1 fc ff ff       	call   c000f2e4 <IDT::addEntry(int, void (*)(), bool)>
c000f613:	83 c4 20             	add    esp,0x20
c000f616:	e8 9a 26 00 00       	call   c0011cb5 <Virt::getAKernelVAS()>
c000f61b:	52                   	push   edx
c000f61c:	6a 03                	push   0x3
c000f61e:	6a 02                	push   0x2
c000f620:	50                   	push   eax
c000f621:	e8 ca 2c 00 00       	call   c00122f0 <VAS::allocatePages(int, int)>
c000f626:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f62d:	89 c6                	mov    esi,eax
c000f62f:	e8 12 02 00 00       	call   c000f846 <malloc>
c000f634:	81 c6 00 20 00 00    	add    esi,0x2000
c000f63a:	89 04 24             	mov    DWORD PTR [esp],eax
c000f63d:	89 c7                	mov    edi,eax
c000f63f:	e8 12 1e 00 00       	call   c0011456 <TSS::TSS()>
c000f644:	83 c4 0c             	add    esp,0xc
c000f647:	68 be 04 00 c0       	push   0xc00004be
c000f64c:	56                   	push   esi
c000f64d:	57                   	push   edi
c000f64e:	e8 43 1e 00 00       	call   c0011496 <TSS::setup(unsigned long, unsigned long)>
c000f653:	59                   	pop    ecx
c000f654:	89 c6                	mov    esi,eax
c000f656:	5f                   	pop    edi
c000f657:	6a 00                	push   0x0
c000f659:	8d 44 24 14          	lea    eax,[esp+0x14]
c000f65d:	50                   	push   eax
c000f65e:	e8 db fb ff ff       	call   c000f23e <IDTEntry::IDTEntry(bool)>
c000f663:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f667:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000f66c:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000f673:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000f679:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f67d:	80 ce 05             	or     dh,0x5
c000f680:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000f683:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f687:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f68b:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000f68e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f691:	e8 86 fc ff ff       	call   c000f31c <IDT::flush()>
c000f696:	83 c4 20             	add    esp,0x20
c000f699:	5b                   	pop    ebx
c000f69a:	5e                   	pop    esi
c000f69b:	5f                   	pop    edi
c000f69c:	c3                   	ret    

c000f69d <sbrk>:
c000f69d:	55                   	push   ebp
c000f69e:	57                   	push   edi
c000f69f:	56                   	push   esi
c000f6a0:	53                   	push   ebx
c000f6a1:	83 ec 1c             	sub    esp,0x1c
c000f6a4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f6a8:	85 c0                	test   eax,eax
c000f6aa:	74 3e                	je     c000f6ea <sbrk+0x4d>
c000f6ac:	78 43                	js     c000f6f1 <sbrk+0x54>
c000f6ae:	8b 15 68 db 02 c0    	mov    edx,DWORD PTR ds:0xc002db68
c000f6b4:	8b 92 60 01 00 00    	mov    edx,DWORD PTR [edx+0x160]
c000f6ba:	8a 92 91 11 00 00    	mov    dl,BYTE PTR [edx+0x1191]
c000f6c0:	83 e2 01             	and    edx,0x1
c000f6c3:	88 54 24 07          	mov    BYTE PTR [esp+0x7],dl
c000f6c7:	8b 0d 88 ca 02 c0    	mov    ecx,DWORD PTR ds:0xc002ca88
c000f6cd:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000f6d1:	05 ff 0f 00 00       	add    eax,0xfff
c000f6d6:	89 c2                	mov    edx,eax
c000f6d8:	78 2f                	js     c000f709 <sbrk+0x6c>
c000f6da:	c1 fa 0c             	sar    edx,0xc
c000f6dd:	89 d7                	mov    edi,edx
c000f6df:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f6e3:	be 00 00 00 00       	mov    esi,0x0
c000f6e8:	eb 36                	jmp    c000f720 <sbrk+0x83>
c000f6ea:	a1 88 ca 02 c0       	mov    eax,ds:0xc002ca88
c000f6ef:	eb 74                	jmp    c000f765 <sbrk+0xc8>
c000f6f1:	83 ec 08             	sub    esp,0x8
c000f6f4:	50                   	push   eax
c000f6f5:	68 c8 9a 02 c0       	push   0xc0029ac8
c000f6fa:	e8 16 34 00 00       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c000f6ff:	83 c4 10             	add    esp,0x10
c000f702:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f707:	eb 5c                	jmp    c000f765 <sbrk+0xc8>
c000f709:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000f70f:	eb c9                	jmp    c000f6da <sbrk+0x3d>
c000f711:	81 05 88 ca 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002ca88,0x1000
c000f71b:	46                   	inc    esi
c000f71c:	39 f7                	cmp    edi,esi
c000f71e:	74 34                	je     c000f754 <sbrk+0xb7>
c000f720:	e8 90 25 00 00       	call   c0011cb5 <Virt::getAKernelVAS()>
c000f725:	89 c3                	mov    ebx,eax
c000f727:	8b 2d 88 ca 02 c0    	mov    ebp,DWORD PTR ds:0xc002ca88
c000f72d:	e8 b1 07 00 00       	call   c000fee3 <Phys::allocatePage()>
c000f732:	68 01 04 00 00       	push   0x401
c000f737:	55                   	push   ebp
c000f738:	50                   	push   eax
c000f739:	53                   	push   ebx
c000f73a:	e8 b1 2a 00 00       	call   c00121f0 <VAS::mapPage(unsigned long, unsigned long, int)>
c000f73f:	83 c4 10             	add    esp,0x10
c000f742:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f747:	74 c8                	je     c000f711 <sbrk+0x74>
c000f749:	8b 1d 88 ca 02 c0    	mov    ebx,DWORD PTR ds:0xc002ca88
c000f74f:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f752:	eb bd                	jmp    c000f711 <sbrk+0x74>
c000f754:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f759:	75 12                	jne    c000f76d <sbrk+0xd0>
c000f75b:	0f 20 d8             	mov    eax,cr3
c000f75e:	0f 22 d8             	mov    cr3,eax
c000f761:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f765:	83 c4 1c             	add    esp,0x1c
c000f768:	5b                   	pop    ebx
c000f769:	5e                   	pop    esi
c000f76a:	5f                   	pop    edi
c000f76b:	5d                   	pop    ebp
c000f76c:	c3                   	ret    
c000f76d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f771:	89 cb                	mov    ebx,ecx
c000f773:	c1 eb 0a             	shr    ebx,0xa
c000f776:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000f77c:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000f782:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f786:	c1 e0 0c             	shl    eax,0xc
c000f789:	01 c8                	add    eax,ecx
c000f78b:	c1 e8 0a             	shr    eax,0xa
c000f78e:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f793:	2d 00 00 40 00       	sub    eax,0x400000
c000f798:	39 c3                	cmp    ebx,eax
c000f79a:	77 c5                	ja     c000f761 <sbrk+0xc4>
c000f79c:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f79f:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f7a5:	39 d8                	cmp    eax,ebx
c000f7a7:	73 f3                	jae    c000f79c <sbrk+0xff>
c000f7a9:	eb b6                	jmp    c000f761 <sbrk+0xc4>

c000f7ab <mmap>:
c000f7ab:	83 ec 18             	sub    esp,0x18
c000f7ae:	68 f8 9a 02 c0       	push   0xc0029af8
c000f7b3:	e8 77 a8 00 00       	call   c001a02f <Krnl::panic(char const*)>
c000f7b8:	b8 00 00 00 00       	mov    eax,0x0
c000f7bd:	83 c4 1c             	add    esp,0x1c
c000f7c0:	c3                   	ret    

c000f7c1 <munmap>:
c000f7c1:	83 ec 18             	sub    esp,0x18
c000f7c4:	68 fd 9a 02 c0       	push   0xc0029afd
c000f7c9:	e8 61 a8 00 00       	call   c001a02f <Krnl::panic(char const*)>
c000f7ce:	b8 00 00 00 00       	mov    eax,0x0
c000f7d3:	83 c4 1c             	add    esp,0x1c
c000f7d6:	c3                   	ret    

c000f7d7 <liballoc_lock()>:
c000f7d7:	83 ec 0c             	sub    esp,0xc
c000f7da:	e8 df de 00 00       	call   c001d6be <lockScheduler()>
c000f7df:	b8 00 00 00 00       	mov    eax,0x0
c000f7e4:	83 c4 0c             	add    esp,0xc
c000f7e7:	c3                   	ret    

c000f7e8 <liballoc_unlock()>:
c000f7e8:	83 ec 0c             	sub    esp,0xc
c000f7eb:	e8 d0 de 00 00       	call   c001d6c0 <unlockScheduler()>
c000f7f0:	b8 00 00 00 00       	mov    eax,0x0
c000f7f5:	83 c4 0c             	add    esp,0xc
c000f7f8:	c3                   	ret    

c000f7f9 <liballoc_alloc(int)>:
c000f7f9:	83 ec 0c             	sub    esp,0xc
c000f7fc:	e8 b4 24 00 00       	call   c0011cb5 <Virt::getAKernelVAS()>
c000f801:	83 ec 04             	sub    esp,0x4
c000f804:	6a 01                	push   0x1
c000f806:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f80a:	50                   	push   eax
c000f80b:	e8 e0 2a 00 00       	call   c00122f0 <VAS::allocatePages(int, int)>
c000f810:	83 c4 1c             	add    esp,0x1c
c000f813:	c3                   	ret    

c000f814 <liballoc_free(void*, int)>:
c000f814:	83 ec 0c             	sub    esp,0xc
c000f817:	e8 99 24 00 00       	call   c0011cb5 <Virt::getAKernelVAS()>
c000f81c:	83 ec 08             	sub    esp,0x8
c000f81f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f823:	50                   	push   eax
c000f824:	e8 83 27 00 00       	call   c0011fac <VAS::freeAllocatedPages(unsigned long)>
c000f829:	b8 00 00 00 00       	mov    eax,0x0
c000f82e:	83 c4 1c             	add    esp,0x1c
c000f831:	c3                   	ret    

c000f832 <realloc>:
c000f832:	83 ec 14             	sub    esp,0x14
c000f835:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f839:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f83d:	e8 12 1e ff ff       	call   c0001654 <dlrealloc>
c000f842:	83 c4 1c             	add    esp,0x1c
c000f845:	c3                   	ret    

c000f846 <malloc>:
c000f846:	83 ec 18             	sub    esp,0x18
c000f849:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f84d:	e8 c5 18 ff ff       	call   c0001117 <dlmalloc>
c000f852:	83 c4 1c             	add    esp,0x1c
c000f855:	c3                   	ret    

c000f856 <free>:
c000f856:	83 ec 18             	sub    esp,0x18
c000f859:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f85d:	e8 5a 15 ff ff       	call   c0000dbc <dlfree>
c000f862:	83 c4 1c             	add    esp,0x1c
c000f865:	c3                   	ret    

c000f866 <rfree>:
c000f866:	83 ec 18             	sub    esp,0x18
c000f869:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f86d:	e8 4a 15 ff ff       	call   c0000dbc <dlfree>
c000f872:	83 c4 1c             	add    esp,0x1c
c000f875:	c3                   	ret    

c000f876 <calloc>:
c000f876:	56                   	push   esi
c000f877:	53                   	push   ebx
c000f878:	83 ec 10             	sub    esp,0x10
c000f87b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f87f:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f884:	53                   	push   ebx
c000f885:	e8 bc ff ff ff       	call   c000f846 <malloc>
c000f88a:	89 c6                	mov    esi,eax
c000f88c:	83 c4 0c             	add    esp,0xc
c000f88f:	53                   	push   ebx
c000f890:	6a 00                	push   0x0
c000f892:	50                   	push   eax
c000f893:	e8 e0 0e ff ff       	call   c0000778 <memset>
c000f898:	89 f0                	mov    eax,esi
c000f89a:	83 c4 14             	add    esp,0x14
c000f89d:	5b                   	pop    ebx
c000f89e:	5e                   	pop    esi
c000f89f:	c3                   	ret    

c000f8a0 <hwTextMode_loadInData(VgaText*)>:
c000f8a0:	55                   	push   ebp
c000f8a1:	a1 a0 ca 02 c0       	mov    eax,ds:0xc002caa0
c000f8a6:	57                   	push   edi
c000f8a7:	56                   	push   esi
c000f8a8:	53                   	push   ebx
c000f8a9:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000f8ad:	8b 97 ac 0f 00 00    	mov    edx,DWORD PTR [edi+0xfac]
c000f8b3:	85 d2                	test   edx,edx
c000f8b5:	7e 2f                	jle    c000f8e6 <hwTextMode_loadInData(VgaText*)+0x46>
c000f8b7:	8d a8 94 00 00 00    	lea    ebp,[eax+0x94]
c000f8bd:	8d 4f 0c             	lea    ecx,[edi+0xc]
c000f8c0:	31 f6                	xor    esi,esi
c000f8c2:	29 fd                	sub    ebp,edi
c000f8c4:	8d 1c 29             	lea    ebx,[ecx+ebp*1]
c000f8c7:	31 c0                	xor    eax,eax
c000f8c9:	66 8b 14 41          	mov    dx,WORD PTR [ecx+eax*2]
c000f8cd:	66 89 14 43          	mov    WORD PTR [ebx+eax*2],dx
c000f8d1:	40                   	inc    eax
c000f8d2:	83 f8 50             	cmp    eax,0x50
c000f8d5:	75 f2                	jne    c000f8c9 <hwTextMode_loadInData(VgaText*)+0x29>
c000f8d7:	81 c1 a0 00 00 00    	add    ecx,0xa0
c000f8dd:	46                   	inc    esi
c000f8de:	39 b7 ac 0f 00 00    	cmp    DWORD PTR [edi+0xfac],esi
c000f8e4:	7f de                	jg     c000f8c4 <hwTextMode_loadInData(VgaText*)+0x24>
c000f8e6:	5b                   	pop    ebx
c000f8e7:	5e                   	pop    esi
c000f8e8:	5f                   	pop    edi
c000f8e9:	5d                   	pop    ebp
c000f8ea:	c3                   	ret    

c000f8eb <hwTextMode_loadInTitle(VgaText*, char*)>:
c000f8eb:	55                   	push   ebp
c000f8ec:	80 3d 00 dc 02 c0 00 	cmp    BYTE PTR ds:0xc002dc00,0x0
c000f8f3:	57                   	push   edi
c000f8f4:	56                   	push   esi
c000f8f5:	53                   	push   ebx
c000f8f6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f8fa:	75 50                	jne    c000f94c <hwTextMode_loadInTitle(VgaText*, char*)+0x61>
c000f8fc:	8b ae d8 0f 00 00    	mov    ebp,DWORD PTR [esi+0xfd8]
c000f902:	8b 86 d4 0f 00 00    	mov    eax,DWORD PTR [esi+0xfd4]
c000f908:	8b 15 a0 ca 02 c0    	mov    edx,DWORD PTR ds:0xc002caa0
c000f90e:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000f912:	8d ba a0 00 00 00    	lea    edi,[edx+0xa0]
c000f918:	eb 0e                	jmp    c000f928 <hwTextMode_loadInTitle(VgaText*, char*)+0x3d>
c000f91a:	8b ae d8 0f 00 00    	mov    ebp,DWORD PTR [esi+0xfd8]
c000f920:	8b 86 d4 0f 00 00    	mov    eax,DWORD PTR [esi+0xfd4]
c000f926:	89 da                	mov    edx,ebx
c000f928:	83 e5 0f             	and    ebp,0xf
c000f92b:	c1 e0 04             	shl    eax,0x4
c000f92e:	8d 5a 02             	lea    ebx,[edx+0x2]
c000f931:	0f b6 c0             	movzx  eax,al
c000f934:	41                   	inc    ecx
c000f935:	09 e8                	or     eax,ebp
c000f937:	0f b6 69 ff          	movzx  ebp,BYTE PTR [ecx-0x1]
c000f93b:	c1 e0 08             	shl    eax,0x8
c000f93e:	09 e8                	or     eax,ebp
c000f940:	39 fb                	cmp    ebx,edi
c000f942:	66 89 02             	mov    WORD PTR [edx],ax
c000f945:	75 d3                	jne    c000f91a <hwTextMode_loadInTitle(VgaText*, char*)+0x2f>
c000f947:	5b                   	pop    ebx
c000f948:	5e                   	pop    esi
c000f949:	5f                   	pop    edi
c000f94a:	5d                   	pop    ebp
c000f94b:	c3                   	ret    
c000f94c:	c7 86 d8 0f 00 00 02 00 00 00 	mov    DWORD PTR [esi+0xfd8],0x2
c000f956:	c7 86 d4 0f 00 00 00 00 00 00 	mov    DWORD PTR [esi+0xfd4],0x0
c000f960:	31 c0                	xor    eax,eax
c000f962:	bd 02 00 00 00       	mov    ebp,0x2
c000f967:	eb 9f                	jmp    c000f908 <hwTextMode_loadInTitle(VgaText*, char*)+0x1d>

c000f969 <hwTextMode_showCursor(VgaText*, bool)>:
c000f969:	56                   	push   esi
c000f96a:	80 3d 00 dc 02 c0 00 	cmp    BYTE PTR ds:0xc002dc00,0x0
c000f971:	53                   	push   ebx
c000f972:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f976:	75 39                	jne    c000f9b1 <hwTextMode_showCursor(VgaText*, bool)+0x48>
c000f978:	84 c0                	test   al,al
c000f97a:	74 38                	je     c000f9b4 <hwTextMode_showCursor(VgaText*, bool)+0x4b>
c000f97c:	bb d4 03 00 00       	mov    ebx,0x3d4
c000f981:	b0 0a                	mov    al,0xa
c000f983:	89 da                	mov    edx,ebx
c000f985:	ee                   	out    dx,al
c000f986:	b9 d5 03 00 00       	mov    ecx,0x3d5
c000f98b:	89 ca                	mov    edx,ecx
c000f98d:	ec                   	in     al,dx
c000f98e:	b2 0f                	mov    dl,0xf
c000f990:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000f994:	83 e0 c0             	and    eax,0xffffffc0
c000f997:	2b 96 b8 0f 00 00    	sub    edx,DWORD PTR [esi+0xfb8]
c000f99d:	09 d0                	or     eax,edx
c000f99f:	89 ca                	mov    edx,ecx
c000f9a1:	ee                   	out    dx,al
c000f9a2:	b0 0b                	mov    al,0xb
c000f9a4:	89 da                	mov    edx,ebx
c000f9a6:	ee                   	out    dx,al
c000f9a7:	89 ca                	mov    edx,ecx
c000f9a9:	ec                   	in     al,dx
c000f9aa:	83 e0 e0             	and    eax,0xffffffe0
c000f9ad:	83 c8 0f             	or     eax,0xf
c000f9b0:	ee                   	out    dx,al
c000f9b1:	5b                   	pop    ebx
c000f9b2:	5e                   	pop    esi
c000f9b3:	c3                   	ret    
c000f9b4:	b0 0a                	mov    al,0xa
c000f9b6:	ba d4 03 00 00       	mov    edx,0x3d4
c000f9bb:	ee                   	out    dx,al
c000f9bc:	b0 20                	mov    al,0x20
c000f9be:	ba d5 03 00 00       	mov    edx,0x3d5
c000f9c3:	ee                   	out    dx,al
c000f9c4:	5b                   	pop    ebx
c000f9c5:	5e                   	pop    esi
c000f9c6:	c3                   	ret    

c000f9c7 <hwTextMode_update(VgaText*)>:
c000f9c7:	c3                   	ret    

c000f9c8 <hwTextMode_updateCursor(VgaText*)>:
c000f9c8:	56                   	push   esi
c000f9c9:	80 3d 00 dc 02 c0 00 	cmp    BYTE PTR ds:0xc002dc00,0x0
c000f9d0:	53                   	push   ebx
c000f9d1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f9d5:	75 3f                	jne    c000fa16 <hwTextMode_updateCursor(VgaText*)+0x4e>
c000f9d7:	be d4 03 00 00       	mov    esi,0x3d4
c000f9dc:	b9 19 00 00 00       	mov    ecx,0x19
c000f9e1:	89 f2                	mov    edx,esi
c000f9e3:	2b 88 ac 0f 00 00    	sub    ecx,DWORD PTR [eax+0xfac]
c000f9e9:	03 88 b4 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb4]
c000f9ef:	8d 0c 89             	lea    ecx,[ecx+ecx*4]
c000f9f2:	c1 e1 04             	shl    ecx,0x4
c000f9f5:	03 88 b0 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb0]
c000f9fb:	b0 0f                	mov    al,0xf
c000f9fd:	ee                   	out    dx,al
c000f9fe:	bb d5 03 00 00       	mov    ebx,0x3d5
c000fa03:	88 c8                	mov    al,cl
c000fa05:	89 da                	mov    edx,ebx
c000fa07:	ee                   	out    dx,al
c000fa08:	b0 0e                	mov    al,0xe
c000fa0a:	89 f2                	mov    edx,esi
c000fa0c:	ee                   	out    dx,al
c000fa0d:	89 c8                	mov    eax,ecx
c000fa0f:	89 da                	mov    edx,ebx
c000fa11:	66 c1 e8 08          	shr    ax,0x8
c000fa15:	ee                   	out    dx,al
c000fa16:	5b                   	pop    ebx
c000fa17:	5e                   	pop    esi
c000fa18:	c3                   	ret    

c000fa19 <hwTextMode_disableBlink(VgaText*, bool)>:
c000fa19:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fa1d:	80 3d 00 dc 02 c0 00 	cmp    BYTE PTR ds:0xc002dc00,0x0
c000fa24:	75 38                	jne    c000fa5e <hwTextMode_disableBlink(VgaText*, bool)+0x45>
c000fa26:	ba da 03 00 00       	mov    edx,0x3da
c000fa2b:	84 c0                	test   al,al
c000fa2d:	75 18                	jne    c000fa47 <hwTextMode_disableBlink(VgaText*, bool)+0x2e>
c000fa2f:	ec                   	in     al,dx
c000fa30:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000fa35:	b0 30                	mov    al,0x30
c000fa37:	89 ca                	mov    edx,ecx
c000fa39:	ee                   	out    dx,al
c000fa3a:	ba c1 03 00 00       	mov    edx,0x3c1
c000fa3f:	ec                   	in     al,dx
c000fa40:	83 c8 08             	or     eax,0x8
c000fa43:	89 ca                	mov    edx,ecx
c000fa45:	ee                   	out    dx,al
c000fa46:	c3                   	ret    
c000fa47:	ec                   	in     al,dx
c000fa48:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000fa4d:	b0 30                	mov    al,0x30
c000fa4f:	89 ca                	mov    edx,ecx
c000fa51:	ee                   	out    dx,al
c000fa52:	ba c1 03 00 00       	mov    edx,0x3c1
c000fa57:	ec                   	in     al,dx
c000fa58:	83 e0 f7             	and    eax,0xfffffff7
c000fa5b:	89 ca                	mov    edx,ecx
c000fa5d:	ee                   	out    dx,al
c000fa5e:	c3                   	ret    

c000fa5f <hwTextMode_scrollScreen(VgaText*)>:
c000fa5f:	55                   	push   ebp
c000fa60:	57                   	push   edi
c000fa61:	56                   	push   esi
c000fa62:	53                   	push   ebx
c000fa63:	83 ec 1c             	sub    esp,0x1c
c000fa66:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000fa6a:	80 3d 00 dc 02 c0 00 	cmp    BYTE PTR ds:0xc002dc00,0x0
c000fa71:	74 14                	je     c000fa87 <hwTextMode_scrollScreen(VgaText*)+0x28>
c000fa73:	c7 81 d0 0f 00 00 02 00 00 00 	mov    DWORD PTR [ecx+0xfd0],0x2
c000fa7d:	c7 81 cc 0f 00 00 00 00 00 00 	mov    DWORD PTR [ecx+0xfcc],0x0
c000fa87:	a1 a0 ca 02 c0       	mov    eax,ds:0xc002caa0
c000fa8c:	bd 02 00 00 00       	mov    ebp,0x2
c000fa91:	05 a0 00 00 00       	add    eax,0xa0
c000fa96:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fa9a:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000fa9e:	31 c0                	xor    eax,eax
c000faa0:	eb 0b                	jmp    c000faad <hwTextMode_scrollScreen(VgaText*)+0x4e>
c000faa2:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000faa8:	74 57                	je     c000fb01 <hwTextMode_scrollScreen(VgaText*)+0xa2>
c000faaa:	43                   	inc    ebx
c000faab:	89 f0                	mov    eax,esi
c000faad:	8a 93 a0 00 00 00    	mov    dl,BYTE PTR [ebx+0xa0]
c000fab3:	8d bb a0 00 00 00    	lea    edi,[ebx+0xa0]
c000fab9:	88 13                	mov    BYTE PTR [ebx],dl
c000fabb:	8d 70 01             	lea    esi,[eax+0x1]
c000fabe:	83 fd 18             	cmp    ebp,0x18
c000fac1:	75 df                	jne    c000faa2 <hwTextMode_scrollScreen(VgaText*)+0x43>
c000fac3:	a8 01                	test   al,0x1
c000fac5:	75 13                	jne    c000fada <hwTextMode_scrollScreen(VgaText*)+0x7b>
c000fac7:	c6 07 20             	mov    BYTE PTR [edi],0x20
c000faca:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000fad0:	75 d8                	jne    c000faaa <hwTextMode_scrollScreen(VgaText*)+0x4b>
c000fad2:	83 c4 1c             	add    esp,0x1c
c000fad5:	5b                   	pop    ebx
c000fad6:	5e                   	pop    esi
c000fad7:	5f                   	pop    edi
c000fad8:	5d                   	pop    ebp
c000fad9:	c3                   	ret    
c000fada:	83 ec 08             	sub    esp,0x8
c000fadd:	0f b6 81 cc 0f 00 00 	movzx  eax,BYTE PTR [ecx+0xfcc]
c000fae4:	50                   	push   eax
c000fae5:	89 4c 24 3c          	mov    DWORD PTR [esp+0x3c],ecx
c000fae9:	0f b6 81 d0 0f 00 00 	movzx  eax,BYTE PTR [ecx+0xfd0]
c000faf0:	50                   	push   eax
c000faf1:	e8 32 0c 00 00       	call   c0010728 <VgaText::combineColours(unsigned char, unsigned char)>
c000faf6:	83 c4 10             	add    esp,0x10
c000faf9:	88 07                	mov    BYTE PTR [edi],al
c000fafb:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000faff:	eb c9                	jmp    c000faca <hwTextMode_scrollScreen(VgaText*)+0x6b>
c000fb01:	45                   	inc    ebp
c000fb02:	81 44 24 0c a0 00 00 00 	add    DWORD PTR [esp+0xc],0xa0
c000fb0a:	eb 8e                	jmp    c000fa9a <hwTextMode_scrollScreen(VgaText*)+0x3b>

c000fb0c <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)>:
c000fb0c:	57                   	push   edi
c000fb0d:	80 3d 00 dc 02 c0 00 	cmp    BYTE PTR ds:0xc002dc00,0x0
c000fb14:	56                   	push   esi
c000fb15:	53                   	push   ebx
c000fb16:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000fb1a:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000fb1e:	75 65                	jne    c000fb85 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x79>
c000fb20:	0f b6 54 24 1c       	movzx  edx,BYTE PTR [esp+0x1c]
c000fb25:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c000fb2a:	83 ec 08             	sub    esp,0x8
c000fb2d:	52                   	push   edx
c000fb2e:	50                   	push   eax
c000fb2f:	e8 f4 0b 00 00       	call   c0010728 <VgaText::combineColours(unsigned char, unsigned char)>
c000fb34:	5a                   	pop    edx
c000fb35:	0f b6 c0             	movzx  eax,al
c000fb38:	59                   	pop    ecx
c000fb39:	50                   	push   eax
c000fb3a:	0f be c3             	movsx  eax,bl
c000fb3d:	50                   	push   eax
c000fb3e:	e8 8b 0c 00 00       	call   c00107ce <VgaText::combineCharAndColour(char, unsigned char)>
c000fb43:	83 c4 10             	add    esp,0x10
c000fb46:	8b 35 a0 ca 02 c0    	mov    esi,DWORD PTR ds:0xc002caa0
c000fb4c:	80 3d 00 dc 02 c0 00 	cmp    BYTE PTR ds:0xc002dc00,0x0
c000fb53:	74 07                	je     c000fb5c <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x50>
c000fb55:	66 0f be c3          	movsx  ax,bl
c000fb59:	80 cc 02             	or     ah,0x2
c000fb5c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000fb60:	ba 19 00 00 00       	mov    edx,0x19
c000fb65:	2b 91 ac 0f 00 00    	sub    edx,DWORD PTR [ecx+0xfac]
c000fb6b:	8d 0c bf             	lea    ecx,[edi+edi*4]
c000fb6e:	8d 14 92             	lea    edx,[edx+edx*4]
c000fb71:	c1 e1 04             	shl    ecx,0x4
c000fb74:	c1 e2 04             	shl    edx,0x4
c000fb77:	03 4c 24 20          	add    ecx,DWORD PTR [esp+0x20]
c000fb7b:	01 ca                	add    edx,ecx
c000fb7d:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c000fb81:	5b                   	pop    ebx
c000fb82:	5e                   	pop    esi
c000fb83:	5f                   	pop    edi
c000fb84:	c3                   	ret    
c000fb85:	b8 02 00 00 00       	mov    eax,0x2
c000fb8a:	31 d2                	xor    edx,edx
c000fb8c:	eb 9c                	jmp    c000fb2a <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x1e>

c000fb8e <setupTextMode()>:
c000fb8e:	a1 10 04 00 00       	mov    eax,ds:0x410
c000fb93:	83 e0 30             	and    eax,0x30
c000fb96:	66 83 f8 30          	cmp    ax,0x30
c000fb9a:	75 11                	jne    c000fbad <setupTextMode()+0x1f>
c000fb9c:	81 2d a0 ca 02 c0 00 80 00 00 	sub    DWORD PTR ds:0xc002caa0,0x8000
c000fba6:	c6 05 00 dc 02 c0 01 	mov    BYTE PTR ds:0xc002dc00,0x1
c000fbad:	c7 05 38 dc 02 c0 19 fa 00 c0 	mov    DWORD PTR ds:0xc002dc38,0xc000fa19
c000fbb7:	c7 05 24 dc 02 c0 a0 f8 00 c0 	mov    DWORD PTR ds:0xc002dc24,0xc000f8a0
c000fbc1:	c7 05 20 dc 02 c0 eb f8 00 c0 	mov    DWORD PTR ds:0xc002dc20,0xc000f8eb
c000fbcb:	c7 05 2c dc 02 c0 5f fa 00 c0 	mov    DWORD PTR ds:0xc002dc2c,0xc000fa5f
c000fbd5:	c7 05 34 dc 02 c0 69 f9 00 c0 	mov    DWORD PTR ds:0xc002dc34,0xc000f969
c000fbdf:	c7 05 28 dc 02 c0 c7 f9 00 c0 	mov    DWORD PTR ds:0xc002dc28,0xc000f9c7
c000fbe9:	c7 05 30 dc 02 c0 c8 f9 00 c0 	mov    DWORD PTR ds:0xc002dc30,0xc000f9c8
c000fbf3:	c7 05 3c dc 02 c0 0c fb 00 c0 	mov    DWORD PTR ds:0xc002dc3c,0xc000fb0c
c000fbfd:	c3                   	ret    

c000fbfe <kernel_main>:
c000fbfe:	57                   	push   edi
c000fbff:	bf f9 03 00 00       	mov    edi,0x3f9
c000fc04:	56                   	push   esi
c000fc05:	31 f6                	xor    esi,esi
c000fc07:	53                   	push   ebx
c000fc08:	83 ec 10             	sub    esp,0x10
c000fc0b:	e8 72 09 00 00       	call   c0010582 <installVgaTextImplementation()>
c000fc10:	e8 79 ff ff ff       	call   c000fb8e <setupTextMode()>
c000fc15:	89 f0                	mov    eax,esi
c000fc17:	89 fa                	mov    edx,edi
c000fc19:	ee                   	out    dx,al
c000fc1a:	bb fb 03 00 00       	mov    ebx,0x3fb
c000fc1f:	b0 80                	mov    al,0x80
c000fc21:	89 da                	mov    edx,ebx
c000fc23:	ee                   	out    dx,al
c000fc24:	b1 03                	mov    cl,0x3
c000fc26:	ba f8 03 00 00       	mov    edx,0x3f8
c000fc2b:	88 c8                	mov    al,cl
c000fc2d:	ee                   	out    dx,al
c000fc2e:	89 f0                	mov    eax,esi
c000fc30:	89 fa                	mov    edx,edi
c000fc32:	ee                   	out    dx,al
c000fc33:	88 c8                	mov    al,cl
c000fc35:	89 da                	mov    edx,ebx
c000fc37:	ee                   	out    dx,al
c000fc38:	b0 c7                	mov    al,0xc7
c000fc3a:	ba fa 03 00 00       	mov    edx,0x3fa
c000fc3f:	ee                   	out    dx,al
c000fc40:	b0 0b                	mov    al,0xb
c000fc42:	ba fc 03 00 00       	mov    edx,0x3fc
c000fc47:	ee                   	out    dx,al
c000fc48:	83 ec 0c             	sub    esp,0xc
c000fc4b:	68 04 9b 02 c0       	push   0xc0029b04
c000fc50:	e8 c0 2e 00 00       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c000fc55:	a1 24 05 00 00       	mov    eax,ds:0x524
c000fc5a:	05 ff 0f 00 00       	add    eax,0xfff
c000fc5f:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fc64:	89 04 24             	mov    DWORD PTR [esp],eax
c000fc67:	e8 d1 03 00 00       	call   c001003d <Phys::physicalMemorySetup(unsigned int)>
c000fc6c:	e8 c5 1f 00 00       	call   c0011c36 <Virt::virtualMemorySetup()>
c000fc71:	8b 1d 00 05 00 00    	mov    ebx,DWORD PTR ds:0x500
c000fc77:	83 c4 10             	add    esp,0x10
c000fc7a:	3b 1d 04 05 00 00    	cmp    ebx,DWORD PTR ds:0x504
c000fc80:	75 0e                	jne    c000fc90 <kernel_main+0x92>
c000fc82:	89 d8                	mov    eax,ebx
c000fc84:	25 48 03 00 00       	and    eax,0x348
c000fc89:	3d 00 03 00 00       	cmp    eax,0x300
c000fc8e:	74 10                	je     c000fca0 <kernel_main+0xa2>
c000fc90:	83 ec 0c             	sub    esp,0xc
c000fc93:	68 11 b3 02 c0       	push   0xc002b311
c000fc98:	e8 92 a3 00 00       	call   c001a02f <Krnl::panic(char const*)>
c000fc9d:	83 c4 10             	add    esp,0x10
c000fca0:	83 ec 0c             	sub    esp,0xc
c000fca3:	89 1d 80 db 02 c0    	mov    DWORD PTR ds:0xc002db80,ebx
c000fca9:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000fcad:	53                   	push   ebx
c000fcae:	e8 37 21 00 00       	call   c0011dea <VAS::VAS()>
c000fcb3:	89 1d e4 dc 02 c0    	mov    DWORD PTR ds:0xc002dce4,ebx
c000fcb9:	e8 62 03 ff ff       	call   c0000020 <callGlobalConstructors>
c000fcbe:	c7 04 24 1b 9b 02 c0 	mov    DWORD PTR [esp],0xc0029b1b
c000fcc5:	e8 4b 2e 00 00       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c000fcca:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000fcd1:	e8 70 fb ff ff       	call   c000f846 <malloc>
c000fcd6:	89 04 24             	mov    DWORD PTR [esp],eax
c000fcd9:	89 c6                	mov    esi,eax
c000fcdb:	e8 60 ea ff ff       	call   c000e740 <Computer::Computer()>
c000fce0:	58                   	pop    eax
c000fce1:	89 35 68 db 02 c0    	mov    DWORD PTR ds:0xc002db68,esi
c000fce7:	5a                   	pop    edx
c000fce8:	56                   	push   esi
c000fce9:	68 38 9b 02 c0       	push   0xc0029b38
c000fcee:	e8 22 2e 00 00       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c000fcf3:	a1 68 db 02 c0       	mov    eax,ds:0xc002db68
c000fcf8:	8b 10                	mov    edx,DWORD PTR [eax]
c000fcfa:	6a 00                	push   0x0
c000fcfc:	6a 00                	push   0x0
c000fcfe:	6a 00                	push   0x0
c000fd00:	50                   	push   eax
c000fd01:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000fd04:	83 c4 14             	add    esp,0x14
c000fd07:	53                   	push   ebx
c000fd08:	e8 77 23 00 00       	call   c0012084 <VAS::~VAS()>
c000fd0d:	c7 04 24 4b 9b 02 c0 	mov    DWORD PTR [esp],0xc0029b4b
c000fd14:	e8 16 a3 00 00       	call   c001a02f <Krnl::panic(char const*)>
c000fd19:	83 c4 20             	add    esp,0x20
c000fd1c:	5b                   	pop    ebx
c000fd1d:	5e                   	pop    esi
c000fd1e:	5f                   	pop    edi
c000fd1f:	c3                   	ret    

c000fd20 <Phys::allocateDMA(unsigned long)>:
c000fd20:	55                   	push   ebp
c000fd21:	31 d2                	xor    edx,edx
c000fd23:	57                   	push   edi
c000fd24:	31 ed                	xor    ebp,ebp
c000fd26:	56                   	push   esi
c000fd27:	31 c9                	xor    ecx,ecx
c000fd29:	53                   	push   ebx
c000fd2a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fd2e:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000fd34:	31 c0                	xor    eax,eax
c000fd36:	c1 ee 0c             	shr    esi,0xc
c000fd39:	eb 17                	jmp    c000fd52 <Phys::allocateDMA(unsigned long)+0x32>
c000fd3b:	85 c9                	test   ecx,ecx
c000fd3d:	75 04                	jne    c000fd43 <Phys::allocateDMA(unsigned long)+0x23>
c000fd3f:	89 d5                	mov    ebp,edx
c000fd41:	89 d0                	mov    eax,edx
c000fd43:	8d 59 01             	lea    ebx,[ecx+0x1]
c000fd46:	39 de                	cmp    esi,ebx
c000fd48:	74 20                	je     c000fd6a <Phys::allocateDMA(unsigned long)+0x4a>
c000fd4a:	42                   	inc    edx
c000fd4b:	89 d9                	mov    ecx,ebx
c000fd4d:	83 fa 2f             	cmp    edx,0x2f
c000fd50:	7f 11                	jg     c000fd63 <Phys::allocateDMA(unsigned long)+0x43>
c000fd52:	80 ba c0 db 02 c0 00 	cmp    BYTE PTR [edx-0x3ffd2440],0x0
c000fd59:	74 e0                	je     c000fd3b <Phys::allocateDMA(unsigned long)+0x1b>
c000fd5b:	31 c9                	xor    ecx,ecx
c000fd5d:	42                   	inc    edx
c000fd5e:	83 fa 2f             	cmp    edx,0x2f
c000fd61:	7e ef                	jle    c000fd52 <Phys::allocateDMA(unsigned long)+0x32>
c000fd63:	5b                   	pop    ebx
c000fd64:	31 c0                	xor    eax,eax
c000fd66:	5e                   	pop    esi
c000fd67:	5f                   	pop    edi
c000fd68:	5d                   	pop    ebp
c000fd69:	c3                   	ret    
c000fd6a:	8d 14 30             	lea    edx,[eax+esi*1]
c000fd6d:	89 d7                	mov    edi,edx
c000fd6f:	4f                   	dec    edi
c000fd70:	79 03                	jns    c000fd75 <Phys::allocateDMA(unsigned long)+0x55>
c000fd72:	8d 7a 0e             	lea    edi,[edx+0xe]
c000fd75:	c1 ff 04             	sar    edi,0x4
c000fd78:	89 c2                	mov    edx,eax
c000fd7a:	c1 fa 04             	sar    edx,0x4
c000fd7d:	39 fa                	cmp    edx,edi
c000fd7f:	75 2f                	jne    c000fdb0 <Phys::allocateDMA(unsigned long)+0x90>
c000fd81:	85 db                	test   ebx,ebx
c000fd83:	74 1a                	je     c000fd9f <Phys::allocateDMA(unsigned long)+0x7f>
c000fd85:	be c0 db 02 c0       	mov    esi,0xc002dbc0
c000fd8a:	8d 90 c0 db 02 c0    	lea    edx,[eax-0x3ffd2440]
c000fd90:	f7 d6                	not    esi
c000fd92:	29 c6                	sub    esi,eax
c000fd94:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000fd97:	42                   	inc    edx
c000fd98:	8d 1c 16             	lea    ebx,[esi+edx*1]
c000fd9b:	39 d9                	cmp    ecx,ebx
c000fd9d:	7f f5                	jg     c000fd94 <Phys::allocateDMA(unsigned long)+0x74>
c000fd9f:	85 ff                	test   edi,edi
c000fda1:	74 13                	je     c000fdb6 <Phys::allocateDMA(unsigned long)+0x96>
c000fda3:	5b                   	pop    ebx
c000fda4:	05 50 20 0c 00       	add    eax,0xc2050
c000fda9:	5e                   	pop    esi
c000fdaa:	c1 e0 0c             	shl    eax,0xc
c000fdad:	5f                   	pop    edi
c000fdae:	5d                   	pop    ebp
c000fdaf:	c3                   	ret    
c000fdb0:	89 ea                	mov    edx,ebp
c000fdb2:	31 c9                	xor    ecx,ecx
c000fdb4:	eb a7                	jmp    c000fd5d <Phys::allocateDMA(unsigned long)+0x3d>
c000fdb6:	5b                   	pop    ebx
c000fdb7:	c1 e0 0c             	shl    eax,0xc
c000fdba:	5e                   	pop    esi
c000fdbb:	2d 00 00 ff 3d       	sub    eax,0x3dff0000
c000fdc0:	5f                   	pop    edi
c000fdc1:	5d                   	pop    ebp
c000fdc2:	c3                   	ret    

c000fdc3 <Phys::freeDMA(unsigned long, unsigned long)>:
c000fdc3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fdc7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000fdcb:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000fdd1:	c1 e9 0c             	shr    ecx,0xc
c000fdd4:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000fdd9:	76 25                	jbe    c000fe00 <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000fddb:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000fde0:	c1 e8 0c             	shr    eax,0xc
c000fde3:	8d 50 10             	lea    edx,[eax+0x10]
c000fde6:	85 c9                	test   ecx,ecx
c000fde8:	74 15                	je     c000fdff <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000fdea:	8d 82 c0 db 02 c0    	lea    eax,[edx-0x3ffd2440]
c000fdf0:	8d 94 11 c0 db 02 c0 	lea    edx,[ecx+edx*1-0x3ffd2440]
c000fdf7:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000fdfa:	40                   	inc    eax
c000fdfb:	39 d0                	cmp    eax,edx
c000fdfd:	75 f8                	jne    c000fdf7 <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000fdff:	c3                   	ret    
c000fe00:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000fe06:	c1 ea 0c             	shr    edx,0xc
c000fe09:	eb db                	jmp    c000fde6 <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000fe0b <Phys::setPageState(unsigned long, bool)>:
c000fe0b:	56                   	push   esi
c000fe0c:	ba 01 00 00 00       	mov    edx,0x1
c000fe11:	53                   	push   ebx
c000fe12:	8b 35 8c ca 02 c0    	mov    esi,DWORD PTR ds:0xc002ca8c
c000fe18:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fe1c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fe20:	89 c8                	mov    eax,ecx
c000fe22:	83 e1 07             	and    ecx,0x7
c000fe25:	c1 e8 03             	shr    eax,0x3
c000fe28:	d3 e3                	shl    ebx,cl
c000fe2a:	01 c6                	add    esi,eax
c000fe2c:	d3 e2                	shl    edx,cl
c000fe2e:	f7 d2                	not    edx
c000fe30:	20 16                	and    BYTE PTR [esi],dl
c000fe32:	03 05 8c ca 02 c0    	add    eax,DWORD PTR ds:0xc002ca8c
c000fe38:	08 18                	or     BYTE PTR [eax],bl
c000fe3a:	5b                   	pop    ebx
c000fe3b:	5e                   	pop    esi
c000fe3c:	c3                   	ret    

c000fe3d <Phys::getPageState(unsigned long)>:
c000fe3d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000fe41:	8b 15 8c ca 02 c0    	mov    edx,DWORD PTR ds:0xc002ca8c
c000fe47:	89 c8                	mov    eax,ecx
c000fe49:	83 e1 07             	and    ecx,0x7
c000fe4c:	c1 e8 03             	shr    eax,0x3
c000fe4f:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000fe53:	d3 f8                	sar    eax,cl
c000fe55:	83 e0 01             	and    eax,0x1
c000fe58:	c3                   	ret    

c000fe59 <Phys::freePage(unsigned long)>:
c000fe59:	53                   	push   ebx
c000fe5a:	83 ec 08             	sub    esp,0x8
c000fe5d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fe61:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000fe67:	76 57                	jbe    c000fec0 <Phys::freePage(unsigned long)+0x67>
c000fe69:	c1 eb 0c             	shr    ebx,0xc
c000fe6c:	53                   	push   ebx
c000fe6d:	e8 cb ff ff ff       	call   c000fe3d <Phys::getPageState(unsigned long)>
c000fe72:	5a                   	pop    edx
c000fe73:	84 c0                	test   al,al
c000fe75:	74 5b                	je     c000fed2 <Phys::freePage(unsigned long)+0x79>
c000fe77:	a1 ac db 02 c0       	mov    eax,ds:0xc002dbac
c000fe7c:	48                   	dec    eax
c000fe7d:	a3 ac db 02 c0       	mov    ds:0xc002dbac,eax
c000fe82:	8d 04 80             	lea    eax,[eax+eax*4]
c000fe85:	8d 04 80             	lea    eax,[eax+eax*4]
c000fe88:	c1 e0 02             	shl    eax,0x2
c000fe8b:	99                   	cdq    
c000fe8c:	f7 3d b0 db 02 c0    	idiv   DWORD PTR ds:0xc002dbb0
c000fe92:	39 05 a8 db 02 c0    	cmp    DWORD PTR ds:0xc002dba8,eax
c000fe98:	75 13                	jne    c000fead <Phys::freePage(unsigned long)+0x54>
c000fe9a:	83 ec 08             	sub    esp,0x8
c000fe9d:	6a 00                	push   0x0
c000fe9f:	53                   	push   ebx
c000fea0:	e8 66 ff ff ff       	call   c000fe0b <Phys::setPageState(unsigned long, bool)>
c000fea5:	83 c4 10             	add    esp,0x10
c000fea8:	83 c4 08             	add    esp,0x8
c000feab:	5b                   	pop    ebx
c000feac:	c3                   	ret    
c000fead:	83 ec 0c             	sub    esp,0xc
c000feb0:	a3 a8 db 02 c0       	mov    ds:0xc002dba8,eax
c000feb5:	50                   	push   eax
c000feb6:	e8 5b 0a 00 00       	call   c0010916 <VgaText::updateRAMUsageDisplay(int)>
c000febb:	83 c4 10             	add    esp,0x10
c000febe:	eb da                	jmp    c000fe9a <Phys::freePage(unsigned long)+0x41>
c000fec0:	68 00 10 00 00       	push   0x1000
c000fec5:	53                   	push   ebx
c000fec6:	e8 f8 fe ff ff       	call   c000fdc3 <Phys::freeDMA(unsigned long, unsigned long)>
c000fecb:	59                   	pop    ecx
c000fecc:	5b                   	pop    ebx
c000fecd:	83 c4 08             	add    esp,0x8
c000fed0:	5b                   	pop    ebx
c000fed1:	c3                   	ret    
c000fed2:	c7 44 24 10 66 9b 02 c0 	mov    DWORD PTR [esp+0x10],0xc0029b66
c000feda:	83 c4 08             	add    esp,0x8
c000fedd:	5b                   	pop    ebx
c000fede:	e9 4c a1 00 00       	jmp    c001a02f <Krnl::panic(char const*)>

c000fee3 <Phys::allocatePage()>:
c000fee3:	56                   	push   esi
c000fee4:	53                   	push   ebx
c000fee5:	51                   	push   ecx
c000fee6:	8b 35 a0 db 02 c0    	mov    esi,DWORD PTR ds:0xc002dba0
c000feec:	89 f3                	mov    ebx,esi
c000feee:	eb 0a                	jmp    c000fefa <Phys::allocatePage()+0x17>
c000fef0:	89 1d a0 db 02 c0    	mov    DWORD PTR ds:0xc002dba0,ebx
c000fef6:	39 de                	cmp    esi,ebx
c000fef8:	74 24                	je     c000ff1e <Phys::allocatePage()+0x3b>
c000fefa:	53                   	push   ebx
c000fefb:	e8 3d ff ff ff       	call   c000fe3d <Phys::getPageState(unsigned long)>
c000ff00:	5a                   	pop    edx
c000ff01:	84 c0                	test   al,al
c000ff03:	74 5a                	je     c000ff5f <Phys::allocatePage()+0x7c>
c000ff05:	43                   	inc    ebx
c000ff06:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000ff0c:	75 e2                	jne    c000fef0 <Phys::allocatePage()+0xd>
c000ff0e:	31 db                	xor    ebx,ebx
c000ff10:	c7 05 a0 db 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002dba0,0x0
c000ff1a:	39 de                	cmp    esi,ebx
c000ff1c:	75 dc                	jne    c000fefa <Phys::allocatePage()+0x17>
c000ff1e:	83 ec 0c             	sub    esp,0xc
c000ff21:	68 7c 9b 02 c0       	push   0xc0029b7c
c000ff26:	e8 ea 2b 00 00       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c000ff2b:	c7 04 24 00 10 00 00 	mov    DWORD PTR [esp],0x1000
c000ff32:	e8 e9 fd ff ff       	call   c000fd20 <Phys::allocateDMA(unsigned long)>
c000ff37:	83 c4 10             	add    esp,0x10
c000ff3a:	85 c0                	test   eax,eax
c000ff3c:	75 56                	jne    c000ff94 <Phys::allocatePage()+0xb1>
c000ff3e:	83 ec 0c             	sub    esp,0xc
c000ff41:	68 8d 9b 02 c0       	push   0xc0029b8d
c000ff46:	e8 e4 a0 00 00       	call   c001a02f <Krnl::panic(char const*)>
c000ff4b:	83 c4 10             	add    esp,0x10
c000ff4e:	8b 1d a0 db 02 c0    	mov    ebx,DWORD PTR ds:0xc002dba0
c000ff54:	53                   	push   ebx
c000ff55:	e8 e3 fe ff ff       	call   c000fe3d <Phys::getPageState(unsigned long)>
c000ff5a:	5a                   	pop    edx
c000ff5b:	84 c0                	test   al,al
c000ff5d:	75 a6                	jne    c000ff05 <Phys::allocatePage()+0x22>
c000ff5f:	6a 01                	push   0x1
c000ff61:	53                   	push   ebx
c000ff62:	e8 a4 fe ff ff       	call   c000fe0b <Phys::setPageState(unsigned long, bool)>
c000ff67:	a1 ac db 02 c0       	mov    eax,ds:0xc002dbac
c000ff6c:	59                   	pop    ecx
c000ff6d:	40                   	inc    eax
c000ff6e:	5b                   	pop    ebx
c000ff6f:	a3 ac db 02 c0       	mov    ds:0xc002dbac,eax
c000ff74:	8d 04 80             	lea    eax,[eax+eax*4]
c000ff77:	8d 04 80             	lea    eax,[eax+eax*4]
c000ff7a:	c1 e0 02             	shl    eax,0x2
c000ff7d:	99                   	cdq    
c000ff7e:	f7 3d b0 db 02 c0    	idiv   DWORD PTR ds:0xc002dbb0
c000ff84:	39 05 a8 db 02 c0    	cmp    DWORD PTR ds:0xc002dba8,eax
c000ff8a:	75 0c                	jne    c000ff98 <Phys::allocatePage()+0xb5>
c000ff8c:	a1 a0 db 02 c0       	mov    eax,ds:0xc002dba0
c000ff91:	c1 e0 0c             	shl    eax,0xc
c000ff94:	5a                   	pop    edx
c000ff95:	5b                   	pop    ebx
c000ff96:	5e                   	pop    esi
c000ff97:	c3                   	ret    
c000ff98:	83 ec 0c             	sub    esp,0xc
c000ff9b:	a3 a8 db 02 c0       	mov    ds:0xc002dba8,eax
c000ffa0:	50                   	push   eax
c000ffa1:	e8 70 09 00 00       	call   c0010916 <VgaText::updateRAMUsageDisplay(int)>
c000ffa6:	83 c4 10             	add    esp,0x10
c000ffa9:	eb e1                	jmp    c000ff8c <Phys::allocatePage()+0xa9>

c000ffab <Phys::allocateContiguousPages(int)>:
c000ffab:	57                   	push   edi
c000ffac:	56                   	push   esi
c000ffad:	53                   	push   ebx
c000ffae:	31 db                	xor    ebx,ebx
c000ffb0:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000ffb4:	e8 05 d7 00 00       	call   c001d6be <lockScheduler()>
c000ffb9:	85 db                	test   ebx,ebx
c000ffbb:	75 11                	jne    c000ffce <Phys::allocateContiguousPages(int)+0x23>
c000ffbd:	e8 21 ff ff ff       	call   c000fee3 <Phys::allocatePage()>
c000ffc2:	83 ff 01             	cmp    edi,0x1
c000ffc5:	89 c6                	mov    esi,eax
c000ffc7:	74 21                	je     c000ffea <Phys::allocateContiguousPages(int)+0x3f>
c000ffc9:	bb 01 00 00 00       	mov    ebx,0x1
c000ffce:	e8 10 ff ff ff       	call   c000fee3 <Phys::allocatePage()>
c000ffd3:	89 da                	mov    edx,ebx
c000ffd5:	c1 e2 0c             	shl    edx,0xc
c000ffd8:	01 f2                	add    edx,esi
c000ffda:	39 c2                	cmp    edx,eax
c000ffdc:	74 17                	je     c000fff5 <Phys::allocateContiguousPages(int)+0x4a>
c000ffde:	bb 01 00 00 00       	mov    ebx,0x1
c000ffe3:	89 c6                	mov    esi,eax
c000ffe5:	83 ff 01             	cmp    edi,0x1
c000ffe8:	75 e4                	jne    c000ffce <Phys::allocateContiguousPages(int)+0x23>
c000ffea:	e8 d1 d6 00 00       	call   c001d6c0 <unlockScheduler()>
c000ffef:	89 f0                	mov    eax,esi
c000fff1:	5b                   	pop    ebx
c000fff2:	5e                   	pop    esi
c000fff3:	5f                   	pop    edi
c000fff4:	c3                   	ret    
c000fff5:	43                   	inc    ebx
c000fff6:	39 fb                	cmp    ebx,edi
c000fff8:	75 bf                	jne    c000ffb9 <Phys::allocateContiguousPages(int)+0xe>
c000fffa:	e8 c1 d6 00 00       	call   c001d6c0 <unlockScheduler()>
c000ffff:	89 f0                	mov    eax,esi
c0010001:	5b                   	pop    ebx
c0010002:	5e                   	pop    esi
c0010003:	5f                   	pop    edi
c0010004:	c3                   	ret    

c0010005 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0010005:	56                   	push   esi
c0010006:	53                   	push   ebx
c0010007:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001000b:	39 1d a4 db 02 c0    	cmp    DWORD PTR ds:0xc002dba4,ebx
c0010011:	73 06                	jae    c0010019 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0010013:	89 1d a4 db 02 c0    	mov    DWORD PTR ds:0xc002dba4,ebx
c0010019:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001001d:	c1 eb 0c             	shr    ebx,0xc
c0010020:	c1 e8 0c             	shr    eax,0xc
c0010023:	39 d8                	cmp    eax,ebx
c0010025:	73 13                	jae    c001003a <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0010027:	6a 00                	push   0x0
c0010029:	8d 70 01             	lea    esi,[eax+0x1]
c001002c:	50                   	push   eax
c001002d:	e8 d9 fd ff ff       	call   c000fe0b <Phys::setPageState(unsigned long, bool)>
c0010032:	5a                   	pop    edx
c0010033:	89 f0                	mov    eax,esi
c0010035:	59                   	pop    ecx
c0010036:	39 f3                	cmp    ebx,esi
c0010038:	75 ed                	jne    c0010027 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c001003a:	5b                   	pop    ebx
c001003b:	5e                   	pop    esi
c001003c:	c3                   	ret    

c001003d <Phys::physicalMemorySetup(unsigned int)>:
c001003d:	55                   	push   ebp
c001003e:	57                   	push   edi
c001003f:	56                   	push   esi
c0010040:	53                   	push   ebx
c0010041:	31 db                	xor    ebx,ebx
c0010043:	83 ec 40             	sub    esp,0x40
c0010046:	6a 30                	push   0x30
c0010048:	6a 00                	push   0x0
c001004a:	68 c0 db 02 c0       	push   0xc002dbc0
c001004f:	e8 24 07 ff ff       	call   c0000778 <memset>
c0010054:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0010058:	25 00 f0 ff ff       	and    eax,0xfffff000
c001005d:	05 00 10 00 00       	add    eax,0x1000
c0010062:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0010066:	83 c4 10             	add    esp,0x10
c0010069:	83 ec 08             	sub    esp,0x8
c001006c:	6a 01                	push   0x1
c001006e:	53                   	push   ebx
c001006f:	43                   	inc    ebx
c0010070:	e8 96 fd ff ff       	call   c000fe0b <Phys::setPageState(unsigned long, bool)>
c0010075:	83 c4 10             	add    esp,0x10
c0010078:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c001007e:	75 e9                	jne    c0010069 <Phys::physicalMemorySetup(unsigned int)+0x2c>
c0010080:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c0010087:	66 85 c0             	test   ax,ax
c001008a:	0f 84 8e 01 00 00    	je     c001021e <Phys::physicalMemorySetup(unsigned int)+0x1e1>
c0010090:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0010094:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001009c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00100a0:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c00100a5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00100a9:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00100b1:	eb 15                	jmp    c00100c8 <Phys::physicalMemorySetup(unsigned int)+0x8b>
c00100b3:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00100b7:	83 c3 18             	add    ebx,0x18
c00100ba:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00100be:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c00100c2:	0f 84 66 01 00 00    	je     c001022e <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c00100c8:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00100cb:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00100ce:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00100d1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00100d5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00100d9:	8b 33                	mov    esi,DWORD PTR [ebx]
c00100db:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c00100de:	01 f0                	add    eax,esi
c00100e0:	55                   	push   ebp
c00100e1:	11 fa                	adc    edx,edi
c00100e3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00100e7:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00100eb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00100ef:	56                   	push   esi
c00100f0:	68 c8 9b 02 c0       	push   0xc0029bc8
c00100f5:	e8 1b 2a 00 00       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c00100fa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00100fe:	83 c4 10             	add    esp,0x10
c0010101:	09 f8                	or     eax,edi
c0010103:	0f 85 25 01 00 00    	jne    c001022e <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c0010109:	4d                   	dec    ebp
c001010a:	75 a7                	jne    c00100b3 <Phys::physicalMemorySetup(unsigned int)+0x76>
c001010c:	ba 00 00 08 00       	mov    edx,0x80000
c0010111:	89 c1                	mov    ecx,eax
c0010113:	39 f2                	cmp    edx,esi
c0010115:	19 f9                	sbb    ecx,edi
c0010117:	0f 82 a7 00 00 00    	jb     c00101c4 <Phys::physicalMemorySetup(unsigned int)+0x187>
c001011d:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0010121:	89 c1                	mov    ecx,eax
c0010123:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c0010127:	0f 83 97 00 00 00    	jae    c00101c4 <Phys::physicalMemorySetup(unsigned int)+0x187>
c001012d:	ba 00 00 0a 00       	mov    edx,0xa0000
c0010132:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0010136:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c001013a:	39 fa                	cmp    edx,edi
c001013c:	19 e8                	sbb    eax,ebp
c001013e:	0f 82 14 01 00 00    	jb     c0010258 <Phys::physicalMemorySetup(unsigned int)+0x21b>
c0010144:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0010148:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c001014c:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c0010152:	ba ff 1f 00 00       	mov    edx,0x1fff
c0010157:	83 d5 ff             	adc    ebp,0xffffffff
c001015a:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c001015e:	31 c0                	xor    eax,eax
c0010160:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c0010164:	39 fa                	cmp    edx,edi
c0010166:	89 c1                	mov    ecx,eax
c0010168:	19 e9                	sbb    ecx,ebp
c001016a:	0f 83 43 ff ff ff    	jae    c00100b3 <Phys::physicalMemorySetup(unsigned int)+0x76>
c0010170:	be 00 00 08 00       	mov    esi,0x80000
c0010175:	50                   	push   eax
c0010176:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001017a:	57                   	push   edi
c001017b:	56                   	push   esi
c001017c:	68 ec 9b 02 c0       	push   0xc0029bec
c0010181:	e8 8f 29 00 00       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c0010186:	5a                   	pop    edx
c0010187:	59                   	pop    ecx
c0010188:	57                   	push   edi
c0010189:	56                   	push   esi
c001018a:	e8 76 fe ff ff       	call   c0010005 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c001018f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0010193:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010197:	83 c4 0c             	add    esp,0xc
c001019a:	0f ac d0 0c          	shrd   eax,edx,0xc
c001019e:	03 05 b0 db 02 c0    	add    eax,DWORD PTR ds:0xc002dbb0
c00101a4:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00101ab:	a3 b0 db 02 c0       	mov    ds:0xc002dbb0,eax
c00101b0:	52                   	push   edx
c00101b1:	50                   	push   eax
c00101b2:	68 a9 9b 02 c0       	push   0xc0029ba9
c00101b7:	e8 59 29 00 00       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c00101bc:	83 c4 10             	add    esp,0x10
c00101bf:	e9 ef fe ff ff       	jmp    c00100b3 <Phys::physicalMemorySetup(unsigned int)+0x76>
c00101c4:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c00101c8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00101cc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00101d0:	39 ea                	cmp    edx,ebp
c00101d2:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c00101d6:	0f 82 d7 fe ff ff    	jb     c00100b3 <Phys::physicalMemorySetup(unsigned int)+0x76>
c00101dc:	ba ff 1f 00 00       	mov    edx,0x1fff
c00101e1:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00101e5:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c00101e9:	0f 83 c4 fe ff ff    	jae    c00100b3 <Phys::physicalMemorySetup(unsigned int)+0x76>
c00101ef:	39 ee                	cmp    esi,ebp
c00101f1:	89 f8                	mov    eax,edi
c00101f3:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c00101f7:	0f 83 78 ff ff ff    	jae    c0010175 <Phys::physicalMemorySetup(unsigned int)+0x138>
c00101fd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010201:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010205:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0010209:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001020d:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c0010211:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010215:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0010219:	e9 57 ff ff ff       	jmp    c0010175 <Phys::physicalMemorySetup(unsigned int)+0x138>
c001021e:	83 ec 0c             	sub    esp,0xc
c0010221:	68 9b 9b 02 c0       	push   0xc0029b9b
c0010226:	e8 04 9e 00 00       	call   c001a02f <Krnl::panic(char const*)>
c001022b:	83 c4 10             	add    esp,0x10
c001022e:	bb 40 01 00 00       	mov    ebx,0x140
c0010233:	83 ec 08             	sub    esp,0x8
c0010236:	6a 00                	push   0x0
c0010238:	53                   	push   ebx
c0010239:	43                   	inc    ebx
c001023a:	e8 cc fb ff ff       	call   c000fe0b <Phys::setPageState(unsigned long, bool)>
c001023f:	ff 05 b0 db 02 c0    	inc    DWORD PTR ds:0xc002dbb0
c0010245:	83 c4 10             	add    esp,0x10
c0010248:	81 fb 80 01 00 00    	cmp    ebx,0x180
c001024e:	75 e3                	jne    c0010233 <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c0010250:	83 c4 3c             	add    esp,0x3c
c0010253:	5b                   	pop    ebx
c0010254:	5e                   	pop    esi
c0010255:	5f                   	pop    edi
c0010256:	5d                   	pop    ebp
c0010257:	c3                   	ret    
c0010258:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c0010260:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010268:	e9 d7 fe ff ff       	jmp    c0010144 <Phys::physicalMemorySetup(unsigned int)+0x107>
c001026d:	90                   	nop

c001026e <Pipe::isAtty()>:
c001026e:	31 c0                	xor    eax,eax
c0010270:	c3                   	ret    
c0010271:	90                   	nop

c0010272 <Pipe::~Pipe()>:
c0010272:	83 ec 0c             	sub    esp,0xc
c0010275:	ba 58 9c 02 c0       	mov    edx,0xc0029c58
c001027a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001027e:	89 10                	mov    DWORD PTR [eax],edx
c0010280:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010284:	83 ec 0c             	sub    esp,0xc
c0010287:	50                   	push   eax
c0010288:	e8 37 16 00 00       	call   c00118c4 <UnixFile::~UnixFile()>
c001028d:	83 c4 10             	add    esp,0x10
c0010290:	90                   	nop
c0010291:	83 c4 0c             	add    esp,0xc
c0010294:	c3                   	ret    
c0010295:	90                   	nop

c0010296 <Pipe::~Pipe()>:
c0010296:	83 ec 0c             	sub    esp,0xc
c0010299:	83 ec 0c             	sub    esp,0xc
c001029c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00102a0:	e8 cd ff ff ff       	call   c0010272 <Pipe::~Pipe()>
c00102a5:	83 c4 10             	add    esp,0x10
c00102a8:	83 ec 08             	sub    esp,0x8
c00102ab:	6a 20                	push   0x20
c00102ad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00102b1:	e8 7f 27 00 00       	call   c0012a35 <operator delete(void*, unsigned long)>
c00102b6:	83 c4 10             	add    esp,0x10
c00102b9:	83 c4 0c             	add    esp,0xc
c00102bc:	c3                   	ret    
c00102bd:	90                   	nop

c00102be <Pipe::read(unsigned long long, void*, int*)>:
c00102be:	55                   	push   ebp
c00102bf:	57                   	push   edi
c00102c0:	56                   	push   esi
c00102c1:	53                   	push   ebx
c00102c2:	83 ec 1c             	sub    esp,0x1c
c00102c5:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00102c9:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00102cd:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00102d1:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00102d4:	89 c8                	mov    eax,ecx
c00102d6:	99                   	cdq    
c00102d7:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c00102db:	74 19                	je     c00102f6 <Pipe::read(unsigned long long, void*, int*)+0x38>
c00102dd:	39 f9                	cmp    ecx,edi
c00102df:	89 d1                	mov    ecx,edx
c00102e1:	19 f1                	sbb    ecx,esi
c00102e3:	73 11                	jae    c00102f6 <Pipe::read(unsigned long long, void*, int*)+0x38>
c00102e5:	e8 d4 d3 00 00       	call   c001d6be <lockScheduler()>
c00102ea:	e8 0b d7 00 00       	call   c001d9fa <schedule()>
c00102ef:	e8 cc d3 00 00       	call   c001d6c0 <unlockScheduler()>
c00102f4:	eb db                	jmp    c00102d1 <Pipe::read(unsigned long long, void*, int*)+0x13>
c00102f6:	39 f8                	cmp    eax,edi
c00102f8:	89 d1                	mov    ecx,edx
c00102fa:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00102fe:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0010302:	19 f1                	sbb    ecx,esi
c0010304:	73 08                	jae    c001030e <Pipe::read(unsigned long long, void*, int*)+0x50>
c0010306:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001030a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001030e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0010311:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c0010314:	29 c6                	sub    esi,eax
c0010316:	89 f1                	mov    ecx,esi
c0010318:	c1 f9 1f             	sar    ecx,0x1f
c001031b:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c001031f:	89 ca                	mov    edx,ecx
c0010321:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010325:	19 d1                	sbb    ecx,edx
c0010327:	73 04                	jae    c001032d <Pipe::read(unsigned long long, void*, int*)+0x6f>
c0010329:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c001032d:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0010331:	89 fd                	mov    ebp,edi
c0010333:	29 f5                	sub    ebp,esi
c0010335:	85 f6                	test   esi,esi
c0010337:	74 12                	je     c001034b <Pipe::read(unsigned long long, void*, int*)+0x8d>
c0010339:	52                   	push   edx
c001033a:	56                   	push   esi
c001033b:	03 43 0c             	add    eax,DWORD PTR [ebx+0xc]
c001033e:	50                   	push   eax
c001033f:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0010343:	e8 fc 03 ff ff       	call   c0000744 <memcpy>
c0010348:	83 c4 10             	add    esp,0x10
c001034b:	85 ed                	test   ebp,ebp
c001034d:	74 12                	je     c0010361 <Pipe::read(unsigned long long, void*, int*)+0xa3>
c001034f:	50                   	push   eax
c0010350:	55                   	push   ebp
c0010351:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0010354:	03 74 24 48          	add    esi,DWORD PTR [esp+0x48]
c0010358:	56                   	push   esi
c0010359:	e8 e6 03 ff ff       	call   c0000744 <memcpy>
c001035e:	83 c4 10             	add    esp,0x10
c0010361:	29 7b 14             	sub    DWORD PTR [ebx+0x14],edi
c0010364:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0010367:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c001036a:	99                   	cdq    
c001036b:	89 f7                	mov    edi,esi
c001036d:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0010371:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0010375:	c1 ff 1f             	sar    edi,0x1f
c0010378:	57                   	push   edi
c0010379:	56                   	push   esi
c001037a:	52                   	push   edx
c001037b:	50                   	push   eax
c001037c:	e8 1b 60 01 00       	call   c002639c <__umoddi3>
c0010381:	83 c4 10             	add    esp,0x10
c0010384:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0010387:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c001038c:	75 10                	jne    c001039e <Pipe::read(unsigned long long, void*, int*)+0xe0>
c001038e:	83 ec 0c             	sub    esp,0xc
c0010391:	68 15 9c 02 c0       	push   0xc0029c15
c0010396:	e8 94 9c 00 00       	call   c001a02f <Krnl::panic(char const*)>
c001039b:	83 c4 10             	add    esp,0x10
c001039e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00103a2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00103a6:	89 10                	mov    DWORD PTR [eax],edx
c00103a8:	83 c4 1c             	add    esp,0x1c
c00103ab:	31 c0                	xor    eax,eax
c00103ad:	5b                   	pop    ebx
c00103ae:	5e                   	pop    esi
c00103af:	5f                   	pop    edi
c00103b0:	5d                   	pop    ebp
c00103b1:	c3                   	ret    

c00103b2 <Pipe::write(unsigned long long, void*, int*)>:
c00103b2:	55                   	push   ebp
c00103b3:	57                   	push   edi
c00103b4:	56                   	push   esi
c00103b5:	53                   	push   ebx
c00103b6:	83 ec 1c             	sub    esp,0x1c
c00103b9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00103bd:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00103c1:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00103c5:	89 04 24             	mov    DWORD PTR [esp],eax
c00103c8:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c00103cb:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
c00103ce:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00103d2:	89 de                	mov    esi,ebx
c00103d4:	89 df                	mov    edi,ebx
c00103d6:	c1 ff 1f             	sar    edi,0x1f
c00103d9:	01 c6                	add    esi,eax
c00103db:	89 c8                	mov    eax,ecx
c00103dd:	11 d7                	adc    edi,edx
c00103df:	99                   	cdq    
c00103e0:	39 f1                	cmp    ecx,esi
c00103e2:	89 d0                	mov    eax,edx
c00103e4:	19 f8                	sbb    eax,edi
c00103e6:	b8 01 00 00 00       	mov    eax,0x1
c00103eb:	0f 82 80 00 00 00    	jb     c0010471 <Pipe::write(unsigned long long, void*, int*)+0xbf>
c00103f1:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00103f4:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00103f7:	01 d8                	add    eax,ebx
c00103f9:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c00103fd:	99                   	cdq    
c00103fe:	f7 f9                	idiv   ecx
c0010400:	29 d1                	sub    ecx,edx
c0010402:	89 d7                	mov    edi,edx
c0010404:	89 c8                	mov    eax,ecx
c0010406:	99                   	cdq    
c0010407:	39 ce                	cmp    esi,ecx
c0010409:	19 d3                	sbb    ebx,edx
c001040b:	bb 00 00 00 00       	mov    ebx,0x0
c0010410:	72 04                	jb     c0010416 <Pipe::write(unsigned long long, void*, int*)+0x64>
c0010412:	89 f3                	mov    ebx,esi
c0010414:	29 cb                	sub    ebx,ecx
c0010416:	89 f1                	mov    ecx,esi
c0010418:	29 d9                	sub    ecx,ebx
c001041a:	74 1a                	je     c0010436 <Pipe::write(unsigned long long, void*, int*)+0x84>
c001041c:	52                   	push   edx
c001041d:	51                   	push   ecx
c001041e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0010422:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0010426:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c0010429:	57                   	push   edi
c001042a:	e8 15 03 ff ff       	call   c0000744 <memcpy>
c001042f:	83 c4 10             	add    esp,0x10
c0010432:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010436:	85 db                	test   ebx,ebx
c0010438:	74 12                	je     c001044c <Pipe::write(unsigned long long, void*, int*)+0x9a>
c001043a:	50                   	push   eax
c001043b:	53                   	push   ebx
c001043c:	03 4c 24 44          	add    ecx,DWORD PTR [esp+0x44]
c0010440:	51                   	push   ecx
c0010441:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0010444:	e8 fb 02 ff ff       	call   c0000744 <memcpy>
c0010449:	83 c4 10             	add    esp,0x10
c001044c:	01 75 14             	add    DWORD PTR [ebp+0x14],esi
c001044f:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0010454:	75 10                	jne    c0010466 <Pipe::write(unsigned long long, void*, int*)+0xb4>
c0010456:	83 ec 0c             	sub    esp,0xc
c0010459:	68 31 9c 02 c0       	push   0xc0029c31
c001045e:	e8 cc 9b 00 00       	call   c001a02f <Krnl::panic(char const*)>
c0010463:	83 c4 10             	add    esp,0x10
c0010466:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001046a:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001046d:	89 38                	mov    DWORD PTR [eax],edi
c001046f:	31 c0                	xor    eax,eax
c0010471:	83 c4 1c             	add    esp,0x1c
c0010474:	5b                   	pop    ebx
c0010475:	5e                   	pop    esi
c0010476:	5f                   	pop    edi
c0010477:	5d                   	pop    ebp
c0010478:	c3                   	ret    
c0010479:	90                   	nop

c001047a <Pipe::Pipe(int)>:
c001047a:	83 ec 0c             	sub    esp,0xc
c001047d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010481:	83 ec 08             	sub    esp,0x8
c0010484:	6a 00                	push   0x0
c0010486:	50                   	push   eax
c0010487:	e8 56 12 00 00       	call   c00116e2 <UnixFile::UnixFile(int)>
c001048c:	83 c4 10             	add    esp,0x10
c001048f:	ba 58 9c 02 c0       	mov    edx,0xc0029c58
c0010494:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010498:	89 10                	mov    DWORD PTR [eax],edx
c001049a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001049e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00104a2:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00104a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104a9:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c00104b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104b4:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c00104bb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00104bf:	83 ec 0c             	sub    esp,0xc
c00104c2:	50                   	push   eax
c00104c3:	e8 7e f3 ff ff       	call   c000f846 <malloc>
c00104c8:	83 c4 10             	add    esp,0x10
c00104cb:	89 c2                	mov    edx,eax
c00104cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104d1:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00104d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104d8:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c00104dc:	90                   	nop
c00104dd:	83 c4 0c             	add    esp,0xc
c00104e0:	c3                   	ret    
c00104e1:	90                   	nop

c00104e2 <VgaText::isAtty()>:
c00104e2:	b0 01                	mov    al,0x1
c00104e4:	c3                   	ret    
c00104e5:	90                   	nop

c00104e6 <VgaText::~VgaText()>:
c00104e6:	83 ec 0c             	sub    esp,0xc
c00104e9:	ba 14 9d 02 c0       	mov    edx,0xc0029d14
c00104ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104f2:	89 10                	mov    DWORD PTR [eax],edx
c00104f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104f8:	83 ec 0c             	sub    esp,0xc
c00104fb:	50                   	push   eax
c00104fc:	e8 c3 13 00 00       	call   c00118c4 <UnixFile::~UnixFile()>
c0010501:	83 c4 10             	add    esp,0x10
c0010504:	90                   	nop
c0010505:	83 c4 0c             	add    esp,0xc
c0010508:	c3                   	ret    
c0010509:	90                   	nop

c001050a <VgaText::~VgaText()>:
c001050a:	83 ec 0c             	sub    esp,0xc
c001050d:	83 ec 0c             	sub    esp,0xc
c0010510:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010514:	e8 cd ff ff ff       	call   c00104e6 <VgaText::~VgaText()>
c0010519:	83 c4 10             	add    esp,0x10
c001051c:	83 ec 08             	sub    esp,0x8
c001051f:	68 60 12 00 00       	push   0x1260
c0010524:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010528:	e8 08 25 00 00       	call   c0012a35 <operator delete(void*, unsigned long)>
c001052d:	83 c4 10             	add    esp,0x10
c0010530:	83 c4 0c             	add    esp,0xc
c0010533:	c3                   	ret    

c0010534 <VgaText::read(unsigned long long, void*, int*)>:
c0010534:	83 ec 10             	sub    esp,0x10
c0010537:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001053b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001053f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010543:	e8 1d 59 00 00       	call   c0015e65 <readKeyboard(VgaText*, char*, unsigned long)>
c0010548:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001054c:	89 02                	mov    DWORD PTR [edx],eax
c001054e:	31 c0                	xor    eax,eax
c0010550:	83 c4 1c             	add    esp,0x1c
c0010553:	c3                   	ret    

c0010554 <setTerminalScrollLock(bool)>:
c0010554:	c3                   	ret    

c0010555 <addToTerminalCycle(VgaText*)>:
c0010555:	8b 15 40 dc 02 c0    	mov    edx,DWORD PTR ds:0xc002dc40
c001055b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001055f:	85 d2                	test   edx,edx
c0010561:	75 0c                	jne    c001056f <addToTerminalCycle(VgaText*)+0x1a>
c0010563:	89 80 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],eax
c0010569:	a3 40 dc 02 c0       	mov    ds:0xc002dc40,eax
c001056e:	c3                   	ret    
c001056f:	8b 8a c0 0f 00 00    	mov    ecx,DWORD PTR [edx+0xfc0]
c0010575:	89 82 c0 0f 00 00    	mov    DWORD PTR [edx+0xfc0],eax
c001057b:	89 88 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],ecx
c0010581:	c3                   	ret    

c0010582 <installVgaTextImplementation()>:
c0010582:	83 ec 10             	sub    esp,0x10
c0010585:	6a 20                	push   0x20
c0010587:	6a 00                	push   0x0
c0010589:	68 20 dc 02 c0       	push   0xc002dc20
c001058e:	e8 e5 01 ff ff       	call   c0000778 <memset>
c0010593:	83 c4 1c             	add    esp,0x1c
c0010596:	c3                   	ret    

c0010597 <scrollTerminalScrollLock(int)>:
c0010597:	c3                   	ret    

c0010598 <VgaText::load()>:
c0010598:	53                   	push   ebx
c0010599:	31 c0                	xor    eax,eax
c001059b:	83 ec 58             	sub    esp,0x58
c001059e:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c00105a2:	89 e2                	mov    edx,esp
c00105a4:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c00105a8:	40                   	inc    eax
c00105a9:	83 f8 50             	cmp    eax,0x50
c00105ac:	75 f6                	jne    c00105a4 <VgaText::load()+0xc>
c00105ae:	31 c0                	xor    eax,eax
c00105b0:	8a 8c 03 1e 10 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x101e]
c00105b7:	84 c9                	test   cl,cl
c00105b9:	74 06                	je     c00105c1 <VgaText::load()+0x29>
c00105bb:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c00105be:	40                   	inc    eax
c00105bf:	eb ef                	jmp    c00105b0 <VgaText::load()+0x18>
c00105c1:	8b 83 fc 0f 00 00    	mov    eax,DWORD PTR [ebx+0xffc]
c00105c7:	85 c0                	test   eax,eax
c00105c9:	74 09                	je     c00105d4 <VgaText::load()+0x3c>
c00105cb:	51                   	push   ecx
c00105cc:	51                   	push   ecx
c00105cd:	52                   	push   edx
c00105ce:	53                   	push   ebx
c00105cf:	ff d0                	call   eax
c00105d1:	83 c4 10             	add    esp,0x10
c00105d4:	8b 83 00 10 00 00    	mov    eax,DWORD PTR [ebx+0x1000]
c00105da:	85 c0                	test   eax,eax
c00105dc:	74 09                	je     c00105e7 <VgaText::load()+0x4f>
c00105de:	83 ec 0c             	sub    esp,0xc
c00105e1:	53                   	push   ebx
c00105e2:	ff d0                	call   eax
c00105e4:	83 c4 10             	add    esp,0x10
c00105e7:	83 c4 58             	add    esp,0x58
c00105ea:	5b                   	pop    ebx
c00105eb:	c3                   	ret    

c00105ec <VgaText::updateCursor()>:
c00105ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00105f0:	39 05 44 dc 02 c0    	cmp    DWORD PTR ds:0xc002dc44,eax
c00105f6:	75 0c                	jne    c0010604 <VgaText::updateCursor()+0x18>
c00105f8:	8b 80 0c 10 00 00    	mov    eax,DWORD PTR [eax+0x100c]
c00105fe:	85 c0                	test   eax,eax
c0010600:	74 02                	je     c0010604 <VgaText::updateCursor()+0x18>
c0010602:	ff e0                	jmp    eax
c0010604:	c3                   	ret    
c0010605:	90                   	nop

c0010606 <VgaText::showCursor(bool)>:
c0010606:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001060a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001060e:	88 90 bc 0f 00 00    	mov    BYTE PTR [eax+0xfbc],dl
c0010614:	c3                   	ret    
c0010615:	90                   	nop

c0010616 <VgaText::disableBlink(bool)>:
c0010616:	56                   	push   esi
c0010617:	53                   	push   ebx
c0010618:	51                   	push   ecx
c0010619:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001061d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010621:	39 1d 44 dc 02 c0    	cmp    DWORD PTR ds:0xc002dc44,ebx
c0010627:	75 18                	jne    c0010641 <VgaText::disableBlink(bool)+0x2b>
c0010629:	8b 83 14 10 00 00    	mov    eax,DWORD PTR [ebx+0x1014]
c001062f:	85 c0                	test   eax,eax
c0010631:	74 0e                	je     c0010641 <VgaText::disableBlink(bool)+0x2b>
c0010633:	89 f1                	mov    ecx,esi
c0010635:	52                   	push   edx
c0010636:	52                   	push   edx
c0010637:	0f b6 d1             	movzx  edx,cl
c001063a:	52                   	push   edx
c001063b:	53                   	push   ebx
c001063c:	ff d0                	call   eax
c001063e:	83 c4 10             	add    esp,0x10
c0010641:	89 f0                	mov    eax,esi
c0010643:	83 f0 01             	xor    eax,0x1
c0010646:	88 83 bd 0f 00 00    	mov    BYTE PTR [ebx+0xfbd],al
c001064c:	58                   	pop    eax
c001064d:	5b                   	pop    ebx
c001064e:	5e                   	pop    esi
c001064f:	c3                   	ret    

c0010650 <VgaText::doANSI_SGR(int)>:
c0010650:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010654:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010658:	85 d2                	test   edx,edx
c001065a:	75 14                	jne    c0010670 <VgaText::doANSI_SGR(int)+0x20>
c001065c:	8b 90 c8 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc8]
c0010662:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c0010668:	8b 90 c4 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc4]
c001066e:	eb 65                	jmp    c00106d5 <VgaText::doANSI_SGR(int)+0x85>
c0010670:	83 fa 07             	cmp    edx,0x7
c0010673:	75 14                	jne    c0010689 <VgaText::doANSI_SGR(int)+0x39>
c0010675:	8b 90 d0 0f 00 00    	mov    edx,DWORD PTR [eax+0xfd0]
c001067b:	8b 88 cc 0f 00 00    	mov    ecx,DWORD PTR [eax+0xfcc]
c0010681:	89 88 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],ecx
c0010687:	eb 4c                	jmp    c00106d5 <VgaText::doANSI_SGR(int)+0x85>
c0010689:	83 fa 1b             	cmp    edx,0x1b
c001068c:	74 ce                	je     c001065c <VgaText::doANSI_SGR(int)+0xc>
c001068e:	8d 4a e2             	lea    ecx,[edx-0x1e]
c0010691:	83 f9 07             	cmp    ecx,0x7
c0010694:	77 09                	ja     c001069f <VgaText::doANSI_SGR(int)+0x4f>
c0010696:	8b 14 8d c0 ca 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd3540]
c001069d:	eb 20                	jmp    c00106bf <VgaText::doANSI_SGR(int)+0x6f>
c001069f:	8d 4a d8             	lea    ecx,[edx-0x28]
c00106a2:	83 f9 07             	cmp    ecx,0x7
c00106a5:	77 09                	ja     c00106b0 <VgaText::doANSI_SGR(int)+0x60>
c00106a7:	8b 14 8d c0 ca 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd3540]
c00106ae:	eb 25                	jmp    c00106d5 <VgaText::doANSI_SGR(int)+0x85>
c00106b0:	8d 4a a6             	lea    ecx,[edx-0x5a]
c00106b3:	83 f9 07             	cmp    ecx,0x7
c00106b6:	77 0e                	ja     c00106c6 <VgaText::doANSI_SGR(int)+0x76>
c00106b8:	8b 14 95 78 c9 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3688]
c00106bf:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c00106c5:	c3                   	ret    
c00106c6:	8d 4a 9c             	lea    ecx,[edx-0x64]
c00106c9:	83 f9 07             	cmp    ecx,0x7
c00106cc:	77 0d                	ja     c00106db <VgaText::doANSI_SGR(int)+0x8b>
c00106ce:	8b 14 95 50 c9 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd36b0]
c00106d5:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c00106db:	c3                   	ret    

c00106dc <VgaText::setDefaultBgColour(VgaColour)>:
c00106dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00106e0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00106e4:	89 90 c4 0f 00 00    	mov    DWORD PTR [eax+0xfc4],edx
c00106ea:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c00106f0:	c3                   	ret    
c00106f1:	90                   	nop

c00106f2 <VgaText::setDefaultFgColour(VgaColour)>:
c00106f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00106f6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00106fa:	89 90 c8 0f 00 00    	mov    DWORD PTR [eax+0xfc8],edx
c0010700:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c0010706:	c3                   	ret    
c0010707:	90                   	nop

c0010708 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c0010708:	53                   	push   ebx
c0010709:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001070d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0010711:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010715:	51                   	push   ecx
c0010716:	e8 c1 ff ff ff       	call   c00106dc <VgaText::setDefaultBgColour(VgaColour)>
c001071b:	58                   	pop    eax
c001071c:	5a                   	pop    edx
c001071d:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0010721:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0010725:	5b                   	pop    ebx
c0010726:	eb ca                	jmp    c00106f2 <VgaText::setDefaultFgColour(VgaColour)>

c0010728 <VgaText::combineColours(unsigned char, unsigned char)>:
c0010728:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001072c:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0010731:	83 e0 0f             	and    eax,0xf
c0010734:	c1 e2 04             	shl    edx,0x4
c0010737:	09 d0                	or     eax,edx
c0010739:	c3                   	ret    

c001073a <VgaText::scrollScreen()>:
c001073a:	57                   	push   edi
c001073b:	56                   	push   esi
c001073c:	be 01 00 00 00       	mov    esi,0x1
c0010741:	53                   	push   ebx
c0010742:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010746:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c001074c:	31 ff                	xor    edi,edi
c001074e:	01 d9                	add    ecx,ebx
c0010750:	8a 41 0c             	mov    al,BYTE PTR [ecx+0xc]
c0010753:	83 fe 17             	cmp    esi,0x17
c0010756:	88 81 6c ff ff ff    	mov    BYTE PTR [ecx-0x94],al
c001075c:	75 28                	jne    c0010786 <VgaText::scrollScreen()+0x4c>
c001075e:	f7 c7 01 00 00 00    	test   edi,0x1
c0010764:	74 1c                	je     c0010782 <VgaText::scrollScreen()+0x48>
c0010766:	0f b6 83 cc 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfcc]
c001076d:	50                   	push   eax
c001076e:	0f b6 83 d0 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfd0]
c0010775:	50                   	push   eax
c0010776:	e8 ad ff ff ff       	call   c0010728 <VgaText::combineColours(unsigned char, unsigned char)>
c001077b:	5a                   	pop    edx
c001077c:	5a                   	pop    edx
c001077d:	88 41 0c             	mov    BYTE PTR [ecx+0xc],al
c0010780:	eb 04                	jmp    c0010786 <VgaText::scrollScreen()+0x4c>
c0010782:	c6 41 0c 20          	mov    BYTE PTR [ecx+0xc],0x20
c0010786:	47                   	inc    edi
c0010787:	41                   	inc    ecx
c0010788:	81 ff a0 00 00 00    	cmp    edi,0xa0
c001078e:	75 c0                	jne    c0010750 <VgaText::scrollScreen()+0x16>
c0010790:	46                   	inc    esi
c0010791:	83 fe 18             	cmp    esi,0x18
c0010794:	75 b0                	jne    c0010746 <VgaText::scrollScreen()+0xc>
c0010796:	39 1d 44 dc 02 c0    	cmp    DWORD PTR ds:0xc002dc44,ebx
c001079c:	75 24                	jne    c00107c2 <VgaText::scrollScreen()+0x88>
c001079e:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c00107a5:	74 08                	je     c00107af <VgaText::scrollScreen()+0x75>
c00107a7:	ff 8b f8 0f 00 00    	dec    DWORD PTR [ebx+0xff8]
c00107ad:	eb 13                	jmp    c00107c2 <VgaText::scrollScreen()+0x88>
c00107af:	8b 83 08 10 00 00    	mov    eax,DWORD PTR [ebx+0x1008]
c00107b5:	85 c0                	test   eax,eax
c00107b7:	74 09                	je     c00107c2 <VgaText::scrollScreen()+0x88>
c00107b9:	83 ec 0c             	sub    esp,0xc
c00107bc:	53                   	push   ebx
c00107bd:	ff d0                	call   eax
c00107bf:	83 c4 10             	add    esp,0x10
c00107c2:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00107c6:	5b                   	pop    ebx
c00107c7:	5e                   	pop    esi
c00107c8:	5f                   	pop    edi
c00107c9:	e9 1e fe ff ff       	jmp    c00105ec <VgaText::updateCursor()>

c00107ce <VgaText::combineCharAndColour(char, unsigned char)>:
c00107ce:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00107d3:	c1 e0 08             	shl    eax,0x8
c00107d6:	89 c2                	mov    edx,eax
c00107d8:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00107dd:	09 d0                	or     eax,edx
c00107df:	c3                   	ret    

c00107e0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00107e0:	53                   	push   ebx
c00107e1:	83 ec 08             	sub    esp,0x8
c00107e4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00107e8:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00107ed:	50                   	push   eax
c00107ee:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00107f3:	50                   	push   eax
c00107f4:	e8 2f ff ff ff       	call   c0010728 <VgaText::combineColours(unsigned char, unsigned char)>
c00107f9:	5a                   	pop    edx
c00107fa:	0f b6 c0             	movzx  eax,al
c00107fd:	5b                   	pop    ebx
c00107fe:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0010803:	50                   	push   eax
c0010804:	53                   	push   ebx
c0010805:	e8 c4 ff ff ff       	call   c00107ce <VgaText::combineCharAndColour(char, unsigned char)>
c001080a:	5a                   	pop    edx
c001080b:	5a                   	pop    edx
c001080c:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c0010812:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c0010816:	0f b7 d2             	movzx  edx,dx
c0010819:	66 89 44 51 0c       	mov    WORD PTR [ecx+edx*2+0xc],ax
c001081e:	39 0d 44 dc 02 c0    	cmp    DWORD PTR ds:0xc002dc44,ecx
c0010824:	75 14                	jne    c001083a <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c0010826:	8b 81 18 10 00 00    	mov    eax,DWORD PTR [ecx+0x1018]
c001082c:	85 c0                	test   eax,eax
c001082e:	74 0a                	je     c001083a <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c0010830:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0010834:	83 c4 08             	add    esp,0x8
c0010837:	5b                   	pop    ebx
c0010838:	ff e0                	jmp    eax
c001083a:	83 c4 08             	add    esp,0x8
c001083d:	5b                   	pop    ebx
c001083e:	c3                   	ret    
c001083f:	90                   	nop

c0010840 <VgaText::getCursorX()>:
c0010840:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010844:	8b 80 b0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb0]
c001084a:	c3                   	ret    
c001084b:	90                   	nop

c001084c <VgaText::getCursorY()>:
c001084c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010850:	8b 80 b4 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb4]
c0010856:	c3                   	ret    
c0010857:	90                   	nop

c0010858 <VgaText::setCursor(int, int)>:
c0010858:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001085c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010860:	89 90 b0 0f 00 00    	mov    DWORD PTR [eax+0xfb0],edx
c0010866:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001086a:	89 90 b4 0f 00 00    	mov    DWORD PTR [eax+0xfb4],edx
c0010870:	e9 77 fd ff ff       	jmp    c00105ec <VgaText::updateCursor()>
c0010875:	90                   	nop

c0010876 <VgaText::setCursorX(int)>:
c0010876:	83 ec 10             	sub    esp,0x10
c0010879:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001087d:	ff b0 b4 0f 00 00    	push   DWORD PTR [eax+0xfb4]
c0010883:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010887:	50                   	push   eax
c0010888:	e8 cb ff ff ff       	call   c0010858 <VgaText::setCursor(int, int)>
c001088d:	83 c4 1c             	add    esp,0x1c
c0010890:	c3                   	ret    
c0010891:	90                   	nop

c0010892 <VgaText::setCursorY(int)>:
c0010892:	83 ec 10             	sub    esp,0x10
c0010895:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010899:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001089d:	ff b0 b0 0f 00 00    	push   DWORD PTR [eax+0xfb0]
c00108a3:	50                   	push   eax
c00108a4:	e8 af ff ff ff       	call   c0010858 <VgaText::setCursor(int, int)>
c00108a9:	83 c4 1c             	add    esp,0x1c
c00108ac:	c3                   	ret    
c00108ad:	90                   	nop

c00108ae <VgaText::incrementCursor(bool)>:
c00108ae:	56                   	push   esi
c00108af:	53                   	push   ebx
c00108b0:	51                   	push   ecx
c00108b1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00108b5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00108b9:	8b 83 b0 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb0]
c00108bf:	40                   	inc    eax
c00108c0:	83 f8 50             	cmp    eax,0x50
c00108c3:	74 08                	je     c00108cd <VgaText::incrementCursor(bool)+0x1f>
c00108c5:	89 83 b0 0f 00 00    	mov    DWORD PTR [ebx+0xfb0],eax
c00108cb:	eb 33                	jmp    c0010900 <VgaText::incrementCursor(bool)+0x52>
c00108cd:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c00108d3:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c00108dd:	8d 50 01             	lea    edx,[eax+0x1]
c00108e0:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c00108e6:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c00108ec:	75 12                	jne    c0010900 <VgaText::incrementCursor(bool)+0x52>
c00108ee:	83 ec 0c             	sub    esp,0xc
c00108f1:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c00108f7:	53                   	push   ebx
c00108f8:	e8 3d fe ff ff       	call   c001073a <VgaText::scrollScreen()>
c00108fd:	83 c4 10             	add    esp,0x10
c0010900:	89 f0                	mov    eax,esi
c0010902:	84 c0                	test   al,al
c0010904:	74 0c                	je     c0010912 <VgaText::incrementCursor(bool)+0x64>
c0010906:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001090a:	5a                   	pop    edx
c001090b:	5b                   	pop    ebx
c001090c:	5e                   	pop    esi
c001090d:	e9 da fc ff ff       	jmp    c00105ec <VgaText::updateCursor()>
c0010912:	58                   	pop    eax
c0010913:	5b                   	pop    ebx
c0010914:	5e                   	pop    esi
c0010915:	c3                   	ret    

c0010916 <VgaText::updateRAMUsageDisplay(int)>:
c0010916:	56                   	push   esi
c0010917:	8b 35 a0 ca 02 c0    	mov    esi,DWORD PTR ds:0xc002caa0
c001091d:	53                   	push   ebx
c001091e:	bb 0a 00 00 00       	mov    ebx,0xa
c0010923:	6a 0f                	push   0xf
c0010925:	6a 00                	push   0x0
c0010927:	e8 fc fd ff ff       	call   c0010728 <VgaText::combineColours(unsigned char, unsigned char)>
c001092c:	5a                   	pop    edx
c001092d:	59                   	pop    ecx
c001092e:	0f b6 c8             	movzx  ecx,al
c0010931:	51                   	push   ecx
c0010932:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010936:	99                   	cdq    
c0010937:	f7 fb                	idiv   ebx
c0010939:	89 d3                	mov    ebx,edx
c001093b:	83 c0 30             	add    eax,0x30
c001093e:	83 c3 30             	add    ebx,0x30
c0010941:	0f be c0             	movsx  eax,al
c0010944:	0f b6 db             	movzx  ebx,bl
c0010947:	50                   	push   eax
c0010948:	e8 81 fe ff ff       	call   c00107ce <VgaText::combineCharAndColour(char, unsigned char)>
c001094d:	5a                   	pop    edx
c001094e:	5a                   	pop    edx
c001094f:	66 89 86 96 00 00 00 	mov    WORD PTR [esi+0x96],ax
c0010956:	51                   	push   ecx
c0010957:	53                   	push   ebx
c0010958:	e8 71 fe ff ff       	call   c00107ce <VgaText::combineCharAndColour(char, unsigned char)>
c001095d:	5b                   	pop    ebx
c001095e:	5a                   	pop    edx
c001095f:	66 89 86 98 00 00 00 	mov    WORD PTR [esi+0x98],ax
c0010966:	51                   	push   ecx
c0010967:	6a 25                	push   0x25
c0010969:	e8 60 fe ff ff       	call   c00107ce <VgaText::combineCharAndColour(char, unsigned char)>
c001096e:	59                   	pop    ecx
c001096f:	5b                   	pop    ebx
c0010970:	66 89 86 9a 00 00 00 	mov    WORD PTR [esi+0x9a],ax
c0010977:	5b                   	pop    ebx
c0010978:	5e                   	pop    esi
c0010979:	c3                   	ret    

c001097a <VgaText::updateDiskUsage()>:
c001097a:	55                   	push   ebp
c001097b:	bd 10 27 00 00       	mov    ebp,0x2710
c0010980:	57                   	push   edi
c0010981:	8b 3d a0 ca 02 c0    	mov    edi,DWORD PTR ds:0xc002caa0
c0010987:	56                   	push   esi
c0010988:	53                   	push   ebx
c0010989:	6a 0f                	push   0xf
c001098b:	6a 00                	push   0x0
c001098d:	e8 96 fd ff ff       	call   c0010728 <VgaText::combineColours(unsigned char, unsigned char)>
c0010992:	5a                   	pop    edx
c0010993:	0f b6 d8             	movzx  ebx,al
c0010996:	59                   	pop    ecx
c0010997:	8b 35 c8 1e 03 c0    	mov    esi,DWORD PTR ds:0xc0031ec8
c001099d:	53                   	push   ebx
c001099e:	b9 0a 00 00 00       	mov    ecx,0xa
c00109a3:	89 f0                	mov    eax,esi
c00109a5:	99                   	cdq    
c00109a6:	f7 fd                	idiv   ebp
c00109a8:	99                   	cdq    
c00109a9:	f7 f9                	idiv   ecx
c00109ab:	8d 42 30             	lea    eax,[edx+0x30]
c00109ae:	0f b6 c0             	movzx  eax,al
c00109b1:	50                   	push   eax
c00109b2:	e8 17 fe ff ff       	call   c00107ce <VgaText::combineCharAndColour(char, unsigned char)>
c00109b7:	5d                   	pop    ebp
c00109b8:	bd e8 03 00 00       	mov    ebp,0x3e8
c00109bd:	5a                   	pop    edx
c00109be:	66 89 47 7e          	mov    WORD PTR [edi+0x7e],ax
c00109c2:	53                   	push   ebx
c00109c3:	89 f0                	mov    eax,esi
c00109c5:	99                   	cdq    
c00109c6:	f7 fd                	idiv   ebp
c00109c8:	99                   	cdq    
c00109c9:	f7 f9                	idiv   ecx
c00109cb:	8d 42 30             	lea    eax,[edx+0x30]
c00109ce:	0f b6 c0             	movzx  eax,al
c00109d1:	50                   	push   eax
c00109d2:	e8 f7 fd ff ff       	call   c00107ce <VgaText::combineCharAndColour(char, unsigned char)>
c00109d7:	5d                   	pop    ebp
c00109d8:	bd 64 00 00 00       	mov    ebp,0x64
c00109dd:	5a                   	pop    edx
c00109de:	66 89 87 80 00 00 00 	mov    WORD PTR [edi+0x80],ax
c00109e5:	53                   	push   ebx
c00109e6:	89 f0                	mov    eax,esi
c00109e8:	99                   	cdq    
c00109e9:	f7 fd                	idiv   ebp
c00109eb:	99                   	cdq    
c00109ec:	f7 f9                	idiv   ecx
c00109ee:	8d 42 30             	lea    eax,[edx+0x30]
c00109f1:	0f b6 c0             	movzx  eax,al
c00109f4:	50                   	push   eax
c00109f5:	e8 d4 fd ff ff       	call   c00107ce <VgaText::combineCharAndColour(char, unsigned char)>
c00109fa:	5d                   	pop    ebp
c00109fb:	5a                   	pop    edx
c00109fc:	66 89 87 82 00 00 00 	mov    WORD PTR [edi+0x82],ax
c0010a03:	53                   	push   ebx
c0010a04:	89 f0                	mov    eax,esi
c0010a06:	99                   	cdq    
c0010a07:	f7 f9                	idiv   ecx
c0010a09:	89 d6                	mov    esi,edx
c0010a0b:	99                   	cdq    
c0010a0c:	f7 f9                	idiv   ecx
c0010a0e:	8d 42 30             	lea    eax,[edx+0x30]
c0010a11:	0f b6 c0             	movzx  eax,al
c0010a14:	50                   	push   eax
c0010a15:	e8 b4 fd ff ff       	call   c00107ce <VgaText::combineCharAndColour(char, unsigned char)>
c0010a1a:	5d                   	pop    ebp
c0010a1b:	5a                   	pop    edx
c0010a1c:	66 89 87 84 00 00 00 	mov    WORD PTR [edi+0x84],ax
c0010a23:	53                   	push   ebx
c0010a24:	8d 46 30             	lea    eax,[esi+0x30]
c0010a27:	0f b6 f0             	movzx  esi,al
c0010a2a:	56                   	push   esi
c0010a2b:	e8 9e fd ff ff       	call   c00107ce <VgaText::combineCharAndColour(char, unsigned char)>
c0010a30:	5e                   	pop    esi
c0010a31:	8b 35 c4 1e 03 c0    	mov    esi,DWORD PTR ds:0xc0031ec4
c0010a37:	5d                   	pop    ebp
c0010a38:	66 89 87 86 00 00 00 	mov    WORD PTR [edi+0x86],ax
c0010a3f:	bd 10 27 00 00       	mov    ebp,0x2710
c0010a44:	53                   	push   ebx
c0010a45:	89 f0                	mov    eax,esi
c0010a47:	99                   	cdq    
c0010a48:	f7 fd                	idiv   ebp
c0010a4a:	99                   	cdq    
c0010a4b:	f7 f9                	idiv   ecx
c0010a4d:	8d 42 30             	lea    eax,[edx+0x30]
c0010a50:	0f b6 c0             	movzx  eax,al
c0010a53:	50                   	push   eax
c0010a54:	e8 75 fd ff ff       	call   c00107ce <VgaText::combineCharAndColour(char, unsigned char)>
c0010a59:	5a                   	pop    edx
c0010a5a:	5d                   	pop    ebp
c0010a5b:	66 89 87 8a 00 00 00 	mov    WORD PTR [edi+0x8a],ax
c0010a62:	bd e8 03 00 00       	mov    ebp,0x3e8
c0010a67:	53                   	push   ebx
c0010a68:	89 f0                	mov    eax,esi
c0010a6a:	99                   	cdq    
c0010a6b:	f7 fd                	idiv   ebp
c0010a6d:	99                   	cdq    
c0010a6e:	f7 f9                	idiv   ecx
c0010a70:	8d 42 30             	lea    eax,[edx+0x30]
c0010a73:	0f b6 c0             	movzx  eax,al
c0010a76:	50                   	push   eax
c0010a77:	e8 52 fd ff ff       	call   c00107ce <VgaText::combineCharAndColour(char, unsigned char)>
c0010a7c:	5a                   	pop    edx
c0010a7d:	5d                   	pop    ebp
c0010a7e:	66 89 87 8c 00 00 00 	mov    WORD PTR [edi+0x8c],ax
c0010a85:	bd 64 00 00 00       	mov    ebp,0x64
c0010a8a:	53                   	push   ebx
c0010a8b:	89 f0                	mov    eax,esi
c0010a8d:	99                   	cdq    
c0010a8e:	f7 fd                	idiv   ebp
c0010a90:	99                   	cdq    
c0010a91:	f7 f9                	idiv   ecx
c0010a93:	83 c2 30             	add    edx,0x30
c0010a96:	0f b6 d2             	movzx  edx,dl
c0010a99:	52                   	push   edx
c0010a9a:	e8 2f fd ff ff       	call   c00107ce <VgaText::combineCharAndColour(char, unsigned char)>
c0010a9f:	5a                   	pop    edx
c0010aa0:	5d                   	pop    ebp
c0010aa1:	66 89 87 8e 00 00 00 	mov    WORD PTR [edi+0x8e],ax
c0010aa8:	53                   	push   ebx
c0010aa9:	89 f0                	mov    eax,esi
c0010aab:	99                   	cdq    
c0010aac:	f7 f9                	idiv   ecx
c0010aae:	89 d6                	mov    esi,edx
c0010ab0:	99                   	cdq    
c0010ab1:	f7 f9                	idiv   ecx
c0010ab3:	8d 42 30             	lea    eax,[edx+0x30]
c0010ab6:	0f b6 c0             	movzx  eax,al
c0010ab9:	50                   	push   eax
c0010aba:	e8 0f fd ff ff       	call   c00107ce <VgaText::combineCharAndColour(char, unsigned char)>
c0010abf:	5a                   	pop    edx
c0010ac0:	59                   	pop    ecx
c0010ac1:	66 89 87 90 00 00 00 	mov    WORD PTR [edi+0x90],ax
c0010ac8:	53                   	push   ebx
c0010ac9:	8d 46 30             	lea    eax,[esi+0x30]
c0010acc:	0f b6 f0             	movzx  esi,al
c0010acf:	56                   	push   esi
c0010ad0:	e8 f9 fc ff ff       	call   c00107ce <VgaText::combineCharAndColour(char, unsigned char)>
c0010ad5:	5b                   	pop    ebx
c0010ad6:	5e                   	pop    esi
c0010ad7:	66 89 87 92 00 00 00 	mov    WORD PTR [edi+0x92],ax
c0010ade:	5b                   	pop    ebx
c0010adf:	5e                   	pop    esi
c0010ae0:	5f                   	pop    edi
c0010ae1:	5d                   	pop    ebp
c0010ae2:	c3                   	ret    
c0010ae3:	90                   	nop

c0010ae4 <VgaText::updateTitle()>:
c0010ae4:	53                   	push   ebx
c0010ae5:	31 c0                	xor    eax,eax
c0010ae7:	83 ec 58             	sub    esp,0x58
c0010aea:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0010aee:	89 e1                	mov    ecx,esp
c0010af0:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c0010af4:	40                   	inc    eax
c0010af5:	83 f8 50             	cmp    eax,0x50
c0010af8:	75 f6                	jne    c0010af0 <VgaText::updateTitle()+0xc>
c0010afa:	31 c0                	xor    eax,eax
c0010afc:	8a 9c 02 1e 10 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x101e]
c0010b03:	84 db                	test   bl,bl
c0010b05:	74 06                	je     c0010b0d <VgaText::updateTitle()+0x29>
c0010b07:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c0010b0a:	40                   	inc    eax
c0010b0b:	eb ef                	jmp    c0010afc <VgaText::updateTitle()+0x18>
c0010b0d:	8b 82 fc 0f 00 00    	mov    eax,DWORD PTR [edx+0xffc]
c0010b13:	85 c0                	test   eax,eax
c0010b15:	74 09                	je     c0010b20 <VgaText::updateTitle()+0x3c>
c0010b17:	53                   	push   ebx
c0010b18:	53                   	push   ebx
c0010b19:	51                   	push   ecx
c0010b1a:	52                   	push   edx
c0010b1b:	ff d0                	call   eax
c0010b1d:	83 c4 10             	add    esp,0x10
c0010b20:	e8 55 fe ff ff       	call   c001097a <VgaText::updateDiskUsage()>
c0010b25:	83 c4 58             	add    esp,0x58
c0010b28:	5b                   	pop    ebx
c0010b29:	c3                   	ret    

c0010b2a <VgaText::setTitleTextColour(VgaColour)>:
c0010b2a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010b2e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010b32:	89 90 d8 0f 00 00    	mov    DWORD PTR [eax+0xfd8],edx
c0010b38:	eb aa                	jmp    c0010ae4 <VgaText::updateTitle()>

c0010b3a <VgaText::setTitleColour(VgaColour)>:
c0010b3a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010b3e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010b42:	89 90 d4 0f 00 00    	mov    DWORD PTR [eax+0xfd4],edx
c0010b48:	eb 9a                	jmp    c0010ae4 <VgaText::updateTitle()>

c0010b4a <VgaText::setTitle(char*)>:
c0010b4a:	53                   	push   ebx
c0010b4b:	83 ec 10             	sub    esp,0x10
c0010b4e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010b52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b56:	8d 83 1e 10 00 00    	lea    eax,[ebx+0x101e]
c0010b5c:	50                   	push   eax
c0010b5d:	e8 d2 fc fe ff       	call   c0000834 <strcpy>
c0010b62:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0010b66:	83 c4 18             	add    esp,0x18
c0010b69:	5b                   	pop    ebx
c0010b6a:	e9 75 ff ff ff       	jmp    c0010ae4 <VgaText::updateTitle()>
c0010b6f:	90                   	nop

c0010b70 <VgaText::decrementCursor(bool)>:
c0010b70:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010b74:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010b78:	8b 82 b0 0f 00 00    	mov    eax,DWORD PTR [edx+0xfb0]
c0010b7e:	85 c0                	test   eax,eax
c0010b80:	74 07                	je     c0010b89 <VgaText::decrementCursor(bool)+0x19>
c0010b82:	48                   	dec    eax
c0010b83:	89 82 b0 0f 00 00    	mov    DWORD PTR [edx+0xfb0],eax
c0010b89:	84 c9                	test   cl,cl
c0010b8b:	74 09                	je     c0010b96 <VgaText::decrementCursor(bool)+0x26>
c0010b8d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010b91:	e9 56 fa ff ff       	jmp    c00105ec <VgaText::updateCursor()>
c0010b96:	c3                   	ret    
c0010b97:	90                   	nop

c0010b98 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0010b98:	53                   	push   ebx
c0010b99:	83 ec 08             	sub    esp,0x8
c0010b9c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010ba0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010ba4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010ba8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0010bac:	3c 07                	cmp    al,0x7
c0010bae:	75 2a                	jne    c0010bda <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c0010bb0:	a1 ec dc 02 c0       	mov    eax,ds:0xc002dcec
c0010bb5:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0010bbd:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c0010bc5:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c0010bcd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010bd1:	83 c4 08             	add    esp,0x8
c0010bd4:	5b                   	pop    ebx
c0010bd5:	e9 3a 2d 00 00       	jmp    c0013914 <Buzzer::beep(int, int, bool)>
c0010bda:	3c 0d                	cmp    al,0xd
c0010bdc:	75 0c                	jne    c0010bea <VgaText::putchar(char, VgaColour, VgaColour)+0x52>
c0010bde:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010be8:	eb 3b                	jmp    c0010c25 <VgaText::putchar(char, VgaColour, VgaColour)+0x8d>
c0010bea:	3c 0a                	cmp    al,0xa
c0010bec:	75 40                	jne    c0010c2e <VgaText::putchar(char, VgaColour, VgaColour)+0x96>
c0010bee:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c0010bf4:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010bfe:	8d 50 01             	lea    edx,[eax+0x1]
c0010c01:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c0010c07:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c0010c0d:	75 12                	jne    c0010c21 <VgaText::putchar(char, VgaColour, VgaColour)+0x89>
c0010c0f:	83 ec 0c             	sub    esp,0xc
c0010c12:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c0010c18:	53                   	push   ebx
c0010c19:	e8 1c fb ff ff       	call   c001073a <VgaText::scrollScreen()>
c0010c1e:	83 c4 10             	add    esp,0x10
c0010c21:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010c25:	83 c4 08             	add    esp,0x8
c0010c28:	5b                   	pop    ebx
c0010c29:	e9 be f9 ff ff       	jmp    c00105ec <VgaText::updateCursor()>
c0010c2e:	3c 08                	cmp    al,0x8
c0010c30:	75 31                	jne    c0010c63 <VgaText::putchar(char, VgaColour, VgaColour)+0xcb>
c0010c32:	50                   	push   eax
c0010c33:	50                   	push   eax
c0010c34:	6a 01                	push   0x1
c0010c36:	53                   	push   ebx
c0010c37:	e8 34 ff ff ff       	call   c0010b70 <VgaText::decrementCursor(bool)>
c0010c3c:	5a                   	pop    edx
c0010c3d:	59                   	pop    ecx
c0010c3e:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010c44:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010c4a:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010c50:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0010c56:	6a 20                	push   0x20
c0010c58:	53                   	push   ebx
c0010c59:	e8 82 fb ff ff       	call   c00107e0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010c5e:	83 c4 28             	add    esp,0x28
c0010c61:	5b                   	pop    ebx
c0010c62:	c3                   	ret    
c0010c63:	83 ec 08             	sub    esp,0x8
c0010c66:	0f be c0             	movsx  eax,al
c0010c69:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010c6f:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010c75:	51                   	push   ecx
c0010c76:	52                   	push   edx
c0010c77:	50                   	push   eax
c0010c78:	53                   	push   ebx
c0010c79:	e8 62 fb ff ff       	call   c00107e0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010c7e:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0010c82:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0010c8a:	83 c4 28             	add    esp,0x28
c0010c8d:	5b                   	pop    ebx
c0010c8e:	e9 1b fc ff ff       	jmp    c00108ae <VgaText::incrementCursor(bool)>
c0010c93:	90                   	nop

c0010c94 <VgaText::isShowingCursor()>:
c0010c94:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010c98:	8a 80 bc 0f 00 00    	mov    al,BYTE PTR [eax+0xfbc]
c0010c9e:	c3                   	ret    
c0010c9f:	90                   	nop

c0010ca0 <VgaText::isBlinkDisabled()>:
c0010ca0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010ca4:	8a 80 bd 0f 00 00    	mov    al,BYTE PTR [eax+0xfbd]
c0010caa:	83 f0 01             	xor    eax,0x1
c0010cad:	c3                   	ret    

c0010cae <VgaText::setCursorHeight(int)>:
c0010cae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010cb2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010cb6:	89 90 b8 0f 00 00    	mov    DWORD PTR [eax+0xfb8],edx
c0010cbc:	0f b6 80 bc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfbc]
c0010cc3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010cc7:	e9 3a f9 ff ff       	jmp    c0010606 <VgaText::showCursor(bool)>

c0010ccc <VgaText::getCursorHeight()>:
c0010ccc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010cd0:	8b 80 b8 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb8]
c0010cd6:	c3                   	ret    

c0010cd7 <setActiveTerminal(VgaText*)>:
c0010cd7:	53                   	push   ebx
c0010cd8:	83 ec 08             	sub    esp,0x8
c0010cdb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010cdf:	85 db                	test   ebx,ebx
c0010ce1:	75 11                	jne    c0010cf4 <setActiveTerminal(VgaText*)+0x1d>
c0010ce3:	c7 44 24 10 6c 9c 02 c0 	mov    DWORD PTR [esp+0x10],0xc0029c6c
c0010ceb:	83 c4 08             	add    esp,0x8
c0010cee:	5b                   	pop    ebx
c0010cef:	e9 3b 93 00 00       	jmp    c001a02f <Krnl::panic(char const*)>
c0010cf4:	50                   	push   eax
c0010cf5:	50                   	push   eax
c0010cf6:	53                   	push   ebx
c0010cf7:	68 7a 9c 02 c0       	push   0xc0029c7a
c0010cfc:	e8 14 1e 00 00       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c0010d01:	a1 44 dc 02 c0       	mov    eax,ds:0xc002dc44
c0010d06:	83 c4 10             	add    esp,0x10
c0010d09:	85 c0                	test   eax,eax
c0010d0b:	74 0c                	je     c0010d19 <setActiveTerminal(VgaText*)+0x42>
c0010d0d:	83 ec 0c             	sub    esp,0xc
c0010d10:	50                   	push   eax
c0010d11:	e8 d6 f8 ff ff       	call   c00105ec <VgaText::updateCursor()>
c0010d16:	83 c4 10             	add    esp,0x10
c0010d19:	89 1d 44 dc 02 c0    	mov    DWORD PTR ds:0xc002dc44,ebx
c0010d1f:	51                   	push   ecx
c0010d20:	51                   	push   ecx
c0010d21:	53                   	push   ebx
c0010d22:	68 92 9c 02 c0       	push   0xc0029c92
c0010d27:	e8 e9 1d 00 00       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c0010d2c:	83 c4 0c             	add    esp,0xc
c0010d2f:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010d35:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010d3b:	53                   	push   ebx
c0010d3c:	e8 17 fb ff ff       	call   c0010858 <VgaText::setCursor(int, int)>
c0010d41:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010d44:	e8 57 ff ff ff       	call   c0010ca0 <VgaText::isBlinkDisabled()>
c0010d49:	5a                   	pop    edx
c0010d4a:	0f b6 c0             	movzx  eax,al
c0010d4d:	59                   	pop    ecx
c0010d4e:	50                   	push   eax
c0010d4f:	53                   	push   ebx
c0010d50:	e8 c1 f8 ff ff       	call   c0010616 <VgaText::disableBlink(bool)>
c0010d55:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010d58:	e8 6f ff ff ff       	call   c0010ccc <VgaText::getCursorHeight()>
c0010d5d:	5a                   	pop    edx
c0010d5e:	59                   	pop    ecx
c0010d5f:	50                   	push   eax
c0010d60:	53                   	push   ebx
c0010d61:	e8 48 ff ff ff       	call   c0010cae <VgaText::setCursorHeight(int)>
c0010d66:	83 c4 10             	add    esp,0x10
c0010d69:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c0010d70:	75 0a                	jne    c0010d7c <setActiveTerminal(VgaText*)+0xa5>
c0010d72:	c7 83 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff8],0x0
c0010d7c:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010d80:	83 c4 08             	add    esp,0x8
c0010d83:	5b                   	pop    ebx
c0010d84:	e9 0f f8 ff ff       	jmp    c0010598 <VgaText::load()>

c0010d89 <doTerminalCycle()>:
c0010d89:	83 ec 18             	sub    esp,0x18
c0010d8c:	a1 40 dc 02 c0       	mov    eax,ds:0xc002dc40
c0010d91:	8b 80 c0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfc0]
c0010d97:	50                   	push   eax
c0010d98:	a3 40 dc 02 c0       	mov    ds:0xc002dc40,eax
c0010d9d:	e8 35 ff ff ff       	call   c0010cd7 <setActiveTerminal(VgaText*)>
c0010da2:	83 c4 1c             	add    esp,0x1c
c0010da5:	c3                   	ret    

c0010da6 <VgaText::doUpdate()>:
c0010da6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010daa:	8b 80 04 10 00 00    	mov    eax,DWORD PTR [eax+0x1004]
c0010db0:	85 c0                	test   eax,eax
c0010db2:	74 02                	je     c0010db6 <VgaText::doUpdate()+0x10>
c0010db4:	ff e0                	jmp    eax
c0010db6:	c3                   	ret    
c0010db7:	90                   	nop

c0010db8 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0010db8:	55                   	push   ebp
c0010db9:	57                   	push   edi
c0010dba:	56                   	push   esi
c0010dbb:	53                   	push   ebx
c0010dbc:	83 ec 1c             	sub    esp,0x1c
c0010dbf:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0010dc3:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010dc8:	c6 85 1d 10 00 00 01 	mov    BYTE PTR [ebp+0x101d],0x1
c0010dcf:	8d 7d 0c             	lea    edi,[ebp+0xc]
c0010dd2:	50                   	push   eax
c0010dd3:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010dd8:	50                   	push   eax
c0010dd9:	e8 4a f9 ff ff       	call   c0010728 <VgaText::combineColours(unsigned char, unsigned char)>
c0010dde:	59                   	pop    ecx
c0010ddf:	0f b6 c0             	movzx  eax,al
c0010de2:	5b                   	pop    ebx
c0010de3:	31 c9                	xor    ecx,ecx
c0010de5:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010ded:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0010df1:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010df7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010dfb:	0f b7 db             	movzx  ebx,bx
c0010dfe:	01 db                	add    ebx,ebx
c0010e00:	01 fb                	add    ebx,edi
c0010e02:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0010e05:	84 c0                	test   al,al
c0010e07:	0f 84 38 01 00 00    	je     c0010f45 <VgaText::puts(char const*, VgaColour, VgaColour)+0x18d>
c0010e0d:	3c 0d                	cmp    al,0xd
c0010e0f:	75 0f                	jne    c0010e20 <VgaText::puts(char const*, VgaColour, VgaColour)+0x68>
c0010e11:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c0010e1b:	e9 1f 01 00 00       	jmp    c0010f3f <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010e20:	3c 0a                	cmp    al,0xa
c0010e22:	75 5b                	jne    c0010e7f <VgaText::puts(char const*, VgaColour, VgaColour)+0xc7>
c0010e24:	8b 85 b4 0f 00 00    	mov    eax,DWORD PTR [ebp+0xfb4]
c0010e2a:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c0010e34:	8d 48 01             	lea    ecx,[eax+0x1]
c0010e37:	89 8d b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],ecx
c0010e3d:	3b 8d ac 0f 00 00    	cmp    ecx,DWORD PTR [ebp+0xfac]
c0010e43:	75 12                	jne    c0010e57 <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c0010e45:	83 ec 0c             	sub    esp,0xc
c0010e48:	89 85 b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],eax
c0010e4e:	55                   	push   ebp
c0010e4f:	e8 e6 f8 ff ff       	call   c001073a <VgaText::scrollScreen()>
c0010e54:	83 c4 10             	add    esp,0x10
c0010e57:	83 ec 0c             	sub    esp,0xc
c0010e5a:	55                   	push   ebp
c0010e5b:	e8 8c f7 ff ff       	call   c00105ec <VgaText::updateCursor()>
c0010e60:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010e68:	83 c4 10             	add    esp,0x10
c0010e6b:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010e71:	31 c9                	xor    ecx,ecx
c0010e73:	0f b7 db             	movzx  ebx,bx
c0010e76:	01 db                	add    ebx,ebx
c0010e78:	01 fb                	add    ebx,edi
c0010e7a:	e9 c0 00 00 00       	jmp    c0010f3f <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010e7f:	3c 08                	cmp    al,0x8
c0010e81:	75 4e                	jne    c0010ed1 <VgaText::puts(char const*, VgaColour, VgaColour)+0x119>
c0010e83:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010e87:	53                   	push   ebx
c0010e88:	53                   	push   ebx
c0010e89:	6a 01                	push   0x1
c0010e8b:	55                   	push   ebp
c0010e8c:	e8 df fc ff ff       	call   c0010b70 <VgaText::decrementCursor(bool)>
c0010e91:	58                   	pop    eax
c0010e92:	5a                   	pop    edx
c0010e93:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010e99:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010e9f:	ff b5 cc 0f 00 00    	push   DWORD PTR [ebp+0xfcc]
c0010ea5:	ff b5 d0 0f 00 00    	push   DWORD PTR [ebp+0xfd0]
c0010eab:	6a 20                	push   0x20
c0010ead:	55                   	push   ebp
c0010eae:	e8 2d f9 ff ff       	call   c00107e0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010eb3:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010ebb:	83 c4 20             	add    esp,0x20
c0010ebe:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010ec4:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010ec8:	0f b7 db             	movzx  ebx,bx
c0010ecb:	01 db                	add    ebx,ebx
c0010ecd:	01 fb                	add    ebx,edi
c0010ecf:	eb 6e                	jmp    c0010f3f <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010ed1:	51                   	push   ecx
c0010ed2:	51                   	push   ecx
c0010ed3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010ed7:	50                   	push   eax
c0010ed8:	e8 f1 f8 ff ff       	call   c00107ce <VgaText::combineCharAndColour(char, unsigned char)>
c0010edd:	83 c4 10             	add    esp,0x10
c0010ee0:	66 89 03             	mov    WORD PTR [ebx],ax
c0010ee3:	39 2d 44 dc 02 c0    	cmp    DWORD PTR ds:0xc002dc44,ebp
c0010ee9:	75 2a                	jne    c0010f15 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010eeb:	8b 85 18 10 00 00    	mov    eax,DWORD PTR [ebp+0x1018]
c0010ef1:	85 c0                	test   eax,eax
c0010ef3:	74 20                	je     c0010f15 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010ef5:	52                   	push   edx
c0010ef6:	52                   	push   edx
c0010ef7:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010efd:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010f03:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010f07:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010f0b:	0f be 0e             	movsx  ecx,BYTE PTR [esi]
c0010f0e:	51                   	push   ecx
c0010f0f:	55                   	push   ebp
c0010f10:	ff d0                	call   eax
c0010f12:	83 c4 20             	add    esp,0x20
c0010f15:	83 c3 02             	add    ebx,0x2
c0010f18:	50                   	push   eax
c0010f19:	50                   	push   eax
c0010f1a:	6a 00                	push   0x0
c0010f1c:	55                   	push   ebp
c0010f1d:	e8 8c f9 ff ff       	call   c00108ae <VgaText::incrementCursor(bool)>
c0010f22:	83 c4 10             	add    esp,0x10
c0010f25:	83 bd b0 0f 00 00 00 	cmp    DWORD PTR [ebp+0xfb0],0x0
c0010f2c:	75 0f                	jne    c0010f3d <VgaText::puts(char const*, VgaColour, VgaColour)+0x185>
c0010f2e:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010f36:	0f b7 db             	movzx  ebx,bx
c0010f39:	01 db                	add    ebx,ebx
c0010f3b:	01 fb                	add    ebx,edi
c0010f3d:	b1 01                	mov    cl,0x1
c0010f3f:	46                   	inc    esi
c0010f40:	e9 bd fe ff ff       	jmp    c0010e02 <VgaText::puts(char const*, VgaColour, VgaColour)+0x4a>
c0010f45:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0010f49:	83 ec 0c             	sub    esp,0xc
c0010f4c:	55                   	push   ebp
c0010f4d:	e8 9a f6 ff ff       	call   c00105ec <VgaText::updateCursor()>
c0010f52:	83 c4 10             	add    esp,0x10
c0010f55:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0010f59:	84 c9                	test   cl,cl
c0010f5b:	74 0c                	je     c0010f69 <VgaText::puts(char const*, VgaColour, VgaColour)+0x1b1>
c0010f5d:	83 ec 0c             	sub    esp,0xc
c0010f60:	55                   	push   ebp
c0010f61:	e8 40 fe ff ff       	call   c0010da6 <VgaText::doUpdate()>
c0010f66:	83 c4 10             	add    esp,0x10
c0010f69:	c6 85 1d 10 00 00 00 	mov    BYTE PTR [ebp+0x101d],0x0
c0010f70:	83 c4 1c             	add    esp,0x1c
c0010f73:	5b                   	pop    ebx
c0010f74:	5e                   	pop    esi
c0010f75:	5f                   	pop    edi
c0010f76:	5d                   	pop    ebp
c0010f77:	c3                   	ret    

c0010f78 <VgaText::clearScreen()>:
c0010f78:	57                   	push   edi
c0010f79:	56                   	push   esi
c0010f7a:	31 f6                	xor    esi,esi
c0010f7c:	53                   	push   ebx
c0010f7d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010f81:	52                   	push   edx
c0010f82:	6a 00                	push   0x0
c0010f84:	6a 00                	push   0x0
c0010f86:	53                   	push   ebx
c0010f87:	e8 cc f8 ff ff       	call   c0010858 <VgaText::setCursor(int, int)>
c0010f8c:	c6 83 1d 10 00 00 01 	mov    BYTE PTR [ebx+0x101d],0x1
c0010f93:	83 c4 10             	add    esp,0x10
c0010f96:	39 b3 ac 0f 00 00    	cmp    DWORD PTR [ebx+0xfac],esi
c0010f9c:	7e 26                	jle    c0010fc4 <VgaText::clearScreen()+0x4c>
c0010f9e:	31 ff                	xor    edi,edi
c0010fa0:	50                   	push   eax
c0010fa1:	50                   	push   eax
c0010fa2:	56                   	push   esi
c0010fa3:	57                   	push   edi
c0010fa4:	47                   	inc    edi
c0010fa5:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010fab:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0010fb1:	6a 20                	push   0x20
c0010fb3:	53                   	push   ebx
c0010fb4:	e8 27 f8 ff ff       	call   c00107e0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010fb9:	83 c4 20             	add    esp,0x20
c0010fbc:	83 ff 50             	cmp    edi,0x50
c0010fbf:	75 df                	jne    c0010fa0 <VgaText::clearScreen()+0x28>
c0010fc1:	46                   	inc    esi
c0010fc2:	eb d2                	jmp    c0010f96 <VgaText::clearScreen()+0x1e>
c0010fc4:	83 ec 0c             	sub    esp,0xc
c0010fc7:	53                   	push   ebx
c0010fc8:	e8 d9 fd ff ff       	call   c0010da6 <VgaText::doUpdate()>
c0010fcd:	c6 83 1d 10 00 00 00 	mov    BYTE PTR [ebx+0x101d],0x0
c0010fd4:	83 c4 10             	add    esp,0x10
c0010fd7:	5b                   	pop    ebx
c0010fd8:	5e                   	pop    esi
c0010fd9:	5f                   	pop    edi
c0010fda:	c3                   	ret    
c0010fdb:	90                   	nop

c0010fdc <VgaText::putchar(char)>:
c0010fdc:	56                   	push   esi
c0010fdd:	53                   	push   ebx
c0010fde:	83 ec 14             	sub    esp,0x14
c0010fe1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010fe5:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010fe9:	3c 5b                	cmp    al,0x5b
c0010feb:	75 21                	jne    c001100e <VgaText::putchar(char)+0x32>
c0010fed:	80 bb dc 0f 00 00 00 	cmp    BYTE PTR [ebx+0xfdc],0x0
c0010ff4:	74 28                	je     c001101e <VgaText::putchar(char)+0x42>
c0010ff6:	66 c7 83 dc 0f 00 00 00 01 	mov    WORD PTR [ebx+0xfdc],0x100
c0010fff:	c7 83 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff0],0x0
c0011009:	e9 e2 00 00 00       	jmp    c00110f0 <VgaText::putchar(char)+0x114>
c001100e:	3c 1b                	cmp    al,0x1b
c0011010:	75 0c                	jne    c001101e <VgaText::putchar(char)+0x42>
c0011012:	c6 83 dc 0f 00 00 01 	mov    BYTE PTR [ebx+0xfdc],0x1
c0011019:	e9 d2 00 00 00       	jmp    c00110f0 <VgaText::putchar(char)+0x114>
c001101e:	8a 8b dd 0f 00 00    	mov    cl,BYTE PTR [ebx+0xfdd]
c0011024:	84 c9                	test   cl,cl
c0011026:	0f 84 ab 00 00 00    	je     c00110d7 <VgaText::putchar(char)+0xfb>
c001102c:	8d 50 c0             	lea    edx,[eax-0x40]
c001102f:	80 fa 3e             	cmp    dl,0x3e
c0011032:	0f 87 82 00 00 00    	ja     c00110ba <VgaText::putchar(char)+0xde>
c0011038:	3c 6d                	cmp    al,0x6d
c001103a:	75 4d                	jne    c0011089 <VgaText::putchar(char)+0xad>
c001103c:	31 f6                	xor    esi,esi
c001103e:	31 d2                	xor    edx,edx
c0011040:	31 c0                	xor    eax,eax
c0011042:	39 b3 f0 0f 00 00    	cmp    DWORD PTR [ebx+0xff0],esi
c0011048:	7e 30                	jle    c001107a <VgaText::putchar(char)+0x9e>
c001104a:	0f be 94 33 de 0f 00 00 	movsx  edx,BYTE PTR [ebx+esi*1+0xfde]
c0011052:	80 fa 3b             	cmp    dl,0x3b
c0011055:	75 17                	jne    c001106e <VgaText::putchar(char)+0x92>
c0011057:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001105b:	50                   	push   eax
c001105c:	53                   	push   ebx
c001105d:	e8 ee f5 ff ff       	call   c0010650 <VgaText::doANSI_SGR(int)>
c0011062:	59                   	pop    ecx
c0011063:	31 d2                	xor    edx,edx
c0011065:	58                   	pop    eax
c0011066:	31 c0                	xor    eax,eax
c0011068:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001106c:	eb 09                	jmp    c0011077 <VgaText::putchar(char)+0x9b>
c001106e:	6b c0 0a             	imul   eax,eax,0xa
c0011071:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0011075:	88 ca                	mov    dl,cl
c0011077:	46                   	inc    esi
c0011078:	eb c8                	jmp    c0011042 <VgaText::putchar(char)+0x66>
c001107a:	84 d2                	test   dl,dl
c001107c:	74 31                	je     c00110af <VgaText::putchar(char)+0xd3>
c001107e:	50                   	push   eax
c001107f:	53                   	push   ebx
c0011080:	e8 cb f5 ff ff       	call   c0010650 <VgaText::doANSI_SGR(int)>
c0011085:	58                   	pop    eax
c0011086:	5a                   	pop    edx
c0011087:	eb 26                	jmp    c00110af <VgaText::putchar(char)+0xd3>
c0011089:	3c 4a                	cmp    al,0x4a
c001108b:	75 22                	jne    c00110af <VgaText::putchar(char)+0xd3>
c001108d:	80 bb de 0f 00 00 32 	cmp    BYTE PTR [ebx+0xfde],0x32
c0011094:	75 19                	jne    c00110af <VgaText::putchar(char)+0xd3>
c0011096:	83 ec 0c             	sub    esp,0xc
c0011099:	53                   	push   ebx
c001109a:	e8 d9 fe ff ff       	call   c0010f78 <VgaText::clearScreen()>
c001109f:	83 c4 0c             	add    esp,0xc
c00110a2:	6a 00                	push   0x0
c00110a4:	6a 00                	push   0x0
c00110a6:	53                   	push   ebx
c00110a7:	e8 ac f7 ff ff       	call   c0010858 <VgaText::setCursor(int, int)>
c00110ac:	83 c4 10             	add    esp,0x10
c00110af:	66 c7 83 dc 0f 00 00 00 00 	mov    WORD PTR [ebx+0xfdc],0x0
c00110b8:	eb 36                	jmp    c00110f0 <VgaText::putchar(char)+0x114>
c00110ba:	8b 93 f0 0f 00 00    	mov    edx,DWORD PTR [ebx+0xff0]
c00110c0:	83 fa 0e             	cmp    edx,0xe
c00110c3:	7f 2b                	jg     c00110f0 <VgaText::putchar(char)+0x114>
c00110c5:	8d 4a 01             	lea    ecx,[edx+0x1]
c00110c8:	89 8b f0 0f 00 00    	mov    DWORD PTR [ebx+0xff0],ecx
c00110ce:	88 84 13 de 0f 00 00 	mov    BYTE PTR [ebx+edx*1+0xfde],al
c00110d5:	eb 19                	jmp    c00110f0 <VgaText::putchar(char)+0x114>
c00110d7:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c00110dd:	0f be c0             	movsx  eax,al
c00110e0:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c00110e6:	50                   	push   eax
c00110e7:	53                   	push   ebx
c00110e8:	e8 ab fa ff ff       	call   c0010b98 <VgaText::putchar(char, VgaColour, VgaColour)>
c00110ed:	83 c4 10             	add    esp,0x10
c00110f0:	83 c4 14             	add    esp,0x14
c00110f3:	5b                   	pop    ebx
c00110f4:	5e                   	pop    esi
c00110f5:	c3                   	ret    

c00110f6 <VgaText::puts(char const*)>:
c00110f6:	53                   	push   ebx
c00110f7:	83 ec 08             	sub    esp,0x8
c00110fa:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00110fe:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0011101:	84 c0                	test   al,al
c0011103:	74 12                	je     c0011117 <VgaText::puts(char const*)+0x21>
c0011105:	43                   	inc    ebx
c0011106:	51                   	push   ecx
c0011107:	51                   	push   ecx
c0011108:	50                   	push   eax
c0011109:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001110d:	e8 ca fe ff ff       	call   c0010fdc <VgaText::putchar(char)>
c0011112:	83 c4 10             	add    esp,0x10
c0011115:	eb e7                	jmp    c00110fe <VgaText::puts(char const*)+0x8>
c0011117:	83 c4 08             	add    esp,0x8
c001111a:	5b                   	pop    ebx
c001111b:	c3                   	ret    

c001111c <VgaText::putx(unsigned int)>:
c001111c:	57                   	push   edi
c001111d:	b9 11 00 00 00       	mov    ecx,0x11
c0011122:	56                   	push   esi
c0011123:	be ae 9c 02 c0       	mov    esi,0xc0029cae
c0011128:	53                   	push   ebx
c0011129:	83 ec 20             	sub    esp,0x20
c001112c:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0011130:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0011134:	fc                   	cld    
c0011135:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011137:	be 08 00 00 00       	mov    esi,0x8
c001113c:	50                   	push   eax
c001113d:	50                   	push   eax
c001113e:	89 d8                	mov    eax,ebx
c0011140:	c1 e3 04             	shl    ebx,0x4
c0011143:	c1 e8 1c             	shr    eax,0x1c
c0011146:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c001114b:	50                   	push   eax
c001114c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011150:	e8 87 fe ff ff       	call   c0010fdc <VgaText::putchar(char)>
c0011155:	83 c4 10             	add    esp,0x10
c0011158:	4e                   	dec    esi
c0011159:	75 e1                	jne    c001113c <VgaText::putx(unsigned int)+0x20>
c001115b:	83 c4 20             	add    esp,0x20
c001115e:	5b                   	pop    ebx
c001115f:	5e                   	pop    esi
c0011160:	5f                   	pop    edi
c0011161:	c3                   	ret    

c0011162 <VgaText::VgaText(char const*)>:
c0011162:	57                   	push   edi
c0011163:	56                   	push   esi
c0011164:	53                   	push   ebx
c0011165:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011169:	83 ec 08             	sub    esp,0x8
c001116c:	6a 00                	push   0x0
c001116e:	50                   	push   eax
c001116f:	e8 6e 05 00 00       	call   c00116e2 <UnixFile::UnixFile(int)>
c0011174:	83 c4 10             	add    esp,0x10
c0011177:	ba 14 9d 02 c0       	mov    edx,0xc0029d14
c001117c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011180:	89 10                	mov    DWORD PTR [eax],edx
c0011182:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011186:	c7 80 d4 0f 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xfd4],0x1
c0011190:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011194:	c7 80 d8 0f 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0xfd8],0xf
c001119e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111a2:	c6 80 dc 0f 00 00 00 	mov    BYTE PTR [eax+0xfdc],0x0
c00111a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111ad:	c6 80 dd 0f 00 00 00 	mov    BYTE PTR [eax+0xfdd],0x0
c00111b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111b8:	c7 80 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff0],0x0
c00111c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111c6:	c7 80 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff8],0x0
c00111d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111d4:	c6 80 1c 10 00 00 00 	mov    BYTE PTR [eax+0x101c],0x0
c00111db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111df:	c6 80 1d 10 00 00 00 	mov    BYTE PTR [eax+0x101d],0x0
c00111e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111ea:	8d 90 fc 0f 00 00    	lea    edx,[eax+0xffc]
c00111f0:	bb 20 dc 02 c0       	mov    ebx,0xc002dc20
c00111f5:	b8 08 00 00 00       	mov    eax,0x8
c00111fa:	fc                   	cld    
c00111fb:	89 d7                	mov    edi,edx
c00111fd:	89 de                	mov    esi,ebx
c00111ff:	89 c1                	mov    ecx,eax
c0011201:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0011203:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011207:	05 1e 10 00 00       	add    eax,0x101e
c001120c:	83 ec 08             	sub    esp,0x8
c001120f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011213:	50                   	push   eax
c0011214:	e8 1b f6 fe ff       	call   c0000834 <strcpy>
c0011219:	83 c4 10             	add    esp,0x10
c001121c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011220:	c7 80 ac 0f 00 00 18 00 00 00 	mov    DWORD PTR [eax+0xfac],0x18
c001122a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001122e:	83 c0 0c             	add    eax,0xc
c0011231:	83 ec 04             	sub    esp,0x4
c0011234:	68 00 0f 00 00       	push   0xf00
c0011239:	6a 00                	push   0x0
c001123b:	50                   	push   eax
c001123c:	e8 37 f5 fe ff       	call   c0000778 <memset>
c0011241:	83 c4 10             	add    esp,0x10
c0011244:	83 ec 04             	sub    esp,0x4
c0011247:	6a 00                	push   0x0
c0011249:	6a 07                	push   0x7
c001124b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001124f:	e8 b4 f4 ff ff       	call   c0010708 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0011254:	83 c4 10             	add    esp,0x10
c0011257:	83 ec 08             	sub    esp,0x8
c001125a:	6a 02                	push   0x2
c001125c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011260:	e8 49 fa ff ff       	call   c0010cae <VgaText::setCursorHeight(int)>
c0011265:	83 c4 10             	add    esp,0x10
c0011268:	83 ec 04             	sub    esp,0x4
c001126b:	6a 00                	push   0x0
c001126d:	6a 00                	push   0x0
c001126f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011273:	e8 e0 f5 ff ff       	call   c0010858 <VgaText::setCursor(int, int)>
c0011278:	83 c4 10             	add    esp,0x10
c001127b:	83 ec 08             	sub    esp,0x8
c001127e:	6a 01                	push   0x1
c0011280:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011284:	e8 7d f3 ff ff       	call   c0010606 <VgaText::showCursor(bool)>
c0011289:	83 c4 10             	add    esp,0x10
c001128c:	83 ec 08             	sub    esp,0x8
c001128f:	6a 01                	push   0x1
c0011291:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011295:	e8 7c f3 ff ff       	call   c0010616 <VgaText::disableBlink(bool)>
c001129a:	83 c4 10             	add    esp,0x10
c001129d:	83 ec 0c             	sub    esp,0xc
c00112a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112a4:	e8 cf fc ff ff       	call   c0010f78 <VgaText::clearScreen()>
c00112a9:	83 c4 10             	add    esp,0x10
c00112ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00112b0:	c6 80 f4 0f 00 00 00 	mov    BYTE PTR [eax+0xff4],0x0
c00112b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00112bb:	05 9e 10 00 00       	add    eax,0x109e
c00112c0:	83 ec 04             	sub    esp,0x4
c00112c3:	68 96 00 00 00       	push   0x96
c00112c8:	6a 00                	push   0x0
c00112ca:	50                   	push   eax
c00112cb:	e8 a8 f4 fe ff       	call   c0000778 <memset>
c00112d0:	83 c4 10             	add    esp,0x10
c00112d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00112d7:	05 34 11 00 00       	add    eax,0x1134
c00112dc:	83 ec 04             	sub    esp,0x4
c00112df:	68 2c 01 00 00       	push   0x12c
c00112e4:	6a 00                	push   0x0
c00112e6:	50                   	push   eax
c00112e7:	e8 8c f4 fe ff       	call   c0000778 <memset>
c00112ec:	83 c4 10             	add    esp,0x10
c00112ef:	90                   	nop
c00112f0:	5b                   	pop    ebx
c00112f1:	5e                   	pop    esi
c00112f2:	5f                   	pop    edi
c00112f3:	c3                   	ret    

c00112f4 <VgaText::receiveKey(unsigned char)>:
c00112f4:	55                   	push   ebp
c00112f5:	57                   	push   edi
c00112f6:	56                   	push   esi
c00112f7:	53                   	push   ebx
c00112f8:	83 ec 1c             	sub    esp,0x1c
c00112fb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00112ff:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011303:	84 db                	test   bl,bl
c0011305:	0f 84 c9 00 00 00    	je     c00113d4 <VgaText::receiveKey(unsigned char)+0xe0>
c001130b:	8d be 9e 10 00 00    	lea    edi,[esi+0x109e]
c0011311:	80 fb 08             	cmp    bl,0x8
c0011314:	75 2c                	jne    c0011342 <VgaText::receiveKey(unsigned char)+0x4e>
c0011316:	83 ec 0c             	sub    esp,0xc
c0011319:	57                   	push   edi
c001131a:	e8 75 f4 fe ff       	call   c0000794 <strlen>
c001131f:	83 c4 10             	add    esp,0x10
c0011322:	85 c0                	test   eax,eax
c0011324:	74 41                	je     c0011367 <VgaText::receiveKey(unsigned char)+0x73>
c0011326:	50                   	push   eax
c0011327:	50                   	push   eax
c0011328:	6a 08                	push   0x8
c001132a:	56                   	push   esi
c001132b:	e8 ac fc ff ff       	call   c0010fdc <VgaText::putchar(char)>
c0011330:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011333:	e8 5c f4 fe ff       	call   c0000794 <strlen>
c0011338:	c6 84 06 9d 10 00 00 00 	mov    BYTE PTR [esi+eax*1+0x109d],0x0
c0011340:	eb 22                	jmp    c0011364 <VgaText::receiveKey(unsigned char)+0x70>
c0011342:	0f be c3             	movsx  eax,bl
c0011345:	52                   	push   edx
c0011346:	52                   	push   edx
c0011347:	50                   	push   eax
c0011348:	56                   	push   esi
c0011349:	e8 8e fc ff ff       	call   c0010fdc <VgaText::putchar(char)>
c001134e:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c0011352:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0011357:	59                   	pop    ecx
c0011358:	5d                   	pop    ebp
c0011359:	8d 44 24 16          	lea    eax,[esp+0x16]
c001135d:	50                   	push   eax
c001135e:	57                   	push   edi
c001135f:	e8 10 f6 fe ff       	call   c0000974 <strcat>
c0011364:	83 c4 10             	add    esp,0x10
c0011367:	80 be 1c 10 00 00 00 	cmp    BYTE PTR [esi+0x101c],0x0
c001136e:	75 05                	jne    c0011375 <VgaText::receiveKey(unsigned char)+0x81>
c0011370:	80 fb 0a             	cmp    bl,0xa
c0011373:	75 53                	jne    c00113c8 <VgaText::receiveKey(unsigned char)+0xd4>
c0011375:	83 ec 0c             	sub    esp,0xc
c0011378:	8d 9e 34 11 00 00    	lea    ebx,[esi+0x1134]
c001137e:	53                   	push   ebx
c001137f:	e8 10 f4 fe ff       	call   c0000794 <strlen>
c0011384:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011387:	89 c5                	mov    ebp,eax
c0011389:	e8 06 f4 fe ff       	call   c0000794 <strlen>
c001138e:	83 c4 10             	add    esp,0x10
c0011391:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c0011395:	3d 2c 01 00 00       	cmp    eax,0x12c
c001139a:	76 10                	jbe    c00113ac <VgaText::receiveKey(unsigned char)+0xb8>
c001139c:	83 ec 0c             	sub    esp,0xc
c001139f:	68 bf 9c 02 c0       	push   0xc0029cbf
c00113a4:	e8 86 8c 00 00       	call   c001a02f <Krnl::panic(char const*)>
c00113a9:	83 c4 10             	add    esp,0x10
c00113ac:	50                   	push   eax
c00113ad:	50                   	push   eax
c00113ae:	57                   	push   edi
c00113af:	53                   	push   ebx
c00113b0:	e8 bf f5 fe ff       	call   c0000974 <strcat>
c00113b5:	83 c4 0c             	add    esp,0xc
c00113b8:	68 96 00 00 00       	push   0x96
c00113bd:	6a 00                	push   0x0
c00113bf:	57                   	push   edi
c00113c0:	e8 b3 f3 fe ff       	call   c0000778 <memset>
c00113c5:	83 c4 10             	add    esp,0x10
c00113c8:	83 ec 0c             	sub    esp,0xc
c00113cb:	56                   	push   esi
c00113cc:	e8 d5 f9 ff ff       	call   c0010da6 <VgaText::doUpdate()>
c00113d1:	83 c4 10             	add    esp,0x10
c00113d4:	83 c4 1c             	add    esp,0x1c
c00113d7:	5b                   	pop    ebx
c00113d8:	5e                   	pop    esi
c00113d9:	5f                   	pop    edi
c00113da:	5d                   	pop    ebp
c00113db:	c3                   	ret    

c00113dc <VgaText::write(unsigned long long, void*, int*)>:
c00113dc:	55                   	push   ebp
c00113dd:	57                   	push   edi
c00113de:	56                   	push   esi
c00113df:	53                   	push   ebx
c00113e0:	83 ec 0c             	sub    esp,0xc
c00113e3:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00113e7:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00113eb:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00113ef:	c6 86 1d 10 00 00 01 	mov    BYTE PTR [esi+0x101d],0x1
c00113f6:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c00113f9:	39 eb                	cmp    ebx,ebp
c00113fb:	74 13                	je     c0011410 <VgaText::write(unsigned long long, void*, int*)+0x34>
c00113fd:	43                   	inc    ebx
c00113fe:	50                   	push   eax
c00113ff:	50                   	push   eax
c0011400:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0011404:	50                   	push   eax
c0011405:	56                   	push   esi
c0011406:	e8 d1 fb ff ff       	call   c0010fdc <VgaText::putchar(char)>
c001140b:	83 c4 10             	add    esp,0x10
c001140e:	eb e9                	jmp    c00113f9 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0011410:	83 ec 0c             	sub    esp,0xc
c0011413:	c6 86 1d 10 00 00 00 	mov    BYTE PTR [esi+0x101d],0x0
c001141a:	56                   	push   esi
c001141b:	e8 86 f9 ff ff       	call   c0010da6 <VgaText::doUpdate()>
c0011420:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011424:	89 38                	mov    DWORD PTR [eax],edi
c0011426:	83 c4 1c             	add    esp,0x1c
c0011429:	31 c0                	xor    eax,eax
c001142b:	5b                   	pop    ebx
c001142c:	5e                   	pop    esi
c001142d:	5f                   	pop    edi
c001142e:	5d                   	pop    ebp
c001142f:	c3                   	ret    

c0011430 <newTerminal(char*)>:
c0011430:	83 ec 28             	sub    esp,0x28
c0011433:	68 60 12 00 00       	push   0x1260
c0011438:	e8 09 e4 ff ff       	call   c000f846 <malloc>
c001143d:	5a                   	pop    edx
c001143e:	59                   	pop    ecx
c001143f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0011443:	50                   	push   eax
c0011444:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011448:	e8 15 fd ff ff       	call   c0011162 <VgaText::VgaText(char const*)>
c001144d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011451:	83 c4 2c             	add    esp,0x2c
c0011454:	c3                   	ret    
c0011455:	90                   	nop

c0011456 <TSS::TSS()>:
c0011456:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001145a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011461:	90                   	nop
c0011462:	c3                   	ret    
c0011463:	90                   	nop

c0011464 <TSS::setESP(unsigned long)>:
c0011464:	55                   	push   ebp
c0011465:	89 e5                	mov    ebp,esp
c0011467:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001146a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001146d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0011470:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011473:	90                   	nop
c0011474:	5d                   	pop    ebp
c0011475:	c3                   	ret    

c0011476 <TSS::flush()>:
c0011476:	55                   	push   ebp
c0011477:	89 e5                	mov    ebp,esp
c0011479:	83 ec 10             	sub    esp,0x10
c001147c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001147f:	8b 00                	mov    eax,DWORD PTR [eax]
c0011481:	83 c8 03             	or     eax,0x3
c0011484:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0011488:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c001148c:	66 89 d0             	mov    ax,dx
c001148f:	0f 00 d8             	ltr    ax
c0011492:	90                   	nop
c0011493:	c9                   	leave  
c0011494:	c3                   	ret    
c0011495:	90                   	nop

c0011496 <TSS::setup(unsigned long, unsigned long)>:
c0011496:	55                   	push   ebp
c0011497:	89 e5                	mov    ebp,esp
c0011499:	83 ec 18             	sub    esp,0x18
c001149c:	83 ec 0c             	sub    esp,0xc
c001149f:	6a 68                	push   0x68
c00114a1:	e8 a0 e3 ff ff       	call   c000f846 <malloc>
c00114a6:	83 c4 10             	add    esp,0x10
c00114a9:	89 c2                	mov    edx,eax
c00114ab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114ae:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00114b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114b4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114b7:	83 ec 04             	sub    esp,0x4
c00114ba:	6a 68                	push   0x68
c00114bc:	6a 00                	push   0x0
c00114be:	50                   	push   eax
c00114bf:	e8 b4 f2 fe ff       	call   c0000778 <memset>
c00114c4:	83 c4 10             	add    esp,0x10
c00114c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114ca:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114cd:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c00114d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114d6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114d9:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c00114df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114e2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114e5:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00114e8:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00114eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114ee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114f1:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c00114f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114fa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114fd:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0011503:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011506:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011509:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c001150f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011512:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011515:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c001151b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001151e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011521:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0011527:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001152a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001152d:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0011533:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011536:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011539:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c001153c:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001153f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011542:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011545:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0011548:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001154b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001154e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011551:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0011558:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001155b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001155e:	0f 20 da             	mov    edx,cr3
c0011561:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0011564:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0011567:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c001156a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001156d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011570:	83 ec 08             	sub    esp,0x8
c0011573:	50                   	push   eax
c0011574:	8d 45 ec             	lea    eax,[ebp-0x14]
c0011577:	50                   	push   eax
c0011578:	e8 a7 da ff ff       	call   c000f024 <GDTEntry::setBase(unsigned int)>
c001157d:	83 c4 10             	add    esp,0x10
c0011580:	83 ec 08             	sub    esp,0x8
c0011583:	6a 68                	push   0x68
c0011585:	8d 45 ec             	lea    eax,[ebp-0x14]
c0011588:	50                   	push   eax
c0011589:	e8 b2 da ff ff       	call   c000f040 <GDTEntry::setLimit(unsigned int)>
c001158e:	83 c4 10             	add    esp,0x10
c0011591:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0011595:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0011598:	83 e0 0f             	and    eax,0xf
c001159b:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c001159e:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c00115a1:	83 c8 40             	or     eax,0x40
c00115a4:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c00115a7:	a1 68 db 02 c0       	mov    eax,ds:0xc002db68
c00115ac:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00115b2:	05 78 01 00 00       	add    eax,0x178
c00115b7:	83 ec 04             	sub    esp,0x4
c00115ba:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00115bd:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c00115c0:	50                   	push   eax
c00115c1:	e8 ae da ff ff       	call   c000f074 <GDT::addEntry(GDTEntry)>
c00115c6:	83 c4 10             	add    esp,0x10
c00115c9:	89 c2                	mov    edx,eax
c00115cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115ce:	89 10                	mov    DWORD PTR [eax],edx
c00115d0:	a1 68 db 02 c0       	mov    eax,ds:0xc002db68
c00115d5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00115db:	05 78 01 00 00       	add    eax,0x178
c00115e0:	83 ec 0c             	sub    esp,0xc
c00115e3:	50                   	push   eax
c00115e4:	e8 cf da ff ff       	call   c000f0b8 <GDT::flush()>
c00115e9:	83 c4 10             	add    esp,0x10
c00115ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115ef:	8b 00                	mov    eax,DWORD PTR [eax]
c00115f1:	83 ec 08             	sub    esp,0x8
c00115f4:	50                   	push   eax
c00115f5:	68 28 9d 02 c0       	push   0xc0029d28
c00115fa:	e8 16 15 00 00       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c00115ff:	83 c4 10             	add    esp,0x10
c0011602:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011605:	8b 00                	mov    eax,DWORD PTR [eax]
c0011607:	c9                   	leave  
c0011608:	c3                   	ret    
c0011609:	90                   	nop

c001160a <ReservedFilename::read(unsigned long long, void*, int*)>:
c001160a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001160e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011612:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011615:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c001161a:	75 08                	jne    c0011624 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c001161c:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0011622:	eb 38                	jmp    c001165c <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0011624:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011629:	75 17                	jne    c0011642 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c001162b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011630:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011633:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0011639:	8b 10                	mov    edx,DWORD PTR [eax]
c001163b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001163f:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0011642:	89 c1                	mov    ecx,eax
c0011644:	83 e1 fd             	and    ecx,0xfffffffd
c0011647:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c001164d:	74 cd                	je     c001161c <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c001164f:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0011654:	83 e0 ef             	and    eax,0xffffffef
c0011657:	83 f8 08             	cmp    eax,0x8
c001165a:	76 c0                	jbe    c001161c <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c001165c:	31 c0                	xor    eax,eax
c001165e:	c3                   	ret    
c001165f:	90                   	nop

c0011660 <ReservedFilename::isAtty()>:
c0011660:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011664:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0011667:	31 c0                	xor    eax,eax
c0011669:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c001166f:	74 09                	je     c001167a <ReservedFilename::isAtty()+0x1a>
c0011671:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0011677:	0f 94 c0             	sete   al
c001167a:	c3                   	ret    
c001167b:	90                   	nop

c001167c <ReservedFilename::write(unsigned long long, void*, int*)>:
c001167c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011680:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011684:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011687:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001168b:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0011690:	75 08                	jne    c001169a <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0011692:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0011698:	eb 3d                	jmp    c00116d7 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c001169a:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001169f:	75 17                	jne    c00116b8 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c00116a1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00116a6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00116a9:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00116af:	8b 10                	mov    edx,DWORD PTR [eax]
c00116b1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00116b5:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c00116b8:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00116bd:	75 04                	jne    c00116c3 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c00116bf:	89 0a                	mov    DWORD PTR [edx],ecx
c00116c1:	eb 14                	jmp    c00116d7 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c00116c3:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c00116c8:	74 c8                	je     c0011692 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00116ca:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00116cf:	83 e0 ef             	and    eax,0xffffffef
c00116d2:	83 f8 08             	cmp    eax,0x8
c00116d5:	76 bb                	jbe    c0011692 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00116d7:	31 c0                	xor    eax,eax
c00116d9:	c3                   	ret    

c00116da <UnixFile::getFileDescriptor()>:
c00116da:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00116de:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00116e1:	c3                   	ret    

c00116e2 <UnixFile::UnixFile(int)>:
c00116e2:	53                   	push   ebx
c00116e3:	83 ec 28             	sub    esp,0x28
c00116e6:	ba 14 9e 02 c0       	mov    edx,0xc0029e14
c00116eb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00116ef:	89 10                	mov    DWORD PTR [eax],edx
c00116f1:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c00116f9:	0f 8f 8c 01 00 00    	jg     c001188b <UnixFile::UnixFile(int)+0x1a9>
c00116ff:	a1 00 cb 02 c0       	mov    eax,ds:0xc002cb00
c0011704:	8d 50 01             	lea    edx,[eax+0x1]
c0011707:	89 15 00 cb 02 c0    	mov    DWORD PTR ds:0xc002cb00,edx
c001170d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011711:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011714:	83 ec 08             	sub    esp,0x8
c0011717:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001171b:	68 d8 dc 02 c0       	push   0xc002dcd8
c0011720:	e8 eb 68 01 00       	call   c0028010 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0011725:	83 c4 10             	add    esp,0x10
c0011728:	a0 d4 dc 02 c0       	mov    al,ds:0xc002dcd4
c001172d:	83 f0 01             	xor    eax,0x1
c0011730:	84 c0                	test   al,al
c0011732:	0f 84 54 01 00 00    	je     c001188c <UnixFile::UnixFile(int)+0x1aa>
c0011738:	c6 05 d4 dc 02 c0 01 	mov    BYTE PTR ds:0xc002dcd4,0x1
c001173f:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0011747:	83 ec 0c             	sub    esp,0xc
c001174a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001174e:	e8 f3 e0 ff ff       	call   c000f846 <malloc>
c0011753:	83 c4 10             	add    esp,0x10
c0011756:	89 c3                	mov    ebx,eax
c0011758:	83 ec 08             	sub    esp,0x8
c001175b:	68 03 ff ff 0f       	push   0xfffff03
c0011760:	53                   	push   ebx
c0011761:	e8 2c 01 00 00       	call   c0011892 <ReservedFilename::ReservedFilename(int)>
c0011766:	83 c4 10             	add    esp,0x10
c0011769:	89 1d cc dc 02 c0    	mov    DWORD PTR ds:0xc002dccc,ebx
c001176f:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0011777:	83 ec 0c             	sub    esp,0xc
c001177a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001177e:	e8 c3 e0 ff ff       	call   c000f846 <malloc>
c0011783:	83 c4 10             	add    esp,0x10
c0011786:	89 c3                	mov    ebx,eax
c0011788:	83 ec 08             	sub    esp,0x8
c001178b:	68 01 ff ff 0f       	push   0xfffff01
c0011790:	53                   	push   ebx
c0011791:	e8 fc 00 00 00       	call   c0011892 <ReservedFilename::ReservedFilename(int)>
c0011796:	83 c4 10             	add    esp,0x10
c0011799:	89 1d d0 dc 02 c0    	mov    DWORD PTR ds:0xc002dcd0,ebx
c001179f:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c00117a7:	83 ec 0c             	sub    esp,0xc
c00117aa:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00117ae:	e8 93 e0 ff ff       	call   c000f846 <malloc>
c00117b3:	83 c4 10             	add    esp,0x10
c00117b6:	89 c3                	mov    ebx,eax
c00117b8:	83 ec 08             	sub    esp,0x8
c00117bb:	68 00 ff ff 0f       	push   0xfffff00
c00117c0:	53                   	push   ebx
c00117c1:	e8 cc 00 00 00       	call   c0011892 <ReservedFilename::ReservedFilename(int)>
c00117c6:	83 c4 10             	add    esp,0x10
c00117c9:	89 1d c4 dc 02 c0    	mov    DWORD PTR ds:0xc002dcc4,ebx
c00117cf:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c00117d7:	83 ec 0c             	sub    esp,0xc
c00117da:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00117de:	e8 63 e0 ff ff       	call   c000f846 <malloc>
c00117e3:	83 c4 10             	add    esp,0x10
c00117e6:	89 c3                	mov    ebx,eax
c00117e8:	83 ec 08             	sub    esp,0x8
c00117eb:	68 02 ff ff 0f       	push   0xfffff02
c00117f0:	53                   	push   ebx
c00117f1:	e8 9c 00 00 00       	call   c0011892 <ReservedFilename::ReservedFilename(int)>
c00117f6:	83 c4 10             	add    esp,0x10
c00117f9:	89 1d c8 dc 02 c0    	mov    DWORD PTR ds:0xc002dcc8,ebx
c00117ff:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011807:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c001180c:	7f 7e                	jg     c001188c <UnixFile::UnixFile(int)+0x1aa>
c001180e:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0011816:	83 ec 0c             	sub    esp,0xc
c0011819:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001181d:	e8 24 e0 ff ff       	call   c000f846 <malloc>
c0011822:	83 c4 10             	add    esp,0x10
c0011825:	89 c3                	mov    ebx,eax
c0011827:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001182b:	05 10 ff ff 0f       	add    eax,0xfffff10
c0011830:	83 ec 08             	sub    esp,0x8
c0011833:	50                   	push   eax
c0011834:	53                   	push   ebx
c0011835:	e8 58 00 00 00       	call   c0011892 <ReservedFilename::ReservedFilename(int)>
c001183a:	83 c4 10             	add    esp,0x10
c001183d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011841:	89 1c 85 a0 dc 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2360],ebx
c0011848:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0011850:	83 ec 0c             	sub    esp,0xc
c0011853:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011857:	e8 ea df ff ff       	call   c000f846 <malloc>
c001185c:	83 c4 10             	add    esp,0x10
c001185f:	89 c3                	mov    ebx,eax
c0011861:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011865:	05 20 ff ff 0f       	add    eax,0xfffff20
c001186a:	83 ec 08             	sub    esp,0x8
c001186d:	50                   	push   eax
c001186e:	53                   	push   ebx
c001186f:	e8 1e 00 00 00       	call   c0011892 <ReservedFilename::ReservedFilename(int)>
c0011874:	83 c4 10             	add    esp,0x10
c0011877:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001187b:	89 1c 85 60 dc 02 c0 	mov    DWORD PTR [eax*4-0x3ffd23a0],ebx
c0011882:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011886:	e9 7c ff ff ff       	jmp    c0011807 <UnixFile::UnixFile(int)+0x125>
c001188b:	90                   	nop
c001188c:	83 c4 28             	add    esp,0x28
c001188f:	5b                   	pop    ebx
c0011890:	c3                   	ret    
c0011891:	90                   	nop

c0011892 <ReservedFilename::ReservedFilename(int)>:
c0011892:	83 ec 0c             	sub    esp,0xc
c0011895:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011899:	83 ec 08             	sub    esp,0x8
c001189c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00118a0:	50                   	push   eax
c00118a1:	e8 3c fe ff ff       	call   c00116e2 <UnixFile::UnixFile(int)>
c00118a6:	83 c4 10             	add    esp,0x10
c00118a9:	ba 30 9e 02 c0       	mov    edx,0xc0029e30
c00118ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118b2:	89 10                	mov    DWORD PTR [eax],edx
c00118b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118b8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00118bc:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00118bf:	90                   	nop
c00118c0:	83 c4 0c             	add    esp,0xc
c00118c3:	c3                   	ret    

c00118c4 <UnixFile::~UnixFile()>:
c00118c4:	83 ec 1c             	sub    esp,0x1c
c00118c7:	ba 14 9e 02 c0       	mov    edx,0xc0029e14
c00118cc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00118d0:	89 10                	mov    DWORD PTR [eax],edx
c00118d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00118d6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00118d9:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c00118de:	7f 73                	jg     c0011953 <UnixFile::~UnixFile()+0x8f>
c00118e0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00118e8:	83 ec 0c             	sub    esp,0xc
c00118eb:	68 d8 dc 02 c0       	push   0xc002dcd8
c00118f0:	e8 ef 67 01 00       	call   c00280e4 <LinkedList<UnixFile>::getFirstElement()>
c00118f5:	83 c4 10             	add    esp,0x10
c00118f8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00118fc:	83 ec 0c             	sub    esp,0xc
c00118ff:	68 d8 dc 02 c0       	push   0xc002dcd8
c0011904:	e8 e3 67 01 00       	call   c00280ec <LinkedList<UnixFile>::removeFirst()>
c0011909:	83 c4 10             	add    esp,0x10
c001190c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011910:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0011914:	74 40                	je     c0011956 <UnixFile::~UnixFile()+0x92>
c0011916:	83 ec 08             	sub    esp,0x8
c0011919:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001191d:	68 d8 dc 02 c0       	push   0xc002dcd8
c0011922:	e8 e9 66 01 00       	call   c0028010 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0011927:	83 c4 10             	add    esp,0x10
c001192a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001192e:	8d 50 01             	lea    edx,[eax+0x1]
c0011931:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011935:	3d 88 13 00 00       	cmp    eax,0x1388
c001193a:	0f 94 c0             	sete   al
c001193d:	84 c0                	test   al,al
c001193f:	74 a7                	je     c00118e8 <UnixFile::~UnixFile()+0x24>
c0011941:	83 ec 0c             	sub    esp,0xc
c0011944:	68 ec 9d 02 c0       	push   0xc0029dec
c0011949:	e8 e1 86 00 00       	call   c001a02f <Krnl::panic(char const*)>
c001194e:	83 c4 10             	add    esp,0x10
c0011951:	eb 95                	jmp    c00118e8 <UnixFile::~UnixFile()+0x24>
c0011953:	90                   	nop
c0011954:	eb 01                	jmp    c0011957 <UnixFile::~UnixFile()+0x93>
c0011956:	90                   	nop
c0011957:	90                   	nop
c0011958:	83 c4 1c             	add    esp,0x1c
c001195b:	c3                   	ret    

c001195c <UnixFile::~UnixFile()>:
c001195c:	83 ec 0c             	sub    esp,0xc
c001195f:	83 ec 0c             	sub    esp,0xc
c0011962:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011966:	e8 59 ff ff ff       	call   c00118c4 <UnixFile::~UnixFile()>
c001196b:	83 c4 10             	add    esp,0x10
c001196e:	83 ec 08             	sub    esp,0x8
c0011971:	6a 0c                	push   0xc
c0011973:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011977:	e8 b9 10 00 00       	call   c0012a35 <operator delete(void*, unsigned long)>
c001197c:	83 c4 10             	add    esp,0x10
c001197f:	83 c4 0c             	add    esp,0xc
c0011982:	c3                   	ret    
c0011983:	90                   	nop

c0011984 <ReservedFilename::~ReservedFilename()>:
c0011984:	83 ec 0c             	sub    esp,0xc
c0011987:	ba 30 9e 02 c0       	mov    edx,0xc0029e30
c001198c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011990:	89 10                	mov    DWORD PTR [eax],edx
c0011992:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011996:	83 ec 0c             	sub    esp,0xc
c0011999:	50                   	push   eax
c001199a:	e8 25 ff ff ff       	call   c00118c4 <UnixFile::~UnixFile()>
c001199f:	83 c4 10             	add    esp,0x10
c00119a2:	90                   	nop
c00119a3:	83 c4 0c             	add    esp,0xc
c00119a6:	c3                   	ret    
c00119a7:	90                   	nop

c00119a8 <ReservedFilename::~ReservedFilename()>:
c00119a8:	83 ec 0c             	sub    esp,0xc
c00119ab:	83 ec 0c             	sub    esp,0xc
c00119ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00119b2:	e8 cd ff ff ff       	call   c0011984 <ReservedFilename::~ReservedFilename()>
c00119b7:	83 c4 10             	add    esp,0x10
c00119ba:	83 ec 08             	sub    esp,0x8
c00119bd:	6a 0c                	push   0xc
c00119bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00119c3:	e8 6d 10 00 00       	call   c0012a35 <operator delete(void*, unsigned long)>
c00119c8:	83 c4 10             	add    esp,0x10
c00119cb:	83 c4 0c             	add    esp,0xc
c00119ce:	c3                   	ret    

c00119cf <getFromFileDescriptor(int)>:
c00119cf:	53                   	push   ebx
c00119d0:	83 ec 08             	sub    esp,0x8
c00119d3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00119d7:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c00119dd:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c00119e3:	7f 2c                	jg     c0011a11 <getFromFileDescriptor(int)+0x42>
c00119e5:	83 ec 0c             	sub    esp,0xc
c00119e8:	68 d8 dc 02 c0       	push   0xc002dcd8
c00119ed:	e8 f2 66 01 00       	call   c00280e4 <LinkedList<UnixFile>::getFirstElement()>
c00119f2:	83 c4 10             	add    esp,0x10
c00119f5:	85 c0                	test   eax,eax
c00119f7:	75 04                	jne    c00119fd <getFromFileDescriptor(int)+0x2e>
c00119f9:	31 c0                	xor    eax,eax
c00119fb:	eb 6e                	jmp    c0011a6b <getFromFileDescriptor(int)+0x9c>
c00119fd:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0011a00:	74 69                	je     c0011a6b <getFromFileDescriptor(int)+0x9c>
c0011a02:	52                   	push   edx
c0011a03:	52                   	push   edx
c0011a04:	50                   	push   eax
c0011a05:	68 d8 dc 02 c0       	push   0xc002dcd8
c0011a0a:	e8 7f 67 01 00       	call   c002818e <LinkedList<UnixFile>::getNext(UnixFile*)>
c0011a0f:	eb e1                	jmp    c00119f2 <getFromFileDescriptor(int)+0x23>
c0011a11:	a1 cc dc 02 c0       	mov    eax,ds:0xc002dccc
c0011a16:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0011a1c:	74 4d                	je     c0011a6b <getFromFileDescriptor(int)+0x9c>
c0011a1e:	a1 d0 dc 02 c0       	mov    eax,ds:0xc002dcd0
c0011a23:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0011a29:	74 40                	je     c0011a6b <getFromFileDescriptor(int)+0x9c>
c0011a2b:	a1 c8 dc 02 c0       	mov    eax,ds:0xc002dcc8
c0011a30:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c0011a36:	74 33                	je     c0011a6b <getFromFileDescriptor(int)+0x9c>
c0011a38:	a1 c4 dc 02 c0       	mov    eax,ds:0xc002dcc4
c0011a3d:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0011a43:	74 26                	je     c0011a6b <getFromFileDescriptor(int)+0x9c>
c0011a45:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0011a4b:	83 f8 08             	cmp    eax,0x8
c0011a4e:	77 09                	ja     c0011a59 <getFromFileDescriptor(int)+0x8a>
c0011a50:	8b 04 85 a0 dc 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2360]
c0011a57:	eb 12                	jmp    c0011a6b <getFromFileDescriptor(int)+0x9c>
c0011a59:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0011a5f:	83 fb 08             	cmp    ebx,0x8
c0011a62:	77 95                	ja     c00119f9 <getFromFileDescriptor(int)+0x2a>
c0011a64:	8b 04 9d 60 dc 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd23a0]
c0011a6b:	83 c4 08             	add    esp,0x8
c0011a6e:	5b                   	pop    ebx
c0011a6f:	c3                   	ret    

c0011a70 <__static_initialization_and_destruction_0(int, int)>:
c0011a70:	83 ec 0c             	sub    esp,0xc
c0011a73:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0011a78:	75 34                	jne    c0011aae <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011a7a:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0011a82:	75 2a                	jne    c0011aae <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011a84:	83 ec 0c             	sub    esp,0xc
c0011a87:	68 d8 dc 02 c0       	push   0xc002dcd8
c0011a8c:	e8 27 65 01 00       	call   c0027fb8 <LinkedList<UnixFile>::LinkedList()>
c0011a91:	83 c4 10             	add    esp,0x10
c0011a94:	83 ec 04             	sub    esp,0x4
c0011a97:	68 84 ca 02 c0       	push   0xc002ca84
c0011a9c:	68 d8 dc 02 c0       	push   0xc002dcd8
c0011aa1:	68 b6 7f 02 c0       	push   0xc0027fb6
c0011aa6:	e8 04 0f 00 00       	call   c00129af <__cxa_atexit>
c0011aab:	83 c4 10             	add    esp,0x10
c0011aae:	90                   	nop
c0011aaf:	83 c4 0c             	add    esp,0xc
c0011ab2:	c3                   	ret    

c0011ab3 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0011ab3:	83 ec 0c             	sub    esp,0xc
c0011ab6:	83 ec 08             	sub    esp,0x8
c0011ab9:	68 ff ff 00 00       	push   0xffff
c0011abe:	6a 01                	push   0x1
c0011ac0:	e8 ab ff ff ff       	call   c0011a70 <__static_initialization_and_destruction_0(int, int)>
c0011ac5:	83 c4 10             	add    esp,0x10
c0011ac8:	83 c4 0c             	add    esp,0xc
c0011acb:	c3                   	ret    

c0011acc <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0011acc:	53                   	push   ebx
c0011acd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011ad1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011ad5:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c0011adb:	89 c8                	mov    eax,ecx
c0011add:	d1 e8                	shr    eax,1
c0011adf:	03 05 08 cb 02 c0    	add    eax,DWORD PTR ds:0xc002cb08
c0011ae5:	83 e1 01             	and    ecx,0x1
c0011ae8:	8a 10                	mov    dl,BYTE PTR [eax]
c0011aea:	75 09                	jne    c0011af5 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c0011aec:	83 e2 f0             	and    edx,0xfffffff0
c0011aef:	09 da                	or     edx,ebx
c0011af1:	88 10                	mov    BYTE PTR [eax],dl
c0011af3:	5b                   	pop    ebx
c0011af4:	c3                   	ret    
c0011af5:	c1 e3 04             	shl    ebx,0x4
c0011af8:	83 e2 0f             	and    edx,0xf
c0011afb:	09 da                	or     edx,ebx
c0011afd:	88 10                	mov    BYTE PTR [eax],dl
c0011aff:	5b                   	pop    ebx
c0011b00:	c3                   	ret    

c0011b01 <Virt::getPageState(unsigned long)>:
c0011b01:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011b05:	8b 0d 08 cb 02 c0    	mov    ecx,DWORD PTR ds:0xc002cb08
c0011b0b:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0011b11:	89 d0                	mov    eax,edx
c0011b13:	d1 e8                	shr    eax,1
c0011b15:	83 e2 01             	and    edx,0x1
c0011b18:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0011b1b:	75 04                	jne    c0011b21 <Virt::getPageState(unsigned long)+0x20>
c0011b1d:	83 e0 0f             	and    eax,0xf
c0011b20:	c3                   	ret    
c0011b21:	c0 e8 04             	shr    al,0x4
c0011b24:	c3                   	ret    

c0011b25 <Virt::allocateKernelVirtualPages(int)>:
c0011b25:	55                   	push   ebp
c0011b26:	31 ed                	xor    ebp,ebp
c0011b28:	57                   	push   edi
c0011b29:	56                   	push   esi
c0011b2a:	53                   	push   ebx
c0011b2b:	31 db                	xor    ebx,ebx
c0011b2d:	83 ec 1c             	sub    esp,0x1c
c0011b30:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011b34:	8b 3d 04 cb 02 c0    	mov    edi,DWORD PTR ds:0xc002cb04
c0011b3a:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0011b3f:	57                   	push   edi
c0011b40:	e8 bc ff ff ff       	call   c0011b01 <Virt::getPageState(unsigned long)>
c0011b45:	5a                   	pop    edx
c0011b46:	84 c0                	test   al,al
c0011b48:	75 3a                	jne    c0011b84 <Virt::allocateKernelVirtualPages(int)+0x5f>
c0011b4a:	85 db                	test   ebx,ebx
c0011b4c:	75 02                	jne    c0011b50 <Virt::allocateKernelVirtualPages(int)+0x2b>
c0011b4e:	89 fd                	mov    ebp,edi
c0011b50:	43                   	inc    ebx
c0011b51:	39 f3                	cmp    ebx,esi
c0011b53:	74 5a                	je     c0011baf <Virt::allocateKernelVirtualPages(int)+0x8a>
c0011b55:	47                   	inc    edi
c0011b56:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011b5c:	76 31                	jbe    c0011b8f <Virt::allocateKernelVirtualPages(int)+0x6a>
c0011b5e:	c7 05 04 cb 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc002cb04,0xc8000
c0011b68:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0011b6d:	75 28                	jne    c0011b97 <Virt::allocateKernelVirtualPages(int)+0x72>
c0011b6f:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0011b74:	bf 00 80 0c 00       	mov    edi,0xc8000
c0011b79:	57                   	push   edi
c0011b7a:	e8 82 ff ff ff       	call   c0011b01 <Virt::getPageState(unsigned long)>
c0011b7f:	5a                   	pop    edx
c0011b80:	84 c0                	test   al,al
c0011b82:	74 c6                	je     c0011b4a <Virt::allocateKernelVirtualPages(int)+0x25>
c0011b84:	31 db                	xor    ebx,ebx
c0011b86:	47                   	inc    edi
c0011b87:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011b8d:	77 cf                	ja     c0011b5e <Virt::allocateKernelVirtualPages(int)+0x39>
c0011b8f:	89 3d 04 cb 02 c0    	mov    DWORD PTR ds:0xc002cb04,edi
c0011b95:	eb a8                	jmp    c0011b3f <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011b97:	83 ec 0c             	sub    esp,0xc
c0011b9a:	68 44 9e 02 c0       	push   0xc0029e44
c0011b9f:	e8 8b 84 00 00       	call   c001a02f <Krnl::panic(char const*)>
c0011ba4:	8b 3d 04 cb 02 c0    	mov    edi,DWORD PTR ds:0xc002cb04
c0011baa:	83 c4 10             	add    esp,0x10
c0011bad:	eb 90                	jmp    c0011b3f <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011baf:	89 2d 04 cb 02 c0    	mov    DWORD PTR ds:0xc002cb04,ebp
c0011bb5:	4b                   	dec    ebx
c0011bb6:	74 5f                	je     c0011c17 <Virt::allocateKernelVirtualPages(int)+0xf2>
c0011bb8:	85 f6                	test   esi,esi
c0011bba:	74 3d                	je     c0011bf9 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011bbc:	89 e8                	mov    eax,ebp
c0011bbe:	31 db                	xor    ebx,ebx
c0011bc0:	8d 7e ff             	lea    edi,[esi-0x1]
c0011bc3:	eb 14                	jmp    c0011bd9 <Virt::allocateKernelVirtualPages(int)+0xb4>
c0011bc5:	6a 01                	push   0x1
c0011bc7:	43                   	inc    ebx
c0011bc8:	50                   	push   eax
c0011bc9:	e8 fe fe ff ff       	call   c0011acc <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011bce:	58                   	pop    eax
c0011bcf:	39 f3                	cmp    ebx,esi
c0011bd1:	5a                   	pop    edx
c0011bd2:	74 25                	je     c0011bf9 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011bd4:	a1 04 cb 02 c0       	mov    eax,ds:0xc002cb04
c0011bd9:	8d 50 01             	lea    edx,[eax+0x1]
c0011bdc:	85 db                	test   ebx,ebx
c0011bde:	89 15 04 cb 02 c0    	mov    DWORD PTR ds:0xc002cb04,edx
c0011be4:	74 20                	je     c0011c06 <Virt::allocateKernelVirtualPages(int)+0xe1>
c0011be6:	39 df                	cmp    edi,ebx
c0011be8:	75 db                	jne    c0011bc5 <Virt::allocateKernelVirtualPages(int)+0xa0>
c0011bea:	6a 03                	push   0x3
c0011bec:	43                   	inc    ebx
c0011bed:	50                   	push   eax
c0011bee:	e8 d9 fe ff ff       	call   c0011acc <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011bf3:	59                   	pop    ecx
c0011bf4:	39 f3                	cmp    ebx,esi
c0011bf6:	58                   	pop    eax
c0011bf7:	75 db                	jne    c0011bd4 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011bf9:	83 c4 1c             	add    esp,0x1c
c0011bfc:	89 e8                	mov    eax,ebp
c0011bfe:	5b                   	pop    ebx
c0011bff:	c1 e0 0c             	shl    eax,0xc
c0011c02:	5e                   	pop    esi
c0011c03:	5f                   	pop    edi
c0011c04:	5d                   	pop    ebp
c0011c05:	c3                   	ret    
c0011c06:	6a 02                	push   0x2
c0011c08:	bb 01 00 00 00       	mov    ebx,0x1
c0011c0d:	50                   	push   eax
c0011c0e:	e8 b9 fe ff ff       	call   c0011acc <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c13:	58                   	pop    eax
c0011c14:	5a                   	pop    edx
c0011c15:	eb bd                	jmp    c0011bd4 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011c17:	6a 04                	push   0x4
c0011c19:	8d 45 01             	lea    eax,[ebp+0x1]
c0011c1c:	55                   	push   ebp
c0011c1d:	a3 04 cb 02 c0       	mov    ds:0xc002cb04,eax
c0011c22:	e8 a5 fe ff ff       	call   c0011acc <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c27:	59                   	pop    ecx
c0011c28:	89 e8                	mov    eax,ebp
c0011c2a:	5b                   	pop    ebx
c0011c2b:	c1 e0 0c             	shl    eax,0xc
c0011c2e:	83 c4 1c             	add    esp,0x1c
c0011c31:	5b                   	pop    ebx
c0011c32:	5e                   	pop    esi
c0011c33:	5f                   	pop    edi
c0011c34:	5d                   	pop    ebp
c0011c35:	c3                   	ret    

c0011c36 <Virt::virtualMemorySetup()>:
c0011c36:	53                   	push   ebx
c0011c37:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011c3c:	83 ec 08             	sub    esp,0x8
c0011c3f:	6a 0f                	push   0xf
c0011c41:	53                   	push   ebx
c0011c42:	43                   	inc    ebx
c0011c43:	e8 84 fe ff ff       	call   c0011acc <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c48:	59                   	pop    ecx
c0011c49:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011c4f:	58                   	pop    eax
c0011c50:	75 ed                	jne    c0011c3f <Virt::virtualMemorySetup()+0x9>
c0011c52:	83 ec 08             	sub    esp,0x8
c0011c55:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011c5a:	68 00 00 00 c8       	push   0xc8000000
c0011c5f:	68 cb 9f 02 c0       	push   0xc0029fcb
c0011c64:	e8 ac 0e 00 00       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c0011c69:	58                   	pop    eax
c0011c6a:	5a                   	pop    edx
c0011c6b:	68 00 f0 ff ef       	push   0xeffff000
c0011c70:	68 df 9f 02 c0       	push   0xc0029fdf
c0011c75:	e8 9b 0e 00 00       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c0011c7a:	83 c4 10             	add    esp,0x10
c0011c7d:	83 ec 08             	sub    esp,0x8
c0011c80:	6a 00                	push   0x0
c0011c82:	53                   	push   ebx
c0011c83:	43                   	inc    ebx
c0011c84:	e8 43 fe ff ff       	call   c0011acc <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c89:	83 c4 10             	add    esp,0x10
c0011c8c:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011c92:	75 e9                	jne    c0011c7d <Virt::virtualMemorySetup()+0x47>
c0011c94:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0011c99:	83 ec 08             	sub    esp,0x8
c0011c9c:	6a 0f                	push   0xf
c0011c9e:	53                   	push   ebx
c0011c9f:	43                   	inc    ebx
c0011ca0:	e8 27 fe ff ff       	call   c0011acc <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011ca5:	83 c4 10             	add    esp,0x10
c0011ca8:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0011cae:	75 e9                	jne    c0011c99 <Virt::virtualMemorySetup()+0x63>
c0011cb0:	83 c4 08             	add    esp,0x8
c0011cb3:	5b                   	pop    ebx
c0011cb4:	c3                   	ret    

c0011cb5 <Virt::getAKernelVAS()>:
c0011cb5:	a1 e4 dc 02 c0       	mov    eax,ds:0xc002dce4
c0011cba:	c3                   	ret    

c0011cbb <Virt::setupPageSwapping(int)>:
c0011cbb:	57                   	push   edi
c0011cbc:	56                   	push   esi
c0011cbd:	53                   	push   ebx
c0011cbe:	83 ec 1c             	sub    esp,0x1c
c0011cc1:	68 14 01 00 00       	push   0x114
c0011cc6:	e8 7b db ff ff       	call   c000f846 <malloc>
c0011ccb:	83 c4 0c             	add    esp,0xc
c0011cce:	89 c6                	mov    esi,eax
c0011cd0:	ff 35 d4 10 03 c0    	push   DWORD PTR ds:0xc00310d4
c0011cd6:	68 f3 9f 02 c0       	push   0xc0029ff3
c0011cdb:	50                   	push   eax
c0011cdc:	e8 8d 13 00 00       	call   c001306e <File::File(char const*, Process*)>
c0011ce1:	89 34 24             	mov    DWORD PTR [esp],esi
c0011ce4:	e8 61 15 00 00       	call   c001324a <File::unlink()>
c0011ce9:	58                   	pop    eax
c0011cea:	5a                   	pop    edx
c0011ceb:	6a 12                	push   0x12
c0011ced:	56                   	push   esi
c0011cee:	e8 df 13 00 00       	call   c00130d2 <File::open(FileOpenMode)>
c0011cf3:	83 c4 10             	add    esp,0x10
c0011cf6:	85 c0                	test   eax,eax
c0011cf8:	0f 85 ca 00 00 00    	jne    c0011dc8 <Virt::setupPageSwapping(int)+0x10d>
c0011cfe:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011d02:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011d0a:	c1 e3 08             	shl    ebx,0x8
c0011d0d:	83 ec 0c             	sub    esp,0xc
c0011d10:	68 00 00 01 00       	push   0x10000
c0011d15:	e8 2c db ff ff       	call   c000f846 <malloc>
c0011d1a:	83 c4 0c             	add    esp,0xc
c0011d1d:	89 c7                	mov    edi,eax
c0011d1f:	68 00 00 01 00       	push   0x10000
c0011d24:	6a 00                	push   0x0
c0011d26:	50                   	push   eax
c0011d27:	e8 4c ea fe ff       	call   c0000778 <memset>
c0011d2c:	83 c4 10             	add    esp,0x10
c0011d2f:	85 db                	test   ebx,ebx
c0011d31:	79 03                	jns    c0011d36 <Virt::setupPageSwapping(int)+0x7b>
c0011d33:	83 c3 0f             	add    ebx,0xf
c0011d36:	c1 fb 04             	sar    ebx,0x4
c0011d39:	4b                   	dec    ebx
c0011d3a:	83 fb ff             	cmp    ebx,0xffffffff
c0011d3d:	74 4b                	je     c0011d8a <Virt::setupPageSwapping(int)+0xcf>
c0011d3f:	83 ec 0c             	sub    esp,0xc
c0011d42:	8b 06                	mov    eax,DWORD PTR [esi]
c0011d44:	8d 54 24 18          	lea    edx,[esp+0x18]
c0011d48:	52                   	push   edx
c0011d49:	57                   	push   edi
c0011d4a:	6a 00                	push   0x0
c0011d4c:	68 00 00 01 00       	push   0x10000
c0011d51:	56                   	push   esi
c0011d52:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0011d55:	83 c4 20             	add    esp,0x20
c0011d58:	85 c0                	test   eax,eax
c0011d5a:	75 59                	jne    c0011db5 <Virt::setupPageSwapping(int)+0xfa>
c0011d5c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011d60:	3d 00 00 01 00       	cmp    eax,0x10000
c0011d65:	74 d2                	je     c0011d39 <Virt::setupPageSwapping(int)+0x7e>
c0011d67:	83 ec 08             	sub    esp,0x8
c0011d6a:	4b                   	dec    ebx
c0011d6b:	50                   	push   eax
c0011d6c:	68 46 a0 02 c0       	push   0xc002a046
c0011d71:	e8 9f 0d 00 00       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c0011d76:	c7 04 24 4f a0 02 c0 	mov    DWORD PTR [esp],0xc002a04f
c0011d7d:	e8 ad 82 00 00       	call   c001a02f <Krnl::panic(char const*)>
c0011d82:	83 c4 10             	add    esp,0x10
c0011d85:	83 fb ff             	cmp    ebx,0xffffffff
c0011d88:	75 b5                	jne    c0011d3f <Virt::setupPageSwapping(int)+0x84>
c0011d8a:	83 ec 0c             	sub    esp,0xc
c0011d8d:	56                   	push   esi
c0011d8e:	e8 9d 13 00 00       	call   c0013130 <File::close()>
c0011d93:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011d96:	e8 cb da ff ff       	call   c000f866 <rfree>
c0011d9b:	83 c4 10             	add    esp,0x10
c0011d9e:	85 f6                	test   esi,esi
c0011da0:	74 0c                	je     c0011dae <Virt::setupPageSwapping(int)+0xf3>
c0011da2:	83 ec 0c             	sub    esp,0xc
c0011da5:	8b 06                	mov    eax,DWORD PTR [esi]
c0011da7:	56                   	push   esi
c0011da8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011dab:	83 c4 10             	add    esp,0x10
c0011dae:	83 c4 10             	add    esp,0x10
c0011db1:	5b                   	pop    ebx
c0011db2:	5e                   	pop    esi
c0011db3:	5f                   	pop    edi
c0011db4:	c3                   	ret    
c0011db5:	83 ec 08             	sub    esp,0x8
c0011db8:	50                   	push   eax
c0011db9:	68 2e a0 02 c0       	push   0xc002a02e
c0011dbe:	e8 52 0d 00 00       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c0011dc3:	83 c4 10             	add    esp,0x10
c0011dc6:	eb 94                	jmp    c0011d5c <Virt::setupPageSwapping(int)+0xa1>
c0011dc8:	83 ec 08             	sub    esp,0x8
c0011dcb:	50                   	push   eax
c0011dcc:	68 0a a0 02 c0       	push   0xc002a00a
c0011dd1:	e8 3f 0d 00 00       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c0011dd6:	c7 04 24 13 a0 02 c0 	mov    DWORD PTR [esp],0xc002a013
c0011ddd:	e8 4d 82 00 00       	call   c001a02f <Krnl::panic(char const*)>
c0011de2:	83 c4 10             	add    esp,0x10
c0011de5:	e9 14 ff ff ff       	jmp    c0011cfe <Virt::setupPageSwapping(int)+0x43>

c0011dea <VAS::VAS()>:
c0011dea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011dee:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011df5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011df9:	a3 e4 dc 02 c0       	mov    ds:0xc002dce4,eax
c0011dfe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011e02:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0011e06:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011e0a:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0011e0d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011e11:	c7 40 08 00 10 00 c2 	mov    DWORD PTR [eax+0x8],0xc2001000
c0011e18:	90                   	nop
c0011e19:	c3                   	ret    

c0011e1a <VAS::VAS(VAS*)>:
c0011e1a:	83 ec 0c             	sub    esp,0xc
c0011e1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011e21:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011e28:	83 ec 0c             	sub    esp,0xc
c0011e2b:	68 64 9e 02 c0       	push   0xc0029e64
c0011e30:	e8 fa 81 00 00       	call   c001a02f <Krnl::panic(char const*)>
c0011e35:	83 c4 10             	add    esp,0x10
c0011e38:	90                   	nop
c0011e39:	83 c4 0c             	add    esp,0xc
c0011e3c:	c3                   	ret    
c0011e3d:	90                   	nop

c0011e3e <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c0011e3e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011e42:	89 c2                	mov    edx,eax
c0011e44:	c1 e8 0a             	shr    eax,0xa
c0011e47:	c1 ea 16             	shr    edx,0x16
c0011e4a:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0011e4f:	19 c9                	sbb    ecx,ecx
c0011e51:	c1 e2 0c             	shl    edx,0xc
c0011e54:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0011e5a:	25 fc 0f 00 00       	and    eax,0xffc
c0011e5f:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0011e66:	01 d0                	add    eax,edx
c0011e68:	c3                   	ret    
c0011e69:	90                   	nop

c0011e6a <VAS::getPageTableEntry(unsigned long)>:
c0011e6a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011e6e:	89 ca                	mov    edx,ecx
c0011e70:	c1 e9 0a             	shr    ecx,0xa
c0011e73:	c1 ea 16             	shr    edx,0x16
c0011e76:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0011e7c:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0011e82:	c1 e0 0c             	shl    eax,0xc
c0011e85:	8d 04 08             	lea    eax,[eax+ecx*1]
c0011e88:	c3                   	ret    

c0011e89 <Virt::freeKernelVirtualPages(unsigned long)>:
c0011e89:	57                   	push   edi
c0011e8a:	56                   	push   esi
c0011e8b:	be 01 00 00 00       	mov    esi,0x1
c0011e90:	53                   	push   ebx
c0011e91:	83 ec 10             	sub    esp,0x10
c0011e94:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011e98:	c1 eb 0c             	shr    ebx,0xc
c0011e9b:	eb 3f                	jmp    c0011edc <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c0011e9d:	e8 13 fe ff ff       	call   c0011cb5 <Virt::getAKernelVAS()>
c0011ea2:	83 ec 08             	sub    esp,0x8
c0011ea5:	57                   	push   edi
c0011ea6:	50                   	push   eax
c0011ea7:	e8 be ff ff ff       	call   c0011e6a <VAS::getPageTableEntry(unsigned long)>
c0011eac:	83 c4 10             	add    esp,0x10
c0011eaf:	8b 00                	mov    eax,DWORD PTR [eax]
c0011eb1:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011eb5:	f6 c4 04             	test   ah,0x4
c0011eb8:	75 5f                	jne    c0011f19 <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c0011eba:	80 fa 04             	cmp    dl,0x4
c0011ebd:	74 78                	je     c0011f37 <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c0011ebf:	80 fa 02             	cmp    dl,0x2
c0011ec2:	0f 84 88 00 00 00    	je     c0011f50 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0011ec8:	80 fa 03             	cmp    dl,0x3
c0011ecb:	0f 84 ad 00 00 00    	je     c0011f7e <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c0011ed1:	fe ca                	dec    dl
c0011ed3:	0f 84 92 00 00 00    	je     c0011f6b <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011ed9:	43                   	inc    ebx
c0011eda:	31 f6                	xor    esi,esi
c0011edc:	53                   	push   ebx
c0011edd:	e8 1f fc ff ff       	call   c0011b01 <Virt::getPageState(unsigned long)>
c0011ee2:	5f                   	pop    edi
c0011ee3:	89 df                	mov    edi,ebx
c0011ee5:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0011ee9:	c1 e7 0c             	shl    edi,0xc
c0011eec:	84 c0                	test   al,al
c0011eee:	75 ad                	jne    c0011e9d <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c0011ef0:	83 ec 0c             	sub    esp,0xc
c0011ef3:	68 55 a0 02 c0       	push   0xc002a055
c0011ef8:	e8 32 81 00 00       	call   c001a02f <Krnl::panic(char const*)>
c0011efd:	e8 b3 fd ff ff       	call   c0011cb5 <Virt::getAKernelVAS()>
c0011f02:	5a                   	pop    edx
c0011f03:	59                   	pop    ecx
c0011f04:	57                   	push   edi
c0011f05:	50                   	push   eax
c0011f06:	e8 5f ff ff ff       	call   c0011e6a <VAS::getPageTableEntry(unsigned long)>
c0011f0b:	83 c4 10             	add    esp,0x10
c0011f0e:	8b 00                	mov    eax,DWORD PTR [eax]
c0011f10:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011f14:	f6 c4 04             	test   ah,0x4
c0011f17:	74 c0                	je     c0011ed9 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011f19:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0011f1d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011f22:	83 ec 0c             	sub    esp,0xc
c0011f25:	50                   	push   eax
c0011f26:	e8 2e df ff ff       	call   c000fe59 <Phys::freePage(unsigned long)>
c0011f2b:	83 c4 10             	add    esp,0x10
c0011f2e:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011f32:	80 fa 04             	cmp    dl,0x4
c0011f35:	75 88                	jne    c0011ebf <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c0011f37:	89 f0                	mov    eax,esi
c0011f39:	84 c0                	test   al,al
c0011f3b:	75 47                	jne    c0011f84 <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c0011f3d:	c7 44 24 20 88 9e 02 c0 	mov    DWORD PTR [esp+0x20],0xc0029e88
c0011f45:	83 c4 10             	add    esp,0x10
c0011f48:	5b                   	pop    ebx
c0011f49:	5e                   	pop    esi
c0011f4a:	5f                   	pop    edi
c0011f4b:	e9 df 80 00 00       	jmp    c001a02f <Krnl::panic(char const*)>
c0011f50:	89 f0                	mov    eax,esi
c0011f52:	84 c0                	test   al,al
c0011f54:	75 15                	jne    c0011f6b <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011f56:	83 ec 0c             	sub    esp,0xc
c0011f59:	68 71 a0 02 c0       	push   0xc002a071
c0011f5e:	e8 cc 80 00 00       	call   c001a02f <Krnl::panic(char const*)>
c0011f63:	83 c4 10             	add    esp,0x10
c0011f66:	e9 6e ff ff ff       	jmp    c0011ed9 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011f6b:	83 ec 08             	sub    esp,0x8
c0011f6e:	6a 00                	push   0x0
c0011f70:	53                   	push   ebx
c0011f71:	e8 56 fb ff ff       	call   c0011acc <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011f76:	83 c4 10             	add    esp,0x10
c0011f79:	e9 5b ff ff ff       	jmp    c0011ed9 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011f7e:	89 f0                	mov    eax,esi
c0011f80:	84 c0                	test   al,al
c0011f82:	75 15                	jne    c0011f99 <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c0011f84:	83 ec 08             	sub    esp,0x8
c0011f87:	6a 00                	push   0x0
c0011f89:	53                   	push   ebx
c0011f8a:	e8 3d fb ff ff       	call   c0011acc <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011f8f:	83 c4 10             	add    esp,0x10
c0011f92:	83 c4 10             	add    esp,0x10
c0011f95:	5b                   	pop    ebx
c0011f96:	5e                   	pop    esi
c0011f97:	5f                   	pop    edi
c0011f98:	c3                   	ret    
c0011f99:	c7 44 24 20 8d a0 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a08d
c0011fa1:	83 c4 10             	add    esp,0x10
c0011fa4:	5b                   	pop    ebx
c0011fa5:	5e                   	pop    esi
c0011fa6:	5f                   	pop    edi
c0011fa7:	e9 83 80 00 00       	jmp    c001a02f <Krnl::panic(char const*)>

c0011fac <VAS::freeAllocatedPages(unsigned long)>:
c0011fac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011fb0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011fb4:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0011fb8:	74 09                	je     c0011fc3 <VAS::freeAllocatedPages(unsigned long)+0x17>
c0011fba:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0011fbe:	e9 c6 fe ff ff       	jmp    c0011e89 <Virt::freeKernelVirtualPages(unsigned long)>
c0011fc3:	c7 44 24 04 ac 9e 02 c0 	mov    DWORD PTR [esp+0x4],0xc0029eac
c0011fcb:	e9 45 0b 00 00       	jmp    c0012b15 <Dbg::kprintf(char const*, ...)>

c0011fd0 <VAS::virtualToPhysical(unsigned long)>:
c0011fd0:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0011fd4:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0011fd8:	e8 8d fe ff ff       	call   c0011e6a <VAS::getPageTableEntry(unsigned long)>
c0011fdd:	5a                   	pop    edx
c0011fde:	8b 00                	mov    eax,DWORD PTR [eax]
c0011fe0:	59                   	pop    ecx
c0011fe1:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011fe6:	c3                   	ret    
c0011fe7:	90                   	nop

c0011fe8 <VAS::reflagRange(unsigned long, int, int, int)>:
c0011fe8:	55                   	push   ebp
c0011fe9:	57                   	push   edi
c0011fea:	56                   	push   esi
c0011feb:	53                   	push   ebx
c0011fec:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0011ff0:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0011ff4:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0011ff8:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0011ffc:	85 db                	test   ebx,ebx
c0011ffe:	7e 22                	jle    c0012022 <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c0012000:	c1 e3 0c             	shl    ebx,0xc
c0012003:	01 f3                	add    ebx,esi
c0012005:	56                   	push   esi
c0012006:	81 c6 00 10 00 00    	add    esi,0x1000
c001200c:	55                   	push   ebp
c001200d:	e8 58 fe ff ff       	call   c0011e6a <VAS::getPageTableEntry(unsigned long)>
c0012012:	5a                   	pop    edx
c0012013:	59                   	pop    ecx
c0012014:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012016:	21 f9                	and    ecx,edi
c0012018:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c001201c:	39 f3                	cmp    ebx,esi
c001201e:	89 08                	mov    DWORD PTR [eax],ecx
c0012020:	75 e3                	jne    c0012005 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c0012022:	5b                   	pop    ebx
c0012023:	5e                   	pop    esi
c0012024:	5f                   	pop    edi
c0012025:	5d                   	pop    ebp
c0012026:	c3                   	ret    
c0012027:	90                   	nop

c0012028 <VAS::setToWriteCombining(unsigned long, int)>:
c0012028:	a1 68 db 02 c0       	mov    eax,ds:0xc002db68
c001202d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012033:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c001203a:	75 01                	jne    c001203d <VAS::setToWriteCombining(unsigned long, int)+0x15>
c001203c:	c3                   	ret    
c001203d:	68 80 00 00 00       	push   0x80
c0012042:	6a ff                	push   0xffffffff
c0012044:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012048:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001204c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012050:	e8 93 ff ff ff       	call   c0011fe8 <VAS::reflagRange(unsigned long, int, int, int)>
c0012055:	83 c4 14             	add    esp,0x14
c0012058:	c3                   	ret    
c0012059:	90                   	nop

c001205a <VAS::mapOtherVASIn(bool, VAS*)>:
c001205a:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c001205f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012063:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0012066:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001206a:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c001206d:	19 c0                	sbb    eax,eax
c001206f:	83 ca 03             	or     edx,0x3
c0012072:	83 e0 fc             	and    eax,0xfffffffc
c0012075:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c001207c:	0f 20 d8             	mov    eax,cr3
c001207f:	0f 22 d8             	mov    cr3,eax
c0012082:	c3                   	ret    
c0012083:	90                   	nop

c0012084 <VAS::~VAS()>:
c0012084:	83 ec 2c             	sub    esp,0x2c
c0012087:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001208f:	e8 2a b6 00 00       	call   c001d6be <lockScheduler()>
c0012094:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0012099:	8b 00                	mov    eax,DWORD PTR [eax]
c001209b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001209e:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c00120a4:	83 ec 04             	sub    esp,0x4
c00120a7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00120ab:	6a 01                	push   0x1
c00120ad:	50                   	push   eax
c00120ae:	e8 a7 ff ff ff       	call   c001205a <VAS::mapOtherVASIn(bool, VAS*)>
c00120b3:	83 c4 10             	add    esp,0x10
c00120b6:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00120be:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c00120c6:	0f 8f d7 00 00 00    	jg     c00121a3 <VAS::~VAS()+0x11f>
c00120cc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00120d0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00120d3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00120d7:	c1 e2 02             	shl    edx,0x2
c00120da:	01 d0                	add    eax,edx
c00120dc:	8b 00                	mov    eax,DWORD PTR [eax]
c00120de:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00120e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00120e6:	83 e0 01             	and    eax,0x1
c00120e9:	0f 84 ab 00 00 00    	je     c001219a <VAS::~VAS()+0x116>
c00120ef:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00120f7:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c00120ff:	7f 75                	jg     c0012176 <VAS::~VAS()+0xf2>
c0012101:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012105:	c1 e0 0a             	shl    eax,0xa
c0012108:	89 c2                	mov    edx,eax
c001210a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001210e:	01 d0                	add    eax,edx
c0012110:	c1 e0 0c             	shl    eax,0xc
c0012113:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012117:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001211c:	8b 00                	mov    eax,DWORD PTR [eax]
c001211e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0012121:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0012127:	83 ec 04             	sub    esp,0x4
c001212a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001212e:	6a 01                	push   0x1
c0012130:	50                   	push   eax
c0012131:	e8 08 fd ff ff       	call   c0011e3e <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0012136:	83 c4 10             	add    esp,0x10
c0012139:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001213d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012141:	8b 00                	mov    eax,DWORD PTR [eax]
c0012143:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012147:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001214b:	25 01 04 00 00       	and    eax,0x401
c0012150:	3d 01 04 00 00       	cmp    eax,0x401
c0012155:	75 19                	jne    c0012170 <VAS::~VAS()+0xec>
c0012157:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001215b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012160:	83 ec 0c             	sub    esp,0xc
c0012163:	50                   	push   eax
c0012164:	e8 f0 dc ff ff       	call   c000fe59 <Phys::freePage(unsigned long)>
c0012169:	83 c4 10             	add    esp,0x10
c001216c:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0012170:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0012174:	eb 81                	jmp    c00120f7 <VAS::~VAS()+0x73>
c0012176:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001217a:	25 00 04 00 00       	and    eax,0x400
c001217f:	74 19                	je     c001219a <VAS::~VAS()+0x116>
c0012181:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012185:	25 00 f0 ff ff       	and    eax,0xfffff000
c001218a:	83 ec 0c             	sub    esp,0xc
c001218d:	50                   	push   eax
c001218e:	e8 c6 dc ff ff       	call   c000fe59 <Phys::freePage(unsigned long)>
c0012193:	83 c4 10             	add    esp,0x10
c0012196:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c001219a:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c001219e:	e9 1b ff ff ff       	jmp    c00120be <VAS::~VAS()+0x3a>
c00121a3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00121a7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00121aa:	83 ec 0c             	sub    esp,0xc
c00121ad:	50                   	push   eax
c00121ae:	e8 d6 fc ff ff       	call   c0011e89 <Virt::freeKernelVirtualPages(unsigned long)>
c00121b3:	83 c4 10             	add    esp,0x10
c00121b6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00121ba:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00121bd:	83 ec 0c             	sub    esp,0xc
c00121c0:	50                   	push   eax
c00121c1:	e8 93 dc ff ff       	call   c000fe59 <Phys::freePage(unsigned long)>
c00121c6:	83 c4 10             	add    esp,0x10
c00121c9:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00121cd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00121d1:	c1 e0 02             	shl    eax,0x2
c00121d4:	83 ec 08             	sub    esp,0x8
c00121d7:	50                   	push   eax
c00121d8:	68 d0 9e 02 c0       	push   0xc0029ed0
c00121dd:	e8 33 09 00 00       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c00121e2:	83 c4 10             	add    esp,0x10
c00121e5:	e8 d6 b4 00 00       	call   c001d6c0 <unlockScheduler()>
c00121ea:	90                   	nop
c00121eb:	83 c4 2c             	add    esp,0x2c
c00121ee:	c3                   	ret    
c00121ef:	90                   	nop

c00121f0 <VAS::mapPage(unsigned long, unsigned long, int)>:
c00121f0:	55                   	push   ebp
c00121f1:	57                   	push   edi
c00121f2:	56                   	push   esi
c00121f3:	53                   	push   ebx
c00121f4:	83 ec 1c             	sub    esp,0x1c
c00121f7:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00121fb:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00121ff:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0012205:	77 08                	ja     c001220f <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c0012207:	0f 20 d8             	mov    eax,cr3
c001220a:	39 47 0c             	cmp    DWORD PTR [edi+0xc],eax
c001220d:	75 47                	jne    c0012256 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c001220f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012213:	09 d8                	or     eax,ebx
c0012215:	a9 ff 0f 00 00       	test   eax,0xfff
c001221a:	75 57                	jne    c0012273 <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c001221c:	89 de                	mov    esi,ebx
c001221e:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0012221:	c1 ee 16             	shr    esi,0x16
c0012224:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c001222b:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c001222f:	74 54                	je     c0012285 <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c0012231:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012235:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c001223b:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c001223f:	c1 e6 0c             	shl    esi,0xc
c0012242:	c1 eb 0a             	shr    ebx,0xa
c0012245:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c001224b:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c001224e:	83 c4 1c             	add    esp,0x1c
c0012251:	5b                   	pop    ebx
c0012252:	5e                   	pop    esi
c0012253:	5f                   	pop    edi
c0012254:	5d                   	pop    ebp
c0012255:	c3                   	ret    
c0012256:	83 ec 0c             	sub    esp,0xc
c0012259:	68 f0 9e 02 c0       	push   0xc0029ef0
c001225e:	e8 b2 08 00 00       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c0012263:	83 c4 10             	add    esp,0x10
c0012266:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001226a:	09 d8                	or     eax,ebx
c001226c:	a9 ff 0f 00 00       	test   eax,0xfff
c0012271:	74 a9                	je     c001221c <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0012273:	83 ec 0c             	sub    esp,0xc
c0012276:	68 58 9f 02 c0       	push   0xc0029f58
c001227b:	e8 af 7d 00 00       	call   c001a02f <Krnl::panic(char const*)>
c0012280:	83 c4 10             	add    esp,0x10
c0012283:	eb 97                	jmp    c001221c <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0012285:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012289:	e8 55 dc ff ff       	call   c000fee3 <Phys::allocatePage()>
c001228e:	89 c5                	mov    ebp,eax
c0012290:	e8 20 fa ff ff       	call   c0011cb5 <Virt::getAKernelVAS()>
c0012295:	83 ec 0c             	sub    esp,0xc
c0012298:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001229c:	6a 01                	push   0x1
c001229e:	e8 82 f8 ff ff       	call   c0011b25 <Virt::allocateKernelVirtualPages(int)>
c00122a3:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00122aa:	6a 01                	push   0x1
c00122ac:	50                   	push   eax
c00122ad:	55                   	push   ebp
c00122ae:	81 cd 07 04 00 00    	or     ebp,0x407
c00122b4:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00122b8:	51                   	push   ecx
c00122b9:	e8 26 02 00 00       	call   c00124e4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00122be:	83 c4 1c             	add    esp,0x1c
c00122c1:	68 00 10 00 00       	push   0x1000
c00122c6:	6a 00                	push   0x0
c00122c8:	50                   	push   eax
c00122c9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00122cd:	e8 a6 e4 fe ff       	call   c0000778 <memset>
c00122d2:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00122d6:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00122d9:	e8 ab fb ff ff       	call   c0011e89 <Virt::freeKernelVirtualPages(unsigned long)>
c00122de:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00122e2:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00122e5:	83 c4 10             	add    esp,0x10
c00122e8:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c00122eb:	e9 41 ff ff ff       	jmp    c0012231 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>

c00122f0 <VAS::allocatePages(int, int)>:
c00122f0:	55                   	push   ebp
c00122f1:	57                   	push   edi
c00122f2:	56                   	push   esi
c00122f3:	53                   	push   ebx
c00122f4:	83 ec 1c             	sub    esp,0x1c
c00122f7:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00122fb:	a1 68 db 02 c0       	mov    eax,ds:0xc002db68
c0012300:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012306:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c001230c:	83 e0 01             	and    eax,0x1
c001230f:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c0012313:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0012317:	0f 85 cc 00 00 00    	jne    c00123e9 <VAS::allocatePages(int, int)+0xf9>
c001231d:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0012320:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012324:	85 c0                	test   eax,eax
c0012326:	0f 84 a1 00 00 00    	je     c00123cd <VAS::allocatePages(int, int)+0xdd>
c001232c:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0012330:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012334:	c1 e6 0c             	shl    esi,0xc
c0012337:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c001233b:	85 c0                	test   eax,eax
c001233d:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0012340:	7e 33                	jle    c0012375 <VAS::allocatePages(int, int)+0x85>
c0012342:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0012346:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001234a:	81 cd 00 04 00 00    	or     ebp,0x400
c0012350:	e8 8e db ff ff       	call   c000fee3 <Phys::allocatePage()>
c0012355:	55                   	push   ebp
c0012356:	53                   	push   ebx
c0012357:	50                   	push   eax
c0012358:	57                   	push   edi
c0012359:	e8 92 fe ff ff       	call   c00121f0 <VAS::mapPage(unsigned long, unsigned long, int)>
c001235e:	83 c4 10             	add    esp,0x10
c0012361:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012366:	74 03                	je     c001236b <VAS::allocatePages(int, int)+0x7b>
c0012368:	0f 01 3b             	invlpg BYTE PTR [ebx]
c001236b:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012371:	39 de                	cmp    esi,ebx
c0012373:	75 db                	jne    c0012350 <VAS::allocatePages(int, int)+0x60>
c0012375:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001237a:	75 12                	jne    c001238e <VAS::allocatePages(int, int)+0x9e>
c001237c:	0f 20 d8             	mov    eax,cr3
c001237f:	0f 22 d8             	mov    cr3,eax
c0012382:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012386:	83 c4 1c             	add    esp,0x1c
c0012389:	5b                   	pop    ebx
c001238a:	5e                   	pop    esi
c001238b:	5f                   	pop    edi
c001238c:	5d                   	pop    ebp
c001238d:	c3                   	ret    
c001238e:	c1 ee 0a             	shr    esi,0xa
c0012391:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012395:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c001239b:	c1 eb 0a             	shr    ebx,0xa
c001239e:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c00123a4:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00123aa:	81 eb 00 00 40 00    	sub    ebx,0x400000
c00123b0:	39 c3                	cmp    ebx,eax
c00123b2:	77 ce                	ja     c0012382 <VAS::allocatePages(int, int)+0x92>
c00123b4:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00123b7:	81 c3 00 10 00 00    	add    ebx,0x1000
c00123bd:	39 d8                	cmp    eax,ebx
c00123bf:	73 f3                	jae    c00123b4 <VAS::allocatePages(int, int)+0xc4>
c00123c1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00123c5:	83 c4 1c             	add    esp,0x1c
c00123c8:	5b                   	pop    ebx
c00123c9:	5e                   	pop    esi
c00123ca:	5f                   	pop    edi
c00123cb:	5d                   	pop    ebp
c00123cc:	c3                   	ret    
c00123cd:	83 ec 0c             	sub    esp,0xc
c00123d0:	68 7c 9f 02 c0       	push   0xc0029f7c
c00123d5:	e8 55 7c 00 00       	call   c001a02f <Krnl::panic(char const*)>
c00123da:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c00123dd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00123e1:	83 c4 10             	add    esp,0x10
c00123e4:	e9 43 ff ff ff       	jmp    c001232c <VAS::allocatePages(int, int)+0x3c>
c00123e9:	83 ec 0c             	sub    esp,0xc
c00123ec:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00123f0:	e8 30 f7 ff ff       	call   c0011b25 <Virt::allocateKernelVirtualPages(int)>
c00123f5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00123f9:	83 c4 10             	add    esp,0x10
c00123fc:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0012401:	0f 87 9b 00 00 00    	ja     c00124a2 <VAS::allocatePages(int, int)+0x1b2>
c0012407:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001240b:	85 d2                	test   edx,edx
c001240d:	7e 3c                	jle    c001244b <VAS::allocatePages(int, int)+0x15b>
c001240f:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0012413:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0012417:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001241b:	c1 e5 0c             	shl    ebp,0xc
c001241e:	81 ce 00 04 00 00    	or     esi,0x400
c0012424:	01 dd                	add    ebp,ebx
c0012426:	e8 b8 da ff ff       	call   c000fee3 <Phys::allocatePage()>
c001242b:	56                   	push   esi
c001242c:	53                   	push   ebx
c001242d:	50                   	push   eax
c001242e:	57                   	push   edi
c001242f:	e8 bc fd ff ff       	call   c00121f0 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012434:	83 c4 10             	add    esp,0x10
c0012437:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001243c:	74 03                	je     c0012441 <VAS::allocatePages(int, int)+0x151>
c001243e:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012441:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012447:	39 dd                	cmp    ebp,ebx
c0012449:	75 db                	jne    c0012426 <VAS::allocatePages(int, int)+0x136>
c001244b:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012450:	0f 84 26 ff ff ff    	je     c001237c <VAS::allocatePages(int, int)+0x8c>
c0012456:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001245a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001245e:	89 d3                	mov    ebx,edx
c0012460:	c1 e0 0c             	shl    eax,0xc
c0012463:	c1 eb 0a             	shr    ebx,0xa
c0012466:	01 d0                	add    eax,edx
c0012468:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001246e:	c1 e8 0a             	shr    eax,0xa
c0012471:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0012477:	25 00 f0 ff ff       	and    eax,0xfffff000
c001247c:	2d 00 00 40 00       	sub    eax,0x400000
c0012481:	39 c3                	cmp    ebx,eax
c0012483:	0f 87 f9 fe ff ff    	ja     c0012382 <VAS::allocatePages(int, int)+0x92>
c0012489:	0f 01 3b             	invlpg BYTE PTR [ebx]
c001248c:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012492:	39 d8                	cmp    eax,ebx
c0012494:	73 f3                	jae    c0012489 <VAS::allocatePages(int, int)+0x199>
c0012496:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001249a:	83 c4 1c             	add    esp,0x1c
c001249d:	5b                   	pop    ebx
c001249e:	5e                   	pop    esi
c001249f:	5f                   	pop    edi
c00124a0:	5d                   	pop    ebp
c00124a1:	c3                   	ret    
c00124a2:	a1 68 db 02 c0       	mov    eax,ds:0xc002db68
c00124a7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00124ad:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c00124b4:	0f 84 4d ff ff ff    	je     c0012407 <VAS::allocatePages(int, int)+0x117>
c00124ba:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c00124c2:	e9 40 ff ff ff       	jmp    c0012407 <VAS::allocatePages(int, int)+0x117>
c00124c7:	90                   	nop

c00124c8 <VAS::setCPUSpecific(unsigned long)>:
c00124c8:	83 ec 0c             	sub    esp,0xc
c00124cb:	6a 05                	push   0x5
c00124cd:	68 00 00 40 c2       	push   0xc2400000
c00124d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00124d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00124da:	e8 11 fd ff ff       	call   c00121f0 <VAS::mapPage(unsigned long, unsigned long, int)>
c00124df:	83 c4 1c             	add    esp,0x1c
c00124e2:	c3                   	ret    
c00124e3:	90                   	nop

c00124e4 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c00124e4:	55                   	push   ebp
c00124e5:	57                   	push   edi
c00124e6:	56                   	push   esi
c00124e7:	53                   	push   ebx
c00124e8:	83 ec 1c             	sub    esp,0x1c
c00124eb:	a1 68 db 02 c0       	mov    eax,ds:0xc002db68
c00124f0:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00124f4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00124fa:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00124fe:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0012504:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0012508:	83 e0 01             	and    eax,0x1
c001250b:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001250f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012513:	85 c0                	test   eax,eax
c0012515:	7e 39                	jle    c0012550 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c0012517:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001251b:	89 f3                	mov    ebx,esi
c001251d:	c1 e0 0c             	shl    eax,0xc
c0012520:	01 f0                	add    eax,esi
c0012522:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012526:	55                   	push   ebp
c0012527:	53                   	push   ebx
c0012528:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001252c:	29 f0                	sub    eax,esi
c001252e:	01 d8                	add    eax,ebx
c0012530:	50                   	push   eax
c0012531:	57                   	push   edi
c0012532:	e8 b9 fc ff ff       	call   c00121f0 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012537:	83 c4 10             	add    esp,0x10
c001253a:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001253f:	74 03                	je     c0012544 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c0012541:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012544:	81 c3 00 10 00 00    	add    ebx,0x1000
c001254a:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c001254e:	75 d6                	jne    c0012526 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c0012550:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012555:	75 10                	jne    c0012567 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c0012557:	0f 20 d8             	mov    eax,cr3
c001255a:	0f 22 d8             	mov    cr3,eax
c001255d:	83 c4 1c             	add    esp,0x1c
c0012560:	89 f0                	mov    eax,esi
c0012562:	5b                   	pop    ebx
c0012563:	5e                   	pop    esi
c0012564:	5f                   	pop    edi
c0012565:	5d                   	pop    ebp
c0012566:	c3                   	ret    
c0012567:	89 f3                	mov    ebx,esi
c0012569:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001256d:	c1 eb 0a             	shr    ebx,0xa
c0012570:	c1 e0 0c             	shl    eax,0xc
c0012573:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0012579:	01 f0                	add    eax,esi
c001257b:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0012581:	c1 e8 0a             	shr    eax,0xa
c0012584:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012589:	2d 00 00 40 00       	sub    eax,0x400000
c001258e:	39 c3                	cmp    ebx,eax
c0012590:	77 cb                	ja     c001255d <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c0012592:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012595:	81 c3 00 10 00 00    	add    ebx,0x1000
c001259b:	39 d8                	cmp    eax,ebx
c001259d:	73 f3                	jae    c0012592 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c001259f:	83 c4 1c             	add    esp,0x1c
c00125a2:	89 f0                	mov    eax,esi
c00125a4:	5b                   	pop    ebx
c00125a5:	5e                   	pop    esi
c00125a6:	5f                   	pop    edi
c00125a7:	5d                   	pop    ebp
c00125a8:	c3                   	ret    
c00125a9:	90                   	nop

c00125aa <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c00125aa:	55                   	push   ebp
c00125ab:	57                   	push   edi
c00125ac:	56                   	push   esi
c00125ad:	53                   	push   ebx
c00125ae:	83 ec 1c             	sub    esp,0x1c
c00125b1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00125b5:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00125b9:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c00125bd:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00125c1:	a9 ff 0f 00 00       	test   eax,0xfff
c00125c6:	75 4a                	jne    c0012612 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c00125c8:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00125cc:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00125cf:	c1 eb 16             	shr    ebx,0x16
c00125d2:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c00125d9:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c00125dd:	74 4d                	je     c001262c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c00125df:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00125e3:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c00125e7:	c1 e8 0a             	shr    eax,0xa
c00125ea:	80 fa 01             	cmp    dl,0x1
c00125ed:	19 d2                	sbb    edx,edx
c00125ef:	c1 e3 0c             	shl    ebx,0xc
c00125f2:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c00125f6:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c00125fc:	25 fc 0f 00 00       	and    eax,0xffc
c0012601:	01 d8                	add    eax,ebx
c0012603:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c001260a:	83 c4 1c             	add    esp,0x1c
c001260d:	5b                   	pop    ebx
c001260e:	5e                   	pop    esi
c001260f:	5f                   	pop    edi
c0012610:	5d                   	pop    ebp
c0012611:	c3                   	ret    
c0012612:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0012616:	83 ec 0c             	sub    esp,0xc
c0012619:	68 a8 9f 02 c0       	push   0xc0029fa8
c001261e:	e8 0c 7a 00 00       	call   c001a02f <Krnl::panic(char const*)>
c0012623:	83 c4 10             	add    esp,0x10
c0012626:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001262a:	eb 9c                	jmp    c00125c8 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c001262c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012630:	e8 ae d8 ff ff       	call   c000fee3 <Phys::allocatePage()>
c0012635:	89 c5                	mov    ebp,eax
c0012637:	e8 79 f6 ff ff       	call   c0011cb5 <Virt::getAKernelVAS()>
c001263c:	83 ec 0c             	sub    esp,0xc
c001263f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012643:	6a 01                	push   0x1
c0012645:	e8 db f4 ff ff       	call   c0011b25 <Virt::allocateKernelVirtualPages(int)>
c001264a:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0012651:	6a 01                	push   0x1
c0012653:	50                   	push   eax
c0012654:	55                   	push   ebp
c0012655:	81 cd 07 04 00 00    	or     ebp,0x407
c001265b:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001265f:	51                   	push   ecx
c0012660:	e8 7f fe ff ff       	call   c00124e4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012665:	83 c4 1c             	add    esp,0x1c
c0012668:	68 00 10 00 00       	push   0x1000
c001266d:	6a 00                	push   0x0
c001266f:	50                   	push   eax
c0012670:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012674:	e8 ff e0 fe ff       	call   c0000778 <memset>
c0012679:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001267d:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0012680:	e8 04 f8 ff ff       	call   c0011e89 <Virt::freeKernelVirtualPages(unsigned long)>
c0012685:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0012688:	83 c4 10             	add    esp,0x10
c001268b:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c001268e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012692:	e9 48 ff ff ff       	jmp    c00125df <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>
c0012697:	90                   	nop

c0012698 <VAS::VAS(bool)>:
c0012698:	53                   	push   ebx
c0012699:	83 ec 28             	sub    esp,0x28
c001269c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00126a0:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00126a4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00126a8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00126af:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00126b3:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c00126b7:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c00126ba:	e8 24 d8 ff ff       	call   c000fee3 <Phys::allocatePage()>
c00126bf:	89 c2                	mov    edx,eax
c00126c1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00126c5:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00126c8:	e8 e8 f5 ff ff       	call   c0011cb5 <Virt::getAKernelVAS()>
c00126cd:	89 c3                	mov    ebx,eax
c00126cf:	83 ec 0c             	sub    esp,0xc
c00126d2:	6a 01                	push   0x1
c00126d4:	e8 4c f4 ff ff       	call   c0011b25 <Virt::allocateKernelVirtualPages(int)>
c00126d9:	83 c4 10             	add    esp,0x10
c00126dc:	89 c2                	mov    edx,eax
c00126de:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00126e2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00126e5:	83 ec 0c             	sub    esp,0xc
c00126e8:	6a 03                	push   0x3
c00126ea:	6a 01                	push   0x1
c00126ec:	52                   	push   edx
c00126ed:	50                   	push   eax
c00126ee:	53                   	push   ebx
c00126ef:	e8 f0 fd ff ff       	call   c00124e4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00126f4:	83 c4 20             	add    esp,0x20
c00126f7:	89 c2                	mov    edx,eax
c00126f9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00126fd:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0012700:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0012708:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0012710:	7f 1c                	jg     c001272e <VAS::VAS(bool)+0x96>
c0012712:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012716:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012719:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001271d:	c1 e2 02             	shl    edx,0x2
c0012720:	01 d0                	add    eax,edx
c0012722:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0012728:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c001272c:	eb da                	jmp    c0012708 <VAS::VAS(bool)+0x70>
c001272e:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0012736:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c001273e:	7f 7a                	jg     c00127ba <VAS::VAS(bool)+0x122>
c0012740:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012744:	2d 00 02 00 00       	sub    eax,0x200
c0012749:	c1 e0 0c             	shl    eax,0xc
c001274c:	83 c8 03             	or     eax,0x3
c001274f:	89 c2                	mov    edx,eax
c0012751:	a1 68 db 02 c0       	mov    eax,ds:0xc002db68
c0012756:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001275c:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0012762:	83 e0 10             	and    eax,0x10
c0012765:	84 c0                	test   al,al
c0012767:	74 07                	je     c0012770 <VAS::VAS(bool)+0xd8>
c0012769:	b8 00 01 00 00       	mov    eax,0x100
c001276e:	eb 05                	jmp    c0012775 <VAS::VAS(bool)+0xdd>
c0012770:	b8 00 00 00 00       	mov    eax,0x0
c0012775:	09 d0                	or     eax,edx
c0012777:	89 c1                	mov    ecx,eax
c0012779:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001277d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012780:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012784:	c1 e2 02             	shl    edx,0x2
c0012787:	01 d0                	add    eax,edx
c0012789:	89 ca                	mov    edx,ecx
c001278b:	89 10                	mov    DWORD PTR [eax],edx
c001278d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012791:	2d 40 03 00 00       	sub    eax,0x340
c0012796:	83 f8 7f             	cmp    eax,0x7f
c0012799:	77 16                	ja     c00127b1 <VAS::VAS(bool)+0x119>
c001279b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001279f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00127a2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00127a6:	c1 e2 02             	shl    edx,0x2
c00127a9:	01 d0                	add    eax,edx
c00127ab:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c00127b1:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00127b5:	e9 7c ff ff ff       	jmp    c0012736 <VAS::VAS(bool)+0x9e>
c00127ba:	a1 68 db 02 c0       	mov    eax,ds:0xc002db68
c00127bf:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00127c5:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00127cb:	83 e0 10             	and    eax,0x10
c00127ce:	84 c0                	test   al,al
c00127d0:	74 07                	je     c00127d9 <VAS::VAS(bool)+0x141>
c00127d2:	b8 03 41 00 00       	mov    eax,0x4103
c00127d7:	eb 05                	jmp    c00127de <VAS::VAS(bool)+0x146>
c00127d9:	b8 03 40 00 00       	mov    eax,0x4003
c00127de:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00127e2:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00127e5:	81 c2 20 0c 00 00    	add    edx,0xc20
c00127eb:	89 02                	mov    DWORD PTR [edx],eax
c00127ed:	a1 68 db 02 c0       	mov    eax,ds:0xc002db68
c00127f2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00127f8:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00127fe:	83 ec 08             	sub    esp,0x8
c0012801:	50                   	push   eax
c0012802:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012806:	e8 bd fc ff ff       	call   c00124c8 <VAS::setCPUSpecific(unsigned long)>
c001280b:	83 c4 10             	add    esp,0x10
c001280e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012812:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0012815:	a1 68 db 02 c0       	mov    eax,ds:0xc002db68
c001281a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012820:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0012826:	83 e0 10             	and    eax,0x10
c0012829:	84 c0                	test   al,al
c001282b:	74 07                	je     c0012834 <VAS::VAS(bool)+0x19c>
c001282d:	b8 00 01 00 00       	mov    eax,0x100
c0012832:	eb 05                	jmp    c0012839 <VAS::VAS(bool)+0x1a1>
c0012834:	b8 00 00 00 00       	mov    eax,0x0
c0012839:	09 c2                	or     edx,eax
c001283b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001283f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012842:	05 fc 0f 00 00       	add    eax,0xffc
c0012847:	83 ca 03             	or     edx,0x3
c001284a:	89 10                	mov    DWORD PTR [eax],edx
c001284c:	a1 68 db 02 c0       	mov    eax,ds:0xc002db68
c0012851:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012857:	83 ec 0c             	sub    esp,0xc
c001285a:	50                   	push   eax
c001285b:	e8 c8 19 00 00       	call   c0014228 <Device::getName()>
c0012860:	83 c4 10             	add    esp,0x10
c0012863:	83 ec 08             	sub    esp,0x8
c0012866:	68 a7 a0 02 c0       	push   0xc002a0a7
c001286b:	50                   	push   eax
c001286c:	e8 4f e0 fe ff       	call   c00008c0 <strcmp>
c0012871:	83 c4 10             	add    esp,0x10
c0012874:	85 c0                	test   eax,eax
c0012876:	0f 94 c0             	sete   al
c0012879:	84 c0                	test   al,al
c001287b:	74 70                	je     c00128ed <VAS::VAS(bool)+0x255>
c001287d:	e8 1f ae 00 00       	call   c001d6a1 <disableIRQs()>
c0012882:	a1 68 db 02 c0       	mov    eax,ds:0xc002db68
c0012887:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001288d:	05 7c 09 00 00       	add    eax,0x97c
c0012892:	83 ec 0c             	sub    esp,0xc
c0012895:	50                   	push   eax
c0012896:	e8 27 ca ff ff       	call   c000f2c2 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c001289b:	83 c4 10             	add    esp,0x10
c001289e:	25 00 f0 ff ff       	and    eax,0xfffff000
c00128a3:	89 c3                	mov    ebx,eax
c00128a5:	a1 68 db 02 c0       	mov    eax,ds:0xc002db68
c00128aa:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00128b0:	05 7c 09 00 00       	add    eax,0x97c
c00128b5:	83 ec 0c             	sub    esp,0xc
c00128b8:	50                   	push   eax
c00128b9:	e8 04 ca ff ff       	call   c000f2c2 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c00128be:	83 c4 10             	add    esp,0x10
c00128c1:	83 ec 08             	sub    esp,0x8
c00128c4:	50                   	push   eax
c00128c5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00128c9:	e8 9c f5 ff ff       	call   c0011e6a <VAS::getPageTableEntry(unsigned long)>
c00128ce:	83 c4 10             	add    esp,0x10
c00128d1:	8b 00                	mov    eax,DWORD PTR [eax]
c00128d3:	25 00 f0 ff ff       	and    eax,0xfffff000
c00128d8:	6a 11                	push   0x11
c00128da:	53                   	push   ebx
c00128db:	50                   	push   eax
c00128dc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00128e0:	e8 0b f9 ff ff       	call   c00121f0 <VAS::mapPage(unsigned long, unsigned long, int)>
c00128e5:	83 c4 10             	add    esp,0x10
c00128e8:	e8 c2 ad 00 00       	call   c001d6af <enableIRQs()>
c00128ed:	90                   	nop
c00128ee:	83 c4 28             	add    esp,0x28
c00128f1:	5b                   	pop    ebx
c00128f2:	c3                   	ret    

c00128f3 <mapVASFirstTime>:
c00128f3:	55                   	push   ebp
c00128f4:	57                   	push   edi
c00128f5:	56                   	push   esi
c00128f6:	53                   	push   ebx
c00128f7:	83 ec 0c             	sub    esp,0xc
c00128fa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00128ff:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0012902:	4a                   	dec    edx
c0012903:	0f 84 8e 00 00 00    	je     c0012997 <mapVASFirstTime+0xa4>
c0012909:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c001290c:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c001290f:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c0012914:	c1 e5 15             	shl    ebp,0x15
c0012917:	be 00 90 e7 01       	mov    esi,0x1e79000
c001291c:	8b ba 32 05 00 00    	mov    edi,DWORD PTR [edx+0x532]
c0012922:	29 eb                	sub    ebx,ebp
c0012924:	29 ee                	sub    esi,ebp
c0012926:	e8 b8 d5 ff ff       	call   c000fee3 <Phys::allocatePage()>
c001292b:	83 ec 0c             	sub    esp,0xc
c001292e:	68 03 04 00 00       	push   0x403
c0012933:	6a 01                	push   0x1
c0012935:	53                   	push   ebx
c0012936:	81 eb 00 10 00 00    	sub    ebx,0x1000
c001293c:	50                   	push   eax
c001293d:	57                   	push   edi
c001293e:	e8 a1 fb ff ff       	call   c00124e4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012943:	83 c4 20             	add    esp,0x20
c0012946:	39 f3                	cmp    ebx,esi
c0012948:	75 dc                	jne    c0012926 <mapVASFirstTime+0x33>
c001294a:	be 00 f0 ff 01       	mov    esi,0x1fff000
c001294f:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c0012954:	29 ee                	sub    esi,ebp
c0012956:	29 e8                	sub    eax,ebp
c0012958:	89 c5                	mov    ebp,eax
c001295a:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c001295e:	19 db                	sbb    ebx,ebx
c0012960:	e8 7e d5 ff ff       	call   c000fee3 <Phys::allocatePage()>
c0012965:	83 e3 04             	and    ebx,0x4
c0012968:	83 ec 0c             	sub    esp,0xc
c001296b:	81 c3 03 04 00 00    	add    ebx,0x403
c0012971:	53                   	push   ebx
c0012972:	6a 01                	push   0x1
c0012974:	56                   	push   esi
c0012975:	81 ee 00 10 00 00    	sub    esi,0x1000
c001297b:	50                   	push   eax
c001297c:	57                   	push   edi
c001297d:	e8 62 fb ff ff       	call   c00124e4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012982:	83 c4 20             	add    esp,0x20
c0012985:	39 f5                	cmp    ebp,esi
c0012987:	75 d1                	jne    c001295a <mapVASFirstTime+0x67>
c0012989:	0f 20 d8             	mov    eax,cr3
c001298c:	0f 22 d8             	mov    cr3,eax
c001298f:	83 c4 0c             	add    esp,0xc
c0012992:	5b                   	pop    ebx
c0012993:	5e                   	pop    esi
c0012994:	5f                   	pop    edi
c0012995:	5d                   	pop    ebp
c0012996:	c3                   	ret    
c0012997:	83 ec 0c             	sub    esp,0xc
c001299a:	68 b5 a0 02 c0       	push   0xc002a0b5
c001299f:	e8 71 01 00 00       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c00129a4:	83 c4 10             	add    esp,0x10
c00129a7:	83 c4 0c             	add    esp,0xc
c00129aa:	5b                   	pop    ebx
c00129ab:	5e                   	pop    esi
c00129ac:	5f                   	pop    edi
c00129ad:	5d                   	pop    ebp
c00129ae:	c3                   	ret    

c00129af <__cxa_atexit>:
c00129af:	31 c0                	xor    eax,eax
c00129b1:	c3                   	ret    

c00129b2 <__cxa_finalize>:
c00129b2:	c3                   	ret    

c00129b3 <__stack_chk_fail>:
c00129b3:	55                   	push   ebp
c00129b4:	89 e5                	mov    ebp,esp
c00129b6:	83 ec 14             	sub    esp,0x14
c00129b9:	68 ce a0 02 c0       	push   0xc002a0ce
c00129be:	e8 52 01 00 00       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c00129c3:	58                   	pop    eax
c00129c4:	5a                   	pop    edx
c00129c5:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00129c8:	68 1e a1 02 c0       	push   0xc002a11e
c00129cd:	e8 43 01 00 00       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c00129d2:	59                   	pop    ecx
c00129d3:	58                   	pop    eax
c00129d4:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00129d7:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00129da:	68 1e a1 02 c0       	push   0xc002a11e
c00129df:	e8 31 01 00 00       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c00129e4:	5a                   	pop    edx
c00129e5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00129e8:	59                   	pop    ecx
c00129e9:	8b 00                	mov    eax,DWORD PTR [eax]
c00129eb:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00129ee:	68 1e a1 02 c0       	push   0xc002a11e
c00129f3:	e8 1d 01 00 00       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c00129f8:	5a                   	pop    edx
c00129f9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00129fc:	59                   	pop    ecx
c00129fd:	8b 00                	mov    eax,DWORD PTR [eax]
c00129ff:	8b 00                	mov    eax,DWORD PTR [eax]
c0012a01:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012a04:	68 1e a1 02 c0       	push   0xc002a11e
c0012a09:	e8 07 01 00 00       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c0012a0e:	c7 04 24 26 a1 02 c0 	mov    DWORD PTR [esp],0xc002a126
c0012a15:	e8 15 76 00 00       	call   c001a02f <Krnl::panic(char const*)>
c0012a1a:	83 c4 10             	add    esp,0x10
c0012a1d:	c9                   	leave  
c0012a1e:	c3                   	ret    

c0012a1f <__cxa_pure_virtual>:
c0012a1f:	83 ec 18             	sub    esp,0x18
c0012a22:	68 3e a1 02 c0       	push   0xc002a13e
c0012a27:	e8 03 76 00 00       	call   c001a02f <Krnl::panic(char const*)>
c0012a2c:	83 c4 1c             	add    esp,0x1c
c0012a2f:	c3                   	ret    

c0012a30 <operator new[](unsigned long)>:
c0012a30:	e9 11 ce ff ff       	jmp    c000f846 <malloc>

c0012a35 <operator delete(void*, unsigned long)>:
c0012a35:	e9 2c ce ff ff       	jmp    c000f866 <rfree>

c0012a3a <operator delete[](void*)>:
c0012a3a:	e9 27 ce ff ff       	jmp    c000f866 <rfree>

c0012a3f <operator delete[](void*, unsigned long)>:
c0012a3f:	e9 22 ce ff ff       	jmp    c000f866 <rfree>

c0012a44 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c0012a44:	57                   	push   edi
c0012a45:	b9 3f 00 00 00       	mov    ecx,0x3f
c0012a4a:	56                   	push   esi
c0012a4b:	be 54 a1 02 c0       	mov    esi,0xc002a154
c0012a50:	53                   	push   ebx
c0012a51:	83 ec 40             	sub    esp,0x40
c0012a54:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0012a58:	8d 7c 24 01          	lea    edi,[esp+0x1]
c0012a5c:	fc                   	cld    
c0012a5d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012a5f:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c0012a63:	83 f9 3e             	cmp    ecx,0x3e
c0012a66:	7e 05                	jle    c0012a6d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x29>
c0012a68:	b9 3e 00 00 00       	mov    ecx,0x3e
c0012a6d:	89 df                	mov    edi,ebx
c0012a6f:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0012a73:	eb 02                	jmp    c0012a77 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x33>
c0012a75:	89 c7                	mov    edi,eax
c0012a77:	31 d2                	xor    edx,edx
c0012a79:	46                   	inc    esi
c0012a7a:	89 f8                	mov    eax,edi
c0012a7c:	f7 f1                	div    ecx
c0012a7e:	39 cf                	cmp    edi,ecx
c0012a80:	73 f3                	jae    c0012a75 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x31>
c0012a82:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012a85:	eb 02                	jmp    c0012a89 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x45>
c0012a87:	89 c3                	mov    ebx,eax
c0012a89:	31 d2                	xor    edx,edx
c0012a8b:	4e                   	dec    esi
c0012a8c:	89 d8                	mov    eax,ebx
c0012a8e:	f7 f1                	div    ecx
c0012a90:	39 cb                	cmp    ebx,ecx
c0012a92:	8a 54 14 01          	mov    dl,BYTE PTR [esp+edx*1+0x1]
c0012a96:	88 16                	mov    BYTE PTR [esi],dl
c0012a98:	73 ed                	jae    c0012a87 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x43>
c0012a9a:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012a9e:	83 c4 40             	add    esp,0x40
c0012aa1:	5b                   	pop    ebx
c0012aa2:	5e                   	pop    esi
c0012aa3:	5f                   	pop    edi
c0012aa4:	c3                   	ret    

c0012aa5 <Dbg::logc(char)>:
c0012aa5:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012aa9:	ba fd 03 00 00       	mov    edx,0x3fd
c0012aae:	ec                   	in     al,dx
c0012aaf:	a8 20                	test   al,0x20
c0012ab1:	74 fb                	je     c0012aae <Dbg::logc(char)+0x9>
c0012ab3:	ba f8 03 00 00       	mov    edx,0x3f8
c0012ab8:	88 c8                	mov    al,cl
c0012aba:	ee                   	out    dx,al
c0012abb:	c3                   	ret    

c0012abc <Dbg::logs(char*)>:
c0012abc:	53                   	push   ebx
c0012abd:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0012ac1:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012ac4:	84 c0                	test   al,al
c0012ac6:	74 0f                	je     c0012ad7 <Dbg::logs(char*)+0x1b>
c0012ac8:	50                   	push   eax
c0012ac9:	43                   	inc    ebx
c0012aca:	e8 d6 ff ff ff       	call   c0012aa5 <Dbg::logc(char)>
c0012acf:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012ad2:	5a                   	pop    edx
c0012ad3:	84 c0                	test   al,al
c0012ad5:	75 f1                	jne    c0012ac8 <Dbg::logs(char*)+0xc>
c0012ad7:	5b                   	pop    ebx
c0012ad8:	c3                   	ret    

c0012ad9 <Dbg::logWriteInt(unsigned int)>:
c0012ad9:	83 ec 10             	sub    esp,0x10
c0012adc:	6a 0a                	push   0xa
c0012ade:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012ae2:	50                   	push   eax
c0012ae3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012ae7:	e8 58 ff ff ff       	call   c0012a44 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012aec:	50                   	push   eax
c0012aed:	e8 ca ff ff ff       	call   c0012abc <Dbg::logs(char*)>
c0012af2:	83 c4 20             	add    esp,0x20
c0012af5:	c3                   	ret    

c0012af6 <Dbg::logWriteIntBase(unsigned int, int)>:
c0012af6:	83 ec 10             	sub    esp,0x10
c0012af9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012afd:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012b01:	50                   	push   eax
c0012b02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012b06:	e8 39 ff ff ff       	call   c0012a44 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012b0b:	50                   	push   eax
c0012b0c:	e8 ab ff ff ff       	call   c0012abc <Dbg::logs(char*)>
c0012b11:	83 c4 20             	add    esp,0x20
c0012b14:	c3                   	ret    

c0012b15 <Dbg::kprintf(char const*, ...)>:
c0012b15:	55                   	push   ebp
c0012b16:	57                   	push   edi
c0012b17:	56                   	push   esi
c0012b18:	53                   	push   ebx
c0012b19:	83 ec 0c             	sub    esp,0xc
c0012b1c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012b20:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012b24:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012b28:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0012b2b:	84 c0                	test   al,al
c0012b2d:	74 4a                	je     c0012b79 <Dbg::kprintf(char const*, ...)+0x64>
c0012b2f:	31 db                	xor    ebx,ebx
c0012b31:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0012b34:	3c 25                	cmp    al,0x25
c0012b36:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c0012b39:	0f 85 e4 00 00 00    	jne    c0012c23 <Dbg::kprintf(char const*, ...)+0x10e>
c0012b3f:	83 c3 02             	add    ebx,0x2
c0012b42:	8a 07                	mov    al,BYTE PTR [edi]
c0012b44:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c0012b47:	83 e8 25             	sub    eax,0x25
c0012b4a:	3c 53                	cmp    al,0x53
c0012b4c:	0f 87 ba 00 00 00    	ja     c0012c0c <Dbg::kprintf(char const*, ...)+0xf7>
c0012b52:	0f b6 c0             	movzx  eax,al
c0012b55:	ff 24 85 94 a1 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd5e6c]
c0012b5c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012b60:	89 c8                	mov    eax,ecx
c0012b62:	83 c1 04             	add    ecx,0x4
c0012b65:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012b69:	ff 30                	push   DWORD PTR [eax]
c0012b6b:	e8 4c ff ff ff       	call   c0012abc <Dbg::logs(char*)>
c0012b70:	58                   	pop    eax
c0012b71:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c0012b75:	84 c0                	test   al,al
c0012b77:	75 b8                	jne    c0012b31 <Dbg::kprintf(char const*, ...)+0x1c>
c0012b79:	83 c4 0c             	add    esp,0xc
c0012b7c:	5b                   	pop    ebx
c0012b7d:	5e                   	pop    esi
c0012b7e:	5f                   	pop    edi
c0012b7f:	5d                   	pop    ebp
c0012b80:	c3                   	ret    
c0012b81:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012b85:	89 d0                	mov    eax,edx
c0012b87:	83 c2 04             	add    edx,0x4
c0012b8a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012b8e:	ff 30                	push   DWORD PTR [eax]
c0012b90:	e8 44 ff ff ff       	call   c0012ad9 <Dbg::logWriteInt(unsigned int)>
c0012b95:	58                   	pop    eax
c0012b96:	eb d9                	jmp    c0012b71 <Dbg::kprintf(char const*, ...)+0x5c>
c0012b98:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012b9c:	89 d0                	mov    eax,edx
c0012b9e:	83 c2 04             	add    edx,0x4
c0012ba1:	0f be 00             	movsx  eax,BYTE PTR [eax]
c0012ba4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012ba8:	50                   	push   eax
c0012ba9:	e8 f7 fe ff ff       	call   c0012aa5 <Dbg::logc(char)>
c0012bae:	58                   	pop    eax
c0012baf:	eb c0                	jmp    c0012b71 <Dbg::kprintf(char const*, ...)+0x5c>
c0012bb1:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012bb5:	89 c8                	mov    eax,ecx
c0012bb7:	83 c1 04             	add    ecx,0x4
c0012bba:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012bbe:	ff 30                	push   DWORD PTR [eax]
c0012bc0:	e8 14 ff ff ff       	call   c0012ad9 <Dbg::logWriteInt(unsigned int)>
c0012bc5:	5f                   	pop    edi
c0012bc6:	eb a9                	jmp    c0012b71 <Dbg::kprintf(char const*, ...)+0x5c>
c0012bc8:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012bcc:	89 c8                	mov    eax,ecx
c0012bce:	83 c1 04             	add    ecx,0x4
c0012bd1:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012bd5:	6a 10                	push   0x10
c0012bd7:	ff 30                	push   DWORD PTR [eax]
c0012bd9:	e8 18 ff ff ff       	call   c0012af6 <Dbg::logWriteIntBase(unsigned int, int)>
c0012bde:	59                   	pop    ecx
c0012bdf:	5f                   	pop    edi
c0012be0:	eb 8f                	jmp    c0012b71 <Dbg::kprintf(char const*, ...)+0x5c>
c0012be2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012be6:	89 d0                	mov    eax,edx
c0012be8:	83 c2 08             	add    edx,0x8
c0012beb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012bef:	6a 10                	push   0x10
c0012bf1:	ff 30                	push   DWORD PTR [eax]
c0012bf3:	e8 fe fe ff ff       	call   c0012af6 <Dbg::logWriteIntBase(unsigned int, int)>
c0012bf8:	58                   	pop    eax
c0012bf9:	5a                   	pop    edx
c0012bfa:	e9 72 ff ff ff       	jmp    c0012b71 <Dbg::kprintf(char const*, ...)+0x5c>
c0012bff:	6a 25                	push   0x25
c0012c01:	e8 9f fe ff ff       	call   c0012aa5 <Dbg::logc(char)>
c0012c06:	58                   	pop    eax
c0012c07:	e9 65 ff ff ff       	jmp    c0012b71 <Dbg::kprintf(char const*, ...)+0x5c>
c0012c0c:	6a 25                	push   0x25
c0012c0e:	e8 92 fe ff ff       	call   c0012aa5 <Dbg::logc(char)>
c0012c13:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0012c16:	50                   	push   eax
c0012c17:	e8 89 fe ff ff       	call   c0012aa5 <Dbg::logc(char)>
c0012c1c:	5a                   	pop    edx
c0012c1d:	59                   	pop    ecx
c0012c1e:	e9 4e ff ff ff       	jmp    c0012b71 <Dbg::kprintf(char const*, ...)+0x5c>
c0012c23:	50                   	push   eax
c0012c24:	89 eb                	mov    ebx,ebp
c0012c26:	e8 7a fe ff ff       	call   c0012aa5 <Dbg::logc(char)>
c0012c2b:	89 fd                	mov    ebp,edi
c0012c2d:	58                   	pop    eax
c0012c2e:	e9 3e ff ff ff       	jmp    c0012b71 <Dbg::kprintf(char const*, ...)+0x5c>
c0012c33:	90                   	nop

c0012c34 <File::read(unsigned long long, void*, int*)>:
c0012c34:	53                   	push   ebx
c0012c35:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012c39:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012c3d:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012c44:	3c 19                	cmp    al,0x19
c0012c46:	77 35                	ja     c0012c7d <File::read(unsigned long long, void*, int*)+0x49>
c0012c48:	8b 04 85 80 e1 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1e80]
c0012c4f:	85 c0                	test   eax,eax
c0012c51:	74 2a                	je     c0012c7d <File::read(unsigned long long, void*, int*)+0x49>
c0012c53:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012c59:	85 c0                	test   eax,eax
c0012c5b:	74 20                	je     c0012c7d <File::read(unsigned long long, void*, int*)+0x49>
c0012c5d:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012c61:	74 21                	je     c0012c84 <File::read(unsigned long long, void*, int*)+0x50>
c0012c63:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012c65:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012c69:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012c6f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012c73:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012c77:	5b                   	pop    ebx
c0012c78:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c0012c7b:	ff e0                	jmp    eax
c0012c7d:	b8 0b 00 00 00       	mov    eax,0xb
c0012c82:	eb 05                	jmp    c0012c89 <File::read(unsigned long long, void*, int*)+0x55>
c0012c84:	b8 05 00 00 00       	mov    eax,0x5
c0012c89:	5b                   	pop    ebx
c0012c8a:	c3                   	ret    
c0012c8b:	90                   	nop

c0012c8c <File::write(unsigned long long, void*, int*)>:
c0012c8c:	53                   	push   ebx
c0012c8d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012c91:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012c95:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012c9c:	3c 19                	cmp    al,0x19
c0012c9e:	77 35                	ja     c0012cd5 <File::write(unsigned long long, void*, int*)+0x49>
c0012ca0:	8b 04 85 80 e1 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1e80]
c0012ca7:	85 c0                	test   eax,eax
c0012ca9:	74 2a                	je     c0012cd5 <File::write(unsigned long long, void*, int*)+0x49>
c0012cab:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012cb1:	85 c0                	test   eax,eax
c0012cb3:	74 20                	je     c0012cd5 <File::write(unsigned long long, void*, int*)+0x49>
c0012cb5:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012cb9:	74 21                	je     c0012cdc <File::write(unsigned long long, void*, int*)+0x50>
c0012cbb:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012cbd:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012cc1:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012cc7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012ccb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012ccf:	5b                   	pop    ebx
c0012cd0:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c0012cd3:	ff e0                	jmp    eax
c0012cd5:	b8 0b 00 00 00       	mov    eax,0xb
c0012cda:	eb 05                	jmp    c0012ce1 <File::write(unsigned long long, void*, int*)+0x55>
c0012cdc:	b8 05 00 00 00       	mov    eax,0x5
c0012ce1:	5b                   	pop    ebx
c0012ce2:	c3                   	ret    
c0012ce3:	90                   	nop

c0012ce4 <Directory::read(unsigned long long, void*, int*)>:
c0012ce4:	53                   	push   ebx
c0012ce5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012ce9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012ced:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012cf4:	3c 19                	cmp    al,0x19
c0012cf6:	77 35                	ja     c0012d2d <Directory::read(unsigned long long, void*, int*)+0x49>
c0012cf8:	8b 04 85 80 e1 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1e80]
c0012cff:	85 c0                	test   eax,eax
c0012d01:	74 2a                	je     c0012d2d <Directory::read(unsigned long long, void*, int*)+0x49>
c0012d03:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012d09:	85 c0                	test   eax,eax
c0012d0b:	74 20                	je     c0012d2d <Directory::read(unsigned long long, void*, int*)+0x49>
c0012d0d:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012d11:	74 21                	je     c0012d34 <Directory::read(unsigned long long, void*, int*)+0x50>
c0012d13:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012d15:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012d19:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012d1f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012d23:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012d27:	5b                   	pop    ebx
c0012d28:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c0012d2b:	ff e0                	jmp    eax
c0012d2d:	b8 0b 00 00 00       	mov    eax,0xb
c0012d32:	eb 05                	jmp    c0012d39 <Directory::read(unsigned long long, void*, int*)+0x55>
c0012d34:	b8 05 00 00 00       	mov    eax,0x5
c0012d39:	5b                   	pop    ebx
c0012d3a:	c3                   	ret    
c0012d3b:	90                   	nop

c0012d3c <Directory::write(unsigned long long, void*, int*)>:
c0012d3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012d40:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c0012d47:	b8 0b 00 00 00       	mov    eax,0xb
c0012d4c:	80 fa 19             	cmp    dl,0x19
c0012d4f:	77 18                	ja     c0012d69 <Directory::write(unsigned long long, void*, int*)+0x2d>
c0012d51:	8b 14 95 80 e1 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1e80]
c0012d58:	85 d2                	test   edx,edx
c0012d5a:	74 0d                	je     c0012d69 <Directory::write(unsigned long long, void*, int*)+0x2d>
c0012d5c:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c0012d63:	19 c0                	sbb    eax,eax
c0012d65:	83 e0 0a             	and    eax,0xa
c0012d68:	40                   	inc    eax
c0012d69:	c3                   	ret    

c0012d6a <File::isAtty()>:
c0012d6a:	31 c0                	xor    eax,eax
c0012d6c:	c3                   	ret    
c0012d6d:	90                   	nop

c0012d6e <Directory::isAtty()>:
c0012d6e:	31 c0                	xor    eax,eax
c0012d70:	c3                   	ret    
c0012d71:	90                   	nop

c0012d72 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0012d72:	b8 0a 00 00 00       	mov    eax,0xa
c0012d77:	c3                   	ret    

c0012d78 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c0012d78:	b8 0a 00 00 00       	mov    eax,0xa
c0012d7d:	c3                   	ret    

c0012d7e <File::~File()>:
c0012d7e:	83 ec 0c             	sub    esp,0xc
c0012d81:	ba 50 a3 02 c0       	mov    edx,0xc002a350
c0012d86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d8a:	89 10                	mov    DWORD PTR [eax],edx
c0012d8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d90:	83 ec 0c             	sub    esp,0xc
c0012d93:	50                   	push   eax
c0012d94:	e8 2b eb ff ff       	call   c00118c4 <UnixFile::~UnixFile()>
c0012d99:	83 c4 10             	add    esp,0x10
c0012d9c:	90                   	nop
c0012d9d:	83 c4 0c             	add    esp,0xc
c0012da0:	c3                   	ret    
c0012da1:	90                   	nop

c0012da2 <File::~File()>:
c0012da2:	83 ec 0c             	sub    esp,0xc
c0012da5:	83 ec 0c             	sub    esp,0xc
c0012da8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012dac:	e8 cd ff ff ff       	call   c0012d7e <File::~File()>
c0012db1:	83 c4 10             	add    esp,0x10
c0012db4:	83 ec 08             	sub    esp,0x8
c0012db7:	68 14 01 00 00       	push   0x114
c0012dbc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012dc0:	e8 70 fc ff ff       	call   c0012a35 <operator delete(void*, unsigned long)>
c0012dc5:	83 c4 10             	add    esp,0x10
c0012dc8:	83 c4 0c             	add    esp,0xc
c0012dcb:	c3                   	ret    

c0012dcc <Directory::~Directory()>:
c0012dcc:	83 ec 0c             	sub    esp,0xc
c0012dcf:	ba 6c a3 02 c0       	mov    edx,0xc002a36c
c0012dd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012dd8:	89 10                	mov    DWORD PTR [eax],edx
c0012dda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012dde:	83 ec 0c             	sub    esp,0xc
c0012de1:	50                   	push   eax
c0012de2:	e8 dd ea ff ff       	call   c00118c4 <UnixFile::~UnixFile()>
c0012de7:	83 c4 10             	add    esp,0x10
c0012dea:	90                   	nop
c0012deb:	83 c4 0c             	add    esp,0xc
c0012dee:	c3                   	ret    
c0012def:	90                   	nop

c0012df0 <Directory::~Directory()>:
c0012df0:	83 ec 0c             	sub    esp,0xc
c0012df3:	83 ec 0c             	sub    esp,0xc
c0012df6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012dfa:	e8 cd ff ff ff       	call   c0012dcc <Directory::~Directory()>
c0012dff:	83 c4 10             	add    esp,0x10
c0012e02:	83 ec 08             	sub    esp,0x8
c0012e05:	68 14 01 00 00       	push   0x114
c0012e0a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012e0e:	e8 22 fc ff ff       	call   c0012a35 <operator delete(void*, unsigned long)>
c0012e13:	83 c4 10             	add    esp,0x10
c0012e16:	83 c4 0c             	add    esp,0xc
c0012e19:	c3                   	ret    

c0012e1a <Filesystem::Filesystem()>:
c0012e1a:	ba ec a2 02 c0       	mov    edx,0xc002a2ec
c0012e1f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012e23:	89 10                	mov    DWORD PTR [eax],edx
c0012e25:	8b 15 e8 dc 02 c0    	mov    edx,DWORD PTR ds:0xc002dce8
c0012e2b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012e2f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0012e32:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012e36:	a3 e8 dc 02 c0       	mov    ds:0xc002dce8,eax
c0012e3b:	90                   	nop
c0012e3c:	c3                   	ret    
c0012e3d:	90                   	nop

c0012e3e <Filesystem::~Filesystem()>:
c0012e3e:	ba ec a2 02 c0       	mov    edx,0xc002a2ec
c0012e43:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012e47:	89 10                	mov    DWORD PTR [eax],edx
c0012e49:	90                   	nop
c0012e4a:	c3                   	ret    
c0012e4b:	90                   	nop

c0012e4c <Filesystem::~Filesystem()>:
c0012e4c:	83 ec 0c             	sub    esp,0xc
c0012e4f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012e53:	e8 e6 ff ff ff       	call   c0012e3e <Filesystem::~Filesystem()>
c0012e58:	83 c4 04             	add    esp,0x4
c0012e5b:	83 ec 08             	sub    esp,0x8
c0012e5e:	6a 08                	push   0x8
c0012e60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012e64:	e8 cc fb ff ff       	call   c0012a35 <operator delete(void*, unsigned long)>
c0012e69:	83 c4 10             	add    esp,0x10
c0012e6c:	83 c4 0c             	add    esp,0xc
c0012e6f:	c3                   	ret    

c0012e70 <Fs::getcwd(Process*, char*, int)>:
c0012e70:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012e74:	31 c0                	xor    eax,eax
c0012e76:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0012e79:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0012e7d:	7d 15                	jge    c0012e94 <Fs::getcwd(Process*, char*, int)+0x24>
c0012e7f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012e83:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c0012e8a:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0012e8d:	84 c9                	test   cl,cl
c0012e8f:	74 06                	je     c0012e97 <Fs::getcwd(Process*, char*, int)+0x27>
c0012e91:	40                   	inc    eax
c0012e92:	eb e2                	jmp    c0012e76 <Fs::getcwd(Process*, char*, int)+0x6>
c0012e94:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0012e97:	31 c0                	xor    eax,eax
c0012e99:	c3                   	ret    

c0012e9a <Fs::initVFS()>:
c0012e9a:	83 ec 18             	sub    esp,0x18
c0012e9d:	6a 08                	push   0x8
c0012e9f:	e8 a2 c9 ff ff       	call   c000f846 <malloc>
c0012ea4:	89 04 24             	mov    DWORD PTR [esp],eax
c0012ea7:	e8 86 d9 00 00       	call   c0020832 <FAT::FAT()>
c0012eac:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0012eb3:	e8 8e c9 ff ff       	call   c000f846 <malloc>
c0012eb8:	89 04 24             	mov    DWORD PTR [esp],eax
c0012ebb:	e8 ca eb 00 00       	call   c0021a8a <ISO9660::ISO9660()>
c0012ec0:	83 c4 1c             	add    esp,0x1c
c0012ec3:	c3                   	ret    

c0012ec4 <Fs::standardiseFiles(char*, char const*, char const*)>:
c0012ec4:	55                   	push   ebp
c0012ec5:	57                   	push   edi
c0012ec6:	56                   	push   esi
c0012ec7:	53                   	push   ebx
c0012ec8:	81 ec 10 04 00 00    	sub    esp,0x410
c0012ece:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c0012ed5:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c0012edc:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c0012ee3:	68 00 04 00 00       	push   0x400
c0012ee8:	6a 00                	push   0x0
c0012eea:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0012eee:	56                   	push   esi
c0012eef:	e8 84 d8 fe ff       	call   c0000778 <memset>
c0012ef4:	83 c4 10             	add    esp,0x10
c0012ef7:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c0012efb:	75 0b                	jne    c0012f08 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c0012efd:	50                   	push   eax
c0012efe:	50                   	push   eax
c0012eff:	57                   	push   edi
c0012f00:	56                   	push   esi
c0012f01:	e8 2e d9 fe ff       	call   c0000834 <strcpy>
c0012f06:	eb 41                	jmp    c0012f49 <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c0012f08:	8a 07                	mov    al,BYTE PTR [edi]
c0012f0a:	3c 5c                	cmp    al,0x5c
c0012f0c:	74 04                	je     c0012f12 <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c0012f0e:	3c 2f                	cmp    al,0x2f
c0012f10:	75 18                	jne    c0012f2a <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c0012f12:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0012f15:	3c 60                	cmp    al,0x60
c0012f17:	7e 03                	jle    c0012f1c <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c0012f19:	83 e8 20             	sub    eax,0x20
c0012f1c:	88 04 24             	mov    BYTE PTR [esp],al
c0012f1f:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012f26:	50                   	push   eax
c0012f27:	50                   	push   eax
c0012f28:	eb 18                	jmp    c0012f42 <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c0012f2a:	50                   	push   eax
c0012f2b:	50                   	push   eax
c0012f2c:	55                   	push   ebp
c0012f2d:	56                   	push   esi
c0012f2e:	e8 01 d9 fe ff       	call   c0000834 <strcpy>
c0012f33:	5a                   	pop    edx
c0012f34:	59                   	pop    ecx
c0012f35:	68 4b b9 02 c0       	push   0xc002b94b
c0012f3a:	56                   	push   esi
c0012f3b:	e8 34 da fe ff       	call   c0000974 <strcat>
c0012f40:	5d                   	pop    ebp
c0012f41:	58                   	pop    eax
c0012f42:	57                   	push   edi
c0012f43:	56                   	push   esi
c0012f44:	e8 2b da fe ff       	call   c0000974 <strcat>
c0012f49:	83 c4 10             	add    esp,0x10
c0012f4c:	8a 04 24             	mov    al,BYTE PTR [esp]
c0012f4f:	3c 60                	cmp    al,0x60
c0012f51:	7e 03                	jle    c0012f56 <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c0012f53:	83 e8 20             	sub    eax,0x20
c0012f56:	88 04 24             	mov    BYTE PTR [esp],al
c0012f59:	88 03                	mov    BYTE PTR [ebx],al
c0012f5b:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012f62:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c0012f68:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0012f6c:	bf 03 00 00 00       	mov    edi,0x3
c0012f71:	b8 03 00 00 00       	mov    eax,0x3
c0012f76:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c0012f79:	84 d2                	test   dl,dl
c0012f7b:	0f 84 91 00 00 00    	je     c0013012 <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c0012f81:	8d 4f 01             	lea    ecx,[edi+0x1]
c0012f84:	80 fa 5c             	cmp    dl,0x5c
c0012f87:	74 05                	je     c0012f8e <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c0012f89:	80 fa 2f             	cmp    dl,0x2f
c0012f8c:	75 12                	jne    c0012fa0 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0012f8e:	89 c5                	mov    ebp,eax
c0012f90:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012f95:	74 09                	je     c0012fa0 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0012f97:	40                   	inc    eax
c0012f98:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c0012f9c:	89 cf                	mov    edi,ecx
c0012f9e:	eb d6                	jmp    c0012f76 <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c0012fa0:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c0012fa5:	75 5b                	jne    c0013002 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0012fa7:	80 fa 2e             	cmp    dl,0x2e
c0012faa:	75 56                	jne    c0013002 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0012fac:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c0012fb0:	74 19                	je     c0012fcb <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c0012fb2:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0012fb7:	74 53                	je     c001300c <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0012fb9:	89 f9                	mov    ecx,edi
c0012fbb:	41                   	inc    ecx
c0012fbc:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0012fbf:	80 fa 2f             	cmp    dl,0x2f
c0012fc2:	74 f7                	je     c0012fbb <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0012fc4:	80 fa 5c             	cmp    dl,0x5c
c0012fc7:	74 f2                	je     c0012fbb <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0012fc9:	eb d1                	jmp    c0012f9c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012fcb:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0012fd0:	74 3a                	je     c001300c <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0012fd2:	83 f8 03             	cmp    eax,0x3
c0012fd5:	74 c5                	je     c0012f9c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012fd7:	41                   	inc    ecx
c0012fd8:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0012fdb:	80 fa 2f             	cmp    dl,0x2f
c0012fde:	74 f7                	je     c0012fd7 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0012fe0:	80 fa 5c             	cmp    dl,0x5c
c0012fe3:	74 f2                	je     c0012fd7 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0012fe5:	48                   	dec    eax
c0012fe6:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012fea:	75 06                	jne    c0012ff2 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0012fec:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012ff0:	eb f3                	jmp    c0012fe5 <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c0012ff2:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012ff6:	74 07                	je     c0012fff <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c0012ff8:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012ffc:	48                   	dec    eax
c0012ffd:	eb f3                	jmp    c0012ff2 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0012fff:	40                   	inc    eax
c0013000:	eb 9a                	jmp    c0012f9c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0013002:	80 fa 2f             	cmp    dl,0x2f
c0013005:	74 95                	je     c0012f9c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0013007:	80 fa 5c             	cmp    dl,0x5c
c001300a:	74 90                	je     c0012f9c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c001300c:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c001300f:	40                   	inc    eax
c0013010:	eb 8a                	jmp    c0012f9c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0013012:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0013016:	83 ec 0c             	sub    esp,0xc
c0013019:	53                   	push   ebx
c001301a:	e8 75 d7 fe ff       	call   c0000794 <strlen>
c001301f:	83 c4 10             	add    esp,0x10
c0013022:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c0013027:	75 26                	jne    c001304f <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c0013029:	83 ec 0c             	sub    esp,0xc
c001302c:	53                   	push   ebx
c001302d:	e8 62 d7 fe ff       	call   c0000794 <strlen>
c0013032:	83 c4 10             	add    esp,0x10
c0013035:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c001303a:	74 26                	je     c0013062 <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c001303c:	83 ec 0c             	sub    esp,0xc
c001303f:	53                   	push   ebx
c0013040:	e8 4f d7 fe ff       	call   c0000794 <strlen>
c0013045:	83 c4 10             	add    esp,0x10
c0013048:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001304d:	eb c7                	jmp    c0013016 <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c001304f:	83 ec 0c             	sub    esp,0xc
c0013052:	53                   	push   ebx
c0013053:	e8 3c d7 fe ff       	call   c0000794 <strlen>
c0013058:	83 c4 10             	add    esp,0x10
c001305b:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0013060:	74 c7                	je     c0013029 <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c0013062:	81 c4 0c 04 00 00    	add    esp,0x40c
c0013068:	5b                   	pop    ebx
c0013069:	5e                   	pop    esi
c001306a:	5f                   	pop    edi
c001306b:	5d                   	pop    ebp
c001306c:	c3                   	ret    
c001306d:	90                   	nop

c001306e <File::File(char const*, Process*)>:
c001306e:	83 ec 0c             	sub    esp,0xc
c0013071:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013075:	83 ec 08             	sub    esp,0x8
c0013078:	6a 00                	push   0x0
c001307a:	50                   	push   eax
c001307b:	e8 62 e6 ff ff       	call   c00116e2 <UnixFile::UnixFile(int)>
c0013080:	83 c4 10             	add    esp,0x10
c0013083:	ba 50 a3 02 c0       	mov    edx,0xc002a350
c0013088:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001308c:	89 10                	mov    DWORD PTR [eax],edx
c001308e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013092:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0013098:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001309c:	83 c0 0d             	add    eax,0xd
c001309f:	83 ec 04             	sub    esp,0x4
c00130a2:	52                   	push   edx
c00130a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00130a7:	50                   	push   eax
c00130a8:	e8 17 fe ff ff       	call   c0012ec4 <Fs::standardiseFiles(char*, char const*, char const*)>
c00130ad:	83 c4 10             	add    esp,0x10
c00130b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130b4:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c00130b7:	8d 50 bf             	lea    edx,[eax-0x41]
c00130ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130be:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c00130c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130c8:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c00130cc:	90                   	nop
c00130cd:	83 c4 0c             	add    esp,0xc
c00130d0:	c3                   	ret    
c00130d1:	90                   	nop

c00130d2 <File::open(FileOpenMode)>:
c00130d2:	53                   	push   ebx
c00130d3:	b8 0b 00 00 00       	mov    eax,0xb
c00130d8:	83 ec 08             	sub    esp,0x8
c00130db:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00130df:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c00130e6:	80 fa 19             	cmp    dl,0x19
c00130e9:	77 40                	ja     c001312b <File::open(FileOpenMode)+0x59>
c00130eb:	8b 14 95 80 e1 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1e80]
c00130f2:	85 d2                	test   edx,edx
c00130f4:	74 35                	je     c001312b <File::open(FileOpenMode)+0x59>
c00130f6:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c00130fc:	85 d2                	test   edx,edx
c00130fe:	74 2b                	je     c001312b <File::open(FileOpenMode)+0x59>
c0013100:	b8 06 00 00 00       	mov    eax,0x6
c0013105:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0013109:	75 20                	jne    c001312b <File::open(FileOpenMode)+0x59>
c001310b:	8b 02                	mov    eax,DWORD PTR [edx]
c001310d:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0013113:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013117:	51                   	push   ecx
c0013118:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c001311b:	51                   	push   ecx
c001311c:	52                   	push   edx
c001311d:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0013120:	83 c4 10             	add    esp,0x10
c0013123:	85 c0                	test   eax,eax
c0013125:	75 04                	jne    c001312b <File::open(FileOpenMode)+0x59>
c0013127:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c001312b:	83 c4 08             	add    esp,0x8
c001312e:	5b                   	pop    ebx
c001312f:	c3                   	ret    

c0013130 <File::close()>:
c0013130:	53                   	push   ebx
c0013131:	b8 0b 00 00 00       	mov    eax,0xb
c0013136:	83 ec 08             	sub    esp,0x8
c0013139:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001313d:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013144:	80 fa 19             	cmp    dl,0x19
c0013147:	77 41                	ja     c001318a <File::close()+0x5a>
c0013149:	8b 1c 95 80 e1 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd1e80]
c0013150:	85 db                	test   ebx,ebx
c0013152:	74 36                	je     c001318a <File::close()+0x5a>
c0013154:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c001315b:	74 2d                	je     c001318a <File::close()+0x5a>
c001315d:	b8 05 00 00 00       	mov    eax,0x5
c0013162:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0013166:	74 22                	je     c001318a <File::close()+0x5a>
c0013168:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c001316c:	8b 04 95 80 e1 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1e80]
c0013173:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0013179:	53                   	push   ebx
c001317a:	53                   	push   ebx
c001317b:	8b 10                	mov    edx,DWORD PTR [eax]
c001317d:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0013183:	50                   	push   eax
c0013184:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c0013187:	83 c4 10             	add    esp,0x10
c001318a:	83 c4 08             	add    esp,0x8
c001318d:	5b                   	pop    ebx
c001318e:	c3                   	ret    
c001318f:	90                   	nop

c0013190 <File::seek(unsigned long long)>:
c0013190:	56                   	push   esi
c0013191:	53                   	push   ebx
c0013192:	b8 0b 00 00 00       	mov    eax,0xb
c0013197:	51                   	push   ecx
c0013198:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001319c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00131a0:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c00131a7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00131ab:	80 fa 19             	cmp    dl,0x19
c00131ae:	77 31                	ja     c00131e1 <File::seek(unsigned long long)+0x51>
c00131b0:	8b 14 95 80 e1 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1e80]
c00131b7:	85 d2                	test   edx,edx
c00131b9:	74 26                	je     c00131e1 <File::seek(unsigned long long)+0x51>
c00131bb:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c00131c1:	85 d2                	test   edx,edx
c00131c3:	74 1c                	je     c00131e1 <File::seek(unsigned long long)+0x51>
c00131c5:	b8 05 00 00 00       	mov    eax,0x5
c00131ca:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c00131ce:	74 11                	je     c00131e1 <File::seek(unsigned long long)+0x51>
c00131d0:	8b 02                	mov    eax,DWORD PTR [edx]
c00131d2:	53                   	push   ebx
c00131d3:	51                   	push   ecx
c00131d4:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c00131da:	52                   	push   edx
c00131db:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00131de:	83 c4 10             	add    esp,0x10
c00131e1:	5a                   	pop    edx
c00131e2:	5b                   	pop    ebx
c00131e3:	5e                   	pop    esi
c00131e4:	c3                   	ret    
c00131e5:	90                   	nop

c00131e6 <File::tell(unsigned long long*)>:
c00131e6:	83 ec 0c             	sub    esp,0xc
c00131e9:	b8 0b 00 00 00       	mov    eax,0xb
c00131ee:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00131f2:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00131f9:	80 fa 19             	cmp    dl,0x19
c00131fc:	77 34                	ja     c0013232 <File::tell(unsigned long long*)+0x4c>
c00131fe:	8b 14 95 80 e1 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1e80]
c0013205:	85 d2                	test   edx,edx
c0013207:	74 29                	je     c0013232 <File::tell(unsigned long long*)+0x4c>
c0013209:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c001320f:	85 d2                	test   edx,edx
c0013211:	74 1f                	je     c0013232 <File::tell(unsigned long long*)+0x4c>
c0013213:	b8 05 00 00 00       	mov    eax,0x5
c0013218:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c001321c:	74 14                	je     c0013232 <File::tell(unsigned long long*)+0x4c>
c001321e:	50                   	push   eax
c001321f:	8b 02                	mov    eax,DWORD PTR [edx]
c0013221:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013225:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c001322b:	52                   	push   edx
c001322c:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001322f:	83 c4 10             	add    esp,0x10
c0013232:	83 c4 0c             	add    esp,0xc
c0013235:	c3                   	ret    

c0013236 <File::rewind()>:
c0013236:	83 ec 10             	sub    esp,0x10
c0013239:	6a 00                	push   0x0
c001323b:	6a 00                	push   0x0
c001323d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013241:	e8 4a ff ff ff       	call   c0013190 <File::seek(unsigned long long)>
c0013246:	83 c4 1c             	add    esp,0x1c
c0013249:	c3                   	ret    

c001324a <File::unlink()>:
c001324a:	83 ec 0c             	sub    esp,0xc
c001324d:	b8 0b 00 00 00       	mov    eax,0xb
c0013252:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013256:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001325d:	80 f9 19             	cmp    cl,0x19
c0013260:	77 2f                	ja     c0013291 <File::unlink()+0x47>
c0013262:	8b 0c 8d 80 e1 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1e80]
c0013269:	85 c9                	test   ecx,ecx
c001326b:	74 24                	je     c0013291 <File::unlink()+0x47>
c001326d:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013273:	85 c9                	test   ecx,ecx
c0013275:	74 1a                	je     c0013291 <File::unlink()+0x47>
c0013277:	b8 06 00 00 00       	mov    eax,0x6
c001327c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013280:	75 0f                	jne    c0013291 <File::unlink()+0x47>
c0013282:	83 c2 0d             	add    edx,0xd
c0013285:	50                   	push   eax
c0013286:	50                   	push   eax
c0013287:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013289:	52                   	push   edx
c001328a:	51                   	push   ecx
c001328b:	ff 50 38             	call   DWORD PTR [eax+0x38]
c001328e:	83 c4 10             	add    esp,0x10
c0013291:	83 c4 0c             	add    esp,0xc
c0013294:	c3                   	ret    
c0013295:	90                   	nop

c0013296 <File::rename(char const*)>:
c0013296:	83 ec 0c             	sub    esp,0xc
c0013299:	b8 0b 00 00 00       	mov    eax,0xb
c001329e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00132a2:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00132a9:	80 f9 19             	cmp    cl,0x19
c00132ac:	77 32                	ja     c00132e0 <File::rename(char const*)+0x4a>
c00132ae:	8b 0c 8d 80 e1 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1e80]
c00132b5:	85 c9                	test   ecx,ecx
c00132b7:	74 27                	je     c00132e0 <File::rename(char const*)+0x4a>
c00132b9:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00132bf:	85 c9                	test   ecx,ecx
c00132c1:	74 1d                	je     c00132e0 <File::rename(char const*)+0x4a>
c00132c3:	b8 06 00 00 00       	mov    eax,0x6
c00132c8:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00132cc:	75 12                	jne    c00132e0 <File::rename(char const*)+0x4a>
c00132ce:	83 c2 0d             	add    edx,0xd
c00132d1:	50                   	push   eax
c00132d2:	8b 01                	mov    eax,DWORD PTR [ecx]
c00132d4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00132d8:	52                   	push   edx
c00132d9:	51                   	push   ecx
c00132da:	ff 50 40             	call   DWORD PTR [eax+0x40]
c00132dd:	83 c4 10             	add    esp,0x10
c00132e0:	83 c4 0c             	add    esp,0xc
c00132e3:	c3                   	ret    

c00132e4 <File::chfatattr(unsigned char, unsigned char)>:
c00132e4:	57                   	push   edi
c00132e5:	b8 0b 00 00 00       	mov    eax,0xb
c00132ea:	56                   	push   esi
c00132eb:	53                   	push   ebx
c00132ec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00132f0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00132f4:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00132fb:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00132ff:	80 f9 19             	cmp    cl,0x19
c0013302:	77 37                	ja     c001333b <File::chfatattr(unsigned char, unsigned char)+0x57>
c0013304:	8b 0c 8d 80 e1 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1e80]
c001330b:	85 c9                	test   ecx,ecx
c001330d:	74 2c                	je     c001333b <File::chfatattr(unsigned char, unsigned char)+0x57>
c001330f:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013315:	85 c9                	test   ecx,ecx
c0013317:	74 22                	je     c001333b <File::chfatattr(unsigned char, unsigned char)+0x57>
c0013319:	b8 06 00 00 00       	mov    eax,0x6
c001331e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013322:	75 17                	jne    c001333b <File::chfatattr(unsigned char, unsigned char)+0x57>
c0013324:	8b 39                	mov    edi,DWORD PTR [ecx]
c0013326:	89 f0                	mov    eax,esi
c0013328:	83 c2 0d             	add    edx,0xd
c001332b:	0f b6 f0             	movzx  esi,al
c001332e:	0f b6 db             	movzx  ebx,bl
c0013331:	56                   	push   esi
c0013332:	53                   	push   ebx
c0013333:	52                   	push   edx
c0013334:	51                   	push   ecx
c0013335:	ff 57 34             	call   DWORD PTR [edi+0x34]
c0013338:	83 c4 10             	add    esp,0x10
c001333b:	5b                   	pop    ebx
c001333c:	5e                   	pop    esi
c001333d:	5f                   	pop    edi
c001333e:	c3                   	ret    
c001333f:	90                   	nop

c0013340 <File::exists()>:
c0013340:	83 ec 0c             	sub    esp,0xc
c0013343:	31 c0                	xor    eax,eax
c0013345:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013349:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013350:	80 f9 19             	cmp    cl,0x19
c0013353:	77 24                	ja     c0013379 <File::exists()+0x39>
c0013355:	8b 0c 8d 80 e1 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1e80]
c001335c:	85 c9                	test   ecx,ecx
c001335e:	74 19                	je     c0013379 <File::exists()+0x39>
c0013360:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013366:	85 c9                	test   ecx,ecx
c0013368:	74 0f                	je     c0013379 <File::exists()+0x39>
c001336a:	83 c2 0d             	add    edx,0xd
c001336d:	50                   	push   eax
c001336e:	50                   	push   eax
c001336f:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013371:	52                   	push   edx
c0013372:	51                   	push   ecx
c0013373:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0013376:	83 c4 10             	add    esp,0x10
c0013379:	83 c4 0c             	add    esp,0xc
c001337c:	c3                   	ret    
c001337d:	90                   	nop

c001337e <File::stat(unsigned long long*, bool*)>:
c001337e:	56                   	push   esi
c001337f:	53                   	push   ebx
c0013380:	50                   	push   eax
c0013381:	b8 0b 00 00 00       	mov    eax,0xb
c0013386:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001338a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001338e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013395:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013399:	80 f9 19             	cmp    cl,0x19
c001339c:	77 3d                	ja     c00133db <File::stat(unsigned long long*, bool*)+0x5d>
c001339e:	8b 0c 8d 80 e1 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1e80]
c00133a5:	85 c9                	test   ecx,ecx
c00133a7:	74 32                	je     c00133db <File::stat(unsigned long long*, bool*)+0x5d>
c00133a9:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00133af:	85 c9                	test   ecx,ecx
c00133b1:	74 28                	je     c00133db <File::stat(unsigned long long*, bool*)+0x5d>
c00133b3:	8b 01                	mov    eax,DWORD PTR [ecx]
c00133b5:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00133b9:	74 13                	je     c00133ce <File::stat(unsigned long long*, bool*)+0x50>
c00133bb:	83 ec 04             	sub    esp,0x4
c00133be:	56                   	push   esi
c00133bf:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c00133c5:	51                   	push   ecx
c00133c6:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c00133c9:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00133cc:	eb 0a                	jmp    c00133d8 <File::stat(unsigned long long*, bool*)+0x5a>
c00133ce:	53                   	push   ebx
c00133cf:	83 c2 0d             	add    edx,0xd
c00133d2:	56                   	push   esi
c00133d3:	52                   	push   edx
c00133d4:	51                   	push   ecx
c00133d5:	ff 50 30             	call   DWORD PTR [eax+0x30]
c00133d8:	83 c4 10             	add    esp,0x10
c00133db:	5a                   	pop    edx
c00133dc:	5b                   	pop    ebx
c00133dd:	5e                   	pop    esi
c00133de:	c3                   	ret    

c00133df <Fs::setcwd(Process*, char*)>:
c00133df:	55                   	push   ebp
c00133e0:	57                   	push   edi
c00133e1:	56                   	push   esi
c00133e2:	53                   	push   ebx
c00133e3:	81 ec 20 02 00 00    	sub    esp,0x220
c00133e9:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c00133f0:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c00133f6:	57                   	push   edi
c00133f7:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00133fe:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c0013402:	56                   	push   esi
c0013403:	e8 bc fa ff ff       	call   c0012ec4 <Fs::standardiseFiles(char*, char const*, char const*)>
c0013408:	89 34 24             	mov    DWORD PTR [esp],esi
c001340b:	e8 84 d3 fe ff       	call   c0000794 <strlen>
c0013410:	83 c4 10             	add    esp,0x10
c0013413:	83 f8 02             	cmp    eax,0x2
c0013416:	77 17                	ja     c001342f <Fs::setcwd(Process*, char*)+0x50>
c0013418:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c001341d:	83 e8 41             	sub    eax,0x41
c0013420:	83 f8 19             	cmp    eax,0x19
c0013423:	76 24                	jbe    c0013449 <Fs::setcwd(Process*, char*)+0x6a>
c0013425:	b8 03 00 00 00       	mov    eax,0x3
c001342a:	e9 e0 00 00 00       	jmp    c001350f <Fs::setcwd(Process*, char*)+0x130>
c001342f:	83 ec 0c             	sub    esp,0xc
c0013432:	56                   	push   esi
c0013433:	e8 5c d3 fe ff       	call   c0000794 <strlen>
c0013438:	83 c4 10             	add    esp,0x10
c001343b:	83 f8 03             	cmp    eax,0x3
c001343e:	75 34                	jne    c0013474 <Fs::setcwd(Process*, char*)+0x95>
c0013440:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c0013445:	75 2d                	jne    c0013474 <Fs::setcwd(Process*, char*)+0x95>
c0013447:	eb cf                	jmp    c0013418 <Fs::setcwd(Process*, char*)+0x39>
c0013449:	8b 14 85 80 e1 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1e80]
c0013450:	b8 05 00 00 00       	mov    eax,0x5
c0013455:	85 d2                	test   edx,edx
c0013457:	0f 84 b2 00 00 00    	je     c001350f <Fs::setcwd(Process*, char*)+0x130>
c001345d:	b8 06 00 00 00       	mov    eax,0x6
c0013462:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0013469:	0f 85 92 00 00 00    	jne    c0013501 <Fs::setcwd(Process*, char*)+0x122>
c001346f:	e9 9b 00 00 00       	jmp    c001350f <Fs::setcwd(Process*, char*)+0x130>
c0013474:	83 ec 0c             	sub    esp,0xc
c0013477:	68 14 01 00 00       	push   0x114
c001347c:	e8 c5 c3 ff ff       	call   c000f846 <malloc>
c0013481:	83 c4 0c             	add    esp,0xc
c0013484:	89 c3                	mov    ebx,eax
c0013486:	55                   	push   ebp
c0013487:	56                   	push   esi
c0013488:	50                   	push   eax
c0013489:	e8 e0 fb ff ff       	call   c001306e <File::File(char const*, Process*)>
c001348e:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c0013493:	83 c4 0c             	add    esp,0xc
c0013496:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001349a:	50                   	push   eax
c001349b:	8d 44 24 10          	lea    eax,[esp+0x10]
c001349f:	50                   	push   eax
c00134a0:	53                   	push   ebx
c00134a1:	e8 d8 fe ff ff       	call   c001337e <File::stat(unsigned long long*, bool*)>
c00134a6:	83 c4 10             	add    esp,0x10
c00134a9:	83 f8 02             	cmp    eax,0x2
c00134ac:	74 04                	je     c00134b2 <Fs::setcwd(Process*, char*)+0xd3>
c00134ae:	85 c0                	test   eax,eax
c00134b0:	74 1c                	je     c00134ce <Fs::setcwd(Process*, char*)+0xef>
c00134b2:	b8 01 00 00 00       	mov    eax,0x1
c00134b7:	85 db                	test   ebx,ebx
c00134b9:	74 54                	je     c001350f <Fs::setcwd(Process*, char*)+0x130>
c00134bb:	83 ec 0c             	sub    esp,0xc
c00134be:	8b 03                	mov    eax,DWORD PTR [ebx]
c00134c0:	53                   	push   ebx
c00134c1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00134c4:	83 c4 10             	add    esp,0x10
c00134c7:	b8 01 00 00 00       	mov    eax,0x1
c00134cc:	eb 41                	jmp    c001350f <Fs::setcwd(Process*, char*)+0x130>
c00134ce:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c00134d3:	75 1c                	jne    c00134f1 <Fs::setcwd(Process*, char*)+0x112>
c00134d5:	b8 02 00 00 00       	mov    eax,0x2
c00134da:	85 db                	test   ebx,ebx
c00134dc:	74 31                	je     c001350f <Fs::setcwd(Process*, char*)+0x130>
c00134de:	83 ec 0c             	sub    esp,0xc
c00134e1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00134e3:	53                   	push   ebx
c00134e4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00134e7:	83 c4 10             	add    esp,0x10
c00134ea:	b8 02 00 00 00       	mov    eax,0x2
c00134ef:	eb 1e                	jmp    c001350f <Fs::setcwd(Process*, char*)+0x130>
c00134f1:	85 db                	test   ebx,ebx
c00134f3:	74 0c                	je     c0013501 <Fs::setcwd(Process*, char*)+0x122>
c00134f5:	83 ec 0c             	sub    esp,0xc
c00134f8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00134fa:	53                   	push   ebx
c00134fb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00134fe:	83 c4 10             	add    esp,0x10
c0013501:	50                   	push   eax
c0013502:	50                   	push   eax
c0013503:	56                   	push   esi
c0013504:	57                   	push   edi
c0013505:	e8 2a d3 fe ff       	call   c0000834 <strcpy>
c001350a:	83 c4 10             	add    esp,0x10
c001350d:	31 c0                	xor    eax,eax
c001350f:	81 c4 1c 02 00 00    	add    esp,0x21c
c0013515:	5b                   	pop    ebx
c0013516:	5e                   	pop    esi
c0013517:	5f                   	pop    edi
c0013518:	5d                   	pop    ebp
c0013519:	c3                   	ret    

c001351a <Directory::Directory(char const*, Process*)>:
c001351a:	83 ec 0c             	sub    esp,0xc
c001351d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013521:	83 ec 08             	sub    esp,0x8
c0013524:	6a 00                	push   0x0
c0013526:	50                   	push   eax
c0013527:	e8 b6 e1 ff ff       	call   c00116e2 <UnixFile::UnixFile(int)>
c001352c:	83 c4 10             	add    esp,0x10
c001352f:	ba 6c a3 02 c0       	mov    edx,0xc002a36c
c0013534:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013538:	89 10                	mov    DWORD PTR [eax],edx
c001353a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001353e:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0013544:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013548:	83 c0 0d             	add    eax,0xd
c001354b:	83 ec 04             	sub    esp,0x4
c001354e:	52                   	push   edx
c001354f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013553:	50                   	push   eax
c0013554:	e8 6b f9 ff ff       	call   c0012ec4 <Fs::standardiseFiles(char*, char const*, char const*)>
c0013559:	83 c4 10             	add    esp,0x10
c001355c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013560:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0013563:	8d 50 bf             	lea    edx,[eax-0x41]
c0013566:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001356a:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0013570:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013574:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0013578:	90                   	nop
c0013579:	83 c4 0c             	add    esp,0xc
c001357c:	c3                   	ret    
c001357d:	90                   	nop

c001357e <Directory::open()>:
c001357e:	53                   	push   ebx
c001357f:	b8 0b 00 00 00       	mov    eax,0xb
c0013584:	83 ec 08             	sub    esp,0x8
c0013587:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001358b:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0013592:	80 fa 19             	cmp    dl,0x19
c0013595:	77 3d                	ja     c00135d4 <Directory::open()+0x56>
c0013597:	8b 14 95 80 e1 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1e80]
c001359e:	85 d2                	test   edx,edx
c00135a0:	74 32                	je     c00135d4 <Directory::open()+0x56>
c00135a2:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c00135a8:	85 d2                	test   edx,edx
c00135aa:	74 28                	je     c00135d4 <Directory::open()+0x56>
c00135ac:	b8 06 00 00 00       	mov    eax,0x6
c00135b1:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c00135b5:	75 1d                	jne    c00135d4 <Directory::open()+0x56>
c00135b7:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c00135bd:	50                   	push   eax
c00135be:	8b 02                	mov    eax,DWORD PTR [edx]
c00135c0:	51                   	push   ecx
c00135c1:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c00135c4:	51                   	push   ecx
c00135c5:	52                   	push   edx
c00135c6:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c00135c9:	83 c4 10             	add    esp,0x10
c00135cc:	85 c0                	test   eax,eax
c00135ce:	75 04                	jne    c00135d4 <Directory::open()+0x56>
c00135d0:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c00135d4:	83 c4 08             	add    esp,0x8
c00135d7:	5b                   	pop    ebx
c00135d8:	c3                   	ret    
c00135d9:	90                   	nop

c00135da <Directory::close()>:
c00135da:	53                   	push   ebx
c00135db:	b8 0b 00 00 00       	mov    eax,0xb
c00135e0:	83 ec 08             	sub    esp,0x8
c00135e3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00135e7:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00135ee:	80 fa 19             	cmp    dl,0x19
c00135f1:	77 41                	ja     c0013634 <Directory::close()+0x5a>
c00135f3:	8b 1c 95 80 e1 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd1e80]
c00135fa:	85 db                	test   ebx,ebx
c00135fc:	74 36                	je     c0013634 <Directory::close()+0x5a>
c00135fe:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0013605:	74 2d                	je     c0013634 <Directory::close()+0x5a>
c0013607:	b8 05 00 00 00       	mov    eax,0x5
c001360c:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0013610:	74 22                	je     c0013634 <Directory::close()+0x5a>
c0013612:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0013616:	8b 04 95 80 e1 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1e80]
c001361d:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0013623:	53                   	push   ebx
c0013624:	53                   	push   ebx
c0013625:	8b 10                	mov    edx,DWORD PTR [eax]
c0013627:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c001362d:	50                   	push   eax
c001362e:	ff 52 20             	call   DWORD PTR [edx+0x20]
c0013631:	83 c4 10             	add    esp,0x10
c0013634:	83 c4 08             	add    esp,0x8
c0013637:	5b                   	pop    ebx
c0013638:	c3                   	ret    
c0013639:	90                   	nop

c001363a <Directory::unlink()>:
c001363a:	83 ec 0c             	sub    esp,0xc
c001363d:	b8 0b 00 00 00       	mov    eax,0xb
c0013642:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013646:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001364d:	80 f9 19             	cmp    cl,0x19
c0013650:	77 2f                	ja     c0013681 <Directory::unlink()+0x47>
c0013652:	8b 0c 8d 80 e1 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1e80]
c0013659:	85 c9                	test   ecx,ecx
c001365b:	74 24                	je     c0013681 <Directory::unlink()+0x47>
c001365d:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013663:	85 c9                	test   ecx,ecx
c0013665:	74 1a                	je     c0013681 <Directory::unlink()+0x47>
c0013667:	b8 06 00 00 00       	mov    eax,0x6
c001366c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013670:	75 0f                	jne    c0013681 <Directory::unlink()+0x47>
c0013672:	83 c2 0d             	add    edx,0xd
c0013675:	50                   	push   eax
c0013676:	50                   	push   eax
c0013677:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013679:	52                   	push   edx
c001367a:	51                   	push   ecx
c001367b:	ff 50 38             	call   DWORD PTR [eax+0x38]
c001367e:	83 c4 10             	add    esp,0x10
c0013681:	83 c4 0c             	add    esp,0xc
c0013684:	c3                   	ret    
c0013685:	90                   	nop

c0013686 <Directory::rename(char const*)>:
c0013686:	83 ec 0c             	sub    esp,0xc
c0013689:	b8 0b 00 00 00       	mov    eax,0xb
c001368e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013692:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013699:	80 f9 19             	cmp    cl,0x19
c001369c:	77 32                	ja     c00136d0 <Directory::rename(char const*)+0x4a>
c001369e:	8b 0c 8d 80 e1 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1e80]
c00136a5:	85 c9                	test   ecx,ecx
c00136a7:	74 27                	je     c00136d0 <Directory::rename(char const*)+0x4a>
c00136a9:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00136af:	85 c9                	test   ecx,ecx
c00136b1:	74 1d                	je     c00136d0 <Directory::rename(char const*)+0x4a>
c00136b3:	b8 06 00 00 00       	mov    eax,0x6
c00136b8:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00136bc:	75 12                	jne    c00136d0 <Directory::rename(char const*)+0x4a>
c00136be:	83 c2 0d             	add    edx,0xd
c00136c1:	50                   	push   eax
c00136c2:	8b 01                	mov    eax,DWORD PTR [ecx]
c00136c4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00136c8:	52                   	push   edx
c00136c9:	51                   	push   ecx
c00136ca:	ff 50 40             	call   DWORD PTR [eax+0x40]
c00136cd:	83 c4 10             	add    esp,0x10
c00136d0:	83 c4 0c             	add    esp,0xc
c00136d3:	c3                   	ret    

c00136d4 <Directory::exists()>:
c00136d4:	83 ec 0c             	sub    esp,0xc
c00136d7:	31 c0                	xor    eax,eax
c00136d9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00136dd:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00136e4:	80 f9 19             	cmp    cl,0x19
c00136e7:	77 24                	ja     c001370d <Directory::exists()+0x39>
c00136e9:	8b 0c 8d 80 e1 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1e80]
c00136f0:	85 c9                	test   ecx,ecx
c00136f2:	74 19                	je     c001370d <Directory::exists()+0x39>
c00136f4:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00136fa:	85 c9                	test   ecx,ecx
c00136fc:	74 0f                	je     c001370d <Directory::exists()+0x39>
c00136fe:	83 c2 0d             	add    edx,0xd
c0013701:	50                   	push   eax
c0013702:	50                   	push   eax
c0013703:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013705:	52                   	push   edx
c0013706:	51                   	push   ecx
c0013707:	ff 50 44             	call   DWORD PTR [eax+0x44]
c001370a:	83 c4 10             	add    esp,0x10
c001370d:	83 c4 0c             	add    esp,0xc
c0013710:	c3                   	ret    
c0013711:	90                   	nop

c0013712 <Directory::read(dirent*)>:
c0013712:	83 ec 1c             	sub    esp,0x1c
c0013715:	b8 0b 00 00 00       	mov    eax,0xb
c001371a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001371e:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013725:	80 fa 19             	cmp    dl,0x19
c0013728:	77 30                	ja     c001375a <Directory::read(dirent*)+0x48>
c001372a:	8b 14 95 80 e1 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1e80]
c0013731:	85 d2                	test   edx,edx
c0013733:	74 25                	je     c001375a <Directory::read(dirent*)+0x48>
c0013735:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c001373c:	74 1c                	je     c001375a <Directory::read(dirent*)+0x48>
c001373e:	83 ec 0c             	sub    esp,0xc
c0013741:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013743:	8d 54 24 18          	lea    edx,[esp+0x18]
c0013747:	52                   	push   edx
c0013748:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001374c:	6a 00                	push   0x0
c001374e:	68 10 01 00 00       	push   0x110
c0013753:	51                   	push   ecx
c0013754:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013757:	83 c4 20             	add    esp,0x20
c001375a:	83 c4 1c             	add    esp,0x1c
c001375d:	c3                   	ret    

c001375e <Directory::create()>:
c001375e:	83 ec 0c             	sub    esp,0xc
c0013761:	b8 0b 00 00 00       	mov    eax,0xb
c0013766:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001376a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013771:	80 f9 19             	cmp    cl,0x19
c0013774:	77 2f                	ja     c00137a5 <Directory::create()+0x47>
c0013776:	8b 0c 8d 80 e1 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1e80]
c001377d:	85 c9                	test   ecx,ecx
c001377f:	74 24                	je     c00137a5 <Directory::create()+0x47>
c0013781:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013787:	85 c9                	test   ecx,ecx
c0013789:	74 1a                	je     c00137a5 <Directory::create()+0x47>
c001378b:	b8 06 00 00 00       	mov    eax,0x6
c0013790:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013794:	75 0f                	jne    c00137a5 <Directory::create()+0x47>
c0013796:	83 c2 0d             	add    edx,0xd
c0013799:	50                   	push   eax
c001379a:	50                   	push   eax
c001379b:	8b 01                	mov    eax,DWORD PTR [ecx]
c001379d:	52                   	push   edx
c001379e:	51                   	push   ecx
c001379f:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c00137a2:	83 c4 10             	add    esp,0x10
c00137a5:	83 c4 0c             	add    esp,0xc
c00137a8:	c3                   	ret    
c00137a9:	90                   	nop

c00137aa <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c00137aa:	b8 0a 00 00 00       	mov    eax,0xa
c00137af:	c3                   	ret    

c00137b0 <Bus::Bus(char const*)>:
c00137b0:	83 ec 0c             	sub    esp,0xc
c00137b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137b7:	83 ec 08             	sub    esp,0x8
c00137ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00137be:	50                   	push   eax
c00137bf:	e8 68 09 00 00       	call   c001412c <Device::Device(char const*)>
c00137c4:	83 c4 10             	add    esp,0x10
c00137c7:	ba 88 a3 02 c0       	mov    edx,0xc002a388
c00137cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137d0:	89 10                	mov    DWORD PTR [eax],edx
c00137d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137d6:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c00137e0:	90                   	nop
c00137e1:	83 c4 0c             	add    esp,0xc
c00137e4:	c3                   	ret    
c00137e5:	90                   	nop

c00137e6 <Bus::~Bus()>:
c00137e6:	83 ec 0c             	sub    esp,0xc
c00137e9:	ba 88 a3 02 c0       	mov    edx,0xc002a388
c00137ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137f2:	89 10                	mov    DWORD PTR [eax],edx
c00137f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137f8:	83 ec 0c             	sub    esp,0xc
c00137fb:	50                   	push   eax
c00137fc:	e8 0d 06 00 00       	call   c0013e0e <Device::~Device()>
c0013801:	83 c4 10             	add    esp,0x10
c0013804:	90                   	nop
c0013805:	83 c4 0c             	add    esp,0xc
c0013808:	c3                   	ret    
c0013809:	90                   	nop

c001380a <Bus::~Bus()>:
c001380a:	83 ec 0c             	sub    esp,0xc
c001380d:	83 ec 0c             	sub    esp,0xc
c0013810:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013814:	e8 cd ff ff ff       	call   c00137e6 <Bus::~Bus()>
c0013819:	83 c4 10             	add    esp,0x10
c001381c:	83 ec 08             	sub    esp,0x8
c001381f:	68 58 01 00 00       	push   0x158
c0013824:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013828:	e8 08 f2 ff ff       	call   c0012a35 <operator delete(void*, unsigned long)>
c001382d:	83 c4 10             	add    esp,0x10
c0013830:	83 c4 0c             	add    esp,0xc
c0013833:	c3                   	ret    

c0013834 <Buzzer::Buzzer(char const*)>:
c0013834:	83 ec 0c             	sub    esp,0xc
c0013837:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001383b:	83 ec 08             	sub    esp,0x8
c001383e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013842:	50                   	push   eax
c0013843:	e8 e4 08 00 00       	call   c001412c <Device::Device(char const*)>
c0013848:	83 c4 10             	add    esp,0x10
c001384b:	ba b4 a3 02 c0       	mov    edx,0xc002a3b4
c0013850:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013854:	89 10                	mov    DWORD PTR [eax],edx
c0013856:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001385a:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013864:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013868:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c0013872:	90                   	nop
c0013873:	83 c4 0c             	add    esp,0xc
c0013876:	c3                   	ret    
c0013877:	90                   	nop

c0013878 <Buzzer::~Buzzer()>:
c0013878:	83 ec 0c             	sub    esp,0xc
c001387b:	ba b4 a3 02 c0       	mov    edx,0xc002a3b4
c0013880:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013884:	89 10                	mov    DWORD PTR [eax],edx
c0013886:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001388a:	83 ec 0c             	sub    esp,0xc
c001388d:	50                   	push   eax
c001388e:	e8 7b 05 00 00       	call   c0013e0e <Device::~Device()>
c0013893:	83 c4 10             	add    esp,0x10
c0013896:	90                   	nop
c0013897:	83 c4 0c             	add    esp,0xc
c001389a:	c3                   	ret    
c001389b:	90                   	nop

c001389c <Buzzer::~Buzzer()>:
c001389c:	83 ec 0c             	sub    esp,0xc
c001389f:	83 ec 0c             	sub    esp,0xc
c00138a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00138a6:	e8 cd ff ff ff       	call   c0013878 <Buzzer::~Buzzer()>
c00138ab:	83 c4 10             	add    esp,0x10
c00138ae:	83 ec 08             	sub    esp,0x8
c00138b1:	68 5c 01 00 00       	push   0x15c
c00138b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00138ba:	e8 76 f1 ff ff       	call   c0012a35 <operator delete(void*, unsigned long)>
c00138bf:	83 c4 10             	add    esp,0x10
c00138c2:	83 c4 0c             	add    esp,0xc
c00138c5:	c3                   	ret    

c00138c6 <Buzzer::stop()>:
c00138c6:	83 ec 14             	sub    esp,0x14
c00138c9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00138cd:	8b 10                	mov    edx,DWORD PTR [eax]
c00138cf:	6a 00                	push   0x0
c00138d1:	50                   	push   eax
c00138d2:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00138d5:	83 c4 1c             	add    esp,0x1c
c00138d8:	c3                   	ret    

c00138d9 <beepThread(void*)>:
c00138d9:	53                   	push   ebx
c00138da:	83 ec 08             	sub    esp,0x8
c00138dd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00138e1:	e8 da 9d 00 00       	call   c001d6c0 <unlockScheduler()>
c00138e6:	b8 40 42 0f 00       	mov    eax,0xf4240
c00138eb:	52                   	push   edx
c00138ec:	52                   	push   edx
c00138ed:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c00138f3:	52                   	push   edx
c00138f4:	50                   	push   eax
c00138f5:	e8 14 a3 00 00       	call   c001dc0e <nanoSleep(unsigned long long)>
c00138fa:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00138fd:	e8 c4 ff ff ff       	call   c00138c6 <Buzzer::stop()>
c0013902:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c001390a:	83 c4 18             	add    esp,0x18
c001390d:	5b                   	pop    ebx
c001390e:	e9 41 a2 00 00       	jmp    c001db54 <blockTask(TaskState)>
c0013913:	90                   	nop

c0013914 <Buzzer::beep(int, int, bool)>:
c0013914:	57                   	push   edi
c0013915:	56                   	push   esi
c0013916:	53                   	push   ebx
c0013917:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001391b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001391f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013923:	52                   	push   edx
c0013924:	52                   	push   edx
c0013925:	8b 06                	mov    eax,DWORD PTR [esi]
c0013927:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001392b:	56                   	push   esi
c001392c:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001392f:	83 c4 10             	add    esp,0x10
c0013932:	89 f8                	mov    eax,edi
c0013934:	84 c0                	test   al,al
c0013936:	74 1f                	je     c0013957 <Buzzer::beep(int, int, bool)+0x43>
c0013938:	50                   	push   eax
c0013939:	50                   	push   eax
c001393a:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c0013940:	99                   	cdq    
c0013941:	52                   	push   edx
c0013942:	50                   	push   eax
c0013943:	e8 c6 a2 00 00       	call   c001dc0e <nanoSleep(unsigned long long)>
c0013948:	83 c4 10             	add    esp,0x10
c001394b:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001394f:	5b                   	pop    ebx
c0013950:	5e                   	pop    esi
c0013951:	5f                   	pop    edi
c0013952:	e9 6f ff ff ff       	jmp    c00138c6 <Buzzer::stop()>
c0013957:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c001395d:	a1 d4 10 03 c0       	mov    eax,ds:0xc00310d4
c0013962:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c001396a:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c001396e:	c7 44 24 14 d9 38 01 c0 	mov    DWORD PTR [esp+0x14],0xc00138d9
c0013976:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001397a:	5b                   	pop    ebx
c001397b:	5e                   	pop    esi
c001397c:	5f                   	pop    edi
c001397d:	e9 6e 9e 00 00       	jmp    c001d7f0 <Process::createThread(void (*)(void*), void*, int)>

c0013982 <User::loadClockSettings(int)>:
c0013982:	53                   	push   ebx
c0013983:	83 ec 14             	sub    esp,0x14
c0013986:	68 14 01 00 00       	push   0x114
c001398b:	e8 b6 be ff ff       	call   c000f846 <malloc>
c0013990:	83 c4 0c             	add    esp,0xc
c0013993:	89 c3                	mov    ebx,eax
c0013995:	ff 35 d4 10 03 c0    	push   DWORD PTR ds:0xc00310d4
c001399b:	68 dc a3 02 c0       	push   0xc002a3dc
c00139a0:	50                   	push   eax
c00139a1:	e8 c8 f6 ff ff       	call   c001306e <File::File(char const*, Process*)>
c00139a6:	58                   	pop    eax
c00139a7:	5a                   	pop    edx
c00139a8:	6a 01                	push   0x1
c00139aa:	53                   	push   ebx
c00139ab:	e8 22 f7 ff ff       	call   c00130d2 <File::open(FileOpenMode)>
c00139b0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00139b3:	e8 78 f7 ff ff       	call   c0013130 <File::close()>
c00139b8:	83 c4 10             	add    esp,0x10
c00139bb:	85 db                	test   ebx,ebx
c00139bd:	74 0f                	je     c00139ce <User::loadClockSettings(int)+0x4c>
c00139bf:	8b 03                	mov    eax,DWORD PTR [ebx]
c00139c1:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00139c5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00139c8:	83 c4 08             	add    esp,0x8
c00139cb:	5b                   	pop    ebx
c00139cc:	ff e0                	jmp    eax
c00139ce:	83 c4 08             	add    esp,0x8
c00139d1:	5b                   	pop    ebx
c00139d2:	c3                   	ret    
c00139d3:	90                   	nop

c00139d4 <Clock::Clock(char const*)>:
c00139d4:	83 ec 0c             	sub    esp,0xc
c00139d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00139db:	83 ec 08             	sub    esp,0x8
c00139de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00139e2:	50                   	push   eax
c00139e3:	e8 44 07 00 00       	call   c001412c <Device::Device(char const*)>
c00139e8:	83 c4 10             	add    esp,0x10
c00139eb:	ba 04 a4 02 c0       	mov    edx,0xc002a404
c00139f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00139f4:	89 10                	mov    DWORD PTR [eax],edx
c00139f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00139fa:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c0013a04:	90                   	nop
c0013a05:	83 c4 0c             	add    esp,0xc
c0013a08:	c3                   	ret    
c0013a09:	90                   	nop

c0013a0a <Clock::~Clock()>:
c0013a0a:	83 ec 0c             	sub    esp,0xc
c0013a0d:	ba 04 a4 02 c0       	mov    edx,0xc002a404
c0013a12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a16:	89 10                	mov    DWORD PTR [eax],edx
c0013a18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a1c:	83 ec 0c             	sub    esp,0xc
c0013a1f:	50                   	push   eax
c0013a20:	e8 e9 03 00 00       	call   c0013e0e <Device::~Device()>
c0013a25:	83 c4 10             	add    esp,0x10
c0013a28:	90                   	nop
c0013a29:	83 c4 0c             	add    esp,0xc
c0013a2c:	c3                   	ret    
c0013a2d:	90                   	nop

c0013a2e <Clock::~Clock()>:
c0013a2e:	83 ec 0c             	sub    esp,0xc
c0013a31:	83 ec 0c             	sub    esp,0xc
c0013a34:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013a38:	e8 cd ff ff ff       	call   c0013a0a <Clock::~Clock()>
c0013a3d:	83 c4 10             	add    esp,0x10
c0013a40:	83 ec 08             	sub    esp,0x8
c0013a43:	68 58 01 00 00       	push   0x158
c0013a48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013a4c:	e8 e4 ef ff ff       	call   c0012a35 <operator delete(void*, unsigned long)>
c0013a51:	83 c4 10             	add    esp,0x10
c0013a54:	83 c4 0c             	add    esp,0xc
c0013a57:	c3                   	ret    

c0013a58 <Clock::timeInSecondsLocal()>:
c0013a58:	53                   	push   ebx
c0013a59:	83 ec 14             	sub    esp,0x14
c0013a5c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013a60:	8b 10                	mov    edx,DWORD PTR [eax]
c0013a62:	50                   	push   eax
c0013a63:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013a66:	0f b6 0d f0 dc 02 c0 	movzx  ecx,BYTE PTR ds:0xc002dcf0
c0013a6d:	03 0d f4 dc 02 c0    	add    ecx,DWORD PTR ds:0xc002dcf4
c0013a73:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013a79:	89 cb                	mov    ebx,ecx
c0013a7b:	c1 fb 1f             	sar    ebx,0x1f
c0013a7e:	01 c8                	add    eax,ecx
c0013a80:	11 da                	adc    edx,ebx
c0013a82:	83 c4 10             	add    esp,0x10
c0013a85:	31 c9                	xor    ecx,ecx
c0013a87:	80 3d f1 dc 02 c0 00 	cmp    BYTE PTR ds:0xc002dcf1,0x0
c0013a8e:	74 05                	je     c0013a95 <Clock::timeInSecondsLocal()+0x3d>
c0013a90:	b9 08 07 00 00       	mov    ecx,0x708
c0013a95:	31 db                	xor    ebx,ebx
c0013a97:	01 c8                	add    eax,ecx
c0013a99:	11 da                	adc    edx,ebx
c0013a9b:	83 c4 08             	add    esp,0x8
c0013a9e:	5b                   	pop    ebx
c0013a9f:	c3                   	ret    

c0013aa0 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c0013aa0:	57                   	push   edi
c0013aa1:	56                   	push   esi
c0013aa2:	53                   	push   ebx
c0013aa3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013aa7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013aab:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013aad:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013ab1:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c0013ab4:	0f b6 05 f0 dc 02 c0 	movzx  eax,BYTE PTR ds:0xc002dcf0
c0013abb:	03 05 f4 dc 02 c0    	add    eax,DWORD PTR ds:0xc002dcf4
c0013ac1:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c0013ac7:	99                   	cdq    
c0013ac8:	29 c6                	sub    esi,eax
c0013aca:	19 d7                	sbb    edi,edx
c0013acc:	89 f0                	mov    eax,esi
c0013ace:	89 fa                	mov    edx,edi
c0013ad0:	31 f6                	xor    esi,esi
c0013ad2:	80 3d f1 dc 02 c0 00 	cmp    BYTE PTR ds:0xc002dcf1,0x0
c0013ad9:	74 05                	je     c0013ae0 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c0013adb:	be 08 07 00 00       	mov    esi,0x708
c0013ae0:	31 ff                	xor    edi,edi
c0013ae2:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0013ae6:	29 f0                	sub    eax,esi
c0013ae8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013aec:	19 fa                	sbb    edx,edi
c0013aee:	89 d8                	mov    eax,ebx
c0013af0:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013af4:	5b                   	pop    ebx
c0013af5:	5e                   	pop    esi
c0013af6:	5f                   	pop    edi
c0013af7:	ff e0                	jmp    eax

c0013af9 <datetimeToSeconds(datetime_t)>:
c0013af9:	55                   	push   ebp
c0013afa:	57                   	push   edi
c0013afb:	56                   	push   esi
c0013afc:	53                   	push   ebx
c0013afd:	83 ec 14             	sub    esp,0x14
c0013b00:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0013b04:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0013b08:	89 d3                	mov    ebx,edx
c0013b0a:	0f b6 c6             	movzx  eax,dh
c0013b0d:	c1 eb 10             	shr    ebx,0x10
c0013b10:	48                   	dec    eax
c0013b11:	66 81 eb 6c 07       	sub    bx,0x76c
c0013b16:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0013b1a:	0f b6 f5             	movzx  esi,ch
c0013b1d:	89 cf                	mov    edi,ecx
c0013b1f:	6b f6 3c             	imul   esi,esi,0x3c
c0013b22:	c1 ef 10             	shr    edi,0x10
c0013b25:	0f b6 c9             	movzx  ecx,cl
c0013b28:	89 f8                	mov    eax,edi
c0013b2a:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013b30:	0f b6 f8             	movzx  edi,al
c0013b33:	0f b6 d2             	movzx  edx,dl
c0013b36:	01 fe                	add    esi,edi
c0013b38:	01 f1                	add    ecx,esi
c0013b3a:	0f b7 f3             	movzx  esi,bx
c0013b3d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0013b41:	c1 f9 1f             	sar    ecx,0x1f
c0013b44:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c0013b49:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013b4d:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c0013b52:	8b 0c 8d 40 a4 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5bc0]
c0013b59:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c0013b5d:	76 29                	jbe    c0013b88 <datetimeToSeconds(datetime_t)+0x8f>
c0013b5f:	f6 c3 03             	test   bl,0x3
c0013b62:	75 24                	jne    c0013b88 <datetimeToSeconds(datetime_t)+0x8f>
c0013b64:	31 d2                	xor    edx,edx
c0013b66:	bf 64 00 00 00       	mov    edi,0x64
c0013b6b:	89 d8                	mov    eax,ebx
c0013b6d:	66 f7 f7             	div    di
c0013b70:	66 85 d2             	test   dx,dx
c0013b73:	75 12                	jne    c0013b87 <datetimeToSeconds(datetime_t)+0x8e>
c0013b75:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c0013b7b:	bf 90 01 00 00       	mov    edi,0x190
c0013b80:	99                   	cdq    
c0013b81:	f7 ff                	idiv   edi
c0013b83:	85 d2                	test   edx,edx
c0013b85:	75 01                	jne    c0013b88 <datetimeToSeconds(datetime_t)+0x8f>
c0013b87:	41                   	inc    ecx
c0013b88:	66 83 fb 46          	cmp    bx,0x46
c0013b8c:	76 45                	jbe    c0013bd3 <datetimeToSeconds(datetime_t)+0xda>
c0013b8e:	bb 46 00 00 00       	mov    ebx,0x46
c0013b93:	bf 64 00 00 00       	mov    edi,0x64
c0013b98:	bd 90 01 00 00       	mov    ebp,0x190
c0013b9d:	b8 6d 01 00 00       	mov    eax,0x16d
c0013ba2:	f6 c3 03             	test   bl,0x3
c0013ba5:	75 23                	jne    c0013bca <datetimeToSeconds(datetime_t)+0xd1>
c0013ba7:	89 d8                	mov    eax,ebx
c0013ba9:	99                   	cdq    
c0013baa:	f7 ff                	idiv   edi
c0013bac:	b8 6e 01 00 00       	mov    eax,0x16e
c0013bb1:	85 d2                	test   edx,edx
c0013bb3:	75 15                	jne    c0013bca <datetimeToSeconds(datetime_t)+0xd1>
c0013bb5:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c0013bbb:	99                   	cdq    
c0013bbc:	f7 fd                	idiv   ebp
c0013bbe:	83 fa 01             	cmp    edx,0x1
c0013bc1:	19 c0                	sbb    eax,eax
c0013bc3:	f7 d0                	not    eax
c0013bc5:	05 6e 01 00 00       	add    eax,0x16e
c0013bca:	01 c1                	add    ecx,eax
c0013bcc:	43                   	inc    ebx
c0013bcd:	39 f3                	cmp    ebx,esi
c0013bcf:	7c cc                	jl     c0013b9d <datetimeToSeconds(datetime_t)+0xa4>
c0013bd1:	eb 35                	jmp    c0013c08 <datetimeToSeconds(datetime_t)+0x10f>
c0013bd3:	74 33                	je     c0013c08 <datetimeToSeconds(datetime_t)+0x10f>
c0013bd5:	b8 45 00 00 00       	mov    eax,0x45
c0013bda:	89 c2                	mov    edx,eax
c0013bdc:	83 e2 03             	and    edx,0x3
c0013bdf:	39 f0                	cmp    eax,esi
c0013be1:	7e 0f                	jle    c0013bf2 <datetimeToSeconds(datetime_t)+0xf9>
c0013be3:	83 fa 01             	cmp    edx,0x1
c0013be6:	19 d2                	sbb    edx,edx
c0013be8:	48                   	dec    eax
c0013be9:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c0013bf0:	eb e8                	jmp    c0013bda <datetimeToSeconds(datetime_t)+0xe1>
c0013bf2:	b8 6d 01 00 00       	mov    eax,0x16d
c0013bf7:	85 d2                	test   edx,edx
c0013bf9:	75 0b                	jne    c0013c06 <datetimeToSeconds(datetime_t)+0x10d>
c0013bfb:	66 83 fb 01          	cmp    bx,0x1
c0013bff:	19 c0                	sbb    eax,eax
c0013c01:	05 6e 01 00 00       	add    eax,0x16e
c0013c06:	29 c1                	sub    ecx,eax
c0013c08:	b8 80 51 01 00       	mov    eax,0x15180
c0013c0d:	f7 e9                	imul   ecx
c0013c0f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0013c13:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0013c17:	83 c4 14             	add    esp,0x14
c0013c1a:	5b                   	pop    ebx
c0013c1b:	5e                   	pop    esi
c0013c1c:	5f                   	pop    edi
c0013c1d:	5d                   	pop    ebp
c0013c1e:	c3                   	ret    
c0013c1f:	90                   	nop

c0013c20 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c0013c20:	57                   	push   edi
c0013c21:	56                   	push   esi
c0013c22:	53                   	push   ebx
c0013c23:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013c27:	8b 06                	mov    eax,DWORD PTR [esi]
c0013c29:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c0013c2c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013c30:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013c34:	e8 c0 fe ff ff       	call   c0013af9 <datetimeToSeconds(datetime_t)>
c0013c39:	59                   	pop    ecx
c0013c3a:	0f b6 0d f0 dc 02 c0 	movzx  ecx,BYTE PTR ds:0xc002dcf0
c0013c41:	5b                   	pop    ebx
c0013c42:	03 0d f4 dc 02 c0    	add    ecx,DWORD PTR ds:0xc002dcf4
c0013c48:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013c4e:	89 cb                	mov    ebx,ecx
c0013c50:	c1 fb 1f             	sar    ebx,0x1f
c0013c53:	29 c8                	sub    eax,ecx
c0013c55:	19 da                	sbb    edx,ebx
c0013c57:	31 c9                	xor    ecx,ecx
c0013c59:	80 3d f1 dc 02 c0 00 	cmp    BYTE PTR ds:0xc002dcf1,0x0
c0013c60:	74 05                	je     c0013c67 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c0013c62:	b9 08 07 00 00       	mov    ecx,0x708
c0013c67:	31 db                	xor    ebx,ebx
c0013c69:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013c6d:	29 c8                	sub    eax,ecx
c0013c6f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013c73:	19 da                	sbb    edx,ebx
c0013c75:	89 f8                	mov    eax,edi
c0013c77:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013c7b:	5b                   	pop    ebx
c0013c7c:	5e                   	pop    esi
c0013c7d:	5f                   	pop    edi
c0013c7e:	ff e0                	jmp    eax

c0013c80 <secondsToDatetime(unsigned long long)>:
c0013c80:	55                   	push   ebp
c0013c81:	57                   	push   edi
c0013c82:	56                   	push   esi
c0013c83:	53                   	push   ebx
c0013c84:	83 ec 1c             	sub    esp,0x1c
c0013c87:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0013c8b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0013c8f:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0013c93:	6a 00                	push   0x0
c0013c95:	68 80 51 01 00       	push   0x15180
c0013c9a:	55                   	push   ebp
c0013c9b:	57                   	push   edi
c0013c9c:	e8 fb 25 01 00       	call   c002629c <__udivdi3>
c0013ca1:	83 c4 10             	add    esp,0x10
c0013ca4:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c0013caa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013cae:	6a 00                	push   0x0
c0013cb0:	68 80 51 01 00       	push   0x15180
c0013cb5:	55                   	push   ebp
c0013cb6:	57                   	push   edi
c0013cb7:	bf 10 0e 00 00       	mov    edi,0xe10
c0013cbc:	e8 db 26 01 00       	call   c002639c <__umoddi3>
c0013cc1:	83 c4 10             	add    esp,0x10
c0013cc4:	99                   	cdq    
c0013cc5:	f7 ff                	idiv   edi
c0013cc7:	bf 3c 00 00 00       	mov    edi,0x3c
c0013ccc:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c0013ccf:	89 d0                	mov    eax,edx
c0013cd1:	99                   	cdq    
c0013cd2:	f7 ff                	idiv   edi
c0013cd4:	85 db                	test   ebx,ebx
c0013cd6:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c0013cd9:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c0013cdc:	79 11                	jns    c0013cef <secondsToDatetime(unsigned long long)+0x6f>
c0013cde:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0013ce2:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c0013ce8:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0013ced:	eb 07                	jmp    c0013cf6 <secondsToDatetime(unsigned long long)+0x76>
c0013cef:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0013cf4:	89 d8                	mov    eax,ebx
c0013cf6:	bf b4 05 00 00       	mov    edi,0x5b4
c0013cfb:	99                   	cdq    
c0013cfc:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c0013d01:	f7 f9                	idiv   ecx
c0013d03:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c0013d08:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013d0c:	31 d2                	xor    edx,edx
c0013d0e:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c0013d16:	01 c3                	add    ebx,eax
c0013d18:	89 d8                	mov    eax,ebx
c0013d1a:	f7 f1                	div    ecx
c0013d1c:	31 d2                	xor    edx,edx
c0013d1e:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c0013d21:	89 d8                	mov    eax,ebx
c0013d23:	f7 f7                	div    edi
c0013d25:	31 d2                	xor    edx,edx
c0013d27:	29 c1                	sub    ecx,eax
c0013d29:	89 d8                	mov    eax,ebx
c0013d2b:	f7 f5                	div    ebp
c0013d2d:	bd 6d 01 00 00       	mov    ebp,0x16d
c0013d32:	29 c1                	sub    ecx,eax
c0013d34:	31 d2                	xor    edx,edx
c0013d36:	89 c8                	mov    eax,ecx
c0013d38:	f7 f5                	div    ebp
c0013d3a:	bd 94 8e 00 00       	mov    ebp,0x8e94
c0013d3f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013d43:	31 d2                	xor    edx,edx
c0013d45:	89 c8                	mov    eax,ecx
c0013d47:	f7 f5                	div    ebp
c0013d49:	31 d2                	xor    edx,edx
c0013d4b:	01 c3                	add    ebx,eax
c0013d4d:	89 c8                	mov    eax,ecx
c0013d4f:	f7 f7                	div    edi
c0013d51:	bf 99 00 00 00       	mov    edi,0x99
c0013d56:	29 c3                	sub    ebx,eax
c0013d58:	31 d2                	xor    edx,edx
c0013d5a:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c0013d62:	29 c3                	sub    ebx,eax
c0013d64:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0013d67:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c0013d6a:	bb 05 00 00 00       	mov    ebx,0x5
c0013d6f:	83 c1 02             	add    ecx,0x2
c0013d72:	89 c8                	mov    eax,ecx
c0013d74:	f7 f7                	div    edi
c0013d76:	31 d2                	xor    edx,edx
c0013d78:	89 c7                	mov    edi,eax
c0013d7a:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c0013d80:	83 c0 02             	add    eax,0x2
c0013d83:	f7 f3                	div    ebx
c0013d85:	89 eb                	mov    ebx,ebp
c0013d87:	29 c3                	sub    ebx,eax
c0013d89:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c0013d8f:	88 1e                	mov    BYTE PTR [esi],bl
c0013d91:	19 c0                	sbb    eax,eax
c0013d93:	31 d2                	xor    edx,edx
c0013d95:	83 e0 0c             	and    eax,0xc
c0013d98:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c0013d9c:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c0013da4:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0013da8:	83 f9 01             	cmp    ecx,0x1
c0013dab:	0f 96 c2             	setbe  dl
c0013dae:	41                   	inc    ecx
c0013daf:	01 d0                	add    eax,edx
c0013db1:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c0013db4:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c0013db8:	83 c4 1c             	add    esp,0x1c
c0013dbb:	89 f0                	mov    eax,esi
c0013dbd:	5b                   	pop    ebx
c0013dbe:	5e                   	pop    esi
c0013dbf:	5f                   	pop    edi
c0013dc0:	5d                   	pop    ebp
c0013dc1:	c2 04 00             	ret    0x4

c0013dc4 <Clock::timeInDatetimeLocal()>:
c0013dc4:	53                   	push   ebx
c0013dc5:	83 ec 14             	sub    esp,0x14
c0013dc8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013dcc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013dd0:	e8 83 fc ff ff       	call   c0013a58 <Clock::timeInSecondsLocal()>
c0013dd5:	83 c4 0c             	add    esp,0xc
c0013dd8:	52                   	push   edx
c0013dd9:	50                   	push   eax
c0013dda:	53                   	push   ebx
c0013ddb:	e8 a0 fe ff ff       	call   c0013c80 <secondsToDatetime(unsigned long long)>
c0013de0:	89 d8                	mov    eax,ebx
c0013de2:	83 c4 14             	add    esp,0x14
c0013de5:	5b                   	pop    ebx
c0013de6:	c2 04 00             	ret    0x4
c0013de9:	90                   	nop

c0013dea <Device::hibernate()>:
c0013dea:	c3                   	ret    
c0013deb:	90                   	nop

c0013dec <Device::wake()>:
c0013dec:	c3                   	ret    
c0013ded:	90                   	nop

c0013dee <Device::detect()>:
c0013dee:	c3                   	ret    
c0013def:	90                   	nop

c0013df0 <Device::disableLegacy()>:
c0013df0:	c3                   	ret    
c0013df1:	90                   	nop

c0013df2 <Device::powerSaving(PowerSavingLevel)>:
c0013df2:	c3                   	ret    
c0013df3:	90                   	nop

c0013df4 <DriverlessDevice::close(int, int, void*)>:
c0013df4:	31 c0                	xor    eax,eax
c0013df6:	c3                   	ret    
c0013df7:	90                   	nop

c0013df8 <DriverlessDevice::detect()>:
c0013df8:	c3                   	ret    
c0013df9:	90                   	nop

c0013dfa <DriverlessDevice::open(int, int, void*)>:
c0013dfa:	83 ec 18             	sub    esp,0x18
c0013dfd:	68 70 a4 02 c0       	push   0xc002a470
c0013e02:	e8 28 62 00 00       	call   c001a02f <Krnl::panic(char const*)>
c0013e07:	83 c8 ff             	or     eax,0xffffffff
c0013e0a:	83 c4 1c             	add    esp,0x1c
c0013e0d:	c3                   	ret    

c0013e0e <Device::~Device()>:
c0013e0e:	ba 98 a4 02 c0       	mov    edx,0xc002a498
c0013e13:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013e17:	89 10                	mov    DWORD PTR [eax],edx
c0013e19:	90                   	nop
c0013e1a:	c3                   	ret    
c0013e1b:	90                   	nop

c0013e1c <Device::~Device()>:
c0013e1c:	83 ec 0c             	sub    esp,0xc
c0013e1f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013e23:	e8 e6 ff ff ff       	call   c0013e0e <Device::~Device()>
c0013e28:	83 c4 04             	add    esp,0x4
c0013e2b:	83 ec 08             	sub    esp,0x8
c0013e2e:	68 58 01 00 00       	push   0x158
c0013e33:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e37:	e8 f9 eb ff ff       	call   c0012a35 <operator delete(void*, unsigned long)>
c0013e3c:	83 c4 10             	add    esp,0x10
c0013e3f:	83 c4 0c             	add    esp,0xc
c0013e42:	c3                   	ret    
c0013e43:	90                   	nop

c0013e44 <Device::findAndLoadDriver()>:
c0013e44:	c3                   	ret    
c0013e45:	90                   	nop

c0013e46 <Device::preOpenPCI(PCIDeviceInfo)>:
c0013e46:	57                   	push   edi
c0013e47:	b9 09 00 00 00       	mov    ecx,0x9
c0013e4c:	56                   	push   esi
c0013e4d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0013e51:	8d 74 24 10          	lea    esi,[esp+0x10]
c0013e55:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c0013e5f:	81 c7 18 01 00 00    	add    edi,0x118
c0013e65:	fc                   	cld    
c0013e66:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0013e68:	5e                   	pop    esi
c0013e69:	5f                   	pop    edi
c0013e6a:	c3                   	ret    
c0013e6b:	90                   	nop

c0013e6c <Device::preOpenACPI(void*, char*, char*)>:
c0013e6c:	56                   	push   esi
c0013e6d:	53                   	push   ebx
c0013e6e:	83 ec 08             	sub    esp,0x8
c0013e71:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0013e75:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0013e79:	c7 83 14 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x114],0x3
c0013e83:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013e87:	89 83 18 01 00 00    	mov    DWORD PTR [ebx+0x118],eax
c0013e8d:	6a 1e                	push   0x1e
c0013e8f:	8d 83 1c 01 00 00    	lea    eax,[ebx+0x11c]
c0013e95:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013e99:	81 c3 3a 01 00 00    	add    ebx,0x13a
c0013e9f:	50                   	push   eax
c0013ea0:	e8 9f c8 fe ff       	call   c0000744 <memcpy>
c0013ea5:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c0013ea9:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0013ead:	c7 44 24 28 0e 00 00 00 	mov    DWORD PTR [esp+0x28],0xe
c0013eb5:	83 c4 14             	add    esp,0x14
c0013eb8:	5b                   	pop    ebx
c0013eb9:	5e                   	pop    esi
c0013eba:	e9 85 c8 fe ff       	jmp    c0000744 <memcpy>
c0013ebf:	90                   	nop

c0013ec0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0013ec0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013ec4:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0013ec9:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0013ed0:	75 0b                	jne    c0013edd <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c0013ed2:	8b 00                	mov    eax,DWORD PTR [eax]
c0013ed4:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013ed8:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0013edb:	eb 1e                	jmp    c0013efb <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c0013edd:	a1 68 db 02 c0       	mov    eax,ds:0xc002db68
c0013ee2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013ee8:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013eee:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013ef0:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013ef4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013ef8:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0013efb:	ff e0                	jmp    eax
c0013efd:	90                   	nop

c0013efe <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c0013efe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013f02:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0013f07:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0013f0e:	75 0b                	jne    c0013f1b <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c0013f10:	8b 00                	mov    eax,DWORD PTR [eax]
c0013f12:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013f16:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0013f19:	eb 1e                	jmp    c0013f39 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c0013f1b:	a1 68 db 02 c0       	mov    eax,ds:0xc002db68
c0013f20:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013f26:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013f2c:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013f2e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013f32:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013f36:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c0013f39:	ff e0                	jmp    eax
c0013f3b:	90                   	nop

c0013f3c <Device::addChild(Device*)>:
c0013f3c:	53                   	push   ebx
c0013f3d:	83 ec 08             	sub    esp,0x8
c0013f40:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013f44:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013f48:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0013f4e:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c0013f54:	8b 13                	mov    edx,DWORD PTR [ebx]
c0013f56:	85 d2                	test   edx,edx
c0013f58:	74 04                	je     c0013f5e <Device::addChild(Device*)+0x22>
c0013f5a:	89 d3                	mov    ebx,edx
c0013f5c:	eb f6                	jmp    c0013f54 <Device::addChild(Device*)+0x18>
c0013f5e:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0013f61:	83 ec 0c             	sub    esp,0xc
c0013f64:	6a 08                	push   0x8
c0013f66:	e8 db b8 ff ff       	call   c000f846 <malloc>
c0013f6b:	89 03                	mov    DWORD PTR [ebx],eax
c0013f6d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013f73:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013f7a:	83 c4 18             	add    esp,0x18
c0013f7d:	5b                   	pop    ebx
c0013f7e:	c3                   	ret    
c0013f7f:	90                   	nop

c0013f80 <Device::removeAllChildren()>:
c0013f80:	56                   	push   esi
c0013f81:	53                   	push   ebx
c0013f82:	52                   	push   edx
c0013f83:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013f87:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c0013f8d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013f90:	74 17                	je     c0013fa9 <Device::removeAllChildren()+0x29>
c0013f92:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0013f95:	85 c0                	test   eax,eax
c0013f97:	74 0c                	je     c0013fa5 <Device::removeAllChildren()+0x25>
c0013f99:	83 ec 0c             	sub    esp,0xc
c0013f9c:	8b 10                	mov    edx,DWORD PTR [eax]
c0013f9e:	50                   	push   eax
c0013f9f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0013fa2:	83 c4 10             	add    esp,0x10
c0013fa5:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013fa7:	eb e4                	jmp    c0013f8d <Device::removeAllChildren()+0xd>
c0013fa9:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0013faf:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013fb5:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0013fbb:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013fc2:	58                   	pop    eax
c0013fc3:	5b                   	pop    ebx
c0013fc4:	5e                   	pop    esi
c0013fc5:	c3                   	ret    

c0013fc6 <Device::hibernateAll()>:
c0013fc6:	53                   	push   ebx
c0013fc7:	83 ec 14             	sub    esp,0x14
c0013fca:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013fce:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013fd0:	53                   	push   ebx
c0013fd1:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0013fd4:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013fda:	83 c4 10             	add    esp,0x10
c0013fdd:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013fe0:	74 0f                	je     c0013ff1 <Device::hibernateAll()+0x2b>
c0013fe2:	83 ec 0c             	sub    esp,0xc
c0013fe5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013fe8:	e8 d9 ff ff ff       	call   c0013fc6 <Device::hibernateAll()>
c0013fed:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013fef:	eb e9                	jmp    c0013fda <Device::hibernateAll()+0x14>
c0013ff1:	83 c4 08             	add    esp,0x8
c0013ff4:	5b                   	pop    ebx
c0013ff5:	c3                   	ret    

c0013ff6 <Device::wakeAll()>:
c0013ff6:	53                   	push   ebx
c0013ff7:	83 ec 14             	sub    esp,0x14
c0013ffa:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013ffe:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014000:	53                   	push   ebx
c0014001:	ff 50 14             	call   DWORD PTR [eax+0x14]
c0014004:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001400a:	83 c4 10             	add    esp,0x10
c001400d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014010:	74 0f                	je     c0014021 <Device::wakeAll()+0x2b>
c0014012:	83 ec 0c             	sub    esp,0xc
c0014015:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014018:	e8 d9 ff ff ff       	call   c0013ff6 <Device::wakeAll()>
c001401d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001401f:	eb e9                	jmp    c001400a <Device::wakeAll()+0x14>
c0014021:	83 c4 08             	add    esp,0x8
c0014024:	5b                   	pop    ebx
c0014025:	c3                   	ret    

c0014026 <Device::detectAll()>:
c0014026:	53                   	push   ebx
c0014027:	83 ec 14             	sub    esp,0x14
c001402a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001402e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014030:	53                   	push   ebx
c0014031:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0014034:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001403a:	83 c4 10             	add    esp,0x10
c001403d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014040:	74 0f                	je     c0014051 <Device::detectAll()+0x2b>
c0014042:	83 ec 0c             	sub    esp,0xc
c0014045:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014048:	e8 d9 ff ff ff       	call   c0014026 <Device::detectAll()>
c001404d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001404f:	eb e9                	jmp    c001403a <Device::detectAll()+0x14>
c0014051:	83 c4 08             	add    esp,0x8
c0014054:	5b                   	pop    ebx
c0014055:	c3                   	ret    

c0014056 <Device::disableLegacyAll()>:
c0014056:	53                   	push   ebx
c0014057:	83 ec 14             	sub    esp,0x14
c001405a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001405e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014060:	53                   	push   ebx
c0014061:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c0014064:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001406a:	83 c4 10             	add    esp,0x10
c001406d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014070:	74 0f                	je     c0014081 <Device::disableLegacyAll()+0x2b>
c0014072:	83 ec 0c             	sub    esp,0xc
c0014075:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014078:	e8 d9 ff ff ff       	call   c0014056 <Device::disableLegacyAll()>
c001407d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001407f:	eb e9                	jmp    c001406a <Device::disableLegacyAll()+0x14>
c0014081:	83 c4 08             	add    esp,0x8
c0014084:	5b                   	pop    ebx
c0014085:	c3                   	ret    

c0014086 <Device::loadDriversForAll()>:
c0014086:	53                   	push   ebx
c0014087:	83 ec 08             	sub    esp,0x8
c001408a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001408e:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0014094:	8b 18                	mov    ebx,DWORD PTR [eax]
c0014096:	85 db                	test   ebx,ebx
c0014098:	74 12                	je     c00140ac <Device::loadDriversForAll()+0x26>
c001409a:	83 ec 0c             	sub    esp,0xc
c001409d:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00140a0:	e8 e1 ff ff ff       	call   c0014086 <Device::loadDriversForAll()>
c00140a5:	83 c4 10             	add    esp,0x10
c00140a8:	89 d8                	mov    eax,ebx
c00140aa:	eb e8                	jmp    c0014094 <Device::loadDriversForAll()+0xe>
c00140ac:	83 c4 08             	add    esp,0x8
c00140af:	5b                   	pop    ebx
c00140b0:	c3                   	ret    
c00140b1:	90                   	nop

c00140b2 <Device::closeAll()>:
c00140b2:	53                   	push   ebx
c00140b3:	83 ec 08             	sub    esp,0x8
c00140b6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00140ba:	8b 03                	mov    eax,DWORD PTR [ebx]
c00140bc:	6a 00                	push   0x0
c00140be:	6a 00                	push   0x0
c00140c0:	6a 00                	push   0x0
c00140c2:	53                   	push   ebx
c00140c3:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00140c6:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00140cc:	83 c4 10             	add    esp,0x10
c00140cf:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00140d2:	74 0f                	je     c00140e3 <Device::closeAll()+0x31>
c00140d4:	83 ec 0c             	sub    esp,0xc
c00140d7:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00140da:	e8 d3 ff ff ff       	call   c00140b2 <Device::closeAll()>
c00140df:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00140e1:	eb e9                	jmp    c00140cc <Device::closeAll()+0x1a>
c00140e3:	83 c4 08             	add    esp,0x8
c00140e6:	5b                   	pop    ebx
c00140e7:	c3                   	ret    

c00140e8 <Device::powerSavingAll(PowerSavingLevel)>:
c00140e8:	56                   	push   esi
c00140e9:	53                   	push   ebx
c00140ea:	83 ec 0c             	sub    esp,0xc
c00140ed:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00140f1:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00140f5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00140f7:	56                   	push   esi
c00140f8:	53                   	push   ebx
c00140f9:	ff 50 20             	call   DWORD PTR [eax+0x20]
c00140fc:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014102:	83 c4 10             	add    esp,0x10
c0014105:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014108:	74 0f                	je     c0014119 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c001410a:	52                   	push   edx
c001410b:	52                   	push   edx
c001410c:	56                   	push   esi
c001410d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014110:	e8 d3 ff ff ff       	call   c00140e8 <Device::powerSavingAll(PowerSavingLevel)>
c0014115:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014117:	eb e9                	jmp    c0014102 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c0014119:	58                   	pop    eax
c001411a:	5b                   	pop    ebx
c001411b:	5e                   	pop    esi
c001411c:	c3                   	ret    
c001411d:	90                   	nop

c001411e <Device::setName(char const*)>:
c001411e:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c0014126:	e9 09 c7 fe ff       	jmp    c0000834 <strcpy>
c001412b:	90                   	nop

c001412c <Device::Device(char const*)>:
c001412c:	83 ec 1c             	sub    esp,0x1c
c001412f:	ba 98 a4 02 c0       	mov    edx,0xc002a498
c0014134:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014138:	89 10                	mov    DWORD PTR [eax],edx
c001413a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001413e:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c0014148:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001414c:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0014156:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001415a:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0014164:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014168:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0014172:	83 ec 08             	sub    esp,0x8
c0014175:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014179:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001417d:	e8 9c ff ff ff       	call   c001411e <Device::setName(char const*)>
c0014182:	83 c4 10             	add    esp,0x10
c0014185:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c001418d:	83 ec 0c             	sub    esp,0xc
c0014190:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014194:	e8 ad b6 ff ff       	call   c000f846 <malloc>
c0014199:	83 c4 10             	add    esp,0x10
c001419c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00141a2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00141a9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00141ad:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c00141b3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00141b7:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00141bd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00141c3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00141c7:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00141cd:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00141d4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00141d8:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c00141df:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00141e3:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c00141ea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00141ee:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00141f8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00141fc:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0014206:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001420a:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0014214:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014218:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c0014222:	90                   	nop
c0014223:	83 c4 1c             	add    esp,0x1c
c0014226:	c3                   	ret    
c0014227:	90                   	nop

c0014228 <Device::getName()>:
c0014228:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001422c:	05 d0 00 00 00       	add    eax,0xd0
c0014231:	c3                   	ret    

c0014232 <DriverlessDevice::DriverlessDevice(char const*)>:
c0014232:	83 ec 0c             	sub    esp,0xc
c0014235:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014239:	83 ec 08             	sub    esp,0x8
c001423c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014240:	50                   	push   eax
c0014241:	e8 e6 fe ff ff       	call   c001412c <Device::Device(char const*)>
c0014246:	83 c4 10             	add    esp,0x10
c0014249:	ba c4 a4 02 c0       	mov    edx,0xc002a4c4
c001424e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014252:	89 10                	mov    DWORD PTR [eax],edx
c0014254:	90                   	nop
c0014255:	83 c4 0c             	add    esp,0xc
c0014258:	c3                   	ret    
c0014259:	90                   	nop

c001425a <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c001425a:	57                   	push   edi
c001425b:	56                   	push   esi
c001425c:	53                   	push   ebx
c001425d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014261:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0014265:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014269:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c001426f:	75 0c                	jne    c001427d <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c0014271:	52                   	push   edx
c0014272:	52                   	push   edx
c0014273:	53                   	push   ebx
c0014274:	56                   	push   esi
c0014275:	e8 60 3f 01 00       	call   c00281da <LinkedList<Device>::addElement(Device*)>
c001427a:	83 c4 10             	add    esp,0x10
c001427d:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014283:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014286:	74 12                	je     c001429a <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c0014288:	50                   	push   eax
c0014289:	57                   	push   edi
c001428a:	56                   	push   esi
c001428b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001428e:	e8 c7 ff ff ff       	call   c001425a <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0014293:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014295:	83 c4 10             	add    esp,0x10
c0014298:	eb e9                	jmp    c0014283 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c001429a:	5b                   	pop    ebx
c001429b:	5e                   	pop    esi
c001429c:	5f                   	pop    edi
c001429d:	c3                   	ret    

c001429e <getDevicesOfType(DeviceType)>:
c001429e:	53                   	push   ebx
c001429f:	83 ec 14             	sub    esp,0x14
c00142a2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00142a6:	53                   	push   ebx
c00142a7:	e8 0a 40 01 00       	call   c00282b6 <LinkedList<Device>::LinkedList()>
c00142ac:	83 c4 0c             	add    esp,0xc
c00142af:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00142b3:	53                   	push   ebx
c00142b4:	ff 35 68 db 02 c0    	push   DWORD PTR ds:0xc002db68
c00142ba:	e8 9b ff ff ff       	call   c001425a <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c00142bf:	89 d8                	mov    eax,ebx
c00142c1:	83 c4 18             	add    esp,0x18
c00142c4:	5b                   	pop    ebx
c00142c5:	c2 04 00             	ret    0x4

c00142c8 <HardDiskController::HardDiskController(char const*)>:
c00142c8:	83 ec 0c             	sub    esp,0xc
c00142cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00142cf:	83 ec 08             	sub    esp,0x8
c00142d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00142d6:	50                   	push   eax
c00142d7:	e8 50 fe ff ff       	call   c001412c <Device::Device(char const*)>
c00142dc:	83 c4 10             	add    esp,0x10
c00142df:	ba f0 a4 02 c0       	mov    edx,0xc002a4f0
c00142e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00142e8:	89 10                	mov    DWORD PTR [eax],edx
c00142ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00142ee:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c00142f8:	90                   	nop
c00142f9:	83 c4 0c             	add    esp,0xc
c00142fc:	c3                   	ret    
c00142fd:	90                   	nop

c00142fe <HardDiskController::~HardDiskController()>:
c00142fe:	83 ec 0c             	sub    esp,0xc
c0014301:	ba f0 a4 02 c0       	mov    edx,0xc002a4f0
c0014306:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001430a:	89 10                	mov    DWORD PTR [eax],edx
c001430c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014310:	83 ec 0c             	sub    esp,0xc
c0014313:	50                   	push   eax
c0014314:	e8 f5 fa ff ff       	call   c0013e0e <Device::~Device()>
c0014319:	83 c4 10             	add    esp,0x10
c001431c:	90                   	nop
c001431d:	83 c4 0c             	add    esp,0xc
c0014320:	c3                   	ret    
c0014321:	90                   	nop

c0014322 <HardDiskController::~HardDiskController()>:
c0014322:	83 ec 0c             	sub    esp,0xc
c0014325:	83 ec 0c             	sub    esp,0xc
c0014328:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001432c:	e8 cd ff ff ff       	call   c00142fe <HardDiskController::~HardDiskController()>
c0014331:	83 c4 10             	add    esp,0x10
c0014334:	83 ec 08             	sub    esp,0x8
c0014337:	68 58 01 00 00       	push   0x158
c001433c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014340:	e8 f0 e6 ff ff       	call   c0012a35 <operator delete(void*, unsigned long)>
c0014345:	83 c4 10             	add    esp,0x10
c0014348:	83 c4 0c             	add    esp,0xc
c001434b:	c3                   	ret    

c001434c <PhysicalDisk::eject()>:
c001434c:	83 ec 18             	sub    esp,0x18
c001434f:	68 14 a5 02 c0       	push   0xc002a514
c0014354:	e8 bc e7 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c0014359:	83 c8 ff             	or     eax,0xffffffff
c001435c:	83 c4 1c             	add    esp,0x1c
c001435f:	c3                   	ret    

c0014360 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c0014360:	83 ec 0c             	sub    esp,0xc
c0014363:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014367:	83 ec 08             	sub    esp,0x8
c001436a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001436e:	50                   	push   eax
c001436f:	e8 b8 fd ff ff       	call   c001412c <Device::Device(char const*)>
c0014374:	83 c4 10             	add    esp,0x10
c0014377:	ba 44 a5 02 c0       	mov    edx,0xc002a544
c001437c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014380:	89 10                	mov    DWORD PTR [eax],edx
c0014382:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014386:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001438d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014391:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c0014398:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001439c:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c00143a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00143aa:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00143ae:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00143b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00143b8:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00143c2:	90                   	nop
c00143c3:	83 c4 0c             	add    esp,0xc
c00143c6:	c3                   	ret    
c00143c7:	90                   	nop

c00143c8 <PhysicalDisk::startCache()>:
c00143c8:	56                   	push   esi
c00143c9:	53                   	push   ebx
c00143ca:	83 ec 10             	sub    esp,0x10
c00143cd:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00143d1:	6a 44                	push   0x44
c00143d3:	e8 6e b4 ff ff       	call   c000f846 <malloc>
c00143d8:	89 c6                	mov    esi,eax
c00143da:	58                   	pop    eax
c00143db:	5a                   	pop    edx
c00143dc:	53                   	push   ebx
c00143dd:	56                   	push   esi
c00143de:	e8 d5 26 00 00       	call   c0016ab8 <VCache::VCache(PhysicalDisk*)>
c00143e3:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c00143e9:	83 c4 14             	add    esp,0x14
c00143ec:	5b                   	pop    ebx
c00143ed:	5e                   	pop    esi
c00143ee:	c3                   	ret    
c00143ef:	90                   	nop

c00143f0 <PhysicalDisk::~PhysicalDisk()>:
c00143f0:	83 ec 0c             	sub    esp,0xc
c00143f3:	ba 44 a5 02 c0       	mov    edx,0xc002a544
c00143f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00143fc:	89 10                	mov    DWORD PTR [eax],edx
c00143fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014402:	83 ec 0c             	sub    esp,0xc
c0014405:	50                   	push   eax
c0014406:	e8 03 fa ff ff       	call   c0013e0e <Device::~Device()>
c001440b:	83 c4 10             	add    esp,0x10
c001440e:	90                   	nop
c001440f:	83 c4 0c             	add    esp,0xc
c0014412:	c3                   	ret    
c0014413:	90                   	nop

c0014414 <PhysicalDisk::~PhysicalDisk()>:
c0014414:	83 ec 0c             	sub    esp,0xc
c0014417:	83 ec 0c             	sub    esp,0xc
c001441a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001441e:	e8 cd ff ff ff       	call   c00143f0 <PhysicalDisk::~PhysicalDisk()>
c0014423:	83 c4 10             	add    esp,0x10
c0014426:	83 ec 08             	sub    esp,0x8
c0014429:	68 6c 01 00 00       	push   0x16c
c001442e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014432:	e8 fe e5 ff ff       	call   c0012a35 <operator delete(void*, unsigned long)>
c0014437:	83 c4 10             	add    esp,0x10
c001443a:	83 c4 0c             	add    esp,0xc
c001443d:	c3                   	ret    

c001443e <FPU::FPU(char const*)>:
c001443e:	83 ec 0c             	sub    esp,0xc
c0014441:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014445:	83 ec 08             	sub    esp,0x8
c0014448:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001444c:	50                   	push   eax
c001444d:	e8 da fc ff ff       	call   c001412c <Device::Device(char const*)>
c0014452:	83 c4 10             	add    esp,0x10
c0014455:	ba 88 a5 02 c0       	mov    edx,0xc002a588
c001445a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001445e:	89 10                	mov    DWORD PTR [eax],edx
c0014460:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014464:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c001446e:	90                   	nop
c001446f:	83 c4 0c             	add    esp,0xc
c0014472:	c3                   	ret    
c0014473:	90                   	nop

c0014474 <FPU::~FPU()>:
c0014474:	83 ec 0c             	sub    esp,0xc
c0014477:	ba 88 a5 02 c0       	mov    edx,0xc002a588
c001447c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014480:	89 10                	mov    DWORD PTR [eax],edx
c0014482:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014486:	83 ec 0c             	sub    esp,0xc
c0014489:	50                   	push   eax
c001448a:	e8 7f f9 ff ff       	call   c0013e0e <Device::~Device()>
c001448f:	83 c4 10             	add    esp,0x10
c0014492:	90                   	nop
c0014493:	83 c4 0c             	add    esp,0xc
c0014496:	c3                   	ret    
c0014497:	90                   	nop

c0014498 <FPU::~FPU()>:
c0014498:	83 ec 0c             	sub    esp,0xc
c001449b:	83 ec 0c             	sub    esp,0xc
c001449e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00144a2:	e8 cd ff ff ff       	call   c0014474 <FPU::~FPU()>
c00144a7:	83 c4 10             	add    esp,0x10
c00144aa:	83 ec 08             	sub    esp,0x8
c00144ad:	68 58 01 00 00       	push   0x158
c00144b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00144b6:	e8 7a e5 ff ff       	call   c0012a35 <operator delete(void*, unsigned long)>
c00144bb:	83 c4 10             	add    esp,0x10
c00144be:	83 c4 0c             	add    esp,0xc
c00144c1:	c3                   	ret    

c00144c2 <setupFPU()>:
c00144c2:	53                   	push   ebx
c00144c3:	83 ec 08             	sub    esp,0x8
c00144c6:	8b 15 68 db 02 c0    	mov    edx,DWORD PTR ds:0xc002db68
c00144cc:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c00144d3:	74 19                	je     c00144ee <setupFPU()+0x2c>
c00144d5:	83 ec 0c             	sub    esp,0xc
c00144d8:	68 58 01 00 00       	push   0x158
c00144dd:	e8 64 b3 ff ff       	call   c000f846 <malloc>
c00144e2:	89 c3                	mov    ebx,eax
c00144e4:	89 04 24             	mov    DWORD PTR [esp],eax
c00144e7:	e8 38 09 01 00       	call   c0024e24 <AVX::AVX()>
c00144ec:	eb 5b                	jmp    c0014549 <setupFPU()+0x87>
c00144ee:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c00144f4:	84 c0                	test   al,al
c00144f6:	79 19                	jns    c0014511 <setupFPU()+0x4f>
c00144f8:	83 ec 0c             	sub    esp,0xc
c00144fb:	68 58 01 00 00       	push   0x158
c0014500:	e8 41 b3 ff ff       	call   c000f846 <malloc>
c0014505:	89 c3                	mov    ebx,eax
c0014507:	89 04 24             	mov    DWORD PTR [esp],eax
c001450a:	e8 3b 0a 01 00       	call   c0024f4a <SSE::SSE()>
c001450f:	eb 38                	jmp    c0014549 <setupFPU()+0x87>
c0014511:	a8 20                	test   al,0x20
c0014513:	74 19                	je     c001452e <setupFPU()+0x6c>
c0014515:	83 ec 0c             	sub    esp,0xc
c0014518:	68 58 01 00 00       	push   0x158
c001451d:	e8 24 b3 ff ff       	call   c000f846 <malloc>
c0014522:	89 c3                	mov    ebx,eax
c0014524:	89 04 24             	mov    DWORD PTR [esp],eax
c0014527:	e8 88 09 01 00       	call   c0024eb4 <MMX::MMX()>
c001452c:	eb 1b                	jmp    c0014549 <setupFPU()+0x87>
c001452e:	a8 10                	test   al,0x10
c0014530:	74 1c                	je     c001454e <setupFPU()+0x8c>
c0014532:	83 ec 0c             	sub    esp,0xc
c0014535:	68 58 01 00 00       	push   0x158
c001453a:	e8 07 b3 ff ff       	call   c000f846 <malloc>
c001453f:	89 c3                	mov    ebx,eax
c0014541:	89 04 24             	mov    DWORD PTR [esp],eax
c0014544:	e8 8f 0a 01 00       	call   c0024fd8 <x87::x87()>
c0014549:	83 c4 10             	add    esp,0x10
c001454c:	eb 24                	jmp    c0014572 <setupFPU()+0xb0>
c001454e:	83 e0 ef             	and    eax,0xffffffef
c0014551:	83 ec 0c             	sub    esp,0xc
c0014554:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c001455a:	68 74 a5 02 c0       	push   0xc002a574
c001455f:	e8 b1 e5 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c0014564:	0f 20 c0             	mov    eax,cr0
c0014567:	83 c8 04             	or     eax,0x4
c001456a:	0f 22 c0             	mov    cr0,eax
c001456d:	31 db                	xor    ebx,ebx
c001456f:	83 c4 10             	add    esp,0x10
c0014572:	89 d8                	mov    eax,ebx
c0014574:	83 c4 08             	add    esp,0x8
c0014577:	5b                   	pop    ebx
c0014578:	c3                   	ret    
c0014579:	90                   	nop

c001457a <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c001457a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001457e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014582:	c1 e0 04             	shl    eax,0x4
c0014585:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0014589:	8d 50 10             	lea    edx,[eax+0x10]
c001458c:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c0014592:	74 08                	je     c001459c <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c0014594:	83 c0 04             	add    eax,0x4
c0014597:	39 d0                	cmp    eax,edx
c0014599:	75 f1                	jne    c001458c <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c001459b:	c3                   	ret    
c001459c:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00145a6:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c00145b0:	eb e2                	jmp    c0014594 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c00145b2 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c00145b2:	57                   	push   edi
c00145b3:	31 c0                	xor    eax,eax
c00145b5:	56                   	push   esi
c00145b6:	53                   	push   ebx
c00145b7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00145bb:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00145bf:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00145c3:	89 da                	mov    edx,ebx
c00145c5:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00145c9:	c1 e2 04             	shl    edx,0x4
c00145cc:	01 ca                	add    edx,ecx
c00145ce:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c00145d6:	74 16                	je     c00145ee <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c00145d8:	40                   	inc    eax
c00145d9:	83 f8 04             	cmp    eax,0x4
c00145dc:	75 f0                	jne    c00145ce <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c00145de:	c7 44 24 10 b8 a5 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a5b8
c00145e6:	5b                   	pop    ebx
c00145e7:	5e                   	pop    esi
c00145e8:	5f                   	pop    edi
c00145e9:	e9 41 5a 00 00       	jmp    c001a02f <Krnl::panic(char const*)>
c00145ee:	8d 04 98             	lea    eax,[eax+ebx*4]
c00145f1:	8d 04 81             	lea    eax,[ecx+eax*4]
c00145f4:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c00145fa:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c0014600:	5b                   	pop    ebx
c0014601:	5e                   	pop    esi
c0014602:	5f                   	pop    edi
c0014603:	c3                   	ret    

c0014604 <doubleFault(regs*, void*)>:
c0014604:	55                   	push   ebp
c0014605:	89 e5                	mov    ebp,esp
c0014607:	83 ec 08             	sub    esp,0x8
c001460a:	83 ec 0c             	sub    esp,0xc
c001460d:	68 f3 a5 02 c0       	push   0xc002a5f3
c0014612:	e8 18 5a 00 00       	call   c001a02f <Krnl::panic(char const*)>
c0014617:	83 c4 10             	add    esp,0x10
c001461a:	90                   	nop
c001461b:	c9                   	leave  
c001461c:	c3                   	ret    
c001461d:	90                   	nop

c001461e <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c001461e:	56                   	push   esi
c001461f:	53                   	push   ebx
c0014620:	50                   	push   eax
c0014621:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014625:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014629:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c001462e:	75 35                	jne    c0014665 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c0014630:	8d 43 20             	lea    eax,[ebx+0x20]
c0014633:	31 d2                	xor    edx,edx
c0014635:	89 c1                	mov    ecx,eax
c0014637:	c1 e1 04             	shl    ecx,0x4
c001463a:	01 f1                	add    ecx,esi
c001463c:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c0014644:	74 3e                	je     c0014684 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c0014646:	42                   	inc    edx
c0014647:	83 fa 04             	cmp    edx,0x4
c001464a:	75 f0                	jne    c001463c <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c001464c:	83 ec 0c             	sub    esp,0xc
c001464f:	68 38 a6 02 c0       	push   0xc002a638
c0014654:	e8 d6 59 00 00       	call   c001a02f <Krnl::panic(char const*)>
c0014659:	83 c4 10             	add    esp,0x10
c001465c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0014661:	5a                   	pop    edx
c0014662:	5b                   	pop    ebx
c0014663:	5e                   	pop    esi
c0014664:	c3                   	ret    
c0014665:	83 ec 0c             	sub    esp,0xc
c0014668:	56                   	push   esi
c0014669:	e8 ba fb ff ff       	call   c0014228 <Device::getName()>
c001466e:	83 c4 10             	add    esp,0x10
c0014671:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014674:	75 ba                	jne    c0014630 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014676:	83 fb 0f             	cmp    ebx,0xf
c0014679:	7f 29                	jg     c00146a4 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c001467b:	0f b6 9b c0 cd 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd3240]
c0014682:	eb ac                	jmp    c0014630 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014684:	8d 04 82             	lea    eax,[edx+eax*4]
c0014687:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001468b:	8d 04 86             	lea    eax,[esi+eax*4]
c001468e:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0014694:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014698:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c001469e:	89 d8                	mov    eax,ebx
c00146a0:	5a                   	pop    edx
c00146a1:	5b                   	pop    ebx
c00146a2:	5e                   	pop    esi
c00146a3:	c3                   	ret    
c00146a4:	83 ec 0c             	sub    esp,0xc
c00146a7:	68 00 a6 02 c0       	push   0xc002a600
c00146ac:	e8 7e 59 00 00       	call   c001a02f <Krnl::panic(char const*)>
c00146b1:	83 c4 10             	add    esp,0x10
c00146b4:	e9 77 ff ff ff       	jmp    c0014630 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c00146b9:	90                   	nop

c00146ba <InterruptController::clearAllHandlers(int, bool)>:
c00146ba:	56                   	push   esi
c00146bb:	53                   	push   ebx
c00146bc:	52                   	push   edx
c00146bd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00146c1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00146c5:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00146ca:	75 61                	jne    c001472d <InterruptController::clearAllHandlers(int, bool)+0x73>
c00146cc:	8d 46 20             	lea    eax,[esi+0x20]
c00146cf:	c1 e6 04             	shl    esi,0x4
c00146d2:	c1 e0 04             	shl    eax,0x4
c00146d5:	01 de                	add    esi,ebx
c00146d7:	01 d8                	add    eax,ebx
c00146d9:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c00146e3:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c00146ed:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c00146f7:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0014701:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c001470b:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c0014715:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c001471f:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c0014729:	58                   	pop    eax
c001472a:	5b                   	pop    ebx
c001472b:	5e                   	pop    esi
c001472c:	c3                   	ret    
c001472d:	83 ec 0c             	sub    esp,0xc
c0014730:	53                   	push   ebx
c0014731:	e8 f2 fa ff ff       	call   c0014228 <Device::getName()>
c0014736:	83 c4 10             	add    esp,0x10
c0014739:	80 38 41             	cmp    BYTE PTR [eax],0x41
c001473c:	75 8e                	jne    c00146cc <InterruptController::clearAllHandlers(int, bool)+0x12>
c001473e:	83 fe 0f             	cmp    esi,0xf
c0014741:	7f 09                	jg     c001474c <InterruptController::clearAllHandlers(int, bool)+0x92>
c0014743:	0f b6 b6 c0 cd 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd3240]
c001474a:	eb 80                	jmp    c00146cc <InterruptController::clearAllHandlers(int, bool)+0x12>
c001474c:	83 ec 0c             	sub    esp,0xc
c001474f:	68 74 a6 02 c0       	push   0xc002a674
c0014754:	e8 d6 58 00 00       	call   c001a02f <Krnl::panic(char const*)>
c0014759:	83 c4 10             	add    esp,0x10
c001475c:	e9 6b ff ff ff       	jmp    c00146cc <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014761:	90                   	nop

c0014762 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c0014762:	56                   	push   esi
c0014763:	53                   	push   ebx
c0014764:	52                   	push   edx
c0014765:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014769:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001476d:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014772:	75 3a                	jne    c00147ae <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c0014774:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014778:	8d 50 20             	lea    edx,[eax+0x20]
c001477b:	c1 e2 04             	shl    edx,0x4
c001477e:	8d 04 16             	lea    eax,[esi+edx*1]
c0014781:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c0014785:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c001478b:	74 0b                	je     c0014798 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c001478d:	83 c0 04             	add    eax,0x4
c0014790:	39 d0                	cmp    eax,edx
c0014792:	75 f1                	jne    c0014785 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c0014794:	58                   	pop    eax
c0014795:	5b                   	pop    ebx
c0014796:	5e                   	pop    esi
c0014797:	c3                   	ret    
c0014798:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00147a2:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c00147ac:	eb df                	jmp    c001478d <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c00147ae:	83 ec 0c             	sub    esp,0xc
c00147b1:	56                   	push   esi
c00147b2:	e8 71 fa ff ff       	call   c0014228 <Device::getName()>
c00147b7:	83 c4 10             	add    esp,0x10
c00147ba:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00147bd:	75 b5                	jne    c0014774 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c00147bf:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c00147c4:	7f 11                	jg     c00147d7 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c00147c6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00147ca:	0f b6 80 c0 cd 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd3240]
c00147d1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00147d5:	eb 9d                	jmp    c0014774 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c00147d7:	83 ec 0c             	sub    esp,0xc
c00147da:	68 74 a6 02 c0       	push   0xc002a674
c00147df:	e8 4b 58 00 00       	call   c001a02f <Krnl::panic(char const*)>
c00147e4:	83 c4 10             	add    esp,0x10
c00147e7:	eb 8b                	jmp    c0014774 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c00147e9 <nmiHandler(regs*, void*)>:
c00147e9:	a1 68 db 02 c0       	mov    eax,ds:0xc002db68
c00147ee:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00147f2:	e9 9b a7 ff ff       	jmp    c000ef92 <Computer::handleNMI()>

c00147f7 <int_handler>:
c00147f7:	55                   	push   ebp
c00147f8:	57                   	push   edi
c00147f9:	56                   	push   esi
c00147fa:	53                   	push   ebx
c00147fb:	83 ec 0c             	sub    esp,0xc
c00147fe:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0014802:	80 3d c0 06 03 c0 00 	cmp    BYTE PTR ds:0xc00306c0,0x0
c0014809:	74 0b                	je     c0014816 <int_handler+0x1f>
c001480b:	fa                   	cli    
c001480c:	f4                   	hlt    
c001480d:	80 3d c0 06 03 c0 00 	cmp    BYTE PTR ds:0xc00306c0,0x0
c0014814:	75 f5                	jne    c001480b <int_handler+0x14>
c0014816:	a1 68 db 02 c0       	mov    eax,ds:0xc002db68
c001481b:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c001481e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014824:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c001482a:	8d 43 e0             	lea    eax,[ebx-0x20]
c001482d:	83 f8 17             	cmp    eax,0x17
c0014830:	77 13                	ja     c0014845 <int_handler+0x4e>
c0014832:	83 ec 08             	sub    esp,0x8
c0014835:	8b 17                	mov    edx,DWORD PTR [edi]
c0014837:	8d 43 e0             	lea    eax,[ebx-0x20]
c001483a:	0f b6 c0             	movzx  eax,al
c001483d:	50                   	push   eax
c001483e:	57                   	push   edi
c001483f:	ff 52 38             	call   DWORD PTR [edx+0x38]
c0014842:	83 c4 10             	add    esp,0x10
c0014845:	83 c3 15             	add    ebx,0x15
c0014848:	c1 e3 04             	shl    ebx,0x4
c001484b:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c001484f:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c0014856:	31 db                	xor    ebx,ebx
c0014858:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c001485c:	85 c0                	test   eax,eax
c001485e:	74 13                	je     c0014873 <int_handler+0x7c>
c0014860:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0014863:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c0014867:	74 1c                	je     c0014885 <int_handler+0x8e>
c0014869:	83 ec 08             	sub    esp,0x8
c001486c:	52                   	push   edx
c001486d:	56                   	push   esi
c001486e:	ff d0                	call   eax
c0014870:	83 c4 10             	add    esp,0x10
c0014873:	43                   	inc    ebx
c0014874:	83 fb 04             	cmp    ebx,0x4
c0014877:	75 df                	jne    c0014858 <int_handler+0x61>
c0014879:	83 c4 0c             	add    esp,0xc
c001487c:	31 c0                	xor    eax,eax
c001487e:	5b                   	pop    ebx
c001487f:	31 d2                	xor    edx,edx
c0014881:	5e                   	pop    esi
c0014882:	5f                   	pop    edi
c0014883:	5d                   	pop    ebp
c0014884:	c3                   	ret    
c0014885:	83 ec 08             	sub    esp,0x8
c0014888:	52                   	push   edx
c0014889:	56                   	push   esi
c001488a:	ff d0                	call   eax
c001488c:	83 c4 10             	add    esp,0x10
c001488f:	83 c4 0c             	add    esp,0xc
c0014892:	5b                   	pop    ebx
c0014893:	5e                   	pop    esi
c0014894:	5f                   	pop    edi
c0014895:	5d                   	pop    ebp
c0014896:	c3                   	ret    
c0014897:	90                   	nop

c0014898 <InterruptController::InterruptController(char const*)>:
c0014898:	83 ec 1c             	sub    esp,0x1c
c001489b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001489f:	83 ec 08             	sub    esp,0x8
c00148a2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00148a6:	50                   	push   eax
c00148a7:	e8 80 f8 ff ff       	call   c001412c <Device::Device(char const*)>
c00148ac:	83 c4 10             	add    esp,0x10
c00148af:	ba 10 a9 02 c0       	mov    edx,0xc002a910
c00148b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00148b8:	89 10                	mov    DWORD PTR [eax],edx
c00148ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00148be:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c00148c8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00148d0:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c00148d8:	7f 5e                	jg     c0014938 <InterruptController::InterruptController(char const*)+0xa0>
c00148da:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00148e2:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c00148e7:	7f 49                	jg     c0014932 <InterruptController::InterruptController(char const*)+0x9a>
c00148e9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00148ed:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00148f1:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00148f8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00148fc:	01 ca                	add    edx,ecx
c00148fe:	83 c2 54             	add    edx,0x54
c0014901:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014909:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001490d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014911:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014918:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001491c:	01 ca                	add    edx,ecx
c001491e:	81 c2 54 04 00 00    	add    edx,0x454
c0014924:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001492c:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0014930:	eb b0                	jmp    c00148e2 <InterruptController::InterruptController(char const*)+0x4a>
c0014932:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0014936:	eb 98                	jmp    c00148d0 <InterruptController::InterruptController(char const*)+0x38>
c0014938:	90                   	nop
c0014939:	83 c4 1c             	add    esp,0x1c
c001493c:	c3                   	ret    
c001493d:	90                   	nop

c001493e <InterruptController::~InterruptController()>:
c001493e:	83 ec 0c             	sub    esp,0xc
c0014941:	ba 10 a9 02 c0       	mov    edx,0xc002a910
c0014946:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001494a:	89 10                	mov    DWORD PTR [eax],edx
c001494c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014950:	83 ec 0c             	sub    esp,0xc
c0014953:	50                   	push   eax
c0014954:	e8 b5 f4 ff ff       	call   c0013e0e <Device::~Device()>
c0014959:	83 c4 10             	add    esp,0x10
c001495c:	90                   	nop
c001495d:	83 c4 0c             	add    esp,0xc
c0014960:	c3                   	ret    
c0014961:	90                   	nop

c0014962 <InterruptController::~InterruptController()>:
c0014962:	83 ec 0c             	sub    esp,0xc
c0014965:	83 ec 0c             	sub    esp,0xc
c0014968:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001496c:	e8 cd ff ff ff       	call   c001493e <InterruptController::~InterruptController()>
c0014971:	83 c4 10             	add    esp,0x10
c0014974:	83 ec 08             	sub    esp,0x8
c0014977:	68 58 21 00 00       	push   0x2158
c001497c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014980:	e8 b0 e0 ff ff       	call   c0012a35 <operator delete(void*, unsigned long)>
c0014985:	83 c4 10             	add    esp,0x10
c0014988:	83 c4 0c             	add    esp,0xc
c001498b:	c3                   	ret    

c001498c <displayDebugInfo(regs*)>:
c001498c:	55                   	push   ebp
c001498d:	57                   	push   edi
c001498e:	56                   	push   esi
c001498f:	53                   	push   ebx
c0014990:	83 ec 24             	sub    esp,0x24
c0014993:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0014997:	0f 20 c2             	mov    edx,cr0
c001499a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001499e:	0f 20 d7             	mov    edi,cr2
c00149a1:	0f 20 de             	mov    esi,cr3
c00149a4:	0f 20 e5             	mov    ebp,cr4
c00149a7:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c00149aa:	68 ae a6 02 c0       	push   0xc002a6ae
c00149af:	e8 61 e1 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c00149b4:	59                   	pop    ecx
c00149b5:	58                   	pop    eax
c00149b6:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00149b9:	68 b9 a6 02 c0       	push   0xc002a6b9
c00149be:	e8 52 e1 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c00149c3:	58                   	pop    eax
c00149c4:	5a                   	pop    edx
c00149c5:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00149c8:	68 c4 a6 02 c0       	push   0xc002a6c4
c00149cd:	e8 43 e1 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c00149d2:	59                   	pop    ecx
c00149d3:	58                   	pop    eax
c00149d4:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00149d7:	68 cf a6 02 c0       	push   0xc002a6cf
c00149dc:	e8 34 e1 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c00149e1:	58                   	pop    eax
c00149e2:	5a                   	pop    edx
c00149e3:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00149e6:	68 da a6 02 c0       	push   0xc002a6da
c00149eb:	e8 25 e1 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c00149f0:	59                   	pop    ecx
c00149f1:	58                   	pop    eax
c00149f2:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c00149f5:	68 e5 a6 02 c0       	push   0xc002a6e5
c00149fa:	e8 16 e1 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c00149ff:	58                   	pop    eax
c0014a00:	5a                   	pop    edx
c0014a01:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014a04:	68 f0 a6 02 c0       	push   0xc002a6f0
c0014a09:	e8 07 e1 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c0014a0e:	59                   	pop    ecx
c0014a0f:	58                   	pop    eax
c0014a10:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0014a13:	68 fb a6 02 c0       	push   0xc002a6fb
c0014a18:	e8 f8 e0 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c0014a1d:	58                   	pop    eax
c0014a1e:	5a                   	pop    edx
c0014a1f:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014a22:	68 06 a7 02 c0       	push   0xc002a706
c0014a27:	e8 e9 e0 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c0014a2c:	59                   	pop    ecx
c0014a2d:	58                   	pop    eax
c0014a2e:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014a31:	68 15 a7 02 c0       	push   0xc002a715
c0014a36:	e8 da e0 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c0014a3b:	58                   	pop    eax
c0014a3c:	5a                   	pop    edx
c0014a3d:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014a40:	68 20 a7 02 c0       	push   0xc002a720
c0014a45:	e8 cb e0 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c0014a4a:	59                   	pop    ecx
c0014a4b:	58                   	pop    eax
c0014a4c:	57                   	push   edi
c0014a4d:	68 2b a7 02 c0       	push   0xc002a72b
c0014a52:	e8 be e0 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c0014a57:	58                   	pop    eax
c0014a58:	5a                   	pop    edx
c0014a59:	56                   	push   esi
c0014a5a:	68 36 a7 02 c0       	push   0xc002a736
c0014a5f:	e8 b1 e0 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c0014a64:	59                   	pop    ecx
c0014a65:	a1 d4 10 03 c0       	mov    eax,ds:0xc00310d4
c0014a6a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a70:	e8 62 c2 ff ff       	call   c0010cd7 <setActiveTerminal(VgaText*)>
c0014a75:	58                   	pop    eax
c0014a76:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014a79:	5a                   	pop    edx
c0014a7a:	c1 e0 05             	shl    eax,0x5
c0014a7d:	05 20 cb 02 c0       	add    eax,0xc002cb20
c0014a82:	50                   	push   eax
c0014a83:	a1 d4 10 03 c0       	mov    eax,ds:0xc00310d4
c0014a88:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a8e:	e8 63 c6 ff ff       	call   c00110f6 <VgaText::puts(char const*)>
c0014a93:	59                   	pop    ecx
c0014a94:	58                   	pop    eax
c0014a95:	a1 d4 10 03 c0       	mov    eax,ds:0xc00310d4
c0014a9a:	68 41 a7 02 c0       	push   0xc002a741
c0014a9f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014aa5:	e8 4c c6 ff ff       	call   c00110f6 <VgaText::puts(char const*)>
c0014aaa:	58                   	pop    eax
c0014aab:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014ab0:	5a                   	pop    edx
c0014ab1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014ab4:	83 c0 0c             	add    eax,0xc
c0014ab7:	50                   	push   eax
c0014ab8:	a1 d4 10 03 c0       	mov    eax,ds:0xc00310d4
c0014abd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ac3:	e8 2e c6 ff ff       	call   c00110f6 <VgaText::puts(char const*)>
c0014ac8:	59                   	pop    ecx
c0014ac9:	58                   	pop    eax
c0014aca:	a1 d4 10 03 c0       	mov    eax,ds:0xc00310d4
c0014acf:	68 4a a7 02 c0       	push   0xc002a74a
c0014ad4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ada:	e8 17 c6 ff ff       	call   c00110f6 <VgaText::puts(char const*)>
c0014adf:	58                   	pop    eax
c0014ae0:	a1 d4 10 03 c0       	mov    eax,ds:0xc00310d4
c0014ae5:	5a                   	pop    edx
c0014ae6:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014ae9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014aef:	e8 28 c6 ff ff       	call   c001111c <VgaText::putx(unsigned int)>
c0014af4:	59                   	pop    ecx
c0014af5:	58                   	pop    eax
c0014af6:	a1 d4 10 03 c0       	mov    eax,ds:0xc00310d4
c0014afb:	68 52 a7 02 c0       	push   0xc002a752
c0014b00:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b06:	e8 eb c5 ff ff       	call   c00110f6 <VgaText::puts(char const*)>
c0014b0b:	58                   	pop    eax
c0014b0c:	a1 d4 10 03 c0       	mov    eax,ds:0xc00310d4
c0014b11:	5a                   	pop    edx
c0014b12:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014b15:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b1b:	e8 fc c5 ff ff       	call   c001111c <VgaText::putx(unsigned int)>
c0014b20:	59                   	pop    ecx
c0014b21:	58                   	pop    eax
c0014b22:	a1 d4 10 03 c0       	mov    eax,ds:0xc00310d4
c0014b27:	68 5a a7 02 c0       	push   0xc002a75a
c0014b2c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b32:	e8 bf c5 ff ff       	call   c00110f6 <VgaText::puts(char const*)>
c0014b37:	58                   	pop    eax
c0014b38:	a1 d4 10 03 c0       	mov    eax,ds:0xc00310d4
c0014b3d:	5a                   	pop    edx
c0014b3e:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014b41:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b47:	e8 d0 c5 ff ff       	call   c001111c <VgaText::putx(unsigned int)>
c0014b4c:	59                   	pop    ecx
c0014b4d:	58                   	pop    eax
c0014b4e:	a1 d4 10 03 c0       	mov    eax,ds:0xc00310d4
c0014b53:	68 62 a7 02 c0       	push   0xc002a762
c0014b58:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b5e:	e8 93 c5 ff ff       	call   c00110f6 <VgaText::puts(char const*)>
c0014b63:	58                   	pop    eax
c0014b64:	a1 d4 10 03 c0       	mov    eax,ds:0xc00310d4
c0014b69:	5a                   	pop    edx
c0014b6a:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0014b6d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b73:	e8 a4 c5 ff ff       	call   c001111c <VgaText::putx(unsigned int)>
c0014b78:	59                   	pop    ecx
c0014b79:	58                   	pop    eax
c0014b7a:	a1 d4 10 03 c0       	mov    eax,ds:0xc00310d4
c0014b7f:	68 6a a7 02 c0       	push   0xc002a76a
c0014b84:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b8a:	e8 67 c5 ff ff       	call   c00110f6 <VgaText::puts(char const*)>
c0014b8f:	58                   	pop    eax
c0014b90:	a1 d4 10 03 c0       	mov    eax,ds:0xc00310d4
c0014b95:	5a                   	pop    edx
c0014b96:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014b99:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b9f:	e8 78 c5 ff ff       	call   c001111c <VgaText::putx(unsigned int)>
c0014ba4:	59                   	pop    ecx
c0014ba5:	58                   	pop    eax
c0014ba6:	a1 d4 10 03 c0       	mov    eax,ds:0xc00310d4
c0014bab:	68 72 a7 02 c0       	push   0xc002a772
c0014bb0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014bb6:	e8 3b c5 ff ff       	call   c00110f6 <VgaText::puts(char const*)>
c0014bbb:	58                   	pop    eax
c0014bbc:	a1 d4 10 03 c0       	mov    eax,ds:0xc00310d4
c0014bc1:	5a                   	pop    edx
c0014bc2:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c0014bc5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014bcb:	e8 4c c5 ff ff       	call   c001111c <VgaText::putx(unsigned int)>
c0014bd0:	59                   	pop    ecx
c0014bd1:	58                   	pop    eax
c0014bd2:	a1 d4 10 03 c0       	mov    eax,ds:0xc00310d4
c0014bd7:	68 7a a7 02 c0       	push   0xc002a77a
c0014bdc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014be2:	e8 0f c5 ff ff       	call   c00110f6 <VgaText::puts(char const*)>
c0014be7:	58                   	pop    eax
c0014be8:	a1 d4 10 03 c0       	mov    eax,ds:0xc00310d4
c0014bed:	5a                   	pop    edx
c0014bee:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014bf2:	52                   	push   edx
c0014bf3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014bf9:	e8 1e c5 ff ff       	call   c001111c <VgaText::putx(unsigned int)>
c0014bfe:	59                   	pop    ecx
c0014bff:	58                   	pop    eax
c0014c00:	a1 d4 10 03 c0       	mov    eax,ds:0xc00310d4
c0014c05:	68 83 a7 02 c0       	push   0xc002a783
c0014c0a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014c10:	e8 e1 c4 ff ff       	call   c00110f6 <VgaText::puts(char const*)>
c0014c15:	58                   	pop    eax
c0014c16:	a1 d4 10 03 c0       	mov    eax,ds:0xc00310d4
c0014c1b:	5a                   	pop    edx
c0014c1c:	57                   	push   edi
c0014c1d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014c23:	e8 f4 c4 ff ff       	call   c001111c <VgaText::putx(unsigned int)>
c0014c28:	59                   	pop    ecx
c0014c29:	a1 d4 10 03 c0       	mov    eax,ds:0xc00310d4
c0014c2e:	5f                   	pop    edi
c0014c2f:	68 8b a7 02 c0       	push   0xc002a78b
c0014c34:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014c3a:	e8 b7 c4 ff ff       	call   c00110f6 <VgaText::puts(char const*)>
c0014c3f:	58                   	pop    eax
c0014c40:	a1 d4 10 03 c0       	mov    eax,ds:0xc00310d4
c0014c45:	5a                   	pop    edx
c0014c46:	56                   	push   esi
c0014c47:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014c4d:	e8 ca c4 ff ff       	call   c001111c <VgaText::putx(unsigned int)>
c0014c52:	59                   	pop    ecx
c0014c53:	a1 d4 10 03 c0       	mov    eax,ds:0xc00310d4
c0014c58:	5e                   	pop    esi
c0014c59:	68 93 a7 02 c0       	push   0xc002a793
c0014c5e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014c64:	e8 8d c4 ff ff       	call   c00110f6 <VgaText::puts(char const*)>
c0014c69:	5f                   	pop    edi
c0014c6a:	58                   	pop    eax
c0014c6b:	a1 d4 10 03 c0       	mov    eax,ds:0xc00310d4
c0014c70:	55                   	push   ebp
c0014c71:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014c77:	e8 a0 c4 ff ff       	call   c001111c <VgaText::putx(unsigned int)>
c0014c7c:	58                   	pop    eax
c0014c7d:	a1 d4 10 03 c0       	mov    eax,ds:0xc00310d4
c0014c82:	5a                   	pop    edx
c0014c83:	68 9b a7 02 c0       	push   0xc002a79b
c0014c88:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014c8e:	e8 63 c4 ff ff       	call   c00110f6 <VgaText::puts(char const*)>
c0014c93:	0f 21 c0             	mov    eax,db0
c0014c96:	59                   	pop    ecx
c0014c97:	5e                   	pop    esi
c0014c98:	50                   	push   eax
c0014c99:	a1 d4 10 03 c0       	mov    eax,ds:0xc00310d4
c0014c9e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ca4:	e8 73 c4 ff ff       	call   c001111c <VgaText::putx(unsigned int)>
c0014ca9:	5f                   	pop    edi
c0014caa:	a1 d4 10 03 c0       	mov    eax,ds:0xc00310d4
c0014caf:	5d                   	pop    ebp
c0014cb0:	68 a4 a7 02 c0       	push   0xc002a7a4
c0014cb5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014cbb:	e8 36 c4 ff ff       	call   c00110f6 <VgaText::puts(char const*)>
c0014cc0:	0f 21 c8             	mov    eax,db1
c0014cc3:	5a                   	pop    edx
c0014cc4:	59                   	pop    ecx
c0014cc5:	50                   	push   eax
c0014cc6:	a1 d4 10 03 c0       	mov    eax,ds:0xc00310d4
c0014ccb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014cd1:	e8 46 c4 ff ff       	call   c001111c <VgaText::putx(unsigned int)>
c0014cd6:	5e                   	pop    esi
c0014cd7:	a1 d4 10 03 c0       	mov    eax,ds:0xc00310d4
c0014cdc:	5f                   	pop    edi
c0014cdd:	68 ac a7 02 c0       	push   0xc002a7ac
c0014ce2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ce8:	e8 09 c4 ff ff       	call   c00110f6 <VgaText::puts(char const*)>
c0014ced:	0f 21 d0             	mov    eax,db2
c0014cf0:	5d                   	pop    ebp
c0014cf1:	5a                   	pop    edx
c0014cf2:	50                   	push   eax
c0014cf3:	a1 d4 10 03 c0       	mov    eax,ds:0xc00310d4
c0014cf8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014cfe:	e8 19 c4 ff ff       	call   c001111c <VgaText::putx(unsigned int)>
c0014d03:	59                   	pop    ecx
c0014d04:	a1 d4 10 03 c0       	mov    eax,ds:0xc00310d4
c0014d09:	5e                   	pop    esi
c0014d0a:	68 b4 a7 02 c0       	push   0xc002a7b4
c0014d0f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014d15:	e8 dc c3 ff ff       	call   c00110f6 <VgaText::puts(char const*)>
c0014d1a:	0f 21 d8             	mov    eax,db3
c0014d1d:	5f                   	pop    edi
c0014d1e:	5d                   	pop    ebp
c0014d1f:	50                   	push   eax
c0014d20:	a1 d4 10 03 c0       	mov    eax,ds:0xc00310d4
c0014d25:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014d2b:	e8 ec c3 ff ff       	call   c001111c <VgaText::putx(unsigned int)>
c0014d30:	58                   	pop    eax
c0014d31:	a1 d4 10 03 c0       	mov    eax,ds:0xc00310d4
c0014d36:	5a                   	pop    edx
c0014d37:	68 bc a7 02 c0       	push   0xc002a7bc
c0014d3c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014d42:	e8 af c3 ff ff       	call   c00110f6 <VgaText::puts(char const*)>
c0014d47:	0f 21 f0             	mov    eax,db6
c0014d4a:	59                   	pop    ecx
c0014d4b:	5e                   	pop    esi
c0014d4c:	50                   	push   eax
c0014d4d:	a1 d4 10 03 c0       	mov    eax,ds:0xc00310d4
c0014d52:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014d58:	e8 bf c3 ff ff       	call   c001111c <VgaText::putx(unsigned int)>
c0014d5d:	5f                   	pop    edi
c0014d5e:	a1 d4 10 03 c0       	mov    eax,ds:0xc00310d4
c0014d63:	5d                   	pop    ebp
c0014d64:	68 c4 a7 02 c0       	push   0xc002a7c4
c0014d69:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014d6f:	e8 82 c3 ff ff       	call   c00110f6 <VgaText::puts(char const*)>
c0014d74:	0f 21 f8             	mov    eax,db7
c0014d77:	5a                   	pop    edx
c0014d78:	59                   	pop    ecx
c0014d79:	50                   	push   eax
c0014d7a:	a1 d4 10 03 c0       	mov    eax,ds:0xc00310d4
c0014d7f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014d85:	e8 92 c3 ff ff       	call   c001111c <VgaText::putx(unsigned int)>
c0014d8a:	5e                   	pop    esi
c0014d8b:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014d8e:	e8 33 82 00 00       	call   c001cfc6 <Thr::getDriverNameFromAddress(unsigned long)>
c0014d93:	83 c4 10             	add    esp,0x10
c0014d96:	85 c0                	test   eax,eax
c0014d98:	74 7d                	je     c0014e17 <displayDebugInfo(regs*)+0x48b>
c0014d9a:	89 c6                	mov    esi,eax
c0014d9c:	50                   	push   eax
c0014d9d:	50                   	push   eax
c0014d9e:	56                   	push   esi
c0014d9f:	68 cc a7 02 c0       	push   0xc002a7cc
c0014da4:	e8 6c dd ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c0014da9:	5a                   	pop    edx
c0014daa:	a1 d4 10 03 c0       	mov    eax,ds:0xc00310d4
c0014daf:	59                   	pop    ecx
c0014db0:	68 da a7 02 c0       	push   0xc002a7da
c0014db5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014dbb:	e8 36 c3 ff ff       	call   c00110f6 <VgaText::puts(char const*)>
c0014dc0:	5f                   	pop    edi
c0014dc1:	a1 d4 10 03 c0       	mov    eax,ds:0xc00310d4
c0014dc6:	5d                   	pop    ebp
c0014dc7:	56                   	push   esi
c0014dc8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014dce:	e8 23 c3 ff ff       	call   c00110f6 <VgaText::puts(char const*)>
c0014dd3:	58                   	pop    eax
c0014dd4:	a1 d4 10 03 c0       	mov    eax,ds:0xc00310d4
c0014dd9:	5a                   	pop    edx
c0014dda:	68 e6 a7 02 c0       	push   0xc002a7e6
c0014ddf:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014de5:	e8 0c c3 ff ff       	call   c00110f6 <VgaText::puts(char const*)>
c0014dea:	59                   	pop    ecx
c0014deb:	a1 d4 10 03 c0       	mov    eax,ds:0xc00310d4
c0014df0:	8b b8 26 05 00 00    	mov    edi,DWORD PTR [eax+0x526]
c0014df6:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014df9:	e8 ff 81 00 00       	call   c001cffd <Thr::getDriverOffsetFromAddress(unsigned long)>
c0014dfe:	5b                   	pop    ebx
c0014dff:	5d                   	pop    ebp
c0014e00:	50                   	push   eax
c0014e01:	57                   	push   edi
c0014e02:	e8 15 c3 ff ff       	call   c001111c <VgaText::putx(unsigned int)>
c0014e07:	58                   	pop    eax
c0014e08:	5a                   	pop    edx
c0014e09:	56                   	push   esi
c0014e0a:	68 f2 a7 02 c0       	push   0xc002a7f2
c0014e0f:	e8 01 dd ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c0014e14:	83 c4 10             	add    esp,0x10
c0014e17:	fa                   	cli    
c0014e18:	f4                   	hlt    
c0014e19:	eb fe                	jmp    c0014e19 <displayDebugInfo(regs*)+0x48d>

c0014e1b <x87EmulHandler(regs*, void*)>:
c0014e1b:	53                   	push   ebx
c0014e1c:	83 ec 14             	sub    esp,0x14
c0014e1f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014e23:	53                   	push   ebx
c0014e24:	e8 29 a5 00 00       	call   c001f352 <Vm::x87Handler(regs*)>
c0014e29:	83 c4 10             	add    esp,0x10
c0014e2c:	84 c0                	test   al,al
c0014e2e:	74 05                	je     c0014e35 <x87EmulHandler(regs*, void*)+0x1a>
c0014e30:	83 c4 08             	add    esp,0x8
c0014e33:	5b                   	pop    ebx
c0014e34:	c3                   	ret    
c0014e35:	83 ec 0c             	sub    esp,0xc
c0014e38:	68 02 a8 02 c0       	push   0xc002a802
c0014e3d:	e8 d3 dc ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c0014e42:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014e45:	e8 42 fb ff ff       	call   c001498c <displayDebugInfo(regs*)>

c0014e4a <gpFault(regs*, void*)>:
c0014e4a:	53                   	push   ebx
c0014e4b:	83 ec 14             	sub    esp,0x14
c0014e4e:	c7 05 10 dd 02 c0 cf e6 01 c0 	mov    DWORD PTR ds:0xc002dd10,0xc001e6cf
c0014e58:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014e5c:	53                   	push   ebx
c0014e5d:	e8 6d 98 00 00       	call   c001e6cf <Vm::faultHandler(regs*)>
c0014e62:	83 c4 10             	add    esp,0x10
c0014e65:	84 c0                	test   al,al
c0014e67:	74 05                	je     c0014e6e <gpFault(regs*, void*)+0x24>
c0014e69:	83 c4 08             	add    esp,0x8
c0014e6c:	5b                   	pop    ebx
c0014e6d:	c3                   	ret    
c0014e6e:	83 ec 0c             	sub    esp,0xc
c0014e71:	68 18 a8 02 c0       	push   0xc002a818
c0014e76:	e8 9a dc ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c0014e7b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014e7e:	e8 09 fb ff ff       	call   c001498c <displayDebugInfo(regs*)>

c0014e83 <pgFault(regs*, void*)>:
c0014e83:	83 ec 18             	sub    esp,0x18
c0014e86:	68 33 a8 02 c0       	push   0xc002a833
c0014e8b:	e8 85 dc ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c0014e90:	58                   	pop    eax
c0014e91:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014e95:	e8 f2 fa ff ff       	call   c001498c <displayDebugInfo(regs*)>

c0014e9a <otherISRHandler(regs*, void*)>:
c0014e9a:	53                   	push   ebx
c0014e9b:	83 ec 0c             	sub    esp,0xc
c0014e9e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014ea2:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014ea5:	50                   	push   eax
c0014ea6:	50                   	push   eax
c0014ea7:	68 40 a8 02 c0       	push   0xc002a840
c0014eac:	e8 64 dc ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c0014eb1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014eb4:	e8 d3 fa ff ff       	call   c001498c <displayDebugInfo(regs*)>

c0014eb9 <opcodeFault(regs*, void*)>:
c0014eb9:	55                   	push   ebp
c0014eba:	89 e5                	mov    ebp,esp
c0014ebc:	56                   	push   esi
c0014ebd:	53                   	push   ebx
c0014ebe:	83 ec 40             	sub    esp,0x40
c0014ec1:	a1 68 db 02 c0       	mov    eax,ds:0xc002db68
c0014ec6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014ecc:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c0014ed2:	84 c0                	test   al,al
c0014ed4:	74 24                	je     c0014efa <opcodeFault(regs*, void*)+0x41>
c0014ed6:	83 ec 0c             	sub    esp,0xc
c0014ed9:	68 60 a8 02 c0       	push   0xc002a860
c0014ede:	e8 32 dc ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c0014ee3:	83 c4 10             	add    esp,0x10
c0014ee6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ee9:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014eec:	8d 50 19             	lea    edx,[eax+0x19]
c0014eef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ef2:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014ef5:	e9 be 05 00 00       	jmp    c00154b8 <opcodeFault(regs*, void*)+0x5ff>
c0014efa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014efd:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014f00:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0014f03:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c0014f07:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c0014f0b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f0e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014f11:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0014f14:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014f17:	8a 00                	mov    al,BYTE PTR [eax]
c0014f19:	3c f0                	cmp    al,0xf0
c0014f1b:	75 17                	jne    c0014f34 <opcodeFault(regs*, void*)+0x7b>
c0014f1d:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014f20:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f23:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014f26:	8d 50 01             	lea    edx,[eax+0x1]
c0014f29:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f2c:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014f2f:	e9 da 00 00 00       	jmp    c001500e <opcodeFault(regs*, void*)+0x155>
c0014f34:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014f37:	8a 00                	mov    al,BYTE PTR [eax]
c0014f39:	3c f2                	cmp    al,0xf2
c0014f3b:	74 09                	je     c0014f46 <opcodeFault(regs*, void*)+0x8d>
c0014f3d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014f40:	8a 00                	mov    al,BYTE PTR [eax]
c0014f42:	3c f3                	cmp    al,0xf3
c0014f44:	75 1b                	jne    c0014f61 <opcodeFault(regs*, void*)+0xa8>
c0014f46:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014f4a:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014f4d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f50:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014f53:	8d 50 01             	lea    edx,[eax+0x1]
c0014f56:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f59:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014f5c:	e9 ad 00 00 00       	jmp    c001500e <opcodeFault(regs*, void*)+0x155>
c0014f61:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014f64:	8a 00                	mov    al,BYTE PTR [eax]
c0014f66:	3c 66                	cmp    al,0x66
c0014f68:	75 1f                	jne    c0014f89 <opcodeFault(regs*, void*)+0xd0>
c0014f6a:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014f6e:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c0014f72:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014f75:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f78:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014f7b:	8d 50 01             	lea    edx,[eax+0x1]
c0014f7e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f81:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014f84:	e9 85 00 00 00       	jmp    c001500e <opcodeFault(regs*, void*)+0x155>
c0014f89:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014f8c:	8a 00                	mov    al,BYTE PTR [eax]
c0014f8e:	3c 67                	cmp    al,0x67
c0014f90:	75 18                	jne    c0014faa <opcodeFault(regs*, void*)+0xf1>
c0014f92:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014f96:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014f99:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f9c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014f9f:	8d 50 01             	lea    edx,[eax+0x1]
c0014fa2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fa5:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014fa8:	eb 64                	jmp    c001500e <opcodeFault(regs*, void*)+0x155>
c0014faa:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014fad:	8a 00                	mov    al,BYTE PTR [eax]
c0014faf:	3c 2e                	cmp    al,0x2e
c0014fb1:	74 09                	je     c0014fbc <opcodeFault(regs*, void*)+0x103>
c0014fb3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014fb6:	8a 00                	mov    al,BYTE PTR [eax]
c0014fb8:	3c 3e                	cmp    al,0x3e
c0014fba:	75 18                	jne    c0014fd4 <opcodeFault(regs*, void*)+0x11b>
c0014fbc:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014fc0:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014fc3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fc6:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014fc9:	8d 50 01             	lea    edx,[eax+0x1]
c0014fcc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fcf:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014fd2:	eb 3a                	jmp    c001500e <opcodeFault(regs*, void*)+0x155>
c0014fd4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014fd7:	8a 00                	mov    al,BYTE PTR [eax]
c0014fd9:	3c 36                	cmp    al,0x36
c0014fdb:	74 1b                	je     c0014ff8 <opcodeFault(regs*, void*)+0x13f>
c0014fdd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014fe0:	8a 00                	mov    al,BYTE PTR [eax]
c0014fe2:	3c 26                	cmp    al,0x26
c0014fe4:	74 12                	je     c0014ff8 <opcodeFault(regs*, void*)+0x13f>
c0014fe6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014fe9:	8a 00                	mov    al,BYTE PTR [eax]
c0014feb:	3c 64                	cmp    al,0x64
c0014fed:	74 09                	je     c0014ff8 <opcodeFault(regs*, void*)+0x13f>
c0014fef:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014ff2:	8a 00                	mov    al,BYTE PTR [eax]
c0014ff4:	3c 65                	cmp    al,0x65
c0014ff6:	75 16                	jne    c001500e <opcodeFault(regs*, void*)+0x155>
c0014ff8:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014ffc:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014fff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015002:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015005:	8d 50 01             	lea    edx,[eax+0x1]
c0015008:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001500b:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001500e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015011:	8a 00                	mov    al,BYTE PTR [eax]
c0015013:	3c 0f                	cmp    al,0xf
c0015015:	0f 85 ad 00 00 00    	jne    c00150c8 <opcodeFault(regs*, void*)+0x20f>
c001501b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001501e:	40                   	inc    eax
c001501f:	8a 00                	mov    al,BYTE PTR [eax]
c0015021:	3c c2                	cmp    al,0xc2
c0015023:	74 0e                	je     c0015033 <opcodeFault(regs*, void*)+0x17a>
c0015025:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015028:	40                   	inc    eax
c0015029:	8a 00                	mov    al,BYTE PTR [eax]
c001502b:	3c c3                	cmp    al,0xc3
c001502d:	0f 85 95 00 00 00    	jne    c00150c8 <opcodeFault(regs*, void*)+0x20f>
c0015033:	83 ec 0c             	sub    esp,0xc
c0015036:	68 83 a8 02 c0       	push   0xc002a883
c001503b:	e8 d5 da ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c0015040:	83 c4 10             	add    esp,0x10
c0015043:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015046:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015049:	8d 50 01             	lea    edx,[eax+0x1]
c001504c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001504f:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015052:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015055:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015058:	8a 00                	mov    al,BYTE PTR [eax]
c001505a:	8d 50 fe             	lea    edx,[eax-0x2]
c001505d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015060:	88 10                	mov    BYTE PTR [eax],dl
c0015062:	8d 45 c2             	lea    eax,[ebp-0x3e]
c0015065:	50                   	push   eax
c0015066:	8d 45 c3             	lea    eax,[ebp-0x3d]
c0015069:	50                   	push   eax
c001506a:	8d 45 c4             	lea    eax,[ebp-0x3c]
c001506d:	50                   	push   eax
c001506e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0015071:	e8 b4 47 00 00       	call   c001982a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0015076:	83 c4 10             	add    esp,0x10
c0015079:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001507c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001507f:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0015082:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c0015085:	01 d0                	add    eax,edx
c0015087:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001508a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001508d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015090:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0015093:	48                   	dec    eax
c0015094:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0015097:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001509a:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001509d:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00150a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150a3:	83 ec 04             	sub    esp,0x4
c00150a6:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c00150a9:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c00150ac:	50                   	push   eax
c00150ad:	e8 02 b1 fe ff       	call   c00001b4 <voodooXADD>
c00150b2:	83 c4 10             	add    esp,0x10
c00150b5:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c00150b8:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00150bb:	01 c2                	add    edx,eax
c00150bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150c0:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00150c3:	e9 f0 03 00 00       	jmp    c00154b8 <opcodeFault(regs*, void*)+0x5ff>
c00150c8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00150cb:	8a 00                	mov    al,BYTE PTR [eax]
c00150cd:	3c 0f                	cmp    al,0xf
c00150cf:	0f 85 8b 01 00 00    	jne    c0015260 <opcodeFault(regs*, void*)+0x3a7>
c00150d5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00150d8:	40                   	inc    eax
c00150d9:	8a 00                	mov    al,BYTE PTR [eax]
c00150db:	3c c7                	cmp    al,0xc7
c00150dd:	0f 86 7d 01 00 00    	jbe    c0015260 <opcodeFault(regs*, void*)+0x3a7>
c00150e3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00150e6:	40                   	inc    eax
c00150e7:	8a 00                	mov    al,BYTE PTR [eax]
c00150e9:	3c cf                	cmp    al,0xcf
c00150eb:	0f 87 6f 01 00 00    	ja     c0015260 <opcodeFault(regs*, void*)+0x3a7>
c00150f1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00150f4:	40                   	inc    eax
c00150f5:	8a 00                	mov    al,BYTE PTR [eax]
c00150f7:	83 c0 38             	add    eax,0x38
c00150fa:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c00150fd:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0015101:	75 0b                	jne    c001510e <opcodeFault(regs*, void*)+0x255>
c0015103:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015106:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0015109:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001510c:	eb 75                	jmp    c0015183 <opcodeFault(regs*, void*)+0x2ca>
c001510e:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0015112:	75 0b                	jne    c001511f <opcodeFault(regs*, void*)+0x266>
c0015114:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015117:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001511a:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001511d:	eb 64                	jmp    c0015183 <opcodeFault(regs*, void*)+0x2ca>
c001511f:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0015123:	75 0b                	jne    c0015130 <opcodeFault(regs*, void*)+0x277>
c0015125:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015128:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001512b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001512e:	eb 53                	jmp    c0015183 <opcodeFault(regs*, void*)+0x2ca>
c0015130:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0015134:	75 0b                	jne    c0015141 <opcodeFault(regs*, void*)+0x288>
c0015136:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015139:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001513c:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001513f:	eb 42                	jmp    c0015183 <opcodeFault(regs*, void*)+0x2ca>
c0015141:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0015145:	75 0b                	jne    c0015152 <opcodeFault(regs*, void*)+0x299>
c0015147:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001514a:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c001514d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015150:	eb 31                	jmp    c0015183 <opcodeFault(regs*, void*)+0x2ca>
c0015152:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0015156:	75 0b                	jne    c0015163 <opcodeFault(regs*, void*)+0x2aa>
c0015158:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001515b:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c001515e:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015161:	eb 20                	jmp    c0015183 <opcodeFault(regs*, void*)+0x2ca>
c0015163:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0015167:	75 0b                	jne    c0015174 <opcodeFault(regs*, void*)+0x2bb>
c0015169:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001516c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001516f:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015172:	eb 0f                	jmp    c0015183 <opcodeFault(regs*, void*)+0x2ca>
c0015174:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0015178:	75 09                	jne    c0015183 <opcodeFault(regs*, void*)+0x2ca>
c001517a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001517d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0015180:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015183:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c0015187:	74 10                	je     c0015199 <opcodeFault(regs*, void*)+0x2e0>
c0015189:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c0015190:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c0015197:	eb 2d                	jmp    c00151c6 <opcodeFault(regs*, void*)+0x30d>
c0015199:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001519c:	c1 e0 18             	shl    eax,0x18
c001519f:	89 c2                	mov    edx,eax
c00151a1:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00151a4:	c1 e0 08             	shl    eax,0x8
c00151a7:	25 00 00 ff 00       	and    eax,0xff0000
c00151ac:	09 c2                	or     edx,eax
c00151ae:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00151b1:	c1 e8 08             	shr    eax,0x8
c00151b4:	25 00 ff 00 00       	and    eax,0xff00
c00151b9:	09 c2                	or     edx,eax
c00151bb:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00151be:	c1 e8 18             	shr    eax,0x18
c00151c1:	09 d0                	or     eax,edx
c00151c3:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00151c6:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c00151ca:	75 0b                	jne    c00151d7 <opcodeFault(regs*, void*)+0x31e>
c00151cc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151cf:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00151d2:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00151d5:	eb 75                	jmp    c001524c <opcodeFault(regs*, void*)+0x393>
c00151d7:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c00151db:	75 0b                	jne    c00151e8 <opcodeFault(regs*, void*)+0x32f>
c00151dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151e0:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00151e3:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00151e6:	eb 64                	jmp    c001524c <opcodeFault(regs*, void*)+0x393>
c00151e8:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c00151ec:	75 0b                	jne    c00151f9 <opcodeFault(regs*, void*)+0x340>
c00151ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151f1:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00151f4:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c00151f7:	eb 53                	jmp    c001524c <opcodeFault(regs*, void*)+0x393>
c00151f9:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c00151fd:	75 0b                	jne    c001520a <opcodeFault(regs*, void*)+0x351>
c00151ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015202:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015205:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0015208:	eb 42                	jmp    c001524c <opcodeFault(regs*, void*)+0x393>
c001520a:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c001520e:	75 0b                	jne    c001521b <opcodeFault(regs*, void*)+0x362>
c0015210:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015213:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015216:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c0015219:	eb 31                	jmp    c001524c <opcodeFault(regs*, void*)+0x393>
c001521b:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c001521f:	75 0b                	jne    c001522c <opcodeFault(regs*, void*)+0x373>
c0015221:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015224:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015227:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001522a:	eb 20                	jmp    c001524c <opcodeFault(regs*, void*)+0x393>
c001522c:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0015230:	75 0b                	jne    c001523d <opcodeFault(regs*, void*)+0x384>
c0015232:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015235:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015238:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c001523b:	eb 0f                	jmp    c001524c <opcodeFault(regs*, void*)+0x393>
c001523d:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0015241:	75 09                	jne    c001524c <opcodeFault(regs*, void*)+0x393>
c0015243:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015246:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015249:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001524c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001524f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015252:	8d 50 02             	lea    edx,[eax+0x2]
c0015255:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015258:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001525b:	e9 58 02 00 00       	jmp    c00154b8 <opcodeFault(regs*, void*)+0x5ff>
c0015260:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015263:	8a 00                	mov    al,BYTE PTR [eax]
c0015265:	3c 0f                	cmp    al,0xf
c0015267:	0f 85 76 01 00 00    	jne    c00153e3 <opcodeFault(regs*, void*)+0x52a>
c001526d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015270:	40                   	inc    eax
c0015271:	8a 00                	mov    al,BYTE PTR [eax]
c0015273:	3c c7                	cmp    al,0xc7
c0015275:	0f 85 68 01 00 00    	jne    c00153e3 <opcodeFault(regs*, void*)+0x52a>
c001527b:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001527e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015281:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015284:	8d 50 01             	lea    edx,[eax+0x1]
c0015287:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001528a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001528d:	8d 45 ba             	lea    eax,[ebp-0x46]
c0015290:	50                   	push   eax
c0015291:	8d 45 bb             	lea    eax,[ebp-0x45]
c0015294:	50                   	push   eax
c0015295:	8d 45 bc             	lea    eax,[ebp-0x44]
c0015298:	50                   	push   eax
c0015299:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001529c:	e8 89 45 00 00       	call   c001982a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c00152a1:	83 c4 10             	add    esp,0x10
c00152a4:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00152a7:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c00152aa:	83 f0 01             	xor    eax,0x1
c00152ad:	84 c0                	test   al,al
c00152af:	0f 84 2e 01 00 00    	je     c00153e3 <opcodeFault(regs*, void*)+0x52a>
c00152b5:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c00152b8:	3c 01                	cmp    al,0x1
c00152ba:	0f 85 23 01 00 00    	jne    c00153e3 <opcodeFault(regs*, void*)+0x52a>
c00152c0:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c00152c3:	83 f0 01             	xor    eax,0x1
c00152c6:	84 c0                	test   al,al
c00152c8:	0f 84 15 01 00 00    	je     c00153e3 <opcodeFault(regs*, void*)+0x52a>
c00152ce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152d1:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00152d4:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00152d7:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c00152de:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00152e1:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00152e4:	89 c2                	mov    edx,eax
c00152e6:	b8 00 00 00 00       	mov    eax,0x0
c00152eb:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00152ee:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c00152f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152f4:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c00152f7:	ba 00 00 00 00       	mov    edx,0x0
c00152fc:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c00152ff:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c0015302:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015305:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0015308:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c001530b:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c0015312:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0015315:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0015318:	89 c2                	mov    edx,eax
c001531a:	b8 00 00 00 00       	mov    eax,0x0
c001531f:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0015322:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c0015325:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015328:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001532b:	ba 00 00 00 00       	mov    edx,0x0
c0015330:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c0015333:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c0015336:	e8 83 83 00 00       	call   c001d6be <lockScheduler()>
c001533b:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001533e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0015341:	8b 00                	mov    eax,DWORD PTR [eax]
c0015343:	89 c1                	mov    ecx,eax
c0015345:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c0015348:	89 cb                	mov    ebx,ecx
c001534a:	89 d0                	mov    eax,edx
c001534c:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c001534f:	89 c6                	mov    esi,eax
c0015351:	89 f0                	mov    eax,esi
c0015353:	09 d8                	or     eax,ebx
c0015355:	85 c0                	test   eax,eax
c0015357:	75 21                	jne    c001537a <opcodeFault(regs*, void*)+0x4c1>
c0015359:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c001535c:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c001535f:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0015362:	89 01                	mov    DWORD PTR [ecx],eax
c0015364:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0015367:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001536a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001536d:	83 c8 40             	or     eax,0x40
c0015370:	89 c2                	mov    edx,eax
c0015372:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015375:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0015378:	eb 3e                	jmp    c00153b8 <opcodeFault(regs*, void*)+0x4ff>
c001537a:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001537d:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0015380:	8b 00                	mov    eax,DWORD PTR [eax]
c0015382:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0015385:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0015388:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c001538b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001538e:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0015391:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0015394:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0015397:	89 d0                	mov    eax,edx
c0015399:	31 d2                	xor    edx,edx
c001539b:	89 c3                	mov    ebx,eax
c001539d:	89 d6                	mov    esi,edx
c001539f:	89 da                	mov    edx,ebx
c00153a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153a4:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c00153a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153aa:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00153ad:	83 e0 bf             	and    eax,0xffffffbf
c00153b0:	89 c2                	mov    edx,eax
c00153b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153b5:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c00153b8:	e8 03 83 00 00       	call   c001d6c0 <unlockScheduler()>
c00153bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153c0:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00153c3:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c00153c6:	01 c2                	add    edx,eax
c00153c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153cb:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00153ce:	83 ec 0c             	sub    esp,0xc
c00153d1:	68 92 a8 02 c0       	push   0xc002a892
c00153d6:	e8 3a d7 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c00153db:	83 c4 10             	add    esp,0x10
c00153de:	e9 d5 00 00 00       	jmp    c00154b8 <opcodeFault(regs*, void*)+0x5ff>
c00153e3:	83 ec 0c             	sub    esp,0xc
c00153e6:	68 a5 a8 02 c0       	push   0xc002a8a5
c00153eb:	e8 25 d7 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c00153f0:	83 c4 10             	add    esp,0x10
c00153f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153f6:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00153f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153fc:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00153ff:	c1 e0 04             	shl    eax,0x4
c0015402:	01 d0                	add    eax,edx
c0015404:	83 c0 03             	add    eax,0x3
c0015407:	8a 00                	mov    al,BYTE PTR [eax]
c0015409:	0f b6 d8             	movzx  ebx,al
c001540c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001540f:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015412:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015415:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015418:	c1 e0 04             	shl    eax,0x4
c001541b:	01 d0                	add    eax,edx
c001541d:	83 c0 02             	add    eax,0x2
c0015420:	8a 00                	mov    al,BYTE PTR [eax]
c0015422:	0f b6 c8             	movzx  ecx,al
c0015425:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015428:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c001542b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001542e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015431:	c1 e0 04             	shl    eax,0x4
c0015434:	01 d0                	add    eax,edx
c0015436:	40                   	inc    eax
c0015437:	8a 00                	mov    al,BYTE PTR [eax]
c0015439:	0f b6 d0             	movzx  edx,al
c001543c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001543f:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c0015442:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015445:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015448:	c1 e0 04             	shl    eax,0x4
c001544b:	01 f0                	add    eax,esi
c001544d:	8a 00                	mov    al,BYTE PTR [eax]
c001544f:	0f b6 c0             	movzx  eax,al
c0015452:	83 ec 0c             	sub    esp,0xc
c0015455:	53                   	push   ebx
c0015456:	51                   	push   ecx
c0015457:	52                   	push   edx
c0015458:	50                   	push   eax
c0015459:	68 b8 a8 02 c0       	push   0xc002a8b8
c001545e:	e8 b2 d6 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c0015463:	83 c4 20             	add    esp,0x20
c0015466:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015469:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001546c:	83 c0 03             	add    eax,0x3
c001546f:	8a 00                	mov    al,BYTE PTR [eax]
c0015471:	0f b6 d8             	movzx  ebx,al
c0015474:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015477:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001547a:	83 c0 02             	add    eax,0x2
c001547d:	8a 00                	mov    al,BYTE PTR [eax]
c001547f:	0f b6 c8             	movzx  ecx,al
c0015482:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015485:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015488:	40                   	inc    eax
c0015489:	8a 00                	mov    al,BYTE PTR [eax]
c001548b:	0f b6 d0             	movzx  edx,al
c001548e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015491:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015494:	8a 00                	mov    al,BYTE PTR [eax]
c0015496:	0f b6 c0             	movzx  eax,al
c0015499:	83 ec 0c             	sub    esp,0xc
c001549c:	53                   	push   ebx
c001549d:	51                   	push   ecx
c001549e:	52                   	push   edx
c001549f:	50                   	push   eax
c00154a0:	68 e0 a8 02 c0       	push   0xc002a8e0
c00154a5:	e8 6b d6 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c00154aa:	83 c4 20             	add    esp,0x20
c00154ad:	83 ec 0c             	sub    esp,0xc
c00154b0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00154b3:	e8 d4 f4 ff ff       	call   c001498c <displayDebugInfo(regs*)>
c00154b8:	8d 65 f8             	lea    esp,[ebp-0x8]
c00154bb:	5b                   	pop    ebx
c00154bc:	5e                   	pop    esi
c00154bd:	5d                   	pop    ebp
c00154be:	c3                   	ret    

c00154bf <displayProgramFault(char const*)>:
c00154bf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00154c4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00154c7:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00154cd:	85 c0                	test   eax,eax
c00154cf:	74 15                	je     c00154e6 <displayProgramFault(char const*)+0x27>
c00154d1:	83 ec 0c             	sub    esp,0xc
c00154d4:	6a 04                	push   0x4
c00154d6:	6a 0f                	push   0xf
c00154d8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00154dc:	50                   	push   eax
c00154dd:	e8 d6 b8 ff ff       	call   c0010db8 <VgaText::puts(char const*, VgaColour, VgaColour)>
c00154e2:	83 c4 1c             	add    esp,0x1c
c00154e5:	c3                   	ret    
c00154e6:	c3                   	ret    

c00154e7 <setupInterruptController()>:
c00154e7:	55                   	push   ebp
c00154e8:	89 e5                	mov    ebp,esp
c00154ea:	53                   	push   ebx
c00154eb:	83 ec 24             	sub    esp,0x24
c00154ee:	b8 00 00 00 00       	mov    eax,0x0
c00154f3:	85 c0                	test   eax,eax
c00154f5:	0f 95 c0             	setne  al
c00154f8:	84 c0                	test   al,al
c00154fa:	74 5b                	je     c0015557 <setupInterruptController()+0x70>
c00154fc:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c0015503:	83 ec 0c             	sub    esp,0xc
c0015506:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c0015509:	e8 38 a3 ff ff       	call   c000f846 <malloc>
c001550e:	83 c4 10             	add    esp,0x10
c0015511:	89 c3                	mov    ebx,eax
c0015513:	83 ec 0c             	sub    esp,0xc
c0015516:	53                   	push   ebx
c0015517:	e8 fa fc 00 00       	call   c0025216 <APIC::APIC()>
c001551c:	83 c4 10             	add    esp,0x10
c001551f:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c0015522:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c0015525:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015528:	8b 00                	mov    eax,DWORD PTR [eax]
c001552a:	83 c0 08             	add    eax,0x8
c001552d:	8b 00                	mov    eax,DWORD PTR [eax]
c001552f:	6a 00                	push   0x0
c0015531:	6a 00                	push   0x0
c0015533:	6a 00                	push   0x0
c0015535:	52                   	push   edx
c0015536:	ff d0                	call   eax
c0015538:	83 c4 10             	add    esp,0x10
c001553b:	a1 68 db 02 c0       	mov    eax,ds:0xc002db68
c0015540:	83 ec 08             	sub    esp,0x8
c0015543:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0015546:	50                   	push   eax
c0015547:	e8 f0 e9 ff ff       	call   c0013f3c <Device::addChild(Device*)>
c001554c:	83 c4 10             	add    esp,0x10
c001554f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015552:	e9 52 03 00 00       	jmp    c00158a9 <setupInterruptController()+0x3c2>
c0015557:	a1 68 db 02 c0       	mov    eax,ds:0xc002db68
c001555c:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0015562:	83 e0 01             	and    eax,0x1
c0015565:	84 c0                	test   al,al
c0015567:	0f 95 c0             	setne  al
c001556a:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c001556d:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c0015574:	83 ec 0c             	sub    esp,0xc
c0015577:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c001557a:	e8 c7 a2 ff ff       	call   c000f846 <malloc>
c001557f:	83 c4 10             	add    esp,0x10
c0015582:	89 c3                	mov    ebx,eax
c0015584:	83 ec 0c             	sub    esp,0xc
c0015587:	53                   	push   ebx
c0015588:	e8 e1 01 01 00       	call   c002576e <PIC::PIC()>
c001558d:	83 c4 10             	add    esp,0x10
c0015590:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0015593:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015596:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015599:	8b 00                	mov    eax,DWORD PTR [eax]
c001559b:	83 c0 08             	add    eax,0x8
c001559e:	8b 00                	mov    eax,DWORD PTR [eax]
c00155a0:	6a 00                	push   0x0
c00155a2:	6a 00                	push   0x0
c00155a4:	6a 00                	push   0x0
c00155a6:	52                   	push   edx
c00155a7:	ff d0                	call   eax
c00155a9:	83 c4 10             	add    esp,0x10
c00155ac:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c00155b0:	74 73                	je     c0015625 <setupInterruptController()+0x13e>
c00155b2:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00155b5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00155b8:	8b 00                	mov    eax,DWORD PTR [eax]
c00155ba:	83 c0 0c             	add    eax,0xc
c00155bd:	8b 00                	mov    eax,DWORD PTR [eax]
c00155bf:	6a 00                	push   0x0
c00155c1:	6a 00                	push   0x0
c00155c3:	6a 00                	push   0x0
c00155c5:	52                   	push   edx
c00155c6:	ff d0                	call   eax
c00155c8:	83 c4 10             	add    esp,0x10
c00155cb:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c00155cf:	74 15                	je     c00155e6 <setupInterruptController()+0xff>
c00155d1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00155d4:	8b 00                	mov    eax,DWORD PTR [eax]
c00155d6:	83 c0 04             	add    eax,0x4
c00155d9:	8b 00                	mov    eax,DWORD PTR [eax]
c00155db:	83 ec 0c             	sub    esp,0xc
c00155de:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00155e1:	ff d0                	call   eax
c00155e3:	83 c4 10             	add    esp,0x10
c00155e6:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c00155ed:	83 ec 0c             	sub    esp,0xc
c00155f0:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c00155f3:	e8 4e a2 ff ff       	call   c000f846 <malloc>
c00155f8:	83 c4 10             	add    esp,0x10
c00155fb:	89 c3                	mov    ebx,eax
c00155fd:	83 ec 0c             	sub    esp,0xc
c0015600:	53                   	push   ebx
c0015601:	e8 10 fc 00 00       	call   c0025216 <APIC::APIC()>
c0015606:	83 c4 10             	add    esp,0x10
c0015609:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c001560c:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001560f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015612:	8b 00                	mov    eax,DWORD PTR [eax]
c0015614:	83 c0 08             	add    eax,0x8
c0015617:	8b 00                	mov    eax,DWORD PTR [eax]
c0015619:	6a 00                	push   0x0
c001561b:	6a 00                	push   0x0
c001561d:	6a 00                	push   0x0
c001561f:	52                   	push   edx
c0015620:	ff d0                	call   eax
c0015622:	83 c4 10             	add    esp,0x10
c0015625:	a1 68 db 02 c0       	mov    eax,ds:0xc002db68
c001562a:	83 ec 08             	sub    esp,0x8
c001562d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015630:	50                   	push   eax
c0015631:	e8 06 e9 ff ff       	call   c0013f3c <Device::addChild(Device*)>
c0015636:	83 c4 10             	add    esp,0x10
c0015639:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001563c:	8b 00                	mov    eax,DWORD PTR [eax]
c001563e:	83 c0 24             	add    eax,0x24
c0015641:	8b 00                	mov    eax,DWORD PTR [eax]
c0015643:	6a 00                	push   0x0
c0015645:	68 9a 4e 01 c0       	push   0xc0014e9a
c001564a:	6a 00                	push   0x0
c001564c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001564f:	ff d0                	call   eax
c0015651:	83 c4 10             	add    esp,0x10
c0015654:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015657:	8b 00                	mov    eax,DWORD PTR [eax]
c0015659:	83 c0 24             	add    eax,0x24
c001565c:	8b 00                	mov    eax,DWORD PTR [eax]
c001565e:	6a 00                	push   0x0
c0015660:	68 9a 4e 01 c0       	push   0xc0014e9a
c0015665:	6a 01                	push   0x1
c0015667:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001566a:	ff d0                	call   eax
c001566c:	83 c4 10             	add    esp,0x10
c001566f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015672:	8b 00                	mov    eax,DWORD PTR [eax]
c0015674:	83 c0 24             	add    eax,0x24
c0015677:	8b 00                	mov    eax,DWORD PTR [eax]
c0015679:	6a 00                	push   0x0
c001567b:	68 e9 47 01 c0       	push   0xc00147e9
c0015680:	6a 02                	push   0x2
c0015682:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015685:	ff d0                	call   eax
c0015687:	83 c4 10             	add    esp,0x10
c001568a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001568d:	8b 00                	mov    eax,DWORD PTR [eax]
c001568f:	83 c0 24             	add    eax,0x24
c0015692:	8b 00                	mov    eax,DWORD PTR [eax]
c0015694:	6a 00                	push   0x0
c0015696:	68 9a 4e 01 c0       	push   0xc0014e9a
c001569b:	6a 03                	push   0x3
c001569d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00156a0:	ff d0                	call   eax
c00156a2:	83 c4 10             	add    esp,0x10
c00156a5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00156a8:	8b 00                	mov    eax,DWORD PTR [eax]
c00156aa:	83 c0 24             	add    eax,0x24
c00156ad:	8b 00                	mov    eax,DWORD PTR [eax]
c00156af:	6a 00                	push   0x0
c00156b1:	68 9a 4e 01 c0       	push   0xc0014e9a
c00156b6:	6a 04                	push   0x4
c00156b8:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00156bb:	ff d0                	call   eax
c00156bd:	83 c4 10             	add    esp,0x10
c00156c0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00156c3:	8b 00                	mov    eax,DWORD PTR [eax]
c00156c5:	83 c0 24             	add    eax,0x24
c00156c8:	8b 00                	mov    eax,DWORD PTR [eax]
c00156ca:	6a 00                	push   0x0
c00156cc:	68 9a 4e 01 c0       	push   0xc0014e9a
c00156d1:	6a 05                	push   0x5
c00156d3:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00156d6:	ff d0                	call   eax
c00156d8:	83 c4 10             	add    esp,0x10
c00156db:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00156de:	8b 00                	mov    eax,DWORD PTR [eax]
c00156e0:	83 c0 24             	add    eax,0x24
c00156e3:	8b 00                	mov    eax,DWORD PTR [eax]
c00156e5:	6a 00                	push   0x0
c00156e7:	68 b9 4e 01 c0       	push   0xc0014eb9
c00156ec:	6a 06                	push   0x6
c00156ee:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00156f1:	ff d0                	call   eax
c00156f3:	83 c4 10             	add    esp,0x10
c00156f6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00156f9:	8b 00                	mov    eax,DWORD PTR [eax]
c00156fb:	83 c0 24             	add    eax,0x24
c00156fe:	8b 00                	mov    eax,DWORD PTR [eax]
c0015700:	6a 00                	push   0x0
c0015702:	68 1b 4e 01 c0       	push   0xc0014e1b
c0015707:	6a 07                	push   0x7
c0015709:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001570c:	ff d0                	call   eax
c001570e:	83 c4 10             	add    esp,0x10
c0015711:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015714:	8b 00                	mov    eax,DWORD PTR [eax]
c0015716:	83 c0 24             	add    eax,0x24
c0015719:	8b 00                	mov    eax,DWORD PTR [eax]
c001571b:	6a 00                	push   0x0
c001571d:	68 04 46 01 c0       	push   0xc0014604
c0015722:	6a 08                	push   0x8
c0015724:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015727:	ff d0                	call   eax
c0015729:	83 c4 10             	add    esp,0x10
c001572c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001572f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015731:	83 c0 24             	add    eax,0x24
c0015734:	8b 00                	mov    eax,DWORD PTR [eax]
c0015736:	6a 00                	push   0x0
c0015738:	68 9a 4e 01 c0       	push   0xc0014e9a
c001573d:	6a 09                	push   0x9
c001573f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015742:	ff d0                	call   eax
c0015744:	83 c4 10             	add    esp,0x10
c0015747:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001574a:	8b 00                	mov    eax,DWORD PTR [eax]
c001574c:	83 c0 24             	add    eax,0x24
c001574f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015751:	6a 00                	push   0x0
c0015753:	68 9a 4e 01 c0       	push   0xc0014e9a
c0015758:	6a 0a                	push   0xa
c001575a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001575d:	ff d0                	call   eax
c001575f:	83 c4 10             	add    esp,0x10
c0015762:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015765:	8b 00                	mov    eax,DWORD PTR [eax]
c0015767:	83 c0 24             	add    eax,0x24
c001576a:	8b 00                	mov    eax,DWORD PTR [eax]
c001576c:	6a 00                	push   0x0
c001576e:	68 9a 4e 01 c0       	push   0xc0014e9a
c0015773:	6a 0b                	push   0xb
c0015775:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015778:	ff d0                	call   eax
c001577a:	83 c4 10             	add    esp,0x10
c001577d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015780:	8b 00                	mov    eax,DWORD PTR [eax]
c0015782:	83 c0 24             	add    eax,0x24
c0015785:	8b 00                	mov    eax,DWORD PTR [eax]
c0015787:	6a 00                	push   0x0
c0015789:	68 9a 4e 01 c0       	push   0xc0014e9a
c001578e:	6a 0c                	push   0xc
c0015790:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015793:	ff d0                	call   eax
c0015795:	83 c4 10             	add    esp,0x10
c0015798:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001579b:	8b 00                	mov    eax,DWORD PTR [eax]
c001579d:	83 c0 24             	add    eax,0x24
c00157a0:	8b 00                	mov    eax,DWORD PTR [eax]
c00157a2:	6a 00                	push   0x0
c00157a4:	68 4a 4e 01 c0       	push   0xc0014e4a
c00157a9:	6a 0d                	push   0xd
c00157ab:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00157ae:	ff d0                	call   eax
c00157b0:	83 c4 10             	add    esp,0x10
c00157b3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00157b6:	8b 00                	mov    eax,DWORD PTR [eax]
c00157b8:	83 c0 24             	add    eax,0x24
c00157bb:	8b 00                	mov    eax,DWORD PTR [eax]
c00157bd:	6a 00                	push   0x0
c00157bf:	68 83 4e 01 c0       	push   0xc0014e83
c00157c4:	6a 0e                	push   0xe
c00157c6:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00157c9:	ff d0                	call   eax
c00157cb:	83 c4 10             	add    esp,0x10
c00157ce:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00157d1:	8b 00                	mov    eax,DWORD PTR [eax]
c00157d3:	83 c0 24             	add    eax,0x24
c00157d6:	8b 00                	mov    eax,DWORD PTR [eax]
c00157d8:	6a 00                	push   0x0
c00157da:	68 9a 4e 01 c0       	push   0xc0014e9a
c00157df:	6a 0f                	push   0xf
c00157e1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00157e4:	ff d0                	call   eax
c00157e6:	83 c4 10             	add    esp,0x10
c00157e9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00157ec:	8b 00                	mov    eax,DWORD PTR [eax]
c00157ee:	83 c0 24             	add    eax,0x24
c00157f1:	8b 00                	mov    eax,DWORD PTR [eax]
c00157f3:	6a 00                	push   0x0
c00157f5:	68 9a 4e 01 c0       	push   0xc0014e9a
c00157fa:	6a 10                	push   0x10
c00157fc:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00157ff:	ff d0                	call   eax
c0015801:	83 c4 10             	add    esp,0x10
c0015804:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015807:	8b 00                	mov    eax,DWORD PTR [eax]
c0015809:	83 c0 24             	add    eax,0x24
c001580c:	8b 00                	mov    eax,DWORD PTR [eax]
c001580e:	6a 00                	push   0x0
c0015810:	68 9a 4e 01 c0       	push   0xc0014e9a
c0015815:	6a 11                	push   0x11
c0015817:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001581a:	ff d0                	call   eax
c001581c:	83 c4 10             	add    esp,0x10
c001581f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015822:	8b 00                	mov    eax,DWORD PTR [eax]
c0015824:	83 c0 24             	add    eax,0x24
c0015827:	8b 00                	mov    eax,DWORD PTR [eax]
c0015829:	6a 00                	push   0x0
c001582b:	68 9a 4e 01 c0       	push   0xc0014e9a
c0015830:	6a 12                	push   0x12
c0015832:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015835:	ff d0                	call   eax
c0015837:	83 c4 10             	add    esp,0x10
c001583a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001583d:	8b 00                	mov    eax,DWORD PTR [eax]
c001583f:	83 c0 24             	add    eax,0x24
c0015842:	8b 00                	mov    eax,DWORD PTR [eax]
c0015844:	6a 00                	push   0x0
c0015846:	68 9a 4e 01 c0       	push   0xc0014e9a
c001584b:	6a 13                	push   0x13
c001584d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015850:	ff d0                	call   eax
c0015852:	83 c4 10             	add    esp,0x10
c0015855:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015858:	8b 00                	mov    eax,DWORD PTR [eax]
c001585a:	83 c0 24             	add    eax,0x24
c001585d:	8b 00                	mov    eax,DWORD PTR [eax]
c001585f:	6a 00                	push   0x0
c0015861:	68 9a 4e 01 c0       	push   0xc0014e9a
c0015866:	6a 14                	push   0x14
c0015868:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001586b:	ff d0                	call   eax
c001586d:	83 c4 10             	add    esp,0x10
c0015870:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015873:	8b 00                	mov    eax,DWORD PTR [eax]
c0015875:	83 c0 24             	add    eax,0x24
c0015878:	8b 00                	mov    eax,DWORD PTR [eax]
c001587a:	6a 00                	push   0x0
c001587c:	68 9a 4e 01 c0       	push   0xc0014e9a
c0015881:	6a 1e                	push   0x1e
c0015883:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015886:	ff d0                	call   eax
c0015888:	83 c4 10             	add    esp,0x10
c001588b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001588e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015890:	83 c0 24             	add    eax,0x24
c0015893:	8b 00                	mov    eax,DWORD PTR [eax]
c0015895:	6a 00                	push   0x0
c0015897:	68 83 c0 01 c0       	push   0xc001c083
c001589c:	6a 60                	push   0x60
c001589e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00158a1:	ff d0                	call   eax
c00158a3:	83 c4 10             	add    esp,0x10
c00158a6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00158a9:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00158ac:	c9                   	leave  
c00158ad:	c3                   	ret    

c00158ae <InterruptController::convertLegacyIRQNumber(int)>:
c00158ae:	55                   	push   ebp
c00158af:	89 e5                	mov    ebp,esp
c00158b1:	83 ec 08             	sub    esp,0x8
c00158b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158b7:	83 ec 0c             	sub    esp,0xc
c00158ba:	50                   	push   eax
c00158bb:	e8 68 e9 ff ff       	call   c0014228 <Device::getName()>
c00158c0:	83 c4 10             	add    esp,0x10
c00158c3:	8a 00                	mov    al,BYTE PTR [eax]
c00158c5:	3c 41                	cmp    al,0x41
c00158c7:	0f 94 c0             	sete   al
c00158ca:	84 c0                	test   al,al
c00158cc:	74 28                	je     c00158f6 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c00158ce:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c00158d2:	7f 12                	jg     c00158e6 <InterruptController::convertLegacyIRQNumber(int)+0x38>
c00158d4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00158d7:	05 c0 cd 02 c0       	add    eax,0xc002cdc0
c00158dc:	8a 00                	mov    al,BYTE PTR [eax]
c00158de:	0f b6 c0             	movzx  eax,al
c00158e1:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c00158e4:	eb 10                	jmp    c00158f6 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c00158e6:	83 ec 0c             	sub    esp,0xc
c00158e9:	68 00 a6 02 c0       	push   0xc002a600
c00158ee:	e8 3c 47 00 00       	call   c001a02f <Krnl::panic(char const*)>
c00158f3:	83 c4 10             	add    esp,0x10
c00158f6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00158f9:	c9                   	leave  
c00158fa:	c3                   	ret    
c00158fb:	90                   	nop

c00158fc <startGUI(void*)>:
c00158fc:	55                   	push   ebp
c00158fd:	89 e5                	mov    ebp,esp
c00158ff:	53                   	push   ebx
c0015900:	83 ec 04             	sub    esp,0x4
c0015903:	e8 b8 7d 00 00       	call   c001d6c0 <unlockScheduler()>
c0015908:	8b 1d 68 db 02 c0    	mov    ebx,DWORD PTR ds:0xc002db68
c001590e:	83 ec 08             	sub    esp,0x8
c0015911:	6a 01                	push   0x1
c0015913:	68 50 a9 02 c0       	push   0xc002a950
c0015918:	e8 fa 76 00 00       	call   c001d017 <Thr::loadDLL(char const*, bool)>
c001591d:	83 c4 10             	add    esp,0x10
c0015920:	83 ec 08             	sub    esp,0x8
c0015923:	53                   	push   ebx
c0015924:	50                   	push   eax
c0015925:	e8 21 79 00 00       	call   c001d24b <Thr::executeDLL(unsigned long, void*)>
c001592a:	83 c4 10             	add    esp,0x10
c001592d:	8b 1d 68 db 02 c0    	mov    ebx,DWORD PTR ds:0xc002db68
c0015933:	83 ec 08             	sub    esp,0x8
c0015936:	6a 01                	push   0x1
c0015938:	68 6a a9 02 c0       	push   0xc002a96a
c001593d:	e8 d5 76 00 00       	call   c001d017 <Thr::loadDLL(char const*, bool)>
c0015942:	83 c4 10             	add    esp,0x10
c0015945:	83 ec 08             	sub    esp,0x8
c0015948:	53                   	push   ebx
c0015949:	50                   	push   eax
c001594a:	e8 fc 78 00 00       	call   c001d24b <Thr::executeDLL(unsigned long, void*)>
c001594f:	83 c4 10             	add    esp,0x10
c0015952:	90                   	nop
c0015953:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015956:	c9                   	leave  
c0015957:	c3                   	ret    

c0015958 <startGUIVESA(void*)>:
c0015958:	55                   	push   ebp
c0015959:	89 e5                	mov    ebp,esp
c001595b:	53                   	push   ebx
c001595c:	83 ec 04             	sub    esp,0x4
c001595f:	e8 5c 7d 00 00       	call   c001d6c0 <unlockScheduler()>
c0015964:	8b 1d 68 db 02 c0    	mov    ebx,DWORD PTR ds:0xc002db68
c001596a:	83 ec 08             	sub    esp,0x8
c001596d:	6a 01                	push   0x1
c001596f:	68 84 a9 02 c0       	push   0xc002a984
c0015974:	e8 9e 76 00 00       	call   c001d017 <Thr::loadDLL(char const*, bool)>
c0015979:	83 c4 10             	add    esp,0x10
c001597c:	83 ec 08             	sub    esp,0x8
c001597f:	53                   	push   ebx
c0015980:	50                   	push   eax
c0015981:	e8 c5 78 00 00       	call   c001d24b <Thr::executeDLL(unsigned long, void*)>
c0015986:	83 c4 10             	add    esp,0x10
c0015989:	8b 1d 68 db 02 c0    	mov    ebx,DWORD PTR ds:0xc002db68
c001598f:	83 ec 08             	sub    esp,0x8
c0015992:	6a 01                	push   0x1
c0015994:	68 6a a9 02 c0       	push   0xc002a96a
c0015999:	e8 79 76 00 00       	call   c001d017 <Thr::loadDLL(char const*, bool)>
c001599e:	83 c4 10             	add    esp,0x10
c00159a1:	83 ec 08             	sub    esp,0x8
c00159a4:	53                   	push   ebx
c00159a5:	50                   	push   eax
c00159a6:	e8 a0 78 00 00       	call   c001d24b <Thr::executeDLL(unsigned long, void*)>
c00159ab:	83 c4 10             	add    esp,0x10
c00159ae:	90                   	nop
c00159af:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00159b2:	c9                   	leave  
c00159b3:	c3                   	ret    

c00159b4 <sendKeyToTerminal(unsigned char)>:
c00159b4:	55                   	push   ebp
c00159b5:	89 e5                	mov    ebp,esp
c00159b7:	83 ec 28             	sub    esp,0x28
c00159ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159bd:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c00159c0:	a1 44 dc 02 c0       	mov    eax,ds:0xc002dc44
c00159c5:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c00159c9:	83 ec 08             	sub    esp,0x8
c00159cc:	52                   	push   edx
c00159cd:	50                   	push   eax
c00159ce:	e8 21 b9 ff ff       	call   c00112f4 <VgaText::receiveKey(unsigned char)>
c00159d3:	83 c4 10             	add    esp,0x10
c00159d6:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c00159da:	75 41                	jne    c0015a1d <sendKeyToTerminal(unsigned char)+0x69>
c00159dc:	e8 04 7d 00 00       	call   c001d6e5 <lockStuff()>
c00159e1:	a1 20 dd 02 c0       	mov    eax,ds:0xc002dd20
c00159e6:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00159e9:	c7 05 20 dd 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002dd20,0x0
c00159f3:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c00159f7:	74 1f                	je     c0015a18 <sendKeyToTerminal(unsigned char)+0x64>
c00159f9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00159fc:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00159ff:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015a02:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015a05:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015a08:	83 ec 0c             	sub    esp,0xc
c0015a0b:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0015a0e:	e8 c3 82 00 00       	call   c001dcd6 <unblockTask(ThreadControlBlock*)>
c0015a13:	83 c4 10             	add    esp,0x10
c0015a16:	eb db                	jmp    c00159f3 <sendKeyToTerminal(unsigned char)+0x3f>
c0015a18:	e8 62 80 00 00       	call   c001da7f <unlockStuff()>
c0015a1d:	90                   	nop
c0015a1e:	c9                   	leave  
c0015a1f:	c3                   	ret    

c0015a20 <sendKeyboardToken(KeyboardToken)>:
c0015a20:	55                   	push   ebp
c0015a21:	89 e5                	mov    ebp,esp
c0015a23:	83 ec 18             	sub    esp,0x18
c0015a26:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c0015a29:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a2c:	0f b7 c0             	movzx  eax,ax
c0015a2f:	83 f2 01             	xor    edx,0x1
c0015a32:	88 90 40 dd 02 c0    	mov    BYTE PTR [eax-0x3ffd22c0],dl
c0015a38:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a3b:	66 3d 03 02          	cmp    ax,0x203
c0015a3f:	75 07                	jne    c0015a48 <sendKeyboardToken(KeyboardToken)+0x28>
c0015a41:	a0 40 de 02 c0       	mov    al,ds:0xc002de40
c0015a46:	84 c0                	test   al,al
c0015a48:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0015a4c:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c0015a4f:	a0 48 e1 02 c0       	mov    al,ds:0xc002e148
c0015a54:	38 c2                	cmp    dl,al
c0015a56:	74 1c                	je     c0015a74 <sendKeyboardToken(KeyboardToken)+0x54>
c0015a58:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0015a5b:	a2 48 e1 02 c0       	mov    ds:0xc002e148,al
c0015a60:	a0 48 e1 02 c0       	mov    al,ds:0xc002e148
c0015a65:	0f b6 c0             	movzx  eax,al
c0015a68:	83 ec 0c             	sub    esp,0xc
c0015a6b:	50                   	push   eax
c0015a6c:	e8 e3 aa ff ff       	call   c0010554 <setTerminalScrollLock(bool)>
c0015a71:	83 c4 10             	add    esp,0x10
c0015a74:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c0015a77:	84 c0                	test   al,al
c0015a79:	0f 84 ae 00 00 00    	je     c0015b2d <sendKeyboardToken(KeyboardToken)+0x10d>
c0015a7f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a82:	66 3d 10 03          	cmp    ax,0x310
c0015a86:	75 06                	jne    c0015a8e <sendKeyboardToken(KeyboardToken)+0x6e>
c0015a88:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c0015a8e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a91:	66 3d 11 03          	cmp    ax,0x311
c0015a95:	75 06                	jne    c0015a9d <sendKeyboardToken(KeyboardToken)+0x7d>
c0015a97:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c0015a9d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015aa0:	66 3d 12 03          	cmp    ax,0x312
c0015aa4:	75 06                	jne    c0015aac <sendKeyboardToken(KeyboardToken)+0x8c>
c0015aa6:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c0015aac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015aaf:	66 3d 13 03          	cmp    ax,0x313
c0015ab3:	75 06                	jne    c0015abb <sendKeyboardToken(KeyboardToken)+0x9b>
c0015ab5:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c0015abb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015abe:	66 3d 14 03          	cmp    ax,0x314
c0015ac2:	75 06                	jne    c0015aca <sendKeyboardToken(KeyboardToken)+0xaa>
c0015ac4:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c0015aca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015acd:	66 3d 15 03          	cmp    ax,0x315
c0015ad1:	75 06                	jne    c0015ad9 <sendKeyboardToken(KeyboardToken)+0xb9>
c0015ad3:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0015ad9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015adc:	66 3d 16 03          	cmp    ax,0x316
c0015ae0:	75 06                	jne    c0015ae8 <sendKeyboardToken(KeyboardToken)+0xc8>
c0015ae2:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c0015ae8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015aeb:	66 3d 17 03          	cmp    ax,0x317
c0015aef:	75 06                	jne    c0015af7 <sendKeyboardToken(KeyboardToken)+0xd7>
c0015af1:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c0015af7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015afa:	66 3d 18 03          	cmp    ax,0x318
c0015afe:	75 06                	jne    c0015b06 <sendKeyboardToken(KeyboardToken)+0xe6>
c0015b00:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c0015b06:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b09:	66 3d 19 03          	cmp    ax,0x319
c0015b0d:	75 06                	jne    c0015b15 <sendKeyboardToken(KeyboardToken)+0xf5>
c0015b0f:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c0015b15:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b18:	66 3d 1a 03          	cmp    ax,0x31a
c0015b1c:	0f 85 c9 00 00 00    	jne    c0015beb <sendKeyboardToken(KeyboardToken)+0x1cb>
c0015b22:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c0015b28:	e9 be 00 00 00       	jmp    c0015beb <sendKeyboardToken(KeyboardToken)+0x1cb>
c0015b2d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b30:	66 3d 10 03          	cmp    ax,0x310
c0015b34:	75 0a                	jne    c0015b40 <sendKeyboardToken(KeyboardToken)+0x120>
c0015b36:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c0015b3c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015b40:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b43:	66 3d 11 03          	cmp    ax,0x311
c0015b47:	75 0a                	jne    c0015b53 <sendKeyboardToken(KeyboardToken)+0x133>
c0015b49:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c0015b4f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015b53:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b56:	66 3d 12 03          	cmp    ax,0x312
c0015b5a:	75 0a                	jne    c0015b66 <sendKeyboardToken(KeyboardToken)+0x146>
c0015b5c:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c0015b62:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015b66:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b69:	66 3d 13 03          	cmp    ax,0x313
c0015b6d:	75 0a                	jne    c0015b79 <sendKeyboardToken(KeyboardToken)+0x159>
c0015b6f:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c0015b75:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015b79:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b7c:	66 3d 14 03          	cmp    ax,0x314
c0015b80:	75 0a                	jne    c0015b8c <sendKeyboardToken(KeyboardToken)+0x16c>
c0015b82:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c0015b88:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015b8c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b8f:	66 3d 15 03          	cmp    ax,0x315
c0015b93:	75 0a                	jne    c0015b9f <sendKeyboardToken(KeyboardToken)+0x17f>
c0015b95:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0015b9b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015b9f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ba2:	66 3d 16 03          	cmp    ax,0x316
c0015ba6:	75 0a                	jne    c0015bb2 <sendKeyboardToken(KeyboardToken)+0x192>
c0015ba8:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c0015bae:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015bb2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015bb5:	66 3d 17 03          	cmp    ax,0x317
c0015bb9:	75 0a                	jne    c0015bc5 <sendKeyboardToken(KeyboardToken)+0x1a5>
c0015bbb:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c0015bc1:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015bc5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015bc8:	66 3d 18 03          	cmp    ax,0x318
c0015bcc:	75 0a                	jne    c0015bd8 <sendKeyboardToken(KeyboardToken)+0x1b8>
c0015bce:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c0015bd4:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015bd8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015bdb:	66 3d 19 03          	cmp    ax,0x319
c0015bdf:	75 0a                	jne    c0015beb <sendKeyboardToken(KeyboardToken)+0x1cb>
c0015be1:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c0015be7:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015beb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015bee:	66 3d 00 02          	cmp    ax,0x200
c0015bf2:	75 2c                	jne    c0015c20 <sendKeyboardToken(KeyboardToken)+0x200>
c0015bf4:	a0 40 e1 02 c0       	mov    al,ds:0xc002e140
c0015bf9:	83 f0 01             	xor    eax,0x1
c0015bfc:	84 c0                	test   al,al
c0015bfe:	74 20                	je     c0015c20 <sendKeyboardToken(KeyboardToken)+0x200>
c0015c00:	a1 d4 10 03 c0       	mov    eax,ds:0xc00310d4
c0015c05:	6a 01                	push   0x1
c0015c07:	6a 00                	push   0x0
c0015c09:	68 fc 58 01 c0       	push   0xc00158fc
c0015c0e:	50                   	push   eax
c0015c0f:	e8 dc 7b 00 00       	call   c001d7f0 <Process::createThread(void (*)(void*), void*, int)>
c0015c14:	83 c4 10             	add    esp,0x10
c0015c17:	c6 05 40 e1 02 c0 01 	mov    BYTE PTR ds:0xc002e140,0x1
c0015c1e:	eb 33                	jmp    c0015c53 <sendKeyboardToken(KeyboardToken)+0x233>
c0015c20:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c23:	66 3d 01 02          	cmp    ax,0x201
c0015c27:	75 2a                	jne    c0015c53 <sendKeyboardToken(KeyboardToken)+0x233>
c0015c29:	a0 40 e1 02 c0       	mov    al,ds:0xc002e140
c0015c2e:	83 f0 01             	xor    eax,0x1
c0015c31:	84 c0                	test   al,al
c0015c33:	74 1e                	je     c0015c53 <sendKeyboardToken(KeyboardToken)+0x233>
c0015c35:	a1 d4 10 03 c0       	mov    eax,ds:0xc00310d4
c0015c3a:	6a 01                	push   0x1
c0015c3c:	6a 00                	push   0x0
c0015c3e:	68 58 59 01 c0       	push   0xc0015958
c0015c43:	50                   	push   eax
c0015c44:	e8 a7 7b 00 00       	call   c001d7f0 <Process::createThread(void (*)(void*), void*, int)>
c0015c49:	83 c4 10             	add    esp,0x10
c0015c4c:	c6 05 40 e1 02 c0 01 	mov    BYTE PTR ds:0xc002e140,0x1
c0015c53:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c56:	66 3d 1d 03          	cmp    ax,0x31d
c0015c5a:	75 06                	jne    c0015c62 <sendKeyboardToken(KeyboardToken)+0x242>
c0015c5c:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c0015c62:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c65:	66 3d 1c 03          	cmp    ax,0x31c
c0015c69:	75 06                	jne    c0015c71 <sendKeyboardToken(KeyboardToken)+0x251>
c0015c6b:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c0015c71:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c74:	66 3d 1b 03          	cmp    ax,0x31b
c0015c78:	75 06                	jne    c0015c80 <sendKeyboardToken(KeyboardToken)+0x260>
c0015c7a:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c0015c80:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c83:	66 3d 1e 03          	cmp    ax,0x31e
c0015c87:	75 06                	jne    c0015c8f <sendKeyboardToken(KeyboardToken)+0x26f>
c0015c89:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c0015c8f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c92:	66 3d 1f 03          	cmp    ax,0x31f
c0015c96:	75 06                	jne    c0015c9e <sendKeyboardToken(KeyboardToken)+0x27e>
c0015c98:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c0015c9e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ca1:	66 3d 1a 03          	cmp    ax,0x31a
c0015ca5:	75 06                	jne    c0015cad <sendKeyboardToken(KeyboardToken)+0x28d>
c0015ca7:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c0015cad:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c0015cb1:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015cb4:	83 f0 01             	xor    eax,0x1
c0015cb7:	84 c0                	test   al,al
c0015cb9:	74 77                	je     c0015d32 <sendKeyboardToken(KeyboardToken)+0x312>
c0015cbb:	a0 41 de 02 c0       	mov    al,ds:0xc002de41
c0015cc0:	84 c0                	test   al,al
c0015cc2:	74 41                	je     c0015d05 <sendKeyboardToken(KeyboardToken)+0x2e5>
c0015cc4:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015cc8:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c0015ccc:	74 2b                	je     c0015cf9 <sendKeyboardToken(KeyboardToken)+0x2d9>
c0015cce:	8b 15 44 e1 02 c0    	mov    edx,DWORD PTR ds:0xc002e144
c0015cd4:	89 d0                	mov    eax,edx
c0015cd6:	c1 e0 02             	shl    eax,0x2
c0015cd9:	01 d0                	add    eax,edx
c0015cdb:	01 c0                	add    eax,eax
c0015cdd:	a3 44 e1 02 c0       	mov    ds:0xc002e144,eax
c0015ce2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ce5:	0f b7 c0             	movzx  eax,ax
c0015ce8:	8d 50 d0             	lea    edx,[eax-0x30]
c0015ceb:	a1 44 e1 02 c0       	mov    eax,ds:0xc002e144
c0015cf0:	01 d0                	add    eax,edx
c0015cf2:	a3 44 e1 02 c0       	mov    ds:0xc002e144,eax
c0015cf7:	eb 6d                	jmp    c0015d66 <sendKeyboardToken(KeyboardToken)+0x346>
c0015cf9:	c7 05 44 e1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e144,0x0
c0015d03:	eb 61                	jmp    c0015d66 <sendKeyboardToken(KeyboardToken)+0x346>
c0015d05:	a1 44 e1 02 c0       	mov    eax,ds:0xc002e144
c0015d0a:	85 c0                	test   eax,eax
c0015d0c:	74 18                	je     c0015d26 <sendKeyboardToken(KeyboardToken)+0x306>
c0015d0e:	a1 44 e1 02 c0       	mov    eax,ds:0xc002e144
c0015d13:	0f b6 c0             	movzx  eax,al
c0015d16:	83 ec 0c             	sub    esp,0xc
c0015d19:	50                   	push   eax
c0015d1a:	e8 95 fc ff ff       	call   c00159b4 <sendKeyToTerminal(unsigned char)>
c0015d1f:	83 c4 10             	add    esp,0x10
c0015d22:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015d26:	c7 05 44 e1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e144,0x0
c0015d30:	eb 34                	jmp    c0015d66 <sendKeyboardToken(KeyboardToken)+0x346>
c0015d32:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d35:	66 3d 01 01          	cmp    ax,0x101
c0015d39:	75 2b                	jne    c0015d66 <sendKeyboardToken(KeyboardToken)+0x346>
c0015d3b:	a1 44 e1 02 c0       	mov    eax,ds:0xc002e144
c0015d40:	85 c0                	test   eax,eax
c0015d42:	74 18                	je     c0015d5c <sendKeyboardToken(KeyboardToken)+0x33c>
c0015d44:	a1 44 e1 02 c0       	mov    eax,ds:0xc002e144
c0015d49:	0f b6 c0             	movzx  eax,al
c0015d4c:	83 ec 0c             	sub    esp,0xc
c0015d4f:	50                   	push   eax
c0015d50:	e8 5f fc ff ff       	call   c00159b4 <sendKeyToTerminal(unsigned char)>
c0015d55:	83 c4 10             	add    esp,0x10
c0015d58:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015d5c:	c7 05 44 e1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e144,0x0
c0015d66:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0015d69:	83 f0 01             	xor    eax,0x1
c0015d6c:	84 c0                	test   al,al
c0015d6e:	74 4c                	je     c0015dbc <sendKeyboardToken(KeyboardToken)+0x39c>
c0015d70:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015d73:	83 f0 01             	xor    eax,0x1
c0015d76:	84 c0                	test   al,al
c0015d78:	74 42                	je     c0015dbc <sendKeyboardToken(KeyboardToken)+0x39c>
c0015d7a:	a0 40 de 02 c0       	mov    al,ds:0xc002de40
c0015d7f:	83 f0 01             	xor    eax,0x1
c0015d82:	84 c0                	test   al,al
c0015d84:	74 36                	je     c0015dbc <sendKeyboardToken(KeyboardToken)+0x39c>
c0015d86:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d89:	66 83 f8 1f          	cmp    ax,0x1f
c0015d8d:	76 09                	jbe    c0015d98 <sendKeyboardToken(KeyboardToken)+0x378>
c0015d8f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d92:	66 83 f8 7e          	cmp    ax,0x7e
c0015d96:	76 12                	jbe    c0015daa <sendKeyboardToken(KeyboardToken)+0x38a>
c0015d98:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d9b:	66 83 f8 0a          	cmp    ax,0xa
c0015d9f:	74 09                	je     c0015daa <sendKeyboardToken(KeyboardToken)+0x38a>
c0015da1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015da4:	66 83 f8 08          	cmp    ax,0x8
c0015da8:	75 12                	jne    c0015dbc <sendKeyboardToken(KeyboardToken)+0x39c>
c0015daa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015dad:	0f b6 c0             	movzx  eax,al
c0015db0:	83 ec 0c             	sub    esp,0xc
c0015db3:	50                   	push   eax
c0015db4:	e8 fb fb ff ff       	call   c00159b4 <sendKeyToTerminal(unsigned char)>
c0015db9:	83 c4 10             	add    esp,0x10
c0015dbc:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0015dbf:	83 f0 01             	xor    eax,0x1
c0015dc2:	84 c0                	test   al,al
c0015dc4:	74 4f                	je     c0015e15 <sendKeyboardToken(KeyboardToken)+0x3f5>
c0015dc6:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015dc9:	83 f0 01             	xor    eax,0x1
c0015dcc:	84 c0                	test   al,al
c0015dce:	74 45                	je     c0015e15 <sendKeyboardToken(KeyboardToken)+0x3f5>
c0015dd0:	a0 40 de 02 c0       	mov    al,ds:0xc002de40
c0015dd5:	84 c0                	test   al,al
c0015dd7:	74 3c                	je     c0015e15 <sendKeyboardToken(KeyboardToken)+0x3f5>
c0015dd9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ddc:	66 83 f8 3f          	cmp    ax,0x3f
c0015de0:	76 33                	jbe    c0015e15 <sendKeyboardToken(KeyboardToken)+0x3f5>
c0015de2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015de5:	66 83 f8 7f          	cmp    ax,0x7f
c0015de9:	77 2a                	ja     c0015e15 <sendKeyboardToken(KeyboardToken)+0x3f5>
c0015deb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015dee:	88 c2                	mov    dl,al
c0015df0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015df3:	66 83 f8 5f          	cmp    ax,0x5f
c0015df7:	76 04                	jbe    c0015dfd <sendKeyboardToken(KeyboardToken)+0x3dd>
c0015df9:	b0 20                	mov    al,0x20
c0015dfb:	eb 02                	jmp    c0015dff <sendKeyboardToken(KeyboardToken)+0x3df>
c0015dfd:	b0 00                	mov    al,0x0
c0015dff:	29 c2                	sub    edx,eax
c0015e01:	88 d0                	mov    al,dl
c0015e03:	83 e8 40             	sub    eax,0x40
c0015e06:	0f b6 c0             	movzx  eax,al
c0015e09:	83 ec 0c             	sub    esp,0xc
c0015e0c:	50                   	push   eax
c0015e0d:	e8 a2 fb ff ff       	call   c00159b4 <sendKeyToTerminal(unsigned char)>
c0015e12:	83 c4 10             	add    esp,0x10
c0015e15:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e18:	66 3d 00 03          	cmp    ax,0x300
c0015e1c:	75 0f                	jne    c0015e2d <sendKeyboardToken(KeyboardToken)+0x40d>
c0015e1e:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015e21:	83 f0 01             	xor    eax,0x1
c0015e24:	84 c0                	test   al,al
c0015e26:	74 05                	je     c0015e2d <sendKeyboardToken(KeyboardToken)+0x40d>
c0015e28:	e8 5c af ff ff       	call   c0010d89 <doTerminalCycle()>
c0015e2d:	90                   	nop
c0015e2e:	c9                   	leave  
c0015e2f:	c3                   	ret    

c0015e30 <clearInternalKeybuffer(VgaText*)>:
c0015e30:	55                   	push   ebp
c0015e31:	89 e5                	mov    ebp,esp
c0015e33:	83 ec 08             	sub    esp,0x8
c0015e36:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e39:	05 34 11 00 00       	add    eax,0x1134
c0015e3e:	83 ec 0c             	sub    esp,0xc
c0015e41:	50                   	push   eax
c0015e42:	e8 4d a9 fe ff       	call   c0000794 <strlen>
c0015e47:	83 c4 10             	add    esp,0x10
c0015e4a:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015e4d:	81 c2 34 11 00 00    	add    edx,0x1134
c0015e53:	83 ec 04             	sub    esp,0x4
c0015e56:	50                   	push   eax
c0015e57:	6a 00                	push   0x0
c0015e59:	52                   	push   edx
c0015e5a:	e8 19 a9 fe ff       	call   c0000778 <memset>
c0015e5f:	83 c4 10             	add    esp,0x10
c0015e62:	90                   	nop
c0015e63:	c9                   	leave  
c0015e64:	c3                   	ret    

c0015e65 <readKeyboard(VgaText*, char*, unsigned long)>:
c0015e65:	55                   	push   ebp
c0015e66:	89 e5                	mov    ebp,esp
c0015e68:	83 ec 18             	sub    esp,0x18
c0015e6b:	fb                   	sti    
c0015e6c:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0015e73:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0015e77:	0f 84 8a 00 00 00    	je     c0015f07 <readKeyboard(VgaText*, char*, unsigned long)+0xa2>
c0015e7d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e80:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c0015e86:	84 c0                	test   al,al
c0015e88:	75 11                	jne    c0015e9b <readKeyboard(VgaText*, char*, unsigned long)+0x36>
c0015e8a:	e8 2f 78 00 00       	call   c001d6be <lockScheduler()>
c0015e8f:	e8 66 7b 00 00       	call   c001d9fa <schedule()>
c0015e94:	e8 27 78 00 00       	call   c001d6c0 <unlockScheduler()>
c0015e99:	eb e2                	jmp    c0015e7d <readKeyboard(VgaText*, char*, unsigned long)+0x18>
c0015e9b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015e9e:	8d 50 01             	lea    edx,[eax+0x1]
c0015ea1:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0015ea4:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015ea7:	8a 92 34 11 00 00    	mov    dl,BYTE PTR [edx+0x1134]
c0015ead:	88 10                	mov    BYTE PTR [eax],dl
c0015eaf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015eb2:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c0015eb8:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c0015ebb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ebe:	05 34 11 00 00       	add    eax,0x1134
c0015ec3:	83 ec 0c             	sub    esp,0xc
c0015ec6:	50                   	push   eax
c0015ec7:	e8 c8 a8 fe ff       	call   c0000794 <strlen>
c0015ecc:	83 c4 10             	add    esp,0x10
c0015ecf:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015ed2:	81 c2 34 11 00 00    	add    edx,0x1134
c0015ed8:	8d 4a 01             	lea    ecx,[edx+0x1]
c0015edb:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015ede:	81 c2 34 11 00 00    	add    edx,0x1134
c0015ee4:	83 ec 04             	sub    esp,0x4
c0015ee7:	50                   	push   eax
c0015ee8:	51                   	push   ecx
c0015ee9:	52                   	push   edx
c0015eea:	e8 8d a7 fe ff       	call   c000067c <memmove>
c0015eef:	83 c4 10             	add    esp,0x10
c0015ef2:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c0015ef5:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015ef8:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c0015efc:	0f 85 71 ff ff ff    	jne    c0015e73 <readKeyboard(VgaText*, char*, unsigned long)+0xe>
c0015f02:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015f05:	eb 03                	jmp    c0015f0a <readKeyboard(VgaText*, char*, unsigned long)+0xa5>
c0015f07:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015f0a:	c9                   	leave  
c0015f0b:	c3                   	ret    

c0015f0c <Keyboard::Keyboard(char const*)>:
c0015f0c:	83 ec 0c             	sub    esp,0xc
c0015f0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015f13:	83 ec 08             	sub    esp,0x8
c0015f16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015f1a:	50                   	push   eax
c0015f1b:	e8 0c e2 ff ff       	call   c001412c <Device::Device(char const*)>
c0015f20:	83 c4 10             	add    esp,0x10
c0015f23:	ba a8 a9 02 c0       	mov    edx,0xc002a9a8
c0015f28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015f2c:	89 10                	mov    DWORD PTR [eax],edx
c0015f2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015f32:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c0015f3c:	c6 05 24 dd 02 c0 01 	mov    BYTE PTR ds:0xc002dd24,0x1
c0015f43:	90                   	nop
c0015f44:	83 c4 0c             	add    esp,0xc
c0015f47:	c3                   	ret    

c0015f48 <Keyboard::~Keyboard()>:
c0015f48:	83 ec 0c             	sub    esp,0xc
c0015f4b:	ba a8 a9 02 c0       	mov    edx,0xc002a9a8
c0015f50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015f54:	89 10                	mov    DWORD PTR [eax],edx
c0015f56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015f5a:	83 ec 0c             	sub    esp,0xc
c0015f5d:	50                   	push   eax
c0015f5e:	e8 ab de ff ff       	call   c0013e0e <Device::~Device()>
c0015f63:	83 c4 10             	add    esp,0x10
c0015f66:	90                   	nop
c0015f67:	83 c4 0c             	add    esp,0xc
c0015f6a:	c3                   	ret    
c0015f6b:	90                   	nop

c0015f6c <Keyboard::~Keyboard()>:
c0015f6c:	83 ec 0c             	sub    esp,0xc
c0015f6f:	83 ec 0c             	sub    esp,0xc
c0015f72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015f76:	e8 cd ff ff ff       	call   c0015f48 <Keyboard::~Keyboard()>
c0015f7b:	83 c4 10             	add    esp,0x10
c0015f7e:	83 ec 08             	sub    esp,0x8
c0015f81:	68 5c 01 00 00       	push   0x15c
c0015f86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015f8a:	e8 a6 ca ff ff       	call   c0012a35 <operator delete(void*, unsigned long)>
c0015f8f:	83 c4 10             	add    esp,0x10
c0015f92:	83 c4 0c             	add    esp,0xc
c0015f95:	c3                   	ret    

c0015f96 <LogicalDisk::close(int, int, void*)>:
c0015f96:	83 c8 ff             	or     eax,0xffffffff
c0015f99:	c3                   	ret    

c0015f9a <LogicalDisk::~LogicalDisk()>:
c0015f9a:	83 ec 0c             	sub    esp,0xc
c0015f9d:	ba 58 aa 02 c0       	mov    edx,0xc002aa58
c0015fa2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015fa6:	89 10                	mov    DWORD PTR [eax],edx
c0015fa8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015fac:	83 ec 0c             	sub    esp,0xc
c0015faf:	50                   	push   eax
c0015fb0:	e8 59 de ff ff       	call   c0013e0e <Device::~Device()>
c0015fb5:	83 c4 10             	add    esp,0x10
c0015fb8:	90                   	nop
c0015fb9:	83 c4 0c             	add    esp,0xc
c0015fbc:	c3                   	ret    
c0015fbd:	90                   	nop

c0015fbe <LogicalDisk::~LogicalDisk()>:
c0015fbe:	83 ec 0c             	sub    esp,0xc
c0015fc1:	83 ec 0c             	sub    esp,0xc
c0015fc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015fc8:	e8 cd ff ff ff       	call   c0015f9a <LogicalDisk::~LogicalDisk()>
c0015fcd:	83 c4 10             	add    esp,0x10
c0015fd0:	83 ec 08             	sub    esp,0x8
c0015fd3:	68 74 01 00 00       	push   0x174
c0015fd8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015fdc:	e8 54 ca ff ff       	call   c0012a35 <operator delete(void*, unsigned long)>
c0015fe1:	83 c4 10             	add    esp,0x10
c0015fe4:	83 c4 0c             	add    esp,0xc
c0015fe7:	c3                   	ret    

c0015fe8 <LogicalDisk::open(int, int, void*)>:
c0015fe8:	83 ec 18             	sub    esp,0x18
c0015feb:	68 d4 a9 02 c0       	push   0xc002a9d4
c0015ff0:	e8 3a 40 00 00       	call   c001a02f <Krnl::panic(char const*)>
c0015ff5:	83 c8 ff             	or     eax,0xffffffff
c0015ff8:	83 c4 1c             	add    esp,0x1c
c0015ffb:	c3                   	ret    

c0015ffc <LogicalDisk::absoluteToRelative(unsigned long long)>:
c0015ffc:	53                   	push   ebx
c0015ffd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0016001:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016005:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016009:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c001600f:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c0016015:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c001601b:	77 10                	ja     c001602d <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c001601d:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c0016023:	89 d3                	mov    ebx,edx
c0016025:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c001602b:	72 05                	jb     c0016032 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c001602d:	83 c8 ff             	or     eax,0xffffffff
c0016030:	89 c2                	mov    edx,eax
c0016032:	5b                   	pop    ebx
c0016033:	c3                   	ret    

c0016034 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c0016034:	56                   	push   esi
c0016035:	83 c8 ff             	or     eax,0xffffffff
c0016038:	53                   	push   ebx
c0016039:	89 c2                	mov    edx,eax
c001603b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001603f:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0016043:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0016047:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c001604d:	77 27                	ja     c0016076 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c001604f:	89 d8                	mov    eax,ebx
c0016051:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c0016057:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c001605d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016062:	89 c2                	mov    edx,eax
c0016064:	73 10                	jae    c0016076 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0016066:	89 c8                	mov    eax,ecx
c0016068:	89 da                	mov    edx,ebx
c001606a:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0016070:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c0016076:	5b                   	pop    ebx
c0016077:	5e                   	pop    esi
c0016078:	c3                   	ret    
c0016079:	90                   	nop

c001607a <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c001607a:	83 ec 1c             	sub    esp,0x1c
c001607d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016081:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016085:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016089:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001608d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016091:	89 04 24             	mov    DWORD PTR [esp],eax
c0016094:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016098:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001609c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00160a0:	83 ec 08             	sub    esp,0x8
c00160a3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00160a7:	50                   	push   eax
c00160a8:	e8 7f e0 ff ff       	call   c001412c <Device::Device(char const*)>
c00160ad:	83 c4 10             	add    esp,0x10
c00160b0:	ba 58 aa 02 c0       	mov    edx,0xc002aa58
c00160b5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00160b9:	89 10                	mov    DWORD PTR [eax],edx
c00160bb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00160bf:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c00160c6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00160ca:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c00160d1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00160d5:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c00160df:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00160e3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00160e7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00160eb:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c00160f1:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c00160f7:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00160fb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00160fe:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016102:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c0016108:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c001610e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016112:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016116:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c001611c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016120:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c001612a:	90                   	nop
c001612b:	83 c4 1c             	add    esp,0x1c
c001612e:	c3                   	ret    
c001612f:	90                   	nop

c0016130 <LogicalDisk::assignDriveLetter()>:
c0016130:	55                   	push   ebp
c0016131:	57                   	push   edi
c0016132:	56                   	push   esi
c0016133:	53                   	push   ebx
c0016134:	83 ec 14             	sub    esp,0x14
c0016137:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001613b:	8b 3d 60 e1 02 c0    	mov    edi,DWORD PTR ds:0xc002e160
c0016141:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c0016147:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c001614b:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c0016151:	8b 3d 64 e1 02 c0    	mov    edi,DWORD PTR ds:0xc002e164
c0016157:	3c 01                	cmp    al,0x1
c0016159:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c001615d:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0016161:	19 c0                	sbb    eax,eax
c0016163:	83 e0 02             	and    eax,0x2
c0016166:	83 c0 41             	add    eax,0x41
c0016169:	0f be e8             	movsx  ebp,al
c001616c:	3c 43                	cmp    al,0x43
c001616e:	75 10                	jne    c0016180 <LogicalDisk::assignDriveLetter()+0x50>
c0016170:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c0016177:	75 5d                	jne    c00161d6 <LogicalDisk::assignDriveLetter()+0xa6>
c0016179:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001617e:	75 56                	jne    c00161d6 <LogicalDisk::assignDriveLetter()+0xa6>
c0016180:	8d 75 bf             	lea    esi,[ebp-0x41]
c0016183:	ba 01 00 00 00       	mov    edx,0x1
c0016188:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c001618c:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0016190:	d3 e2                	shl    edx,cl
c0016192:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016196:	89 d7                	mov    edi,edx
c0016198:	89 d6                	mov    esi,edx
c001619a:	c1 ff 1f             	sar    edi,0x1f
c001619d:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c00161a1:	21 f9                	and    ecx,edi
c00161a3:	09 d1                	or     ecx,edx
c00161a5:	75 2f                	jne    c00161d6 <LogicalDisk::assignDriveLetter()+0xa6>
c00161a7:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c00161ab:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00161af:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c00161b5:	09 f2                	or     edx,esi
c00161b7:	89 15 60 e1 02 c0    	mov    DWORD PTR ds:0xc002e160,edx
c00161bd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00161c1:	09 fa                	or     edx,edi
c00161c3:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c00161c7:	89 15 64 e1 02 c0    	mov    DWORD PTR ds:0xc002e164,edx
c00161cd:	89 1c bd 80 e1 02 c0 	mov    DWORD PTR [edi*4-0x3ffd1e80],ebx
c00161d4:	eb 08                	jmp    c00161de <LogicalDisk::assignDriveLetter()+0xae>
c00161d6:	45                   	inc    ebp
c00161d7:	40                   	inc    eax
c00161d8:	3c 5b                	cmp    al,0x5b
c00161da:	75 90                	jne    c001616c <LogicalDisk::assignDriveLetter()+0x3c>
c00161dc:	31 c0                	xor    eax,eax
c00161de:	83 c4 14             	add    esp,0x14
c00161e1:	5b                   	pop    ebx
c00161e2:	5e                   	pop    esi
c00161e3:	5f                   	pop    edi
c00161e4:	5d                   	pop    ebp
c00161e5:	c3                   	ret    

c00161e6 <LogicalDisk::mount()>:
c00161e6:	56                   	push   esi
c00161e7:	53                   	push   ebx
c00161e8:	51                   	push   ecx
c00161e9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00161ed:	8b 1d e8 dc 02 c0    	mov    ebx,DWORD PTR ds:0xc002dce8
c00161f3:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c00161fd:	85 db                	test   ebx,ebx
c00161ff:	74 50                	je     c0016251 <LogicalDisk::mount()+0x6b>
c0016201:	e8 a3 74 00 00       	call   c001d6a9 <getIRQNestingLevel()>
c0016206:	52                   	push   edx
c0016207:	52                   	push   edx
c0016208:	50                   	push   eax
c0016209:	68 f8 a9 02 c0       	push   0xc002a9f8
c001620e:	e8 02 c9 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c0016213:	83 c4 0c             	add    esp,0xc
c0016216:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c001621d:	8b 13                	mov    edx,DWORD PTR [ebx]
c001621f:	83 e8 41             	sub    eax,0x41
c0016222:	50                   	push   eax
c0016223:	56                   	push   esi
c0016224:	53                   	push   ebx
c0016225:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0016228:	83 c4 10             	add    esp,0x10
c001622b:	84 c0                	test   al,al
c001622d:	74 08                	je     c0016237 <LogicalDisk::mount()+0x51>
c001622f:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c0016235:	eb 1c                	jmp    c0016253 <LogicalDisk::mount()+0x6d>
c0016237:	e8 6d 74 00 00       	call   c001d6a9 <getIRQNestingLevel()>
c001623c:	51                   	push   ecx
c001623d:	51                   	push   ecx
c001623e:	50                   	push   eax
c001623f:	68 13 aa 02 c0       	push   0xc002aa13
c0016244:	e8 cc c8 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c0016249:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001624c:	83 c4 10             	add    esp,0x10
c001624f:	eb ac                	jmp    c00161fd <LogicalDisk::mount()+0x17>
c0016251:	31 c0                	xor    eax,eax
c0016253:	5a                   	pop    edx
c0016254:	5b                   	pop    ebx
c0016255:	5e                   	pop    esi
c0016256:	c3                   	ret    
c0016257:	90                   	nop

c0016258 <LogicalDisk::unmount()>:
c0016258:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001625c:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0016266:	c3                   	ret    
c0016267:	90                   	nop

c0016268 <LogicalDisk::eject()>:
c0016268:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001626c:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0016272:	8b 10                	mov    edx,DWORD PTR [eax]
c0016274:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016278:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c001627b:	90                   	nop

c001627c <LogicalDisk::unassignDriveLetter()>:
c001627c:	57                   	push   edi
c001627d:	56                   	push   esi
c001627e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016282:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c0016289:	84 c9                	test   cl,cl
c001628b:	75 0f                	jne    c001629c <LogicalDisk::unassignDriveLetter()+0x20>
c001628d:	c7 44 24 0c 2e aa 02 c0 	mov    DWORD PTR [esp+0xc],0xc002aa2e
c0016295:	5e                   	pop    esi
c0016296:	5f                   	pop    edi
c0016297:	e9 93 3d 00 00       	jmp    c001a02f <Krnl::panic(char const*)>
c001629c:	83 e9 41             	sub    ecx,0x41
c001629f:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c00162a6:	b8 01 00 00 00       	mov    eax,0x1
c00162ab:	c7 04 8d 80 e1 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd1e80],0x0
c00162b6:	d3 e0                	shl    eax,cl
c00162b8:	89 c7                	mov    edi,eax
c00162ba:	f7 d0                	not    eax
c00162bc:	c1 ff 1f             	sar    edi,0x1f
c00162bf:	21 05 60 e1 02 c0    	and    DWORD PTR ds:0xc002e160,eax
c00162c5:	89 fe                	mov    esi,edi
c00162c7:	f7 d6                	not    esi
c00162c9:	21 35 64 e1 02 c0    	and    DWORD PTR ds:0xc002e164,esi
c00162cf:	5e                   	pop    esi
c00162d0:	5f                   	pop    edi
c00162d1:	c3                   	ret    

c00162d2 <LogicalDisk::read(unsigned long long, int, void*)>:
c00162d2:	57                   	push   edi
c00162d3:	56                   	push   esi
c00162d4:	53                   	push   ebx
c00162d5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00162d9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00162dd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00162e1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00162e5:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00162eb:	77 41                	ja     c001632e <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c00162ed:	99                   	cdq    
c00162ee:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c00162f4:	01 c8                	add    eax,ecx
c00162f6:	11 da                	adc    edx,ebx
c00162f8:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c00162fe:	19 d7                	sbb    edi,edx
c0016300:	72 33                	jb     c0016335 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c0016302:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0016308:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c001630e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0016312:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0016316:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c001631c:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016322:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016326:	5b                   	pop    ebx
c0016327:	5e                   	pop    esi
c0016328:	5f                   	pop    edi
c0016329:	e9 b0 0a 00 00       	jmp    c0016dde <VCache::read(unsigned long long, int, void*)>
c001632e:	b8 05 00 00 00       	mov    eax,0x5
c0016333:	eb 05                	jmp    c001633a <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c0016335:	b8 07 00 00 00       	mov    eax,0x7
c001633a:	5b                   	pop    ebx
c001633b:	5e                   	pop    esi
c001633c:	5f                   	pop    edi
c001633d:	c3                   	ret    

c001633e <LogicalDisk::write(unsigned long long, int, void*)>:
c001633e:	57                   	push   edi
c001633f:	56                   	push   esi
c0016340:	53                   	push   ebx
c0016341:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0016345:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016349:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001634d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016351:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0016357:	77 41                	ja     c001639a <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c0016359:	99                   	cdq    
c001635a:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0016360:	01 c8                	add    eax,ecx
c0016362:	11 da                	adc    edx,ebx
c0016364:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c001636a:	19 d7                	sbb    edi,edx
c001636c:	72 33                	jb     c00163a1 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c001636e:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0016374:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c001637a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001637e:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0016382:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0016388:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001638e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016392:	5b                   	pop    ebx
c0016393:	5e                   	pop    esi
c0016394:	5f                   	pop    edi
c0016395:	e9 4e 09 00 00       	jmp    c0016ce8 <VCache::write(unsigned long long, int, void*)>
c001639a:	b8 05 00 00 00       	mov    eax,0x5
c001639f:	eb 05                	jmp    c00163a6 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c00163a1:	b8 07 00 00 00       	mov    eax,0x7
c00163a6:	5b                   	pop    ebx
c00163a7:	5e                   	pop    esi
c00163a8:	5f                   	pop    edi
c00163a9:	c3                   	ret    

c00163aa <Mouse::Mouse(char const*)>:
c00163aa:	83 ec 0c             	sub    esp,0xc
c00163ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163b1:	83 ec 08             	sub    esp,0x8
c00163b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00163b8:	50                   	push   eax
c00163b9:	e8 6e dd ff ff       	call   c001412c <Device::Device(char const*)>
c00163be:	83 c4 10             	add    esp,0x10
c00163c1:	ba 84 aa 02 c0       	mov    edx,0xc002aa84
c00163c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163ca:	89 10                	mov    DWORD PTR [eax],edx
c00163cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163d0:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c00163da:	90                   	nop
c00163db:	83 c4 0c             	add    esp,0xc
c00163de:	c3                   	ret    
c00163df:	90                   	nop

c00163e0 <Mouse::~Mouse()>:
c00163e0:	83 ec 0c             	sub    esp,0xc
c00163e3:	ba 84 aa 02 c0       	mov    edx,0xc002aa84
c00163e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163ec:	89 10                	mov    DWORD PTR [eax],edx
c00163ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163f2:	83 ec 0c             	sub    esp,0xc
c00163f5:	50                   	push   eax
c00163f6:	e8 13 da ff ff       	call   c0013e0e <Device::~Device()>
c00163fb:	83 c4 10             	add    esp,0x10
c00163fe:	90                   	nop
c00163ff:	83 c4 0c             	add    esp,0xc
c0016402:	c3                   	ret    
c0016403:	90                   	nop

c0016404 <Mouse::~Mouse()>:
c0016404:	83 ec 0c             	sub    esp,0xc
c0016407:	83 ec 0c             	sub    esp,0xc
c001640a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001640e:	e8 cd ff ff ff       	call   c00163e0 <Mouse::~Mouse()>
c0016413:	83 c4 10             	add    esp,0x10
c0016416:	83 ec 08             	sub    esp,0x8
c0016419:	68 58 01 00 00       	push   0x158
c001641e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016422:	e8 0e c6 ff ff       	call   c0012a35 <operator delete(void*, unsigned long)>
c0016427:	83 c4 10             	add    esp,0x10
c001642a:	83 c4 0c             	add    esp,0xc
c001642d:	c3                   	ret    

c001642e <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c001642e:	55                   	push   ebp
c001642f:	57                   	push   edi
c0016430:	56                   	push   esi
c0016431:	53                   	push   ebx
c0016432:	81 ec 28 01 00 00    	sub    esp,0x128
c0016438:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001643f:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0016446:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c001644d:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c0016454:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016458:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001645c:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0016463:	e8 c0 dd ff ff       	call   c0014228 <Device::getName()>
c0016468:	5a                   	pop    edx
c0016469:	59                   	pop    ecx
c001646a:	50                   	push   eax
c001646b:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c001646f:	55                   	push   ebp
c0016470:	e8 bf a3 fe ff       	call   c0000834 <strcpy>
c0016475:	5b                   	pop    ebx
c0016476:	58                   	pop    eax
c0016477:	68 a8 aa 02 c0       	push   0xc002aaa8
c001647c:	55                   	push   ebp
c001647d:	e8 f2 a4 fe ff       	call   c0000974 <strcat>
c0016482:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c0016489:	e8 b8 93 ff ff       	call   c000f846 <malloc>
c001648e:	83 c4 0c             	add    esp,0xc
c0016491:	89 c3                	mov    ebx,eax
c0016493:	57                   	push   edi
c0016494:	56                   	push   esi
c0016495:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016499:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001649d:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c00164a4:	55                   	push   ebp
c00164a5:	50                   	push   eax
c00164a6:	e8 cf fb ff ff       	call   c001607a <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c00164ab:	83 c4 14             	add    esp,0x14
c00164ae:	53                   	push   ebx
c00164af:	e8 7c fc ff ff       	call   c0016130 <LogicalDisk::assignDriveLetter()>
c00164b4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00164b7:	89 c6                	mov    esi,eax
c00164b9:	e8 28 fd ff ff       	call   c00161e6 <LogicalDisk::mount()>
c00164be:	58                   	pop    eax
c00164bf:	5a                   	pop    edx
c00164c0:	53                   	push   ebx
c00164c1:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00164c8:	e8 6f da ff ff       	call   c0013f3c <Device::addChild(Device*)>
c00164cd:	59                   	pop    ecx
c00164ce:	89 f0                	mov    eax,esi
c00164d0:	5b                   	pop    ebx
c00164d1:	0f be f0             	movsx  esi,al
c00164d4:	56                   	push   esi
c00164d5:	68 b3 aa 02 c0       	push   0xc002aab3
c00164da:	e8 36 c6 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c00164df:	81 c4 2c 01 00 00    	add    esp,0x12c
c00164e5:	5b                   	pop    ebx
c00164e6:	5e                   	pop    esi
c00164e7:	5f                   	pop    edi
c00164e8:	5d                   	pop    ebp
c00164e9:	c3                   	ret    

c00164ea <createPartitionsForDisk(PhysicalDisk*)>:
c00164ea:	55                   	push   ebp
c00164eb:	57                   	push   edi
c00164ec:	56                   	push   esi
c00164ed:	53                   	push   ebx
c00164ee:	81 ec 5c 02 00 00    	sub    esp,0x25c
c00164f4:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c00164fb:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0016501:	3d 00 02 00 00       	cmp    eax,0x200
c0016506:	74 27                	je     c001652f <createPartitionsForDisk(PhysicalDisk*)+0x45>
c0016508:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c001650e:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c0016514:	83 ec 10             	sub    esp,0x10
c0016517:	0f a4 f7 0a          	shld   edi,esi,0xa
c001651b:	99                   	cdq    
c001651c:	c1 e6 0a             	shl    esi,0xa
c001651f:	52                   	push   edx
c0016520:	89 fd                	mov    ebp,edi
c0016522:	50                   	push   eax
c0016523:	55                   	push   ebp
c0016524:	56                   	push   esi
c0016525:	e8 72 fd 00 00       	call   c002629c <__udivdi3>
c001652a:	e9 b1 00 00 00       	jmp    c00165e0 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c001652f:	83 ec 0c             	sub    esp,0xc
c0016532:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016534:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c0016538:	56                   	push   esi
c0016539:	6a 01                	push   0x1
c001653b:	6a 00                	push   0x0
c001653d:	6a 00                	push   0x0
c001653f:	53                   	push   ebx
c0016540:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0016543:	83 c4 20             	add    esp,0x20
c0016546:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c001654e:	75 0a                	jne    c001655a <createPartitionsForDisk(PhysicalDisk*)+0x70>
c0016550:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c0016558:	74 2c                	je     c0016586 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c001655a:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016560:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016566:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001656c:	83 ec 10             	sub    esp,0x10
c001656f:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016573:	89 f7                	mov    edi,esi
c0016575:	c1 e0 0a             	shl    eax,0xa
c0016578:	c1 ff 1f             	sar    edi,0x1f
c001657b:	57                   	push   edi
c001657c:	56                   	push   esi
c001657d:	52                   	push   edx
c001657e:	50                   	push   eax
c001657f:	e8 18 fd 00 00       	call   c002629c <__udivdi3>
c0016584:	eb 5a                	jmp    c00165e0 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0016586:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c001658d:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c0016594:	83 e1 7f             	and    ecx,0x7f
c0016597:	83 e0 7f             	and    eax,0x7f
c001659a:	01 c1                	add    ecx,eax
c001659c:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c00165a3:	83 e0 7f             	and    eax,0x7f
c00165a6:	01 c1                	add    ecx,eax
c00165a8:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c00165af:	83 e0 7f             	and    eax,0x7f
c00165b2:	00 c1                	add    cl,al
c00165b4:	74 41                	je     c00165f7 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c00165b6:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00165bc:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00165c2:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00165c8:	83 ec 10             	sub    esp,0x10
c00165cb:	0f a4 c2 0a          	shld   edx,eax,0xa
c00165cf:	89 f7                	mov    edi,esi
c00165d1:	c1 e0 0a             	shl    eax,0xa
c00165d4:	c1 ff 1f             	sar    edi,0x1f
c00165d7:	57                   	push   edi
c00165d8:	56                   	push   esi
c00165d9:	52                   	push   edx
c00165da:	50                   	push   eax
c00165db:	e8 bc fc 00 00       	call   c002629c <__udivdi3>
c00165e0:	83 c4 14             	add    esp,0x14
c00165e3:	52                   	push   edx
c00165e4:	50                   	push   eax
c00165e5:	6a 00                	push   0x0
c00165e7:	6a 00                	push   0x0
c00165e9:	53                   	push   ebx
c00165ea:	e8 3f fe ff ff       	call   c001642e <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c00165ef:	83 c4 20             	add    esp,0x20
c00165f2:	e9 79 01 00 00       	jmp    c0016770 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c00165f7:	89 f0                	mov    eax,esi
c00165f9:	31 f6                	xor    esi,esi
c00165fb:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c0016602:	75 02                	jne    c0016606 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c0016604:	89 f1                	mov    ecx,esi
c0016606:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c001660d:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c0016614:	c1 e2 08             	shl    edx,0x8
c0016617:	c1 e7 10             	shl    edi,0x10
c001661a:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c0016622:	09 fa                	or     edx,edi
c0016624:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c001662c:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c0016633:	83 c0 10             	add    eax,0x10
c0016636:	09 fa                	or     edx,edi
c0016638:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c001663f:	c1 e7 18             	shl    edi,0x18
c0016642:	09 fa                	or     edx,edi
c0016644:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c001664b:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c001664f:	c1 e7 10             	shl    edi,0x10
c0016652:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c0016659:	c1 e2 08             	shl    edx,0x8
c001665c:	09 fa                	or     edx,edi
c001665e:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c0016665:	09 fa                	or     edx,edi
c0016667:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c001666e:	c1 e7 18             	shl    edi,0x18
c0016671:	09 fa                	or     edx,edi
c0016673:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c0016677:	46                   	inc    esi
c0016678:	83 fe 04             	cmp    esi,0x4
c001667b:	0f 85 7a ff ff ff    	jne    c00165fb <createPartitionsForDisk(PhysicalDisk*)+0x111>
c0016681:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016685:	83 f0 01             	xor    eax,0x1
c0016688:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c001668c:	75 57                	jne    c00166e5 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c001668e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016692:	83 f0 01             	xor    eax,0x1
c0016695:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0016699:	75 4a                	jne    c00166e5 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c001669b:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c001669f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00166a7:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00166af:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00166b5:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00166bb:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00166c1:	0f a4 c2 0a          	shld   edx,eax,0xa
c00166c5:	89 f7                	mov    edi,esi
c00166c7:	c1 e0 0a             	shl    eax,0xa
c00166ca:	c1 ff 1f             	sar    edi,0x1f
c00166cd:	57                   	push   edi
c00166ce:	56                   	push   esi
c00166cf:	52                   	push   edx
c00166d0:	50                   	push   eax
c00166d1:	e8 c6 fb 00 00       	call   c002629c <__udivdi3>
c00166d6:	83 c4 10             	add    esp,0x10
c00166d9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00166dd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00166e1:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00166e5:	84 c9                	test   cl,cl
c00166e7:	74 53                	je     c001673c <createPartitionsForDisk(PhysicalDisk*)+0x252>
c00166e9:	0f b6 c9             	movzx  ecx,cl
c00166ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00166f0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00166f4:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00166f8:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00166fc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016700:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016704:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c0016708:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c001670c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016710:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0016714:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016718:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001671c:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c0016720:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c0016724:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c0016728:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c001672c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016730:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016734:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c0016738:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c001673c:	31 ed                	xor    ebp,ebp
c001673e:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c0016742:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c0016746:	89 f8                	mov    eax,edi
c0016748:	09 f0                	or     eax,esi
c001674a:	74 1e                	je     c001676a <createPartitionsForDisk(PhysicalDisk*)+0x280>
c001674c:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c0016750:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c0016754:	89 d1                	mov    ecx,edx
c0016756:	09 c1                	or     ecx,eax
c0016758:	74 10                	je     c001676a <createPartitionsForDisk(PhysicalDisk*)+0x280>
c001675a:	83 ec 0c             	sub    esp,0xc
c001675d:	57                   	push   edi
c001675e:	56                   	push   esi
c001675f:	52                   	push   edx
c0016760:	50                   	push   eax
c0016761:	53                   	push   ebx
c0016762:	e8 c7 fc ff ff       	call   c001642e <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016767:	83 c4 20             	add    esp,0x20
c001676a:	45                   	inc    ebp
c001676b:	83 fd 04             	cmp    ebp,0x4
c001676e:	75 ce                	jne    c001673e <createPartitionsForDisk(PhysicalDisk*)+0x254>
c0016770:	81 c4 5c 02 00 00    	add    esp,0x25c
c0016776:	5b                   	pop    ebx
c0016777:	5e                   	pop    esi
c0016778:	5f                   	pop    edi
c0016779:	5d                   	pop    ebp
c001677a:	c3                   	ret    
c001677b:	90                   	nop

c001677c <Serial::Serial(char const*)>:
c001677c:	83 ec 0c             	sub    esp,0xc
c001677f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016783:	83 ec 08             	sub    esp,0x8
c0016786:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001678a:	50                   	push   eax
c001678b:	e8 9c d9 ff ff       	call   c001412c <Device::Device(char const*)>
c0016790:	83 c4 10             	add    esp,0x10
c0016793:	ba e0 aa 02 c0       	mov    edx,0xc002aae0
c0016798:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001679c:	89 10                	mov    DWORD PTR [eax],edx
c001679e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00167a2:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c00167ac:	90                   	nop
c00167ad:	83 c4 0c             	add    esp,0xc
c00167b0:	c3                   	ret    
c00167b1:	90                   	nop

c00167b2 <Serial::~Serial()>:
c00167b2:	83 ec 0c             	sub    esp,0xc
c00167b5:	ba e0 aa 02 c0       	mov    edx,0xc002aae0
c00167ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00167be:	89 10                	mov    DWORD PTR [eax],edx
c00167c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00167c4:	83 ec 0c             	sub    esp,0xc
c00167c7:	50                   	push   eax
c00167c8:	e8 41 d6 ff ff       	call   c0013e0e <Device::~Device()>
c00167cd:	83 c4 10             	add    esp,0x10
c00167d0:	90                   	nop
c00167d1:	83 c4 0c             	add    esp,0xc
c00167d4:	c3                   	ret    
c00167d5:	90                   	nop

c00167d6 <Serial::~Serial()>:
c00167d6:	83 ec 0c             	sub    esp,0xc
c00167d9:	83 ec 0c             	sub    esp,0xc
c00167dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00167e0:	e8 cd ff ff ff       	call   c00167b2 <Serial::~Serial()>
c00167e5:	83 c4 10             	add    esp,0x10
c00167e8:	83 ec 08             	sub    esp,0x8
c00167eb:	68 58 01 00 00       	push   0x158
c00167f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00167f4:	e8 3c c2 ff ff       	call   c0012a35 <operator delete(void*, unsigned long)>
c00167f9:	83 c4 10             	add    esp,0x10
c00167fc:	83 c4 0c             	add    esp,0xc
c00167ff:	c3                   	ret    

c0016800 <Timer::Timer(char const*)>:
c0016800:	83 ec 0c             	sub    esp,0xc
c0016803:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016807:	83 ec 08             	sub    esp,0x8
c001680a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001680e:	50                   	push   eax
c001680f:	e8 18 d9 ff ff       	call   c001412c <Device::Device(char const*)>
c0016814:	83 c4 10             	add    esp,0x10
c0016817:	ba 24 ab 02 c0       	mov    edx,0xc002ab24
c001681c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016820:	89 10                	mov    DWORD PTR [eax],edx
c0016822:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016826:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c0016830:	90                   	nop
c0016831:	83 c4 0c             	add    esp,0xc
c0016834:	c3                   	ret    
c0016835:	90                   	nop

c0016836 <Timer::~Timer()>:
c0016836:	83 ec 0c             	sub    esp,0xc
c0016839:	ba 24 ab 02 c0       	mov    edx,0xc002ab24
c001683e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016842:	89 10                	mov    DWORD PTR [eax],edx
c0016844:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016848:	83 ec 0c             	sub    esp,0xc
c001684b:	50                   	push   eax
c001684c:	e8 bd d5 ff ff       	call   c0013e0e <Device::~Device()>
c0016851:	83 c4 10             	add    esp,0x10
c0016854:	90                   	nop
c0016855:	83 c4 0c             	add    esp,0xc
c0016858:	c3                   	ret    
c0016859:	90                   	nop

c001685a <Timer::~Timer()>:
c001685a:	83 ec 0c             	sub    esp,0xc
c001685d:	83 ec 0c             	sub    esp,0xc
c0016860:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016864:	e8 cd ff ff ff       	call   c0016836 <Timer::~Timer()>
c0016869:	83 c4 10             	add    esp,0x10
c001686c:	83 ec 08             	sub    esp,0x8
c001686f:	68 5c 01 00 00       	push   0x15c
c0016874:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016878:	e8 b8 c1 ff ff       	call   c0012a35 <operator delete(void*, unsigned long)>
c001687d:	83 c4 10             	add    esp,0x10
c0016880:	83 c4 0c             	add    esp,0xc
c0016883:	c3                   	ret    

c0016884 <Timer::read()>:
c0016884:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016888:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001688e:	c3                   	ret    

c001688f <timerHandler(unsigned long long)>:
c001688f:	55                   	push   ebp
c0016890:	57                   	push   edi
c0016891:	56                   	push   esi
c0016892:	53                   	push   ebx
c0016893:	83 ec 0c             	sub    esp,0xc
c0016896:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001689a:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001689e:	01 35 f0 e1 02 c0    	add    DWORD PTR ds:0xc002e1f0,esi
c00168a4:	11 3d f4 e1 02 c0    	adc    DWORD PTR ds:0xc002e1f4,edi
c00168aa:	80 3d 6d db 02 c0 00 	cmp    BYTE PTR ds:0xc002db6d,0x0
c00168b1:	0f 84 07 01 00 00    	je     c00169be <timerHandler(unsigned long long)+0x12f>
c00168b7:	e8 29 6e 00 00       	call   c001d6e5 <lockStuff()>
c00168bc:	83 ec 0c             	sub    esp,0xc
c00168bf:	68 bc 10 03 c0       	push   0xc00310bc
c00168c4:	e8 45 1a 01 00       	call   c002830e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00168c9:	c7 04 24 bc 10 03 c0 	mov    DWORD PTR [esp],0xc00310bc
c00168d0:	89 c3                	mov    ebx,eax
c00168d2:	e8 3f 1a 01 00       	call   c0028316 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00168d7:	83 c4 10             	add    esp,0x10
c00168da:	84 c0                	test   al,al
c00168dc:	74 60                	je     c001693e <timerHandler(unsigned long long)+0xaf>
c00168de:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00168e4:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c00168e7:	85 c0                	test   eax,eax
c00168e9:	0f 85 91 00 00 00    	jne    c0016980 <timerHandler(unsigned long long)+0xf1>
c00168ef:	e9 be 00 00 00       	jmp    c00169b2 <timerHandler(unsigned long long)+0x123>
c00168f4:	83 ec 0c             	sub    esp,0xc
c00168f7:	55                   	push   ebp
c00168f8:	e8 d9 73 00 00       	call   c001dcd6 <unblockTask(ThreadControlBlock*)>
c00168fd:	83 c4 10             	add    esp,0x10
c0016900:	39 eb                	cmp    ebx,ebp
c0016902:	75 12                	jne    c0016916 <timerHandler(unsigned long long)+0x87>
c0016904:	83 ec 0c             	sub    esp,0xc
c0016907:	68 bc 10 03 c0       	push   0xc00310bc
c001690c:	e8 fd 19 01 00       	call   c002830e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016911:	89 c3                	mov    ebx,eax
c0016913:	83 c4 10             	add    esp,0x10
c0016916:	83 ec 0c             	sub    esp,0xc
c0016919:	68 bc 10 03 c0       	push   0xc00310bc
c001691e:	e8 f3 19 01 00       	call   c0028316 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016923:	83 c4 10             	add    esp,0x10
c0016926:	84 c0                	test   al,al
c0016928:	75 b4                	jne    c00168de <timerHandler(unsigned long long)+0x4f>
c001692a:	83 ec 0c             	sub    esp,0xc
c001692d:	68 bc 10 03 c0       	push   0xc00310bc
c0016932:	e8 d7 19 01 00       	call   c002830e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016937:	83 c4 10             	add    esp,0x10
c001693a:	39 d8                	cmp    eax,ebx
c001693c:	74 a0                	je     c00168de <timerHandler(unsigned long long)+0x4f>
c001693e:	83 ec 0c             	sub    esp,0xc
c0016941:	68 bc 10 03 c0       	push   0xc00310bc
c0016946:	e8 c3 19 01 00       	call   c002830e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001694b:	c7 04 24 bc 10 03 c0 	mov    DWORD PTR [esp],0xc00310bc
c0016952:	89 c5                	mov    ebp,eax
c0016954:	e8 d9 19 01 00       	call   c0028332 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016959:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c001695c:	83 c4 10             	add    esp,0x10
c001695f:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c0016962:	39 15 f0 e1 02 c0    	cmp    DWORD PTR ds:0xc002e1f0,edx
c0016968:	a1 f4 e1 02 c0       	mov    eax,ds:0xc002e1f4
c001696d:	19 c8                	sbb    eax,ecx
c001696f:	73 83                	jae    c00168f4 <timerHandler(unsigned long long)+0x65>
c0016971:	50                   	push   eax
c0016972:	50                   	push   eax
c0016973:	55                   	push   ebp
c0016974:	68 bc 10 03 c0       	push   0xc00310bc
c0016979:	e8 62 1a 01 00       	call   c00283e0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001697e:	eb 93                	jmp    c0016913 <timerHandler(unsigned long long)+0x84>
c0016980:	80 3d 6c db 02 c0 00 	cmp    BYTE PTR ds:0xc002db6c,0x0
c0016987:	74 29                	je     c00169b2 <timerHandler(unsigned long long)+0x123>
c0016989:	39 c6                	cmp    esi,eax
c001698b:	bb 00 00 00 00       	mov    ebx,0x0
c0016990:	19 df                	sbb    edi,ebx
c0016992:	72 19                	jb     c00169ad <timerHandler(unsigned long long)+0x11e>
c0016994:	e8 25 6d 00 00       	call   c001d6be <lockScheduler()>
c0016999:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001699e:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c00169a1:	e8 54 70 00 00       	call   c001d9fa <schedule()>
c00169a6:	e8 15 6d 00 00       	call   c001d6c0 <unlockScheduler()>
c00169ab:	eb 05                	jmp    c00169b2 <timerHandler(unsigned long long)+0x123>
c00169ad:	29 f0                	sub    eax,esi
c00169af:	89 42 38             	mov    DWORD PTR [edx+0x38],eax
c00169b2:	83 c4 0c             	add    esp,0xc
c00169b5:	5b                   	pop    ebx
c00169b6:	5e                   	pop    esi
c00169b7:	5f                   	pop    edi
c00169b8:	5d                   	pop    ebp
c00169b9:	e9 c1 70 00 00       	jmp    c001da7f <unlockStuff()>
c00169be:	83 c4 0c             	add    esp,0xc
c00169c1:	5b                   	pop    ebx
c00169c2:	5e                   	pop    esi
c00169c3:	5f                   	pop    edi
c00169c4:	5d                   	pop    ebp
c00169c5:	c3                   	ret    

c00169c6 <setupTimer(int)>:
c00169c6:	57                   	push   edi
c00169c7:	a1 68 db 02 c0       	mov    eax,ds:0xc002db68
c00169cc:	56                   	push   esi
c00169cd:	53                   	push   ebx
c00169ce:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00169d2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00169d8:	83 ec 0c             	sub    esp,0xc
c00169db:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c00169e1:	e8 42 d8 ff ff       	call   c0014228 <Device::getName()>
c00169e6:	83 c4 10             	add    esp,0x10
c00169e9:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00169ec:	0f 85 8d 00 00 00    	jne    c0016a7f <setupTimer(int)+0xb9>
c00169f2:	a1 68 db 02 c0       	mov    eax,ds:0xc002db68
c00169f7:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c00169fe:	74 7f                	je     c0016a7f <setupTimer(int)+0xb9>
c0016a00:	83 ec 0c             	sub    esp,0xc
c0016a03:	68 5c 01 00 00       	push   0x15c
c0016a08:	e8 39 8e ff ff       	call   c000f846 <malloc>
c0016a0d:	89 04 24             	mov    DWORD PTR [esp],eax
c0016a10:	89 c3                	mov    ebx,eax
c0016a12:	e8 61 f4 00 00       	call   c0025e78 <PIT::PIT()>
c0016a17:	59                   	pop    ecx
c0016a18:	5f                   	pop    edi
c0016a19:	53                   	push   ebx
c0016a1a:	ff 35 68 db 02 c0    	push   DWORD PTR ds:0xc002db68
c0016a20:	e8 17 d5 ff ff       	call   c0013f3c <Device::addChild(Device*)>
c0016a25:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016a27:	6a 00                	push   0x0
c0016a29:	6a 00                	push   0x0
c0016a2b:	56                   	push   esi
c0016a2c:	53                   	push   ebx
c0016a2d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016a30:	83 c4 14             	add    esp,0x14
c0016a33:	68 60 01 00 00       	push   0x160
c0016a38:	e8 09 8e ff ff       	call   c000f846 <malloc>
c0016a3d:	89 04 24             	mov    DWORD PTR [esp],eax
c0016a40:	89 c7                	mov    edi,eax
c0016a42:	e8 e1 f2 00 00       	call   c0025d28 <APICTimer::APICTimer()>
c0016a47:	6a 00                	push   0x0
c0016a49:	6a 00                	push   0x0
c0016a4b:	56                   	push   esi
c0016a4c:	57                   	push   edi
c0016a4d:	e8 d8 f1 00 00       	call   c0025c2a <APICTimer::open(int, int, void*)>
c0016a52:	83 c4 20             	add    esp,0x20
c0016a55:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016a57:	6a 00                	push   0x0
c0016a59:	6a 00                	push   0x0
c0016a5b:	6a 00                	push   0x0
c0016a5d:	53                   	push   ebx
c0016a5e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016a61:	58                   	pop    eax
c0016a62:	a1 68 db 02 c0       	mov    eax,ds:0xc002db68
c0016a67:	5a                   	pop    edx
c0016a68:	57                   	push   edi
c0016a69:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016a6f:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016a75:	e8 c2 d4 ff ff       	call   c0013f3c <Device::addChild(Device*)>
c0016a7a:	83 c4 10             	add    esp,0x10
c0016a7d:	eb 33                	jmp    c0016ab2 <setupTimer(int)+0xec>
c0016a7f:	83 ec 0c             	sub    esp,0xc
c0016a82:	68 5c 01 00 00       	push   0x15c
c0016a87:	e8 ba 8d ff ff       	call   c000f846 <malloc>
c0016a8c:	89 04 24             	mov    DWORD PTR [esp],eax
c0016a8f:	89 c3                	mov    ebx,eax
c0016a91:	e8 e2 f3 00 00       	call   c0025e78 <PIT::PIT()>
c0016a96:	58                   	pop    eax
c0016a97:	5a                   	pop    edx
c0016a98:	53                   	push   ebx
c0016a99:	ff 35 68 db 02 c0    	push   DWORD PTR ds:0xc002db68
c0016a9f:	e8 98 d4 ff ff       	call   c0013f3c <Device::addChild(Device*)>
c0016aa4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016aa6:	6a 00                	push   0x0
c0016aa8:	6a 00                	push   0x0
c0016aaa:	56                   	push   esi
c0016aab:	53                   	push   ebx
c0016aac:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016aaf:	83 c4 20             	add    esp,0x20
c0016ab2:	89 d8                	mov    eax,ebx
c0016ab4:	5b                   	pop    ebx
c0016ab5:	5e                   	pop    esi
c0016ab6:	5f                   	pop    edi
c0016ab7:	c3                   	ret    

c0016ab8 <VCache::VCache(PhysicalDisk*)>:
c0016ab8:	53                   	push   ebx
c0016ab9:	83 ec 18             	sub    esp,0x18
c0016abc:	ba 54 ab 02 c0       	mov    edx,0xc002ab54
c0016ac1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ac5:	89 10                	mov    DWORD PTR [eax],edx
c0016ac7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016acb:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c0016ad2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ad6:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c0016add:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ae1:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c0016ae8:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0016aef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016af3:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0016afa:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0016b01:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b05:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0016b0c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b10:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0016b14:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b18:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c0016b1f:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c0016b26:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b2a:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0016b2e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b32:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c0016b36:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b3a:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0016b3e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b42:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0016b49:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c0016b51:	83 ec 0c             	sub    esp,0xc
c0016b54:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016b58:	e8 e9 8c ff ff       	call   c000f846 <malloc>
c0016b5d:	83 c4 10             	add    esp,0x10
c0016b60:	89 c3                	mov    ebx,eax
c0016b62:	83 ec 0c             	sub    esp,0xc
c0016b65:	53                   	push   ebx
c0016b66:	e8 73 6c 00 00       	call   c001d7de <Mutex::Mutex()>
c0016b6b:	83 c4 10             	add    esp,0x10
c0016b6e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b72:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0016b75:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b79:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0016b7d:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0016b80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b84:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c0016b8b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016b8f:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0016b95:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b99:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0016b9c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016ba0:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c0016ba6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016bac:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0016bb0:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0016bb3:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c0016bb6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016bba:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0016bbe:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016bc2:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016bc8:	05 00 01 00 00       	add    eax,0x100
c0016bcd:	c1 e0 04             	shl    eax,0x4
c0016bd0:	83 ec 0c             	sub    esp,0xc
c0016bd3:	50                   	push   eax
c0016bd4:	e8 6d 8c ff ff       	call   c000f846 <malloc>
c0016bd9:	83 c4 10             	add    esp,0x10
c0016bdc:	89 c2                	mov    edx,eax
c0016bde:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016be2:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0016be5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016be9:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0016bf0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016bf4:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0016bf8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016bfc:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016c02:	c1 e0 07             	shl    eax,0x7
c0016c05:	83 ec 0c             	sub    esp,0xc
c0016c08:	50                   	push   eax
c0016c09:	e8 38 8c ff ff       	call   c000f846 <malloc>
c0016c0e:	83 c4 10             	add    esp,0x10
c0016c11:	89 c2                	mov    edx,eax
c0016c13:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016c17:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0016c1a:	90                   	nop
c0016c1b:	83 c4 18             	add    esp,0x18
c0016c1e:	5b                   	pop    ebx
c0016c1f:	c3                   	ret    

c0016c20 <VCache::invalidateReadBuffer()>:
c0016c20:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016c24:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c0016c2a:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0016c2e:	c3                   	ret    
c0016c2f:	90                   	nop

c0016c30 <VCache::writeWriteBuffer()>:
c0016c30:	53                   	push   ebx
c0016c31:	83 ec 14             	sub    esp,0x14
c0016c34:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0016c38:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016c3b:	8b 10                	mov    edx,DWORD PTR [eax]
c0016c3d:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0016c40:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016c43:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0016c46:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0016c49:	50                   	push   eax
c0016c4a:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0016c4d:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0016c54:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0016c5b:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c0016c5f:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c0016c66:	83 c4 28             	add    esp,0x28
c0016c69:	5b                   	pop    ebx
c0016c6a:	c3                   	ret    
c0016c6b:	90                   	nop

c0016c6c <VCache::~VCache()>:
c0016c6c:	83 ec 0c             	sub    esp,0xc
c0016c6f:	ba 54 ab 02 c0       	mov    edx,0xc002ab54
c0016c74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c78:	89 10                	mov    DWORD PTR [eax],edx
c0016c7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c7e:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0016c81:	84 c0                	test   al,al
c0016c83:	74 0f                	je     c0016c94 <VCache::~VCache()+0x28>
c0016c85:	83 ec 0c             	sub    esp,0xc
c0016c88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016c8c:	e8 9f ff ff ff       	call   c0016c30 <VCache::writeWriteBuffer()>
c0016c91:	83 c4 10             	add    esp,0x10
c0016c94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c98:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0016c9b:	83 ec 0c             	sub    esp,0xc
c0016c9e:	50                   	push   eax
c0016c9f:	e8 b2 8b ff ff       	call   c000f856 <free>
c0016ca4:	83 c4 10             	add    esp,0x10
c0016ca7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016cab:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0016cae:	83 ec 0c             	sub    esp,0xc
c0016cb1:	50                   	push   eax
c0016cb2:	e8 9f 8b ff ff       	call   c000f856 <free>
c0016cb7:	83 c4 10             	add    esp,0x10
c0016cba:	90                   	nop
c0016cbb:	83 c4 0c             	add    esp,0xc
c0016cbe:	c3                   	ret    
c0016cbf:	90                   	nop

c0016cc0 <VCache::~VCache()>:
c0016cc0:	83 ec 0c             	sub    esp,0xc
c0016cc3:	83 ec 0c             	sub    esp,0xc
c0016cc6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016cca:	e8 9d ff ff ff       	call   c0016c6c <VCache::~VCache()>
c0016ccf:	83 c4 10             	add    esp,0x10
c0016cd2:	83 ec 08             	sub    esp,0x8
c0016cd5:	6a 44                	push   0x44
c0016cd7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016cdb:	e8 55 bd ff ff       	call   c0012a35 <operator delete(void*, unsigned long)>
c0016ce0:	83 c4 10             	add    esp,0x10
c0016ce3:	83 c4 0c             	add    esp,0xc
c0016ce6:	c3                   	ret    
c0016ce7:	90                   	nop

c0016ce8 <VCache::write(unsigned long long, int, void*)>:
c0016ce8:	55                   	push   ebp
c0016ce9:	57                   	push   edi
c0016cea:	56                   	push   esi
c0016ceb:	53                   	push   ebx
c0016cec:	83 ec 28             	sub    esp,0x28
c0016cef:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0016cf3:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0016cf7:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0016cfb:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0016cff:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016d02:	e8 39 6f 00 00       	call   c001dc40 <Semaphore::acquire()>
c0016d07:	83 c4 10             	add    esp,0x10
c0016d0a:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0016d0e:	74 0c                	je     c0016d1c <VCache::write(unsigned long long, int, void*)+0x34>
c0016d10:	83 ec 0c             	sub    esp,0xc
c0016d13:	53                   	push   ebx
c0016d14:	e8 07 ff ff ff       	call   c0016c20 <VCache::invalidateReadBuffer()>
c0016d19:	83 c4 10             	add    esp,0x10
c0016d1c:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0016d20:	74 66                	je     c0016d88 <VCache::write(unsigned long long, int, void*)+0xa0>
c0016d22:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016d25:	99                   	cdq    
c0016d26:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016d2a:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c0016d2d:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c0016d30:	89 c1                	mov    ecx,eax
c0016d32:	89 d0                	mov    eax,edx
c0016d34:	31 f1                	xor    ecx,esi
c0016d36:	31 f8                	xor    eax,edi
c0016d38:	89 ca                	mov    edx,ecx
c0016d3a:	09 c2                	or     edx,eax
c0016d3c:	75 3e                	jne    c0016d7c <VCache::write(unsigned long long, int, void*)+0x94>
c0016d3e:	83 fd 01             	cmp    ebp,0x1
c0016d41:	75 39                	jne    c0016d7c <VCache::write(unsigned long long, int, void*)+0x94>
c0016d43:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016d46:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016d4c:	51                   	push   ecx
c0016d4d:	50                   	push   eax
c0016d4e:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016d52:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0016d56:	0f af c8             	imul   ecx,eax
c0016d59:	03 4b 28             	add    ecx,DWORD PTR [ebx+0x28]
c0016d5c:	51                   	push   ecx
c0016d5d:	e8 e2 99 fe ff       	call   c0000744 <memcpy>
c0016d62:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016d65:	83 c4 10             	add    esp,0x10
c0016d68:	40                   	inc    eax
c0016d69:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0016d6c:	83 c0 80             	add    eax,0xffffff80
c0016d6f:	75 57                	jne    c0016dc8 <VCache::write(unsigned long long, int, void*)+0xe0>
c0016d71:	83 ec 0c             	sub    esp,0xc
c0016d74:	53                   	push   ebx
c0016d75:	e8 b6 fe ff ff       	call   c0016c30 <VCache::writeWriteBuffer()>
c0016d7a:	eb 34                	jmp    c0016db0 <VCache::write(unsigned long long, int, void*)+0xc8>
c0016d7c:	83 ec 0c             	sub    esp,0xc
c0016d7f:	53                   	push   ebx
c0016d80:	e8 ab fe ff ff       	call   c0016c30 <VCache::writeWriteBuffer()>
c0016d85:	83 c4 10             	add    esp,0x10
c0016d88:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016d8b:	83 fd 7f             	cmp    ebp,0x7f
c0016d8e:	7f 25                	jg     c0016db5 <VCache::write(unsigned long long, int, void*)+0xcd>
c0016d90:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0016d93:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c0016d96:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c0016d99:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c0016d9d:	52                   	push   edx
c0016d9e:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0016da4:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016da8:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0016dab:	e8 94 99 fe ff       	call   c0000744 <memcpy>
c0016db0:	83 c4 10             	add    esp,0x10
c0016db3:	eb 13                	jmp    c0016dc8 <VCache::write(unsigned long long, int, void*)+0xe0>
c0016db5:	83 ec 0c             	sub    esp,0xc
c0016db8:	8b 10                	mov    edx,DWORD PTR [eax]
c0016dba:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0016dbe:	55                   	push   ebp
c0016dbf:	57                   	push   edi
c0016dc0:	56                   	push   esi
c0016dc1:	50                   	push   eax
c0016dc2:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0016dc5:	83 c4 20             	add    esp,0x20
c0016dc8:	83 ec 0c             	sub    esp,0xc
c0016dcb:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016dce:	e8 1b 74 00 00       	call   c001e1ee <Semaphore::release()>
c0016dd3:	83 c4 2c             	add    esp,0x2c
c0016dd6:	31 c0                	xor    eax,eax
c0016dd8:	5b                   	pop    ebx
c0016dd9:	5e                   	pop    esi
c0016dda:	5f                   	pop    edi
c0016ddb:	5d                   	pop    ebp
c0016ddc:	c3                   	ret    
c0016ddd:	90                   	nop

c0016dde <VCache::read(unsigned long long, int, void*)>:
c0016dde:	55                   	push   ebp
c0016ddf:	57                   	push   edi
c0016de0:	56                   	push   esi
c0016de1:	53                   	push   ebx
c0016de2:	83 ec 28             	sub    esp,0x28
c0016de5:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0016de9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016ded:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0016df1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016df5:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0016df9:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0016dfd:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0016e01:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016e04:	e8 37 6e 00 00       	call   c001dc40 <Semaphore::acquire()>
c0016e09:	83 c4 10             	add    esp,0x10
c0016e0c:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0016e10:	74 0c                	je     c0016e1e <VCache::read(unsigned long long, int, void*)+0x40>
c0016e12:	83 ec 0c             	sub    esp,0xc
c0016e15:	53                   	push   ebx
c0016e16:	e8 15 fe ff ff       	call   c0016c30 <VCache::writeWriteBuffer()>
c0016e1b:	83 c4 10             	add    esp,0x10
c0016e1e:	83 fe 01             	cmp    esi,0x1
c0016e21:	0f 85 80 00 00 00    	jne    c0016ea7 <VCache::read(unsigned long long, int, void*)+0xc9>
c0016e27:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016e2a:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c0016e31:	75 74                	jne    c0016ea7 <VCache::read(unsigned long long, int, void*)+0xc9>
c0016e33:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0016e36:	89 d1                	mov    ecx,edx
c0016e38:	f7 d9                	neg    ecx
c0016e3a:	89 cf                	mov    edi,ecx
c0016e3c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0016e40:	c1 ff 1f             	sar    edi,0x1f
c0016e43:	23 0c 24             	and    ecx,DWORD PTR [esp]
c0016e46:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0016e4a:	89 ce                	mov    esi,ecx
c0016e4c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016e50:	23 4c 24 04          	and    ecx,DWORD PTR [esp+0x4]
c0016e54:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0016e58:	89 cf                	mov    edi,ecx
c0016e5a:	74 0a                	je     c0016e66 <VCache::read(unsigned long long, int, void*)+0x88>
c0016e5c:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c0016e5f:	75 05                	jne    c0016e66 <VCache::read(unsigned long long, int, void*)+0x88>
c0016e61:	39 73 30             	cmp    DWORD PTR [ebx+0x30],esi
c0016e64:	74 1c                	je     c0016e82 <VCache::read(unsigned long long, int, void*)+0xa4>
c0016e66:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c0016e6a:	89 73 30             	mov    DWORD PTR [ebx+0x30],esi
c0016e6d:	89 7b 34             	mov    DWORD PTR [ebx+0x34],edi
c0016e70:	83 ec 0c             	sub    esp,0xc
c0016e73:	8b 08                	mov    ecx,DWORD PTR [eax]
c0016e75:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0016e78:	52                   	push   edx
c0016e79:	57                   	push   edi
c0016e7a:	56                   	push   esi
c0016e7b:	50                   	push   eax
c0016e7c:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c0016e7f:	83 c4 20             	add    esp,0x20
c0016e82:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016e85:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0016e8b:	50                   	push   eax
c0016e8c:	52                   	push   edx
c0016e8d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0016e90:	48                   	dec    eax
c0016e91:	23 44 24 08          	and    eax,DWORD PTR [esp+0x8]
c0016e95:	0f af c2             	imul   eax,edx
c0016e98:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c0016e9b:	50                   	push   eax
c0016e9c:	55                   	push   ebp
c0016e9d:	e8 a2 98 fe ff       	call   c0000744 <memcpy>
c0016ea2:	83 c4 10             	add    esp,0x10
c0016ea5:	eb 21                	jmp    c0016ec8 <VCache::read(unsigned long long, int, void*)+0xea>
c0016ea7:	83 ec 0c             	sub    esp,0xc
c0016eaa:	53                   	push   ebx
c0016eab:	e8 70 fd ff ff       	call   c0016c20 <VCache::invalidateReadBuffer()>
c0016eb0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016eb3:	8b 10                	mov    edx,DWORD PTR [eax]
c0016eb5:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0016eb8:	56                   	push   esi
c0016eb9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016ebd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016ec1:	50                   	push   eax
c0016ec2:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0016ec5:	83 c4 20             	add    esp,0x20
c0016ec8:	83 ec 0c             	sub    esp,0xc
c0016ecb:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016ece:	e8 1b 73 00 00       	call   c001e1ee <Semaphore::release()>
c0016ed3:	83 c4 2c             	add    esp,0x2c
c0016ed6:	31 c0                	xor    eax,eax
c0016ed8:	5b                   	pop    ebx
c0016ed9:	5e                   	pop    esi
c0016eda:	5f                   	pop    edi
c0016edb:	5d                   	pop    ebp
c0016edc:	c3                   	ret    
c0016edd:	90                   	nop

c0016ede <Video::putrect(int, int, int, int, unsigned int)>:
c0016ede:	55                   	push   ebp
c0016edf:	57                   	push   edi
c0016ee0:	56                   	push   esi
c0016ee1:	53                   	push   ebx
c0016ee2:	83 ec 1c             	sub    esp,0x1c
c0016ee5:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0016ee9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016eed:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0016ef1:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0016ef5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016ef9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016efd:	01 df                	add    edi,ebx
c0016eff:	39 fb                	cmp    ebx,edi
c0016f01:	7d 1f                	jge    c0016f22 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c0016f03:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0016f07:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0016f0b:	7d 12                	jge    c0016f1f <Video::putrect(int, int, int, int, unsigned int)+0x41>
c0016f0d:	8b 16                	mov    edx,DWORD PTR [esi]
c0016f0f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0016f13:	53                   	push   ebx
c0016f14:	55                   	push   ebp
c0016f15:	45                   	inc    ebp
c0016f16:	56                   	push   esi
c0016f17:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0016f1a:	83 c4 10             	add    esp,0x10
c0016f1d:	eb e8                	jmp    c0016f07 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c0016f1f:	43                   	inc    ebx
c0016f20:	eb dd                	jmp    c0016eff <Video::putrect(int, int, int, int, unsigned int)+0x21>
c0016f22:	83 c4 1c             	add    esp,0x1c
c0016f25:	5b                   	pop    ebx
c0016f26:	5e                   	pop    esi
c0016f27:	5f                   	pop    edi
c0016f28:	5d                   	pop    ebp
c0016f29:	c3                   	ret    

c0016f2a <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c0016f2a:	55                   	push   ebp
c0016f2b:	57                   	push   edi
c0016f2c:	31 ff                	xor    edi,edi
c0016f2e:	56                   	push   esi
c0016f2f:	53                   	push   ebx
c0016f30:	83 ec 1c             	sub    esp,0x1c
c0016f33:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0016f37:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0016f3b:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c0016f42:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c0016f47:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016f4b:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0016f4f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016f53:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c0016f56:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0016f5a:	01 f9                	add    ecx,edi
c0016f5c:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c0016f60:	7d 2f                	jge    c0016f91 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c0016f62:	31 f6                	xor    esi,esi
c0016f64:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0016f68:	01 f2                	add    edx,esi
c0016f6a:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c0016f6e:	7d 1a                	jge    c0016f8a <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c0016f70:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0016f73:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c0016f76:	46                   	inc    esi
c0016f77:	51                   	push   ecx
c0016f78:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0016f7c:	52                   	push   edx
c0016f7d:	55                   	push   ebp
c0016f7e:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016f81:	83 c4 10             	add    esp,0x10
c0016f84:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016f88:	eb da                	jmp    c0016f64 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c0016f8a:	47                   	inc    edi
c0016f8b:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c0016f8f:	eb c5                	jmp    c0016f56 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c0016f91:	83 c4 1c             	add    esp,0x1c
c0016f94:	5b                   	pop    ebx
c0016f95:	5e                   	pop    esi
c0016f96:	5f                   	pop    edi
c0016f97:	5d                   	pop    ebp
c0016f98:	c3                   	ret    
c0016f99:	90                   	nop

c0016f9a <Video::blit(unsigned int*, int, int, int, int)>:
c0016f9a:	55                   	push   ebp
c0016f9b:	57                   	push   edi
c0016f9c:	56                   	push   esi
c0016f9d:	53                   	push   ebx
c0016f9e:	83 ec 1c             	sub    esp,0x1c
c0016fa1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016fa5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016fa9:	85 c0                	test   eax,eax
c0016fab:	79 02                	jns    c0016faf <Video::blit(unsigned int*, int, int, int, int)+0x15>
c0016fad:	31 c0                	xor    eax,eax
c0016faf:	c1 e0 02             	shl    eax,0x2
c0016fb2:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0016fb6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016fba:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016fbe:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0016fc2:	39 d8                	cmp    eax,ebx
c0016fc4:	7e 49                	jle    c001700f <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0016fc6:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0016fcc:	7c 41                	jl     c001700f <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0016fce:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0016fd2:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0016fd6:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0016fda:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c0016fde:	39 f9                	cmp    ecx,edi
c0016fe0:	7e 22                	jle    c0017004 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c0016fe2:	83 c5 04             	add    ebp,0x4
c0016fe5:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0016feb:	7c 14                	jl     c0017001 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c0016fed:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0016fef:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c0016ff2:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016ff6:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016ffa:	56                   	push   esi
c0016ffb:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c0016ffe:	83 c4 10             	add    esp,0x10
c0017001:	47                   	inc    edi
c0017002:	eb d2                	jmp    c0016fd6 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c0017004:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017008:	43                   	inc    ebx
c0017009:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c001700d:	eb ab                	jmp    c0016fba <Video::blit(unsigned int*, int, int, int, int)+0x20>
c001700f:	83 c4 1c             	add    esp,0x1c
c0017012:	5b                   	pop    ebx
c0017013:	5e                   	pop    esi
c0017014:	5f                   	pop    edi
c0017015:	5d                   	pop    ebp
c0017016:	c3                   	ret    
c0017017:	90                   	nop

c0017018 <Video::clearScreen(unsigned int)>:
c0017018:	57                   	push   edi
c0017019:	56                   	push   esi
c001701a:	53                   	push   ebx
c001701b:	31 db                	xor    ebx,ebx
c001701d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0017021:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0017027:	7e 1f                	jle    c0017048 <Video::clearScreen(unsigned int)+0x30>
c0017029:	31 ff                	xor    edi,edi
c001702b:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0017031:	7e 12                	jle    c0017045 <Video::clearScreen(unsigned int)+0x2d>
c0017033:	8b 06                	mov    eax,DWORD PTR [esi]
c0017035:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017039:	53                   	push   ebx
c001703a:	57                   	push   edi
c001703b:	47                   	inc    edi
c001703c:	56                   	push   esi
c001703d:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017040:	83 c4 10             	add    esp,0x10
c0017043:	eb e6                	jmp    c001702b <Video::clearScreen(unsigned int)+0x13>
c0017045:	43                   	inc    ebx
c0017046:	eb d9                	jmp    c0017021 <Video::clearScreen(unsigned int)+0x9>
c0017048:	5b                   	pop    ebx
c0017049:	5e                   	pop    esi
c001704a:	5f                   	pop    edi
c001704b:	c3                   	ret    

c001704c <Video::putpixel(int, int, unsigned int)>:
c001704c:	c7 44 24 04 5c ab 02 c0 	mov    DWORD PTR [esp+0x4],0xc002ab5c
c0017054:	e9 d6 2f 00 00       	jmp    c001a02f <Krnl::panic(char const*)>
c0017059:	90                   	nop

c001705a <Video::Video(char const*)>:
c001705a:	83 ec 0c             	sub    esp,0xc
c001705d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017061:	83 ec 08             	sub    esp,0x8
c0017064:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017068:	50                   	push   eax
c0017069:	e8 be d0 ff ff       	call   c001412c <Device::Device(char const*)>
c001706e:	83 c4 10             	add    esp,0x10
c0017071:	ba e0 ab 02 c0       	mov    edx,0xc002abe0
c0017076:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001707a:	89 10                	mov    DWORD PTR [eax],edx
c001707c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017080:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c001708a:	90                   	nop
c001708b:	83 c4 0c             	add    esp,0xc
c001708e:	c3                   	ret    
c001708f:	90                   	nop

c0017090 <Video::~Video()>:
c0017090:	83 ec 0c             	sub    esp,0xc
c0017093:	ba e0 ab 02 c0       	mov    edx,0xc002abe0
c0017098:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001709c:	89 10                	mov    DWORD PTR [eax],edx
c001709e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00170a2:	83 ec 0c             	sub    esp,0xc
c00170a5:	50                   	push   eax
c00170a6:	e8 63 cd ff ff       	call   c0013e0e <Device::~Device()>
c00170ab:	83 c4 10             	add    esp,0x10
c00170ae:	90                   	nop
c00170af:	83 c4 0c             	add    esp,0xc
c00170b2:	c3                   	ret    
c00170b3:	90                   	nop

c00170b4 <Video::~Video()>:
c00170b4:	83 ec 0c             	sub    esp,0xc
c00170b7:	83 ec 0c             	sub    esp,0xc
c00170ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00170be:	e8 cd ff ff ff       	call   c0017090 <Video::~Video()>
c00170c3:	83 c4 10             	add    esp,0x10
c00170c6:	83 ec 08             	sub    esp,0x8
c00170c9:	68 64 01 00 00       	push   0x164
c00170ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00170d2:	e8 5e b9 ff ff       	call   c0012a35 <operator delete(void*, unsigned long)>
c00170d7:	83 c4 10             	add    esp,0x10
c00170da:	83 c4 0c             	add    esp,0xc
c00170dd:	c3                   	ret    

c00170de <Video::isMonochrome()>:
c00170de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00170e2:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c00170e8:	c3                   	ret    
c00170e9:	90                   	nop

c00170ea <Video::getWidth()>:
c00170ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00170ee:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00170f4:	c3                   	ret    
c00170f5:	90                   	nop

c00170f6 <Video::getHeight()>:
c00170f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00170fa:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0017100:	c3                   	ret    
c0017101:	90                   	nop

c0017102 <Video::drawCursor(int, int, unsigned char*, int)>:
c0017102:	55                   	push   ebp
c0017103:	57                   	push   edi
c0017104:	56                   	push   esi
c0017105:	53                   	push   ebx
c0017106:	83 ec 2c             	sub    esp,0x2c
c0017109:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001710d:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0017111:	83 f8 01             	cmp    eax,0x1
c0017114:	19 c9                	sbb    ecx,ecx
c0017116:	31 db                	xor    ebx,ebx
c0017118:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c001711c:	89 cd                	mov    ebp,ecx
c001711e:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c0017126:	f7 d5                	not    ebp
c0017128:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c001712e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0017132:	01 d8                	add    eax,ebx
c0017134:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017138:	56                   	push   esi
c0017139:	e8 b8 ff ff ff       	call   c00170f6 <Video::getHeight()>
c001713e:	59                   	pop    ecx
c001713f:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0017143:	7e 70                	jle    c00171b5 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c0017145:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0017149:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c001714d:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c0017150:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017154:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0017158:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c001715f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017163:	89 f8                	mov    eax,edi
c0017165:	83 c0 20             	add    eax,0x20
c0017168:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001716c:	56                   	push   esi
c001716d:	e8 78 ff ff ff       	call   c00170ea <Video::getWidth()>
c0017172:	5a                   	pop    edx
c0017173:	39 c7                	cmp    edi,eax
c0017175:	7d 34                	jge    c00171ab <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c0017177:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c001717c:	74 05                	je     c0017183 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c001717e:	8b 06                	mov    eax,DWORD PTR [esi]
c0017180:	55                   	push   ebp
c0017181:	eb 0d                	jmp    c0017190 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c0017183:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c0017188:	74 12                	je     c001719c <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c001718a:	8b 06                	mov    eax,DWORD PTR [esi]
c001718c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017190:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017194:	57                   	push   edi
c0017195:	56                   	push   esi
c0017196:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017199:	83 c4 10             	add    esp,0x10
c001719c:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c00171a0:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c00171a4:	47                   	inc    edi
c00171a5:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c00171a9:	75 c1                	jne    c001716c <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c00171ab:	43                   	inc    ebx
c00171ac:	83 fb 20             	cmp    ebx,0x20
c00171af:	0f 85 79 ff ff ff    	jne    c001712e <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c00171b5:	83 c4 2c             	add    esp,0x2c
c00171b8:	5b                   	pop    ebx
c00171b9:	5e                   	pop    esi
c00171ba:	5f                   	pop    edi
c00171bb:	5d                   	pop    ebp
c00171bc:	c3                   	ret    
c00171bd:	90                   	nop

c00171be <Video::tgaParse(unsigned char*, int, int*, int*)>:
c00171be:	55                   	push   ebp
c00171bf:	57                   	push   edi
c00171c0:	56                   	push   esi
c00171c1:	53                   	push   ebx
c00171c2:	83 ec 28             	sub    esp,0x28
c00171c5:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00171c9:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c00171cd:	0f b6 7b 0d          	movzx  edi,BYTE PTR [ebx+0xd]
c00171d1:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c00171d5:	c1 e7 08             	shl    edi,0x8
c00171d8:	01 c7                	add    edi,eax
c00171da:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c00171de:	c1 e0 08             	shl    eax,0x8
c00171e1:	01 d0                	add    eax,edx
c00171e3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00171e7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00171eb:	0f af c7             	imul   eax,edi
c00171ee:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c00171f5:	50                   	push   eax
c00171f6:	e8 4b 86 ff ff       	call   c000f846 <malloc>
c00171fb:	83 c4 10             	add    esp,0x10
c00171fe:	89 c5                	mov    ebp,eax
c0017200:	85 c0                	test   eax,eax
c0017202:	75 15                	jne    c0017219 <Video::tgaParse(unsigned char*, int, int*, int*)+0x5b>
c0017204:	83 ec 0c             	sub    esp,0xc
c0017207:	68 7d ab 02 c0       	push   0xc002ab7d
c001720c:	e8 04 b9 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c0017211:	83 c4 10             	add    esp,0x10
c0017214:	e9 1c 01 00 00       	jmp    c0017335 <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c0017219:	be 12 00 00 00       	mov    esi,0x12
c001721e:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c0017222:	74 11                	je     c0017235 <Video::tgaParse(unsigned char*, int, int*, int*)+0x77>
c0017224:	0f b6 73 07          	movzx  esi,BYTE PTR [ebx+0x7]
c0017228:	0f b7 43 05          	movzx  eax,WORD PTR [ebx+0x5]
c001722c:	c1 fe 03             	sar    esi,0x3
c001722f:	0f af f0             	imul   esi,eax
c0017232:	83 c6 12             	add    esi,0x12
c0017235:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c0017239:	74 04                	je     c001723f <Video::tgaParse(unsigned char*, int, int*, int*)+0x81>
c001723b:	85 ff                	test   edi,edi
c001723d:	75 12                	jne    c0017251 <Video::tgaParse(unsigned char*, int, int*, int*)+0x93>
c001723f:	83 ec 0c             	sub    esp,0xc
c0017242:	68 94 ab 02 c0       	push   0xc002ab94
c0017247:	e8 c9 b8 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c001724c:	e9 ce 00 00 00       	jmp    c001731f <Video::tgaParse(unsigned char*, int, int*, int*)+0x161>
c0017251:	52                   	push   edx
c0017252:	52                   	push   edx
c0017253:	0f b6 43 02          	movzx  eax,BYTE PTR [ebx+0x2]
c0017257:	50                   	push   eax
c0017258:	68 a9 ab 02 c0       	push   0xc002aba9
c001725d:	e8 b3 b8 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c0017262:	0f b6 53 02          	movzx  edx,BYTE PTR [ebx+0x2]
c0017266:	83 c4 10             	add    esp,0x10
c0017269:	80 fa 02             	cmp    dl,0x2
c001726c:	0f 85 98 00 00 00    	jne    c001730a <Video::tgaParse(unsigned char*, int, int*, int*)+0x14c>
c0017272:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c0017277:	75 10                	jne    c0017289 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c0017279:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c001727d:	75 0a                	jne    c0017289 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c001727f:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0017282:	83 e8 18             	sub    eax,0x18
c0017285:	a8 f7                	test   al,0xf7
c0017287:	74 0a                	je     c0017293 <Video::tgaParse(unsigned char*, int, int*, int*)+0xd5>
c0017289:	83 ec 0c             	sub    esp,0xc
c001728c:	68 b6 ab 02 c0       	push   0xc002abb6
c0017291:	eb 7f                	jmp    c0017312 <Video::tgaParse(unsigned char*, int, int*, int*)+0x154>
c0017293:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001729b:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00172a3:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00172a7:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00172af:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c00172b3:	75 0c                	jne    c00172c1 <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c00172b5:	0f b6 44 33 03       	movzx  eax,BYTE PTR [ebx+esi*1+0x3]
c00172ba:	c1 e0 18             	shl    eax,0x18
c00172bd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00172c1:	41                   	inc    ecx
c00172c2:	0f b6 54 33 02       	movzx  edx,BYTE PTR [ebx+esi*1+0x2]
c00172c7:	c1 e2 10             	shl    edx,0x10
c00172ca:	89 d0                	mov    eax,edx
c00172cc:	0f b6 54 33 01       	movzx  edx,BYTE PTR [ebx+esi*1+0x1]
c00172d1:	c1 e2 08             	shl    edx,0x8
c00172d4:	09 c2                	or     edx,eax
c00172d6:	0f b6 04 33          	movzx  eax,BYTE PTR [ebx+esi*1]
c00172da:	09 c2                	or     edx,eax
c00172dc:	0b 54 24 08          	or     edx,DWORD PTR [esp+0x8]
c00172e0:	89 54 8d fc          	mov    DWORD PTR [ebp+ecx*4-0x4],edx
c00172e4:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c00172e8:	c1 f8 03             	sar    eax,0x3
c00172eb:	01 c6                	add    esi,eax
c00172ed:	89 c8                	mov    eax,ecx
c00172ef:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c00172f3:	39 c7                	cmp    edi,eax
c00172f5:	7f b0                	jg     c00172a7 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c00172f7:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00172fb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00172ff:	39 14 24             	cmp    DWORD PTR [esp],edx
c0017302:	7e 22                	jle    c0017326 <Video::tgaParse(unsigned char*, int, int*, int*)+0x168>
c0017304:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0017308:	eb 99                	jmp    c00172a3 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe5>
c001730a:	50                   	push   eax
c001730b:	50                   	push   eax
c001730c:	52                   	push   edx
c001730d:	68 c4 ab 02 c0       	push   0xc002abc4
c0017312:	e8 fe b7 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c0017317:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001731a:	e8 37 85 ff ff       	call   c000f856 <free>
c001731f:	83 c4 10             	add    esp,0x10
c0017322:	31 ed                	xor    ebp,ebp
c0017324:	eb 0f                	jmp    c0017335 <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c0017326:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001732a:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c001732d:	89 38                	mov    DWORD PTR [eax],edi
c001732f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017333:	89 08                	mov    DWORD PTR [eax],ecx
c0017335:	83 c4 1c             	add    esp,0x1c
c0017338:	89 e8                	mov    eax,ebp
c001733a:	5b                   	pop    ebx
c001733b:	5e                   	pop    esi
c001733c:	5f                   	pop    edi
c001733d:	5d                   	pop    ebp
c001733e:	c3                   	ret    
c001733f:	90                   	nop

c0017340 <Video::putTGA(int, int, unsigned char*, int)>:
c0017340:	55                   	push   ebp
c0017341:	57                   	push   edi
c0017342:	56                   	push   esi
c0017343:	53                   	push   ebx
c0017344:	83 ec 28             	sub    esp,0x28
c0017347:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001734b:	8d 44 24 18          	lea    eax,[esp+0x18]
c001734f:	50                   	push   eax
c0017350:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017354:	50                   	push   eax
c0017355:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0017359:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001735d:	56                   	push   esi
c001735e:	e8 5b fe ff ff       	call   c00171be <Video::tgaParse(unsigned char*, int, int*, int*)>
c0017363:	83 c4 20             	add    esp,0x20
c0017366:	85 c0                	test   eax,eax
c0017368:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001736c:	74 35                	je     c00173a3 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c001736e:	89 c7                	mov    edi,eax
c0017370:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017374:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0017378:	39 d8                	cmp    eax,ebx
c001737a:	7e 27                	jle    c00173a3 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c001737c:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0017380:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017384:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0017388:	39 e8                	cmp    eax,ebp
c001738a:	7e 14                	jle    c00173a0 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c001738c:	8b 06                	mov    eax,DWORD PTR [esi]
c001738e:	83 c7 04             	add    edi,0x4
c0017391:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c0017394:	53                   	push   ebx
c0017395:	55                   	push   ebp
c0017396:	45                   	inc    ebp
c0017397:	56                   	push   esi
c0017398:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001739b:	83 c4 10             	add    esp,0x10
c001739e:	eb e0                	jmp    c0017380 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c00173a0:	43                   	inc    ebx
c00173a1:	eb cd                	jmp    c0017370 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c00173a3:	83 c4 1c             	add    esp,0x1c
c00173a6:	5b                   	pop    ebx
c00173a7:	5e                   	pop    esi
c00173a8:	5f                   	pop    edi
c00173a9:	5d                   	pop    ebp
c00173aa:	c3                   	ret    
c00173ab:	90                   	nop

c00173ac <ACPI::close(int, int, void*)>:
c00173ac:	83 ec 1c             	sub    esp,0x1c
c00173af:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c00173b7:	74 0a                	je     c00173c3 <ACPI::close(int, int, void*)+0x17>
c00173b9:	b8 00 00 00 00       	mov    eax,0x0
c00173be:	e9 9a 00 00 00       	jmp    c001745d <ACPI::close(int, int, void*)+0xb1>
c00173c3:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00173c8:	75 37                	jne    c0017401 <ACPI::close(int, int, void*)+0x55>
c00173ca:	83 ec 0c             	sub    esp,0xc
c00173cd:	68 20 ac 02 c0       	push   0xc002ac20
c00173d2:	e8 3e b7 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c00173d7:	83 c4 10             	add    esp,0x10
c00173da:	a1 28 02 03 c0       	mov    eax,ds:0xc0030228
c00173df:	85 c0                	test   eax,eax
c00173e1:	74 07                	je     c00173ea <ACPI::close(int, int, void*)+0x3e>
c00173e3:	a1 28 02 03 c0       	mov    eax,ds:0xc0030228
c00173e8:	ff d0                	call   eax
c00173ea:	83 ec 0c             	sub    esp,0xc
c00173ed:	68 44 ad 02 c0       	push   0xc002ad44
c00173f2:	e8 38 2c 00 00       	call   c001a02f <Krnl::panic(char const*)>
c00173f7:	83 c4 10             	add    esp,0x10
c00173fa:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00173ff:	eb 5c                	jmp    c001745d <ACPI::close(int, int, void*)+0xb1>
c0017401:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0017406:	75 50                	jne    c0017458 <ACPI::close(int, int, void*)+0xac>
c0017408:	a1 24 02 03 c0       	mov    eax,ds:0xc0030224
c001740d:	85 c0                	test   eax,eax
c001740f:	74 07                	je     c0017418 <ACPI::close(int, int, void*)+0x6c>
c0017411:	a1 24 02 03 c0       	mov    eax,ds:0xc0030224
c0017416:	ff d0                	call   eax
c0017418:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c001741d:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0017422:	83 e0 02             	and    eax,0x2
c0017425:	74 1c                	je     c0017443 <ACPI::close(int, int, void*)+0x97>
c0017427:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c001742e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017432:	89 c2                	mov    edx,eax
c0017434:	ec                   	in     al,dx
c0017435:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0017439:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c001743d:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017441:	eb da                	jmp    c001741d <ACPI::close(int, int, void*)+0x71>
c0017443:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c001744a:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c001744f:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0017453:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017457:	ee                   	out    dx,al
c0017458:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001745d:	83 c4 1c             	add    esp,0x1c
c0017460:	c3                   	ret    

c0017461 <findRSDP()>:
c0017461:	83 ec 1c             	sub    esp,0x1c
c0017464:	a1 68 db 02 c0       	mov    eax,ds:0xc002db68
c0017469:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001746f:	83 e0 04             	and    eax,0x4
c0017472:	84 c0                	test   al,al
c0017474:	75 07                	jne    c001747d <findRSDP()+0x1c>
c0017476:	b8 00 00 00 00       	mov    eax,0x0
c001747b:	eb 6a                	jmp    c00174e7 <findRSDP()+0x86>
c001747d:	a1 b0 db 02 c0       	mov    eax,ds:0xc002dbb0
c0017482:	3d ff 07 00 00       	cmp    eax,0x7ff
c0017487:	7f 1b                	jg     c00174a4 <findRSDP()+0x43>
c0017489:	a1 68 db 02 c0       	mov    eax,ds:0xc002db68
c001748e:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017494:	83 e2 fb             	and    edx,0xfffffffb
c0017497:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c001749d:	b8 00 00 00 00       	mov    eax,0x0
c00174a2:	eb 43                	jmp    c00174e7 <findRSDP()+0x86>
c00174a4:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c00174ac:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c00174b4:	77 2c                	ja     c00174e2 <findRSDP()+0x81>
c00174b6:	83 ec 04             	sub    esp,0x4
c00174b9:	6a 08                	push   0x8
c00174bb:	68 2d ac 02 c0       	push   0xc002ac2d
c00174c0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00174c4:	e8 77 91 fe ff       	call   c0000640 <memcmp>
c00174c9:	83 c4 10             	add    esp,0x10
c00174cc:	85 c0                	test   eax,eax
c00174ce:	0f 94 c0             	sete   al
c00174d1:	84 c0                	test   al,al
c00174d3:	74 06                	je     c00174db <findRSDP()+0x7a>
c00174d5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00174d9:	eb 0c                	jmp    c00174e7 <findRSDP()+0x86>
c00174db:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c00174e0:	eb ca                	jmp    c00174ac <findRSDP()+0x4b>
c00174e2:	b8 00 00 00 00       	mov    eax,0x0
c00174e7:	83 c4 1c             	add    esp,0x1c
c00174ea:	c3                   	ret    

c00174eb <loadACPITables(unsigned char*)>:
c00174eb:	56                   	push   esi
c00174ec:	53                   	push   ebx
c00174ed:	83 ec 44             	sub    esp,0x44
c00174f0:	a1 68 db 02 c0       	mov    eax,ds:0xc002db68
c00174f5:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00174fb:	83 e0 04             	and    eax,0x4
c00174fe:	84 c0                	test   al,al
c0017500:	0f 84 05 02 00 00    	je     c001770b <loadACPITables(unsigned char*)+0x220>
c0017506:	a0 40 04 03 c0       	mov    al,ds:0xc0030440
c001750b:	84 c0                	test   al,al
c001750d:	74 75                	je     c0017584 <loadACPITables(unsigned char*)+0x99>
c001750f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017513:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017517:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001751b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001751e:	83 e8 24             	sub    eax,0x24
c0017521:	c1 e8 03             	shr    eax,0x3
c0017524:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017528:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0017530:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017534:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0017538:	0f 8d b2 00 00 00    	jge    c00175f0 <loadACPITables(unsigned char*)+0x105>
c001753e:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017542:	83 c0 24             	add    eax,0x24
c0017545:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017549:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001754d:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017551:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017555:	c1 e0 03             	shl    eax,0x3
c0017558:	01 44 24 24          	add    DWORD PTR [esp+0x24],eax
c001755c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017560:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0017563:	8b 00                	mov    eax,DWORD PTR [eax]
c0017565:	89 c1                	mov    ecx,eax
c0017567:	a1 2c 02 03 c0       	mov    eax,ds:0xc003022c
c001756c:	8d 50 01             	lea    edx,[eax+0x1]
c001756f:	89 15 2c 02 03 c0    	mov    DWORD PTR ds:0xc003022c,edx
c0017575:	89 ca                	mov    edx,ecx
c0017577:	89 14 c5 44 02 03 c0 	mov    DWORD PTR [eax*8-0x3ffcfdbc],edx
c001757e:	ff 44 24 3c          	inc    DWORD PTR [esp+0x3c]
c0017582:	eb ac                	jmp    c0017530 <loadACPITables(unsigned char*)+0x45>
c0017584:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017588:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001758c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017590:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017593:	83 e8 24             	sub    eax,0x24
c0017596:	c1 e8 02             	shr    eax,0x2
c0017599:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001759d:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c00175a5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00175a9:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c00175ad:	7d 41                	jge    c00175f0 <loadACPITables(unsigned char*)+0x105>
c00175af:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00175b3:	83 c0 24             	add    eax,0x24
c00175b6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00175ba:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00175be:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00175c2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00175c6:	c1 e0 02             	shl    eax,0x2
c00175c9:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c00175cd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00175d1:	8b 08                	mov    ecx,DWORD PTR [eax]
c00175d3:	a1 2c 02 03 c0       	mov    eax,ds:0xc003022c
c00175d8:	8d 50 01             	lea    edx,[eax+0x1]
c00175db:	89 15 2c 02 03 c0    	mov    DWORD PTR ds:0xc003022c,edx
c00175e1:	89 ca                	mov    edx,ecx
c00175e3:	89 14 c5 44 02 03 c0 	mov    DWORD PTR [eax*8-0x3ffcfdbc],edx
c00175ea:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c00175ee:	eb b5                	jmp    c00175a5 <loadACPITables(unsigned char*)+0xba>
c00175f0:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c00175f8:	a1 2c 02 03 c0       	mov    eax,ds:0xc003022c
c00175fd:	39 44 24 34          	cmp    DWORD PTR [esp+0x34],eax
c0017601:	0f 8d 05 01 00 00    	jge    c001770c <loadACPITables(unsigned char*)+0x221>
c0017607:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001760b:	8b 04 c5 44 02 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffcfdbc]
c0017612:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017616:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001761a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001761e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017622:	25 ff 0f 00 00       	and    eax,0xfff
c0017627:	89 c6                	mov    esi,eax
c0017629:	e8 87 a6 ff ff       	call   c0011cb5 <Virt::getAKernelVAS()>
c001762e:	89 c3                	mov    ebx,eax
c0017630:	83 ec 0c             	sub    esp,0xc
c0017633:	6a 01                	push   0x1
c0017635:	e8 eb a4 ff ff       	call   c0011b25 <Virt::allocateKernelVirtualPages(int)>
c001763a:	83 c4 10             	add    esp,0x10
c001763d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017641:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017647:	83 ec 0c             	sub    esp,0xc
c001764a:	6a 01                	push   0x1
c001764c:	6a 01                	push   0x1
c001764e:	50                   	push   eax
c001764f:	52                   	push   edx
c0017650:	53                   	push   ebx
c0017651:	e8 8e ae ff ff       	call   c00124e4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017656:	83 c4 20             	add    esp,0x20
c0017659:	09 f0                	or     eax,esi
c001765b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001765f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017663:	c1 e0 03             	shl    eax,0x3
c0017666:	05 40 02 03 c0       	add    eax,0xc0030240
c001766b:	83 ec 04             	sub    esp,0x4
c001766e:	6a 04                	push   0x4
c0017670:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017674:	50                   	push   eax
c0017675:	e8 ca 90 fe ff       	call   c0000744 <memcpy>
c001767a:	83 c4 10             	add    esp,0x10
c001767d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017681:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017684:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017688:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001768c:	05 00 10 00 00       	add    eax,0x1000
c0017691:	c1 e8 0c             	shr    eax,0xc
c0017694:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017698:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001769c:	89 04 24             	mov    DWORD PTR [esp],eax
c001769f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00176a3:	25 ff 0f 00 00       	and    eax,0xfff
c00176a8:	89 c6                	mov    esi,eax
c00176aa:	e8 06 a6 ff ff       	call   c0011cb5 <Virt::getAKernelVAS()>
c00176af:	89 c3                	mov    ebx,eax
c00176b1:	83 ec 0c             	sub    esp,0xc
c00176b4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00176b8:	e8 68 a4 ff ff       	call   c0011b25 <Virt::allocateKernelVirtualPages(int)>
c00176bd:	83 c4 10             	add    esp,0x10
c00176c0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00176c4:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00176ca:	83 ec 0c             	sub    esp,0xc
c00176cd:	6a 01                	push   0x1
c00176cf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00176d3:	50                   	push   eax
c00176d4:	52                   	push   edx
c00176d5:	53                   	push   ebx
c00176d6:	e8 09 ae ff ff       	call   c00124e4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00176db:	83 c4 20             	add    esp,0x20
c00176de:	09 f0                	or     eax,esi
c00176e0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00176e4:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00176e7:	83 ec 0c             	sub    esp,0xc
c00176ea:	50                   	push   eax
c00176eb:	e8 99 a7 ff ff       	call   c0011e89 <Virt::freeKernelVirtualPages(unsigned long)>
c00176f0:	83 c4 10             	add    esp,0x10
c00176f3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00176f7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00176fb:	89 14 c5 44 02 03 c0 	mov    DWORD PTR [eax*8-0x3ffcfdbc],edx
c0017702:	ff 44 24 34          	inc    DWORD PTR [esp+0x34]
c0017706:	e9 ed fe ff ff       	jmp    c00175f8 <loadACPITables(unsigned char*)+0x10d>
c001770b:	90                   	nop
c001770c:	83 c4 44             	add    esp,0x44
c001770f:	5b                   	pop    ebx
c0017710:	5e                   	pop    esi
c0017711:	c3                   	ret    

c0017712 <findRSDT(unsigned char*)>:
c0017712:	56                   	push   esi
c0017713:	53                   	push   ebx
c0017714:	83 ec 44             	sub    esp,0x44
c0017717:	a1 68 db 02 c0       	mov    eax,ds:0xc002db68
c001771c:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017722:	83 e0 04             	and    eax,0x4
c0017725:	84 c0                	test   al,al
c0017727:	75 0a                	jne    c0017733 <findRSDT(unsigned char*)+0x21>
c0017729:	b8 00 00 00 00       	mov    eax,0x0
c001772e:	e9 f7 00 00 00       	jmp    c001782a <findRSDT(unsigned char*)+0x118>
c0017733:	83 ec 04             	sub    esp,0x4
c0017736:	6a 24                	push   0x24
c0017738:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001773c:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017740:	50                   	push   eax
c0017741:	e8 fe 8f fe ff       	call   c0000744 <memcpy>
c0017746:	83 c4 10             	add    esp,0x10
c0017749:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c001774d:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c0017751:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0017759:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001775d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017761:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017765:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017769:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001776d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017771:	25 ff 0f 00 00       	and    eax,0xfff
c0017776:	89 c6                	mov    esi,eax
c0017778:	e8 38 a5 ff ff       	call   c0011cb5 <Virt::getAKernelVAS()>
c001777d:	89 c3                	mov    ebx,eax
c001777f:	83 ec 0c             	sub    esp,0xc
c0017782:	6a 02                	push   0x2
c0017784:	e8 9c a3 ff ff       	call   c0011b25 <Virt::allocateKernelVirtualPages(int)>
c0017789:	83 c4 10             	add    esp,0x10
c001778c:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0017790:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017796:	83 ec 0c             	sub    esp,0xc
c0017799:	6a 01                	push   0x1
c001779b:	6a 02                	push   0x2
c001779d:	50                   	push   eax
c001779e:	52                   	push   edx
c001779f:	53                   	push   ebx
c00177a0:	e8 3f ad ff ff       	call   c00124e4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00177a5:	83 c4 20             	add    esp,0x20
c00177a8:	09 f0                	or     eax,esi
c00177aa:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00177ae:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00177b2:	25 ff 0f 00 00       	and    eax,0xfff
c00177b7:	89 c6                	mov    esi,eax
c00177b9:	e8 f7 a4 ff ff       	call   c0011cb5 <Virt::getAKernelVAS()>
c00177be:	89 c3                	mov    ebx,eax
c00177c0:	83 ec 0c             	sub    esp,0xc
c00177c3:	6a 02                	push   0x2
c00177c5:	e8 5b a3 ff ff       	call   c0011b25 <Virt::allocateKernelVirtualPages(int)>
c00177ca:	83 c4 10             	add    esp,0x10
c00177cd:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00177d1:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00177d7:	83 ec 0c             	sub    esp,0xc
c00177da:	6a 01                	push   0x1
c00177dc:	6a 02                	push   0x2
c00177de:	50                   	push   eax
c00177df:	52                   	push   edx
c00177e0:	53                   	push   ebx
c00177e1:	e8 fe ac ff ff       	call   c00124e4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00177e6:	83 c4 20             	add    esp,0x20
c00177e9:	09 f0                	or     eax,esi
c00177eb:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00177ef:	80 7c 24 3b 00       	cmp    BYTE PTR [esp+0x3b],0x0
c00177f4:	75 11                	jne    c0017807 <findRSDT(unsigned char*)+0xf5>
c00177f6:	c6 05 40 04 03 c0 00 	mov    BYTE PTR ds:0xc0030440,0x0
c00177fd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017801:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017805:	eb 1f                	jmp    c0017826 <findRSDT(unsigned char*)+0x114>
c0017807:	80 7c 24 3b 02       	cmp    BYTE PTR [esp+0x3b],0x2
c001780c:	75 11                	jne    c001781f <findRSDT(unsigned char*)+0x10d>
c001780e:	c6 05 40 04 03 c0 01 	mov    BYTE PTR ds:0xc0030440,0x1
c0017815:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017819:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001781d:	eb 07                	jmp    c0017826 <findRSDT(unsigned char*)+0x114>
c001781f:	b8 00 00 00 00       	mov    eax,0x0
c0017824:	eb 04                	jmp    c001782a <findRSDT(unsigned char*)+0x118>
c0017826:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001782a:	83 c4 44             	add    esp,0x44
c001782d:	5b                   	pop    ebx
c001782e:	5e                   	pop    esi
c001782f:	c3                   	ret    

c0017830 <findDataTable(unsigned char*, char*)>:
c0017830:	83 ec 1c             	sub    esp,0x1c
c0017833:	a1 68 db 02 c0       	mov    eax,ds:0xc002db68
c0017838:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001783e:	83 e0 04             	and    eax,0x4
c0017841:	84 c0                	test   al,al
c0017843:	75 07                	jne    c001784c <findDataTable(unsigned char*, char*)+0x1c>
c0017845:	b8 00 00 00 00       	mov    eax,0x0
c001784a:	eb 7c                	jmp    c00178c8 <findDataTable(unsigned char*, char*)+0x98>
c001784c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017854:	a1 2c 02 03 c0       	mov    eax,ds:0xc003022c
c0017859:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c001785d:	7d 3a                	jge    c0017899 <findDataTable(unsigned char*, char*)+0x69>
c001785f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017863:	c1 e0 03             	shl    eax,0x3
c0017866:	05 40 02 03 c0       	add    eax,0xc0030240
c001786b:	83 ec 04             	sub    esp,0x4
c001786e:	6a 04                	push   0x4
c0017870:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017874:	50                   	push   eax
c0017875:	e8 c6 8d fe ff       	call   c0000640 <memcmp>
c001787a:	83 c4 10             	add    esp,0x10
c001787d:	85 c0                	test   eax,eax
c001787f:	0f 94 c0             	sete   al
c0017882:	84 c0                	test   al,al
c0017884:	74 0d                	je     c0017893 <findDataTable(unsigned char*, char*)+0x63>
c0017886:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001788a:	8b 04 c5 44 02 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffcfdbc]
c0017891:	eb 35                	jmp    c00178c8 <findDataTable(unsigned char*, char*)+0x98>
c0017893:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017897:	eb bb                	jmp    c0017854 <findDataTable(unsigned char*, char*)+0x24>
c0017899:	a0 40 04 03 c0       	mov    al,ds:0xc0030440
c001789e:	84 c0                	test   al,al
c00178a0:	74 07                	je     c00178a9 <findDataTable(unsigned char*, char*)+0x79>
c00178a2:	b8 58 00 00 00       	mov    eax,0x58
c00178a7:	eb 05                	jmp    c00178ae <findDataTable(unsigned char*, char*)+0x7e>
c00178a9:	b8 52 00 00 00       	mov    eax,0x52
c00178ae:	83 ec 04             	sub    esp,0x4
c00178b1:	50                   	push   eax
c00178b2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00178b6:	68 68 ad 02 c0       	push   0xc002ad68
c00178bb:	e8 55 b2 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c00178c0:	83 c4 10             	add    esp,0x10
c00178c3:	b8 00 00 00 00       	mov    eax,0x0
c00178c8:	83 c4 1c             	add    esp,0x1c
c00178cb:	c3                   	ret    

c00178cc <scanMADT()>:
c00178cc:	53                   	push   ebx
c00178cd:	83 ec 38             	sub    esp,0x38
c00178d0:	a1 68 db 02 c0       	mov    eax,ds:0xc002db68
c00178d5:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00178db:	83 e0 04             	and    eax,0x4
c00178de:	84 c0                	test   al,al
c00178e0:	0f 84 63 04 00 00    	je     c0017d49 <scanMADT()+0x47d>
c00178e6:	e8 76 fb ff ff       	call   c0017461 <findRSDP()>
c00178eb:	a3 4c 04 03 c0       	mov    ds:0xc003044c,eax
c00178f0:	a1 4c 04 03 c0       	mov    eax,ds:0xc003044c
c00178f5:	85 c0                	test   eax,eax
c00178f7:	75 19                	jne    c0017912 <scanMADT()+0x46>
c00178f9:	a1 68 db 02 c0       	mov    eax,ds:0xc002db68
c00178fe:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017904:	83 e2 fb             	and    edx,0xfffffffb
c0017907:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c001790d:	e9 3b 04 00 00       	jmp    c0017d4d <scanMADT()+0x481>
c0017912:	a1 4c 04 03 c0       	mov    eax,ds:0xc003044c
c0017917:	83 ec 0c             	sub    esp,0xc
c001791a:	50                   	push   eax
c001791b:	e8 f2 fd ff ff       	call   c0017712 <findRSDT(unsigned char*)>
c0017920:	83 c4 10             	add    esp,0x10
c0017923:	a3 48 04 03 c0       	mov    ds:0xc0030448,eax
c0017928:	a1 48 04 03 c0       	mov    eax,ds:0xc0030448
c001792d:	85 c0                	test   eax,eax
c001792f:	75 19                	jne    c001794a <scanMADT()+0x7e>
c0017931:	a1 68 db 02 c0       	mov    eax,ds:0xc002db68
c0017936:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c001793c:	83 e2 fb             	and    edx,0xfffffffb
c001793f:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017945:	e9 03 04 00 00       	jmp    c0017d4d <scanMADT()+0x481>
c001794a:	a1 48 04 03 c0       	mov    eax,ds:0xc0030448
c001794f:	83 ec 0c             	sub    esp,0xc
c0017952:	50                   	push   eax
c0017953:	e8 93 fb ff ff       	call   c00174eb <loadACPITables(unsigned char*)>
c0017958:	83 c4 10             	add    esp,0x10
c001795b:	a1 48 04 03 c0       	mov    eax,ds:0xc0030448
c0017960:	83 ec 08             	sub    esp,0x8
c0017963:	68 36 ac 02 c0       	push   0xc002ac36
c0017968:	50                   	push   eax
c0017969:	e8 c2 fe ff ff       	call   c0017830 <findDataTable(unsigned char*, char*)>
c001796e:	83 c4 10             	add    esp,0x10
c0017971:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017975:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c001797a:	75 19                	jne    c0017995 <scanMADT()+0xc9>
c001797c:	a1 68 db 02 c0       	mov    eax,ds:0xc002db68
c0017981:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017987:	83 e2 fe             	and    edx,0xfffffffe
c001798a:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017990:	e9 b8 03 00 00       	jmp    c0017d4d <scanMADT()+0x481>
c0017995:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001799d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00179a1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00179a4:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c00179a8:	0f 87 9f 03 00 00    	ja     c0017d4d <scanMADT()+0x481>
c00179ae:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c00179b6:	0f 87 91 03 00 00    	ja     c0017d4d <scanMADT()+0x481>
c00179bc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00179c0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00179c4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00179c8:	8d 50 01             	lea    edx,[eax+0x1]
c00179cb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00179cf:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00179d3:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00179d7:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c00179db:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00179df:	8d 50 01             	lea    edx,[eax+0x1]
c00179e2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00179e6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00179ea:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00179ee:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c00179f2:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c00179f7:	0f 86 4f 03 00 00    	jbe    c0017d4c <scanMADT()+0x480>
c00179fd:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c0017a02:	75 57                	jne    c0017a5b <scanMADT()+0x18f>
c0017a04:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017a08:	8d 50 01             	lea    edx,[eax+0x1]
c0017a0b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017a0f:	8a 15 40 06 03 c0    	mov    dl,BYTE PTR ds:0xc0030640
c0017a15:	0f b6 d2             	movzx  edx,dl
c0017a18:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017a1c:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017a20:	88 82 80 06 03 c0    	mov    BYTE PTR [edx-0x3ffcf980],al
c0017a26:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017a2a:	8d 50 01             	lea    edx,[eax+0x1]
c0017a2d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017a31:	8a 15 40 06 03 c0    	mov    dl,BYTE PTR ds:0xc0030640
c0017a37:	8d 4a 01             	lea    ecx,[edx+0x1]
c0017a3a:	88 0d 40 06 03 c0    	mov    BYTE PTR ds:0xc0030640,cl
c0017a40:	0f b6 d2             	movzx  edx,dl
c0017a43:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017a47:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017a4b:	88 82 60 06 03 c0    	mov    BYTE PTR [edx-0x3ffcf9a0],al
c0017a51:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017a56:	e9 da 02 00 00       	jmp    c0017d35 <scanMADT()+0x469>
c0017a5b:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c0017a60:	0f 85 14 01 00 00    	jne    c0017b7a <scanMADT()+0x2ae>
c0017a66:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017a6a:	8d 50 01             	lea    edx,[eax+0x1]
c0017a6d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017a71:	8a 15 00 05 03 c0    	mov    dl,BYTE PTR ds:0xc0030500
c0017a77:	0f b6 d2             	movzx  edx,dl
c0017a7a:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017a7e:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017a82:	88 82 20 05 03 c0    	mov    BYTE PTR [edx-0x3ffcfae0],al
c0017a88:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0017a8c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017a90:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017a94:	01 d0                	add    eax,edx
c0017a96:	83 c0 2c             	add    eax,0x2c
c0017a99:	8a 00                	mov    al,BYTE PTR [eax]
c0017a9b:	0f b6 d0             	movzx  edx,al
c0017a9e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017aa2:	8d 48 01             	lea    ecx,[eax+0x1]
c0017aa5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017aa9:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017aad:	0f b6 c0             	movzx  eax,al
c0017ab0:	c1 e0 08             	shl    eax,0x8
c0017ab3:	89 d1                	mov    ecx,edx
c0017ab5:	09 c1                	or     ecx,eax
c0017ab7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017abb:	8d 50 02             	lea    edx,[eax+0x2]
c0017abe:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017ac2:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017ac6:	0f b6 c0             	movzx  eax,al
c0017ac9:	c1 e0 10             	shl    eax,0x10
c0017acc:	09 c1                	or     ecx,eax
c0017ace:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ad2:	8d 50 03             	lea    edx,[eax+0x3]
c0017ad5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017ad9:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017add:	0f b6 c0             	movzx  eax,al
c0017ae0:	c1 e0 18             	shl    eax,0x18
c0017ae3:	09 c1                	or     ecx,eax
c0017ae5:	89 ca                	mov    edx,ecx
c0017ae7:	a0 00 05 03 c0       	mov    al,ds:0xc0030500
c0017aec:	0f b6 c0             	movzx  eax,al
c0017aef:	89 14 85 40 05 03 c0 	mov    DWORD PTR [eax*4-0x3ffcfac0],edx
c0017af6:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017afb:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017aff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017b03:	01 d0                	add    eax,edx
c0017b05:	83 c0 2c             	add    eax,0x2c
c0017b08:	8a 00                	mov    al,BYTE PTR [eax]
c0017b0a:	0f b6 d0             	movzx  edx,al
c0017b0d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017b11:	8d 48 01             	lea    ecx,[eax+0x1]
c0017b14:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017b18:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017b1c:	0f b6 c0             	movzx  eax,al
c0017b1f:	c1 e0 08             	shl    eax,0x8
c0017b22:	89 d1                	mov    ecx,edx
c0017b24:	09 c1                	or     ecx,eax
c0017b26:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017b2a:	8d 50 02             	lea    edx,[eax+0x2]
c0017b2d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017b31:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017b35:	0f b6 c0             	movzx  eax,al
c0017b38:	c1 e0 10             	shl    eax,0x10
c0017b3b:	09 c1                	or     ecx,eax
c0017b3d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017b41:	8d 50 03             	lea    edx,[eax+0x3]
c0017b44:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017b48:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017b4c:	0f b6 c0             	movzx  eax,al
c0017b4f:	c1 e0 18             	shl    eax,0x18
c0017b52:	09 c1                	or     ecx,eax
c0017b54:	89 ca                	mov    edx,ecx
c0017b56:	a0 00 05 03 c0       	mov    al,ds:0xc0030500
c0017b5b:	0f b6 c0             	movzx  eax,al
c0017b5e:	89 14 85 c0 05 03 c0 	mov    DWORD PTR [eax*4-0x3ffcfa40],edx
c0017b65:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017b6a:	a0 00 05 03 c0       	mov    al,ds:0xc0030500
c0017b6f:	40                   	inc    eax
c0017b70:	a2 00 05 03 c0       	mov    ds:0xc0030500,al
c0017b75:	e9 bb 01 00 00       	jmp    c0017d35 <scanMADT()+0x469>
c0017b7a:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c0017b7f:	0f 85 e9 00 00 00    	jne    c0017c6e <scanMADT()+0x3a2>
c0017b85:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017b89:	8d 50 01             	lea    edx,[eax+0x1]
c0017b8c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017b90:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017b94:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017b98:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c0017b9c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ba0:	8d 50 01             	lea    edx,[eax+0x1]
c0017ba3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017ba7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017bab:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017baf:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0017bb3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017bb7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017bbb:	01 d0                	add    eax,edx
c0017bbd:	83 c0 2c             	add    eax,0x2c
c0017bc0:	8a 00                	mov    al,BYTE PTR [eax]
c0017bc2:	0f b6 d0             	movzx  edx,al
c0017bc5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017bc9:	8d 48 01             	lea    ecx,[eax+0x1]
c0017bcc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017bd0:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017bd4:	0f b6 c0             	movzx  eax,al
c0017bd7:	c1 e0 08             	shl    eax,0x8
c0017bda:	89 d1                	mov    ecx,edx
c0017bdc:	09 c1                	or     ecx,eax
c0017bde:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017be2:	8d 50 02             	lea    edx,[eax+0x2]
c0017be5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017be9:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017bed:	0f b6 c0             	movzx  eax,al
c0017bf0:	c1 e0 10             	shl    eax,0x10
c0017bf3:	09 c1                	or     ecx,eax
c0017bf5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017bf9:	8d 50 03             	lea    edx,[eax+0x3]
c0017bfc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017c00:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017c04:	0f b6 c0             	movzx  eax,al
c0017c07:	c1 e0 18             	shl    eax,0x18
c0017c0a:	09 c8                	or     eax,ecx
c0017c0c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017c10:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017c15:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017c19:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017c1d:	01 d0                	add    eax,edx
c0017c1f:	83 c0 2c             	add    eax,0x2c
c0017c22:	8a 00                	mov    al,BYTE PTR [eax]
c0017c24:	0f b6 c0             	movzx  eax,al
c0017c27:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017c2b:	8d 4a 01             	lea    ecx,[edx+0x1]
c0017c2e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017c32:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c0017c36:	0f b6 d2             	movzx  edx,dl
c0017c39:	c1 e2 08             	shl    edx,0x8
c0017c3c:	09 d0                	or     eax,edx
c0017c3e:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0017c43:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0017c48:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c0017c4d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017c51:	88 90 c0 cd 02 c0    	mov    BYTE PTR [eax-0x3ffd3240],dl
c0017c57:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c0017c5c:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0017c61:	66 89 84 12 e0 04 03 c0 	mov    WORD PTR [edx+edx*1-0x3ffcfb20],ax
c0017c69:	e9 c7 00 00 00       	jmp    c0017d35 <scanMADT()+0x469>
c0017c6e:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c0017c73:	0f 85 b0 00 00 00    	jne    c0017d29 <scanMADT()+0x45d>
c0017c79:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017c7d:	8d 50 01             	lea    edx,[eax+0x1]
c0017c80:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017c84:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017c88:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017c8c:	0f b6 c0             	movzx  eax,al
c0017c8f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017c93:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017c97:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017c9b:	01 d0                	add    eax,edx
c0017c9d:	83 c0 2c             	add    eax,0x2c
c0017ca0:	8a 00                	mov    al,BYTE PTR [eax]
c0017ca2:	0f b6 d0             	movzx  edx,al
c0017ca5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ca9:	8d 48 01             	lea    ecx,[eax+0x1]
c0017cac:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017cb0:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017cb4:	0f b6 c0             	movzx  eax,al
c0017cb7:	c1 e0 08             	shl    eax,0x8
c0017cba:	09 d0                	or     eax,edx
c0017cbc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017cc0:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0017cc5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017cc9:	8d 50 01             	lea    edx,[eax+0x1]
c0017ccc:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017cd0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017cd4:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017cd8:	0f b6 c0             	movzx  eax,al
c0017cdb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017cdf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017ce3:	c1 e0 08             	shl    eax,0x8
c0017ce6:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0017cea:	89 c1                	mov    ecx,eax
c0017cec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017cf0:	c1 e0 18             	shl    eax,0x18
c0017cf3:	89 c3                	mov    ebx,eax
c0017cf5:	a1 50 04 03 c0       	mov    eax,ds:0xc0030450
c0017cfa:	8d 50 01             	lea    edx,[eax+0x1]
c0017cfd:	89 15 50 04 03 c0    	mov    DWORD PTR ds:0xc0030450,edx
c0017d03:	09 d9                	or     ecx,ebx
c0017d05:	89 ca                	mov    edx,ecx
c0017d07:	89 14 85 60 04 03 c0 	mov    DWORD PTR [eax*4-0x3ffcfba0],edx
c0017d0e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017d12:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017d16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017d1a:	68 98 ad 02 c0       	push   0xc002ad98
c0017d1f:	e8 f1 ad ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c0017d24:	83 c4 10             	add    esp,0x10
c0017d27:	eb 0c                	jmp    c0017d35 <scanMADT()+0x469>
c0017d29:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c0017d2e:	75 05                	jne    c0017d35 <scanMADT()+0x469>
c0017d30:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c0017d35:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c0017d3a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017d3e:	01 d0                	add    eax,edx
c0017d40:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017d44:	e9 54 fc ff ff       	jmp    c001799d <scanMADT()+0xd1>
c0017d49:	90                   	nop
c0017d4a:	eb 01                	jmp    c0017d4d <scanMADT()+0x481>
c0017d4c:	90                   	nop
c0017d4d:	83 c4 38             	add    esp,0x38
c0017d50:	5b                   	pop    ebx
c0017d51:	c3                   	ret    

c0017d52 <ACPI::ACPI()>:
c0017d52:	83 ec 0c             	sub    esp,0xc
c0017d55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017d59:	83 ec 08             	sub    esp,0x8
c0017d5c:	68 3b ac 02 c0       	push   0xc002ac3b
c0017d61:	50                   	push   eax
c0017d62:	e8 c5 c3 ff ff       	call   c001412c <Device::Device(char const*)>
c0017d67:	83 c4 10             	add    esp,0x10
c0017d6a:	ba 0c ae 02 c0       	mov    edx,0xc002ae0c
c0017d6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017d73:	89 10                	mov    DWORD PTR [eax],edx
c0017d75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017d79:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0017d80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017d84:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0017d8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017d92:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c0017d9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017da0:	c6 80 64 12 00 00 00 	mov    BYTE PTR [eax+0x1264],0x0
c0017da7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017dab:	c6 80 65 12 00 00 00 	mov    BYTE PTR [eax+0x1265],0x0
c0017db2:	e8 15 fb ff ff       	call   c00178cc <scanMADT()>
c0017db7:	90                   	nop
c0017db8:	83 c4 0c             	add    esp,0xc
c0017dbb:	c3                   	ret    

c0017dbc <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c0017dbc:	83 ec 2c             	sub    esp,0x2c
c0017dbf:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0017dc3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017dc7:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0017dcb:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0017dcf:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0017dd4:	88 d0                	mov    al,dl
c0017dd6:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0017dda:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0017ddf:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0017de7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017deb:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017df1:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0017df5:	0f 8d 97 00 00 00    	jge    c0017e92 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c0017dfb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017dff:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017e03:	83 c2 2a             	add    edx,0x2a
c0017e06:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c0017e0a:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0017e0f:	75 78                	jne    c0017e89 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0017e11:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017e15:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017e19:	83 c2 2a             	add    edx,0x2a
c0017e1c:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c0017e20:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c0017e24:	75 63                	jne    c0017e89 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0017e26:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0017e2b:	74 3a                	je     c0017e67 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c0017e2d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017e31:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017e35:	83 c2 2a             	add    edx,0x2a
c0017e38:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c0017e3c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017e40:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017e43:	39 c2                	cmp    edx,eax
c0017e45:	74 10                	je     c0017e57 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c0017e47:	83 ec 0c             	sub    esp,0xc
c0017e4a:	68 d4 ad 02 c0       	push   0xc002add4
c0017e4f:	e8 db 21 00 00       	call   c001a02f <Krnl::panic(char const*)>
c0017e54:	83 c4 10             	add    esp,0x10
c0017e57:	83 ec 0c             	sub    esp,0xc
c0017e5a:	68 40 ac 02 c0       	push   0xc002ac40
c0017e5f:	e8 cb 21 00 00       	call   c001a02f <Krnl::panic(char const*)>
c0017e64:	83 c4 10             	add    esp,0x10
c0017e67:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0017e6b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017e6f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017e73:	83 c2 2a             	add    edx,0x2a
c0017e76:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c0017e7a:	8b 02                	mov    eax,DWORD PTR [edx]
c0017e7c:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0017e7f:	89 01                	mov    DWORD PTR [ecx],eax
c0017e81:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0017e84:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017e89:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0017e8d:	e9 55 ff ff ff       	jmp    c0017de7 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c0017e92:	90                   	nop
c0017e93:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017e97:	83 c4 2c             	add    esp,0x2c
c0017e9a:	c2 04 00             	ret    0x4
c0017e9d:	90                   	nop

c0017e9e <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c0017e9e:	83 ec 1c             	sub    esp,0x1c
c0017ea1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017ea5:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0017ea9:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017ead:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0017eb2:	88 c8                	mov    al,cl
c0017eb4:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0017eb8:	88 d0                	mov    al,dl
c0017eba:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0017ebe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ec2:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0017ec8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ecc:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0017ecf:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0017ed3:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c0017ed7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017edb:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017ee1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017ee5:	8d 48 2a             	lea    ecx,[eax+0x2a]
c0017ee8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017eec:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c0017ef1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ef5:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0017efb:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0017eff:	8d 48 01             	lea    ecx,[eax+0x1]
c0017f02:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f06:	83 c2 2a             	add    edx,0x2a
c0017f09:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c0017f0d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f11:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0017f17:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f1b:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0017f1e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0017f22:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c0017f26:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f2a:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017f30:	8d 50 01             	lea    edx,[eax+0x1]
c0017f33:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f37:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c0017f3d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f41:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017f47:	3d 00 02 00 00       	cmp    eax,0x200
c0017f4c:	75 10                	jne    c0017f5e <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c0017f4e:	83 ec 0c             	sub    esp,0xc
c0017f51:	68 4f ac 02 c0       	push   0xc002ac4f
c0017f56:	e8 d4 20 00 00       	call   c001a02f <Krnl::panic(char const*)>
c0017f5b:	83 c4 10             	add    esp,0x10
c0017f5e:	90                   	nop
c0017f5f:	83 c4 1c             	add    esp,0x1c
c0017f62:	c3                   	ret    
c0017f63:	90                   	nop

c0017f64 <ACPI::setScreenBrightnessLevel(void*, int)>:
c0017f64:	b8 00 00 00 00       	mov    eax,0x0
c0017f69:	c3                   	ret    

c0017f6a <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c0017f6a:	83 ec 1c             	sub    esp,0x1c
c0017f6d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017f71:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0017f74:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017f78:	a1 68 db 02 c0       	mov    eax,ds:0xc002db68
c0017f7d:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0017f82:	83 ec 08             	sub    esp,0x8
c0017f85:	52                   	push   edx
c0017f86:	50                   	push   eax
c0017f87:	e8 d2 6e ff ff       	call   c000ee5e <Computer::readCMOS(unsigned char)>
c0017f8c:	83 c4 10             	add    esp,0x10
c0017f8f:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0017f93:	a1 68 db 02 c0       	mov    eax,ds:0xc002db68
c0017f98:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0017f9d:	83 ec 04             	sub    esp,0x4
c0017fa0:	6a 01                	push   0x1
c0017fa2:	52                   	push   edx
c0017fa3:	50                   	push   eax
c0017fa4:	e8 cb 6f ff ff       	call   c000ef74 <Computer::writeCMOS(unsigned char, unsigned char)>
c0017fa9:	83 c4 10             	add    esp,0x10
c0017fac:	90                   	nop
c0017fad:	83 c4 1c             	add    esp,0x1c
c0017fb0:	c3                   	ret    
c0017fb1:	90                   	nop

c0017fb2 <ACPI::open(int, int, void*)>:
c0017fb2:	53                   	push   ebx
c0017fb3:	83 ec 28             	sub    esp,0x28
c0017fb6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017fba:	c6 80 64 12 00 00 00 	mov    BYTE PTR [eax+0x1264],0x0
c0017fc1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017fc5:	c6 80 65 12 00 00 00 	mov    BYTE PTR [eax+0x1265],0x0
c0017fcc:	a1 68 db 02 c0       	mov    eax,ds:0xc002db68
c0017fd1:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017fd7:	83 e0 04             	and    eax,0x4
c0017fda:	84 c0                	test   al,al
c0017fdc:	74 47                	je     c0018025 <ACPI::open(int, int, void*)+0x73>
c0017fde:	a1 48 04 03 c0       	mov    eax,ds:0xc0030448
c0017fe3:	83 ec 08             	sub    esp,0x8
c0017fe6:	68 6c ac 02 c0       	push   0xc002ac6c
c0017feb:	50                   	push   eax
c0017fec:	e8 3f f8 ff ff       	call   c0017830 <findDataTable(unsigned char*, char*)>
c0017ff1:	83 c4 10             	add    esp,0x10
c0017ff4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017ff8:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0017ffd:	74 26                	je     c0018025 <ACPI::open(int, int, void*)+0x73>
c0017fff:	83 ec 0c             	sub    esp,0xc
c0018002:	68 71 ac 02 c0       	push   0xc002ac71
c0018007:	e8 09 ab ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c001800c:	83 c4 10             	add    esp,0x10
c001800f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018013:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c001801a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001801e:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c0018025:	c7 44 24 18 5f 0c 00 00 	mov    DWORD PTR [esp+0x18],0xc5f
c001802d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018031:	8a 00                	mov    al,BYTE PTR [eax]
c0018033:	3c 01                	cmp    al,0x1
c0018035:	75 28                	jne    c001805f <ACPI::open(int, int, void*)+0xad>
c0018037:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001803b:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0018042:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018046:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c001804d:	83 ec 0c             	sub    esp,0xc
c0018050:	68 82 ac 02 c0       	push   0xc002ac82
c0018055:	e8 bb aa ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c001805a:	83 c4 10             	add    esp,0x10
c001805d:	eb 25                	jmp    c0018084 <ACPI::open(int, int, void*)+0xd2>
c001805f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018063:	8a 00                	mov    al,BYTE PTR [eax]
c0018065:	3c 02                	cmp    al,0x2
c0018067:	75 1b                	jne    c0018084 <ACPI::open(int, int, void*)+0xd2>
c0018069:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001806d:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0018074:	83 ec 0c             	sub    esp,0xc
c0018077:	68 8a ac 02 c0       	push   0xc002ac8a
c001807c:	e8 94 aa ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c0018081:	83 c4 10             	add    esp,0x10
c0018084:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018088:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c001808e:	83 f0 01             	xor    eax,0x1
c0018091:	84 c0                	test   al,al
c0018093:	74 6a                	je     c00180ff <ACPI::open(int, int, void*)+0x14d>
c0018095:	83 ec 0c             	sub    esp,0xc
c0018098:	68 92 ac 02 c0       	push   0xc002ac92
c001809d:	e8 73 aa ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c00180a2:	83 c4 10             	add    esp,0x10
c00180a5:	e8 a6 80 fe ff       	call   c0000150 <manualPCIProbe>
c00180aa:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00180ae:	83 7c 24 14 01       	cmp    DWORD PTR [esp+0x14],0x1
c00180b3:	75 28                	jne    c00180dd <ACPI::open(int, int, void*)+0x12b>
c00180b5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00180b9:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c00180c0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00180c4:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c00180cb:	83 ec 0c             	sub    esp,0xc
c00180ce:	68 a0 ac 02 c0       	push   0xc002aca0
c00180d3:	e8 3d aa ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c00180d8:	83 c4 10             	add    esp,0x10
c00180db:	eb 22                	jmp    c00180ff <ACPI::open(int, int, void*)+0x14d>
c00180dd:	83 7c 24 14 02       	cmp    DWORD PTR [esp+0x14],0x2
c00180e2:	75 1b                	jne    c00180ff <ACPI::open(int, int, void*)+0x14d>
c00180e4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00180e8:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c00180ef:	83 ec 0c             	sub    esp,0xc
c00180f2:	68 aa ac 02 c0       	push   0xc002acaa
c00180f7:	e8 19 aa ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c00180fc:	83 c4 10             	add    esp,0x10
c00180ff:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018103:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c0018109:	84 c0                	test   al,al
c001810b:	74 13                	je     c0018120 <ACPI::open(int, int, void*)+0x16e>
c001810d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018111:	8a 80 65 12 00 00    	mov    al,BYTE PTR [eax+0x1265]
c0018117:	83 f0 01             	xor    eax,0x1
c001811a:	0f b6 c0             	movzx  eax,al
c001811d:	40                   	inc    eax
c001811e:	eb 05                	jmp    c0018125 <ACPI::open(int, int, void*)+0x173>
c0018120:	b8 00 00 00 00       	mov    eax,0x0
c0018125:	83 ec 08             	sub    esp,0x8
c0018128:	50                   	push   eax
c0018129:	68 b4 ac 02 c0       	push   0xc002acb4
c001812e:	e8 e2 a9 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c0018133:	83 c4 10             	add    esp,0x10
c0018136:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001813a:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c0018140:	84 c0                	test   al,al
c0018142:	74 67                	je     c00181ab <ACPI::open(int, int, void*)+0x1f9>
c0018144:	c7 44 24 04 58 01 00 00 	mov    DWORD PTR [esp+0x4],0x158
c001814c:	83 ec 0c             	sub    esp,0xc
c001814f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0018153:	e8 ee 76 ff ff       	call   c000f846 <malloc>
c0018158:	83 c4 10             	add    esp,0x10
c001815b:	89 c3                	mov    ebx,eax
c001815d:	83 ec 0c             	sub    esp,0xc
c0018160:	53                   	push   ebx
c0018161:	e8 5c a0 00 00       	call   c00221c2 <PCI::PCI()>
c0018166:	83 c4 10             	add    esp,0x10
c0018169:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001816d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018171:	83 ec 08             	sub    esp,0x8
c0018174:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0018178:	50                   	push   eax
c0018179:	e8 be bd ff ff       	call   c0013f3c <Device::addChild(Device*)>
c001817e:	83 c4 10             	add    esp,0x10
c0018181:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018185:	8b 00                	mov    eax,DWORD PTR [eax]
c0018187:	83 c0 08             	add    eax,0x8
c001818a:	8b 00                	mov    eax,DWORD PTR [eax]
c001818c:	6a 00                	push   0x0
c001818e:	6a 00                	push   0x0
c0018190:	6a 00                	push   0x0
c0018192:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018196:	ff d0                	call   eax
c0018198:	83 c4 10             	add    esp,0x10
c001819b:	83 ec 0c             	sub    esp,0xc
c001819e:	68 bd ac 02 c0       	push   0xc002acbd
c00181a3:	e8 6d a9 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c00181a8:	83 c4 10             	add    esp,0x10
c00181ab:	83 ec 0c             	sub    esp,0xc
c00181ae:	68 c8 ac 02 c0       	push   0xc002acc8
c00181b3:	e8 02 44 00 00       	call   c001c5ba <Thr::loadKernelSymbolTable(char const*)>
c00181b8:	83 c4 10             	add    esp,0x10
c00181bb:	8b 1d 68 db 02 c0    	mov    ebx,DWORD PTR ds:0xc002db68
c00181c1:	83 ec 08             	sub    esp,0x8
c00181c4:	6a 01                	push   0x1
c00181c6:	68 e6 ac 02 c0       	push   0xc002ace6
c00181cb:	e8 47 4e 00 00       	call   c001d017 <Thr::loadDLL(char const*, bool)>
c00181d0:	83 c4 10             	add    esp,0x10
c00181d3:	83 ec 08             	sub    esp,0x8
c00181d6:	53                   	push   ebx
c00181d7:	50                   	push   eax
c00181d8:	e8 6e 50 00 00       	call   c001d24b <Thr::executeDLL(unsigned long, void*)>
c00181dd:	83 c4 10             	add    esp,0x10
c00181e0:	8b 1d 68 db 02 c0    	mov    ebx,DWORD PTR ds:0xc002db68
c00181e6:	83 ec 08             	sub    esp,0x8
c00181e9:	6a 01                	push   0x1
c00181eb:	68 03 ad 02 c0       	push   0xc002ad03
c00181f0:	e8 22 4e 00 00       	call   c001d017 <Thr::loadDLL(char const*, bool)>
c00181f5:	83 c4 10             	add    esp,0x10
c00181f8:	83 ec 08             	sub    esp,0x8
c00181fb:	53                   	push   ebx
c00181fc:	50                   	push   eax
c00181fd:	e8 49 50 00 00       	call   c001d24b <Thr::executeDLL(unsigned long, void*)>
c0018202:	83 c4 10             	add    esp,0x10
c0018205:	a1 68 db 02 c0       	mov    eax,ds:0xc002db68
c001820a:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0018210:	83 e0 04             	and    eax,0x4
c0018213:	84 c0                	test   al,al
c0018215:	0f 84 d2 00 00 00    	je     c00182ed <ACPI::open(int, int, void*)+0x33b>
c001821b:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0018222:	83 ec 0c             	sub    esp,0xc
c0018225:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0018229:	e8 18 76 ff ff       	call   c000f846 <malloc>
c001822e:	83 c4 10             	add    esp,0x10
c0018231:	89 c3                	mov    ebx,eax
c0018233:	a1 d4 10 03 c0       	mov    eax,ds:0xc00310d4
c0018238:	83 ec 04             	sub    esp,0x4
c001823b:	50                   	push   eax
c001823c:	68 20 ad 02 c0       	push   0xc002ad20
c0018241:	53                   	push   ebx
c0018242:	e8 27 ae ff ff       	call   c001306e <File::File(char const*, Process*)>
c0018247:	83 c4 10             	add    esp,0x10
c001824a:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001824e:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018253:	74 17                	je     c001826c <ACPI::open(int, int, void*)+0x2ba>
c0018255:	83 ec 0c             	sub    esp,0xc
c0018258:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001825c:	e8 df b0 ff ff       	call   c0013340 <File::exists()>
c0018261:	83 c4 10             	add    esp,0x10
c0018264:	84 c0                	test   al,al
c0018266:	74 04                	je     c001826c <ACPI::open(int, int, void*)+0x2ba>
c0018268:	b0 01                	mov    al,0x1
c001826a:	eb 02                	jmp    c001826e <ACPI::open(int, int, void*)+0x2bc>
c001826c:	b0 00                	mov    al,0x0
c001826e:	84 c0                	test   al,al
c0018270:	74 22                	je     c0018294 <ACPI::open(int, int, void*)+0x2e2>
c0018272:	83 ec 08             	sub    esp,0x8
c0018275:	6a 01                	push   0x1
c0018277:	68 20 ad 02 c0       	push   0xc002ad20
c001827c:	e8 96 4d 00 00       	call   c001d017 <Thr::loadDLL(char const*, bool)>
c0018281:	83 c4 10             	add    esp,0x10
c0018284:	83 ec 08             	sub    esp,0x8
c0018287:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001828b:	50                   	push   eax
c001828c:	e8 ba 4f 00 00       	call   c001d24b <Thr::executeDLL(unsigned long, void*)>
c0018291:	83 c4 10             	add    esp,0x10
c0018294:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018299:	74 1e                	je     c00182b9 <ACPI::open(int, int, void*)+0x307>
c001829b:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00182a0:	74 17                	je     c00182b9 <ACPI::open(int, int, void*)+0x307>
c00182a2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00182a6:	8b 00                	mov    eax,DWORD PTR [eax]
c00182a8:	83 c0 08             	add    eax,0x8
c00182ab:	8b 00                	mov    eax,DWORD PTR [eax]
c00182ad:	83 ec 0c             	sub    esp,0xc
c00182b0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00182b4:	ff d0                	call   eax
c00182b6:	83 c4 10             	add    esp,0x10
c00182b9:	a1 48 04 03 c0       	mov    eax,ds:0xc0030448
c00182be:	83 ec 08             	sub    esp,0x8
c00182c1:	68 3d ad 02 c0       	push   0xc002ad3d
c00182c6:	50                   	push   eax
c00182c7:	e8 64 f5 ff ff       	call   c0017830 <findDataTable(unsigned char*, char*)>
c00182cc:	83 c4 10             	add    esp,0x10
c00182cf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00182d3:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00182d8:	74 13                	je     c00182ed <ACPI::open(int, int, void*)+0x33b>
c00182da:	83 ec 08             	sub    esp,0x8
c00182dd:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00182e1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00182e5:	e8 80 fc ff ff       	call   c0017f6a <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c00182ea:	83 c4 10             	add    esp,0x10
c00182ed:	b8 00 00 00 00       	mov    eax,0x0
c00182f2:	83 c4 28             	add    esp,0x28
c00182f5:	5b                   	pop    ebx
c00182f6:	c3                   	ret    
c00182f7:	90                   	nop

c00182f8 <ACPI::sleep()>:
c00182f8:	83 ec 0c             	sub    esp,0xc
c00182fb:	a1 20 02 03 c0       	mov    eax,ds:0xc0030220
c0018300:	85 c0                	test   eax,eax
c0018302:	74 07                	je     c001830b <ACPI::sleep()+0x13>
c0018304:	a1 20 02 03 c0       	mov    eax,ds:0xc0030220
c0018309:	ff d0                	call   eax
c001830b:	90                   	nop
c001830c:	83 c4 0c             	add    esp,0xc
c001830f:	c3                   	ret    

c0018310 <CPU::close(int, int, void*)>:
c0018310:	31 c0                	xor    eax,eax
c0018312:	c3                   	ret    
c0018313:	90                   	nop

c0018314 <CPU::lookupAMDName(unsigned char, unsigned char)>:
c0018314:	55                   	push   ebp
c0018315:	57                   	push   edi
c0018316:	56                   	push   esi
c0018317:	53                   	push   ebx
c0018318:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001831c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018320:	89 ce                	mov    esi,ecx
c0018322:	89 d5                	mov    ebp,edx
c0018324:	80 f9 04             	cmp    cl,0x4
c0018327:	75 28                	jne    c0018351 <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c0018329:	8d 42 f9             	lea    eax,[edx-0x7]
c001832c:	3c 03                	cmp    al,0x3
c001832e:	0f 86 63 01 00 00    	jbe    c0018497 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0018334:	80 fa 03             	cmp    dl,0x3
c0018337:	0f 84 5a 01 00 00    	je     c0018497 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c001833d:	8d 7a f2             	lea    edi,[edx-0xe]
c0018340:	b8 90 cf 02 c0       	mov    eax,0xc002cf90
c0018345:	89 fb                	mov    ebx,edi
c0018347:	80 fb 01             	cmp    bl,0x1
c001834a:	77 4e                	ja     c001839a <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c001834c:	e9 52 01 00 00       	jmp    c00184a3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018351:	80 f9 05             	cmp    cl,0x5
c0018354:	75 4d                	jne    c00183a3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c0018356:	b8 a0 cf 02 c0       	mov    eax,0xc002cfa0
c001835b:	80 fa 03             	cmp    dl,0x3
c001835e:	0f 86 3f 01 00 00    	jbe    c00184a3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018364:	8d 7a fa             	lea    edi,[edx-0x6]
c0018367:	b8 b0 cf 02 c0       	mov    eax,0xc002cfb0
c001836c:	89 fb                	mov    ebx,edi
c001836e:	80 fb 01             	cmp    bl,0x1
c0018371:	0f 86 2c 01 00 00    	jbe    c00184a3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018377:	b8 c0 cf 02 c0       	mov    eax,0xc002cfc0
c001837c:	80 fa 08             	cmp    dl,0x8
c001837f:	0f 84 1e 01 00 00    	je     c00184a3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018385:	89 d7                	mov    edi,edx
c0018387:	b8 d0 cf 02 c0       	mov    eax,0xc002cfd0
c001838c:	83 e7 fb             	and    edi,0xfffffffb
c001838f:	89 fb                	mov    ebx,edi
c0018391:	80 fb 09             	cmp    bl,0x9
c0018394:	0f 84 09 01 00 00    	je     c00184a3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001839a:	31 c0                	xor    eax,eax
c001839c:	89 eb                	mov    ebx,ebp
c001839e:	0f b6 fb             	movzx  edi,bl
c00183a1:	eb 30                	jmp    c00183d3 <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c00183a3:	31 c0                	xor    eax,eax
c00183a5:	80 f9 06             	cmp    cl,0x6
c00183a8:	75 f2                	jne    c001839c <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c00183aa:	80 fa 0a             	cmp    dl,0xa
c00183ad:	77 ed                	ja     c001839c <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c00183af:	bf de 05 00 00       	mov    edi,0x5de
c00183b4:	0f a3 d7             	bt     edi,edx
c00183b7:	73 e3                	jae    c001839c <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c00183b9:	b8 e0 cf 02 c0       	mov    eax,0xc002cfe0
c00183be:	e9 e0 00 00 00       	jmp    c00184a3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00183c3:	39 c7                	cmp    edi,eax
c00183c5:	0f 84 d3 00 00 00    	je     c001849e <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c00183cb:	40                   	inc    eax
c00183cc:	3d d0 00 00 00       	cmp    eax,0xd0
c00183d1:	74 09                	je     c00183dc <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c00183d3:	89 f3                	mov    ebx,esi
c00183d5:	80 fb 0f             	cmp    bl,0xf
c00183d8:	75 f1                	jne    c00183cb <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c00183da:	eb e7                	jmp    c00183c3 <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c00183dc:	80 f9 10             	cmp    cl,0x10
c00183df:	75 14                	jne    c00183f5 <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c00183e1:	8d 42 fc             	lea    eax,[edx-0x4]
c00183e4:	83 e0 fb             	and    eax,0xfffffffb
c00183e7:	3c 02                	cmp    al,0x2
c00183e9:	76 34                	jbe    c001841f <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c00183eb:	b8 22 b1 02 c0       	mov    eax,0xc002b122
c00183f0:	80 fa 02             	cmp    dl,0x2
c00183f3:	eb 24                	jmp    c0018419 <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c00183f5:	80 f9 11             	cmp    cl,0x11
c00183f8:	75 13                	jne    c001840d <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c00183fa:	b8 22 b1 02 c0       	mov    eax,0xc002b122
c00183ff:	80 fa 03             	cmp    dl,0x3
c0018402:	0f 85 9b 00 00 00    	jne    c00184a3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018408:	e9 91 00 00 00       	jmp    c001849e <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c001840d:	80 f9 12             	cmp    cl,0x12
c0018410:	75 14                	jne    c0018426 <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c0018412:	b8 22 b1 02 c0       	mov    eax,0xc002b122
c0018417:	fe ca                	dec    dl
c0018419:	0f 85 84 00 00 00    	jne    c00184a3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001841f:	b8 00 d0 02 c0       	mov    eax,0xc002d000
c0018424:	eb 7d                	jmp    c00184a3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018426:	80 f9 14             	cmp    cl,0x14
c0018429:	75 12                	jne    c001843d <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c001842b:	4a                   	dec    edx
c001842c:	b8 22 b1 02 c0       	mov    eax,0xc002b122
c0018431:	80 fa 01             	cmp    dl,0x1
c0018434:	77 6d                	ja     c00184a3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018436:	b8 10 d0 02 c0       	mov    eax,0xc002d010
c001843b:	eb 66                	jmp    c00184a3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001843d:	80 f9 15             	cmp    cl,0x15
c0018440:	75 31                	jne    c0018473 <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c0018442:	b8 20 d0 02 c0       	mov    eax,0xc002d020
c0018447:	80 fa 01             	cmp    dl,0x1
c001844a:	74 57                	je     c00184a3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001844c:	b8 22 b1 02 c0       	mov    eax,0xc002b122
c0018451:	80 fa 13             	cmp    dl,0x13
c0018454:	76 0c                	jbe    c0018462 <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c0018456:	80 fa 30             	cmp    dl,0x30
c0018459:	75 48                	jne    c00184a3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001845b:	b8 40 d0 02 c0       	mov    eax,0xc002d040
c0018460:	eb 41                	jmp    c00184a3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018462:	b9 04 00 09 00       	mov    ecx,0x90004
c0018467:	0f a3 d1             	bt     ecx,edx
c001846a:	73 37                	jae    c00184a3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001846c:	b8 30 d0 02 c0       	mov    eax,0xc002d030
c0018471:	eb 30                	jmp    c00184a3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018473:	b8 22 b1 02 c0       	mov    eax,0xc002b122
c0018478:	80 f9 16             	cmp    cl,0x16
c001847b:	75 26                	jne    c00184a3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001847d:	b8 50 d0 02 c0       	mov    eax,0xc002d050
c0018482:	84 d2                	test   dl,dl
c0018484:	74 1d                	je     c00184a3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018486:	b8 22 b1 02 c0       	mov    eax,0xc002b122
c001848b:	80 fa 30             	cmp    dl,0x30
c001848e:	75 13                	jne    c00184a3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018490:	b8 60 d0 02 c0       	mov    eax,0xc002d060
c0018495:	eb 0c                	jmp    c00184a3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018497:	b8 80 cf 02 c0       	mov    eax,0xc002cf80
c001849c:	eb 05                	jmp    c00184a3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001849e:	b8 f0 cf 02 c0       	mov    eax,0xc002cff0
c00184a3:	5b                   	pop    ebx
c00184a4:	5e                   	pop    esi
c00184a5:	5f                   	pop    edi
c00184a6:	5d                   	pop    ebp
c00184a7:	c3                   	ret    

c00184a8 <CPU::lookupIntelName(unsigned char, unsigned char)>:
c00184a8:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00184ac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00184b0:	80 f9 04             	cmp    cl,0x4
c00184b3:	75 6b                	jne    c0018520 <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c00184b5:	b8 e0 cd 02 c0       	mov    eax,0xc002cde0
c00184ba:	80 fa 01             	cmp    dl,0x1
c00184bd:	0f 86 92 02 00 00    	jbe    c0018755 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00184c3:	b8 f0 cd 02 c0       	mov    eax,0xc002cdf0
c00184c8:	80 fa 02             	cmp    dl,0x2
c00184cb:	0f 84 84 02 00 00    	je     c0018755 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00184d1:	b8 00 ce 02 c0       	mov    eax,0xc002ce00
c00184d6:	80 fa 03             	cmp    dl,0x3
c00184d9:	0f 84 76 02 00 00    	je     c0018755 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00184df:	b8 10 ce 02 c0       	mov    eax,0xc002ce10
c00184e4:	80 fa 04             	cmp    dl,0x4
c00184e7:	0f 84 68 02 00 00    	je     c0018755 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00184ed:	b8 20 ce 02 c0       	mov    eax,0xc002ce20
c00184f2:	80 fa 05             	cmp    dl,0x5
c00184f5:	0f 84 5a 02 00 00    	je     c0018755 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00184fb:	b8 00 ce 02 c0       	mov    eax,0xc002ce00
c0018500:	80 fa 07             	cmp    dl,0x7
c0018503:	0f 84 4c 02 00 00    	je     c0018755 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018509:	83 ea 08             	sub    edx,0x8
c001850c:	b8 22 b1 02 c0       	mov    eax,0xc002b122
c0018511:	80 fa 01             	cmp    dl,0x1
c0018514:	0f 87 3b 02 00 00    	ja     c0018755 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001851a:	b8 30 ce 02 c0       	mov    eax,0xc002ce30
c001851f:	c3                   	ret    
c0018520:	80 f9 05             	cmp    cl,0x5
c0018523:	75 45                	jne    c001856a <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c0018525:	8d 4a ff             	lea    ecx,[edx-0x1]
c0018528:	b8 40 ce 02 c0       	mov    eax,0xc002ce40
c001852d:	80 f9 02             	cmp    cl,0x2
c0018530:	0f 86 1f 02 00 00    	jbe    c0018755 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018536:	80 fa 04             	cmp    dl,0x4
c0018539:	0f 84 f3 01 00 00    	je     c0018732 <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c001853f:	80 fa 07             	cmp    dl,0x7
c0018542:	0f 84 0d 02 00 00    	je     c0018755 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018548:	b8 50 ce 02 c0       	mov    eax,0xc002ce50
c001854d:	80 fa 08             	cmp    dl,0x8
c0018550:	0f 84 ff 01 00 00    	je     c0018755 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018556:	b8 22 b1 02 c0       	mov    eax,0xc002b122
c001855b:	80 fa 09             	cmp    dl,0x9
c001855e:	0f 85 f1 01 00 00    	jne    c0018755 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018564:	b8 60 ce 02 c0       	mov    eax,0xc002ce60
c0018569:	c3                   	ret    
c001856a:	80 f9 06             	cmp    cl,0x6
c001856d:	0f 85 85 01 00 00    	jne    c00186f8 <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c0018573:	b8 70 ce 02 c0       	mov    eax,0xc002ce70
c0018578:	80 fa 01             	cmp    dl,0x1
c001857b:	0f 84 d4 01 00 00    	je     c0018755 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018581:	8d 42 fb             	lea    eax,[edx-0x5]
c0018584:	3c 01                	cmp    al,0x1
c0018586:	0f 86 ac 01 00 00    	jbe    c0018738 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c001858c:	80 fa 03             	cmp    dl,0x3
c001858f:	0f 84 a3 01 00 00    	je     c0018738 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0018595:	8d 4a f9             	lea    ecx,[edx-0x7]
c0018598:	b8 90 ce 02 c0       	mov    eax,0xc002ce90
c001859d:	80 f9 01             	cmp    cl,0x1
c00185a0:	0f 86 af 01 00 00    	jbe    c0018755 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00185a6:	80 fa 09             	cmp    dl,0x9
c00185a9:	0f 84 8f 01 00 00    	je     c001873e <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c00185af:	8d 4a f6             	lea    ecx,[edx-0xa]
c00185b2:	80 f9 01             	cmp    cl,0x1
c00185b5:	0f 86 9a 01 00 00    	jbe    c0018755 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00185bb:	b8 a0 ce 02 c0       	mov    eax,0xc002cea0
c00185c0:	80 fa 0d             	cmp    dl,0xd
c00185c3:	0f 84 8c 01 00 00    	je     c0018755 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00185c9:	b8 b0 ce 02 c0       	mov    eax,0xc002ceb0
c00185ce:	80 fa 0e             	cmp    dl,0xe
c00185d1:	0f 84 7e 01 00 00    	je     c0018755 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00185d7:	b8 c0 ce 02 c0       	mov    eax,0xc002cec0
c00185dc:	80 fa 0f             	cmp    dl,0xf
c00185df:	0f 84 70 01 00 00    	je     c0018755 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00185e5:	b8 a0 ce 02 c0       	mov    eax,0xc002cea0
c00185ea:	80 fa 15             	cmp    dl,0x15
c00185ed:	0f 84 62 01 00 00    	je     c0018755 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00185f3:	8d 4a ea             	lea    ecx,[edx-0x16]
c00185f6:	b8 c0 ce 02 c0       	mov    eax,0xc002cec0
c00185fb:	80 f9 01             	cmp    cl,0x1
c00185fe:	0f 86 51 01 00 00    	jbe    c0018755 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018604:	80 fa 1a             	cmp    dl,0x1a
c0018607:	0f 84 37 01 00 00    	je     c0018744 <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c001860d:	80 fa 1c             	cmp    dl,0x1c
c0018610:	0f 84 34 01 00 00    	je     c001874a <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c0018616:	80 fa 1d             	cmp    dl,0x1d
c0018619:	0f 84 36 01 00 00    	je     c0018755 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001861f:	b8 f0 ce 02 c0       	mov    eax,0xc002cef0
c0018624:	80 fa 25             	cmp    dl,0x25
c0018627:	0f 84 28 01 00 00    	je     c0018755 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001862d:	8d 4a da             	lea    ecx,[edx-0x26]
c0018630:	b8 e0 ce 02 c0       	mov    eax,0xc002cee0
c0018635:	80 f9 01             	cmp    cl,0x1
c0018638:	0f 86 17 01 00 00    	jbe    c0018755 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001863e:	b8 00 cf 02 c0       	mov    eax,0xc002cf00
c0018643:	80 fa 2a             	cmp    dl,0x2a
c0018646:	0f 84 09 01 00 00    	je     c0018755 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001864c:	b8 f0 ce 02 c0       	mov    eax,0xc002cef0
c0018651:	80 fa 2c             	cmp    dl,0x2c
c0018654:	0f 84 fb 00 00 00    	je     c0018755 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001865a:	b8 00 cf 02 c0       	mov    eax,0xc002cf00
c001865f:	80 fa 2d             	cmp    dl,0x2d
c0018662:	0f 84 ed 00 00 00    	je     c0018755 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018668:	b8 d0 ce 02 c0       	mov    eax,0xc002ced0
c001866d:	80 fa 2e             	cmp    dl,0x2e
c0018670:	0f 84 df 00 00 00    	je     c0018755 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018676:	b8 f0 ce 02 c0       	mov    eax,0xc002cef0
c001867b:	80 fa 2f             	cmp    dl,0x2f
c001867e:	0f 84 d1 00 00 00    	je     c0018755 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018684:	8d 4a cb             	lea    ecx,[edx-0x35]
c0018687:	b8 e0 ce 02 c0       	mov    eax,0xc002cee0
c001868c:	80 f9 01             	cmp    cl,0x1
c001868f:	0f 86 c0 00 00 00    	jbe    c0018755 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018695:	b8 10 cf 02 c0       	mov    eax,0xc002cf10
c001869a:	80 fa 37             	cmp    dl,0x37
c001869d:	0f 84 b2 00 00 00    	je     c0018755 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00186a3:	b8 20 cf 02 c0       	mov    eax,0xc002cf20
c00186a8:	80 fa 3a             	cmp    dl,0x3a
c00186ab:	0f 84 a4 00 00 00    	je     c0018755 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00186b1:	b8 30 cf 02 c0       	mov    eax,0xc002cf30
c00186b6:	80 fa 3c             	cmp    dl,0x3c
c00186b9:	0f 84 96 00 00 00    	je     c0018755 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00186bf:	b8 40 cf 02 c0       	mov    eax,0xc002cf40
c00186c4:	80 fa 3d             	cmp    dl,0x3d
c00186c7:	0f 84 88 00 00 00    	je     c0018755 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00186cd:	b8 20 cf 02 c0       	mov    eax,0xc002cf20
c00186d2:	80 fa 3e             	cmp    dl,0x3e
c00186d5:	74 7e                	je     c0018755 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00186d7:	8d 42 bb             	lea    eax,[edx-0x45]
c00186da:	3c 01                	cmp    al,0x1
c00186dc:	76 72                	jbe    c0018750 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c00186de:	80 fa 3f             	cmp    dl,0x3f
c00186e1:	74 6d                	je     c0018750 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c00186e3:	80 fa 4a             	cmp    dl,0x4a
c00186e6:	74 0a                	je     c00186f2 <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c00186e8:	b8 22 b1 02 c0       	mov    eax,0xc002b122
c00186ed:	80 fa 4d             	cmp    dl,0x4d
c00186f0:	75 63                	jne    c0018755 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00186f2:	b8 10 cf 02 c0       	mov    eax,0xc002cf10
c00186f7:	c3                   	ret    
c00186f8:	b8 22 b1 02 c0       	mov    eax,0xc002b122
c00186fd:	80 f9 0b             	cmp    cl,0xb
c0018700:	75 0a                	jne    c001870c <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c0018702:	fe ca                	dec    dl
c0018704:	75 4f                	jne    c0018755 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018706:	b8 50 cf 02 c0       	mov    eax,0xc002cf50
c001870b:	c3                   	ret    
c001870c:	80 f9 0f             	cmp    cl,0xf
c001870f:	75 44                	jne    c0018755 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018711:	b8 60 cf 02 c0       	mov    eax,0xc002cf60
c0018716:	80 fa 02             	cmp    dl,0x2
c0018719:	76 3a                	jbe    c0018755 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001871b:	8d 42 fd             	lea    eax,[edx-0x3]
c001871e:	3c 01                	cmp    al,0x1
c0018720:	76 0a                	jbe    c001872c <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c0018722:	b8 22 b1 02 c0       	mov    eax,0xc002b122
c0018727:	80 fa 06             	cmp    dl,0x6
c001872a:	75 29                	jne    c0018755 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001872c:	b8 70 cf 02 c0       	mov    eax,0xc002cf70
c0018731:	c3                   	ret    
c0018732:	b8 50 ce 02 c0       	mov    eax,0xc002ce50
c0018737:	c3                   	ret    
c0018738:	b8 80 ce 02 c0       	mov    eax,0xc002ce80
c001873d:	c3                   	ret    
c001873e:	b8 a0 ce 02 c0       	mov    eax,0xc002cea0
c0018743:	c3                   	ret    
c0018744:	b8 d0 ce 02 c0       	mov    eax,0xc002ced0
c0018749:	c3                   	ret    
c001874a:	b8 e0 ce 02 c0       	mov    eax,0xc002cee0
c001874f:	c3                   	ret    
c0018750:	b8 30 cf 02 c0       	mov    eax,0xc002cf30
c0018755:	c3                   	ret    

c0018756 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c0018756:	60                   	pusha  
c0018757:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001875b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001875f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018763:	9c                   	pushf  
c0018764:	fa                   	cli    
c0018765:	0f 09                	wbinvd 
c0018767:	0f 30                	wrmsr  
c0018769:	9d                   	popf   
c001876a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001876e:	89 02                	mov    DWORD PTR [edx],eax
c0018770:	61                   	popa   
c0018771:	c3                   	ret    

c0018772 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c0018772:	60                   	pusha  
c0018773:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018777:	9c                   	pushf  
c0018778:	fa                   	cli    
c0018779:	0f 09                	wbinvd 
c001877b:	31 c0                	xor    eax,eax
c001877d:	31 d2                	xor    edx,edx
c001877f:	0f 32                	rdmsr  
c0018781:	9d                   	popf   
c0018782:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018786:	89 02                	mov    DWORD PTR [edx],eax
c0018788:	61                   	popa   
c0018789:	c3                   	ret    

c001878a <CPU::AMD_K6_writeback(int, int, int)>:
c001878a:	56                   	push   esi
c001878b:	53                   	push   ebx
c001878c:	83 ec 10             	sub    esp,0x10
c001878f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018793:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0018798:	75 5d                	jne    c00187f7 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001879a:	83 f8 08             	cmp    eax,0x8
c001879d:	75 09                	jne    c00187a8 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c001879f:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c00187a4:	7e 13                	jle    c00187b9 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c00187a6:	eb 30                	jmp    c00187d8 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c00187a8:	83 f8 06             	cmp    eax,0x6
c00187ab:	7c 4a                	jl     c00187f7 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c00187ad:	83 f8 07             	cmp    eax,0x7
c00187b0:	7e 07                	jle    c00187b9 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c00187b2:	83 f8 09             	cmp    eax,0x9
c00187b5:	74 21                	je     c00187d8 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c00187b7:	eb 3e                	jmp    c00187f7 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c00187b9:	89 e6                	mov    esi,esp
c00187bb:	8b 1d a4 db 02 c0    	mov    ebx,DWORD PTR ds:0xc002dba4
c00187c1:	56                   	push   esi
c00187c2:	c1 eb 15             	shr    ebx,0x15
c00187c5:	68 82 00 00 c0       	push   0xc0000082
c00187ca:	83 e3 7e             	and    ebx,0x7e
c00187cd:	e8 a0 ff ff ff       	call   c0018772 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c00187d2:	56                   	push   esi
c00187d3:	6a 00                	push   0x0
c00187d5:	53                   	push   ebx
c00187d6:	eb 12                	jmp    c00187ea <CPU::AMD_K6_writeback(int, int, int)+0x60>
c00187d8:	89 e3                	mov    ebx,esp
c00187da:	53                   	push   ebx
c00187db:	68 82 00 00 c0       	push   0xc0000082
c00187e0:	e8 8d ff ff ff       	call   c0018772 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c00187e5:	53                   	push   ebx
c00187e6:	6a 00                	push   0x0
c00187e8:	6a 00                	push   0x0
c00187ea:	68 82 00 00 c0       	push   0xc0000082
c00187ef:	e8 62 ff ff ff       	call   c0018756 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c00187f4:	83 c4 18             	add    esp,0x18
c00187f7:	83 c4 10             	add    esp,0x10
c00187fa:	5b                   	pop    ebx
c00187fb:	5e                   	pop    esi
c00187fc:	c3                   	ret    
c00187fd:	90                   	nop

c00187fe <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c00187fe:	55                   	push   ebp
c00187ff:	57                   	push   edi
c0018800:	56                   	push   esi
c0018801:	53                   	push   ebx
c0018802:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018806:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001880a:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001880e:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0018812:	39 05 80 d0 02 c0    	cmp    DWORD PTR ds:0xc002d080,eax
c0018818:	75 23                	jne    c001883d <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c001881a:	a1 ac 06 03 c0       	mov    eax,ds:0xc00306ac
c001881f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018823:	89 06                	mov    DWORD PTR [esi],eax
c0018825:	a1 a8 06 03 c0       	mov    eax,ds:0xc00306a8
c001882a:	89 07                	mov    DWORD PTR [edi],eax
c001882c:	a1 a4 06 03 c0       	mov    eax,ds:0xc00306a4
c0018831:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0018834:	a1 a0 06 03 c0       	mov    eax,ds:0xc00306a0
c0018839:	89 02                	mov    DWORD PTR [edx],eax
c001883b:	eb 3f                	jmp    c001887c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c001883d:	31 c9                	xor    ecx,ecx
c001883f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018843:	0f a2                	cpuid  
c0018845:	89 06                	mov    DWORD PTR [esi],eax
c0018847:	89 1f                	mov    DWORD PTR [edi],ebx
c0018849:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001884d:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0018850:	89 10                	mov    DWORD PTR [eax],edx
c0018852:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018856:	a3 80 d0 02 c0       	mov    ds:0xc002d080,eax
c001885b:	8b 06                	mov    eax,DWORD PTR [esi]
c001885d:	a3 ac 06 03 c0       	mov    ds:0xc00306ac,eax
c0018862:	8b 07                	mov    eax,DWORD PTR [edi]
c0018864:	a3 a8 06 03 c0       	mov    ds:0xc00306a8,eax
c0018869:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001886c:	a3 a4 06 03 c0       	mov    ds:0xc00306a4,eax
c0018871:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018875:	8b 00                	mov    eax,DWORD PTR [eax]
c0018877:	a3 a0 06 03 c0       	mov    ds:0xc00306a0,eax
c001887c:	5b                   	pop    ebx
c001887d:	5e                   	pop    esi
c001887e:	5f                   	pop    edi
c001887f:	5d                   	pop    ebp
c0018880:	c3                   	ret    
c0018881:	90                   	nop

c0018882 <CPU::cpuidCheckEDX(unsigned int)>:
c0018882:	83 ec 10             	sub    esp,0x10
c0018885:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018889:	50                   	push   eax
c001888a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001888e:	50                   	push   eax
c001888f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018893:	50                   	push   eax
c0018894:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018898:	50                   	push   eax
c0018899:	6a 01                	push   0x1
c001889b:	e8 5e ff ff ff       	call   c00187fe <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00188a0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00188a4:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c00188a8:	0f 95 c0             	setne  al
c00188ab:	83 c4 24             	add    esp,0x24
c00188ae:	c3                   	ret    
c00188af:	90                   	nop

c00188b0 <CPU::cpuidCheckECX(unsigned int)>:
c00188b0:	83 ec 10             	sub    esp,0x10
c00188b3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00188b7:	50                   	push   eax
c00188b8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00188bc:	50                   	push   eax
c00188bd:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00188c1:	50                   	push   eax
c00188c2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00188c6:	50                   	push   eax
c00188c7:	6a 01                	push   0x1
c00188c9:	e8 30 ff ff ff       	call   c00187fe <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00188ce:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00188d2:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c00188d6:	0f 95 c0             	setne  al
c00188d9:	83 c4 24             	add    esp,0x24
c00188dc:	c3                   	ret    
c00188dd:	90                   	nop

c00188de <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c00188de:	83 ec 10             	sub    esp,0x10
c00188e1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00188e5:	50                   	push   eax
c00188e6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00188ea:	50                   	push   eax
c00188eb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00188ef:	50                   	push   eax
c00188f0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00188f4:	50                   	push   eax
c00188f5:	6a 07                	push   0x7
c00188f7:	e8 02 ff ff ff       	call   c00187fe <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00188fc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018900:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0018904:	0f 95 c0             	setne  al
c0018907:	83 c4 24             	add    esp,0x24
c001890a:	c3                   	ret    
c001890b:	90                   	nop

c001890c <CPU::cpuidCheckExtendedECX(unsigned int)>:
c001890c:	83 ec 10             	sub    esp,0x10
c001890f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018913:	50                   	push   eax
c0018914:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018918:	50                   	push   eax
c0018919:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001891d:	50                   	push   eax
c001891e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018922:	50                   	push   eax
c0018923:	6a 07                	push   0x7
c0018925:	e8 d4 fe ff ff       	call   c00187fe <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001892a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001892e:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018932:	0f 95 c0             	setne  al
c0018935:	83 c4 24             	add    esp,0x24
c0018938:	c3                   	ret    
c0018939:	90                   	nop

c001893a <CPU::CPU()>:
c001893a:	83 ec 0c             	sub    esp,0xc
c001893d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018941:	83 ec 08             	sub    esp,0x8
c0018944:	68 22 b1 02 c0       	push   0xc002b122
c0018949:	50                   	push   eax
c001894a:	e8 dd b7 ff ff       	call   c001412c <Device::Device(char const*)>
c001894f:	83 c4 10             	add    esp,0x10
c0018952:	ba fc b1 02 c0       	mov    edx,0xc002b1fc
c0018957:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001895b:	89 10                	mov    DWORD PTR [eax],edx
c001895d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018961:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c001896b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001896f:	05 78 01 00 00       	add    eax,0x178
c0018974:	83 ec 0c             	sub    esp,0xc
c0018977:	50                   	push   eax
c0018978:	e8 e1 66 ff ff       	call   c000f05e <GDT::GDT()>
c001897d:	83 c4 10             	add    esp,0x10
c0018980:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018984:	05 7c 09 00 00       	add    eax,0x97c
c0018989:	83 ec 0c             	sub    esp,0xc
c001898c:	50                   	push   eax
c001898d:	e8 2e 69 ff ff       	call   c000f2c0 <IDT::IDT()>
c0018992:	83 c4 10             	add    esp,0x10
c0018995:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018999:	05 7c 11 00 00       	add    eax,0x117c
c001899e:	83 ec 0c             	sub    esp,0xc
c00189a1:	50                   	push   eax
c00189a2:	e8 af 8a ff ff       	call   c0011456 <TSS::TSS()>
c00189a7:	83 c4 10             	add    esp,0x10
c00189aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00189ae:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c00189b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00189b9:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c00189c3:	90                   	nop
c00189c4:	83 c4 0c             	add    esp,0xc
c00189c7:	c3                   	ret    

c00189c8 <CPU::displayFeatures()>:
c00189c8:	53                   	push   ebx
c00189c9:	83 ec 10             	sub    esp,0x10
c00189cc:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00189d0:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c00189d6:	68 30 ae 02 c0       	push   0xc002ae30
c00189db:	e8 35 a1 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c00189e0:	59                   	pop    ecx
c00189e1:	58                   	pop    eax
c00189e2:	8d 83 5f 01 00 00    	lea    eax,[ebx+0x15f]
c00189e8:	50                   	push   eax
c00189e9:	68 41 ae 02 c0       	push   0xc002ae41
c00189ee:	e8 22 a1 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c00189f3:	58                   	pop    eax
c00189f4:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00189fa:	5a                   	pop    edx
c00189fb:	c1 e8 0e             	shr    eax,0xe
c00189fe:	0f b6 c0             	movzx  eax,al
c0018a01:	50                   	push   eax
c0018a02:	68 52 ae 02 c0       	push   0xc002ae52
c0018a07:	e8 09 a1 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c0018a0c:	59                   	pop    ecx
c0018a0d:	58                   	pop    eax
c0018a0e:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018a14:	66 c1 e8 06          	shr    ax,0x6
c0018a18:	0f b6 c0             	movzx  eax,al
c0018a1b:	50                   	push   eax
c0018a1c:	68 63 ae 02 c0       	push   0xc002ae63
c0018a21:	e8 ef a0 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c0018a26:	c7 04 24 10 b3 02 c0 	mov    DWORD PTR [esp],0xc002b310
c0018a2d:	e8 e3 a0 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c0018a32:	83 c4 10             	add    esp,0x10
c0018a35:	b8 f6 98 02 c0       	mov    eax,0xc00298f6
c0018a3a:	f6 83 90 11 00 00 01 	test   BYTE PTR [ebx+0x1190],0x1
c0018a41:	74 05                	je     c0018a48 <CPU::displayFeatures()+0x80>
c0018a43:	b8 f2 98 02 c0       	mov    eax,0xc00298f2
c0018a48:	52                   	push   edx
c0018a49:	52                   	push   edx
c0018a4a:	50                   	push   eax
c0018a4b:	68 74 ae 02 c0       	push   0xc002ae74
c0018a50:	e8 c0 a0 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c0018a55:	83 c4 10             	add    esp,0x10
c0018a58:	b8 f2 98 02 c0       	mov    eax,0xc00298f2
c0018a5d:	80 bb 90 11 00 00 00 	cmp    BYTE PTR [ebx+0x1190],0x0
c0018a64:	78 05                	js     c0018a6b <CPU::displayFeatures()+0xa3>
c0018a66:	b8 f6 98 02 c0       	mov    eax,0xc00298f6
c0018a6b:	51                   	push   ecx
c0018a6c:	51                   	push   ecx
c0018a6d:	50                   	push   eax
c0018a6e:	68 8b ae 02 c0       	push   0xc002ae8b
c0018a73:	e8 9d a0 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c0018a78:	83 c4 10             	add    esp,0x10
c0018a7b:	b8 f2 98 02 c0       	mov    eax,0xc00298f2
c0018a80:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c0018a87:	75 05                	jne    c0018a8e <CPU::displayFeatures()+0xc6>
c0018a89:	b8 f6 98 02 c0       	mov    eax,0xc00298f6
c0018a8e:	52                   	push   edx
c0018a8f:	52                   	push   edx
c0018a90:	50                   	push   eax
c0018a91:	68 a2 ae 02 c0       	push   0xc002aea2
c0018a96:	e8 7a a0 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c0018a9b:	83 c4 10             	add    esp,0x10
c0018a9e:	b8 f2 98 02 c0       	mov    eax,0xc00298f2
c0018aa3:	f6 83 90 11 00 00 04 	test   BYTE PTR [ebx+0x1190],0x4
c0018aaa:	75 05                	jne    c0018ab1 <CPU::displayFeatures()+0xe9>
c0018aac:	b8 f6 98 02 c0       	mov    eax,0xc00298f6
c0018ab1:	51                   	push   ecx
c0018ab2:	51                   	push   ecx
c0018ab3:	50                   	push   eax
c0018ab4:	68 b9 ae 02 c0       	push   0xc002aeb9
c0018ab9:	e8 57 a0 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c0018abe:	83 c4 10             	add    esp,0x10
c0018ac1:	b8 f2 98 02 c0       	mov    eax,0xc00298f2
c0018ac6:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0018acd:	75 05                	jne    c0018ad4 <CPU::displayFeatures()+0x10c>
c0018acf:	b8 f6 98 02 c0       	mov    eax,0xc00298f6
c0018ad4:	52                   	push   edx
c0018ad5:	52                   	push   edx
c0018ad6:	50                   	push   eax
c0018ad7:	68 d0 ae 02 c0       	push   0xc002aed0
c0018adc:	e8 34 a0 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c0018ae1:	83 c4 10             	add    esp,0x10
c0018ae4:	b8 f2 98 02 c0       	mov    eax,0xc00298f2
c0018ae9:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c0018af0:	75 05                	jne    c0018af7 <CPU::displayFeatures()+0x12f>
c0018af2:	b8 f6 98 02 c0       	mov    eax,0xc00298f6
c0018af7:	51                   	push   ecx
c0018af8:	51                   	push   ecx
c0018af9:	50                   	push   eax
c0018afa:	68 e7 ae 02 c0       	push   0xc002aee7
c0018aff:	e8 11 a0 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c0018b04:	83 c4 10             	add    esp,0x10
c0018b07:	b8 f2 98 02 c0       	mov    eax,0xc00298f2
c0018b0c:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c0018b13:	75 05                	jne    c0018b1a <CPU::displayFeatures()+0x152>
c0018b15:	b8 f6 98 02 c0       	mov    eax,0xc00298f6
c0018b1a:	52                   	push   edx
c0018b1b:	52                   	push   edx
c0018b1c:	50                   	push   eax
c0018b1d:	68 fe ae 02 c0       	push   0xc002aefe
c0018b22:	e8 ee 9f ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c0018b27:	83 c4 10             	add    esp,0x10
c0018b2a:	b8 f2 98 02 c0       	mov    eax,0xc00298f2
c0018b2f:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c0018b36:	75 05                	jne    c0018b3d <CPU::displayFeatures()+0x175>
c0018b38:	b8 f6 98 02 c0       	mov    eax,0xc00298f6
c0018b3d:	51                   	push   ecx
c0018b3e:	51                   	push   ecx
c0018b3f:	50                   	push   eax
c0018b40:	68 15 af 02 c0       	push   0xc002af15
c0018b45:	e8 cb 9f ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c0018b4a:	83 c4 10             	add    esp,0x10
c0018b4d:	b8 f2 98 02 c0       	mov    eax,0xc00298f2
c0018b52:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c0018b59:	75 05                	jne    c0018b60 <CPU::displayFeatures()+0x198>
c0018b5b:	b8 f6 98 02 c0       	mov    eax,0xc00298f6
c0018b60:	52                   	push   edx
c0018b61:	52                   	push   edx
c0018b62:	50                   	push   eax
c0018b63:	68 2c af 02 c0       	push   0xc002af2c
c0018b68:	e8 a8 9f ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c0018b6d:	83 c4 10             	add    esp,0x10
c0018b70:	b8 f2 98 02 c0       	mov    eax,0xc00298f2
c0018b75:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c0018b7c:	75 05                	jne    c0018b83 <CPU::displayFeatures()+0x1bb>
c0018b7e:	b8 f6 98 02 c0       	mov    eax,0xc00298f6
c0018b83:	51                   	push   ecx
c0018b84:	51                   	push   ecx
c0018b85:	50                   	push   eax
c0018b86:	68 43 af 02 c0       	push   0xc002af43
c0018b8b:	e8 85 9f ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c0018b90:	83 c4 10             	add    esp,0x10
c0018b93:	b8 f2 98 02 c0       	mov    eax,0xc00298f2
c0018b98:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c0018b9f:	75 05                	jne    c0018ba6 <CPU::displayFeatures()+0x1de>
c0018ba1:	b8 f6 98 02 c0       	mov    eax,0xc00298f6
c0018ba6:	52                   	push   edx
c0018ba7:	52                   	push   edx
c0018ba8:	50                   	push   eax
c0018ba9:	68 5a af 02 c0       	push   0xc002af5a
c0018bae:	e8 62 9f ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c0018bb3:	83 c4 10             	add    esp,0x10
c0018bb6:	b8 f2 98 02 c0       	mov    eax,0xc00298f2
c0018bbb:	f6 83 91 11 00 00 20 	test   BYTE PTR [ebx+0x1191],0x20
c0018bc2:	75 05                	jne    c0018bc9 <CPU::displayFeatures()+0x201>
c0018bc4:	b8 f6 98 02 c0       	mov    eax,0xc00298f6
c0018bc9:	51                   	push   ecx
c0018bca:	51                   	push   ecx
c0018bcb:	50                   	push   eax
c0018bcc:	68 71 af 02 c0       	push   0xc002af71
c0018bd1:	e8 3f 9f ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c0018bd6:	83 c4 10             	add    esp,0x10
c0018bd9:	b8 f2 98 02 c0       	mov    eax,0xc00298f2
c0018bde:	f6 83 91 11 00 00 40 	test   BYTE PTR [ebx+0x1191],0x40
c0018be5:	75 05                	jne    c0018bec <CPU::displayFeatures()+0x224>
c0018be7:	b8 f6 98 02 c0       	mov    eax,0xc00298f6
c0018bec:	52                   	push   edx
c0018bed:	52                   	push   edx
c0018bee:	50                   	push   eax
c0018bef:	68 88 af 02 c0       	push   0xc002af88
c0018bf4:	e8 1c 9f ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c0018bf9:	83 c4 10             	add    esp,0x10
c0018bfc:	b8 f2 98 02 c0       	mov    eax,0xc00298f2
c0018c01:	80 bb 91 11 00 00 00 	cmp    BYTE PTR [ebx+0x1191],0x0
c0018c08:	78 05                	js     c0018c0f <CPU::displayFeatures()+0x247>
c0018c0a:	b8 f6 98 02 c0       	mov    eax,0xc00298f6
c0018c0f:	51                   	push   ecx
c0018c10:	51                   	push   ecx
c0018c11:	50                   	push   eax
c0018c12:	68 9f af 02 c0       	push   0xc002af9f
c0018c17:	e8 f9 9e ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c0018c1c:	83 c4 10             	add    esp,0x10
c0018c1f:	b8 f2 98 02 c0       	mov    eax,0xc00298f2
c0018c24:	f6 83 92 11 00 00 04 	test   BYTE PTR [ebx+0x1192],0x4
c0018c2b:	75 05                	jne    c0018c32 <CPU::displayFeatures()+0x26a>
c0018c2d:	b8 f6 98 02 c0       	mov    eax,0xc00298f6
c0018c32:	52                   	push   edx
c0018c33:	52                   	push   edx
c0018c34:	50                   	push   eax
c0018c35:	68 b6 af 02 c0       	push   0xc002afb6
c0018c3a:	e8 d6 9e ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c0018c3f:	83 c4 18             	add    esp,0x18
c0018c42:	5b                   	pop    ebx
c0018c43:	c3                   	ret    

c0018c44 <CPU::detectFeatures()>:
c0018c44:	55                   	push   ebp
c0018c45:	57                   	push   edi
c0018c46:	56                   	push   esi
c0018c47:	53                   	push   ebx
c0018c48:	83 ec 50             	sub    esp,0x50
c0018c4b:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0018c4f:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c0018c59:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c0018c60:	8d bb 5f 01 00 00    	lea    edi,[ebx+0x15f]
c0018c66:	6a 0d                	push   0xd
c0018c68:	6a 00                	push   0x0
c0018c6a:	57                   	push   edi
c0018c6b:	e8 08 7b fe ff       	call   c0000778 <memset>
c0018c70:	83 c4 10             	add    esp,0x10
c0018c73:	a1 68 db 02 c0       	mov    eax,ds:0xc002db68
c0018c78:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0018c7f:	0f 84 20 09 00 00    	je     c00195a5 <CPU::detectFeatures()+0x961>
c0018c85:	83 ec 0c             	sub    esp,0xc
c0018c88:	6a 10                	push   0x10
c0018c8a:	e8 f3 fb ff ff       	call   c0018882 <CPU::cpuidCheckEDX(unsigned int)>
c0018c8f:	83 e0 01             	and    eax,0x1
c0018c92:	8d 14 00             	lea    edx,[eax+eax*1]
c0018c95:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018c9b:	83 e0 fd             	and    eax,0xfffffffd
c0018c9e:	09 d0                	or     eax,edx
c0018ca0:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018ca6:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0018cad:	e8 d0 fb ff ff       	call   c0018882 <CPU::cpuidCheckEDX(unsigned int)>
c0018cb2:	83 e0 01             	and    eax,0x1
c0018cb5:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0018cbc:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018cc2:	83 e0 fb             	and    eax,0xfffffffb
c0018cc5:	09 d0                	or     eax,edx
c0018cc7:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018ccd:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0018cd4:	e8 a9 fb ff ff       	call   c0018882 <CPU::cpuidCheckEDX(unsigned int)>
c0018cd9:	83 e0 01             	and    eax,0x1
c0018cdc:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0018ce3:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018ce9:	83 e0 f7             	and    eax,0xfffffff7
c0018cec:	09 d0                	or     eax,edx
c0018cee:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018cf4:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0018cfb:	e8 82 fb ff ff       	call   c0018882 <CPU::cpuidCheckEDX(unsigned int)>
c0018d00:	83 e0 01             	and    eax,0x1
c0018d03:	c1 e0 04             	shl    eax,0x4
c0018d06:	88 c2                	mov    dl,al
c0018d08:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018d0e:	83 e0 ef             	and    eax,0xffffffef
c0018d11:	09 d0                	or     eax,edx
c0018d13:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018d19:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0018d20:	e8 5d fb ff ff       	call   c0018882 <CPU::cpuidCheckEDX(unsigned int)>
c0018d25:	83 e0 01             	and    eax,0x1
c0018d28:	c1 e0 05             	shl    eax,0x5
c0018d2b:	88 c2                	mov    dl,al
c0018d2d:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018d33:	83 e0 df             	and    eax,0xffffffdf
c0018d36:	09 d0                	or     eax,edx
c0018d38:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018d3e:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0018d45:	e8 38 fb ff ff       	call   c0018882 <CPU::cpuidCheckEDX(unsigned int)>
c0018d4a:	83 e0 01             	and    eax,0x1
c0018d4d:	8d 14 00             	lea    edx,[eax+eax*1]
c0018d50:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0018d56:	83 e0 fd             	and    eax,0xfffffffd
c0018d59:	09 d0                	or     eax,edx
c0018d5b:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0018d61:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0018d68:	e8 15 fb ff ff       	call   c0018882 <CPU::cpuidCheckEDX(unsigned int)>
c0018d6d:	83 e0 01             	and    eax,0x1
c0018d70:	c1 e0 06             	shl    eax,0x6
c0018d73:	88 c2                	mov    dl,al
c0018d75:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0018d7b:	83 e0 bf             	and    eax,0xffffffbf
c0018d7e:	09 d0                	or     eax,edx
c0018d80:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0018d86:	58                   	pop    eax
c0018d87:	8d 74 24 28          	lea    esi,[esp+0x28]
c0018d8b:	56                   	push   esi
c0018d8c:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0018d90:	55                   	push   ebp
c0018d91:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018d95:	50                   	push   eax
c0018d96:	8d 54 24 28          	lea    edx,[esp+0x28]
c0018d9a:	52                   	push   edx
c0018d9b:	6a 00                	push   0x0
c0018d9d:	e8 5c fa ff ff       	call   c00187fe <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018da2:	83 c4 1c             	add    esp,0x1c
c0018da5:	6a 04                	push   0x4
c0018da7:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0018dab:	50                   	push   eax
c0018dac:	57                   	push   edi
c0018dad:	e8 92 79 fe ff       	call   c0000744 <memcpy>
c0018db2:	83 c4 0c             	add    esp,0xc
c0018db5:	8d 83 63 01 00 00    	lea    eax,[ebx+0x163]
c0018dbb:	6a 04                	push   0x4
c0018dbd:	56                   	push   esi
c0018dbe:	50                   	push   eax
c0018dbf:	e8 80 79 fe ff       	call   c0000744 <memcpy>
c0018dc4:	83 c4 0c             	add    esp,0xc
c0018dc7:	8d 83 67 01 00 00    	lea    eax,[ebx+0x167]
c0018dcd:	6a 04                	push   0x4
c0018dcf:	55                   	push   ebp
c0018dd0:	50                   	push   eax
c0018dd1:	e8 6e 79 fe ff       	call   c0000744 <memcpy>
c0018dd6:	58                   	pop    eax
c0018dd7:	5a                   	pop    edx
c0018dd8:	68 cd af 02 c0       	push   0xc002afcd
c0018ddd:	57                   	push   edi
c0018dde:	e8 dd 7a fe ff       	call   c00008c0 <strcmp>
c0018de3:	83 c4 10             	add    esp,0x10
c0018de6:	85 c0                	test   eax,eax
c0018de8:	75 0f                	jne    c0018df9 <CPU::detectFeatures()+0x1b5>
c0018dea:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0018df4:	e9 22 02 00 00       	jmp    c001901b <CPU::detectFeatures()+0x3d7>
c0018df9:	50                   	push   eax
c0018dfa:	50                   	push   eax
c0018dfb:	68 da af 02 c0       	push   0xc002afda
c0018e00:	57                   	push   edi
c0018e01:	e8 ba 7a fe ff       	call   c00008c0 <strcmp>
c0018e06:	83 c4 10             	add    esp,0x10
c0018e09:	85 c0                	test   eax,eax
c0018e0b:	74 dd                	je     c0018dea <CPU::detectFeatures()+0x1a6>
c0018e0d:	51                   	push   ecx
c0018e0e:	51                   	push   ecx
c0018e0f:	68 e7 af 02 c0       	push   0xc002afe7
c0018e14:	57                   	push   edi
c0018e15:	e8 a6 7a fe ff       	call   c00008c0 <strcmp>
c0018e1a:	83 c4 10             	add    esp,0x10
c0018e1d:	85 c0                	test   eax,eax
c0018e1f:	74 2a                	je     c0018e4b <CPU::detectFeatures()+0x207>
c0018e21:	52                   	push   edx
c0018e22:	52                   	push   edx
c0018e23:	68 f4 af 02 c0       	push   0xc002aff4
c0018e28:	57                   	push   edi
c0018e29:	e8 92 7a fe ff       	call   c00008c0 <strcmp>
c0018e2e:	83 c4 10             	add    esp,0x10
c0018e31:	85 c0                	test   eax,eax
c0018e33:	74 16                	je     c0018e4b <CPU::detectFeatures()+0x207>
c0018e35:	50                   	push   eax
c0018e36:	50                   	push   eax
c0018e37:	68 01 b0 02 c0       	push   0xc002b001
c0018e3c:	57                   	push   edi
c0018e3d:	e8 7e 7a fe ff       	call   c00008c0 <strcmp>
c0018e42:	83 c4 10             	add    esp,0x10
c0018e45:	85 c0                	test   eax,eax
c0018e47:	74 48                	je     c0018e91 <CPU::detectFeatures()+0x24d>
c0018e49:	eb 0f                	jmp    c0018e5a <CPU::detectFeatures()+0x216>
c0018e4b:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0018e55:	e9 c1 01 00 00       	jmp    c001901b <CPU::detectFeatures()+0x3d7>
c0018e5a:	50                   	push   eax
c0018e5b:	50                   	push   eax
c0018e5c:	68 0e b0 02 c0       	push   0xc002b00e
c0018e61:	57                   	push   edi
c0018e62:	e8 59 7a fe ff       	call   c00008c0 <strcmp>
c0018e67:	83 c4 10             	add    esp,0x10
c0018e6a:	85 c0                	test   eax,eax
c0018e6c:	74 23                	je     c0018e91 <CPU::detectFeatures()+0x24d>
c0018e6e:	50                   	push   eax
c0018e6f:	50                   	push   eax
c0018e70:	68 1b b0 02 c0       	push   0xc002b01b
c0018e75:	57                   	push   edi
c0018e76:	e8 45 7a fe ff       	call   c00008c0 <strcmp>
c0018e7b:	83 c4 10             	add    esp,0x10
c0018e7e:	85 c0                	test   eax,eax
c0018e80:	75 1e                	jne    c0018ea0 <CPU::detectFeatures()+0x25c>
c0018e82:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0018e8c:	e9 8a 01 00 00       	jmp    c001901b <CPU::detectFeatures()+0x3d7>
c0018e91:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0018e9b:	e9 7b 01 00 00       	jmp    c001901b <CPU::detectFeatures()+0x3d7>
c0018ea0:	50                   	push   eax
c0018ea1:	50                   	push   eax
c0018ea2:	68 28 b0 02 c0       	push   0xc002b028
c0018ea7:	57                   	push   edi
c0018ea8:	e8 13 7a fe ff       	call   c00008c0 <strcmp>
c0018ead:	83 c4 10             	add    esp,0x10
c0018eb0:	85 c0                	test   eax,eax
c0018eb2:	75 0f                	jne    c0018ec3 <CPU::detectFeatures()+0x27f>
c0018eb4:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0018ebe:	e9 58 01 00 00       	jmp    c001901b <CPU::detectFeatures()+0x3d7>
c0018ec3:	50                   	push   eax
c0018ec4:	50                   	push   eax
c0018ec5:	68 e7 af 02 c0       	push   0xc002afe7
c0018eca:	57                   	push   edi
c0018ecb:	e8 f0 79 fe ff       	call   c00008c0 <strcmp>
c0018ed0:	83 c4 10             	add    esp,0x10
c0018ed3:	85 c0                	test   eax,eax
c0018ed5:	75 0f                	jne    c0018ee6 <CPU::detectFeatures()+0x2a2>
c0018ed7:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c0018ee1:	e9 35 01 00 00       	jmp    c001901b <CPU::detectFeatures()+0x3d7>
c0018ee6:	50                   	push   eax
c0018ee7:	50                   	push   eax
c0018ee8:	68 35 b0 02 c0       	push   0xc002b035
c0018eed:	57                   	push   edi
c0018eee:	e8 cd 79 fe ff       	call   c00008c0 <strcmp>
c0018ef3:	83 c4 10             	add    esp,0x10
c0018ef6:	85 c0                	test   eax,eax
c0018ef8:	75 0f                	jne    c0018f09 <CPU::detectFeatures()+0x2c5>
c0018efa:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c0018f04:	e9 12 01 00 00       	jmp    c001901b <CPU::detectFeatures()+0x3d7>
c0018f09:	51                   	push   ecx
c0018f0a:	51                   	push   ecx
c0018f0b:	68 42 b0 02 c0       	push   0xc002b042
c0018f10:	57                   	push   edi
c0018f11:	e8 aa 79 fe ff       	call   c00008c0 <strcmp>
c0018f16:	83 c4 10             	add    esp,0x10
c0018f19:	85 c0                	test   eax,eax
c0018f1b:	75 0f                	jne    c0018f2c <CPU::detectFeatures()+0x2e8>
c0018f1d:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0018f27:	e9 ef 00 00 00       	jmp    c001901b <CPU::detectFeatures()+0x3d7>
c0018f2c:	52                   	push   edx
c0018f2d:	52                   	push   edx
c0018f2e:	68 4f b0 02 c0       	push   0xc002b04f
c0018f33:	57                   	push   edi
c0018f34:	e8 87 79 fe ff       	call   c00008c0 <strcmp>
c0018f39:	83 c4 10             	add    esp,0x10
c0018f3c:	85 c0                	test   eax,eax
c0018f3e:	75 0f                	jne    c0018f4f <CPU::detectFeatures()+0x30b>
c0018f40:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0018f4a:	e9 cc 00 00 00       	jmp    c001901b <CPU::detectFeatures()+0x3d7>
c0018f4f:	50                   	push   eax
c0018f50:	50                   	push   eax
c0018f51:	68 5c b0 02 c0       	push   0xc002b05c
c0018f56:	57                   	push   edi
c0018f57:	e8 64 79 fe ff       	call   c00008c0 <strcmp>
c0018f5c:	83 c4 10             	add    esp,0x10
c0018f5f:	85 c0                	test   eax,eax
c0018f61:	75 0f                	jne    c0018f72 <CPU::detectFeatures()+0x32e>
c0018f63:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0018f6d:	e9 a9 00 00 00       	jmp    c001901b <CPU::detectFeatures()+0x3d7>
c0018f72:	50                   	push   eax
c0018f73:	50                   	push   eax
c0018f74:	68 69 b0 02 c0       	push   0xc002b069
c0018f79:	57                   	push   edi
c0018f7a:	e8 41 79 fe ff       	call   c00008c0 <strcmp>
c0018f7f:	83 c4 10             	add    esp,0x10
c0018f82:	85 c0                	test   eax,eax
c0018f84:	75 0f                	jne    c0018f95 <CPU::detectFeatures()+0x351>
c0018f86:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0018f90:	e9 86 00 00 00       	jmp    c001901b <CPU::detectFeatures()+0x3d7>
c0018f95:	50                   	push   eax
c0018f96:	50                   	push   eax
c0018f97:	68 76 b0 02 c0       	push   0xc002b076
c0018f9c:	57                   	push   edi
c0018f9d:	e8 1e 79 fe ff       	call   c00008c0 <strcmp>
c0018fa2:	83 c4 10             	add    esp,0x10
c0018fa5:	85 c0                	test   eax,eax
c0018fa7:	75 0c                	jne    c0018fb5 <CPU::detectFeatures()+0x371>
c0018fa9:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c0018fb3:	eb 66                	jmp    c001901b <CPU::detectFeatures()+0x3d7>
c0018fb5:	50                   	push   eax
c0018fb6:	50                   	push   eax
c0018fb7:	68 83 b0 02 c0       	push   0xc002b083
c0018fbc:	57                   	push   edi
c0018fbd:	e8 fe 78 fe ff       	call   c00008c0 <strcmp>
c0018fc2:	83 c4 10             	add    esp,0x10
c0018fc5:	85 c0                	test   eax,eax
c0018fc7:	75 0c                	jne    c0018fd5 <CPU::detectFeatures()+0x391>
c0018fc9:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c0018fd3:	eb 46                	jmp    c001901b <CPU::detectFeatures()+0x3d7>
c0018fd5:	50                   	push   eax
c0018fd6:	50                   	push   eax
c0018fd7:	68 90 b0 02 c0       	push   0xc002b090
c0018fdc:	57                   	push   edi
c0018fdd:	e8 de 78 fe ff       	call   c00008c0 <strcmp>
c0018fe2:	83 c4 10             	add    esp,0x10
c0018fe5:	85 c0                	test   eax,eax
c0018fe7:	74 e0                	je     c0018fc9 <CPU::detectFeatures()+0x385>
c0018fe9:	50                   	push   eax
c0018fea:	50                   	push   eax
c0018feb:	68 9d b0 02 c0       	push   0xc002b09d
c0018ff0:	57                   	push   edi
c0018ff1:	e8 ca 78 fe ff       	call   c00008c0 <strcmp>
c0018ff6:	83 c4 10             	add    esp,0x10
c0018ff9:	85 c0                	test   eax,eax
c0018ffb:	74 cc                	je     c0018fc9 <CPU::detectFeatures()+0x385>
c0018ffd:	51                   	push   ecx
c0018ffe:	51                   	push   ecx
c0018fff:	68 aa b0 02 c0       	push   0xc002b0aa
c0019004:	57                   	push   edi
c0019005:	e8 b6 78 fe ff       	call   c00008c0 <strcmp>
c001900a:	83 c4 10             	add    esp,0x10
c001900d:	85 c0                	test   eax,eax
c001900f:	74 b8                	je     c0018fc9 <CPU::detectFeatures()+0x385>
c0019011:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c001901b:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c0019020:	0f 86 be 00 00 00    	jbe    c00190e4 <CPU::detectFeatures()+0x4a0>
c0019026:	83 ec 0c             	sub    esp,0xc
c0019029:	68 80 00 00 00       	push   0x80
c001902e:	e8 ab f8 ff ff       	call   c00188de <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0019033:	83 e0 01             	and    eax,0x1
c0019036:	c1 e0 06             	shl    eax,0x6
c0019039:	88 c2                	mov    dl,al
c001903b:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019041:	83 e0 bf             	and    eax,0xffffffbf
c0019044:	09 d0                	or     eax,edx
c0019046:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001904c:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0019053:	e8 86 f8 ff ff       	call   c00188de <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0019058:	83 e0 01             	and    eax,0x1
c001905b:	c1 e0 04             	shl    eax,0x4
c001905e:	88 c2                	mov    dl,al
c0019060:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0019066:	83 e0 ef             	and    eax,0xffffffef
c0019069:	09 d0                	or     eax,edx
c001906b:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0019071:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c0019078:	e8 61 f8 ff ff       	call   c00188de <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001907d:	c1 e0 07             	shl    eax,0x7
c0019080:	88 c2                	mov    dl,al
c0019082:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019088:	83 e0 7f             	and    eax,0x7f
c001908b:	09 d0                	or     eax,edx
c001908d:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019093:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001909a:	e8 6d f8 ff ff       	call   c001890c <CPU::cpuidCheckExtendedECX(unsigned int)>
c001909f:	83 e0 01             	and    eax,0x1
c00190a2:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c00190a9:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c00190af:	83 e0 f7             	and    eax,0xfffffff7
c00190b2:	09 d0                	or     eax,edx
c00190b4:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c00190ba:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c00190c1:	e8 46 f8 ff ff       	call   c001890c <CPU::cpuidCheckExtendedECX(unsigned int)>
c00190c6:	83 c4 10             	add    esp,0x10
c00190c9:	83 e0 01             	and    eax,0x1
c00190cc:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00190d3:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00190d9:	83 e0 fb             	and    eax,0xfffffffb
c00190dc:	09 d0                	or     eax,edx
c00190de:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00190e4:	83 ec 0c             	sub    esp,0xc
c00190e7:	56                   	push   esi
c00190e8:	55                   	push   ebp
c00190e9:	8d 7c 24 28          	lea    edi,[esp+0x28]
c00190ed:	57                   	push   edi
c00190ee:	8d 44 24 28          	lea    eax,[esp+0x28]
c00190f2:	50                   	push   eax
c00190f3:	6a 01                	push   0x1
c00190f5:	e8 04 f7 ff ff       	call   c00187fe <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00190fa:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00190fe:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0019104:	88 ca                	mov    dl,cl
c0019106:	83 e0 f0             	and    eax,0xfffffff0
c0019109:	83 e2 0f             	and    edx,0xf
c001910c:	09 d0                	or     eax,edx
c001910e:	88 ca                	mov    dl,cl
c0019110:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c0019116:	c0 ea 04             	shr    dl,0x4
c0019119:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c001911d:	0f b6 c2             	movzx  eax,dl
c0019120:	83 c4 20             	add    esp,0x20
c0019123:	c1 e0 06             	shl    eax,0x6
c0019126:	89 c5                	mov    ebp,eax
c0019128:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001912e:	66 25 3f c0          	and    ax,0xc03f
c0019132:	09 e8                	or     eax,ebp
c0019134:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001913b:	89 c8                	mov    eax,ecx
c001913d:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c0019143:	c1 e8 08             	shr    eax,0x8
c0019146:	83 e2 3f             	and    edx,0x3f
c0019149:	83 e0 0f             	and    eax,0xf
c001914c:	89 c5                	mov    ebp,eax
c001914e:	c1 e5 06             	shl    ebp,0x6
c0019151:	09 d5                	or     ebp,edx
c0019153:	89 ea                	mov    edx,ebp
c0019155:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c001915b:	88 c2                	mov    dl,al
c001915d:	c0 ea 02             	shr    dl,0x2
c0019160:	89 d5                	mov    ebp,edx
c0019162:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c0019168:	83 e2 c0             	and    edx,0xffffffc0
c001916b:	09 d5                	or     ebp,edx
c001916d:	89 ea                	mov    edx,ebp
c001916f:	89 cd                	mov    ebp,ecx
c0019171:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c0019177:	c1 ed 0c             	shr    ebp,0xc
c001917a:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c0019180:	83 e5 03             	and    ebp,0x3
c0019183:	83 e2 cf             	and    edx,0xffffffcf
c0019186:	c1 e5 04             	shl    ebp,0x4
c0019189:	09 d5                	or     ebp,edx
c001918b:	3c 06                	cmp    al,0x6
c001918d:	89 ea                	mov    edx,ebp
c001918f:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c0019195:	74 04                	je     c001919b <CPU::detectFeatures()+0x557>
c0019197:	3c 0f                	cmp    al,0xf
c0019199:	75 5c                	jne    c00191f7 <CPU::detectFeatures()+0x5b3>
c001919b:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001919f:	89 cd                	mov    ebp,ecx
c00191a1:	c1 ed 10             	shr    ebp,0x10
c00191a4:	c1 e5 04             	shl    ebp,0x4
c00191a7:	09 ea                	or     edx,ebp
c00191a9:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c00191af:	0f b6 d2             	movzx  edx,dl
c00191b2:	66 81 e5 3f c0       	and    bp,0xc03f
c00191b7:	c1 e2 06             	shl    edx,0x6
c00191ba:	09 ea                	or     edx,ebp
c00191bc:	3c 0f                	cmp    al,0xf
c00191be:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c00191c5:	75 30                	jne    c00191f7 <CPU::detectFeatures()+0x5b3>
c00191c7:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c00191cd:	c1 e9 14             	shr    ecx,0x14
c00191d0:	83 e0 3f             	and    eax,0x3f
c00191d3:	83 c1 0f             	add    ecx,0xf
c00191d6:	88 ca                	mov    dl,cl
c00191d8:	c0 e9 02             	shr    cl,0x2
c00191db:	c1 e2 06             	shl    edx,0x6
c00191de:	09 d0                	or     eax,edx
c00191e0:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c00191e6:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c00191ec:	83 e0 c0             	and    eax,0xffffffc0
c00191ef:	09 c1                	or     ecx,eax
c00191f1:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c00191f7:	83 ec 0c             	sub    esp,0xc
c00191fa:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0019201:	56                   	push   esi
c0019202:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019206:	50                   	push   eax
c0019207:	57                   	push   edi
c0019208:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001920c:	55                   	push   ebp
c001920d:	68 00 00 00 80       	push   0x80000000
c0019212:	e8 e7 f5 ff ff       	call   c00187fe <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019217:	83 c4 20             	add    esp,0x20
c001921a:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c0019222:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019226:	76 1e                	jbe    c0019246 <CPU::detectFeatures()+0x602>
c0019228:	83 ec 0c             	sub    esp,0xc
c001922b:	56                   	push   esi
c001922c:	50                   	push   eax
c001922d:	57                   	push   edi
c001922e:	55                   	push   ebp
c001922f:	68 01 00 00 80       	push   0x80000001
c0019234:	e8 c5 f5 ff ff       	call   c00187fe <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019239:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c0019243:	83 c4 20             	add    esp,0x20
c0019246:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001924c:	83 f8 01             	cmp    eax,0x1
c001924f:	75 6f                	jne    c00192c0 <CPU::detectFeatures()+0x67c>
c0019251:	51                   	push   ecx
c0019252:	51                   	push   ecx
c0019253:	68 b6 b0 02 c0       	push   0xc002b0b6
c0019258:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001925c:	56                   	push   esi
c001925d:	e8 d2 75 fe ff       	call   c0000834 <strcpy>
c0019262:	5f                   	pop    edi
c0019263:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019269:	5d                   	pop    ebp
c001926a:	66 c1 e8 06          	shr    ax,0x6
c001926e:	0f b6 c0             	movzx  eax,al
c0019271:	50                   	push   eax
c0019272:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019278:	c1 e8 0e             	shr    eax,0xe
c001927b:	0f b6 c0             	movzx  eax,al
c001927e:	50                   	push   eax
c001927f:	e8 24 f2 ff ff       	call   c00184a8 <CPU::lookupIntelName(unsigned char, unsigned char)>
c0019284:	5a                   	pop    edx
c0019285:	59                   	pop    ecx
c0019286:	50                   	push   eax
c0019287:	56                   	push   esi
c0019288:	e8 e7 76 fe ff       	call   c0000974 <strcat>
c001928d:	5f                   	pop    edi
c001928e:	5d                   	pop    ebp
c001928f:	56                   	push   esi
c0019290:	53                   	push   ebx
c0019291:	e8 88 ae ff ff       	call   c001411e <Device::setName(char const*)>
c0019296:	58                   	pop    eax
c0019297:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c001929d:	5a                   	pop    edx
c001929e:	68 bd b0 02 c0       	push   0xc002b0bd
c00192a3:	50                   	push   eax
c00192a4:	e8 17 76 fe ff       	call   c00008c0 <strcmp>
c00192a9:	83 c4 10             	add    esp,0x10
c00192ac:	85 c0                	test   eax,eax
c00192ae:	0f 85 71 03 00 00    	jne    c0019625 <CPU::detectFeatures()+0x9e1>
c00192b4:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c00192bb:	e9 65 03 00 00       	jmp    c0019625 <CPU::detectFeatures()+0x9e1>
c00192c0:	83 f8 02             	cmp    eax,0x2
c00192c3:	0f 85 b5 00 00 00    	jne    c001937e <CPU::detectFeatures()+0x73a>
c00192c9:	57                   	push   edi
c00192ca:	57                   	push   edi
c00192cb:	68 cf b0 02 c0       	push   0xc002b0cf
c00192d0:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00192d4:	56                   	push   esi
c00192d5:	e8 5a 75 fe ff       	call   c0000834 <strcpy>
c00192da:	5d                   	pop    ebp
c00192db:	58                   	pop    eax
c00192dc:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00192e2:	66 c1 e8 06          	shr    ax,0x6
c00192e6:	0f b6 c0             	movzx  eax,al
c00192e9:	50                   	push   eax
c00192ea:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00192f0:	c1 e8 0e             	shr    eax,0xe
c00192f3:	0f b6 c0             	movzx  eax,al
c00192f6:	50                   	push   eax
c00192f7:	e8 18 f0 ff ff       	call   c0018314 <CPU::lookupAMDName(unsigned char, unsigned char)>
c00192fc:	5a                   	pop    edx
c00192fd:	59                   	pop    ecx
c00192fe:	50                   	push   eax
c00192ff:	56                   	push   esi
c0019300:	e8 6f 76 fe ff       	call   c0000974 <strcat>
c0019305:	5f                   	pop    edi
c0019306:	5d                   	pop    ebp
c0019307:	56                   	push   esi
c0019308:	53                   	push   ebx
c0019309:	e8 10 ae ff ff       	call   c001411e <Device::setName(char const*)>
c001930e:	58                   	pop    eax
c001930f:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0019315:	5a                   	pop    edx
c0019316:	68 d4 b0 02 c0       	push   0xc002b0d4
c001931b:	50                   	push   eax
c001931c:	e8 9f 75 fe ff       	call   c00008c0 <strcmp>
c0019321:	83 c4 10             	add    esp,0x10
c0019324:	85 c0                	test   eax,eax
c0019326:	75 20                	jne    c0019348 <CPU::detectFeatures()+0x704>
c0019328:	8b 15 68 db 02 c0    	mov    edx,DWORD PTR ds:0xc002db68
c001932e:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0019334:	a8 01                	test   al,0x1
c0019336:	74 10                	je     c0019348 <CPU::detectFeatures()+0x704>
c0019338:	83 e0 fe             	and    eax,0xfffffffe
c001933b:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0019341:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c0019348:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001934e:	c1 e8 0e             	shr    eax,0xe
c0019351:	3c 05                	cmp    al,0x5
c0019353:	0f 85 cc 02 00 00    	jne    c0019625 <CPU::detectFeatures()+0x9e1>
c0019359:	56                   	push   esi
c001935a:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0019360:	83 e0 0f             	and    eax,0xf
c0019363:	50                   	push   eax
c0019364:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001936a:	66 c1 e8 06          	shr    ax,0x6
c001936e:	0f b6 c0             	movzx  eax,al
c0019371:	50                   	push   eax
c0019372:	6a 05                	push   0x5
c0019374:	e8 11 f4 ff ff       	call   c001878a <CPU::AMD_K6_writeback(int, int, int)>
c0019379:	e9 1f 02 00 00       	jmp    c001959d <CPU::detectFeatures()+0x959>
c001937e:	8d 50 fd             	lea    edx,[eax-0x3]
c0019381:	83 fa 01             	cmp    edx,0x1
c0019384:	76 09                	jbe    c001938f <CPU::detectFeatures()+0x74b>
c0019386:	83 f8 06             	cmp    eax,0x6
c0019389:	0f 85 91 01 00 00    	jne    c0019520 <CPU::detectFeatures()+0x8dc>
c001938f:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0019395:	c1 ea 0e             	shr    edx,0xe
c0019398:	80 fa 05             	cmp    dl,0x5
c001939b:	75 7b                	jne    c0019418 <CPU::detectFeatures()+0x7d4>
c001939d:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00193a3:	66 81 e2 c0 3f       	and    dx,0x3fc0
c00193a8:	66 81 fa 00 01       	cmp    dx,0x100
c00193ad:	75 0c                	jne    c00193bb <CPU::detectFeatures()+0x777>
c00193af:	51                   	push   ecx
c00193b0:	51                   	push   ecx
c00193b1:	68 db b0 02 c0       	push   0xc002b0db
c00193b6:	e9 dc 01 00 00       	jmp    c0019597 <CPU::detectFeatures()+0x953>
c00193bb:	66 81 fa 00 02       	cmp    dx,0x200
c00193c0:	75 0c                	jne    c00193ce <CPU::detectFeatures()+0x78a>
c00193c2:	52                   	push   edx
c00193c3:	52                   	push   edx
c00193c4:	68 ee b0 02 c0       	push   0xc002b0ee
c00193c9:	e9 c9 01 00 00       	jmp    c0019597 <CPU::detectFeatures()+0x953>
c00193ce:	66 81 fa 40 02       	cmp    dx,0x240
c00193d3:	75 0c                	jne    c00193e1 <CPU::detectFeatures()+0x79d>
c00193d5:	50                   	push   eax
c00193d6:	50                   	push   eax
c00193d7:	68 00 b1 02 c0       	push   0xc002b100
c00193dc:	e9 b6 01 00 00       	jmp    c0019597 <CPU::detectFeatures()+0x953>
c00193e1:	83 f8 06             	cmp    eax,0x6
c00193e4:	75 0c                	jne    c00193f2 <CPU::detectFeatures()+0x7ae>
c00193e6:	50                   	push   eax
c00193e7:	50                   	push   eax
c00193e8:	68 12 b1 02 c0       	push   0xc002b112
c00193ed:	e9 a5 01 00 00       	jmp    c0019597 <CPU::detectFeatures()+0x953>
c00193f2:	83 f8 04             	cmp    eax,0x4
c00193f5:	75 0c                	jne    c0019403 <CPU::detectFeatures()+0x7bf>
c00193f7:	50                   	push   eax
c00193f8:	50                   	push   eax
c00193f9:	68 1e b1 02 c0       	push   0xc002b11e
c00193fe:	e9 94 01 00 00       	jmp    c0019597 <CPU::detectFeatures()+0x953>
c0019403:	83 f8 03             	cmp    eax,0x3
c0019406:	0f 85 19 02 00 00    	jne    c0019625 <CPU::detectFeatures()+0x9e1>
c001940c:	50                   	push   eax
c001940d:	50                   	push   eax
c001940e:	68 26 b1 02 c0       	push   0xc002b126
c0019413:	e9 7f 01 00 00       	jmp    c0019597 <CPU::detectFeatures()+0x953>
c0019418:	80 fa 06             	cmp    dl,0x6
c001941b:	0f 85 db 00 00 00    	jne    c00194fc <CPU::detectFeatures()+0x8b8>
c0019421:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0019427:	66 81 e2 c0 3f       	and    dx,0x3fc0
c001942c:	66 81 fa 80 01       	cmp    dx,0x180
c0019431:	75 0c                	jne    c001943f <CPU::detectFeatures()+0x7fb>
c0019433:	50                   	push   eax
c0019434:	50                   	push   eax
c0019435:	68 31 b1 02 c0       	push   0xc002b131
c001943a:	e9 58 01 00 00       	jmp    c0019597 <CPU::detectFeatures()+0x953>
c001943f:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c0019445:	66 f7 c1 80 ff       	test   cx,0xff80
c001944a:	75 0c                	jne    c0019458 <CPU::detectFeatures()+0x814>
c001944c:	50                   	push   eax
c001944d:	50                   	push   eax
c001944e:	68 41 b1 02 c0       	push   0xc002b141
c0019453:	e9 3f 01 00 00       	jmp    c0019597 <CPU::detectFeatures()+0x953>
c0019458:	66 81 fa 40 02       	cmp    dx,0x240
c001945d:	75 0c                	jne    c001946b <CPU::detectFeatures()+0x827>
c001945f:	55                   	push   ebp
c0019460:	55                   	push   ebp
c0019461:	68 48 b1 02 c0       	push   0xc002b148
c0019466:	e9 2c 01 00 00       	jmp    c0019597 <CPU::detectFeatures()+0x953>
c001946b:	66 81 fa 80 02       	cmp    dx,0x280
c0019470:	75 0c                	jne    c001947e <CPU::detectFeatures()+0x83a>
c0019472:	57                   	push   edi
c0019473:	57                   	push   edi
c0019474:	68 51 b1 02 c0       	push   0xc002b151
c0019479:	e9 19 01 00 00       	jmp    c0019597 <CPU::detectFeatures()+0x953>
c001947e:	66 81 fa 40 03       	cmp    dx,0x340
c0019483:	74 ed                	je     c0019472 <CPU::detectFeatures()+0x82e>
c0019485:	66 81 fa c0 03       	cmp    dx,0x3c0
c001948a:	75 0c                	jne    c0019498 <CPU::detectFeatures()+0x854>
c001948c:	56                   	push   esi
c001948d:	56                   	push   esi
c001948e:	68 58 b1 02 c0       	push   0xc002b158
c0019493:	e9 ff 00 00 00       	jmp    c0019597 <CPU::detectFeatures()+0x953>
c0019498:	83 f8 06             	cmp    eax,0x6
c001949b:	0f 84 45 ff ff ff    	je     c00193e6 <CPU::detectFeatures()+0x7a2>
c00194a1:	83 f8 04             	cmp    eax,0x4
c00194a4:	0f 84 4d ff ff ff    	je     c00193f7 <CPU::detectFeatures()+0x7b3>
c00194aa:	83 f8 03             	cmp    eax,0x3
c00194ad:	0f 85 72 01 00 00    	jne    c0019625 <CPU::detectFeatures()+0x9e1>
c00194b3:	51                   	push   ecx
c00194b4:	51                   	push   ecx
c00194b5:	68 61 b1 02 c0       	push   0xc002b161
c00194ba:	53                   	push   ebx
c00194bb:	e8 5e ac ff ff       	call   c001411e <Device::setName(char const*)>
c00194c0:	b1 c1                	mov    cl,0xc1
c00194c2:	88 c8                	mov    al,cl
c00194c4:	e6 22                	out    0x22,al
c00194c6:	e4 23                	in     al,0x23
c00194c8:	88 c2                	mov    dl,al
c00194ca:	88 c8                	mov    al,cl
c00194cc:	e6 22                	out    0x22,al
c00194ce:	88 d0                	mov    al,dl
c00194d0:	83 c8 10             	or     eax,0x10
c00194d3:	e6 23                	out    0x23,al
c00194d5:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c00194dc:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00194df:	89 d0                	mov    eax,edx
c00194e1:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c00194e7:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c00194eb:	40                   	inc    eax
c00194ec:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c00194f2:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00194f7:	e9 a1 00 00 00       	jmp    c001959d <CPU::detectFeatures()+0x959>
c00194fc:	83 f8 06             	cmp    eax,0x6
c00194ff:	0f 84 e1 fe ff ff    	je     c00193e6 <CPU::detectFeatures()+0x7a2>
c0019505:	83 f8 04             	cmp    eax,0x4
c0019508:	0f 84 e9 fe ff ff    	je     c00193f7 <CPU::detectFeatures()+0x7b3>
c001950e:	83 f8 03             	cmp    eax,0x3
c0019511:	0f 85 0e 01 00 00    	jne    c0019625 <CPU::detectFeatures()+0x9e1>
c0019517:	52                   	push   edx
c0019518:	52                   	push   edx
c0019519:	68 6c b1 02 c0       	push   0xc002b16c
c001951e:	eb 77                	jmp    c0019597 <CPU::detectFeatures()+0x953>
c0019520:	83 f8 07             	cmp    eax,0x7
c0019523:	75 09                	jne    c001952e <CPU::detectFeatures()+0x8ea>
c0019525:	50                   	push   eax
c0019526:	50                   	push   eax
c0019527:	68 76 b1 02 c0       	push   0xc002b176
c001952c:	eb 69                	jmp    c0019597 <CPU::detectFeatures()+0x953>
c001952e:	83 f8 0a             	cmp    eax,0xa
c0019531:	75 09                	jne    c001953c <CPU::detectFeatures()+0x8f8>
c0019533:	50                   	push   eax
c0019534:	50                   	push   eax
c0019535:	68 81 b1 02 c0       	push   0xc002b181
c001953a:	eb 5b                	jmp    c0019597 <CPU::detectFeatures()+0x953>
c001953c:	83 f8 0b             	cmp    eax,0xb
c001953f:	75 09                	jne    c001954a <CPU::detectFeatures()+0x906>
c0019541:	50                   	push   eax
c0019542:	50                   	push   eax
c0019543:	68 89 b1 02 c0       	push   0xc002b189
c0019548:	eb 4d                	jmp    c0019597 <CPU::detectFeatures()+0x953>
c001954a:	83 f8 08             	cmp    eax,0x8
c001954d:	75 09                	jne    c0019558 <CPU::detectFeatures()+0x914>
c001954f:	50                   	push   eax
c0019550:	50                   	push   eax
c0019551:	68 92 b1 02 c0       	push   0xc002b192
c0019556:	eb 3f                	jmp    c0019597 <CPU::detectFeatures()+0x953>
c0019558:	83 f8 09             	cmp    eax,0x9
c001955b:	75 09                	jne    c0019566 <CPU::detectFeatures()+0x922>
c001955d:	50                   	push   eax
c001955e:	50                   	push   eax
c001955f:	68 9a b1 02 c0       	push   0xc002b19a
c0019564:	eb 31                	jmp    c0019597 <CPU::detectFeatures()+0x953>
c0019566:	83 f8 05             	cmp    eax,0x5
c0019569:	75 09                	jne    c0019574 <CPU::detectFeatures()+0x930>
c001956b:	50                   	push   eax
c001956c:	50                   	push   eax
c001956d:	68 a2 b1 02 c0       	push   0xc002b1a2
c0019572:	eb 23                	jmp    c0019597 <CPU::detectFeatures()+0x953>
c0019574:	83 f8 0c             	cmp    eax,0xc
c0019577:	75 09                	jne    c0019582 <CPU::detectFeatures()+0x93e>
c0019579:	55                   	push   ebp
c001957a:	55                   	push   ebp
c001957b:	68 b0 b1 02 c0       	push   0xc002b1b0
c0019580:	eb 15                	jmp    c0019597 <CPU::detectFeatures()+0x953>
c0019582:	83 f8 0d             	cmp    eax,0xd
c0019585:	75 09                	jne    c0019590 <CPU::detectFeatures()+0x94c>
c0019587:	57                   	push   edi
c0019588:	57                   	push   edi
c0019589:	68 bb b1 02 c0       	push   0xc002b1bb
c001958e:	eb 07                	jmp    c0019597 <CPU::detectFeatures()+0x953>
c0019590:	56                   	push   esi
c0019591:	56                   	push   esi
c0019592:	68 cf b1 02 c0       	push   0xc002b1cf
c0019597:	53                   	push   ebx
c0019598:	e8 81 ab ff ff       	call   c001411e <Device::setName(char const*)>
c001959d:	83 c4 10             	add    esp,0x10
c00195a0:	e9 80 00 00 00       	jmp    c0019625 <CPU::detectFeatures()+0x9e1>
c00195a5:	51                   	push   ecx
c00195a6:	51                   	push   ecx
c00195a7:	68 1b b0 02 c0       	push   0xc002b01b
c00195ac:	57                   	push   edi
c00195ad:	e8 82 72 fe ff       	call   c0000834 <strcpy>
c00195b2:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c00195bc:	e8 ed 6c fe ff       	call   c00002ae <is486>
c00195c1:	83 c4 10             	add    esp,0x10
c00195c4:	85 c0                	test   eax,eax
c00195c6:	74 2b                	je     c00195f3 <CPU::detectFeatures()+0x9af>
c00195c8:	52                   	push   edx
c00195c9:	52                   	push   edx
c00195ca:	68 db b1 02 c0       	push   0xc002b1db
c00195cf:	53                   	push   ebx
c00195d0:	e8 49 ab ff ff       	call   c001411e <Device::setName(char const*)>
c00195d5:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c00195dc:	0f 20 c0             	mov    eax,cr0
c00195df:	83 e0 14             	and    eax,0x14
c00195e2:	83 c4 10             	add    esp,0x10
c00195e5:	83 f8 04             	cmp    eax,0x4
c00195e8:	75 1f                	jne    c0019609 <CPU::detectFeatures()+0x9c5>
c00195ea:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c00195f1:	eb 32                	jmp    c0019625 <CPU::detectFeatures()+0x9e1>
c00195f3:	50                   	push   eax
c00195f4:	50                   	push   eax
c00195f5:	68 e6 b1 02 c0       	push   0xc002b1e6
c00195fa:	53                   	push   ebx
c00195fb:	e8 1e ab ff ff       	call   c001411e <Device::setName(char const*)>
c0019600:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c0019607:	eb d3                	jmp    c00195dc <CPU::detectFeatures()+0x998>
c0019609:	e8 7b 6c fe ff       	call   c0000289 <hasLegacyFPU>
c001960e:	83 e0 01             	and    eax,0x1
c0019611:	8d 14 00             	lea    edx,[eax+eax*1]
c0019614:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c001961a:	83 e0 fd             	and    eax,0xfffffffd
c001961d:	09 d0                	or     eax,edx
c001961f:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0019625:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c001962c:	83 c4 4c             	add    esp,0x4c
c001962f:	5b                   	pop    ebx
c0019630:	5e                   	pop    esi
c0019631:	5f                   	pop    edi
c0019632:	5d                   	pop    ebp
c0019633:	c3                   	ret    

c0019634 <CPU::setupSMEP()>:
c0019634:	0f 20 e0             	mov    eax,cr4
c0019637:	0d 00 00 10 00       	or     eax,0x100000
c001963c:	0f 22 e0             	mov    cr4,eax
c001963f:	c3                   	ret    

c0019640 <CPU::setupUMIP()>:
c0019640:	0f 20 e0             	mov    eax,cr4
c0019643:	80 cc 08             	or     ah,0x8
c0019646:	0f 22 e0             	mov    cr4,eax
c0019649:	c3                   	ret    

c001964a <CPU::setupTSC()>:
c001964a:	0f 20 e0             	mov    eax,cr4
c001964d:	83 c8 04             	or     eax,0x4
c0019650:	0f 22 e0             	mov    cr4,eax
c0019653:	c3                   	ret    

c0019654 <CPU::setupLargePages()>:
c0019654:	0f 20 e0             	mov    eax,cr4
c0019657:	83 c8 10             	or     eax,0x10
c001965a:	0f 22 e0             	mov    cr4,eax
c001965d:	c3                   	ret    

c001965e <CPU::setupPAT()>:
c001965e:	a1 68 db 02 c0       	mov    eax,ds:0xc002db68
c0019663:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c001966a:	74 2c                	je     c0019698 <CPU::setupPAT()+0x3a>
c001966c:	53                   	push   ebx
c001966d:	83 ec 10             	sub    esp,0x10
c0019670:	68 77 02 00 00       	push   0x277
c0019675:	50                   	push   eax
c0019676:	e8 73 57 ff ff       	call   c000edee <Computer::rdmsr(unsigned int)>
c001967b:	83 e2 f8             	and    edx,0xfffffff8
c001967e:	83 ca 01             	or     edx,0x1
c0019681:	52                   	push   edx
c0019682:	50                   	push   eax
c0019683:	68 77 02 00 00       	push   0x277
c0019688:	ff 35 68 db 02 c0    	push   DWORD PTR ds:0xc002db68
c001968e:	e8 87 57 ff ff       	call   c000ee1a <Computer::wrmsr(unsigned int, unsigned long long)>
c0019693:	83 c4 28             	add    esp,0x28
c0019696:	5b                   	pop    ebx
c0019697:	c3                   	ret    
c0019698:	c3                   	ret    
c0019699:	90                   	nop

c001969a <CPU::setupMTRR()>:
c001969a:	c3                   	ret    
c001969b:	90                   	nop

c001969c <CPU::setupGlobalPages()>:
c001969c:	0f 20 e0             	mov    eax,cr4
c001969f:	0c 80                	or     al,0x80
c00196a1:	0f 22 e0             	mov    cr4,eax
c00196a4:	c3                   	ret    
c00196a5:	90                   	nop

c00196a6 <CPU::allowUsermodeDataAccess()>:
c00196a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00196aa:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c00196b1:	74 03                	je     c00196b6 <CPU::allowUsermodeDataAccess()+0x10>
c00196b3:	0f 01 cb             	stac   
c00196b6:	c3                   	ret    
c00196b7:	90                   	nop

c00196b8 <CPU::prohibitUsermodeDataAccess()>:
c00196b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00196bc:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c00196c3:	74 03                	je     c00196c8 <CPU::prohibitUsermodeDataAccess()+0x10>
c00196c5:	0f 01 ca             	clac   
c00196c8:	c3                   	ret    
c00196c9:	90                   	nop

c00196ca <CPU::setupSMAP()>:
c00196ca:	0f 20 e0             	mov    eax,cr4
c00196cd:	0d 00 00 20 00       	or     eax,0x200000
c00196d2:	0f 22 e0             	mov    cr4,eax
c00196d5:	eb e1                	jmp    c00196b8 <CPU::prohibitUsermodeDataAccess()>
c00196d7:	90                   	nop

c00196d8 <CPU::setupFeatures()>:
c00196d8:	83 ec 0c             	sub    esp,0xc
c00196db:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00196df:	f6 82 90 11 00 00 40 	test   BYTE PTR [edx+0x1190],0x40
c00196e6:	74 07                	je     c00196ef <CPU::setupFeatures()+0x17>
c00196e8:	52                   	push   edx
c00196e9:	e8 46 ff ff ff       	call   c0019634 <CPU::setupSMEP()>
c00196ee:	58                   	pop    eax
c00196ef:	f6 82 91 11 00 00 10 	test   BYTE PTR [edx+0x1191],0x10
c00196f6:	74 07                	je     c00196ff <CPU::setupFeatures()+0x27>
c00196f8:	52                   	push   edx
c00196f9:	e8 cc ff ff ff       	call   c00196ca <CPU::setupSMAP()>
c00196fe:	58                   	pop    eax
c00196ff:	f6 82 91 11 00 00 08 	test   BYTE PTR [edx+0x1191],0x8
c0019706:	74 07                	je     c001970f <CPU::setupFeatures()+0x37>
c0019708:	52                   	push   edx
c0019709:	e8 32 ff ff ff       	call   c0019640 <CPU::setupUMIP()>
c001970e:	58                   	pop    eax
c001970f:	f6 82 90 11 00 00 02 	test   BYTE PTR [edx+0x1190],0x2
c0019716:	74 07                	je     c001971f <CPU::setupFeatures()+0x47>
c0019718:	52                   	push   edx
c0019719:	e8 2c ff ff ff       	call   c001964a <CPU::setupTSC()>
c001971e:	58                   	pop    eax
c001971f:	f6 82 90 11 00 00 08 	test   BYTE PTR [edx+0x1190],0x8
c0019726:	74 07                	je     c001972f <CPU::setupFeatures()+0x57>
c0019728:	52                   	push   edx
c0019729:	e8 26 ff ff ff       	call   c0019654 <CPU::setupLargePages()>
c001972e:	59                   	pop    ecx
c001972f:	f6 82 90 11 00 00 10 	test   BYTE PTR [edx+0x1190],0x10
c0019736:	74 07                	je     c001973f <CPU::setupFeatures()+0x67>
c0019738:	52                   	push   edx
c0019739:	e8 5e ff ff ff       	call   c001969c <CPU::setupGlobalPages()>
c001973e:	58                   	pop    eax
c001973f:	f6 82 90 11 00 00 20 	test   BYTE PTR [edx+0x1190],0x20
c0019746:	74 0c                	je     c0019754 <CPU::setupFeatures()+0x7c>
c0019748:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001974c:	83 c4 0c             	add    esp,0xc
c001974f:	e9 0a ff ff ff       	jmp    c001965e <CPU::setupPAT()>
c0019754:	83 c4 0c             	add    esp,0xc
c0019757:	c3                   	ret    

c0019758 <CPU::open(int, int, void*)>:
c0019758:	57                   	push   edi
c0019759:	56                   	push   esi
c001975a:	53                   	push   ebx
c001975b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001975f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019763:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0019769:	83 ec 0c             	sub    esp,0xc
c001976c:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0019772:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c0019778:	50                   	push   eax
c0019779:	e8 5c 59 ff ff       	call   c000f0da <GDT::setup()>
c001977e:	83 c4 0c             	add    esp,0xc
c0019781:	6a 00                	push   0x0
c0019783:	68 ef be ad de       	push   0xdeadbeef
c0019788:	57                   	push   edi
c0019789:	e8 08 7d ff ff       	call   c0011496 <TSS::setup(unsigned long, unsigned long)>
c001978e:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019791:	e8 e0 7c ff ff       	call   c0011476 <TSS::flush()>
c0019796:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c001979c:	89 04 24             	mov    DWORD PTR [esp],eax
c001979f:	e8 92 5b ff ff       	call   c000f336 <IDT::setup()>
c00197a4:	b8 00 04 00 00       	mov    eax,0x400
c00197a9:	0f 23 f8             	mov    db7,eax
c00197ac:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c00197b6:	e8 28 67 ff ff       	call   c000fee3 <Phys::allocatePage()>
c00197bb:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c00197c1:	89 30                	mov    DWORD PTR [eax],esi
c00197c3:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c00197c9:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00197cc:	58                   	pop    eax
c00197cd:	5a                   	pop    edx
c00197ce:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00197d4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00197d8:	e8 eb 8c ff ff       	call   c00124c8 <VAS::setCPUSpecific(unsigned long)>
c00197dd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00197e0:	e8 5f f4 ff ff       	call   c0018c44 <CPU::detectFeatures()>
c00197e5:	e8 fd bc ff ff       	call   c00154e7 <setupInterruptController()>
c00197ea:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c00197f0:	a1 80 db 02 c0       	mov    eax,ds:0xc002db80
c00197f5:	83 e0 10             	and    eax,0x10
c00197f8:	83 f8 01             	cmp    eax,0x1
c00197fb:	19 c0                	sbb    eax,eax
c00197fd:	83 e0 46             	and    eax,0x46
c0019800:	83 c0 1e             	add    eax,0x1e
c0019803:	89 04 24             	mov    DWORD PTR [esp],eax
c0019806:	e8 bb d1 ff ff       	call   c00169c6 <setupTimer(int)>
c001980b:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c0019811:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019814:	e8 bf fe ff ff       	call   c00196d8 <CPU::setupFeatures()>
c0019819:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001981c:	e8 a7 f1 ff ff       	call   c00189c8 <CPU::displayFeatures()>
c0019821:	83 c4 10             	add    esp,0x10
c0019824:	31 c0                	xor    eax,eax
c0019826:	5b                   	pop    ebx
c0019827:	5e                   	pop    esi
c0019828:	5f                   	pop    edi
c0019829:	c3                   	ret    

c001982a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c001982a:	57                   	push   edi
c001982b:	56                   	push   esi
c001982c:	53                   	push   ebx
c001982d:	51                   	push   ecx
c001982e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019832:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c0019835:	0f 02 c0             	lar    eax,ax
c0019838:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c001983b:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001983f:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c0019842:	88 ca                	mov    dl,cl
c0019844:	c0 ea 06             	shr    dl,0x6
c0019847:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c001984b:	89 ca                	mov    edx,ecx
c001984d:	66 c1 ea 03          	shr    dx,0x3
c0019851:	83 e2 07             	and    edx,0x7
c0019854:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c0019859:	88 17                	mov    BYTE PTR [edi],dl
c001985b:	0f 84 a6 01 00 00    	je     c0019a07 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c0019861:	83 e1 07             	and    ecx,0x7
c0019864:	80 f9 04             	cmp    cl,0x4
c0019867:	0f 84 98 00 00 00    	je     c0019905 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c001986d:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019872:	0f 95 c0             	setne  al
c0019875:	80 f9 05             	cmp    cl,0x5
c0019878:	0f 95 c2             	setne  dl
c001987b:	08 c2                	or     dl,al
c001987d:	74 79                	je     c00198f8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c001987f:	84 c9                	test   cl,cl
c0019881:	75 05                	jne    c0019888 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c0019883:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019886:	eb 3c                	jmp    c00198c4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019888:	80 f9 01             	cmp    cl,0x1
c001988b:	75 05                	jne    c0019892 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c001988d:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019890:	eb 32                	jmp    c00198c4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019892:	80 f9 02             	cmp    cl,0x2
c0019895:	75 05                	jne    c001989c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c0019897:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001989a:	eb 28                	jmp    c00198c4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001989c:	31 c0                	xor    eax,eax
c001989e:	80 f9 03             	cmp    cl,0x3
c00198a1:	75 05                	jne    c00198a8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c00198a3:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00198a6:	eb 1c                	jmp    c00198c4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00198a8:	80 f9 05             	cmp    cl,0x5
c00198ab:	75 05                	jne    c00198b2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c00198ad:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c00198b0:	eb 12                	jmp    c00198c4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00198b2:	80 f9 06             	cmp    cl,0x6
c00198b5:	75 05                	jne    c00198bc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c00198b7:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00198ba:	eb 08                	jmp    c00198c4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00198bc:	80 f9 07             	cmp    cl,0x7
c00198bf:	75 03                	jne    c00198c4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00198c1:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00198c4:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c00198c9:	75 10                	jne    c00198db <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c00198cb:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c00198cf:	b9 03 00 00 00       	mov    ecx,0x3
c00198d4:	01 d0                	add    eax,edx
c00198d6:	e9 37 01 00 00       	jmp    c0019a12 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00198db:	b9 02 00 00 00       	mov    ecx,0x2
c00198e0:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c00198e5:	0f 85 27 01 00 00    	jne    c0019a12 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00198eb:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c00198ee:	b9 06 00 00 00       	mov    ecx,0x6
c00198f3:	e9 1a 01 00 00       	jmp    c0019a12 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00198f8:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c00198fb:	b9 06 00 00 00       	mov    ecx,0x6
c0019900:	e9 0f 01 00 00       	jmp    c0019a14 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019905:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0019908:	88 ca                	mov    dl,cl
c001990a:	c0 ea 06             	shr    dl,0x6
c001990d:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c0019911:	89 ca                	mov    edx,ecx
c0019913:	66 c1 ea 03          	shr    dx,0x3
c0019917:	83 e2 07             	and    edx,0x7
c001991a:	80 e1 07             	and    cl,0x7
c001991d:	75 05                	jne    c0019924 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c001991f:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c0019922:	eb 4c                	jmp    c0019970 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019924:	80 f9 01             	cmp    cl,0x1
c0019927:	75 05                	jne    c001992e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c0019929:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c001992c:	eb 42                	jmp    c0019970 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001992e:	80 f9 02             	cmp    cl,0x2
c0019931:	75 05                	jne    c0019938 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c0019933:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0019936:	eb 38                	jmp    c0019970 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019938:	80 f9 03             	cmp    cl,0x3
c001993b:	75 05                	jne    c0019942 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c001993d:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c0019940:	eb 2e                	jmp    c0019970 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019942:	80 f9 04             	cmp    cl,0x4
c0019945:	75 12                	jne    c0019959 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c0019947:	f6 c4 60             	test   ah,0x60
c001994a:	75 08                	jne    c0019954 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c001994c:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c001994f:	8d 78 14             	lea    edi,[eax+0x14]
c0019952:	eb 1c                	jmp    c0019970 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019954:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c0019957:	eb 17                	jmp    c0019970 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019959:	80 f9 05             	cmp    cl,0x5
c001995c:	75 05                	jne    c0019963 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c001995e:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c0019961:	eb 0d                	jmp    c0019970 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019963:	80 f9 06             	cmp    cl,0x6
c0019966:	75 05                	jne    c001996d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c0019968:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001996b:	eb 03                	jmp    c0019970 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001996d:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0019970:	84 d2                	test   dl,dl
c0019972:	75 05                	jne    c0019979 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c0019974:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019977:	eb 3c                	jmp    c00199b5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019979:	80 fa 01             	cmp    dl,0x1
c001997c:	75 05                	jne    c0019983 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c001997e:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019981:	eb 32                	jmp    c00199b5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019983:	80 fa 02             	cmp    dl,0x2
c0019986:	75 05                	jne    c001998d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c0019988:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001998b:	eb 28                	jmp    c00199b5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001998d:	80 fa 03             	cmp    dl,0x3
c0019990:	75 05                	jne    c0019997 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c0019992:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019995:	eb 1e                	jmp    c00199b5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019997:	31 c0                	xor    eax,eax
c0019999:	80 fa 04             	cmp    dl,0x4
c001999c:	74 17                	je     c00199b5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001999e:	80 fa 05             	cmp    dl,0x5
c00199a1:	75 05                	jne    c00199a8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c00199a3:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c00199a6:	eb 0d                	jmp    c00199b5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00199a8:	80 fa 06             	cmp    dl,0x6
c00199ab:	75 05                	jne    c00199b2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c00199ad:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00199b0:	eb 03                	jmp    c00199b5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00199b2:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00199b5:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c00199ba:	0f 94 c2             	sete   dl
c00199bd:	80 f9 05             	cmp    cl,0x5
c00199c0:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c00199c4:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c00199c9:	d3 e0                	shl    eax,cl
c00199cb:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c00199cf:	74 0a                	je     c00199db <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c00199d1:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c00199d4:	b9 07 00 00 00       	mov    ecx,0x7
c00199d9:	eb 37                	jmp    c0019a12 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00199db:	01 f8                	add    eax,edi
c00199dd:	b9 03 00 00 00       	mov    ecx,0x3
c00199e2:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c00199e7:	74 2b                	je     c0019a14 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00199e9:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c00199ee:	75 0d                	jne    c00199fd <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c00199f0:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c00199f4:	01 c8                	add    eax,ecx
c00199f6:	b9 04 00 00 00       	mov    ecx,0x4
c00199fb:	eb 17                	jmp    c0019a14 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00199fd:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019a00:	b9 07 00 00 00       	mov    ecx,0x7
c0019a05:	eb 0d                	jmp    c0019a14 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019a07:	b9 02 00 00 00       	mov    ecx,0x2
c0019a0c:	b2 01                	mov    dl,0x1
c0019a0e:	31 c0                	xor    eax,eax
c0019a10:	eb 02                	jmp    c0019a14 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019a12:	31 d2                	xor    edx,edx
c0019a14:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019a18:	89 0b                	mov    DWORD PTR [ebx],ecx
c0019a1a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019a1e:	88 11                	mov    BYTE PTR [ecx],dl
c0019a20:	5a                   	pop    edx
c0019a21:	5b                   	pop    ebx
c0019a22:	5e                   	pop    esi
c0019a23:	5f                   	pop    edi
c0019a24:	c3                   	ret    

c0019a25 <Krnl::startCPU(int)>:
c0019a25:	83 ec 0c             	sub    esp,0xc
c0019a28:	e8 91 3c 00 00       	call   c001d6be <lockScheduler()>
c0019a2d:	83 ec 0c             	sub    esp,0xc
c0019a30:	a1 68 db 02 c0       	mov    eax,ds:0xc002db68
c0019a35:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0019a3b:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0019a41:	e8 ea b5 00 00       	call   c0025030 <APIC::getBase()>
c0019a46:	5a                   	pop    edx
c0019a47:	59                   	pop    ecx
c0019a48:	50                   	push   eax
c0019a49:	68 20 b2 02 c0       	push   0xc002b220
c0019a4e:	e8 c2 90 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c0019a53:	83 c4 1c             	add    esp,0x1c
c0019a56:	e9 65 3c 00 00       	jmp    c001d6c0 <unlockScheduler()>
c0019a5b:	90                   	nop

c0019a5c <EnvVarContainer::getEnv(char const*)>:
c0019a5c:	57                   	push   edi
c0019a5d:	56                   	push   esi
c0019a5e:	53                   	push   ebx
c0019a5f:	31 db                	xor    ebx,ebx
c0019a61:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019a65:	39 1e                	cmp    DWORD PTR [esi],ebx
c0019a67:	7e 2b                	jle    c0019a94 <EnvVarContainer::getEnv(char const*)+0x38>
c0019a69:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c0019a70:	50                   	push   eax
c0019a71:	50                   	push   eax
c0019a72:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0019a75:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c0019a78:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0019a7c:	e8 3f 6e fe ff       	call   c00008c0 <strcmp>
c0019a81:	83 c4 10             	add    esp,0x10
c0019a84:	85 c0                	test   eax,eax
c0019a86:	75 09                	jne    c0019a91 <EnvVarContainer::getEnv(char const*)+0x35>
c0019a88:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0019a8b:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c0019a8f:	eb 05                	jmp    c0019a96 <EnvVarContainer::getEnv(char const*)+0x3a>
c0019a91:	43                   	inc    ebx
c0019a92:	eb d1                	jmp    c0019a65 <EnvVarContainer::getEnv(char const*)+0x9>
c0019a94:	31 c0                	xor    eax,eax
c0019a96:	5b                   	pop    ebx
c0019a97:	5e                   	pop    esi
c0019a98:	5f                   	pop    edi
c0019a99:	c3                   	ret    

c0019a9a <EnvVarContainer::setEnv(char const*, char const*)>:
c0019a9a:	57                   	push   edi
c0019a9b:	56                   	push   esi
c0019a9c:	53                   	push   ebx
c0019a9d:	83 ec 1c             	sub    esp,0x1c
c0019aa0:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0019aa4:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0019aa8:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0019aac:	57                   	push   edi
c0019aad:	e8 e2 6c fe ff       	call   c0000794 <strlen>
c0019ab2:	40                   	inc    eax
c0019ab3:	89 04 24             	mov    DWORD PTR [esp],eax
c0019ab6:	e8 8b 5d ff ff       	call   c000f846 <malloc>
c0019abb:	89 34 24             	mov    DWORD PTR [esp],esi
c0019abe:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019ac2:	e8 cd 6c fe ff       	call   c0000794 <strlen>
c0019ac7:	40                   	inc    eax
c0019ac8:	89 04 24             	mov    DWORD PTR [esp],eax
c0019acb:	e8 76 5d ff ff       	call   c000f846 <malloc>
c0019ad0:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019ad3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019ad7:	e8 b8 6c fe ff       	call   c0000794 <strlen>
c0019adc:	83 c4 0c             	add    esp,0xc
c0019adf:	40                   	inc    eax
c0019ae0:	50                   	push   eax
c0019ae1:	6a 00                	push   0x0
c0019ae3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0019ae7:	e8 8c 6c fe ff       	call   c0000778 <memset>
c0019aec:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019aef:	e8 a0 6c fe ff       	call   c0000794 <strlen>
c0019af4:	83 c4 0c             	add    esp,0xc
c0019af7:	40                   	inc    eax
c0019af8:	50                   	push   eax
c0019af9:	57                   	push   edi
c0019afa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0019afe:	e8 41 6c fe ff       	call   c0000744 <memcpy>
c0019b03:	89 34 24             	mov    DWORD PTR [esp],esi
c0019b06:	e8 89 6c fe ff       	call   c0000794 <strlen>
c0019b0b:	83 c4 0c             	add    esp,0xc
c0019b0e:	40                   	inc    eax
c0019b0f:	50                   	push   eax
c0019b10:	6a 00                	push   0x0
c0019b12:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019b16:	e8 5d 6c fe ff       	call   c0000778 <memset>
c0019b1b:	89 34 24             	mov    DWORD PTR [esp],esi
c0019b1e:	e8 71 6c fe ff       	call   c0000794 <strlen>
c0019b23:	83 c4 0c             	add    esp,0xc
c0019b26:	40                   	inc    eax
c0019b27:	50                   	push   eax
c0019b28:	56                   	push   esi
c0019b29:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019b2d:	e8 12 6c fe ff       	call   c0000744 <memcpy>
c0019b32:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019b34:	40                   	inc    eax
c0019b35:	89 03                	mov    DWORD PTR [ebx],eax
c0019b37:	c1 e0 03             	shl    eax,0x3
c0019b3a:	5a                   	pop    edx
c0019b3b:	59                   	pop    ecx
c0019b3c:	50                   	push   eax
c0019b3d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0019b40:	e8 ed 5c ff ff       	call   c000f832 <realloc>
c0019b45:	83 c4 0c             	add    esp,0xc
c0019b48:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0019b4b:	6a 08                	push   0x8
c0019b4d:	8d 54 24 10          	lea    edx,[esp+0x10]
c0019b51:	52                   	push   edx
c0019b52:	8b 13                	mov    edx,DWORD PTR [ebx]
c0019b54:	8d 44 d0 f8          	lea    eax,[eax+edx*8-0x8]
c0019b58:	50                   	push   eax
c0019b59:	e8 e6 6b fe ff       	call   c0000744 <memcpy>
c0019b5e:	83 c4 20             	add    esp,0x20
c0019b61:	5b                   	pop    ebx
c0019b62:	5e                   	pop    esi
c0019b63:	5f                   	pop    edi
c0019b64:	c3                   	ret    
c0019b65:	90                   	nop

c0019b66 <EnvVarContainer::deleteEnv(char const*)>:
c0019b66:	c3                   	ret    
c0019b67:	90                   	nop

c0019b68 <EnvVarContainer::loadFrom(char const*, char const*)>:
c0019b68:	55                   	push   ebp
c0019b69:	57                   	push   edi
c0019b6a:	56                   	push   esi
c0019b6b:	53                   	push   ebx
c0019b6c:	81 ec 38 01 00 00    	sub    esp,0x138
c0019b72:	8b b4 24 4c 01 00 00 	mov    esi,DWORD PTR [esp+0x14c]
c0019b79:	8b ac 24 54 01 00 00 	mov    ebp,DWORD PTR [esp+0x154]
c0019b80:	68 14 01 00 00       	push   0x114
c0019b85:	e8 bc 5c ff ff       	call   c000f846 <malloc>
c0019b8a:	83 c4 0c             	add    esp,0xc
c0019b8d:	89 c7                	mov    edi,eax
c0019b8f:	ff 76 08             	push   DWORD PTR [esi+0x8]
c0019b92:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0019b99:	50                   	push   eax
c0019b9a:	e8 cf 94 ff ff       	call   c001306e <File::File(char const*, Process*)>
c0019b9f:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019ba2:	e8 99 97 ff ff       	call   c0013340 <File::exists()>
c0019ba7:	83 c4 10             	add    esp,0x10
c0019baa:	84 c0                	test   al,al
c0019bac:	75 31                	jne    c0019bdf <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c0019bae:	51                   	push   ecx
c0019baf:	51                   	push   ecx
c0019bb0:	6a 12                	push   0x12
c0019bb2:	57                   	push   edi
c0019bb3:	e8 1a 95 ff ff       	call   c00130d2 <File::open(FileOpenMode)>
c0019bb8:	8b 07                	mov    eax,DWORD PTR [edi]
c0019bba:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c0019bbd:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0019bc0:	e8 cf 6b fe ff       	call   c0000794 <strlen>
c0019bc5:	5a                   	pop    edx
c0019bc6:	31 d2                	xor    edx,edx
c0019bc8:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0019bcc:	51                   	push   ecx
c0019bcd:	55                   	push   ebp
c0019bce:	52                   	push   edx
c0019bcf:	50                   	push   eax
c0019bd0:	57                   	push   edi
c0019bd1:	ff d3                	call   ebx
c0019bd3:	83 c4 14             	add    esp,0x14
c0019bd6:	57                   	push   edi
c0019bd7:	e8 54 95 ff ff       	call   c0013130 <File::close()>
c0019bdc:	83 c4 10             	add    esp,0x10
c0019bdf:	31 db                	xor    ebx,ebx
c0019be1:	50                   	push   eax
c0019be2:	31 ed                	xor    ebp,ebp
c0019be4:	68 00 01 00 00       	push   0x100
c0019be9:	6a 00                	push   0x0
c0019beb:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0019bef:	50                   	push   eax
c0019bf0:	e8 83 6b fe ff       	call   c0000778 <memset>
c0019bf5:	58                   	pop    eax
c0019bf6:	5a                   	pop    edx
c0019bf7:	6a 01                	push   0x1
c0019bf9:	57                   	push   edi
c0019bfa:	e8 d3 94 ff ff       	call   c00130d2 <File::open(FileOpenMode)>
c0019bff:	83 c4 10             	add    esp,0x10
c0019c02:	83 ec 0c             	sub    esp,0xc
c0019c05:	8b 07                	mov    eax,DWORD PTR [edi]
c0019c07:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0019c0b:	51                   	push   ecx
c0019c0c:	8d 54 24 23          	lea    edx,[esp+0x23]
c0019c10:	52                   	push   edx
c0019c11:	6a 00                	push   0x0
c0019c13:	6a 01                	push   0x1
c0019c15:	57                   	push   edi
c0019c16:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019c19:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0019c1d:	83 c4 20             	add    esp,0x20
c0019c20:	3c 0d                	cmp    al,0xd
c0019c22:	0f 84 12 01 00 00    	je     c0019d3a <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c0019c28:	85 db                	test   ebx,ebx
c0019c2a:	0f 84 fd 00 00 00    	je     c0019d2d <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c0019c30:	3c 0a                	cmp    al,0xa
c0019c32:	74 13                	je     c0019c47 <EnvVarContainer::loadFrom(char const*, char const*)+0xdf>
c0019c34:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0019c39:	74 0c                	je     c0019c47 <EnvVarContainer::loadFrom(char const*, char const*)+0xdf>
c0019c3b:	81 fd fe 00 00 00    	cmp    ebp,0xfe
c0019c41:	0f 8e e6 00 00 00    	jle    c0019d2d <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c0019c47:	83 ec 0c             	sub    esp,0xc
c0019c4a:	8d 53 01             	lea    edx,[ebx+0x1]
c0019c4d:	29 dd                	sub    ebp,ebx
c0019c4f:	52                   	push   edx
c0019c50:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0019c54:	e8 ed 5b ff ff       	call   c000f846 <malloc>
c0019c59:	8d 4d 04             	lea    ecx,[ebp+0x4]
c0019c5c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0019c60:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0019c63:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0019c67:	e8 da 5b ff ff       	call   c000f846 <malloc>
c0019c6c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0019c70:	83 c4 0c             	add    esp,0xc
c0019c73:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019c77:	52                   	push   edx
c0019c78:	6a 00                	push   0x0
c0019c7a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0019c7e:	e8 f5 6a fe ff       	call   c0000778 <memset>
c0019c83:	83 c4 0c             	add    esp,0xc
c0019c86:	53                   	push   ebx
c0019c87:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0019c8b:	55                   	push   ebp
c0019c8c:	01 eb                	add    ebx,ebp
c0019c8e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0019c92:	e8 ad 6a fe ff       	call   c0000744 <memcpy>
c0019c97:	83 c4 0c             	add    esp,0xc
c0019c9a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019c9e:	51                   	push   ecx
c0019c9f:	6a 00                	push   0x0
c0019ca1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019ca5:	e8 ce 6a fe ff       	call   c0000778 <memset>
c0019caa:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019cad:	e8 e2 6a fe ff       	call   c0000794 <strlen>
c0019cb2:	83 c4 0c             	add    esp,0xc
c0019cb5:	50                   	push   eax
c0019cb6:	53                   	push   ebx
c0019cb7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019cbb:	e8 84 6a fe ff       	call   c0000744 <memcpy>
c0019cc0:	5b                   	pop    ebx
c0019cc1:	58                   	pop    eax
c0019cc2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0019cc6:	68 31 b2 02 c0       	push   0xc002b231
c0019ccb:	e8 45 8e ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c0019cd0:	8b 06                	mov    eax,DWORD PTR [esi]
c0019cd2:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c0019cd5:	40                   	inc    eax
c0019cd6:	83 c4 10             	add    esp,0x10
c0019cd9:	89 06                	mov    DWORD PTR [esi],eax
c0019cdb:	85 d2                	test   edx,edx
c0019cdd:	75 0c                	jne    c0019ceb <EnvVarContainer::loadFrom(char const*, char const*)+0x183>
c0019cdf:	83 ec 0c             	sub    esp,0xc
c0019ce2:	6a 08                	push   0x8
c0019ce4:	e8 5d 5b ff ff       	call   c000f846 <malloc>
c0019ce9:	eb 0c                	jmp    c0019cf7 <EnvVarContainer::loadFrom(char const*, char const*)+0x18f>
c0019ceb:	c1 e0 03             	shl    eax,0x3
c0019cee:	51                   	push   ecx
c0019cef:	51                   	push   ecx
c0019cf0:	50                   	push   eax
c0019cf1:	52                   	push   edx
c0019cf2:	e8 3b 5b ff ff       	call   c000f832 <realloc>
c0019cf7:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c0019cfa:	83 c4 10             	add    esp,0x10
c0019cfd:	31 db                	xor    ebx,ebx
c0019cff:	52                   	push   edx
c0019d00:	6a 08                	push   0x8
c0019d02:	8d 44 24 20          	lea    eax,[esp+0x20]
c0019d06:	50                   	push   eax
c0019d07:	8b 16                	mov    edx,DWORD PTR [esi]
c0019d09:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0019d0c:	8d 44 d0 f8          	lea    eax,[eax+edx*8-0x8]
c0019d10:	50                   	push   eax
c0019d11:	e8 2e 6a fe ff       	call   c0000744 <memcpy>
c0019d16:	83 c4 0c             	add    esp,0xc
c0019d19:	68 00 01 00 00       	push   0x100
c0019d1e:	6a 00                	push   0x0
c0019d20:	55                   	push   ebp
c0019d21:	31 ed                	xor    ebp,ebp
c0019d23:	e8 50 6a fe ff       	call   c0000778 <memset>
c0019d28:	83 c4 10             	add    esp,0x10
c0019d2b:	eb 0d                	jmp    c0019d3a <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c0019d2d:	3c 3d                	cmp    al,0x3d
c0019d2f:	74 07                	je     c0019d38 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d0>
c0019d31:	88 44 2c 20          	mov    BYTE PTR [esp+ebp*1+0x20],al
c0019d35:	45                   	inc    ebp
c0019d36:	eb 02                	jmp    c0019d3a <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c0019d38:	89 eb                	mov    ebx,ebp
c0019d3a:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0019d3f:	0f 85 bd fe ff ff    	jne    c0019c02 <EnvVarContainer::loadFrom(char const*, char const*)+0x9a>
c0019d45:	50                   	push   eax
c0019d46:	50                   	push   eax
c0019d47:	ff 36                	push   DWORD PTR [esi]
c0019d49:	68 3f b2 02 c0       	push   0xc002b23f
c0019d4e:	e8 c2 8d ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c0019d53:	81 c4 3c 01 00 00    	add    esp,0x13c
c0019d59:	5b                   	pop    ebx
c0019d5a:	5e                   	pop    esi
c0019d5b:	5f                   	pop    edi
c0019d5c:	5d                   	pop    ebp
c0019d5d:	c3                   	ret    

c0019d5e <EnvVarContainer::__loadSystem()>:
c0019d5e:	83 ec 10             	sub    esp,0x10
c0019d61:	68 a0 d0 02 c0       	push   0xc002d0a0
c0019d66:	68 6a b2 02 c0       	push   0xc002b26a
c0019d6b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019d6f:	e8 f4 fd ff ff       	call   c0019b68 <EnvVarContainer::loadFrom(char const*, char const*)>
c0019d74:	83 c4 1c             	add    esp,0x1c
c0019d77:	c3                   	ret    

c0019d78 <EnvVarContainer::__loadUser()>:
c0019d78:	c3                   	ret    
c0019d79:	90                   	nop

c0019d7a <EnvVarContainer::EnvVarContainer(Process*)>:
c0019d7a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019d7e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0019d84:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019d88:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019d8c:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0019d8f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019d93:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0019d9a:	90                   	nop
c0019d9b:	c3                   	ret    

c0019d9c <EnvVarContainer::~EnvVarContainer()>:
c0019d9c:	83 ec 0c             	sub    esp,0xc
c0019d9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019da3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0019da6:	85 c0                	test   eax,eax
c0019da8:	74 1d                	je     c0019dc7 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0019daa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019dae:	8b 00                	mov    eax,DWORD PTR [eax]
c0019db0:	85 c0                	test   eax,eax
c0019db2:	74 13                	je     c0019dc7 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0019db4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019db8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0019dbb:	83 ec 0c             	sub    esp,0xc
c0019dbe:	50                   	push   eax
c0019dbf:	e8 92 5a ff ff       	call   c000f856 <free>
c0019dc4:	83 c4 10             	add    esp,0x10
c0019dc7:	90                   	nop
c0019dc8:	83 c4 0c             	add    esp,0xc
c0019dcb:	c3                   	ret    

c0019dcc <Krnl::getEnv(Process*, char const*)>:
c0019dcc:	53                   	push   ebx
c0019dcd:	83 ec 08             	sub    esp,0x8
c0019dd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019dd4:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019dd8:	39 05 d4 10 03 c0    	cmp    DWORD PTR ds:0xc00310d4,eax
c0019dde:	74 04                	je     c0019de4 <Krnl::getEnv(Process*, char const*)+0x18>
c0019de0:	85 c0                	test   eax,eax
c0019de2:	75 0b                	jne    c0019def <Krnl::getEnv(Process*, char const*)+0x23>
c0019de4:	a1 b0 06 03 c0       	mov    eax,ds:0xc00306b0
c0019de9:	85 c0                	test   eax,eax
c0019deb:	75 19                	jne    c0019e06 <Krnl::getEnv(Process*, char const*)+0x3a>
c0019ded:	eb 27                	jmp    c0019e16 <Krnl::getEnv(Process*, char const*)+0x4a>
c0019def:	52                   	push   edx
c0019df0:	52                   	push   edx
c0019df1:	53                   	push   ebx
c0019df2:	ff b0 3a 07 00 00    	push   DWORD PTR [eax+0x73a]
c0019df8:	e8 5f fc ff ff       	call   c0019a5c <EnvVarContainer::getEnv(char const*)>
c0019dfd:	83 c4 10             	add    esp,0x10
c0019e00:	85 c0                	test   eax,eax
c0019e02:	75 28                	jne    c0019e2c <Krnl::getEnv(Process*, char const*)+0x60>
c0019e04:	eb de                	jmp    c0019de4 <Krnl::getEnv(Process*, char const*)+0x18>
c0019e06:	52                   	push   edx
c0019e07:	52                   	push   edx
c0019e08:	53                   	push   ebx
c0019e09:	50                   	push   eax
c0019e0a:	e8 4d fc ff ff       	call   c0019a5c <EnvVarContainer::getEnv(char const*)>
c0019e0f:	83 c4 10             	add    esp,0x10
c0019e12:	85 c0                	test   eax,eax
c0019e14:	75 16                	jne    c0019e2c <Krnl::getEnv(Process*, char const*)+0x60>
c0019e16:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0019e1a:	a1 b4 06 03 c0       	mov    eax,ds:0xc00306b4
c0019e1f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0019e23:	83 c4 08             	add    esp,0x8
c0019e26:	5b                   	pop    ebx
c0019e27:	e9 30 fc ff ff       	jmp    c0019a5c <EnvVarContainer::getEnv(char const*)>
c0019e2c:	83 c4 08             	add    esp,0x8
c0019e2f:	5b                   	pop    ebx
c0019e30:	c3                   	ret    

c0019e31 <Krnl::setEnvSystem(char const*, char const*)>:
c0019e31:	83 ec 10             	sub    esp,0x10
c0019e34:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019e38:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019e3c:	ff 35 b4 06 03 c0    	push   DWORD PTR ds:0xc00306b4
c0019e42:	e8 53 fc ff ff       	call   c0019a9a <EnvVarContainer::setEnv(char const*, char const*)>
c0019e47:	83 c4 1c             	add    esp,0x1c
c0019e4a:	c3                   	ret    

c0019e4b <Krnl::setEnvUser(char const*, char const*)>:
c0019e4b:	a1 b0 06 03 c0       	mov    eax,ds:0xc00306b0
c0019e50:	85 c0                	test   eax,eax
c0019e52:	74 15                	je     c0019e69 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c0019e54:	83 ec 10             	sub    esp,0x10
c0019e57:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019e5b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019e5f:	50                   	push   eax
c0019e60:	e8 35 fc ff ff       	call   c0019a9a <EnvVarContainer::setEnv(char const*, char const*)>
c0019e65:	83 c4 1c             	add    esp,0x1c
c0019e68:	c3                   	ret    
c0019e69:	c3                   	ret    

c0019e6a <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c0019e6a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019e6e:	8b 80 3a 07 00 00    	mov    eax,DWORD PTR [eax+0x73a]
c0019e74:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019e78:	e9 1d fc ff ff       	jmp    c0019a9a <EnvVarContainer::setEnv(char const*, char const*)>

c0019e7d <Krnl::deleteEnvSystem(char const*)>:
c0019e7d:	c3                   	ret    

c0019e7e <Krnl::deleteEnvUser(char const*)>:
c0019e7e:	c3                   	ret    

c0019e7f <Krnl::deleteEnvProcess(Process*, char const*)>:
c0019e7f:	c3                   	ret    

c0019e80 <Krnl::newProcessEnv(Process*)>:
c0019e80:	83 ec 28             	sub    esp,0x28
c0019e83:	6a 0c                	push   0xc
c0019e85:	e8 bc 59 ff ff       	call   c000f846 <malloc>
c0019e8a:	5a                   	pop    edx
c0019e8b:	59                   	pop    ecx
c0019e8c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019e90:	50                   	push   eax
c0019e91:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019e95:	e8 e0 fe ff ff       	call   c0019d7a <EnvVarContainer::EnvVarContainer(Process*)>
c0019e9a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019e9e:	83 c4 2c             	add    esp,0x2c
c0019ea1:	c3                   	ret    

c0019ea2 <Krnl::copyProcessEnv(Process*, Process*)>:
c0019ea2:	56                   	push   esi
c0019ea3:	53                   	push   ebx
c0019ea4:	83 ec 10             	sub    esp,0x10
c0019ea7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019eab:	8b b0 3a 07 00 00    	mov    esi,DWORD PTR [eax+0x73a]
c0019eb1:	6a 0c                	push   0xc
c0019eb3:	e8 8e 59 ff ff       	call   c000f846 <malloc>
c0019eb8:	89 c3                	mov    ebx,eax
c0019eba:	58                   	pop    eax
c0019ebb:	5a                   	pop    edx
c0019ebc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019ec0:	53                   	push   ebx
c0019ec1:	e8 b4 fe ff ff       	call   c0019d7a <EnvVarContainer::EnvVarContainer(Process*)>
c0019ec6:	8b 06                	mov    eax,DWORD PTR [esi]
c0019ec8:	89 03                	mov    DWORD PTR [ebx],eax
c0019eca:	c1 e0 03             	shl    eax,0x3
c0019ecd:	89 04 24             	mov    DWORD PTR [esp],eax
c0019ed0:	e8 71 59 ff ff       	call   c000f846 <malloc>
c0019ed5:	83 c4 0c             	add    esp,0xc
c0019ed8:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0019edb:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0019edd:	8d 14 cd 00 00 00 00 	lea    edx,[ecx*8+0x0]
c0019ee4:	52                   	push   edx
c0019ee5:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0019ee8:	50                   	push   eax
c0019ee9:	e8 56 68 fe ff       	call   c0000744 <memcpy>
c0019eee:	89 d8                	mov    eax,ebx
c0019ef0:	83 c4 14             	add    esp,0x14
c0019ef3:	5b                   	pop    ebx
c0019ef4:	5e                   	pop    esi
c0019ef5:	c3                   	ret    

c0019ef6 <Krnl::loadSystemEnv()>:
c0019ef6:	53                   	push   ebx
c0019ef7:	83 ec 14             	sub    esp,0x14
c0019efa:	6a 0c                	push   0xc
c0019efc:	e8 45 59 ff ff       	call   c000f846 <malloc>
c0019f01:	89 c3                	mov    ebx,eax
c0019f03:	58                   	pop    eax
c0019f04:	5a                   	pop    edx
c0019f05:	ff 35 d4 10 03 c0    	push   DWORD PTR ds:0xc00310d4
c0019f0b:	53                   	push   ebx
c0019f0c:	e8 69 fe ff ff       	call   c0019d7a <EnvVarContainer::EnvVarContainer(Process*)>
c0019f11:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019f14:	89 1d b4 06 03 c0    	mov    DWORD PTR ds:0xc00306b4,ebx
c0019f1a:	e8 3f fe ff ff       	call   c0019d5e <EnvVarContainer::__loadSystem()>
c0019f1f:	83 c4 18             	add    esp,0x18
c0019f22:	5b                   	pop    ebx
c0019f23:	c3                   	ret    

c0019f24 <Krnl::loadUserEnv()>:
c0019f24:	53                   	push   ebx
c0019f25:	83 ec 14             	sub    esp,0x14
c0019f28:	6a 0c                	push   0xc
c0019f2a:	e8 17 59 ff ff       	call   c000f846 <malloc>
c0019f2f:	89 c3                	mov    ebx,eax
c0019f31:	58                   	pop    eax
c0019f32:	5a                   	pop    edx
c0019f33:	ff 35 d4 10 03 c0    	push   DWORD PTR ds:0xc00310d4
c0019f39:	53                   	push   ebx
c0019f3a:	e8 3b fe ff ff       	call   c0019d7a <EnvVarContainer::EnvVarContainer(Process*)>
c0019f3f:	89 1d b0 06 03 c0    	mov    DWORD PTR ds:0xc00306b0,ebx
c0019f45:	83 c4 18             	add    esp,0x18
c0019f48:	5b                   	pop    ebx
c0019f49:	c3                   	ret    

c0019f4a <Krnl::flushEnv()>:
c0019f4a:	c3                   	ret    

c0019f4b <Krnl::getProcessTotalEnvCount(Process*)>:
c0019f4b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019f4f:	8b 15 b0 06 03 c0    	mov    edx,DWORD PTR ds:0xc00306b0
c0019f55:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c0019f5b:	a1 b4 06 03 c0       	mov    eax,ds:0xc00306b4
c0019f60:	8b 00                	mov    eax,DWORD PTR [eax]
c0019f62:	03 01                	add    eax,DWORD PTR [ecx]
c0019f64:	85 d2                	test   edx,edx
c0019f66:	74 02                	je     c0019f6a <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c0019f68:	03 02                	add    eax,DWORD PTR [edx]
c0019f6a:	c3                   	ret    

c0019f6b <Krnl::getProcessEnvPair(Process*, int)>:
c0019f6b:	57                   	push   edi
c0019f6c:	8b 0d b0 06 03 c0    	mov    ecx,DWORD PTR ds:0xc00306b0
c0019f72:	56                   	push   esi
c0019f73:	85 c9                	test   ecx,ecx
c0019f75:	53                   	push   ebx
c0019f76:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0019f7a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019f7e:	8b 97 3a 07 00 00    	mov    edx,DWORD PTR [edi+0x73a]
c0019f84:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019f88:	8b 02                	mov    eax,DWORD PTR [edx]
c0019f8a:	75 47                	jne    c0019fd3 <Krnl::getProcessEnvPair(Process*, int)+0x68>
c0019f8c:	39 c3                	cmp    ebx,eax
c0019f8e:	7c 47                	jl     c0019fd7 <Krnl::getProcessEnvPair(Process*, int)+0x6c>
c0019f90:	8b 15 b4 06 03 c0    	mov    edx,DWORD PTR ds:0xc00306b4
c0019f96:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019f98:	01 c1                	add    ecx,eax
c0019f9a:	39 d9                	cmp    ecx,ebx
c0019f9c:	7e 6c                	jle    c001a00a <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c0019f9e:	51                   	push   ecx
c0019f9f:	89 d9                	mov    ecx,ebx
c0019fa1:	29 c1                	sub    ecx,eax
c0019fa3:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0019fa6:	ff 74 c8 04          	push   DWORD PTR [eax+ecx*8+0x4]
c0019faa:	53                   	push   ebx
c0019fab:	68 8c b2 02 c0       	push   0xc002b28c
c0019fb0:	e8 60 8b ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c0019fb5:	8b 87 3a 07 00 00    	mov    eax,DWORD PTR [edi+0x73a]
c0019fbb:	2b 18                	sub    ebx,DWORD PTR [eax]
c0019fbd:	a1 b4 06 03 c0       	mov    eax,ds:0xc00306b4
c0019fc2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0019fc5:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c0019fc9:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c0019fcc:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c0019fcf:	89 06                	mov    DWORD PTR [esi],eax
c0019fd1:	eb 51                	jmp    c001a024 <Krnl::getProcessEnvPair(Process*, int)+0xb9>
c0019fd3:	39 c3                	cmp    ebx,eax
c0019fd5:	7d 05                	jge    c0019fdc <Krnl::getProcessEnvPair(Process*, int)+0x71>
c0019fd7:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0019fda:	eb 20                	jmp    c0019ffc <Krnl::getProcessEnvPair(Process*, int)+0x91>
c0019fdc:	8b 39                	mov    edi,DWORD PTR [ecx]
c0019fde:	8d 14 07             	lea    edx,[edi+eax*1]
c0019fe1:	39 da                	cmp    edx,ebx
c0019fe3:	7e 04                	jle    c0019fe9 <Krnl::getProcessEnvPair(Process*, int)+0x7e>
c0019fe5:	29 c3                	sub    ebx,eax
c0019fe7:	eb 10                	jmp    c0019ff9 <Krnl::getProcessEnvPair(Process*, int)+0x8e>
c0019fe9:	8b 0d b4 06 03 c0    	mov    ecx,DWORD PTR ds:0xc00306b4
c0019fef:	03 11                	add    edx,DWORD PTR [ecx]
c0019ff1:	39 da                	cmp    edx,ebx
c0019ff3:	7e 15                	jle    c001a00a <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c0019ff5:	29 c3                	sub    ebx,eax
c0019ff7:	29 fb                	sub    ebx,edi
c0019ff9:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0019ffc:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001a000:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001a003:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a006:	89 06                	mov    DWORD PTR [esi],eax
c001a008:	eb 1d                	jmp    c001a027 <Krnl::getProcessEnvPair(Process*, int)+0xbc>
c001a00a:	83 ec 0c             	sub    esp,0xc
c001a00d:	68 a0 b2 02 c0       	push   0xc002b2a0
c001a012:	e8 18 00 00 00       	call   c001a02f <Krnl::panic(char const*)>
c001a017:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c001a01d:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c001a024:	83 c4 10             	add    esp,0x10
c001a027:	89 f0                	mov    eax,esi
c001a029:	5b                   	pop    ebx
c001a02a:	5e                   	pop    esi
c001a02b:	5f                   	pop    edi
c001a02c:	c2 04 00             	ret    0x4

c001a02f <Krnl::panic(char const*)>:
c001a02f:	55                   	push   ebp
c001a030:	89 e5                	mov    ebp,esp
c001a032:	53                   	push   ebx
c001a033:	83 ec 0c             	sub    esp,0xc
c001a036:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c001a039:	fa                   	cli    
c001a03a:	c6 05 c0 06 03 c0 01 	mov    BYTE PTR ds:0xc00306c0,0x1
c001a041:	53                   	push   ebx
c001a042:	c6 05 a4 ca 02 c0 00 	mov    BYTE PTR ds:0xc002caa4,0x0
c001a049:	68 ba b2 02 c0       	push   0xc002b2ba
c001a04e:	e8 c2 8a ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c001a053:	58                   	pop    eax
c001a054:	a1 d4 10 03 c0       	mov    eax,ds:0xc00310d4
c001a059:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a05f:	e8 73 6c ff ff       	call   c0010cd7 <setActiveTerminal(VgaText*)>
c001a064:	83 c4 0c             	add    esp,0xc
c001a067:	a1 d4 10 03 c0       	mov    eax,ds:0xc00310d4
c001a06c:	6a 01                	push   0x1
c001a06e:	6a 0f                	push   0xf
c001a070:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a076:	e8 8d 66 ff ff       	call   c0010708 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001a07b:	58                   	pop    eax
c001a07c:	a1 d4 10 03 c0       	mov    eax,ds:0xc00310d4
c001a081:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a087:	e8 ec 6e ff ff       	call   c0010f78 <VgaText::clearScreen()>
c001a08c:	58                   	pop    eax
c001a08d:	a1 d4 10 03 c0       	mov    eax,ds:0xc00310d4
c001a092:	5a                   	pop    edx
c001a093:	68 d3 b2 02 c0       	push   0xc002b2d3
c001a098:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a09e:	e8 53 70 ff ff       	call   c00110f6 <VgaText::puts(char const*)>
c001a0a3:	59                   	pop    ecx
c001a0a4:	58                   	pop    eax
c001a0a5:	a1 d4 10 03 c0       	mov    eax,ds:0xc00310d4
c001a0aa:	68 78 b3 02 c0       	push   0xc002b378
c001a0af:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a0b5:	e8 3c 70 ff ff       	call   c00110f6 <VgaText::puts(char const*)>
c001a0ba:	58                   	pop    eax
c001a0bb:	a1 d4 10 03 c0       	mov    eax,ds:0xc00310d4
c001a0c0:	5a                   	pop    edx
c001a0c1:	68 ef b2 02 c0       	push   0xc002b2ef
c001a0c6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a0cc:	e8 25 70 ff ff       	call   c00110f6 <VgaText::puts(char const*)>
c001a0d1:	59                   	pop    ecx
c001a0d2:	58                   	pop    eax
c001a0d3:	a1 d4 10 03 c0       	mov    eax,ds:0xc00310d4
c001a0d8:	53                   	push   ebx
c001a0d9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a0df:	e8 12 70 ff ff       	call   c00110f6 <VgaText::puts(char const*)>
c001a0e4:	58                   	pop    eax
c001a0e5:	a1 d4 10 03 c0       	mov    eax,ds:0xc00310d4
c001a0ea:	5a                   	pop    edx
c001a0eb:	68 0f b3 02 c0       	push   0xc002b30f
c001a0f0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a0f6:	e8 fb 6f ff ff       	call   c00110f6 <VgaText::puts(char const*)>
c001a0fb:	a1 bc 06 03 c0       	mov    eax,ds:0xc00306bc
c001a100:	83 c4 10             	add    esp,0x10
c001a103:	85 c0                	test   eax,eax
c001a105:	74 02                	je     c001a109 <Krnl::panic(char const*)+0xda>
c001a107:	ff d0                	call   eax
c001a109:	83 ec 0c             	sub    esp,0xc
c001a10c:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a10f:	e8 b2 2e 00 00       	call   c001cfc6 <Thr::getDriverNameFromAddress(unsigned long)>
c001a114:	83 c4 10             	add    esp,0x10
c001a117:	89 c3                	mov    ebx,eax
c001a119:	85 c0                	test   eax,eax
c001a11b:	0f 84 50 02 00 00    	je     c001a371 <Krnl::panic(char const*)+0x342>
c001a121:	83 ec 08             	sub    esp,0x8
c001a124:	8b 15 d4 10 03 c0    	mov    edx,DWORD PTR ds:0xc00310d4
c001a12a:	68 b4 b3 02 c0       	push   0xc002b3b4
c001a12f:	ff b2 26 05 00 00    	push   DWORD PTR [edx+0x526]
c001a135:	e8 bc 6f ff ff       	call   c00110f6 <VgaText::puts(char const*)>
c001a13a:	58                   	pop    eax
c001a13b:	5a                   	pop    edx
c001a13c:	8b 15 d4 10 03 c0    	mov    edx,DWORD PTR ds:0xc00310d4
c001a142:	68 ef b2 02 c0       	push   0xc002b2ef
c001a147:	ff b2 26 05 00 00    	push   DWORD PTR [edx+0x526]
c001a14d:	e8 a4 6f ff ff       	call   c00110f6 <VgaText::puts(char const*)>
c001a152:	59                   	pop    ecx
c001a153:	58                   	pop    eax
c001a154:	a1 d4 10 03 c0       	mov    eax,ds:0xc00310d4
c001a159:	53                   	push   ebx
c001a15a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a160:	e8 91 6f ff ff       	call   c00110f6 <VgaText::puts(char const*)>
c001a165:	83 c4 10             	add    esp,0x10
c001a168:	83 ec 08             	sub    esp,0x8
c001a16b:	a1 d4 10 03 c0       	mov    eax,ds:0xc00310d4
c001a170:	68 0e b3 02 c0       	push   0xc002b30e
c001a175:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a17b:	e8 76 6f ff ff       	call   c00110f6 <VgaText::puts(char const*)>
c001a180:	58                   	pop    eax
c001a181:	a1 d4 10 03 c0       	mov    eax,ds:0xc00310d4
c001a186:	5a                   	pop    edx
c001a187:	68 0c b4 02 c0       	push   0xc002b40c
c001a18c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a192:	e8 5f 6f ff ff       	call   c00110f6 <VgaText::puts(char const*)>
c001a197:	59                   	pop    ecx
c001a198:	a1 d4 10 03 c0       	mov    eax,ds:0xc00310d4
c001a19d:	5b                   	pop    ebx
c001a19e:	68 4c b4 02 c0       	push   0xc002b44c
c001a1a3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a1a9:	e8 48 6f ff ff       	call   c00110f6 <VgaText::puts(char const*)>
c001a1ae:	58                   	pop    eax
c001a1af:	a1 d4 10 03 c0       	mov    eax,ds:0xc00310d4
c001a1b4:	5a                   	pop    edx
c001a1b5:	68 fa b2 02 c0       	push   0xc002b2fa
c001a1ba:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a1c0:	e8 31 6f ff ff       	call   c00110f6 <VgaText::puts(char const*)>
c001a1c5:	59                   	pop    ecx
c001a1c6:	5b                   	pop    ebx
c001a1c7:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a1ca:	68 12 b3 02 c0       	push   0xc002b312
c001a1cf:	e8 41 89 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c001a1d4:	58                   	pop    eax
c001a1d5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a1d8:	5a                   	pop    edx
c001a1d9:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a1dc:	68 1b b3 02 c0       	push   0xc002b31b
c001a1e1:	e8 2f 89 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c001a1e6:	59                   	pop    ecx
c001a1e7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a1ea:	5b                   	pop    ebx
c001a1eb:	8b 00                	mov    eax,DWORD PTR [eax]
c001a1ed:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a1f0:	68 24 b3 02 c0       	push   0xc002b324
c001a1f5:	e8 1b 89 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c001a1fa:	58                   	pop    eax
c001a1fb:	a1 d4 10 03 c0       	mov    eax,ds:0xc00310d4
c001a200:	5a                   	pop    edx
c001a201:	68 90 b4 02 c0       	push   0xc002b490
c001a206:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a20c:	e8 e5 6e ff ff       	call   c00110f6 <VgaText::puts(char const*)>
c001a211:	59                   	pop    ecx
c001a212:	a1 d4 10 03 c0       	mov    eax,ds:0xc00310d4
c001a217:	5b                   	pop    ebx
c001a218:	68 2d b3 02 c0       	push   0xc002b32d
c001a21d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a223:	e8 ce 6e ff ff       	call   c00110f6 <VgaText::puts(char const*)>
c001a228:	0f 20 c0             	mov    eax,cr0
c001a22b:	5a                   	pop    edx
c001a22c:	59                   	pop    ecx
c001a22d:	50                   	push   eax
c001a22e:	a1 d4 10 03 c0       	mov    eax,ds:0xc00310d4
c001a233:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a239:	e8 de 6e ff ff       	call   c001111c <VgaText::putx(unsigned int)>
c001a23e:	5b                   	pop    ebx
c001a23f:	58                   	pop    eax
c001a240:	a1 d4 10 03 c0       	mov    eax,ds:0xc00310d4
c001a245:	68 37 b3 02 c0       	push   0xc002b337
c001a24a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a250:	e8 a1 6e ff ff       	call   c00110f6 <VgaText::puts(char const*)>
c001a255:	0f 20 d0             	mov    eax,cr2
c001a258:	5a                   	pop    edx
c001a259:	59                   	pop    ecx
c001a25a:	50                   	push   eax
c001a25b:	a1 d4 10 03 c0       	mov    eax,ds:0xc00310d4
c001a260:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a266:	e8 b1 6e ff ff       	call   c001111c <VgaText::putx(unsigned int)>
c001a26b:	5b                   	pop    ebx
c001a26c:	58                   	pop    eax
c001a26d:	a1 d4 10 03 c0       	mov    eax,ds:0xc00310d4
c001a272:	68 41 b3 02 c0       	push   0xc002b341
c001a277:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a27d:	e8 74 6e ff ff       	call   c00110f6 <VgaText::puts(char const*)>
c001a282:	0f 20 d8             	mov    eax,cr3
c001a285:	5a                   	pop    edx
c001a286:	59                   	pop    ecx
c001a287:	50                   	push   eax
c001a288:	a1 d4 10 03 c0       	mov    eax,ds:0xc00310d4
c001a28d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a293:	e8 84 6e ff ff       	call   c001111c <VgaText::putx(unsigned int)>
c001a298:	5b                   	pop    ebx
c001a299:	58                   	pop    eax
c001a29a:	a1 d4 10 03 c0       	mov    eax,ds:0xc00310d4
c001a29f:	68 54 b3 02 c0       	push   0xc002b354
c001a2a4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a2aa:	e8 47 6e ff ff       	call   c00110f6 <VgaText::puts(char const*)>
c001a2af:	0f 20 e0             	mov    eax,cr4
c001a2b2:	5a                   	pop    edx
c001a2b3:	59                   	pop    ecx
c001a2b4:	50                   	push   eax
c001a2b5:	a1 d4 10 03 c0       	mov    eax,ds:0xc00310d4
c001a2ba:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a2c0:	e8 57 6e ff ff       	call   c001111c <VgaText::putx(unsigned int)>
c001a2c5:	5b                   	pop    ebx
c001a2c6:	58                   	pop    eax
c001a2c7:	a1 d4 10 03 c0       	mov    eax,ds:0xc00310d4
c001a2cc:	68 5e b3 02 c0       	push   0xc002b35e
c001a2d1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a2d7:	e8 1a 6e ff ff       	call   c00110f6 <VgaText::puts(char const*)>
c001a2dc:	5a                   	pop    edx
c001a2dd:	a1 d4 10 03 c0       	mov    eax,ds:0xc00310d4
c001a2e2:	59                   	pop    ecx
c001a2e3:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a2e9:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a2ec:	50                   	push   eax
c001a2ed:	e8 2a 6e ff ff       	call   c001111c <VgaText::putx(unsigned int)>
c001a2f2:	5b                   	pop    ebx
c001a2f3:	58                   	pop    eax
c001a2f4:	a1 d4 10 03 c0       	mov    eax,ds:0xc00310d4
c001a2f9:	68 75 b3 02 c0       	push   0xc002b375
c001a2fe:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a304:	e8 ed 6d ff ff       	call   c00110f6 <VgaText::puts(char const*)>
c001a309:	5a                   	pop    edx
c001a30a:	a1 d4 10 03 c0       	mov    eax,ds:0xc00310d4
c001a30f:	59                   	pop    ecx
c001a310:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a316:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a319:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a31c:	50                   	push   eax
c001a31d:	e8 fa 6d ff ff       	call   c001111c <VgaText::putx(unsigned int)>
c001a322:	5b                   	pop    ebx
c001a323:	58                   	pop    eax
c001a324:	a1 d4 10 03 c0       	mov    eax,ds:0xc00310d4
c001a329:	68 75 b3 02 c0       	push   0xc002b375
c001a32e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a334:	e8 bd 6d ff ff       	call   c00110f6 <VgaText::puts(char const*)>
c001a339:	a1 d4 10 03 c0       	mov    eax,ds:0xc00310d4
c001a33e:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a341:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a347:	8b 12                	mov    edx,DWORD PTR [edx]
c001a349:	59                   	pop    ecx
c001a34a:	5b                   	pop    ebx
c001a34b:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a34e:	50                   	push   eax
c001a34f:	e8 c8 6d ff ff       	call   c001111c <VgaText::putx(unsigned int)>
c001a354:	83 c4 10             	add    esp,0x10
c001a357:	b2 fe                	mov    dl,0xfe
c001a359:	e4 60                	in     al,0x60
c001a35b:	3c 1c                	cmp    al,0x1c
c001a35d:	74 04                	je     c001a363 <Krnl::panic(char const*)+0x334>
c001a35f:	3c 5a                	cmp    al,0x5a
c001a361:	75 f6                	jne    c001a359 <Krnl::panic(char const*)+0x32a>
c001a363:	e4 64                	in     al,0x64
c001a365:	a8 02                	test   al,0x2
c001a367:	75 fa                	jne    c001a363 <Krnl::panic(char const*)+0x334>
c001a369:	88 d0                	mov    al,dl
c001a36b:	e6 64                	out    0x64,al
c001a36d:	fa                   	cli    
c001a36e:	f4                   	hlt    
c001a36f:	eb e8                	jmp    c001a359 <Krnl::panic(char const*)+0x32a>
c001a371:	50                   	push   eax
c001a372:	50                   	push   eax
c001a373:	a1 d4 10 03 c0       	mov    eax,ds:0xc00310d4
c001a378:	68 e0 b3 02 c0       	push   0xc002b3e0
c001a37d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a383:	e8 6e 6d ff ff       	call   c00110f6 <VgaText::puts(char const*)>
c001a388:	58                   	pop    eax
c001a389:	a1 d4 10 03 c0       	mov    eax,ds:0xc00310d4
c001a38e:	5a                   	pop    edx
c001a38f:	68 ef b2 02 c0       	push   0xc002b2ef
c001a394:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a39a:	e8 57 6d ff ff       	call   c00110f6 <VgaText::puts(char const*)>
c001a39f:	59                   	pop    ecx
c001a3a0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a3a5:	5b                   	pop    ebx
c001a3a6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a3a9:	83 c0 0c             	add    eax,0xc
c001a3ac:	50                   	push   eax
c001a3ad:	a1 d4 10 03 c0       	mov    eax,ds:0xc00310d4
c001a3b2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a3b8:	e8 39 6d ff ff       	call   c00110f6 <VgaText::puts(char const*)>
c001a3bd:	83 c4 10             	add    esp,0x10
c001a3c0:	e9 a3 fd ff ff       	jmp    c001a168 <Krnl::panic(char const*)+0x139>

c001a3c5 <Net::switchEndian16(unsigned short)>:
c001a3c5:	83 ec 04             	sub    esp,0x4
c001a3c8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a3cc:	66 89 04 24          	mov    WORD PTR [esp],ax
c001a3d0:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a3d4:	c1 f8 08             	sar    eax,0x8
c001a3d7:	89 c2                	mov    edx,eax
c001a3d9:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a3dd:	c1 e0 08             	shl    eax,0x8
c001a3e0:	09 d0                	or     eax,edx
c001a3e2:	83 c4 04             	add    esp,0x4
c001a3e5:	c3                   	ret    

c001a3e6 <Net::switchEndian32(unsigned int)>:
c001a3e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a3ea:	c1 e8 18             	shr    eax,0x18
c001a3ed:	89 c2                	mov    edx,eax
c001a3ef:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a3f3:	c1 e0 08             	shl    eax,0x8
c001a3f6:	25 00 00 ff 00       	and    eax,0xff0000
c001a3fb:	09 c2                	or     edx,eax
c001a3fd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a401:	c1 e8 08             	shr    eax,0x8
c001a404:	25 00 ff 00 00       	and    eax,0xff00
c001a409:	09 c2                	or     edx,eax
c001a40b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a40f:	c1 e0 18             	shl    eax,0x18
c001a412:	09 d0                	or     eax,edx
c001a414:	c3                   	ret    

c001a415 <Net::crc32Calc(unsigned char*, int)>:
c001a415:	83 ec 10             	sub    esp,0x10
c001a418:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a41d:	75 07                	jne    c001a426 <Net::crc32Calc(unsigned char*, int)+0x11>
c001a41f:	b8 00 00 00 00       	mov    eax,0x0
c001a424:	eb 7c                	jmp    c001a4a2 <Net::crc32Calc(unsigned char*, int)+0x8d>
c001a426:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001a42b:	7f 07                	jg     c001a434 <Net::crc32Calc(unsigned char*, int)+0x1f>
c001a42d:	b8 00 00 00 00       	mov    eax,0x0
c001a432:	eb 6e                	jmp    c001a4a2 <Net::crc32Calc(unsigned char*, int)+0x8d>
c001a434:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c001a43c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a444:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a448:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001a44c:	7d 4e                	jge    c001a49c <Net::crc32Calc(unsigned char*, int)+0x87>
c001a44e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a452:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a456:	01 d0                	add    eax,edx
c001a458:	8a 00                	mov    al,BYTE PTR [eax]
c001a45a:	0f b6 c0             	movzx  eax,al
c001a45d:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c001a461:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a469:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c001a46e:	7f 26                	jg     c001a496 <Net::crc32Calc(unsigned char*, int)+0x81>
c001a470:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a474:	83 e0 01             	and    eax,0x1
c001a477:	74 0d                	je     c001a486 <Net::crc32Calc(unsigned char*, int)+0x71>
c001a479:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a47d:	d1 e8                	shr    eax,1
c001a47f:	35 20 83 b8 ed       	xor    eax,0xedb88320
c001a484:	eb 06                	jmp    c001a48c <Net::crc32Calc(unsigned char*, int)+0x77>
c001a486:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a48a:	d1 e8                	shr    eax,1
c001a48c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a490:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001a494:	eb d3                	jmp    c001a469 <Net::crc32Calc(unsigned char*, int)+0x54>
c001a496:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001a49a:	eb a8                	jmp    c001a444 <Net::crc32Calc(unsigned char*, int)+0x2f>
c001a49c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a4a0:	f7 d0                	not    eax
c001a4a2:	83 c4 10             	add    esp,0x10
c001a4a5:	c3                   	ret    

c001a4a6 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c001a4a6:	83 ec 1c             	sub    esp,0x1c
c001a4a9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a4ad:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a4b1:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a4b9:	83 7c 24 0c 06       	cmp    DWORD PTR [esp+0xc],0x6
c001a4be:	7f 14                	jg     c001a4d4 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x2e>
c001a4c0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a4c4:	8d 50 01             	lea    edx,[eax+0x1]
c001a4c7:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001a4cb:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c001a4ce:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001a4d2:	eb e5                	jmp    c001a4b9 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x13>
c001a4d4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a4d8:	8d 50 01             	lea    edx,[eax+0x1]
c001a4db:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001a4df:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c001a4e2:	83 ec 04             	sub    esp,0x4
c001a4e5:	6a 06                	push   0x6
c001a4e7:	8d 44 24 36          	lea    eax,[esp+0x36]
c001a4eb:	50                   	push   eax
c001a4ec:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001a4f0:	e8 4f 62 fe ff       	call   c0000744 <memcpy>
c001a4f5:	83 c4 10             	add    esp,0x10
c001a4f8:	83 44 24 38 06       	add    DWORD PTR [esp+0x38],0x6
c001a4fd:	83 ec 04             	sub    esp,0x4
c001a500:	6a 06                	push   0x6
c001a502:	8d 44 24 30          	lea    eax,[esp+0x30]
c001a506:	50                   	push   eax
c001a507:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001a50b:	e8 34 62 fe ff       	call   c0000744 <memcpy>
c001a510:	83 c4 10             	add    esp,0x10
c001a513:	83 44 24 38 06       	add    DWORD PTR [esp+0x38],0x6
c001a518:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a51c:	0f b7 c0             	movzx  eax,ax
c001a51f:	c1 f8 08             	sar    eax,0x8
c001a522:	89 c1                	mov    ecx,eax
c001a524:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a528:	8d 50 01             	lea    edx,[eax+0x1]
c001a52b:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001a52f:	88 ca                	mov    dl,cl
c001a531:	88 10                	mov    BYTE PTR [eax],dl
c001a533:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001a537:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a53b:	8d 48 01             	lea    ecx,[eax+0x1]
c001a53e:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001a542:	88 10                	mov    BYTE PTR [eax],dl
c001a544:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001a548:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a54c:	83 ec 04             	sub    esp,0x4
c001a54f:	52                   	push   edx
c001a550:	50                   	push   eax
c001a551:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001a555:	e8 ea 61 fe ff       	call   c0000744 <memcpy>
c001a55a:	83 c4 10             	add    esp,0x10
c001a55d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001a561:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c001a565:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a569:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c001a56d:	83 ec 08             	sub    esp,0x8
c001a570:	50                   	push   eax
c001a571:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a575:	e8 9b fe ff ff       	call   c001a415 <Net::crc32Calc(unsigned char*, int)>
c001a57a:	83 c4 10             	add    esp,0x10
c001a57d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a581:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a585:	c1 e8 18             	shr    eax,0x18
c001a588:	89 c1                	mov    ecx,eax
c001a58a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a58e:	8d 50 01             	lea    edx,[eax+0x1]
c001a591:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001a595:	88 ca                	mov    dl,cl
c001a597:	88 10                	mov    BYTE PTR [eax],dl
c001a599:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a59d:	c1 e8 10             	shr    eax,0x10
c001a5a0:	89 c1                	mov    ecx,eax
c001a5a2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a5a6:	8d 50 01             	lea    edx,[eax+0x1]
c001a5a9:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001a5ad:	88 ca                	mov    dl,cl
c001a5af:	88 10                	mov    BYTE PTR [eax],dl
c001a5b1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a5b5:	c1 e8 08             	shr    eax,0x8
c001a5b8:	89 c1                	mov    ecx,eax
c001a5ba:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a5be:	8d 50 01             	lea    edx,[eax+0x1]
c001a5c1:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001a5c5:	88 ca                	mov    dl,cl
c001a5c7:	88 10                	mov    BYTE PTR [eax],dl
c001a5c9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a5cd:	8d 50 01             	lea    edx,[eax+0x1]
c001a5d0:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001a5d4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001a5d8:	88 10                	mov    BYTE PTR [eax],dl
c001a5da:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001a5de:	83 c4 1c             	add    esp,0x1c
c001a5e1:	c3                   	ret    

c001a5e2 <Net::unwrapEthernetFrame(unsigned char*, int)>:
c001a5e2:	83 ec 2c             	sub    esp,0x2c
c001a5e5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a5e9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a5ed:	83 44 24 34 08       	add    DWORD PTR [esp+0x34],0x8
c001a5f2:	83 ec 04             	sub    esp,0x4
c001a5f5:	6a 06                	push   0x6
c001a5f7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a5fb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001a5ff:	83 c0 0e             	add    eax,0xe
c001a602:	50                   	push   eax
c001a603:	e8 3c 61 fe ff       	call   c0000744 <memcpy>
c001a608:	83 c4 10             	add    esp,0x10
c001a60b:	83 44 24 34 06       	add    DWORD PTR [esp+0x34],0x6
c001a610:	83 ec 04             	sub    esp,0x4
c001a613:	6a 06                	push   0x6
c001a615:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a619:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001a61d:	83 c0 08             	add    eax,0x8
c001a620:	50                   	push   eax
c001a621:	e8 1e 61 fe ff       	call   c0000744 <memcpy>
c001a626:	83 c4 10             	add    esp,0x10
c001a629:	83 44 24 34 06       	add    DWORD PTR [esp+0x34],0x6
c001a62e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a632:	8d 50 01             	lea    edx,[eax+0x1]
c001a635:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001a639:	8a 00                	mov    al,BYTE PTR [eax]
c001a63b:	0f b6 c0             	movzx  eax,al
c001a63e:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c001a643:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a647:	8d 50 01             	lea    edx,[eax+0x1]
c001a64a:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001a64e:	8a 00                	mov    al,BYTE PTR [eax]
c001a650:	0f b6 c0             	movzx  eax,al
c001a653:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c001a658:	0f b7 44 24 1a       	movzx  eax,WORD PTR [esp+0x1a]
c001a65d:	c1 e0 08             	shl    eax,0x8
c001a660:	89 c2                	mov    edx,eax
c001a662:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a666:	09 d0                	or     eax,edx
c001a668:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001a66c:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c001a670:	83 7c 24 38 ff       	cmp    DWORD PTR [esp+0x38],0xffffffff
c001a675:	75 3a                	jne    c001a6b1 <Net::unwrapEthernetFrame(unsigned char*, int)+0xcf>
c001a677:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a67b:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001a67e:	66 3d dc 05          	cmp    ax,0x5dc
c001a682:	77 10                	ja     c001a694 <Net::unwrapEthernetFrame(unsigned char*, int)+0xb2>
c001a684:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a688:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001a68b:	0f b7 c0             	movzx  eax,ax
c001a68e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001a692:	eb 1d                	jmp    c001a6b1 <Net::unwrapEthernetFrame(unsigned char*, int)+0xcf>
c001a694:	83 ec 0c             	sub    esp,0xc
c001a697:	68 b8 b4 02 c0       	push   0xc002b4b8
c001a69c:	e8 74 84 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c001a6a1:	83 c4 10             	add    esp,0x10
c001a6a4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a6a8:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c001a6ac:	e9 c0 00 00 00       	jmp    c001a771 <Net::unwrapEthernetFrame(unsigned char*, int)+0x18f>
c001a6b1:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001a6b5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a6b9:	8b 00                	mov    eax,DWORD PTR [eax]
c001a6bb:	83 ec 04             	sub    esp,0x4
c001a6be:	52                   	push   edx
c001a6bf:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a6c3:	50                   	push   eax
c001a6c4:	e8 7b 60 fe ff       	call   c0000744 <memcpy>
c001a6c9:	83 c4 10             	add    esp,0x10
c001a6cc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a6d0:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c001a6d4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a6d8:	8d 50 01             	lea    edx,[eax+0x1]
c001a6db:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001a6df:	8a 00                	mov    al,BYTE PTR [eax]
c001a6e1:	0f b6 c0             	movzx  eax,al
c001a6e4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a6e8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a6ec:	8d 50 01             	lea    edx,[eax+0x1]
c001a6ef:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001a6f3:	8a 00                	mov    al,BYTE PTR [eax]
c001a6f5:	0f b6 c0             	movzx  eax,al
c001a6f8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001a6fc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a700:	8d 50 01             	lea    edx,[eax+0x1]
c001a703:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001a707:	8a 00                	mov    al,BYTE PTR [eax]
c001a709:	0f b6 c0             	movzx  eax,al
c001a70c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a710:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a714:	8d 50 01             	lea    edx,[eax+0x1]
c001a717:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001a71b:	8a 00                	mov    al,BYTE PTR [eax]
c001a71d:	0f b6 c0             	movzx  eax,al
c001a720:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a724:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a728:	c1 e0 18             	shl    eax,0x18
c001a72b:	89 c2                	mov    edx,eax
c001a72d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a731:	c1 e0 10             	shl    eax,0x10
c001a734:	09 c2                	or     edx,eax
c001a736:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a73a:	c1 e0 08             	shl    eax,0x8
c001a73d:	09 d0                	or     eax,edx
c001a73f:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c001a743:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a747:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a74b:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c001a74f:	83 e8 04             	sub    eax,0x4
c001a752:	83 ec 08             	sub    esp,0x8
c001a755:	50                   	push   eax
c001a756:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a75a:	e8 b6 fc ff ff       	call   c001a415 <Net::crc32Calc(unsigned char*, int)>
c001a75f:	83 c4 10             	add    esp,0x10
c001a762:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001a766:	0f 94 c2             	sete   dl
c001a769:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a76d:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c001a770:	90                   	nop
c001a771:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a775:	83 c4 2c             	add    esp,0x2c
c001a778:	c2 04 00             	ret    0x4

c001a77b <Reg::findLineFromLoadedData(char*, char*, char*)>:
c001a77b:	55                   	push   ebp
c001a77c:	57                   	push   edi
c001a77d:	56                   	push   esi
c001a77e:	53                   	push   ebx
c001a77f:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001a785:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001a78c:	8a 1e                	mov    bl,BYTE PTR [esi]
c001a78e:	8d 6e 01             	lea    ebp,[esi+0x1]
c001a791:	80 fb 40             	cmp    bl,0x40
c001a794:	75 1b                	jne    c001a7b1 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c001a796:	8a 16                	mov    dl,BYTE PTR [esi]
c001a798:	84 d2                	test   dl,dl
c001a79a:	0f 84 f1 00 00 00    	je     c001a891 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a7a0:	8d 46 01             	lea    eax,[esi+0x1]
c001a7a3:	80 fa 3a             	cmp    dl,0x3a
c001a7a6:	74 04                	je     c001a7ac <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c001a7a8:	89 c6                	mov    esi,eax
c001a7aa:	eb ea                	jmp    c001a796 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c001a7ac:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001a7af:	89 c6                	mov    esi,eax
c001a7b1:	50                   	push   eax
c001a7b2:	6a 40                	push   0x40
c001a7b4:	6a 00                	push   0x0
c001a7b6:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a7ba:	50                   	push   eax
c001a7bb:	e8 b8 5f fe ff       	call   c0000778 <memset>
c001a7c0:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c001a7c7:	31 c0                	xor    eax,eax
c001a7c9:	83 c4 10             	add    esp,0x10
c001a7cc:	8a 0f                	mov    cl,BYTE PTR [edi]
c001a7ce:	84 c9                	test   cl,cl
c001a7d0:	0f 84 bb 00 00 00    	je     c001a891 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a7d6:	3d c7 00 00 00       	cmp    eax,0xc7
c001a7db:	0f 8f b0 00 00 00    	jg     c001a891 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a7e1:	80 f9 0a             	cmp    cl,0xa
c001a7e4:	0f 85 98 00 00 00    	jne    c001a882 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c001a7ea:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c001a7ef:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c001a7f3:	a8 df                	test   al,0xdf
c001a7f5:	0f 94 c1             	sete   cl
c001a7f8:	3c 23                	cmp    al,0x23
c001a7fa:	0f 94 c2             	sete   dl
c001a7fd:	08 d1                	or     cl,dl
c001a7ff:	75 4a                	jne    c001a84b <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a801:	8d 50 f7             	lea    edx,[eax-0x9]
c001a804:	80 fa 01             	cmp    dl,0x1
c001a807:	76 42                	jbe    c001a84b <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a809:	3c 5b                	cmp    al,0x5b
c001a80b:	75 42                	jne    c001a84f <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c001a80d:	80 fb 40             	cmp    bl,0x40
c001a810:	75 39                	jne    c001a84b <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a812:	83 ec 0c             	sub    esp,0xc
c001a815:	8d 54 24 65          	lea    edx,[esp+0x65]
c001a819:	52                   	push   edx
c001a81a:	e8 75 5f fe ff       	call   c0000794 <strlen>
c001a81f:	83 c4 10             	add    esp,0x10
c001a822:	83 f8 3f             	cmp    eax,0x3f
c001a825:	77 6a                	ja     c001a891 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a827:	50                   	push   eax
c001a828:	50                   	push   eax
c001a829:	8d 54 24 61          	lea    edx,[esp+0x61]
c001a82d:	52                   	push   edx
c001a82e:	8d 54 24 24          	lea    edx,[esp+0x24]
c001a832:	52                   	push   edx
c001a833:	e8 fc 5f fe ff       	call   c0000834 <strcpy>
c001a838:	58                   	pop    eax
c001a839:	8d 54 24 24          	lea    edx,[esp+0x24]
c001a83d:	52                   	push   edx
c001a83e:	e8 51 5f fe ff       	call   c0000794 <strlen>
c001a843:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c001a848:	83 c4 10             	add    esp,0x10
c001a84b:	31 d2                	xor    edx,edx
c001a84d:	eb 3a                	jmp    c001a889 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c001a84f:	80 fb 40             	cmp    bl,0x40
c001a852:	74 06                	je     c001a85a <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c001a854:	8d 44 24 58          	lea    eax,[esp+0x58]
c001a858:	eb 20                	jmp    c001a87a <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c001a85a:	50                   	push   eax
c001a85b:	50                   	push   eax
c001a85c:	55                   	push   ebp
c001a85d:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a861:	50                   	push   eax
c001a862:	e8 59 60 fe ff       	call   c00008c0 <strcmp>
c001a867:	83 c4 10             	add    esp,0x10
c001a86a:	85 c0                	test   eax,eax
c001a86c:	75 dd                	jne    c001a84b <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a86e:	eb e4                	jmp    c001a854 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c001a870:	8d 50 01             	lea    edx,[eax+0x1]
c001a873:	80 f9 3d             	cmp    cl,0x3d
c001a876:	74 1d                	je     c001a895 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c001a878:	89 d0                	mov    eax,edx
c001a87a:	8a 08                	mov    cl,BYTE PTR [eax]
c001a87c:	84 c9                	test   cl,cl
c001a87e:	75 f0                	jne    c001a870 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c001a880:	eb 0f                	jmp    c001a891 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a882:	8d 50 01             	lea    edx,[eax+0x1]
c001a885:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c001a889:	47                   	inc    edi
c001a88a:	89 d0                	mov    eax,edx
c001a88c:	e9 3b ff ff ff       	jmp    c001a7cc <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c001a891:	31 c0                	xor    eax,eax
c001a893:	eb 33                	jmp    c001a8c8 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c001a895:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001a899:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001a89c:	50                   	push   eax
c001a89d:	50                   	push   eax
c001a89e:	8d 44 24 60          	lea    eax,[esp+0x60]
c001a8a2:	50                   	push   eax
c001a8a3:	56                   	push   esi
c001a8a4:	e8 17 60 fe ff       	call   c00008c0 <strcmp>
c001a8a9:	83 c4 10             	add    esp,0x10
c001a8ac:	85 c0                	test   eax,eax
c001a8ae:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a8b2:	75 97                	jne    c001a84b <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a8b4:	51                   	push   ecx
c001a8b5:	51                   	push   ecx
c001a8b6:	52                   	push   edx
c001a8b7:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001a8be:	e8 71 5f fe ff       	call   c0000834 <strcpy>
c001a8c3:	83 c4 10             	add    esp,0x10
c001a8c6:	b0 01                	mov    al,0x1
c001a8c8:	81 c4 2c 01 00 00    	add    esp,0x12c
c001a8ce:	5b                   	pop    ebx
c001a8cf:	5e                   	pop    esi
c001a8d0:	5f                   	pop    edi
c001a8d1:	5d                   	pop    ebp
c001a8d2:	c3                   	ret    

c001a8d3 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c001a8d3:	57                   	push   edi
c001a8d4:	56                   	push   esi
c001a8d5:	53                   	push   ebx
c001a8d6:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001a8dc:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c001a8e3:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001a8ea:	53                   	push   ebx
c001a8eb:	e8 a4 5e fe ff       	call   c0000794 <strlen>
c001a8f0:	89 34 24             	mov    DWORD PTR [esp],esi
c001a8f3:	89 c7                	mov    edi,eax
c001a8f5:	e8 9a 5e fe ff       	call   c0000794 <strlen>
c001a8fa:	83 c4 10             	add    esp,0x10
c001a8fd:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c001a901:	3d ff 00 00 00       	cmp    eax,0xff
c001a906:	0f 87 d3 00 00 00    	ja     c001a9df <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001a90c:	57                   	push   edi
c001a90d:	57                   	push   edi
c001a90e:	56                   	push   esi
c001a90f:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001a913:	56                   	push   esi
c001a914:	e8 1b 5f fe ff       	call   c0000834 <strcpy>
c001a919:	58                   	pop    eax
c001a91a:	5a                   	pop    edx
c001a91b:	68 4b b9 02 c0       	push   0xc002b94b
c001a920:	56                   	push   esi
c001a921:	e8 4e 60 fe ff       	call   c0000974 <strcat>
c001a926:	59                   	pop    ecx
c001a927:	5f                   	pop    edi
c001a928:	53                   	push   ebx
c001a929:	56                   	push   esi
c001a92a:	e8 45 60 fe ff       	call   c0000974 <strcat>
c001a92f:	58                   	pop    eax
c001a930:	5a                   	pop    edx
c001a931:	68 04 b5 02 c0       	push   0xc002b504
c001a936:	56                   	push   esi
c001a937:	e8 38 60 fe ff       	call   c0000974 <strcat>
c001a93c:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001a943:	e8 fe 4e ff ff       	call   c000f846 <malloc>
c001a948:	83 c4 0c             	add    esp,0xc
c001a94b:	89 c3                	mov    ebx,eax
c001a94d:	ff 35 d4 10 03 c0    	push   DWORD PTR ds:0xc00310d4
c001a953:	56                   	push   esi
c001a954:	50                   	push   eax
c001a955:	e8 14 87 ff ff       	call   c001306e <File::File(char const*, Process*)>
c001a95a:	83 c4 10             	add    esp,0x10
c001a95d:	85 db                	test   ebx,ebx
c001a95f:	74 7e                	je     c001a9df <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001a961:	51                   	push   ecx
c001a962:	51                   	push   ecx
c001a963:	6a 01                	push   0x1
c001a965:	53                   	push   ebx
c001a966:	e8 67 87 ff ff       	call   c00130d2 <File::open(FileOpenMode)>
c001a96b:	83 c4 10             	add    esp,0x10
c001a96e:	85 c0                	test   eax,eax
c001a970:	74 08                	je     c001a97a <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c001a972:	83 ec 0c             	sub    esp,0xc
c001a975:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a977:	53                   	push   ebx
c001a978:	eb 5f                	jmp    c001a9d9 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c001a97a:	52                   	push   edx
c001a97b:	8d 44 24 17          	lea    eax,[esp+0x17]
c001a97f:	50                   	push   eax
c001a980:	8d 44 24 20          	lea    eax,[esp+0x20]
c001a984:	50                   	push   eax
c001a985:	53                   	push   ebx
c001a986:	e8 f3 89 ff ff       	call   c001337e <File::stat(unsigned long long*, bool*)>
c001a98b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a98f:	83 c4 10             	add    esp,0x10
c001a992:	89 c1                	mov    ecx,eax
c001a994:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c001a998:	74 31                	je     c001a9cb <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001a99a:	83 ec 0c             	sub    esp,0xc
c001a99d:	50                   	push   eax
c001a99e:	e8 a3 4e ff ff       	call   c000f846 <malloc>
c001a9a3:	89 c6                	mov    esi,eax
c001a9a5:	58                   	pop    eax
c001a9a6:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a9a8:	8d 54 24 20          	lea    edx,[esp+0x20]
c001a9ac:	52                   	push   edx
c001a9ad:	56                   	push   esi
c001a9ae:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a9b2:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a9b6:	53                   	push   ebx
c001a9b7:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001a9ba:	83 c4 20             	add    esp,0x20
c001a9bd:	85 c0                	test   eax,eax
c001a9bf:	75 0a                	jne    c001a9cb <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001a9c1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a9c5:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001a9c9:	74 18                	je     c001a9e3 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c001a9cb:	83 ec 0c             	sub    esp,0xc
c001a9ce:	53                   	push   ebx
c001a9cf:	e8 5c 87 ff ff       	call   c0013130 <File::close()>
c001a9d4:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a9d6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a9d9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a9dc:	83 c4 10             	add    esp,0x10
c001a9df:	31 c0                	xor    eax,eax
c001a9e1:	eb 3b                	jmp    c001aa1e <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c001a9e3:	83 ec 0c             	sub    esp,0xc
c001a9e6:	53                   	push   ebx
c001a9e7:	e8 44 87 ff ff       	call   c0013130 <File::close()>
c001a9ec:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a9ee:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a9f1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a9f4:	83 c4 0c             	add    esp,0xc
c001a9f7:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001a9fe:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001aa05:	56                   	push   esi
c001aa06:	e8 70 fd ff ff       	call   c001a77b <Reg::findLineFromLoadedData(char*, char*, char*)>
c001aa0b:	89 34 24             	mov    DWORD PTR [esp],esi
c001aa0e:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001aa12:	e8 3f 4e ff ff       	call   c000f856 <free>
c001aa17:	83 c4 10             	add    esp,0x10
c001aa1a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001aa1e:	81 c4 20 01 00 00    	add    esp,0x120
c001aa24:	5b                   	pop    ebx
c001aa25:	5e                   	pop    esi
c001aa26:	5f                   	pop    edi
c001aa27:	c3                   	ret    

c001aa28 <Reg::getLine(char*, char*, char*)>:
c001aa28:	57                   	push   edi
c001aa29:	56                   	push   esi
c001aa2a:	53                   	push   ebx
c001aa2b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001aa2f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001aa33:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001aa37:	57                   	push   edi
c001aa38:	56                   	push   esi
c001aa39:	53                   	push   ebx
c001aa3a:	68 09 b5 02 c0       	push   0xc002b509
c001aa3f:	e8 8f fe ff ff       	call   c001a8d3 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001aa44:	83 c4 10             	add    esp,0x10
c001aa47:	84 c0                	test   al,al
c001aa49:	75 10                	jne    c001aa5b <Reg::getLine(char*, char*, char*)+0x33>
c001aa4b:	57                   	push   edi
c001aa4c:	56                   	push   esi
c001aa4d:	53                   	push   ebx
c001aa4e:	68 2e b5 02 c0       	push   0xc002b52e
c001aa53:	e8 7b fe ff ff       	call   c001a8d3 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001aa58:	83 c4 10             	add    esp,0x10
c001aa5b:	5b                   	pop    ebx
c001aa5c:	5e                   	pop    esi
c001aa5d:	5f                   	pop    edi
c001aa5e:	c3                   	ret    

c001aa5f <Reg::readInt(char*, char*, int*)>:
c001aa5f:	55                   	push   ebp
c001aa60:	57                   	push   edi
c001aa61:	56                   	push   esi
c001aa62:	53                   	push   ebx
c001aa63:	81 ec f0 00 00 00    	sub    esp,0xf0
c001aa69:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001aa6d:	57                   	push   edi
c001aa6e:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001aa75:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001aa7c:	e8 a7 ff ff ff       	call   c001aa28 <Reg::getLine(char*, char*, char*)>
c001aa81:	83 c4 10             	add    esp,0x10
c001aa84:	84 c0                	test   al,al
c001aa86:	0f 84 b3 00 00 00    	je     c001ab3f <Reg::readInt(char*, char*, int*)+0xe0>
c001aa8c:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001aa90:	80 fa 2b             	cmp    dl,0x2b
c001aa93:	74 0c                	je     c001aaa1 <Reg::readInt(char*, char*, int*)+0x42>
c001aa95:	80 fa 2d             	cmp    dl,0x2d
c001aa98:	75 0e                	jne    c001aaa8 <Reg::readInt(char*, char*, int*)+0x49>
c001aa9a:	ba 01 00 00 00       	mov    edx,0x1
c001aa9f:	eb 0b                	jmp    c001aaac <Reg::readInt(char*, char*, int*)+0x4d>
c001aaa1:	ba 01 00 00 00       	mov    edx,0x1
c001aaa6:	eb 02                	jmp    c001aaaa <Reg::readInt(char*, char*, int*)+0x4b>
c001aaa8:	31 d2                	xor    edx,edx
c001aaaa:	31 c0                	xor    eax,eax
c001aaac:	be 0a 00 00 00       	mov    esi,0xa
c001aab1:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001aab6:	75 20                	jne    c001aad8 <Reg::readInt(char*, char*, int*)+0x79>
c001aab8:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c001aabc:	80 f9 78             	cmp    cl,0x78
c001aabf:	75 0a                	jne    c001aacb <Reg::readInt(char*, char*, int*)+0x6c>
c001aac1:	83 c2 02             	add    edx,0x2
c001aac4:	be 10 00 00 00       	mov    esi,0x10
c001aac9:	eb 0d                	jmp    c001aad8 <Reg::readInt(char*, char*, int*)+0x79>
c001aacb:	80 f9 62             	cmp    cl,0x62
c001aace:	75 08                	jne    c001aad8 <Reg::readInt(char*, char*, int*)+0x79>
c001aad0:	83 c2 02             	add    edx,0x2
c001aad3:	be 02 00 00 00       	mov    esi,0x2
c001aad8:	01 d7                	add    edi,edx
c001aada:	31 d2                	xor    edx,edx
c001aadc:	8a 1f                	mov    bl,BYTE PTR [edi]
c001aade:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c001aae2:	80 fb 0d             	cmp    bl,0xd
c001aae5:	0f 94 c3             	sete   bl
c001aae8:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001aaed:	0f 94 c1             	sete   cl
c001aaf0:	08 cb                	or     bl,cl
c001aaf2:	75 3a                	jne    c001ab2e <Reg::readInt(char*, char*, int*)+0xcf>
c001aaf4:	0f af d6             	imul   edx,esi
c001aaf7:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c001aafc:	83 fe 10             	cmp    esi,0x10
c001aaff:	75 26                	jne    c001ab27 <Reg::readInt(char*, char*, int*)+0xc8>
c001ab01:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001ab05:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001ab08:	89 e9                	mov    ecx,ebp
c001ab0a:	80 f9 05             	cmp    cl,0x5
c001ab0d:	77 06                	ja     c001ab15 <Reg::readInt(char*, char*, int*)+0xb6>
c001ab0f:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c001ab13:	eb 16                	jmp    c001ab2b <Reg::readInt(char*, char*, int*)+0xcc>
c001ab15:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001ab19:	83 e9 61             	sub    ecx,0x61
c001ab1c:	80 f9 05             	cmp    cl,0x5
c001ab1f:	77 06                	ja     c001ab27 <Reg::readInt(char*, char*, int*)+0xc8>
c001ab21:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001ab25:	eb 04                	jmp    c001ab2b <Reg::readInt(char*, char*, int*)+0xcc>
c001ab27:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c001ab2b:	47                   	inc    edi
c001ab2c:	eb ae                	jmp    c001aadc <Reg::readInt(char*, char*, int*)+0x7d>
c001ab2e:	84 c0                	test   al,al
c001ab30:	74 02                	je     c001ab34 <Reg::readInt(char*, char*, int*)+0xd5>
c001ab32:	f7 da                	neg    edx
c001ab34:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001ab3b:	89 10                	mov    DWORD PTR [eax],edx
c001ab3d:	88 d8                	mov    al,bl
c001ab3f:	81 c4 ec 00 00 00    	add    esp,0xec
c001ab45:	5b                   	pop    ebx
c001ab46:	5e                   	pop    esi
c001ab47:	5f                   	pop    edi
c001ab48:	5d                   	pop    ebp
c001ab49:	c3                   	ret    

c001ab4a <Reg::readString(char*, char*, char*, int)>:
c001ab4a:	57                   	push   edi
c001ab4b:	56                   	push   esi
c001ab4c:	53                   	push   ebx
c001ab4d:	81 ec d4 00 00 00    	sub    esp,0xd4
c001ab53:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001ab5a:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001ab5e:	57                   	push   edi
c001ab5f:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001ab66:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001ab6d:	e8 b6 fe ff ff       	call   c001aa28 <Reg::getLine(char*, char*, char*)>
c001ab72:	83 c4 10             	add    esp,0x10
c001ab75:	89 c6                	mov    esi,eax
c001ab77:	84 c0                	test   al,al
c001ab79:	74 44                	je     c001abbf <Reg::readString(char*, char*, char*, int)+0x75>
c001ab7b:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001ab82:	31 c0                	xor    eax,eax
c001ab84:	4a                   	dec    edx
c001ab85:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001ab88:	84 c9                	test   cl,cl
c001ab8a:	74 0f                	je     c001ab9b <Reg::readString(char*, char*, char*, int)+0x51>
c001ab8c:	39 c2                	cmp    edx,eax
c001ab8e:	7e 0b                	jle    c001ab9b <Reg::readString(char*, char*, char*, int)+0x51>
c001ab90:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001ab93:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001ab98:	40                   	inc    eax
c001ab99:	eb ea                	jmp    c001ab85 <Reg::readString(char*, char*, char*, int)+0x3b>
c001ab9b:	83 ec 0c             	sub    esp,0xc
c001ab9e:	53                   	push   ebx
c001ab9f:	e8 f0 5b fe ff       	call   c0000794 <strlen>
c001aba4:	83 c4 10             	add    esp,0x10
c001aba7:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001abac:	75 11                	jne    c001abbf <Reg::readString(char*, char*, char*, int)+0x75>
c001abae:	83 ec 0c             	sub    esp,0xc
c001abb1:	53                   	push   ebx
c001abb2:	e8 dd 5b fe ff       	call   c0000794 <strlen>
c001abb7:	83 c4 10             	add    esp,0x10
c001abba:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001abbf:	81 c4 d0 00 00 00    	add    esp,0xd0
c001abc5:	89 f0                	mov    eax,esi
c001abc7:	5b                   	pop    ebx
c001abc8:	5e                   	pop    esi
c001abc9:	5f                   	pop    edi
c001abca:	c3                   	ret    

c001abcb <Reg::readBool(char*, char*, bool*)>:
c001abcb:	83 ec 20             	sub    esp,0x20
c001abce:	8d 44 24 10          	lea    eax,[esp+0x10]
c001abd2:	50                   	push   eax
c001abd3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001abd7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001abdb:	e8 7f fe ff ff       	call   c001aa5f <Reg::readInt(char*, char*, int*)>
c001abe0:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001abe5:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001abe9:	0f 95 02             	setne  BYTE PTR [edx]
c001abec:	83 c4 2c             	add    esp,0x2c
c001abef:	c3                   	ret    

c001abf0 <Reg::readBoolWithDefault(char*, char*, bool)>:
c001abf0:	53                   	push   ebx
c001abf1:	83 ec 1c             	sub    esp,0x1c
c001abf4:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001abf8:	8d 44 24 13          	lea    eax,[esp+0x13]
c001abfc:	50                   	push   eax
c001abfd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ac01:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ac05:	e8 c1 ff ff ff       	call   c001abcb <Reg::readBool(char*, char*, bool*)>
c001ac0a:	83 c4 10             	add    esp,0x10
c001ac0d:	84 c0                	test   al,al
c001ac0f:	74 04                	je     c001ac15 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001ac11:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001ac15:	88 d8                	mov    al,bl
c001ac17:	83 c4 18             	add    esp,0x18
c001ac1a:	5b                   	pop    ebx
c001ac1b:	c3                   	ret    

c001ac1c <Reg::readIntWithDefault(char*, char*, int)>:
c001ac1c:	53                   	push   ebx
c001ac1d:	83 ec 1c             	sub    esp,0x1c
c001ac20:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001ac24:	8d 44 24 10          	lea    eax,[esp+0x10]
c001ac28:	50                   	push   eax
c001ac29:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ac2d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ac31:	e8 29 fe ff ff       	call   c001aa5f <Reg::readInt(char*, char*, int*)>
c001ac36:	83 c4 10             	add    esp,0x10
c001ac39:	84 c0                	test   al,al
c001ac3b:	74 04                	je     c001ac41 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001ac3d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001ac41:	89 d8                	mov    eax,ebx
c001ac43:	83 c4 18             	add    esp,0x18
c001ac46:	5b                   	pop    ebx
c001ac47:	c3                   	ret    

c001ac48 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001ac48:	57                   	push   edi
c001ac49:	56                   	push   esi
c001ac4a:	53                   	push   ebx
c001ac4b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001ac4f:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001ac53:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001ac57:	56                   	push   esi
c001ac58:	53                   	push   ebx
c001ac59:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ac5d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ac61:	e8 e4 fe ff ff       	call   c001ab4a <Reg::readString(char*, char*, char*, int)>
c001ac66:	83 c4 10             	add    esp,0x10
c001ac69:	84 c0                	test   al,al
c001ac6b:	75 1b                	jne    c001ac88 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x40>
c001ac6d:	50                   	push   eax
c001ac6e:	56                   	push   esi
c001ac6f:	4e                   	dec    esi
c001ac70:	6a 00                	push   0x0
c001ac72:	53                   	push   ebx
c001ac73:	e8 00 5b fe ff       	call   c0000778 <memset>
c001ac78:	83 c4 0c             	add    esp,0xc
c001ac7b:	56                   	push   esi
c001ac7c:	57                   	push   edi
c001ac7d:	53                   	push   ebx
c001ac7e:	89 fb                	mov    ebx,edi
c001ac80:	e8 bf 5a fe ff       	call   c0000744 <memcpy>
c001ac85:	83 c4 10             	add    esp,0x10
c001ac88:	89 d8                	mov    eax,ebx
c001ac8a:	5b                   	pop    ebx
c001ac8b:	5e                   	pop    esi
c001ac8c:	5f                   	pop    edi
c001ac8d:	c3                   	ret    

c001ac8e <Sys::eject(regs*)>:
c001ac8e:	83 ec 0c             	sub    esp,0xc
c001ac91:	83 ca ff             	or     edx,0xffffffff
c001ac94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac98:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001ac9b:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001aca0:	83 e9 41             	sub    ecx,0x41
c001aca3:	83 f9 19             	cmp    ecx,0x19
c001aca6:	77 18                	ja     c001acc0 <Sys::eject(regs*)+0x32>
c001aca8:	8b 0c 8d 80 e1 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1e80]
c001acaf:	85 c9                	test   ecx,ecx
c001acb1:	74 0d                	je     c001acc0 <Sys::eject(regs*)+0x32>
c001acb3:	83 ec 0c             	sub    esp,0xc
c001acb6:	51                   	push   ecx
c001acb7:	e8 ac b5 ff ff       	call   c0016268 <LogicalDisk::eject()>
c001acbc:	83 c4 10             	add    esp,0x10
c001acbf:	99                   	cdq    
c001acc0:	83 c4 0c             	add    esp,0xc
c001acc3:	c3                   	ret    

c001acc4 <Sys::exit(regs*)>:
c001acc4:	83 ec 18             	sub    esp,0x18
c001acc7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001accb:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001acce:	e8 2e 34 00 00       	call   c001e101 <terminateTask(int)>
c001acd3:	83 c8 ff             	or     eax,0xffffffff
c001acd6:	83 c4 1c             	add    esp,0x1c
c001acd9:	89 c2                	mov    edx,eax
c001acdb:	c3                   	ret    

c001acdc <Sys::getCwd(regs*)>:
c001acdc:	83 ec 10             	sub    esp,0x10
c001acdf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ace3:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001ace6:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001ace9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001acee:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001acf1:	e8 7a 81 ff ff       	call   c0012e70 <Fs::getcwd(Process*, char*, int)>
c001acf6:	83 c4 1c             	add    esp,0x1c
c001acf9:	99                   	cdq    
c001acfa:	c3                   	ret    

c001acfb <Sys::getPID(regs*)>:
c001acfb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ad00:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ad03:	8b 00                	mov    eax,DWORD PTR [eax]
c001ad05:	99                   	cdq    
c001ad06:	c3                   	ret    

c001ad07 <Sys::loadDLL(regs*)>:
c001ad07:	56                   	push   esi
c001ad08:	53                   	push   ebx
c001ad09:	31 d2                	xor    edx,edx
c001ad0b:	51                   	push   ecx
c001ad0c:	b8 01 00 00 00       	mov    eax,0x1
c001ad11:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ad15:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001ad19:	0f 84 8c 00 00 00    	je     c001adab <Sys::loadDLL(regs*)+0xa4>
c001ad1f:	83 ec 0c             	sub    esp,0xc
c001ad22:	68 14 01 00 00       	push   0x114
c001ad27:	e8 1a 4b ff ff       	call   c000f846 <malloc>
c001ad2c:	83 c4 0c             	add    esp,0xc
c001ad2f:	89 c3                	mov    ebx,eax
c001ad31:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ad36:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001ad39:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001ad3c:	53                   	push   ebx
c001ad3d:	e8 2c 83 ff ff       	call   c001306e <File::File(char const*, Process*)>
c001ad42:	83 c4 10             	add    esp,0x10
c001ad45:	31 d2                	xor    edx,edx
c001ad47:	b8 02 00 00 00       	mov    eax,0x2
c001ad4c:	85 db                	test   ebx,ebx
c001ad4e:	74 5b                	je     c001adab <Sys::loadDLL(regs*)+0xa4>
c001ad50:	83 ec 0c             	sub    esp,0xc
c001ad53:	53                   	push   ebx
c001ad54:	e8 e7 85 ff ff       	call   c0013340 <File::exists()>
c001ad59:	83 c4 10             	add    esp,0x10
c001ad5c:	84 c0                	test   al,al
c001ad5e:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ad60:	75 11                	jne    c001ad73 <Sys::loadDLL(regs*)+0x6c>
c001ad62:	83 ec 0c             	sub    esp,0xc
c001ad65:	53                   	push   ebx
c001ad66:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ad69:	83 c4 10             	add    esp,0x10
c001ad6c:	b8 03 00 00 00       	mov    eax,0x3
c001ad71:	eb 36                	jmp    c001ada9 <Sys::loadDLL(regs*)+0xa2>
c001ad73:	83 ec 0c             	sub    esp,0xc
c001ad76:	53                   	push   ebx
c001ad77:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ad7a:	58                   	pop    eax
c001ad7b:	5a                   	pop    edx
c001ad7c:	6a 00                	push   0x0
c001ad7e:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001ad81:	e8 91 22 00 00       	call   c001d017 <Thr::loadDLL(char const*, bool)>
c001ad86:	83 c4 10             	add    esp,0x10
c001ad89:	89 c1                	mov    ecx,eax
c001ad8b:	31 d2                	xor    edx,edx
c001ad8d:	b8 04 00 00 00       	mov    eax,0x4
c001ad92:	85 c9                	test   ecx,ecx
c001ad94:	74 15                	je     c001adab <Sys::loadDLL(regs*)+0xa4>
c001ad96:	53                   	push   ebx
c001ad97:	53                   	push   ebx
c001ad98:	ff 35 68 db 02 c0    	push   DWORD PTR ds:0xc002db68
c001ad9e:	51                   	push   ecx
c001ad9f:	e8 a7 24 00 00       	call   c001d24b <Thr::executeDLL(unsigned long, void*)>
c001ada4:	83 c4 10             	add    esp,0x10
c001ada7:	31 c0                	xor    eax,eax
c001ada9:	31 d2                	xor    edx,edx
c001adab:	59                   	pop    ecx
c001adac:	5b                   	pop    ebx
c001adad:	5e                   	pop    esi
c001adae:	c3                   	ret    

c001adaf <Sys::read(regs*)>:
c001adaf:	57                   	push   edi
c001adb0:	56                   	push   esi
c001adb1:	53                   	push   ebx
c001adb2:	83 ec 10             	sub    esp,0x10
c001adb5:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001adb9:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001adbc:	83 f8 02             	cmp    eax,0x2
c001adbf:	77 10                	ja     c001add1 <Sys::read(regs*)+0x22>
c001adc1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001adc6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001adc9:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001adcf:	eb 0e                	jmp    c001addf <Sys::read(regs*)+0x30>
c001add1:	83 ec 0c             	sub    esp,0xc
c001add4:	50                   	push   eax
c001add5:	e8 f5 6b ff ff       	call   c00119cf <getFromFileDescriptor(int)>
c001adda:	83 c4 10             	add    esp,0x10
c001addd:	89 c1                	mov    ecx,eax
c001addf:	83 c8 ff             	or     eax,0xffffffff
c001ade2:	85 c9                	test   ecx,ecx
c001ade4:	89 c2                	mov    edx,eax
c001ade6:	74 28                	je     c001ae10 <Sys::read(regs*)+0x61>
c001ade8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001adf0:	31 ff                	xor    edi,edi
c001adf2:	83 ec 0c             	sub    esp,0xc
c001adf5:	8b 01                	mov    eax,DWORD PTR [ecx]
c001adf7:	8d 54 24 18          	lea    edx,[esp+0x18]
c001adfb:	52                   	push   edx
c001adfc:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001adff:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001ae02:	57                   	push   edi
c001ae03:	56                   	push   esi
c001ae04:	51                   	push   ecx
c001ae05:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ae08:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001ae0c:	83 c4 20             	add    esp,0x20
c001ae0f:	99                   	cdq    
c001ae10:	83 c4 10             	add    esp,0x10
c001ae13:	5b                   	pop    ebx
c001ae14:	5e                   	pop    esi
c001ae15:	5f                   	pop    edi
c001ae16:	c3                   	ret    

c001ae17 <Sys::sbrk(regs*)>:
c001ae17:	56                   	push   esi
c001ae18:	53                   	push   ebx
c001ae19:	50                   	push   eax
c001ae1a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ae1f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ae23:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ae26:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c001ae29:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c001ae2f:	85 db                	test   ebx,ebx
c001ae31:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001ae34:	74 02                	je     c001ae38 <Sys::sbrk(regs*)+0x21>
c001ae36:	79 06                	jns    c001ae3e <Sys::sbrk(regs*)+0x27>
c001ae38:	89 f0                	mov    eax,esi
c001ae3a:	31 d2                	xor    edx,edx
c001ae3c:	eb 2a                	jmp    c001ae68 <Sys::sbrk(regs*)+0x51>
c001ae3e:	83 c8 ff             	or     eax,0xffffffff
c001ae41:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c001ae47:	89 c2                	mov    edx,eax
c001ae49:	77 1d                	ja     c001ae68 <Sys::sbrk(regs*)+0x51>
c001ae4b:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c001ae51:	50                   	push   eax
c001ae52:	c1 ea 0c             	shr    edx,0xc
c001ae55:	68 07 04 00 00       	push   0x407
c001ae5a:	52                   	push   edx
c001ae5b:	51                   	push   ecx
c001ae5c:	e8 8f 74 ff ff       	call   c00122f0 <VAS::allocatePages(int, int)>
c001ae61:	89 f0                	mov    eax,esi
c001ae63:	31 d2                	xor    edx,edx
c001ae65:	83 c4 10             	add    esp,0x10
c001ae68:	59                   	pop    ecx
c001ae69:	5b                   	pop    ebx
c001ae6a:	5e                   	pop    esi
c001ae6b:	c3                   	ret    

c001ae6c <Sys::setCwd(regs*)>:
c001ae6c:	83 ec 14             	sub    esp,0x14
c001ae6f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ae73:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001ae76:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ae7b:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001ae7e:	e8 5c 85 ff ff       	call   c00133df <Fs::setcwd(Process*, char*)>
c001ae83:	83 c4 1c             	add    esp,0x1c
c001ae86:	99                   	cdq    
c001ae87:	c3                   	ret    

c001ae88 <Sys::setTime(regs*)>:
c001ae88:	55                   	push   ebp
c001ae89:	31 d2                	xor    edx,edx
c001ae8b:	57                   	push   edi
c001ae8c:	bf 18 00 00 00       	mov    edi,0x18
c001ae91:	56                   	push   esi
c001ae92:	53                   	push   ebx
c001ae93:	bb 3c 00 00 00       	mov    ebx,0x3c
c001ae98:	83 ec 30             	sub    esp,0x30
c001ae9b:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c001ae9f:	8b 69 24             	mov    ebp,DWORD PTR [ecx+0x24]
c001aea2:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001aea5:	f7 f3                	div    ebx
c001aea7:	89 d6                	mov    esi,edx
c001aea9:	31 d2                	xor    edx,edx
c001aeab:	f7 f3                	div    ebx
c001aead:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001aeb0:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001aeb4:	bb 10 0e 00 00       	mov    ebx,0xe10
c001aeb9:	31 d2                	xor    edx,edx
c001aebb:	f7 f3                	div    ebx
c001aebd:	31 d2                	xor    edx,edx
c001aebf:	bb 0c 00 00 00       	mov    ebx,0xc
c001aec4:	f7 f7                	div    edi
c001aec6:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001aec9:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001aecd:	0f b7 cd             	movzx  ecx,bp
c001aed0:	56                   	push   esi
c001aed1:	89 c7                	mov    edi,eax
c001aed3:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001aed7:	c1 e6 10             	shl    esi,0x10
c001aeda:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001aede:	83 e7 1f             	and    edi,0x1f
c001aee1:	51                   	push   ecx
c001aee2:	47                   	inc    edi
c001aee3:	c1 e8 05             	shr    eax,0x5
c001aee6:	31 d2                	xor    edx,edx
c001aee8:	f7 f3                	div    ebx
c001aeea:	31 db                	xor    ebx,ebx
c001aeec:	52                   	push   edx
c001aeed:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001aef1:	57                   	push   edi
c001aef2:	68 49 b5 02 c0       	push   0xc002b549
c001aef7:	e8 19 7c ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c001aefc:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001af00:	89 f8                	mov    eax,edi
c001af02:	31 c9                	xor    ecx,ecx
c001af04:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001af08:	88 c1                	mov    cl,al
c001af0a:	8d 85 94 f8 ff ff    	lea    eax,[ebp-0x76c]
c001af10:	88 d5                	mov    ch,dl
c001af12:	c1 e0 10             	shl    eax,0x10
c001af15:	0f b7 d1             	movzx  edx,cx
c001af18:	09 c2                	or     edx,eax
c001af1a:	89 d8                	mov    eax,ebx
c001af1c:	25 ff ff 00 ff       	and    eax,0xff00ffff
c001af21:	09 f0                	or     eax,esi
c001af23:	89 c3                	mov    ebx,eax
c001af25:	8a 7c 24 20          	mov    bh,BYTE PTR [esp+0x20]
c001af29:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001af2d:	83 c4 18             	add    esp,0x18
c001af30:	53                   	push   ebx
c001af31:	52                   	push   edx
c001af32:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001af36:	8d 74 24 28          	lea    esi,[esp+0x28]
c001af3a:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001af3e:	e8 b6 8b ff ff       	call   c0013af9 <datetimeToSeconds(datetime_t)>
c001af43:	83 c4 0c             	add    esp,0xc
c001af46:	52                   	push   edx
c001af47:	50                   	push   eax
c001af48:	56                   	push   esi
c001af49:	e8 32 8d ff ff       	call   c0013c80 <secondsToDatetime(unsigned long long)>
c001af4e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001af52:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001af56:	51                   	push   ecx
c001af57:	89 d6                	mov    esi,edx
c001af59:	51                   	push   ecx
c001af5a:	c1 ee 10             	shr    esi,0x10
c001af5d:	89 f3                	mov    ebx,esi
c001af5f:	0f b6 f3             	movzx  esi,bl
c001af62:	56                   	push   esi
c001af63:	0f b6 f6             	movzx  esi,dh
c001af66:	0f b6 d2             	movzx  edx,dl
c001af69:	56                   	push   esi
c001af6a:	52                   	push   edx
c001af6b:	89 c2                	mov    edx,eax
c001af6d:	c1 ea 10             	shr    edx,0x10
c001af70:	52                   	push   edx
c001af71:	0f b6 d4             	movzx  edx,ah
c001af74:	0f b6 c0             	movzx  eax,al
c001af77:	52                   	push   edx
c001af78:	50                   	push   eax
c001af79:	68 65 b5 02 c0       	push   0xc002b565
c001af7e:	e8 92 7b ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c001af83:	83 c4 2c             	add    esp,0x2c
c001af86:	a1 68 db 02 c0       	mov    eax,ds:0xc002db68
c001af8b:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001af8f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001af93:	53                   	push   ebx
c001af94:	51                   	push   ecx
c001af95:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001af9b:	e8 80 8c ff ff       	call   c0013c20 <Clock::setTimeInDatetimeLocal(datetime_t)>
c001afa0:	83 f0 01             	xor    eax,0x1
c001afa3:	31 d2                	xor    edx,edx
c001afa5:	0f b6 c0             	movzx  eax,al
c001afa8:	83 c4 3c             	add    esp,0x3c
c001afab:	5b                   	pop    ebx
c001afac:	5e                   	pop    esi
c001afad:	5f                   	pop    edi
c001afae:	5d                   	pop    ebp
c001afaf:	c3                   	ret    

c001afb0 <Sys::timezone(regs*)>:
c001afb0:	53                   	push   ebx
c001afb1:	83 ec 08             	sub    esp,0x8
c001afb4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001afb8:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c001afbc:	75 17                	jne    c001afd5 <Sys::timezone(regs*)+0x25>
c001afbe:	83 ec 0c             	sub    esp,0xc
c001afc1:	68 81 b5 02 c0       	push   0xc002b581
c001afc6:	e8 4a 7b ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c001afcb:	83 c8 ff             	or     eax,0xffffffff
c001afce:	83 c4 10             	add    esp,0x10
c001afd1:	89 c2                	mov    edx,eax
c001afd3:	eb 20                	jmp    c001aff5 <Sys::timezone(regs*)+0x45>
c001afd5:	83 ec 0c             	sub    esp,0xc
c001afd8:	68 b9 b5 02 c0       	push   0xc002b5b9
c001afdd:	e8 33 7b ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c001afe2:	58                   	pop    eax
c001afe3:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001afe6:	e8 97 89 ff ff       	call   c0013982 <User::loadClockSettings(int)>
c001afeb:	83 c4 10             	add    esp,0x10
c001afee:	b8 01 00 00 00       	mov    eax,0x1
c001aff3:	31 d2                	xor    edx,edx
c001aff5:	83 c4 08             	add    esp,0x8
c001aff8:	5b                   	pop    ebx
c001aff9:	c3                   	ret    

c001affa <Sys::write(regs*)>:
c001affa:	57                   	push   edi
c001affb:	56                   	push   esi
c001affc:	53                   	push   ebx
c001affd:	83 ec 10             	sub    esp,0x10
c001b000:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b004:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b007:	83 f8 02             	cmp    eax,0x2
c001b00a:	77 10                	ja     c001b01c <Sys::write(regs*)+0x22>
c001b00c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b011:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b014:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001b01a:	eb 0e                	jmp    c001b02a <Sys::write(regs*)+0x30>
c001b01c:	83 ec 0c             	sub    esp,0xc
c001b01f:	50                   	push   eax
c001b020:	e8 aa 69 ff ff       	call   c00119cf <getFromFileDescriptor(int)>
c001b025:	83 c4 10             	add    esp,0x10
c001b028:	89 c1                	mov    ecx,eax
c001b02a:	83 c8 ff             	or     eax,0xffffffff
c001b02d:	85 c9                	test   ecx,ecx
c001b02f:	89 c2                	mov    edx,eax
c001b031:	74 28                	je     c001b05b <Sys::write(regs*)+0x61>
c001b033:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b03b:	31 ff                	xor    edi,edi
c001b03d:	83 ec 0c             	sub    esp,0xc
c001b040:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b042:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b046:	52                   	push   edx
c001b047:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b04a:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b04d:	57                   	push   edi
c001b04e:	56                   	push   esi
c001b04f:	51                   	push   ecx
c001b050:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001b053:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b057:	83 c4 20             	add    esp,0x20
c001b05a:	99                   	cdq    
c001b05b:	83 c4 10             	add    esp,0x10
c001b05e:	5b                   	pop    ebx
c001b05f:	5e                   	pop    esi
c001b060:	5f                   	pop    edi
c001b061:	c3                   	ret    

c001b062 <Sys::yield(regs*)>:
c001b062:	57                   	push   edi
c001b063:	56                   	push   esi
c001b064:	53                   	push   ebx
c001b065:	e8 54 26 00 00       	call   c001d6be <lockScheduler()>
c001b06a:	e8 8b 29 00 00       	call   c001d9fa <schedule()>
c001b06f:	e8 4c 26 00 00       	call   c001d6c0 <unlockScheduler()>
c001b074:	8b 35 f0 e1 02 c0    	mov    esi,DWORD PTR ds:0xc002e1f0
c001b07a:	8b 3d f4 e1 02 c0    	mov    edi,DWORD PTR ds:0xc002e1f4
c001b080:	89 f0                	mov    eax,esi
c001b082:	89 fb                	mov    ebx,edi
c001b084:	89 f1                	mov    ecx,esi
c001b086:	c1 e0 07             	shl    eax,0x7
c001b089:	0f ac d9 17          	shrd   ecx,ebx,0x17
c001b08d:	25 80 30 0f 00       	and    eax,0xf3080
c001b092:	c1 eb 17             	shr    ebx,0x17
c001b095:	31 c8                	xor    eax,ecx
c001b097:	89 da                	mov    edx,ebx
c001b099:	5b                   	pop    ebx
c001b09a:	5e                   	pop    esi
c001b09b:	5f                   	pop    edi
c001b09c:	c3                   	ret    

c001b09d <sysCallSeekDir(regs*)>:
c001b09d:	31 c0                	xor    eax,eax
c001b09f:	31 d2                	xor    edx,edx
c001b0a1:	c3                   	ret    

c001b0a2 <sysCallTellDir(regs*)>:
c001b0a2:	31 c0                	xor    eax,eax
c001b0a4:	31 d2                	xor    edx,edx
c001b0a6:	c3                   	ret    

c001b0a7 <sysCallVerify(regs*)>:
c001b0a7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b0ab:	31 d2                	xor    edx,edx
c001b0ad:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b0b0:	c3                   	ret    

c001b0b1 <sysCallGetArgc(regs*)>:
c001b0b1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b0b6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b0b9:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c001b0bf:	99                   	cdq    
c001b0c0:	c3                   	ret    

c001b0c1 <sysFormatDisk(regs*)>:
c001b0c1:	56                   	push   esi
c001b0c2:	53                   	push   ebx
c001b0c3:	53                   	push   ebx
c001b0c4:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b0c8:	8b 1d e8 dc 02 c0    	mov    ebx,DWORD PTR ds:0xc002dce8
c001b0ce:	eb 25                	jmp    c001b0f5 <sysFormatDisk(regs*)+0x34>
c001b0d0:	83 ec 0c             	sub    esp,0xc
c001b0d3:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b0d6:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b0d8:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001b0db:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001b0de:	50                   	push   eax
c001b0df:	ff 34 85 80 e1 02 c0 	push   DWORD PTR [eax*4-0x3ffd1e80]
c001b0e6:	53                   	push   ebx
c001b0e7:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001b0ea:	83 c4 20             	add    esp,0x20
c001b0ed:	83 f8 08             	cmp    eax,0x8
c001b0f0:	75 12                	jne    c001b104 <sysFormatDisk(regs*)+0x43>
c001b0f2:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001b0f5:	85 db                	test   ebx,ebx
c001b0f7:	75 d7                	jne    c001b0d0 <sysFormatDisk(regs*)+0xf>
c001b0f9:	59                   	pop    ecx
c001b0fa:	b8 03 00 00 00       	mov    eax,0x3
c001b0ff:	31 d2                	xor    edx,edx
c001b101:	5b                   	pop    ebx
c001b102:	5e                   	pop    esi
c001b103:	c3                   	ret    
c001b104:	85 c0                	test   eax,eax
c001b106:	74 1b                	je     c001b123 <sysFormatDisk(regs*)+0x62>
c001b108:	83 f8 09             	cmp    eax,0x9
c001b10b:	74 0b                	je     c001b118 <sysFormatDisk(regs*)+0x57>
c001b10d:	59                   	pop    ecx
c001b10e:	b8 02 00 00 00       	mov    eax,0x2
c001b113:	31 d2                	xor    edx,edx
c001b115:	5b                   	pop    ebx
c001b116:	5e                   	pop    esi
c001b117:	c3                   	ret    
c001b118:	59                   	pop    ecx
c001b119:	b8 01 00 00 00       	mov    eax,0x1
c001b11e:	31 d2                	xor    edx,edx
c001b120:	5b                   	pop    ebx
c001b121:	5e                   	pop    esi
c001b122:	c3                   	ret    
c001b123:	59                   	pop    ecx
c001b124:	31 c0                	xor    eax,eax
c001b126:	31 d2                	xor    edx,edx
c001b128:	5b                   	pop    ebx
c001b129:	5e                   	pop    esi
c001b12a:	c3                   	ret    

c001b12b <sysSetDiskVolumeLabel(regs*)>:
c001b12b:	56                   	push   esi
c001b12c:	53                   	push   ebx
c001b12d:	53                   	push   ebx
c001b12e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b132:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001b135:	83 f8 19             	cmp    eax,0x19
c001b138:	77 29                	ja     c001b163 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b13a:	8b 0c 85 80 e1 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd1e80]
c001b141:	85 c9                	test   ecx,ecx
c001b143:	74 1e                	je     c001b163 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b145:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c001b148:	85 d2                	test   edx,edx
c001b14a:	74 17                	je     c001b163 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b14c:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c001b152:	8b 33                	mov    esi,DWORD PTR [ebx]
c001b154:	52                   	push   edx
c001b155:	50                   	push   eax
c001b156:	51                   	push   ecx
c001b157:	53                   	push   ebx
c001b158:	ff 56 58             	call   DWORD PTR [esi+0x58]
c001b15b:	83 c4 10             	add    esp,0x10
c001b15e:	99                   	cdq    
c001b15f:	59                   	pop    ecx
c001b160:	5b                   	pop    ebx
c001b161:	5e                   	pop    esi
c001b162:	c3                   	ret    
c001b163:	59                   	pop    ecx
c001b164:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b169:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b16e:	5b                   	pop    ebx
c001b16f:	5e                   	pop    esi
c001b170:	c3                   	ret    

c001b171 <sysGetDiskVolumeLabel(regs*)>:
c001b171:	57                   	push   edi
c001b172:	56                   	push   esi
c001b173:	53                   	push   ebx
c001b174:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b178:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001b17b:	83 fa 19             	cmp    edx,0x19
c001b17e:	77 34                	ja     c001b1b4 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b180:	8b 0c 95 80 e1 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd1e80]
c001b187:	85 c9                	test   ecx,ecx
c001b189:	74 29                	je     c001b1b4 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b18b:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001b18e:	85 db                	test   ebx,ebx
c001b190:	74 22                	je     c001b1b4 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b192:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001b195:	85 c0                	test   eax,eax
c001b197:	74 1b                	je     c001b1b4 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b199:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c001b19f:	83 ec 0c             	sub    esp,0xc
c001b1a2:	8b 3e                	mov    edi,DWORD PTR [esi]
c001b1a4:	50                   	push   eax
c001b1a5:	53                   	push   ebx
c001b1a6:	52                   	push   edx
c001b1a7:	51                   	push   ecx
c001b1a8:	56                   	push   esi
c001b1a9:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001b1ac:	83 c4 20             	add    esp,0x20
c001b1af:	99                   	cdq    
c001b1b0:	5b                   	pop    ebx
c001b1b1:	5e                   	pop    esi
c001b1b2:	5f                   	pop    edi
c001b1b3:	c3                   	ret    
c001b1b4:	5b                   	pop    ebx
c001b1b5:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b1ba:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b1bf:	5e                   	pop    esi
c001b1c0:	5f                   	pop    edi
c001b1c1:	c3                   	ret    

c001b1c2 <sysShutdown(regs*)>:
c001b1c2:	83 ec 0c             	sub    esp,0xc
c001b1c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b1c9:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b1cc:	85 c0                	test   eax,eax
c001b1ce:	74 18                	je     c001b1e8 <sysShutdown(regs*)+0x26>
c001b1d0:	83 f8 01             	cmp    eax,0x1
c001b1d3:	74 38                	je     c001b20d <sysShutdown(regs*)+0x4b>
c001b1d5:	83 f8 02             	cmp    eax,0x2
c001b1d8:	74 24                	je     c001b1fe <sysShutdown(regs*)+0x3c>
c001b1da:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b1df:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b1e4:	83 c4 0c             	add    esp,0xc
c001b1e7:	c3                   	ret    
c001b1e8:	a1 68 db 02 c0       	mov    eax,ds:0xc002db68
c001b1ed:	8b 10                	mov    edx,DWORD PTR [eax]
c001b1ef:	6a 00                	push   0x0
c001b1f1:	6a 00                	push   0x0
c001b1f3:	6a 00                	push   0x0
c001b1f5:	50                   	push   eax
c001b1f6:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b1f9:	83 c4 10             	add    esp,0x10
c001b1fc:	eb dc                	jmp    c001b1da <sysShutdown(regs*)+0x18>
c001b1fe:	a1 68 db 02 c0       	mov    eax,ds:0xc002db68
c001b203:	8b 10                	mov    edx,DWORD PTR [eax]
c001b205:	6a 00                	push   0x0
c001b207:	6a 00                	push   0x0
c001b209:	6a 01                	push   0x1
c001b20b:	eb e8                	jmp    c001b1f5 <sysShutdown(regs*)+0x33>
c001b20d:	a1 20 02 03 c0       	mov    eax,ds:0xc0030220
c001b212:	85 c0                	test   eax,eax
c001b214:	74 02                	je     c001b218 <sysShutdown(regs*)+0x56>
c001b216:	ff d0                	call   eax
c001b218:	31 c0                	xor    eax,eax
c001b21a:	31 d2                	xor    edx,edx
c001b21c:	83 c4 0c             	add    esp,0xc
c001b21f:	c3                   	ret    

c001b220 <sysCallRealpath(regs*)>:
c001b220:	83 ec 0c             	sub    esp,0xc
c001b223:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b227:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001b22a:	85 d2                	test   edx,edx
c001b22c:	74 07                	je     c001b235 <sysCallRealpath(regs*)+0x15>
c001b22e:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001b231:	85 c0                	test   eax,eax
c001b233:	75 0b                	jne    c001b240 <sysCallRealpath(regs*)+0x20>
c001b235:	b8 01 00 00 00       	mov    eax,0x1
c001b23a:	31 d2                	xor    edx,edx
c001b23c:	83 c4 0c             	add    esp,0xc
c001b23f:	c3                   	ret    
c001b240:	51                   	push   ecx
c001b241:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001b247:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001b24a:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001b250:	51                   	push   ecx
c001b251:	52                   	push   edx
c001b252:	50                   	push   eax
c001b253:	e8 6c 7c ff ff       	call   c0012ec4 <Fs::standardiseFiles(char*, char const*, char const*)>
c001b258:	83 c4 10             	add    esp,0x10
c001b25b:	31 c0                	xor    eax,eax
c001b25d:	31 d2                	xor    edx,edx
c001b25f:	83 c4 0c             	add    esp,0xc
c001b262:	c3                   	ret    

c001b263 <sysCallReadDir(regs*)>:
c001b263:	53                   	push   ebx
c001b264:	83 ec 18             	sub    esp,0x18
c001b267:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b26b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b26e:	83 f8 02             	cmp    eax,0x2
c001b271:	76 53                	jbe    c001b2c6 <sysCallReadDir(regs*)+0x63>
c001b273:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001b276:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c001b27c:	77 4f                	ja     c001b2cd <sysCallReadDir(regs*)+0x6a>
c001b27e:	83 ec 0c             	sub    esp,0xc
c001b281:	50                   	push   eax
c001b282:	e8 48 67 ff ff       	call   c00119cf <getFromFileDescriptor(int)>
c001b287:	83 c4 10             	add    esp,0x10
c001b28a:	85 c0                	test   eax,eax
c001b28c:	74 50                	je     c001b2de <sysCallReadDir(regs*)+0x7b>
c001b28e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b296:	83 ec 0c             	sub    esp,0xc
c001b299:	8b 10                	mov    edx,DWORD PTR [eax]
c001b29b:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001b29f:	51                   	push   ecx
c001b2a0:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b2a3:	6a 00                	push   0x0
c001b2a5:	68 10 01 00 00       	push   0x110
c001b2aa:	50                   	push   eax
c001b2ab:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b2ae:	83 c4 20             	add    esp,0x20
c001b2b1:	85 c0                	test   eax,eax
c001b2b3:	74 38                	je     c001b2ed <sysCallReadDir(regs*)+0x8a>
c001b2b5:	83 f8 07             	cmp    eax,0x7
c001b2b8:	74 0c                	je     c001b2c6 <sysCallReadDir(regs*)+0x63>
c001b2ba:	b8 02 00 00 00       	mov    eax,0x2
c001b2bf:	31 d2                	xor    edx,edx
c001b2c1:	83 c4 18             	add    esp,0x18
c001b2c4:	5b                   	pop    ebx
c001b2c5:	c3                   	ret    
c001b2c6:	b8 01 00 00 00       	mov    eax,0x1
c001b2cb:	eb f2                	jmp    c001b2bf <sysCallReadDir(regs*)+0x5c>
c001b2cd:	83 ec 08             	sub    esp,0x8
c001b2d0:	52                   	push   edx
c001b2d1:	68 f8 b5 02 c0       	push   0xc002b5f8
c001b2d6:	e8 3a 78 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c001b2db:	83 c4 10             	add    esp,0x10
c001b2de:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b2e3:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b2e8:	83 c4 18             	add    esp,0x18
c001b2eb:	5b                   	pop    ebx
c001b2ec:	c3                   	ret    
c001b2ed:	31 c0                	xor    eax,eax
c001b2ef:	eb ce                	jmp    c001b2bf <sysCallReadDir(regs*)+0x5c>

c001b2f1 <sysCallIsATTY(regs*)>:
c001b2f1:	83 ec 0c             	sub    esp,0xc
c001b2f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b2f8:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b2fb:	83 f8 02             	cmp    eax,0x2
c001b2fe:	76 07                	jbe    c001b307 <sysCallIsATTY(regs*)+0x16>
c001b300:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001b305:	75 26                	jne    c001b32d <sysCallIsATTY(regs*)+0x3c>
c001b307:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b30c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b30f:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001b315:	85 c0                	test   eax,eax
c001b317:	74 24                	je     c001b33d <sysCallIsATTY(regs*)+0x4c>
c001b319:	83 ec 0c             	sub    esp,0xc
c001b31c:	8b 10                	mov    edx,DWORD PTR [eax]
c001b31e:	50                   	push   eax
c001b31f:	ff 12                	call   DWORD PTR [edx]
c001b321:	31 d2                	xor    edx,edx
c001b323:	0f b6 c0             	movzx  eax,al
c001b326:	83 c4 10             	add    esp,0x10
c001b329:	83 c4 0c             	add    esp,0xc
c001b32c:	c3                   	ret    
c001b32d:	83 ec 0c             	sub    esp,0xc
c001b330:	50                   	push   eax
c001b331:	e8 99 66 ff ff       	call   c00119cf <getFromFileDescriptor(int)>
c001b336:	83 c4 10             	add    esp,0x10
c001b339:	85 c0                	test   eax,eax
c001b33b:	75 dc                	jne    c001b319 <sysCallIsATTY(regs*)+0x28>
c001b33d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b342:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b347:	83 c4 0c             	add    esp,0xc
c001b34a:	c3                   	ret    

c001b34b <sysCallSeek(regs*)>:
c001b34b:	53                   	push   ebx
c001b34c:	83 ec 08             	sub    esp,0x8
c001b34f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b353:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b356:	83 f8 02             	cmp    eax,0x2
c001b359:	76 4a                	jbe    c001b3a5 <sysCallSeek(regs*)+0x5a>
c001b35b:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b360:	77 32                	ja     c001b394 <sysCallSeek(regs*)+0x49>
c001b362:	83 ec 0c             	sub    esp,0xc
c001b365:	50                   	push   eax
c001b366:	e8 64 66 ff ff       	call   c00119cf <getFromFileDescriptor(int)>
c001b36b:	83 c4 0c             	add    esp,0xc
c001b36e:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001b371:	31 db                	xor    ebx,ebx
c001b373:	53                   	push   ebx
c001b374:	51                   	push   ecx
c001b375:	50                   	push   eax
c001b376:	e8 15 7e ff ff       	call   c0013190 <File::seek(unsigned long long)>
c001b37b:	83 c4 10             	add    esp,0x10
c001b37e:	85 c0                	test   eax,eax
c001b380:	0f 95 c0             	setne  al
c001b383:	31 d2                	xor    edx,edx
c001b385:	0f b6 c0             	movzx  eax,al
c001b388:	f7 d8                	neg    eax
c001b38a:	83 d2 00             	adc    edx,0x0
c001b38d:	83 c4 08             	add    esp,0x8
c001b390:	f7 da                	neg    edx
c001b392:	5b                   	pop    ebx
c001b393:	c3                   	ret    
c001b394:	83 ec 08             	sub    esp,0x8
c001b397:	50                   	push   eax
c001b398:	68 67 b6 02 c0       	push   0xc002b667
c001b39d:	e8 73 77 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c001b3a2:	83 c4 10             	add    esp,0x10
c001b3a5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b3aa:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b3af:	83 c4 08             	add    esp,0x8
c001b3b2:	5b                   	pop    ebx
c001b3b3:	c3                   	ret    

c001b3b4 <sysCallTell(regs*)>:
c001b3b4:	53                   	push   ebx
c001b3b5:	83 ec 08             	sub    esp,0x8
c001b3b8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b3bc:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b3bf:	83 f8 02             	cmp    eax,0x2
c001b3c2:	76 5e                	jbe    c001b422 <sysCallTell(regs*)+0x6e>
c001b3c4:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b3c9:	77 2d                	ja     c001b3f8 <sysCallTell(regs*)+0x44>
c001b3cb:	83 ec 0c             	sub    esp,0xc
c001b3ce:	50                   	push   eax
c001b3cf:	e8 fb 65 ff ff       	call   c00119cf <getFromFileDescriptor(int)>
c001b3d4:	5a                   	pop    edx
c001b3d5:	59                   	pop    ecx
c001b3d6:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001b3d9:	50                   	push   eax
c001b3da:	e8 07 7e ff ff       	call   c00131e6 <File::tell(unsigned long long*)>
c001b3df:	83 c4 10             	add    esp,0x10
c001b3e2:	85 c0                	test   eax,eax
c001b3e4:	0f 95 c0             	setne  al
c001b3e7:	31 d2                	xor    edx,edx
c001b3e9:	0f b6 c0             	movzx  eax,al
c001b3ec:	f7 d8                	neg    eax
c001b3ee:	83 d2 00             	adc    edx,0x0
c001b3f1:	83 c4 08             	add    esp,0x8
c001b3f4:	f7 da                	neg    edx
c001b3f6:	5b                   	pop    ebx
c001b3f7:	c3                   	ret    
c001b3f8:	83 ec 08             	sub    esp,0x8
c001b3fb:	50                   	push   eax
c001b3fc:	68 81 b6 02 c0       	push   0xc002b681
c001b401:	e8 0f 77 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c001b406:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b409:	83 c4 10             	add    esp,0x10
c001b40c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b412:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b419:	31 d2                	xor    edx,edx
c001b41b:	31 c0                	xor    eax,eax
c001b41d:	83 c4 08             	add    esp,0x8
c001b420:	5b                   	pop    ebx
c001b421:	c3                   	ret    
c001b422:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b427:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b42c:	83 c4 08             	add    esp,0x8
c001b42f:	5b                   	pop    ebx
c001b430:	c3                   	ret    

c001b431 <sysCallSize(regs*)>:
c001b431:	53                   	push   ebx
c001b432:	83 ec 18             	sub    esp,0x18
c001b435:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b439:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b43c:	83 f8 02             	cmp    eax,0x2
c001b43f:	76 64                	jbe    c001b4a5 <sysCallSize(regs*)+0x74>
c001b441:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b446:	77 33                	ja     c001b47b <sysCallSize(regs*)+0x4a>
c001b448:	83 ec 0c             	sub    esp,0xc
c001b44b:	50                   	push   eax
c001b44c:	e8 7e 65 ff ff       	call   c00119cf <getFromFileDescriptor(int)>
c001b451:	83 c4 0c             	add    esp,0xc
c001b454:	8d 54 24 13          	lea    edx,[esp+0x13]
c001b458:	52                   	push   edx
c001b459:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001b45c:	50                   	push   eax
c001b45d:	e8 1c 7f ff ff       	call   c001337e <File::stat(unsigned long long*, bool*)>
c001b462:	83 c4 10             	add    esp,0x10
c001b465:	85 c0                	test   eax,eax
c001b467:	0f 95 c0             	setne  al
c001b46a:	31 d2                	xor    edx,edx
c001b46c:	0f b6 c0             	movzx  eax,al
c001b46f:	f7 d8                	neg    eax
c001b471:	83 d2 00             	adc    edx,0x0
c001b474:	83 c4 18             	add    esp,0x18
c001b477:	f7 da                	neg    edx
c001b479:	5b                   	pop    ebx
c001b47a:	c3                   	ret    
c001b47b:	83 ec 08             	sub    esp,0x8
c001b47e:	50                   	push   eax
c001b47f:	68 9b b6 02 c0       	push   0xc002b69b
c001b484:	e8 8c 76 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c001b489:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b48c:	83 c4 10             	add    esp,0x10
c001b48f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b495:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b49c:	31 d2                	xor    edx,edx
c001b49e:	31 c0                	xor    eax,eax
c001b4a0:	83 c4 18             	add    esp,0x18
c001b4a3:	5b                   	pop    ebx
c001b4a4:	c3                   	ret    
c001b4a5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b4aa:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b4af:	83 c4 18             	add    esp,0x18
c001b4b2:	5b                   	pop    ebx
c001b4b3:	c3                   	ret    

c001b4b4 <sysCallSizeFromFilename(regs*)>:
c001b4b4:	57                   	push   edi
c001b4b5:	56                   	push   esi
c001b4b6:	53                   	push   ebx
c001b4b7:	83 ec 20             	sub    esp,0x20
c001b4ba:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001b4be:	8b 5f 20             	mov    ebx,DWORD PTR [edi+0x20]
c001b4c1:	83 fb 02             	cmp    ebx,0x2
c001b4c4:	0f 86 99 00 00 00    	jbe    c001b563 <sysCallSizeFromFilename(regs*)+0xaf>
c001b4ca:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001b4d0:	77 65                	ja     c001b537 <sysCallSizeFromFilename(regs*)+0x83>
c001b4d2:	83 ec 0c             	sub    esp,0xc
c001b4d5:	68 14 01 00 00       	push   0x114
c001b4da:	e8 67 43 ff ff       	call   c000f846 <malloc>
c001b4df:	83 c4 0c             	add    esp,0xc
c001b4e2:	89 c6                	mov    esi,eax
c001b4e4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b4e9:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b4ec:	53                   	push   ebx
c001b4ed:	56                   	push   esi
c001b4ee:	e8 7b 7b ff ff       	call   c001306e <File::File(char const*, Process*)>
c001b4f3:	83 c4 0c             	add    esp,0xc
c001b4f6:	8d 44 24 23          	lea    eax,[esp+0x23]
c001b4fa:	50                   	push   eax
c001b4fb:	ff 77 28             	push   DWORD PTR [edi+0x28]
c001b4fe:	56                   	push   esi
c001b4ff:	e8 7a 7e ff ff       	call   c001337e <File::stat(unsigned long long*, bool*)>
c001b504:	83 c4 10             	add    esp,0x10
c001b507:	85 f6                	test   esi,esi
c001b509:	74 14                	je     c001b51f <sysCallSizeFromFilename(regs*)+0x6b>
c001b50b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b50f:	8b 16                	mov    edx,DWORD PTR [esi]
c001b511:	83 ec 0c             	sub    esp,0xc
c001b514:	56                   	push   esi
c001b515:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001b518:	83 c4 10             	add    esp,0x10
c001b51b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b51f:	85 c0                	test   eax,eax
c001b521:	0f 95 c0             	setne  al
c001b524:	31 d2                	xor    edx,edx
c001b526:	0f b6 c0             	movzx  eax,al
c001b529:	f7 d8                	neg    eax
c001b52b:	83 d2 00             	adc    edx,0x0
c001b52e:	83 c4 20             	add    esp,0x20
c001b531:	f7 da                	neg    edx
c001b533:	5b                   	pop    ebx
c001b534:	5e                   	pop    esi
c001b535:	5f                   	pop    edi
c001b536:	c3                   	ret    
c001b537:	83 ec 08             	sub    esp,0x8
c001b53a:	53                   	push   ebx
c001b53b:	68 9b b6 02 c0       	push   0xc002b69b
c001b540:	e8 d0 75 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c001b545:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c001b548:	83 c4 10             	add    esp,0x10
c001b54b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b551:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b558:	31 d2                	xor    edx,edx
c001b55a:	83 c4 20             	add    esp,0x20
c001b55d:	31 c0                	xor    eax,eax
c001b55f:	5b                   	pop    ebx
c001b560:	5e                   	pop    esi
c001b561:	5f                   	pop    edi
c001b562:	c3                   	ret    
c001b563:	83 c4 20             	add    esp,0x20
c001b566:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b56b:	5b                   	pop    ebx
c001b56c:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b571:	5e                   	pop    esi
c001b572:	5f                   	pop    edi
c001b573:	c3                   	ret    

c001b574 <sysCallClose(regs*)>:
c001b574:	53                   	push   ebx
c001b575:	83 ec 08             	sub    esp,0x8
c001b578:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b57c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b57f:	83 f8 02             	cmp    eax,0x2
c001b582:	76 50                	jbe    c001b5d4 <sysCallClose(regs*)+0x60>
c001b584:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001b589:	74 58                	je     c001b5e3 <sysCallClose(regs*)+0x6f>
c001b58b:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b590:	74 60                	je     c001b5f2 <sysCallClose(regs*)+0x7e>
c001b592:	77 2f                	ja     c001b5c3 <sysCallClose(regs*)+0x4f>
c001b594:	83 ec 0c             	sub    esp,0xc
c001b597:	50                   	push   eax
c001b598:	e8 32 64 ff ff       	call   c00119cf <getFromFileDescriptor(int)>
c001b59d:	89 c3                	mov    ebx,eax
c001b59f:	89 04 24             	mov    DWORD PTR [esp],eax
c001b5a2:	e8 89 7b ff ff       	call   c0013130 <File::close()>
c001b5a7:	83 c4 10             	add    esp,0x10
c001b5aa:	85 db                	test   ebx,ebx
c001b5ac:	74 0c                	je     c001b5ba <sysCallClose(regs*)+0x46>
c001b5ae:	83 ec 0c             	sub    esp,0xc
c001b5b1:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b5b3:	53                   	push   ebx
c001b5b4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b5b7:	83 c4 10             	add    esp,0x10
c001b5ba:	31 c0                	xor    eax,eax
c001b5bc:	31 d2                	xor    edx,edx
c001b5be:	83 c4 08             	add    esp,0x8
c001b5c1:	5b                   	pop    ebx
c001b5c2:	c3                   	ret    
c001b5c3:	83 ec 08             	sub    esp,0x8
c001b5c6:	50                   	push   eax
c001b5c7:	68 1c b6 02 c0       	push   0xc002b61c
c001b5cc:	e8 44 75 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c001b5d1:	83 c4 10             	add    esp,0x10
c001b5d4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b5d9:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b5de:	83 c4 08             	add    esp,0x8
c001b5e1:	5b                   	pop    ebx
c001b5e2:	c3                   	ret    
c001b5e3:	83 ec 0c             	sub    esp,0xc
c001b5e6:	68 b6 b6 02 c0       	push   0xc002b6b6
c001b5eb:	e8 25 75 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c001b5f0:	eb c5                	jmp    c001b5b7 <sysCallClose(regs*)+0x43>
c001b5f2:	83 ec 0c             	sub    esp,0xc
c001b5f5:	68 c4 b6 02 c0       	push   0xc002b6c4
c001b5fa:	eb ef                	jmp    c001b5eb <sysCallClose(regs*)+0x77>

c001b5fc <sysCallOpenDir(regs*)>:
c001b5fc:	56                   	push   esi
c001b5fd:	53                   	push   ebx
c001b5fe:	53                   	push   ebx
c001b5ff:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b603:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c001b606:	85 f6                	test   esi,esi
c001b608:	74 59                	je     c001b663 <sysCallOpenDir(regs*)+0x67>
c001b60a:	83 ec 0c             	sub    esp,0xc
c001b60d:	68 14 01 00 00       	push   0x114
c001b612:	e8 2f 42 ff ff       	call   c000f846 <malloc>
c001b617:	83 c4 0c             	add    esp,0xc
c001b61a:	89 c6                	mov    esi,eax
c001b61c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b621:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b624:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b627:	56                   	push   esi
c001b628:	e8 ed 7e ff ff       	call   c001351a <Directory::Directory(char const*, Process*)>
c001b62d:	83 c4 10             	add    esp,0x10
c001b630:	85 f6                	test   esi,esi
c001b632:	74 2f                	je     c001b663 <sysCallOpenDir(regs*)+0x67>
c001b634:	83 ec 0c             	sub    esp,0xc
c001b637:	56                   	push   esi
c001b638:	e8 41 7f ff ff       	call   c001357e <Directory::open()>
c001b63d:	83 c4 10             	add    esp,0x10
c001b640:	85 c0                	test   eax,eax
c001b642:	75 1f                	jne    c001b663 <sysCallOpenDir(regs*)+0x67>
c001b644:	83 ec 0c             	sub    esp,0xc
c001b647:	56                   	push   esi
c001b648:	e8 8d 60 ff ff       	call   c00116da <UnixFile::getFileDescriptor()>
c001b64d:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001b650:	83 c4 10             	add    esp,0x10
c001b653:	89 02                	mov    DWORD PTR [edx],eax
c001b655:	c1 f8 1f             	sar    eax,0x1f
c001b658:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001b65b:	31 c0                	xor    eax,eax
c001b65d:	59                   	pop    ecx
c001b65e:	31 d2                	xor    edx,edx
c001b660:	5b                   	pop    ebx
c001b661:	5e                   	pop    esi
c001b662:	c3                   	ret    
c001b663:	59                   	pop    ecx
c001b664:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b669:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b66e:	5b                   	pop    ebx
c001b66f:	5e                   	pop    esi
c001b670:	c3                   	ret    

c001b671 <sysCallCloseDir(regs*)>:
c001b671:	53                   	push   ebx
c001b672:	83 ec 08             	sub    esp,0x8
c001b675:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b679:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b67c:	83 f8 02             	cmp    eax,0x2
c001b67f:	76 47                	jbe    c001b6c8 <sysCallCloseDir(regs*)+0x57>
c001b681:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b686:	77 2f                	ja     c001b6b7 <sysCallCloseDir(regs*)+0x46>
c001b688:	83 ec 0c             	sub    esp,0xc
c001b68b:	50                   	push   eax
c001b68c:	e8 3e 63 ff ff       	call   c00119cf <getFromFileDescriptor(int)>
c001b691:	89 c3                	mov    ebx,eax
c001b693:	89 04 24             	mov    DWORD PTR [esp],eax
c001b696:	e8 3f 7f ff ff       	call   c00135da <Directory::close()>
c001b69b:	83 c4 10             	add    esp,0x10
c001b69e:	85 db                	test   ebx,ebx
c001b6a0:	74 0c                	je     c001b6ae <sysCallCloseDir(regs*)+0x3d>
c001b6a2:	83 ec 0c             	sub    esp,0xc
c001b6a5:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b6a7:	53                   	push   ebx
c001b6a8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b6ab:	83 c4 10             	add    esp,0x10
c001b6ae:	31 c0                	xor    eax,eax
c001b6b0:	31 d2                	xor    edx,edx
c001b6b2:	83 c4 08             	add    esp,0x8
c001b6b5:	5b                   	pop    ebx
c001b6b6:	c3                   	ret    
c001b6b7:	83 ec 08             	sub    esp,0x8
c001b6ba:	50                   	push   eax
c001b6bb:	68 44 b6 02 c0       	push   0xc002b644
c001b6c0:	e8 50 74 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c001b6c5:	83 c4 10             	add    esp,0x10
c001b6c8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b6cd:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b6d2:	83 c4 08             	add    esp,0x8
c001b6d5:	5b                   	pop    ebx
c001b6d6:	c3                   	ret    

c001b6d7 <sysCallMakeDir(regs*)>:
c001b6d7:	56                   	push   esi
c001b6d8:	53                   	push   ebx
c001b6d9:	83 ec 10             	sub    esp,0x10
c001b6dc:	68 14 01 00 00       	push   0x114
c001b6e1:	e8 60 41 ff ff       	call   c000f846 <malloc>
c001b6e6:	83 c4 0c             	add    esp,0xc
c001b6e9:	89 c3                	mov    ebx,eax
c001b6eb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b6f0:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b6f3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b6f7:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b6fa:	53                   	push   ebx
c001b6fb:	e8 1a 7e ff ff       	call   c001351a <Directory::Directory(char const*, Process*)>
c001b700:	83 c4 10             	add    esp,0x10
c001b703:	85 db                	test   ebx,ebx
c001b705:	74 32                	je     c001b739 <sysCallMakeDir(regs*)+0x62>
c001b707:	83 ec 0c             	sub    esp,0xc
c001b70a:	53                   	push   ebx
c001b70b:	e8 4e 80 ff ff       	call   c001375e <Directory::create()>
c001b710:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b713:	89 c6                	mov    esi,eax
c001b715:	e8 c0 7e ff ff       	call   c00135da <Directory::close()>
c001b71a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b71c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b71f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b722:	83 c4 10             	add    esp,0x10
c001b725:	31 c0                	xor    eax,eax
c001b727:	59                   	pop    ecx
c001b728:	85 f6                	test   esi,esi
c001b72a:	5b                   	pop    ebx
c001b72b:	0f 95 c0             	setne  al
c001b72e:	5e                   	pop    esi
c001b72f:	31 d2                	xor    edx,edx
c001b731:	f7 d8                	neg    eax
c001b733:	83 d2 00             	adc    edx,0x0
c001b736:	f7 da                	neg    edx
c001b738:	c3                   	ret    
c001b739:	59                   	pop    ecx
c001b73a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b73f:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b744:	5b                   	pop    ebx
c001b745:	5e                   	pop    esi
c001b746:	c3                   	ret    

c001b747 <sysCallWait(regs*)>:
c001b747:	83 ec 10             	sub    esp,0x10
c001b74a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b74e:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001b751:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b754:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b757:	e8 19 24 00 00       	call   c001db75 <waitTask(int, int*, int)>
c001b75c:	83 c4 1c             	add    esp,0x1c
c001b75f:	99                   	cdq    
c001b760:	c3                   	ret    

c001b761 <sysCallNotImpl(regs*)>:
c001b761:	83 ec 18             	sub    esp,0x18
c001b764:	68 d2 b6 02 c0       	push   0xc002b6d2
c001b769:	e8 c1 e8 ff ff       	call   c001a02f <Krnl::panic(char const*)>
c001b76e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b773:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b778:	83 c4 1c             	add    esp,0x1c
c001b77b:	c3                   	ret    

c001b77c <sysPanic(regs*)>:
c001b77c:	83 ec 18             	sub    esp,0x18
c001b77f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b783:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b786:	e8 a4 e8 ff ff       	call   c001a02f <Krnl::panic(char const*)>
c001b78b:	c7 04 24 ec b6 02 c0 	mov    DWORD PTR [esp],0xc002b6ec
c001b792:	e8 98 e8 ff ff       	call   c001a02f <Krnl::panic(char const*)>
c001b797:	b8 01 00 00 00       	mov    eax,0x1
c001b79c:	31 d2                	xor    edx,edx
c001b79e:	83 c4 1c             	add    esp,0x1c
c001b7a1:	c3                   	ret    

c001b7a2 <sysCallRmdir(regs*)>:
c001b7a2:	56                   	push   esi
c001b7a3:	53                   	push   ebx
c001b7a4:	83 ec 20             	sub    esp,0x20
c001b7a7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b7ab:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001b7ae:	68 14 01 00 00       	push   0x114
c001b7b3:	e8 8e 40 ff ff       	call   c000f846 <malloc>
c001b7b8:	83 c4 0c             	add    esp,0xc
c001b7bb:	89 c3                	mov    ebx,eax
c001b7bd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b7c2:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b7c5:	56                   	push   esi
c001b7c6:	53                   	push   ebx
c001b7c7:	e8 a2 78 ff ff       	call   c001306e <File::File(char const*, Process*)>
c001b7cc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b7cf:	e8 76 7a ff ff       	call   c001324a <File::unlink()>
c001b7d4:	83 c4 10             	add    esp,0x10
c001b7d7:	85 db                	test   ebx,ebx
c001b7d9:	74 14                	je     c001b7ef <sysCallRmdir(regs*)+0x4d>
c001b7db:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b7df:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b7e1:	83 ec 0c             	sub    esp,0xc
c001b7e4:	53                   	push   ebx
c001b7e5:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001b7e8:	83 c4 10             	add    esp,0x10
c001b7eb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b7ef:	85 c0                	test   eax,eax
c001b7f1:	0f 95 c0             	setne  al
c001b7f4:	31 d2                	xor    edx,edx
c001b7f6:	0f b6 c0             	movzx  eax,al
c001b7f9:	f7 d8                	neg    eax
c001b7fb:	83 d2 00             	adc    edx,0x0
c001b7fe:	83 c4 14             	add    esp,0x14
c001b801:	f7 da                	neg    edx
c001b803:	5b                   	pop    ebx
c001b804:	5e                   	pop    esi
c001b805:	c3                   	ret    

c001b806 <sysCallUnlink(regs*)>:
c001b806:	56                   	push   esi
c001b807:	53                   	push   ebx
c001b808:	83 ec 20             	sub    esp,0x20
c001b80b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b80f:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001b812:	68 14 01 00 00       	push   0x114
c001b817:	e8 2a 40 ff ff       	call   c000f846 <malloc>
c001b81c:	83 c4 0c             	add    esp,0xc
c001b81f:	89 c3                	mov    ebx,eax
c001b821:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b826:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b829:	56                   	push   esi
c001b82a:	53                   	push   ebx
c001b82b:	e8 3e 78 ff ff       	call   c001306e <File::File(char const*, Process*)>
c001b830:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b833:	e8 12 7a ff ff       	call   c001324a <File::unlink()>
c001b838:	83 c4 10             	add    esp,0x10
c001b83b:	85 db                	test   ebx,ebx
c001b83d:	74 14                	je     c001b853 <sysCallUnlink(regs*)+0x4d>
c001b83f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b843:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b845:	83 ec 0c             	sub    esp,0xc
c001b848:	53                   	push   ebx
c001b849:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001b84c:	83 c4 10             	add    esp,0x10
c001b84f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b853:	85 c0                	test   eax,eax
c001b855:	0f 95 c0             	setne  al
c001b858:	31 d2                	xor    edx,edx
c001b85a:	0f b6 c0             	movzx  eax,al
c001b85d:	f7 d8                	neg    eax
c001b85f:	83 d2 00             	adc    edx,0x0
c001b862:	83 c4 14             	add    esp,0x14
c001b865:	f7 da                	neg    edx
c001b867:	5b                   	pop    ebx
c001b868:	5e                   	pop    esi
c001b869:	c3                   	ret    

c001b86a <sysCallGetArgv(regs*)>:
c001b86a:	83 ec 0c             	sub    esp,0xc
c001b86d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b871:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001b874:	85 c0                	test   eax,eax
c001b876:	78 2b                	js     c001b8a3 <sysCallGetArgv(regs*)+0x39>
c001b878:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001b87e:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001b881:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c001b887:	7d 1a                	jge    c001b8a3 <sysCallGetArgv(regs*)+0x39>
c001b889:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c001b890:	85 c0                	test   eax,eax
c001b892:	74 17                	je     c001b8ab <sysCallGetArgv(regs*)+0x41>
c001b894:	83 ec 08             	sub    esp,0x8
c001b897:	50                   	push   eax
c001b898:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001b89b:	e8 94 4f fe ff       	call   c0000834 <strcpy>
c001b8a0:	83 c4 10             	add    esp,0x10
c001b8a3:	31 c0                	xor    eax,eax
c001b8a5:	31 d2                	xor    edx,edx
c001b8a7:	83 c4 0c             	add    esp,0xc
c001b8aa:	c3                   	ret    
c001b8ab:	b8 01 00 00 00       	mov    eax,0x1
c001b8b0:	31 d2                	xor    edx,edx
c001b8b2:	83 c4 0c             	add    esp,0xc
c001b8b5:	c3                   	ret    

c001b8b6 <sysCallTTYName(regs*)>:
c001b8b6:	56                   	push   esi
c001b8b7:	53                   	push   ebx
c001b8b8:	53                   	push   ebx
c001b8b9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b8bd:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001b8c0:	85 c0                	test   eax,eax
c001b8c2:	74 5f                	je     c001b923 <sysCallTTYName(regs*)+0x6d>
c001b8c4:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b8c7:	83 f8 02             	cmp    eax,0x2
c001b8ca:	77 3e                	ja     c001b90a <sysCallTTYName(regs*)+0x54>
c001b8cc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b8d1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b8d4:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001b8da:	85 db                	test   ebx,ebx
c001b8dc:	74 45                	je     c001b923 <sysCallTTYName(regs*)+0x6d>
c001b8de:	83 ec 0c             	sub    esp,0xc
c001b8e1:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b8e3:	53                   	push   ebx
c001b8e4:	ff 10                	call   DWORD PTR [eax]
c001b8e6:	83 c4 10             	add    esp,0x10
c001b8e9:	84 c0                	test   al,al
c001b8eb:	74 41                	je     c001b92e <sysCallTTYName(regs*)+0x78>
c001b8ed:	83 ec 08             	sub    esp,0x8
c001b8f0:	81 c3 1e 10 00 00    	add    ebx,0x101e
c001b8f6:	53                   	push   ebx
c001b8f7:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001b8fa:	e8 35 4f fe ff       	call   c0000834 <strcpy>
c001b8ff:	83 c4 10             	add    esp,0x10
c001b902:	31 c0                	xor    eax,eax
c001b904:	59                   	pop    ecx
c001b905:	31 d2                	xor    edx,edx
c001b907:	5b                   	pop    ebx
c001b908:	5e                   	pop    esi
c001b909:	c3                   	ret    
c001b90a:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001b90f:	74 bb                	je     c001b8cc <sysCallTTYName(regs*)+0x16>
c001b911:	83 ec 0c             	sub    esp,0xc
c001b914:	50                   	push   eax
c001b915:	e8 b5 60 ff ff       	call   c00119cf <getFromFileDescriptor(int)>
c001b91a:	83 c4 10             	add    esp,0x10
c001b91d:	89 c3                	mov    ebx,eax
c001b91f:	85 db                	test   ebx,ebx
c001b921:	75 bb                	jne    c001b8de <sysCallTTYName(regs*)+0x28>
c001b923:	59                   	pop    ecx
c001b924:	b8 01 00 00 00       	mov    eax,0x1
c001b929:	31 d2                	xor    edx,edx
c001b92b:	5b                   	pop    ebx
c001b92c:	5e                   	pop    esi
c001b92d:	c3                   	ret    
c001b92e:	59                   	pop    ecx
c001b92f:	b8 02 00 00 00       	mov    eax,0x2
c001b934:	31 d2                	xor    edx,edx
c001b936:	5b                   	pop    ebx
c001b937:	5e                   	pop    esi
c001b938:	c3                   	ret    

c001b939 <sysCallUSleep(regs*)>:
c001b939:	83 ec 14             	sub    esp,0x14
c001b93c:	b8 e8 03 00 00       	mov    eax,0x3e8
c001b941:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b945:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c001b94c:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c001b94f:	01 ca                	add    edx,ecx
c001b951:	52                   	push   edx
c001b952:	50                   	push   eax
c001b953:	e8 b6 22 00 00       	call   c001dc0e <nanoSleep(unsigned long long)>
c001b958:	31 c0                	xor    eax,eax
c001b95a:	31 d2                	xor    edx,edx
c001b95c:	83 c4 1c             	add    esp,0x1c
c001b95f:	c3                   	ret    

c001b960 <sysCallSpawn(regs*)>:
c001b960:	56                   	push   esi
c001b961:	53                   	push   ebx
c001b962:	53                   	push   ebx
c001b963:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b967:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001b96a:	85 f6                	test   esi,esi
c001b96c:	75 08                	jne    c001b976 <sysCallSpawn(regs*)+0x16>
c001b96e:	59                   	pop    ecx
c001b96f:	31 c0                	xor    eax,eax
c001b971:	31 d2                	xor    edx,edx
c001b973:	5b                   	pop    ebx
c001b974:	5e                   	pop    esi
c001b975:	c3                   	ret    
c001b976:	83 ec 0c             	sub    esp,0xc
c001b979:	68 3f 07 00 00       	push   0x73f
c001b97e:	e8 c3 3e ff ff       	call   c000f846 <malloc>
c001b983:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001b986:	89 c6                	mov    esi,eax
c001b988:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b98d:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b990:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b993:	56                   	push   esi
c001b994:	e8 75 19 00 00       	call   c001d30e <Process::Process(char const*, Process*, char**)>
c001b999:	83 c4 20             	add    esp,0x20
c001b99c:	80 be 3e 07 00 00 00 	cmp    BYTE PTR [esi+0x73e],0x0
c001b9a3:	75 c9                	jne    c001b96e <sysCallSpawn(regs*)+0xe>
c001b9a5:	83 ec 0c             	sub    esp,0xc
c001b9a8:	56                   	push   esi
c001b9a9:	e8 26 1f 00 00       	call   c001d8d4 <Process::createUserThread()>
c001b9ae:	8b 06                	mov    eax,DWORD PTR [esi]
c001b9b0:	83 c4 10             	add    esp,0x10
c001b9b3:	99                   	cdq    
c001b9b4:	59                   	pop    ecx
c001b9b5:	5b                   	pop    ebx
c001b9b6:	5e                   	pop    esi
c001b9b7:	c3                   	ret    

c001b9b8 <sysCallGetEnv(regs*)>:
c001b9b8:	57                   	push   edi
c001b9b9:	56                   	push   esi
c001b9ba:	53                   	push   ebx
c001b9bb:	83 ec 1c             	sub    esp,0x1c
c001b9be:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001b9c2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b9c7:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c001b9ca:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001b9cd:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b9d0:	e8 76 e5 ff ff       	call   c0019f4b <Krnl::getProcessTotalEnvCount(Process*)>
c001b9d5:	83 c4 10             	add    esp,0x10
c001b9d8:	39 c7                	cmp    edi,eax
c001b9da:	7c 14                	jl     c001b9f0 <sysCallGetEnv(regs*)+0x38>
c001b9dc:	85 f6                	test   esi,esi
c001b9de:	75 0b                	jne    c001b9eb <sysCallGetEnv(regs*)+0x33>
c001b9e0:	83 c4 10             	add    esp,0x10
c001b9e3:	31 c0                	xor    eax,eax
c001b9e5:	5b                   	pop    ebx
c001b9e6:	31 d2                	xor    edx,edx
c001b9e8:	5e                   	pop    esi
c001b9e9:	5f                   	pop    edi
c001b9ea:	c3                   	ret    
c001b9eb:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001b9ee:	eb f0                	jmp    c001b9e0 <sysCallGetEnv(regs*)+0x28>
c001b9f0:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b9f4:	52                   	push   edx
c001b9f5:	57                   	push   edi
c001b9f6:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001b9fc:	ff 72 40             	push   DWORD PTR [edx+0x40]
c001b9ff:	50                   	push   eax
c001ba00:	e8 66 e5 ff ff       	call   c0019f6b <Krnl::getProcessEnvPair(Process*, int)>
c001ba05:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001ba08:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ba0c:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001ba10:	83 c4 0c             	add    esp,0xc
c001ba13:	85 c9                	test   ecx,ecx
c001ba15:	75 23                	jne    c001ba3a <sysCallGetEnv(regs*)+0x82>
c001ba17:	83 ec 0c             	sub    esp,0xc
c001ba1a:	50                   	push   eax
c001ba1b:	e8 74 4d fe ff       	call   c0000794 <strlen>
c001ba20:	89 3c 24             	mov    DWORD PTR [esp],edi
c001ba23:	89 c3                	mov    ebx,eax
c001ba25:	e8 6a 4d fe ff       	call   c0000794 <strlen>
c001ba2a:	83 c4 10             	add    esp,0x10
c001ba2d:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001ba31:	83 c4 10             	add    esp,0x10
c001ba34:	31 d2                	xor    edx,edx
c001ba36:	5b                   	pop    ebx
c001ba37:	5e                   	pop    esi
c001ba38:	5f                   	pop    edi
c001ba39:	c3                   	ret    
c001ba3a:	83 ec 08             	sub    esp,0x8
c001ba3d:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001ba40:	50                   	push   eax
c001ba41:	56                   	push   esi
c001ba42:	e8 ed 4d fe ff       	call   c0000834 <strcpy>
c001ba47:	58                   	pop    eax
c001ba48:	5a                   	pop    edx
c001ba49:	68 fb b6 02 c0       	push   0xc002b6fb
c001ba4e:	56                   	push   esi
c001ba4f:	e8 20 4f fe ff       	call   c0000974 <strcat>
c001ba54:	59                   	pop    ecx
c001ba55:	5b                   	pop    ebx
c001ba56:	57                   	push   edi
c001ba57:	56                   	push   esi
c001ba58:	e8 17 4f fe ff       	call   c0000974 <strcat>
c001ba5d:	83 c4 10             	add    esp,0x10
c001ba60:	e9 7b ff ff ff       	jmp    c001b9e0 <sysCallGetEnv(regs*)+0x28>

c001ba65 <sysAppSettings(regs*)>:
c001ba65:	53                   	push   ebx
c001ba66:	83 ec 08             	sub    esp,0x8
c001ba69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba6d:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001ba70:	8b 83 00 01 00 00    	mov    eax,DWORD PTR [ebx+0x100]
c001ba76:	25 e0 1f 00 00       	and    eax,0x1fe0
c001ba7b:	66 3d c0 09          	cmp    ax,0x9c0
c001ba7f:	75 2f                	jne    c001bab0 <sysAppSettings(regs*)+0x4b>
c001ba81:	8a 83 00 01 00 00    	mov    al,BYTE PTR [ebx+0x100]
c001ba87:	83 e0 1f             	and    eax,0x1f
c001ba8a:	3c 01                	cmp    al,0x1
c001ba8c:	74 2e                	je     c001babc <sysAppSettings(regs*)+0x57>
c001ba8e:	3c 07                	cmp    al,0x7
c001ba90:	0f 84 bd 00 00 00    	je     c001bb53 <sysAppSettings(regs*)+0xee>
c001ba96:	84 c0                	test   al,al
c001ba98:	0f 84 dc 00 00 00    	je     c001bb7a <sysAppSettings(regs*)+0x115>
c001ba9e:	3c 08                	cmp    al,0x8
c001baa0:	74 6d                	je     c001bb0f <sysAppSettings(regs*)+0xaa>
c001baa2:	0f b6 c0             	movzx  eax,al
c001baa5:	83 c4 08             	add    esp,0x8
c001baa8:	05 e8 03 00 00       	add    eax,0x3e8
c001baad:	5b                   	pop    ebx
c001baae:	99                   	cdq    
c001baaf:	c3                   	ret    
c001bab0:	b8 01 00 00 00       	mov    eax,0x1
c001bab5:	31 d2                	xor    edx,edx
c001bab7:	83 c4 08             	add    esp,0x8
c001baba:	5b                   	pop    ebx
c001babb:	c3                   	ret    
c001babc:	51                   	push   ecx
c001babd:	68 00 01 00 00       	push   0x100
c001bac2:	6a 00                	push   0x0
c001bac4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bac9:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bacc:	83 c0 0c             	add    eax,0xc
c001bacf:	50                   	push   eax
c001bad0:	e8 a3 4c fe ff       	call   c0000778 <memset>
c001bad5:	83 c4 0c             	add    esp,0xc
c001bad8:	68 ff 00 00 00       	push   0xff
c001badd:	53                   	push   ebx
c001bade:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bae3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bae6:	83 c0 0c             	add    eax,0xc
c001bae9:	50                   	push   eax
c001baea:	e8 55 4c fe ff       	call   c0000744 <memcpy>
c001baef:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001baf4:	5b                   	pop    ebx
c001baf5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001baf8:	5a                   	pop    edx
c001baf9:	8d 50 0c             	lea    edx,[eax+0xc]
c001bafc:	52                   	push   edx
c001bafd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001bb03:	e8 42 50 ff ff       	call   c0010b4a <VgaText::setTitle(char*)>
c001bb08:	83 c4 10             	add    esp,0x10
c001bb0b:	31 c0                	xor    eax,eax
c001bb0d:	eb a6                	jmp    c001bab5 <sysAppSettings(regs*)+0x50>
c001bb0f:	83 ec 08             	sub    esp,0x8
c001bb12:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001bb18:	83 e0 0f             	and    eax,0xf
c001bb1b:	50                   	push   eax
c001bb1c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bb21:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bb24:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001bb2a:	e8 0b 50 ff ff       	call   c0010b3a <VgaText::setTitleColour(VgaColour)>
c001bb2f:	58                   	pop    eax
c001bb30:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001bb36:	5a                   	pop    edx
c001bb37:	c1 e8 04             	shr    eax,0x4
c001bb3a:	83 e0 0f             	and    eax,0xf
c001bb3d:	50                   	push   eax
c001bb3e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bb43:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bb46:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001bb4c:	e8 d9 4f ff ff       	call   c0010b2a <VgaText::setTitleTextColour(VgaColour)>
c001bb51:	eb b5                	jmp    c001bb08 <sysAppSettings(regs*)+0xa3>
c001bb53:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bb58:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bb5b:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001bb61:	8a 83 01 01 00 00    	mov    al,BYTE PTR [ebx+0x101]
c001bb67:	c0 e8 06             	shr    al,0x6
c001bb6a:	83 e0 01             	and    eax,0x1
c001bb6d:	88 82 1c 10 00 00    	mov    BYTE PTR [edx+0x101c],al
c001bb73:	31 c0                	xor    eax,eax
c001bb75:	e9 3b ff ff ff       	jmp    c001bab5 <sysAppSettings(regs*)+0x50>
c001bb7a:	b8 02 00 00 00       	mov    eax,0x2
c001bb7f:	e9 31 ff ff ff       	jmp    c001bab5 <sysAppSettings(regs*)+0x50>

c001bb84 <sysSetFatAttrib(regs*)>:
c001bb84:	57                   	push   edi
c001bb85:	56                   	push   esi
c001bb86:	53                   	push   ebx
c001bb87:	83 ec 1c             	sub    esp,0x1c
c001bb8a:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001bb8e:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001bb91:	68 14 01 00 00       	push   0x114
c001bb96:	e8 ab 3c ff ff       	call   c000f846 <malloc>
c001bb9b:	83 c4 0c             	add    esp,0xc
c001bb9e:	89 c3                	mov    ebx,eax
c001bba0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bba5:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bba8:	57                   	push   edi
c001bba9:	53                   	push   ebx
c001bbaa:	e8 bf 74 ff ff       	call   c001306e <File::File(char const*, Process*)>
c001bbaf:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001bbb2:	83 c4 0c             	add    esp,0xc
c001bbb5:	0f b6 d4             	movzx  edx,ah
c001bbb8:	0f b6 c0             	movzx  eax,al
c001bbbb:	52                   	push   edx
c001bbbc:	50                   	push   eax
c001bbbd:	53                   	push   ebx
c001bbbe:	e8 21 77 ff ff       	call   c00132e4 <File::chfatattr(unsigned char, unsigned char)>
c001bbc3:	83 c4 10             	add    esp,0x10
c001bbc6:	85 db                	test   ebx,ebx
c001bbc8:	74 14                	je     c001bbde <sysSetFatAttrib(regs*)+0x5a>
c001bbca:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bbce:	8b 13                	mov    edx,DWORD PTR [ebx]
c001bbd0:	83 ec 0c             	sub    esp,0xc
c001bbd3:	53                   	push   ebx
c001bbd4:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bbd7:	83 c4 10             	add    esp,0x10
c001bbda:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bbde:	85 c0                	test   eax,eax
c001bbe0:	0f 95 c0             	setne  al
c001bbe3:	31 d2                	xor    edx,edx
c001bbe5:	0f b6 c0             	movzx  eax,al
c001bbe8:	f7 d8                	neg    eax
c001bbea:	83 d2 00             	adc    edx,0x0
c001bbed:	83 c4 10             	add    esp,0x10
c001bbf0:	f7 da                	neg    edx
c001bbf2:	5b                   	pop    ebx
c001bbf3:	5e                   	pop    esi
c001bbf4:	5f                   	pop    edi
c001bbf5:	c3                   	ret    

c001bbf6 <sysPipe(regs*)>:
c001bbf6:	57                   	push   edi
c001bbf7:	56                   	push   esi
c001bbf8:	53                   	push   ebx
c001bbf9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bbfd:	83 ec 0c             	sub    esp,0xc
c001bc00:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001bc03:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001bc06:	6a 20                	push   0x20
c001bc08:	e8 39 3c ff ff       	call   c000f846 <malloc>
c001bc0d:	89 c3                	mov    ebx,eax
c001bc0f:	58                   	pop    eax
c001bc10:	5a                   	pop    edx
c001bc11:	68 00 50 00 00       	push   0x5000
c001bc16:	53                   	push   ebx
c001bc17:	e8 5e 48 ff ff       	call   c001047a <Pipe::Pipe(int)>
c001bc1c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bc1f:	e8 b6 5a ff ff       	call   c00116da <UnixFile::getFileDescriptor()>
c001bc24:	89 07                	mov    DWORD PTR [edi],eax
c001bc26:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bc29:	e8 ac 5a ff ff       	call   c00116da <UnixFile::getFileDescriptor()>
c001bc2e:	83 c4 10             	add    esp,0x10
c001bc31:	89 06                	mov    DWORD PTR [esi],eax
c001bc33:	31 d2                	xor    edx,edx
c001bc35:	5b                   	pop    ebx
c001bc36:	31 c0                	xor    eax,eax
c001bc38:	5e                   	pop    esi
c001bc39:	5f                   	pop    edi
c001bc3a:	c3                   	ret    

c001bc3b <sysGetUnixTime(regs*)>:
c001bc3b:	a1 68 db 02 c0       	mov    eax,ds:0xc002db68
c001bc40:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001bc46:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001bc4a:	e9 09 7e ff ff       	jmp    c0013a58 <Clock::timeInSecondsLocal()>

c001bc4f <string_ends_with(char const*, char const*)>:
c001bc4f:	57                   	push   edi
c001bc50:	56                   	push   esi
c001bc51:	53                   	push   ebx
c001bc52:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bc56:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001bc5a:	83 ec 0c             	sub    esp,0xc
c001bc5d:	53                   	push   ebx
c001bc5e:	e8 31 4b fe ff       	call   c0000794 <strlen>
c001bc63:	89 3c 24             	mov    DWORD PTR [esp],edi
c001bc66:	89 c6                	mov    esi,eax
c001bc68:	e8 27 4b fe ff       	call   c0000794 <strlen>
c001bc6d:	83 c4 10             	add    esp,0x10
c001bc70:	39 c6                	cmp    esi,eax
c001bc72:	7d 06                	jge    c001bc7a <string_ends_with(char const*, char const*)+0x2b>
c001bc74:	5b                   	pop    ebx
c001bc75:	31 c0                	xor    eax,eax
c001bc77:	5e                   	pop    esi
c001bc78:	5f                   	pop    edi
c001bc79:	c3                   	ret    
c001bc7a:	83 ec 08             	sub    esp,0x8
c001bc7d:	29 c6                	sub    esi,eax
c001bc7f:	57                   	push   edi
c001bc80:	01 f3                	add    ebx,esi
c001bc82:	53                   	push   ebx
c001bc83:	e8 38 4c fe ff       	call   c00008c0 <strcmp>
c001bc88:	83 c4 10             	add    esp,0x10
c001bc8b:	85 c0                	test   eax,eax
c001bc8d:	5b                   	pop    ebx
c001bc8e:	0f 94 c0             	sete   al
c001bc91:	5e                   	pop    esi
c001bc92:	0f b6 c0             	movzx  eax,al
c001bc95:	5f                   	pop    edi
c001bc96:	c3                   	ret    

c001bc97 <sysCallOpen(regs*)>:
c001bc97:	56                   	push   esi
c001bc98:	53                   	push   ebx
c001bc99:	81 ec 04 01 00 00    	sub    esp,0x104
c001bc9f:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001bca6:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001bca9:	85 c9                	test   ecx,ecx
c001bcab:	0f 84 b3 00 00 00    	je     c001bd64 <sysCallOpen(regs*)+0xcd>
c001bcb1:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001bcb4:	85 c0                	test   eax,eax
c001bcb6:	0f 84 a8 00 00 00    	je     c001bd64 <sysCallOpen(regs*)+0xcd>
c001bcbc:	52                   	push   edx
c001bcbd:	68 fd b6 02 c0       	push   0xc002b6fd
c001bcc2:	50                   	push   eax
c001bcc3:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001bcc7:	56                   	push   esi
c001bcc8:	e8 f7 71 ff ff       	call   c0012ec4 <Fs::standardiseFiles(char*, char const*, char const*)>
c001bccd:	89 34 24             	mov    DWORD PTR [esp],esi
c001bcd0:	e8 bf 4a fe ff       	call   c0000794 <strlen>
c001bcd5:	83 c4 10             	add    esp,0x10
c001bcd8:	48                   	dec    eax
c001bcd9:	74 1d                	je     c001bcf8 <sysCallOpen(regs*)+0x61>
c001bcdb:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001bcde:	eb 0f                	jmp    c001bcef <sysCallOpen(regs*)+0x58>
c001bce0:	80 fa 3a             	cmp    dl,0x3a
c001bce3:	74 0f                	je     c001bcf4 <sysCallOpen(regs*)+0x5d>
c001bce5:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001bce9:	48                   	dec    eax
c001bcea:	74 0c                	je     c001bcf8 <sysCallOpen(regs*)+0x61>
c001bcec:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001bcef:	80 fa 2e             	cmp    dl,0x2e
c001bcf2:	75 ec                	jne    c001bce0 <sysCallOpen(regs*)+0x49>
c001bcf4:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001bcf8:	83 ec 08             	sub    esp,0x8
c001bcfb:	68 01 b7 02 c0       	push   0xc002b701
c001bd00:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bd03:	e8 47 ff ff ff       	call   c001bc4f <string_ends_with(char const*, char const*)>
c001bd08:	83 c4 10             	add    esp,0x10
c001bd0b:	85 c0                	test   eax,eax
c001bd0d:	75 17                	jne    c001bd26 <sysCallOpen(regs*)+0x8f>
c001bd0f:	83 ec 08             	sub    esp,0x8
c001bd12:	68 22 b7 02 c0       	push   0xc002b722
c001bd17:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bd1a:	e8 30 ff ff ff       	call   c001bc4f <string_ends_with(char const*, char const*)>
c001bd1f:	83 c4 10             	add    esp,0x10
c001bd22:	85 c0                	test   eax,eax
c001bd24:	74 51                	je     c001bd77 <sysCallOpen(regs*)+0xe0>
c001bd26:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001bd29:	83 ec 08             	sub    esp,0x8
c001bd2c:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001bd32:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bd39:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001bd3c:	ff 30                	push   DWORD PTR [eax]
c001bd3e:	68 06 b7 02 c0       	push   0xc002b706
c001bd43:	e8 cd 6d ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c001bd48:	c7 04 24 15 b7 02 c0 	mov    DWORD PTR [esp],0xc002b715
c001bd4f:	e8 c1 6d ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c001bd54:	83 c4 10             	add    esp,0x10
c001bd57:	81 c4 04 01 00 00    	add    esp,0x104
c001bd5d:	31 c0                	xor    eax,eax
c001bd5f:	31 d2                	xor    edx,edx
c001bd61:	5b                   	pop    ebx
c001bd62:	5e                   	pop    esi
c001bd63:	c3                   	ret    
c001bd64:	81 c4 04 01 00 00    	add    esp,0x104
c001bd6a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bd6f:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bd74:	5b                   	pop    ebx
c001bd75:	5e                   	pop    esi
c001bd76:	c3                   	ret    
c001bd77:	83 ec 08             	sub    esp,0x8
c001bd7a:	68 02 b7 02 c0       	push   0xc002b702
c001bd7f:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bd82:	e8 39 4b fe ff       	call   c00008c0 <strcmp>
c001bd87:	83 c4 10             	add    esp,0x10
c001bd8a:	85 c0                	test   eax,eax
c001bd8c:	74 98                	je     c001bd26 <sysCallOpen(regs*)+0x8f>
c001bd8e:	83 ec 08             	sub    esp,0x8
c001bd91:	68 01 b7 02 c0       	push   0xc002b701
c001bd96:	56                   	push   esi
c001bd97:	e8 b3 fe ff ff       	call   c001bc4f <string_ends_with(char const*, char const*)>
c001bd9c:	83 c4 10             	add    esp,0x10
c001bd9f:	85 c0                	test   eax,eax
c001bda1:	75 83                	jne    c001bd26 <sysCallOpen(regs*)+0x8f>
c001bda3:	83 ec 08             	sub    esp,0x8
c001bda6:	68 27 b7 02 c0       	push   0xc002b727
c001bdab:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bdae:	e8 9c fe ff ff       	call   c001bc4f <string_ends_with(char const*, char const*)>
c001bdb3:	83 c4 10             	add    esp,0x10
c001bdb6:	85 c0                	test   eax,eax
c001bdb8:	0f 85 d9 00 00 00    	jne    c001be97 <sysCallOpen(regs*)+0x200>
c001bdbe:	83 ec 08             	sub    esp,0x8
c001bdc1:	68 2c b7 02 c0       	push   0xc002b72c
c001bdc6:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bdc9:	e8 81 fe ff ff       	call   c001bc4f <string_ends_with(char const*, char const*)>
c001bdce:	83 c4 10             	add    esp,0x10
c001bdd1:	85 c0                	test   eax,eax
c001bdd3:	0f 85 be 00 00 00    	jne    c001be97 <sysCallOpen(regs*)+0x200>
c001bdd9:	83 ec 08             	sub    esp,0x8
c001bddc:	68 28 b7 02 c0       	push   0xc002b728
c001bde1:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bde4:	e8 d7 4a fe ff       	call   c00008c0 <strcmp>
c001bde9:	83 c4 10             	add    esp,0x10
c001bdec:	85 c0                	test   eax,eax
c001bdee:	0f 84 a3 00 00 00    	je     c001be97 <sysCallOpen(regs*)+0x200>
c001bdf4:	83 ec 08             	sub    esp,0x8
c001bdf7:	68 27 b7 02 c0       	push   0xc002b727
c001bdfc:	56                   	push   esi
c001bdfd:	e8 4d fe ff ff       	call   c001bc4f <string_ends_with(char const*, char const*)>
c001be02:	83 c4 10             	add    esp,0x10
c001be05:	85 c0                	test   eax,eax
c001be07:	0f 85 8a 00 00 00    	jne    c001be97 <sysCallOpen(regs*)+0x200>
c001be0d:	83 ec 0c             	sub    esp,0xc
c001be10:	68 14 01 00 00       	push   0x114
c001be15:	e8 2c 3a ff ff       	call   c000f846 <malloc>
c001be1a:	83 c4 0c             	add    esp,0xc
c001be1d:	89 c6                	mov    esi,eax
c001be1f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001be24:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001be27:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001be2a:	56                   	push   esi
c001be2b:	e8 3e 72 ff ff       	call   c001306e <File::File(char const*, Process*)>
c001be30:	83 c4 10             	add    esp,0x10
c001be33:	85 f6                	test   esi,esi
c001be35:	0f 84 29 ff ff ff    	je     c001bd64 <sysCallOpen(regs*)+0xcd>
c001be3b:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001be3e:	0f b6 c2             	movzx  eax,dl
c001be41:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001be44:	89 d0                	mov    eax,edx
c001be46:	83 e0 01             	and    eax,0x1
c001be49:	f6 c2 02             	test   dl,0x2
c001be4c:	74 03                	je     c001be51 <sysCallOpen(regs*)+0x1ba>
c001be4e:	83 c8 02             	or     eax,0x2
c001be51:	f6 c2 04             	test   dl,0x4
c001be54:	74 03                	je     c001be59 <sysCallOpen(regs*)+0x1c2>
c001be56:	83 c8 04             	or     eax,0x4
c001be59:	f6 c2 08             	test   dl,0x8
c001be5c:	74 03                	je     c001be61 <sysCallOpen(regs*)+0x1ca>
c001be5e:	83 c8 0a             	or     eax,0xa
c001be61:	83 e2 10             	and    edx,0x10
c001be64:	74 03                	je     c001be69 <sysCallOpen(regs*)+0x1d2>
c001be66:	83 c8 12             	or     eax,0x12
c001be69:	83 ec 08             	sub    esp,0x8
c001be6c:	50                   	push   eax
c001be6d:	56                   	push   esi
c001be6e:	e8 5f 72 ff ff       	call   c00130d2 <File::open(FileOpenMode)>
c001be73:	83 c4 10             	add    esp,0x10
c001be76:	85 c0                	test   eax,eax
c001be78:	0f 85 e6 fe ff ff    	jne    c001bd64 <sysCallOpen(regs*)+0xcd>
c001be7e:	83 ec 0c             	sub    esp,0xc
c001be81:	56                   	push   esi
c001be82:	e8 53 58 ff ff       	call   c00116da <UnixFile::getFileDescriptor()>
c001be87:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001be8a:	89 02                	mov    DWORD PTR [edx],eax
c001be8c:	c1 f8 1f             	sar    eax,0x1f
c001be8f:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001be92:	e9 bd fe ff ff       	jmp    c001bd54 <sysCallOpen(regs*)+0xbd>
c001be97:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001be9a:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001bea0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bea7:	e9 ab fe ff ff       	jmp    c001bd57 <sysCallOpen(regs*)+0xc0>

c001beac <Sys::loadSyscalls()>:
c001beac:	c7 05 e0 06 03 c0 62 b0 01 c0 	mov    DWORD PTR ds:0xc00306e0,0xc001b062
c001beb6:	c7 05 e4 06 03 c0 c4 ac 01 c0 	mov    DWORD PTR ds:0xc00306e4,0xc001acc4
c001bec0:	c7 05 e8 06 03 c0 17 ae 01 c0 	mov    DWORD PTR ds:0xc00306e8,0xc001ae17
c001beca:	c7 05 ec 06 03 c0 fa af 01 c0 	mov    DWORD PTR ds:0xc00306ec,0xc001affa
c001bed4:	c7 05 f0 06 03 c0 af ad 01 c0 	mov    DWORD PTR ds:0xc00306f0,0xc001adaf
c001bede:	c7 05 f4 06 03 c0 fb ac 01 c0 	mov    DWORD PTR ds:0xc00306f4,0xc001acfb
c001bee8:	c7 05 f8 06 03 c0 dc ac 01 c0 	mov    DWORD PTR ds:0xc00306f8,0xc001acdc
c001bef2:	c7 05 fc 06 03 c0 6c ae 01 c0 	mov    DWORD PTR ds:0xc00306fc,0xc001ae6c
c001befc:	c7 05 04 07 03 c0 74 b5 01 c0 	mov    DWORD PTR ds:0xc0030704,0xc001b574
c001bf06:	c7 05 00 07 03 c0 97 bc 01 c0 	mov    DWORD PTR ds:0xc0030700,0xc001bc97
c001bf10:	c7 05 08 07 03 c0 fc b5 01 c0 	mov    DWORD PTR ds:0xc0030708,0xc001b5fc
c001bf1a:	c7 05 0c 07 03 c0 63 b2 01 c0 	mov    DWORD PTR ds:0xc003070c,0xc001b263
c001bf24:	c7 05 10 07 03 c0 9d b0 01 c0 	mov    DWORD PTR ds:0xc0030710,0xc001b09d
c001bf2e:	c7 05 14 07 03 c0 a2 b0 01 c0 	mov    DWORD PTR ds:0xc0030714,0xc001b0a2
c001bf38:	c7 05 18 07 03 c0 d7 b6 01 c0 	mov    DWORD PTR ds:0xc0030718,0xc001b6d7
c001bf42:	c7 05 1c 07 03 c0 71 b6 01 c0 	mov    DWORD PTR ds:0xc003071c,0xc001b671
c001bf4c:	c7 05 20 07 03 c0 4b b3 01 c0 	mov    DWORD PTR ds:0xc0030720,0xc001b34b
c001bf56:	c7 05 24 07 03 c0 b4 b3 01 c0 	mov    DWORD PTR ds:0xc0030724,0xc001b3b4
c001bf60:	c7 05 28 07 03 c0 31 b4 01 c0 	mov    DWORD PTR ds:0xc0030728,0xc001b431
c001bf6a:	c7 05 2c 07 03 c0 a7 b0 01 c0 	mov    DWORD PTR ds:0xc003072c,0xc001b0a7
c001bf74:	c7 05 30 07 03 c0 47 b7 01 c0 	mov    DWORD PTR ds:0xc0030730,0xc001b747
c001bf7e:	c7 05 34 07 03 c0 61 b7 01 c0 	mov    DWORD PTR ds:0xc0030734,0xc001b761
c001bf88:	c7 05 38 07 03 c0 61 b7 01 c0 	mov    DWORD PTR ds:0xc0030738,0xc001b761
c001bf92:	c7 05 3c 07 03 c0 a2 b7 01 c0 	mov    DWORD PTR ds:0xc003073c,0xc001b7a2
c001bf9c:	c7 05 40 07 03 c0 06 b8 01 c0 	mov    DWORD PTR ds:0xc0030740,0xc001b806
c001bfa6:	c7 05 44 07 03 c0 b1 b0 01 c0 	mov    DWORD PTR ds:0xc0030744,0xc001b0b1
c001bfb0:	c7 05 48 07 03 c0 6a b8 01 c0 	mov    DWORD PTR ds:0xc0030748,0xc001b86a
c001bfba:	c7 05 4c 07 03 c0 20 b2 01 c0 	mov    DWORD PTR ds:0xc003074c,0xc001b220
c001bfc4:	c7 05 50 07 03 c0 b6 b8 01 c0 	mov    DWORD PTR ds:0xc0030750,0xc001b8b6
c001bfce:	c7 05 54 07 03 c0 f1 b2 01 c0 	mov    DWORD PTR ds:0xc0030754,0xc001b2f1
c001bfd8:	c7 05 58 07 03 c0 39 b9 01 c0 	mov    DWORD PTR ds:0xc0030758,0xc001b939
c001bfe2:	c7 05 5c 07 03 c0 b4 b4 01 c0 	mov    DWORD PTR ds:0xc003075c,0xc001b4b4
c001bfec:	c7 05 60 07 03 c0 60 b9 01 c0 	mov    DWORD PTR ds:0xc0030760,0xc001b960
c001bff6:	c7 05 64 07 03 c0 b8 b9 01 c0 	mov    DWORD PTR ds:0xc0030764,0xc001b9b8
c001c000:	c7 05 68 07 03 c0 65 ba 01 c0 	mov    DWORD PTR ds:0xc0030768,0xc001ba65
c001c00a:	c7 05 6c 07 03 c0 c1 b0 01 c0 	mov    DWORD PTR ds:0xc003076c,0xc001b0c1
c001c014:	c7 05 70 07 03 c0 2b b1 01 c0 	mov    DWORD PTR ds:0xc0030770,0xc001b12b
c001c01e:	c7 05 74 07 03 c0 71 b1 01 c0 	mov    DWORD PTR ds:0xc0030774,0xc001b171
c001c028:	c7 05 78 07 03 c0 84 bb 01 c0 	mov    DWORD PTR ds:0xc0030778,0xc001bb84
c001c032:	c7 05 7c 07 03 c0 7c b7 01 c0 	mov    DWORD PTR ds:0xc003077c,0xc001b77c
c001c03c:	c7 05 80 07 03 c0 c2 b1 01 c0 	mov    DWORD PTR ds:0xc0030780,0xc001b1c2
c001c046:	c7 05 84 07 03 c0 f6 bb 01 c0 	mov    DWORD PTR ds:0xc0030784,0xc001bbf6
c001c050:	c7 05 88 07 03 c0 3b bc 01 c0 	mov    DWORD PTR ds:0xc0030788,0xc001bc3b
c001c05a:	c7 05 8c 07 03 c0 07 ad 01 c0 	mov    DWORD PTR ds:0xc003078c,0xc001ad07
c001c064:	c7 05 90 07 03 c0 88 ae 01 c0 	mov    DWORD PTR ds:0xc0030790,0xc001ae88
c001c06e:	c7 05 94 07 03 c0 b0 af 01 c0 	mov    DWORD PTR ds:0xc0030794,0xc001afb0
c001c078:	c7 05 98 07 03 c0 8e ac 01 c0 	mov    DWORD PTR ds:0xc0030798,0xc001ac8e
c001c082:	c3                   	ret    

c001c083 <Sys::systemCall(regs*, void*)>:
c001c083:	53                   	push   ebx
c001c084:	83 ec 08             	sub    esp,0x8
c001c087:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c08b:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001c08e:	83 f8 7f             	cmp    eax,0x7f
c001c091:	77 16                	ja     c001c0a9 <Sys::systemCall(regs*, void*)+0x26>
c001c093:	8b 14 85 e0 06 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcf920]
c001c09a:	85 d2                	test   edx,edx
c001c09c:	74 0b                	je     c001c0a9 <Sys::systemCall(regs*, void*)+0x26>
c001c09e:	83 ec 0c             	sub    esp,0xc
c001c0a1:	53                   	push   ebx
c001c0a2:	ff d2                	call   edx
c001c0a4:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001c0a7:	eb 0d                	jmp    c001c0b6 <Sys::systemCall(regs*, void*)+0x33>
c001c0a9:	52                   	push   edx
c001c0aa:	52                   	push   edx
c001c0ab:	50                   	push   eax
c001c0ac:	68 31 b7 02 c0       	push   0xc002b731
c001c0b1:	e8 5f 6a ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c001c0b6:	83 c4 10             	add    esp,0x10
c001c0b9:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001c0be:	31 d2                	xor    edx,edx
c001c0c0:	83 c4 08             	add    esp,0x8
c001c0c3:	5b                   	pop    ebx
c001c0c4:	c3                   	ret    

c001c0c5 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001c0c5:	55                   	push   ebp
c001c0c6:	89 e5                	mov    ebp,esp
c001c0c8:	57                   	push   edi
c001c0c9:	56                   	push   esi
c001c0ca:	53                   	push   ebx
c001c0cb:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001c0d1:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c001c0d4:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c001c0d7:	85 c0                	test   eax,eax
c001c0d9:	0f 95 c1             	setne  cl
c001c0dc:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c001c0e0:	0f 94 c2             	sete   dl
c001c0e3:	84 d1                	test   cl,dl
c001c0e5:	74 26                	je     c001c10d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x48>
c001c0e7:	f7 45 14 ff 0f 00 00 	test   DWORD PTR [ebp+0x14],0xfff
c001c0ee:	74 1d                	je     c001c10d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x48>
c001c0f0:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c001c0f3:	8d 91 00 10 00 00    	lea    edx,[ecx+0x1000]
c001c0f9:	89 d6                	mov    esi,edx
c001c0fb:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001c101:	81 ce 00 f0 ff ff    	or     esi,0xfffff000
c001c107:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c001c10a:	89 75 10             	mov    DWORD PTR [ebp+0x10],esi
c001c10d:	83 ec 0c             	sub    esp,0xc
c001c110:	05 ff 0f 00 00       	add    eax,0xfff
c001c115:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c001c118:	6a 01                	push   0x1
c001c11a:	8d 99 ff 0f 00 00    	lea    ebx,[ecx+0xfff]
c001c120:	89 85 d4 ef ff ff    	mov    DWORD PTR [ebp-0x102c],eax
c001c126:	e8 fa 59 ff ff       	call   c0011b25 <Virt::allocateKernelVirtualPages(int)>
c001c12b:	83 c4 10             	add    esp,0x10
c001c12e:	89 c6                	mov    esi,eax
c001c130:	81 fb ff 0f 00 00    	cmp    ebx,0xfff
c001c136:	0f 86 21 01 00 00    	jbe    c001c25d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x198>
c001c13c:	c1 eb 0c             	shr    ebx,0xc
c001c13f:	c7 85 d0 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x1030],0x0
c001c149:	89 9d cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],ebx
c001c14f:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c001c152:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001c155:	8b 95 cc ef ff ff    	mov    edx,DWORD PTR [ebp-0x1034]
c001c15b:	03 45 14             	add    eax,DWORD PTR [ebp+0x14]
c001c15e:	29 d8                	sub    eax,ebx
c001c160:	39 95 d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],edx
c001c166:	0f 83 f4 00 00 00    	jae    c001c260 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x19b>
c001c16c:	83 ec 0c             	sub    esp,0xc
c001c16f:	8d 95 e4 ef ff ff    	lea    edx,[ebp-0x101c]
c001c175:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c001c178:	3d 00 10 00 00       	cmp    eax,0x1000
c001c17d:	8b 09                	mov    ecx,DWORD PTR [ecx]
c001c17f:	52                   	push   edx
c001c180:	8d 95 e8 ef ff ff    	lea    edx,[ebp-0x1018]
c001c186:	52                   	push   edx
c001c187:	76 05                	jbe    c001c18e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc9>
c001c189:	b8 00 10 00 00       	mov    eax,0x1000
c001c18e:	31 d2                	xor    edx,edx
c001c190:	52                   	push   edx
c001c191:	50                   	push   eax
c001c192:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c001c195:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c198:	83 c4 20             	add    esp,0x20
c001c19b:	85 c0                	test   eax,eax
c001c19d:	74 1f                	je     c001c1be <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf9>
c001c19f:	51                   	push   ecx
c001c1a0:	51                   	push   ecx
c001c1a1:	50                   	push   eax
c001c1a2:	68 45 b7 02 c0       	push   0xc002b745
c001c1a7:	e8 69 69 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c001c1ac:	89 34 24             	mov    DWORD PTR [esp],esi
c001c1af:	e8 d5 5c ff ff       	call   c0011e89 <Virt::freeKernelVirtualPages(unsigned long)>
c001c1b4:	83 c4 10             	add    esp,0x10
c001c1b7:	31 c0                	xor    eax,eax
c001c1b9:	e9 7c 01 00 00       	jmp    c001c33a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c001c1be:	e8 fb 14 00 00       	call   c001d6be <lockScheduler()>
c001c1c3:	e8 1b 3d ff ff       	call   c000fee3 <Phys::allocatePage()>
c001c1c8:	6a 07                	push   0x7
c001c1ca:	89 85 c8 ef ff ff    	mov    DWORD PTR [ebp-0x1038],eax
c001c1d0:	56                   	push   esi
c001c1d1:	50                   	push   eax
c001c1d2:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001c1d8:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001c1db:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c001c1e1:	e8 0a 60 ff ff       	call   c00121f0 <VAS::mapPage(unsigned long, unsigned long, int)>
c001c1e6:	83 c4 0c             	add    esp,0xc
c001c1e9:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001c1ef:	6a 00                	push   0x0
c001c1f1:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001c1f7:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001c1fa:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c001c200:	e8 55 5e ff ff       	call   c001205a <VAS::mapOtherVASIn(bool, VAS*)>
c001c205:	58                   	pop    eax
c001c206:	8b 85 c8 ef ff ff    	mov    eax,DWORD PTR [ebp-0x1038]
c001c20c:	5a                   	pop    edx
c001c20d:	68 07 04 00 00       	push   0x407
c001c212:	53                   	push   ebx
c001c213:	81 c3 00 10 00 00    	add    ebx,0x1000
c001c219:	50                   	push   eax
c001c21a:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001c220:	6a 00                	push   0x0
c001c222:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c227:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c22a:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c230:	e8 75 63 ff ff       	call   c00125aa <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001c235:	83 c4 1c             	add    esp,0x1c
c001c238:	8d 85 e8 ef ff ff    	lea    eax,[ebp-0x1018]
c001c23e:	68 00 10 00 00       	push   0x1000
c001c243:	50                   	push   eax
c001c244:	56                   	push   esi
c001c245:	e8 fa 44 fe ff       	call   c0000744 <memcpy>
c001c24a:	e8 71 14 00 00       	call   c001d6c0 <unlockScheduler()>
c001c24f:	ff 85 d0 ef ff ff    	inc    DWORD PTR [ebp-0x1030]
c001c255:	83 c4 10             	add    esp,0x10
c001c258:	e9 f5 fe ff ff       	jmp    c001c152 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x8d>
c001c25d:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c001c260:	81 bd d4 ef ff ff ff 0f 00 00 	cmp    DWORD PTR [ebp-0x102c],0xfff
c001c26a:	0f 86 bc 00 00 00    	jbe    c001c32c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x267>
c001c270:	e8 49 14 00 00       	call   c001d6be <lockScheduler()>
c001c275:	51                   	push   ecx
c001c276:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001c27c:	6a 00                	push   0x0
c001c27e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c283:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c286:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c28c:	e8 c9 5d ff ff       	call   c001205a <VAS::mapOtherVASIn(bool, VAS*)>
c001c291:	8b 85 d4 ef ff ff    	mov    eax,DWORD PTR [ebp-0x102c]
c001c297:	83 c4 10             	add    esp,0x10
c001c29a:	c1 e8 0c             	shr    eax,0xc
c001c29d:	c7 85 d4 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x102c],0x0
c001c2a7:	89 85 d0 ef ff ff    	mov    DWORD PTR [ebp-0x1030],eax
c001c2ad:	e8 31 3c ff ff       	call   c000fee3 <Phys::allocatePage()>
c001c2b2:	6a 07                	push   0x7
c001c2b4:	89 85 cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],eax
c001c2ba:	56                   	push   esi
c001c2bb:	50                   	push   eax
c001c2bc:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001c2c2:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001c2c5:	ff b1 32 05 00 00    	push   DWORD PTR [ecx+0x532]
c001c2cb:	e8 20 5f ff ff       	call   c00121f0 <VAS::mapPage(unsigned long, unsigned long, int)>
c001c2d0:	58                   	pop    eax
c001c2d1:	8b 85 cc ef ff ff    	mov    eax,DWORD PTR [ebp-0x1034]
c001c2d7:	5a                   	pop    edx
c001c2d8:	68 07 04 00 00       	push   0x407
c001c2dd:	53                   	push   ebx
c001c2de:	81 c3 00 10 00 00    	add    ebx,0x1000
c001c2e4:	50                   	push   eax
c001c2e5:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001c2eb:	6a 00                	push   0x0
c001c2ed:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c2f2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c2f5:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c2fb:	e8 aa 62 ff ff       	call   c00125aa <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001c300:	83 c4 1c             	add    esp,0x1c
c001c303:	68 00 10 00 00       	push   0x1000
c001c308:	6a 00                	push   0x0
c001c30a:	56                   	push   esi
c001c30b:	e8 68 44 fe ff       	call   c0000778 <memset>
c001c310:	ff 85 d4 ef ff ff    	inc    DWORD PTR [ebp-0x102c]
c001c316:	83 c4 10             	add    esp,0x10
c001c319:	8b 8d d4 ef ff ff    	mov    ecx,DWORD PTR [ebp-0x102c]
c001c31f:	39 8d d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],ecx
c001c325:	77 86                	ja     c001c2ad <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1e8>
c001c327:	e8 94 13 00 00       	call   c001d6c0 <unlockScheduler()>
c001c32c:	83 ec 0c             	sub    esp,0xc
c001c32f:	56                   	push   esi
c001c330:	e8 54 5b ff ff       	call   c0011e89 <Virt::freeKernelVirtualPages(unsigned long)>
c001c335:	83 c4 10             	add    esp,0x10
c001c338:	b0 01                	mov    al,0x1
c001c33a:	8d 65 f4             	lea    esp,[ebp-0xc]
c001c33d:	5b                   	pop    ebx
c001c33e:	5e                   	pop    esi
c001c33f:	5f                   	pop    edi
c001c340:	5d                   	pop    ebp
c001c341:	c3                   	ret    

c001c342 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001c342:	55                   	push   ebp
c001c343:	57                   	push   edi
c001c344:	56                   	push   esi
c001c345:	53                   	push   ebx
c001c346:	83 ec 48             	sub    esp,0x48
c001c349:	68 14 01 00 00       	push   0x114
c001c34e:	e8 f3 34 ff ff       	call   c000f846 <malloc>
c001c353:	83 c4 0c             	add    esp,0xc
c001c356:	89 c6                	mov    esi,eax
c001c358:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001c35c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001c360:	50                   	push   eax
c001c361:	e8 08 6d ff ff       	call   c001306e <File::File(char const*, Process*)>
c001c366:	58                   	pop    eax
c001c367:	5a                   	pop    edx
c001c368:	6a 01                	push   0x1
c001c36a:	56                   	push   esi
c001c36b:	e8 62 6d ff ff       	call   c00130d2 <File::open(FileOpenMode)>
c001c370:	83 c4 10             	add    esp,0x10
c001c373:	85 c0                	test   eax,eax
c001c375:	0f 85 47 01 00 00    	jne    c001c4c2 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c37b:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001c383:	83 ec 0c             	sub    esp,0xc
c001c386:	6a 34                	push   0x34
c001c388:	e8 b9 34 ff ff       	call   c000f846 <malloc>
c001c38d:	89 c3                	mov    ebx,eax
c001c38f:	58                   	pop    eax
c001c390:	8b 06                	mov    eax,DWORD PTR [esi]
c001c392:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001c396:	57                   	push   edi
c001c397:	53                   	push   ebx
c001c398:	6a 00                	push   0x0
c001c39a:	6a 34                	push   0x34
c001c39c:	56                   	push   esi
c001c39d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c3a0:	83 c4 20             	add    esp,0x20
c001c3a3:	85 c0                	test   eax,eax
c001c3a5:	0f 85 17 01 00 00    	jne    c001c4c2 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c3ab:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001c3b1:	0f 85 0b 01 00 00    	jne    c001c4c2 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c3b7:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c3ba:	85 c0                	test   eax,eax
c001c3bc:	0f 84 00 01 00 00    	je     c001c4c2 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c3c2:	31 d2                	xor    edx,edx
c001c3c4:	55                   	push   ebp
c001c3c5:	52                   	push   edx
c001c3c6:	50                   	push   eax
c001c3c7:	56                   	push   esi
c001c3c8:	e8 c3 6d ff ff       	call   c0013190 <File::seek(unsigned long long)>
c001c3cd:	83 c4 10             	add    esp,0x10
c001c3d0:	85 c0                	test   eax,eax
c001c3d2:	0f 85 ea 00 00 00    	jne    c001c4c2 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c3d8:	83 ec 0c             	sub    esp,0xc
c001c3db:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001c3de:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001c3e2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001c3e6:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001c3ea:	0f af c2             	imul   eax,edx
c001c3ed:	50                   	push   eax
c001c3ee:	e8 53 34 ff ff       	call   c000f846 <malloc>
c001c3f3:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001c3f5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c3f9:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c3fc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c400:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001c404:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001c408:	0f af c2             	imul   eax,edx
c001c40b:	99                   	cdq    
c001c40c:	52                   	push   edx
c001c40d:	50                   	push   eax
c001c40e:	56                   	push   esi
c001c40f:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c412:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001c415:	83 c4 20             	add    esp,0x20
c001c418:	85 c0                	test   eax,eax
c001c41a:	0f 84 a2 00 00 00    	je     c001c4c2 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c420:	31 d2                	xor    edx,edx
c001c422:	51                   	push   ecx
c001c423:	52                   	push   edx
c001c424:	50                   	push   eax
c001c425:	56                   	push   esi
c001c426:	e8 65 6d ff ff       	call   c0013190 <File::seek(unsigned long long)>
c001c42b:	83 c4 10             	add    esp,0x10
c001c42e:	85 c0                	test   eax,eax
c001c430:	0f 85 8c 00 00 00    	jne    c001c4c2 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c436:	83 ec 0c             	sub    esp,0xc
c001c439:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001c43d:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001c441:	31 ed                	xor    ebp,ebp
c001c443:	0f af c2             	imul   eax,edx
c001c446:	50                   	push   eax
c001c447:	e8 fa 33 ff ff       	call   c000f846 <malloc>
c001c44c:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001c44e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c452:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c455:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c459:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001c45d:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001c461:	0f af c2             	imul   eax,edx
c001c464:	99                   	cdq    
c001c465:	52                   	push   edx
c001c466:	50                   	push   eax
c001c467:	56                   	push   esi
c001c468:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c46b:	83 c4 20             	add    esp,0x20
c001c46e:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001c476:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001c47a:	0f 86 80 00 00 00    	jbe    c001c500 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001c480:	0f b7 fd             	movzx  edi,bp
c001c483:	c1 e7 05             	shl    edi,0x5
c001c486:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001c48a:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001c48d:	75 6b                	jne    c001c4fa <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001c48f:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001c492:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c496:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001c499:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c49d:	52                   	push   edx
c001c49e:	31 d2                	xor    edx,edx
c001c4a0:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001c4a3:	52                   	push   edx
c001c4a4:	50                   	push   eax
c001c4a5:	56                   	push   esi
c001c4a6:	e8 e5 6c ff ff       	call   c0013190 <File::seek(unsigned long long)>
c001c4ab:	83 c4 10             	add    esp,0x10
c001c4ae:	85 c0                	test   eax,eax
c001c4b0:	74 17                	je     c001c4c9 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001c4b2:	83 ec 0c             	sub    esp,0xc
c001c4b5:	68 70 b7 02 c0       	push   0xc002b770
c001c4ba:	e8 56 66 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c001c4bf:	83 c4 10             	add    esp,0x10
c001c4c2:	31 c0                	xor    eax,eax
c001c4c4:	e9 87 00 00 00       	jmp    c001c550 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001c4c9:	83 ec 0c             	sub    esp,0xc
c001c4cc:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001c4cf:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001c4d2:	50                   	push   eax
c001c4d3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001c4d7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c4db:	56                   	push   esi
c001c4dc:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001c4e0:	e8 e0 fb ff ff       	call   c001c0c5 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001c4e5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c4e9:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001c4ed:	83 c4 20             	add    esp,0x20
c001c4f0:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001c4f4:	73 04                	jae    c001c4fa <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001c4f6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c4fa:	45                   	inc    ebp
c001c4fb:	e9 76 ff ff ff       	jmp    c001c476 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001c500:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001c504:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c508:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c50c:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c001c512:	83 ec 0c             	sub    esp,0xc
c001c515:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c001c51b:	25 00 f0 ff ff       	and    eax,0xfffff000
c001c520:	05 00 10 00 00       	add    eax,0x1000
c001c525:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001c528:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c52c:	e8 25 33 ff ff       	call   c000f856 <free>
c001c531:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c534:	e8 1d 33 ff ff       	call   c000f856 <free>
c001c539:	58                   	pop    eax
c001c53a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c53e:	e8 13 33 ff ff       	call   c000f856 <free>
c001c543:	89 34 24             	mov    DWORD PTR [esp],esi
c001c546:	e8 e5 6b ff ff       	call   c0013130 <File::close()>
c001c54b:	83 c4 10             	add    esp,0x10
c001c54e:	b0 01                	mov    al,0x1
c001c550:	83 c4 3c             	add    esp,0x3c
c001c553:	5b                   	pop    ebx
c001c554:	5e                   	pop    esi
c001c555:	5f                   	pop    edi
c001c556:	5d                   	pop    ebp
c001c557:	c3                   	ret    

c001c558 <Thr::runtimeReferenceHelper()>:
c001c558:	83 ec 18             	sub    esp,0x18
c001c55b:	68 78 b7 02 c0       	push   0xc002b778
c001c560:	e8 b0 65 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c001c565:	fa                   	cli    
c001c566:	83 c4 10             	add    esp,0x10
c001c569:	eb fe                	jmp    c001c569 <Thr::runtimeReferenceHelper()+0x11>

c001c56b <Thr::getAddressOfKernelSymbol(char const*)>:
c001c56b:	57                   	push   edi
c001c56c:	56                   	push   esi
c001c56d:	53                   	push   ebx
c001c56e:	31 db                	xor    ebx,ebx
c001c570:	39 1d 80 10 03 c0    	cmp    DWORD PTR ds:0xc0031080,ebx
c001c576:	7e 3c                	jle    c001c5b4 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001c578:	8b 34 9d 00 10 03 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffcf000]
c001c57f:	31 ff                	xor    edi,edi
c001c581:	39 3c 9d 00 0f 03 c0 	cmp    DWORD PTR [ebx*4-0x3ffcf100],edi
c001c588:	7e 27                	jle    c001c5b1 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001c58a:	50                   	push   eax
c001c58b:	50                   	push   eax
c001c58c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c590:	8b 06                	mov    eax,DWORD PTR [esi]
c001c592:	03 04 9d 80 0f 03 c0 	add    eax,DWORD PTR [ebx*4-0x3ffcf080]
c001c599:	50                   	push   eax
c001c59a:	e8 21 43 fe ff       	call   c00008c0 <strcmp>
c001c59f:	83 c4 10             	add    esp,0x10
c001c5a2:	85 c0                	test   eax,eax
c001c5a4:	75 05                	jne    c001c5ab <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001c5a6:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001c5a9:	eb 0b                	jmp    c001c5b6 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001c5ab:	83 c6 10             	add    esi,0x10
c001c5ae:	47                   	inc    edi
c001c5af:	eb d0                	jmp    c001c581 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001c5b1:	43                   	inc    ebx
c001c5b2:	eb bc                	jmp    c001c570 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001c5b4:	31 c0                	xor    eax,eax
c001c5b6:	5b                   	pop    ebx
c001c5b7:	5e                   	pop    esi
c001c5b8:	5f                   	pop    edi
c001c5b9:	c3                   	ret    

c001c5ba <Thr::loadKernelSymbolTable(char const*)>:
c001c5ba:	55                   	push   ebp
c001c5bb:	57                   	push   edi
c001c5bc:	56                   	push   esi
c001c5bd:	53                   	push   ebx
c001c5be:	83 ec 68             	sub    esp,0x68
c001c5c1:	8b 35 d4 10 03 c0    	mov    esi,DWORD PTR ds:0xc00310d4
c001c5c7:	68 14 01 00 00       	push   0x114
c001c5cc:	e8 75 32 ff ff       	call   c000f846 <malloc>
c001c5d1:	83 c4 0c             	add    esp,0xc
c001c5d4:	89 c3                	mov    ebx,eax
c001c5d6:	56                   	push   esi
c001c5d7:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001c5db:	50                   	push   eax
c001c5dc:	e8 8d 6a ff ff       	call   c001306e <File::File(char const*, Process*)>
c001c5e1:	5e                   	pop    esi
c001c5e2:	5f                   	pop    edi
c001c5e3:	6a 01                	push   0x1
c001c5e5:	53                   	push   ebx
c001c5e6:	e8 e7 6a ff ff       	call   c00130d2 <File::open(FileOpenMode)>
c001c5eb:	83 c4 10             	add    esp,0x10
c001c5ee:	85 c0                	test   eax,eax
c001c5f0:	74 0a                	je     c001c5fc <Thr::loadKernelSymbolTable(char const*)+0x42>
c001c5f2:	83 ec 0c             	sub    esp,0xc
c001c5f5:	68 9a b7 02 c0       	push   0xc002b79a
c001c5fa:	eb 34                	jmp    c001c630 <Thr::loadKernelSymbolTable(char const*)+0x76>
c001c5fc:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001c604:	83 ec 0c             	sub    esp,0xc
c001c607:	6a 34                	push   0x34
c001c609:	e8 38 32 ff ff       	call   c000f846 <malloc>
c001c60e:	59                   	pop    ecx
c001c60f:	89 c7                	mov    edi,eax
c001c611:	8d 74 24 34          	lea    esi,[esp+0x34]
c001c615:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c617:	56                   	push   esi
c001c618:	57                   	push   edi
c001c619:	6a 00                	push   0x0
c001c61b:	6a 34                	push   0x34
c001c61d:	53                   	push   ebx
c001c61e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c621:	83 c4 20             	add    esp,0x20
c001c624:	85 c0                	test   eax,eax
c001c626:	74 17                	je     c001c63f <Thr::loadKernelSymbolTable(char const*)+0x85>
c001c628:	83 ec 0c             	sub    esp,0xc
c001c62b:	68 b1 b7 02 c0       	push   0xc002b7b1
c001c630:	e8 fa d9 ff ff       	call   c001a02f <Krnl::panic(char const*)>
c001c635:	83 c4 10             	add    esp,0x10
c001c638:	31 c0                	xor    eax,eax
c001c63a:	e9 31 02 00 00       	jmp    c001c870 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c001c63f:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001c645:	75 e1                	jne    c001c628 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001c647:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001c64a:	85 c0                	test   eax,eax
c001c64c:	74 da                	je     c001c628 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001c64e:	52                   	push   edx
c001c64f:	31 d2                	xor    edx,edx
c001c651:	52                   	push   edx
c001c652:	50                   	push   eax
c001c653:	53                   	push   ebx
c001c654:	e8 37 6b ff ff       	call   c0013190 <File::seek(unsigned long long)>
c001c659:	83 c4 10             	add    esp,0x10
c001c65c:	85 c0                	test   eax,eax
c001c65e:	75 c8                	jne    c001c628 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001c660:	83 ec 0c             	sub    esp,0xc
c001c663:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001c667:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c66b:	31 ed                	xor    ebp,ebp
c001c66d:	0f af c2             	imul   eax,edx
c001c670:	50                   	push   eax
c001c671:	e8 d0 31 ff ff       	call   c000f846 <malloc>
c001c676:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001c678:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c67c:	89 34 24             	mov    DWORD PTR [esp],esi
c001c67f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c683:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001c687:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c68b:	0f af c2             	imul   eax,edx
c001c68e:	99                   	cdq    
c001c68f:	52                   	push   edx
c001c690:	50                   	push   eax
c001c691:	53                   	push   ebx
c001c692:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c695:	83 c4 20             	add    esp,0x20
c001c698:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001c6a0:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001c6a8:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001c6b0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001c6b8:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001c6bc:	0f 86 aa 00 00 00    	jbe    c001c76c <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c001c6c2:	0f b7 f5             	movzx  esi,bp
c001c6c5:	6b f6 28             	imul   esi,esi,0x28
c001c6c8:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001c6cc:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001c6cf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c6d3:	50                   	push   eax
c001c6d4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001c6d8:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001c6dc:	8b 16                	mov    edx,DWORD PTR [esi]
c001c6de:	6b c0 28             	imul   eax,eax,0x28
c001c6e1:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001c6e5:	89 d0                	mov    eax,edx
c001c6e7:	31 d2                	xor    edx,edx
c001c6e9:	52                   	push   edx
c001c6ea:	50                   	push   eax
c001c6eb:	53                   	push   ebx
c001c6ec:	e8 9f 6a ff ff       	call   c0013190 <File::seek(unsigned long long)>
c001c6f1:	83 c4 0c             	add    esp,0xc
c001c6f4:	6a 20                	push   0x20
c001c6f6:	6a 00                	push   0x0
c001c6f8:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001c6fc:	52                   	push   edx
c001c6fd:	e8 76 40 fe ff       	call   c0000778 <memset>
c001c702:	58                   	pop    eax
c001c703:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c705:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001c709:	51                   	push   ecx
c001c70a:	8d 54 24 40          	lea    edx,[esp+0x40]
c001c70e:	52                   	push   edx
c001c70f:	6a 00                	push   0x0
c001c711:	6a 1f                	push   0x1f
c001c713:	53                   	push   ebx
c001c714:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c717:	83 c4 18             	add    esp,0x18
c001c71a:	68 c8 b7 02 c0       	push   0xc002b7c8
c001c71f:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001c723:	52                   	push   edx
c001c724:	e8 97 41 fe ff       	call   c00008c0 <strcmp>
c001c729:	83 c4 10             	add    esp,0x10
c001c72c:	85 c0                	test   eax,eax
c001c72e:	75 0f                	jne    c001c73f <Thr::loadKernelSymbolTable(char const*)+0x185>
c001c730:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c733:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c737:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c73b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c73f:	50                   	push   eax
c001c740:	50                   	push   eax
c001c741:	68 d0 b7 02 c0       	push   0xc002b7d0
c001c746:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001c74a:	50                   	push   eax
c001c74b:	e8 70 41 fe ff       	call   c00008c0 <strcmp>
c001c750:	83 c4 10             	add    esp,0x10
c001c753:	85 c0                	test   eax,eax
c001c755:	75 0f                	jne    c001c766 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c001c757:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c75a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c75e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c762:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c766:	45                   	inc    ebp
c001c767:	e9 4c ff ff ff       	jmp    c001c6b8 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c001c76c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001c771:	75 10                	jne    c001c783 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c001c773:	83 ec 0c             	sub    esp,0xc
c001c776:	68 d8 b7 02 c0       	push   0xc002b7d8
c001c77b:	e8 af d8 ff ff       	call   c001a02f <Krnl::panic(char const*)>
c001c780:	83 c4 10             	add    esp,0x10
c001c783:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001c788:	75 10                	jne    c001c79a <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c001c78a:	83 ec 0c             	sub    esp,0xc
c001c78d:	68 d8 b7 02 c0       	push   0xc002b7d8
c001c792:	e8 98 d8 ff ff       	call   c001a02f <Krnl::panic(char const*)>
c001c797:	83 c4 10             	add    esp,0x10
c001c79a:	31 d2                	xor    edx,edx
c001c79c:	50                   	push   eax
c001c79d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7a1:	52                   	push   edx
c001c7a2:	50                   	push   eax
c001c7a3:	53                   	push   ebx
c001c7a4:	e8 e7 69 ff ff       	call   c0013190 <File::seek(unsigned long long)>
c001c7a9:	5a                   	pop    edx
c001c7aa:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001c7ae:	e8 93 30 ff ff       	call   c000f846 <malloc>
c001c7b3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c7b7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c7bb:	31 c9                	xor    ecx,ecx
c001c7bd:	5e                   	pop    esi
c001c7be:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c7c0:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001c7c4:	55                   	push   ebp
c001c7c5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c7c9:	51                   	push   ecx
c001c7ca:	52                   	push   edx
c001c7cb:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001c7cf:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001c7d3:	53                   	push   ebx
c001c7d4:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c7d7:	83 c4 14             	add    esp,0x14
c001c7da:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c7de:	e8 63 30 ff ff       	call   c000f846 <malloc>
c001c7e3:	89 c6                	mov    esi,eax
c001c7e5:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c7e7:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c7ea:	56                   	push   esi
c001c7eb:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001c7ef:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001c7f3:	51                   	push   ecx
c001c7f4:	52                   	push   edx
c001c7f5:	53                   	push   ebx
c001c7f6:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c7f9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c7fd:	8b 15 80 10 03 c0    	mov    edx,DWORD PTR ds:0xc0031080
c001c803:	83 c4 1c             	add    esp,0x1c
c001c806:	c1 e8 04             	shr    eax,0x4
c001c809:	89 04 95 00 0f 03 c0 	mov    DWORD PTR [edx*4-0x3ffcf100],eax
c001c810:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c814:	31 d2                	xor    edx,edx
c001c816:	52                   	push   edx
c001c817:	50                   	push   eax
c001c818:	53                   	push   ebx
c001c819:	e8 72 69 ff ff       	call   c0013190 <File::seek(unsigned long long)>
c001c81e:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001c820:	31 d2                	xor    edx,edx
c001c822:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c825:	56                   	push   esi
c001c826:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c82a:	52                   	push   edx
c001c82b:	50                   	push   eax
c001c82c:	53                   	push   ebx
c001c82d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c830:	83 c4 14             	add    esp,0x14
c001c833:	53                   	push   ebx
c001c834:	e8 f7 68 ff ff       	call   c0013130 <File::close()>
c001c839:	5d                   	pop    ebp
c001c83a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c83e:	e8 13 30 ff ff       	call   c000f856 <free>
c001c843:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c846:	e8 0b 30 ff ff       	call   c000f856 <free>
c001c84b:	a1 80 10 03 c0       	mov    eax,ds:0xc0031080
c001c850:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001c854:	8d 50 01             	lea    edx,[eax+0x1]
c001c857:	89 0c 85 00 10 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf000],ecx
c001c85e:	89 34 85 80 0f 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf080],esi
c001c865:	89 15 80 10 03 c0    	mov    DWORD PTR ds:0xc0031080,edx
c001c86b:	83 c4 10             	add    esp,0x10
c001c86e:	b0 01                	mov    al,0x1
c001c870:	83 c4 5c             	add    esp,0x5c
c001c873:	5b                   	pop    ebx
c001c874:	5e                   	pop    esi
c001c875:	5f                   	pop    edi
c001c876:	5d                   	pop    ebp
c001c877:	c3                   	ret    

c001c878 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001c878:	55                   	push   ebp
c001c879:	57                   	push   edi
c001c87a:	56                   	push   esi
c001c87b:	53                   	push   ebx
c001c87c:	81 ec 68 03 00 00    	sub    esp,0x368
c001c882:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001c889:	8b 1d d4 10 03 c0    	mov    ebx,DWORD PTR ds:0xc00310d4
c001c88f:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001c893:	68 14 01 00 00       	push   0x114
c001c898:	e8 a9 2f ff ff       	call   c000f846 <malloc>
c001c89d:	83 c4 0c             	add    esp,0xc
c001c8a0:	89 c5                	mov    ebp,eax
c001c8a2:	53                   	push   ebx
c001c8a3:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001c8aa:	50                   	push   eax
c001c8ab:	e8 be 67 ff ff       	call   c001306e <File::File(char const*, Process*)>
c001c8b0:	5e                   	pop    esi
c001c8b1:	5f                   	pop    edi
c001c8b2:	6a 01                	push   0x1
c001c8b4:	55                   	push   ebp
c001c8b5:	e8 18 68 ff ff       	call   c00130d2 <File::open(FileOpenMode)>
c001c8ba:	83 c4 10             	add    esp,0x10
c001c8bd:	85 c0                	test   eax,eax
c001c8bf:	0f 85 8d 06 00 00    	jne    c001cf52 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001c8c5:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001c8cd:	83 ec 0c             	sub    esp,0xc
c001c8d0:	6a 34                	push   0x34
c001c8d2:	e8 6f 2f ff ff       	call   c000f846 <malloc>
c001c8d7:	5b                   	pop    ebx
c001c8d8:	89 c7                	mov    edi,eax
c001c8da:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001c8de:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c8e1:	53                   	push   ebx
c001c8e2:	57                   	push   edi
c001c8e3:	6a 00                	push   0x0
c001c8e5:	6a 34                	push   0x34
c001c8e7:	55                   	push   ebp
c001c8e8:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c8eb:	83 c4 20             	add    esp,0x20
c001c8ee:	85 c0                	test   eax,eax
c001c8f0:	0f 85 5c 06 00 00    	jne    c001cf52 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001c8f6:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001c8fc:	0f 85 50 06 00 00    	jne    c001cf52 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001c902:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001c905:	85 c0                	test   eax,eax
c001c907:	0f 84 45 06 00 00    	je     c001cf52 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001c90d:	31 d2                	xor    edx,edx
c001c90f:	51                   	push   ecx
c001c910:	52                   	push   edx
c001c911:	50                   	push   eax
c001c912:	55                   	push   ebp
c001c913:	e8 78 68 ff ff       	call   c0013190 <File::seek(unsigned long long)>
c001c918:	83 c4 10             	add    esp,0x10
c001c91b:	85 c0                	test   eax,eax
c001c91d:	0f 85 2f 06 00 00    	jne    c001cf52 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001c923:	83 ec 0c             	sub    esp,0xc
c001c926:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001c929:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001c92d:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001c931:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c935:	0f af c2             	imul   eax,edx
c001c938:	50                   	push   eax
c001c939:	e8 08 2f ff ff       	call   c000f846 <malloc>
c001c93e:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c941:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c945:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c948:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c94c:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001c950:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c954:	0f af c2             	imul   eax,edx
c001c957:	99                   	cdq    
c001c958:	52                   	push   edx
c001c959:	50                   	push   eax
c001c95a:	55                   	push   ebp
c001c95b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c95e:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001c961:	83 c4 20             	add    esp,0x20
c001c964:	85 c0                	test   eax,eax
c001c966:	0f 84 e6 05 00 00    	je     c001cf52 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001c96c:	52                   	push   edx
c001c96d:	31 d2                	xor    edx,edx
c001c96f:	52                   	push   edx
c001c970:	50                   	push   eax
c001c971:	55                   	push   ebp
c001c972:	e8 19 68 ff ff       	call   c0013190 <File::seek(unsigned long long)>
c001c977:	83 c4 10             	add    esp,0x10
c001c97a:	85 c0                	test   eax,eax
c001c97c:	0f 85 d0 05 00 00    	jne    c001cf52 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001c982:	83 ec 0c             	sub    esp,0xc
c001c985:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001c989:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001c98d:	31 f6                	xor    esi,esi
c001c98f:	0f af c2             	imul   eax,edx
c001c992:	50                   	push   eax
c001c993:	e8 ae 2e ff ff       	call   c000f846 <malloc>
c001c998:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c99b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c99f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c9a2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c9a6:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001c9aa:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001c9ae:	0f af c2             	imul   eax,edx
c001c9b1:	99                   	cdq    
c001c9b2:	52                   	push   edx
c001c9b3:	50                   	push   eax
c001c9b4:	55                   	push   ebp
c001c9b5:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c9b8:	83 c4 20             	add    esp,0x20
c001c9bb:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c001c9bf:	0f 86 8a 00 00 00    	jbe    c001ca4f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001c9c5:	0f b7 de             	movzx  ebx,si
c001c9c8:	c1 e3 05             	shl    ebx,0x5
c001c9cb:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001c9cf:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001c9d2:	75 75                	jne    c001ca49 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001c9d4:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001c9d7:	31 d2                	xor    edx,edx
c001c9d9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c9dd:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001c9e0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c9e4:	50                   	push   eax
c001c9e5:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001c9e8:	52                   	push   edx
c001c9e9:	50                   	push   eax
c001c9ea:	55                   	push   ebp
c001c9eb:	e8 a0 67 ff ff       	call   c0013190 <File::seek(unsigned long long)>
c001c9f0:	83 c4 10             	add    esp,0x10
c001c9f3:	85 c0                	test   eax,eax
c001c9f5:	0f 85 57 05 00 00    	jne    c001cf52 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001c9fb:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001ca02:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001ca05:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001ca09:	31 d2                	xor    edx,edx
c001ca0b:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001ca0f:	83 ec 0c             	sub    esp,0xc
c001ca12:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ca16:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001ca1d:	50                   	push   eax
c001ca1e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ca22:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ca26:	52                   	push   edx
c001ca27:	50                   	push   eax
c001ca28:	55                   	push   ebp
c001ca29:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001ca2c:	83 c4 1c             	add    esp,0x1c
c001ca2f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001ca32:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001ca35:	50                   	push   eax
c001ca36:	6a 00                	push   0x0
c001ca38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca3c:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001ca40:	50                   	push   eax
c001ca41:	e8 32 3d fe ff       	call   c0000778 <memset>
c001ca46:	83 c4 10             	add    esp,0x10
c001ca49:	46                   	inc    esi
c001ca4a:	e9 6c ff ff ff       	jmp    c001c9bb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001ca4f:	53                   	push   ebx
c001ca50:	31 db                	xor    ebx,ebx
c001ca52:	68 00 01 00 00       	push   0x100
c001ca57:	6a 00                	push   0x0
c001ca59:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001ca5d:	50                   	push   eax
c001ca5e:	e8 15 3d fe ff       	call   c0000778 <memset>
c001ca63:	83 c4 0c             	add    esp,0xc
c001ca66:	68 00 01 00 00       	push   0x100
c001ca6b:	6a 00                	push   0x0
c001ca6d:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001ca74:	50                   	push   eax
c001ca75:	e8 fe 3c fe ff       	call   c0000778 <memset>
c001ca7a:	83 c4 10             	add    esp,0x10
c001ca7d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001ca85:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001ca8d:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c001ca95:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001ca9d:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001caa5:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c001caa9:	0f 86 30 01 00 00    	jbe    c001cbdf <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001caaf:	0f b7 f3             	movzx  esi,bx
c001cab2:	6b f6 28             	imul   esi,esi,0x28
c001cab5:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001cab9:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001cabc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cac0:	52                   	push   edx
c001cac1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001cac5:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001cac9:	8b 06                	mov    eax,DWORD PTR [esi]
c001cacb:	6b d2 28             	imul   edx,edx,0x28
c001cace:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001cad2:	31 d2                	xor    edx,edx
c001cad4:	52                   	push   edx
c001cad5:	50                   	push   eax
c001cad6:	55                   	push   ebp
c001cad7:	e8 b4 66 ff ff       	call   c0013190 <File::seek(unsigned long long)>
c001cadc:	83 c4 0c             	add    esp,0xc
c001cadf:	6a 20                	push   0x20
c001cae1:	6a 00                	push   0x0
c001cae3:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001caea:	51                   	push   ecx
c001caeb:	e8 88 3c fe ff       	call   c0000778 <memset>
c001caf0:	59                   	pop    ecx
c001caf1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001caf4:	8d 54 24 58          	lea    edx,[esp+0x58]
c001caf8:	52                   	push   edx
c001caf9:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001cb00:	51                   	push   ecx
c001cb01:	6a 00                	push   0x0
c001cb03:	6a 1f                	push   0x1f
c001cb05:	55                   	push   ebp
c001cb06:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cb09:	83 c4 1c             	add    esp,0x1c
c001cb0c:	6a 09                	push   0x9
c001cb0e:	68 f2 b7 02 c0       	push   0xc002b7f2
c001cb13:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001cb1a:	51                   	push   ecx
c001cb1b:	e8 20 3b fe ff       	call   c0000640 <memcmp>
c001cb20:	83 c4 10             	add    esp,0x10
c001cb23:	85 c0                	test   eax,eax
c001cb25:	75 21                	jne    c001cb48 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001cb27:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb2b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001cb2f:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001cb33:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001cb37:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cb3a:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001cb41:	89 d0                	mov    eax,edx
c001cb43:	40                   	inc    eax
c001cb44:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001cb48:	50                   	push   eax
c001cb49:	6a 09                	push   0x9
c001cb4b:	68 fc b7 02 c0       	push   0xc002b7fc
c001cb50:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cb57:	50                   	push   eax
c001cb58:	e8 e3 3a fe ff       	call   c0000640 <memcmp>
c001cb5d:	83 c4 10             	add    esp,0x10
c001cb60:	85 c0                	test   eax,eax
c001cb62:	75 21                	jne    c001cb85 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001cb64:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb68:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001cb6c:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001cb70:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001cb74:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cb77:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001cb7e:	89 d0                	mov    eax,edx
c001cb80:	40                   	inc    eax
c001cb81:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001cb85:	50                   	push   eax
c001cb86:	50                   	push   eax
c001cb87:	68 c8 b7 02 c0       	push   0xc002b7c8
c001cb8c:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cb93:	50                   	push   eax
c001cb94:	e8 27 3d fe ff       	call   c00008c0 <strcmp>
c001cb99:	83 c4 10             	add    esp,0x10
c001cb9c:	85 c0                	test   eax,eax
c001cb9e:	75 0f                	jne    c001cbaf <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c001cba0:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cba3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cba7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cbab:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cbaf:	50                   	push   eax
c001cbb0:	50                   	push   eax
c001cbb1:	68 d0 b7 02 c0       	push   0xc002b7d0
c001cbb6:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cbbd:	50                   	push   eax
c001cbbe:	e8 fd 3c fe ff       	call   c00008c0 <strcmp>
c001cbc3:	83 c4 10             	add    esp,0x10
c001cbc6:	85 c0                	test   eax,eax
c001cbc8:	75 0f                	jne    c001cbd9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001cbca:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cbcd:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001cbd1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cbd5:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001cbd9:	43                   	inc    ebx
c001cbda:	e9 c6 fe ff ff       	jmp    c001caa5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001cbdf:	31 d2                	xor    edx,edx
c001cbe1:	50                   	push   eax
c001cbe2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001cbe6:	52                   	push   edx
c001cbe7:	50                   	push   eax
c001cbe8:	55                   	push   ebp
c001cbe9:	e8 a2 65 ff ff       	call   c0013190 <File::seek(unsigned long long)>
c001cbee:	58                   	pop    eax
c001cbef:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cbf3:	e8 4e 2c ff ff       	call   c000f846 <malloc>
c001cbf8:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001cbfb:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001cbff:	31 d2                	xor    edx,edx
c001cc01:	58                   	pop    eax
c001cc02:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001cc06:	53                   	push   ebx
c001cc07:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001cc0b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001cc0f:	52                   	push   edx
c001cc10:	50                   	push   eax
c001cc11:	55                   	push   ebp
c001cc12:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cc15:	83 c4 14             	add    esp,0x14
c001cc18:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cc1c:	e8 25 2c ff ff       	call   c000f846 <malloc>
c001cc21:	31 d2                	xor    edx,edx
c001cc23:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001cc27:	83 c4 0c             	add    esp,0xc
c001cc2a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001cc2e:	52                   	push   edx
c001cc2f:	50                   	push   eax
c001cc30:	55                   	push   ebp
c001cc31:	e8 5a 65 ff ff       	call   c0013190 <File::seek(unsigned long long)>
c001cc36:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001cc39:	31 d2                	xor    edx,edx
c001cc3b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cc3e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001cc42:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001cc46:	52                   	push   edx
c001cc47:	50                   	push   eax
c001cc48:	55                   	push   ebp
c001cc49:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cc4c:	83 c4 20             	add    esp,0x20
c001cc4f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001cc57:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001cc5b:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c001cc5f:	0f 84 f1 02 00 00    	je     c001cf56 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6de>
c001cc65:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c001cc6c:	31 d2                	xor    edx,edx
c001cc6e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cc72:	c1 e8 03             	shr    eax,0x3
c001cc75:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001cc79:	51                   	push   ecx
c001cc7a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cc7e:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001cc82:	52                   	push   edx
c001cc83:	50                   	push   eax
c001cc84:	55                   	push   ebp
c001cc85:	e8 06 65 ff ff       	call   c0013190 <File::seek(unsigned long long)>
c001cc8a:	5b                   	pop    ebx
c001cc8b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cc8f:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001cc96:	e8 ab 2b ff ff       	call   c000f846 <malloc>
c001cc9b:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001cc9e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001cca2:	31 d2                	xor    edx,edx
c001cca4:	5e                   	pop    esi
c001cca5:	8d 44 24 58          	lea    eax,[esp+0x58]
c001cca9:	50                   	push   eax
c001ccaa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ccae:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ccb2:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001ccb9:	52                   	push   edx
c001ccba:	50                   	push   eax
c001ccbb:	55                   	push   ebp
c001ccbc:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001ccbf:	83 c4 20             	add    esp,0x20
c001ccc2:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001ccca:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001ccce:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c001ccd2:	0f 8d 62 02 00 00    	jge    c001cf3a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6c2>
c001ccd8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001ccdc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cce0:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c001cce5:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001cce8:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001ccec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ccf0:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c001ccf4:	89 d8                	mov    eax,ebx
c001ccf6:	c1 e8 08             	shr    eax,0x8
c001ccf9:	89 c6                	mov    esi,eax
c001ccfb:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001ccff:	c1 e6 04             	shl    esi,0x4
c001cd02:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c001cd06:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001cd09:	85 d2                	test   edx,edx
c001cd0b:	0f 85 bf 00 00 00    	jne    c001cdd0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001cd11:	83 ec 0c             	sub    esp,0xc
c001cd14:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cd18:	03 06                	add    eax,DWORD PTR [esi]
c001cd1a:	50                   	push   eax
c001cd1b:	e8 4b f8 ff ff       	call   c001c56b <Thr::getAddressOfKernelSymbol(char const*)>
c001cd20:	83 c4 10             	add    esp,0x10
c001cd23:	89 c2                	mov    edx,eax
c001cd25:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c001cd2a:	85 c0                	test   eax,eax
c001cd2c:	0f 85 9e 00 00 00    	jne    c001cdd0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001cd32:	83 ec 0c             	sub    esp,0xc
c001cd35:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cd39:	03 06                	add    eax,DWORD PTR [esi]
c001cd3b:	50                   	push   eax
c001cd3c:	e8 b4 17 ff ff       	call   c000e4f5 <Krnl::resolveCompatibilitySymbol(char*)>
c001cd41:	83 c4 10             	add    esp,0x10
c001cd44:	89 c2                	mov    edx,eax
c001cd46:	85 c0                	test   eax,eax
c001cd48:	0f 85 82 00 00 00    	jne    c001cdd0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001cd4e:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001cd52:	50                   	push   eax
c001cd53:	50                   	push   eax
c001cd54:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cd58:	03 06                	add    eax,DWORD PTR [esi]
c001cd5a:	50                   	push   eax
c001cd5b:	68 06 b8 02 c0       	push   0xc002b806
c001cd60:	e8 b0 5d ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c001cd65:	58                   	pop    eax
c001cd66:	5a                   	pop    edx
c001cd67:	68 20 b8 02 c0       	push   0xc002b820
c001cd6c:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cd73:	50                   	push   eax
c001cd74:	e8 bb 3a fe ff       	call   c0000834 <strcpy>
c001cd79:	59                   	pop    ecx
c001cd7a:	58                   	pop    eax
c001cd7b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cd7f:	03 06                	add    eax,DWORD PTR [esi]
c001cd81:	50                   	push   eax
c001cd82:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cd89:	50                   	push   eax
c001cd8a:	e8 e5 3b fe ff       	call   c0000974 <strcat>
c001cd8f:	58                   	pop    eax
c001cd90:	5a                   	pop    edx
c001cd91:	68 b6 b8 02 c0       	push   0xc002b8b6
c001cd96:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cd9d:	50                   	push   eax
c001cd9e:	e8 d1 3b fe ff       	call   c0000974 <strcat>
c001cda3:	83 c4 10             	add    esp,0x10
c001cda6:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001cdab:	0f 84 43 01 00 00    	je     c001cef4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001cdb1:	83 ec 0c             	sub    esp,0xc
c001cdb4:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cdbb:	50                   	push   eax
c001cdbc:	e8 6e d2 ff ff       	call   c001a02f <Krnl::panic(char const*)>
c001cdc1:	83 c4 10             	add    esp,0x10
c001cdc4:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001cdc8:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001cdcc:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001cdd0:	80 fb 01             	cmp    bl,0x1
c001cdd3:	75 7d                	jne    c001ce52 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5da>
c001cdd5:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001cddc:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001cde0:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c001cde4:	01 ce                	add    esi,ecx
c001cde6:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001cdec:	0f 94 c0             	sete   al
c001cdef:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001cdf5:	0f 94 c3             	sete   bl
c001cdf8:	09 c3                	or     ebx,eax
c001cdfa:	8b 06                	mov    eax,DWORD PTR [esi]
c001cdfc:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001ce01:	74 36                	je     c001ce39 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5c1>
c001ce03:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001ce06:	84 db                	test   bl,bl
c001ce08:	75 0a                	jne    c001ce14 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x59c>
c001ce0a:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001ce0e:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001ce12:	76 37                	jbe    c001ce4b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001ce14:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c001ce18:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001ce1d:	0f 84 d1 00 00 00    	je     c001cef4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001ce23:	83 ec 0c             	sub    esp,0xc
c001ce26:	68 37 b8 02 c0       	push   0xc002b837
c001ce2b:	e8 ff d1 ff ff       	call   c001a02f <Krnl::panic(char const*)>
c001ce30:	83 c4 10             	add    esp,0x10
c001ce33:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001ce37:	eb 12                	jmp    c001ce4b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001ce39:	01 c1                	add    ecx,eax
c001ce3b:	84 db                	test   bl,bl
c001ce3d:	75 0c                	jne    c001ce4b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001ce3f:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001ce43:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001ce47:	77 02                	ja     c001ce4b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001ce49:	01 d1                	add    ecx,edx
c001ce4b:	89 0e                	mov    DWORD PTR [esi],ecx
c001ce4d:	e9 df 00 00 00       	jmp    c001cf31 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001ce52:	80 fb 02             	cmp    bl,0x2
c001ce55:	75 71                	jne    c001cec8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x650>
c001ce57:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001ce5e:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c001ce62:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c001ce66:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001ce6c:	74 15                	je     c001ce83 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x60b>
c001ce6e:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001ce74:	74 0d                	je     c001ce83 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x60b>
c001ce76:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001ce7a:	83 e8 04             	sub    eax,0x4
c001ce7d:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001ce81:	76 1f                	jbe    c001cea2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x62a>
c001ce83:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c001ce87:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001ce8c:	74 66                	je     c001cef4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001ce8e:	83 ec 0c             	sub    esp,0xc
c001ce91:	68 53 b8 02 c0       	push   0xc002b853
c001ce96:	e8 94 d1 ff ff       	call   c001a02f <Krnl::panic(char const*)>
c001ce9b:	83 c4 10             	add    esp,0x10
c001ce9e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001cea2:	8b 06                	mov    eax,DWORD PTR [esi]
c001cea4:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001cea9:	74 13                	je     c001cebe <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x646>
c001ceab:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001ceaf:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c001ceb6:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001ceba:	01 c8                	add    eax,ecx
c001cebc:	eb 04                	jmp    c001cec2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x64a>
c001cebe:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c001cec2:	01 c2                	add    edx,eax
c001cec4:	89 16                	mov    DWORD PTR [esi],edx
c001cec6:	eb 69                	jmp    c001cf31 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001cec8:	0f b6 db             	movzx  ebx,bl
c001cecb:	50                   	push   eax
c001cecc:	50                   	push   eax
c001cecd:	53                   	push   ebx
c001cece:	68 6f b8 02 c0       	push   0xc002b86f
c001ced3:	e8 3d 5c ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c001ced8:	83 c4 10             	add    esp,0x10
c001cedb:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001cee0:	74 12                	je     c001cef4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001cee2:	83 ec 0c             	sub    esp,0xc
c001cee5:	68 7a b8 02 c0       	push   0xc002b87a
c001ceea:	e8 40 d1 ff ff       	call   c001a02f <Krnl::panic(char const*)>
c001ceef:	83 c4 10             	add    esp,0x10
c001cef2:	eb 3d                	jmp    c001cf31 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001cef4:	83 ec 0c             	sub    esp,0xc
c001cef7:	55                   	push   ebp
c001cef8:	e8 33 62 ff ff       	call   c0013130 <File::close()>
c001cefd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001cf00:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cf03:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001cf06:	59                   	pop    ecx
c001cf07:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cf0b:	e8 46 29 ff ff       	call   c000f856 <free>
c001cf10:	5b                   	pop    ebx
c001cf11:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001cf15:	e8 3c 29 ff ff       	call   c000f856 <free>
c001cf1a:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cf1d:	e8 34 29 ff ff       	call   c000f856 <free>
c001cf22:	5e                   	pop    esi
c001cf23:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cf27:	e8 2a 29 ff ff       	call   c000f856 <free>
c001cf2c:	83 c4 10             	add    esp,0x10
c001cf2f:	eb 21                	jmp    c001cf52 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001cf31:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c001cf35:	e9 90 fd ff ff       	jmp    c001ccca <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c001cf3a:	83 ec 0c             	sub    esp,0xc
c001cf3d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cf41:	e8 10 29 ff ff       	call   c000f856 <free>
c001cf46:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c001cf4a:	83 c4 10             	add    esp,0x10
c001cf4d:	e9 05 fd ff ff       	jmp    c001cc57 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c001cf52:	31 c0                	xor    eax,eax
c001cf54:	eb 33                	jmp    c001cf89 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x711>
c001cf56:	83 ec 0c             	sub    esp,0xc
c001cf59:	55                   	push   ebp
c001cf5a:	e8 d1 61 ff ff       	call   c0013130 <File::close()>
c001cf5f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001cf62:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cf65:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001cf68:	58                   	pop    eax
c001cf69:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001cf6d:	e8 e4 28 ff ff       	call   c000f856 <free>
c001cf72:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cf75:	e8 dc 28 ff ff       	call   c000f856 <free>
c001cf7a:	5a                   	pop    edx
c001cf7b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cf7f:	e8 d2 28 ff ff       	call   c000f856 <free>
c001cf84:	83 c4 10             	add    esp,0x10
c001cf87:	b0 01                	mov    al,0x1
c001cf89:	81 c4 5c 03 00 00    	add    esp,0x35c
c001cf8f:	5b                   	pop    ebx
c001cf90:	5e                   	pop    esi
c001cf91:	5f                   	pop    edi
c001cf92:	5d                   	pop    ebp
c001cf93:	c3                   	ret    

c001cf94 <Thr::getDriverBaseFromAddress(unsigned long)>:
c001cf94:	56                   	push   esi
c001cf95:	31 d2                	xor    edx,edx
c001cf97:	53                   	push   ebx
c001cf98:	8b 1d e0 08 03 c0    	mov    ebx,DWORD PTR ds:0xc00308e0
c001cf9e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001cfa2:	39 d3                	cmp    ebx,edx
c001cfa4:	7e 1b                	jle    c001cfc1 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001cfa6:	8b 04 95 00 0b 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffcf500]
c001cfad:	39 c8                	cmp    eax,ecx
c001cfaf:	77 0d                	ja     c001cfbe <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001cfb1:	8b 34 95 00 09 03 c0 	mov    esi,DWORD PTR [edx*4-0x3ffcf700]
c001cfb8:	01 c6                	add    esi,eax
c001cfba:	39 ce                	cmp    esi,ecx
c001cfbc:	77 05                	ja     c001cfc3 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001cfbe:	42                   	inc    edx
c001cfbf:	eb e1                	jmp    c001cfa2 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001cfc1:	31 c0                	xor    eax,eax
c001cfc3:	5b                   	pop    ebx
c001cfc4:	5e                   	pop    esi
c001cfc5:	c3                   	ret    

c001cfc6 <Thr::getDriverNameFromAddress(unsigned long)>:
c001cfc6:	53                   	push   ebx
c001cfc7:	31 c0                	xor    eax,eax
c001cfc9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001cfcd:	8b 1d e0 08 03 c0    	mov    ebx,DWORD PTR ds:0xc00308e0
c001cfd3:	39 c3                	cmp    ebx,eax
c001cfd5:	7e 22                	jle    c001cff9 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001cfd7:	8b 14 85 00 0b 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcf500]
c001cfde:	39 ca                	cmp    edx,ecx
c001cfe0:	77 14                	ja     c001cff6 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001cfe2:	03 14 85 00 09 03 c0 	add    edx,DWORD PTR [eax*4-0x3ffcf700]
c001cfe9:	39 ca                	cmp    edx,ecx
c001cfeb:	76 09                	jbe    c001cff6 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001cfed:	8b 04 85 00 0d 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf300]
c001cff4:	eb 05                	jmp    c001cffb <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001cff6:	40                   	inc    eax
c001cff7:	eb da                	jmp    c001cfd3 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001cff9:	31 c0                	xor    eax,eax
c001cffb:	5b                   	pop    ebx
c001cffc:	c3                   	ret    

c001cffd <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001cffd:	53                   	push   ebx
c001cffe:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001d002:	53                   	push   ebx
c001d003:	e8 8c ff ff ff       	call   c001cf94 <Thr::getDriverBaseFromAddress(unsigned long)>
c001d008:	5a                   	pop    edx
c001d009:	31 d2                	xor    edx,edx
c001d00b:	85 c0                	test   eax,eax
c001d00d:	74 04                	je     c001d013 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001d00f:	89 da                	mov    edx,ebx
c001d011:	29 c2                	sub    edx,eax
c001d013:	89 d0                	mov    eax,edx
c001d015:	5b                   	pop    ebx
c001d016:	c3                   	ret    

c001d017 <Thr::loadDLL(char const*, bool)>:
c001d017:	55                   	push   ebp
c001d018:	57                   	push   edi
c001d019:	56                   	push   esi
c001d01a:	53                   	push   ebx
c001d01b:	81 ec 34 01 00 00    	sub    esp,0x134
c001d021:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001d028:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c001d02f:	56                   	push   esi
c001d030:	68 92 b8 02 c0       	push   0xc002b892
c001d035:	e8 db 5a ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c001d03a:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001d041:	e8 00 28 ff ff       	call   c000f846 <malloc>
c001d046:	83 c4 0c             	add    esp,0xc
c001d049:	89 c3                	mov    ebx,eax
c001d04b:	ff 35 d4 10 03 c0    	push   DWORD PTR ds:0xc00310d4
c001d051:	56                   	push   esi
c001d052:	50                   	push   eax
c001d053:	e8 16 60 ff ff       	call   c001306e <File::File(char const*, Process*)>
c001d058:	83 c4 10             	add    esp,0x10
c001d05b:	85 db                	test   ebx,ebx
c001d05d:	75 3c                	jne    c001d09b <Thr::loadDLL(char const*, bool)+0x84>
c001d05f:	89 e8                	mov    eax,ebp
c001d061:	84 c0                	test   al,al
c001d063:	0f 84 d5 01 00 00    	je     c001d23e <Thr::loadDLL(char const*, bool)+0x227>
c001d069:	57                   	push   edi
c001d06a:	57                   	push   edi
c001d06b:	68 a3 b8 02 c0       	push   0xc002b8a3
c001d070:	8d 7c 24 2c          	lea    edi,[esp+0x2c]
c001d074:	57                   	push   edi
c001d075:	e8 ba 37 fe ff       	call   c0000834 <strcpy>
c001d07a:	58                   	pop    eax
c001d07b:	5a                   	pop    edx
c001d07c:	56                   	push   esi
c001d07d:	57                   	push   edi
c001d07e:	e8 f1 38 fe ff       	call   c0000974 <strcat>
c001d083:	59                   	pop    ecx
c001d084:	58                   	pop    eax
c001d085:	68 b6 b8 02 c0       	push   0xc002b8b6
c001d08a:	57                   	push   edi
c001d08b:	e8 e4 38 fe ff       	call   c0000974 <strcat>
c001d090:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d093:	e8 97 cf ff ff       	call   c001a02f <Krnl::panic(char const*)>
c001d098:	83 c4 10             	add    esp,0x10
c001d09b:	51                   	push   ecx
c001d09c:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001d0a0:	50                   	push   eax
c001d0a1:	8d 44 24 20          	lea    eax,[esp+0x20]
c001d0a5:	50                   	push   eax
c001d0a6:	53                   	push   ebx
c001d0a7:	e8 d2 62 ff ff       	call   c001337e <File::stat(unsigned long long*, bool*)>
c001d0ac:	83 c4 10             	add    esp,0x10
c001d0af:	85 db                	test   ebx,ebx
c001d0b1:	74 0c                	je     c001d0bf <Thr::loadDLL(char const*, bool)+0xa8>
c001d0b3:	83 ec 0c             	sub    esp,0xc
c001d0b6:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d0b8:	53                   	push   ebx
c001d0b9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d0bc:	83 c4 10             	add    esp,0x10
c001d0bf:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001d0c4:	75 0a                	jne    c001d0d0 <Thr::loadDLL(char const*, bool)+0xb9>
c001d0c6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d0ca:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001d0ce:	75 3c                	jne    c001d10c <Thr::loadDLL(char const*, bool)+0xf5>
c001d0d0:	89 e8                	mov    eax,ebp
c001d0d2:	84 c0                	test   al,al
c001d0d4:	0f 84 4c 01 00 00    	je     c001d226 <Thr::loadDLL(char const*, bool)+0x20f>
c001d0da:	51                   	push   ecx
c001d0db:	51                   	push   ecx
c001d0dc:	68 a3 b8 02 c0       	push   0xc002b8a3
c001d0e1:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001d0e5:	53                   	push   ebx
c001d0e6:	e8 49 37 fe ff       	call   c0000834 <strcpy>
c001d0eb:	5f                   	pop    edi
c001d0ec:	58                   	pop    eax
c001d0ed:	56                   	push   esi
c001d0ee:	53                   	push   ebx
c001d0ef:	e8 80 38 fe ff       	call   c0000974 <strcat>
c001d0f4:	58                   	pop    eax
c001d0f5:	5a                   	pop    edx
c001d0f6:	68 b6 b8 02 c0       	push   0xc002b8b6
c001d0fb:	53                   	push   ebx
c001d0fc:	e8 73 38 fe ff       	call   c0000974 <strcat>
c001d101:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d104:	e8 26 cf ff ff       	call   c001a02f <Krnl::panic(char const*)>
c001d109:	83 c4 10             	add    esp,0x10
c001d10c:	e8 a4 4b ff ff       	call   c0011cb5 <Virt::getAKernelVAS()>
c001d111:	51                   	push   ecx
c001d112:	6a 03                	push   0x3
c001d114:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001d118:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001d11c:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c001d122:	83 d3 00             	adc    ebx,0x0
c001d125:	89 ca                	mov    edx,ecx
c001d127:	89 d1                	mov    ecx,edx
c001d129:	0f ac d9 0c          	shrd   ecx,ebx,0xc
c001d12d:	51                   	push   ecx
c001d12e:	50                   	push   eax
c001d12f:	e8 bc 51 ff ff       	call   c00122f0 <VAS::allocatePages(int, int)>
c001d134:	5f                   	pop    edi
c001d135:	89 c3                	mov    ebx,eax
c001d137:	58                   	pop    eax
c001d138:	53                   	push   ebx
c001d139:	68 b8 b8 02 c0       	push   0xc002b8b8
c001d13e:	e8 d2 59 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c001d143:	89 34 24             	mov    DWORD PTR [esp],esi
c001d146:	e8 49 36 fe ff       	call   c0000794 <strlen>
c001d14b:	8b 3d e0 08 03 c0    	mov    edi,DWORD PTR ds:0xc00308e0
c001d151:	40                   	inc    eax
c001d152:	89 04 24             	mov    DWORD PTR [esp],eax
c001d155:	e8 ec 26 ff ff       	call   c000f846 <malloc>
c001d15a:	89 04 bd 00 0d 03 c0 	mov    DWORD PTR [edi*4-0x3ffcf300],eax
c001d161:	58                   	pop    eax
c001d162:	a1 e0 08 03 c0       	mov    eax,ds:0xc00308e0
c001d167:	5a                   	pop    edx
c001d168:	56                   	push   esi
c001d169:	ff 34 85 00 0d 03 c0 	push   DWORD PTR [eax*4-0x3ffcf300]
c001d170:	e8 bf 36 fe ff       	call   c0000834 <strcpy>
c001d175:	a1 e0 08 03 c0       	mov    eax,ds:0xc00308e0
c001d17a:	8d 50 01             	lea    edx,[eax+0x1]
c001d17d:	89 1c 85 00 0b 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf500],ebx
c001d184:	89 15 e0 08 03 c0    	mov    DWORD PTR ds:0xc00308e0,edx
c001d18a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d18e:	83 c4 0c             	add    esp,0xc
c001d191:	89 14 85 00 09 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf700],edx
c001d198:	6a 01                	push   0x1
c001d19a:	53                   	push   ebx
c001d19b:	56                   	push   esi
c001d19c:	e8 d7 f6 ff ff       	call   c001c878 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001d1a1:	83 c4 10             	add    esp,0x10
c001d1a4:	89 c7                	mov    edi,eax
c001d1a6:	84 c0                	test   al,al
c001d1a8:	0f 85 8c 00 00 00    	jne    c001d23a <Thr::loadDLL(char const*, bool)+0x223>
c001d1ae:	89 e8                	mov    eax,ebp
c001d1b0:	84 c0                	test   al,al
c001d1b2:	74 76                	je     c001d22a <Thr::loadDLL(char const*, bool)+0x213>
c001d1b4:	83 ec 0c             	sub    esp,0xc
c001d1b7:	68 c5 b8 02 c0       	push   0xc002b8c5
c001d1bc:	e8 6e ce ff ff       	call   c001a02f <Krnl::panic(char const*)>
c001d1c1:	83 c4 10             	add    esp,0x10
c001d1c4:	eb 64                	jmp    c001d22a <Thr::loadDLL(char const*, bool)+0x213>
c001d1c6:	e8 ea 4a ff ff       	call   c0011cb5 <Virt::getAKernelVAS()>
c001d1cb:	89 f5                	mov    ebp,esi
c001d1cd:	c1 e5 0c             	shl    ebp,0xc
c001d1d0:	52                   	push   edx
c001d1d1:	01 dd                	add    ebp,ebx
c001d1d3:	52                   	push   edx
c001d1d4:	55                   	push   ebp
c001d1d5:	50                   	push   eax
c001d1d6:	e8 8f 4c ff ff       	call   c0011e6a <VAS::getPageTableEntry(unsigned long)>
c001d1db:	83 c4 10             	add    esp,0x10
c001d1de:	f6 00 60             	test   BYTE PTR [eax],0x60
c001d1e1:	75 0c                	jne    c001d1ef <Thr::loadDLL(char const*, bool)+0x1d8>
c001d1e3:	83 ec 0c             	sub    esp,0xc
c001d1e6:	55                   	push   ebp
c001d1e7:	e8 6d 2c ff ff       	call   c000fe59 <Phys::freePage(unsigned long)>
c001d1ec:	83 c4 10             	add    esp,0x10
c001d1ef:	46                   	inc    esi
c001d1f0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d1f4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d1f8:	05 ff 0f 00 00       	add    eax,0xfff
c001d1fd:	83 d2 00             	adc    edx,0x0
c001d200:	0f ac d0 0c          	shrd   eax,edx,0xc
c001d204:	c1 ea 0c             	shr    edx,0xc
c001d207:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d20b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001d20f:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c001d213:	ba 00 00 00 00       	mov    edx,0x0
c001d218:	89 d0                	mov    eax,edx
c001d21a:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c001d21e:	72 a6                	jb     c001d1c6 <Thr::loadDLL(char const*, bool)+0x1af>
c001d220:	89 f8                	mov    eax,edi
c001d222:	84 c0                	test   al,al
c001d224:	75 18                	jne    c001d23e <Thr::loadDLL(char const*, bool)+0x227>
c001d226:	31 db                	xor    ebx,ebx
c001d228:	eb 14                	jmp    c001d23e <Thr::loadDLL(char const*, bool)+0x227>
c001d22a:	83 ec 0c             	sub    esp,0xc
c001d22d:	68 e4 b8 02 c0       	push   0xc002b8e4
c001d232:	e8 f8 cd ff ff       	call   c001a02f <Krnl::panic(char const*)>
c001d237:	83 c4 10             	add    esp,0x10
c001d23a:	31 f6                	xor    esi,esi
c001d23c:	eb b2                	jmp    c001d1f0 <Thr::loadDLL(char const*, bool)+0x1d9>
c001d23e:	81 c4 2c 01 00 00    	add    esp,0x12c
c001d244:	89 d8                	mov    eax,ebx
c001d246:	5b                   	pop    ebx
c001d247:	5e                   	pop    esi
c001d248:	5f                   	pop    edi
c001d249:	5d                   	pop    ebp
c001d24a:	c3                   	ret    

c001d24b <Thr::executeDLL(unsigned long, void*)>:
c001d24b:	56                   	push   esi
c001d24c:	53                   	push   ebx
c001d24d:	52                   	push   edx
c001d24e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d252:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001d256:	85 db                	test   ebx,ebx
c001d258:	75 10                	jne    c001d26a <Thr::executeDLL(unsigned long, void*)+0x1f>
c001d25a:	83 ec 0c             	sub    esp,0xc
c001d25d:	68 00 b9 02 c0       	push   0xc002b900
c001d262:	e8 c8 cd ff ff       	call   c001a02f <Krnl::panic(char const*)>
c001d267:	83 c4 10             	add    esp,0x10
c001d26a:	50                   	push   eax
c001d26b:	50                   	push   eax
c001d26c:	53                   	push   ebx
c001d26d:	68 2a b9 02 c0       	push   0xc002b92a
c001d272:	e8 9e 58 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c001d277:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001d27b:	89 d8                	mov    eax,ebx
c001d27d:	83 c4 14             	add    esp,0x14
c001d280:	5b                   	pop    ebx
c001d281:	5e                   	pop    esi
c001d282:	ff e0                	jmp    eax

c001d284 <changeTSS>:
c001d284:	83 ec 14             	sub    esp,0x14
c001d287:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d28c:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001d28f:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001d294:	c1 e2 15             	shl    edx,0x15
c001d297:	29 d0                	sub    eax,edx
c001d299:	50                   	push   eax
c001d29a:	a1 68 db 02 c0       	mov    eax,ds:0xc002db68
c001d29f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d2a5:	05 7c 11 00 00       	add    eax,0x117c
c001d2aa:	50                   	push   eax
c001d2ab:	e8 b4 41 ff ff       	call   c0011464 <TSS::setESP(unsigned long)>
c001d2b0:	83 c4 1c             	add    esp,0x1c
c001d2b3:	c3                   	ret    

c001d2b4 <Process::addArgs(char**)>:
c001d2b4:	57                   	push   edi
c001d2b5:	56                   	push   esi
c001d2b6:	53                   	push   ebx
c001d2b7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d2bb:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001d2bf:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c001d2c9:	85 ff                	test   edi,edi
c001d2cb:	74 3d                	je     c001d30a <Process::addArgs(char**)+0x56>
c001d2cd:	8b 07                	mov    eax,DWORD PTR [edi]
c001d2cf:	85 c0                	test   eax,eax
c001d2d1:	74 37                	je     c001d30a <Process::addArgs(char**)+0x56>
c001d2d3:	31 db                	xor    ebx,ebx
c001d2d5:	83 ec 0c             	sub    esp,0xc
c001d2d8:	50                   	push   eax
c001d2d9:	e8 b6 34 fe ff       	call   c0000794 <strlen>
c001d2de:	40                   	inc    eax
c001d2df:	89 04 24             	mov    DWORD PTR [esp],eax
c001d2e2:	e8 5f 25 ff ff       	call   c000f846 <malloc>
c001d2e7:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c001d2ee:	5a                   	pop    edx
c001d2ef:	59                   	pop    ecx
c001d2f0:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c001d2f3:	43                   	inc    ebx
c001d2f4:	50                   	push   eax
c001d2f5:	e8 3a 35 fe ff       	call   c0000834 <strcpy>
c001d2fa:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c001d300:	83 c4 10             	add    esp,0x10
c001d303:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001d306:	85 c0                	test   eax,eax
c001d308:	75 cb                	jne    c001d2d5 <Process::addArgs(char**)+0x21>
c001d30a:	5b                   	pop    ebx
c001d30b:	5e                   	pop    esi
c001d30c:	5f                   	pop    edi
c001d30d:	c3                   	ret    

c001d30e <Process::Process(char const*, Process*, char**)>:
c001d30e:	56                   	push   esi
c001d30f:	53                   	push   ebx
c001d310:	83 ec 14             	sub    esp,0x14
c001d313:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d317:	05 0c 02 00 00       	add    eax,0x20c
c001d31c:	bb 07 00 00 00       	mov    ebx,0x7
c001d321:	89 c6                	mov    esi,eax
c001d323:	85 db                	test   ebx,ebx
c001d325:	78 12                	js     c001d339 <Process::Process(char const*, Process*, char**)+0x2b>
c001d327:	83 ec 0c             	sub    esp,0xc
c001d32a:	56                   	push   esi
c001d32b:	e8 22 b2 00 00       	call   c0028552 <ThreadControlBlock::ThreadControlBlock()>
c001d330:	83 c4 10             	add    esp,0x10
c001d333:	83 c6 63             	add    esi,0x63
c001d336:	4b                   	dec    ebx
c001d337:	eb ea                	jmp    c001d323 <Process::Process(char const*, Process*, char**)+0x15>
c001d339:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d33d:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001d344:	83 ec 0c             	sub    esp,0xc
c001d347:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d34b:	e8 30 cb ff ff       	call   c0019e80 <Krnl::newProcessEnv(Process*)>
c001d350:	83 c4 10             	add    esp,0x10
c001d353:	89 c2                	mov    edx,eax
c001d355:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d359:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001d35f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d363:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001d36c:	a1 f0 d0 02 c0       	mov    eax,ds:0xc002d0f0
c001d371:	8d 50 01             	lea    edx,[eax+0x1]
c001d374:	89 15 f0 d0 02 c0    	mov    DWORD PTR ds:0xc002d0f0,edx
c001d37a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d37e:	89 02                	mov    DWORD PTR [edx],eax
c001d380:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c001d388:	83 ec 0c             	sub    esp,0xc
c001d38b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d38f:	e8 b2 24 ff ff       	call   c000f846 <malloc>
c001d394:	83 c4 10             	add    esp,0x10
c001d397:	89 c3                	mov    ebx,eax
c001d399:	83 ec 08             	sub    esp,0x8
c001d39c:	6a 00                	push   0x0
c001d39e:	53                   	push   ebx
c001d39f:	e8 f4 52 ff ff       	call   c0012698 <VAS::VAS(bool)>
c001d3a4:	83 c4 10             	add    esp,0x10
c001d3a7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d3ab:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001d3b1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d3b5:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001d3bf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d3c3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d3c7:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001d3cd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d3d1:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d3d7:	85 c0                	test   eax,eax
c001d3d9:	74 42                	je     c001d41d <Process::Process(char const*, Process*, char**)+0x10f>
c001d3db:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d3df:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d3e5:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001d3eb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d3ef:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001d3f5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d3f9:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d3ff:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001d405:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d409:	05 0c 01 00 00       	add    eax,0x10c
c001d40e:	83 ec 08             	sub    esp,0x8
c001d411:	52                   	push   edx
c001d412:	50                   	push   eax
c001d413:	e8 1c 34 fe ff       	call   c0000834 <strcpy>
c001d418:	83 c4 10             	add    esp,0x10
c001d41b:	eb 63                	jmp    c001d480 <Process::Process(char const*, Process*, char**)+0x172>
c001d41d:	c7 44 24 04 60 12 00 00 	mov    DWORD PTR [esp+0x4],0x1260
c001d425:	83 ec 0c             	sub    esp,0xc
c001d428:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001d42c:	e8 15 24 ff ff       	call   c000f846 <malloc>
c001d431:	83 c4 10             	add    esp,0x10
c001d434:	89 c3                	mov    ebx,eax
c001d436:	83 ec 08             	sub    esp,0x8
c001d439:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d43d:	53                   	push   ebx
c001d43e:	e8 1f 3d ff ff       	call   c0011162 <VgaText::VgaText(char const*)>
c001d443:	83 c4 10             	add    esp,0x10
c001d446:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d44a:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001d450:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d454:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001d45a:	83 ec 0c             	sub    esp,0xc
c001d45d:	50                   	push   eax
c001d45e:	e8 f2 30 ff ff       	call   c0010555 <addToTerminalCycle(VgaText*)>
c001d463:	83 c4 10             	add    esp,0x10
c001d466:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d46a:	05 0c 01 00 00       	add    eax,0x10c
c001d46f:	83 ec 08             	sub    esp,0x8
c001d472:	68 49 b9 02 c0       	push   0xc002b949
c001d477:	50                   	push   eax
c001d478:	e8 b7 33 fe ff       	call   c0000834 <strcpy>
c001d47d:	83 c4 10             	add    esp,0x10
c001d480:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d484:	83 c0 0c             	add    eax,0xc
c001d487:	83 ec 08             	sub    esp,0x8
c001d48a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d48e:	50                   	push   eax
c001d48f:	e8 a0 33 fe ff       	call   c0000834 <strcpy>
c001d494:	83 c4 10             	add    esp,0x10
c001d497:	83 ec 08             	sub    esp,0x8
c001d49a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001d49e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d4a2:	e8 0d fe ff ff       	call   c001d2b4 <Process::addArgs(char**)>
c001d4a7:	83 c4 10             	add    esp,0x10
c001d4aa:	83 ec 08             	sub    esp,0x8
c001d4ad:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d4b1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d4b5:	e8 88 ee ff ff       	call   c001c342 <Thr::loadProgramIntoMemory(Process*, char const*)>
c001d4ba:	83 c4 10             	add    esp,0x10
c001d4bd:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001d4c1:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001d4c5:	83 f0 01             	xor    eax,0x1
c001d4c8:	88 c2                	mov    dl,al
c001d4ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d4ce:	88 90 3e 07 00 00    	mov    BYTE PTR [eax+0x73e],dl
c001d4d4:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001d4d9:	83 ec 08             	sub    esp,0x8
c001d4dc:	50                   	push   eax
c001d4dd:	68 44 ba 02 c0       	push   0xc002ba44
c001d4e2:	e8 2e 56 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c001d4e7:	83 c4 10             	add    esp,0x10
c001d4ea:	90                   	nop
c001d4eb:	83 c4 14             	add    esp,0x14
c001d4ee:	5b                   	pop    ebx
c001d4ef:	5e                   	pop    esi
c001d4f0:	c3                   	ret    
c001d4f1:	90                   	nop

c001d4f2 <Process::Process(bool, char const*, Process*, char**)>:
c001d4f2:	56                   	push   esi
c001d4f3:	53                   	push   ebx
c001d4f4:	83 ec 24             	sub    esp,0x24
c001d4f7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d4fb:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001d4ff:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d503:	05 0c 02 00 00       	add    eax,0x20c
c001d508:	bb 07 00 00 00       	mov    ebx,0x7
c001d50d:	89 c6                	mov    esi,eax
c001d50f:	85 db                	test   ebx,ebx
c001d511:	78 12                	js     c001d525 <Process::Process(bool, char const*, Process*, char**)+0x33>
c001d513:	83 ec 0c             	sub    esp,0xc
c001d516:	56                   	push   esi
c001d517:	e8 36 b0 00 00       	call   c0028552 <ThreadControlBlock::ThreadControlBlock()>
c001d51c:	83 c4 10             	add    esp,0x10
c001d51f:	83 c6 63             	add    esi,0x63
c001d522:	4b                   	dec    ebx
c001d523:	eb ea                	jmp    c001d50f <Process::Process(bool, char const*, Process*, char**)+0x1d>
c001d525:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d529:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001d530:	83 ec 0c             	sub    esp,0xc
c001d533:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d537:	e8 44 c9 ff ff       	call   c0019e80 <Krnl::newProcessEnv(Process*)>
c001d53c:	83 c4 10             	add    esp,0x10
c001d53f:	89 c2                	mov    edx,eax
c001d541:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d545:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001d54b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d54f:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001d558:	a1 f0 d0 02 c0       	mov    eax,ds:0xc002d0f0
c001d55d:	8d 50 01             	lea    edx,[eax+0x1]
c001d560:	89 15 f0 d0 02 c0    	mov    DWORD PTR ds:0xc002d0f0,edx
c001d566:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d56a:	89 02                	mov    DWORD PTR [edx],eax
c001d56c:	c7 44 24 1c 10 00 00 00 	mov    DWORD PTR [esp+0x1c],0x10
c001d574:	83 ec 0c             	sub    esp,0xc
c001d577:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001d57b:	e8 c6 22 ff ff       	call   c000f846 <malloc>
c001d580:	83 c4 10             	add    esp,0x10
c001d583:	89 c3                	mov    ebx,eax
c001d585:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001d58a:	83 ec 08             	sub    esp,0x8
c001d58d:	50                   	push   eax
c001d58e:	53                   	push   ebx
c001d58f:	e8 04 51 ff ff       	call   c0012698 <VAS::VAS(bool)>
c001d594:	83 c4 10             	add    esp,0x10
c001d597:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d59b:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001d5a1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d5a5:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001d5af:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d5b3:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001d5b7:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001d5bd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d5c1:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d5c7:	85 c0                	test   eax,eax
c001d5c9:	74 42                	je     c001d60d <Process::Process(bool, char const*, Process*, char**)+0x11b>
c001d5cb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d5cf:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d5d5:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001d5db:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d5df:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001d5e5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d5e9:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d5ef:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001d5f5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d5f9:	05 0c 01 00 00       	add    eax,0x10c
c001d5fe:	83 ec 08             	sub    esp,0x8
c001d601:	52                   	push   edx
c001d602:	50                   	push   eax
c001d603:	e8 2c 32 fe ff       	call   c0000834 <strcpy>
c001d608:	83 c4 10             	add    esp,0x10
c001d60b:	eb 63                	jmp    c001d670 <Process::Process(bool, char const*, Process*, char**)+0x17e>
c001d60d:	c7 44 24 18 60 12 00 00 	mov    DWORD PTR [esp+0x18],0x1260
c001d615:	83 ec 0c             	sub    esp,0xc
c001d618:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001d61c:	e8 25 22 ff ff       	call   c000f846 <malloc>
c001d621:	83 c4 10             	add    esp,0x10
c001d624:	89 c3                	mov    ebx,eax
c001d626:	83 ec 08             	sub    esp,0x8
c001d629:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001d62d:	53                   	push   ebx
c001d62e:	e8 2f 3b ff ff       	call   c0011162 <VgaText::VgaText(char const*)>
c001d633:	83 c4 10             	add    esp,0x10
c001d636:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d63a:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001d640:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d644:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001d64a:	83 ec 0c             	sub    esp,0xc
c001d64d:	50                   	push   eax
c001d64e:	e8 02 2f ff ff       	call   c0010555 <addToTerminalCycle(VgaText*)>
c001d653:	83 c4 10             	add    esp,0x10
c001d656:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d65a:	05 0c 01 00 00       	add    eax,0x10c
c001d65f:	83 ec 08             	sub    esp,0x8
c001d662:	68 49 b9 02 c0       	push   0xc002b949
c001d667:	50                   	push   eax
c001d668:	e8 c7 31 fe ff       	call   c0000834 <strcpy>
c001d66d:	83 c4 10             	add    esp,0x10
c001d670:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d674:	83 c0 0c             	add    eax,0xc
c001d677:	83 ec 08             	sub    esp,0x8
c001d67a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001d67e:	50                   	push   eax
c001d67f:	e8 b0 31 fe ff       	call   c0000834 <strcpy>
c001d684:	83 c4 10             	add    esp,0x10
c001d687:	83 ec 08             	sub    esp,0x8
c001d68a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001d68e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d692:	e8 1d fc ff ff       	call   c001d2b4 <Process::addArgs(char**)>
c001d697:	83 c4 10             	add    esp,0x10
c001d69a:	90                   	nop
c001d69b:	83 c4 24             	add    esp,0x24
c001d69e:	5b                   	pop    ebx
c001d69f:	5e                   	pop    esi
c001d6a0:	c3                   	ret    

c001d6a1 <disableIRQs()>:
c001d6a1:	fa                   	cli    
c001d6a2:	ff 05 ac 10 03 c0    	inc    DWORD PTR ds:0xc00310ac
c001d6a8:	c3                   	ret    

c001d6a9 <getIRQNestingLevel()>:
c001d6a9:	a1 ac 10 03 c0       	mov    eax,ds:0xc00310ac
c001d6ae:	c3                   	ret    

c001d6af <enableIRQs()>:
c001d6af:	a1 ac 10 03 c0       	mov    eax,ds:0xc00310ac
c001d6b4:	48                   	dec    eax
c001d6b5:	a3 ac 10 03 c0       	mov    ds:0xc00310ac,eax
c001d6ba:	75 01                	jne    c001d6bd <enableIRQs()+0xe>
c001d6bc:	fb                   	sti    
c001d6bd:	c3                   	ret    

c001d6be <lockScheduler()>:
c001d6be:	eb e1                	jmp    c001d6a1 <disableIRQs()>

c001d6c0 <unlockScheduler()>:
c001d6c0:	eb ed                	jmp    c001d6af <enableIRQs()>

c001d6c2 <userModeEntryPoint(void*)>:
c001d6c2:	83 ec 0c             	sub    esp,0xc
c001d6c5:	e8 f6 ff ff ff       	call   c001d6c0 <unlockScheduler()>
c001d6ca:	fb                   	sti    
c001d6cb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d6d0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001d6d3:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c001d6d9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d6dd:	83 c4 0c             	add    esp,0xc
c001d6e0:	e9 45 2c fe ff       	jmp    c000032a <goToUsermode>

c001d6e5 <lockStuff()>:
c001d6e5:	e8 b7 ff ff ff       	call   c001d6a1 <disableIRQs()>
c001d6ea:	ff 05 a8 10 03 c0    	inc    DWORD PTR ds:0xc00310a8
c001d6f0:	c3                   	ret    

c001d6f1 <taskStartupFunction>:
c001d6f1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d6f6:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001d6f9:	c3                   	ret    

c001d6fa <updateTimeUsed()>:
c001d6fa:	a1 68 db 02 c0       	mov    eax,ds:0xc002db68
c001d6ff:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d705:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001d70c:	74 50                	je     c001d75e <updateTimeUsed()+0x64>
c001d70e:	57                   	push   edi
c001d70f:	56                   	push   esi
c001d710:	53                   	push   ebx
c001d711:	0f 31                	rdtsc  
c001d713:	89 c1                	mov    ecx,eax
c001d715:	a3 e8 10 03 c0       	mov    ds:0xc00310e8,eax
c001d71a:	2b 0d d8 10 03 c0    	sub    ecx,DWORD PTR ds:0xc00310d8
c001d720:	89 d3                	mov    ebx,edx
c001d722:	89 0d e0 10 03 c0    	mov    DWORD PTR ds:0xc00310e0,ecx
c001d728:	1b 1d dc 10 03 c0    	sbb    ebx,DWORD PTR ds:0xc00310dc
c001d72e:	a3 d8 10 03 c0       	mov    ds:0xc00310d8,eax
c001d733:	89 1d e4 10 03 c0    	mov    DWORD PTR ds:0xc00310e4,ebx
c001d739:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d73e:	89 15 ec 10 03 c0    	mov    DWORD PTR ds:0xc00310ec,edx
c001d744:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c001d747:	89 15 dc 10 03 c0    	mov    DWORD PTR ds:0xc00310dc,edx
c001d74d:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c001d750:	01 f1                	add    ecx,esi
c001d752:	89 48 10             	mov    DWORD PTR [eax+0x10],ecx
c001d755:	11 fb                	adc    ebx,edi
c001d757:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c001d75a:	5b                   	pop    ebx
c001d75b:	5e                   	pop    esi
c001d75c:	5f                   	pop    edi
c001d75d:	c3                   	ret    
c001d75e:	c3                   	ret    

c001d75f <switchToThread(ThreadControlBlock*)>:
c001d75f:	53                   	push   ebx
c001d760:	83 ec 08             	sub    esp,0x8
c001d763:	a1 a8 10 03 c0       	mov    eax,ds:0xc00310a8
c001d768:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d76c:	85 c0                	test   eax,eax
c001d76e:	75 30                	jne    c001d7a0 <switchToThread(ThreadControlBlock*)+0x41>
c001d770:	8a 43 44             	mov    al,BYTE PTR [ebx+0x44]
c001d773:	3c ff                	cmp    al,0xff
c001d775:	74 25                	je     c001d79c <switchToThread(ThreadControlBlock*)+0x3d>
c001d777:	0f b6 d0             	movzx  edx,al
c001d77a:	b8 84 03 00 00       	mov    eax,0x384
c001d77f:	29 d0                	sub    eax,edx
c001d781:	c1 e0 10             	shl    eax,0x10
c001d784:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c001d787:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c001d78a:	e8 6b ff ff ff       	call   c001d6fa <updateTimeUsed()>
c001d78f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001d793:	83 c4 08             	add    esp,0x8
c001d796:	5b                   	pop    ebx
c001d797:	e9 c6 2b fe ff       	jmp    c0000362 <switchToThreadASM>
c001d79c:	31 c0                	xor    eax,eax
c001d79e:	eb e7                	jmp    c001d787 <switchToThread(ThreadControlBlock*)+0x28>
c001d7a0:	c7 05 a4 10 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00310a4,0x1
c001d7aa:	83 c4 08             	add    esp,0x8
c001d7ad:	5b                   	pop    ebx
c001d7ae:	c3                   	ret    
c001d7af:	90                   	nop

c001d7b0 <Semaphore::Semaphore(int)>:
c001d7b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d7b4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d7b8:	89 10                	mov    DWORD PTR [eax],edx
c001d7ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d7be:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001d7c5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d7c9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001d7d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d7d4:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001d7db:	90                   	nop
c001d7dc:	c3                   	ret    
c001d7dd:	90                   	nop

c001d7de <Mutex::Mutex()>:
c001d7de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d7e2:	6a 01                	push   0x1
c001d7e4:	50                   	push   eax
c001d7e5:	e8 c6 ff ff ff       	call   c001d7b0 <Semaphore::Semaphore(int)>
c001d7ea:	83 c4 08             	add    esp,0x8
c001d7ed:	90                   	nop
c001d7ee:	c3                   	ret    
c001d7ef:	90                   	nop

c001d7f0 <Process::createThread(void (*)(void*), void*, int)>:
c001d7f0:	55                   	push   ebp
c001d7f1:	31 c9                	xor    ecx,ecx
c001d7f3:	57                   	push   edi
c001d7f4:	56                   	push   esi
c001d7f5:	53                   	push   ebx
c001d7f6:	83 ec 1c             	sub    esp,0x1c
c001d7f9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d7fd:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c001d804:	89 f2                	mov    edx,esi
c001d806:	0f b7 c2             	movzx  eax,dx
c001d809:	83 e2 01             	and    edx,0x1
c001d80c:	74 14                	je     c001d822 <Process::createThread(void (*)(void*), void*, int)+0x32>
c001d80e:	d1 f8                	sar    eax,1
c001d810:	41                   	inc    ecx
c001d811:	89 c2                	mov    edx,eax
c001d813:	83 f9 10             	cmp    ecx,0x10
c001d816:	75 ee                	jne    c001d806 <Process::createThread(void (*)(void*), void*, int)+0x16>
c001d818:	83 c4 1c             	add    esp,0x1c
c001d81b:	31 c0                	xor    eax,eax
c001d81d:	5b                   	pop    ebx
c001d81e:	5e                   	pop    esi
c001d81f:	5f                   	pop    edi
c001d820:	5d                   	pop    ebp
c001d821:	c3                   	ret    
c001d822:	83 ec 08             	sub    esp,0x8
c001d825:	b8 01 00 00 00       	mov    eax,0x1
c001d82a:	d3 e0                	shl    eax,cl
c001d82c:	09 c6                	or     esi,eax
c001d82e:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001d834:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c001d83b:	8d 34 09             	lea    esi,[ecx+ecx*1]
c001d83e:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001d841:	01 ce                	add    esi,ecx
c001d843:	89 f0                	mov    eax,esi
c001d845:	c1 e0 05             	shl    eax,0x5
c001d848:	01 c6                	add    esi,eax
c001d84a:	8d 04 33             	lea    eax,[ebx+esi*1]
c001d84d:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c001d853:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c001d859:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001d85d:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c001d863:	89 90 51 02 00 00    	mov    DWORD PTR [eax+0x251],edx
c001d869:	89 ca                	mov    edx,ecx
c001d86b:	f7 da                	neg    edx
c001d86d:	c1 e2 15             	shl    edx,0x15
c001d870:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c001d876:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c001d87c:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001d880:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001d88a:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c001d890:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001d894:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c001d89a:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001d8a4:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001d8ae:	8d 84 33 0c 02 00 00 	lea    eax,[ebx+esi*1+0x20c]
c001d8b5:	50                   	push   eax
c001d8b6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d8ba:	68 c8 10 03 c0       	push   0xc00310c8
c001d8bf:	e8 1c ab 00 00       	call   c00283e0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001d8c4:	83 c4 10             	add    esp,0x10
c001d8c7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d8cb:	83 c4 1c             	add    esp,0x1c
c001d8ce:	5b                   	pop    ebx
c001d8cf:	5e                   	pop    esi
c001d8d0:	5f                   	pop    edi
c001d8d1:	5d                   	pop    ebp
c001d8d2:	c3                   	ret    
c001d8d3:	90                   	nop

c001d8d4 <Process::createUserThread()>:
c001d8d4:	83 ec 0c             	sub    esp,0xc
c001d8d7:	68 80 00 00 00       	push   0x80
c001d8dc:	6a 00                	push   0x0
c001d8de:	68 c2 d6 01 c0       	push   0xc001d6c2
c001d8e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d8e7:	e8 04 ff ff ff       	call   c001d7f0 <Process::createThread(void (*)(void*), void*, int)>
c001d8ec:	83 c4 1c             	add    esp,0x1c
c001d8ef:	c3                   	ret    

c001d8f0 <setupMultitasking(void (*)())>:
c001d8f0:	56                   	push   esi
c001d8f1:	53                   	push   ebx
c001d8f2:	53                   	push   ebx
c001d8f3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d8f7:	eb 10                	jmp    c001d909 <setupMultitasking(void (*)())+0x19>
c001d8f9:	83 ec 0c             	sub    esp,0xc
c001d8fc:	68 c8 10 03 c0       	push   0xc00310c8
c001d901:	e8 2c aa 00 00       	call   c0028332 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001d906:	83 c4 10             	add    esp,0x10
c001d909:	83 ec 0c             	sub    esp,0xc
c001d90c:	68 c8 10 03 c0       	push   0xc00310c8
c001d911:	e8 00 aa 00 00       	call   c0028316 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001d916:	83 c4 10             	add    esp,0x10
c001d919:	84 c0                	test   al,al
c001d91b:	74 dc                	je     c001d8f9 <setupMultitasking(void (*)())+0x9>
c001d91d:	83 ec 0c             	sub    esp,0xc
c001d920:	68 3f 07 00 00       	push   0x73f
c001d925:	e8 1c 1f ff ff       	call   c000f846 <malloc>
c001d92a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d931:	89 c3                	mov    ebx,eax
c001d933:	6a 00                	push   0x0
c001d935:	68 4d b9 02 c0       	push   0xc002b94d
c001d93a:	6a 01                	push   0x1
c001d93c:	50                   	push   eax
c001d93d:	e8 b0 fb ff ff       	call   c001d4f2 <Process::Process(bool, char const*, Process*, char**)>
c001d942:	83 c4 18             	add    esp,0x18
c001d945:	89 1d d4 10 03 c0    	mov    DWORD PTR ds:0xc00310d4,ebx
c001d94b:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001d951:	68 6c ba 02 c0       	push   0xc002ba6c
c001d956:	e8 ba 51 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c001d95b:	58                   	pop    eax
c001d95c:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001d962:	e8 70 33 ff ff       	call   c0010cd7 <setActiveTerminal(VgaText*)>
c001d967:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c001d96f:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001d975:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001d978:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c001d982:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001d988:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c001d98e:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001d998:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c001d9a2:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001d9ac:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001d9b2:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001d9b8:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001d9c2:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001d9c8:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001d9d2:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001d9d8:	5a                   	pop    edx
c001d9d9:	59                   	pop    ecx
c001d9da:	68 49 b9 02 c0       	push   0xc002b949
c001d9df:	50                   	push   eax
c001d9e0:	e8 4f 2e fe ff       	call   c0000834 <strcpy>
c001d9e5:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c001d9ec:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001d9f0:	83 c4 14             	add    esp,0x14
c001d9f3:	5b                   	pop    ebx
c001d9f4:	5e                   	pop    esi
c001d9f5:	e9 5a 29 fe ff       	jmp    c0000354 <switchToThreadASMFirstTime>

c001d9fa <schedule()>:
c001d9fa:	a1 a8 10 03 c0       	mov    eax,ds:0xc00310a8
c001d9ff:	85 c0                	test   eax,eax
c001da01:	74 0b                	je     c001da0e <schedule()+0x14>
c001da03:	c7 05 a4 10 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00310a4,0x1
c001da0d:	c3                   	ret    
c001da0e:	53                   	push   ebx
c001da0f:	83 ec 14             	sub    esp,0x14
c001da12:	68 c8 10 03 c0       	push   0xc00310c8
c001da17:	e8 fa a8 00 00       	call   c0028316 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001da1c:	83 c4 10             	add    esp,0x10
c001da1f:	84 c0                	test   al,al
c001da21:	75 38                	jne    c001da5b <schedule()+0x61>
c001da23:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001da28:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001da2b:	4a                   	dec    edx
c001da2c:	74 32                	je     c001da60 <schedule()+0x66>
c001da2e:	83 ec 0c             	sub    esp,0xc
c001da31:	68 c8 10 03 c0       	push   0xc00310c8
c001da36:	e8 d3 a8 00 00       	call   c002830e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001da3b:	c7 04 24 c8 10 03 c0 	mov    DWORD PTR [esp],0xc00310c8
c001da42:	89 c3                	mov    ebx,eax
c001da44:	e8 e9 a8 00 00       	call   c0028332 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001da49:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001da50:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001da53:	e8 07 fd ff ff       	call   c001d75f <switchToThread(ThreadControlBlock*)>
c001da58:	83 c4 10             	add    esp,0x10
c001da5b:	83 c4 08             	add    esp,0x8
c001da5e:	5b                   	pop    ebx
c001da5f:	c3                   	ret    
c001da60:	83 ec 08             	sub    esp,0x8
c001da63:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001da6a:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001da70:	68 c8 10 03 c0       	push   0xc00310c8
c001da75:	e8 66 a9 00 00       	call   c00283e0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001da7a:	83 c4 10             	add    esp,0x10
c001da7d:	eb af                	jmp    c001da2e <schedule()+0x34>

c001da7f <unlockStuff()>:
c001da7f:	a1 a8 10 03 c0       	mov    eax,ds:0xc00310a8
c001da84:	48                   	dec    eax
c001da85:	a3 a8 10 03 c0       	mov    ds:0xc00310a8,eax
c001da8a:	75 09                	jne    c001da95 <unlockStuff()+0x16>
c001da8c:	a1 a4 10 03 c0       	mov    eax,ds:0xc00310a4
c001da91:	85 c0                	test   eax,eax
c001da93:	75 05                	jne    c001da9a <unlockStuff()+0x1b>
c001da95:	e9 15 fc ff ff       	jmp    c001d6af <enableIRQs()>
c001da9a:	83 ec 0c             	sub    esp,0xc
c001da9d:	c7 05 a4 10 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00310a4,0x0
c001daa7:	e8 4e ff ff ff       	call   c001d9fa <schedule()>
c001daac:	83 c4 0c             	add    esp,0xc
c001daaf:	e9 fb fb ff ff       	jmp    c001d6af <enableIRQs()>

c001dab4 <Semaphore::tryAcquire()>:
c001dab4:	83 ec 0c             	sub    esp,0xc
c001dab7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dabb:	e8 25 fc ff ff       	call   c001d6e5 <lockStuff()>
c001dac0:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001dac3:	3b 10                	cmp    edx,DWORD PTR [eax]
c001dac5:	7c 0b                	jl     c001dad2 <Semaphore::tryAcquire()+0x1e>
c001dac7:	e8 b3 ff ff ff       	call   c001da7f <unlockStuff()>
c001dacc:	31 c0                	xor    eax,eax
c001dace:	83 c4 0c             	add    esp,0xc
c001dad1:	c3                   	ret    
c001dad2:	42                   	inc    edx
c001dad3:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001dad6:	e8 a4 ff ff ff       	call   c001da7f <unlockStuff()>
c001dadb:	b0 01                	mov    al,0x1
c001dadd:	83 c4 0c             	add    esp,0xc
c001dae0:	c3                   	ret    
c001dae1:	90                   	nop

c001dae2 <Semaphore::assertLocked(char const*)>:
c001dae2:	83 ec 0c             	sub    esp,0xc
c001dae5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dae9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001daed:	e8 f3 fb ff ff       	call   c001d6e5 <lockStuff()>
c001daf2:	8b 08                	mov    ecx,DWORD PTR [eax]
c001daf4:	39 48 0c             	cmp    DWORD PTR [eax+0xc],ecx
c001daf7:	7c 05                	jl     c001dafe <Semaphore::assertLocked(char const*)+0x1c>
c001daf9:	83 c4 0c             	add    esp,0xc
c001dafc:	eb 81                	jmp    c001da7f <unlockStuff()>
c001dafe:	83 ec 0c             	sub    esp,0xc
c001db01:	52                   	push   edx
c001db02:	e8 28 c5 ff ff       	call   c001a02f <Krnl::panic(char const*)>
c001db07:	83 c4 10             	add    esp,0x10
c001db0a:	83 c4 0c             	add    esp,0xc
c001db0d:	e9 6d ff ff ff       	jmp    c001da7f <unlockStuff()>

c001db12 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001db12:	83 ec 0c             	sub    esp,0xc
c001db15:	e8 8f fb ff ff       	call   c001d6a9 <getIRQNestingLevel()>
c001db1a:	83 ec 08             	sub    esp,0x8
c001db1d:	50                   	push   eax
c001db1e:	68 a0 ba 02 c0       	push   0xc002baa0
c001db23:	e8 ed 4f ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c001db28:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001db2c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001db31:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001db34:	e8 c1 fe ff ff       	call   c001d9fa <schedule()>
c001db39:	e8 82 fb ff ff       	call   c001d6c0 <unlockScheduler()>
c001db3e:	e8 66 fb ff ff       	call   c001d6a9 <getIRQNestingLevel()>
c001db43:	5a                   	pop    edx
c001db44:	59                   	pop    ecx
c001db45:	50                   	push   eax
c001db46:	68 d4 ba 02 c0       	push   0xc002bad4
c001db4b:	e8 c5 4f ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c001db50:	83 c4 1c             	add    esp,0x1c
c001db53:	c3                   	ret    

c001db54 <blockTask(TaskState)>:
c001db54:	83 ec 0c             	sub    esp,0xc
c001db57:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001db5b:	e8 5e fb ff ff       	call   c001d6be <lockScheduler()>
c001db60:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001db65:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001db68:	e8 8d fe ff ff       	call   c001d9fa <schedule()>
c001db6d:	83 c4 0c             	add    esp,0xc
c001db70:	e9 4b fb ff ff       	jmp    c001d6c0 <unlockScheduler()>

c001db75 <waitTask(int, int*, int)>:
c001db75:	83 ec 18             	sub    esp,0x18
c001db78:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001db7d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001db81:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001db84:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001db88:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001db8d:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001db90:	6a 07                	push   0x7
c001db92:	e8 bd ff ff ff       	call   c001db54 <blockTask(TaskState)>
c001db97:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001db9c:	83 c4 10             	add    esp,0x10
c001db9f:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c001dba2:	85 d2                	test   edx,edx
c001dba4:	74 0a                	je     c001dbb0 <waitTask(int, int*, int)+0x3b>
c001dba6:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c001dba9:	89 02                	mov    DWORD PTR [edx],eax
c001dbab:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dbb0:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001dbb3:	83 c4 0c             	add    esp,0xc
c001dbb6:	c3                   	ret    

c001dbb7 <nanoSleepUntil(unsigned long long)>:
c001dbb7:	83 ec 0c             	sub    esp,0xc
c001dbba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dbbe:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001dbc2:	3b 05 f0 e1 02 c0    	cmp    eax,DWORD PTR ds:0xc002e1f0
c001dbc8:	89 d1                	mov    ecx,edx
c001dbca:	1b 0d f4 e1 02 c0    	sbb    ecx,DWORD PTR ds:0xc002e1f4
c001dbd0:	73 04                	jae    c001dbd6 <nanoSleepUntil(unsigned long long)+0x1f>
c001dbd2:	83 c4 0c             	add    esp,0xc
c001dbd5:	c3                   	ret    
c001dbd6:	e8 0a fb ff ff       	call   c001d6e5 <lockStuff()>
c001dbdb:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001dbe1:	83 ec 08             	sub    esp,0x8
c001dbe4:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c001dbe7:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c001dbea:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001dbf0:	68 bc 10 03 c0       	push   0xc00310bc
c001dbf5:	e8 e6 a7 00 00       	call   c00283e0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001dbfa:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001dc01:	e8 4e ff ff ff       	call   c001db54 <blockTask(TaskState)>
c001dc06:	83 c4 1c             	add    esp,0x1c
c001dc09:	e9 71 fe ff ff       	jmp    c001da7f <unlockStuff()>

c001dc0e <nanoSleep(unsigned long long)>:
c001dc0e:	a1 f0 e1 02 c0       	mov    eax,ds:0xc002e1f0
c001dc13:	8b 15 f4 e1 02 c0    	mov    edx,DWORD PTR ds:0xc002e1f4
c001dc19:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001dc1d:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c001dc21:	eb 94                	jmp    c001dbb7 <nanoSleepUntil(unsigned long long)>

c001dc23 <sleep(unsigned long long)>:
c001dc23:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c001dc2b:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c001dc30:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c001dc34:	01 ca                	add    edx,ecx
c001dc36:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001dc3a:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001dc3e:	eb ce                	jmp    c001dc0e <nanoSleep(unsigned long long)>

c001dc40 <Semaphore::acquire()>:
c001dc40:	83 ec 0c             	sub    esp,0xc
c001dc43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc47:	e8 99 fa ff ff       	call   c001d6e5 <lockStuff()>
c001dc4c:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001dc4f:	3b 10                	cmp    edx,DWORD PTR [eax]
c001dc51:	7d 0c                	jge    c001dc5f <Semaphore::acquire()+0x1f>
c001dc53:	42                   	inc    edx
c001dc54:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001dc57:	83 c4 0c             	add    esp,0xc
c001dc5a:	e9 20 fe ff ff       	jmp    c001da7f <unlockStuff()>
c001dc5f:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001dc65:	c7 42 20 00 00 00 00 	mov    DWORD PTR [edx+0x20],0x0
c001dc6c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001dc6f:	85 d2                	test   edx,edx
c001dc71:	74 2a                	je     c001dc9d <Semaphore::acquire()+0x5d>
c001dc73:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001dc76:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001dc7c:	89 4a 20             	mov    DWORD PTR [edx+0x20],ecx
c001dc7f:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001dc85:	83 ec 0c             	sub    esp,0xc
c001dc88:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001dc8b:	6a 05                	push   0x5
c001dc8d:	e8 c2 fe ff ff       	call   c001db54 <blockTask(TaskState)>
c001dc92:	83 c4 10             	add    esp,0x10
c001dc95:	83 c4 0c             	add    esp,0xc
c001dc98:	e9 e2 fd ff ff       	jmp    c001da7f <unlockStuff()>
c001dc9d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001dca3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001dca6:	eb d7                	jmp    c001dc7f <Semaphore::acquire()+0x3f>

c001dca8 <taskReturned>:
c001dca8:	83 ec 18             	sub    esp,0x18
c001dcab:	68 08 bb 02 c0       	push   0xc002bb08
c001dcb0:	e8 7a c3 ff ff       	call   c001a02f <Krnl::panic(char const*)>
c001dcb5:	83 c4 10             	add    esp,0x10
c001dcb8:	83 ec 0c             	sub    esp,0xc
c001dcbb:	6a 02                	push   0x2
c001dcbd:	e8 92 fe ff ff       	call   c001db54 <blockTask(TaskState)>
c001dcc2:	e8 f7 f9 ff ff       	call   c001d6be <lockScheduler()>
c001dcc7:	e8 2e fd ff ff       	call   c001d9fa <schedule()>
c001dccc:	e8 ef f9 ff ff       	call   c001d6c0 <unlockScheduler()>
c001dcd1:	83 c4 10             	add    esp,0x10
c001dcd4:	eb e2                	jmp    c001dcb8 <taskReturned+0x10>

c001dcd6 <unblockTask(ThreadControlBlock*)>:
c001dcd6:	53                   	push   ebx
c001dcd7:	83 ec 08             	sub    esp,0x8
c001dcda:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001dcde:	e8 db f9 ff ff       	call   c001d6be <lockScheduler()>
c001dce3:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001dce6:	85 c0                	test   eax,eax
c001dce8:	74 5c                	je     c001dd46 <unblockTask(ThreadControlBlock*)+0x70>
c001dcea:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001dced:	48                   	dec    eax
c001dcee:	74 31                	je     c001dd21 <unblockTask(ThreadControlBlock*)+0x4b>
c001dcf0:	83 ec 0c             	sub    esp,0xc
c001dcf3:	68 c8 10 03 c0       	push   0xc00310c8
c001dcf8:	e8 11 a6 00 00       	call   c002830e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001dcfd:	83 c4 10             	add    esp,0x10
c001dd00:	85 c0                	test   eax,eax
c001dd02:	75 17                	jne    c001dd1b <unblockTask(ThreadControlBlock*)+0x45>
c001dd04:	eb 65                	jmp    c001dd6b <unblockTask(ThreadControlBlock*)+0x95>
c001dd06:	83 ec 08             	sub    esp,0x8
c001dd09:	50                   	push   eax
c001dd0a:	68 c8 10 03 c0       	push   0xc00310c8
c001dd0f:	e8 d4 a8 00 00       	call   c00285e8 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001dd14:	83 c4 10             	add    esp,0x10
c001dd17:	85 c0                	test   eax,eax
c001dd19:	74 50                	je     c001dd6b <unblockTask(ThreadControlBlock*)+0x95>
c001dd1b:	39 c3                	cmp    ebx,eax
c001dd1d:	75 e7                	jne    c001dd06 <unblockTask(ThreadControlBlock*)+0x30>
c001dd1f:	eb 1c                	jmp    c001dd3d <unblockTask(ThreadControlBlock*)+0x67>
c001dd21:	83 ec 0c             	sub    esp,0xc
c001dd24:	68 f8 bb 02 c0       	push   0xc002bbf8
c001dd29:	e8 e7 4d ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c001dd2e:	c7 04 24 84 bb 02 c0 	mov    DWORD PTR [esp],0xc002bb84
c001dd35:	e8 db 4d ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c001dd3a:	83 c4 10             	add    esp,0x10
c001dd3d:	83 c4 08             	add    esp,0x8
c001dd40:	5b                   	pop    ebx
c001dd41:	e9 7a f9 ff ff       	jmp    c001d6c0 <unlockScheduler()>
c001dd46:	83 ec 0c             	sub    esp,0xc
c001dd49:	68 3c bb 02 c0       	push   0xc002bb3c
c001dd4e:	e8 c2 4d ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c001dd53:	c7 04 24 84 bb 02 c0 	mov    DWORD PTR [esp],0xc002bb84
c001dd5a:	e8 b6 4d ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c001dd5f:	83 c4 10             	add    esp,0x10
c001dd62:	83 c4 08             	add    esp,0x8
c001dd65:	5b                   	pop    ebx
c001dd66:	e9 55 f9 ff ff       	jmp    c001d6c0 <unlockScheduler()>
c001dd6b:	83 ec 08             	sub    esp,0x8
c001dd6e:	53                   	push   ebx
c001dd6f:	68 c8 10 03 c0       	push   0xc00310c8
c001dd74:	e8 67 a6 00 00       	call   c00283e0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001dd79:	83 c4 10             	add    esp,0x10
c001dd7c:	83 c4 08             	add    esp,0x8
c001dd7f:	5b                   	pop    ebx
c001dd80:	e9 3b f9 ff ff       	jmp    c001d6c0 <unlockScheduler()>

c001dd85 <cleanupTerminatedTask(ThreadControlBlock*)>:
c001dd85:	55                   	push   ebp
c001dd86:	57                   	push   edi
c001dd87:	56                   	push   esi
c001dd88:	53                   	push   ebx
c001dd89:	83 ec 1c             	sub    esp,0x1c
c001dd8c:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001dd90:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001dd93:	8b b8 36 05 00 00    	mov    edi,DWORD PTR [eax+0x536]
c001dd99:	85 ff                	test   edi,edi
c001dd9b:	7e 20                	jle    c001ddbd <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c001dd9d:	31 f6                	xor    esi,esi
c001dd9f:	83 ec 0c             	sub    esp,0xc
c001dda2:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c001dda9:	46                   	inc    esi
c001ddaa:	e8 a7 1a ff ff       	call   c000f856 <free>
c001ddaf:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001ddb2:	83 c4 10             	add    esp,0x10
c001ddb5:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c001ddbb:	7f e2                	jg     c001dd9f <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001ddbd:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001ddc7:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001ddcc:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001ddcf:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001ddd2:	d3 c0                	rol    eax,cl
c001ddd4:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c001dddb:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001ddde:	89 f7                	mov    edi,esi
c001dde0:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c001dde8:	0f 85 74 01 00 00    	jne    c001df62 <cleanupTerminatedTask(ThreadControlBlock*)+0x1dd>
c001ddee:	8b ae 3a 07 00 00    	mov    ebp,DWORD PTR [esi+0x73a]
c001ddf4:	85 ed                	test   ebp,ebp
c001ddf6:	74 1b                	je     c001de13 <cleanupTerminatedTask(ThreadControlBlock*)+0x8e>
c001ddf8:	83 ec 0c             	sub    esp,0xc
c001ddfb:	55                   	push   ebp
c001ddfc:	e8 9b bf ff ff       	call   c0019d9c <EnvVarContainer::~EnvVarContainer()>
c001de01:	59                   	pop    ecx
c001de02:	5e                   	pop    esi
c001de03:	6a 0c                	push   0xc
c001de05:	55                   	push   ebp
c001de06:	e8 2a 4c ff ff       	call   c0012a35 <operator delete(void*, unsigned long)>
c001de0b:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001de0e:	83 c4 10             	add    esp,0x10
c001de11:	89 f7                	mov    edi,esi
c001de13:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001de19:	85 c0                	test   eax,eax
c001de1b:	0f 84 aa 00 00 00    	je     c001decb <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001de21:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c001de24:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001de28:	31 c9                	xor    ecx,ecx
c001de2a:	eb 10                	jmp    c001de3c <cleanupTerminatedTask(ThreadControlBlock*)+0xb7>
c001de2c:	41                   	inc    ecx
c001de2d:	83 f9 10             	cmp    ecx,0x10
c001de30:	0f 84 95 00 00 00    	je     c001decb <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001de36:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001de3c:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c001de43:	d3 fa                	sar    edx,cl
c001de45:	83 e2 01             	and    edx,0x1
c001de48:	74 e2                	je     c001de2c <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001de4a:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001de4d:	01 ca                	add    edx,ecx
c001de4f:	89 d5                	mov    ebp,edx
c001de51:	c1 e5 05             	shl    ebp,0x5
c001de54:	01 ea                	add    edx,ebp
c001de56:	01 d0                	add    eax,edx
c001de58:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001de5e:	83 fd 07             	cmp    ebp,0x7
c001de61:	75 c9                	jne    c001de2c <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001de63:	05 40 02 00 00       	add    eax,0x240
c001de68:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c001de6b:	83 fd ff             	cmp    ebp,0xffffffff
c001de6e:	0f 8c 08 01 00 00    	jl     c001df7c <cleanupTerminatedTask(ThreadControlBlock*)+0x1f7>
c001de74:	0f 84 b9 01 00 00    	je     c001e033 <cleanupTerminatedTask(ThreadControlBlock*)+0x2ae>
c001de7a:	85 ed                	test   ebp,ebp
c001de7c:	0f 84 a0 01 00 00    	je     c001e022 <cleanupTerminatedTask(ThreadControlBlock*)+0x29d>
c001de82:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001de84:	75 a6                	jne    c001de2c <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001de86:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001de8c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001de90:	01 d0                	add    eax,edx
c001de92:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001de96:	83 ec 0c             	sub    esp,0xc
c001de99:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001de9f:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001dea2:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dea8:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001deaf:	50                   	push   eax
c001deb0:	e8 21 fe ff ff       	call   c001dcd6 <unblockTask(ThreadControlBlock*)>
c001deb5:	83 c4 10             	add    esp,0x10
c001deb8:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001debb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001debf:	89 f7                	mov    edi,esi
c001dec1:	41                   	inc    ecx
c001dec2:	83 f9 10             	cmp    ecx,0x10
c001dec5:	0f 85 6b ff ff ff    	jne    c001de36 <cleanupTerminatedTask(ThreadControlBlock*)+0xb1>
c001decb:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c001ded1:	85 c0                	test   eax,eax
c001ded3:	74 5d                	je     c001df32 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001ded5:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c001dedb:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c001dee1:	74 4f                	je     c001df32 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001dee3:	83 ec 0c             	sub    esp,0xc
c001dee6:	68 c8 10 03 c0       	push   0xc00310c8
c001deeb:	e8 1e a4 00 00       	call   c002830e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001def0:	c7 04 24 c8 10 03 c0 	mov    DWORD PTR [esp],0xc00310c8
c001def7:	89 c7                	mov    edi,eax
c001def9:	e8 18 a4 00 00       	call   c0028316 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001defe:	83 c4 10             	add    esp,0x10
c001df01:	84 c0                	test   al,al
c001df03:	0f 84 e4 00 00 00    	je     c001dfed <cleanupTerminatedTask(ThreadControlBlock*)+0x268>
c001df09:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001df0c:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001df12:	85 d2                	test   edx,edx
c001df14:	74 0f                	je     c001df25 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c001df16:	83 ec 0c             	sub    esp,0xc
c001df19:	8b 02                	mov    eax,DWORD PTR [edx]
c001df1b:	52                   	push   edx
c001df1c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001df1f:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001df22:	83 c4 10             	add    esp,0x10
c001df25:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c001df2f:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001df32:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c001df38:	85 db                	test   ebx,ebx
c001df3a:	74 16                	je     c001df52 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c001df3c:	83 ec 0c             	sub    esp,0xc
c001df3f:	53                   	push   ebx
c001df40:	e8 3f 41 ff ff       	call   c0012084 <VAS::~VAS()>
c001df45:	58                   	pop    eax
c001df46:	5a                   	pop    edx
c001df47:	6a 10                	push   0x10
c001df49:	53                   	push   ebx
c001df4a:	e8 e6 4a ff ff       	call   c0012a35 <operator delete(void*, unsigned long)>
c001df4f:	83 c4 10             	add    esp,0x10
c001df52:	83 ec 0c             	sub    esp,0xc
c001df55:	68 54 b9 02 c0       	push   0xc002b954
c001df5a:	e8 b6 4b ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c001df5f:	83 c4 10             	add    esp,0x10
c001df62:	83 ec 08             	sub    esp,0x8
c001df65:	68 3f 07 00 00       	push   0x73f
c001df6a:	68 62 b9 02 c0       	push   0xc002b962
c001df6f:	e8 a1 4b ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c001df74:	83 c4 2c             	add    esp,0x2c
c001df77:	5b                   	pop    ebx
c001df78:	5e                   	pop    esi
c001df79:	5f                   	pop    edi
c001df7a:	5d                   	pop    ebp
c001df7b:	c3                   	ret    
c001df7c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001df80:	83 ec 0c             	sub    esp,0xc
c001df83:	68 3c bc 02 c0       	push   0xc002bc3c
c001df88:	e8 a2 c0 ff ff       	call   c001a02f <Krnl::panic(char const*)>
c001df8d:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001df90:	83 c4 10             	add    esp,0x10
c001df93:	89 f7                	mov    edi,esi
c001df95:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001df99:	e9 8e fe ff ff       	jmp    c001de2c <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001df9e:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001dfa4:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c001dfaa:	75 1c                	jne    c001dfc8 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001dfac:	83 ec 0c             	sub    esp,0xc
c001dfaf:	68 a4 bc 02 c0       	push   0xc002bca4
c001dfb4:	e8 5c 4b ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c001dfb9:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001dfc0:	e8 8f fb ff ff       	call   c001db54 <blockTask(TaskState)>
c001dfc5:	83 c4 10             	add    esp,0x10
c001dfc8:	83 ec 08             	sub    esp,0x8
c001dfcb:	56                   	push   esi
c001dfcc:	68 c8 10 03 c0       	push   0xc00310c8
c001dfd1:	e8 0a a4 00 00       	call   c00283e0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001dfd6:	c7 04 24 c8 10 03 c0 	mov    DWORD PTR [esp],0xc00310c8
c001dfdd:	e8 2c a3 00 00       	call   c002830e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001dfe2:	83 c4 10             	add    esp,0x10
c001dfe5:	39 f8                	cmp    eax,edi
c001dfe7:	0f 84 1c ff ff ff    	je     c001df09 <cleanupTerminatedTask(ThreadControlBlock*)+0x184>
c001dfed:	83 ec 0c             	sub    esp,0xc
c001dff0:	68 c8 10 03 c0       	push   0xc00310c8
c001dff5:	e8 14 a3 00 00       	call   c002830e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001dffa:	c7 04 24 c8 10 03 c0 	mov    DWORD PTR [esp],0xc00310c8
c001e001:	89 c6                	mov    esi,eax
c001e003:	e8 2a a3 00 00       	call   c0028332 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e008:	83 c4 10             	add    esp,0x10
c001e00b:	39 f3                	cmp    ebx,esi
c001e00d:	74 b9                	je     c001dfc8 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001e00f:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001e012:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e015:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c001e01b:	75 ab                	jne    c001dfc8 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001e01d:	e9 7c ff ff ff       	jmp    c001df9e <cleanupTerminatedTask(ThreadControlBlock*)+0x219>
c001e022:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e026:	83 ec 0c             	sub    esp,0xc
c001e029:	68 70 bc 02 c0       	push   0xc002bc70
c001e02e:	e9 55 ff ff ff       	jmp    c001df88 <cleanupTerminatedTask(ThreadControlBlock*)+0x203>
c001e033:	8b 36                	mov    esi,DWORD PTR [esi]
c001e035:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e039:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c001e03c:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e03f:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c001e045:	01 d7                	add    edi,edx
c001e047:	89 f8                	mov    eax,edi
c001e049:	e9 44 fe ff ff       	jmp    c001de92 <cleanupTerminatedTask(ThreadControlBlock*)+0x10d>

c001e04e <cleanerTaskFunction(void*)>:
c001e04e:	53                   	push   ebx
c001e04f:	83 ec 08             	sub    esp,0x8
c001e052:	e8 69 f6 ff ff       	call   c001d6c0 <unlockScheduler()>
c001e057:	e8 62 f6 ff ff       	call   c001d6be <lockScheduler()>
c001e05c:	80 3d 8c 10 03 c0 00 	cmp    BYTE PTR ds:0xc003108c,0x0
c001e063:	0f 85 8e 00 00 00    	jne    c001e0f7 <cleanerTaskFunction(void*)+0xa9>
c001e069:	83 ec 0c             	sub    esp,0xc
c001e06c:	6a 02                	push   0x2
c001e06e:	e8 9f fa ff ff       	call   c001db12 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e073:	83 c4 10             	add    esp,0x10
c001e076:	c6 05 8c 10 03 c0 00 	mov    BYTE PTR ds:0xc003108c,0x0
c001e07d:	e8 63 f6 ff ff       	call   c001d6e5 <lockStuff()>
c001e082:	e8 37 f6 ff ff       	call   c001d6be <lockScheduler()>
c001e087:	83 ec 0c             	sub    esp,0xc
c001e08a:	68 b0 10 03 c0       	push   0xc00310b0
c001e08f:	e8 82 a2 00 00       	call   c0028316 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e094:	83 c4 10             	add    esp,0x10
c001e097:	84 c0                	test   al,al
c001e099:	75 40                	jne    c001e0db <cleanerTaskFunction(void*)+0x8d>
c001e09b:	83 ec 0c             	sub    esp,0xc
c001e09e:	68 b0 10 03 c0       	push   0xc00310b0
c001e0a3:	e8 66 a2 00 00       	call   c002830e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e0a8:	c7 04 24 b0 10 03 c0 	mov    DWORD PTR [esp],0xc00310b0
c001e0af:	89 c3                	mov    ebx,eax
c001e0b1:	e8 7c a2 00 00       	call   c0028332 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e0b6:	c7 04 24 78 b9 02 c0 	mov    DWORD PTR [esp],0xc002b978
c001e0bd:	e8 53 4a ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c001e0c2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e0c5:	e8 bb fc ff ff       	call   c001dd85 <cleanupTerminatedTask(ThreadControlBlock*)>
c001e0ca:	c7 04 24 91 b9 02 c0 	mov    DWORD PTR [esp],0xc002b991
c001e0d1:	e8 3f 4a ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c001e0d6:	83 c4 10             	add    esp,0x10
c001e0d9:	eb ac                	jmp    c001e087 <cleanerTaskFunction(void*)+0x39>
c001e0db:	e8 e0 f5 ff ff       	call   c001d6c0 <unlockScheduler()>
c001e0e0:	e8 9a f9 ff ff       	call   c001da7f <unlockStuff()>
c001e0e5:	e8 d4 f5 ff ff       	call   c001d6be <lockScheduler()>
c001e0ea:	80 3d 8c 10 03 c0 00 	cmp    BYTE PTR ds:0xc003108c,0x0
c001e0f1:	0f 84 72 ff ff ff    	je     c001e069 <cleanerTaskFunction(void*)+0x1b>
c001e0f7:	e8 c4 f5 ff ff       	call   c001d6c0 <unlockScheduler()>
c001e0fc:	e9 75 ff ff ff       	jmp    c001e076 <cleanerTaskFunction(void*)+0x28>

c001e101 <terminateTask(int)>:
c001e101:	83 ec 14             	sub    esp,0x14
c001e104:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e109:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001e10c:	83 c0 0c             	add    eax,0xc
c001e10f:	50                   	push   eax
c001e110:	68 cc bc 02 c0       	push   0xc002bccc
c001e115:	e8 fb 49 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c001e11a:	e8 c6 f5 ff ff       	call   c001d6e5 <lockStuff()>
c001e11f:	e8 9a f5 ff ff       	call   c001d6be <lockScheduler()>
c001e124:	c7 04 24 a4 b9 02 c0 	mov    DWORD PTR [esp],0xc002b9a4
c001e12b:	e8 e5 49 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c001e130:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e134:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e139:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c001e13c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e141:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001e144:	5a                   	pop    edx
c001e145:	59                   	pop    ecx
c001e146:	50                   	push   eax
c001e147:	68 b0 10 03 c0       	push   0xc00310b0
c001e14c:	e8 8f a2 00 00       	call   c00283e0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e151:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e156:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001e15d:	c7 04 24 be b9 02 c0 	mov    DWORD PTR [esp],0xc002b9be
c001e164:	e8 ac 49 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c001e169:	83 c4 10             	add    esp,0x10
c001e16c:	a1 88 10 03 c0       	mov    eax,ds:0xc0031088
c001e171:	85 c0                	test   eax,eax
c001e173:	74 5a                	je     c001e1cf <terminateTask(int)+0xce>
c001e175:	83 ec 0c             	sub    esp,0xc
c001e178:	68 d8 b9 02 c0       	push   0xc002b9d8
c001e17d:	e8 93 49 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c001e182:	58                   	pop    eax
c001e183:	c6 05 8c 10 03 c0 01 	mov    BYTE PTR ds:0xc003108c,0x1
c001e18a:	ff 35 88 10 03 c0    	push   DWORD PTR ds:0xc0031088
c001e190:	e8 41 fb ff ff       	call   c001dcd6 <unblockTask(ThreadControlBlock*)>
c001e195:	c7 04 24 f2 b9 02 c0 	mov    DWORD PTR [esp],0xc002b9f2
c001e19c:	e8 74 49 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c001e1a1:	83 c4 10             	add    esp,0x10
c001e1a4:	e8 17 f5 ff ff       	call   c001d6c0 <unlockScheduler()>
c001e1a9:	e8 d1 f8 ff ff       	call   c001da7f <unlockStuff()>
c001e1ae:	83 ec 0c             	sub    esp,0xc
c001e1b1:	68 2a ba 02 c0       	push   0xc002ba2a
c001e1b6:	e8 5a 49 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c001e1bb:	83 c4 10             	add    esp,0x10
c001e1be:	e8 fb f4 ff ff       	call   c001d6be <lockScheduler()>
c001e1c3:	e8 32 f8 ff ff       	call   c001d9fa <schedule()>
c001e1c8:	e8 f3 f4 ff ff       	call   c001d6c0 <unlockScheduler()>
c001e1cd:	eb ef                	jmp    c001e1be <terminateTask(int)+0xbd>
c001e1cf:	83 ec 0c             	sub    esp,0xc
c001e1d2:	68 0c ba 02 c0       	push   0xc002ba0c
c001e1d7:	e8 39 49 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c001e1dc:	83 c4 10             	add    esp,0x10
c001e1df:	eb c3                	jmp    c001e1a4 <terminateTask(int)+0xa3>

c001e1e1 <Thr::terminateFromIRQ(int)>:
c001e1e1:	83 ec 18             	sub    esp,0x18
c001e1e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e1e8:	e8 14 ff ff ff       	call   c001e101 <terminateTask(int)>
c001e1ed:	90                   	nop

c001e1ee <Semaphore::release()>:
c001e1ee:	83 ec 0c             	sub    esp,0xc
c001e1f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1f5:	e8 eb f4 ff ff       	call   c001d6e5 <lockStuff()>
c001e1fa:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001e1fd:	85 d2                	test   edx,edx
c001e1ff:	74 1a                	je     c001e21b <Semaphore::release()+0x2d>
c001e201:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c001e204:	83 ec 0c             	sub    esp,0xc
c001e207:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001e20a:	52                   	push   edx
c001e20b:	e8 c6 fa ff ff       	call   c001dcd6 <unblockTask(ThreadControlBlock*)>
c001e210:	83 c4 10             	add    esp,0x10
c001e213:	83 c4 0c             	add    esp,0xc
c001e216:	e9 64 f8 ff ff       	jmp    c001da7f <unlockStuff()>
c001e21b:	ff 48 0c             	dec    DWORD PTR [eax+0xc]
c001e21e:	83 c4 0c             	add    esp,0xc
c001e221:	e9 59 f8 ff ff       	jmp    c001da7f <unlockStuff()>

c001e226 <__static_initialization_and_destruction_0(int, int)>:
c001e226:	83 ec 0c             	sub    esp,0xc
c001e229:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001e22e:	0f 85 88 00 00 00    	jne    c001e2bc <__static_initialization_and_destruction_0(int, int)+0x96>
c001e234:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001e23c:	75 7e                	jne    c001e2bc <__static_initialization_and_destruction_0(int, int)+0x96>
c001e23e:	83 ec 0c             	sub    esp,0xc
c001e241:	68 c8 10 03 c0       	push   0xc00310c8
c001e246:	e8 45 a3 00 00       	call   c0028590 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e24b:	83 c4 10             	add    esp,0x10
c001e24e:	83 ec 04             	sub    esp,0x4
c001e251:	68 84 ca 02 c0       	push   0xc002ca84
c001e256:	68 c8 10 03 c0       	push   0xc00310c8
c001e25b:	68 50 85 02 c0       	push   0xc0028550
c001e260:	e8 4a 47 ff ff       	call   c00129af <__cxa_atexit>
c001e265:	83 c4 10             	add    esp,0x10
c001e268:	83 ec 0c             	sub    esp,0xc
c001e26b:	68 bc 10 03 c0       	push   0xc00310bc
c001e270:	e8 1b a3 00 00       	call   c0028590 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e275:	83 c4 10             	add    esp,0x10
c001e278:	83 ec 04             	sub    esp,0x4
c001e27b:	68 84 ca 02 c0       	push   0xc002ca84
c001e280:	68 bc 10 03 c0       	push   0xc00310bc
c001e285:	68 50 85 02 c0       	push   0xc0028550
c001e28a:	e8 20 47 ff ff       	call   c00129af <__cxa_atexit>
c001e28f:	83 c4 10             	add    esp,0x10
c001e292:	83 ec 0c             	sub    esp,0xc
c001e295:	68 b0 10 03 c0       	push   0xc00310b0
c001e29a:	e8 f1 a2 00 00       	call   c0028590 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e29f:	83 c4 10             	add    esp,0x10
c001e2a2:	83 ec 04             	sub    esp,0x4
c001e2a5:	68 84 ca 02 c0       	push   0xc002ca84
c001e2aa:	68 b0 10 03 c0       	push   0xc00310b0
c001e2af:	68 50 85 02 c0       	push   0xc0028550
c001e2b4:	e8 f6 46 ff ff       	call   c00129af <__cxa_atexit>
c001e2b9:	83 c4 10             	add    esp,0x10
c001e2bc:	90                   	nop
c001e2bd:	83 c4 0c             	add    esp,0xc
c001e2c0:	c3                   	ret    

c001e2c1 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c001e2c1:	83 ec 0c             	sub    esp,0xc
c001e2c4:	83 ec 08             	sub    esp,0x8
c001e2c7:	68 ff ff 00 00       	push   0xffff
c001e2cc:	6a 01                	push   0x1
c001e2ce:	e8 53 ff ff ff       	call   c001e226 <__static_initialization_and_destruction_0(int, int)>
c001e2d3:	83 c4 10             	add    esp,0x10
c001e2d6:	83 c4 0c             	add    esp,0xc
c001e2d9:	c3                   	ret    

c001e2da <Vm::inbv(unsigned short)>:
c001e2da:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e2de:	66 81 fa fe fe       	cmp    dx,0xfefe
c001e2e3:	75 06                	jne    c001e2eb <Vm::inbv(unsigned short)+0x11>
c001e2e5:	a0 0c 11 03 c0       	mov    al,ds:0xc003110c
c001e2ea:	c3                   	ret    
c001e2eb:	ec                   	in     al,dx
c001e2ec:	c3                   	ret    

c001e2ed <Vm::outbv(unsigned short, unsigned char)>:
c001e2ed:	53                   	push   ebx
c001e2ee:	83 ec 08             	sub    esp,0x8
c001e2f1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e2f5:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001e2f9:	66 81 fa fe fe       	cmp    dx,0xfefe
c001e2fe:	75 38                	jne    c001e338 <Vm::outbv(unsigned short, unsigned char)+0x4b>
c001e300:	0f b6 c3             	movzx  eax,bl
c001e303:	51                   	push   ecx
c001e304:	51                   	push   ecx
c001e305:	50                   	push   eax
c001e306:	68 eb bc 02 c0       	push   0xc002bceb
c001e30b:	e8 05 48 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c001e310:	8b 15 0c 11 03 c0    	mov    edx,DWORD PTR ds:0xc003110c
c001e316:	83 c4 10             	add    esp,0x10
c001e319:	8d 42 01             	lea    eax,[edx+0x1]
c001e31c:	88 9a 20 11 03 c0    	mov    BYTE PTR [edx-0x3ffceee0],bl
c001e322:	a3 0c 11 03 c0       	mov    ds:0xc003110c,eax
c001e327:	83 f8 20             	cmp    eax,0x20
c001e32a:	75 0f                	jne    c001e33b <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001e32c:	c7 05 0c 11 03 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc003110c,0x1f
c001e336:	eb 03                	jmp    c001e33b <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001e338:	88 d8                	mov    al,bl
c001e33a:	ee                   	out    dx,al
c001e33b:	83 c4 08             	add    esp,0x8
c001e33e:	5b                   	pop    ebx
c001e33f:	c3                   	ret    

c001e340 <Vm::realToLinear(unsigned short, unsigned short)>:
c001e340:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e345:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e34a:	c1 e0 04             	shl    eax,0x4
c001e34d:	01 d0                	add    eax,edx
c001e34f:	c3                   	ret    

c001e350 <Vm::getSegment(unsigned int)>:
c001e350:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e354:	c1 e8 10             	shr    eax,0x10
c001e357:	c3                   	ret    

c001e358 <Vm::getOffset(unsigned int)>:
c001e358:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e35c:	c3                   	ret    

c001e35d <Vm::mainloop2()>:
c001e35d:	83 ec 0c             	sub    esp,0xc
c001e360:	e8 59 f3 ff ff       	call   c001d6be <lockScheduler()>
c001e365:	83 ec 0c             	sub    esp,0xc
c001e368:	c6 05 05 11 03 c0 01 	mov    BYTE PTR ds:0xc0031105,0x1
c001e36f:	6a 02                	push   0x2
c001e371:	e8 9c f7 ff ff       	call   c001db12 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e376:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e37b:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001e37f:	52                   	push   edx
c001e380:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001e384:	52                   	push   edx
c001e385:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001e389:	52                   	push   edx
c001e38a:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001e38e:	50                   	push   eax
c001e38f:	e8 66 1f fe ff       	call   c00002fa <goToVM86>
c001e394:	83 c4 2c             	add    esp,0x2c
c001e397:	c3                   	ret    

c001e398 <Vm::mainVm8086Loop(void*)>:
c001e398:	83 ec 0c             	sub    esp,0xc
c001e39b:	e8 20 f3 ff ff       	call   c001d6c0 <unlockScheduler()>
c001e3a0:	83 c4 0c             	add    esp,0xc
c001e3a3:	eb b8                	jmp    c001e35d <Vm::mainloop2()>

c001e3a5 <Vm::mainloop3(unsigned long)>:
c001e3a5:	53                   	push   ebx
c001e3a6:	83 ec 08             	sub    esp,0x8
c001e3a9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e3ad:	e8 0c f3 ff ff       	call   c001d6be <lockScheduler()>
c001e3b2:	83 ec 0c             	sub    esp,0xc
c001e3b5:	89 1d 00 11 03 c0    	mov    DWORD PTR ds:0xc0031100,ebx
c001e3bb:	6a 02                	push   0x2
c001e3bd:	c6 05 04 11 03 c0 01 	mov    BYTE PTR ds:0xc0031104,0x1
c001e3c4:	e8 49 f7 ff ff       	call   c001db12 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e3c9:	83 c4 18             	add    esp,0x18
c001e3cc:	5b                   	pop    ebx
c001e3cd:	eb 8e                	jmp    c001e35d <Vm::mainloop2()>

c001e3cf <Vm::initialise8086()>:
c001e3cf:	83 ec 0c             	sub    esp,0xc
c001e3d2:	68 80 00 00 00       	push   0x80
c001e3d7:	6a 00                	push   0x0
c001e3d9:	68 98 e3 01 c0       	push   0xc001e398
c001e3de:	ff 35 d4 10 03 c0    	push   DWORD PTR ds:0xc00310d4
c001e3e4:	e8 07 f4 ff ff       	call   c001d7f0 <Process::createThread(void (*)(void*), void*, int)>
c001e3e9:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001e3f0:	a3 08 11 03 c0       	mov    ds:0xc0031108,eax
c001e3f5:	68 00 01 00 00       	push   0x100
c001e3fa:	a1 d4 10 03 c0       	mov    eax,ds:0xc00310d4
c001e3ff:	6a 00                	push   0x0
c001e401:	6a 00                	push   0x0
c001e403:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001e409:	e8 d6 40 ff ff       	call   c00124e4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001e40e:	83 c4 2c             	add    esp,0x2c
c001e411:	c3                   	ret    

c001e412 <Vm::finish8086()>:
c001e412:	53                   	push   ebx
c001e413:	83 ec 08             	sub    esp,0x8
c001e416:	e8 a3 f2 ff ff       	call   c001d6be <lockScheduler()>
c001e41b:	80 3d 04 11 03 c0 00 	cmp    BYTE PTR ds:0xc0031104,0x0
c001e422:	75 0c                	jne    c001e430 <Vm::finish8086()+0x1e>
c001e424:	e8 d1 f5 ff ff       	call   c001d9fa <schedule()>
c001e429:	e8 92 f2 ff ff       	call   c001d6c0 <unlockScheduler()>
c001e42e:	eb e6                	jmp    c001e416 <Vm::finish8086()+0x4>
c001e430:	83 ec 0c             	sub    esp,0xc
c001e433:	8b 1d 00 11 03 c0    	mov    ebx,DWORD PTR ds:0xc0031100
c001e439:	ff 35 08 11 03 c0    	push   DWORD PTR ds:0xc0031108
c001e43f:	c6 05 04 11 03 c0 00 	mov    BYTE PTR ds:0xc0031104,0x0
c001e446:	e8 8b f8 ff ff       	call   c001dcd6 <unblockTask(ThreadControlBlock*)>
c001e44b:	e8 70 f2 ff ff       	call   c001d6c0 <unlockScheduler()>
c001e450:	89 d8                	mov    eax,ebx
c001e452:	83 c4 18             	add    esp,0x18
c001e455:	5b                   	pop    ebx
c001e456:	c3                   	ret    

c001e457 <Vm::getOutput8086(unsigned char*)>:
c001e457:	83 ec 10             	sub    esp,0x10
c001e45a:	ff 35 0c 11 03 c0    	push   DWORD PTR ds:0xc003110c
c001e460:	68 20 11 03 c0       	push   0xc0031120
c001e465:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e469:	e8 d6 22 fe ff       	call   c0000744 <memcpy>
c001e46e:	a1 0c 11 03 c0       	mov    eax,ds:0xc003110c
c001e473:	c7 05 0c 11 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003110c,0x0
c001e47d:	83 c4 1c             	add    esp,0x1c
c001e480:	c3                   	ret    

c001e481 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001e481:	55                   	push   ebp
c001e482:	57                   	push   edi
c001e483:	56                   	push   esi
c001e484:	53                   	push   ebx
c001e485:	83 ec 2c             	sub    esp,0x2c
c001e488:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001e48c:	8b 5c 24 48          	mov    ebx,DWORD PTR [esp+0x48]
c001e490:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c001e494:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001e498:	e8 21 f2 ff ff       	call   c001d6be <lockScheduler()>
c001e49d:	a0 05 11 03 c0       	mov    al,ds:0xc0031105
c001e4a2:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001e4a6:	84 c0                	test   al,al
c001e4a8:	75 0c                	jne    c001e4b6 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x35>
c001e4aa:	e8 4b f5 ff ff       	call   c001d9fa <schedule()>
c001e4af:	e8 0c f2 ff ff       	call   c001d6c0 <unlockScheduler()>
c001e4b4:	eb e2                	jmp    c001e498 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001e4b6:	a1 08 11 03 c0       	mov    eax,ds:0xc0031108
c001e4bb:	c7 05 0c 11 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003110c,0x0
c001e4c5:	66 89 78 5f          	mov    WORD PTR [eax+0x5f],di
c001e4c9:	66 89 70 59          	mov    WORD PTR [eax+0x59],si
c001e4cd:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c001e4d1:	66 89 68 5d          	mov    WORD PTR [eax+0x5d],bp
c001e4d5:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001e4d9:	50                   	push   eax
c001e4da:	6a 20                	push   0x20
c001e4dc:	6a 00                	push   0x0
c001e4de:	68 20 11 03 c0       	push   0xc0031120
c001e4e3:	e8 90 22 fe ff       	call   c0000778 <memset>
c001e4e8:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001e4ef:	e8 52 13 ff ff       	call   c000f846 <malloc>
c001e4f4:	83 c4 0c             	add    esp,0xc
c001e4f7:	89 c7                	mov    edi,eax
c001e4f9:	ff 35 d4 10 03 c0    	push   DWORD PTR ds:0xc00310d4
c001e4ff:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001e503:	50                   	push   eax
c001e504:	e8 65 4b ff ff       	call   c001306e <File::File(char const*, Process*)>
c001e509:	83 c4 10             	add    esp,0x10
c001e50c:	85 ff                	test   edi,edi
c001e50e:	75 0a                	jne    c001e51a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x99>
c001e510:	83 ec 0c             	sub    esp,0xc
c001e513:	68 07 bd 02 c0       	push   0xc002bd07
c001e518:	eb 27                	jmp    c001e541 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xc0>
c001e51a:	50                   	push   eax
c001e51b:	8d 44 24 17          	lea    eax,[esp+0x17]
c001e51f:	50                   	push   eax
c001e520:	8d 44 24 20          	lea    eax,[esp+0x20]
c001e524:	50                   	push   eax
c001e525:	57                   	push   edi
c001e526:	e8 53 4e ff ff       	call   c001337e <File::stat(unsigned long long*, bool*)>
c001e52b:	0f b6 6c 24 23       	movzx  ebp,BYTE PTR [esp+0x23]
c001e530:	83 c4 10             	add    esp,0x10
c001e533:	89 e8                	mov    eax,ebp
c001e535:	84 c0                	test   al,al
c001e537:	74 19                	je     c001e552 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c001e539:	83 ec 0c             	sub    esp,0xc
c001e53c:	68 1b bd 02 c0       	push   0xc002bd1b
c001e541:	e8 e9 ba ff ff       	call   c001a02f <Krnl::panic(char const*)>
c001e546:	31 ed                	xor    ebp,ebp
c001e548:	e8 73 f1 ff ff       	call   c001d6c0 <unlockScheduler()>
c001e54d:	83 c4 10             	add    esp,0x10
c001e550:	eb 75                	jmp    c001e5c7 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x146>
c001e552:	50                   	push   eax
c001e553:	50                   	push   eax
c001e554:	6a 01                	push   0x1
c001e556:	57                   	push   edi
c001e557:	e8 76 4b ff ff       	call   c00130d2 <File::open(FileOpenMode)>
c001e55c:	83 c4 10             	add    esp,0x10
c001e55f:	85 c0                	test   eax,eax
c001e561:	74 17                	je     c001e57a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xf9>
c001e563:	83 ec 0c             	sub    esp,0xc
c001e566:	68 34 bd 02 c0       	push   0xc002bd34
c001e56b:	e8 bf ba ff ff       	call   c001a02f <Krnl::panic(char const*)>
c001e570:	e8 4b f1 ff ff       	call   c001d6c0 <unlockScheduler()>
c001e575:	83 c4 10             	add    esp,0x10
c001e578:	eb 4d                	jmp    c001e5c7 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x146>
c001e57a:	0f b7 f6             	movzx  esi,si
c001e57d:	50                   	push   eax
c001e57e:	0f b7 db             	movzx  ebx,bx
c001e581:	50                   	push   eax
c001e582:	56                   	push   esi
c001e583:	53                   	push   ebx
c001e584:	e8 b7 fd ff ff       	call   c001e340 <Vm::realToLinear(unsigned short, unsigned short)>
c001e589:	5a                   	pop    edx
c001e58a:	8b 17                	mov    edx,DWORD PTR [edi]
c001e58c:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001e590:	51                   	push   ecx
c001e591:	50                   	push   eax
c001e592:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e596:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e59a:	57                   	push   edi
c001e59b:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001e59e:	83 c4 14             	add    esp,0x14
c001e5a1:	57                   	push   edi
c001e5a2:	e8 89 4b ff ff       	call   c0013130 <File::close()>
c001e5a7:	c6 05 05 11 03 c0 00 	mov    BYTE PTR ds:0xc0031105,0x0
c001e5ae:	e8 0d f1 ff ff       	call   c001d6c0 <unlockScheduler()>
c001e5b3:	59                   	pop    ecx
c001e5b4:	ff 35 08 11 03 c0    	push   DWORD PTR ds:0xc0031108
c001e5ba:	e8 17 f7 ff ff       	call   c001dcd6 <unblockTask(ThreadControlBlock*)>
c001e5bf:	83 c4 10             	add    esp,0x10
c001e5c2:	0f b6 6c 24 0f       	movzx  ebp,BYTE PTR [esp+0xf]
c001e5c7:	83 c4 2c             	add    esp,0x2c
c001e5ca:	89 e8                	mov    eax,ebp
c001e5cc:	5b                   	pop    ebx
c001e5cd:	5e                   	pop    esi
c001e5ce:	5f                   	pop    edi
c001e5cf:	5d                   	pop    ebp
c001e5d0:	c3                   	ret    

c001e5d1 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001e5d1:	57                   	push   edi
c001e5d2:	56                   	push   esi
c001e5d3:	53                   	push   ebx
c001e5d4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e5d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e5dc:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001e5e0:	83 e8 06             	sub    eax,0x6
c001e5e3:	0f b7 c0             	movzx  eax,ax
c001e5e6:	50                   	push   eax
c001e5e7:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001e5ec:	50                   	push   eax
c001e5ed:	e8 4e fd ff ff       	call   c001e340 <Vm::realToLinear(unsigned short, unsigned short)>
c001e5f2:	5a                   	pop    edx
c001e5f3:	5e                   	pop    esi
c001e5f4:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001e5f7:	8d 56 fa             	lea    edx,[esi-0x6]
c001e5fa:	81 e2 ff ff 00 00    	and    edx,0xffff
c001e600:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001e603:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001e606:	83 c2 02             	add    edx,0x2
c001e609:	66 89 10             	mov    WORD PTR [eax],dx
c001e60c:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001e60f:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001e613:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001e616:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001e61a:	89 d6                	mov    esi,edx
c001e61c:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001e622:	66 81 e6 ff fd       	and    si,0xfdff
c001e627:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c001e62b:	74 07                	je     c001e634 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001e62d:	89 d6                	mov    esi,edx
c001e62f:	66 81 ce 00 02       	or     si,0x200
c001e634:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001e638:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e63d:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001e641:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001e649:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001e64c:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001e654:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001e657:	5b                   	pop    ebx
c001e658:	5e                   	pop    esi
c001e659:	5f                   	pop    edi
c001e65a:	c3                   	ret    

c001e65b <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001e65b:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e660:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e665:	c1 e0 04             	shl    eax,0x4
c001e668:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001e66b:	c3                   	ret    

c001e66c <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001e66c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e671:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e676:	c1 e0 04             	shl    eax,0x4
c001e679:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001e67d:	c3                   	ret    

c001e67e <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001e67e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e683:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e688:	c1 e0 04             	shl    eax,0x4
c001e68b:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001e68e:	c3                   	ret    

c001e68f <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001e68f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e694:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e699:	c1 e0 04             	shl    eax,0x4
c001e69c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e6a0:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001e6a3:	c3                   	ret    

c001e6a4 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001e6a4:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e6a9:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e6ae:	c1 e0 04             	shl    eax,0x4
c001e6b1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e6b5:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001e6b9:	c3                   	ret    

c001e6ba <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001e6ba:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e6bf:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e6c4:	c1 e0 04             	shl    eax,0x4
c001e6c7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e6cb:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001e6ce:	c3                   	ret    

c001e6cf <Vm::faultHandler(regs*)>:
c001e6cf:	55                   	push   ebp
c001e6d0:	57                   	push   edi
c001e6d1:	56                   	push   esi
c001e6d2:	53                   	push   ebx
c001e6d3:	83 ec 1c             	sub    esp,0x1c
c001e6d6:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001e6da:	8b 4f 38             	mov    ecx,DWORD PTR [edi+0x38]
c001e6dd:	8b 5f 3c             	mov    ebx,DWORD PTR [edi+0x3c]
c001e6e0:	0f b7 c1             	movzx  eax,cx
c001e6e3:	50                   	push   eax
c001e6e4:	0f b7 c3             	movzx  eax,bx
c001e6e7:	c1 e3 04             	shl    ebx,0x4
c001e6ea:	50                   	push   eax
c001e6eb:	e8 50 fc ff ff       	call   c001e340 <Vm::realToLinear(unsigned short, unsigned short)>
c001e6f0:	5a                   	pop    edx
c001e6f1:	89 c5                	mov    ebp,eax
c001e6f3:	5e                   	pop    esi
c001e6f4:	0f b7 47 44          	movzx  eax,WORD PTR [edi+0x44]
c001e6f8:	50                   	push   eax
c001e6f9:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001e6fd:	50                   	push   eax
c001e6fe:	e8 3d fc ff ff       	call   c001e340 <Vm::realToLinear(unsigned short, unsigned short)>
c001e703:	01 cb                	add    ebx,ecx
c001e705:	89 c6                	mov    esi,eax
c001e707:	0f b6 45 02          	movzx  eax,BYTE PTR [ebp+0x2]
c001e70b:	50                   	push   eax
c001e70c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e710:	50                   	push   eax
c001e711:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001e715:	50                   	push   eax
c001e716:	55                   	push   ebp
c001e717:	53                   	push   ebx
c001e718:	b3 06                	mov    bl,0x6
c001e71a:	68 4d bd 02 c0       	push   0xc002bd4d
c001e71f:	e8 f1 43 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c001e724:	83 c4 20             	add    esp,0x20
c001e727:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001e72c:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001e731:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001e735:	3c 9d                	cmp    al,0x9d
c001e737:	0f 84 d7 02 00 00    	je     c001ea14 <Vm::faultHandler(regs*)+0x345>
c001e73d:	0f 87 a3 00 00 00    	ja     c001e7e6 <Vm::faultHandler(regs*)+0x117>
c001e743:	3c 66                	cmp    al,0x66
c001e745:	0f 84 15 02 00 00    	je     c001e960 <Vm::faultHandler(regs*)+0x291>
c001e74b:	77 5f                	ja     c001e7ac <Vm::faultHandler(regs*)+0xdd>
c001e74d:	3c 36                	cmp    al,0x36
c001e74f:	0f 84 f1 01 00 00    	je     c001e946 <Vm::faultHandler(regs*)+0x277>
c001e755:	77 28                	ja     c001e77f <Vm::faultHandler(regs*)+0xb0>
c001e757:	3c 26                	cmp    al,0x26
c001e759:	0f 84 99 01 00 00    	je     c001e8f8 <Vm::faultHandler(regs*)+0x229>
c001e75f:	3c 2e                	cmp    al,0x2e
c001e761:	0f 85 3b 07 00 00    	jne    c001eea2 <Vm::faultHandler(regs*)+0x7d3>
c001e767:	83 ec 0c             	sub    esp,0xc
c001e76a:	31 db                	xor    ebx,ebx
c001e76c:	68 62 bd 02 c0       	push   0xc002bd62
c001e771:	e8 9f 43 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c001e776:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e779:	83 c4 10             	add    esp,0x10
c001e77c:	45                   	inc    ebp
c001e77d:	eb b2                	jmp    c001e731 <Vm::faultHandler(regs*)+0x62>
c001e77f:	3c 64                	cmp    al,0x64
c001e781:	0f 84 8b 01 00 00    	je     c001e912 <Vm::faultHandler(regs*)+0x243>
c001e787:	0f 87 9f 01 00 00    	ja     c001e92c <Vm::faultHandler(regs*)+0x25d>
c001e78d:	3c 3e                	cmp    al,0x3e
c001e78f:	0f 85 0d 07 00 00    	jne    c001eea2 <Vm::faultHandler(regs*)+0x7d3>
c001e795:	83 ec 0c             	sub    esp,0xc
c001e798:	b3 01                	mov    bl,0x1
c001e79a:	68 66 bd 02 c0       	push   0xc002bd66
c001e79f:	e8 71 43 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c001e7a4:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e7a7:	83 c4 10             	add    esp,0x10
c001e7aa:	eb d0                	jmp    c001e77c <Vm::faultHandler(regs*)+0xad>
c001e7ac:	3c 6d                	cmp    al,0x6d
c001e7ae:	0f 84 af 03 00 00    	je     c001eb63 <Vm::faultHandler(regs*)+0x494>
c001e7b4:	77 15                	ja     c001e7cb <Vm::faultHandler(regs*)+0xfc>
c001e7b6:	3c 67                	cmp    al,0x67
c001e7b8:	0f 84 bf 01 00 00    	je     c001e97d <Vm::faultHandler(regs*)+0x2ae>
c001e7be:	3c 6c                	cmp    al,0x6c
c001e7c0:	0f 84 3f 03 00 00    	je     c001eb05 <Vm::faultHandler(regs*)+0x436>
c001e7c6:	e9 d7 06 00 00       	jmp    c001eea2 <Vm::faultHandler(regs*)+0x7d3>
c001e7cb:	3c 6f                	cmp    al,0x6f
c001e7cd:	0f 84 a4 04 00 00    	je     c001ec77 <Vm::faultHandler(regs*)+0x5a8>
c001e7d3:	0f 82 11 04 00 00    	jb     c001ebea <Vm::faultHandler(regs*)+0x51b>
c001e7d9:	3c 9c                	cmp    al,0x9c
c001e7db:	0f 84 ba 01 00 00    	je     c001e99b <Vm::faultHandler(regs*)+0x2cc>
c001e7e1:	e9 bc 06 00 00       	jmp    c001eea2 <Vm::faultHandler(regs*)+0x7d3>
c001e7e6:	3c ec                	cmp    al,0xec
c001e7e8:	0f 84 24 06 00 00    	je     c001ee12 <Vm::faultHandler(regs*)+0x743>
c001e7ee:	0f 87 93 00 00 00    	ja     c001e887 <Vm::faultHandler(regs*)+0x1b8>
c001e7f4:	3c e4                	cmp    al,0xe4
c001e7f6:	0f 84 5c 05 00 00    	je     c001ed58 <Vm::faultHandler(regs*)+0x689>
c001e7fc:	77 6a                	ja     c001e868 <Vm::faultHandler(regs*)+0x199>
c001e7fe:	3c cd                	cmp    al,0xcd
c001e800:	0f 84 7e 02 00 00    	je     c001ea84 <Vm::faultHandler(regs*)+0x3b5>
c001e806:	3c cf                	cmp    al,0xcf
c001e808:	0f 85 94 06 00 00    	jne    c001eea2 <Vm::faultHandler(regs*)+0x7d3>
c001e80e:	83 ec 0c             	sub    esp,0xc
c001e811:	68 aa bd 02 c0       	push   0xc002bdaa
c001e816:	e8 fa 42 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c001e81b:	0f b7 16             	movzx  edx,WORD PTR [esi]
c001e81e:	89 57 38             	mov    DWORD PTR [edi+0x38],edx
c001e821:	0f b7 5e 02          	movzx  ebx,WORD PTR [esi+0x2]
c001e825:	89 5f 3c             	mov    DWORD PTR [edi+0x3c],ebx
c001e828:	0f b7 46 04          	movzx  eax,WORD PTR [esi+0x4]
c001e82c:	0d 00 02 02 00       	or     eax,0x20200
c001e831:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001e834:	56                   	push   esi
c001e835:	53                   	push   ebx
c001e836:	52                   	push   edx
c001e837:	68 b0 bd 02 c0       	push   0xc002bdb0
c001e83c:	e8 d4 42 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c001e841:	66 8b 46 04          	mov    ax,WORD PTR [esi+0x4]
c001e845:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e84b:	66 c1 e8 09          	shr    ax,0x9
c001e84f:	83 e0 01             	and    eax,0x1
c001e852:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001e855:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001e858:	83 c0 06             	add    eax,0x6
c001e85b:	25 ff ff 00 00       	and    eax,0xffff
c001e860:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001e863:	e9 95 02 00 00       	jmp    c001eafd <Vm::faultHandler(regs*)+0x42e>
c001e868:	3c e6                	cmp    al,0xe6
c001e86a:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c001e86e:	0f 84 4e 05 00 00    	je     c001edc2 <Vm::faultHandler(regs*)+0x6f3>
c001e874:	0f 82 0a 05 00 00    	jb     c001ed84 <Vm::faultHandler(regs*)+0x6b5>
c001e87a:	3c e7                	cmp    al,0xe7
c001e87c:	0f 84 69 05 00 00    	je     c001edeb <Vm::faultHandler(regs*)+0x71c>
c001e882:	e9 1b 06 00 00       	jmp    c001eea2 <Vm::faultHandler(regs*)+0x7d3>
c001e887:	3c ef                	cmp    al,0xef
c001e889:	0f 84 e6 05 00 00    	je     c001ee75 <Vm::faultHandler(regs*)+0x7a6>
c001e88f:	77 37                	ja     c001e8c8 <Vm::faultHandler(regs*)+0x1f9>
c001e891:	3c ed                	cmp    al,0xed
c001e893:	0f 84 a3 05 00 00    	je     c001ee3c <Vm::faultHandler(regs*)+0x76d>
c001e899:	3c ee                	cmp    al,0xee
c001e89b:	0f 85 01 06 00 00    	jne    c001eea2 <Vm::faultHandler(regs*)+0x7d3>
c001e8a1:	52                   	push   edx
c001e8a2:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001e8a5:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001e8a8:	68 4b be 02 c0       	push   0xc002be4b
c001e8ad:	e8 63 42 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c001e8b2:	59                   	pop    ecx
c001e8b3:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001e8b7:	5b                   	pop    ebx
c001e8b8:	50                   	push   eax
c001e8b9:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001e8bd:	50                   	push   eax
c001e8be:	e8 2a fa ff ff       	call   c001e2ed <Vm::outbv(unsigned short, unsigned char)>
c001e8c3:	e9 a5 05 00 00       	jmp    c001ee6d <Vm::faultHandler(regs*)+0x79e>
c001e8c8:	3c fa                	cmp    al,0xfa
c001e8ca:	0f 84 f7 01 00 00    	je     c001eac7 <Vm::faultHandler(regs*)+0x3f8>
c001e8d0:	3c fb                	cmp    al,0xfb
c001e8d2:	0f 84 0a 02 00 00    	je     c001eae2 <Vm::faultHandler(regs*)+0x413>
c001e8d8:	3c f3                	cmp    al,0xf3
c001e8da:	0f 85 c2 05 00 00    	jne    c001eea2 <Vm::faultHandler(regs*)+0x7d3>
c001e8e0:	83 ec 0c             	sub    esp,0xc
c001e8e3:	68 83 bd 02 c0       	push   0xc002bd83
c001e8e8:	e8 28 42 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c001e8ed:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e8f0:	83 c4 10             	add    esp,0x10
c001e8f3:	e9 84 fe ff ff       	jmp    c001e77c <Vm::faultHandler(regs*)+0xad>
c001e8f8:	83 ec 0c             	sub    esp,0xc
c001e8fb:	b3 02                	mov    bl,0x2
c001e8fd:	68 5e bd 02 c0       	push   0xc002bd5e
c001e902:	e8 0e 42 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c001e907:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e90a:	83 c4 10             	add    esp,0x10
c001e90d:	e9 6a fe ff ff       	jmp    c001e77c <Vm::faultHandler(regs*)+0xad>
c001e912:	83 ec 0c             	sub    esp,0xc
c001e915:	b3 03                	mov    bl,0x3
c001e917:	68 6a bd 02 c0       	push   0xc002bd6a
c001e91c:	e8 f4 41 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c001e921:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e924:	83 c4 10             	add    esp,0x10
c001e927:	e9 50 fe ff ff       	jmp    c001e77c <Vm::faultHandler(regs*)+0xad>
c001e92c:	83 ec 0c             	sub    esp,0xc
c001e92f:	b3 04                	mov    bl,0x4
c001e931:	68 6e bd 02 c0       	push   0xc002bd6e
c001e936:	e8 da 41 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c001e93b:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e93e:	83 c4 10             	add    esp,0x10
c001e941:	e9 36 fe ff ff       	jmp    c001e77c <Vm::faultHandler(regs*)+0xad>
c001e946:	83 ec 0c             	sub    esp,0xc
c001e949:	b3 05                	mov    bl,0x5
c001e94b:	68 72 bd 02 c0       	push   0xc002bd72
c001e950:	e8 c0 41 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c001e955:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e958:	83 c4 10             	add    esp,0x10
c001e95b:	e9 1c fe ff ff       	jmp    c001e77c <Vm::faultHandler(regs*)+0xad>
c001e960:	83 ec 0c             	sub    esp,0xc
c001e963:	68 76 bd 02 c0       	push   0xc002bd76
c001e968:	e8 a8 41 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c001e96d:	83 c4 10             	add    esp,0x10
c001e970:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e973:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001e978:	e9 ff fd ff ff       	jmp    c001e77c <Vm::faultHandler(regs*)+0xad>
c001e97d:	50                   	push   eax
c001e97e:	50                   	push   eax
c001e97f:	6a 01                	push   0x1
c001e981:	68 7b bd 02 c0       	push   0xc002bd7b
c001e986:	e8 8a 41 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c001e98b:	83 c4 10             	add    esp,0x10
c001e98e:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e991:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c001e996:	e9 e1 fd ff ff       	jmp    c001e77c <Vm::faultHandler(regs*)+0xad>
c001e99b:	83 ec 0c             	sub    esp,0xc
c001e99e:	68 89 bd 02 c0       	push   0xc002bd89
c001e9a3:	e8 6d 41 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c001e9a8:	83 c4 10             	add    esp,0x10
c001e9ab:	8b 57 44             	mov    edx,DWORD PTR [edi+0x44]
c001e9ae:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001e9b3:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c001e9b6:	74 2f                	je     c001e9e7 <Vm::faultHandler(regs*)+0x318>
c001e9b8:	83 ea 04             	sub    edx,0x4
c001e9bb:	25 ff 0d 00 00       	and    eax,0xdff
c001e9c0:	81 e2 ff ff 00 00    	and    edx,0xffff
c001e9c6:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001e9c9:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001e9cc:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e9d2:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001e9d6:	0f 84 bf 04 00 00    	je     c001ee9b <Vm::faultHandler(regs*)+0x7cc>
c001e9dc:	80 cc 02             	or     ah,0x2
c001e9df:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001e9e2:	e9 b4 04 00 00       	jmp    c001ee9b <Vm::faultHandler(regs*)+0x7cc>
c001e9e7:	83 ea 02             	sub    edx,0x2
c001e9ea:	81 e2 ff ff 00 00    	and    edx,0xffff
c001e9f0:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001e9f3:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001e9f7:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e9fd:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001ea01:	74 05                	je     c001ea08 <Vm::faultHandler(regs*)+0x339>
c001ea03:	80 cc 02             	or     ah,0x2
c001ea06:	eb 03                	jmp    c001ea0b <Vm::faultHandler(regs*)+0x33c>
c001ea08:	80 e4 fd             	and    ah,0xfd
c001ea0b:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001ea0f:	e9 87 04 00 00       	jmp    c001ee9b <Vm::faultHandler(regs*)+0x7cc>
c001ea14:	83 ec 0c             	sub    esp,0xc
c001ea17:	68 90 bd 02 c0       	push   0xc002bd90
c001ea1c:	e8 f4 40 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c001ea21:	83 c4 10             	add    esp,0x10
c001ea24:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001ea29:	74 28                	je     c001ea53 <Vm::faultHandler(regs*)+0x384>
c001ea2b:	8b 06                	mov    eax,DWORD PTR [esi]
c001ea2d:	25 ff 0d 00 00       	and    eax,0xdff
c001ea32:	0d 00 02 02 00       	or     eax,0x20200
c001ea37:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001ea3a:	8b 06                	mov    eax,DWORD PTR [esi]
c001ea3c:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001ea42:	c1 e8 09             	shr    eax,0x9
c001ea45:	83 e0 01             	and    eax,0x1
c001ea48:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001ea4b:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001ea4e:	83 c0 04             	add    eax,0x4
c001ea51:	eb 24                	jmp    c001ea77 <Vm::faultHandler(regs*)+0x3a8>
c001ea53:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001ea56:	0d 00 02 02 00       	or     eax,0x20200
c001ea5b:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001ea5e:	66 8b 06             	mov    ax,WORD PTR [esi]
c001ea61:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001ea67:	66 c1 e8 09          	shr    ax,0x9
c001ea6b:	83 e0 01             	and    eax,0x1
c001ea6e:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001ea71:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001ea74:	83 c0 02             	add    eax,0x2
c001ea77:	25 ff ff 00 00       	and    eax,0xffff
c001ea7c:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001ea7f:	e9 17 04 00 00       	jmp    c001ee9b <Vm::faultHandler(regs*)+0x7cc>
c001ea84:	53                   	push   ebx
c001ea85:	53                   	push   ebx
c001ea86:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ea8a:	50                   	push   eax
c001ea8b:	68 96 bd 02 c0       	push   0xc002bd96
c001ea90:	e8 80 40 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c001ea95:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ea99:	83 c4 10             	add    esp,0x10
c001ea9c:	3c ee                	cmp    al,0xee
c001ea9e:	75 10                	jne    c001eab0 <Vm::faultHandler(regs*)+0x3e1>
c001eaa0:	83 ec 0c             	sub    esp,0xc
c001eaa3:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001eaa6:	e8 fa f8 ff ff       	call   c001e3a5 <Vm::mainloop3(unsigned long)>
c001eaab:	e9 c0 03 00 00       	jmp    c001ee70 <Vm::faultHandler(regs*)+0x7a1>
c001eab0:	0f b7 5f 44          	movzx  ebx,WORD PTR [edi+0x44]
c001eab4:	83 ec 0c             	sub    esp,0xc
c001eab7:	53                   	push   ebx
c001eab8:	0f b7 5f 48          	movzx  ebx,WORD PTR [edi+0x48]
c001eabc:	53                   	push   ebx
c001eabd:	55                   	push   ebp
c001eabe:	50                   	push   eax
c001eabf:	57                   	push   edi
c001eac0:	e8 0c fb ff ff       	call   c001e5d1 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001eac5:	eb 36                	jmp    c001eafd <Vm::faultHandler(regs*)+0x42e>
c001eac7:	83 ec 0c             	sub    esp,0xc
c001eaca:	68 a0 bd 02 c0       	push   0xc002bda0
c001eacf:	e8 41 40 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c001ead4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ead9:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001eadd:	e9 8b 03 00 00       	jmp    c001ee6d <Vm::faultHandler(regs*)+0x79e>
c001eae2:	83 ec 0c             	sub    esp,0xc
c001eae5:	68 a5 bd 02 c0       	push   0xc002bda5
c001eaea:	e8 26 40 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c001eaef:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001eaf4:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c001eaf8:	e9 70 03 00 00       	jmp    c001ee6d <Vm::faultHandler(regs*)+0x79e>
c001eafd:	83 c4 20             	add    esp,0x20
c001eb00:	e9 99 03 00 00       	jmp    c001ee9e <Vm::faultHandler(regs*)+0x7cf>
c001eb05:	83 ec 0c             	sub    esp,0xc
c001eb08:	68 e3 bd 02 c0       	push   0xc002bde3
c001eb0d:	e8 03 40 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c001eb12:	83 c4 10             	add    esp,0x10
c001eb15:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001eb18:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001eb1d:	74 0d                	je     c001eb2c <Vm::faultHandler(regs*)+0x45d>
c001eb1f:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001eb26:	0f 87 9e 01 00 00    	ja     c001ecca <Vm::faultHandler(regs*)+0x5fb>
c001eb2c:	83 ec 0c             	sub    esp,0xc
c001eb2f:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001eb33:	0f b7 db             	movzx  ebx,bx
c001eb36:	50                   	push   eax
c001eb37:	e8 9e f7 ff ff       	call   c001e2da <Vm::inbv(unsigned short)>
c001eb3c:	83 c4 0c             	add    esp,0xc
c001eb3f:	0f b6 c0             	movzx  eax,al
c001eb42:	50                   	push   eax
c001eb43:	0f b7 47 10          	movzx  eax,WORD PTR [edi+0x10]
c001eb47:	50                   	push   eax
c001eb48:	53                   	push   ebx
c001eb49:	e8 41 fb ff ff       	call   c001e68f <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001eb4e:	83 c4 10             	add    esp,0x10
c001eb51:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001eb54:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001eb58:	74 03                	je     c001eb5d <Vm::faultHandler(regs*)+0x48e>
c001eb5a:	48                   	dec    eax
c001eb5b:	eb 01                	jmp    c001eb5e <Vm::faultHandler(regs*)+0x48f>
c001eb5d:	40                   	inc    eax
c001eb5e:	0f b7 c0             	movzx  eax,ax
c001eb61:	eb 7f                	jmp    c001ebe2 <Vm::faultHandler(regs*)+0x513>
c001eb63:	83 ec 0c             	sub    esp,0xc
c001eb66:	68 15 be 02 c0       	push   0xc002be15
c001eb6b:	e8 a5 3f ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c001eb70:	83 c4 10             	add    esp,0x10
c001eb73:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001eb76:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001eb7b:	74 0d                	je     c001eb8a <Vm::faultHandler(regs*)+0x4bb>
c001eb7d:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001eb84:	0f 87 40 01 00 00    	ja     c001ecca <Vm::faultHandler(regs*)+0x5fb>
c001eb8a:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001eb8d:	0f b7 77 10          	movzx  esi,WORD PTR [edi+0x10]
c001eb91:	0f b7 db             	movzx  ebx,bx
c001eb94:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001eb99:	74 20                	je     c001ebbb <Vm::faultHandler(regs*)+0x4ec>
c001eb9b:	ed                   	in     eax,dx
c001eb9c:	51                   	push   ecx
c001eb9d:	50                   	push   eax
c001eb9e:	56                   	push   esi
c001eb9f:	53                   	push   ebx
c001eba0:	e8 15 fb ff ff       	call   c001e6ba <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001eba5:	83 c4 10             	add    esp,0x10
c001eba8:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001ebab:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001ebaf:	74 05                	je     c001ebb6 <Vm::faultHandler(regs*)+0x4e7>
c001ebb1:	83 e8 04             	sub    eax,0x4
c001ebb4:	eb 27                	jmp    c001ebdd <Vm::faultHandler(regs*)+0x50e>
c001ebb6:	83 c0 04             	add    eax,0x4
c001ebb9:	eb 22                	jmp    c001ebdd <Vm::faultHandler(regs*)+0x50e>
c001ebbb:	66 ed                	in     ax,dx
c001ebbd:	0f b7 c0             	movzx  eax,ax
c001ebc0:	52                   	push   edx
c001ebc1:	50                   	push   eax
c001ebc2:	56                   	push   esi
c001ebc3:	53                   	push   ebx
c001ebc4:	e8 db fa ff ff       	call   c001e6a4 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001ebc9:	83 c4 10             	add    esp,0x10
c001ebcc:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001ebcf:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001ebd3:	74 05                	je     c001ebda <Vm::faultHandler(regs*)+0x50b>
c001ebd5:	83 e8 02             	sub    eax,0x2
c001ebd8:	eb 03                	jmp    c001ebdd <Vm::faultHandler(regs*)+0x50e>
c001ebda:	83 c0 02             	add    eax,0x2
c001ebdd:	25 ff ff 00 00       	and    eax,0xffff
c001ebe2:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c001ebe5:	e9 b1 02 00 00       	jmp    c001ee9b <Vm::faultHandler(regs*)+0x7cc>
c001ebea:	83 ec 0c             	sub    esp,0xc
c001ebed:	4b                   	dec    ebx
c001ebee:	68 1b be 02 c0       	push   0xc002be1b
c001ebf3:	e8 1d 3f ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c001ebf8:	83 c4 10             	add    esp,0x10
c001ebfb:	80 fb 05             	cmp    bl,0x5
c001ebfe:	77 0a                	ja     c001ec0a <Vm::faultHandler(regs*)+0x53b>
c001ec00:	0f b6 db             	movzx  ebx,bl
c001ec03:	ff 24 9d 8c be 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd4174]
c001ec0a:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001ec0e:	eb 1b                	jmp    c001ec2b <Vm::faultHandler(regs*)+0x55c>
c001ec10:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001ec14:	eb 15                	jmp    c001ec2b <Vm::faultHandler(regs*)+0x55c>
c001ec16:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001ec1a:	eb 0f                	jmp    c001ec2b <Vm::faultHandler(regs*)+0x55c>
c001ec1c:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001ec20:	eb 09                	jmp    c001ec2b <Vm::faultHandler(regs*)+0x55c>
c001ec22:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001ec25:	eb 04                	jmp    c001ec2b <Vm::faultHandler(regs*)+0x55c>
c001ec27:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001ec2b:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001ec30:	74 0d                	je     c001ec3f <Vm::faultHandler(regs*)+0x570>
c001ec32:	81 7f 14 ff ff 00 00 	cmp    DWORD PTR [edi+0x14],0xffff
c001ec39:	0f 87 8b 00 00 00    	ja     c001ecca <Vm::faultHandler(regs*)+0x5fb>
c001ec3f:	53                   	push   ebx
c001ec40:	53                   	push   ebx
c001ec41:	0f b7 57 14          	movzx  edx,WORD PTR [edi+0x14]
c001ec45:	52                   	push   edx
c001ec46:	50                   	push   eax
c001ec47:	e8 0f fa ff ff       	call   c001e65b <Vm::readByteFromReal(unsigned short, unsigned short)>
c001ec4c:	5e                   	pop    esi
c001ec4d:	0f b6 c0             	movzx  eax,al
c001ec50:	5d                   	pop    ebp
c001ec51:	50                   	push   eax
c001ec52:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001ec56:	50                   	push   eax
c001ec57:	e8 91 f6 ff ff       	call   c001e2ed <Vm::outbv(unsigned short, unsigned char)>
c001ec5c:	83 c4 10             	add    esp,0x10
c001ec5f:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001ec62:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001ec66:	74 03                	je     c001ec6b <Vm::faultHandler(regs*)+0x59c>
c001ec68:	48                   	dec    eax
c001ec69:	eb 01                	jmp    c001ec6c <Vm::faultHandler(regs*)+0x59d>
c001ec6b:	40                   	inc    eax
c001ec6c:	0f b7 c0             	movzx  eax,ax
c001ec6f:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c001ec72:	e9 24 02 00 00       	jmp    c001ee9b <Vm::faultHandler(regs*)+0x7cc>
c001ec77:	83 ec 0c             	sub    esp,0xc
c001ec7a:	4b                   	dec    ebx
c001ec7b:	68 1b be 02 c0       	push   0xc002be1b
c001ec80:	e8 90 3e ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c001ec85:	83 c4 10             	add    esp,0x10
c001ec88:	80 fb 05             	cmp    bl,0x5
c001ec8b:	77 0a                	ja     c001ec97 <Vm::faultHandler(regs*)+0x5c8>
c001ec8d:	0f b6 db             	movzx  ebx,bl
c001ec90:	ff 24 9d a4 be 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd415c]
c001ec97:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001ec9b:	eb 1b                	jmp    c001ecb8 <Vm::faultHandler(regs*)+0x5e9>
c001ec9d:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001eca1:	eb 15                	jmp    c001ecb8 <Vm::faultHandler(regs*)+0x5e9>
c001eca3:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001eca7:	eb 0f                	jmp    c001ecb8 <Vm::faultHandler(regs*)+0x5e9>
c001eca9:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001ecad:	eb 09                	jmp    c001ecb8 <Vm::faultHandler(regs*)+0x5e9>
c001ecaf:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001ecb2:	eb 04                	jmp    c001ecb8 <Vm::faultHandler(regs*)+0x5e9>
c001ecb4:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001ecb8:	8b 5f 14             	mov    ebx,DWORD PTR [edi+0x14]
c001ecbb:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001ecc0:	74 39                	je     c001ecfb <Vm::faultHandler(regs*)+0x62c>
c001ecc2:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c001ecc8:	76 31                	jbe    c001ecfb <Vm::faultHandler(regs*)+0x62c>
c001ecca:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001ecce:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001ecd2:	51                   	push   ecx
c001ecd3:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001ecd7:	51                   	push   ecx
c001ecd8:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001ecdc:	51                   	push   ecx
c001ecdd:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001ece1:	51                   	push   ecx
c001ece2:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001ece6:	52                   	push   edx
c001ece7:	50                   	push   eax
c001ece8:	50                   	push   eax
c001ece9:	68 e8 bd 02 c0       	push   0xc002bde8
c001ecee:	e8 22 3e ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c001ecf3:	83 c4 20             	add    esp,0x20
c001ecf6:	e9 fb 01 00 00       	jmp    c001eef6 <Vm::faultHandler(regs*)+0x827>
c001ecfb:	8b 77 40             	mov    esi,DWORD PTR [edi+0x40]
c001ecfe:	0f b7 d3             	movzx  edx,bx
c001ed01:	81 e6 00 04 00 00    	and    esi,0x400
c001ed07:	8b 6f 24             	mov    ebp,DWORD PTR [edi+0x24]
c001ed0a:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001ed0f:	74 1d                	je     c001ed2e <Vm::faultHandler(regs*)+0x65f>
c001ed11:	51                   	push   ecx
c001ed12:	51                   	push   ecx
c001ed13:	52                   	push   edx
c001ed14:	50                   	push   eax
c001ed15:	e8 64 f9 ff ff       	call   c001e67e <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001ed1a:	83 c4 10             	add    esp,0x10
c001ed1d:	89 ea                	mov    edx,ebp
c001ed1f:	ef                   	out    dx,eax
c001ed20:	85 f6                	test   esi,esi
c001ed22:	74 05                	je     c001ed29 <Vm::faultHandler(regs*)+0x65a>
c001ed24:	83 eb 04             	sub    ebx,0x4
c001ed27:	eb 21                	jmp    c001ed4a <Vm::faultHandler(regs*)+0x67b>
c001ed29:	83 c3 04             	add    ebx,0x4
c001ed2c:	eb 1c                	jmp    c001ed4a <Vm::faultHandler(regs*)+0x67b>
c001ed2e:	51                   	push   ecx
c001ed2f:	51                   	push   ecx
c001ed30:	52                   	push   edx
c001ed31:	50                   	push   eax
c001ed32:	e8 35 f9 ff ff       	call   c001e66c <Vm::readWordFromReal(unsigned short, unsigned short)>
c001ed37:	83 c4 10             	add    esp,0x10
c001ed3a:	89 ea                	mov    edx,ebp
c001ed3c:	66 ef                	out    dx,ax
c001ed3e:	85 f6                	test   esi,esi
c001ed40:	74 05                	je     c001ed47 <Vm::faultHandler(regs*)+0x678>
c001ed42:	83 eb 02             	sub    ebx,0x2
c001ed45:	eb 03                	jmp    c001ed4a <Vm::faultHandler(regs*)+0x67b>
c001ed47:	83 c3 02             	add    ebx,0x2
c001ed4a:	81 e3 ff ff 00 00    	and    ebx,0xffff
c001ed50:	89 5f 14             	mov    DWORD PTR [edi+0x14],ebx
c001ed53:	e9 43 01 00 00       	jmp    c001ee9b <Vm::faultHandler(regs*)+0x7cc>
c001ed58:	53                   	push   ebx
c001ed59:	53                   	push   ebx
c001ed5a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ed5e:	50                   	push   eax
c001ed5f:	68 21 be 02 c0       	push   0xc002be21
c001ed64:	e8 ac 3d ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c001ed69:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001ed70:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ed74:	89 04 24             	mov    DWORD PTR [esp],eax
c001ed77:	e8 5e f5 ff ff       	call   c001e2da <Vm::inbv(unsigned short)>
c001ed7c:	0f b6 c0             	movzx  eax,al
c001ed7f:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001ed82:	eb 5e                	jmp    c001ede2 <Vm::faultHandler(regs*)+0x713>
c001ed84:	51                   	push   ecx
c001ed85:	51                   	push   ecx
c001ed86:	53                   	push   ebx
c001ed87:	68 27 be 02 c0       	push   0xc002be27
c001ed8c:	e8 84 3d ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c001ed91:	83 c4 10             	add    esp,0x10
c001ed94:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001ed99:	74 07                	je     c001eda2 <Vm::faultHandler(regs*)+0x6d3>
c001ed9b:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001ed9f:	ed                   	in     eax,dx
c001eda0:	eb 14                	jmp    c001edb6 <Vm::faultHandler(regs*)+0x6e7>
c001eda2:	8b 5f 2c             	mov    ebx,DWORD PTR [edi+0x2c]
c001eda5:	66 31 db             	xor    bx,bx
c001eda8:	89 5f 2c             	mov    DWORD PTR [edi+0x2c],ebx
c001edab:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001edaf:	66 ed                	in     ax,dx
c001edb1:	0f b7 c0             	movzx  eax,ax
c001edb4:	09 d8                	or     eax,ebx
c001edb6:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001edb9:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001edbd:	e9 dc 00 00 00       	jmp    c001ee9e <Vm::faultHandler(regs*)+0x7cf>
c001edc2:	50                   	push   eax
c001edc3:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001edc6:	53                   	push   ebx
c001edc7:	68 2d be 02 c0       	push   0xc002be2d
c001edcc:	e8 44 3d ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c001edd1:	58                   	pop    eax
c001edd2:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001edd6:	5a                   	pop    edx
c001edd7:	50                   	push   eax
c001edd8:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001eddc:	50                   	push   eax
c001eddd:	e8 0b f5 ff ff       	call   c001e2ed <Vm::outbv(unsigned short, unsigned char)>
c001ede2:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001ede6:	e9 85 00 00 00       	jmp    c001ee70 <Vm::faultHandler(regs*)+0x7a1>
c001edeb:	50                   	push   eax
c001edec:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001edef:	53                   	push   ebx
c001edf0:	68 36 be 02 c0       	push   0xc002be36
c001edf5:	e8 1b 3d ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c001edfa:	83 c4 10             	add    esp,0x10
c001edfd:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001ee01:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001ee06:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001ee09:	74 03                	je     c001ee0e <Vm::faultHandler(regs*)+0x73f>
c001ee0b:	ef                   	out    dx,eax
c001ee0c:	eb ab                	jmp    c001edb9 <Vm::faultHandler(regs*)+0x6ea>
c001ee0e:	66 ef                	out    dx,ax
c001ee10:	eb a7                	jmp    c001edb9 <Vm::faultHandler(regs*)+0x6ea>
c001ee12:	55                   	push   ebp
c001ee13:	55                   	push   ebp
c001ee14:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001ee17:	68 3f be 02 c0       	push   0xc002be3f
c001ee1c:	e8 f4 3c ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c001ee21:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001ee28:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001ee2c:	89 04 24             	mov    DWORD PTR [esp],eax
c001ee2f:	e8 a6 f4 ff ff       	call   c001e2da <Vm::inbv(unsigned short)>
c001ee34:	0f b6 c0             	movzx  eax,al
c001ee37:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001ee3a:	eb 31                	jmp    c001ee6d <Vm::faultHandler(regs*)+0x79e>
c001ee3c:	56                   	push   esi
c001ee3d:	56                   	push   esi
c001ee3e:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001ee41:	68 45 be 02 c0       	push   0xc002be45
c001ee46:	e8 ca 3c ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c001ee4b:	83 c4 10             	add    esp,0x10
c001ee4e:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001ee51:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001ee56:	74 03                	je     c001ee5b <Vm::faultHandler(regs*)+0x78c>
c001ee58:	ed                   	in     eax,dx
c001ee59:	eb 0d                	jmp    c001ee68 <Vm::faultHandler(regs*)+0x799>
c001ee5b:	66 ed                	in     ax,dx
c001ee5d:	8b 57 2c             	mov    edx,DWORD PTR [edi+0x2c]
c001ee60:	0f b7 c0             	movzx  eax,ax
c001ee63:	66 31 d2             	xor    dx,dx
c001ee66:	09 d0                	or     eax,edx
c001ee68:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001ee6b:	eb 2e                	jmp    c001ee9b <Vm::faultHandler(regs*)+0x7cc>
c001ee6d:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001ee70:	83 c4 10             	add    esp,0x10
c001ee73:	eb 29                	jmp    c001ee9e <Vm::faultHandler(regs*)+0x7cf>
c001ee75:	50                   	push   eax
c001ee76:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001ee79:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001ee7c:	68 54 be 02 c0       	push   0xc002be54
c001ee81:	e8 8f 3c ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c001ee86:	83 c4 10             	add    esp,0x10
c001ee89:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001ee8c:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001ee91:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001ee94:	74 03                	je     c001ee99 <Vm::faultHandler(regs*)+0x7ca>
c001ee96:	ef                   	out    dx,eax
c001ee97:	eb 02                	jmp    c001ee9b <Vm::faultHandler(regs*)+0x7cc>
c001ee99:	66 ef                	out    dx,ax
c001ee9b:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001ee9e:	b0 01                	mov    al,0x1
c001eea0:	eb 56                	jmp    c001eef8 <Vm::faultHandler(regs*)+0x829>
c001eea2:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001eea6:	51                   	push   ecx
c001eea7:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001eeab:	51                   	push   ecx
c001eeac:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001eeb0:	51                   	push   ecx
c001eeb1:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001eeb5:	51                   	push   ecx
c001eeb6:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001eeba:	52                   	push   edx
c001eebb:	50                   	push   eax
c001eebc:	50                   	push   eax
c001eebd:	68 5d be 02 c0       	push   0xc002be5d
c001eec2:	e8 4e 3c ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c001eec7:	83 c4 20             	add    esp,0x20
c001eeca:	83 ec 0c             	sub    esp,0xc
c001eecd:	6a 60                	push   0x60
c001eecf:	e8 06 f4 ff ff       	call   c001e2da <Vm::inbv(unsigned short)>
c001eed4:	83 c4 10             	add    esp,0x10
c001eed7:	3c 1c                	cmp    al,0x1c
c001eed9:	74 04                	je     c001eedf <Vm::faultHandler(regs*)+0x810>
c001eedb:	3c 5a                	cmp    al,0x5a
c001eedd:	75 eb                	jne    c001eeca <Vm::faultHandler(regs*)+0x7fb>
c001eedf:	3c 1c                	cmp    al,0x1c
c001eee1:	74 04                	je     c001eee7 <Vm::faultHandler(regs*)+0x818>
c001eee3:	3c 5a                	cmp    al,0x5a
c001eee5:	75 0f                	jne    c001eef6 <Vm::faultHandler(regs*)+0x827>
c001eee7:	83 ec 0c             	sub    esp,0xc
c001eeea:	6a 60                	push   0x60
c001eeec:	e8 e9 f3 ff ff       	call   c001e2da <Vm::inbv(unsigned short)>
c001eef1:	83 c4 10             	add    esp,0x10
c001eef4:	eb e9                	jmp    c001eedf <Vm::faultHandler(regs*)+0x810>
c001eef6:	31 c0                	xor    eax,eax
c001eef8:	83 c4 1c             	add    esp,0x1c
c001eefb:	5b                   	pop    ebx
c001eefc:	5e                   	pop    esi
c001eefd:	5f                   	pop    edi
c001eefe:	5d                   	pop    ebp
c001eeff:	c3                   	ret    

c001ef00 <Vm::fpuInternalTo32(unsigned long long)>:
c001ef00:	57                   	push   edi
c001ef01:	56                   	push   esi
c001ef02:	53                   	push   ebx
c001ef03:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ef07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef0b:	89 d6                	mov    esi,edx
c001ef0d:	89 d7                	mov    edi,edx
c001ef0f:	89 c1                	mov    ecx,eax
c001ef11:	c1 ef 14             	shr    edi,0x14
c001ef14:	89 d3                	mov    ebx,edx
c001ef16:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001ef1c:	31 d2                	xor    edx,edx
c001ef1e:	89 f8                	mov    eax,edi
c001ef20:	81 e6 00 00 00 80    	and    esi,0x80000000
c001ef26:	bf ff 00 00 00       	mov    edi,0xff
c001ef2b:	05 80 fc ff ff       	add    eax,0xfffffc80
c001ef30:	83 d2 ff             	adc    edx,0xffffffff
c001ef33:	39 c7                	cmp    edi,eax
c001ef35:	bf 00 00 00 00       	mov    edi,0x0
c001ef3a:	19 d7                	sbb    edi,edx
c001ef3c:	72 15                	jb     c001ef53 <Vm::fpuInternalTo32(unsigned long long)+0x53>
c001ef3e:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001ef42:	c1 e0 17             	shl    eax,0x17
c001ef45:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001ef4b:	09 f1                	or     ecx,esi
c001ef4d:	09 c1                	or     ecx,eax
c001ef4f:	89 cf                	mov    edi,ecx
c001ef51:	eb 02                	jmp    c001ef55 <Vm::fpuInternalTo32(unsigned long long)+0x55>
c001ef53:	31 ff                	xor    edi,edi
c001ef55:	89 f8                	mov    eax,edi
c001ef57:	5b                   	pop    ebx
c001ef58:	5e                   	pop    esi
c001ef59:	5f                   	pop    edi
c001ef5a:	c3                   	ret    

c001ef5b <Vm::fpuInternalTo64(unsigned long long)>:
c001ef5b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef5f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ef63:	c3                   	ret    

c001ef64 <Vm::fpu32ToInternal(unsigned int)>:
c001ef64:	57                   	push   edi
c001ef65:	31 ff                	xor    edi,edi
c001ef67:	56                   	push   esi
c001ef68:	53                   	push   ebx
c001ef69:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ef6d:	89 cb                	mov    ebx,ecx
c001ef6f:	89 ce                	mov    esi,ecx
c001ef71:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001ef77:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c001ef7d:	c1 e9 17             	shr    ecx,0x17
c001ef80:	89 f0                	mov    eax,esi
c001ef82:	0f b6 d1             	movzx  edx,cl
c001ef85:	81 c2 80 03 00 00    	add    edx,0x380
c001ef8b:	89 d1                	mov    ecx,edx
c001ef8d:	89 fa                	mov    edx,edi
c001ef8f:	c1 e1 14             	shl    ecx,0x14
c001ef92:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001ef96:	c1 e0 1d             	shl    eax,0x1d
c001ef99:	89 d7                	mov    edi,edx
c001ef9b:	89 c6                	mov    esi,eax
c001ef9d:	89 ca                	mov    edx,ecx
c001ef9f:	89 f0                	mov    eax,esi
c001efa1:	09 fa                	or     edx,edi
c001efa3:	09 da                	or     edx,ebx
c001efa5:	5b                   	pop    ebx
c001efa6:	5e                   	pop    esi
c001efa7:	5f                   	pop    edi
c001efa8:	c3                   	ret    

c001efa9 <Vm::fpu64ToInternal(unsigned long long)>:
c001efa9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001efad:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001efb1:	c3                   	ret    

c001efb2 <Vm::fpuFloatToLong(unsigned long long)>:
c001efb2:	57                   	push   edi
c001efb3:	31 c0                	xor    eax,eax
c001efb5:	56                   	push   esi
c001efb6:	31 d2                	xor    edx,edx
c001efb8:	53                   	push   ebx
c001efb9:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001efbd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001efc1:	89 d9                	mov    ecx,ebx
c001efc3:	c1 e9 14             	shr    ecx,0x14
c001efc6:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001efcc:	89 cf                	mov    edi,ecx
c001efce:	81 ef ff 03 00 00    	sub    edi,0x3ff
c001efd4:	78 33                	js     c001f009 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001efd6:	89 d9                	mov    ecx,ebx
c001efd8:	89 f0                	mov    eax,esi
c001efda:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001efe0:	81 c9 00 00 10 00    	or     ecx,0x100000
c001efe6:	89 ca                	mov    edx,ecx
c001efe8:	b9 34 00 00 00       	mov    ecx,0x34
c001efed:	29 f9                	sub    ecx,edi
c001efef:	0f ad d0             	shrd   eax,edx,cl
c001eff2:	d3 fa                	sar    edx,cl
c001eff4:	f6 c1 20             	test   cl,0x20
c001eff7:	74 05                	je     c001effe <Vm::fpuFloatToLong(unsigned long long)+0x4c>
c001eff9:	89 d0                	mov    eax,edx
c001effb:	c1 fa 1f             	sar    edx,0x1f
c001effe:	85 db                	test   ebx,ebx
c001f000:	79 07                	jns    c001f009 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f002:	f7 d8                	neg    eax
c001f004:	83 d2 00             	adc    edx,0x0
c001f007:	f7 da                	neg    edx
c001f009:	5b                   	pop    ebx
c001f00a:	5e                   	pop    esi
c001f00b:	5f                   	pop    edi
c001f00c:	c3                   	ret    

c001f00d <Vm::fpuULongToFloat(unsigned long long)>:
c001f00d:	57                   	push   edi
c001f00e:	31 c9                	xor    ecx,ecx
c001f010:	56                   	push   esi
c001f011:	53                   	push   ebx
c001f012:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f016:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001f01a:	0f ba e7 14          	bt     edi,0x14
c001f01e:	72 07                	jb     c001f027 <Vm::fpuULongToFloat(unsigned long long)+0x1a>
c001f020:	01 f6                	add    esi,esi
c001f022:	11 ff                	adc    edi,edi
c001f024:	41                   	inc    ecx
c001f025:	eb f3                	jmp    c001f01a <Vm::fpuULongToFloat(unsigned long long)+0xd>
c001f027:	89 fa                	mov    edx,edi
c001f029:	89 f0                	mov    eax,esi
c001f02b:	bb 33 04 00 00       	mov    ebx,0x433
c001f030:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001f036:	29 cb                	sub    ebx,ecx
c001f038:	89 d9                	mov    ecx,ebx
c001f03a:	5b                   	pop    ebx
c001f03b:	c1 e1 14             	shl    ecx,0x14
c001f03e:	5e                   	pop    esi
c001f03f:	09 ca                	or     edx,ecx
c001f041:	5f                   	pop    edi
c001f042:	c3                   	ret    

c001f043 <Vm::fpuLongToFloat(long long)>:
c001f043:	56                   	push   esi
c001f044:	31 c0                	xor    eax,eax
c001f046:	53                   	push   ebx
c001f047:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f04b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f04f:	39 c8                	cmp    eax,ecx
c001f051:	19 d8                	sbb    eax,ebx
c001f053:	7d 04                	jge    c001f059 <Vm::fpuLongToFloat(long long)+0x16>
c001f055:	31 f6                	xor    esi,esi
c001f057:	eb 0c                	jmp    c001f065 <Vm::fpuLongToFloat(long long)+0x22>
c001f059:	f7 d9                	neg    ecx
c001f05b:	be 01 00 00 00       	mov    esi,0x1
c001f060:	83 d3 00             	adc    ebx,0x0
c001f063:	f7 db                	neg    ebx
c001f065:	31 c0                	xor    eax,eax
c001f067:	0f ba e3 14          	bt     ebx,0x14
c001f06b:	72 07                	jb     c001f074 <Vm::fpuLongToFloat(long long)+0x31>
c001f06d:	01 c9                	add    ecx,ecx
c001f06f:	11 db                	adc    ebx,ebx
c001f071:	40                   	inc    eax
c001f072:	eb f3                	jmp    c001f067 <Vm::fpuLongToFloat(long long)+0x24>
c001f074:	ba 33 04 00 00       	mov    edx,0x433
c001f079:	29 c2                	sub    edx,eax
c001f07b:	89 c8                	mov    eax,ecx
c001f07d:	c1 e2 14             	shl    edx,0x14
c001f080:	89 d9                	mov    ecx,ebx
c001f082:	89 f3                	mov    ebx,esi
c001f084:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f08a:	09 ca                	or     edx,ecx
c001f08c:	84 db                	test   bl,bl
c001f08e:	74 06                	je     c001f096 <Vm::fpuLongToFloat(long long)+0x53>
c001f090:	81 ca 00 00 00 80    	or     edx,0x80000000
c001f096:	5b                   	pop    ebx
c001f097:	5e                   	pop    esi
c001f098:	c3                   	ret    

c001f099 <Vm::fpuGet0()>:
c001f099:	31 c0                	xor    eax,eax
c001f09b:	31 d2                	xor    edx,edx
c001f09d:	c3                   	ret    

c001f09e <Vm::fpuGet1()>:
c001f09e:	b8 01 00 00 00       	mov    eax,0x1
c001f0a3:	31 d2                	xor    edx,edx
c001f0a5:	c3                   	ret    

c001f0a6 <Vm::fpuGetPi()>:
c001f0a6:	b8 03 00 00 00       	mov    eax,0x3
c001f0ab:	31 d2                	xor    edx,edx
c001f0ad:	c3                   	ret    

c001f0ae <Vm::fpuGetLog2E()>:
c001f0ae:	83 ec 18             	sub    esp,0x18
c001f0b1:	68 bc be 02 c0       	push   0xc002bebc
c001f0b6:	e8 74 af ff ff       	call   c001a02f <Krnl::panic(char const*)>
c001f0bb:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f0c0:	31 d2                	xor    edx,edx
c001f0c2:	83 c4 1c             	add    esp,0x1c
c001f0c5:	c3                   	ret    

c001f0c6 <Vm::fpuGetLogE2()>:
c001f0c6:	83 ec 18             	sub    esp,0x18
c001f0c9:	68 c8 be 02 c0       	push   0xc002bec8
c001f0ce:	e8 5c af ff ff       	call   c001a02f <Krnl::panic(char const*)>
c001f0d3:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f0d8:	31 d2                	xor    edx,edx
c001f0da:	83 c4 1c             	add    esp,0x1c
c001f0dd:	c3                   	ret    

c001f0de <Vm::fpuGetLog210()>:
c001f0de:	83 ec 18             	sub    esp,0x18
c001f0e1:	68 d4 be 02 c0       	push   0xc002bed4
c001f0e6:	e8 44 af ff ff       	call   c001a02f <Krnl::panic(char const*)>
c001f0eb:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f0f0:	31 d2                	xor    edx,edx
c001f0f2:	83 c4 1c             	add    esp,0x1c
c001f0f5:	c3                   	ret    

c001f0f6 <Vm::fpuGetLog102()>:
c001f0f6:	83 ec 18             	sub    esp,0x18
c001f0f9:	68 e1 be 02 c0       	push   0xc002bee1
c001f0fe:	e8 2c af ff ff       	call   c001a02f <Krnl::panic(char const*)>
c001f103:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f108:	31 d2                	xor    edx,edx
c001f10a:	83 c4 1c             	add    esp,0x1c
c001f10d:	c3                   	ret    

c001f10e <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c001f10e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f112:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001f116:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f11a:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c001f11e:	0f 92 c0             	setb   al
c001f121:	c3                   	ret    

c001f122 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c001f122:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f126:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f12a:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c001f12e:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c001f132:	09 c2                	or     edx,eax
c001f134:	0f 94 c0             	sete   al
c001f137:	c3                   	ret    

c001f138 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c001f138:	57                   	push   edi
c001f139:	56                   	push   esi
c001f13a:	53                   	push   ebx
c001f13b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f13f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f143:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001f147:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001f14b:	57                   	push   edi
c001f14c:	56                   	push   esi
c001f14d:	53                   	push   ebx
c001f14e:	51                   	push   ecx
c001f14f:	e8 ce ff ff ff       	call   c001f122 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c001f154:	83 c4 10             	add    esp,0x10
c001f157:	88 c2                	mov    dl,al
c001f159:	31 c0                	xor    eax,eax
c001f15b:	84 d2                	test   dl,dl
c001f15d:	75 0c                	jne    c001f16b <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x33>
c001f15f:	57                   	push   edi
c001f160:	56                   	push   esi
c001f161:	53                   	push   ebx
c001f162:	51                   	push   ecx
c001f163:	e8 a6 ff ff ff       	call   c001f10e <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c001f168:	83 c4 10             	add    esp,0x10
c001f16b:	83 e0 01             	and    eax,0x1
c001f16e:	5b                   	pop    ebx
c001f16f:	88 c1                	mov    cl,al
c001f171:	83 e2 01             	and    edx,0x1
c001f174:	a0 41 11 03 c0       	mov    al,ds:0xc0031141
c001f179:	c1 e2 06             	shl    edx,0x6
c001f17c:	83 e0 ba             	and    eax,0xffffffba
c001f17f:	5e                   	pop    esi
c001f180:	09 c8                	or     eax,ecx
c001f182:	5f                   	pop    edi
c001f183:	09 d0                	or     eax,edx
c001f185:	a2 41 11 03 c0       	mov    ds:0xc0031141,al
c001f18a:	c3                   	ret    

c001f18b <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c001f18b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f18f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f193:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001f197:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c001f19b:	c3                   	ret    

c001f19c <Vm::fpuAbs(unsigned long long)>:
c001f19c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f1a0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f1a4:	c3                   	ret    

c001f1a5 <Vm::fpuChs(unsigned long long)>:
c001f1a5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f1a9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f1ad:	f7 d8                	neg    eax
c001f1af:	83 d2 00             	adc    edx,0x0
c001f1b2:	f7 da                	neg    edx
c001f1b4:	c3                   	ret    

c001f1b5 <Vm::fpuSub(unsigned long long, unsigned long long)>:
c001f1b5:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c001f1b9:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c001f1be:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c001f1c2:	eb c7                	jmp    c001f18b <Vm::fpuAdd(unsigned long long, unsigned long long)>

c001f1c4 <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c001f1c4:	53                   	push   ebx
c001f1c5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f1c9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f1cd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f1d1:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f1d5:	0f af ca             	imul   ecx,edx
c001f1d8:	0f af d8             	imul   ebx,eax
c001f1db:	f7 e2                	mul    edx
c001f1dd:	01 d9                	add    ecx,ebx
c001f1df:	5b                   	pop    ebx
c001f1e0:	01 ca                	add    edx,ecx
c001f1e2:	c3                   	ret    

c001f1e3 <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c001f1e3:	83 ec 0c             	sub    esp,0xc
c001f1e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f1ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f1ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f1f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f1f6:	e8 a1 70 00 00       	call   c002629c <__udivdi3>
c001f1fb:	83 c4 1c             	add    esp,0x1c
c001f1fe:	c3                   	ret    

c001f1ff <Vm::fpuSquare(unsigned long long)>:
c001f1ff:	50                   	push   eax
c001f200:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f204:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f208:	52                   	push   edx
c001f209:	50                   	push   eax
c001f20a:	52                   	push   edx
c001f20b:	50                   	push   eax
c001f20c:	e8 b3 ff ff ff       	call   c001f1c4 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f211:	83 c4 14             	add    esp,0x14
c001f214:	c3                   	ret    

c001f215 <Vm::fpuGetReg(int)>:
c001f215:	83 ec 0c             	sub    esp,0xc
c001f218:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001f21d:	76 10                	jbe    c001f22f <Vm::fpuGetReg(int)+0x1a>
c001f21f:	83 ec 0c             	sub    esp,0xc
c001f222:	68 ee be 02 c0       	push   0xc002beee
c001f227:	e8 03 ae ff ff       	call   c001a02f <Krnl::panic(char const*)>
c001f22c:	83 c4 10             	add    esp,0x10
c001f22f:	a0 41 11 03 c0       	mov    al,ds:0xc0031141
c001f234:	b9 08 00 00 00       	mov    ecx,0x8
c001f239:	c0 e8 03             	shr    al,0x3
c001f23c:	83 e0 07             	and    eax,0x7
c001f23f:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f243:	99                   	cdq    
c001f244:	f7 f9                	idiv   ecx
c001f246:	8b 04 d5 44 11 03 c0 	mov    eax,DWORD PTR [edx*8-0x3ffceebc]
c001f24d:	8b 14 d5 48 11 03 c0 	mov    edx,DWORD PTR [edx*8-0x3ffceeb8]
c001f254:	83 c4 0c             	add    esp,0xc
c001f257:	c3                   	ret    

c001f258 <Vm::fpuSetReg(int, unsigned long long)>:
c001f258:	57                   	push   edi
c001f259:	56                   	push   esi
c001f25a:	52                   	push   edx
c001f25b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001f25f:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001f263:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001f268:	76 10                	jbe    c001f27a <Vm::fpuSetReg(int, unsigned long long)+0x22>
c001f26a:	83 ec 0c             	sub    esp,0xc
c001f26d:	68 01 bf 02 c0       	push   0xc002bf01
c001f272:	e8 b8 ad ff ff       	call   c001a02f <Krnl::panic(char const*)>
c001f277:	83 c4 10             	add    esp,0x10
c001f27a:	a0 41 11 03 c0       	mov    al,ds:0xc0031141
c001f27f:	b9 08 00 00 00       	mov    ecx,0x8
c001f284:	c0 e8 03             	shr    al,0x3
c001f287:	83 e0 07             	and    eax,0x7
c001f28a:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f28e:	99                   	cdq    
c001f28f:	f7 f9                	idiv   ecx
c001f291:	89 34 d5 44 11 03 c0 	mov    DWORD PTR [edx*8-0x3ffceebc],esi
c001f298:	89 3c d5 48 11 03 c0 	mov    DWORD PTR [edx*8-0x3ffceeb8],edi
c001f29f:	58                   	pop    eax
c001f2a0:	5e                   	pop    esi
c001f2a1:	5f                   	pop    edi
c001f2a2:	c3                   	ret    

c001f2a3 <Vm::fpuPush(unsigned long long)>:
c001f2a3:	a0 41 11 03 c0       	mov    al,ds:0xc0031141
c001f2a8:	c0 e8 03             	shr    al,0x3
c001f2ab:	83 e0 07             	and    eax,0x7
c001f2ae:	83 c0 07             	add    eax,0x7
c001f2b1:	88 c2                	mov    dl,al
c001f2b3:	83 e0 07             	and    eax,0x7
c001f2b6:	83 e2 07             	and    edx,0x7
c001f2b9:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c001f2c0:	8a 15 41 11 03 c0    	mov    dl,BYTE PTR ds:0xc0031141
c001f2c6:	83 e2 c7             	and    edx,0xffffffc7
c001f2c9:	09 ca                	or     edx,ecx
c001f2cb:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f2cf:	88 15 41 11 03 c0    	mov    BYTE PTR ds:0xc0031141,dl
c001f2d5:	89 0c c5 48 11 03 c0 	mov    DWORD PTR [eax*8-0x3ffceeb8],ecx
c001f2dc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f2e0:	89 14 c5 44 11 03 c0 	mov    DWORD PTR [eax*8-0x3ffceebc],edx
c001f2e7:	a1 84 11 03 c0       	mov    eax,ds:0xc0031184
c001f2ec:	83 f8 08             	cmp    eax,0x8
c001f2ef:	75 08                	jne    c001f2f9 <Vm::fpuPush(unsigned long long)+0x56>
c001f2f1:	80 0d 40 11 03 c0 40 	or     BYTE PTR ds:0xc0031140,0x40
c001f2f8:	c3                   	ret    
c001f2f9:	40                   	inc    eax
c001f2fa:	a3 84 11 03 c0       	mov    ds:0xc0031184,eax
c001f2ff:	c3                   	ret    

c001f300 <Vm::fpuPop()>:
c001f300:	8a 0d 41 11 03 c0    	mov    cl,BYTE PTR ds:0xc0031141
c001f306:	53                   	push   ebx
c001f307:	c0 e9 03             	shr    cl,0x3
c001f30a:	8a 1d 41 11 03 c0    	mov    bl,BYTE PTR ds:0xc0031141
c001f310:	83 e1 07             	and    ecx,0x7
c001f313:	83 e3 c7             	and    ebx,0xffffffc7
c001f316:	8b 04 cd 44 11 03 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffceebc]
c001f31d:	8b 14 cd 48 11 03 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffceeb8]
c001f324:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c001f32b:	83 e1 38             	and    ecx,0x38
c001f32e:	09 d9                	or     ecx,ebx
c001f330:	88 0d 41 11 03 c0    	mov    BYTE PTR ds:0xc0031141,cl
c001f336:	8b 0d 84 11 03 c0    	mov    ecx,DWORD PTR ds:0xc0031184
c001f33c:	85 c9                	test   ecx,ecx
c001f33e:	74 09                	je     c001f349 <Vm::fpuPop()+0x49>
c001f340:	49                   	dec    ecx
c001f341:	89 0d 84 11 03 c0    	mov    DWORD PTR ds:0xc0031184,ecx
c001f347:	eb 07                	jmp    c001f350 <Vm::fpuPop()+0x50>
c001f349:	80 0d 40 11 03 c0 40 	or     BYTE PTR ds:0xc0031140,0x40
c001f350:	5b                   	pop    ebx
c001f351:	c3                   	ret    

c001f352 <Vm::x87Handler(regs*)>:
c001f352:	55                   	push   ebp
c001f353:	57                   	push   edi
c001f354:	56                   	push   esi
c001f355:	53                   	push   ebx
c001f356:	83 ec 1c             	sub    esp,0x1c
c001f359:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001f35d:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c001f362:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c001f365:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c001f36d:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001f371:	50                   	push   eax
c001f372:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001f376:	50                   	push   eax
c001f377:	8d 44 24 14          	lea    eax,[esp+0x14]
c001f37b:	50                   	push   eax
c001f37c:	53                   	push   ebx
c001f37d:	e8 a8 a4 ff ff       	call   c001982a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001f382:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c001f385:	83 c4 10             	add    esp,0x10
c001f388:	89 c6                	mov    esi,eax
c001f38a:	80 fa d9             	cmp    dl,0xd9
c001f38d:	0f 85 52 01 00 00    	jne    c001f4e5 <Vm::x87Handler(regs*)+0x193>
c001f393:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f397:	8d 50 20             	lea    edx,[eax+0x20]
c001f39a:	80 fa 0e             	cmp    dl,0xe
c001f39d:	0f 87 86 00 00 00    	ja     c001f429 <Vm::x87Handler(regs*)+0xd7>
c001f3a3:	0f b6 d2             	movzx  edx,dl
c001f3a6:	ff 24 95 14 bf 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd40ec]
c001f3ad:	e8 e7 fc ff ff       	call   c001f099 <Vm::fpuGet0()>
c001f3b2:	eb 05                	jmp    c001f3b9 <Vm::x87Handler(regs*)+0x67>
c001f3b4:	e8 e5 fc ff ff       	call   c001f09e <Vm::fpuGet1()>
c001f3b9:	57                   	push   edi
c001f3ba:	57                   	push   edi
c001f3bb:	52                   	push   edx
c001f3bc:	50                   	push   eax
c001f3bd:	e8 e1 fe ff ff       	call   c001f2a3 <Vm::fpuPush(unsigned long long)>
c001f3c2:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f3c6:	83 c4 10             	add    esp,0x10
c001f3c9:	b0 01                	mov    al,0x1
c001f3cb:	e9 e3 09 00 00       	jmp    c001fdb3 <Vm::x87Handler(regs*)+0xa61>
c001f3d0:	83 ec 0c             	sub    esp,0xc
c001f3d3:	6a 00                	push   0x0
c001f3d5:	e8 3b fe ff ff       	call   c001f215 <Vm::fpuGetReg(int)>
c001f3da:	59                   	pop    ecx
c001f3db:	5e                   	pop    esi
c001f3dc:	52                   	push   edx
c001f3dd:	50                   	push   eax
c001f3de:	e8 c2 fd ff ff       	call   c001f1a5 <Vm::fpuChs(unsigned long long)>
c001f3e3:	eb 13                	jmp    c001f3f8 <Vm::x87Handler(regs*)+0xa6>
c001f3e5:	83 ec 0c             	sub    esp,0xc
c001f3e8:	6a 00                	push   0x0
c001f3ea:	e8 26 fe ff ff       	call   c001f215 <Vm::fpuGetReg(int)>
c001f3ef:	5f                   	pop    edi
c001f3f0:	5d                   	pop    ebp
c001f3f1:	52                   	push   edx
c001f3f2:	50                   	push   eax
c001f3f3:	e8 a4 fd ff ff       	call   c001f19c <Vm::fpuAbs(unsigned long long)>
c001f3f8:	83 c4 0c             	add    esp,0xc
c001f3fb:	52                   	push   edx
c001f3fc:	50                   	push   eax
c001f3fd:	6a 00                	push   0x0
c001f3ff:	e8 54 fe ff ff       	call   c001f258 <Vm::fpuSetReg(int, unsigned long long)>
c001f404:	eb bc                	jmp    c001f3c2 <Vm::x87Handler(regs*)+0x70>
c001f406:	e8 d3 fc ff ff       	call   c001f0de <Vm::fpuGetLog210()>
c001f40b:	eb ac                	jmp    c001f3b9 <Vm::x87Handler(regs*)+0x67>
c001f40d:	e8 9c fc ff ff       	call   c001f0ae <Vm::fpuGetLog2E()>
c001f412:	eb a5                	jmp    c001f3b9 <Vm::x87Handler(regs*)+0x67>
c001f414:	e8 8d fc ff ff       	call   c001f0a6 <Vm::fpuGetPi()>
c001f419:	eb 9e                	jmp    c001f3b9 <Vm::x87Handler(regs*)+0x67>
c001f41b:	e8 d6 fc ff ff       	call   c001f0f6 <Vm::fpuGetLog102()>
c001f420:	eb 97                	jmp    c001f3b9 <Vm::x87Handler(regs*)+0x67>
c001f422:	e8 9f fc ff ff       	call   c001f0c6 <Vm::fpuGetLogE2()>
c001f427:	eb 90                	jmp    c001f3b9 <Vm::x87Handler(regs*)+0x67>
c001f429:	8d 50 40             	lea    edx,[eax+0x40]
c001f42c:	80 fa 07             	cmp    dl,0x7
c001f42f:	77 15                	ja     c001f446 <Vm::x87Handler(regs*)+0xf4>
c001f431:	83 ec 0c             	sub    esp,0xc
c001f434:	2d c0 00 00 00       	sub    eax,0xc0
c001f439:	50                   	push   eax
c001f43a:	e8 d6 fd ff ff       	call   c001f215 <Vm::fpuGetReg(int)>
c001f43f:	59                   	pop    ecx
c001f440:	5e                   	pop    esi
c001f441:	e9 75 ff ff ff       	jmp    c001f3bb <Vm::x87Handler(regs*)+0x69>
c001f446:	8d 50 38             	lea    edx,[eax+0x38]
c001f449:	80 fa 07             	cmp    dl,0x7
c001f44c:	77 3c                	ja     c001f48a <Vm::x87Handler(regs*)+0x138>
c001f44e:	83 ec 0c             	sub    esp,0xc
c001f451:	2d c8 00 00 00       	sub    eax,0xc8
c001f456:	50                   	push   eax
c001f457:	e8 b9 fd ff ff       	call   c001f215 <Vm::fpuGetReg(int)>
c001f45c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f463:	89 c6                	mov    esi,eax
c001f465:	89 d7                	mov    edi,edx
c001f467:	e8 a9 fd ff ff       	call   c001f215 <Vm::fpuGetReg(int)>
c001f46c:	83 c4 0c             	add    esp,0xc
c001f46f:	52                   	push   edx
c001f470:	50                   	push   eax
c001f471:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f475:	2d c8 00 00 00       	sub    eax,0xc8
c001f47a:	50                   	push   eax
c001f47b:	e8 d8 fd ff ff       	call   c001f258 <Vm::fpuSetReg(int, unsigned long long)>
c001f480:	83 c4 0c             	add    esp,0xc
c001f483:	57                   	push   edi
c001f484:	56                   	push   esi
c001f485:	e9 73 ff ff ff       	jmp    c001f3fd <Vm::x87Handler(regs*)+0xab>
c001f48a:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f48e:	84 d2                	test   dl,dl
c001f490:	75 0f                	jne    c001f4a1 <Vm::x87Handler(regs*)+0x14f>
c001f492:	83 ec 0c             	sub    esp,0xc
c001f495:	ff 36                	push   DWORD PTR [esi]
c001f497:	e8 c8 fa ff ff       	call   c001ef64 <Vm::fpu32ToInternal(unsigned int)>
c001f49c:	e9 bf 00 00 00       	jmp    c001f560 <Vm::x87Handler(regs*)+0x20e>
c001f4a1:	80 fa 03             	cmp    dl,0x3
c001f4a4:	75 13                	jne    c001f4b9 <Vm::x87Handler(regs*)+0x167>
c001f4a6:	e8 55 fe ff ff       	call   c001f300 <Vm::fpuPop()>
c001f4ab:	55                   	push   ebp
c001f4ac:	55                   	push   ebp
c001f4ad:	52                   	push   edx
c001f4ae:	50                   	push   eax
c001f4af:	e8 4c fa ff ff       	call   c001ef00 <Vm::fpuInternalTo32(unsigned long long)>
c001f4b4:	e9 88 00 00 00       	jmp    c001f541 <Vm::x87Handler(regs*)+0x1ef>
c001f4b9:	80 fa 05             	cmp    dl,0x5
c001f4bc:	75 0e                	jne    c001f4cc <Vm::x87Handler(regs*)+0x17a>
c001f4be:	66 8b 06             	mov    ax,WORD PTR [esi]
c001f4c1:	66 a3 42 11 03 c0    	mov    ds:0xc0031142,ax
c001f4c7:	e9 df 00 00 00       	jmp    c001f5ab <Vm::x87Handler(regs*)+0x259>
c001f4cc:	31 c0                	xor    eax,eax
c001f4ce:	80 fa 07             	cmp    dl,0x7
c001f4d1:	0f 85 dc 08 00 00    	jne    c001fdb3 <Vm::x87Handler(regs*)+0xa61>
c001f4d7:	66 a1 42 11 03 c0    	mov    ax,ds:0xc0031142
c001f4dd:	66 89 06             	mov    WORD PTR [esi],ax
c001f4e0:	e9 c6 00 00 00       	jmp    c001f5ab <Vm::x87Handler(regs*)+0x259>
c001f4e5:	80 fa d8             	cmp    dl,0xd8
c001f4e8:	0f 84 c9 00 00 00    	je     c001f5b7 <Vm::x87Handler(regs*)+0x265>
c001f4ee:	80 fa dc             	cmp    dl,0xdc
c001f4f1:	0f 84 0d 02 00 00    	je     c001f704 <Vm::x87Handler(regs*)+0x3b2>
c001f4f7:	80 fa de             	cmp    dl,0xde
c001f4fa:	0f 84 cd 02 00 00    	je     c001f7cd <Vm::x87Handler(regs*)+0x47b>
c001f500:	80 fa dd             	cmp    dl,0xdd
c001f503:	0f 84 5f 04 00 00    	je     c001f968 <Vm::x87Handler(regs*)+0x616>
c001f509:	80 fa da             	cmp    dl,0xda
c001f50c:	0f 84 24 05 00 00    	je     c001fa36 <Vm::x87Handler(regs*)+0x6e4>
c001f512:	80 fa df             	cmp    dl,0xdf
c001f515:	0f 84 68 05 00 00    	je     c001fa83 <Vm::x87Handler(regs*)+0x731>
c001f51b:	31 c0                	xor    eax,eax
c001f51d:	80 fa db             	cmp    dl,0xdb
c001f520:	0f 85 8d 08 00 00    	jne    c001fdb3 <Vm::x87Handler(regs*)+0xa61>
c001f526:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f52a:	80 fa 03             	cmp    dl,0x3
c001f52d:	0f 85 70 06 00 00    	jne    c001fba3 <Vm::x87Handler(regs*)+0x851>
c001f533:	e8 c8 fd ff ff       	call   c001f300 <Vm::fpuPop()>
c001f538:	55                   	push   ebp
c001f539:	55                   	push   ebp
c001f53a:	52                   	push   edx
c001f53b:	50                   	push   eax
c001f53c:	e8 71 fa ff ff       	call   c001efb2 <Vm::fpuFloatToLong(unsigned long long)>
c001f541:	83 c4 10             	add    esp,0x10
c001f544:	89 06                	mov    DWORD PTR [esi],eax
c001f546:	eb 63                	jmp    c001f5ab <Vm::x87Handler(regs*)+0x259>
c001f548:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f54c:	84 d2                	test   dl,dl
c001f54e:	0f 85 e6 05 00 00    	jne    c001fb3a <Vm::x87Handler(regs*)+0x7e8>
c001f554:	57                   	push   edi
c001f555:	57                   	push   edi
c001f556:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f559:	ff 36                	push   DWORD PTR [esi]
c001f55b:	e8 49 fa ff ff       	call   c001efa9 <Vm::fpu64ToInternal(unsigned long long)>
c001f560:	5e                   	pop    esi
c001f561:	5f                   	pop    edi
c001f562:	52                   	push   edx
c001f563:	50                   	push   eax
c001f564:	e8 3a fd ff ff       	call   c001f2a3 <Vm::fpuPush(unsigned long long)>
c001f569:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001f56d:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001f570:	e9 51 fe ff ff       	jmp    c001f3c6 <Vm::x87Handler(regs*)+0x74>
c001f575:	80 fa 03             	cmp    dl,0x3
c001f578:	0f 85 d7 06 00 00    	jne    c001fc55 <Vm::x87Handler(regs*)+0x903>
c001f57e:	57                   	push   edi
c001f57f:	57                   	push   edi
c001f580:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f583:	ff 36                	push   DWORD PTR [esi]
c001f585:	e8 1f fa ff ff       	call   c001efa9 <Vm::fpu64ToInternal(unsigned long long)>
c001f58a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f591:	89 c6                	mov    esi,eax
c001f593:	89 d7                	mov    edi,edx
c001f595:	e8 7b fc ff ff       	call   c001f215 <Vm::fpuGetReg(int)>
c001f59a:	57                   	push   edi
c001f59b:	56                   	push   esi
c001f59c:	52                   	push   edx
c001f59d:	50                   	push   eax
c001f59e:	e8 95 fb ff ff       	call   c001f138 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001f5a3:	83 c4 20             	add    esp,0x20
c001f5a6:	e8 55 fd ff ff       	call   c001f300 <Vm::fpuPop()>
c001f5ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f5af:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001f5b2:	e9 12 fe ff ff       	jmp    c001f3c9 <Vm::x87Handler(regs*)+0x77>
c001f5b7:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f5bb:	8d 50 40             	lea    edx,[eax+0x40]
c001f5be:	80 fa 07             	cmp    dl,0x7
c001f5c1:	77 29                	ja     c001f5ec <Vm::x87Handler(regs*)+0x29a>
c001f5c3:	83 ec 0c             	sub    esp,0xc
c001f5c6:	2d c0 00 00 00       	sub    eax,0xc0
c001f5cb:	50                   	push   eax
c001f5cc:	e8 44 fc ff ff       	call   c001f215 <Vm::fpuGetReg(int)>
c001f5d1:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f5d8:	89 c6                	mov    esi,eax
c001f5da:	89 d7                	mov    edi,edx
c001f5dc:	e8 34 fc ff ff       	call   c001f215 <Vm::fpuGetReg(int)>
c001f5e1:	57                   	push   edi
c001f5e2:	56                   	push   esi
c001f5e3:	52                   	push   edx
c001f5e4:	50                   	push   eax
c001f5e5:	e8 a1 fb ff ff       	call   c001f18b <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001f5ea:	eb 2f                	jmp    c001f61b <Vm::x87Handler(regs*)+0x2c9>
c001f5ec:	8d 50 38             	lea    edx,[eax+0x38]
c001f5ef:	80 fa 07             	cmp    dl,0x7
c001f5f2:	77 2f                	ja     c001f623 <Vm::x87Handler(regs*)+0x2d1>
c001f5f4:	83 ec 0c             	sub    esp,0xc
c001f5f7:	2d c8 00 00 00       	sub    eax,0xc8
c001f5fc:	50                   	push   eax
c001f5fd:	e8 13 fc ff ff       	call   c001f215 <Vm::fpuGetReg(int)>
c001f602:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f609:	89 c6                	mov    esi,eax
c001f60b:	89 d7                	mov    edi,edx
c001f60d:	e8 03 fc ff ff       	call   c001f215 <Vm::fpuGetReg(int)>
c001f612:	57                   	push   edi
c001f613:	56                   	push   esi
c001f614:	52                   	push   edx
c001f615:	50                   	push   eax
c001f616:	e8 a9 fb ff ff       	call   c001f1c4 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f61b:	83 c4 1c             	add    esp,0x1c
c001f61e:	e9 d8 fd ff ff       	jmp    c001f3fb <Vm::x87Handler(regs*)+0xa9>
c001f623:	8d 50 30             	lea    edx,[eax+0x30]
c001f626:	80 fa 07             	cmp    dl,0x7
c001f629:	77 0d                	ja     c001f638 <Vm::x87Handler(regs*)+0x2e6>
c001f62b:	83 ec 0c             	sub    esp,0xc
c001f62e:	2d d0 00 00 00       	sub    eax,0xd0
c001f633:	e9 99 03 00 00       	jmp    c001f9d1 <Vm::x87Handler(regs*)+0x67f>
c001f638:	8d 50 28             	lea    edx,[eax+0x28]
c001f63b:	80 fa 07             	cmp    dl,0x7
c001f63e:	77 0d                	ja     c001f64d <Vm::x87Handler(regs*)+0x2fb>
c001f640:	83 ec 0c             	sub    esp,0xc
c001f643:	2d d8 00 00 00       	sub    eax,0xd8
c001f648:	e9 c0 03 00 00       	jmp    c001fa0d <Vm::x87Handler(regs*)+0x6bb>
c001f64d:	8d 50 20             	lea    edx,[eax+0x20]
c001f650:	80 fa 07             	cmp    dl,0x7
c001f653:	77 1b                	ja     c001f670 <Vm::x87Handler(regs*)+0x31e>
c001f655:	83 ec 0c             	sub    esp,0xc
c001f658:	2d e0 00 00 00       	sub    eax,0xe0
c001f65d:	50                   	push   eax
c001f65e:	e8 b2 fb ff ff       	call   c001f215 <Vm::fpuGetReg(int)>
c001f663:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f66a:	89 c6                	mov    esi,eax
c001f66c:	89 d7                	mov    edi,edx
c001f66e:	eb 22                	jmp    c001f692 <Vm::x87Handler(regs*)+0x340>
c001f670:	8d 50 18             	lea    edx,[eax+0x18]
c001f673:	80 fa 07             	cmp    dl,0x7
c001f676:	77 2d                	ja     c001f6a5 <Vm::x87Handler(regs*)+0x353>
c001f678:	83 ec 0c             	sub    esp,0xc
c001f67b:	6a 00                	push   0x0
c001f67d:	e8 93 fb ff ff       	call   c001f215 <Vm::fpuGetReg(int)>
c001f682:	89 c6                	mov    esi,eax
c001f684:	89 d7                	mov    edi,edx
c001f686:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f68a:	2d e8 00 00 00       	sub    eax,0xe8
c001f68f:	89 04 24             	mov    DWORD PTR [esp],eax
c001f692:	e8 7e fb ff ff       	call   c001f215 <Vm::fpuGetReg(int)>
c001f697:	57                   	push   edi
c001f698:	56                   	push   esi
c001f699:	52                   	push   edx
c001f69a:	50                   	push   eax
c001f69b:	e8 15 fb ff ff       	call   c001f1b5 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f6a0:	e9 76 ff ff ff       	jmp    c001f61b <Vm::x87Handler(regs*)+0x2c9>
c001f6a5:	8d 50 10             	lea    edx,[eax+0x10]
c001f6a8:	80 fa 07             	cmp    dl,0x7
c001f6ab:	77 1b                	ja     c001f6c8 <Vm::x87Handler(regs*)+0x376>
c001f6ad:	83 ec 0c             	sub    esp,0xc
c001f6b0:	2d f0 00 00 00       	sub    eax,0xf0
c001f6b5:	50                   	push   eax
c001f6b6:	e8 5a fb ff ff       	call   c001f215 <Vm::fpuGetReg(int)>
c001f6bb:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f6c2:	89 c6                	mov    esi,eax
c001f6c4:	89 d7                	mov    edi,edx
c001f6c6:	eb 22                	jmp    c001f6ea <Vm::x87Handler(regs*)+0x398>
c001f6c8:	3c f7                	cmp    al,0xf7
c001f6ca:	0f 86 d1 03 00 00    	jbe    c001faa1 <Vm::x87Handler(regs*)+0x74f>
c001f6d0:	83 ec 0c             	sub    esp,0xc
c001f6d3:	6a 00                	push   0x0
c001f6d5:	e8 3b fb ff ff       	call   c001f215 <Vm::fpuGetReg(int)>
c001f6da:	89 c6                	mov    esi,eax
c001f6dc:	89 d7                	mov    edi,edx
c001f6de:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f6e2:	2d f8 00 00 00       	sub    eax,0xf8
c001f6e7:	89 04 24             	mov    DWORD PTR [esp],eax
c001f6ea:	e8 26 fb ff ff       	call   c001f215 <Vm::fpuGetReg(int)>
c001f6ef:	57                   	push   edi
c001f6f0:	56                   	push   esi
c001f6f1:	52                   	push   edx
c001f6f2:	50                   	push   eax
c001f6f3:	e8 eb fa ff ff       	call   c001f1e3 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001f6f8:	83 c4 1c             	add    esp,0x1c
c001f6fb:	52                   	push   edx
c001f6fc:	50                   	push   eax
c001f6fd:	6a 00                	push   0x0
c001f6ff:	e9 51 02 00 00       	jmp    c001f955 <Vm::x87Handler(regs*)+0x603>
c001f704:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f708:	8d 50 40             	lea    edx,[eax+0x40]
c001f70b:	80 fa 07             	cmp    dl,0x7
c001f70e:	77 37                	ja     c001f747 <Vm::x87Handler(regs*)+0x3f5>
c001f710:	83 ec 0c             	sub    esp,0xc
c001f713:	2d c0 00 00 00       	sub    eax,0xc0
c001f718:	50                   	push   eax
c001f719:	e8 f7 fa ff ff       	call   c001f215 <Vm::fpuGetReg(int)>
c001f71e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f725:	89 c6                	mov    esi,eax
c001f727:	89 d7                	mov    edi,edx
c001f729:	e8 e7 fa ff ff       	call   c001f215 <Vm::fpuGetReg(int)>
c001f72e:	57                   	push   edi
c001f72f:	56                   	push   esi
c001f730:	52                   	push   edx
c001f731:	50                   	push   eax
c001f732:	e8 54 fa ff ff       	call   c001f18b <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001f737:	83 c4 1c             	add    esp,0x1c
c001f73a:	52                   	push   edx
c001f73b:	50                   	push   eax
c001f73c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f740:	2d c0 00 00 00       	sub    eax,0xc0
c001f745:	eb 3d                	jmp    c001f784 <Vm::x87Handler(regs*)+0x432>
c001f747:	8d 50 38             	lea    edx,[eax+0x38]
c001f74a:	80 fa 07             	cmp    dl,0x7
c001f74d:	77 3b                	ja     c001f78a <Vm::x87Handler(regs*)+0x438>
c001f74f:	83 ec 0c             	sub    esp,0xc
c001f752:	2d c8 00 00 00       	sub    eax,0xc8
c001f757:	50                   	push   eax
c001f758:	e8 b8 fa ff ff       	call   c001f215 <Vm::fpuGetReg(int)>
c001f75d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f764:	89 c6                	mov    esi,eax
c001f766:	89 d7                	mov    edi,edx
c001f768:	e8 a8 fa ff ff       	call   c001f215 <Vm::fpuGetReg(int)>
c001f76d:	57                   	push   edi
c001f76e:	56                   	push   esi
c001f76f:	52                   	push   edx
c001f770:	50                   	push   eax
c001f771:	e8 4e fa ff ff       	call   c001f1c4 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f776:	83 c4 1c             	add    esp,0x1c
c001f779:	52                   	push   edx
c001f77a:	50                   	push   eax
c001f77b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f77f:	2d c8 00 00 00       	sub    eax,0xc8
c001f784:	50                   	push   eax
c001f785:	e9 75 fc ff ff       	jmp    c001f3ff <Vm::x87Handler(regs*)+0xad>
c001f78a:	83 c0 18             	add    eax,0x18
c001f78d:	3c 07                	cmp    al,0x7
c001f78f:	0f 87 3b 04 00 00    	ja     c001fbd0 <Vm::x87Handler(regs*)+0x87e>
c001f795:	83 ec 0c             	sub    esp,0xc
c001f798:	6a 00                	push   0x0
c001f79a:	e8 76 fa ff ff       	call   c001f215 <Vm::fpuGetReg(int)>
c001f79f:	89 c6                	mov    esi,eax
c001f7a1:	89 d7                	mov    edi,edx
c001f7a3:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f7a7:	2d e8 00 00 00       	sub    eax,0xe8
c001f7ac:	89 04 24             	mov    DWORD PTR [esp],eax
c001f7af:	e8 61 fa ff ff       	call   c001f215 <Vm::fpuGetReg(int)>
c001f7b4:	57                   	push   edi
c001f7b5:	56                   	push   esi
c001f7b6:	52                   	push   edx
c001f7b7:	50                   	push   eax
c001f7b8:	e8 f8 f9 ff ff       	call   c001f1b5 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f7bd:	83 c4 1c             	add    esp,0x1c
c001f7c0:	52                   	push   edx
c001f7c1:	50                   	push   eax
c001f7c2:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f7c6:	2d e8 00 00 00       	sub    eax,0xe8
c001f7cb:	eb b7                	jmp    c001f784 <Vm::x87Handler(regs*)+0x432>
c001f7cd:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f7d1:	8d 50 40             	lea    edx,[eax+0x40]
c001f7d4:	80 fa 07             	cmp    dl,0x7
c001f7d7:	77 3a                	ja     c001f813 <Vm::x87Handler(regs*)+0x4c1>
c001f7d9:	83 ec 0c             	sub    esp,0xc
c001f7dc:	2d c0 00 00 00       	sub    eax,0xc0
c001f7e1:	50                   	push   eax
c001f7e2:	e8 2e fa ff ff       	call   c001f215 <Vm::fpuGetReg(int)>
c001f7e7:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f7ee:	89 c6                	mov    esi,eax
c001f7f0:	89 d7                	mov    edi,edx
c001f7f2:	e8 1e fa ff ff       	call   c001f215 <Vm::fpuGetReg(int)>
c001f7f7:	57                   	push   edi
c001f7f8:	56                   	push   esi
c001f7f9:	52                   	push   edx
c001f7fa:	50                   	push   eax
c001f7fb:	e8 8b f9 ff ff       	call   c001f18b <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001f800:	83 c4 1c             	add    esp,0x1c
c001f803:	52                   	push   edx
c001f804:	50                   	push   eax
c001f805:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f809:	2d c0 00 00 00       	sub    eax,0xc0
c001f80e:	e9 9e 01 00 00       	jmp    c001f9b1 <Vm::x87Handler(regs*)+0x65f>
c001f813:	8d 50 20             	lea    edx,[eax+0x20]
c001f816:	80 fa 07             	cmp    dl,0x7
c001f819:	77 3a                	ja     c001f855 <Vm::x87Handler(regs*)+0x503>
c001f81b:	83 ec 0c             	sub    esp,0xc
c001f81e:	2d e0 00 00 00       	sub    eax,0xe0
c001f823:	50                   	push   eax
c001f824:	e8 ec f9 ff ff       	call   c001f215 <Vm::fpuGetReg(int)>
c001f829:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f830:	89 c6                	mov    esi,eax
c001f832:	89 d7                	mov    edi,edx
c001f834:	e8 dc f9 ff ff       	call   c001f215 <Vm::fpuGetReg(int)>
c001f839:	57                   	push   edi
c001f83a:	56                   	push   esi
c001f83b:	52                   	push   edx
c001f83c:	50                   	push   eax
c001f83d:	e8 73 f9 ff ff       	call   c001f1b5 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f842:	83 c4 1c             	add    esp,0x1c
c001f845:	52                   	push   edx
c001f846:	50                   	push   eax
c001f847:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f84b:	2d e0 00 00 00       	sub    eax,0xe0
c001f850:	e9 5c 01 00 00       	jmp    c001f9b1 <Vm::x87Handler(regs*)+0x65f>
c001f855:	8d 50 18             	lea    edx,[eax+0x18]
c001f858:	80 fa 07             	cmp    dl,0x7
c001f85b:	77 3b                	ja     c001f898 <Vm::x87Handler(regs*)+0x546>
c001f85d:	83 ec 0c             	sub    esp,0xc
c001f860:	6a 00                	push   0x0
c001f862:	e8 ae f9 ff ff       	call   c001f215 <Vm::fpuGetReg(int)>
c001f867:	89 c6                	mov    esi,eax
c001f869:	89 d7                	mov    edi,edx
c001f86b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f86f:	2d e8 00 00 00       	sub    eax,0xe8
c001f874:	89 04 24             	mov    DWORD PTR [esp],eax
c001f877:	e8 99 f9 ff ff       	call   c001f215 <Vm::fpuGetReg(int)>
c001f87c:	57                   	push   edi
c001f87d:	56                   	push   esi
c001f87e:	52                   	push   edx
c001f87f:	50                   	push   eax
c001f880:	e8 30 f9 ff ff       	call   c001f1b5 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f885:	83 c4 1c             	add    esp,0x1c
c001f888:	52                   	push   edx
c001f889:	50                   	push   eax
c001f88a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f88e:	2d e8 00 00 00       	sub    eax,0xe8
c001f893:	e9 19 01 00 00       	jmp    c001f9b1 <Vm::x87Handler(regs*)+0x65f>
c001f898:	8d 50 38             	lea    edx,[eax+0x38]
c001f89b:	80 fa 07             	cmp    dl,0x7
c001f89e:	77 37                	ja     c001f8d7 <Vm::x87Handler(regs*)+0x585>
c001f8a0:	83 ec 0c             	sub    esp,0xc
c001f8a3:	2d c8 00 00 00       	sub    eax,0xc8
c001f8a8:	50                   	push   eax
c001f8a9:	e8 67 f9 ff ff       	call   c001f215 <Vm::fpuGetReg(int)>
c001f8ae:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f8b5:	89 c6                	mov    esi,eax
c001f8b7:	89 d7                	mov    edi,edx
c001f8b9:	e8 57 f9 ff ff       	call   c001f215 <Vm::fpuGetReg(int)>
c001f8be:	57                   	push   edi
c001f8bf:	56                   	push   esi
c001f8c0:	52                   	push   edx
c001f8c1:	50                   	push   eax
c001f8c2:	e8 fd f8 ff ff       	call   c001f1c4 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f8c7:	83 c4 1c             	add    esp,0x1c
c001f8ca:	52                   	push   edx
c001f8cb:	50                   	push   eax
c001f8cc:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f8d0:	2d c8 00 00 00       	sub    eax,0xc8
c001f8d5:	eb 7d                	jmp    c001f954 <Vm::x87Handler(regs*)+0x602>
c001f8d7:	3c f7                	cmp    al,0xf7
c001f8d9:	76 38                	jbe    c001f913 <Vm::x87Handler(regs*)+0x5c1>
c001f8db:	83 ec 0c             	sub    esp,0xc
c001f8de:	6a 00                	push   0x0
c001f8e0:	e8 30 f9 ff ff       	call   c001f215 <Vm::fpuGetReg(int)>
c001f8e5:	89 c6                	mov    esi,eax
c001f8e7:	89 d7                	mov    edi,edx
c001f8e9:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f8ed:	2d f8 00 00 00       	sub    eax,0xf8
c001f8f2:	89 04 24             	mov    DWORD PTR [esp],eax
c001f8f5:	e8 1b f9 ff ff       	call   c001f215 <Vm::fpuGetReg(int)>
c001f8fa:	57                   	push   edi
c001f8fb:	56                   	push   esi
c001f8fc:	52                   	push   edx
c001f8fd:	50                   	push   eax
c001f8fe:	e8 e0 f8 ff ff       	call   c001f1e3 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001f903:	83 c4 1c             	add    esp,0x1c
c001f906:	52                   	push   edx
c001f907:	50                   	push   eax
c001f908:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f90c:	2d f8 00 00 00       	sub    eax,0xf8
c001f911:	eb 41                	jmp    c001f954 <Vm::x87Handler(regs*)+0x602>
c001f913:	8d 50 10             	lea    edx,[eax+0x10]
c001f916:	80 fa 07             	cmp    dl,0x7
c001f919:	0f 87 5a 01 00 00    	ja     c001fa79 <Vm::x87Handler(regs*)+0x727>
c001f91f:	83 ec 0c             	sub    esp,0xc
c001f922:	2d f0 00 00 00       	sub    eax,0xf0
c001f927:	50                   	push   eax
c001f928:	e8 e8 f8 ff ff       	call   c001f215 <Vm::fpuGetReg(int)>
c001f92d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f934:	89 c6                	mov    esi,eax
c001f936:	89 d7                	mov    edi,edx
c001f938:	e8 d8 f8 ff ff       	call   c001f215 <Vm::fpuGetReg(int)>
c001f93d:	57                   	push   edi
c001f93e:	56                   	push   esi
c001f93f:	52                   	push   edx
c001f940:	50                   	push   eax
c001f941:	e8 9d f8 ff ff       	call   c001f1e3 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001f946:	83 c4 1c             	add    esp,0x1c
c001f949:	52                   	push   edx
c001f94a:	50                   	push   eax
c001f94b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f94f:	2d f0 00 00 00       	sub    eax,0xf0
c001f954:	50                   	push   eax
c001f955:	e8 fe f8 ff ff       	call   c001f258 <Vm::fpuSetReg(int, unsigned long long)>
c001f95a:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f95e:	e8 9d f9 ff ff       	call   c001f300 <Vm::fpuPop()>
c001f963:	e9 5e fa ff ff       	jmp    c001f3c6 <Vm::x87Handler(regs*)+0x74>
c001f968:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f96c:	8d 50 30             	lea    edx,[eax+0x30]
c001f96f:	80 fa 07             	cmp    dl,0x7
c001f972:	77 1d                	ja     c001f991 <Vm::x87Handler(regs*)+0x63f>
c001f974:	83 ec 0c             	sub    esp,0xc
c001f977:	6a 00                	push   0x0
c001f979:	e8 97 f8 ff ff       	call   c001f215 <Vm::fpuGetReg(int)>
c001f97e:	83 c4 0c             	add    esp,0xc
c001f981:	52                   	push   edx
c001f982:	50                   	push   eax
c001f983:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f987:	2d d0 00 00 00       	sub    eax,0xd0
c001f98c:	e9 f3 fd ff ff       	jmp    c001f784 <Vm::x87Handler(regs*)+0x432>
c001f991:	8d 50 28             	lea    edx,[eax+0x28]
c001f994:	80 fa 07             	cmp    dl,0x7
c001f997:	77 28                	ja     c001f9c1 <Vm::x87Handler(regs*)+0x66f>
c001f999:	83 ec 0c             	sub    esp,0xc
c001f99c:	6a 00                	push   0x0
c001f99e:	e8 72 f8 ff ff       	call   c001f215 <Vm::fpuGetReg(int)>
c001f9a3:	83 c4 0c             	add    esp,0xc
c001f9a6:	52                   	push   edx
c001f9a7:	50                   	push   eax
c001f9a8:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f9ac:	2d d8 00 00 00       	sub    eax,0xd8
c001f9b1:	50                   	push   eax
c001f9b2:	e8 a1 f8 ff ff       	call   c001f258 <Vm::fpuSetReg(int, unsigned long long)>
c001f9b7:	e8 44 f9 ff ff       	call   c001f300 <Vm::fpuPop()>
c001f9bc:	e9 01 fa ff ff       	jmp    c001f3c2 <Vm::x87Handler(regs*)+0x70>
c001f9c1:	8d 50 20             	lea    edx,[eax+0x20]
c001f9c4:	80 fa 07             	cmp    dl,0x7
c001f9c7:	77 30                	ja     c001f9f9 <Vm::x87Handler(regs*)+0x6a7>
c001f9c9:	83 ec 0c             	sub    esp,0xc
c001f9cc:	2d e0 00 00 00       	sub    eax,0xe0
c001f9d1:	50                   	push   eax
c001f9d2:	e8 3e f8 ff ff       	call   c001f215 <Vm::fpuGetReg(int)>
c001f9d7:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f9de:	89 c6                	mov    esi,eax
c001f9e0:	89 d7                	mov    edi,edx
c001f9e2:	e8 2e f8 ff ff       	call   c001f215 <Vm::fpuGetReg(int)>
c001f9e7:	57                   	push   edi
c001f9e8:	56                   	push   esi
c001f9e9:	52                   	push   edx
c001f9ea:	50                   	push   eax
c001f9eb:	e8 48 f7 ff ff       	call   c001f138 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001f9f0:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f9f4:	e9 54 02 00 00       	jmp    c001fc4d <Vm::x87Handler(regs*)+0x8fb>
c001f9f9:	8d 50 18             	lea    edx,[eax+0x18]
c001f9fc:	80 fa 07             	cmp    dl,0x7
c001f9ff:	0f 87 43 fb ff ff    	ja     c001f548 <Vm::x87Handler(regs*)+0x1f6>
c001fa05:	83 ec 0c             	sub    esp,0xc
c001fa08:	2d e8 00 00 00       	sub    eax,0xe8
c001fa0d:	50                   	push   eax
c001fa0e:	e8 02 f8 ff ff       	call   c001f215 <Vm::fpuGetReg(int)>
c001fa13:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fa1a:	89 c6                	mov    esi,eax
c001fa1c:	89 d7                	mov    edi,edx
c001fa1e:	e8 f2 f7 ff ff       	call   c001f215 <Vm::fpuGetReg(int)>
c001fa23:	57                   	push   edi
c001fa24:	56                   	push   esi
c001fa25:	52                   	push   edx
c001fa26:	50                   	push   eax
c001fa27:	e8 0c f7 ff ff       	call   c001f138 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001fa2c:	83 c4 20             	add    esp,0x20
c001fa2f:	e8 cc f8 ff ff       	call   c001f300 <Vm::fpuPop()>
c001fa34:	eb 62                	jmp    c001fa98 <Vm::x87Handler(regs*)+0x746>
c001fa36:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c001fa3a:	0f 85 0f 01 00 00    	jne    c001fb4f <Vm::x87Handler(regs*)+0x7fd>
c001fa40:	83 ec 0c             	sub    esp,0xc
c001fa43:	6a 01                	push   0x1
c001fa45:	e8 cb f7 ff ff       	call   c001f215 <Vm::fpuGetReg(int)>
c001fa4a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fa51:	89 c6                	mov    esi,eax
c001fa53:	89 d7                	mov    edi,edx
c001fa55:	e8 bb f7 ff ff       	call   c001f215 <Vm::fpuGetReg(int)>
c001fa5a:	57                   	push   edi
c001fa5b:	56                   	push   esi
c001fa5c:	52                   	push   edx
c001fa5d:	50                   	push   eax
c001fa5e:	e8 d5 f6 ff ff       	call   c001f138 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001fa63:	83 c4 20             	add    esp,0x20
c001fa66:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001fa6a:	e8 91 f8 ff ff       	call   c001f300 <Vm::fpuPop()>
c001fa6f:	e8 8c f8 ff ff       	call   c001f300 <Vm::fpuPop()>
c001fa74:	e9 50 f9 ff ff       	jmp    c001f3c9 <Vm::x87Handler(regs*)+0x77>
c001fa79:	3c d9                	cmp    al,0xd9
c001fa7b:	0f 85 b5 02 00 00    	jne    c001fd36 <Vm::x87Handler(regs*)+0x9e4>
c001fa81:	eb bd                	jmp    c001fa40 <Vm::x87Handler(regs*)+0x6ee>
c001fa83:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c001fa87:	0f 85 ea 02 00 00    	jne    c001fd77 <Vm::x87Handler(regs*)+0xa25>
c001fa8d:	0f b7 05 40 11 03 c0 	movzx  eax,WORD PTR ds:0xc0031140
c001fa94:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c001fa98:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001fa9c:	e9 28 f9 ff ff       	jmp    c001f3c9 <Vm::x87Handler(regs*)+0x77>
c001faa1:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001faa5:	84 d2                	test   dl,dl
c001faa7:	75 0f                	jne    c001fab8 <Vm::x87Handler(regs*)+0x766>
c001faa9:	83 ec 0c             	sub    esp,0xc
c001faac:	ff 36                	push   DWORD PTR [esi]
c001faae:	e8 b1 f4 ff ff       	call   c001ef64 <Vm::fpu32ToInternal(unsigned int)>
c001fab3:	e9 2c 01 00 00       	jmp    c001fbe4 <Vm::x87Handler(regs*)+0x892>
c001fab8:	80 fa 01             	cmp    dl,0x1
c001fabb:	75 0f                	jne    c001facc <Vm::x87Handler(regs*)+0x77a>
c001fabd:	83 ec 0c             	sub    esp,0xc
c001fac0:	ff 36                	push   DWORD PTR [esi]
c001fac2:	e8 9d f4 ff ff       	call   c001ef64 <Vm::fpu32ToInternal(unsigned int)>
c001fac7:	e9 81 02 00 00       	jmp    c001fd4d <Vm::x87Handler(regs*)+0x9fb>
c001facc:	80 fa 04             	cmp    dl,0x4
c001facf:	75 0f                	jne    c001fae0 <Vm::x87Handler(regs*)+0x78e>
c001fad1:	83 ec 0c             	sub    esp,0xc
c001fad4:	ff 36                	push   DWORD PTR [esi]
c001fad6:	e8 89 f4 ff ff       	call   c001ef64 <Vm::fpu32ToInternal(unsigned int)>
c001fadb:	e9 86 01 00 00       	jmp    c001fc66 <Vm::x87Handler(regs*)+0x914>
c001fae0:	80 fa 05             	cmp    dl,0x5
c001fae3:	75 1b                	jne    c001fb00 <Vm::x87Handler(regs*)+0x7ae>
c001fae5:	83 ec 0c             	sub    esp,0xc
c001fae8:	6a 00                	push   0x0
c001faea:	e8 26 f7 ff ff       	call   c001f215 <Vm::fpuGetReg(int)>
c001faef:	89 c7                	mov    edi,eax
c001faf1:	89 d5                	mov    ebp,edx
c001faf3:	58                   	pop    eax
c001faf4:	ff 36                	push   DWORD PTR [esi]
c001faf6:	e8 69 f4 ff ff       	call   c001ef64 <Vm::fpu32ToInternal(unsigned int)>
c001fafb:	e9 a3 01 00 00       	jmp    c001fca3 <Vm::x87Handler(regs*)+0x951>
c001fb00:	80 fa 06             	cmp    dl,0x6
c001fb03:	75 0f                	jne    c001fb14 <Vm::x87Handler(regs*)+0x7c2>
c001fb05:	83 ec 0c             	sub    esp,0xc
c001fb08:	ff 36                	push   DWORD PTR [esi]
c001fb0a:	e8 55 f4 ff ff       	call   c001ef64 <Vm::fpu32ToInternal(unsigned int)>
c001fb0f:	e9 ae 01 00 00       	jmp    c001fcc2 <Vm::x87Handler(regs*)+0x970>
c001fb14:	31 c0                	xor    eax,eax
c001fb16:	80 fa 07             	cmp    dl,0x7
c001fb19:	0f 85 94 02 00 00    	jne    c001fdb3 <Vm::x87Handler(regs*)+0xa61>
c001fb1f:	83 ec 0c             	sub    esp,0xc
c001fb22:	6a 00                	push   0x0
c001fb24:	e8 ec f6 ff ff       	call   c001f215 <Vm::fpuGetReg(int)>
c001fb29:	89 c7                	mov    edi,eax
c001fb2b:	89 d5                	mov    ebp,edx
c001fb2d:	58                   	pop    eax
c001fb2e:	ff 36                	push   DWORD PTR [esi]
c001fb30:	e8 2f f4 ff ff       	call   c001ef64 <Vm::fpu32ToInternal(unsigned int)>
c001fb35:	e9 cb 01 00 00       	jmp    c001fd05 <Vm::x87Handler(regs*)+0x9b3>
c001fb3a:	80 fa 03             	cmp    dl,0x3
c001fb3d:	0f 85 d3 01 00 00    	jne    c001fd16 <Vm::x87Handler(regs*)+0x9c4>
c001fb43:	e8 b8 f7 ff ff       	call   c001f300 <Vm::fpuPop()>
c001fb48:	51                   	push   ecx
c001fb49:	51                   	push   ecx
c001fb4a:	e9 de 01 00 00       	jmp    c001fd2d <Vm::x87Handler(regs*)+0x9db>
c001fb4f:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fb53:	80 fa 01             	cmp    dl,0x1
c001fb56:	75 09                	jne    c001fb61 <Vm::x87Handler(regs*)+0x80f>
c001fb58:	57                   	push   edi
c001fb59:	57                   	push   edi
c001fb5a:	8b 06                	mov    eax,DWORD PTR [esi]
c001fb5c:	e9 e3 01 00 00       	jmp    c001fd44 <Vm::x87Handler(regs*)+0x9f2>
c001fb61:	80 fa 04             	cmp    dl,0x4
c001fb64:	75 12                	jne    c001fb78 <Vm::x87Handler(regs*)+0x826>
c001fb66:	31 d2                	xor    edx,edx
c001fb68:	51                   	push   ecx
c001fb69:	51                   	push   ecx
c001fb6a:	8b 06                	mov    eax,DWORD PTR [esi]
c001fb6c:	52                   	push   edx
c001fb6d:	50                   	push   eax
c001fb6e:	e8 d0 f4 ff ff       	call   c001f043 <Vm::fpuLongToFloat(long long)>
c001fb73:	e9 ee 00 00 00       	jmp    c001fc66 <Vm::x87Handler(regs*)+0x914>
c001fb78:	31 c0                	xor    eax,eax
c001fb7a:	80 fa 07             	cmp    dl,0x7
c001fb7d:	0f 85 30 02 00 00    	jne    c001fdb3 <Vm::x87Handler(regs*)+0xa61>
c001fb83:	83 ec 0c             	sub    esp,0xc
c001fb86:	6a 00                	push   0x0
c001fb88:	e8 88 f6 ff ff       	call   c001f215 <Vm::fpuGetReg(int)>
c001fb8d:	89 c7                	mov    edi,eax
c001fb8f:	89 d5                	mov    ebp,edx
c001fb91:	58                   	pop    eax
c001fb92:	8b 06                	mov    eax,DWORD PTR [esi]
c001fb94:	5a                   	pop    edx
c001fb95:	31 d2                	xor    edx,edx
c001fb97:	52                   	push   edx
c001fb98:	50                   	push   eax
c001fb99:	e8 a5 f4 ff ff       	call   c001f043 <Vm::fpuLongToFloat(long long)>
c001fb9e:	e9 62 01 00 00       	jmp    c001fd05 <Vm::x87Handler(regs*)+0x9b3>
c001fba3:	84 d2                	test   dl,dl
c001fba5:	75 0d                	jne    c001fbb4 <Vm::x87Handler(regs*)+0x862>
c001fba7:	31 d2                	xor    edx,edx
c001fba9:	55                   	push   ebp
c001fbaa:	55                   	push   ebp
c001fbab:	8b 06                	mov    eax,DWORD PTR [esi]
c001fbad:	52                   	push   edx
c001fbae:	50                   	push   eax
c001fbaf:	e9 d3 01 00 00       	jmp    c001fd87 <Vm::x87Handler(regs*)+0xa35>
c001fbb4:	31 c0                	xor    eax,eax
c001fbb6:	80 fa 02             	cmp    dl,0x2
c001fbb9:	0f 85 f4 01 00 00    	jne    c001fdb3 <Vm::x87Handler(regs*)+0xa61>
c001fbbf:	83 ec 0c             	sub    esp,0xc
c001fbc2:	6a 00                	push   0x0
c001fbc4:	e8 4c f6 ff ff       	call   c001f215 <Vm::fpuGetReg(int)>
c001fbc9:	59                   	pop    ecx
c001fbca:	5f                   	pop    edi
c001fbcb:	e9 6a f9 ff ff       	jmp    c001f53a <Vm::x87Handler(regs*)+0x1e8>
c001fbd0:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fbd4:	84 d2                	test   dl,dl
c001fbd6:	75 2a                	jne    c001fc02 <Vm::x87Handler(regs*)+0x8b0>
c001fbd8:	50                   	push   eax
c001fbd9:	50                   	push   eax
c001fbda:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fbdd:	ff 36                	push   DWORD PTR [esi]
c001fbdf:	e8 c5 f3 ff ff       	call   c001efa9 <Vm::fpu64ToInternal(unsigned long long)>
c001fbe4:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fbeb:	89 c6                	mov    esi,eax
c001fbed:	89 d7                	mov    edi,edx
c001fbef:	e8 21 f6 ff ff       	call   c001f215 <Vm::fpuGetReg(int)>
c001fbf4:	57                   	push   edi
c001fbf5:	56                   	push   esi
c001fbf6:	52                   	push   edx
c001fbf7:	50                   	push   eax
c001fbf8:	e8 8e f5 ff ff       	call   c001f18b <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fbfd:	e9 64 01 00 00       	jmp    c001fd66 <Vm::x87Handler(regs*)+0xa14>
c001fc02:	80 fa 01             	cmp    dl,0x1
c001fc05:	75 11                	jne    c001fc18 <Vm::x87Handler(regs*)+0x8c6>
c001fc07:	50                   	push   eax
c001fc08:	50                   	push   eax
c001fc09:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fc0c:	ff 36                	push   DWORD PTR [esi]
c001fc0e:	e8 96 f3 ff ff       	call   c001efa9 <Vm::fpu64ToInternal(unsigned long long)>
c001fc13:	e9 35 01 00 00       	jmp    c001fd4d <Vm::x87Handler(regs*)+0x9fb>
c001fc18:	80 fa 02             	cmp    dl,0x2
c001fc1b:	0f 85 54 f9 ff ff    	jne    c001f575 <Vm::x87Handler(regs*)+0x223>
c001fc21:	55                   	push   ebp
c001fc22:	55                   	push   ebp
c001fc23:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fc26:	ff 36                	push   DWORD PTR [esi]
c001fc28:	e8 7c f3 ff ff       	call   c001efa9 <Vm::fpu64ToInternal(unsigned long long)>
c001fc2d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fc34:	89 c6                	mov    esi,eax
c001fc36:	89 d7                	mov    edi,edx
c001fc38:	e8 d8 f5 ff ff       	call   c001f215 <Vm::fpuGetReg(int)>
c001fc3d:	57                   	push   edi
c001fc3e:	56                   	push   esi
c001fc3f:	52                   	push   edx
c001fc40:	50                   	push   eax
c001fc41:	e8 f2 f4 ff ff       	call   c001f138 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001fc46:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001fc4a:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001fc4d:	83 c4 20             	add    esp,0x20
c001fc50:	e9 74 f7 ff ff       	jmp    c001f3c9 <Vm::x87Handler(regs*)+0x77>
c001fc55:	80 fa 04             	cmp    dl,0x4
c001fc58:	75 2a                	jne    c001fc84 <Vm::x87Handler(regs*)+0x932>
c001fc5a:	51                   	push   ecx
c001fc5b:	51                   	push   ecx
c001fc5c:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fc5f:	ff 36                	push   DWORD PTR [esi]
c001fc61:	e8 43 f3 ff ff       	call   c001efa9 <Vm::fpu64ToInternal(unsigned long long)>
c001fc66:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fc6d:	89 c6                	mov    esi,eax
c001fc6f:	89 d7                	mov    edi,edx
c001fc71:	e8 9f f5 ff ff       	call   c001f215 <Vm::fpuGetReg(int)>
c001fc76:	57                   	push   edi
c001fc77:	56                   	push   esi
c001fc78:	52                   	push   edx
c001fc79:	50                   	push   eax
c001fc7a:	e8 36 f5 ff ff       	call   c001f1b5 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fc7f:	e9 e2 00 00 00       	jmp    c001fd66 <Vm::x87Handler(regs*)+0xa14>
c001fc84:	80 fa 05             	cmp    dl,0x5
c001fc87:	75 28                	jne    c001fcb1 <Vm::x87Handler(regs*)+0x95f>
c001fc89:	83 ec 0c             	sub    esp,0xc
c001fc8c:	6a 00                	push   0x0
c001fc8e:	e8 82 f5 ff ff       	call   c001f215 <Vm::fpuGetReg(int)>
c001fc93:	89 c7                	mov    edi,eax
c001fc95:	89 d5                	mov    ebp,edx
c001fc97:	58                   	pop    eax
c001fc98:	5a                   	pop    edx
c001fc99:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fc9c:	ff 36                	push   DWORD PTR [esi]
c001fc9e:	e8 06 f3 ff ff       	call   c001efa9 <Vm::fpu64ToInternal(unsigned long long)>
c001fca3:	83 c4 10             	add    esp,0x10
c001fca6:	55                   	push   ebp
c001fca7:	57                   	push   edi
c001fca8:	52                   	push   edx
c001fca9:	50                   	push   eax
c001fcaa:	e8 06 f5 ff ff       	call   c001f1b5 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fcaf:	eb 60                	jmp    c001fd11 <Vm::x87Handler(regs*)+0x9bf>
c001fcb1:	80 fa 06             	cmp    dl,0x6
c001fcb4:	75 2a                	jne    c001fce0 <Vm::x87Handler(regs*)+0x98e>
c001fcb6:	51                   	push   ecx
c001fcb7:	51                   	push   ecx
c001fcb8:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fcbb:	ff 36                	push   DWORD PTR [esi]
c001fcbd:	e8 e7 f2 ff ff       	call   c001efa9 <Vm::fpu64ToInternal(unsigned long long)>
c001fcc2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fcc9:	89 c6                	mov    esi,eax
c001fccb:	89 d7                	mov    edi,edx
c001fccd:	e8 43 f5 ff ff       	call   c001f215 <Vm::fpuGetReg(int)>
c001fcd2:	57                   	push   edi
c001fcd3:	56                   	push   esi
c001fcd4:	52                   	push   edx
c001fcd5:	50                   	push   eax
c001fcd6:	e8 08 f5 ff ff       	call   c001f1e3 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001fcdb:	e9 86 00 00 00       	jmp    c001fd66 <Vm::x87Handler(regs*)+0xa14>
c001fce0:	31 c0                	xor    eax,eax
c001fce2:	80 fa 07             	cmp    dl,0x7
c001fce5:	0f 85 c8 00 00 00    	jne    c001fdb3 <Vm::x87Handler(regs*)+0xa61>
c001fceb:	83 ec 0c             	sub    esp,0xc
c001fcee:	6a 00                	push   0x0
c001fcf0:	e8 20 f5 ff ff       	call   c001f215 <Vm::fpuGetReg(int)>
c001fcf5:	89 c7                	mov    edi,eax
c001fcf7:	89 d5                	mov    ebp,edx
c001fcf9:	58                   	pop    eax
c001fcfa:	5a                   	pop    edx
c001fcfb:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fcfe:	ff 36                	push   DWORD PTR [esi]
c001fd00:	e8 a4 f2 ff ff       	call   c001efa9 <Vm::fpu64ToInternal(unsigned long long)>
c001fd05:	83 c4 10             	add    esp,0x10
c001fd08:	55                   	push   ebp
c001fd09:	57                   	push   edi
c001fd0a:	52                   	push   edx
c001fd0b:	50                   	push   eax
c001fd0c:	e8 d2 f4 ff ff       	call   c001f1e3 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001fd11:	83 c4 0c             	add    esp,0xc
c001fd14:	eb 53                	jmp    c001fd69 <Vm::x87Handler(regs*)+0xa17>
c001fd16:	31 c0                	xor    eax,eax
c001fd18:	80 fa 02             	cmp    dl,0x2
c001fd1b:	0f 85 92 00 00 00    	jne    c001fdb3 <Vm::x87Handler(regs*)+0xa61>
c001fd21:	83 ec 0c             	sub    esp,0xc
c001fd24:	6a 00                	push   0x0
c001fd26:	e8 ea f4 ff ff       	call   c001f215 <Vm::fpuGetReg(int)>
c001fd2b:	59                   	pop    ecx
c001fd2c:	5f                   	pop    edi
c001fd2d:	52                   	push   edx
c001fd2e:	50                   	push   eax
c001fd2f:	e8 27 f2 ff ff       	call   c001ef5b <Vm::fpuInternalTo64(unsigned long long)>
c001fd34:	eb 70                	jmp    c001fda6 <Vm::x87Handler(regs*)+0xa54>
c001fd36:	31 c0                	xor    eax,eax
c001fd38:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c001fd3d:	75 74                	jne    c001fdb3 <Vm::x87Handler(regs*)+0xa61>
c001fd3f:	50                   	push   eax
c001fd40:	50                   	push   eax
c001fd41:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001fd44:	31 d2                	xor    edx,edx
c001fd46:	52                   	push   edx
c001fd47:	50                   	push   eax
c001fd48:	e8 f6 f2 ff ff       	call   c001f043 <Vm::fpuLongToFloat(long long)>
c001fd4d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fd54:	89 c6                	mov    esi,eax
c001fd56:	89 d7                	mov    edi,edx
c001fd58:	e8 b8 f4 ff ff       	call   c001f215 <Vm::fpuGetReg(int)>
c001fd5d:	57                   	push   edi
c001fd5e:	56                   	push   esi
c001fd5f:	52                   	push   edx
c001fd60:	50                   	push   eax
c001fd61:	e8 5e f4 ff ff       	call   c001f1c4 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001fd66:	83 c4 1c             	add    esp,0x1c
c001fd69:	52                   	push   edx
c001fd6a:	50                   	push   eax
c001fd6b:	6a 00                	push   0x0
c001fd6d:	e8 e6 f4 ff ff       	call   c001f258 <Vm::fpuSetReg(int, unsigned long long)>
c001fd72:	e9 f2 f7 ff ff       	jmp    c001f569 <Vm::x87Handler(regs*)+0x217>
c001fd77:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fd7b:	80 fa 05             	cmp    dl,0x5
c001fd7e:	75 11                	jne    c001fd91 <Vm::x87Handler(regs*)+0xa3f>
c001fd80:	55                   	push   ebp
c001fd81:	55                   	push   ebp
c001fd82:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fd85:	ff 36                	push   DWORD PTR [esi]
c001fd87:	e8 81 f2 ff ff       	call   c001f00d <Vm::fpuULongToFloat(unsigned long long)>
c001fd8c:	e9 cf f7 ff ff       	jmp    c001f560 <Vm::x87Handler(regs*)+0x20e>
c001fd91:	31 c0                	xor    eax,eax
c001fd93:	80 fa 07             	cmp    dl,0x7
c001fd96:	75 1b                	jne    c001fdb3 <Vm::x87Handler(regs*)+0xa61>
c001fd98:	e8 63 f5 ff ff       	call   c001f300 <Vm::fpuPop()>
c001fd9d:	51                   	push   ecx
c001fd9e:	51                   	push   ecx
c001fd9f:	52                   	push   edx
c001fda0:	50                   	push   eax
c001fda1:	e8 0c f2 ff ff       	call   c001efb2 <Vm::fpuFloatToLong(unsigned long long)>
c001fda6:	83 c4 10             	add    esp,0x10
c001fda9:	89 06                	mov    DWORD PTR [esi],eax
c001fdab:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001fdae:	e9 f8 f7 ff ff       	jmp    c001f5ab <Vm::x87Handler(regs*)+0x259>
c001fdb3:	83 c4 1c             	add    esp,0x1c
c001fdb6:	5b                   	pop    ebx
c001fdb7:	5e                   	pop    esi
c001fdb8:	5f                   	pop    edi
c001fdb9:	5d                   	pop    ebp
c001fdba:	c3                   	ret    

c001fdbb <__static_initialization_and_destruction_0(int, int)>:
c001fdbb:	83 ec 0c             	sub    esp,0xc
c001fdbe:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001fdc3:	75 1a                	jne    c001fddf <__static_initialization_and_destruction_0(int, int)+0x24>
c001fdc5:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001fdcd:	75 10                	jne    c001fddf <__static_initialization_and_destruction_0(int, int)+0x24>
c001fdcf:	83 ec 0c             	sub    esp,0xc
c001fdd2:	68 40 11 03 c0       	push   0xc0031140
c001fdd7:	e8 14 88 00 00       	call   c00285f0 <Vm::_FPUState::_FPUState()>
c001fddc:	83 c4 10             	add    esp,0x10
c001fddf:	90                   	nop
c001fde0:	83 c4 0c             	add    esp,0xc
c001fde3:	c3                   	ret    

c001fde4 <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c001fde4:	83 ec 0c             	sub    esp,0xc
c001fde7:	83 ec 08             	sub    esp,0x8
c001fdea:	68 ff ff 00 00       	push   0xffff
c001fdef:	6a 01                	push   0x1
c001fdf1:	e8 c5 ff ff ff       	call   c001fdbb <__static_initialization_and_destruction_0(int, int)>
c001fdf6:	83 c4 10             	add    esp,0x10
c001fdf9:	83 c4 0c             	add    esp,0xc
c001fdfc:	c3                   	ret    
c001fdfd:	90                   	nop

c001fdfe <FAT::getName()>:
c001fdfe:	b8 50 bf 02 c0       	mov    eax,0xc002bf50
c001fe03:	c3                   	ret    

c001fe04 <FAT::tell(void*, unsigned long long*)>:
c001fe04:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001fe09:	75 06                	jne    c001fe11 <FAT::tell(void*, unsigned long long*)+0xd>
c001fe0b:	b8 04 00 00 00       	mov    eax,0x4
c001fe10:	c3                   	ret    
c001fe11:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001fe16:	75 06                	jne    c001fe1e <FAT::tell(void*, unsigned long long*)+0x1a>
c001fe18:	b8 04 00 00 00       	mov    eax,0x4
c001fe1d:	c3                   	ret    
c001fe1e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fe22:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c001fe25:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001fe28:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001fe2c:	89 01                	mov    DWORD PTR [ecx],eax
c001fe2e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001fe31:	b8 00 00 00 00       	mov    eax,0x0
c001fe36:	c3                   	ret    
c001fe37:	90                   	nop

c001fe38 <FAT::stat(void*, unsigned long long*)>:
c001fe38:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001fe3d:	75 06                	jne    c001fe45 <FAT::stat(void*, unsigned long long*)+0xd>
c001fe3f:	b8 04 00 00 00       	mov    eax,0x4
c001fe44:	c3                   	ret    
c001fe45:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001fe4a:	75 06                	jne    c001fe52 <FAT::stat(void*, unsigned long long*)+0x1a>
c001fe4c:	b8 04 00 00 00       	mov    eax,0x4
c001fe51:	c3                   	ret    
c001fe52:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fe56:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001fe59:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001fe5c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001fe60:	89 01                	mov    DWORD PTR [ecx],eax
c001fe62:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001fe65:	b8 00 00 00 00       	mov    eax,0x0
c001fe6a:	c3                   	ret    
c001fe6b:	90                   	nop

c001fe6c <FAT::~FAT()>:
c001fe6c:	83 ec 0c             	sub    esp,0xc
c001fe6f:	ba d4 bf 02 c0       	mov    edx,0xc002bfd4
c001fe74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe78:	89 10                	mov    DWORD PTR [eax],edx
c001fe7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe7e:	83 ec 0c             	sub    esp,0xc
c001fe81:	50                   	push   eax
c001fe82:	e8 b7 2f ff ff       	call   c0012e3e <Filesystem::~Filesystem()>
c001fe87:	83 c4 10             	add    esp,0x10
c001fe8a:	90                   	nop
c001fe8b:	83 c4 0c             	add    esp,0xc
c001fe8e:	c3                   	ret    
c001fe8f:	90                   	nop

c001fe90 <FAT::~FAT()>:
c001fe90:	83 ec 0c             	sub    esp,0xc
c001fe93:	83 ec 0c             	sub    esp,0xc
c001fe96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fe9a:	e8 cd ff ff ff       	call   c001fe6c <FAT::~FAT()>
c001fe9f:	83 c4 10             	add    esp,0x10
c001fea2:	83 ec 08             	sub    esp,0x8
c001fea5:	6a 08                	push   0x8
c001fea7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001feab:	e8 85 2b ff ff       	call   c0012a35 <operator delete(void*, unsigned long)>
c001feb0:	83 c4 10             	add    esp,0x10
c001feb3:	83 c4 0c             	add    esp,0xc
c001feb6:	c3                   	ret    
c001feb7:	90                   	nop

c001feb8 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001feb8:	83 ec 1c             	sub    esp,0x1c
c001febb:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001fec2:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001fec7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001fecb:	8b 04 85 c0 11 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcee40]
c001fed2:	83 f8 ff             	cmp    eax,0xffffffff
c001fed5:	75 34                	jne    c001ff0b <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c001fed7:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001fedb:	88 c2                	mov    dl,al
c001fedd:	a1 a0 11 03 c0       	mov    eax,ds:0xc00311a0
c001fee2:	01 d0                	add    eax,edx
c001fee4:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001fee8:	8b 15 a0 11 03 c0    	mov    edx,DWORD PTR ds:0xc00311a0
c001feee:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001fef2:	89 14 85 c0 11 03 c0 	mov    DWORD PTR [eax*4-0x3ffcee40],edx
c001fef9:	a1 a0 11 03 c0       	mov    eax,ds:0xc00311a0
c001fefe:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001ff02:	89 14 85 40 12 03 c0 	mov    DWORD PTR [eax*4-0x3ffcedc0],edx
c001ff09:	eb 17                	jmp    c001ff22 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c001ff0b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001ff0f:	88 c2                	mov    dl,al
c001ff11:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ff15:	8b 04 85 c0 11 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcee40]
c001ff1c:	01 d0                	add    eax,edx
c001ff1e:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001ff22:	83 ec 04             	sub    esp,0x4
c001ff25:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001ff29:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001ff2d:	8d 44 24 15          	lea    eax,[esp+0x15]
c001ff31:	50                   	push   eax
c001ff32:	e8 01 6e fe ff       	call   c0006d38 <f_getlabel>
c001ff37:	83 c4 10             	add    esp,0x10
c001ff3a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ff3e:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001ff43:	75 07                	jne    c001ff4c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c001ff45:	b8 00 00 00 00       	mov    eax,0x0
c001ff4a:	eb 05                	jmp    c001ff51 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c001ff4c:	b8 01 00 00 00       	mov    eax,0x1
c001ff51:	83 c4 1c             	add    esp,0x1c
c001ff54:	c3                   	ret    
c001ff55:	90                   	nop

c001ff56 <FAT::setlabel(LogicalDisk*, int, char*)>:
c001ff56:	57                   	push   edi
c001ff57:	83 ec 58             	sub    esp,0x58
c001ff5a:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001ff62:	8d 54 24 10          	lea    edx,[esp+0x10]
c001ff66:	b9 0f 00 00 00       	mov    ecx,0xf
c001ff6b:	b8 00 00 00 00       	mov    eax,0x0
c001ff70:	fc                   	cld    
c001ff71:	89 d7                	mov    edi,edx
c001ff73:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001ff75:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001ff79:	8b 04 85 c0 11 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcee40]
c001ff80:	83 f8 ff             	cmp    eax,0xffffffff
c001ff83:	75 34                	jne    c001ffb9 <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c001ff85:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001ff89:	88 c2                	mov    dl,al
c001ff8b:	a1 a0 11 03 c0       	mov    eax,ds:0xc00311a0
c001ff90:	01 d0                	add    eax,edx
c001ff92:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001ff96:	8b 15 a0 11 03 c0    	mov    edx,DWORD PTR ds:0xc00311a0
c001ff9c:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001ffa0:	89 14 85 c0 11 03 c0 	mov    DWORD PTR [eax*4-0x3ffcee40],edx
c001ffa7:	a1 a0 11 03 c0       	mov    eax,ds:0xc00311a0
c001ffac:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001ffb0:	89 14 85 40 12 03 c0 	mov    DWORD PTR [eax*4-0x3ffcedc0],edx
c001ffb7:	eb 17                	jmp    c001ffd0 <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c001ffb9:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001ffbd:	88 c2                	mov    dl,al
c001ffbf:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001ffc3:	8b 04 85 c0 11 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcee40]
c001ffca:	01 d0                	add    eax,edx
c001ffcc:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001ffd0:	83 ec 08             	sub    esp,0x8
c001ffd3:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001ffd7:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ffdb:	50                   	push   eax
c001ffdc:	e8 93 09 fe ff       	call   c0000974 <strcat>
c001ffe1:	83 c4 10             	add    esp,0x10
c001ffe4:	83 ec 0c             	sub    esp,0xc
c001ffe7:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ffeb:	50                   	push   eax
c001ffec:	e8 35 6f fe ff       	call   c0006f26 <f_setlabel>
c001fff1:	83 c4 10             	add    esp,0x10
c001fff4:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001fff8:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c001fffd:	75 07                	jne    c0020006 <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c001ffff:	b8 00 00 00 00       	mov    eax,0x0
c0020004:	eb 05                	jmp    c002000b <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c0020006:	b8 01 00 00 00       	mov    eax,0x1
c002000b:	83 c4 58             	add    esp,0x58
c002000e:	5f                   	pop    edi
c002000f:	c3                   	ret    

c0020010 <FAT::format(LogicalDisk*, int, char const*, int)>:
c0020010:	83 ec 2c             	sub    esp,0x2c
c0020013:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c002001b:	83 ec 08             	sub    esp,0x8
c002001e:	68 74 bf 02 c0       	push   0xc002bf74
c0020023:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020027:	e8 94 08 fe ff       	call   c00008c0 <strcmp>
c002002c:	83 c4 10             	add    esp,0x10
c002002f:	85 c0                	test   eax,eax
c0020031:	0f 94 c0             	sete   al
c0020034:	84 c0                	test   al,al
c0020036:	74 0d                	je     c0020045 <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c0020038:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020040:	e9 a6 00 00 00       	jmp    c00200eb <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020045:	83 ec 08             	sub    esp,0x8
c0020048:	68 66 bf 02 c0       	push   0xc002bf66
c002004d:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020051:	e8 6a 08 fe ff       	call   c00008c0 <strcmp>
c0020056:	83 c4 10             	add    esp,0x10
c0020059:	85 c0                	test   eax,eax
c002005b:	0f 94 c0             	sete   al
c002005e:	84 c0                	test   al,al
c0020060:	74 0a                	je     c002006c <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c0020062:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c002006a:	eb 7f                	jmp    c00200eb <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c002006c:	83 ec 08             	sub    esp,0x8
c002006f:	68 6c bf 02 c0       	push   0xc002bf6c
c0020074:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020078:	e8 43 08 fe ff       	call   c00008c0 <strcmp>
c002007d:	83 c4 10             	add    esp,0x10
c0020080:	85 c0                	test   eax,eax
c0020082:	0f 94 c0             	sete   al
c0020085:	84 c0                	test   al,al
c0020087:	74 0a                	je     c0020093 <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c0020089:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020091:	eb 58                	jmp    c00200eb <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020093:	83 ec 08             	sub    esp,0x8
c0020096:	68 4c 8d 02 c0       	push   0xc0028d4c
c002009b:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002009f:	e8 1c 08 fe ff       	call   c00008c0 <strcmp>
c00200a4:	83 c4 10             	add    esp,0x10
c00200a7:	85 c0                	test   eax,eax
c00200a9:	0f 94 c0             	sete   al
c00200ac:	84 c0                	test   al,al
c00200ae:	74 0a                	je     c00200ba <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c00200b0:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c00200b8:	eb 31                	jmp    c00200eb <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00200ba:	83 ec 08             	sub    esp,0x8
c00200bd:	68 72 bf 02 c0       	push   0xc002bf72
c00200c2:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00200c6:	e8 f5 07 fe ff       	call   c00008c0 <strcmp>
c00200cb:	83 c4 10             	add    esp,0x10
c00200ce:	85 c0                	test   eax,eax
c00200d0:	0f 94 c0             	sete   al
c00200d3:	84 c0                	test   al,al
c00200d5:	74 0a                	je     c00200e1 <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c00200d7:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c00200df:	eb 0a                	jmp    c00200eb <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00200e1:	b8 08 00 00 00       	mov    eax,0x8
c00200e6:	e9 04 01 00 00       	jmp    c00201ef <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c00200eb:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c00200f2:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c00200f7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00200fb:	8b 04 85 c0 11 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcee40]
c0020102:	83 f8 ff             	cmp    eax,0xffffffff
c0020105:	75 34                	jne    c002013b <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c0020107:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c002010b:	88 c2                	mov    dl,al
c002010d:	a1 a0 11 03 c0       	mov    eax,ds:0xc00311a0
c0020112:	01 d0                	add    eax,edx
c0020114:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0020118:	8b 15 a0 11 03 c0    	mov    edx,DWORD PTR ds:0xc00311a0
c002011e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020122:	89 14 85 c0 11 03 c0 	mov    DWORD PTR [eax*4-0x3ffcee40],edx
c0020129:	a1 a0 11 03 c0       	mov    eax,ds:0xc00311a0
c002012e:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0020132:	89 14 85 40 12 03 c0 	mov    DWORD PTR [eax*4-0x3ffcedc0],edx
c0020139:	eb 17                	jmp    c0020152 <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c002013b:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c002013f:	88 c2                	mov    dl,al
c0020141:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020145:	8b 04 85 c0 11 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcee40]
c002014c:	01 d0                	add    eax,edx
c002014e:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0020152:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020156:	88 04 24             	mov    BYTE PTR [esp],al
c0020159:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c002015d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020161:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0020169:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c002016e:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0020176:	83 ec 0c             	sub    esp,0xc
c0020179:	68 00 20 00 00       	push   0x2000
c002017e:	e8 c3 f6 fe ff       	call   c000f846 <malloc>
c0020183:	83 c4 10             	add    esp,0x10
c0020186:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002018a:	68 00 20 00 00       	push   0x2000
c002018f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020193:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020197:	50                   	push   eax
c0020198:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c002019c:	50                   	push   eax
c002019d:	e8 cf 71 fe ff       	call   c0007371 <f_mkfs>
c00201a2:	83 c4 10             	add    esp,0x10
c00201a5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00201a9:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00201ae:	75 07                	jne    c00201b7 <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c00201b0:	b8 00 00 00 00       	mov    eax,0x0
c00201b5:	eb 38                	jmp    c00201ef <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c00201b7:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c00201bc:	75 17                	jne    c00201d5 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c5>
c00201be:	83 ec 0c             	sub    esp,0xc
c00201c1:	68 a4 bf 02 c0       	push   0xc002bfa4
c00201c6:	e8 4a 29 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c00201cb:	83 c4 10             	add    esp,0x10
c00201ce:	b8 09 00 00 00       	mov    eax,0x9
c00201d3:	eb 1a                	jmp    c00201ef <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c00201d5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00201d9:	83 ec 08             	sub    esp,0x8
c00201dc:	50                   	push   eax
c00201dd:	68 78 bf 02 c0       	push   0xc002bf78
c00201e2:	e8 2e 29 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c00201e7:	83 c4 10             	add    esp,0x10
c00201ea:	b8 01 00 00 00       	mov    eax,0x1
c00201ef:	83 c4 2c             	add    esp,0x2c
c00201f2:	c3                   	ret    
c00201f3:	90                   	nop

c00201f4 <FAT::tryMount(LogicalDisk*, int)>:
c00201f4:	81 ec 6c 03 00 00    	sub    esp,0x36c
c00201fa:	a1 a0 11 03 c0       	mov    eax,ds:0xc00311a0
c00201ff:	83 f8 14             	cmp    eax,0x14
c0020202:	75 17                	jne    c002021b <FAT::tryMount(LogicalDisk*, int)+0x27>
c0020204:	83 ec 0c             	sub    esp,0xc
c0020207:	68 8a bf 02 c0       	push   0xc002bf8a
c002020c:	e8 1e 9e ff ff       	call   c001a02f <Krnl::panic(char const*)>
c0020211:	83 c4 10             	add    esp,0x10
c0020214:	b0 00                	mov    al,0x0
c0020216:	e9 d7 01 00 00       	jmp    c00203f2 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c002021b:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0020222:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020228:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002022e:	3d 00 02 00 00       	cmp    eax,0x200
c0020233:	74 07                	je     c002023c <FAT::tryMount(LogicalDisk*, int)+0x48>
c0020235:	b0 00                	mov    al,0x0
c0020237:	e9 b6 01 00 00       	jmp    c00203f2 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c002023c:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c0020244:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c002024b:	8b 04 85 c0 11 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcee40]
c0020252:	83 f8 ff             	cmp    eax,0xffffffff
c0020255:	74 07                	je     c002025e <FAT::tryMount(LogicalDisk*, int)+0x6a>
c0020257:	b0 01                	mov    al,0x1
c0020259:	e9 94 01 00 00       	jmp    c00203f2 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c002025e:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c0020268:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c0020270:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c0020277:	88 c2                	mov    dl,al
c0020279:	a1 a0 11 03 c0       	mov    eax,ds:0xc00311a0
c002027e:	01 d0                	add    eax,edx
c0020280:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c0020287:	8b 15 a0 11 03 c0    	mov    edx,DWORD PTR ds:0xc00311a0
c002028d:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c0020294:	89 14 85 c0 11 03 c0 	mov    DWORD PTR [eax*4-0x3ffcee40],edx
c002029b:	a1 a0 11 03 c0       	mov    eax,ds:0xc00311a0
c00202a0:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c00202a7:	89 14 85 40 12 03 c0 	mov    DWORD PTR [eax*4-0x3ffcedc0],edx
c00202ae:	83 ec 0c             	sub    esp,0xc
c00202b1:	68 54 02 00 00       	push   0x254
c00202b6:	e8 8b f5 fe ff       	call   c000f846 <malloc>
c00202bb:	83 c4 10             	add    esp,0x10
c00202be:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c00202c5:	83 ec 04             	sub    esp,0x4
c00202c8:	6a 00                	push   0x0
c00202ca:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c00202d1:	50                   	push   eax
c00202d2:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c00202d9:	e8 51 4c fe ff       	call   c0004f2f <f_mount>
c00202de:	83 c4 10             	add    esp,0x10
c00202e1:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c00202e8:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c00202f0:	74 19                	je     c002030b <FAT::tryMount(LogicalDisk*, int)+0x117>
c00202f2:	83 ec 0c             	sub    esp,0xc
c00202f5:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c00202fc:	e8 65 f5 fe ff       	call   c000f866 <rfree>
c0020301:	83 c4 10             	add    esp,0x10
c0020304:	b0 00                	mov    al,0x0
c0020306:	e9 e7 00 00 00       	jmp    c00203f2 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c002030b:	83 ec 04             	sub    esp,0x4
c002030e:	68 00 01 00 00       	push   0x100
c0020313:	6a 00                	push   0x0
c0020315:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c002031c:	50                   	push   eax
c002031d:	e8 56 04 fe ff       	call   c0000778 <memset>
c0020322:	83 c4 10             	add    esp,0x10
c0020325:	83 ec 08             	sub    esp,0x8
c0020328:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c002032f:	50                   	push   eax
c0020330:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020337:	50                   	push   eax
c0020338:	e8 37 06 fe ff       	call   c0000974 <strcat>
c002033d:	83 c4 10             	add    esp,0x10
c0020340:	83 ec 08             	sub    esp,0x8
c0020343:	68 98 bf 02 c0       	push   0xc002bf98
c0020348:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c002034f:	50                   	push   eax
c0020350:	e8 1f 06 fe ff       	call   c0000974 <strcat>
c0020355:	83 c4 10             	add    esp,0x10
c0020358:	83 ec 04             	sub    esp,0x4
c002035b:	6a 01                	push   0x1
c002035d:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c0020364:	50                   	push   eax
c0020365:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020369:	50                   	push   eax
c002036a:	e8 22 4c fe ff       	call   c0004f91 <f_open>
c002036f:	83 c4 10             	add    esp,0x10
c0020372:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0020379:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0020380:	85 c0                	test   eax,eax
c0020382:	74 0a                	je     c002038e <FAT::tryMount(LogicalDisk*, int)+0x19a>
c0020384:	78 2d                	js     c00203b3 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0020386:	83 e8 04             	sub    eax,0x4
c0020389:	83 f8 01             	cmp    eax,0x1
c002038c:	77 25                	ja     c00203b3 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c002038e:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c0020396:	83 ec 0c             	sub    esp,0xc
c0020399:	8d 44 24 0c          	lea    eax,[esp+0xc]
c002039d:	50                   	push   eax
c002039e:	e8 40 57 fe ff       	call   c0005ae3 <f_close>
c00203a3:	83 c4 10             	add    esp,0x10
c00203a6:	90                   	nop
c00203a7:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c00203af:	74 3a                	je     c00203eb <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c00203b1:	eb 2d                	jmp    c00203e0 <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c00203b3:	83 ec 0c             	sub    esp,0xc
c00203b6:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c00203bd:	e8 a4 f4 fe ff       	call   c000f866 <rfree>
c00203c2:	83 c4 10             	add    esp,0x10
c00203c5:	83 ec 04             	sub    esp,0x4
c00203c8:	6a 00                	push   0x0
c00203ca:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c00203d1:	50                   	push   eax
c00203d2:	6a 00                	push   0x0
c00203d4:	e8 56 4b fe ff       	call   c0004f2f <f_mount>
c00203d9:	83 c4 10             	add    esp,0x10
c00203dc:	b0 00                	mov    al,0x0
c00203de:	eb 12                	jmp    c00203f2 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00203e0:	a1 a0 11 03 c0       	mov    eax,ds:0xc00311a0
c00203e5:	40                   	inc    eax
c00203e6:	a3 a0 11 03 c0       	mov    ds:0xc00311a0,eax
c00203eb:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c00203f2:	81 c4 6c 03 00 00    	add    esp,0x36c
c00203f8:	c3                   	ret    
c00203f9:	90                   	nop

c00203fa <FAT::readDir(void*, unsigned long, void*, int*)>:
c00203fa:	81 ec 3c 02 00 00    	sub    esp,0x23c
c0020400:	83 bc 24 44 02 00 00 00 	cmp    DWORD PTR [esp+0x244],0x0
c0020408:	74 0a                	je     c0020414 <FAT::readDir(void*, unsigned long, void*, int*)+0x1a>
c002040a:	83 bc 24 50 02 00 00 00 	cmp    DWORD PTR [esp+0x250],0x0
c0020412:	75 0a                	jne    c002041e <FAT::readDir(void*, unsigned long, void*, int*)+0x24>
c0020414:	b8 04 00 00 00       	mov    eax,0x4
c0020419:	e9 db 00 00 00       	jmp    c00204f9 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c002041e:	83 ec 08             	sub    esp,0x8
c0020421:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020428:	50                   	push   eax
c0020429:	ff b4 24 50 02 00 00 	push   DWORD PTR [esp+0x250]
c0020430:	e8 b8 5c fe ff       	call   c00060ed <f_readdir>
c0020435:	83 c4 10             	add    esp,0x10
c0020438:	89 84 24 2c 02 00 00 	mov    DWORD PTR [esp+0x22c],eax
c002043f:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c0020445:	83 ec 0c             	sub    esp,0xc
c0020448:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c002044f:	83 c0 1a             	add    eax,0x1a
c0020452:	50                   	push   eax
c0020453:	e8 3c 03 fe ff       	call   c0000794 <strlen>
c0020458:	83 c4 10             	add    esp,0x10
c002045b:	ba 00 00 00 00       	mov    edx,0x0
c0020460:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020464:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0020468:	8a 84 24 1c 01 00 00 	mov    al,BYTE PTR [esp+0x11c]
c002046f:	0f b6 c0             	movzx  eax,al
c0020472:	83 e0 10             	and    eax,0x10
c0020475:	74 07                	je     c002047e <FAT::readDir(void*, unsigned long, void*, int*)+0x84>
c0020477:	b8 02 00 00 00       	mov    eax,0x2
c002047c:	eb 05                	jmp    c0020483 <FAT::readDir(void*, unsigned long, void*, int*)+0x89>
c002047e:	b8 01 00 00 00       	mov    eax,0x1
c0020483:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020487:	83 ec 08             	sub    esp,0x8
c002048a:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020491:	83 c0 1a             	add    eax,0x1a
c0020494:	50                   	push   eax
c0020495:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020499:	83 c0 10             	add    eax,0x10
c002049c:	50                   	push   eax
c002049d:	e8 92 03 fe ff       	call   c0000834 <strcpy>
c00204a2:	83 c4 10             	add    esp,0x10
c00204a5:	83 ec 04             	sub    esp,0x4
c00204a8:	ff b4 24 4c 02 00 00 	push   DWORD PTR [esp+0x24c]
c00204af:	8d 44 24 08          	lea    eax,[esp+0x8]
c00204b3:	50                   	push   eax
c00204b4:	ff b4 24 58 02 00 00 	push   DWORD PTR [esp+0x258]
c00204bb:	e8 84 02 fe ff       	call   c0000744 <memcpy>
c00204c0:	83 c4 10             	add    esp,0x10
c00204c3:	8b 84 24 50 02 00 00 	mov    eax,DWORD PTR [esp+0x250]
c00204ca:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c00204d0:	8a 84 24 2a 01 00 00 	mov    al,BYTE PTR [esp+0x12a]
c00204d7:	84 c0                	test   al,al
c00204d9:	75 07                	jne    c00204e2 <FAT::readDir(void*, unsigned long, void*, int*)+0xe8>
c00204db:	b8 07 00 00 00       	mov    eax,0x7
c00204e0:	eb 17                	jmp    c00204f9 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c00204e2:	8b 84 24 2c 02 00 00 	mov    eax,DWORD PTR [esp+0x22c]
c00204e9:	85 c0                	test   eax,eax
c00204eb:	75 07                	jne    c00204f4 <FAT::readDir(void*, unsigned long, void*, int*)+0xfa>
c00204ed:	b8 00 00 00 00       	mov    eax,0x0
c00204f2:	eb 05                	jmp    c00204f9 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c00204f4:	b8 01 00 00 00       	mov    eax,0x1
c00204f9:	81 c4 3c 02 00 00    	add    esp,0x23c
c00204ff:	c3                   	ret    

c0020500 <FAT::read(void*, unsigned long, void*, int*)>:
c0020500:	83 ec 1c             	sub    esp,0x1c
c0020503:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020508:	74 07                	je     c0020511 <FAT::read(void*, unsigned long, void*, int*)+0x11>
c002050a:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c002050f:	75 07                	jne    c0020518 <FAT::read(void*, unsigned long, void*, int*)+0x18>
c0020511:	b8 04 00 00 00       	mov    eax,0x4
c0020516:	eb 3d                	jmp    c0020555 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0020518:	8d 44 24 08          	lea    eax,[esp+0x8]
c002051c:	50                   	push   eax
c002051d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020521:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020525:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020529:	e8 9f 4e fe ff       	call   c00053cd <f_read>
c002052e:	83 c4 10             	add    esp,0x10
c0020531:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020535:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020539:	89 c2                	mov    edx,eax
c002053b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002053f:	89 10                	mov    DWORD PTR [eax],edx
c0020541:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020545:	85 c0                	test   eax,eax
c0020547:	75 07                	jne    c0020550 <FAT::read(void*, unsigned long, void*, int*)+0x50>
c0020549:	b8 00 00 00 00       	mov    eax,0x0
c002054e:	eb 05                	jmp    c0020555 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0020550:	b8 01 00 00 00       	mov    eax,0x1
c0020555:	83 c4 1c             	add    esp,0x1c
c0020558:	c3                   	ret    
c0020559:	90                   	nop

c002055a <FAT::write(void*, unsigned long, void*, int*)>:
c002055a:	83 ec 1c             	sub    esp,0x1c
c002055d:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020562:	74 07                	je     c002056b <FAT::write(void*, unsigned long, void*, int*)+0x11>
c0020564:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0020569:	75 07                	jne    c0020572 <FAT::write(void*, unsigned long, void*, int*)+0x18>
c002056b:	b8 04 00 00 00       	mov    eax,0x4
c0020570:	eb 3d                	jmp    c00205af <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0020572:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020576:	50                   	push   eax
c0020577:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002057b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c002057f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020583:	e8 c5 50 fe ff       	call   c000564d <f_write>
c0020588:	83 c4 10             	add    esp,0x10
c002058b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002058f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020593:	89 c2                	mov    edx,eax
c0020595:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020599:	89 10                	mov    DWORD PTR [eax],edx
c002059b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002059f:	85 c0                	test   eax,eax
c00205a1:	75 07                	jne    c00205aa <FAT::write(void*, unsigned long, void*, int*)+0x50>
c00205a3:	b8 00 00 00 00       	mov    eax,0x0
c00205a8:	eb 05                	jmp    c00205af <FAT::write(void*, unsigned long, void*, int*)+0x55>
c00205aa:	b8 01 00 00 00       	mov    eax,0x1
c00205af:	83 c4 1c             	add    esp,0x1c
c00205b2:	c3                   	ret    
c00205b3:	90                   	nop

c00205b4 <FAT::close(void*)>:
c00205b4:	83 ec 1c             	sub    esp,0x1c
c00205b7:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00205bc:	75 07                	jne    c00205c5 <FAT::close(void*)+0x11>
c00205be:	b8 04 00 00 00       	mov    eax,0x4
c00205c3:	eb 36                	jmp    c00205fb <FAT::close(void*)+0x47>
c00205c5:	83 ec 0c             	sub    esp,0xc
c00205c8:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00205cc:	e8 12 55 fe ff       	call   c0005ae3 <f_close>
c00205d1:	83 c4 10             	add    esp,0x10
c00205d4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00205d8:	83 ec 0c             	sub    esp,0xc
c00205db:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00205df:	e8 72 f2 fe ff       	call   c000f856 <free>
c00205e4:	83 c4 10             	add    esp,0x10
c00205e7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00205eb:	85 c0                	test   eax,eax
c00205ed:	75 07                	jne    c00205f6 <FAT::close(void*)+0x42>
c00205ef:	b8 00 00 00 00       	mov    eax,0x0
c00205f4:	eb 05                	jmp    c00205fb <FAT::close(void*)+0x47>
c00205f6:	b8 01 00 00 00       	mov    eax,0x1
c00205fb:	83 c4 1c             	add    esp,0x1c
c00205fe:	c3                   	ret    
c00205ff:	90                   	nop

c0020600 <FAT::closeDir(void*)>:
c0020600:	83 ec 1c             	sub    esp,0x1c
c0020603:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020608:	75 07                	jne    c0020611 <FAT::closeDir(void*)+0x11>
c002060a:	b8 04 00 00 00       	mov    eax,0x4
c002060f:	eb 36                	jmp    c0020647 <FAT::closeDir(void*)+0x47>
c0020611:	83 ec 0c             	sub    esp,0xc
c0020614:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020618:	e8 ae 5a fe ff       	call   c00060cb <f_closedir>
c002061d:	83 c4 10             	add    esp,0x10
c0020620:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020624:	83 ec 0c             	sub    esp,0xc
c0020627:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c002062b:	e8 26 f2 fe ff       	call   c000f856 <free>
c0020630:	83 c4 10             	add    esp,0x10
c0020633:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020637:	85 c0                	test   eax,eax
c0020639:	75 07                	jne    c0020642 <FAT::closeDir(void*)+0x42>
c002063b:	b8 00 00 00 00       	mov    eax,0x0
c0020640:	eb 05                	jmp    c0020647 <FAT::closeDir(void*)+0x47>
c0020642:	b8 01 00 00 00       	mov    eax,0x1
c0020647:	83 c4 1c             	add    esp,0x1c
c002064a:	c3                   	ret    
c002064b:	90                   	nop

c002064c <FAT::seek(void*, unsigned long long)>:
c002064c:	83 ec 2c             	sub    esp,0x2c
c002064f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020653:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020657:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002065b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002065f:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0020664:	75 07                	jne    c002066d <FAT::seek(void*, unsigned long long)+0x21>
c0020666:	b8 04 00 00 00       	mov    eax,0x4
c002066b:	eb 2f                	jmp    c002069c <FAT::seek(void*, unsigned long long)+0x50>
c002066d:	83 ec 04             	sub    esp,0x4
c0020670:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020674:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020678:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c002067c:	e8 91 54 fe ff       	call   c0005b12 <f_lseek>
c0020681:	83 c4 10             	add    esp,0x10
c0020684:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020688:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002068c:	85 c0                	test   eax,eax
c002068e:	75 07                	jne    c0020697 <FAT::seek(void*, unsigned long long)+0x4b>
c0020690:	b8 00 00 00 00       	mov    eax,0x0
c0020695:	eb 05                	jmp    c002069c <FAT::seek(void*, unsigned long long)+0x50>
c0020697:	b8 01 00 00 00       	mov    eax,0x1
c002069c:	83 c4 2c             	add    esp,0x2c
c002069f:	c3                   	ret    

c00206a0 <fatWrapperReadDisk>:
c00206a0:	83 ec 1c             	sub    esp,0x1c
c00206a3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00206a7:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00206ab:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00206af:	89 04 24             	mov    DWORD PTR [esp],eax
c00206b2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00206b6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00206ba:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00206bf:	8b 04 85 80 e1 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1e80]
c00206c6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00206ca:	83 ec 0c             	sub    esp,0xc
c00206cd:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00206d1:	52                   	push   edx
c00206d2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00206d6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00206da:	50                   	push   eax
c00206db:	e8 f2 5b ff ff       	call   c00162d2 <LogicalDisk::read(unsigned long long, int, void*)>
c00206e0:	83 c4 20             	add    esp,0x20
c00206e3:	83 c4 1c             	add    esp,0x1c
c00206e6:	c3                   	ret    

c00206e7 <fatWrapperWriteDisk>:
c00206e7:	83 ec 1c             	sub    esp,0x1c
c00206ea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00206ee:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00206f2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00206f6:	89 04 24             	mov    DWORD PTR [esp],eax
c00206f9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00206fd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020701:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020706:	8b 04 85 80 e1 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1e80]
c002070d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020711:	83 ec 0c             	sub    esp,0xc
c0020714:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020718:	52                   	push   edx
c0020719:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002071d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020721:	50                   	push   eax
c0020722:	e8 17 5c ff ff       	call   c001633e <LogicalDisk::write(unsigned long long, int, void*)>
c0020727:	83 c4 20             	add    esp,0x20
c002072a:	83 c4 1c             	add    esp,0x1c
c002072d:	c3                   	ret    

c002072e <fatWrapperIoctl>:
c002072e:	53                   	push   ebx
c002072f:	83 ec 28             	sub    esp,0x28
c0020732:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020736:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c002073a:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c002073e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0020742:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c0020747:	75 31                	jne    c002077a <fatWrapperIoctl+0x4c>
c0020749:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002074d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020751:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020756:	8b 04 85 80 e1 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1e80]
c002075d:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020763:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020769:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002076d:	66 89 02             	mov    WORD PTR [edx],ax
c0020770:	b8 00 00 00 00       	mov    eax,0x0
c0020775:	e9 b2 00 00 00       	jmp    c002082c <fatWrapperIoctl+0xfe>
c002077a:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c002077f:	75 6a                	jne    c00207eb <fatWrapperIoctl+0xbd>
c0020781:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020785:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020789:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c002078e:	8b 04 85 80 e1 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1e80]
c0020795:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c002079b:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c00207a1:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c00207a7:	89 c8                	mov    eax,ecx
c00207a9:	89 da                	mov    edx,ebx
c00207ab:	0f a4 c2 0a          	shld   edx,eax,0xa
c00207af:	c1 e0 0a             	shl    eax,0xa
c00207b2:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00207b7:	8b 0c 8d 80 e1 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1e80]
c00207be:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c00207c4:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c00207ca:	89 cb                	mov    ebx,ecx
c00207cc:	c1 fb 1f             	sar    ebx,0x1f
c00207cf:	53                   	push   ebx
c00207d0:	51                   	push   ecx
c00207d1:	52                   	push   edx
c00207d2:	50                   	push   eax
c00207d3:	e8 c4 5a 00 00       	call   c002629c <__udivdi3>
c00207d8:	83 c4 10             	add    esp,0x10
c00207db:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00207df:	89 01                	mov    DWORD PTR [ecx],eax
c00207e1:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00207e4:	b8 00 00 00 00       	mov    eax,0x0
c00207e9:	eb 41                	jmp    c002082c <fatWrapperIoctl+0xfe>
c00207eb:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00207f0:	75 07                	jne    c00207f9 <fatWrapperIoctl+0xcb>
c00207f2:	b8 00 00 00 00       	mov    eax,0x0
c00207f7:	eb 33                	jmp    c002082c <fatWrapperIoctl+0xfe>
c00207f9:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c00207fe:	75 19                	jne    c0020819 <fatWrapperIoctl+0xeb>
c0020800:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020804:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020808:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002080c:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0020812:	b8 00 00 00 00       	mov    eax,0x0
c0020817:	eb 13                	jmp    c002082c <fatWrapperIoctl+0xfe>
c0020819:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c002081e:	75 07                	jne    c0020827 <fatWrapperIoctl+0xf9>
c0020820:	b8 00 00 00 00       	mov    eax,0x0
c0020825:	eb 05                	jmp    c002082c <fatWrapperIoctl+0xfe>
c0020827:	b8 04 00 00 00       	mov    eax,0x4
c002082c:	83 c4 28             	add    esp,0x28
c002082f:	5b                   	pop    ebx
c0020830:	c3                   	ret    
c0020831:	90                   	nop

c0020832 <FAT::FAT()>:
c0020832:	83 ec 1c             	sub    esp,0x1c
c0020835:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020839:	83 ec 0c             	sub    esp,0xc
c002083c:	50                   	push   eax
c002083d:	e8 d8 25 ff ff       	call   c0012e1a <Filesystem::Filesystem()>
c0020842:	83 c4 10             	add    esp,0x10
c0020845:	ba d4 bf 02 c0       	mov    edx,0xc002bfd4
c002084a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002084e:	89 10                	mov    DWORD PTR [eax],edx
c0020850:	c7 05 a0 11 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00311a0,0x0
c002085a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0020862:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0020867:	7f 15                	jg     c002087e <FAT::FAT()+0x4c>
c0020869:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002086d:	c7 04 85 c0 11 03 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffcee40],0xffffffff
c0020878:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c002087c:	eb e4                	jmp    c0020862 <FAT::FAT()+0x30>
c002087e:	90                   	nop
c002087f:	83 c4 1c             	add    esp,0x1c
c0020882:	c3                   	ret    
c0020883:	90                   	nop

c0020884 <FAT::fixFilepath(char*)>:
c0020884:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020888:	8a 00                	mov    al,BYTE PTR [eax]
c002088a:	3c 40                	cmp    al,0x40
c002088c:	7e 2c                	jle    c00208ba <FAT::fixFilepath(char*)+0x36>
c002088e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020892:	8a 00                	mov    al,BYTE PTR [eax]
c0020894:	83 e8 41             	sub    eax,0x41
c0020897:	88 c2                	mov    dl,al
c0020899:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002089d:	88 10                	mov    BYTE PTR [eax],dl
c002089f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00208a3:	8a 00                	mov    al,BYTE PTR [eax]
c00208a5:	0f be c0             	movsx  eax,al
c00208a8:	8b 04 85 c0 11 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcee40]
c00208af:	83 c0 30             	add    eax,0x30
c00208b2:	88 c2                	mov    dl,al
c00208b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00208b8:	88 10                	mov    BYTE PTR [eax],dl
c00208ba:	90                   	nop
c00208bb:	c3                   	ret    

c00208bc <FAT::open(char const*, void**, FileOpenMode)>:
c00208bc:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00208c2:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00208ca:	74 0a                	je     c00208d6 <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c00208cc:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c00208d4:	75 0a                	jne    c00208e0 <FAT::open(char const*, void**, FileOpenMode)+0x24>
c00208d6:	b8 04 00 00 00       	mov    eax,0x4
c00208db:	e9 fd 00 00 00       	jmp    c00209dd <FAT::open(char const*, void**, FileOpenMode)+0x121>
c00208e0:	83 ec 08             	sub    esp,0x8
c00208e3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00208ea:	8d 44 24 14          	lea    eax,[esp+0x14]
c00208ee:	50                   	push   eax
c00208ef:	e8 40 ff fd ff       	call   c0000834 <strcpy>
c00208f4:	83 c4 10             	add    esp,0x10
c00208f7:	83 ec 08             	sub    esp,0x8
c00208fa:	8d 44 24 10          	lea    eax,[esp+0x10]
c00208fe:	50                   	push   eax
c00208ff:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020906:	e8 79 ff ff ff       	call   c0020884 <FAT::fixFilepath(char*)>
c002090b:	83 c4 10             	add    esp,0x10
c002090e:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0020916:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c002091d:	83 e0 01             	and    eax,0x1
c0020920:	74 08                	je     c002092a <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c0020922:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c002092a:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020931:	83 e0 04             	and    eax,0x4
c0020934:	74 10                	je     c0020946 <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c0020936:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c002093e:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0020946:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c002094d:	83 e0 02             	and    eax,0x2
c0020950:	74 08                	je     c002095a <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c0020952:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c002095a:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020961:	83 e0 08             	and    eax,0x8
c0020964:	74 08                	je     c002096e <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c0020966:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c002096e:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020975:	83 e0 10             	and    eax,0x10
c0020978:	74 08                	je     c0020982 <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c002097a:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c0020982:	83 ec 0c             	sub    esp,0xc
c0020985:	68 50 02 00 00       	push   0x250
c002098a:	e8 b7 ee fe ff       	call   c000f846 <malloc>
c002098f:	83 c4 10             	add    esp,0x10
c0020992:	89 c2                	mov    edx,eax
c0020994:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c002099b:	89 10                	mov    DWORD PTR [eax],edx
c002099d:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c00209a5:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00209ac:	8b 00                	mov    eax,DWORD PTR [eax]
c00209ae:	83 ec 04             	sub    esp,0x4
c00209b1:	52                   	push   edx
c00209b2:	8d 54 24 10          	lea    edx,[esp+0x10]
c00209b6:	52                   	push   edx
c00209b7:	50                   	push   eax
c00209b8:	e8 d4 45 fe ff       	call   c0004f91 <f_open>
c00209bd:	83 c4 10             	add    esp,0x10
c00209c0:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c00209c7:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c00209cf:	74 07                	je     c00209d8 <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c00209d1:	b8 01 00 00 00       	mov    eax,0x1
c00209d6:	eb 05                	jmp    c00209dd <FAT::open(char const*, void**, FileOpenMode)+0x121>
c00209d8:	b8 00 00 00 00       	mov    eax,0x0
c00209dd:	81 c4 1c 01 00 00    	add    esp,0x11c
c00209e3:	c3                   	ret    

c00209e4 <FAT::openDir(char const*, void**)>:
c00209e4:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00209ea:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00209f2:	74 0a                	je     c00209fe <FAT::openDir(char const*, void**)+0x1a>
c00209f4:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c00209fc:	75 07                	jne    c0020a05 <FAT::openDir(char const*, void**)+0x21>
c00209fe:	b8 04 00 00 00       	mov    eax,0x4
c0020a03:	eb 7d                	jmp    c0020a82 <FAT::openDir(char const*, void**)+0x9e>
c0020a05:	83 ec 08             	sub    esp,0x8
c0020a08:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020a0f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020a13:	50                   	push   eax
c0020a14:	e8 1b fe fd ff       	call   c0000834 <strcpy>
c0020a19:	83 c4 10             	add    esp,0x10
c0020a1c:	83 ec 08             	sub    esp,0x8
c0020a1f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020a23:	50                   	push   eax
c0020a24:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020a2b:	e8 54 fe ff ff       	call   c0020884 <FAT::fixFilepath(char*)>
c0020a30:	83 c4 10             	add    esp,0x10
c0020a33:	83 ec 0c             	sub    esp,0xc
c0020a36:	6a 4c                	push   0x4c
c0020a38:	e8 09 ee fe ff       	call   c000f846 <malloc>
c0020a3d:	83 c4 10             	add    esp,0x10
c0020a40:	89 c2                	mov    edx,eax
c0020a42:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0020a49:	89 10                	mov    DWORD PTR [eax],edx
c0020a4b:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0020a52:	8b 00                	mov    eax,DWORD PTR [eax]
c0020a54:	83 ec 08             	sub    esp,0x8
c0020a57:	8d 54 24 14          	lea    edx,[esp+0x14]
c0020a5b:	52                   	push   edx
c0020a5c:	50                   	push   eax
c0020a5d:	e8 67 55 fe ff       	call   c0005fc9 <f_opendir>
c0020a62:	83 c4 10             	add    esp,0x10
c0020a65:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0020a6c:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0020a74:	74 07                	je     c0020a7d <FAT::openDir(char const*, void**)+0x99>
c0020a76:	b8 01 00 00 00       	mov    eax,0x1
c0020a7b:	eb 05                	jmp    c0020a82 <FAT::openDir(char const*, void**)+0x9e>
c0020a7d:	b8 00 00 00 00       	mov    eax,0x0
c0020a82:	81 c4 1c 01 00 00    	add    esp,0x11c
c0020a88:	c3                   	ret    
c0020a89:	90                   	nop

c0020a8a <FAT::stat(char const*, unsigned long long*, bool*)>:
c0020a8a:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0020a90:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0020a98:	75 0a                	jne    c0020aa4 <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c0020a9a:	b8 04 00 00 00       	mov    eax,0x4
c0020a9f:	e9 c9 00 00 00       	jmp    c0020b6d <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020aa4:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0020aac:	75 0a                	jne    c0020ab8 <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c0020aae:	b8 04 00 00 00       	mov    eax,0x4
c0020ab3:	e9 b5 00 00 00       	jmp    c0020b6d <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020ab8:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0020ac0:	75 0a                	jne    c0020acc <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c0020ac2:	b8 04 00 00 00       	mov    eax,0x4
c0020ac7:	e9 a1 00 00 00       	jmp    c0020b6d <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020acc:	83 ec 08             	sub    esp,0x8
c0020acf:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0020ad6:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0020add:	50                   	push   eax
c0020ade:	e8 51 fd fd ff       	call   c0000834 <strcpy>
c0020ae3:	83 c4 10             	add    esp,0x10
c0020ae6:	83 ec 08             	sub    esp,0x8
c0020ae9:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0020af0:	50                   	push   eax
c0020af1:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0020af8:	e8 87 fd ff ff       	call   c0020884 <FAT::fixFilepath(char*)>
c0020afd:	83 c4 10             	add    esp,0x10
c0020b00:	83 ec 08             	sub    esp,0x8
c0020b03:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020b07:	50                   	push   eax
c0020b08:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0020b0f:	50                   	push   eax
c0020b10:	e8 73 56 fe ff       	call   c0006188 <f_stat>
c0020b15:	83 c4 10             	add    esp,0x10
c0020b18:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0020b1f:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0020b26:	85 c0                	test   eax,eax
c0020b28:	74 07                	je     c0020b31 <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c0020b2a:	83 f8 04             	cmp    eax,0x4
c0020b2d:	74 32                	je     c0020b61 <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c0020b2f:	eb 37                	jmp    c0020b68 <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c0020b31:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0020b35:	0f b6 c0             	movzx  eax,al
c0020b38:	83 e0 10             	and    eax,0x10
c0020b3b:	0f 95 c2             	setne  dl
c0020b3e:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0020b45:	88 10                	mov    BYTE PTR [eax],dl
c0020b47:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0020b4a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0020b4e:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0020b55:	89 01                	mov    DWORD PTR [ecx],eax
c0020b57:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020b5a:	b8 00 00 00 00       	mov    eax,0x0
c0020b5f:	eb 0c                	jmp    c0020b6d <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020b61:	b8 02 00 00 00       	mov    eax,0x2
c0020b66:	eb 05                	jmp    c0020b6d <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020b68:	b8 01 00 00 00       	mov    eax,0x1
c0020b6d:	81 c4 2c 02 00 00    	add    esp,0x22c
c0020b73:	c3                   	ret    

c0020b74 <FAT::unlink(char const*)>:
c0020b74:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020b7a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0020b82:	75 07                	jne    c0020b8b <FAT::unlink(char const*)+0x17>
c0020b84:	b8 04 00 00 00       	mov    eax,0x4
c0020b89:	eb 5c                	jmp    c0020be7 <FAT::unlink(char const*)+0x73>
c0020b8b:	83 ec 08             	sub    esp,0x8
c0020b8e:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020b95:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020b99:	50                   	push   eax
c0020b9a:	e8 95 fc fd ff       	call   c0000834 <strcpy>
c0020b9f:	83 c4 10             	add    esp,0x10
c0020ba2:	83 ec 08             	sub    esp,0x8
c0020ba5:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020ba9:	50                   	push   eax
c0020baa:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020bb1:	e8 ce fc ff ff       	call   c0020884 <FAT::fixFilepath(char*)>
c0020bb6:	83 c4 10             	add    esp,0x10
c0020bb9:	83 ec 0c             	sub    esp,0xc
c0020bbc:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020bc0:	50                   	push   eax
c0020bc1:	e8 14 59 fe ff       	call   c00064da <f_unlink>
c0020bc6:	83 c4 10             	add    esp,0x10
c0020bc9:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0020bd0:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0020bd7:	85 c0                	test   eax,eax
c0020bd9:	75 07                	jne    c0020be2 <FAT::unlink(char const*)+0x6e>
c0020bdb:	b8 00 00 00 00       	mov    eax,0x0
c0020be0:	eb 05                	jmp    c0020be7 <FAT::unlink(char const*)+0x73>
c0020be2:	b8 01 00 00 00       	mov    eax,0x1
c0020be7:	81 c4 1c 01 00 00    	add    esp,0x11c
c0020bed:	c3                   	ret    

c0020bee <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0020bee:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0020bf4:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c0020bfb:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0020c02:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0020c06:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0020c0a:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0020c12:	75 0a                	jne    c0020c1e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c0020c14:	b8 04 00 00 00       	mov    eax,0x4
c0020c19:	e9 1c 01 00 00       	jmp    c0020d3a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0020c1e:	83 ec 08             	sub    esp,0x8
c0020c21:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0020c28:	8d 44 24 24          	lea    eax,[esp+0x24]
c0020c2c:	50                   	push   eax
c0020c2d:	e8 02 fc fd ff       	call   c0000834 <strcpy>
c0020c32:	83 c4 10             	add    esp,0x10
c0020c35:	83 ec 08             	sub    esp,0x8
c0020c38:	8d 44 24 20          	lea    eax,[esp+0x20]
c0020c3c:	50                   	push   eax
c0020c3d:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0020c44:	e8 3b fc ff ff       	call   c0020884 <FAT::fixFilepath(char*)>
c0020c49:	83 c4 10             	add    esp,0x10
c0020c4c:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0020c54:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0020c5c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020c61:	83 e0 01             	and    eax,0x1
c0020c64:	74 08                	je     c0020c6e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c0020c66:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c0020c6e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020c73:	83 e0 02             	and    eax,0x2
c0020c76:	74 08                	je     c0020c80 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c0020c78:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c0020c80:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020c85:	83 e0 04             	and    eax,0x4
c0020c88:	74 08                	je     c0020c92 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c0020c8a:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c0020c92:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020c97:	83 e0 08             	and    eax,0x8
c0020c9a:	74 08                	je     c0020ca4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c0020c9c:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c0020ca4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020ca9:	83 e0 01             	and    eax,0x1
c0020cac:	74 08                	je     c0020cb6 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c0020cae:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c0020cb6:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020cbb:	83 e0 02             	and    eax,0x2
c0020cbe:	74 08                	je     c0020cc8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c0020cc0:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c0020cc8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020ccd:	83 e0 04             	and    eax,0x4
c0020cd0:	74 08                	je     c0020cda <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c0020cd2:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c0020cda:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020cdf:	83 e0 08             	and    eax,0x8
c0020ce2:	74 08                	je     c0020cec <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c0020ce4:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c0020cec:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0020cf3:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c0020cfa:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c0020d02:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c0020d0a:	83 ec 04             	sub    esp,0x4
c0020d0d:	52                   	push   edx
c0020d0e:	50                   	push   eax
c0020d0f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0020d13:	50                   	push   eax
c0020d14:	e8 63 5e fe ff       	call   c0006b7c <f_chmod>
c0020d19:	83 c4 10             	add    esp,0x10
c0020d1c:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0020d23:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0020d2a:	85 c0                	test   eax,eax
c0020d2c:	75 07                	jne    c0020d35 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c0020d2e:	b8 00 00 00 00       	mov    eax,0x0
c0020d33:	eb 05                	jmp    c0020d3a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0020d35:	b8 01 00 00 00       	mov    eax,0x1
c0020d3a:	81 c4 2c 01 00 00    	add    esp,0x12c
c0020d40:	c3                   	ret    
c0020d41:	90                   	nop

c0020d42 <FAT::rename(char const*, char const*)>:
c0020d42:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0020d48:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c0020d50:	74 0a                	je     c0020d5c <FAT::rename(char const*, char const*)+0x1a>
c0020d52:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0020d5a:	75 0a                	jne    c0020d66 <FAT::rename(char const*, char const*)+0x24>
c0020d5c:	b8 04 00 00 00       	mov    eax,0x4
c0020d61:	e9 98 00 00 00       	jmp    c0020dfe <FAT::rename(char const*, char const*)+0xbc>
c0020d66:	83 ec 08             	sub    esp,0x8
c0020d69:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0020d70:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020d77:	50                   	push   eax
c0020d78:	e8 b7 fa fd ff       	call   c0000834 <strcpy>
c0020d7d:	83 c4 10             	add    esp,0x10
c0020d80:	83 ec 08             	sub    esp,0x8
c0020d83:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0020d8a:	50                   	push   eax
c0020d8b:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0020d92:	e8 ed fa ff ff       	call   c0020884 <FAT::fixFilepath(char*)>
c0020d97:	83 c4 10             	add    esp,0x10
c0020d9a:	83 ec 08             	sub    esp,0x8
c0020d9d:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c0020da4:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020da8:	50                   	push   eax
c0020da9:	e8 86 fa fd ff       	call   c0000834 <strcpy>
c0020dae:	83 c4 10             	add    esp,0x10
c0020db1:	83 ec 08             	sub    esp,0x8
c0020db4:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020db8:	50                   	push   eax
c0020db9:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0020dc0:	e8 bf fa ff ff       	call   c0020884 <FAT::fixFilepath(char*)>
c0020dc5:	83 c4 10             	add    esp,0x10
c0020dc8:	83 ec 08             	sub    esp,0x8
c0020dcb:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020dcf:	50                   	push   eax
c0020dd0:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020dd7:	50                   	push   eax
c0020dd8:	e8 ac 5a fe ff       	call   c0006889 <f_rename>
c0020ddd:	83 c4 10             	add    esp,0x10
c0020de0:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c0020de7:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0020dee:	85 c0                	test   eax,eax
c0020df0:	75 07                	jne    c0020df9 <FAT::rename(char const*, char const*)+0xb7>
c0020df2:	b8 00 00 00 00       	mov    eax,0x0
c0020df7:	eb 05                	jmp    c0020dfe <FAT::rename(char const*, char const*)+0xbc>
c0020df9:	b8 01 00 00 00       	mov    eax,0x1
c0020dfe:	81 c4 1c 02 00 00    	add    esp,0x21c
c0020e04:	c3                   	ret    
c0020e05:	90                   	nop

c0020e06 <FAT::mkdir(char const*)>:
c0020e06:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020e0c:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0020e14:	75 07                	jne    c0020e1d <FAT::mkdir(char const*)+0x17>
c0020e16:	b8 04 00 00 00       	mov    eax,0x4
c0020e1b:	eb 5c                	jmp    c0020e79 <FAT::mkdir(char const*)+0x73>
c0020e1d:	83 ec 08             	sub    esp,0x8
c0020e20:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020e27:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020e2b:	50                   	push   eax
c0020e2c:	e8 03 fa fd ff       	call   c0000834 <strcpy>
c0020e31:	83 c4 10             	add    esp,0x10
c0020e34:	83 ec 08             	sub    esp,0x8
c0020e37:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020e3b:	50                   	push   eax
c0020e3c:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020e43:	e8 3c fa ff ff       	call   c0020884 <FAT::fixFilepath(char*)>
c0020e48:	83 c4 10             	add    esp,0x10
c0020e4b:	83 ec 0c             	sub    esp,0xc
c0020e4e:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020e52:	50                   	push   eax
c0020e53:	e8 05 58 fe ff       	call   c000665d <f_mkdir>
c0020e58:	83 c4 10             	add    esp,0x10
c0020e5b:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0020e62:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0020e69:	85 c0                	test   eax,eax
c0020e6b:	75 07                	jne    c0020e74 <FAT::mkdir(char const*)+0x6e>
c0020e6d:	b8 00 00 00 00       	mov    eax,0x0
c0020e72:	eb 05                	jmp    c0020e79 <FAT::mkdir(char const*)+0x73>
c0020e74:	b8 01 00 00 00       	mov    eax,0x1
c0020e79:	81 c4 1c 01 00 00    	add    esp,0x11c
c0020e7f:	c3                   	ret    

c0020e80 <FAT::exists(char const*)>:
c0020e80:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0020e86:	83 ec 08             	sub    esp,0x8
c0020e89:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0020e90:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020e94:	50                   	push   eax
c0020e95:	e8 9a f9 fd ff       	call   c0000834 <strcpy>
c0020e9a:	83 c4 10             	add    esp,0x10
c0020e9d:	83 ec 08             	sub    esp,0x8
c0020ea0:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020ea4:	50                   	push   eax
c0020ea5:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0020eac:	e8 d3 f9 ff ff       	call   c0020884 <FAT::fixFilepath(char*)>
c0020eb1:	83 c4 10             	add    esp,0x10
c0020eb4:	83 ec 08             	sub    esp,0x8
c0020eb7:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c0020ebe:	50                   	push   eax
c0020ebf:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020ec3:	50                   	push   eax
c0020ec4:	e8 bf 52 fe ff       	call   c0006188 <f_stat>
c0020ec9:	83 c4 10             	add    esp,0x10
c0020ecc:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0020ed3:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0020eda:	85 c0                	test   eax,eax
c0020edc:	75 04                	jne    c0020ee2 <FAT::exists(char const*)+0x62>
c0020ede:	b0 01                	mov    al,0x1
c0020ee0:	eb 02                	jmp    c0020ee4 <FAT::exists(char const*)+0x64>
c0020ee2:	b0 00                	mov    al,0x0
c0020ee4:	81 c4 2c 02 00 00    	add    esp,0x22c
c0020eea:	c3                   	ret    
c0020eeb:	90                   	nop

c0020eec <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c0020eec:	b8 08 00 00 00       	mov    eax,0x8
c0020ef1:	c3                   	ret    

c0020ef2 <ISO9660::seek(void*, unsigned long long)>:
c0020ef2:	53                   	push   ebx
c0020ef3:	b8 04 00 00 00       	mov    eax,0x4
c0020ef8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0020efc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0020f00:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0020f04:	85 d2                	test   edx,edx
c0020f06:	74 17                	je     c0020f1f <ISO9660::seek(void*, unsigned long long)+0x2d>
c0020f08:	89 c8                	mov    eax,ecx
c0020f0a:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c0020f0d:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c0020f10:	b8 01 00 00 00       	mov    eax,0x1
c0020f15:	73 08                	jae    c0020f1f <ISO9660::seek(void*, unsigned long long)+0x2d>
c0020f17:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c0020f1a:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c0020f1d:	31 c0                	xor    eax,eax
c0020f1f:	5b                   	pop    ebx
c0020f20:	c3                   	ret    
c0020f21:	90                   	nop

c0020f22 <ISO9660::tell(void*, unsigned long long*)>:
c0020f22:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0020f26:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020f2a:	85 d2                	test   edx,edx
c0020f2c:	74 12                	je     c0020f40 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0020f2e:	85 c0                	test   eax,eax
c0020f30:	74 0e                	je     c0020f40 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0020f32:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0020f35:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c0020f38:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0020f3b:	89 10                	mov    DWORD PTR [eax],edx
c0020f3d:	31 c0                	xor    eax,eax
c0020f3f:	c3                   	ret    
c0020f40:	b8 04 00 00 00       	mov    eax,0x4
c0020f45:	c3                   	ret    

c0020f46 <ISO9660::getName()>:
c0020f46:	b8 30 c0 02 c0       	mov    eax,0xc002c030
c0020f4b:	c3                   	ret    

c0020f4c <ISO9660::stat(void*, unsigned long long*)>:
c0020f4c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0020f50:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020f54:	85 d2                	test   edx,edx
c0020f56:	74 12                	je     c0020f6a <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0020f58:	85 c0                	test   eax,eax
c0020f5a:	74 0e                	je     c0020f6a <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0020f5c:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0020f5f:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0020f62:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0020f65:	89 10                	mov    DWORD PTR [eax],edx
c0020f67:	31 c0                	xor    eax,eax
c0020f69:	c3                   	ret    
c0020f6a:	b8 04 00 00 00       	mov    eax,0x4
c0020f6f:	c3                   	ret    

c0020f70 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c0020f70:	b8 01 00 00 00       	mov    eax,0x1
c0020f75:	c3                   	ret    

c0020f76 <ISO9660::unlink(char const*)>:
c0020f76:	b8 01 00 00 00       	mov    eax,0x1
c0020f7b:	c3                   	ret    

c0020f7c <ISO9660::write(void*, unsigned long, void*, int*)>:
c0020f7c:	b8 01 00 00 00       	mov    eax,0x1
c0020f81:	c3                   	ret    

c0020f82 <ISO9660::rename(char const*, char const*)>:
c0020f82:	b8 01 00 00 00       	mov    eax,0x1
c0020f87:	c3                   	ret    

c0020f88 <ISO9660::mkdir(char const*)>:
c0020f88:	b8 01 00 00 00       	mov    eax,0x1
c0020f8d:	c3                   	ret    

c0020f8e <ISO9660::close(void*)>:
c0020f8e:	83 ec 0c             	sub    esp,0xc
c0020f91:	b8 04 00 00 00       	mov    eax,0x4
c0020f96:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020f9a:	85 d2                	test   edx,edx
c0020f9c:	74 0e                	je     c0020fac <ISO9660::close(void*)+0x1e>
c0020f9e:	83 ec 0c             	sub    esp,0xc
c0020fa1:	52                   	push   edx
c0020fa2:	e8 af e8 fe ff       	call   c000f856 <free>
c0020fa7:	83 c4 10             	add    esp,0x10
c0020faa:	31 c0                	xor    eax,eax
c0020fac:	83 c4 0c             	add    esp,0xc
c0020faf:	c3                   	ret    

c0020fb0 <ISO9660::closeDir(void*)>:
c0020fb0:	83 ec 0c             	sub    esp,0xc
c0020fb3:	b8 04 00 00 00       	mov    eax,0x4
c0020fb8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020fbc:	85 d2                	test   edx,edx
c0020fbe:	74 0e                	je     c0020fce <ISO9660::closeDir(void*)+0x1e>
c0020fc0:	83 ec 0c             	sub    esp,0xc
c0020fc3:	52                   	push   edx
c0020fc4:	e8 8d e8 fe ff       	call   c000f856 <free>
c0020fc9:	83 c4 10             	add    esp,0x10
c0020fcc:	31 c0                	xor    eax,eax
c0020fce:	83 c4 0c             	add    esp,0xc
c0020fd1:	c3                   	ret    

c0020fd2 <ISO9660::~ISO9660()>:
c0020fd2:	83 ec 0c             	sub    esp,0xc
c0020fd5:	ba 94 c0 02 c0       	mov    edx,0xc002c094
c0020fda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020fde:	89 10                	mov    DWORD PTR [eax],edx
c0020fe0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020fe4:	83 ec 0c             	sub    esp,0xc
c0020fe7:	50                   	push   eax
c0020fe8:	e8 51 1e ff ff       	call   c0012e3e <Filesystem::~Filesystem()>
c0020fed:	83 c4 10             	add    esp,0x10
c0020ff0:	90                   	nop
c0020ff1:	83 c4 0c             	add    esp,0xc
c0020ff4:	c3                   	ret    
c0020ff5:	90                   	nop

c0020ff6 <ISO9660::~ISO9660()>:
c0020ff6:	83 ec 0c             	sub    esp,0xc
c0020ff9:	83 ec 0c             	sub    esp,0xc
c0020ffc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021000:	e8 cd ff ff ff       	call   c0020fd2 <ISO9660::~ISO9660()>
c0021005:	83 c4 10             	add    esp,0x10
c0021008:	83 ec 08             	sub    esp,0x8
c002100b:	6a 08                	push   0x8
c002100d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021011:	e8 1f 1a ff ff       	call   c0012a35 <operator delete(void*, unsigned long)>
c0021016:	83 c4 10             	add    esp,0x10
c0021019:	83 c4 0c             	add    esp,0xc
c002101c:	c3                   	ret    

c002101d <__memmem(unsigned char*, int, unsigned char*, int)>:
c002101d:	55                   	push   ebp
c002101e:	31 c9                	xor    ecx,ecx
c0021020:	57                   	push   edi
c0021021:	56                   	push   esi
c0021022:	53                   	push   ebx
c0021023:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0021027:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c002102b:	89 eb                	mov    ebx,ebp
c002102d:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c0021031:	39 ce                	cmp    esi,ecx
c0021033:	7e 17                	jle    c002104c <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c0021035:	31 d2                	xor    edx,edx
c0021037:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c002103b:	7d 13                	jge    c0021050 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c002103d:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0021041:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0021044:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c0021047:	75 0d                	jne    c0021056 <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c0021049:	42                   	inc    edx
c002104a:	eb eb                	jmp    c0021037 <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c002104c:	31 c0                	xor    eax,eax
c002104e:	eb 0a                	jmp    c002105a <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0021050:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0021054:	eb 04                	jmp    c002105a <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0021056:	41                   	inc    ecx
c0021057:	43                   	inc    ebx
c0021058:	eb d7                	jmp    c0021031 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c002105a:	5b                   	pop    ebx
c002105b:	5e                   	pop    esi
c002105c:	5f                   	pop    edi
c002105d:	5d                   	pop    ebp
c002105e:	c3                   	ret    

c002105f <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c002105f:	56                   	push   esi
c0021060:	53                   	push   ebx
c0021061:	52                   	push   edx
c0021062:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021066:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c002106a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002106e:	39 0d a0 12 03 c0    	cmp    DWORD PTR ds:0xc00312a0,ecx
c0021074:	75 08                	jne    c002107e <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c0021076:	38 05 f4 d0 02 c0    	cmp    BYTE PTR ds:0xc002d0f4,al
c002107c:	74 2b                	je     c00210a9 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x4a>
c002107e:	83 ec 0c             	sub    esp,0xc
c0021081:	a2 f4 d0 02 c0       	mov    ds:0xc002d0f4,al
c0021086:	68 c0 12 03 c0       	push   0xc00312c0
c002108b:	0f be c0             	movsx  eax,al
c002108e:	6a 01                	push   0x1
c0021090:	89 0d a0 12 03 c0    	mov    DWORD PTR ds:0xc00312a0,ecx
c0021096:	31 db                	xor    ebx,ebx
c0021098:	53                   	push   ebx
c0021099:	51                   	push   ecx
c002109a:	ff 34 85 7c e0 02 c0 	push   DWORD PTR [eax*4-0x3ffd1f84]
c00210a1:	e8 2c 52 ff ff       	call   c00162d2 <LogicalDisk::read(unsigned long long, int, void*)>
c00210a6:	83 c4 20             	add    esp,0x20
c00210a9:	c7 44 24 18 00 08 00 00 	mov    DWORD PTR [esp+0x18],0x800
c00210b1:	c7 44 24 14 c0 12 03 c0 	mov    DWORD PTR [esp+0x14],0xc00312c0
c00210b9:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c00210bd:	58                   	pop    eax
c00210be:	5b                   	pop    ebx
c00210bf:	5e                   	pop    esi
c00210c0:	e9 7f f6 fd ff       	jmp    c0000744 <memcpy>
c00210c5:	90                   	nop

c00210c6 <ISO9660::tryMount(LogicalDisk*, int)>:
c00210c6:	81 ec 10 08 00 00    	sub    esp,0x810
c00210cc:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c00210d3:	83 c0 41             	add    eax,0x41
c00210d6:	0f be c0             	movsx  eax,al
c00210d9:	50                   	push   eax
c00210da:	8d 44 24 08          	lea    eax,[esp+0x8]
c00210de:	50                   	push   eax
c00210df:	6a 10                	push   0x10
c00210e1:	e8 79 ff ff ff       	call   c002105f <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00210e6:	83 c4 10             	add    esp,0x10
c00210e9:	31 c0                	xor    eax,eax
c00210eb:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c00210f0:	75 1d                	jne    c002110f <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c00210f2:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c00210f7:	75 16                	jne    c002110f <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c00210f9:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c00210fe:	75 0f                	jne    c002110f <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021100:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c0021105:	75 08                	jne    c002110f <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021107:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c002110c:	0f 94 c0             	sete   al
c002110f:	81 c4 0c 08 00 00    	add    esp,0x80c
c0021115:	c3                   	ret    

c0021116 <ISO9660::read(void*, unsigned long, void*, int*)>:
c0021116:	55                   	push   ebp
c0021117:	57                   	push   edi
c0021118:	56                   	push   esi
c0021119:	53                   	push   ebx
c002111a:	81 ec 2c 08 00 00    	sub    esp,0x82c
c0021120:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c0021127:	85 ed                	test   ebp,ebp
c0021129:	0f 84 d6 01 00 00    	je     c0021305 <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c002112f:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c0021137:	0f 84 c8 01 00 00    	je     c0021305 <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c002113d:	b8 01 00 00 00       	mov    eax,0x1
c0021142:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c0021146:	0f 85 be 01 00 00    	jne    c002130a <ISO9660::read(void*, unsigned long, void*, int*)+0x1f4>
c002114c:	31 d2                	xor    edx,edx
c002114e:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c0021155:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0021158:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
c002115b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002115f:	8b 7d 14             	mov    edi,DWORD PTR [ebp+0x14]
c0021162:	89 04 24             	mov    DWORD PTR [esp],eax
c0021165:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021169:	01 f0                	add    eax,esi
c002116b:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c002116e:	11 fa                	adc    edx,edi
c0021170:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0021174:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0021178:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c002117c:	19 d1                	sbb    ecx,edx
c002117e:	72 0a                	jb     c002118a <ISO9660::read(void*, unsigned long, void*, int*)+0x74>
c0021180:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021184:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021188:	eb 13                	jmp    c002119d <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c002118a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002118e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021192:	29 f0                	sub    eax,esi
c0021194:	19 fa                	sbb    edx,edi
c0021196:	89 04 24             	mov    DWORD PTR [esp],eax
c0021199:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c002119d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00211a0:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c00211a3:	0f a4 c2 0b          	shld   edx,eax,0xb
c00211a7:	51                   	push   ecx
c00211a8:	c1 e0 0b             	shl    eax,0xb
c00211ab:	01 c6                	add    esi,eax
c00211ad:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c00211b1:	11 d7                	adc    edi,edx
c00211b3:	50                   	push   eax
c00211b4:	89 fa                	mov    edx,edi
c00211b6:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c00211ba:	89 f0                	mov    eax,esi
c00211bc:	53                   	push   ebx
c00211bd:	0f ac d0 0b          	shrd   eax,edx,0xb
c00211c1:	50                   	push   eax
c00211c2:	e8 98 fe ff ff       	call   c002105f <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00211c7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00211cb:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00211ce:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00211d2:	81 e2 ff 07 00 00    	and    edx,0x7ff
c00211d8:	83 c4 10             	add    esp,0x10
c00211db:	b8 00 08 00 00       	mov    eax,0x800
c00211e0:	29 d0                	sub    eax,edx
c00211e2:	39 c1                	cmp    ecx,eax
c00211e4:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00211e8:	83 d9 00             	sbb    ecx,0x0
c00211eb:	7d 1c                	jge    c0021209 <ISO9660::read(void*, unsigned long, void*, int*)+0xf3>
c00211ed:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00211f2:	75 12                	jne    c0021206 <ISO9660::read(void*, unsigned long, void*, int*)+0xf0>
c00211f4:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c00211fb:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021201:	e9 fb 00 00 00       	jmp    c0021301 <ISO9660::read(void*, unsigned long, void*, int*)+0x1eb>
c0021206:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021209:	8d 0c 13             	lea    ecx,[ebx+edx*1]
c002120c:	31 d2                	xor    edx,edx
c002120e:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0021212:	39 c2                	cmp    edx,eax
c0021214:	7d 14                	jge    c002122a <ISO9660::read(void*, unsigned long, void*, int*)+0x114>
c0021216:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c002121d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021221:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c0021224:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0021227:	42                   	inc    edx
c0021228:	eb e8                	jmp    c0021212 <ISO9660::read(void*, unsigned long, void*, int*)+0xfc>
c002122a:	89 c3                	mov    ebx,eax
c002122c:	85 c0                	test   eax,eax
c002122e:	79 02                	jns    c0021232 <ISO9660::read(void*, unsigned long, void*, int*)+0x11c>
c0021230:	31 db                	xor    ebx,ebx
c0021232:	99                   	cdq    
c0021233:	01 c3                	add    ebx,eax
c0021235:	03 9c 24 4c 08 00 00 	add    ebx,DWORD PTR [esp+0x84c]
c002123c:	01 c6                	add    esi,eax
c002123e:	11 d7                	adc    edi,edx
c0021240:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0021244:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0021248:	8b 34 24             	mov    esi,DWORD PTR [esp]
c002124b:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c002124f:	29 c6                	sub    esi,eax
c0021251:	19 d7                	sbb    edi,edx
c0021253:	89 34 24             	mov    DWORD PTR [esp],esi
c0021256:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c002125a:	b8 ff 07 00 00       	mov    eax,0x7ff
c002125f:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0021262:	b8 00 00 00 00       	mov    eax,0x0
c0021267:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c002126b:	7d 3e                	jge    c00212ab <ISO9660::read(void*, unsigned long, void*, int*)+0x195>
c002126d:	52                   	push   edx
c002126e:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021272:	50                   	push   eax
c0021273:	53                   	push   ebx
c0021274:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021278:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c002127c:	0f ac d0 0b          	shrd   eax,edx,0xb
c0021280:	50                   	push   eax
c0021281:	e8 d9 fd ff ff       	call   c002105f <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021286:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c002128e:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c0021293:	81 c3 00 08 00 00    	add    ebx,0x800
c0021299:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c00212a1:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c00212a6:	83 c4 10             	add    esp,0x10
c00212a9:	eb af                	jmp    c002125a <ISO9660::read(void*, unsigned long, void*, int*)+0x144>
c00212ab:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00212af:	0b 04 24             	or     eax,DWORD PTR [esp]
c00212b2:	74 32                	je     c00212e6 <ISO9660::read(void*, unsigned long, void*, int*)+0x1d0>
c00212b4:	50                   	push   eax
c00212b5:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c00212b9:	50                   	push   eax
c00212ba:	8d 44 24 28          	lea    eax,[esp+0x28]
c00212be:	50                   	push   eax
c00212bf:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00212c3:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00212c7:	0f ac fe 0b          	shrd   esi,edi,0xb
c00212cb:	56                   	push   esi
c00212cc:	e8 8e fd ff ff       	call   c002105f <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00212d1:	83 c4 0c             	add    esp,0xc
c00212d4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00212d8:	8d 44 24 28          	lea    eax,[esp+0x28]
c00212dc:	50                   	push   eax
c00212dd:	53                   	push   ebx
c00212de:	e8 61 f4 fd ff       	call   c0000744 <memcpy>
c00212e3:	83 c4 10             	add    esp,0x10
c00212e6:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c00212ed:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00212f1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00212f5:	89 38                	mov    DWORD PTR [eax],edi
c00212f7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00212fb:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c00212fe:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0021301:	31 c0                	xor    eax,eax
c0021303:	eb 05                	jmp    c002130a <ISO9660::read(void*, unsigned long, void*, int*)+0x1f4>
c0021305:	b8 04 00 00 00       	mov    eax,0x4
c002130a:	81 c4 2c 08 00 00    	add    esp,0x82c
c0021310:	5b                   	pop    ebx
c0021311:	5e                   	pop    esi
c0021312:	5f                   	pop    edi
c0021313:	5d                   	pop    ebp
c0021314:	c3                   	ret    
c0021315:	90                   	nop

c0021316 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c0021316:	55                   	push   ebp
c0021317:	57                   	push   edi
c0021318:	56                   	push   esi
c0021319:	53                   	push   ebx
c002131a:	81 ec 5c 09 00 00    	sub    esp,0x95c
c0021320:	8b b4 24 74 09 00 00 	mov    esi,DWORD PTR [esp+0x974]
c0021327:	85 f6                	test   esi,esi
c0021329:	0f 84 64 02 00 00    	je     c0021593 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c002132f:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c0021337:	0f 84 56 02 00 00    	je     c0021593 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c002133d:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0021340:	0b 46 08             	or     eax,DWORD PTR [esi+0x8]
c0021343:	75 0a                	jne    c002134f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c0021345:	b8 07 00 00 00       	mov    eax,0x7
c002134a:	e9 49 02 00 00       	jmp    c0021598 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c002134f:	50                   	push   eax
c0021350:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c0021354:	50                   	push   eax
c0021355:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c002135c:	53                   	push   ebx
c002135d:	8b 06                	mov    eax,DWORD PTR [esi]
c002135f:	c1 e0 0b             	shl    eax,0xb
c0021362:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0021365:	c1 e8 0b             	shr    eax,0xb
c0021368:	50                   	push   eax
c0021369:	e8 f1 fc ff ff       	call   c002105f <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c002136e:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0021371:	83 c4 10             	add    esp,0x10
c0021374:	89 c1                	mov    ecx,eax
c0021376:	8b 56 14             	mov    edx,DWORD PTR [esi+0x14]
c0021379:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c002137f:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c0021382:	84 db                	test   bl,bl
c0021384:	0f 85 90 00 00 00    	jne    c002141a <ISO9660::readDir(void*, unsigned long, void*, int*)+0x104>
c002138a:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c0021390:	81 e7 ff 07 00 00    	and    edi,0x7ff
c0021396:	29 c7                	sub    edi,eax
c0021398:	89 fb                	mov    ebx,edi
c002139a:	c1 fb 1f             	sar    ebx,0x1f
c002139d:	01 f8                	add    eax,edi
c002139f:	11 da                	adc    edx,ebx
c00213a1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00213a5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00213a9:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c00213ac:	89 56 14             	mov    DWORD PTR [esi+0x14],edx
c00213af:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c00213b2:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c00213b5:	89 04 24             	mov    DWORD PTR [esp],eax
c00213b8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00213bc:	89 d8                	mov    eax,ebx
c00213be:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c00213c1:	ba 00 00 00 00       	mov    edx,0x0
c00213c6:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00213ca:	b8 00 00 00 00       	mov    eax,0x0
c00213cf:	73 0b                	jae    c00213dc <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c00213d1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00213d4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00213d8:	29 f8                	sub    eax,edi
c00213da:	19 da                	sbb    edx,ebx
c00213dc:	89 d3                	mov    ebx,edx
c00213de:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c00213e1:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c00213e4:	09 c3                	or     ebx,eax
c00213e6:	0f 84 59 ff ff ff    	je     c0021345 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c00213ec:	55                   	push   ebp
c00213ed:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c00213f1:	50                   	push   eax
c00213f2:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c00213f9:	53                   	push   ebx
c00213fa:	8b 06                	mov    eax,DWORD PTR [esi]
c00213fc:	c1 e0 0b             	shl    eax,0xb
c00213ff:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c0021403:	c1 e8 0b             	shr    eax,0xb
c0021406:	50                   	push   eax
c0021407:	e8 53 fc ff ff       	call   c002105f <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c002140c:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c002140f:	83 c4 10             	add    esp,0x10
c0021412:	25 ff 07 00 00       	and    eax,0x7ff
c0021417:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c002141a:	57                   	push   edi
c002141b:	6a 28                	push   0x28
c002141d:	6a 00                	push   0x0
c002141f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021423:	50                   	push   eax
c0021424:	e8 4f f3 fd ff       	call   c0000778 <memset>
c0021429:	31 d2                	xor    edx,edx
c002142b:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c002142e:	81 e7 ff 07 00 00    	and    edi,0x7ff
c0021434:	89 f8                	mov    eax,edi
c0021436:	83 c0 21             	add    eax,0x21
c0021439:	83 d2 00             	adc    edx,0x0
c002143c:	89 c7                	mov    edi,eax
c002143e:	89 d5                	mov    ebp,edx
c0021440:	83 c4 10             	add    esp,0x10
c0021443:	31 c9                	xor    ecx,ecx
c0021445:	8a 84 3c 50 01 00 00 	mov    al,BYTE PTR [esp+edi*1+0x150]
c002144c:	83 f9 28             	cmp    ecx,0x28
c002144f:	88 04 24             	mov    BYTE PTR [esp],al
c0021452:	0f 94 c2             	sete   dl
c0021455:	88 d0                	mov    al,dl
c0021457:	ba ff 07 00 00       	mov    edx,0x7ff
c002145c:	39 fa                	cmp    edx,edi
c002145e:	ba 00 00 00 00       	mov    edx,0x0
c0021463:	19 ea                	sbb    edx,ebp
c0021465:	0f 92 c2             	setb   dl
c0021468:	09 c2                	or     edx,eax
c002146a:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c002146e:	0f 94 c0             	sete   al
c0021471:	08 d0                	or     al,dl
c0021473:	75 16                	jne    c002148b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c0021475:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c0021479:	74 10                	je     c002148b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c002147b:	8a 04 24             	mov    al,BYTE PTR [esp]
c002147e:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c0021482:	41                   	inc    ecx
c0021483:	83 c7 01             	add    edi,0x1
c0021486:	83 d5 00             	adc    ebp,0x0
c0021489:	eb ba                	jmp    c0021445 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x12f>
c002148b:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c0021492:	83 ec 0c             	sub    esp,0xc
c0021495:	8d 7c 24 24          	lea    edi,[esp+0x24]
c0021499:	57                   	push   edi
c002149a:	e8 f5 f2 fd ff       	call   c0000794 <strlen>
c002149f:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c00214a7:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00214ab:	8d 8c 24 60 09 00 00 	lea    ecx,[esp+0x960]
c00214b2:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00214b5:	5a                   	pop    edx
c00214b6:	25 ff 07 00 00       	and    eax,0x7ff
c00214bb:	01 c8                	add    eax,ecx
c00214bd:	59                   	pop    ecx
c00214be:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c00214c4:	83 e0 02             	and    eax,0x2
c00214c7:	3c 01                	cmp    al,0x1
c00214c9:	19 c0                	sbb    eax,eax
c00214cb:	83 c0 02             	add    eax,0x2
c00214ce:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00214d2:	57                   	push   edi
c00214d3:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c00214d7:	50                   	push   eax
c00214d8:	e8 57 f3 fd ff       	call   c0000834 <strcpy>
c00214dd:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c00214e1:	83 c4 10             	add    esp,0x10
c00214e4:	84 c0                	test   al,al
c00214e6:	75 21                	jne    c0021509 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1f3>
c00214e8:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c00214f0:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c00214f8:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0021500:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c0021507:	eb 28                	jmp    c0021531 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c0021509:	fe c8                	dec    al
c002150b:	75 24                	jne    c0021531 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c002150d:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c0021515:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c002151d:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0021525:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c002152c:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c0021531:	0f b6 fb             	movzx  edi,bl
c0021534:	31 db                	xor    ebx,ebx
c0021536:	50                   	push   eax
c0021537:	ff b4 24 7c 09 00 00 	push   DWORD PTR [esp+0x97c]
c002153e:	8d 44 24 48          	lea    eax,[esp+0x48]
c0021542:	50                   	push   eax
c0021543:	ff b4 24 88 09 00 00 	push   DWORD PTR [esp+0x988]
c002154a:	e8 f5 f1 fd ff       	call   c0000744 <memcpy>
c002154f:	8b 84 24 90 09 00 00 	mov    eax,DWORD PTR [esp+0x990]
c0021556:	89 f9                	mov    ecx,edi
c0021558:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c002155e:	01 7e 10             	add    DWORD PTR [esi+0x10],edi
c0021561:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0021564:	11 5e 14             	adc    DWORD PTR [esi+0x14],ebx
c0021567:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c002156a:	83 c4 10             	add    esp,0x10
c002156d:	39 c7                	cmp    edi,eax
c002156f:	89 df                	mov    edi,ebx
c0021571:	19 d7                	sbb    edi,edx
c0021573:	72 10                	jb     c0021585 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c0021575:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c002157c:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c0021583:	eb 0a                	jmp    c002158f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x279>
c0021585:	29 c8                	sub    eax,ecx
c0021587:	19 da                	sbb    edx,ebx
c0021589:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c002158c:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c002158f:	31 c0                	xor    eax,eax
c0021591:	eb 05                	jmp    c0021598 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c0021593:	b8 04 00 00 00       	mov    eax,0x4
c0021598:	81 c4 5c 09 00 00    	add    esp,0x95c
c002159e:	5b                   	pop    ebx
c002159f:	5e                   	pop    esi
c00215a0:	5f                   	pop    edi
c00215a1:	5d                   	pop    ebp
c00215a2:	c3                   	ret    

c00215a3 <readRoot(unsigned int*, unsigned int*, char)>:
c00215a3:	81 ec 40 08 00 00    	sub    esp,0x840
c00215a9:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c00215b1:	50                   	push   eax
c00215b2:	8d 44 24 38          	lea    eax,[esp+0x38]
c00215b6:	50                   	push   eax
c00215b7:	6a 10                	push   0x10
c00215b9:	e8 a1 fa ff ff       	call   c002105f <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00215be:	83 c4 0c             	add    esp,0xc
c00215c1:	6a 22                	push   0x22
c00215c3:	8d 84 24 d4 00 00 00 	lea    eax,[esp+0xd4]
c00215ca:	50                   	push   eax
c00215cb:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c00215cf:	50                   	push   eax
c00215d0:	e8 6f f1 fd ff       	call   c0000744 <memcpy>
c00215d5:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c00215dc:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00215e0:	89 10                	mov    DWORD PTR [eax],edx
c00215e2:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c00215e9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00215ed:	89 10                	mov    DWORD PTR [eax],edx
c00215ef:	b0 01                	mov    al,0x1
c00215f1:	81 c4 4c 08 00 00    	add    esp,0x84c
c00215f7:	c3                   	ret    

c00215f8 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c00215f8:	55                   	push   ebp
c00215f9:	57                   	push   edi
c00215fa:	56                   	push   esi
c00215fb:	53                   	push   ebx
c00215fc:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021602:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c0021609:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0021610:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0021614:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c0021618:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c002161c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0021620:	75 03                	jne    c0021625 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0021622:	83 c3 02             	add    ebx,0x2
c0021625:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c0021628:	75 03                	jne    c002162d <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c002162a:	43                   	inc    ebx
c002162b:	eb f8                	jmp    c0021625 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c002162d:	51                   	push   ecx
c002162e:	68 00 01 00 00       	push   0x100
c0021633:	6a 00                	push   0x0
c0021635:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021639:	50                   	push   eax
c002163a:	e8 39 f1 fd ff       	call   c0000778 <memset>
c002163f:	83 c4 10             	add    esp,0x10
c0021642:	31 d2                	xor    edx,edx
c0021644:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0021647:	84 c0                	test   al,al
c0021649:	74 21                	je     c002166c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c002164b:	3c 2f                	cmp    al,0x2f
c002164d:	75 0b                	jne    c002165a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c002164f:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c0021653:	bd 01 00 00 00       	mov    ebp,0x1
c0021658:	eb 14                	jmp    c002166e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c002165a:	8d 48 9f             	lea    ecx,[eax-0x61]
c002165d:	80 f9 19             	cmp    cl,0x19
c0021660:	77 03                	ja     c0021665 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c0021662:	83 e8 20             	sub    eax,0x20
c0021665:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c0021669:	42                   	inc    edx
c002166a:	eb d8                	jmp    c0021644 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c002166c:	31 ed                	xor    ebp,ebp
c002166e:	83 ec 0c             	sub    esp,0xc
c0021671:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0021678:	e8 c9 e1 fe ff       	call   c000f846 <malloc>
c002167d:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c0021684:	89 c6                	mov    esi,eax
c0021686:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c002168c:	c1 ef 0b             	shr    edi,0xb
c002168f:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c0021696:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c002169a:	83 c4 10             	add    esp,0x10
c002169d:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c00216a2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00216a6:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c00216ad:	74 28                	je     c00216d7 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c00216af:	52                   	push   edx
c00216b0:	57                   	push   edi
c00216b1:	50                   	push   eax
c00216b2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00216b6:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c00216bd:	e8 9d f9 ff ff       	call   c002105f <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00216c2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00216c6:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c00216cd:	05 00 08 00 00       	add    eax,0x800
c00216d2:	83 c4 10             	add    esp,0x10
c00216d5:	eb cb                	jmp    c00216a2 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c00216d7:	83 ec 0c             	sub    esp,0xc
c00216da:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c00216de:	57                   	push   edi
c00216df:	e8 b0 f0 fd ff       	call   c0000794 <strlen>
c00216e4:	50                   	push   eax
c00216e5:	57                   	push   edi
c00216e6:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c00216ed:	56                   	push   esi
c00216ee:	e8 2a f9 ff ff       	call   c002101d <__memmem(unsigned char*, int, unsigned char*, int)>
c00216f3:	83 c4 20             	add    esp,0x20
c00216f6:	85 c0                	test   eax,eax
c00216f8:	75 13                	jne    c002170d <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c00216fa:	83 ec 0c             	sub    esp,0xc
c00216fd:	56                   	push   esi
c00216fe:	e8 53 e1 fe ff       	call   c000f856 <free>
c0021703:	83 c4 10             	add    esp,0x10
c0021706:	31 c0                	xor    eax,eax
c0021708:	e9 b3 00 00 00       	jmp    c00217c0 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c002170d:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c0021711:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c0021715:	c1 e7 08             	shl    edi,0x8
c0021718:	c1 e2 10             	shl    edx,0x10
c002171b:	09 d7                	or     edi,edx
c002171d:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c0021721:	09 d7                	or     edi,edx
c0021723:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c0021727:	c1 e2 18             	shl    edx,0x18
c002172a:	09 d7                	or     edi,edx
c002172c:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c0021730:	89 d1                	mov    ecx,edx
c0021732:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c0021736:	c1 e1 08             	shl    ecx,0x8
c0021739:	c1 e2 10             	shl    edx,0x10
c002173c:	09 ca                	or     edx,ecx
c002173e:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c0021742:	09 ca                	or     edx,ecx
c0021744:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c0021748:	c1 e1 18             	shl    ecx,0x18
c002174b:	09 ca                	or     edx,ecx
c002174d:	89 e9                	mov    ecx,ebp
c002174f:	84 c9                	test   cl,cl
c0021751:	74 3c                	je     c002178f <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c0021753:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0021757:	83 ec 0c             	sub    esp,0xc
c002175a:	56                   	push   esi
c002175b:	e8 f6 e0 fe ff       	call   c000f856 <free>
c0021760:	83 c4 0c             	add    esp,0xc
c0021763:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c002176a:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c002176f:	50                   	push   eax
c0021770:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021777:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c002177e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0021782:	52                   	push   edx
c0021783:	57                   	push   edi
c0021784:	53                   	push   ebx
c0021785:	e8 6e fe ff ff       	call   c00215f8 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c002178a:	83 c4 20             	add    esp,0x20
c002178d:	eb 31                	jmp    c00217c0 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c002178f:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c0021792:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c0021799:	d0 e8                	shr    al,1
c002179b:	89 3b                	mov    DWORD PTR [ebx],edi
c002179d:	83 e0 01             	and    eax,0x1
c00217a0:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c00217a7:	83 ec 0c             	sub    esp,0xc
c00217aa:	89 13                	mov    DWORD PTR [ebx],edx
c00217ac:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c00217b3:	89 03                	mov    DWORD PTR [ebx],eax
c00217b5:	56                   	push   esi
c00217b6:	e8 9b e0 fe ff       	call   c000f856 <free>
c00217bb:	83 c4 10             	add    esp,0x10
c00217be:	b0 01                	mov    al,0x1
c00217c0:	81 c4 1c 01 00 00    	add    esp,0x11c
c00217c6:	5b                   	pop    ebx
c00217c7:	5e                   	pop    esi
c00217c8:	5f                   	pop    edi
c00217c9:	5d                   	pop    ebp
c00217ca:	c3                   	ret    

c00217cb <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c00217cb:	55                   	push   ebp
c00217cc:	57                   	push   edi
c00217cd:	56                   	push   esi
c00217ce:	53                   	push   ebx
c00217cf:	83 ec 20             	sub    esp,0x20
c00217d2:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00217d6:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00217da:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c00217de:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00217e6:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00217ee:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c00217f3:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c00217f9:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c00217ff:	57                   	push   edi
c0021800:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021804:	50                   	push   eax
c0021805:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021809:	50                   	push   eax
c002180a:	e8 94 fd ff ff       	call   c00215a3 <readRoot(unsigned int*, unsigned int*, char)>
c002180f:	5a                   	pop    edx
c0021810:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0021814:	e8 7b ef fd ff       	call   c0000794 <strlen>
c0021819:	83 c4 10             	add    esp,0x10
c002181c:	83 f8 03             	cmp    eax,0x3
c002181f:	77 17                	ja     c0021838 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c0021821:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021825:	89 03                	mov    DWORD PTR [ebx],eax
c0021827:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002182b:	89 06                	mov    DWORD PTR [esi],eax
c002182d:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c0021834:	b0 01                	mov    al,0x1
c0021836:	eb 19                	jmp    c0021851 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c0021838:	50                   	push   eax
c0021839:	55                   	push   ebp
c002183a:	57                   	push   edi
c002183b:	56                   	push   esi
c002183c:	53                   	push   ebx
c002183d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021841:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021845:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0021849:	e8 aa fd ff ff       	call   c00215f8 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c002184e:	83 c4 20             	add    esp,0x20
c0021851:	83 c4 1c             	add    esp,0x1c
c0021854:	5b                   	pop    ebx
c0021855:	5e                   	pop    esi
c0021856:	5f                   	pop    edi
c0021857:	5d                   	pop    ebp
c0021858:	c3                   	ret    
c0021859:	90                   	nop

c002185a <ISO9660::open(char const*, void**, FileOpenMode)>:
c002185a:	57                   	push   edi
c002185b:	56                   	push   esi
c002185c:	53                   	push   ebx
c002185d:	83 ec 10             	sub    esp,0x10
c0021860:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0021864:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0021868:	85 ff                	test   edi,edi
c002186a:	0f 84 9d 00 00 00    	je     c002190d <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c0021870:	85 f6                	test   esi,esi
c0021872:	0f 84 95 00 00 00    	je     c002190d <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c0021878:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c002187d:	74 17                	je     c0021896 <ISO9660::open(char const*, void**, FileOpenMode)+0x3c>
c002187f:	83 ec 0c             	sub    esp,0xc
c0021882:	68 4b c0 02 c0       	push   0xc002c04b
c0021887:	e8 89 12 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c002188c:	83 c4 10             	add    esp,0x10
c002188f:	b8 03 00 00 00       	mov    eax,0x3
c0021894:	eb 7c                	jmp    c0021912 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c0021896:	83 ec 0c             	sub    esp,0xc
c0021899:	6a 1c                	push   0x1c
c002189b:	e8 a6 df fe ff       	call   c000f846 <malloc>
c00218a0:	89 07                	mov    DWORD PTR [edi],eax
c00218a2:	89 c3                	mov    ebx,eax
c00218a4:	58                   	pop    eax
c00218a5:	8d 44 24 18          	lea    eax,[esp+0x18]
c00218a9:	50                   	push   eax
c00218aa:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00218ad:	50                   	push   eax
c00218ae:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00218b2:	50                   	push   eax
c00218b3:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00218b7:	50                   	push   eax
c00218b8:	56                   	push   esi
c00218b9:	e8 0d ff ff ff       	call   c00217cb <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c00218be:	83 c4 20             	add    esp,0x20
c00218c1:	84 c0                	test   al,al
c00218c3:	74 07                	je     c00218cc <ISO9660::open(char const*, void**, FileOpenMode)+0x72>
c00218c5:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00218ca:	74 0b                	je     c00218d7 <ISO9660::open(char const*, void**, FileOpenMode)+0x7d>
c00218cc:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c00218d0:	b8 01 00 00 00       	mov    eax,0x1
c00218d5:	eb 3b                	jmp    c0021912 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c00218d7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00218db:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c00218df:	89 03                	mov    DWORD PTR [ebx],eax
c00218e1:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00218e8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00218ec:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00218f3:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00218fa:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00218fd:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0021904:	8a 06                	mov    al,BYTE PTR [esi]
c0021906:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0021909:	31 c0                	xor    eax,eax
c002190b:	eb 05                	jmp    c0021912 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c002190d:	b8 04 00 00 00       	mov    eax,0x4
c0021912:	83 c4 10             	add    esp,0x10
c0021915:	5b                   	pop    ebx
c0021916:	5e                   	pop    esi
c0021917:	5f                   	pop    edi
c0021918:	c3                   	ret    
c0021919:	90                   	nop

c002191a <ISO9660::exists(char const*)>:
c002191a:	83 ec 28             	sub    esp,0x28
c002191d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0021921:	8d 54 24 18          	lea    edx,[esp+0x18]
c0021925:	52                   	push   edx
c0021926:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0021929:	52                   	push   edx
c002192a:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c002192e:	52                   	push   edx
c002192f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0021933:	52                   	push   edx
c0021934:	50                   	push   eax
c0021935:	e8 91 fe ff ff       	call   c00217cb <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c002193a:	83 c4 3c             	add    esp,0x3c
c002193d:	c3                   	ret    

c002193e <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c002193e:	56                   	push   esi
c002193f:	53                   	push   ebx
c0021940:	83 ec 14             	sub    esp,0x14
c0021943:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0021947:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c002194b:	85 db                	test   ebx,ebx
c002194d:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0021951:	0f 94 c2             	sete   dl
c0021954:	85 f6                	test   esi,esi
c0021956:	0f 94 c0             	sete   al
c0021959:	08 c2                	or     dl,al
c002195b:	75 68                	jne    c00219c5 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c002195d:	85 c9                	test   ecx,ecx
c002195f:	74 64                	je     c00219c5 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0021961:	83 ec 0c             	sub    esp,0xc
c0021964:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0021967:	8d 44 24 18          	lea    eax,[esp+0x18]
c002196b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0021971:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021978:	50                   	push   eax
c0021979:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c002197c:	50                   	push   eax
c002197d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021981:	50                   	push   eax
c0021982:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021986:	50                   	push   eax
c0021987:	51                   	push   ecx
c0021988:	e8 3e fe ff ff       	call   c00217cb <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c002198d:	83 c4 20             	add    esp,0x20
c0021990:	ba 01 00 00 00       	mov    edx,0x1
c0021995:	84 c0                	test   al,al
c0021997:	74 31                	je     c00219ca <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0021999:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002199d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00219a4:	89 03                	mov    DWORD PTR [ebx],eax
c00219a6:	ba 00 00 00 00       	mov    edx,0x0
c00219ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00219af:	85 c0                	test   eax,eax
c00219b1:	0f 95 06             	setne  BYTE PTR [esi]
c00219b4:	74 14                	je     c00219ca <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c00219b6:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00219bc:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00219c3:	eb 05                	jmp    c00219ca <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c00219c5:	ba 04 00 00 00       	mov    edx,0x4
c00219ca:	83 c4 14             	add    esp,0x14
c00219cd:	89 d0                	mov    eax,edx
c00219cf:	5b                   	pop    ebx
c00219d0:	5e                   	pop    esi
c00219d1:	c3                   	ret    

c00219d2 <ISO9660::openDir(char const*, void**)>:
c00219d2:	57                   	push   edi
c00219d3:	56                   	push   esi
c00219d4:	53                   	push   ebx
c00219d5:	83 ec 10             	sub    esp,0x10
c00219d8:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00219dc:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00219e0:	85 ff                	test   edi,edi
c00219e2:	0f 84 95 00 00 00    	je     c0021a7d <ISO9660::openDir(char const*, void**)+0xab>
c00219e8:	85 f6                	test   esi,esi
c00219ea:	0f 84 8d 00 00 00    	je     c0021a7d <ISO9660::openDir(char const*, void**)+0xab>
c00219f0:	83 ec 0c             	sub    esp,0xc
c00219f3:	6a 1c                	push   0x1c
c00219f5:	e8 4c de fe ff       	call   c000f846 <malloc>
c00219fa:	89 07                	mov    DWORD PTR [edi],eax
c00219fc:	89 c3                	mov    ebx,eax
c00219fe:	59                   	pop    ecx
c00219ff:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021a03:	50                   	push   eax
c0021a04:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0021a07:	50                   	push   eax
c0021a08:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021a0c:	50                   	push   eax
c0021a0d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021a11:	50                   	push   eax
c0021a12:	56                   	push   esi
c0021a13:	e8 b3 fd ff ff       	call   c00217cb <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021a18:	83 c4 20             	add    esp,0x20
c0021a1b:	84 c0                	test   al,al
c0021a1d:	74 07                	je     c0021a26 <ISO9660::openDir(char const*, void**)+0x54>
c0021a1f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0021a24:	75 21                	jne    c0021a47 <ISO9660::openDir(char const*, void**)+0x75>
c0021a26:	0f b6 c0             	movzx  eax,al
c0021a29:	52                   	push   edx
c0021a2a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0021a2e:	50                   	push   eax
c0021a2f:	68 71 c0 02 c0       	push   0xc002c071
c0021a34:	e8 dc 10 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c0021a39:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0021a3d:	83 c4 10             	add    esp,0x10
c0021a40:	b8 01 00 00 00       	mov    eax,0x1
c0021a45:	eb 3b                	jmp    c0021a82 <ISO9660::openDir(char const*, void**)+0xb0>
c0021a47:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021a4b:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0021a4f:	89 03                	mov    DWORD PTR [ebx],eax
c0021a51:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0021a58:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021a5c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0021a63:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021a6a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0021a6d:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0021a74:	8a 06                	mov    al,BYTE PTR [esi]
c0021a76:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0021a79:	31 c0                	xor    eax,eax
c0021a7b:	eb 05                	jmp    c0021a82 <ISO9660::openDir(char const*, void**)+0xb0>
c0021a7d:	b8 04 00 00 00       	mov    eax,0x4
c0021a82:	83 c4 10             	add    esp,0x10
c0021a85:	5b                   	pop    ebx
c0021a86:	5e                   	pop    esi
c0021a87:	5f                   	pop    edi
c0021a88:	c3                   	ret    
c0021a89:	90                   	nop

c0021a8a <ISO9660::ISO9660()>:
c0021a8a:	83 ec 0c             	sub    esp,0xc
c0021a8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a91:	83 ec 0c             	sub    esp,0xc
c0021a94:	50                   	push   eax
c0021a95:	e8 80 13 ff ff       	call   c0012e1a <Filesystem::Filesystem()>
c0021a9a:	83 c4 10             	add    esp,0x10
c0021a9d:	ba 94 c0 02 c0       	mov    edx,0xc002c094
c0021aa2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021aa6:	89 10                	mov    DWORD PTR [eax],edx
c0021aa8:	90                   	nop
c0021aa9:	83 c4 0c             	add    esp,0xc
c0021aac:	c3                   	ret    
c0021aad:	90                   	nop

c0021aae <SoundChannel::~SoundChannel()>:
c0021aae:	83 ec 0c             	sub    esp,0xc
c0021ab1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ab5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0021ab8:	83 ec 0c             	sub    esp,0xc
c0021abb:	50                   	push   eax
c0021abc:	e8 95 dd fe ff       	call   c000f856 <free>
c0021ac1:	83 c4 10             	add    esp,0x10
c0021ac4:	90                   	nop
c0021ac5:	83 c4 0c             	add    esp,0xc
c0021ac8:	c3                   	ret    
c0021ac9:	90                   	nop

c0021aca <SoundChannel::setSpeed(float)>:
c0021aca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021ace:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021ad2:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0021ad5:	c3                   	ret    

c0021ad6 <SoundChannel::getSpeed()>:
c0021ad6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021ada:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0021add:	c3                   	ret    

c0021ade <SoundChannel::setVolume(int)>:
c0021ade:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021ae2:	83 f8 64             	cmp    eax,0x64
c0021ae5:	7e 05                	jle    c0021aec <SoundChannel::setVolume(int)+0xe>
c0021ae7:	b8 64 00 00 00       	mov    eax,0x64
c0021aec:	85 c0                	test   eax,eax
c0021aee:	79 02                	jns    c0021af2 <SoundChannel::setVolume(int)+0x14>
c0021af0:	31 c0                	xor    eax,eax
c0021af2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021af6:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c0021af9:	c3                   	ret    

c0021afa <SoundChannel::getVolume()>:
c0021afa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021afe:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0021b01:	c3                   	ret    

c0021b02 <SoundChannel::pause()>:
c0021b02:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021b06:	c6 40 20 01          	mov    BYTE PTR [eax+0x20],0x1
c0021b0a:	c3                   	ret    
c0021b0b:	90                   	nop

c0021b0c <SoundChannel::SoundChannel(int, int, int, int)>:
c0021b0c:	83 ec 1c             	sub    esp,0x1c
c0021b0f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021b13:	e8 ea ff ff ff       	call   c0021b02 <SoundChannel::pause()>
c0021b18:	83 c4 04             	add    esp,0x4
c0021b1b:	6a 50                	push   0x50
c0021b1d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0021b21:	e8 b8 ff ff ff       	call   c0021ade <SoundChannel::setVolume(int)>
c0021b26:	83 c4 08             	add    esp,0x8
c0021b29:	a1 0c c1 02 c0       	mov    eax,ds:0xc002c10c
c0021b2e:	50                   	push   eax
c0021b2f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0021b33:	e8 92 ff ff ff       	call   c0021aca <SoundChannel::setSpeed(float)>
c0021b38:	83 c4 08             	add    esp,0x8
c0021b3b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021b3f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0021b43:	89 10                	mov    DWORD PTR [eax],edx
c0021b45:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021b49:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0021b4d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0021b50:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021b54:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0021b58:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021b5b:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c0021b60:	75 23                	jne    c0021b85 <SoundChannel::SoundChannel(int, int, int, int)+0x79>
c0021b62:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021b66:	8b 10                	mov    edx,DWORD PTR [eax]
c0021b68:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021b6c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021b6f:	0f af c2             	imul   eax,edx
c0021b72:	85 c0                	test   eax,eax
c0021b74:	79 03                	jns    c0021b79 <SoundChannel::SoundChannel(int, int, int, int)+0x6d>
c0021b76:	83 c0 03             	add    eax,0x3
c0021b79:	c1 f8 02             	sar    eax,0x2
c0021b7c:	05 a0 0f 00 00       	add    eax,0xfa0
c0021b81:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0021b85:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021b89:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0021b8d:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0021b90:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021b94:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0021b9b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021b9f:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0021ba6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021baa:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0021bad:	c1 e0 02             	shl    eax,0x2
c0021bb0:	83 ec 0c             	sub    esp,0xc
c0021bb3:	50                   	push   eax
c0021bb4:	e8 8d dc fe ff       	call   c000f846 <malloc>
c0021bb9:	83 c4 10             	add    esp,0x10
c0021bbc:	89 c2                	mov    edx,eax
c0021bbe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021bc2:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0021bc5:	83 ec 04             	sub    esp,0x4
c0021bc8:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021bcc:	50                   	push   eax
c0021bcd:	6a 01                	push   0x1
c0021bcf:	6a 04                	push   0x4
c0021bd1:	e8 c9 6f fe ff       	call   c0008b9f <src_new>
c0021bd6:	83 c4 10             	add    esp,0x10
c0021bd9:	89 c2                	mov    edx,eax
c0021bdb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021bdf:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0021be2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021be6:	85 c0                	test   eax,eax
c0021be8:	74 10                	je     c0021bfa <SoundChannel::SoundChannel(int, int, int, int)+0xee>
c0021bea:	83 ec 0c             	sub    esp,0xc
c0021bed:	68 f0 c0 02 c0       	push   0xc002c0f0
c0021bf2:	e8 38 84 ff ff       	call   c001a02f <Krnl::panic(char const*)>
c0021bf7:	83 c4 10             	add    esp,0x10
c0021bfa:	a0 c0 1e 03 c0       	mov    al,ds:0xc0031ec0
c0021bff:	83 f0 01             	xor    eax,0x1
c0021c02:	84 c0                	test   al,al
c0021c04:	74 57                	je     c0021c5d <SoundChannel::SoundChannel(int, int, int, int)+0x151>
c0021c06:	a1 10 c1 02 c0       	mov    eax,ds:0xc002c110
c0021c0b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021c0f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021c17:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0021c1f:	7f 35                	jg     c0021c56 <SoundChannel::SoundChannel(int, int, int, int)+0x14a>
c0021c21:	83 ec 0c             	sub    esp,0xc
c0021c24:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0021c28:	e8 9a 4f 00 00       	call   c0026bc7 <__floatsisf>
c0021c2d:	83 c4 10             	add    esp,0x10
c0021c30:	8b 15 10 c1 02 c0    	mov    edx,DWORD PTR ds:0xc002c110
c0021c36:	83 ec 08             	sub    esp,0x8
c0021c39:	52                   	push   edx
c0021c3a:	50                   	push   eax
c0021c3b:	e8 99 4b 00 00       	call   c00267d9 <__mulsf3>
c0021c40:	83 c4 10             	add    esp,0x10
c0021c43:	89 c2                	mov    edx,eax
c0021c45:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021c49:	89 14 85 c0 1a 03 c0 	mov    DWORD PTR [eax*4-0x3ffce540],edx
c0021c50:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0021c54:	eb c1                	jmp    c0021c17 <SoundChannel::SoundChannel(int, int, int, int)+0x10b>
c0021c56:	c6 05 c0 1e 03 c0 01 	mov    BYTE PTR ds:0xc0031ec0,0x1
c0021c5d:	90                   	nop
c0021c5e:	83 c4 1c             	add    esp,0x1c
c0021c61:	c3                   	ret    

c0021c62 <SoundChannel::play()>:
c0021c62:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021c66:	c6 40 20 00          	mov    BYTE PTR [eax+0x20],0x0
c0021c6a:	c3                   	ret    
c0021c6b:	90                   	nop

c0021c6c <SoundChannel::paused()>:
c0021c6c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021c70:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c0021c73:	c3                   	ret    

c0021c74 <SoundChannel::getSampleRate()>:
c0021c74:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021c78:	8b 00                	mov    eax,DWORD PTR [eax]
c0021c7a:	c3                   	ret    
c0021c7b:	90                   	nop

c0021c7c <SoundChannel::getBits()>:
c0021c7c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021c80:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021c83:	c3                   	ret    

c0021c84 <SoundChannel::getBufferUsed()>:
c0021c84:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021c88:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0021c8b:	c3                   	ret    

c0021c8c <SoundChannel::getBufferSize()>:
c0021c8c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021c90:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0021c93:	c3                   	ret    

c0021c94 <SoundChannel::unbuffer(float*, int, int)>:
c0021c94:	56                   	push   esi
c0021c95:	53                   	push   ebx
c0021c96:	83 ec 40             	sub    esp,0x40
c0021c99:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0021c9d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0021ca0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021ca4:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0021ca7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0021cab:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0021caf:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0021cb3:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0021cb7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0021cbb:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0021cbf:	e8 03 4f 00 00       	call   c0026bc7 <__floatsisf>
c0021cc4:	5a                   	pop    edx
c0021cc5:	89 c6                	mov    esi,eax
c0021cc7:	ff 33                	push   DWORD PTR [ebx]
c0021cc9:	e8 f9 4e 00 00       	call   c0026bc7 <__floatsisf>
c0021cce:	59                   	pop    ecx
c0021ccf:	5a                   	pop    edx
c0021cd0:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0021cd3:	50                   	push   eax
c0021cd4:	e8 00 4b 00 00       	call   c00267d9 <__mulsf3>
c0021cd9:	59                   	pop    ecx
c0021cda:	5a                   	pop    edx
c0021cdb:	50                   	push   eax
c0021cdc:	56                   	push   esi
c0021cdd:	e8 ba 4c 00 00       	call   c002699c <__divsf3>
c0021ce2:	89 04 24             	mov    DWORD PTR [esp],eax
c0021ce5:	e8 ad 61 00 00       	call   c0027e97 <__extendsfdf2>
c0021cea:	59                   	pop    ecx
c0021ceb:	5e                   	pop    esi
c0021cec:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0021cf0:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0021cf4:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0021cfc:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021d00:	50                   	push   eax
c0021d01:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0021d04:	e8 8b 6a fe ff       	call   c0008794 <src_process>
c0021d09:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0021d0d:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0021d10:	83 c4 0c             	add    esp,0xc
c0021d13:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0021d16:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c0021d19:	29 d0                	sub    eax,edx
c0021d1b:	c1 e0 02             	shl    eax,0x2
c0021d1e:	50                   	push   eax
c0021d1f:	8d 04 91             	lea    eax,[ecx+edx*4]
c0021d22:	50                   	push   eax
c0021d23:	51                   	push   ecx
c0021d24:	e8 53 e9 fd ff       	call   c000067c <memmove>
c0021d29:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0021d2d:	83 c4 44             	add    esp,0x44
c0021d30:	5b                   	pop    ebx
c0021d31:	5e                   	pop    esi
c0021d32:	c3                   	ret    
c0021d33:	90                   	nop

c0021d34 <SoundChannel::buffer8(unsigned char*, int)>:
c0021d34:	55                   	push   ebp
c0021d35:	57                   	push   edi
c0021d36:	56                   	push   esi
c0021d37:	53                   	push   ebx
c0021d38:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021d3c:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0021d40:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0021d43:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0021d47:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0021d4a:	74 7a                	je     c0021dc6 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0021d4c:	85 ff                	test   edi,edi
c0021d4e:	7e 76                	jle    c0021dc6 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0021d50:	0f b6 5d 00          	movzx  ebx,BYTE PTR [ebp+0x0]
c0021d54:	8d 70 01             	lea    esi,[eax+0x1]
c0021d57:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0021d5a:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0021d5d:	8b 1c 9d c0 1a 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffce540]
c0021d64:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0021d67:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0021d6a:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0021d6d:	74 5e                	je     c0021dcd <SoundChannel::buffer8(unsigned char*, int)+0x99>
c0021d6f:	83 ff 01             	cmp    edi,0x1
c0021d72:	74 4b                	je     c0021dbf <SoundChannel::buffer8(unsigned char*, int)+0x8b>
c0021d74:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0021d78:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0021d7b:	8d 70 01             	lea    esi,[eax+0x1]
c0021d7e:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0021d81:	8b 1c 9d c0 1a 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffce540]
c0021d88:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0021d8b:	b8 02 00 00 00       	mov    eax,0x2
c0021d90:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0021d93:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0021d96:	75 23                	jne    c0021dbb <SoundChannel::buffer8(unsigned char*, int)+0x87>
c0021d98:	eb 27                	jmp    c0021dc1 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0021d9a:	0f b6 5c 05 00       	movzx  ebx,BYTE PTR [ebp+eax*1+0x0]
c0021d9f:	8d 71 01             	lea    esi,[ecx+0x1]
c0021da2:	40                   	inc    eax
c0021da3:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0021da6:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c0021da9:	8b 1c 9d c0 1a 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffce540]
c0021db0:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c0021db3:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0021db6:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0021db9:	74 06                	je     c0021dc1 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0021dbb:	39 c7                	cmp    edi,eax
c0021dbd:	75 db                	jne    c0021d9a <SoundChannel::buffer8(unsigned char*, int)+0x66>
c0021dbf:	89 f8                	mov    eax,edi
c0021dc1:	5b                   	pop    ebx
c0021dc2:	5e                   	pop    esi
c0021dc3:	5f                   	pop    edi
c0021dc4:	5d                   	pop    ebp
c0021dc5:	c3                   	ret    
c0021dc6:	5b                   	pop    ebx
c0021dc7:	31 c0                	xor    eax,eax
c0021dc9:	5e                   	pop    esi
c0021dca:	5f                   	pop    edi
c0021dcb:	5d                   	pop    ebp
c0021dcc:	c3                   	ret    
c0021dcd:	b8 01 00 00 00       	mov    eax,0x1
c0021dd2:	eb ed                	jmp    c0021dc1 <SoundChannel::buffer8(unsigned char*, int)+0x8d>

c0021dd4 <SoundDevice::SoundDevice(char const*)>:
c0021dd4:	83 ec 1c             	sub    esp,0x1c
c0021dd7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021ddb:	83 ec 08             	sub    esp,0x8
c0021dde:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0021de2:	50                   	push   eax
c0021de3:	e8 44 23 ff ff       	call   c001412c <Device::Device(char const*)>
c0021de8:	83 c4 10             	add    esp,0x10
c0021deb:	ba 1c c1 02 c0       	mov    edx,0xc002c11c
c0021df0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021df4:	89 10                	mov    DWORD PTR [eax],edx
c0021df6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021dfa:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c0021e04:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021e08:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0021e12:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021e1a:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0021e1f:	7f 19                	jg     c0021e3a <SoundDevice::SoundDevice(char const*)+0x66>
c0021e21:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021e25:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021e29:	83 c2 54             	add    edx,0x54
c0021e2c:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c0021e34:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0021e38:	eb e0                	jmp    c0021e1a <SoundDevice::SoundDevice(char const*)+0x46>
c0021e3a:	90                   	nop
c0021e3b:	83 c4 1c             	add    esp,0x1c
c0021e3e:	c3                   	ret    
c0021e3f:	90                   	nop

c0021e40 <SoundDevice::~SoundDevice()>:
c0021e40:	53                   	push   ebx
c0021e41:	83 ec 18             	sub    esp,0x18
c0021e44:	ba 1c c1 02 c0       	mov    edx,0xc002c11c
c0021e49:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021e4d:	89 10                	mov    DWORD PTR [eax],edx
c0021e4f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021e57:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0021e5c:	7f 46                	jg     c0021ea4 <SoundDevice::~SoundDevice()+0x64>
c0021e5e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021e62:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021e66:	83 c2 54             	add    edx,0x54
c0021e69:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c0021e6d:	85 c0                	test   eax,eax
c0021e6f:	74 2d                	je     c0021e9e <SoundDevice::~SoundDevice()+0x5e>
c0021e71:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021e75:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021e79:	83 c2 54             	add    edx,0x54
c0021e7c:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c0021e80:	85 db                	test   ebx,ebx
c0021e82:	74 1a                	je     c0021e9e <SoundDevice::~SoundDevice()+0x5e>
c0021e84:	83 ec 0c             	sub    esp,0xc
c0021e87:	53                   	push   ebx
c0021e88:	e8 21 fc ff ff       	call   c0021aae <SoundChannel::~SoundChannel()>
c0021e8d:	83 c4 10             	add    esp,0x10
c0021e90:	83 ec 08             	sub    esp,0x8
c0021e93:	6a 2c                	push   0x2c
c0021e95:	53                   	push   ebx
c0021e96:	e8 9a 0b ff ff       	call   c0012a35 <operator delete(void*, unsigned long)>
c0021e9b:	83 c4 10             	add    esp,0x10
c0021e9e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0021ea2:	eb b3                	jmp    c0021e57 <SoundDevice::~SoundDevice()+0x17>
c0021ea4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021ea8:	83 ec 0c             	sub    esp,0xc
c0021eab:	50                   	push   eax
c0021eac:	e8 5d 1f ff ff       	call   c0013e0e <Device::~Device()>
c0021eb1:	83 c4 10             	add    esp,0x10
c0021eb4:	90                   	nop
c0021eb5:	83 c4 18             	add    esp,0x18
c0021eb8:	5b                   	pop    ebx
c0021eb9:	c3                   	ret    

c0021eba <SoundDevice::~SoundDevice()>:
c0021eba:	83 ec 0c             	sub    esp,0xc
c0021ebd:	83 ec 0c             	sub    esp,0xc
c0021ec0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021ec4:	e8 77 ff ff ff       	call   c0021e40 <SoundDevice::~SoundDevice()>
c0021ec9:	83 c4 10             	add    esp,0x10
c0021ecc:	83 ec 08             	sub    esp,0x8
c0021ecf:	68 e4 01 00 00       	push   0x1e4
c0021ed4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021ed8:	e8 58 0b ff ff       	call   c0012a35 <operator delete(void*, unsigned long)>
c0021edd:	83 c4 10             	add    esp,0x10
c0021ee0:	83 c4 0c             	add    esp,0xc
c0021ee3:	c3                   	ret    

c0021ee4 <SoundDevice::getFreeChannelNum()>:
c0021ee4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021ee8:	31 c0                	xor    eax,eax
c0021eea:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c0021ef2:	74 09                	je     c0021efd <SoundDevice::getFreeChannelNum()+0x19>
c0021ef4:	40                   	inc    eax
c0021ef5:	83 f8 20             	cmp    eax,0x20
c0021ef8:	75 f0                	jne    c0021eea <SoundDevice::getFreeChannelNum()+0x6>
c0021efa:	83 c8 ff             	or     eax,0xffffffff
c0021efd:	c3                   	ret    

c0021efe <SoundDevice::addChannel(SoundChannel*)>:
c0021efe:	56                   	push   esi
c0021eff:	53                   	push   ebx
c0021f00:	51                   	push   ecx
c0021f01:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021f05:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0021f09:	53                   	push   ebx
c0021f0a:	e8 d5 ff ff ff       	call   c0021ee4 <SoundDevice::getFreeChannelNum()>
c0021f0f:	5a                   	pop    edx
c0021f10:	83 f8 ff             	cmp    eax,0xffffffff
c0021f13:	74 51                	je     c0021f66 <SoundDevice::addChannel(SoundChannel*)+0x68>
c0021f15:	85 f6                	test   esi,esi
c0021f17:	74 4d                	je     c0021f66 <SoundDevice::addChannel(SoundChannel*)+0x68>
c0021f19:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c0021f20:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c0021f27:	75 30                	jne    c0021f59 <SoundDevice::addChannel(SoundChannel*)+0x5b>
c0021f29:	83 ec 0c             	sub    esp,0xc
c0021f2c:	56                   	push   esi
c0021f2d:	e8 42 fd ff ff       	call   c0021c74 <SoundChannel::getSampleRate()>
c0021f32:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c0021f38:	89 34 24             	mov    DWORD PTR [esp],esi
c0021f3b:	e8 3c fd ff ff       	call   c0021c7c <SoundChannel::getBits()>
c0021f40:	83 c4 0c             	add    esp,0xc
c0021f43:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c0021f49:	8b 13                	mov    edx,DWORD PTR [ebx]
c0021f4b:	50                   	push   eax
c0021f4c:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c0021f52:	53                   	push   ebx
c0021f53:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0021f56:	83 c4 10             	add    esp,0x10
c0021f59:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c0021f5f:	b8 01 00 00 00       	mov    eax,0x1
c0021f64:	eb 03                	jmp    c0021f69 <SoundDevice::addChannel(SoundChannel*)+0x6b>
c0021f66:	83 c8 ff             	or     eax,0xffffffff
c0021f69:	5a                   	pop    edx
c0021f6a:	5b                   	pop    ebx
c0021f6b:	5e                   	pop    esi
c0021f6c:	c3                   	ret    
c0021f6d:	90                   	nop

c0021f6e <SoundDevice::removeChannel(int)>:
c0021f6e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021f72:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021f76:	83 fa 1f             	cmp    edx,0x1f
c0021f79:	77 23                	ja     c0021f9e <SoundDevice::removeChannel(int)+0x30>
c0021f7b:	8d 14 90             	lea    edx,[eax+edx*4]
c0021f7e:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c0021f85:	74 17                	je     c0021f9e <SoundDevice::removeChannel(int)+0x30>
c0021f87:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c0021f91:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c0021f97:	75 05                	jne    c0021f9e <SoundDevice::removeChannel(int)+0x30>
c0021f99:	8b 00                	mov    eax,DWORD PTR [eax]
c0021f9b:	ff 60 2c             	jmp    DWORD PTR [eax+0x2c]
c0021f9e:	c3                   	ret    
c0021f9f:	90                   	nop

c0021fa0 <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c0021fa0:	57                   	push   edi
c0021fa1:	56                   	push   esi
c0021fa2:	53                   	push   ebx
c0021fa3:	31 db                	xor    ebx,ebx
c0021fa5:	83 ec 10             	sub    esp,0x10
c0021fa8:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0021fac:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c0021fb0:	0f 8d cb 00 00 00    	jge    c0022081 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xe1>
c0021fb6:	83 ec 0c             	sub    esp,0xc
c0021fb9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0021fbd:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0021fc0:	e8 d2 5e 00 00       	call   c0027e97 <__extendsfdf2>
c0021fc5:	83 c4 10             	add    esp,0x10
c0021fc8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021fcc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021fd0:	68 00 00 f0 3f       	push   0x3ff00000
c0021fd5:	6a 00                	push   0x0
c0021fd7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021fdb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021fdf:	e8 3f 4e 00 00       	call   c0026e23 <__adddf3>
c0021fe4:	83 c4 10             	add    esp,0x10
c0021fe7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021feb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021fef:	68 00 00 e0 3f       	push   0x3fe00000
c0021ff4:	6a 00                	push   0x0
c0021ff6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021ffa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021ffe:	e8 9d 54 00 00       	call   c00274a0 <__muldf3>
c0022003:	83 c4 10             	add    esp,0x10
c0022006:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002200a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002200e:	68 00 00 60 40       	push   0x40600000
c0022013:	6a 00                	push   0x0
c0022015:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022019:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002201d:	e8 7e 54 00 00       	call   c00274a0 <__muldf3>
c0022022:	59                   	pop    ecx
c0022023:	5f                   	pop    edi
c0022024:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0022028:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c002202c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022030:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022034:	e8 3a 5d 00 00       	call   c0027d73 <__truncdfsf2>
c0022039:	5a                   	pop    edx
c002203a:	89 c7                	mov    edi,eax
c002203c:	59                   	pop    ecx
c002203d:	68 00 00 fe 42       	push   0x42fe0000
c0022042:	50                   	push   eax
c0022043:	e8 d5 4d 00 00       	call   c0026e1d <__gesf2>
c0022048:	83 c4 10             	add    esp,0x10
c002204b:	85 c0                	test   eax,eax
c002204d:	78 06                	js     c0022055 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb5>
c002204f:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c0022053:	eb 26                	jmp    c002207b <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c0022055:	50                   	push   eax
c0022056:	50                   	push   eax
c0022057:	6a 00                	push   0x0
c0022059:	57                   	push   edi
c002205a:	e8 c2 4d 00 00       	call   c0026e21 <__lesf2>
c002205f:	83 c4 10             	add    esp,0x10
c0022062:	85 c0                	test   eax,eax
c0022064:	7f 06                	jg     c002206c <SoundDevice::floatTo8(float*, unsigned char*, int)+0xcc>
c0022066:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c002206a:	eb 0f                	jmp    c002207b <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c002206c:	83 ec 0c             	sub    esp,0xc
c002206f:	57                   	push   edi
c0022070:	e8 b7 5e 00 00       	call   c0027f2c <lrintf>
c0022075:	83 c4 10             	add    esp,0x10
c0022078:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c002207b:	43                   	inc    ebx
c002207c:	e9 2b ff ff ff       	jmp    c0021fac <SoundDevice::floatTo8(float*, unsigned char*, int)+0xc>
c0022081:	83 c4 10             	add    esp,0x10
c0022084:	5b                   	pop    ebx
c0022085:	5e                   	pop    esi
c0022086:	5f                   	pop    edi
c0022087:	c3                   	ret    

c0022088 <SoundDevice::getAudio(int, float*, float*)>:
c0022088:	55                   	push   ebp
c0022089:	57                   	push   edi
c002208a:	56                   	push   esi
c002208b:	53                   	push   ebx
c002208c:	31 db                	xor    ebx,ebx
c002208e:	83 ec 20             	sub    esp,0x20
c0022091:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0022095:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0022099:	c1 e0 02             	shl    eax,0x2
c002209c:	50                   	push   eax
c002209d:	6a 00                	push   0x0
c002209f:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00220a3:	e8 d0 e6 fd ff       	call   c0000778 <memset>
c00220a8:	83 c4 10             	add    esp,0x10
c00220ab:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00220af:	8b 84 9e 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*4+0x15c]
c00220b6:	85 c0                	test   eax,eax
c00220b8:	0f 84 d7 00 00 00    	je     c0022195 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c00220be:	83 ec 0c             	sub    esp,0xc
c00220c1:	50                   	push   eax
c00220c2:	e8 a5 fb ff ff       	call   c0021c6c <SoundChannel::paused()>
c00220c7:	83 c4 10             	add    esp,0x10
c00220ca:	84 c0                	test   al,al
c00220cc:	0f 85 c3 00 00 00    	jne    c0022195 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c00220d2:	83 ec 0c             	sub    esp,0xc
c00220d5:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c00220dc:	e8 19 fa ff ff       	call   c0021afa <SoundChannel::getVolume()>
c00220e1:	83 c4 10             	add    esp,0x10
c00220e4:	85 c0                	test   eax,eax
c00220e6:	0f 84 a9 00 00 00    	je     c0022195 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c00220ec:	83 ec 0c             	sub    esp,0xc
c00220ef:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c00220f6:	e8 ff f9 ff ff       	call   c0021afa <SoundChannel::getVolume()>
c00220fb:	83 ec 0c             	sub    esp,0xc
c00220fe:	50                   	push   eax
c00220ff:	e8 c3 4a 00 00       	call   c0026bc7 <__floatsisf>
c0022104:	59                   	pop    ecx
c0022105:	5d                   	pop    ebp
c0022106:	31 ed                	xor    ebp,ebp
c0022108:	68 00 00 c8 42       	push   0x42c80000
c002210d:	50                   	push   eax
c002210e:	e8 89 48 00 00       	call   c002699c <__divsf3>
c0022113:	83 c4 10             	add    esp,0x10
c0022116:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002211a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c002211e:	ff b6 dc 01 00 00    	push   DWORD PTR [esi+0x1dc]
c0022124:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0022128:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c002212f:	e8 60 fb ff ff       	call   c0021c94 <SoundChannel::unbuffer(float*, int, int)>
c0022134:	83 c4 20             	add    esp,0x20
c0022137:	89 c1                	mov    ecx,eax
c0022139:	39 cd                	cmp    ebp,ecx
c002213b:	7d 52                	jge    c002218f <SoundDevice::getAudio(int, float*, float*)+0x107>
c002213d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0022141:	50                   	push   eax
c0022142:	50                   	push   eax
c0022143:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0022147:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c002214a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c002214e:	e8 86 46 00 00       	call   c00267d9 <__mulsf3>
c0022153:	5a                   	pop    edx
c0022154:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0022158:	ff b6 58 01 00 00    	push   DWORD PTR [esi+0x158]
c002215e:	e8 64 4a 00 00       	call   c0026bc7 <__floatsisf>
c0022163:	59                   	pop    ecx
c0022164:	5a                   	pop    edx
c0022165:	50                   	push   eax
c0022166:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002216a:	e8 2d 48 00 00       	call   c002699c <__divsf3>
c002216f:	59                   	pop    ecx
c0022170:	5a                   	pop    edx
c0022171:	50                   	push   eax
c0022172:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0022176:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c0022179:	e8 38 43 00 00       	call   c00264b6 <__addsf3>
c002217e:	83 c4 10             	add    esp,0x10
c0022181:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0022185:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0022189:	89 04 aa             	mov    DWORD PTR [edx+ebp*4],eax
c002218c:	45                   	inc    ebp
c002218d:	eb aa                	jmp    c0022139 <SoundDevice::getAudio(int, float*, float*)+0xb1>
c002218f:	39 cf                	cmp    edi,ecx
c0022191:	7e 02                	jle    c0022195 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0022193:	89 cf                	mov    edi,ecx
c0022195:	43                   	inc    ebx
c0022196:	83 fb 20             	cmp    ebx,0x20
c0022199:	0f 85 10 ff ff ff    	jne    c00220af <SoundDevice::getAudio(int, float*, float*)+0x27>
c002219f:	83 c4 1c             	add    esp,0x1c
c00221a2:	89 f8                	mov    eax,edi
c00221a4:	5b                   	pop    ebx
c00221a5:	5e                   	pop    esi
c00221a6:	5f                   	pop    edi
c00221a7:	5d                   	pop    ebp
c00221a8:	c3                   	ret    
c00221a9:	90                   	nop

c00221aa <PCI::open(int, int, void*)>:
c00221aa:	83 ec 18             	sub    esp,0x18
c00221ad:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00221b1:	8b 10                	mov    edx,DWORD PTR [eax]
c00221b3:	50                   	push   eax
c00221b4:	ff 52 18             	call   DWORD PTR [edx+0x18]
c00221b7:	31 c0                	xor    eax,eax
c00221b9:	83 c4 1c             	add    esp,0x1c
c00221bc:	c3                   	ret    
c00221bd:	90                   	nop

c00221be <PCI::close(int, int, void*)>:
c00221be:	31 c0                	xor    eax,eax
c00221c0:	c3                   	ret    
c00221c1:	90                   	nop

c00221c2 <PCI::PCI()>:
c00221c2:	83 ec 0c             	sub    esp,0xc
c00221c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221c9:	83 ec 08             	sub    esp,0x8
c00221cc:	68 4c c1 02 c0       	push   0xc002c14c
c00221d1:	50                   	push   eax
c00221d2:	e8 d9 15 ff ff       	call   c00137b0 <Bus::Bus(char const*)>
c00221d7:	83 c4 10             	add    esp,0x10
c00221da:	ba b8 c1 02 c0       	mov    edx,0xc002c1b8
c00221df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221e3:	89 10                	mov    DWORD PTR [eax],edx
c00221e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221e9:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00221ef:	0f b6 d0             	movzx  edx,al
c00221f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221f6:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c00221fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022201:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022207:	0f b6 d0             	movzx  edx,al
c002220a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002220e:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c0022213:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022217:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002221d:	8d 50 01             	lea    edx,[eax+0x1]
c0022220:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022224:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c002222a:	0f b6 d0             	movzx  edx,al
c002222d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022231:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0022235:	83 c9 c0             	or     ecx,0xffffffc0
c0022238:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c002223c:	90                   	nop
c002223d:	83 c4 0c             	add    esp,0xc
c0022240:	c3                   	ret    
c0022241:	90                   	nop

c0022242 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0022242:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0022246:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002224b:	89 ca                	mov    edx,ecx
c002224d:	c1 e0 10             	shl    eax,0x10
c0022250:	81 e2 fc 00 00 00    	and    edx,0xfc
c0022256:	09 d0                	or     eax,edx
c0022258:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c002225d:	c1 e2 08             	shl    edx,0x8
c0022260:	09 d0                	or     eax,edx
c0022262:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c0022267:	c1 e2 0b             	shl    edx,0xb
c002226a:	09 d0                	or     eax,edx
c002226c:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022271:	0d 00 00 00 80       	or     eax,0x80000000
c0022276:	ef                   	out    dx,eax
c0022277:	ba fc 0c 00 00       	mov    edx,0xcfc
c002227c:	ed                   	in     eax,dx
c002227d:	83 e1 02             	and    ecx,0x2
c0022280:	0f b6 c9             	movzx  ecx,cl
c0022283:	c1 e1 03             	shl    ecx,0x3
c0022286:	d3 e8                	shr    eax,cl
c0022288:	c3                   	ret    
c0022289:	90                   	nop

c002228a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c002228a:	6a 00                	push   0x0
c002228c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022291:	50                   	push   eax
c0022292:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022297:	50                   	push   eax
c0022298:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002229d:	50                   	push   eax
c002229e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00222a2:	e8 9b ff ff ff       	call   c0022242 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00222a7:	83 c4 14             	add    esp,0x14
c00222aa:	c3                   	ret    
c00222ab:	90                   	nop

c00222ac <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c00222ac:	6a 0e                	push   0xe
c00222ae:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00222b3:	50                   	push   eax
c00222b4:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00222b9:	50                   	push   eax
c00222ba:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00222bf:	50                   	push   eax
c00222c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00222c4:	e8 79 ff ff ff       	call   c0022242 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00222c9:	83 c4 14             	add    esp,0x14
c00222cc:	0f b6 c0             	movzx  eax,al
c00222cf:	c3                   	ret    

c00222d0 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c00222d0:	55                   	push   ebp
c00222d1:	57                   	push   edi
c00222d2:	56                   	push   esi
c00222d3:	53                   	push   ebx
c00222d4:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c00222d9:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c00222de:	0f b6 7c 24 18       	movzx  edi,BYTE PTR [esp+0x18]
c00222e3:	6a 0a                	push   0xa
c00222e5:	56                   	push   esi
c00222e6:	55                   	push   ebp
c00222e7:	57                   	push   edi
c00222e8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00222ec:	e8 51 ff ff ff       	call   c0022242 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00222f1:	6a 0a                	push   0xa
c00222f3:	89 c3                	mov    ebx,eax
c00222f5:	56                   	push   esi
c00222f6:	0f b6 db             	movzx  ebx,bl
c00222f9:	55                   	push   ebp
c00222fa:	57                   	push   edi
c00222fb:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00222ff:	e8 3e ff ff ff       	call   c0022242 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022304:	83 c4 28             	add    esp,0x28
c0022307:	25 00 ff 00 00       	and    eax,0xff00
c002230c:	09 d8                	or     eax,ebx
c002230e:	5b                   	pop    ebx
c002230f:	5e                   	pop    esi
c0022310:	5f                   	pop    edi
c0022311:	5d                   	pop    ebp
c0022312:	c3                   	ret    
c0022313:	90                   	nop

c0022314 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c0022314:	6a 08                	push   0x8
c0022316:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002231b:	50                   	push   eax
c002231c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022321:	50                   	push   eax
c0022322:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022327:	50                   	push   eax
c0022328:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002232c:	e8 11 ff ff ff       	call   c0022242 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022331:	83 c4 14             	add    esp,0x14
c0022334:	0f b6 c4             	movzx  eax,ah
c0022337:	c3                   	ret    

c0022338 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c0022338:	6a 08                	push   0x8
c002233a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002233f:	50                   	push   eax
c0022340:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022345:	50                   	push   eax
c0022346:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002234b:	50                   	push   eax
c002234c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022350:	e8 ed fe ff ff       	call   c0022242 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022355:	83 c4 14             	add    esp,0x14
c0022358:	c3                   	ret    
c0022359:	90                   	nop

c002235a <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c002235a:	6a 3c                	push   0x3c
c002235c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022361:	50                   	push   eax
c0022362:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022367:	50                   	push   eax
c0022368:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002236d:	50                   	push   eax
c002236e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022372:	e8 cb fe ff ff       	call   c0022242 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022377:	83 c4 14             	add    esp,0x14
c002237a:	c3                   	ret    
c002237b:	90                   	nop

c002237c <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c002237c:	6a 18                	push   0x18
c002237e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022383:	50                   	push   eax
c0022384:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022389:	50                   	push   eax
c002238a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002238f:	50                   	push   eax
c0022390:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022394:	e8 a9 fe ff ff       	call   c0022242 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022399:	83 c4 14             	add    esp,0x14
c002239c:	0f b6 c4             	movzx  eax,ah
c002239f:	c3                   	ret    

c00223a0 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c00223a0:	55                   	push   ebp
c00223a1:	57                   	push   edi
c00223a2:	56                   	push   esi
c00223a3:	53                   	push   ebx
c00223a4:	50                   	push   eax
c00223a5:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c00223a9:	0f b6 4c 24 28       	movzx  ecx,BYTE PTR [esp+0x28]
c00223ae:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c00223b3:	0f b6 6c 24 20       	movzx  ebp,BYTE PTR [esp+0x20]
c00223b8:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c00223bf:	8d 43 12             	lea    eax,[ebx+0x12]
c00223c2:	83 c3 10             	add    ebx,0x10
c00223c5:	0f b6 c0             	movzx  eax,al
c00223c8:	0f b6 db             	movzx  ebx,bl
c00223cb:	50                   	push   eax
c00223cc:	51                   	push   ecx
c00223cd:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00223d1:	57                   	push   edi
c00223d2:	55                   	push   ebp
c00223d3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00223d7:	e8 66 fe ff ff       	call   c0022242 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00223dc:	53                   	push   ebx
c00223dd:	89 c6                	mov    esi,eax
c00223df:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00223e3:	c1 e6 10             	shl    esi,0x10
c00223e6:	51                   	push   ecx
c00223e7:	57                   	push   edi
c00223e8:	55                   	push   ebp
c00223e9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00223ed:	e8 50 fe ff ff       	call   c0022242 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00223f2:	83 c4 2c             	add    esp,0x2c
c00223f5:	0f b7 c0             	movzx  eax,ax
c00223f8:	5b                   	pop    ebx
c00223f9:	09 f0                	or     eax,esi
c00223fb:	5e                   	pop    esi
c00223fc:	5f                   	pop    edi
c00223fd:	5d                   	pop    ebp
c00223fe:	c3                   	ret    
c00223ff:	90                   	nop

c0022400 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c0022400:	53                   	push   ebx
c0022401:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022406:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c002240b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002240f:	c1 e1 10             	shl    ecx,0x10
c0022412:	25 fc 00 00 00       	and    eax,0xfc
c0022417:	09 c1                	or     ecx,eax
c0022419:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002241e:	c1 e0 08             	shl    eax,0x8
c0022421:	09 c1                	or     ecx,eax
c0022423:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0022428:	c1 e0 0b             	shl    eax,0xb
c002242b:	09 c1                	or     ecx,eax
c002242d:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0022433:	89 c8                	mov    eax,ecx
c0022435:	ef                   	out    dx,eax
c0022436:	ba fc 0c 00 00       	mov    edx,0xcfc
c002243b:	ed                   	in     eax,dx
c002243c:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c0022441:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0022446:	74 0a                	je     c0022452 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x52>
c0022448:	0f b7 d8             	movzx  ebx,ax
c002244b:	89 d0                	mov    eax,edx
c002244d:	c1 e0 10             	shl    eax,0x10
c0022450:	eb 05                	jmp    c0022457 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x57>
c0022452:	66 31 c0             	xor    ax,ax
c0022455:	89 d3                	mov    ebx,edx
c0022457:	09 c3                	or     ebx,eax
c0022459:	ba f8 0c 00 00       	mov    edx,0xcf8
c002245e:	89 c8                	mov    eax,ecx
c0022460:	ef                   	out    dx,eax
c0022461:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022466:	89 d8                	mov    eax,ebx
c0022468:	ef                   	out    dx,eax
c0022469:	5b                   	pop    ebx
c002246a:	c3                   	ret    
c002246b:	90                   	nop

c002246c <PCI::checkBus(unsigned char)>:
c002246c:	56                   	push   esi
c002246d:	53                   	push   ebx
c002246e:	31 db                	xor    ebx,ebx
c0022470:	51                   	push   ecx
c0022471:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0022476:	52                   	push   edx
c0022477:	53                   	push   ebx
c0022478:	43                   	inc    ebx
c0022479:	56                   	push   esi
c002247a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002247e:	e8 2b 03 00 00       	call   c00227ae <PCI::checkDevice(unsigned char, unsigned char)>
c0022483:	83 c4 10             	add    esp,0x10
c0022486:	83 fb 20             	cmp    ebx,0x20
c0022489:	75 eb                	jne    c0022476 <PCI::checkBus(unsigned char)+0xa>
c002248b:	58                   	pop    eax
c002248c:	5b                   	pop    ebx
c002248d:	5e                   	pop    esi
c002248e:	c3                   	ret    
c002248f:	90                   	nop

c0022490 <PCI::foundDevice(PCIDeviceInfo)>:
c0022490:	55                   	push   ebp
c0022491:	57                   	push   edi
c0022492:	56                   	push   esi
c0022493:	53                   	push   ebx
c0022494:	83 ec 1c             	sub    esp,0x1c
c0022497:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002249b:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c00224a1:	0f 84 52 01 00 00    	je     c00225f9 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c00224a7:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c00224ab:	66 81 f9 06 04       	cmp    cx,0x406
c00224b0:	75 2c                	jne    c00224de <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c00224b2:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c00224b7:	50                   	push   eax
c00224b8:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c00224bd:	50                   	push   eax
c00224be:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c00224c3:	50                   	push   eax
c00224c4:	56                   	push   esi
c00224c5:	e8 b2 fe ff ff       	call   c002237c <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c00224ca:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c00224ce:	0f b6 c0             	movzx  eax,al
c00224d1:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00224d5:	83 c4 2c             	add    esp,0x2c
c00224d8:	5b                   	pop    ebx
c00224d9:	5e                   	pop    esi
c00224da:	5f                   	pop    edi
c00224db:	5d                   	pop    ebp
c00224dc:	eb 8e                	jmp    c002246c <PCI::checkBus(unsigned char)>
c00224de:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00224e2:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00224e8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00224ec:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00224f0:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c00224f4:	88 d3                	mov    bl,dl
c00224f6:	85 c0                	test   eax,eax
c00224f8:	74 33                	je     c002252d <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c00224fa:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00224fd:	85 d2                	test   edx,edx
c00224ff:	74 28                	je     c0022529 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022501:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c0022507:	31 ef                	xor    edi,ebp
c0022509:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c002250f:	75 18                	jne    c0022529 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022511:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0022515:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c002251b:	75 0c                	jne    c0022529 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c002251d:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0022523:	0f 84 d0 00 00 00    	je     c00225f9 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0022529:	8b 00                	mov    eax,DWORD PTR [eax]
c002252b:	eb c9                	jmp    c00224f6 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c002252d:	66 81 f9 01 06       	cmp    cx,0x601
c0022532:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0022536:	75 19                	jne    c0022551 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c0022538:	83 ec 0c             	sub    esp,0xc
c002253b:	68 64 01 00 00       	push   0x164
c0022540:	e8 01 d3 fe ff       	call   c000f846 <malloc>
c0022545:	89 c5                	mov    ebp,eax
c0022547:	89 04 24             	mov    DWORD PTR [esp],eax
c002254a:	e8 95 0f 00 00       	call   c00234e4 <SATABus::SATABus()>
c002254f:	eb 1e                	jmp    c002256f <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c0022551:	66 81 f9 01 01       	cmp    cx,0x101
c0022556:	75 60                	jne    c00225b8 <PCI::foundDevice(PCIDeviceInfo)+0x128>
c0022558:	83 ec 0c             	sub    esp,0xc
c002255b:	68 70 02 00 00       	push   0x270
c0022560:	e8 e1 d2 fe ff       	call   c000f846 <malloc>
c0022565:	89 c5                	mov    ebp,eax
c0022567:	89 04 24             	mov    DWORD PTR [esp],eax
c002256a:	e8 03 03 00 00       	call   c0022872 <IDE::IDE()>
c002256f:	58                   	pop    eax
c0022570:	5a                   	pop    edx
c0022571:	55                   	push   ebp
c0022572:	56                   	push   esi
c0022573:	e8 c4 19 ff ff       	call   c0013f3c <Device::addChild(Device*)>
c0022578:	83 ec 1c             	sub    esp,0x1c
c002257b:	b9 09 00 00 00       	mov    ecx,0x9
c0022580:	fc                   	cld    
c0022581:	89 e7                	mov    edi,esp
c0022583:	89 de                	mov    esi,ebx
c0022585:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022587:	55                   	push   ebp
c0022588:	e8 b9 18 ff ff       	call   c0013e46 <Device::preOpenPCI(PCIDeviceInfo)>
c002258d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0022590:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c0022594:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c002259c:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c00225a4:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c00225ac:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00225af:	83 c4 4c             	add    esp,0x4c
c00225b2:	5b                   	pop    ebx
c00225b3:	5e                   	pop    esi
c00225b4:	5f                   	pop    edi
c00225b5:	5d                   	pop    ebp
c00225b6:	ff e0                	jmp    eax
c00225b8:	83 ec 0c             	sub    esp,0xc
c00225bb:	68 58 01 00 00       	push   0x158
c00225c0:	e8 81 d2 fe ff       	call   c000f846 <malloc>
c00225c5:	89 c5                	mov    ebp,eax
c00225c7:	58                   	pop    eax
c00225c8:	5a                   	pop    edx
c00225c9:	68 54 c1 02 c0       	push   0xc002c154
c00225ce:	55                   	push   ebp
c00225cf:	e8 5e 1c ff ff       	call   c0014232 <DriverlessDevice::DriverlessDevice(char const*)>
c00225d4:	59                   	pop    ecx
c00225d5:	5f                   	pop    edi
c00225d6:	55                   	push   ebp
c00225d7:	56                   	push   esi
c00225d8:	e8 5f 19 ff ff       	call   c0013f3c <Device::addChild(Device*)>
c00225dd:	b9 09 00 00 00       	mov    ecx,0x9
c00225e2:	fc                   	cld    
c00225e3:	89 df                	mov    edi,ebx
c00225e5:	89 de                	mov    esi,ebx
c00225e7:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00225e9:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c00225ed:	83 c4 2c             	add    esp,0x2c
c00225f0:	5b                   	pop    ebx
c00225f1:	5e                   	pop    esi
c00225f2:	5f                   	pop    edi
c00225f3:	5d                   	pop    ebp
c00225f4:	e9 4d 18 ff ff       	jmp    c0013e46 <Device::preOpenPCI(PCIDeviceInfo)>
c00225f9:	83 c4 1c             	add    esp,0x1c
c00225fc:	5b                   	pop    ebx
c00225fd:	5e                   	pop    esi
c00225fe:	5f                   	pop    edi
c00225ff:	5d                   	pop    ebp
c0022600:	c3                   	ret    
c0022601:	90                   	nop

c0022602 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c0022602:	55                   	push   ebp
c0022603:	57                   	push   edi
c0022604:	56                   	push   esi
c0022605:	53                   	push   ebx
c0022606:	83 ec 5c             	sub    esp,0x5c
c0022609:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c002260d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0022611:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0022615:	0f b6 7c 24 10       	movzx  edi,BYTE PTR [esp+0x10]
c002261a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002261e:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0022622:	0f b6 5c 24 14       	movzx  ebx,BYTE PTR [esp+0x14]
c0022627:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002262b:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c0022630:	6a 0c                	push   0xc
c0022632:	55                   	push   ebp
c0022633:	53                   	push   ebx
c0022634:	57                   	push   edi
c0022635:	ff b4 24 80 00 00 00 	push   DWORD PTR [esp+0x80]
c002263c:	e8 01 fc ff ff       	call   c0022242 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022641:	55                   	push   ebp
c0022642:	53                   	push   ebx
c0022643:	57                   	push   edi
c0022644:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c002264b:	e8 80 fc ff ff       	call   c00222d0 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c0022650:	66 89 44 24 42       	mov    WORD PTR [esp+0x42],ax
c0022655:	83 c4 24             	add    esp,0x24
c0022658:	55                   	push   ebp
c0022659:	53                   	push   ebx
c002265a:	57                   	push   edi
c002265b:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c002265f:	e8 f6 fc ff ff       	call   c002235a <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c0022664:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0022668:	6a 3c                	push   0x3c
c002266a:	55                   	push   ebp
c002266b:	53                   	push   ebx
c002266c:	57                   	push   edi
c002266d:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0022674:	e8 c9 fb ff ff       	call   c0022242 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022679:	0f b6 c4             	movzx  eax,ah
c002267c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0022680:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c0022684:	88 44 24 71          	mov    BYTE PTR [esp+0x71],al
c0022688:	a1 68 db 02 c0       	mov    eax,ds:0xc002db68
c002268d:	83 c4 24             	add    esp,0x24
c0022690:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0022696:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c002269d:	74 6c                	je     c002270b <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c002269f:	31 f6                	xor    esi,esi
c00226a1:	8b 15 68 db 02 c0    	mov    edx,DWORD PTR ds:0xc002db68
c00226a7:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c00226ad:	39 b2 5c 11 00 00    	cmp    DWORD PTR [edx+0x115c],esi
c00226b3:	7e 56                	jle    c002270b <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c00226b5:	8d 14 f2             	lea    edx,[edx+esi*8]
c00226b8:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c00226bf:	39 cb                	cmp    ebx,ecx
c00226c1:	75 45                	jne    c0022708 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c00226c3:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c00226ca:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c00226ce:	75 38                	jne    c0022708 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c00226d0:	83 ec 0c             	sub    esp,0xc
c00226d3:	68 6e c1 02 c0       	push   0xc002c16e
c00226d8:	e8 38 04 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c00226dd:	8b 15 68 db 02 c0    	mov    edx,DWORD PTR ds:0xc002db68
c00226e3:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c00226e9:	0f b6 94 f2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+esi*8+0x15f]
c00226f1:	88 54 24 2d          	mov    BYTE PTR [esp+0x2d],dl
c00226f5:	52                   	push   edx
c00226f6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00226fa:	53                   	push   ebx
c00226fb:	68 93 c1 02 c0       	push   0xc002c193
c0022700:	e8 10 04 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c0022705:	83 c4 20             	add    esp,0x20
c0022708:	46                   	inc    esi
c0022709:	eb 96                	jmp    c00226a1 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9f>
c002270b:	31 d2                	xor    edx,edx
c002270d:	83 ec 0c             	sub    esp,0xc
c0022710:	55                   	push   ebp
c0022711:	53                   	push   ebx
c0022712:	57                   	push   edi
c0022713:	52                   	push   edx
c0022714:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0022718:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c002271f:	e8 7c fc ff ff       	call   c00223a0 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022724:	8d 74 24 4c          	lea    esi,[esp+0x4c]
c0022728:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c002272c:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c0022730:	42                   	inc    edx
c0022731:	83 c4 20             	add    esp,0x20
c0022734:	83 fa 06             	cmp    edx,0x6
c0022737:	75 d4                	jne    c002270d <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x10b>
c0022739:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c002273d:	88 44 24 30          	mov    BYTE PTR [esp+0x30],al
c0022741:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c0022745:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c0022749:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c002274d:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c0022751:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0022756:	86 e0                	xchg   al,ah
c0022758:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c002275d:	55                   	push   ebp
c002275e:	53                   	push   ebx
c002275f:	57                   	push   edi
c0022760:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0022764:	e8 ab fb ff ff       	call   c0022314 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0022769:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c002276d:	55                   	push   ebp
c002276e:	53                   	push   ebx
c002276f:	57                   	push   edi
c0022770:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0022777:	e8 0e fb ff ff       	call   c002228a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c002277c:	83 ec 0c             	sub    esp,0xc
c002277f:	66 89 44 24 5a       	mov    WORD PTR [esp+0x5a],ax
c0022784:	b9 09 00 00 00       	mov    ecx,0x9
c0022789:	8a 44 24 49          	mov    al,BYTE PTR [esp+0x49]
c002278d:	88 44 24 78          	mov    BYTE PTR [esp+0x78],al
c0022791:	fc                   	cld    
c0022792:	89 e7                	mov    edi,esp
c0022794:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022796:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c002279d:	e8 ee fc ff ff       	call   c0022490 <PCI::foundDevice(PCIDeviceInfo)>
c00227a2:	81 c4 8c 00 00 00    	add    esp,0x8c
c00227a8:	5b                   	pop    ebx
c00227a9:	5e                   	pop    esi
c00227aa:	5f                   	pop    edi
c00227ab:	5d                   	pop    ebp
c00227ac:	c3                   	ret    
c00227ad:	90                   	nop

c00227ae <PCI::checkDevice(unsigned char, unsigned char)>:
c00227ae:	55                   	push   ebp
c00227af:	57                   	push   edi
c00227b0:	56                   	push   esi
c00227b1:	53                   	push   ebx
c00227b2:	83 ec 0c             	sub    esp,0xc
c00227b5:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00227b9:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c00227be:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c00227c3:	6a 00                	push   0x0
c00227c5:	56                   	push   esi
c00227c6:	57                   	push   edi
c00227c7:	55                   	push   ebp
c00227c8:	e8 bd fa ff ff       	call   c002228a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c00227cd:	6a 00                	push   0x0
c00227cf:	56                   	push   esi
c00227d0:	57                   	push   edi
c00227d1:	55                   	push   ebp
c00227d2:	e8 2b fe ff ff       	call   c0022602 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c00227d7:	83 c4 20             	add    esp,0x20
c00227da:	6a 00                	push   0x0
c00227dc:	56                   	push   esi
c00227dd:	57                   	push   edi
c00227de:	55                   	push   ebp
c00227df:	e8 c8 fa ff ff       	call   c00222ac <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c00227e4:	83 c4 10             	add    esp,0x10
c00227e7:	84 c0                	test   al,al
c00227e9:	79 27                	jns    c0022812 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c00227eb:	bb 01 00 00 00       	mov    ebx,0x1
c00227f0:	53                   	push   ebx
c00227f1:	56                   	push   esi
c00227f2:	57                   	push   edi
c00227f3:	55                   	push   ebp
c00227f4:	e8 91 fa ff ff       	call   c002228a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c00227f9:	83 c4 10             	add    esp,0x10
c00227fc:	66 40                	inc    ax
c00227fe:	74 0c                	je     c002280c <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c0022800:	53                   	push   ebx
c0022801:	56                   	push   esi
c0022802:	57                   	push   edi
c0022803:	55                   	push   ebp
c0022804:	e8 f9 fd ff ff       	call   c0022602 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0022809:	83 c4 10             	add    esp,0x10
c002280c:	43                   	inc    ebx
c002280d:	83 fb 08             	cmp    ebx,0x8
c0022810:	75 de                	jne    c00227f0 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c0022812:	83 c4 0c             	add    esp,0xc
c0022815:	5b                   	pop    ebx
c0022816:	5e                   	pop    esi
c0022817:	5f                   	pop    edi
c0022818:	5d                   	pop    ebp
c0022819:	c3                   	ret    

c002281a <PCI::detect()>:
c002281a:	56                   	push   esi
c002281b:	53                   	push   ebx
c002281c:	53                   	push   ebx
c002281d:	31 db                	xor    ebx,ebx
c002281f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0022823:	6a 00                	push   0x0
c0022825:	6a 00                	push   0x0
c0022827:	6a 00                	push   0x0
c0022829:	56                   	push   esi
c002282a:	e8 7d fa ff ff       	call   c00222ac <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c002282f:	83 c4 10             	add    esp,0x10
c0022832:	a8 80                	test   al,0x80
c0022834:	75 21                	jne    c0022857 <PCI::detect()+0x3d>
c0022836:	51                   	push   ecx
c0022837:	51                   	push   ecx
c0022838:	6a 00                	push   0x0
c002283a:	56                   	push   esi
c002283b:	e8 2c fc ff ff       	call   c002246c <PCI::checkBus(unsigned char)>
c0022840:	83 c4 10             	add    esp,0x10
c0022843:	eb 24                	jmp    c0022869 <PCI::detect()+0x4f>
c0022845:	52                   	push   edx
c0022846:	52                   	push   edx
c0022847:	53                   	push   ebx
c0022848:	43                   	inc    ebx
c0022849:	56                   	push   esi
c002284a:	e8 1d fc ff ff       	call   c002246c <PCI::checkBus(unsigned char)>
c002284f:	83 c4 10             	add    esp,0x10
c0022852:	83 fb 08             	cmp    ebx,0x8
c0022855:	74 12                	je     c0022869 <PCI::detect()+0x4f>
c0022857:	53                   	push   ebx
c0022858:	6a 00                	push   0x0
c002285a:	6a 00                	push   0x0
c002285c:	56                   	push   esi
c002285d:	e8 28 fa ff ff       	call   c002228a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022862:	83 c4 10             	add    esp,0x10
c0022865:	66 40                	inc    ax
c0022867:	74 dc                	je     c0022845 <PCI::detect()+0x2b>
c0022869:	58                   	pop    eax
c002286a:	5b                   	pop    ebx
c002286b:	5e                   	pop    esi
c002286c:	c3                   	ret    
c002286d:	90                   	nop

c002286e <IDE::close(int, int, void*)>:
c002286e:	83 c8 ff             	or     eax,0xffffffff
c0022871:	c3                   	ret    

c0022872 <IDE::IDE()>:
c0022872:	83 ec 0c             	sub    esp,0xc
c0022875:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022879:	83 ec 08             	sub    esp,0x8
c002287c:	68 dc c1 02 c0       	push   0xc002c1dc
c0022881:	50                   	push   eax
c0022882:	e8 41 1a ff ff       	call   c00142c8 <HardDiskController::HardDiskController(char const*)>
c0022887:	83 c4 10             	add    esp,0x10
c002288a:	ba 1c c4 02 c0       	mov    edx,0xc002c41c
c002288f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022893:	89 10                	mov    DWORD PTR [eax],edx
c0022895:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022899:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c00228a0:	90                   	nop
c00228a1:	83 c4 0c             	add    esp,0xc
c00228a4:	c3                   	ret    
c00228a5:	90                   	nop

c00228a6 <IDE::prepareInterrupt(unsigned char)>:
c00228a6:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00228ab:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00228af:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c00228b7:	c3                   	ret    

c00228b8 <selectDrive(unsigned char, unsigned char)>:
c00228b8:	c3                   	ret    
c00228b9:	90                   	nop

c00228ba <IDE::getBase(unsigned char)>:
c00228ba:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00228bf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00228c3:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c00228cb:	c3                   	ret    

c00228cc <IDE::write(unsigned char, unsigned char, unsigned char)>:
c00228cc:	55                   	push   ebp
c00228cd:	57                   	push   edi
c00228ce:	56                   	push   esi
c00228cf:	53                   	push   ebx
c00228d0:	83 ec 1c             	sub    esp,0x1c
c00228d3:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00228d7:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00228db:	8d 4b f8             	lea    ecx,[ebx-0x8]
c00228de:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00228e2:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00228e6:	80 f9 03             	cmp    cl,0x3
c00228e9:	77 51                	ja     c002293c <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c00228eb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00228ef:	0f b6 f2             	movzx  esi,dl
c00228f2:	0f b6 db             	movzx  ebx,bl
c00228f5:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c00228f8:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c00228fc:	83 ca 80             	or     edx,0xffffff80
c00228ff:	0f b6 d2             	movzx  edx,dl
c0022902:	52                   	push   edx
c0022903:	6a 0c                	push   0xc
c0022905:	56                   	push   esi
c0022906:	57                   	push   edi
c0022907:	e8 c0 ff ff ff       	call   c00228cc <IDE::write(unsigned char, unsigned char, unsigned char)>
c002290c:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c0022911:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022915:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c0022919:	ee                   	out    dx,al
c002291a:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c002291f:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c0022923:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0022927:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c002292b:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0022933:	83 c4 2c             	add    esp,0x2c
c0022936:	5b                   	pop    ebx
c0022937:	5e                   	pop    esi
c0022938:	5f                   	pop    edi
c0022939:	5d                   	pop    ebp
c002293a:	eb 90                	jmp    c00228cc <IDE::write(unsigned char, unsigned char, unsigned char)>
c002293c:	80 fb 07             	cmp    bl,0x7
c002293f:	77 12                	ja     c0022953 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c0022941:	0f b6 d2             	movzx  edx,dl
c0022944:	0f b6 db             	movzx  ebx,bl
c0022947:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c002294f:	89 da                	mov    edx,ebx
c0022951:	eb 2f                	jmp    c0022982 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0022953:	80 fb 0d             	cmp    bl,0xd
c0022956:	77 13                	ja     c002296b <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c0022958:	0f b6 d2             	movzx  edx,dl
c002295b:	0f b6 db             	movzx  ebx,bl
c002295e:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c0022965:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c0022969:	eb 17                	jmp    c0022982 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c002296b:	80 fb 15             	cmp    bl,0x15
c002296e:	77 13                	ja     c0022983 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c0022970:	0f b6 d2             	movzx  edx,dl
c0022973:	0f b6 db             	movzx  ebx,bl
c0022976:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c002297e:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c0022982:	ee                   	out    dx,al
c0022983:	83 c4 1c             	add    esp,0x1c
c0022986:	5b                   	pop    ebx
c0022987:	5e                   	pop    esi
c0022988:	5f                   	pop    edi
c0022989:	5d                   	pop    ebp
c002298a:	c3                   	ret    
c002298b:	90                   	nop

c002298c <IDE::read(unsigned char, unsigned char)>:
c002298c:	55                   	push   ebp
c002298d:	57                   	push   edi
c002298e:	56                   	push   esi
c002298f:	53                   	push   ebx
c0022990:	83 ec 1c             	sub    esp,0x1c
c0022993:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0022997:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c002299b:	8d 43 f8             	lea    eax,[ebx-0x8]
c002299e:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00229a2:	3c 03                	cmp    al,0x3
c00229a4:	77 43                	ja     c00229e9 <IDE::read(unsigned char, unsigned char)+0x5d>
c00229a6:	0f b6 f2             	movzx  esi,dl
c00229a9:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c00229ac:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c00229b0:	83 c8 80             	or     eax,0xffffff80
c00229b3:	0f b6 c0             	movzx  eax,al
c00229b6:	50                   	push   eax
c00229b7:	6a 0c                	push   0xc
c00229b9:	56                   	push   esi
c00229ba:	57                   	push   edi
c00229bb:	e8 0c ff ff ff       	call   c00228cc <IDE::write(unsigned char, unsigned char, unsigned char)>
c00229c0:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c00229c5:	0f b6 c3             	movzx  eax,bl
c00229c8:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c00229cc:	ec                   	in     al,dx
c00229cd:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00229d1:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c00229d6:	52                   	push   edx
c00229d7:	6a 0c                	push   0xc
c00229d9:	56                   	push   esi
c00229da:	57                   	push   edi
c00229db:	e8 ec fe ff ff       	call   c00228cc <IDE::write(unsigned char, unsigned char, unsigned char)>
c00229e0:	83 c4 20             	add    esp,0x20
c00229e3:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00229e7:	eb 49                	jmp    c0022a32 <IDE::read(unsigned char, unsigned char)+0xa6>
c00229e9:	80 fb 07             	cmp    bl,0x7
c00229ec:	77 12                	ja     c0022a00 <IDE::read(unsigned char, unsigned char)+0x74>
c00229ee:	0f b6 d2             	movzx  edx,dl
c00229f1:	0f b6 c3             	movzx  eax,bl
c00229f4:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c00229fc:	89 c2                	mov    edx,eax
c00229fe:	eb 31                	jmp    c0022a31 <IDE::read(unsigned char, unsigned char)+0xa5>
c0022a00:	80 fb 0d             	cmp    bl,0xd
c0022a03:	77 13                	ja     c0022a18 <IDE::read(unsigned char, unsigned char)+0x8c>
c0022a05:	0f b6 d2             	movzx  edx,dl
c0022a08:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c0022a0f:	0f b6 d3             	movzx  edx,bl
c0022a12:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c0022a16:	eb 19                	jmp    c0022a31 <IDE::read(unsigned char, unsigned char)+0xa5>
c0022a18:	31 c0                	xor    eax,eax
c0022a1a:	80 fb 15             	cmp    bl,0x15
c0022a1d:	77 13                	ja     c0022a32 <IDE::read(unsigned char, unsigned char)+0xa6>
c0022a1f:	0f b6 d2             	movzx  edx,dl
c0022a22:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c0022a2a:	0f b6 d3             	movzx  edx,bl
c0022a2d:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c0022a31:	ec                   	in     al,dx
c0022a32:	83 c4 1c             	add    esp,0x1c
c0022a35:	5b                   	pop    ebx
c0022a36:	5e                   	pop    esi
c0022a37:	5f                   	pop    edi
c0022a38:	5d                   	pop    ebp
c0022a39:	c3                   	ret    

c0022a3a <IDE::waitInterrupt(unsigned char)>:
c0022a3a:	55                   	push   ebp
c0022a3b:	57                   	push   edi
c0022a3c:	56                   	push   esi
c0022a3d:	53                   	push   ebx
c0022a3e:	31 db                	xor    ebx,ebx
c0022a40:	83 ec 0c             	sub    esp,0xc
c0022a43:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0022a47:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c0022a4c:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c0022a54:	89 e8                	mov    eax,ebp
c0022a56:	84 c0                	test   al,al
c0022a58:	75 34                	jne    c0022a8e <IDE::waitInterrupt(unsigned char)+0x54>
c0022a5a:	52                   	push   edx
c0022a5b:	6a 0c                	push   0xc
c0022a5d:	56                   	push   esi
c0022a5e:	57                   	push   edi
c0022a5f:	e8 28 ff ff ff       	call   c002298c <IDE::read(unsigned char, unsigned char)>
c0022a64:	83 c4 10             	add    esp,0x10
c0022a67:	a8 01                	test   al,0x1
c0022a69:	75 2b                	jne    c0022a96 <IDE::waitInterrupt(unsigned char)+0x5c>
c0022a6b:	f6 c3 04             	test   bl,0x4
c0022a6e:	75 16                	jne    c0022a86 <IDE::waitInterrupt(unsigned char)+0x4c>
c0022a70:	83 fb 32             	cmp    ebx,0x32
c0022a73:	7e 11                	jle    c0022a86 <IDE::waitInterrupt(unsigned char)+0x4c>
c0022a75:	50                   	push   eax
c0022a76:	50                   	push   eax
c0022a77:	6a 00                	push   0x0
c0022a79:	68 80 96 98 00       	push   0x989680
c0022a7e:	e8 8b b1 ff ff       	call   c001dc0e <nanoSleep(unsigned long long)>
c0022a83:	83 c4 10             	add    esp,0x10
c0022a86:	83 fb 3c             	cmp    ebx,0x3c
c0022a89:	74 0b                	je     c0022a96 <IDE::waitInterrupt(unsigned char)+0x5c>
c0022a8b:	43                   	inc    ebx
c0022a8c:	eb be                	jmp    c0022a4c <IDE::waitInterrupt(unsigned char)+0x12>
c0022a8e:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c0022a96:	83 c4 0c             	add    esp,0xc
c0022a99:	89 e8                	mov    eax,ebp
c0022a9b:	5b                   	pop    ebx
c0022a9c:	5e                   	pop    esi
c0022a9d:	5f                   	pop    edi
c0022a9e:	5d                   	pop    ebp
c0022a9f:	c3                   	ret    

c0022aa0 <ideChannel0IRQHandler(regs*, void*)>:
c0022aa0:	83 ec 10             	sub    esp,0x10
c0022aa3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0022aa7:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c0022aae:	6a 07                	push   0x7
c0022ab0:	6a 00                	push   0x0
c0022ab2:	50                   	push   eax
c0022ab3:	e8 d4 fe ff ff       	call   c002298c <IDE::read(unsigned char, unsigned char)>
c0022ab8:	83 c4 1c             	add    esp,0x1c
c0022abb:	c3                   	ret    

c0022abc <ideChannel1IRQHandler(regs*, void*)>:
c0022abc:	83 ec 10             	sub    esp,0x10
c0022abf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0022ac3:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c0022aca:	6a 07                	push   0x7
c0022acc:	6a 01                	push   0x1
c0022ace:	50                   	push   eax
c0022acf:	e8 b8 fe ff ff       	call   c002298c <IDE::read(unsigned char, unsigned char)>
c0022ad4:	83 c4 1c             	add    esp,0x1c
c0022ad7:	c3                   	ret    

c0022ad8 <IDE::enableIRQs(unsigned char, bool)>:
c0022ad8:	57                   	push   edi
c0022ad9:	56                   	push   esi
c0022ada:	be 04 00 00 00       	mov    esi,0x4
c0022adf:	53                   	push   ebx
c0022ae0:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0022ae5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0022ae9:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c0022aee:	0f 94 c0             	sete   al
c0022af1:	d1 e0                	shl    eax,1
c0022af3:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c0022afa:	0f b6 c0             	movzx  eax,al
c0022afd:	50                   	push   eax
c0022afe:	6a 0c                	push   0xc
c0022b00:	57                   	push   edi
c0022b01:	53                   	push   ebx
c0022b02:	e8 c5 fd ff ff       	call   c00228cc <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022b07:	83 c4 10             	add    esp,0x10
c0022b0a:	50                   	push   eax
c0022b0b:	6a 0c                	push   0xc
c0022b0d:	57                   	push   edi
c0022b0e:	53                   	push   ebx
c0022b0f:	e8 78 fe ff ff       	call   c002298c <IDE::read(unsigned char, unsigned char)>
c0022b14:	83 c4 10             	add    esp,0x10
c0022b17:	4e                   	dec    esi
c0022b18:	75 f0                	jne    c0022b0a <IDE::enableIRQs(unsigned char, bool)+0x32>
c0022b1a:	5b                   	pop    ebx
c0022b1b:	5e                   	pop    esi
c0022b1c:	5f                   	pop    edi
c0022b1d:	c3                   	ret    

c0022b1e <IDE::open(int, int, void*)>:
c0022b1e:	55                   	push   ebp
c0022b1f:	57                   	push   edi
c0022b20:	56                   	push   esi
c0022b21:	53                   	push   ebx
c0022b22:	83 ec 1c             	sub    esp,0x1c
c0022b25:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0022b29:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c0022b32:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c0022b3b:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c0022b42:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c0022b49:	0f 85 b0 02 00 00    	jne    c0022dff <IDE::open(int, int, void*)+0x2e1>
c0022b4f:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c0022b55:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0022b59:	83 e0 7f             	and    eax,0x7f
c0022b5c:	3c 05                	cmp    al,0x5
c0022b5e:	74 04                	je     c0022b64 <IDE::open(int, int, void*)+0x46>
c0022b60:	3c 0f                	cmp    al,0xf
c0022b62:	75 32                	jne    c0022b96 <IDE::open(int, int, void*)+0x78>
c0022b64:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c0022b6a:	83 e0 fc             	and    eax,0xfffffffc
c0022b6d:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c0022b74:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c0022b7a:	83 e0 fc             	and    eax,0xfffffffc
c0022b7d:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c0022b84:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c0022b8a:	83 e0 fc             	and    eax,0xfffffffc
c0022b8d:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0022b94:	eb 14                	jmp    c0022baa <IDE::open(int, int, void*)+0x8c>
c0022b96:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0022ba0:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0022baa:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c0022bb1:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c0022bb8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0022bbc:	89 c6                	mov    esi,eax
c0022bbe:	bf f8 0c 00 00       	mov    edi,0xcf8
c0022bc3:	c1 e6 10             	shl    esi,0x10
c0022bc6:	89 e8                	mov    eax,ebp
c0022bc8:	89 fa                	mov    edx,edi
c0022bca:	c1 e0 0b             	shl    eax,0xb
c0022bcd:	09 f0                	or     eax,esi
c0022bcf:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c0022bd6:	c1 e6 08             	shl    esi,0x8
c0022bd9:	09 c6                	or     esi,eax
c0022bdb:	89 f0                	mov    eax,esi
c0022bdd:	0d 08 00 00 80       	or     eax,0x80000008
c0022be2:	ef                   	out    dx,eax
c0022be3:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c0022be8:	89 ca                	mov    edx,ecx
c0022bea:	ed                   	in     eax,dx
c0022beb:	c1 e8 10             	shr    eax,0x10
c0022bee:	3d ff ff 00 00       	cmp    eax,0xffff
c0022bf3:	0f 84 f5 00 00 00    	je     c0022cee <IDE::open(int, int, void*)+0x1d0>
c0022bf9:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c0022bff:	89 fa                	mov    edx,edi
c0022c01:	89 f0                	mov    eax,esi
c0022c03:	ef                   	out    dx,eax
c0022c04:	b0 fe                	mov    al,0xfe
c0022c06:	89 ca                	mov    edx,ecx
c0022c08:	ee                   	out    dx,al
c0022c09:	89 f0                	mov    eax,esi
c0022c0b:	89 fa                	mov    edx,edi
c0022c0d:	ef                   	out    dx,eax
c0022c0e:	89 ca                	mov    edx,ecx
c0022c10:	ed                   	in     eax,dx
c0022c11:	3c fe                	cmp    al,0xfe
c0022c13:	0f 85 a9 00 00 00    	jne    c0022cc2 <IDE::open(int, int, void*)+0x1a4>
c0022c19:	8b 15 68 db 02 c0    	mov    edx,DWORD PTR ds:0xc002db68
c0022c1f:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c0022c26:	74 33                	je     c0022c5b <IDE::open(int, int, void*)+0x13d>
c0022c28:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c0022c2e:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c0022c32:	40                   	inc    eax
c0022c33:	83 ec 0c             	sub    esp,0xc
c0022c36:	0f b6 c0             	movzx  eax,al
c0022c39:	50                   	push   eax
c0022c3a:	55                   	push   ebp
c0022c3b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0022c3f:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c0022c45:	51                   	push   ecx
c0022c46:	e8 71 51 ff ff       	call   c0017dbc <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c0022c4b:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c0022c50:	83 c4 1c             	add    esp,0x1c
c0022c53:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0022c59:	eb 0a                	jmp    c0022c65 <IDE::open(int, int, void*)+0x147>
c0022c5b:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c0022c65:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c0022c6c:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c0022c73:	c1 e1 10             	shl    ecx,0x10
c0022c76:	c1 e0 08             	shl    eax,0x8
c0022c79:	bf f8 0c 00 00       	mov    edi,0xcf8
c0022c7e:	09 c1                	or     ecx,eax
c0022c80:	89 fa                	mov    edx,edi
c0022c82:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c0022c89:	c1 e0 0b             	shl    eax,0xb
c0022c8c:	09 c1                	or     ecx,eax
c0022c8e:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c0022c94:	89 c8                	mov    eax,ecx
c0022c96:	ef                   	out    dx,eax
c0022c97:	be fc 0c 00 00       	mov    esi,0xcfc
c0022c9c:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c0022ca2:	89 f2                	mov    edx,esi
c0022ca4:	ee                   	out    dx,al
c0022ca5:	89 c8                	mov    eax,ecx
c0022ca7:	89 fa                	mov    edx,edi
c0022ca9:	ef                   	out    dx,eax
c0022caa:	89 f2                	mov    edx,esi
c0022cac:	ed                   	in     eax,dx
c0022cad:	0f b6 c0             	movzx  eax,al
c0022cb0:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c0022cb6:	74 46                	je     c0022cfe <IDE::open(int, int, void*)+0x1e0>
c0022cb8:	83 ec 0c             	sub    esp,0xc
c0022cbb:	68 f4 c1 02 c0       	push   0xc002c1f4
c0022cc0:	eb 34                	jmp    c0022cf6 <IDE::open(int, int, void*)+0x1d8>
c0022cc2:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c0022ccb:	75 17                	jne    c0022ce4 <IDE::open(int, int, void*)+0x1c6>
c0022ccd:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c0022cd2:	74 07                	je     c0022cdb <IDE::open(int, int, void*)+0x1bd>
c0022cd4:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c0022cd9:	75 09                	jne    c0022ce4 <IDE::open(int, int, void*)+0x1c6>
c0022cdb:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0022ce2:	eb 1a                	jmp    c0022cfe <IDE::open(int, int, void*)+0x1e0>
c0022ce4:	83 ec 0c             	sub    esp,0xc
c0022ce7:	68 fc c1 02 c0       	push   0xc002c1fc
c0022cec:	eb 08                	jmp    c0022cf6 <IDE::open(int, int, void*)+0x1d8>
c0022cee:	83 ec 0c             	sub    esp,0xc
c0022cf1:	68 2d c2 02 c0       	push   0xc002c22d
c0022cf6:	e8 34 73 ff ff       	call   c001a02f <Krnl::panic(char const*)>
c0022cfb:	83 c4 10             	add    esp,0x10
c0022cfe:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c0022d05:	79 1a                	jns    c0022d21 <IDE::open(int, int, void*)+0x203>
c0022d07:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c0022d0d:	83 e0 fc             	and    eax,0xfffffffc
c0022d10:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c0022d17:	83 c0 08             	add    eax,0x8
c0022d1a:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c0022d21:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0022d27:	89 c2                	mov    edx,eax
c0022d29:	83 e2 0f             	and    edx,0xf
c0022d2c:	66 83 fa 08          	cmp    dx,0x8
c0022d30:	75 0a                	jne    c0022d3c <IDE::open(int, int, void*)+0x21e>
c0022d32:	83 e8 02             	sub    eax,0x2
c0022d35:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0022d3c:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c0022d42:	89 c2                	mov    edx,eax
c0022d44:	83 e2 0f             	and    edx,0xf
c0022d47:	66 83 fa 08          	cmp    dx,0x8
c0022d4b:	75 0a                	jne    c0022d57 <IDE::open(int, int, void*)+0x239>
c0022d4d:	83 e8 02             	sub    eax,0x2
c0022d50:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c0022d57:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0022d5e:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c0022d65:	89 d0                	mov    eax,edx
c0022d67:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0022d6a:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0022d6e:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c0022d72:	8d 4a 01             	lea    ecx,[edx+0x1]
c0022d75:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0022d7a:	0f b6 c9             	movzx  ecx,cl
c0022d7d:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c0022d84:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0022d87:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0022d8b:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c0022d8f:	8d 50 02             	lea    edx,[eax+0x2]
c0022d92:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0022d97:	0f b6 d2             	movzx  edx,dl
c0022d9a:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0022da0:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0022da3:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0022da7:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c0022dab:	8d 48 03             	lea    ecx,[eax+0x3]
c0022dae:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0022db3:	0f b6 c9             	movzx  ecx,cl
c0022db6:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c0022dbc:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0022dbf:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0022dc3:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c0022dc7:	8d 50 04             	lea    edx,[eax+0x4]
c0022dca:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c0022dd0:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0022dd5:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c0022ddc:	66 85 f6             	test   si,si
c0022ddf:	74 3e                	je     c0022e1f <IDE::open(int, int, void*)+0x301>
c0022de1:	0f b6 d2             	movzx  edx,dl
c0022de4:	83 c0 05             	add    eax,0x5
c0022de7:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0022dea:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0022dee:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c0022df2:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0022df8:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0022dfd:	eb 20                	jmp    c0022e1f <IDE::open(int, int, void*)+0x301>
c0022dff:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0022e09:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0022e13:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0022e1a:	e9 02 ff ff ff       	jmp    c0022d21 <IDE::open(int, int, void*)+0x203>
c0022e1f:	52                   	push   edx
c0022e20:	52                   	push   edx
c0022e21:	6a 00                	push   0x0
c0022e23:	53                   	push   ebx
c0022e24:	e8 7d fa ff ff       	call   c00228a6 <IDE::prepareInterrupt(unsigned char)>
c0022e29:	59                   	pop    ecx
c0022e2a:	5e                   	pop    esi
c0022e2b:	6a 01                	push   0x1
c0022e2d:	53                   	push   ebx
c0022e2e:	e8 73 fa ff ff       	call   c00228a6 <IDE::prepareInterrupt(unsigned char)>
c0022e33:	83 c4 0c             	add    esp,0xc
c0022e36:	6a 00                	push   0x0
c0022e38:	6a 00                	push   0x0
c0022e3a:	53                   	push   ebx
c0022e3b:	e8 98 fc ff ff       	call   c0022ad8 <IDE::enableIRQs(unsigned char, bool)>
c0022e40:	83 c4 0c             	add    esp,0xc
c0022e43:	6a 00                	push   0x0
c0022e45:	6a 01                	push   0x1
c0022e47:	53                   	push   ebx
c0022e48:	e8 8b fc ff ff       	call   c0022ad8 <IDE::enableIRQs(unsigned char, bool)>
c0022e4d:	83 c4 10             	add    esp,0x10
c0022e50:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c0022e57:	74 40                	je     c0022e99 <IDE::open(int, int, void*)+0x37b>
c0022e59:	83 ec 0c             	sub    esp,0xc
c0022e5c:	68 57 c2 02 c0       	push   0xc002c257
c0022e61:	e8 af fc fe ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c0022e66:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0022e69:	6a 01                	push   0x1
c0022e6b:	68 a0 2a 02 c0       	push   0xc0022aa0
c0022e70:	6a 0e                	push   0xe
c0022e72:	53                   	push   ebx
c0022e73:	e8 48 10 ff ff       	call   c0013ec0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0022e78:	83 c4 14             	add    esp,0x14
c0022e7b:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0022e81:	53                   	push   ebx
c0022e82:	6a 01                	push   0x1
c0022e84:	68 bc 2a 02 c0       	push   0xc0022abc
c0022e89:	6a 0f                	push   0xf
c0022e8b:	53                   	push   ebx
c0022e8c:	e8 2f 10 ff ff       	call   c0013ec0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0022e91:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c0022e97:	eb 4a                	jmp    c0022ee3 <IDE::open(int, int, void*)+0x3c5>
c0022e99:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c0022ea3:	50                   	push   eax
c0022ea4:	6a 0f                	push   0xf
c0022ea6:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0022eac:	68 73 c2 02 c0       	push   0xc002c273
c0022eb1:	e8 5f fc fe ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c0022eb6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0022eb9:	6a 00                	push   0x0
c0022ebb:	68 a0 2a 02 c0       	push   0xc0022aa0
c0022ec0:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0022ec6:	53                   	push   ebx
c0022ec7:	e8 f4 0f ff ff       	call   c0013ec0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0022ecc:	83 c4 14             	add    esp,0x14
c0022ecf:	53                   	push   ebx
c0022ed0:	6a 00                	push   0x0
c0022ed2:	68 bc 2a 02 c0       	push   0xc0022abc
c0022ed7:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c0022edd:	53                   	push   ebx
c0022ede:	e8 dd 0f ff ff       	call   c0013ec0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0022ee3:	8b 03                	mov    eax,DWORD PTR [ebx]
c0022ee5:	83 c4 20             	add    esp,0x20
c0022ee8:	83 ec 0c             	sub    esp,0xc
c0022eeb:	53                   	push   ebx
c0022eec:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0022eef:	83 c4 0c             	add    esp,0xc
c0022ef2:	6a 07                	push   0x7
c0022ef4:	6a 00                	push   0x0
c0022ef6:	53                   	push   ebx
c0022ef7:	e8 90 fa ff ff       	call   c002298c <IDE::read(unsigned char, unsigned char)>
c0022efc:	83 c4 0c             	add    esp,0xc
c0022eff:	6a 07                	push   0x7
c0022f01:	6a 01                	push   0x1
c0022f03:	53                   	push   ebx
c0022f04:	e8 83 fa ff ff       	call   c002298c <IDE::read(unsigned char, unsigned char)>
c0022f09:	83 c4 0c             	add    esp,0xc
c0022f0c:	6a 01                	push   0x1
c0022f0e:	6a 00                	push   0x0
c0022f10:	53                   	push   ebx
c0022f11:	e8 c2 fb ff ff       	call   c0022ad8 <IDE::enableIRQs(unsigned char, bool)>
c0022f16:	83 c4 0c             	add    esp,0xc
c0022f19:	6a 01                	push   0x1
c0022f1b:	6a 01                	push   0x1
c0022f1d:	53                   	push   ebx
c0022f1e:	e8 b5 fb ff ff       	call   c0022ad8 <IDE::enableIRQs(unsigned char, bool)>
c0022f23:	83 c4 2c             	add    esp,0x2c
c0022f26:	31 c0                	xor    eax,eax
c0022f28:	5b                   	pop    ebx
c0022f29:	5e                   	pop    esi
c0022f2a:	5f                   	pop    edi
c0022f2b:	5d                   	pop    ebp
c0022f2c:	c3                   	ret    
c0022f2d:	90                   	nop

c0022f2e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c0022f2e:	55                   	push   ebp
c0022f2f:	57                   	push   edi
c0022f30:	56                   	push   esi
c0022f31:	53                   	push   ebx
c0022f32:	83 ec 1c             	sub    esp,0x1c
c0022f35:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0022f39:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0022f3d:	8d 50 f8             	lea    edx,[eax-0x8]
c0022f40:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0022f44:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0022f48:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0022f4c:	80 fa 03             	cmp    dl,0x3
c0022f4f:	77 5d                	ja     c0022fae <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c0022f51:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0022f55:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022f59:	0f b6 db             	movzx  ebx,bl
c0022f5c:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c0022f5f:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c0022f63:	83 ca 80             	or     edx,0xffffff80
c0022f66:	0f b6 d2             	movzx  edx,dl
c0022f69:	52                   	push   edx
c0022f6a:	6a 0c                	push   0xc
c0022f6c:	53                   	push   ebx
c0022f6d:	56                   	push   esi
c0022f6e:	e8 59 f9 ff ff       	call   c00228cc <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022f73:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c0022f78:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0022f7c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0022f80:	0f b6 c0             	movzx  eax,al
c0022f83:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c0022f87:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0022f89:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c0022f8e:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c0022f92:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0022f96:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0022f9a:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0022fa2:	83 c4 2c             	add    esp,0x2c
c0022fa5:	5b                   	pop    ebx
c0022fa6:	5e                   	pop    esi
c0022fa7:	5f                   	pop    edi
c0022fa8:	5d                   	pop    ebp
c0022fa9:	e9 1e f9 ff ff       	jmp    c00228cc <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022fae:	3c 07                	cmp    al,0x7
c0022fb0:	77 10                	ja     c0022fc2 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c0022fb2:	0f b6 db             	movzx  ebx,bl
c0022fb5:	0f b6 d0             	movzx  edx,al
c0022fb8:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c0022fc0:	eb 2d                	jmp    c0022fef <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0022fc2:	3c 0d                	cmp    al,0xd
c0022fc4:	77 13                	ja     c0022fd9 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c0022fc6:	0f b6 db             	movzx  ebx,bl
c0022fc9:	0f b6 c0             	movzx  eax,al
c0022fcc:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c0022fd3:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c0022fd7:	eb 16                	jmp    c0022fef <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0022fd9:	3c 15                	cmp    al,0x15
c0022fdb:	77 14                	ja     c0022ff1 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c0022fdd:	0f b6 db             	movzx  ebx,bl
c0022fe0:	0f b6 c0             	movzx  eax,al
c0022fe3:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c0022feb:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c0022fef:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0022ff1:	83 c4 1c             	add    esp,0x1c
c0022ff4:	5b                   	pop    ebx
c0022ff5:	5e                   	pop    esi
c0022ff6:	5f                   	pop    edi
c0022ff7:	5d                   	pop    ebp
c0022ff8:	c3                   	ret    
c0022ff9:	90                   	nop

c0022ffa <IDE::detect()>:
c0022ffa:	55                   	push   ebp
c0022ffb:	57                   	push   edi
c0022ffc:	56                   	push   esi
c0022ffd:	53                   	push   ebx
c0022ffe:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0023004:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c002300b:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c0023012:	0f 85 be 02 00 00    	jne    c00232d6 <IDE::detect()+0x2dc>
c0023018:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c002301f:	31 f6                	xor    esi,esi
c0023021:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0023029:	31 ed                	xor    ebp,ebp
c002302b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002302f:	c1 e0 06             	shl    eax,0x6
c0023032:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c002303a:	89 e8                	mov    eax,ebp
c002303c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0023040:	c1 e0 04             	shl    eax,0x4
c0023043:	83 c8 a0             	or     eax,0xffffffa0
c0023046:	0f b6 c0             	movzx  eax,al
c0023049:	50                   	push   eax
c002304a:	6a 06                	push   0x6
c002304c:	56                   	push   esi
c002304d:	53                   	push   ebx
c002304e:	e8 79 f8 ff ff       	call   c00228cc <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023053:	83 c4 0c             	add    esp,0xc
c0023056:	6a 0c                	push   0xc
c0023058:	56                   	push   esi
c0023059:	53                   	push   ebx
c002305a:	e8 2d f9 ff ff       	call   c002298c <IDE::read(unsigned char, unsigned char)>
c002305f:	83 c4 0c             	add    esp,0xc
c0023062:	6a 0c                	push   0xc
c0023064:	56                   	push   esi
c0023065:	53                   	push   ebx
c0023066:	e8 21 f9 ff ff       	call   c002298c <IDE::read(unsigned char, unsigned char)>
c002306b:	83 c4 0c             	add    esp,0xc
c002306e:	6a 0c                	push   0xc
c0023070:	56                   	push   esi
c0023071:	53                   	push   ebx
c0023072:	e8 15 f9 ff ff       	call   c002298c <IDE::read(unsigned char, unsigned char)>
c0023077:	83 c4 0c             	add    esp,0xc
c002307a:	6a 0c                	push   0xc
c002307c:	56                   	push   esi
c002307d:	53                   	push   ebx
c002307e:	e8 09 f9 ff ff       	call   c002298c <IDE::read(unsigned char, unsigned char)>
c0023083:	68 ec 00 00 00       	push   0xec
c0023088:	6a 07                	push   0x7
c002308a:	56                   	push   esi
c002308b:	53                   	push   ebx
c002308c:	e8 3b f8 ff ff       	call   c00228cc <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023091:	83 c4 1c             	add    esp,0x1c
c0023094:	6a 0c                	push   0xc
c0023096:	56                   	push   esi
c0023097:	53                   	push   ebx
c0023098:	e8 ef f8 ff ff       	call   c002298c <IDE::read(unsigned char, unsigned char)>
c002309d:	83 c4 0c             	add    esp,0xc
c00230a0:	6a 0c                	push   0xc
c00230a2:	56                   	push   esi
c00230a3:	53                   	push   ebx
c00230a4:	e8 e3 f8 ff ff       	call   c002298c <IDE::read(unsigned char, unsigned char)>
c00230a9:	83 c4 0c             	add    esp,0xc
c00230ac:	6a 0c                	push   0xc
c00230ae:	56                   	push   esi
c00230af:	53                   	push   ebx
c00230b0:	e8 d7 f8 ff ff       	call   c002298c <IDE::read(unsigned char, unsigned char)>
c00230b5:	83 c4 0c             	add    esp,0xc
c00230b8:	6a 0c                	push   0xc
c00230ba:	56                   	push   esi
c00230bb:	53                   	push   ebx
c00230bc:	e8 cb f8 ff ff       	call   c002298c <IDE::read(unsigned char, unsigned char)>
c00230c1:	83 c4 0c             	add    esp,0xc
c00230c4:	6a 0c                	push   0xc
c00230c6:	56                   	push   esi
c00230c7:	53                   	push   ebx
c00230c8:	e8 bf f8 ff ff       	call   c002298c <IDE::read(unsigned char, unsigned char)>
c00230cd:	83 c4 10             	add    esp,0x10
c00230d0:	84 c0                	test   al,al
c00230d2:	0f 84 8b 01 00 00    	je     c0023263 <IDE::detect()+0x269>
c00230d8:	31 ff                	xor    edi,edi
c00230da:	50                   	push   eax
c00230db:	6a 0c                	push   0xc
c00230dd:	56                   	push   esi
c00230de:	53                   	push   ebx
c00230df:	e8 a8 f8 ff ff       	call   c002298c <IDE::read(unsigned char, unsigned char)>
c00230e4:	83 c4 10             	add    esp,0x10
c00230e7:	a8 01                	test   al,0x1
c00230e9:	0f 85 8e 01 00 00    	jne    c002327d <IDE::detect()+0x283>
c00230ef:	84 c0                	test   al,al
c00230f1:	78 04                	js     c00230f7 <IDE::detect()+0xfd>
c00230f3:	a8 08                	test   al,0x8
c00230f5:	75 27                	jne    c002311e <IDE::detect()+0x124>
c00230f7:	47                   	inc    edi
c00230f8:	81 ff 17 01 00 00    	cmp    edi,0x117
c00230fe:	7e da                	jle    c00230da <IDE::detect()+0xe0>
c0023100:	50                   	push   eax
c0023101:	50                   	push   eax
c0023102:	6a 00                	push   0x0
c0023104:	68 40 4b 4c 00       	push   0x4c4b40
c0023109:	e8 00 ab ff ff       	call   c001dc0e <nanoSleep(unsigned long long)>
c002310e:	83 c4 10             	add    esp,0x10
c0023111:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c0023117:	75 c1                	jne    c00230da <IDE::detect()+0xe0>
c0023119:	e9 5f 01 00 00       	jmp    c002327d <IDE::detect()+0x283>
c002311e:	31 c9                	xor    ecx,ecx
c0023120:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0023124:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0023128:	83 ec 0c             	sub    esp,0xc
c002312b:	68 80 00 00 00       	push   0x80
c0023130:	57                   	push   edi
c0023131:	6a 00                	push   0x0
c0023133:	56                   	push   esi
c0023134:	53                   	push   ebx
c0023135:	e8 f4 fd ff ff       	call   c0022f2e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c002313a:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c002313f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0023143:	89 d1                	mov    ecx,edx
c0023145:	c1 e0 06             	shl    eax,0x6
c0023148:	01 d8                	add    eax,ebx
c002314a:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c0023151:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c0023158:	89 f2                	mov    edx,esi
c002315a:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c0023160:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c0023164:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c002316a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002316e:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c0023175:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c002317d:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c0023184:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c002318c:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c0023192:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c0023199:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c002319f:	8d 54 24 58          	lea    edx,[esp+0x58]
c00231a3:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00231a7:	83 c4 20             	add    esp,0x20
c00231aa:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c00231ad:	83 c0 02             	add    eax,0x2
c00231b0:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c00231b6:	83 c7 02             	add    edi,0x2
c00231b9:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c00231bc:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c00231c2:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c00231c6:	75 e2                	jne    c00231aa <IDE::detect()+0x1b0>
c00231c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00231cc:	c1 e0 06             	shl    eax,0x6
c00231cf:	01 d8                	add    eax,ebx
c00231d1:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c00231d7:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c00231de:	66 c1 ea 09          	shr    dx,0x9
c00231e2:	83 e2 01             	and    edx,0x1
c00231e5:	84 c9                	test   cl,cl
c00231e7:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c00231ed:	75 2f                	jne    c002321e <IDE::detect()+0x224>
c00231ef:	8b 80 7c 01 00 00    	mov    eax,DWORD PTR [eax+0x17c]
c00231f5:	85 c0                	test   eax,eax
c00231f7:	74 66                	je     c002325f <IDE::detect()+0x265>
c00231f9:	50                   	push   eax
c00231fa:	55                   	push   ebp
c00231fb:	56                   	push   esi
c00231fc:	68 8f c2 02 c0       	push   0xc002c28f
c0023201:	e8 0f f9 fe ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c0023206:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c002320d:	e8 34 c6 fe ff       	call   c000f846 <malloc>
c0023212:	89 c7                	mov    edi,eax
c0023214:	89 04 24             	mov    DWORD PTR [esp],eax
c0023217:	e8 78 06 00 00       	call   c0023894 <ATA::ATA()>
c002321c:	eb 28                	jmp    c0023246 <IDE::detect()+0x24c>
c002321e:	ff b0 7c 01 00 00    	push   DWORD PTR [eax+0x17c]
c0023224:	55                   	push   ebp
c0023225:	56                   	push   esi
c0023226:	68 be c2 02 c0       	push   0xc002c2be
c002322b:	e8 e5 f8 fe ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c0023230:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c0023237:	e8 0a c6 fe ff       	call   c000f846 <malloc>
c002323c:	89 c7                	mov    edi,eax
c002323e:	89 04 24             	mov    DWORD PTR [esp],eax
c0023241:	e8 8e 0c 00 00       	call   c0023ed4 <ATAPI::ATAPI()>
c0023246:	5a                   	pop    edx
c0023247:	59                   	pop    ecx
c0023248:	57                   	push   edi
c0023249:	53                   	push   ebx
c002324a:	e8 ed 0c ff ff       	call   c0013f3c <Device::addChild(Device*)>
c002324f:	8b 07                	mov    eax,DWORD PTR [edi]
c0023251:	53                   	push   ebx
c0023252:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0023256:	6a 00                	push   0x0
c0023258:	57                   	push   edi
c0023259:	ff 50 08             	call   DWORD PTR [eax+0x8]
c002325c:	83 c4 20             	add    esp,0x20
c002325f:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0023263:	4d                   	dec    ebp
c0023264:	74 0a                	je     c0023270 <IDE::detect()+0x276>
c0023266:	bd 01 00 00 00       	mov    ebp,0x1
c002326b:	e9 bb fd ff ff       	jmp    c002302b <IDE::detect()+0x31>
c0023270:	4e                   	dec    esi
c0023271:	74 63                	je     c00232d6 <IDE::detect()+0x2dc>
c0023273:	be 01 00 00 00       	mov    esi,0x1
c0023278:	e9 ac fd ff ff       	jmp    c0023029 <IDE::detect()+0x2f>
c002327d:	50                   	push   eax
c002327e:	6a 04                	push   0x4
c0023280:	56                   	push   esi
c0023281:	53                   	push   ebx
c0023282:	e8 05 f7 ff ff       	call   c002298c <IDE::read(unsigned char, unsigned char)>
c0023287:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c002328b:	83 c4 0c             	add    esp,0xc
c002328e:	6a 05                	push   0x5
c0023290:	56                   	push   esi
c0023291:	53                   	push   ebx
c0023292:	e8 f5 f6 ff ff       	call   c002298c <IDE::read(unsigned char, unsigned char)>
c0023297:	83 c4 10             	add    esp,0x10
c002329a:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c002329e:	80 fa 14             	cmp    dl,0x14
c00232a1:	75 04                	jne    c00232a7 <IDE::detect()+0x2ad>
c00232a3:	3c eb                	cmp    al,0xeb
c00232a5:	eb 07                	jmp    c00232ae <IDE::detect()+0x2b4>
c00232a7:	3c 96                	cmp    al,0x96
c00232a9:	75 b8                	jne    c0023263 <IDE::detect()+0x269>
c00232ab:	80 fa 69             	cmp    dl,0x69
c00232ae:	75 b3                	jne    c0023263 <IDE::detect()+0x269>
c00232b0:	68 a1 00 00 00       	push   0xa1
c00232b5:	6a 07                	push   0x7
c00232b7:	56                   	push   esi
c00232b8:	53                   	push   ebx
c00232b9:	e8 0e f6 ff ff       	call   c00228cc <IDE::write(unsigned char, unsigned char, unsigned char)>
c00232be:	5f                   	pop    edi
c00232bf:	58                   	pop    eax
c00232c0:	6a 00                	push   0x0
c00232c2:	68 40 42 0f 00       	push   0xf4240
c00232c7:	e8 42 a9 ff ff       	call   c001dc0e <nanoSleep(unsigned long long)>
c00232cc:	83 c4 10             	add    esp,0x10
c00232cf:	b1 01                	mov    cl,0x1
c00232d1:	e9 4a fe ff ff       	jmp    c0023120 <IDE::detect()+0x126>
c00232d6:	81 c4 1c 02 00 00    	add    esp,0x21c
c00232dc:	5b                   	pop    ebx
c00232dd:	5e                   	pop    esi
c00232de:	5f                   	pop    edi
c00232df:	5d                   	pop    ebp
c00232e0:	c3                   	ret    
c00232e1:	90                   	nop

c00232e2 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c00232e2:	55                   	push   ebp
c00232e3:	57                   	push   edi
c00232e4:	56                   	push   esi
c00232e5:	53                   	push   ebx
c00232e6:	83 ec 1c             	sub    esp,0x1c
c00232e9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00232ed:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00232f1:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00232f5:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c00232f9:	88 c3                	mov    bl,al
c00232fb:	84 c0                	test   al,al
c00232fd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023301:	0f 84 67 01 00 00    	je     c002346e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x18c>
c0023307:	83 ec 0c             	sub    esp,0xc
c002330a:	68 ef c2 02 c0       	push   0xc002c2ef
c002330f:	e8 01 f8 fe ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c0023314:	83 c4 10             	add    esp,0x10
c0023317:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002331b:	3c 01                	cmp    al,0x1
c002331d:	75 17                	jne    c0023336 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x54>
c002331f:	83 ec 0c             	sub    esp,0xc
c0023322:	b3 13                	mov    bl,0x13
c0023324:	68 fb c2 02 c0       	push   0xc002c2fb
c0023329:	e8 e7 f7 fe ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c002332e:	83 c4 10             	add    esp,0x10
c0023331:	e9 25 01 00 00       	jmp    c002345b <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023336:	3c 02                	cmp    al,0x2
c0023338:	0f 85 ef 00 00 00    	jne    c002342d <IDE::printError(unsigned char, unsigned char, unsigned char)+0x14b>
c002333e:	d1 e6                	shl    esi,1
c0023340:	09 ee                	or     esi,ebp
c0023342:	52                   	push   edx
c0023343:	89 f0                	mov    eax,esi
c0023345:	6a 01                	push   0x1
c0023347:	0f b6 f0             	movzx  esi,al
c002334a:	c1 e6 06             	shl    esi,0x6
c002334d:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c0023355:	50                   	push   eax
c0023356:	57                   	push   edi
c0023357:	e8 30 f6 ff ff       	call   c002298c <IDE::read(unsigned char, unsigned char)>
c002335c:	83 c4 10             	add    esp,0x10
c002335f:	89 c6                	mov    esi,eax
c0023361:	a8 01                	test   al,0x1
c0023363:	74 12                	je     c0023377 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x95>
c0023365:	83 ec 0c             	sub    esp,0xc
c0023368:	b3 07                	mov    bl,0x7
c002336a:	68 10 c3 02 c0       	push   0xc002c310
c002336f:	e8 a1 f7 fe ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c0023374:	83 c4 10             	add    esp,0x10
c0023377:	f7 c6 02 00 00 00    	test   esi,0x2
c002337d:	74 12                	je     c0023391 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c002337f:	83 ec 0c             	sub    esp,0xc
c0023382:	b3 03                	mov    bl,0x3
c0023384:	68 2e c3 02 c0       	push   0xc002c32e
c0023389:	e8 87 f7 fe ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c002338e:	83 c4 10             	add    esp,0x10
c0023391:	f7 c6 04 00 00 00    	test   esi,0x4
c0023397:	74 12                	je     c00233ab <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c0023399:	83 ec 0c             	sub    esp,0xc
c002339c:	b3 14                	mov    bl,0x14
c002339e:	68 4e c3 02 c0       	push   0xc002c34e
c00233a3:	e8 6d f7 fe ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c00233a8:	83 c4 10             	add    esp,0x10
c00233ab:	f7 c6 08 00 00 00    	test   esi,0x8
c00233b1:	74 12                	je     c00233c5 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xe3>
c00233b3:	83 ec 0c             	sub    esp,0xc
c00233b6:	b3 03                	mov    bl,0x3
c00233b8:	68 2e c3 02 c0       	push   0xc002c32e
c00233bd:	e8 53 f7 fe ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c00233c2:	83 c4 10             	add    esp,0x10
c00233c5:	f7 c6 10 00 00 00    	test   esi,0x10
c00233cb:	74 12                	je     c00233df <IDE::printError(unsigned char, unsigned char, unsigned char)+0xfd>
c00233cd:	83 ec 0c             	sub    esp,0xc
c00233d0:	b3 15                	mov    bl,0x15
c00233d2:	68 66 c3 02 c0       	push   0xc002c366
c00233d7:	e8 39 f7 fe ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c00233dc:	83 c4 10             	add    esp,0x10
c00233df:	f7 c6 20 00 00 00    	test   esi,0x20
c00233e5:	74 12                	je     c00233f9 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x117>
c00233e7:	83 ec 0c             	sub    esp,0xc
c00233ea:	b3 03                	mov    bl,0x3
c00233ec:	68 2e c3 02 c0       	push   0xc002c32e
c00233f1:	e8 1f f7 fe ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c00233f6:	83 c4 10             	add    esp,0x10
c00233f9:	f7 c6 40 00 00 00    	test   esi,0x40
c00233ff:	74 12                	je     c0023413 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x131>
c0023401:	83 ec 0c             	sub    esp,0xc
c0023404:	b3 16                	mov    bl,0x16
c0023406:	68 80 c3 02 c0       	push   0xc002c380
c002340b:	e8 05 f7 fe ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c0023410:	83 c4 10             	add    esp,0x10
c0023413:	89 f0                	mov    eax,esi
c0023415:	84 c0                	test   al,al
c0023417:	79 42                	jns    c002345b <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023419:	83 ec 0c             	sub    esp,0xc
c002341c:	b3 0d                	mov    bl,0xd
c002341e:	68 a1 c3 02 c0       	push   0xc002c3a1
c0023423:	e8 ed f6 fe ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c0023428:	83 c4 10             	add    esp,0x10
c002342b:	eb 2e                	jmp    c002345b <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c002342d:	3c 03                	cmp    al,0x3
c002342f:	75 14                	jne    c0023445 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x163>
c0023431:	83 ec 0c             	sub    esp,0xc
c0023434:	b3 17                	mov    bl,0x17
c0023436:	68 b5 c3 02 c0       	push   0xc002c3b5
c002343b:	e8 d5 f6 fe ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c0023440:	83 c4 10             	add    esp,0x10
c0023443:	eb 16                	jmp    c002345b <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023445:	3c 04                	cmp    al,0x4
c0023447:	75 12                	jne    c002345b <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023449:	83 ec 0c             	sub    esp,0xc
c002344c:	b3 08                	mov    bl,0x8
c002344e:	68 cb c3 02 c0       	push   0xc002c3cb
c0023453:	e8 bd f6 fe ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c0023458:	83 c4 10             	add    esp,0x10
c002345b:	50                   	push   eax
c002345c:	50                   	push   eax
c002345d:	0f b6 c3             	movzx  eax,bl
c0023460:	50                   	push   eax
c0023461:	68 e3 c3 02 c0       	push   0xc002c3e3
c0023466:	e8 aa f6 fe ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c002346b:	83 c4 10             	add    esp,0x10
c002346e:	83 c4 1c             	add    esp,0x1c
c0023471:	88 d8                	mov    al,bl
c0023473:	5b                   	pop    ebx
c0023474:	5e                   	pop    esi
c0023475:	5f                   	pop    edi
c0023476:	5d                   	pop    ebp
c0023477:	c3                   	ret    

c0023478 <IDE::polling(unsigned char, unsigned int)>:
c0023478:	57                   	push   edi
c0023479:	56                   	push   esi
c002347a:	53                   	push   ebx
c002347b:	bb 04 00 00 00       	mov    ebx,0x4
c0023480:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0023484:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0023489:	52                   	push   edx
c002348a:	6a 0c                	push   0xc
c002348c:	56                   	push   esi
c002348d:	57                   	push   edi
c002348e:	e8 f9 f4 ff ff       	call   c002298c <IDE::read(unsigned char, unsigned char)>
c0023493:	83 c4 10             	add    esp,0x10
c0023496:	4b                   	dec    ebx
c0023497:	75 f0                	jne    c0023489 <IDE::polling(unsigned char, unsigned int)+0x11>
c0023499:	bb a0 86 01 00       	mov    ebx,0x186a0
c002349e:	50                   	push   eax
c002349f:	6a 0c                	push   0xc
c00234a1:	56                   	push   esi
c00234a2:	57                   	push   edi
c00234a3:	e8 e4 f4 ff ff       	call   c002298c <IDE::read(unsigned char, unsigned char)>
c00234a8:	83 c4 10             	add    esp,0x10
c00234ab:	a8 01                	test   al,0x1
c00234ad:	74 12                	je     c00234c1 <IDE::polling(unsigned char, unsigned int)+0x49>
c00234af:	83 ec 0c             	sub    esp,0xc
c00234b2:	68 fd c3 02 c0       	push   0xc002c3fd
c00234b7:	e8 59 f6 fe ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c00234bc:	83 c4 10             	add    esp,0x10
c00234bf:	eb 17                	jmp    c00234d8 <IDE::polling(unsigned char, unsigned int)+0x60>
c00234c1:	a8 20                	test   al,0x20
c00234c3:	75 0f                	jne    c00234d4 <IDE::polling(unsigned char, unsigned int)+0x5c>
c00234c5:	4b                   	dec    ebx
c00234c6:	74 10                	je     c00234d8 <IDE::polling(unsigned char, unsigned int)+0x60>
c00234c8:	84 c0                	test   al,al
c00234ca:	78 d2                	js     c002349e <IDE::polling(unsigned char, unsigned int)+0x26>
c00234cc:	a8 08                	test   al,0x8
c00234ce:	74 ce                	je     c002349e <IDE::polling(unsigned char, unsigned int)+0x26>
c00234d0:	31 c0                	xor    eax,eax
c00234d2:	eb 06                	jmp    c00234da <IDE::polling(unsigned char, unsigned int)+0x62>
c00234d4:	b0 01                	mov    al,0x1
c00234d6:	eb 02                	jmp    c00234da <IDE::polling(unsigned char, unsigned int)+0x62>
c00234d8:	b0 02                	mov    al,0x2
c00234da:	5b                   	pop    ebx
c00234db:	5e                   	pop    esi
c00234dc:	5f                   	pop    edi
c00234dd:	c3                   	ret    

c00234de <SATABus::close(int, int, void*)>:
c00234de:	31 c0                	xor    eax,eax
c00234e0:	c3                   	ret    
c00234e1:	90                   	nop

c00234e2 <SATABus::detect()>:
c00234e2:	c3                   	ret    
c00234e3:	90                   	nop

c00234e4 <SATABus::SATABus()>:
c00234e4:	83 ec 0c             	sub    esp,0xc
c00234e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00234eb:	83 ec 08             	sub    esp,0x8
c00234ee:	68 40 c4 02 c0       	push   0xc002c440
c00234f3:	50                   	push   eax
c00234f4:	e8 cf 0d ff ff       	call   c00142c8 <HardDiskController::HardDiskController(char const*)>
c00234f9:	83 c4 10             	add    esp,0x10
c00234fc:	ba fc c4 02 c0       	mov    edx,0xc002c4fc
c0023501:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023505:	89 10                	mov    DWORD PTR [eax],edx
c0023507:	83 ec 0c             	sub    esp,0xc
c002350a:	6a 50                	push   0x50
c002350c:	e8 9a ca fe ff       	call   c000ffab <Phys::allocateContiguousPages(int)>
c0023511:	83 c4 10             	add    esp,0x10
c0023514:	89 c2                	mov    edx,eax
c0023516:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002351a:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0023520:	83 ec 0c             	sub    esp,0xc
c0023523:	6a 50                	push   0x50
c0023525:	e8 fb e5 fe ff       	call   c0011b25 <Virt::allocateKernelVirtualPages(int)>
c002352a:	83 c4 10             	add    esp,0x10
c002352d:	89 c2                	mov    edx,eax
c002352f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023533:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0023539:	e8 77 e7 fe ff       	call   c0011cb5 <Virt::getAKernelVAS()>
c002353e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0023542:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c0023548:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002354c:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0023552:	83 ec 0c             	sub    esp,0xc
c0023555:	6a 03                	push   0x3
c0023557:	6a 50                	push   0x50
c0023559:	51                   	push   ecx
c002355a:	52                   	push   edx
c002355b:	50                   	push   eax
c002355c:	e8 83 ef fe ff       	call   c00124e4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0023561:	83 c4 20             	add    esp,0x20
c0023564:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023568:	8b 90 58 01 00 00    	mov    edx,DWORD PTR [eax+0x158]
c002356e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023572:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0023578:	83 ec 04             	sub    esp,0x4
c002357b:	52                   	push   edx
c002357c:	50                   	push   eax
c002357d:	68 64 c4 02 c0       	push   0xc002c464
c0023582:	e8 8e f5 fe ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c0023587:	83 c4 10             	add    esp,0x10
c002358a:	90                   	nop
c002358b:	83 c4 0c             	add    esp,0xc
c002358e:	c3                   	ret    
c002358f:	90                   	nop

c0023590 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c0023590:	83 ec 0c             	sub    esp,0xc
c0023593:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023597:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c002359a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c002359d:	09 c2                	or     edx,eax
c002359f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00235a3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00235a9:	8b 08                	mov    ecx,DWORD PTR [eax]
c00235ab:	31 c0                	xor    eax,eax
c00235ad:	c1 e9 08             	shr    ecx,0x8
c00235b0:	83 e1 0f             	and    ecx,0xf
c00235b3:	39 c8                	cmp    eax,ecx
c00235b5:	74 0a                	je     c00235c1 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c00235b7:	f6 c2 01             	test   dl,0x1
c00235ba:	74 18                	je     c00235d4 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x44>
c00235bc:	d1 ea                	shr    edx,1
c00235be:	40                   	inc    eax
c00235bf:	eb f2                	jmp    c00235b3 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x23>
c00235c1:	83 ec 0c             	sub    esp,0xc
c00235c4:	68 88 c4 02 c0       	push   0xc002c488
c00235c9:	e8 61 6a ff ff       	call   c001a02f <Krnl::panic(char const*)>
c00235ce:	83 c4 10             	add    esp,0x10
c00235d1:	83 c8 ff             	or     eax,0xffffffff
c00235d4:	83 c4 0c             	add    esp,0xc
c00235d7:	c3                   	ret    

c00235d8 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c00235d8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00235dc:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c00235df:	89 c2                	mov    edx,eax
c00235e1:	c1 ea 08             	shr    edx,0x8
c00235e4:	83 e2 0f             	and    edx,0xf
c00235e7:	fe ca                	dec    dl
c00235e9:	75 31                	jne    c002361c <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c00235eb:	83 e0 0f             	and    eax,0xf
c00235ee:	3c 03                	cmp    al,0x3
c00235f0:	75 2a                	jne    c002361c <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c00235f2:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c00235f5:	b8 02 00 00 00       	mov    eax,0x2
c00235fa:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c0023600:	74 1c                	je     c002361e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0023602:	b8 04 00 00 00       	mov    eax,0x4
c0023607:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c002360d:	74 0f                	je     c002361e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c002360f:	31 c0                	xor    eax,eax
c0023611:	83 fa 03             	cmp    edx,0x3
c0023614:	0f 94 c0             	sete   al
c0023617:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c002361b:	c3                   	ret    
c002361c:	31 c0                	xor    eax,eax
c002361e:	c3                   	ret    
c002361f:	90                   	nop

c0023620 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c0023620:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023624:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023627:	0f ba e2 0f          	bt     edx,0xf
c002362b:	72 f7                	jb     c0023624 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c002362d:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023630:	83 ca 10             	or     edx,0x10
c0023633:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023636:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023639:	83 ca 01             	or     edx,0x1
c002363c:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c002363f:	c3                   	ret    

c0023640 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c0023640:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023644:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023647:	83 e2 fe             	and    edx,0xfffffffe
c002364a:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c002364d:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023650:	83 e2 ef             	and    edx,0xffffffef
c0023653:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023656:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023659:	0f ba e2 0e          	bt     edx,0xe
c002365d:	72 f7                	jb     c0023656 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c002365f:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023662:	0f ba e2 0f          	bt     edx,0xf
c0023666:	72 ee                	jb     c0023656 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0023668:	c3                   	ret    
c0023669:	90                   	nop

c002366a <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c002366a:	55                   	push   ebp
c002366b:	57                   	push   edi
c002366c:	56                   	push   esi
c002366d:	53                   	push   ebx
c002366e:	83 ec 1c             	sub    esp,0x1c
c0023671:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023675:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023679:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c002367d:	53                   	push   ebx
c002367e:	89 fd                	mov    ebp,edi
c0023680:	56                   	push   esi
c0023681:	c1 e5 0a             	shl    ebp,0xa
c0023684:	e8 b7 ff ff ff       	call   c0023640 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0023689:	83 ec 0c             	sub    esp,0xc
c002368c:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0023692:	01 e8                	add    eax,ebp
c0023694:	89 03                	mov    DWORD PTR [ebx],eax
c0023696:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023698:	68 00 04 00 00       	push   0x400
c002369d:	6a 00                	push   0x0
c002369f:	50                   	push   eax
c00236a0:	e8 d3 d0 fd ff       	call   c0000778 <memset>
c00236a5:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c00236ab:	89 fa                	mov    edx,edi
c00236ad:	01 e8                	add    eax,ebp
c00236af:	c1 e7 0d             	shl    edi,0xd
c00236b2:	89 03                	mov    DWORD PTR [ebx],eax
c00236b4:	c1 e2 08             	shl    edx,0x8
c00236b7:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00236be:	81 c2 00 80 00 00    	add    edx,0x8000
c00236c4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00236c8:	89 d0                	mov    eax,edx
c00236ca:	83 c4 1c             	add    esp,0x1c
c00236cd:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c00236d3:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00236d6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00236d9:	68 00 01 00 00       	push   0x100
c00236de:	6a 00                	push   0x0
c00236e0:	50                   	push   eax
c00236e1:	e8 92 d0 fd ff       	call   c0000778 <memset>
c00236e6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00236ea:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c00236f0:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c00236f6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00236fa:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00236fd:	83 c4 10             	add    esp,0x10
c0023700:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0023707:	31 ff                	xor    edi,edi
c0023709:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c002370f:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c0023715:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023719:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c002371f:	83 c5 20             	add    ebp,0x20
c0023722:	01 f8                	add    eax,edi
c0023724:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0023727:	52                   	push   edx
c0023728:	68 00 01 00 00       	push   0x100
c002372d:	6a 00                	push   0x0
c002372f:	50                   	push   eax
c0023730:	e8 43 d0 fd ff       	call   c0000778 <memset>
c0023735:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0023739:	83 c4 10             	add    esp,0x10
c002373c:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c0023742:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0023749:	01 f8                	add    eax,edi
c002374b:	81 c7 00 01 00 00    	add    edi,0x100
c0023751:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0023754:	81 ff 00 20 00 00    	cmp    edi,0x2000
c002375a:	75 b3                	jne    c002370f <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c002375c:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0023760:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0023764:	83 c4 1c             	add    esp,0x1c
c0023767:	5b                   	pop    ebx
c0023768:	5e                   	pop    esi
c0023769:	5f                   	pop    edi
c002376a:	5d                   	pop    ebp
c002376b:	e9 b0 fe ff ff       	jmp    c0023620 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c0023770 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c0023770:	55                   	push   ebp
c0023771:	57                   	push   edi
c0023772:	56                   	push   esi
c0023773:	53                   	push   ebx
c0023774:	31 db                	xor    ebx,ebx
c0023776:	83 ec 0c             	sub    esp,0xc
c0023779:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002377d:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0023781:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c0023784:	f7 c7 01 00 00 00    	test   edi,0x1
c002378a:	0f 84 aa 00 00 00    	je     c002383a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c0023790:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0023794:	89 d8                	mov    eax,ebx
c0023796:	c1 e0 07             	shl    eax,0x7
c0023799:	8d ac 02 00 01 00 00 	lea    ebp,[edx+eax*1+0x100]
c00237a0:	55                   	push   ebp
c00237a1:	56                   	push   esi
c00237a2:	e8 31 fe ff ff       	call   c00235d8 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c00237a7:	5a                   	pop    edx
c00237a8:	83 f8 01             	cmp    eax,0x1
c00237ab:	59                   	pop    ecx
c00237ac:	75 30                	jne    c00237de <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x6e>
c00237ae:	50                   	push   eax
c00237af:	50                   	push   eax
c00237b0:	53                   	push   ebx
c00237b1:	68 ad c4 02 c0       	push   0xc002c4ad
c00237b6:	e8 5a f3 fe ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c00237bb:	83 c4 0c             	add    esp,0xc
c00237be:	53                   	push   ebx
c00237bf:	55                   	push   ebp
c00237c0:	56                   	push   esi
c00237c1:	e8 a4 fe ff ff       	call   c002366a <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c00237c6:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c00237cd:	e8 74 c0 fe ff       	call   c000f846 <malloc>
c00237d2:	89 c5                	mov    ebp,eax
c00237d4:	89 04 24             	mov    DWORD PTR [esp],eax
c00237d7:	e8 60 0d 00 00       	call   c002453c <SATA::SATA()>
c00237dc:	eb 33                	jmp    c0023811 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xa1>
c00237de:	83 f8 04             	cmp    eax,0x4
c00237e1:	75 47                	jne    c002382a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xba>
c00237e3:	50                   	push   eax
c00237e4:	50                   	push   eax
c00237e5:	53                   	push   ebx
c00237e6:	68 c4 c4 02 c0       	push   0xc002c4c4
c00237eb:	e8 25 f3 fe ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c00237f0:	83 c4 0c             	add    esp,0xc
c00237f3:	53                   	push   ebx
c00237f4:	55                   	push   ebp
c00237f5:	56                   	push   esi
c00237f6:	e8 6f fe ff ff       	call   c002366a <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c00237fb:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c0023802:	e8 3f c0 fe ff       	call   c000f846 <malloc>
c0023807:	89 c5                	mov    ebp,eax
c0023809:	89 04 24             	mov    DWORD PTR [esp],eax
c002380c:	e8 d7 10 00 00       	call   c00248e8 <SATAPI::SATAPI()>
c0023811:	5a                   	pop    edx
c0023812:	59                   	pop    ecx
c0023813:	55                   	push   ebp
c0023814:	56                   	push   esi
c0023815:	e8 22 07 ff ff       	call   c0013f3c <Device::addChild(Device*)>
c002381a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c002381d:	56                   	push   esi
c002381e:	6a 00                	push   0x0
c0023820:	53                   	push   ebx
c0023821:	55                   	push   ebp
c0023822:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0023825:	83 c4 20             	add    esp,0x20
c0023828:	eb 10                	jmp    c002383a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c002382a:	50                   	push   eax
c002382b:	50                   	push   eax
c002382c:	53                   	push   ebx
c002382d:	68 dd c4 02 c0       	push   0xc002c4dd
c0023832:	e8 de f2 fe ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c0023837:	83 c4 10             	add    esp,0x10
c002383a:	d1 ef                	shr    edi,1
c002383c:	43                   	inc    ebx
c002383d:	83 fb 20             	cmp    ebx,0x20
c0023840:	0f 85 3e ff ff ff    	jne    c0023784 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c0023846:	83 c4 0c             	add    esp,0xc
c0023849:	5b                   	pop    ebx
c002384a:	5e                   	pop    esi
c002384b:	5f                   	pop    edi
c002384c:	5d                   	pop    ebp
c002384d:	c3                   	ret    

c002384e <SATABus::open(int, int, void*)>:
c002384e:	83 ec 14             	sub    esp,0x14
c0023851:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023855:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c002385b:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0023861:	52                   	push   edx
c0023862:	50                   	push   eax
c0023863:	e8 08 ff ff ff       	call   c0023770 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c0023868:	31 c0                	xor    eax,eax
c002386a:	83 c4 1c             	add    esp,0x1c
c002386d:	c3                   	ret    

c002386e <ATA::close(int, int, void*)>:
c002386e:	83 ec 0c             	sub    esp,0xc
c0023871:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023875:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002387b:	85 c0                	test   eax,eax
c002387d:	74 0c                	je     c002388b <ATA::close(int, int, void*)+0x1d>
c002387f:	83 ec 0c             	sub    esp,0xc
c0023882:	8b 10                	mov    edx,DWORD PTR [eax]
c0023884:	50                   	push   eax
c0023885:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0023888:	83 c4 10             	add    esp,0x10
c002388b:	31 c0                	xor    eax,eax
c002388d:	83 c4 0c             	add    esp,0xc
c0023890:	c3                   	ret    
c0023891:	90                   	nop

c0023892 <ATA::powerSaving(PowerSavingLevel)>:
c0023892:	c3                   	ret    
c0023893:	90                   	nop

c0023894 <ATA::ATA()>:
c0023894:	83 ec 0c             	sub    esp,0xc
c0023897:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002389b:	83 ec 04             	sub    esp,0x4
c002389e:	68 00 02 00 00       	push   0x200
c00238a3:	68 c5 c5 02 c0       	push   0xc002c5c5
c00238a8:	50                   	push   eax
c00238a9:	e8 b2 0a ff ff       	call   c0014360 <PhysicalDisk::PhysicalDisk(char const*, int)>
c00238ae:	83 c4 10             	add    esp,0x10
c00238b1:	ba 48 c5 02 c0       	mov    edx,0xc002c548
c00238b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00238ba:	89 10                	mov    DWORD PTR [eax],edx
c00238bc:	90                   	nop
c00238bd:	83 c4 0c             	add    esp,0xc
c00238c0:	c3                   	ret    
c00238c1:	90                   	nop

c00238c2 <ATA::flush(bool)>:
c00238c2:	53                   	push   ebx
c00238c3:	83 ec 08             	sub    esp,0x8
c00238c6:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c00238cb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00238cf:	19 c0                	sbb    eax,eax
c00238d1:	83 e0 fd             	and    eax,0xfffffffd
c00238d4:	05 ea 00 00 00       	add    eax,0xea
c00238d9:	50                   	push   eax
c00238da:	6a 07                	push   0x7
c00238dc:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00238e3:	50                   	push   eax
c00238e4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00238ea:	e8 dd ef ff ff       	call   c00228cc <IDE::write(unsigned char, unsigned char, unsigned char)>
c00238ef:	83 c4 0c             	add    esp,0xc
c00238f2:	6a 00                	push   0x0
c00238f4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00238fb:	50                   	push   eax
c00238fc:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023902:	e8 71 fb ff ff       	call   c0023478 <IDE::polling(unsigned char, unsigned int)>
c0023907:	83 c4 18             	add    esp,0x18
c002390a:	5b                   	pop    ebx
c002390b:	c3                   	ret    

c002390c <ATA::readyForCommand()>:
c002390c:	56                   	push   esi
c002390d:	53                   	push   ebx
c002390e:	31 db                	xor    ebx,ebx
c0023910:	50                   	push   eax
c0023911:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0023915:	50                   	push   eax
c0023916:	6a 0c                	push   0xc
c0023918:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c002391f:	50                   	push   eax
c0023920:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0023926:	e8 61 f0 ff ff       	call   c002298c <IDE::read(unsigned char, unsigned char)>
c002392b:	83 c4 10             	add    esp,0x10
c002392e:	a8 88                	test   al,0x88
c0023930:	74 23                	je     c0023955 <ATA::readyForCommand()+0x49>
c0023932:	43                   	inc    ebx
c0023933:	83 fb 63             	cmp    ebx,0x63
c0023936:	7e dd                	jle    c0023915 <ATA::readyForCommand()+0x9>
c0023938:	51                   	push   ecx
c0023939:	51                   	push   ecx
c002393a:	6a 00                	push   0x0
c002393c:	68 40 42 0f 00       	push   0xf4240
c0023941:	e8 c8 a2 ff ff       	call   c001dc0e <nanoSleep(unsigned long long)>
c0023946:	83 c4 10             	add    esp,0x10
c0023949:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c002394f:	75 c4                	jne    c0023915 <ATA::readyForCommand()+0x9>
c0023951:	31 c0                	xor    eax,eax
c0023953:	eb 02                	jmp    c0023957 <ATA::readyForCommand()+0x4b>
c0023955:	b0 01                	mov    al,0x1
c0023957:	5a                   	pop    edx
c0023958:	5b                   	pop    ebx
c0023959:	5e                   	pop    esi
c002395a:	c3                   	ret    
c002395b:	90                   	nop

c002395c <ATA::access(unsigned long long, int, void*, bool)>:
c002395c:	55                   	push   ebp
c002395d:	57                   	push   edi
c002395e:	56                   	push   esi
c002395f:	53                   	push   ebx
c0023960:	83 ec 2c             	sub    esp,0x2c
c0023963:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0023967:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c002396b:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c002396f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0023973:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0023977:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c002397b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c002397f:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0023985:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023989:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c002398f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0023993:	c1 e0 06             	shl    eax,0x6
c0023996:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c002399e:	74 5d                	je     c00239fd <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c00239a0:	89 fa                	mov    edx,edi
c00239a2:	89 f0                	mov    eax,esi
c00239a4:	0f ac d0 1c          	shrd   eax,edx,0x1c
c00239a8:	c1 ea 1c             	shr    edx,0x1c
c00239ab:	89 d1                	mov    ecx,edx
c00239ad:	09 c1                	or     ecx,eax
c00239af:	74 25                	je     c00239d6 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c00239b1:	31 ed                	xor    ebp,ebp
c00239b3:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c00239ba:	89 fa                	mov    edx,edi
c00239bc:	89 f0                	mov    eax,esi
c00239be:	0f ad d0             	shrd   eax,edx,cl
c00239c1:	d3 ea                	shr    edx,cl
c00239c3:	f6 c1 20             	test   cl,0x20
c00239c6:	74 02                	je     c00239ca <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c00239c8:	89 d0                	mov    eax,edx
c00239ca:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c00239ce:	45                   	inc    ebp
c00239cf:	83 fd 06             	cmp    ebp,0x6
c00239d2:	75 df                	jne    c00239b3 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c00239d4:	eb 76                	jmp    c0023a4c <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c00239d6:	89 f0                	mov    eax,esi
c00239d8:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c00239dd:	89 fa                	mov    edx,edi
c00239df:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c00239e6:	0f ac d0 10          	shrd   eax,edx,0x10
c00239ea:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00239ef:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c00239f3:	c1 ee 18             	shr    esi,0x18
c00239f6:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c00239fb:	eb 56                	jmp    c0023a53 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c00239fd:	6a 00                	push   0x0
c00239ff:	6a 3f                	push   0x3f
c0023a01:	57                   	push   edi
c0023a02:	56                   	push   esi
c0023a03:	e8 94 29 00 00       	call   c002639c <__umoddi3>
c0023a08:	83 c4 10             	add    esp,0x10
c0023a0b:	40                   	inc    eax
c0023a0c:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0023a10:	6a 00                	push   0x0
c0023a12:	68 f0 03 00 00       	push   0x3f0
c0023a17:	57                   	push   edi
c0023a18:	56                   	push   esi
c0023a19:	e8 7e 28 00 00       	call   c002629c <__udivdi3>
c0023a1e:	83 c4 10             	add    esp,0x10
c0023a21:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c0023a26:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0023a2d:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0023a32:	6a 00                	push   0x0
c0023a34:	6a 3f                	push   0x3f
c0023a36:	57                   	push   edi
c0023a37:	56                   	push   esi
c0023a38:	e8 5f 28 00 00       	call   c002629c <__udivdi3>
c0023a3d:	83 c4 10             	add    esp,0x10
c0023a40:	89 c6                	mov    esi,eax
c0023a42:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c0023a47:	83 e6 0f             	and    esi,0xf
c0023a4a:	eb 07                	jmp    c0023a53 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0023a4c:	31 f6                	xor    esi,esi
c0023a4e:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c0023a53:	bf 01 00 00 00       	mov    edi,0x1
c0023a58:	50                   	push   eax
c0023a59:	6a 00                	push   0x0
c0023a5b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023a62:	50                   	push   eax
c0023a63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0023a67:	e8 6c f0 ff ff       	call   c0022ad8 <IDE::enableIRQs(unsigned char, bool)>
c0023a6c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023a6f:	e8 98 fe ff ff       	call   c002390c <ATA::readyForCommand()>
c0023a74:	83 c4 10             	add    esp,0x10
c0023a77:	84 c0                	test   al,al
c0023a79:	0f 84 5a 02 00 00    	je     c0023cd9 <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c0023a7f:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0023a85:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0023a8b:	c1 e0 04             	shl    eax,0x4
c0023a8e:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c0023a95:	09 c6                	or     esi,eax
c0023a97:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c0023a9c:	75 05                	jne    c0023aa3 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c0023a9e:	83 ce a0             	or     esi,0xffffffa0
c0023aa1:	eb 03                	jmp    c0023aa6 <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c0023aa3:	83 ce e0             	or     esi,0xffffffe0
c0023aa6:	89 f0                	mov    eax,esi
c0023aa8:	0f b6 f0             	movzx  esi,al
c0023aab:	56                   	push   esi
c0023aac:	6a 06                	push   0x6
c0023aae:	51                   	push   ecx
c0023aaf:	52                   	push   edx
c0023ab0:	e8 17 ee ff ff       	call   c00228cc <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023ab5:	83 c4 10             	add    esp,0x10
c0023ab8:	6a 00                	push   0x0
c0023aba:	6a 01                	push   0x1
c0023abc:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023ac3:	50                   	push   eax
c0023ac4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023aca:	e8 fd ed ff ff       	call   c00228cc <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023acf:	83 c4 10             	add    esp,0x10
c0023ad2:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0023ad7:	75 6e                	jne    c0023b47 <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c0023ad9:	6a 00                	push   0x0
c0023adb:	6a 08                	push   0x8
c0023add:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023ae4:	50                   	push   eax
c0023ae5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023aeb:	e8 dc ed ff ff       	call   c00228cc <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023af0:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0023af5:	50                   	push   eax
c0023af6:	6a 09                	push   0x9
c0023af8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023aff:	50                   	push   eax
c0023b00:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023b06:	e8 c1 ed ff ff       	call   c00228cc <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023b0b:	83 c4 20             	add    esp,0x20
c0023b0e:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c0023b13:	50                   	push   eax
c0023b14:	6a 0a                	push   0xa
c0023b16:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023b1d:	50                   	push   eax
c0023b1e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023b24:	e8 a3 ed ff ff       	call   c00228cc <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023b29:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c0023b2e:	50                   	push   eax
c0023b2f:	6a 0b                	push   0xb
c0023b31:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023b38:	50                   	push   eax
c0023b39:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023b3f:	e8 88 ed ff ff       	call   c00228cc <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023b44:	83 c4 20             	add    esp,0x20
c0023b47:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c0023b4c:	50                   	push   eax
c0023b4d:	6a 02                	push   0x2
c0023b4f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023b56:	50                   	push   eax
c0023b57:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023b5d:	e8 6a ed ff ff       	call   c00228cc <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023b62:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c0023b67:	50                   	push   eax
c0023b68:	6a 03                	push   0x3
c0023b6a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023b71:	50                   	push   eax
c0023b72:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023b78:	e8 4f ed ff ff       	call   c00228cc <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023b7d:	83 c4 20             	add    esp,0x20
c0023b80:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0023b85:	50                   	push   eax
c0023b86:	6a 04                	push   0x4
c0023b88:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023b8f:	50                   	push   eax
c0023b90:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023b96:	e8 31 ed ff ff       	call   c00228cc <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023b9b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0023ba0:	50                   	push   eax
c0023ba1:	6a 05                	push   0x5
c0023ba3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023baa:	50                   	push   eax
c0023bab:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023bb1:	e8 16 ed ff ff       	call   c00228cc <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023bb6:	83 c4 20             	add    esp,0x20
c0023bb9:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0023bbe:	0f 94 c0             	sete   al
c0023bc1:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0023bc6:	74 09                	je     c0023bd1 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c0023bc8:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c0023bcf:	eb 07                	jmp    c0023bd8 <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c0023bd1:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0023bd8:	0f b6 c0             	movzx  eax,al
c0023bdb:	50                   	push   eax
c0023bdc:	6a 07                	push   0x7
c0023bde:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023be5:	50                   	push   eax
c0023be6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023bec:	e8 db ec ff ff       	call   c00228cc <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023bf1:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c0023bf5:	83 c4 10             	add    esp,0x10
c0023bf8:	85 f6                	test   esi,esi
c0023bfa:	0f 84 ba 00 00 00    	je     c0023cba <ATA::access(unsigned long long, int, void*, bool)+0x35e>
c0023c00:	50                   	push   eax
c0023c01:	6a 01                	push   0x1
c0023c03:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023c0a:	50                   	push   eax
c0023c0b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023c11:	e8 62 f8 ff ff       	call   c0023478 <IDE::polling(unsigned char, unsigned int)>
c0023c16:	83 c4 10             	add    esp,0x10
c0023c19:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c0023c1f:	84 c0                	test   al,al
c0023c21:	74 2c                	je     c0023c4f <ATA::access(unsigned long long, int, void*, bool)+0x2f3>
c0023c23:	0f b6 f8             	movzx  edi,al
c0023c26:	0f b6 d2             	movzx  edx,dl
c0023c29:	57                   	push   edi
c0023c2a:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c0023c31:	50                   	push   eax
c0023c32:	52                   	push   edx
c0023c33:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023c39:	e8 a4 f6 ff ff       	call   c00232e2 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0023c3e:	c7 04 24 20 c5 02 c0 	mov    DWORD PTR [esp],0xc002c520
c0023c45:	e8 cb ee fe ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c0023c4a:	e9 87 00 00 00       	jmp    c0023cd6 <ATA::access(unsigned long long, int, void*, bool)+0x37a>
c0023c4f:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0023c54:	74 33                	je     c0023c89 <ATA::access(unsigned long long, int, void*, bool)+0x32d>
c0023c56:	31 ed                	xor    ebp,ebp
c0023c58:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0023c5c:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c0023c60:	50                   	push   eax
c0023c61:	50                   	push   eax
c0023c62:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023c69:	50                   	push   eax
c0023c6a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023c70:	e8 45 ec ff ff       	call   c00228ba <IDE::getBase(unsigned char)>
c0023c75:	89 c2                	mov    edx,eax
c0023c77:	89 f8                	mov    eax,edi
c0023c79:	66 ef                	out    dx,ax
c0023c7b:	45                   	inc    ebp
c0023c7c:	83 c4 10             	add    esp,0x10
c0023c7f:	81 fd 00 01 00 00    	cmp    ebp,0x100
c0023c85:	75 d1                	jne    c0023c58 <ATA::access(unsigned long long, int, void*, bool)+0x2fc>
c0023c87:	eb 23                	jmp    c0023cac <ATA::access(unsigned long long, int, void*, bool)+0x350>
c0023c89:	0f b6 d2             	movzx  edx,dl
c0023c8c:	51                   	push   ecx
c0023c8d:	51                   	push   ecx
c0023c8e:	52                   	push   edx
c0023c8f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023c95:	e8 20 ec ff ff       	call   c00228ba <IDE::getBase(unsigned char)>
c0023c9a:	b9 00 01 00 00       	mov    ecx,0x100
c0023c9f:	89 c2                	mov    edx,eax
c0023ca1:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c0023ca5:	fc                   	cld    
c0023ca6:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c0023ca9:	83 c4 10             	add    esp,0x10
c0023cac:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c0023cb4:	4e                   	dec    esi
c0023cb5:	e9 3e ff ff ff       	jmp    c0023bf8 <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c0023cba:	31 ff                	xor    edi,edi
c0023cbc:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0023cc1:	74 16                	je     c0023cd9 <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c0023cc3:	50                   	push   eax
c0023cc4:	50                   	push   eax
c0023cc5:	31 c0                	xor    eax,eax
c0023cc7:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c0023ccc:	0f 94 c0             	sete   al
c0023ccf:	50                   	push   eax
c0023cd0:	53                   	push   ebx
c0023cd1:	e8 ec fb ff ff       	call   c00238c2 <ATA::flush(bool)>
c0023cd6:	83 c4 10             	add    esp,0x10
c0023cd9:	83 c4 2c             	add    esp,0x2c
c0023cdc:	89 f8                	mov    eax,edi
c0023cde:	5b                   	pop    ebx
c0023cdf:	5e                   	pop    esi
c0023ce0:	5f                   	pop    edi
c0023ce1:	5d                   	pop    ebp
c0023ce2:	c3                   	ret    
c0023ce3:	90                   	nop

c0023ce4 <ATA::read(unsigned long long, int, void*)>:
c0023ce4:	57                   	push   edi
c0023ce5:	b8 04 00 00 00       	mov    eax,0x4
c0023cea:	56                   	push   esi
c0023ceb:	53                   	push   ebx
c0023cec:	83 ec 10             	sub    esp,0x10
c0023cef:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0023cf3:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0023cf7:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0023cfa:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0023cfe:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0023d02:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0023d08:	77 3b                	ja     c0023d45 <ATA::read(unsigned long long, int, void*)+0x61>
c0023d0a:	b8 06 00 00 00       	mov    eax,0x6
c0023d0f:	85 d2                	test   edx,edx
c0023d11:	74 32                	je     c0023d45 <ATA::read(unsigned long long, int, void*)+0x61>
c0023d13:	50                   	push   eax
c0023d14:	50                   	push   eax
c0023d15:	6a 00                	push   0x0
c0023d17:	52                   	push   edx
c0023d18:	53                   	push   ebx
c0023d19:	57                   	push   edi
c0023d1a:	56                   	push   esi
c0023d1b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0023d1f:	e8 38 fc ff ff       	call   c002395c <ATA::access(unsigned long long, int, void*, bool)>
c0023d24:	83 c4 20             	add    esp,0x20
c0023d27:	85 c0                	test   eax,eax
c0023d29:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023d2d:	75 11                	jne    c0023d40 <ATA::read(unsigned long long, int, void*)+0x5c>
c0023d2f:	01 1d c8 1e 03 c0    	add    DWORD PTR ds:0xc0031ec8,ebx
c0023d35:	e8 40 cc fe ff       	call   c001097a <VgaText::updateDiskUsage()>
c0023d3a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023d3e:	eb 05                	jmp    c0023d45 <ATA::read(unsigned long long, int, void*)+0x61>
c0023d40:	b8 01 00 00 00       	mov    eax,0x1
c0023d45:	83 c4 10             	add    esp,0x10
c0023d48:	5b                   	pop    ebx
c0023d49:	5e                   	pop    esi
c0023d4a:	5f                   	pop    edi
c0023d4b:	c3                   	ret    

c0023d4c <ATA::write(unsigned long long, int, void*)>:
c0023d4c:	57                   	push   edi
c0023d4d:	b8 04 00 00 00       	mov    eax,0x4
c0023d52:	56                   	push   esi
c0023d53:	53                   	push   ebx
c0023d54:	83 ec 10             	sub    esp,0x10
c0023d57:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0023d5b:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0023d5f:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0023d62:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0023d66:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0023d6a:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0023d70:	77 3b                	ja     c0023dad <ATA::write(unsigned long long, int, void*)+0x61>
c0023d72:	b8 06 00 00 00       	mov    eax,0x6
c0023d77:	85 d2                	test   edx,edx
c0023d79:	74 32                	je     c0023dad <ATA::write(unsigned long long, int, void*)+0x61>
c0023d7b:	50                   	push   eax
c0023d7c:	50                   	push   eax
c0023d7d:	6a 01                	push   0x1
c0023d7f:	52                   	push   edx
c0023d80:	53                   	push   ebx
c0023d81:	57                   	push   edi
c0023d82:	56                   	push   esi
c0023d83:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0023d87:	e8 d0 fb ff ff       	call   c002395c <ATA::access(unsigned long long, int, void*, bool)>
c0023d8c:	83 c4 20             	add    esp,0x20
c0023d8f:	85 c0                	test   eax,eax
c0023d91:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023d95:	75 11                	jne    c0023da8 <ATA::write(unsigned long long, int, void*)+0x5c>
c0023d97:	01 1d c4 1e 03 c0    	add    DWORD PTR ds:0xc0031ec4,ebx
c0023d9d:	e8 d8 cb fe ff       	call   c001097a <VgaText::updateDiskUsage()>
c0023da2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023da6:	eb 05                	jmp    c0023dad <ATA::write(unsigned long long, int, void*)+0x61>
c0023da8:	b8 01 00 00 00       	mov    eax,0x1
c0023dad:	83 c4 10             	add    esp,0x10
c0023db0:	5b                   	pop    ebx
c0023db1:	5e                   	pop    esi
c0023db2:	5f                   	pop    edi
c0023db3:	c3                   	ret    

c0023db4 <ATA::detectCHS()>:
c0023db4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0023db8:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c0023dbe:	c1 e0 06             	shl    eax,0x6
c0023dc1:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c0023dc7:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c0023dd1:	c7 44 24 04 2b c5 02 c0 	mov    DWORD PTR [esp+0x4],0xc002c52b
c0023dd9:	e9 51 62 ff ff       	jmp    c001a02f <Krnl::panic(char const*)>

c0023dde <ATA::open(int, int, void*)>:
c0023dde:	53                   	push   ebx
c0023ddf:	83 ec 08             	sub    esp,0x8
c0023de2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023de6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0023dea:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023dee:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0023df4:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0023dfa:	c1 e0 06             	shl    eax,0x6
c0023dfd:	01 d0                	add    eax,edx
c0023dff:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c0023e06:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c0023e0c:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c0023e13:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0023e1d:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c0023e23:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0023e2a:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c0023e31:	75 0c                	jne    c0023e3f <ATA::open(int, int, void*)+0x61>
c0023e33:	83 ec 0c             	sub    esp,0xc
c0023e36:	53                   	push   ebx
c0023e37:	e8 78 ff ff ff       	call   c0023db4 <ATA::detectCHS()>
c0023e3c:	83 c4 10             	add    esp,0x10
c0023e3f:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0023e45:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0023e4b:	c1 e0 06             	shl    eax,0x6
c0023e4e:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c0023e55:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0023e5f:	d1 e8                	shr    eax,1
c0023e61:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c0023e67:	6a 04                	push   0x4
c0023e69:	6a 0c                	push   0xc
c0023e6b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023e72:	50                   	push   eax
c0023e73:	52                   	push   edx
c0023e74:	e8 53 ea ff ff       	call   c00228cc <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023e79:	90                   	nop
c0023e7a:	90                   	nop
c0023e7b:	6a 00                	push   0x0
c0023e7d:	6a 0c                	push   0xc
c0023e7f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023e86:	50                   	push   eax
c0023e87:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023e8d:	e8 3a ea ff ff       	call   c00228cc <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023e92:	83 c4 14             	add    esp,0x14
c0023e95:	53                   	push   ebx
c0023e96:	e8 2d 05 ff ff       	call   c00143c8 <PhysicalDisk::startCache()>
c0023e9b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023e9e:	e8 47 26 ff ff       	call   c00164ea <createPartitionsForDisk(PhysicalDisk*)>
c0023ea3:	31 c0                	xor    eax,eax
c0023ea5:	83 c4 18             	add    esp,0x18
c0023ea8:	5b                   	pop    ebx
c0023ea9:	c3                   	ret    

c0023eaa <ATAPI::write(unsigned long long, int, void*)>:
c0023eaa:	b8 03 00 00 00       	mov    eax,0x3
c0023eaf:	c3                   	ret    

c0023eb0 <ATAPI::close(int, int, void*)>:
c0023eb0:	83 ec 0c             	sub    esp,0xc
c0023eb3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023eb7:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0023ebd:	85 c0                	test   eax,eax
c0023ebf:	74 0c                	je     c0023ecd <ATAPI::close(int, int, void*)+0x1d>
c0023ec1:	83 ec 0c             	sub    esp,0xc
c0023ec4:	8b 10                	mov    edx,DWORD PTR [eax]
c0023ec6:	50                   	push   eax
c0023ec7:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0023eca:	83 c4 10             	add    esp,0x10
c0023ecd:	31 c0                	xor    eax,eax
c0023ecf:	83 c4 0c             	add    esp,0xc
c0023ed2:	c3                   	ret    
c0023ed3:	90                   	nop

c0023ed4 <ATAPI::ATAPI()>:
c0023ed4:	83 ec 0c             	sub    esp,0xc
c0023ed7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023edb:	83 ec 04             	sub    esp,0x4
c0023ede:	68 00 08 00 00       	push   0x800
c0023ee3:	68 65 c6 02 c0       	push   0xc002c665
c0023ee8:	50                   	push   eax
c0023ee9:	e8 72 04 ff ff       	call   c0014360 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0023eee:	83 c4 10             	add    esp,0x10
c0023ef1:	ba 80 c5 02 c0       	mov    edx,0xc002c580
c0023ef6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023efa:	89 10                	mov    DWORD PTR [eax],edx
c0023efc:	90                   	nop
c0023efd:	83 c4 0c             	add    esp,0xc
c0023f00:	c3                   	ret    
c0023f01:	90                   	nop

c0023f02 <ATAPI::readyForCommand()>:
c0023f02:	56                   	push   esi
c0023f03:	53                   	push   ebx
c0023f04:	31 db                	xor    ebx,ebx
c0023f06:	50                   	push   eax
c0023f07:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0023f0b:	50                   	push   eax
c0023f0c:	6a 0c                	push   0xc
c0023f0e:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0023f15:	50                   	push   eax
c0023f16:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0023f1c:	e8 6b ea ff ff       	call   c002298c <IDE::read(unsigned char, unsigned char)>
c0023f21:	83 c4 10             	add    esp,0x10
c0023f24:	a8 88                	test   al,0x88
c0023f26:	74 23                	je     c0023f4b <ATAPI::readyForCommand()+0x49>
c0023f28:	43                   	inc    ebx
c0023f29:	83 fb 63             	cmp    ebx,0x63
c0023f2c:	7e dd                	jle    c0023f0b <ATAPI::readyForCommand()+0x9>
c0023f2e:	51                   	push   ecx
c0023f2f:	51                   	push   ecx
c0023f30:	6a 00                	push   0x0
c0023f32:	68 40 42 0f 00       	push   0xf4240
c0023f37:	e8 d2 9c ff ff       	call   c001dc0e <nanoSleep(unsigned long long)>
c0023f3c:	83 c4 10             	add    esp,0x10
c0023f3f:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0023f45:	75 c4                	jne    c0023f0b <ATAPI::readyForCommand()+0x9>
c0023f47:	31 c0                	xor    eax,eax
c0023f49:	eb 02                	jmp    c0023f4d <ATAPI::readyForCommand()+0x4b>
c0023f4b:	b0 01                	mov    al,0x1
c0023f4d:	5a                   	pop    edx
c0023f4e:	5b                   	pop    ebx
c0023f4f:	5e                   	pop    esi
c0023f50:	c3                   	ret    
c0023f51:	90                   	nop

c0023f52 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c0023f52:	55                   	push   ebp
c0023f53:	57                   	push   edi
c0023f54:	56                   	push   esi
c0023f55:	53                   	push   ebx
c0023f56:	83 ec 20             	sub    esp,0x20
c0023f59:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0023f5d:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0023f61:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0023f65:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0023f69:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0023f6d:	6a 01                	push   0x1
c0023f6f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023f76:	50                   	push   eax
c0023f77:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023f7d:	e8 56 eb ff ff       	call   c0022ad8 <IDE::enableIRQs(unsigned char, bool)>
c0023f82:	5e                   	pop    esi
c0023f83:	58                   	pop    eax
c0023f84:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023f8b:	50                   	push   eax
c0023f8c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023f92:	e8 0f e9 ff ff       	call   c00228a6 <IDE::prepareInterrupt(unsigned char)>
c0023f97:	89 3c 24             	mov    DWORD PTR [esp],edi
c0023f9a:	e8 63 ff ff ff       	call   c0023f02 <ATAPI::readyForCommand()>
c0023f9f:	83 c4 10             	add    esp,0x10
c0023fa2:	84 c0                	test   al,al
c0023fa4:	75 0a                	jne    c0023fb0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c0023fa6:	bb 01 00 00 00       	mov    ebx,0x1
c0023fab:	e9 57 02 00 00       	jmp    c0024207 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0023fb0:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c0023fb6:	c1 e0 04             	shl    eax,0x4
c0023fb9:	0f b6 c0             	movzx  eax,al
c0023fbc:	50                   	push   eax
c0023fbd:	6a 06                	push   0x6
c0023fbf:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023fc6:	50                   	push   eax
c0023fc7:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023fcd:	e8 fa e8 ff ff       	call   c00228cc <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023fd2:	6a 00                	push   0x0
c0023fd4:	6a 01                	push   0x1
c0023fd6:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023fdd:	50                   	push   eax
c0023fde:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023fe4:	e8 e3 e8 ff ff       	call   c00228cc <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023fe9:	83 c4 20             	add    esp,0x20
c0023fec:	0f b6 c3             	movzx  eax,bl
c0023fef:	0f b6 df             	movzx  ebx,bh
c0023ff2:	50                   	push   eax
c0023ff3:	6a 04                	push   0x4
c0023ff5:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023ffc:	50                   	push   eax
c0023ffd:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024003:	e8 c4 e8 ff ff       	call   c00228cc <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024008:	53                   	push   ebx
c0024009:	6a 05                	push   0x5
c002400b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024012:	50                   	push   eax
c0024013:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024019:	e8 ae e8 ff ff       	call   c00228cc <IDE::write(unsigned char, unsigned char, unsigned char)>
c002401e:	83 c4 20             	add    esp,0x20
c0024021:	68 a0 00 00 00       	push   0xa0
c0024026:	6a 07                	push   0x7
c0024028:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002402f:	50                   	push   eax
c0024030:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024036:	e8 91 e8 ff ff       	call   c00228cc <IDE::write(unsigned char, unsigned char, unsigned char)>
c002403b:	83 c4 0c             	add    esp,0xc
c002403e:	6a 01                	push   0x1
c0024040:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024047:	50                   	push   eax
c0024048:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002404e:	e8 25 f4 ff ff       	call   c0023478 <IDE::polling(unsigned char, unsigned int)>
c0024053:	83 c4 10             	add    esp,0x10
c0024056:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c002405c:	84 c0                	test   al,al
c002405e:	74 23                	je     c0024083 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c0024060:	0f b6 d8             	movzx  ebx,al
c0024063:	0f b6 d2             	movzx  edx,dl
c0024066:	53                   	push   ebx
c0024067:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c002406e:	50                   	push   eax
c002406f:	52                   	push   edx
c0024070:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024076:	e8 67 f2 ff ff       	call   c00232e2 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c002407b:	83 c4 10             	add    esp,0x10
c002407e:	e9 84 01 00 00       	jmp    c0024207 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0024083:	0f b6 d2             	movzx  edx,dl
c0024086:	53                   	push   ebx
c0024087:	53                   	push   ebx
c0024088:	52                   	push   edx
c0024089:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002408f:	e8 26 e8 ff ff       	call   c00228ba <IDE::getBase(unsigned char)>
c0024094:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0024098:	b9 06 00 00 00       	mov    ecx,0x6
c002409d:	89 c2                	mov    edx,eax
c002409f:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c00240a2:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c00240a6:	83 c4 10             	add    esp,0x10
c00240a9:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c00240af:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c00240b6:	85 db                	test   ebx,ebx
c00240b8:	0f 84 ec 00 00 00    	je     c00241aa <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c00240be:	51                   	push   ecx
c00240bf:	51                   	push   ecx
c00240c0:	52                   	push   edx
c00240c1:	50                   	push   eax
c00240c2:	e8 73 e9 ff ff       	call   c0022a3a <IDE::waitInterrupt(unsigned char)>
c00240c7:	83 c4 10             	add    esp,0x10
c00240ca:	84 c0                	test   al,al
c00240cc:	0f 84 d4 fe ff ff    	je     c0023fa6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c00240d2:	56                   	push   esi
c00240d3:	56                   	push   esi
c00240d4:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00240db:	50                   	push   eax
c00240dc:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00240e2:	e8 bf e7 ff ff       	call   c00228a6 <IDE::prepareInterrupt(unsigned char)>
c00240e7:	83 c4 0c             	add    esp,0xc
c00240ea:	6a 04                	push   0x4
c00240ec:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00240f3:	50                   	push   eax
c00240f4:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00240fa:	e8 8d e8 ff ff       	call   c002298c <IDE::read(unsigned char, unsigned char)>
c00240ff:	83 c4 0c             	add    esp,0xc
c0024102:	89 c6                	mov    esi,eax
c0024104:	6a 05                	push   0x5
c0024106:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002410d:	50                   	push   eax
c002410e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024114:	e8 73 e8 ff ff       	call   c002298c <IDE::read(unsigned char, unsigned char)>
c0024119:	89 f1                	mov    ecx,esi
c002411b:	0f b6 c0             	movzx  eax,al
c002411e:	0f b6 f1             	movzx  esi,cl
c0024121:	c1 e0 08             	shl    eax,0x8
c0024124:	09 c6                	or     esi,eax
c0024126:	d1 fe                	sar    esi,1
c0024128:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c002412c:	83 c4 10             	add    esp,0x10
c002412f:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0024134:	74 41                	je     c0024177 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c0024136:	31 c9                	xor    ecx,ecx
c0024138:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c002413e:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0024145:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c0024149:	75 0a                	jne    c0024155 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c002414b:	01 c9                	add    ecx,ecx
c002414d:	01 cd                	add    ebp,ecx
c002414f:	4b                   	dec    ebx
c0024150:	e9 54 ff ff ff       	jmp    c00240a9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c0024155:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c002415a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c002415e:	51                   	push   ecx
c002415f:	51                   	push   ecx
c0024160:	52                   	push   edx
c0024161:	50                   	push   eax
c0024162:	e8 53 e7 ff ff       	call   c00228ba <IDE::getBase(unsigned char)>
c0024167:	89 c2                	mov    edx,eax
c0024169:	89 f0                	mov    eax,esi
c002416b:	66 ef                	out    dx,ax
c002416d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0024171:	83 c4 10             	add    esp,0x10
c0024174:	41                   	inc    ecx
c0024175:	eb c1                	jmp    c0024138 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c0024177:	31 f6                	xor    esi,esi
c0024179:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c002417f:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0024186:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c002418a:	75 06                	jne    c0024192 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c002418c:	01 f6                	add    esi,esi
c002418e:	01 f5                	add    ebp,esi
c0024190:	eb bd                	jmp    c002414f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c0024192:	51                   	push   ecx
c0024193:	51                   	push   ecx
c0024194:	52                   	push   edx
c0024195:	50                   	push   eax
c0024196:	e8 1f e7 ff ff       	call   c00228ba <IDE::getBase(unsigned char)>
c002419b:	89 c2                	mov    edx,eax
c002419d:	66 ed                	in     ax,dx
c002419f:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c00241a4:	83 c4 10             	add    esp,0x10
c00241a7:	46                   	inc    esi
c00241a8:	eb cf                	jmp    c0024179 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c00241aa:	51                   	push   ecx
c00241ab:	51                   	push   ecx
c00241ac:	52                   	push   edx
c00241ad:	50                   	push   eax
c00241ae:	e8 87 e8 ff ff       	call   c0022a3a <IDE::waitInterrupt(unsigned char)>
c00241b3:	83 c4 10             	add    esp,0x10
c00241b6:	84 c0                	test   al,al
c00241b8:	0f 84 e8 fd ff ff    	je     c0023fa6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c00241be:	bb a0 86 01 00       	mov    ebx,0x186a0
c00241c3:	52                   	push   edx
c00241c4:	52                   	push   edx
c00241c5:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00241cc:	50                   	push   eax
c00241cd:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00241d3:	e8 ce e6 ff ff       	call   c00228a6 <IDE::prepareInterrupt(unsigned char)>
c00241d8:	83 c4 10             	add    esp,0x10
c00241db:	50                   	push   eax
c00241dc:	50                   	push   eax
c00241dd:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00241e4:	50                   	push   eax
c00241e5:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00241eb:	e8 ca e6 ff ff       	call   c00228ba <IDE::getBase(unsigned char)>
c00241f0:	8d 50 07             	lea    edx,[eax+0x7]
c00241f3:	ec                   	in     al,dx
c00241f4:	83 c4 10             	add    esp,0x10
c00241f7:	a8 88                	test   al,0x88
c00241f9:	74 0a                	je     c0024205 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c00241fb:	4b                   	dec    ebx
c00241fc:	75 dd                	jne    c00241db <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c00241fe:	bb 02 00 00 00       	mov    ebx,0x2
c0024203:	eb 02                	jmp    c0024207 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0024205:	31 db                	xor    ebx,ebx
c0024207:	83 c4 1c             	add    esp,0x1c
c002420a:	89 d8                	mov    eax,ebx
c002420c:	5b                   	pop    ebx
c002420d:	5e                   	pop    esi
c002420e:	5f                   	pop    edi
c002420f:	5d                   	pop    ebp
c0024210:	c3                   	ret    
c0024211:	90                   	nop

c0024212 <ATAPI::diskRemoved()>:
c0024212:	83 ec 18             	sub    esp,0x18
c0024215:	68 71 c6 02 c0       	push   0xc002c671
c002421a:	e8 f6 e8 fe ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c002421f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024223:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c002422a:	83 c4 1c             	add    esp,0x1c
c002422d:	c3                   	ret    

c002422e <ATAPI::eject()>:
c002422e:	57                   	push   edi
c002422f:	b9 03 00 00 00       	mov    ecx,0x3
c0024234:	53                   	push   ebx
c0024235:	83 ec 14             	sub    esp,0x14
c0024238:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c002423c:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024240:	fc                   	cld    
c0024241:	31 c0                	xor    eax,eax
c0024243:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0024245:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c002424a:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c002424f:	50                   	push   eax
c0024250:	50                   	push   eax
c0024251:	6a 00                	push   0x0
c0024253:	6a 00                	push   0x0
c0024255:	6a 00                	push   0x0
c0024257:	6a 02                	push   0x2
c0024259:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002425d:	50                   	push   eax
c002425e:	53                   	push   ebx
c002425f:	e8 ee fc ff ff       	call   c0023f52 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024264:	83 c4 14             	add    esp,0x14
c0024267:	53                   	push   ebx
c0024268:	e8 a5 ff ff ff       	call   c0024212 <ATAPI::diskRemoved()>
c002426d:	83 c4 24             	add    esp,0x24
c0024270:	31 c0                	xor    eax,eax
c0024272:	5b                   	pop    ebx
c0024273:	5f                   	pop    edi
c0024274:	c3                   	ret    
c0024275:	90                   	nop

c0024276 <ATAPI::diskInserted()>:
c0024276:	53                   	push   ebx
c0024277:	83 ec 14             	sub    esp,0x14
c002427a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c002427e:	68 88 c6 02 c0       	push   0xc002c688
c0024283:	e8 8d e8 fe ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c0024288:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c002428f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024292:	e8 31 01 ff ff       	call   c00143c8 <PhysicalDisk::startCache()>
c0024297:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c002429b:	83 c4 18             	add    esp,0x18
c002429e:	5b                   	pop    ebx
c002429f:	e9 46 22 ff ff       	jmp    c00164ea <createPartitionsForDisk(PhysicalDisk*)>

c00242a4 <ATAPI::detectMedia()>:
c00242a4:	56                   	push   esi
c00242a5:	53                   	push   ebx
c00242a6:	83 ec 28             	sub    esp,0x28
c00242a9:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00242ad:	6a 0c                	push   0xc
c00242af:	6a 00                	push   0x0
c00242b1:	8d 74 24 0e          	lea    esi,[esp+0xe]
c00242b5:	56                   	push   esi
c00242b6:	e8 bd c4 fd ff       	call   c0000778 <memset>
c00242bb:	58                   	pop    eax
c00242bc:	5a                   	pop    edx
c00242bd:	6a 00                	push   0x0
c00242bf:	6a 00                	push   0x0
c00242c1:	6a 00                	push   0x0
c00242c3:	6a 00                	push   0x0
c00242c5:	56                   	push   esi
c00242c6:	53                   	push   ebx
c00242c7:	e8 86 fc ff ff       	call   c0023f52 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00242cc:	83 c4 1c             	add    esp,0x1c
c00242cf:	6a 0c                	push   0xc
c00242d1:	6a 00                	push   0x0
c00242d3:	56                   	push   esi
c00242d4:	e8 9f c4 fd ff       	call   c0000778 <memset>
c00242d9:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c00242de:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c00242e3:	59                   	pop    ecx
c00242e4:	58                   	pop    eax
c00242e5:	6a 01                	push   0x1
c00242e7:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c00242eb:	50                   	push   eax
c00242ec:	6a 00                	push   0x0
c00242ee:	6a 12                	push   0x12
c00242f0:	56                   	push   esi
c00242f1:	53                   	push   ebx
c00242f2:	e8 5b fc ff ff       	call   c0023f52 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00242f7:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c00242fb:	83 c4 20             	add    esp,0x20
c00242fe:	83 e0 7f             	and    eax,0x7f
c0024301:	3c 70                	cmp    al,0x70
c0024303:	74 15                	je     c002431a <ATAPI::detectMedia()+0x76>
c0024305:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002430c:	75 0c                	jne    c002431a <ATAPI::detectMedia()+0x76>
c002430e:	83 ec 0c             	sub    esp,0xc
c0024311:	53                   	push   ebx
c0024312:	e8 5f ff ff ff       	call   c0024276 <ATAPI::diskInserted()>
c0024317:	83 c4 10             	add    esp,0x10
c002431a:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c002431e:	83 e0 0f             	and    eax,0xf
c0024321:	3c 02                	cmp    al,0x2
c0024323:	75 1b                	jne    c0024340 <ATAPI::detectMedia()+0x9c>
c0024325:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c002432a:	75 2d                	jne    c0024359 <ATAPI::detectMedia()+0xb5>
c002432c:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024333:	74 24                	je     c0024359 <ATAPI::detectMedia()+0xb5>
c0024335:	83 ec 0c             	sub    esp,0xc
c0024338:	53                   	push   ebx
c0024339:	e8 d4 fe ff ff       	call   c0024212 <ATAPI::diskRemoved()>
c002433e:	eb 16                	jmp    c0024356 <ATAPI::detectMedia()+0xb2>
c0024340:	84 c0                	test   al,al
c0024342:	75 15                	jne    c0024359 <ATAPI::detectMedia()+0xb5>
c0024344:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002434b:	75 0c                	jne    c0024359 <ATAPI::detectMedia()+0xb5>
c002434d:	83 ec 0c             	sub    esp,0xc
c0024350:	53                   	push   ebx
c0024351:	e8 20 ff ff ff       	call   c0024276 <ATAPI::diskInserted()>
c0024356:	83 c4 10             	add    esp,0x10
c0024359:	83 c4 24             	add    esp,0x24
c002435c:	5b                   	pop    ebx
c002435d:	5e                   	pop    esi
c002435e:	c3                   	ret    
c002435f:	90                   	nop

c0024360 <ATAPI::open(int, int, void*)>:
c0024360:	53                   	push   ebx
c0024361:	83 ec 08             	sub    esp,0x8
c0024364:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024368:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002436c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024370:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024376:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c002437c:	c1 e0 06             	shl    eax,0x6
c002437f:	01 d0                	add    eax,edx
c0024381:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c0024388:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c002438e:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c0024395:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c002439f:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c00243a5:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c00243ac:	6a 04                	push   0x4
c00243ae:	6a 0c                	push   0xc
c00243b0:	51                   	push   ecx
c00243b1:	52                   	push   edx
c00243b2:	e8 15 e5 ff ff       	call   c00228cc <IDE::write(unsigned char, unsigned char, unsigned char)>
c00243b7:	90                   	nop
c00243b8:	90                   	nop
c00243b9:	6a 00                	push   0x0
c00243bb:	6a 0c                	push   0xc
c00243bd:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00243c4:	50                   	push   eax
c00243c5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00243cb:	e8 fc e4 ff ff       	call   c00228cc <IDE::write(unsigned char, unsigned char, unsigned char)>
c00243d0:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c00243d7:	83 c4 14             	add    esp,0x14
c00243da:	53                   	push   ebx
c00243db:	e8 c4 fe ff ff       	call   c00242a4 <ATAPI::detectMedia()>
c00243e0:	31 c0                	xor    eax,eax
c00243e2:	83 c4 18             	add    esp,0x18
c00243e5:	5b                   	pop    ebx
c00243e6:	c3                   	ret    
c00243e7:	90                   	nop

c00243e8 <ATAPI::read(unsigned long long, int, void*)>:
c00243e8:	55                   	push   ebp
c00243e9:	57                   	push   edi
c00243ea:	56                   	push   esi
c00243eb:	53                   	push   ebx
c00243ec:	83 ec 1c             	sub    esp,0x1c
c00243ef:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00243f3:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00243f7:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c00243fb:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0024402:	74 41                	je     c0024445 <ATAPI::read(unsigned long long, int, void*)+0x5d>
c0024404:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024408:	b9 03 00 00 00       	mov    ecx,0x3
c002440d:	fc                   	cld    
c002440e:	31 c0                	xor    eax,eax
c0024410:	86 fb                	xchg   bl,bh
c0024412:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0024414:	c1 c3 10             	rol    ebx,0x10
c0024417:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c002441c:	89 e8                	mov    eax,ebp
c002441e:	86 fb                	xchg   bl,bh
c0024420:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0024424:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c0024428:	50                   	push   eax
c0024429:	50                   	push   eax
c002442a:	55                   	push   ebp
c002442b:	c1 e5 0b             	shl    ebp,0xb
c002442e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0024432:	6a 00                	push   0x0
c0024434:	55                   	push   ebp
c0024435:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0024439:	50                   	push   eax
c002443a:	56                   	push   esi
c002443b:	e8 12 fb ff ff       	call   c0023f52 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024440:	83 c4 20             	add    esp,0x20
c0024443:	eb 1a                	jmp    c002445f <ATAPI::read(unsigned long long, int, void*)+0x77>
c0024445:	83 ec 0c             	sub    esp,0xc
c0024448:	56                   	push   esi
c0024449:	e8 56 fe ff ff       	call   c00242a4 <ATAPI::detectMedia()>
c002444e:	83 c4 10             	add    esp,0x10
c0024451:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0024458:	75 aa                	jne    c0024404 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c002445a:	b8 02 00 00 00       	mov    eax,0x2
c002445f:	83 c4 1c             	add    esp,0x1c
c0024462:	5b                   	pop    ebx
c0024463:	5e                   	pop    esi
c0024464:	5f                   	pop    edi
c0024465:	5d                   	pop    ebp
c0024466:	c3                   	ret    
c0024467:	90                   	nop

c0024468 <SATA::close(int, int, void*)>:
c0024468:	83 ec 0c             	sub    esp,0xc
c002446b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002446f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024475:	85 c0                	test   eax,eax
c0024477:	74 0c                	je     c0024485 <SATA::close(int, int, void*)+0x1d>
c0024479:	83 ec 0c             	sub    esp,0xc
c002447c:	8b 10                	mov    edx,DWORD PTR [eax]
c002447e:	50                   	push   eax
c002447f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024482:	83 c4 10             	add    esp,0x10
c0024485:	31 c0                	xor    eax,eax
c0024487:	83 c4 0c             	add    esp,0xc
c002448a:	c3                   	ret    
c002448b:	90                   	nop

c002448c <SATA::powerSaving(PowerSavingLevel)>:
c002448c:	c3                   	ret    
c002448d:	90                   	nop

c002448e <SATA::open(int, int, void*)>:
c002448e:	56                   	push   esi
c002448f:	53                   	push   ebx
c0024490:	50                   	push   eax
c0024491:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024495:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024499:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c00244a3:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c00244a9:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c00244b3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00244b7:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c00244c1:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c00244c7:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c00244ce:	e8 10 ba fe ff       	call   c000fee3 <Phys::allocatePage()>
c00244d3:	89 c6                	mov    esi,eax
c00244d5:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c00244db:	81 c6 00 10 00 00    	add    esi,0x1000
c00244e1:	e8 fd b9 fe ff       	call   c000fee3 <Phys::allocatePage()>
c00244e6:	39 c6                	cmp    esi,eax
c00244e8:	74 10                	je     c00244fa <SATA::open(int, int, void*)+0x6c>
c00244ea:	83 ec 0c             	sub    esp,0xc
c00244ed:	68 b0 c5 02 c0       	push   0xc002c5b0
c00244f2:	e8 38 5b ff ff       	call   c001a02f <Krnl::panic(char const*)>
c00244f7:	83 c4 10             	add    esp,0x10
c00244fa:	83 ec 0c             	sub    esp,0xc
c00244fd:	6a 02                	push   0x2
c00244ff:	e8 21 d6 fe ff       	call   c0011b25 <Virt::allocateKernelVirtualPages(int)>
c0024504:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c002450a:	e8 a6 d7 fe ff       	call   c0011cb5 <Virt::getAKernelVAS()>
c002450f:	6a 03                	push   0x3
c0024511:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c0024517:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c002451d:	50                   	push   eax
c002451e:	e8 cd dc fe ff       	call   c00121f0 <VAS::mapPage(unsigned long, unsigned long, int)>
c0024523:	83 c4 14             	add    esp,0x14
c0024526:	53                   	push   ebx
c0024527:	e8 9c fe fe ff       	call   c00143c8 <PhysicalDisk::startCache()>
c002452c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002452f:	e8 b6 1f ff ff       	call   c00164ea <createPartitionsForDisk(PhysicalDisk*)>
c0024534:	83 c4 14             	add    esp,0x14
c0024537:	31 c0                	xor    eax,eax
c0024539:	5b                   	pop    ebx
c002453a:	5e                   	pop    esi
c002453b:	c3                   	ret    

c002453c <SATA::SATA()>:
c002453c:	83 ec 0c             	sub    esp,0xc
c002453f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024543:	83 ec 04             	sub    esp,0x4
c0024546:	68 00 02 00 00       	push   0x200
c002454b:	68 c4 c5 02 c0       	push   0xc002c5c4
c0024550:	50                   	push   eax
c0024551:	e8 0a fe fe ff       	call   c0014360 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024556:	83 c4 10             	add    esp,0x10
c0024559:	ba 34 c6 02 c0       	mov    edx,0xc002c634
c002455e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024562:	89 10                	mov    DWORD PTR [eax],edx
c0024564:	90                   	nop
c0024565:	83 c4 0c             	add    esp,0xc
c0024568:	c3                   	ret    
c0024569:	90                   	nop

c002456a <SATA::access(unsigned long long, int, void*, bool)>:
c002456a:	55                   	push   ebp
c002456b:	57                   	push   edi
c002456c:	56                   	push   esi
c002456d:	53                   	push   ebx
c002456e:	83 ec 2c             	sub    esp,0x2c
c0024571:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0024575:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0024579:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002457d:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0024581:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0024585:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c002458a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002458e:	7e 10                	jle    c00245a0 <SATA::access(unsigned long long, int, void*, bool)+0x36>
c0024590:	83 ec 0c             	sub    esp,0xc
c0024593:	68 d4 c5 02 c0       	push   0xc002c5d4
c0024598:	e8 92 5a ff ff       	call   c001a02f <Krnl::panic(char const*)>
c002459d:	83 c4 10             	add    esp,0x10
c00245a0:	8b b5 6c 01 00 00    	mov    esi,DWORD PTR [ebp+0x16c]
c00245a6:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c00245ac:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00245b2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00245b6:	89 f0                	mov    eax,esi
c00245b8:	c1 e0 07             	shl    eax,0x7
c00245bb:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00245bf:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c00245c9:	53                   	push   ebx
c00245ca:	8d 46 02             	lea    eax,[esi+0x2]
c00245cd:	53                   	push   ebx
c00245ce:	c1 e0 07             	shl    eax,0x7
c00245d1:	bb 01 00 00 00       	mov    ebx,0x1
c00245d6:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c00245da:	50                   	push   eax
c00245db:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c00245e1:	e8 aa ef ff ff       	call   c0023590 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c00245e6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00245ea:	83 c4 10             	add    esp,0x10
c00245ed:	83 7c 24 14 ff       	cmp    DWORD PTR [esp+0x14],0xffffffff
c00245f2:	0f 84 ce 01 00 00    	je     c00247c6 <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c00245f8:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00245fc:	c1 e0 09             	shl    eax,0x9
c00245ff:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c0024604:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0024608:	74 17                	je     c0024621 <SATA::access(unsigned long long, int, void*, bool)+0xb7>
c002460a:	51                   	push   ecx
c002460b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002460f:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0024613:	ff b5 78 01 00 00    	push   DWORD PTR [ebp+0x178]
c0024619:	e8 26 c1 fd ff       	call   c0000744 <memcpy>
c002461e:	83 c4 10             	add    esp,0x10
c0024621:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0024627:	8d 46 02             	lea    eax,[esi+0x2]
c002462a:	c1 e0 07             	shl    eax,0x7
c002462d:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0024631:	8b 00                	mov    eax,DWORD PTR [eax]
c0024633:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0024639:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c002463f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0024643:	c1 e1 05             	shl    ecx,0x5
c0024646:	01 c8                	add    eax,ecx
c0024648:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c002464c:	8a 18                	mov    bl,BYTE PTR [eax]
c002464e:	83 e1 01             	and    ecx,0x1
c0024651:	83 e3 bf             	and    ebx,0xffffffbf
c0024654:	c1 e1 06             	shl    ecx,0x6
c0024657:	09 d9                	or     ecx,ebx
c0024659:	88 08                	mov    BYTE PTR [eax],cl
c002465b:	8b 08                	mov    ecx,DWORD PTR [eax]
c002465d:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c0024663:	81 c9 05 00 01 00    	or     ecx,0x10005
c0024669:	89 08                	mov    DWORD PTR [eax],ecx
c002466b:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0024671:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0024677:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c002467d:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0024680:	52                   	push   edx
c0024681:	68 90 00 00 00       	push   0x90
c0024686:	6a 00                	push   0x0
c0024688:	53                   	push   ebx
c0024689:	e8 ea c0 fd ff       	call   c0000778 <memset>
c002468e:	8b 85 74 01 00 00    	mov    eax,DWORD PTR [ebp+0x174]
c0024694:	66 89 7b 04          	mov    WORD PTR [ebx+0x4],di
c0024698:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c002469e:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c00246a2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00246a6:	83 c4 10             	add    esp,0x10
c00246a9:	8d 48 ff             	lea    ecx,[eax-0x1]
c00246ac:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c00246b2:	81 e1 ff ff 3f 00    	and    ecx,0x3fffff
c00246b8:	25 00 00 c0 ff       	and    eax,0xffc00000
c00246bd:	09 c8                	or     eax,ecx
c00246bf:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c00246c5:	66 8b 03             	mov    ax,WORD PTR [ebx]
c00246c8:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c00246cf:	66 25 00 7f          	and    ax,0x7f00
c00246d3:	66 0d 27 80          	or     ax,0x8027
c00246d7:	80 7c 24 10 01       	cmp    BYTE PTR [esp+0x10],0x1
c00246dc:	66 89 03             	mov    WORD PTR [ebx],ax
c00246df:	19 c0                	sbb    eax,eax
c00246e1:	83 e0 f0             	and    eax,0xfffffff0
c00246e4:	83 c0 35             	add    eax,0x35
c00246e7:	88 43 02             	mov    BYTE PTR [ebx+0x2],al
c00246ea:	89 f8                	mov    eax,edi
c00246ec:	c1 e8 10             	shr    eax,0x10
c00246ef:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00246f2:	89 f8                	mov    eax,edi
c00246f4:	c1 e8 18             	shr    eax,0x18
c00246f7:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c00246fa:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c00246fe:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0024701:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024705:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0024708:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c002470c:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c0024710:	89 f3                	mov    ebx,esi
c0024712:	31 c0                	xor    eax,eax
c0024714:	c1 e3 07             	shl    ebx,0x7
c0024717:	03 5c 24 0c          	add    ebx,DWORD PTR [esp+0xc]
c002471b:	8b 8b 20 01 00 00    	mov    ecx,DWORD PTR [ebx+0x120]
c0024721:	80 e1 88             	and    cl,0x88
c0024724:	74 0a                	je     c0024730 <SATA::access(unsigned long long, int, void*, bool)+0x1c6>
c0024726:	3d 40 42 0f 00       	cmp    eax,0xf4240
c002472b:	74 0a                	je     c0024737 <SATA::access(unsigned long long, int, void*, bool)+0x1cd>
c002472d:	40                   	inc    eax
c002472e:	eb eb                	jmp    c002471b <SATA::access(unsigned long long, int, void*, bool)+0x1b1>
c0024730:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024735:	75 0a                	jne    c0024741 <SATA::access(unsigned long long, int, void*, bool)+0x1d7>
c0024737:	83 ec 0c             	sub    esp,0xc
c002473a:	68 0d c6 02 c0       	push   0xc002c60d
c002473f:	eb 56                	jmp    c0024797 <SATA::access(unsigned long long, int, void*, bool)+0x22d>
c0024741:	b8 01 00 00 00       	mov    eax,0x1
c0024746:	8a 4c 24 14          	mov    cl,BYTE PTR [esp+0x14]
c002474a:	c1 e6 07             	shl    esi,0x7
c002474d:	d3 e0                	shl    eax,cl
c002474f:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0024753:	89 83 38 01 00 00    	mov    DWORD PTR [ebx+0x138],eax
c0024759:	8b 8e 38 01 00 00    	mov    ecx,DWORD PTR [esi+0x138]
c002475f:	85 c8                	test   eax,ecx
c0024761:	74 20                	je     c0024783 <SATA::access(unsigned long long, int, void*, bool)+0x219>
c0024763:	8b 8e 10 01 00 00    	mov    ecx,DWORD PTR [esi+0x110]
c0024769:	0f ba e1 1e          	bt     ecx,0x1e
c002476d:	73 ea                	jae    c0024759 <SATA::access(unsigned long long, int, void*, bool)+0x1ef>
c002476f:	83 ec 0c             	sub    esp,0xc
c0024772:	31 db                	xor    ebx,ebx
c0024774:	68 1b c6 02 c0       	push   0xc002c61b
c0024779:	e8 b1 58 ff ff       	call   c001a02f <Krnl::panic(char const*)>
c002477e:	83 c4 10             	add    esp,0x10
c0024781:	eb 43                	jmp    c00247c6 <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024783:	8b 86 10 01 00 00    	mov    eax,DWORD PTR [esi+0x110]
c0024789:	0f ba e0 1e          	bt     eax,0x1e
c002478d:	73 17                	jae    c00247a6 <SATA::access(unsigned long long, int, void*, bool)+0x23c>
c002478f:	83 ec 0c             	sub    esp,0xc
c0024792:	68 1b c6 02 c0       	push   0xc002c61b
c0024797:	e8 93 58 ff ff       	call   c001a02f <Krnl::panic(char const*)>
c002479c:	bb 01 00 00 00       	mov    ebx,0x1
c00247a1:	83 c4 10             	add    esp,0x10
c00247a4:	eb 20                	jmp    c00247c6 <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c00247a6:	31 db                	xor    ebx,ebx
c00247a8:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c00247ad:	75 17                	jne    c00247c6 <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c00247af:	50                   	push   eax
c00247b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00247b4:	ff b5 78 01 00 00    	push   DWORD PTR [ebp+0x178]
c00247ba:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00247be:	e8 81 bf fd ff       	call   c0000744 <memcpy>
c00247c3:	83 c4 10             	add    esp,0x10
c00247c6:	83 c4 2c             	add    esp,0x2c
c00247c9:	89 d8                	mov    eax,ebx
c00247cb:	5b                   	pop    ebx
c00247cc:	5e                   	pop    esi
c00247cd:	5f                   	pop    edi
c00247ce:	5d                   	pop    ebp
c00247cf:	c3                   	ret    

c00247d0 <SATA::read(unsigned long long, int, void*)>:
c00247d0:	57                   	push   edi
c00247d1:	b8 04 00 00 00       	mov    eax,0x4
c00247d6:	56                   	push   esi
c00247d7:	53                   	push   ebx
c00247d8:	83 ec 10             	sub    esp,0x10
c00247db:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00247df:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00247e3:	8d 4b ff             	lea    ecx,[ebx-0x1]
c00247e6:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00247ea:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00247ee:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c00247f4:	77 3b                	ja     c0024831 <SATA::read(unsigned long long, int, void*)+0x61>
c00247f6:	b8 06 00 00 00       	mov    eax,0x6
c00247fb:	85 d2                	test   edx,edx
c00247fd:	74 32                	je     c0024831 <SATA::read(unsigned long long, int, void*)+0x61>
c00247ff:	50                   	push   eax
c0024800:	50                   	push   eax
c0024801:	6a 00                	push   0x0
c0024803:	52                   	push   edx
c0024804:	53                   	push   ebx
c0024805:	57                   	push   edi
c0024806:	56                   	push   esi
c0024807:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002480b:	e8 5a fd ff ff       	call   c002456a <SATA::access(unsigned long long, int, void*, bool)>
c0024810:	83 c4 20             	add    esp,0x20
c0024813:	85 c0                	test   eax,eax
c0024815:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024819:	75 11                	jne    c002482c <SATA::read(unsigned long long, int, void*)+0x5c>
c002481b:	01 1d c8 1e 03 c0    	add    DWORD PTR ds:0xc0031ec8,ebx
c0024821:	e8 54 c1 fe ff       	call   c001097a <VgaText::updateDiskUsage()>
c0024826:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002482a:	eb 05                	jmp    c0024831 <SATA::read(unsigned long long, int, void*)+0x61>
c002482c:	b8 01 00 00 00       	mov    eax,0x1
c0024831:	83 c4 10             	add    esp,0x10
c0024834:	5b                   	pop    ebx
c0024835:	5e                   	pop    esi
c0024836:	5f                   	pop    edi
c0024837:	c3                   	ret    

c0024838 <SATA::write(unsigned long long, int, void*)>:
c0024838:	55                   	push   ebp
c0024839:	b8 04 00 00 00       	mov    eax,0x4
c002483e:	57                   	push   edi
c002483f:	56                   	push   esi
c0024840:	53                   	push   ebx
c0024841:	83 ec 1c             	sub    esp,0x1c
c0024844:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0024848:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c002484c:	8d 75 ff             	lea    esi,[ebp-0x1]
c002484f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0024853:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0024857:	81 fe fe 00 00 00    	cmp    esi,0xfe
c002485d:	77 56                	ja     c00248b5 <SATA::write(unsigned long long, int, void*)+0x7d>
c002485f:	b8 06 00 00 00       	mov    eax,0x6
c0024864:	85 ff                	test   edi,edi
c0024866:	74 4d                	je     c00248b5 <SATA::write(unsigned long long, int, void*)+0x7d>
c0024868:	89 ee                	mov    esi,ebp
c002486a:	c1 e6 09             	shl    esi,0x9
c002486d:	01 fe                	add    esi,edi
c002486f:	89 c8                	mov    eax,ecx
c0024871:	89 da                	mov    edx,ebx
c0024873:	83 c0 01             	add    eax,0x1
c0024876:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002487a:	83 d2 00             	adc    edx,0x0
c002487d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0024881:	50                   	push   eax
c0024882:	50                   	push   eax
c0024883:	6a 01                	push   0x1
c0024885:	57                   	push   edi
c0024886:	81 c7 00 02 00 00    	add    edi,0x200
c002488c:	6a 01                	push   0x1
c002488e:	53                   	push   ebx
c002488f:	51                   	push   ecx
c0024890:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0024894:	e8 d1 fc ff ff       	call   c002456a <SATA::access(unsigned long long, int, void*, bool)>
c0024899:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c002489d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00248a1:	83 c4 20             	add    esp,0x20
c00248a4:	39 f7                	cmp    edi,esi
c00248a6:	75 c7                	jne    c002486f <SATA::write(unsigned long long, int, void*)+0x37>
c00248a8:	01 2d c4 1e 03 c0    	add    DWORD PTR ds:0xc0031ec4,ebp
c00248ae:	e8 c7 c0 fe ff       	call   c001097a <VgaText::updateDiskUsage()>
c00248b3:	31 c0                	xor    eax,eax
c00248b5:	83 c4 1c             	add    esp,0x1c
c00248b8:	5b                   	pop    ebx
c00248b9:	5e                   	pop    esi
c00248ba:	5f                   	pop    edi
c00248bb:	5d                   	pop    ebp
c00248bc:	c3                   	ret    
c00248bd:	90                   	nop

c00248be <SATAPI::write(unsigned long long, int, void*)>:
c00248be:	b8 03 00 00 00       	mov    eax,0x3
c00248c3:	c3                   	ret    

c00248c4 <SATAPI::close(int, int, void*)>:
c00248c4:	83 ec 0c             	sub    esp,0xc
c00248c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00248cb:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00248d1:	85 c0                	test   eax,eax
c00248d3:	74 0c                	je     c00248e1 <SATAPI::close(int, int, void*)+0x1d>
c00248d5:	83 ec 0c             	sub    esp,0xc
c00248d8:	8b 10                	mov    edx,DWORD PTR [eax]
c00248da:	50                   	push   eax
c00248db:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00248de:	83 c4 10             	add    esp,0x10
c00248e1:	31 c0                	xor    eax,eax
c00248e3:	83 c4 0c             	add    esp,0xc
c00248e6:	c3                   	ret    
c00248e7:	90                   	nop

c00248e8 <SATAPI::SATAPI()>:
c00248e8:	83 ec 0c             	sub    esp,0xc
c00248eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00248ef:	83 ec 04             	sub    esp,0x4
c00248f2:	68 00 08 00 00       	push   0x800
c00248f7:	68 64 c6 02 c0       	push   0xc002c664
c00248fc:	50                   	push   eax
c00248fd:	e8 5e fa fe ff       	call   c0014360 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024902:	83 c4 10             	add    esp,0x10
c0024905:	ba 10 c7 02 c0       	mov    edx,0xc002c710
c002490a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002490e:	89 10                	mov    DWORD PTR [eax],edx
c0024910:	90                   	nop
c0024911:	83 c4 0c             	add    esp,0xc
c0024914:	c3                   	ret    
c0024915:	90                   	nop

c0024916 <SATAPI::diskRemoved()>:
c0024916:	83 ec 18             	sub    esp,0x18
c0024919:	68 70 c6 02 c0       	push   0xc002c670
c002491e:	e8 f2 e1 fe ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c0024923:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024927:	c6 80 74 01 00 00 00 	mov    BYTE PTR [eax+0x174],0x0
c002492e:	83 c4 1c             	add    esp,0x1c
c0024931:	c3                   	ret    

c0024932 <SATAPI::diskInserted()>:
c0024932:	53                   	push   ebx
c0024933:	83 ec 14             	sub    esp,0x14
c0024936:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c002493a:	68 87 c6 02 c0       	push   0xc002c687
c002493f:	e8 d1 e1 fe ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c0024944:	c6 83 74 01 00 00 01 	mov    BYTE PTR [ebx+0x174],0x1
c002494b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002494e:	e8 75 fa fe ff       	call   c00143c8 <PhysicalDisk::startCache()>
c0024953:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0024957:	83 c4 18             	add    esp,0x18
c002495a:	5b                   	pop    ebx
c002495b:	e9 8a 1b ff ff       	jmp    c00164ea <createPartitionsForDisk(PhysicalDisk*)>

c0024960 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c0024960:	55                   	push   ebp
c0024961:	57                   	push   edi
c0024962:	56                   	push   esi
c0024963:	53                   	push   ebx
c0024964:	83 ec 24             	sub    esp,0x24
c0024967:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c002496b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c002496f:	8b be 6c 01 00 00    	mov    edi,DWORD PTR [esi+0x16c]
c0024975:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0024979:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c002497d:	8b 86 70 01 00 00    	mov    eax,DWORD PTR [esi+0x170]
c0024983:	8d 5f 02             	lea    ebx,[edi+0x2]
c0024986:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002498c:	c1 e3 07             	shl    ebx,0x7
c002498f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024993:	89 f8                	mov    eax,edi
c0024995:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c0024999:	c1 e0 07             	shl    eax,0x7
c002499c:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00249a0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00249a4:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c00249ae:	53                   	push   ebx
c00249af:	ff b6 70 01 00 00    	push   DWORD PTR [esi+0x170]
c00249b5:	e8 d6 eb ff ff       	call   c0023590 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c00249ba:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00249be:	83 c4 10             	add    esp,0x10
c00249c1:	b8 01 00 00 00       	mov    eax,0x1
c00249c6:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c00249cb:	0f 84 8a 01 00 00    	je     c0024b5b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fb>
c00249d1:	8b 8e 70 01 00 00    	mov    ecx,DWORD PTR [esi+0x170]
c00249d7:	8b 03                	mov    eax,DWORD PTR [ebx]
c00249d9:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c00249df:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c00249e5:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00249e9:	c1 e1 05             	shl    ecx,0x5
c00249ec:	01 c8                	add    eax,ecx
c00249ee:	8b 08                	mov    ecx,DWORD PTR [eax]
c00249f0:	81 e1 80 ff 00 00    	and    ecx,0xff80
c00249f6:	81 c9 25 00 01 00    	or     ecx,0x10025
c00249fc:	89 08                	mov    DWORD PTR [eax],ecx
c00249fe:	8b 8e 70 01 00 00    	mov    ecx,DWORD PTR [esi+0x170]
c0024a04:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0024a0a:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0024a10:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0024a13:	52                   	push   edx
c0024a14:	68 90 00 00 00       	push   0x90
c0024a19:	6a 00                	push   0x0
c0024a1b:	53                   	push   ebx
c0024a1c:	e8 57 bd fd ff       	call   c0000778 <memset>
c0024a21:	83 c4 0c             	add    esp,0xc
c0024a24:	8d 43 40             	lea    eax,[ebx+0x40]
c0024a27:	6a 0c                	push   0xc
c0024a29:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024a2d:	50                   	push   eax
c0024a2e:	e8 11 bd fd ff       	call   c0000744 <memcpy>
c0024a33:	8b 86 78 01 00 00    	mov    eax,DWORD PTR [esi+0x178]
c0024a39:	89 ea                	mov    edx,ebp
c0024a3b:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c0024a41:	c1 ea 18             	shr    edx,0x18
c0024a44:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0024a48:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c0024a4b:	8d 48 ff             	lea    ecx,[eax-0x1]
c0024a4e:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c0024a52:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0024a58:	81 e1 ff ff 3f 00    	and    ecx,0x3fffff
c0024a5e:	25 00 00 c0 ff       	and    eax,0xffc00000
c0024a63:	66 89 6b 04          	mov    WORD PTR [ebx+0x4],bp
c0024a67:	09 c8                	or     eax,ecx
c0024a69:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0024a6d:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0024a73:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0024a76:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c0024a7d:	66 25 00 7f          	and    ax,0x7f00
c0024a81:	66 0d 27 80          	or     ax,0x8027
c0024a85:	66 89 03             	mov    WORD PTR [ebx],ax
c0024a88:	89 e8                	mov    eax,ebp
c0024a8a:	c1 e8 10             	shr    eax,0x10
c0024a8d:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0024a90:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0024a94:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0024a97:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024a9b:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0024a9e:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0024aa2:	83 c4 10             	add    esp,0x10
c0024aa5:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c0024aa9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0024aad:	31 c0                	xor    eax,eax
c0024aaf:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c0024ab5:	80 e1 88             	and    cl,0x88
c0024ab8:	74 0a                	je     c0024ac4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x164>
c0024aba:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024abf:	74 0a                	je     c0024acb <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c0024ac1:	40                   	inc    eax
c0024ac2:	eb eb                	jmp    c0024aaf <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x14f>
c0024ac4:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024ac9:	75 0f                	jne    c0024ada <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x17a>
c0024acb:	83 ec 0c             	sub    esp,0xc
c0024ace:	68 0d c6 02 c0       	push   0xc002c60d
c0024ad3:	e8 57 55 ff ff       	call   c001a02f <Krnl::panic(char const*)>
c0024ad8:	eb 3a                	jmp    c0024b14 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1b4>
c0024ada:	b8 01 00 00 00       	mov    eax,0x1
c0024adf:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0024ae3:	c1 e7 07             	shl    edi,0x7
c0024ae6:	d3 e0                	shl    eax,cl
c0024ae8:	03 3c 24             	add    edi,DWORD PTR [esp]
c0024aeb:	89 82 38 01 00 00    	mov    DWORD PTR [edx+0x138],eax
c0024af1:	8b 97 38 01 00 00    	mov    edx,DWORD PTR [edi+0x138]
c0024af7:	85 d0                	test   eax,edx
c0024af9:	74 23                	je     c0024b1e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1be>
c0024afb:	8b 97 10 01 00 00    	mov    edx,DWORD PTR [edi+0x110]
c0024b01:	0f ba e2 1e          	bt     edx,0x1e
c0024b05:	73 ea                	jae    c0024af1 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x191>
c0024b07:	83 ec 0c             	sub    esp,0xc
c0024b0a:	68 9f c6 02 c0       	push   0xc002c69f
c0024b0f:	e8 01 e0 fe ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c0024b14:	83 c4 10             	add    esp,0x10
c0024b17:	b8 01 00 00 00       	mov    eax,0x1
c0024b1c:	eb 3d                	jmp    c0024b5b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fb>
c0024b1e:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c0024b24:	0f ba e0 1e          	bt     eax,0x1e
c0024b28:	73 0a                	jae    c0024b34 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1d4>
c0024b2a:	83 ec 0c             	sub    esp,0xc
c0024b2d:	68 b2 c6 02 c0       	push   0xc002c6b2
c0024b32:	eb db                	jmp    c0024b0f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1af>
c0024b34:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c0024b39:	74 1e                	je     c0024b59 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f9>
c0024b3b:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0024b40:	74 17                	je     c0024b59 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f9>
c0024b42:	50                   	push   eax
c0024b43:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024b47:	ff b6 7c 01 00 00    	push   DWORD PTR [esi+0x17c]
c0024b4d:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0024b51:	e8 ee bb fd ff       	call   c0000744 <memcpy>
c0024b56:	83 c4 10             	add    esp,0x10
c0024b59:	31 c0                	xor    eax,eax
c0024b5b:	83 c4 1c             	add    esp,0x1c
c0024b5e:	5b                   	pop    ebx
c0024b5f:	5e                   	pop    esi
c0024b60:	5f                   	pop    edi
c0024b61:	5d                   	pop    ebp
c0024b62:	c3                   	ret    
c0024b63:	90                   	nop

c0024b64 <SATAPI::eject()>:
c0024b64:	57                   	push   edi
c0024b65:	b9 03 00 00 00       	mov    ecx,0x3
c0024b6a:	53                   	push   ebx
c0024b6b:	83 ec 14             	sub    esp,0x14
c0024b6e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0024b72:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024b76:	fc                   	cld    
c0024b77:	31 c0                	xor    eax,eax
c0024b79:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0024b7b:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0024b80:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0024b85:	50                   	push   eax
c0024b86:	6a 00                	push   0x0
c0024b88:	6a 00                	push   0x0
c0024b8a:	6a 00                	push   0x0
c0024b8c:	6a 00                	push   0x0
c0024b8e:	6a 02                	push   0x2
c0024b90:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0024b94:	50                   	push   eax
c0024b95:	53                   	push   ebx
c0024b96:	e8 c5 fd ff ff       	call   c0024960 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0024b9b:	83 c4 14             	add    esp,0x14
c0024b9e:	53                   	push   ebx
c0024b9f:	e8 72 fd ff ff       	call   c0024916 <SATAPI::diskRemoved()>
c0024ba4:	83 c4 24             	add    esp,0x24
c0024ba7:	31 c0                	xor    eax,eax
c0024ba9:	5b                   	pop    ebx
c0024baa:	5f                   	pop    edi
c0024bab:	c3                   	ret    

c0024bac <SATAPI::detectMedia()>:
c0024bac:	56                   	push   esi
c0024bad:	53                   	push   ebx
c0024bae:	83 ec 28             	sub    esp,0x28
c0024bb1:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024bb5:	6a 0c                	push   0xc
c0024bb7:	6a 00                	push   0x0
c0024bb9:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0024bbd:	56                   	push   esi
c0024bbe:	e8 b5 bb fd ff       	call   c0000778 <memset>
c0024bc3:	83 c4 0c             	add    esp,0xc
c0024bc6:	6a 00                	push   0x0
c0024bc8:	6a 00                	push   0x0
c0024bca:	6a 00                	push   0x0
c0024bcc:	6a 00                	push   0x0
c0024bce:	6a 00                	push   0x0
c0024bd0:	56                   	push   esi
c0024bd1:	53                   	push   ebx
c0024bd2:	e8 89 fd ff ff       	call   c0024960 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0024bd7:	83 c4 1c             	add    esp,0x1c
c0024bda:	6a 0c                	push   0xc
c0024bdc:	6a 00                	push   0x0
c0024bde:	56                   	push   esi
c0024bdf:	e8 94 bb fd ff       	call   c0000778 <memset>
c0024be4:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0024be9:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0024bee:	83 c4 0c             	add    esp,0xc
c0024bf1:	6a 01                	push   0x1
c0024bf3:	8d 44 24 16          	lea    eax,[esp+0x16]
c0024bf7:	50                   	push   eax
c0024bf8:	6a 00                	push   0x0
c0024bfa:	6a 00                	push   0x0
c0024bfc:	6a 12                	push   0x12
c0024bfe:	56                   	push   esi
c0024bff:	53                   	push   ebx
c0024c00:	e8 5b fd ff ff       	call   c0024960 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0024c05:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0024c09:	83 c4 20             	add    esp,0x20
c0024c0c:	83 e0 7f             	and    eax,0x7f
c0024c0f:	3c 70                	cmp    al,0x70
c0024c11:	74 15                	je     c0024c28 <SATAPI::detectMedia()+0x7c>
c0024c13:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0024c1a:	75 0c                	jne    c0024c28 <SATAPI::detectMedia()+0x7c>
c0024c1c:	83 ec 0c             	sub    esp,0xc
c0024c1f:	53                   	push   ebx
c0024c20:	e8 0d fd ff ff       	call   c0024932 <SATAPI::diskInserted()>
c0024c25:	83 c4 10             	add    esp,0x10
c0024c28:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0024c2c:	83 e0 0f             	and    eax,0xf
c0024c2f:	3c 02                	cmp    al,0x2
c0024c31:	75 1b                	jne    c0024c4e <SATAPI::detectMedia()+0xa2>
c0024c33:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0024c38:	75 2d                	jne    c0024c67 <SATAPI::detectMedia()+0xbb>
c0024c3a:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0024c41:	74 24                	je     c0024c67 <SATAPI::detectMedia()+0xbb>
c0024c43:	83 ec 0c             	sub    esp,0xc
c0024c46:	53                   	push   ebx
c0024c47:	e8 ca fc ff ff       	call   c0024916 <SATAPI::diskRemoved()>
c0024c4c:	eb 16                	jmp    c0024c64 <SATAPI::detectMedia()+0xb8>
c0024c4e:	84 c0                	test   al,al
c0024c50:	75 15                	jne    c0024c67 <SATAPI::detectMedia()+0xbb>
c0024c52:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0024c59:	75 0c                	jne    c0024c67 <SATAPI::detectMedia()+0xbb>
c0024c5b:	83 ec 0c             	sub    esp,0xc
c0024c5e:	53                   	push   ebx
c0024c5f:	e8 ce fc ff ff       	call   c0024932 <SATAPI::diskInserted()>
c0024c64:	83 c4 10             	add    esp,0x10
c0024c67:	83 c4 24             	add    esp,0x24
c0024c6a:	5b                   	pop    ebx
c0024c6b:	5e                   	pop    esi
c0024c6c:	c3                   	ret    
c0024c6d:	90                   	nop

c0024c6e <SATAPI::open(int, int, void*)>:
c0024c6e:	56                   	push   esi
c0024c6f:	53                   	push   ebx
c0024c70:	50                   	push   eax
c0024c71:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024c75:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024c79:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0024c83:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0024c89:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0024c93:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024c97:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0024ca1:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0024ca7:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0024cae:	e8 30 b2 fe ff       	call   c000fee3 <Phys::allocatePage()>
c0024cb3:	89 c6                	mov    esi,eax
c0024cb5:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024cbb:	81 c6 00 10 00 00    	add    esi,0x1000
c0024cc1:	e8 1d b2 fe ff       	call   c000fee3 <Phys::allocatePage()>
c0024cc6:	39 c6                	cmp    esi,eax
c0024cc8:	74 10                	je     c0024cda <SATAPI::open(int, int, void*)+0x6c>
c0024cca:	83 ec 0c             	sub    esp,0xc
c0024ccd:	68 c7 c6 02 c0       	push   0xc002c6c7
c0024cd2:	e8 58 53 ff ff       	call   c001a02f <Krnl::panic(char const*)>
c0024cd7:	83 c4 10             	add    esp,0x10
c0024cda:	83 ec 0c             	sub    esp,0xc
c0024cdd:	6a 02                	push   0x2
c0024cdf:	e8 41 ce fe ff       	call   c0011b25 <Virt::allocateKernelVirtualPages(int)>
c0024ce4:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c0024cea:	e8 c6 cf fe ff       	call   c0011cb5 <Virt::getAKernelVAS()>
c0024cef:	6a 03                	push   0x3
c0024cf1:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c0024cf7:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c0024cfd:	50                   	push   eax
c0024cfe:	e8 ed d4 fe ff       	call   c00121f0 <VAS::mapPage(unsigned long, unsigned long, int)>
c0024d03:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c0024d0a:	83 c4 14             	add    esp,0x14
c0024d0d:	53                   	push   ebx
c0024d0e:	e8 99 fe ff ff       	call   c0024bac <SATAPI::detectMedia()>
c0024d13:	83 c4 14             	add    esp,0x14
c0024d16:	31 c0                	xor    eax,eax
c0024d18:	5b                   	pop    ebx
c0024d19:	5e                   	pop    esi
c0024d1a:	c3                   	ret    
c0024d1b:	90                   	nop

c0024d1c <SATAPI::read(unsigned long long, int, void*)>:
c0024d1c:	55                   	push   ebp
c0024d1d:	57                   	push   edi
c0024d1e:	56                   	push   esi
c0024d1f:	53                   	push   ebx
c0024d20:	83 ec 1c             	sub    esp,0x1c
c0024d23:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0024d27:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024d2b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0024d2f:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c0024d36:	74 19                	je     c0024d51 <SATAPI::read(unsigned long long, int, void*)+0x35>
c0024d38:	83 7c 24 3c 04       	cmp    DWORD PTR [esp+0x3c],0x4
c0024d3d:	7e 2e                	jle    c0024d6d <SATAPI::read(unsigned long long, int, void*)+0x51>
c0024d3f:	83 ec 0c             	sub    esp,0xc
c0024d42:	68 dd c6 02 c0       	push   0xc002c6dd
c0024d47:	e8 e3 52 ff ff       	call   c001a02f <Krnl::panic(char const*)>
c0024d4c:	83 c4 10             	add    esp,0x10
c0024d4f:	eb 1c                	jmp    c0024d6d <SATAPI::read(unsigned long long, int, void*)+0x51>
c0024d51:	83 ec 0c             	sub    esp,0xc
c0024d54:	55                   	push   ebp
c0024d55:	e8 52 fe ff ff       	call   c0024bac <SATAPI::detectMedia()>
c0024d5a:	83 c4 10             	add    esp,0x10
c0024d5d:	b8 02 00 00 00       	mov    eax,0x2
c0024d62:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c0024d69:	75 cd                	jne    c0024d38 <SATAPI::read(unsigned long long, int, void*)+0x1c>
c0024d6b:	eb 49                	jmp    c0024db6 <SATAPI::read(unsigned long long, int, void*)+0x9a>
c0024d6d:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024d71:	b9 03 00 00 00       	mov    ecx,0x3
c0024d76:	fc                   	cld    
c0024d77:	31 c0                	xor    eax,eax
c0024d79:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0024d7b:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0024d80:	89 d8                	mov    eax,ebx
c0024d82:	86 e0                	xchg   al,ah
c0024d84:	c1 c0 10             	rol    eax,0x10
c0024d87:	86 e0                	xchg   al,ah
c0024d89:	89 44 24 06          	mov    DWORD PTR [esp+0x6],eax
c0024d8d:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c0024d91:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0024d95:	50                   	push   eax
c0024d96:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0024d9a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0024d9e:	56                   	push   esi
c0024d9f:	53                   	push   ebx
c0024da0:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0024da4:	c1 e0 0b             	shl    eax,0xb
c0024da7:	50                   	push   eax
c0024da8:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0024dac:	50                   	push   eax
c0024dad:	55                   	push   ebp
c0024dae:	e8 ad fb ff ff       	call   c0024960 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0024db3:	83 c4 20             	add    esp,0x20
c0024db6:	83 c4 1c             	add    esp,0x1c
c0024db9:	5b                   	pop    ebx
c0024dba:	5e                   	pop    esi
c0024dbb:	5f                   	pop    edi
c0024dbc:	5d                   	pop    ebp
c0024dbd:	c3                   	ret    

c0024dbe <AVX::open(int, int, void*)>:
c0024dbe:	83 ec 0c             	sub    esp,0xc
c0024dc1:	e8 42 11 00 00       	call   c0025f08 <avxInit>
c0024dc6:	b8 00 00 00 00       	mov    eax,0x0
c0024dcb:	83 c4 0c             	add    esp,0xc
c0024dce:	c3                   	ret    
c0024dcf:	90                   	nop

c0024dd0 <AVX::close(int, int, void*)>:
c0024dd0:	83 ec 0c             	sub    esp,0xc
c0024dd3:	e8 31 11 00 00       	call   c0025f09 <avxClose>
c0024dd8:	b8 00 00 00 00       	mov    eax,0x0
c0024ddd:	83 c4 0c             	add    esp,0xc
c0024de0:	c3                   	ret    
c0024de1:	90                   	nop

c0024de2 <AVX::available()>:
c0024de2:	83 ec 0c             	sub    esp,0xc
c0024de5:	e8 16 11 00 00       	call   c0025f00 <avxDetect>
c0024dea:	85 c0                	test   eax,eax
c0024dec:	0f 95 c0             	setne  al
c0024def:	83 c4 0c             	add    esp,0xc
c0024df2:	c3                   	ret    
c0024df3:	90                   	nop

c0024df4 <AVX::save(void*)>:
c0024df4:	83 ec 0c             	sub    esp,0xc
c0024df7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024dfb:	83 ec 0c             	sub    esp,0xc
c0024dfe:	50                   	push   eax
c0024dff:	e8 02 11 00 00       	call   c0025f06 <avxSave>
c0024e04:	83 c4 10             	add    esp,0x10
c0024e07:	90                   	nop
c0024e08:	83 c4 0c             	add    esp,0xc
c0024e0b:	c3                   	ret    

c0024e0c <AVX::load(void*)>:
c0024e0c:	83 ec 0c             	sub    esp,0xc
c0024e0f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024e13:	83 ec 0c             	sub    esp,0xc
c0024e16:	50                   	push   eax
c0024e17:	e8 eb 10 00 00       	call   c0025f07 <avxLoad>
c0024e1c:	83 c4 10             	add    esp,0x10
c0024e1f:	90                   	nop
c0024e20:	83 c4 0c             	add    esp,0xc
c0024e23:	c3                   	ret    

c0024e24 <AVX::AVX()>:
c0024e24:	83 ec 0c             	sub    esp,0xc
c0024e27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024e2b:	83 ec 08             	sub    esp,0x8
c0024e2e:	68 40 c7 02 c0       	push   0xc002c740
c0024e33:	50                   	push   eax
c0024e34:	e8 05 f6 fe ff       	call   c001443e <FPU::FPU(char const*)>
c0024e39:	83 c4 10             	add    esp,0x10
c0024e3c:	ba 50 c7 02 c0       	mov    edx,0xc002c750
c0024e41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024e45:	89 10                	mov    DWORD PTR [eax],edx
c0024e47:	90                   	nop
c0024e48:	83 c4 0c             	add    esp,0xc
c0024e4b:	c3                   	ret    

c0024e4c <MMX::available()>:
c0024e4c:	a1 68 db 02 c0       	mov    eax,ds:0xc002db68
c0024e51:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0024e57:	83 e0 20             	and    eax,0x20
c0024e5a:	84 c0                	test   al,al
c0024e5c:	0f 95 c0             	setne  al
c0024e5f:	c3                   	ret    

c0024e60 <MMX::open(int, int, void*)>:
c0024e60:	83 ec 0c             	sub    esp,0xc
c0024e63:	e8 24 11 00 00       	call   c0025f8c <x87Init>
c0024e68:	b8 00 00 00 00       	mov    eax,0x0
c0024e6d:	83 c4 0c             	add    esp,0xc
c0024e70:	c3                   	ret    
c0024e71:	90                   	nop

c0024e72 <MMX::close(int, int, void*)>:
c0024e72:	83 ec 0c             	sub    esp,0xc
c0024e75:	e8 2c 11 00 00       	call   c0025fa6 <x87Close>
c0024e7a:	b8 00 00 00 00       	mov    eax,0x0
c0024e7f:	83 c4 0c             	add    esp,0xc
c0024e82:	c3                   	ret    
c0024e83:	90                   	nop

c0024e84 <MMX::save(void*)>:
c0024e84:	83 ec 0c             	sub    esp,0xc
c0024e87:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024e8b:	83 ec 0c             	sub    esp,0xc
c0024e8e:	50                   	push   eax
c0024e8f:	e8 ed 10 00 00       	call   c0025f81 <x87Save>
c0024e94:	83 c4 10             	add    esp,0x10
c0024e97:	90                   	nop
c0024e98:	83 c4 0c             	add    esp,0xc
c0024e9b:	c3                   	ret    

c0024e9c <MMX::load(void*)>:
c0024e9c:	83 ec 0c             	sub    esp,0xc
c0024e9f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024ea3:	83 ec 0c             	sub    esp,0xc
c0024ea6:	50                   	push   eax
c0024ea7:	e8 db 10 00 00       	call   c0025f87 <x87Load>
c0024eac:	83 c4 10             	add    esp,0x10
c0024eaf:	90                   	nop
c0024eb0:	83 c4 0c             	add    esp,0xc
c0024eb3:	c3                   	ret    

c0024eb4 <MMX::MMX()>:
c0024eb4:	83 ec 0c             	sub    esp,0xc
c0024eb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024ebb:	83 ec 08             	sub    esp,0x8
c0024ebe:	68 80 c7 02 c0       	push   0xc002c780
c0024ec3:	50                   	push   eax
c0024ec4:	e8 75 f5 fe ff       	call   c001443e <FPU::FPU(char const*)>
c0024ec9:	83 c4 10             	add    esp,0x10
c0024ecc:	ba 90 c7 02 c0       	mov    edx,0xc002c790
c0024ed1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024ed5:	89 10                	mov    DWORD PTR [eax],edx
c0024ed7:	90                   	nop
c0024ed8:	83 c4 0c             	add    esp,0xc
c0024edb:	c3                   	ret    

c0024edc <SSE::open(int, int, void*)>:
c0024edc:	83 ec 0c             	sub    esp,0xc
c0024edf:	e8 60 10 00 00       	call   c0025f44 <sseInit>
c0024ee4:	b8 00 00 00 00       	mov    eax,0x0
c0024ee9:	83 c4 0c             	add    esp,0xc
c0024eec:	c3                   	ret    
c0024eed:	90                   	nop

c0024eee <SSE::close(int, int, void*)>:
c0024eee:	83 ec 0c             	sub    esp,0xc
c0024ef1:	e8 5e 10 00 00       	call   c0025f54 <sseClose>
c0024ef6:	b8 00 00 00 00       	mov    eax,0x0
c0024efb:	83 c4 0c             	add    esp,0xc
c0024efe:	c3                   	ret    
c0024eff:	90                   	nop

c0024f00 <SSE::available()>:
c0024f00:	83 ec 1c             	sub    esp,0x1c
c0024f03:	e8 18 10 00 00       	call   c0025f20 <absolutelyNoChanceInHell>
c0024f08:	85 c0                	test   eax,eax
c0024f0a:	0f 95 c0             	setne  al
c0024f0d:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0024f11:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0024f15:	83 c4 1c             	add    esp,0x1c
c0024f18:	c3                   	ret    
c0024f19:	90                   	nop

c0024f1a <SSE::save(void*)>:
c0024f1a:	83 ec 0c             	sub    esp,0xc
c0024f1d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024f21:	83 ec 0c             	sub    esp,0xc
c0024f24:	50                   	push   eax
c0024f25:	e8 0e 10 00 00       	call   c0025f38 <sseSave>
c0024f2a:	83 c4 10             	add    esp,0x10
c0024f2d:	90                   	nop
c0024f2e:	83 c4 0c             	add    esp,0xc
c0024f31:	c3                   	ret    

c0024f32 <SSE::load(void*)>:
c0024f32:	83 ec 0c             	sub    esp,0xc
c0024f35:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024f39:	83 ec 0c             	sub    esp,0xc
c0024f3c:	50                   	push   eax
c0024f3d:	e8 fc 0f 00 00       	call   c0025f3e <sseLoad>
c0024f42:	83 c4 10             	add    esp,0x10
c0024f45:	90                   	nop
c0024f46:	83 c4 0c             	add    esp,0xc
c0024f49:	c3                   	ret    

c0024f4a <SSE::SSE()>:
c0024f4a:	83 ec 0c             	sub    esp,0xc
c0024f4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024f51:	83 ec 08             	sub    esp,0x8
c0024f54:	68 c0 c7 02 c0       	push   0xc002c7c0
c0024f59:	50                   	push   eax
c0024f5a:	e8 df f4 fe ff       	call   c001443e <FPU::FPU(char const*)>
c0024f5f:	83 c4 10             	add    esp,0x10
c0024f62:	ba d0 c7 02 c0       	mov    edx,0xc002c7d0
c0024f67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024f6b:	89 10                	mov    DWORD PTR [eax],edx
c0024f6d:	90                   	nop
c0024f6e:	83 c4 0c             	add    esp,0xc
c0024f71:	c3                   	ret    

c0024f72 <x87::open(int, int, void*)>:
c0024f72:	83 ec 0c             	sub    esp,0xc
c0024f75:	e8 12 10 00 00       	call   c0025f8c <x87Init>
c0024f7a:	b8 00 00 00 00       	mov    eax,0x0
c0024f7f:	83 c4 0c             	add    esp,0xc
c0024f82:	c3                   	ret    
c0024f83:	90                   	nop

c0024f84 <x87::close(int, int, void*)>:
c0024f84:	83 ec 0c             	sub    esp,0xc
c0024f87:	e8 1a 10 00 00       	call   c0025fa6 <x87Close>
c0024f8c:	b8 00 00 00 00       	mov    eax,0x0
c0024f91:	83 c4 0c             	add    esp,0xc
c0024f94:	c3                   	ret    
c0024f95:	90                   	nop

c0024f96 <x87::available()>:
c0024f96:	83 ec 0c             	sub    esp,0xc
c0024f99:	e8 c8 0f 00 00       	call   c0025f66 <x87Detect>
c0024f9e:	85 c0                	test   eax,eax
c0024fa0:	0f 95 c0             	setne  al
c0024fa3:	83 c4 0c             	add    esp,0xc
c0024fa6:	c3                   	ret    
c0024fa7:	90                   	nop

c0024fa8 <x87::save(void*)>:
c0024fa8:	83 ec 0c             	sub    esp,0xc
c0024fab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024faf:	83 ec 0c             	sub    esp,0xc
c0024fb2:	50                   	push   eax
c0024fb3:	e8 c9 0f 00 00       	call   c0025f81 <x87Save>
c0024fb8:	83 c4 10             	add    esp,0x10
c0024fbb:	90                   	nop
c0024fbc:	83 c4 0c             	add    esp,0xc
c0024fbf:	c3                   	ret    

c0024fc0 <x87::load(void*)>:
c0024fc0:	83 ec 0c             	sub    esp,0xc
c0024fc3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024fc7:	83 ec 0c             	sub    esp,0xc
c0024fca:	50                   	push   eax
c0024fcb:	e8 b7 0f 00 00       	call   c0025f87 <x87Load>
c0024fd0:	83 c4 10             	add    esp,0x10
c0024fd3:	90                   	nop
c0024fd4:	83 c4 0c             	add    esp,0xc
c0024fd7:	c3                   	ret    

c0024fd8 <x87::x87()>:
c0024fd8:	83 ec 0c             	sub    esp,0xc
c0024fdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024fdf:	83 ec 08             	sub    esp,0x8
c0024fe2:	68 00 c8 02 c0       	push   0xc002c800
c0024fe7:	50                   	push   eax
c0024fe8:	e8 51 f4 fe ff       	call   c001443e <FPU::FPU(char const*)>
c0024fed:	83 c4 10             	add    esp,0x10
c0024ff0:	ba 10 c8 02 c0       	mov    edx,0xc002c810
c0024ff5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024ff9:	89 10                	mov    DWORD PTR [eax],edx
c0024ffb:	90                   	nop
c0024ffc:	83 c4 0c             	add    esp,0xc
c0024fff:	c3                   	ret    

c0025000 <APIC::disable()>:
c0025000:	90                   	nop
c0025001:	c3                   	ret    

c0025002 <APIC::close(int, int, void*)>:
c0025002:	55                   	push   ebp
c0025003:	89 e5                	mov    ebp,esp
c0025005:	83 ec 08             	sub    esp,0x8
c0025008:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002500b:	8b 00                	mov    eax,DWORD PTR [eax]
c002500d:	83 c0 3c             	add    eax,0x3c
c0025010:	8b 00                	mov    eax,DWORD PTR [eax]
c0025012:	83 ec 0c             	sub    esp,0xc
c0025015:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025018:	ff d0                	call   eax
c002501a:	83 c4 10             	add    esp,0x10
c002501d:	b8 00 00 00 00       	mov    eax,0x0
c0025022:	c9                   	leave  
c0025023:	c3                   	ret    

c0025024 <IOAPIC::close(int, int, void*)>:
c0025024:	b8 00 00 00 00       	mov    eax,0x0
c0025029:	c3                   	ret    

c002502a <APIC::io_wait()>:
c002502a:	eb 00                	jmp    c002502c <APIC::io_wait()+0x2>
c002502c:	eb 00                	jmp    c002502e <APIC::io_wait()+0x4>
c002502e:	90                   	nop
c002502f:	c3                   	ret    

c0025030 <APIC::getBase()>:
c0025030:	55                   	push   ebp
c0025031:	89 e5                	mov    ebp,esp
c0025033:	83 ec 18             	sub    esp,0x18
c0025036:	a1 68 db 02 c0       	mov    eax,ds:0xc002db68
c002503b:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0025041:	83 e0 08             	and    eax,0x8
c0025044:	84 c0                	test   al,al
c0025046:	75 07                	jne    c002504f <APIC::getBase()+0x1f>
c0025048:	b8 00 00 00 00       	mov    eax,0x0
c002504d:	eb 21                	jmp    c0025070 <APIC::getBase()+0x40>
c002504f:	a1 68 db 02 c0       	mov    eax,ds:0xc002db68
c0025054:	83 ec 08             	sub    esp,0x8
c0025057:	6a 1b                	push   0x1b
c0025059:	50                   	push   eax
c002505a:	e8 8f 9d fe ff       	call   c000edee <Computer::rdmsr(unsigned int)>
c002505f:	83 c4 10             	add    esp,0x10
c0025062:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025065:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0025068:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002506b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0025070:	c9                   	leave  
c0025071:	c3                   	ret    

c0025072 <APIC::eoi(unsigned char)>:
c0025072:	55                   	push   ebp
c0025073:	89 e5                	mov    ebp,esp
c0025075:	83 ec 28             	sub    esp,0x28
c0025078:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002507b:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c002507e:	83 ec 0c             	sub    esp,0xc
c0025081:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025084:	e8 a7 ff ff ff       	call   c0025030 <APIC::getBase()>
c0025089:	83 c4 10             	add    esp,0x10
c002508c:	05 b0 00 00 00       	add    eax,0xb0
c0025091:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0025094:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0025097:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c002509d:	90                   	nop
c002509e:	c9                   	leave  
c002509f:	c3                   	ret    

c00250a0 <APIC::open(int, int, void*)>:
c00250a0:	55                   	push   ebp
c00250a1:	89 e5                	mov    ebp,esp
c00250a3:	57                   	push   edi
c00250a4:	56                   	push   esi
c00250a5:	53                   	push   ebx
c00250a6:	83 ec 2c             	sub    esp,0x2c
c00250a9:	83 ec 0c             	sub    esp,0xc
c00250ac:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00250af:	e8 7c ff ff ff       	call   c0025030 <APIC::getBase()>
c00250b4:	83 c4 10             	add    esp,0x10
c00250b7:	89 c2                	mov    edx,eax
c00250b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00250bc:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00250c2:	0f b6 f8             	movzx  edi,al
c00250c5:	89 d0                	mov    eax,edx
c00250c7:	ba 00 00 00 00       	mov    edx,0x0
c00250cc:	89 c1                	mov    ecx,eax
c00250ce:	80 e5 ff             	and    ch,0xff
c00250d1:	89 cb                	mov    ebx,ecx
c00250d3:	0f b6 f2             	movzx  esi,dl
c00250d6:	89 d8                	mov    eax,ebx
c00250d8:	89 f2                	mov    edx,esi
c00250da:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00250dd:	8d 5f 08             	lea    ebx,[edi+0x8]
c00250e0:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c00250e4:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c00250e8:	83 e0 00             	and    eax,0x0
c00250eb:	09 d0                	or     eax,edx
c00250ed:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c00250f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00250f4:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00250fa:	8d 50 01             	lea    edx,[eax+0x1]
c00250fd:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025100:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0025106:	0f b6 d0             	movzx  edx,al
c0025109:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002510c:	83 c2 08             	add    edx,0x8
c002510f:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0025113:	0f b6 c9             	movzx  ecx,cl
c0025116:	81 c9 00 00 01 00    	or     ecx,0x10000
c002511c:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0025120:	83 ec 0c             	sub    esp,0xc
c0025123:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025126:	e8 05 ff ff ff       	call   c0025030 <APIC::getBase()>
c002512b:	83 c4 10             	add    esp,0x10
c002512e:	05 f0 00 00 00       	add    eax,0xf0
c0025133:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0025136:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025139:	8b 00                	mov    eax,DWORD PTR [eax]
c002513b:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c002513e:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c0025145:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c002514c:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c002514f:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025152:	89 10                	mov    DWORD PTR [eax],edx
c0025154:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c002515b:	a1 50 04 03 c0       	mov    eax,ds:0xc0030450
c0025160:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c0025163:	7d 7c                	jge    c00251e1 <APIC::open(int, int, void*)+0x141>
c0025165:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0025168:	8b 04 85 60 04 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcfba0]
c002516f:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c0025172:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0025175:	8b 04 85 60 04 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcfba0]
c002517c:	c1 e8 08             	shr    eax,0x8
c002517f:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c0025183:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0025186:	8b 04 85 60 04 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcfba0]
c002518d:	c1 e8 18             	shr    eax,0x18
c0025190:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c0025193:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c0025197:	75 40                	jne    c00251d9 <APIC::open(int, int, void*)+0x139>
c0025199:	83 ec 0c             	sub    esp,0xc
c002519c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002519f:	e8 8c fe ff ff       	call   c0025030 <APIC::getBase()>
c00251a4:	83 c4 10             	add    esp,0x10
c00251a7:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c00251ab:	75 07                	jne    c00251b4 <APIC::open(int, int, void*)+0x114>
c00251ad:	ba 60 03 00 00       	mov    edx,0x360
c00251b2:	eb 05                	jmp    c00251b9 <APIC::open(int, int, void*)+0x119>
c00251b4:	ba 50 03 00 00       	mov    edx,0x350
c00251b9:	01 d0                	add    eax,edx
c00251bb:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00251be:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00251c1:	8b 00                	mov    eax,DWORD PTR [eax]
c00251c3:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c00251c6:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c00251cd:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c00251d1:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00251d4:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00251d7:	89 10                	mov    DWORD PTR [eax],edx
c00251d9:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c00251dc:	e9 7a ff ff ff       	jmp    c002515b <APIC::open(int, int, void*)+0xbb>
c00251e1:	b8 00 00 00 00       	mov    eax,0x0
c00251e6:	8d 65 f4             	lea    esp,[ebp-0xc]
c00251e9:	5b                   	pop    ebx
c00251ea:	5e                   	pop    esi
c00251eb:	5f                   	pop    edi
c00251ec:	5d                   	pop    ebp
c00251ed:	c3                   	ret    

c00251ee <IOAPIC::IOAPIC()>:
c00251ee:	83 ec 0c             	sub    esp,0xc
c00251f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00251f5:	83 ec 08             	sub    esp,0x8
c00251f8:	68 40 c8 02 c0       	push   0xc002c840
c00251fd:	50                   	push   eax
c00251fe:	e8 29 ef fe ff       	call   c001412c <Device::Device(char const*)>
c0025203:	83 c4 10             	add    esp,0x10
c0025206:	ba 68 c9 02 c0       	mov    edx,0xc002c968
c002520b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002520f:	89 10                	mov    DWORD PTR [eax],edx
c0025211:	90                   	nop
c0025212:	83 c4 0c             	add    esp,0xc
c0025215:	c3                   	ret    

c0025216 <APIC::APIC()>:
c0025216:	53                   	push   ebx
c0025217:	83 ec 18             	sub    esp,0x18
c002521a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002521e:	83 ec 08             	sub    esp,0x8
c0025221:	68 48 c8 02 c0       	push   0xc002c848
c0025226:	50                   	push   eax
c0025227:	e8 6c f6 fe ff       	call   c0014898 <InterruptController::InterruptController(char const*)>
c002522c:	83 c4 10             	add    esp,0x10
c002522f:	ba 20 c9 02 c0       	mov    edx,0xc002c920
c0025234:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025238:	89 10                	mov    DWORD PTR [eax],edx
c002523a:	a0 20 1f 03 c0       	mov    al,ds:0xc0031f20
c002523f:	83 f0 01             	xor    eax,0x1
c0025242:	84 c0                	test   al,al
c0025244:	0f 84 a1 00 00 00    	je     c00252eb <APIC::APIC()+0xd5>
c002524a:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c002524f:	a0 00 05 03 c0       	mov    al,ds:0xc0030500
c0025254:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c0025258:	0f 83 86 00 00 00    	jae    c00252e4 <APIC::APIC()+0xce>
c002525e:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c0025266:	83 ec 0c             	sub    esp,0xc
c0025269:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c002526d:	e8 d4 a5 fe ff       	call   c000f846 <malloc>
c0025272:	83 c4 10             	add    esp,0x10
c0025275:	89 c3                	mov    ebx,eax
c0025277:	83 ec 0c             	sub    esp,0xc
c002527a:	53                   	push   ebx
c002527b:	e8 6e ff ff ff       	call   c00251ee <IOAPIC::IOAPIC()>
c0025280:	83 c4 10             	add    esp,0x10
c0025283:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0025287:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c002528c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0025290:	89 14 85 00 1f 03 c0 	mov    DWORD PTR [eax*4-0x3ffce100],edx
c0025297:	a1 e0 1e 03 c0       	mov    eax,ds:0xc0031ee0
c002529c:	40                   	inc    eax
c002529d:	a3 e0 1e 03 c0       	mov    ds:0xc0031ee0,eax
c00252a2:	a1 68 db 02 c0       	mov    eax,ds:0xc002db68
c00252a7:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c00252ad:	83 ec 08             	sub    esp,0x8
c00252b0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00252b4:	50                   	push   eax
c00252b5:	e8 82 ec fe ff       	call   c0013f3c <Device::addChild(Device*)>
c00252ba:	83 c4 10             	add    esp,0x10
c00252bd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00252c1:	8b 00                	mov    eax,DWORD PTR [eax]
c00252c3:	83 c0 08             	add    eax,0x8
c00252c6:	8b 00                	mov    eax,DWORD PTR [eax]
c00252c8:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00252cd:	6a 00                	push   0x0
c00252cf:	6a 00                	push   0x0
c00252d1:	52                   	push   edx
c00252d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00252d6:	ff d0                	call   eax
c00252d8:	83 c4 10             	add    esp,0x10
c00252db:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c00252df:	e9 6b ff ff ff       	jmp    c002524f <APIC::APIC()+0x39>
c00252e4:	c6 05 20 1f 03 c0 01 	mov    BYTE PTR ds:0xc0031f20,0x1
c00252eb:	90                   	nop
c00252ec:	83 c4 18             	add    esp,0x18
c00252ef:	5b                   	pop    ebx
c00252f0:	c3                   	ret    
c00252f1:	90                   	nop

c00252f2 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c00252f2:	55                   	push   ebp
c00252f3:	89 e5                	mov    ebp,esp
c00252f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00252f8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00252fe:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0025301:	72 1d                	jb     c0025320 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0025303:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025306:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c002530c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002530f:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c0025315:	01 d0                	add    eax,edx
c0025317:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c002531a:	73 04                	jae    c0025320 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c002531c:	b0 01                	mov    al,0x1
c002531e:	eb 02                	jmp    c0025322 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c0025320:	b0 00                	mov    al,0x0
c0025322:	5d                   	pop    ebp
c0025323:	c3                   	ret    

c0025324 <IOAPIC::read(int)>:
c0025324:	55                   	push   ebp
c0025325:	89 e5                	mov    ebp,esp
c0025327:	83 ec 10             	sub    esp,0x10
c002532a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002532d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0025333:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0025336:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025339:	0f b6 d0             	movzx  edx,al
c002533c:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002533f:	89 10                	mov    DWORD PTR [eax],edx
c0025341:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025344:	83 c0 10             	add    eax,0x10
c0025347:	8b 00                	mov    eax,DWORD PTR [eax]
c0025349:	c9                   	leave  
c002534a:	c3                   	ret    
c002534b:	90                   	nop

c002534c <IOAPIC::open(int, int, void*)>:
c002534c:	55                   	push   ebp
c002534d:	89 e5                	mov    ebp,esp
c002534f:	57                   	push   edi
c0025350:	56                   	push   esi
c0025351:	53                   	push   ebx
c0025352:	83 ec 0c             	sub    esp,0xc
c0025355:	83 ec 0c             	sub    esp,0xc
c0025358:	68 73 c8 02 c0       	push   0xc002c873
c002535d:	e8 b3 d7 fe ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c0025362:	83 c4 10             	add    esp,0x10
c0025365:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025368:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002536b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0025371:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025374:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002537a:	8b 14 85 40 05 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcfac0]
c0025381:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025384:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c002538a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002538d:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025393:	8b 14 85 c0 05 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcfa40]
c002539a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002539d:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c00253a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00253a6:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c00253ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00253af:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00253b5:	0f b6 f8             	movzx  edi,al
c00253b8:	89 d0                	mov    eax,edx
c00253ba:	ba 00 00 00 00       	mov    edx,0x0
c00253bf:	89 c1                	mov    ecx,eax
c00253c1:	80 e5 ff             	and    ch,0xff
c00253c4:	89 cb                	mov    ebx,ecx
c00253c6:	0f b6 f2             	movzx  esi,dl
c00253c9:	89 d8                	mov    eax,ebx
c00253cb:	89 f2                	mov    edx,esi
c00253cd:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00253d0:	8d 5f 08             	lea    ebx,[edi+0x8]
c00253d3:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c00253d7:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c00253db:	83 e0 00             	and    eax,0x0
c00253de:	09 d0                	or     eax,edx
c00253e0:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c00253e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00253e7:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00253ed:	8d 50 01             	lea    edx,[eax+0x1]
c00253f0:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00253f3:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c00253f9:	0f b6 d0             	movzx  edx,al
c00253fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00253ff:	83 c2 08             	add    edx,0x8
c0025402:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0025406:	0f b6 c9             	movzx  ecx,cl
c0025409:	81 c9 00 ad de 00    	or     ecx,0xdead00
c002540f:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0025413:	83 ec 08             	sub    esp,0x8
c0025416:	6a 01                	push   0x1
c0025418:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002541b:	e8 04 ff ff ff       	call   c0025324 <IOAPIC::read(int)>
c0025420:	83 c4 10             	add    esp,0x10
c0025423:	c1 f8 10             	sar    eax,0x10
c0025426:	0f b6 c0             	movzx  eax,al
c0025429:	8d 50 01             	lea    edx,[eax+0x1]
c002542c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002542f:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c0025435:	b8 00 00 00 00       	mov    eax,0x0
c002543a:	8d 65 f4             	lea    esp,[ebp-0xc]
c002543d:	5b                   	pop    ebx
c002543e:	5e                   	pop    esi
c002543f:	5f                   	pop    edi
c0025440:	5d                   	pop    ebp
c0025441:	c3                   	ret    

c0025442 <IOAPIC::write(int, int)>:
c0025442:	55                   	push   ebp
c0025443:	89 e5                	mov    ebp,esp
c0025445:	83 ec 10             	sub    esp,0x10
c0025448:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002544b:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0025451:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0025454:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025457:	0f b6 d0             	movzx  edx,al
c002545a:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002545d:	89 10                	mov    DWORD PTR [eax],edx
c002545f:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025462:	8d 50 10             	lea    edx,[eax+0x10]
c0025465:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0025468:	89 02                	mov    DWORD PTR [edx],eax
c002546a:	90                   	nop
c002546b:	c9                   	leave  
c002546c:	c3                   	ret    
c002546d:	90                   	nop

c002546e <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c002546e:	55                   	push   ebp
c002546f:	89 e5                	mov    ebp,esp
c0025471:	53                   	push   ebx
c0025472:	83 ec 2c             	sub    esp,0x2c
c0025475:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025478:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c002547b:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c002547e:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c0025481:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0025484:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0025487:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c002548a:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c002548d:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0025490:	88 d8                	mov    al,bl
c0025492:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c0025495:	88 c8                	mov    al,cl
c0025497:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c002549a:	88 d0                	mov    al,dl
c002549c:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c002549f:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00254a3:	83 c0 08             	add    eax,0x8
c00254a6:	01 c0                	add    eax,eax
c00254a8:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00254ab:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00254af:	83 c0 08             	add    eax,0x8
c00254b2:	01 c0                	add    eax,eax
c00254b4:	40                   	inc    eax
c00254b5:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00254b8:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00254bb:	50                   	push   eax
c00254bc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00254bf:	e8 60 fe ff ff       	call   c0025324 <IOAPIC::read(int)>
c00254c4:	83 c4 08             	add    esp,0x8
c00254c7:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00254ca:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c00254d1:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00254d4:	c1 e0 18             	shl    eax,0x18
c00254d7:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c00254da:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c00254dd:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00254e0:	52                   	push   edx
c00254e1:	50                   	push   eax
c00254e2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00254e5:	e8 58 ff ff ff       	call   c0025442 <IOAPIC::write(int, int)>
c00254ea:	83 c4 0c             	add    esp,0xc
c00254ed:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00254f0:	50                   	push   eax
c00254f1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00254f4:	e8 2b fe ff ff       	call   c0025324 <IOAPIC::read(int)>
c00254f9:	83 c4 08             	add    esp,0x8
c00254fc:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00254ff:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c0025506:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c002550d:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c0025514:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0025518:	74 09                	je     c0025523 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c002551a:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c0025521:	eb 07                	jmp    c002552a <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c0025523:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c002552a:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c002552e:	74 09                	je     c0025539 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c0025530:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c0025537:	eb 07                	jmp    c0025540 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c0025539:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c0025540:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c0025547:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c002554b:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c002554e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0025551:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025554:	52                   	push   edx
c0025555:	50                   	push   eax
c0025556:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025559:	e8 e4 fe ff ff       	call   c0025442 <IOAPIC::write(int, int)>
c002555e:	83 c4 0c             	add    esp,0xc
c0025561:	90                   	nop
c0025562:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0025565:	c9                   	leave  
c0025566:	c3                   	ret    
c0025567:	90                   	nop

c0025568 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0025568:	55                   	push   ebp
c0025569:	89 e5                	mov    ebp,esp
c002556b:	57                   	push   edi
c002556c:	56                   	push   esi
c002556d:	53                   	push   ebx
c002556e:	83 ec 2c             	sub    esp,0x2c
c0025571:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0025574:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0025577:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c002557b:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c002557f:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0025583:	74 5a                	je     c00255df <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025585:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0025589:	7f 44                	jg     c00255cf <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c002558b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002558e:	05 c0 cd 02 c0       	add    eax,0xc002cdc0
c0025593:	8a 00                	mov    al,BYTE PTR [eax]
c0025595:	0f b6 c0             	movzx  eax,al
c0025598:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c002559b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002559e:	66 8b 84 00 e0 04 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffcfb20]
c00255a6:	0f b7 c0             	movzx  eax,ax
c00255a9:	83 e0 02             	and    eax,0x2
c00255ac:	85 c0                	test   eax,eax
c00255ae:	74 04                	je     c00255b4 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c00255b0:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c00255b4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00255b7:	66 8b 84 00 e0 04 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffcfb20]
c00255bf:	0f b7 c0             	movzx  eax,ax
c00255c2:	83 e0 08             	and    eax,0x8
c00255c5:	85 c0                	test   eax,eax
c00255c7:	74 16                	je     c00255df <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c00255c9:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c00255cd:	eb 10                	jmp    c00255df <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c00255cf:	83 ec 0c             	sub    esp,0xc
c00255d2:	68 84 c8 02 c0       	push   0xc002c884
c00255d7:	e8 53 4a ff ff       	call   c001a02f <Krnl::panic(char const*)>
c00255dc:	83 c4 10             	add    esp,0x10
c00255df:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c00255e3:	a1 e0 1e 03 c0       	mov    eax,ds:0xc0031ee0
c00255e8:	83 ec 08             	sub    esp,0x8
c00255eb:	50                   	push   eax
c00255ec:	68 bc c8 02 c0       	push   0xc002c8bc
c00255f1:	e8 1f d5 fe ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c00255f6:	83 c4 10             	add    esp,0x10
c00255f9:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c0025600:	a1 e0 1e 03 c0       	mov    eax,ds:0xc0031ee0
c0025605:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c0025608:	7d 67                	jge    c0025671 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c002560a:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c002560d:	8b 04 85 00 1f 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce100]
c0025614:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025617:	83 ec 08             	sub    esp,0x8
c002561a:	52                   	push   edx
c002561b:	50                   	push   eax
c002561c:	e8 d1 fc ff ff       	call   c00252f2 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c0025621:	83 c4 10             	add    esp,0x10
c0025624:	84 c0                	test   al,al
c0025626:	74 44                	je     c002566c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c0025628:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c002562b:	8b 1c 85 00 1f 03 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffce100]
c0025632:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c0025636:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0025639:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c002563d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025640:	83 c0 20             	add    eax,0x20
c0025643:	0f b6 f0             	movzx  esi,al
c0025646:	b8 00 00 00 00       	mov    eax,0x0
c002564b:	99                   	cdq    
c002564c:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c002564f:	0f b6 c9             	movzx  ecx,cl
c0025652:	83 ec 04             	sub    esp,0x4
c0025655:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c0025658:	57                   	push   edi
c0025659:	56                   	push   esi
c002565a:	52                   	push   edx
c002565b:	50                   	push   eax
c002565c:	51                   	push   ecx
c002565d:	53                   	push   ebx
c002565e:	e8 0b fe ff ff       	call   c002546e <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c0025663:	83 c4 20             	add    esp,0x20
c0025666:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c002566a:	eb 05                	jmp    c0025671 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c002566c:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c002566f:	eb 8f                	jmp    c0025600 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c0025671:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c0025674:	83 f0 01             	xor    eax,0x1
c0025677:	84 c0                	test   al,al
c0025679:	74 10                	je     c002568b <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c002567b:	83 ec 0c             	sub    esp,0xc
c002567e:	68 d3 c8 02 c0       	push   0xc002c8d3
c0025683:	e8 a7 49 ff ff       	call   c001a02f <Krnl::panic(char const*)>
c0025688:	83 c4 10             	add    esp,0x10
c002568b:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c002568f:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c0025696:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c002569a:	7f 65                	jg     c0025701 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c002569c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002569f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00256a2:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00256a9:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00256ac:	01 ca                	add    edx,ecx
c00256ae:	83 c2 54             	add    edx,0x54
c00256b1:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c00256b5:	85 c0                	test   eax,eax
c00256b7:	75 43                	jne    c00256fc <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c00256b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00256bc:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00256bf:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00256c6:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00256c9:	01 ca                	add    edx,ecx
c00256cb:	8d 4a 54             	lea    ecx,[edx+0x54]
c00256ce:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00256d1:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c00256d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00256d8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00256db:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00256e2:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00256e5:	01 ca                	add    edx,ecx
c00256e7:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c00256ed:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00256f0:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c00256f4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00256f7:	83 e8 20             	sub    eax,0x20
c00256fa:	eb 1a                	jmp    c0025716 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c00256fc:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c00256ff:	eb 95                	jmp    c0025696 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c0025701:	83 ec 0c             	sub    esp,0xc
c0025704:	68 e0 c8 02 c0       	push   0xc002c8e0
c0025709:	e8 21 49 ff ff       	call   c001a02f <Krnl::panic(char const*)>
c002570e:	83 c4 10             	add    esp,0x10
c0025711:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0025716:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025719:	5b                   	pop    ebx
c002571a:	5e                   	pop    esi
c002571b:	5f                   	pop    edi
c002571c:	5d                   	pop    ebp
c002571d:	c3                   	ret    

c002571e <PIC::disable()>:
c002571e:	55                   	push   ebp
c002571f:	89 e5                	mov    ebp,esp
c0025721:	83 ec 10             	sub    esp,0x10
c0025724:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c002572a:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c002572e:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025731:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0025735:	ee                   	out    dx,al
c0025736:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c002573c:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c0025740:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0025743:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0025747:	ee                   	out    dx,al
c0025748:	90                   	nop
c0025749:	c9                   	leave  
c002574a:	c3                   	ret    
c002574b:	90                   	nop

c002574c <PIC::close(int, int, void*)>:
c002574c:	55                   	push   ebp
c002574d:	89 e5                	mov    ebp,esp
c002574f:	83 ec 08             	sub    esp,0x8
c0025752:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025755:	8b 00                	mov    eax,DWORD PTR [eax]
c0025757:	83 c0 3c             	add    eax,0x3c
c002575a:	8b 00                	mov    eax,DWORD PTR [eax]
c002575c:	83 ec 0c             	sub    esp,0xc
c002575f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025762:	ff d0                	call   eax
c0025764:	83 c4 10             	add    esp,0x10
c0025767:	b8 00 00 00 00       	mov    eax,0x0
c002576c:	c9                   	leave  
c002576d:	c3                   	ret    

c002576e <PIC::PIC()>:
c002576e:	83 ec 0c             	sub    esp,0xc
c0025771:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025775:	83 ec 08             	sub    esp,0x8
c0025778:	68 8c c9 02 c0       	push   0xc002c98c
c002577d:	50                   	push   eax
c002577e:	e8 15 f1 fe ff       	call   c0014898 <InterruptController::InterruptController(char const*)>
c0025783:	83 c4 10             	add    esp,0x10
c0025786:	ba b8 c9 02 c0       	mov    edx,0xc002c9b8
c002578b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002578f:	89 10                	mov    DWORD PTR [eax],edx
c0025791:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025795:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002579b:	0f b6 d0             	movzx  edx,al
c002579e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00257a2:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c00257a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00257ad:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00257b3:	0f b6 d0             	movzx  edx,al
c00257b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00257ba:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c00257bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00257c3:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00257c9:	8d 50 01             	lea    edx,[eax+0x1]
c00257cc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00257d0:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00257d6:	0f b6 d0             	movzx  edx,al
c00257d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00257dd:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00257e1:	83 e1 3f             	and    ecx,0x3f
c00257e4:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00257e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00257ec:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00257f2:	0f b6 d0             	movzx  edx,al
c00257f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00257f9:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c0025800:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025804:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002580a:	0f b6 d0             	movzx  edx,al
c002580d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025811:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0025816:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002581a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025820:	8d 50 01             	lea    edx,[eax+0x1]
c0025823:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025827:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c002582d:	0f b6 d0             	movzx  edx,al
c0025830:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025834:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0025838:	83 e1 3f             	and    ecx,0x3f
c002583b:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c002583f:	90                   	nop
c0025840:	83 c4 0c             	add    esp,0xc
c0025843:	c3                   	ret    

c0025844 <PIC::ioWait()>:
c0025844:	eb 00                	jmp    c0025846 <PIC::ioWait()+0x2>
c0025846:	eb 00                	jmp    c0025848 <PIC::ioWait()+0x4>
c0025848:	90                   	nop
c0025849:	c3                   	ret    

c002584a <PIC::getIRQReg(int)>:
c002584a:	55                   	push   ebp
c002584b:	89 e5                	mov    ebp,esp
c002584d:	83 ec 10             	sub    esp,0x10
c0025850:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025853:	0f b6 c0             	movzx  eax,al
c0025856:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c002585c:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c002585f:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0025862:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0025866:	ee                   	out    dx,al
c0025867:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002586a:	0f b6 c0             	movzx  eax,al
c002586d:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0025873:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c0025876:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0025879:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c002587d:	ee                   	out    dx,al
c002587e:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c0025884:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c0025888:	89 c2                	mov    edx,eax
c002588a:	ec                   	in     al,dx
c002588b:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c002588e:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025891:	0f b6 c0             	movzx  eax,al
c0025894:	c1 e0 08             	shl    eax,0x8
c0025897:	89 c1                	mov    ecx,eax
c0025899:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c002589f:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c00258a3:	89 c2                	mov    edx,eax
c00258a5:	ec                   	in     al,dx
c00258a6:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c00258a9:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c00258ac:	0f b6 c0             	movzx  eax,al
c00258af:	09 c8                	or     eax,ecx
c00258b1:	c9                   	leave  
c00258b2:	c3                   	ret    
c00258b3:	90                   	nop

c00258b4 <PIC::eoi(unsigned char)>:
c00258b4:	55                   	push   ebp
c00258b5:	89 e5                	mov    ebp,esp
c00258b7:	83 ec 14             	sub    esp,0x14
c00258ba:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00258bd:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c00258c0:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c00258c4:	75 1e                	jne    c00258e4 <PIC::eoi(unsigned char)+0x30>
c00258c6:	6a 0b                	push   0xb
c00258c8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00258cb:	e8 7a ff ff ff       	call   c002584a <PIC::getIRQReg(int)>
c00258d0:	83 c4 08             	add    esp,0x8
c00258d3:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c00258d7:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c00258db:	25 80 00 00 00       	and    eax,0x80
c00258e0:	85 c0                	test   eax,eax
c00258e2:	74 5f                	je     c0025943 <PIC::eoi(unsigned char)+0x8f>
c00258e4:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c00258e8:	75 2d                	jne    c0025917 <PIC::eoi(unsigned char)+0x63>
c00258ea:	6a 0b                	push   0xb
c00258ec:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00258ef:	e8 56 ff ff ff       	call   c002584a <PIC::getIRQReg(int)>
c00258f4:	83 c4 08             	add    esp,0x8
c00258f7:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c00258fb:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00258fe:	66 85 c0             	test   ax,ax
c0025901:	78 14                	js     c0025917 <PIC::eoi(unsigned char)+0x63>
c0025903:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c0025909:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c002590d:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025910:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0025914:	ee                   	out    dx,al
c0025915:	eb 2d                	jmp    c0025944 <PIC::eoi(unsigned char)+0x90>
c0025917:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c002591b:	76 12                	jbe    c002592f <PIC::eoi(unsigned char)+0x7b>
c002591d:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0025923:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c0025927:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c002592a:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c002592e:	ee                   	out    dx,al
c002592f:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0025935:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c0025939:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c002593c:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0025940:	ee                   	out    dx,al
c0025941:	eb 01                	jmp    c0025944 <PIC::eoi(unsigned char)+0x90>
c0025943:	90                   	nop
c0025944:	c9                   	leave  
c0025945:	c3                   	ret    

c0025946 <PIC::remap()>:
c0025946:	55                   	push   ebp
c0025947:	89 e5                	mov    ebp,esp
c0025949:	83 ec 48             	sub    esp,0x48
c002594c:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c0025953:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c002595a:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c0025960:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0025963:	89 c2                	mov    edx,eax
c0025965:	ec                   	in     al,dx
c0025966:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c0025969:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c002596c:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c002596f:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c0025975:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c0025978:	89 c2                	mov    edx,eax
c002597a:	ec                   	in     al,dx
c002597b:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c002597e:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c0025981:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c0025984:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c002598a:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c002598e:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c0025991:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c0025994:	ee                   	out    dx,al
c0025995:	83 ec 0c             	sub    esp,0xc
c0025998:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002599b:	e8 a4 fe ff ff       	call   c0025844 <PIC::ioWait()>
c00259a0:	83 c4 10             	add    esp,0x10
c00259a3:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c00259a9:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c00259ad:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c00259b0:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00259b3:	ee                   	out    dx,al
c00259b4:	83 ec 0c             	sub    esp,0xc
c00259b7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00259ba:	e8 85 fe ff ff       	call   c0025844 <PIC::ioWait()>
c00259bf:	83 c4 10             	add    esp,0x10
c00259c2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00259c5:	0f b6 c0             	movzx  eax,al
c00259c8:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c00259ce:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c00259d1:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c00259d4:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c00259d7:	ee                   	out    dx,al
c00259d8:	83 ec 0c             	sub    esp,0xc
c00259db:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00259de:	e8 61 fe ff ff       	call   c0025844 <PIC::ioWait()>
c00259e3:	83 c4 10             	add    esp,0x10
c00259e6:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00259e9:	0f b6 c0             	movzx  eax,al
c00259ec:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c00259f2:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c00259f5:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c00259f8:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00259fb:	ee                   	out    dx,al
c00259fc:	83 ec 0c             	sub    esp,0xc
c00259ff:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025a02:	e8 3d fe ff ff       	call   c0025844 <PIC::ioWait()>
c0025a07:	83 c4 10             	add    esp,0x10
c0025a0a:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c0025a10:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c0025a14:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c0025a17:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c0025a1a:	ee                   	out    dx,al
c0025a1b:	83 ec 0c             	sub    esp,0xc
c0025a1e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025a21:	e8 1e fe ff ff       	call   c0025844 <PIC::ioWait()>
c0025a26:	83 c4 10             	add    esp,0x10
c0025a29:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c0025a2f:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c0025a33:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c0025a36:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025a39:	ee                   	out    dx,al
c0025a3a:	83 ec 0c             	sub    esp,0xc
c0025a3d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025a40:	e8 ff fd ff ff       	call   c0025844 <PIC::ioWait()>
c0025a45:	83 c4 10             	add    esp,0x10
c0025a48:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c0025a4e:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c0025a52:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c0025a55:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0025a58:	ee                   	out    dx,al
c0025a59:	83 ec 0c             	sub    esp,0xc
c0025a5c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025a5f:	e8 e0 fd ff ff       	call   c0025844 <PIC::ioWait()>
c0025a64:	83 c4 10             	add    esp,0x10
c0025a67:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c0025a6d:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c0025a71:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c0025a74:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0025a77:	ee                   	out    dx,al
c0025a78:	83 ec 0c             	sub    esp,0xc
c0025a7b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025a7e:	e8 c1 fd ff ff       	call   c0025844 <PIC::ioWait()>
c0025a83:	83 c4 10             	add    esp,0x10
c0025a86:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c0025a8a:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c0025a90:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c0025a93:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c0025a96:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0025a99:	ee                   	out    dx,al
c0025a9a:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c0025a9e:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c0025aa4:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c0025aa7:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c0025aaa:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0025aad:	ee                   	out    dx,al
c0025aae:	90                   	nop
c0025aaf:	c9                   	leave  
c0025ab0:	c3                   	ret    
c0025ab1:	90                   	nop

c0025ab2 <PIC::open(int, int, void*)>:
c0025ab2:	55                   	push   ebp
c0025ab3:	89 e5                	mov    ebp,esp
c0025ab5:	83 ec 18             	sub    esp,0x18
c0025ab8:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c0025abe:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c0025ac2:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0025ac5:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0025ac9:	ee                   	out    dx,al
c0025aca:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c0025ad0:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c0025ad4:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0025ad7:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0025adb:	ee                   	out    dx,al
c0025adc:	83 ec 0c             	sub    esp,0xc
c0025adf:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025ae2:	e8 5f fe ff ff       	call   c0025946 <PIC::remap()>
c0025ae7:	83 c4 10             	add    esp,0x10
c0025aea:	b8 00 00 00 00       	mov    eax,0x0
c0025aef:	c9                   	leave  
c0025af0:	c3                   	ret    
c0025af1:	90                   	nop

c0025af2 <APICTimer::close(int, int, void*)>:
c0025af2:	b8 00 00 00 00       	mov    eax,0x0
c0025af7:	c3                   	ret    

c0025af8 <apicTimerHandler(regs*, void*)>:
c0025af8:	83 ec 0c             	sub    esp,0xc
c0025afb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025aff:	8b 00                	mov    eax,DWORD PTR [eax]
c0025b01:	99                   	cdq    
c0025b02:	52                   	push   edx
c0025b03:	50                   	push   eax
c0025b04:	6a 00                	push   0x0
c0025b06:	68 00 ca 9a 3b       	push   0x3b9aca00
c0025b0b:	e8 8c 07 00 00       	call   c002629c <__udivdi3>
c0025b10:	83 c4 10             	add    esp,0x10
c0025b13:	83 ec 08             	sub    esp,0x8
c0025b16:	52                   	push   edx
c0025b17:	50                   	push   eax
c0025b18:	e8 72 0d ff ff       	call   c001688f <timerHandler(unsigned long long)>
c0025b1d:	83 c4 10             	add    esp,0x10
c0025b20:	90                   	nop
c0025b21:	83 c4 0c             	add    esp,0xc
c0025b24:	c3                   	ret    
c0025b25:	90                   	nop

c0025b26 <APICTimer::write(int)>:
c0025b26:	53                   	push   ebx
c0025b27:	83 ec 28             	sub    esp,0x28
c0025b2a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0025b2e:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0025b32:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0025b38:	a1 68 db 02 c0       	mov    eax,ds:0xc002db68
c0025b3d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0025b43:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0025b49:	83 ec 0c             	sub    esp,0xc
c0025b4c:	50                   	push   eax
c0025b4d:	e8 de f4 ff ff       	call   c0025030 <APIC::getBase()>
c0025b52:	83 c4 10             	add    esp,0x10
c0025b55:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0025b59:	a1 f0 e1 02 c0       	mov    eax,ds:0xc002e1f0
c0025b5e:	8b 15 f4 e1 02 c0    	mov    edx,DWORD PTR ds:0xc002e1f4
c0025b64:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0025b68:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0025b6c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025b70:	05 e0 03 00 00       	add    eax,0x3e0
c0025b75:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0025b7b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025b7f:	05 80 03 00 00       	add    eax,0x380
c0025b84:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0025b8a:	fb                   	sti    
c0025b8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b8f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0025b93:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c0025b98:	83 d2 00             	adc    edx,0x0
c0025b9b:	89 c1                	mov    ecx,eax
c0025b9d:	89 d3                	mov    ebx,edx
c0025b9f:	a1 f0 e1 02 c0       	mov    eax,ds:0xc002e1f0
c0025ba4:	8b 15 f4 e1 02 c0    	mov    edx,DWORD PTR ds:0xc002e1f4
c0025baa:	39 c8                	cmp    eax,ecx
c0025bac:	89 d0                	mov    eax,edx
c0025bae:	19 d8                	sbb    eax,ebx
c0025bb0:	73 02                	jae    c0025bb4 <APICTimer::write(int)+0x8e>
c0025bb2:	eb d7                	jmp    c0025b8b <APICTimer::write(int)+0x65>
c0025bb4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025bb8:	05 20 03 00 00       	add    eax,0x320
c0025bbd:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c0025bc3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025bc7:	05 90 03 00 00       	add    eax,0x390
c0025bcc:	8b 00                	mov    eax,DWORD PTR [eax]
c0025bce:	f7 d0                	not    eax
c0025bd0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0025bd4:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025bd8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0025bdc:	ba 00 00 00 00       	mov    edx,0x0
c0025be1:	f7 f3                	div    ebx
c0025be3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0025be7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0025beb:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0025bf1:	0d 00 00 02 00       	or     eax,0x20000
c0025bf6:	89 c2                	mov    edx,eax
c0025bf8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025bfc:	05 20 03 00 00       	add    eax,0x320
c0025c01:	89 10                	mov    DWORD PTR [eax],edx
c0025c03:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025c07:	05 e0 03 00 00       	add    eax,0x3e0
c0025c0c:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0025c12:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025c16:	05 80 03 00 00       	add    eax,0x380
c0025c1b:	89 c2                	mov    edx,eax
c0025c1d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0025c21:	89 02                	mov    DWORD PTR [edx],eax
c0025c23:	90                   	nop
c0025c24:	83 c4 28             	add    esp,0x28
c0025c27:	5b                   	pop    ebx
c0025c28:	c3                   	ret    
c0025c29:	90                   	nop

c0025c2a <APICTimer::open(int, int, void*)>:
c0025c2a:	57                   	push   edi
c0025c2b:	56                   	push   esi
c0025c2c:	53                   	push   ebx
c0025c2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c31:	8b 00                	mov    eax,DWORD PTR [eax]
c0025c33:	83 c0 24             	add    eax,0x24
c0025c36:	8b 00                	mov    eax,DWORD PTR [eax]
c0025c38:	83 ec 08             	sub    esp,0x8
c0025c3b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025c3f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025c43:	ff d0                	call   eax
c0025c45:	83 c4 10             	add    esp,0x10
c0025c48:	a1 68 db 02 c0       	mov    eax,ds:0xc002db68
c0025c4d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0025c53:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0025c59:	83 ec 0c             	sub    esp,0xc
c0025c5c:	50                   	push   eax
c0025c5d:	e8 ce f3 ff ff       	call   c0025030 <APIC::getBase()>
c0025c62:	83 c4 10             	add    esp,0x10
c0025c65:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c0025c6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c6f:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025c75:	0f b6 f8             	movzx  edi,al
c0025c78:	89 d0                	mov    eax,edx
c0025c7a:	ba 00 00 00 00       	mov    edx,0x0
c0025c7f:	89 c1                	mov    ecx,eax
c0025c81:	80 e5 ff             	and    ch,0xff
c0025c84:	89 cb                	mov    ebx,ecx
c0025c86:	0f b6 f2             	movzx  esi,dl
c0025c89:	89 d8                	mov    eax,ebx
c0025c8b:	89 f2                	mov    edx,esi
c0025c8d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025c91:	8d 5f 08             	lea    ebx,[edi+0x8]
c0025c94:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0025c98:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0025c9c:	83 e0 00             	and    eax,0x0
c0025c9f:	09 d0                	or     eax,edx
c0025ca1:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0025ca5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ca9:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025caf:	8d 50 01             	lea    edx,[eax+0x1]
c0025cb2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025cb6:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0025cbc:	0f b6 d0             	movzx  edx,al
c0025cbf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025cc3:	83 c2 08             	add    edx,0x8
c0025cc6:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0025cca:	0f b6 c9             	movzx  ecx,cl
c0025ccd:	81 c9 00 00 01 00    	or     ecx,0x10000
c0025cd3:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0025cd7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025cdb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0025cdf:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0025ce5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ce9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0025ced:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c0025cf3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0025cf7:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0025cfd:	83 ec 0c             	sub    esp,0xc
c0025d00:	51                   	push   ecx
c0025d01:	6a 01                	push   0x1
c0025d03:	68 f8 5a 02 c0       	push   0xc0025af8
c0025d08:	52                   	push   edx
c0025d09:	50                   	push   eax
c0025d0a:	e8 b1 e1 fe ff       	call   c0013ec0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0025d0f:	83 c4 20             	add    esp,0x20
c0025d12:	89 c2                	mov    edx,eax
c0025d14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d18:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0025d1e:	b8 00 00 00 00       	mov    eax,0x0
c0025d23:	5b                   	pop    ebx
c0025d24:	5e                   	pop    esi
c0025d25:	5f                   	pop    edi
c0025d26:	c3                   	ret    
c0025d27:	90                   	nop

c0025d28 <APICTimer::APICTimer()>:
c0025d28:	83 ec 0c             	sub    esp,0xc
c0025d2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d2f:	83 ec 08             	sub    esp,0x8
c0025d32:	68 f8 c9 02 c0       	push   0xc002c9f8
c0025d37:	50                   	push   eax
c0025d38:	e8 c3 0a ff ff       	call   c0016800 <Timer::Timer(char const*)>
c0025d3d:	83 c4 10             	add    esp,0x10
c0025d40:	ba 0c ca 02 c0       	mov    edx,0xc002ca0c
c0025d45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d49:	89 10                	mov    DWORD PTR [eax],edx
c0025d4b:	90                   	nop
c0025d4c:	83 c4 0c             	add    esp,0xc
c0025d4f:	c3                   	ret    

c0025d50 <PIT::write(int)>:
c0025d50:	83 ec 10             	sub    esp,0x10
c0025d53:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025d57:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0025d5b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0025d61:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0025d65:	a3 24 1f 03 c0       	mov    ds:0xc0031f24,eax
c0025d6a:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0025d6f:	99                   	cdq    
c0025d70:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c0025d74:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0025d78:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c0025d7f:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c0025d84:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0025d88:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0025d8d:	ee                   	out    dx,al
c0025d8e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0025d92:	0f b6 c0             	movzx  eax,al
c0025d95:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c0025d9c:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0025da0:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0025da4:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0025da9:	ee                   	out    dx,al
c0025daa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0025dae:	c1 f8 08             	sar    eax,0x8
c0025db1:	0f b6 c0             	movzx  eax,al
c0025db4:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c0025dbb:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0025dbf:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0025dc3:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0025dc8:	ee                   	out    dx,al
c0025dc9:	90                   	nop
c0025dca:	83 c4 10             	add    esp,0x10
c0025dcd:	c3                   	ret    

c0025dce <pitHandler(regs*, void*)>:
c0025dce:	83 ec 0c             	sub    esp,0xc
c0025dd1:	a1 24 1f 03 c0       	mov    eax,ds:0xc0031f24
c0025dd6:	99                   	cdq    
c0025dd7:	52                   	push   edx
c0025dd8:	50                   	push   eax
c0025dd9:	6a 00                	push   0x0
c0025ddb:	68 00 ca 9a 3b       	push   0x3b9aca00
c0025de0:	e8 b7 04 00 00       	call   c002629c <__udivdi3>
c0025de5:	83 c4 10             	add    esp,0x10
c0025de8:	83 ec 08             	sub    esp,0x8
c0025deb:	52                   	push   edx
c0025dec:	50                   	push   eax
c0025ded:	e8 9d 0a ff ff       	call   c001688f <timerHandler(unsigned long long)>
c0025df2:	83 c4 10             	add    esp,0x10
c0025df5:	90                   	nop
c0025df6:	83 c4 0c             	add    esp,0xc
c0025df9:	c3                   	ret    

c0025dfa <PIT::open(int, int, void*)>:
c0025dfa:	83 ec 0c             	sub    esp,0xc
c0025dfd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e01:	8b 00                	mov    eax,DWORD PTR [eax]
c0025e03:	83 c0 24             	add    eax,0x24
c0025e06:	8b 00                	mov    eax,DWORD PTR [eax]
c0025e08:	83 ec 08             	sub    esp,0x8
c0025e0b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025e0f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025e13:	ff d0                	call   eax
c0025e15:	83 c4 10             	add    esp,0x10
c0025e18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e1c:	83 ec 0c             	sub    esp,0xc
c0025e1f:	6a 00                	push   0x0
c0025e21:	6a 01                	push   0x1
c0025e23:	68 ce 5d 02 c0       	push   0xc0025dce
c0025e28:	6a 00                	push   0x0
c0025e2a:	50                   	push   eax
c0025e2b:	e8 90 e0 fe ff       	call   c0013ec0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0025e30:	83 c4 20             	add    esp,0x20
c0025e33:	89 c2                	mov    edx,eax
c0025e35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e39:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0025e3f:	b8 00 00 00 00       	mov    eax,0x0
c0025e44:	83 c4 0c             	add    esp,0xc
c0025e47:	c3                   	ret    

c0025e48 <PIT::close(int, int, void*)>:
c0025e48:	83 ec 0c             	sub    esp,0xc
c0025e4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e4f:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0025e59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e5d:	6a 01                	push   0x1
c0025e5f:	68 ce 5d 02 c0       	push   0xc0025dce
c0025e64:	6a 00                	push   0x0
c0025e66:	50                   	push   eax
c0025e67:	e8 92 e0 fe ff       	call   c0013efe <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c0025e6c:	83 c4 10             	add    esp,0x10
c0025e6f:	b8 00 00 00 00       	mov    eax,0x0
c0025e74:	83 c4 0c             	add    esp,0xc
c0025e77:	c3                   	ret    

c0025e78 <PIT::PIT()>:
c0025e78:	83 ec 0c             	sub    esp,0xc
c0025e7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e7f:	83 ec 08             	sub    esp,0x8
c0025e82:	68 34 ca 02 c0       	push   0xc002ca34
c0025e87:	50                   	push   eax
c0025e88:	e8 73 09 ff ff       	call   c0016800 <Timer::Timer(char const*)>
c0025e8d:	83 c4 10             	add    esp,0x10
c0025e90:	ba 5c ca 02 c0       	mov    edx,0xc002ca5c
c0025e95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e99:	89 10                	mov    DWORD PTR [eax],edx
c0025e9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e9f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025ea5:	0f b6 d0             	movzx  edx,al
c0025ea8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025eac:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c0025eb3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025eb7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025ebd:	0f b6 d0             	movzx  edx,al
c0025ec0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ec4:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c0025ec9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ecd:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025ed3:	8d 50 01             	lea    edx,[eax+0x1]
c0025ed6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025eda:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0025ee0:	0f b6 d0             	movzx  edx,al
c0025ee3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ee7:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0025eeb:	83 e1 3f             	and    ecx,0x3f
c0025eee:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0025ef2:	90                   	nop
c0025ef3:	83 c4 0c             	add    esp,0xc
c0025ef6:	c3                   	ret    
c0025ef7:	66 90                	xchg   ax,ax
c0025ef9:	66 90                	xchg   ax,ax
c0025efb:	66 90                	xchg   ax,ax
c0025efd:	66 90                	xchg   ax,ax
c0025eff:	90                   	nop

c0025f00 <avxDetect>:
c0025f00:	b8 00 00 00 00       	mov    eax,0x0
c0025f05:	c3                   	ret    

c0025f06 <avxSave>:
c0025f06:	c3                   	ret    

c0025f07 <avxLoad>:
c0025f07:	c3                   	ret    

c0025f08 <avxInit>:
c0025f08:	c3                   	ret    

c0025f09 <avxClose>:
c0025f09:	c3                   	ret    

c0025f0a <wouldSheSayYes>:
c0025f0a:	c3                   	ret    
c0025f0b:	49                   	dec    ecx
c0025f0c:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c0025f10:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c0025f14:	75 20                	jne    c0025f36 <sseDetect.noSSE+0x1>
c0025f16:	4e                   	dec    esi
c0025f17:	79 61                	jns    c0025f7a <x87Detect+0x14>
c0025f19:	68 2e 2e 2e 00       	push   0x2e2e2e
c0025f1e:	66 90                	xchg   ax,ax

c0025f20 <absolutelyNoChanceInHell>:
c0025f20:	b8 01 00 00 00       	mov    eax,0x1
c0025f25:	0f a2                	cpuid  
c0025f27:	f7 c2 00 00 00 02    	test   edx,0x2000000
c0025f2d:	74 06                	je     c0025f35 <sseDetect.noSSE>
c0025f2f:	b8 01 00 00 00       	mov    eax,0x1
c0025f34:	c3                   	ret    

c0025f35 <sseDetect.noSSE>:
c0025f35:	31 c0                	xor    eax,eax
c0025f37:	c3                   	ret    

c0025f38 <sseSave>:
c0025f38:	0f ae 44 24 08       	fxsave [esp+0x8]
c0025f3d:	c3                   	ret    

c0025f3e <sseLoad>:
c0025f3e:	0f ae 4c 24 08       	fxrstor [esp+0x8]
c0025f43:	c3                   	ret    

c0025f44 <sseInit>:
c0025f44:	e8 43 00 00 00       	call   c0025f8c <x87Init>
c0025f49:	0f 20 e0             	mov    eax,cr4
c0025f4c:	66 0d 00 06          	or     ax,0x600
c0025f50:	0f 22 e0             	mov    cr4,eax
c0025f53:	c3                   	ret    

c0025f54 <sseClose>:
c0025f54:	c3                   	ret    
c0025f55:	66 90                	xchg   ax,ax
c0025f57:	66 90                	xchg   ax,ax
c0025f59:	66 90                	xchg   ax,ax
c0025f5b:	66 90                	xchg   ax,ax
c0025f5d:	66 90                	xchg   ax,ax
c0025f5f:	90                   	nop

c0025f60 <value_37F>:
c0025f60:	7f 03                	jg     c0025f65 <value_37A+0x1>

c0025f62 <value_37E>:
c0025f62:	7e 03                	jle    c0025f67 <x87Detect+0x1>

c0025f64 <value_37A>:
c0025f64:	7a 03                	jp     c0025f69 <x87Detect+0x3>

c0025f66 <x87Detect>:
c0025f66:	b8 01 00 00 00       	mov    eax,0x1
c0025f6b:	0f a2                	cpuid  
c0025f6d:	f7 c2 01 00 00 00    	test   edx,0x1
c0025f73:	74 06                	je     c0025f7b <x87Detect.nox87>
c0025f75:	b8 01 00 00 00       	mov    eax,0x1
c0025f7a:	c3                   	ret    

c0025f7b <x87Detect.nox87>:
c0025f7b:	b8 00 00 00 00       	mov    eax,0x0
c0025f80:	c3                   	ret    

c0025f81 <x87Save>:
c0025f81:	9b dd 74 24 08       	fsave  [esp+0x8]
c0025f86:	c3                   	ret    

c0025f87 <x87Load>:
c0025f87:	dd 64 24 08          	frstor [esp+0x8]
c0025f8b:	c3                   	ret    

c0025f8c <x87Init>:
c0025f8c:	9b db e3             	finit  
c0025f8f:	0f 20 c0             	mov    eax,cr0
c0025f92:	66 25 fb ff          	and    ax,0xfffb
c0025f96:	66 0d 22 00          	or     ax,0x22
c0025f9a:	0f 22 c0             	mov    cr0,eax
c0025f9d:	0f 06                	clts   
c0025f9f:	d9 2d 64 5f 02 c0    	fldcw  WORD PTR ds:0xc0025f64
c0025fa5:	c3                   	ret    

c0025fa6 <x87Close>:
c0025fa6:	c3                   	ret    
c0025fa7:	90                   	nop

c0025fa8 <__do_global_ctors_aux>:
c0025fa8:	a1 ec 8a 02 c0       	mov    eax,ds:0xc0028aec
c0025fad:	83 f8 ff             	cmp    eax,0xffffffff
c0025fb0:	74 1a                	je     c0025fcc <__do_global_ctors_aux+0x24>
c0025fb2:	55                   	push   ebp
c0025fb3:	89 e5                	mov    ebp,esp
c0025fb5:	53                   	push   ebx
c0025fb6:	52                   	push   edx
c0025fb7:	bb ec 8a 02 c0       	mov    ebx,0xc0028aec
c0025fbc:	ff d0                	call   eax
c0025fbe:	83 eb 04             	sub    ebx,0x4
c0025fc1:	8b 03                	mov    eax,DWORD PTR [ebx]
c0025fc3:	83 f8 ff             	cmp    eax,0xffffffff
c0025fc6:	75 f4                	jne    c0025fbc <__do_global_ctors_aux+0x14>
c0025fc8:	58                   	pop    eax
c0025fc9:	5b                   	pop    ebx
c0025fca:	5d                   	pop    ebp
c0025fcb:	c3                   	ret    
c0025fcc:	c3                   	ret    
c0025fcd:	66 90                	xchg   ax,ax
c0025fcf:	90                   	nop

c0025fd0 <__divdi3>:
c0025fd0:	55                   	push   ebp
c0025fd1:	57                   	push   edi
c0025fd2:	56                   	push   esi
c0025fd3:	53                   	push   ebx
c0025fd4:	83 ec 1c             	sub    esp,0x1c
c0025fd7:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0025fdb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025fdf:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0025fe2:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0025fe6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0025fea:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0025fee:	85 db                	test   ebx,ebx
c0025ff0:	0f 88 8e 00 00 00    	js     c0026084 <__divdi3+0xb4>
c0025ff6:	89 dd                	mov    ebp,ebx
c0025ff8:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0026000:	89 d3                	mov    ebx,edx
c0026002:	85 d2                	test   edx,edx
c0026004:	79 0d                	jns    c0026013 <__divdi3+0x43>
c0026006:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c002600a:	f7 d8                	neg    eax
c002600c:	83 d2 00             	adc    edx,0x0
c002600f:	f7 da                	neg    edx
c0026011:	89 d3                	mov    ebx,edx
c0026013:	89 c7                	mov    edi,eax
c0026015:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0026018:	85 db                	test   ebx,ebx
c002601a:	75 48                	jne    c0026064 <__divdi3+0x94>
c002601c:	39 ef                	cmp    edi,ebp
c002601e:	76 24                	jbe    c0026044 <__divdi3+0x74>
c0026020:	89 ea                	mov    edx,ebp
c0026022:	f7 f7                	div    edi
c0026024:	89 c1                	mov    ecx,eax
c0026026:	31 f6                	xor    esi,esi
c0026028:	89 c8                	mov    eax,ecx
c002602a:	89 f2                	mov    edx,esi
c002602c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026030:	85 c9                	test   ecx,ecx
c0026032:	74 07                	je     c002603b <__divdi3+0x6b>
c0026034:	f7 d8                	neg    eax
c0026036:	83 d2 00             	adc    edx,0x0
c0026039:	f7 da                	neg    edx
c002603b:	83 c4 1c             	add    esp,0x1c
c002603e:	5b                   	pop    ebx
c002603f:	5e                   	pop    esi
c0026040:	5f                   	pop    edi
c0026041:	5d                   	pop    ebp
c0026042:	c3                   	ret    
c0026043:	90                   	nop
c0026044:	85 ff                	test   edi,edi
c0026046:	75 0b                	jne    c0026053 <__divdi3+0x83>
c0026048:	b8 01 00 00 00       	mov    eax,0x1
c002604d:	31 d2                	xor    edx,edx
c002604f:	f7 f3                	div    ebx
c0026051:	89 c7                	mov    edi,eax
c0026053:	31 d2                	xor    edx,edx
c0026055:	89 e8                	mov    eax,ebp
c0026057:	f7 f7                	div    edi
c0026059:	89 c6                	mov    esi,eax
c002605b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002605e:	f7 f7                	div    edi
c0026060:	89 c1                	mov    ecx,eax
c0026062:	eb c4                	jmp    c0026028 <__divdi3+0x58>
c0026064:	39 eb                	cmp    ebx,ebp
c0026066:	77 3c                	ja     c00260a4 <__divdi3+0xd4>
c0026068:	0f bd f3             	bsr    esi,ebx
c002606b:	83 f6 1f             	xor    esi,0x1f
c002606e:	75 40                	jne    c00260b0 <__divdi3+0xe0>
c0026070:	39 eb                	cmp    ebx,ebp
c0026072:	72 09                	jb     c002607d <__divdi3+0xad>
c0026074:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0026077:	0f 87 97 00 00 00    	ja     c0026114 <__divdi3+0x144>
c002607d:	b9 01 00 00 00       	mov    ecx,0x1
c0026082:	eb a4                	jmp    c0026028 <__divdi3+0x58>
c0026084:	f7 d9                	neg    ecx
c0026086:	83 d3 00             	adc    ebx,0x0
c0026089:	f7 db                	neg    ebx
c002608b:	89 0c 24             	mov    DWORD PTR [esp],ecx
c002608e:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0026092:	89 dd                	mov    ebp,ebx
c0026094:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c002609c:	e9 5f ff ff ff       	jmp    c0026000 <__divdi3+0x30>
c00260a1:	8d 76 00             	lea    esi,[esi+0x0]
c00260a4:	31 f6                	xor    esi,esi
c00260a6:	31 c9                	xor    ecx,ecx
c00260a8:	e9 7b ff ff ff       	jmp    c0026028 <__divdi3+0x58>
c00260ad:	8d 76 00             	lea    esi,[esi+0x0]
c00260b0:	b8 20 00 00 00       	mov    eax,0x20
c00260b5:	29 f0                	sub    eax,esi
c00260b7:	89 f1                	mov    ecx,esi
c00260b9:	d3 e3                	shl    ebx,cl
c00260bb:	89 fa                	mov    edx,edi
c00260bd:	88 c1                	mov    cl,al
c00260bf:	d3 ea                	shr    edx,cl
c00260c1:	09 da                	or     edx,ebx
c00260c3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00260c7:	89 f1                	mov    ecx,esi
c00260c9:	d3 e7                	shl    edi,cl
c00260cb:	89 eb                	mov    ebx,ebp
c00260cd:	88 c1                	mov    cl,al
c00260cf:	d3 eb                	shr    ebx,cl
c00260d1:	89 f1                	mov    ecx,esi
c00260d3:	d3 e5                	shl    ebp,cl
c00260d5:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00260d8:	88 c1                	mov    cl,al
c00260da:	d3 ea                	shr    edx,cl
c00260dc:	09 d5                	or     ebp,edx
c00260de:	89 e8                	mov    eax,ebp
c00260e0:	89 da                	mov    edx,ebx
c00260e2:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c00260e6:	89 d3                	mov    ebx,edx
c00260e8:	89 c5                	mov    ebp,eax
c00260ea:	f7 e7                	mul    edi
c00260ec:	39 d3                	cmp    ebx,edx
c00260ee:	72 18                	jb     c0026108 <__divdi3+0x138>
c00260f0:	74 0a                	je     c00260fc <__divdi3+0x12c>
c00260f2:	89 e9                	mov    ecx,ebp
c00260f4:	31 f6                	xor    esi,esi
c00260f6:	e9 2d ff ff ff       	jmp    c0026028 <__divdi3+0x58>
c00260fb:	90                   	nop
c00260fc:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00260ff:	89 f1                	mov    ecx,esi
c0026101:	d3 e7                	shl    edi,cl
c0026103:	39 c7                	cmp    edi,eax
c0026105:	73 eb                	jae    c00260f2 <__divdi3+0x122>
c0026107:	90                   	nop
c0026108:	8d 4d ff             	lea    ecx,[ebp-0x1]
c002610b:	31 f6                	xor    esi,esi
c002610d:	e9 16 ff ff ff       	jmp    c0026028 <__divdi3+0x58>
c0026112:	66 90                	xchg   ax,ax
c0026114:	31 c9                	xor    ecx,ecx
c0026116:	e9 0d ff ff ff       	jmp    c0026028 <__divdi3+0x58>
c002611b:	90                   	nop

c002611c <__moddi3>:
c002611c:	55                   	push   ebp
c002611d:	57                   	push   edi
c002611e:	56                   	push   esi
c002611f:	53                   	push   ebx
c0026120:	83 ec 2c             	sub    esp,0x2c
c0026123:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0026127:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c002612b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c002612f:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0026133:	85 db                	test   ebx,ebx
c0026135:	0f 88 85 00 00 00    	js     c00261c0 <__moddi3+0xa4>
c002613b:	89 de                	mov    esi,ebx
c002613d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0026145:	89 d7                	mov    edi,edx
c0026147:	85 d2                	test   edx,edx
c0026149:	79 09                	jns    c0026154 <__moddi3+0x38>
c002614b:	f7 d8                	neg    eax
c002614d:	83 d2 00             	adc    edx,0x0
c0026150:	f7 da                	neg    edx
c0026152:	89 d7                	mov    edi,edx
c0026154:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026158:	89 cd                	mov    ebp,ecx
c002615a:	85 ff                	test   edi,edi
c002615c:	75 52                	jne    c00261b0 <__moddi3+0x94>
c002615e:	89 c3                	mov    ebx,eax
c0026160:	39 f0                	cmp    eax,esi
c0026162:	76 24                	jbe    c0026188 <__moddi3+0x6c>
c0026164:	89 c8                	mov    eax,ecx
c0026166:	89 f2                	mov    edx,esi
c0026168:	f7 f3                	div    ebx
c002616a:	89 d6                	mov    esi,edx
c002616c:	89 f0                	mov    eax,esi
c002616e:	31 d2                	xor    edx,edx
c0026170:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026174:	85 c9                	test   ecx,ecx
c0026176:	74 07                	je     c002617f <__moddi3+0x63>
c0026178:	f7 d8                	neg    eax
c002617a:	83 d2 00             	adc    edx,0x0
c002617d:	f7 da                	neg    edx
c002617f:	83 c4 2c             	add    esp,0x2c
c0026182:	5b                   	pop    ebx
c0026183:	5e                   	pop    esi
c0026184:	5f                   	pop    edi
c0026185:	5d                   	pop    ebp
c0026186:	c3                   	ret    
c0026187:	90                   	nop
c0026188:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c002618c:	85 db                	test   ebx,ebx
c002618e:	75 0d                	jne    c002619d <__moddi3+0x81>
c0026190:	b8 01 00 00 00       	mov    eax,0x1
c0026195:	31 d2                	xor    edx,edx
c0026197:	f7 f7                	div    edi
c0026199:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002619d:	89 f0                	mov    eax,esi
c002619f:	31 d2                	xor    edx,edx
c00261a1:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00261a5:	f7 f7                	div    edi
c00261a7:	89 e8                	mov    eax,ebp
c00261a9:	f7 f7                	div    edi
c00261ab:	89 d6                	mov    esi,edx
c00261ad:	eb bd                	jmp    c002616c <__moddi3+0x50>
c00261af:	90                   	nop
c00261b0:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00261b4:	39 f7                	cmp    edi,esi
c00261b6:	76 20                	jbe    c00261d8 <__moddi3+0xbc>
c00261b8:	89 c8                	mov    eax,ecx
c00261ba:	89 f2                	mov    edx,esi
c00261bc:	eb b2                	jmp    c0026170 <__moddi3+0x54>
c00261be:	66 90                	xchg   ax,ax
c00261c0:	f7 d9                	neg    ecx
c00261c2:	83 d3 00             	adc    ebx,0x0
c00261c5:	f7 db                	neg    ebx
c00261c7:	89 de                	mov    esi,ebx
c00261c9:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c00261d1:	e9 6f ff ff ff       	jmp    c0026145 <__moddi3+0x29>
c00261d6:	66 90                	xchg   ax,ax
c00261d8:	0f bd c7             	bsr    eax,edi
c00261db:	83 f0 1f             	xor    eax,0x1f
c00261de:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00261e2:	75 24                	jne    c0026208 <__moddi3+0xec>
c00261e4:	39 f7                	cmp    edi,esi
c00261e6:	72 06                	jb     c00261ee <__moddi3+0xd2>
c00261e8:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00261ec:	77 0c                	ja     c00261fa <__moddi3+0xde>
c00261ee:	89 e9                	mov    ecx,ebp
c00261f0:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00261f4:	19 fe                	sbb    esi,edi
c00261f6:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00261fa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00261fe:	89 f2                	mov    edx,esi
c0026200:	e9 6b ff ff ff       	jmp    c0026170 <__moddi3+0x54>
c0026205:	8d 76 00             	lea    esi,[esi+0x0]
c0026208:	b8 20 00 00 00       	mov    eax,0x20
c002620d:	89 c2                	mov    edx,eax
c002620f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0026213:	29 da                	sub    edx,ebx
c0026215:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0026219:	88 d9                	mov    cl,bl
c002621b:	d3 e7                	shl    edi,cl
c002621d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026221:	88 d1                	mov    cl,dl
c0026223:	d3 e8                	shr    eax,cl
c0026225:	09 c7                	or     edi,eax
c0026227:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c002622b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002622f:	89 d8                	mov    eax,ebx
c0026231:	88 d9                	mov    cl,bl
c0026233:	d3 e7                	shl    edi,cl
c0026235:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026239:	89 f3                	mov    ebx,esi
c002623b:	88 d1                	mov    cl,dl
c002623d:	d3 eb                	shr    ebx,cl
c002623f:	89 c7                	mov    edi,eax
c0026241:	88 c1                	mov    cl,al
c0026243:	d3 e6                	shl    esi,cl
c0026245:	89 e8                	mov    eax,ebp
c0026247:	88 d1                	mov    cl,dl
c0026249:	d3 e8                	shr    eax,cl
c002624b:	09 f0                	or     eax,esi
c002624d:	89 f9                	mov    ecx,edi
c002624f:	d3 e5                	shl    ebp,cl
c0026251:	89 da                	mov    edx,ebx
c0026253:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c0026257:	89 d3                	mov    ebx,edx
c0026259:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c002625d:	89 c6                	mov    esi,eax
c002625f:	89 d1                	mov    ecx,edx
c0026261:	39 d3                	cmp    ebx,edx
c0026263:	72 27                	jb     c002628c <__moddi3+0x170>
c0026265:	74 21                	je     c0026288 <__moddi3+0x16c>
c0026267:	29 f5                	sub    ebp,esi
c0026269:	19 cb                	sbb    ebx,ecx
c002626b:	89 de                	mov    esi,ebx
c002626d:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0026271:	d3 e6                	shl    esi,cl
c0026273:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0026277:	89 f9                	mov    ecx,edi
c0026279:	d3 ed                	shr    ebp,cl
c002627b:	09 ee                	or     esi,ebp
c002627d:	89 f0                	mov    eax,esi
c002627f:	d3 eb                	shr    ebx,cl
c0026281:	89 da                	mov    edx,ebx
c0026283:	e9 e8 fe ff ff       	jmp    c0026170 <__moddi3+0x54>
c0026288:	39 c5                	cmp    ebp,eax
c002628a:	73 db                	jae    c0026267 <__moddi3+0x14b>
c002628c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0026290:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0026294:	89 d1                	mov    ecx,edx
c0026296:	89 c6                	mov    esi,eax
c0026298:	eb cd                	jmp    c0026267 <__moddi3+0x14b>
c002629a:	66 90                	xchg   ax,ax

c002629c <__udivdi3>:
c002629c:	55                   	push   ebp
c002629d:	57                   	push   edi
c002629e:	56                   	push   esi
c002629f:	53                   	push   ebx
c00262a0:	83 ec 1c             	sub    esp,0x1c
c00262a3:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00262a7:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00262ab:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00262af:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00262b3:	85 d2                	test   edx,edx
c00262b5:	75 41                	jne    c00262f8 <__udivdi3+0x5c>
c00262b7:	39 f7                	cmp    edi,esi
c00262b9:	76 15                	jbe    c00262d0 <__udivdi3+0x34>
c00262bb:	89 e8                	mov    eax,ebp
c00262bd:	89 f2                	mov    edx,esi
c00262bf:	f7 f7                	div    edi
c00262c1:	31 db                	xor    ebx,ebx
c00262c3:	89 da                	mov    edx,ebx
c00262c5:	83 c4 1c             	add    esp,0x1c
c00262c8:	5b                   	pop    ebx
c00262c9:	5e                   	pop    esi
c00262ca:	5f                   	pop    edi
c00262cb:	5d                   	pop    ebp
c00262cc:	c3                   	ret    
c00262cd:	8d 76 00             	lea    esi,[esi+0x0]
c00262d0:	89 f9                	mov    ecx,edi
c00262d2:	85 ff                	test   edi,edi
c00262d4:	75 0b                	jne    c00262e1 <__udivdi3+0x45>
c00262d6:	b8 01 00 00 00       	mov    eax,0x1
c00262db:	31 d2                	xor    edx,edx
c00262dd:	f7 f7                	div    edi
c00262df:	89 c1                	mov    ecx,eax
c00262e1:	31 d2                	xor    edx,edx
c00262e3:	89 f0                	mov    eax,esi
c00262e5:	f7 f1                	div    ecx
c00262e7:	89 c3                	mov    ebx,eax
c00262e9:	89 e8                	mov    eax,ebp
c00262eb:	f7 f1                	div    ecx
c00262ed:	89 da                	mov    edx,ebx
c00262ef:	83 c4 1c             	add    esp,0x1c
c00262f2:	5b                   	pop    ebx
c00262f3:	5e                   	pop    esi
c00262f4:	5f                   	pop    edi
c00262f5:	5d                   	pop    ebp
c00262f6:	c3                   	ret    
c00262f7:	90                   	nop
c00262f8:	39 f2                	cmp    edx,esi
c00262fa:	77 1c                	ja     c0026318 <__udivdi3+0x7c>
c00262fc:	0f bd da             	bsr    ebx,edx
c00262ff:	83 f3 1f             	xor    ebx,0x1f
c0026302:	75 24                	jne    c0026328 <__udivdi3+0x8c>
c0026304:	39 f2                	cmp    edx,esi
c0026306:	72 08                	jb     c0026310 <__udivdi3+0x74>
c0026308:	39 ef                	cmp    edi,ebp
c002630a:	0f 87 84 00 00 00    	ja     c0026394 <__udivdi3+0xf8>
c0026310:	b8 01 00 00 00       	mov    eax,0x1
c0026315:	eb ac                	jmp    c00262c3 <__udivdi3+0x27>
c0026317:	90                   	nop
c0026318:	31 db                	xor    ebx,ebx
c002631a:	31 c0                	xor    eax,eax
c002631c:	89 da                	mov    edx,ebx
c002631e:	83 c4 1c             	add    esp,0x1c
c0026321:	5b                   	pop    ebx
c0026322:	5e                   	pop    esi
c0026323:	5f                   	pop    edi
c0026324:	5d                   	pop    ebp
c0026325:	c3                   	ret    
c0026326:	66 90                	xchg   ax,ax
c0026328:	b8 20 00 00 00       	mov    eax,0x20
c002632d:	29 d8                	sub    eax,ebx
c002632f:	88 d9                	mov    cl,bl
c0026331:	d3 e2                	shl    edx,cl
c0026333:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0026337:	89 fa                	mov    edx,edi
c0026339:	88 c1                	mov    cl,al
c002633b:	d3 ea                	shr    edx,cl
c002633d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026341:	09 d1                	or     ecx,edx
c0026343:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0026347:	88 d9                	mov    cl,bl
c0026349:	d3 e7                	shl    edi,cl
c002634b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c002634f:	89 f7                	mov    edi,esi
c0026351:	88 c1                	mov    cl,al
c0026353:	d3 ef                	shr    edi,cl
c0026355:	88 d9                	mov    cl,bl
c0026357:	d3 e6                	shl    esi,cl
c0026359:	89 ea                	mov    edx,ebp
c002635b:	88 c1                	mov    cl,al
c002635d:	d3 ea                	shr    edx,cl
c002635f:	09 d6                	or     esi,edx
c0026361:	89 f0                	mov    eax,esi
c0026363:	89 fa                	mov    edx,edi
c0026365:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0026369:	89 d7                	mov    edi,edx
c002636b:	89 c6                	mov    esi,eax
c002636d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026371:	39 d7                	cmp    edi,edx
c0026373:	72 13                	jb     c0026388 <__udivdi3+0xec>
c0026375:	74 09                	je     c0026380 <__udivdi3+0xe4>
c0026377:	89 f0                	mov    eax,esi
c0026379:	31 db                	xor    ebx,ebx
c002637b:	e9 43 ff ff ff       	jmp    c00262c3 <__udivdi3+0x27>
c0026380:	88 d9                	mov    cl,bl
c0026382:	d3 e5                	shl    ebp,cl
c0026384:	39 c5                	cmp    ebp,eax
c0026386:	73 ef                	jae    c0026377 <__udivdi3+0xdb>
c0026388:	8d 46 ff             	lea    eax,[esi-0x1]
c002638b:	31 db                	xor    ebx,ebx
c002638d:	e9 31 ff ff ff       	jmp    c00262c3 <__udivdi3+0x27>
c0026392:	66 90                	xchg   ax,ax
c0026394:	31 c0                	xor    eax,eax
c0026396:	e9 28 ff ff ff       	jmp    c00262c3 <__udivdi3+0x27>
c002639b:	90                   	nop

c002639c <__umoddi3>:
c002639c:	55                   	push   ebp
c002639d:	57                   	push   edi
c002639e:	56                   	push   esi
c002639f:	53                   	push   ebx
c00263a0:	83 ec 1c             	sub    esp,0x1c
c00263a3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00263a7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00263ab:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00263af:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00263b3:	89 da                	mov    edx,ebx
c00263b5:	85 c0                	test   eax,eax
c00263b7:	75 37                	jne    c00263f0 <__umoddi3+0x54>
c00263b9:	39 df                	cmp    edi,ebx
c00263bb:	76 13                	jbe    c00263d0 <__umoddi3+0x34>
c00263bd:	89 f0                	mov    eax,esi
c00263bf:	f7 f7                	div    edi
c00263c1:	89 d0                	mov    eax,edx
c00263c3:	31 d2                	xor    edx,edx
c00263c5:	83 c4 1c             	add    esp,0x1c
c00263c8:	5b                   	pop    ebx
c00263c9:	5e                   	pop    esi
c00263ca:	5f                   	pop    edi
c00263cb:	5d                   	pop    ebp
c00263cc:	c3                   	ret    
c00263cd:	8d 76 00             	lea    esi,[esi+0x0]
c00263d0:	89 fd                	mov    ebp,edi
c00263d2:	85 ff                	test   edi,edi
c00263d4:	75 0b                	jne    c00263e1 <__umoddi3+0x45>
c00263d6:	b8 01 00 00 00       	mov    eax,0x1
c00263db:	31 d2                	xor    edx,edx
c00263dd:	f7 f7                	div    edi
c00263df:	89 c5                	mov    ebp,eax
c00263e1:	89 d8                	mov    eax,ebx
c00263e3:	31 d2                	xor    edx,edx
c00263e5:	f7 f5                	div    ebp
c00263e7:	89 f0                	mov    eax,esi
c00263e9:	f7 f5                	div    ebp
c00263eb:	89 d0                	mov    eax,edx
c00263ed:	eb d4                	jmp    c00263c3 <__umoddi3+0x27>
c00263ef:	90                   	nop
c00263f0:	89 f1                	mov    ecx,esi
c00263f2:	39 d8                	cmp    eax,ebx
c00263f4:	76 0a                	jbe    c0026400 <__umoddi3+0x64>
c00263f6:	89 f0                	mov    eax,esi
c00263f8:	83 c4 1c             	add    esp,0x1c
c00263fb:	5b                   	pop    ebx
c00263fc:	5e                   	pop    esi
c00263fd:	5f                   	pop    edi
c00263fe:	5d                   	pop    ebp
c00263ff:	c3                   	ret    
c0026400:	0f bd e8             	bsr    ebp,eax
c0026403:	83 f5 1f             	xor    ebp,0x1f
c0026406:	75 1c                	jne    c0026424 <__umoddi3+0x88>
c0026408:	39 d8                	cmp    eax,ebx
c002640a:	72 04                	jb     c0026410 <__umoddi3+0x74>
c002640c:	39 f7                	cmp    edi,esi
c002640e:	77 08                	ja     c0026418 <__umoddi3+0x7c>
c0026410:	89 da                	mov    edx,ebx
c0026412:	29 fe                	sub    esi,edi
c0026414:	19 c2                	sbb    edx,eax
c0026416:	89 f1                	mov    ecx,esi
c0026418:	89 c8                	mov    eax,ecx
c002641a:	83 c4 1c             	add    esp,0x1c
c002641d:	5b                   	pop    ebx
c002641e:	5e                   	pop    esi
c002641f:	5f                   	pop    edi
c0026420:	5d                   	pop    ebp
c0026421:	c3                   	ret    
c0026422:	66 90                	xchg   ax,ax
c0026424:	ba 20 00 00 00       	mov    edx,0x20
c0026429:	29 ea                	sub    edx,ebp
c002642b:	89 e9                	mov    ecx,ebp
c002642d:	d3 e0                	shl    eax,cl
c002642f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026433:	89 f8                	mov    eax,edi
c0026435:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0026439:	88 d1                	mov    cl,dl
c002643b:	d3 e8                	shr    eax,cl
c002643d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026441:	09 c1                	or     ecx,eax
c0026443:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0026447:	89 e9                	mov    ecx,ebp
c0026449:	d3 e7                	shl    edi,cl
c002644b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c002644f:	89 d8                	mov    eax,ebx
c0026451:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0026455:	88 d1                	mov    cl,dl
c0026457:	d3 e8                	shr    eax,cl
c0026459:	89 c7                	mov    edi,eax
c002645b:	89 e9                	mov    ecx,ebp
c002645d:	d3 e3                	shl    ebx,cl
c002645f:	89 f0                	mov    eax,esi
c0026461:	88 d1                	mov    cl,dl
c0026463:	d3 e8                	shr    eax,cl
c0026465:	09 d8                	or     eax,ebx
c0026467:	89 e9                	mov    ecx,ebp
c0026469:	d3 e6                	shl    esi,cl
c002646b:	89 f3                	mov    ebx,esi
c002646d:	89 fa                	mov    edx,edi
c002646f:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0026473:	89 d1                	mov    ecx,edx
c0026475:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026479:	89 c6                	mov    esi,eax
c002647b:	89 d7                	mov    edi,edx
c002647d:	39 d1                	cmp    ecx,edx
c002647f:	72 27                	jb     c00264a8 <__umoddi3+0x10c>
c0026481:	74 21                	je     c00264a4 <__umoddi3+0x108>
c0026483:	89 ca                	mov    edx,ecx
c0026485:	29 f3                	sub    ebx,esi
c0026487:	19 fa                	sbb    edx,edi
c0026489:	89 d0                	mov    eax,edx
c002648b:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c002648f:	d3 e0                	shl    eax,cl
c0026491:	89 e9                	mov    ecx,ebp
c0026493:	d3 eb                	shr    ebx,cl
c0026495:	09 d8                	or     eax,ebx
c0026497:	d3 ea                	shr    edx,cl
c0026499:	83 c4 1c             	add    esp,0x1c
c002649c:	5b                   	pop    ebx
c002649d:	5e                   	pop    esi
c002649e:	5f                   	pop    edi
c002649f:	5d                   	pop    ebp
c00264a0:	c3                   	ret    
c00264a1:	8d 76 00             	lea    esi,[esi+0x0]
c00264a4:	39 c3                	cmp    ebx,eax
c00264a6:	73 db                	jae    c0026483 <__umoddi3+0xe7>
c00264a8:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00264ac:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c00264b0:	89 d7                	mov    edi,edx
c00264b2:	89 c6                	mov    esi,eax
c00264b4:	eb cd                	jmp    c0026483 <__umoddi3+0xe7>

c00264b6 <__addsf3>:
c00264b6:	55                   	push   ebp
c00264b7:	89 e5                	mov    ebp,esp
c00264b9:	57                   	push   edi
c00264ba:	56                   	push   esi
c00264bb:	53                   	push   ebx
c00264bc:	83 ec 08             	sub    esp,0x8
c00264bf:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c00264c2:	89 fa                	mov    edx,edi
c00264c4:	89 f8                	mov    eax,edi
c00264c6:	c1 f8 17             	sar    eax,0x17
c00264c9:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00264cc:	c1 e2 08             	shl    edx,0x8
c00264cf:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c00264d5:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c00264d8:	89 de                	mov    esi,ebx
c00264da:	c1 fe 17             	sar    esi,0x17
c00264dd:	c1 e3 08             	shl    ebx,0x8
c00264e0:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c00264e6:	31 f0                	xor    eax,esi
c00264e8:	0f 88 3b 01 00 00    	js     c0026629 <__addsf3+0x173>
c00264ee:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c00264f1:	29 f1                	sub    ecx,esi
c00264f3:	85 c9                	test   ecx,ecx
c00264f5:	7e 54                	jle    c002654b <__addsf3+0x95>
c00264f7:	89 f0                	mov    eax,esi
c00264f9:	84 c0                	test   al,al
c00264fb:	75 10                	jne    c002650d <__addsf3+0x57>
c00264fd:	85 db                	test   ebx,ebx
c00264ff:	0f 84 aa 02 00 00    	je     c00267af <__addsf3+0x2f9>
c0026505:	49                   	dec    ecx
c0026506:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026509:	74 38                	je     c0026543 <__addsf3+0x8d>
c002650b:	eb 13                	jmp    c0026520 <__addsf3+0x6a>
c002650d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026510:	f7 d0                	not    eax
c0026512:	84 c0                	test   al,al
c0026514:	0f 84 95 02 00 00    	je     c00267af <__addsf3+0x2f9>
c002651a:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026520:	83 f9 1f             	cmp    ecx,0x1f
c0026523:	0f 8f 86 02 00 00    	jg     c00267af <__addsf3+0x2f9>
c0026529:	89 de                	mov    esi,ebx
c002652b:	d3 ee                	shr    esi,cl
c002652d:	b8 20 00 00 00       	mov    eax,0x20
c0026532:	29 c8                	sub    eax,ecx
c0026534:	89 c1                	mov    ecx,eax
c0026536:	d3 e3                	shl    ebx,cl
c0026538:	31 c0                	xor    eax,eax
c002653a:	85 db                	test   ebx,ebx
c002653c:	0f 95 c0             	setne  al
c002653f:	09 f0                	or     eax,esi
c0026541:	01 d0                	add    eax,edx
c0026543:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026546:	e9 b6 00 00 00       	jmp    c0026601 <__addsf3+0x14b>
c002654b:	74 5c                	je     c00265a9 <__addsf3+0xf3>
c002654d:	89 f1                	mov    ecx,esi
c002654f:	2b 4d f0             	sub    ecx,DWORD PTR [ebp-0x10]
c0026552:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026555:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0026559:	75 14                	jne    c002656f <__addsf3+0xb9>
c002655b:	85 d2                	test   edx,edx
c002655d:	0f 84 4c 02 00 00    	je     c00267af <__addsf3+0x2f9>
c0026563:	49                   	dec    ecx
c0026564:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026567:	0f 84 94 00 00 00    	je     c0026601 <__addsf3+0x14b>
c002656d:	eb 12                	jmp    c0026581 <__addsf3+0xcb>
c002656f:	89 f0                	mov    eax,esi
c0026571:	f7 d0                	not    eax
c0026573:	84 c0                	test   al,al
c0026575:	0f 84 34 02 00 00    	je     c00267af <__addsf3+0x2f9>
c002657b:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026581:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026584:	83 f9 1f             	cmp    ecx,0x1f
c0026587:	0f 8f 22 02 00 00    	jg     c00267af <__addsf3+0x2f9>
c002658d:	89 d7                	mov    edi,edx
c002658f:	d3 ef                	shr    edi,cl
c0026591:	b8 20 00 00 00       	mov    eax,0x20
c0026596:	29 c8                	sub    eax,ecx
c0026598:	89 c1                	mov    ecx,eax
c002659a:	d3 e2                	shl    edx,cl
c002659c:	31 c0                	xor    eax,eax
c002659e:	85 d2                	test   edx,edx
c00265a0:	0f 95 c0             	setne  al
c00265a3:	09 f8                	or     eax,edi
c00265a5:	01 d8                	add    eax,ebx
c00265a7:	eb 58                	jmp    c0026601 <__addsf3+0x14b>
c00265a9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00265ac:	8d 70 01             	lea    esi,[eax+0x1]
c00265af:	f7 c6 fe 00 00 00    	test   esi,0xfe
c00265b5:	75 32                	jne    c00265e9 <__addsf3+0x133>
c00265b7:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c00265bb:	75 1f                	jne    c00265dc <__addsf3+0x126>
c00265bd:	85 d2                	test   edx,edx
c00265bf:	0f 84 e0 01 00 00    	je     c00267a5 <__addsf3+0x2ef>
c00265c5:	85 db                	test   ebx,ebx
c00265c7:	0f 84 e2 01 00 00    	je     c00267af <__addsf3+0x2f9>
c00265cd:	89 d0                	mov    eax,edx
c00265cf:	01 d8                	add    eax,ebx
c00265d1:	0f 89 a9 01 00 00    	jns    c0026780 <__addsf3+0x2ca>
c00265d7:	e9 9d 01 00 00       	jmp    c0026779 <__addsf3+0x2c3>
c00265dc:	85 d2                	test   edx,edx
c00265de:	0f 85 cb 01 00 00    	jne    c00267af <__addsf3+0x2f9>
c00265e4:	e9 bc 01 00 00       	jmp    c00267a5 <__addsf3+0x2ef>
c00265e9:	31 c0                	xor    eax,eax
c00265eb:	89 f1                	mov    ecx,esi
c00265ed:	f7 d1                	not    ecx
c00265ef:	84 c9                	test   cl,cl
c00265f1:	0f 84 90 01 00 00    	je     c0026787 <__addsf3+0x2d1>
c00265f7:	8d 04 1a             	lea    eax,[edx+ebx*1]
c00265fa:	d1 e8                	shr    eax,1
c00265fc:	e9 86 01 00 00       	jmp    c0026787 <__addsf3+0x2d1>
c0026601:	85 c0                	test   eax,eax
c0026603:	0f 89 7e 01 00 00    	jns    c0026787 <__addsf3+0x2d1>
c0026609:	46                   	inc    esi
c002660a:	89 f2                	mov    edx,esi
c002660c:	f7 d2                	not    edx
c002660e:	84 d2                	test   dl,dl
c0026610:	0f 84 6f 01 00 00    	je     c0026785 <__addsf3+0x2cf>
c0026616:	89 c2                	mov    edx,eax
c0026618:	83 e2 01             	and    edx,0x1
c002661b:	d1 e8                	shr    eax,1
c002661d:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0026622:	09 d0                	or     eax,edx
c0026624:	e9 5e 01 00 00       	jmp    c0026787 <__addsf3+0x2d1>
c0026629:	0f b6 45 f0          	movzx  eax,BYTE PTR [ebp-0x10]
c002662d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0026630:	89 f0                	mov    eax,esi
c0026632:	0f b6 c0             	movzx  eax,al
c0026635:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0026638:	29 c1                	sub    ecx,eax
c002663a:	85 c9                	test   ecx,ecx
c002663c:	7e 55                	jle    c0026693 <__addsf3+0x1dd>
c002663e:	85 c0                	test   eax,eax
c0026640:	75 11                	jne    c0026653 <__addsf3+0x19d>
c0026642:	85 db                	test   ebx,ebx
c0026644:	0f 84 65 01 00 00    	je     c00267af <__addsf3+0x2f9>
c002664a:	49                   	dec    ecx
c002664b:	75 19                	jne    c0026666 <__addsf3+0x1b0>
c002664d:	89 d0                	mov    eax,edx
c002664f:	29 d8                	sub    eax,ebx
c0026651:	eb 38                	jmp    c002668b <__addsf3+0x1d5>
c0026653:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026656:	f7 d0                	not    eax
c0026658:	84 c0                	test   al,al
c002665a:	0f 84 4f 01 00 00    	je     c00267af <__addsf3+0x2f9>
c0026660:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026666:	83 f9 1f             	cmp    ecx,0x1f
c0026669:	0f 8f 40 01 00 00    	jg     c00267af <__addsf3+0x2f9>
c002666f:	89 de                	mov    esi,ebx
c0026671:	d3 ee                	shr    esi,cl
c0026673:	b8 20 00 00 00       	mov    eax,0x20
c0026678:	29 c8                	sub    eax,ecx
c002667a:	89 c1                	mov    ecx,eax
c002667c:	d3 e3                	shl    ebx,cl
c002667e:	31 c0                	xor    eax,eax
c0026680:	85 db                	test   ebx,ebx
c0026682:	0f 95 c0             	setne  al
c0026685:	09 f0                	or     eax,esi
c0026687:	29 c2                	sub    edx,eax
c0026689:	89 d0                	mov    eax,edx
c002668b:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c002668e:	e9 af 00 00 00       	jmp    c0026742 <__addsf3+0x28c>
c0026693:	74 5c                	je     c00266f1 <__addsf3+0x23b>
c0026695:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
c0026698:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c002669b:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c002669f:	75 14                	jne    c00266b5 <__addsf3+0x1ff>
c00266a1:	85 d2                	test   edx,edx
c00266a3:	0f 84 06 01 00 00    	je     c00267af <__addsf3+0x2f9>
c00266a9:	48                   	dec    eax
c00266aa:	75 1b                	jne    c00266c7 <__addsf3+0x211>
c00266ac:	89 d8                	mov    eax,ebx
c00266ae:	29 d0                	sub    eax,edx
c00266b0:	e9 8d 00 00 00       	jmp    c0026742 <__addsf3+0x28c>
c00266b5:	89 f1                	mov    ecx,esi
c00266b7:	f7 d1                	not    ecx
c00266b9:	84 c9                	test   cl,cl
c00266bb:	0f 84 ee 00 00 00    	je     c00267af <__addsf3+0x2f9>
c00266c1:	81 ca 00 00 00 80    	or     edx,0x80000000
c00266c7:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00266ca:	83 f8 1f             	cmp    eax,0x1f
c00266cd:	0f 8f dc 00 00 00    	jg     c00267af <__addsf3+0x2f9>
c00266d3:	89 d7                	mov    edi,edx
c00266d5:	88 c1                	mov    cl,al
c00266d7:	d3 ef                	shr    edi,cl
c00266d9:	b9 20 00 00 00       	mov    ecx,0x20
c00266de:	29 c1                	sub    ecx,eax
c00266e0:	d3 e2                	shl    edx,cl
c00266e2:	31 c0                	xor    eax,eax
c00266e4:	85 d2                	test   edx,edx
c00266e6:	0f 95 c0             	setne  al
c00266e9:	09 f8                	or     eax,edi
c00266eb:	29 c3                	sub    ebx,eax
c00266ed:	89 d8                	mov    eax,ebx
c00266ef:	eb 51                	jmp    c0026742 <__addsf3+0x28c>
c00266f1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00266f4:	40                   	inc    eax
c00266f5:	a8 fe                	test   al,0xfe
c00266f7:	75 3d                	jne    c0026736 <__addsf3+0x280>
c00266f9:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c00266fd:	0f 85 a7 00 00 00    	jne    c00267aa <__addsf3+0x2f4>
c0026703:	85 d2                	test   edx,edx
c0026705:	75 12                	jne    c0026719 <__addsf3+0x263>
c0026707:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c002670a:	85 db                	test   ebx,ebx
c002670c:	0f 85 9d 00 00 00    	jne    c00267af <__addsf3+0x2f9>
c0026712:	31 ff                	xor    edi,edi
c0026714:	e9 96 00 00 00       	jmp    c00267af <__addsf3+0x2f9>
c0026719:	85 db                	test   ebx,ebx
c002671b:	0f 84 8e 00 00 00    	je     c00267af <__addsf3+0x2f9>
c0026721:	89 d0                	mov    eax,edx
c0026723:	29 d8                	sub    eax,ebx
c0026725:	79 06                	jns    c002672d <__addsf3+0x277>
c0026727:	89 d8                	mov    eax,ebx
c0026729:	29 d0                	sub    eax,edx
c002672b:	eb 5a                	jmp    c0026787 <__addsf3+0x2d1>
c002672d:	bf 00 00 00 00       	mov    edi,0x0
c0026732:	74 7b                	je     c00267af <__addsf3+0x2f9>
c0026734:	eb 4a                	jmp    c0026780 <__addsf3+0x2ca>
c0026736:	89 d0                	mov    eax,edx
c0026738:	29 d8                	sub    eax,ebx
c002673a:	79 12                	jns    c002674e <__addsf3+0x298>
c002673c:	89 d8                	mov    eax,ebx
c002673e:	29 d0                	sub    eax,edx
c0026740:	eb 09                	jmp    c002674b <__addsf3+0x295>
c0026742:	85 c0                	test   eax,eax
c0026744:	79 41                	jns    c0026787 <__addsf3+0x2d1>
c0026746:	25 ff ff ff 7f       	and    eax,0x7fffffff
c002674b:	89 75 f0             	mov    DWORD PTR [ebp-0x10],esi
c002674e:	31 f6                	xor    esi,esi
c0026750:	85 c0                	test   eax,eax
c0026752:	74 33                	je     c0026787 <__addsf3+0x2d1>
c0026754:	0f bd c8             	bsr    ecx,eax
c0026757:	83 f1 1f             	xor    ecx,0x1f
c002675a:	d3 e0                	shl    eax,cl
c002675c:	0f b6 55 f0          	movzx  edx,BYTE PTR [ebp-0x10]
c0026760:	39 ca                	cmp    edx,ecx
c0026762:	7f 10                	jg     c0026774 <__addsf3+0x2be>
c0026764:	29 d1                	sub    ecx,edx
c0026766:	41                   	inc    ecx
c0026767:	d3 e8                	shr    eax,cl
c0026769:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c002676c:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c0026772:	eb 13                	jmp    c0026787 <__addsf3+0x2d1>
c0026774:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026777:	29 ce                	sub    esi,ecx
c0026779:	25 ff ff ff 7f       	and    eax,0x7fffffff
c002677e:	eb 07                	jmp    c0026787 <__addsf3+0x2d1>
c0026780:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026783:	eb 02                	jmp    c0026787 <__addsf3+0x2d1>
c0026785:	31 c0                	xor    eax,eax
c0026787:	89 c2                	mov    edx,eax
c0026789:	c1 ea 08             	shr    edx,0x8
c002678c:	a8 7f                	test   al,0x7f
c002678e:	0f 95 c1             	setne  cl
c0026791:	09 d1                	or     ecx,edx
c0026793:	83 e1 01             	and    ecx,0x1
c0026796:	c1 e8 07             	shr    eax,0x7
c0026799:	21 c8                	and    eax,ecx
c002679b:	c1 e6 17             	shl    esi,0x17
c002679e:	09 d6                	or     esi,edx
c00267a0:	8d 3c 30             	lea    edi,[eax+esi*1]
c00267a3:	eb 0a                	jmp    c00267af <__addsf3+0x2f9>
c00267a5:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00267a8:	eb 05                	jmp    c00267af <__addsf3+0x2f9>
c00267aa:	bf 00 00 c0 7f       	mov    edi,0x7fc00000
c00267af:	89 f8                	mov    eax,edi
c00267b1:	5a                   	pop    edx
c00267b2:	59                   	pop    ecx
c00267b3:	5b                   	pop    ebx
c00267b4:	5e                   	pop    esi
c00267b5:	5f                   	pop    edi
c00267b6:	5d                   	pop    ebp
c00267b7:	c3                   	ret    

c00267b8 <__subsf3>:
c00267b8:	55                   	push   ebp
c00267b9:	89 e5                	mov    ebp,esp
c00267bb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00267be:	05 00 00 00 80       	add    eax,0x80000000
c00267c3:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c00267c6:	5d                   	pop    ebp
c00267c7:	e9 ea fc ff ff       	jmp    c00264b6 <__addsf3>

c00267cc <__negsf2>:
c00267cc:	55                   	push   ebp
c00267cd:	89 e5                	mov    ebp,esp
c00267cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00267d2:	05 00 00 00 80       	add    eax,0x80000000
c00267d7:	5d                   	pop    ebp
c00267d8:	c3                   	ret    

c00267d9 <__mulsf3>:
c00267d9:	55                   	push   ebp
c00267da:	89 e5                	mov    ebp,esp
c00267dc:	57                   	push   edi
c00267dd:	56                   	push   esi
c00267de:	53                   	push   ebx
c00267df:	83 ec 1c             	sub    esp,0x1c
c00267e2:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c00267e5:	89 f0                	mov    eax,esi
c00267e7:	89 f1                	mov    ecx,esi
c00267e9:	c1 f9 17             	sar    ecx,0x17
c00267ec:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c00267ef:	c1 e0 08             	shl    eax,0x8
c00267f2:	25 00 ff ff 7f       	and    eax,0x7fffff00
c00267f7:	89 c1                	mov    ecx,eax
c00267f9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00267fc:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00267ff:	89 c7                	mov    edi,eax
c0026801:	c1 ff 17             	sar    edi,0x17
c0026804:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0026808:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c002680b:	89 f8                	mov    eax,edi
c002680d:	0f b6 c0             	movzx  eax,al
c0026810:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0026813:	8d 5c 03 82          	lea    ebx,[ebx+eax*1-0x7e]
c0026817:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c002681a:	42                   	inc    edx
c002681b:	80 e2 fe             	and    dl,0xfe
c002681e:	75 7b                	jne    c002689b <__mulsf3+0xc2>
c0026820:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0026824:	74 54                	je     c002687a <__mulsf3+0xa1>
c0026826:	85 c9                	test   ecx,ecx
c0026828:	0f 85 64 01 00 00    	jne    c0026992 <__mulsf3+0x1b9>
c002682e:	8d 57 01             	lea    edx,[edi+0x1]
c0026831:	80 e2 fe             	and    dl,0xfe
c0026834:	75 1f                	jne    c0026855 <__mulsf3+0x7c>
c0026836:	85 c0                	test   eax,eax
c0026838:	b8 00 00 00 00       	mov    eax,0x0
c002683d:	74 29                	je     c0026868 <__mulsf3+0x8f>
c002683f:	53                   	push   ebx
c0026840:	53                   	push   ebx
c0026841:	50                   	push   eax
c0026842:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026845:	e8 96 05 00 00       	call   c0026de0 <__nesf2>
c002684a:	83 c4 10             	add    esp,0x10
c002684d:	85 c0                	test   eax,eax
c002684f:	0f 85 3a 01 00 00    	jne    c002698f <__mulsf3+0x1b6>
c0026855:	85 ff                	test   edi,edi
c0026857:	0f 89 35 01 00 00    	jns    c0026992 <__mulsf3+0x1b9>
c002685d:	81 c6 00 00 00 80    	add    esi,0x80000000
c0026863:	e9 2a 01 00 00       	jmp    c0026992 <__mulsf3+0x1b9>
c0026868:	51                   	push   ecx
c0026869:	51                   	push   ecx
c002686a:	50                   	push   eax
c002686b:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002686e:	e8 6d 05 00 00       	call   c0026de0 <__nesf2>
c0026873:	83 c4 10             	add    esp,0x10
c0026876:	85 c0                	test   eax,eax
c0026878:	eb 15                	jmp    c002688f <__mulsf3+0xb6>
c002687a:	85 c9                	test   ecx,ecx
c002687c:	74 0b                	je     c0026889 <__mulsf3+0xb0>
c002687e:	8d 53 ff             	lea    edx,[ebx-0x1]
c0026881:	01 c9                	add    ecx,ecx
c0026883:	78 16                	js     c002689b <__mulsf3+0xc2>
c0026885:	89 d3                	mov    ebx,edx
c0026887:	eb f5                	jmp    c002687e <__mulsf3+0xa5>
c0026889:	89 f8                	mov    eax,edi
c002688b:	f7 d0                	not    eax
c002688d:	84 c0                	test   al,al
c002688f:	75 c4                	jne    c0026855 <__mulsf3+0x7c>
c0026891:	be 00 00 c0 7f       	mov    esi,0x7fc00000
c0026896:	e9 f7 00 00 00       	jmp    c0026992 <__mulsf3+0x1b9>
c002689b:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c002689e:	c1 e6 08             	shl    esi,0x8
c00268a1:	81 e6 00 ff ff 7f    	and    esi,0x7fffff00
c00268a7:	8d 57 01             	lea    edx,[edi+0x1]
c00268aa:	80 e2 fe             	and    dl,0xfe
c00268ad:	75 63                	jne    c0026912 <__mulsf3+0x139>
c00268af:	85 c0                	test   eax,eax
c00268b1:	74 2f                	je     c00268e2 <__mulsf3+0x109>
c00268b3:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c00268b7:	0f 89 d2 00 00 00    	jns    c002698f <__mulsf3+0x1b6>
c00268bd:	52                   	push   edx
c00268be:	52                   	push   edx
c00268bf:	6a 00                	push   0x0
c00268c1:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00268c4:	e8 dc 04 00 00       	call   c0026da5 <__eqsf2>
c00268c9:	83 c4 10             	add    esp,0x10
c00268cc:	85 c0                	test   eax,eax
c00268ce:	0f 85 bb 00 00 00    	jne    c002698f <__mulsf3+0x1b6>
c00268d4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00268d7:	8d b0 00 00 00 80    	lea    esi,[eax-0x80000000]
c00268dd:	e9 b0 00 00 00       	jmp    c0026992 <__mulsf3+0x1b9>
c00268e2:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c00268e5:	50                   	push   eax
c00268e6:	50                   	push   eax
c00268e7:	6a 00                	push   0x0
c00268e9:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00268ec:	e8 b4 04 00 00       	call   c0026da5 <__eqsf2>
c00268f1:	83 c4 10             	add    esp,0x10
c00268f4:	85 c0                	test   eax,eax
c00268f6:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00268f9:	75 0c                	jne    c0026907 <__mulsf3+0x12e>
c00268fb:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c00268ff:	0f 89 8a 00 00 00    	jns    c002698f <__mulsf3+0x1b6>
c0026905:	eb cd                	jmp    c00268d4 <__mulsf3+0xfb>
c0026907:	8d 43 ff             	lea    eax,[ebx-0x1]
c002690a:	01 f6                	add    esi,esi
c002690c:	78 04                	js     c0026912 <__mulsf3+0x139>
c002690e:	89 c3                	mov    ebx,eax
c0026910:	eb f5                	jmp    c0026907 <__mulsf3+0x12e>
c0026912:	89 c8                	mov    eax,ecx
c0026914:	0d 00 00 00 80       	or     eax,0x80000000
c0026919:	81 ce 00 00 00 80    	or     esi,0x80000000
c002691f:	f7 e6                	mul    esi
c0026921:	85 c0                	test   eax,eax
c0026923:	0f 95 c0             	setne  al
c0026926:	0f b6 c0             	movzx  eax,al
c0026929:	09 c2                	or     edx,eax
c002692b:	78 03                	js     c0026930 <__mulsf3+0x157>
c002692d:	01 d2                	add    edx,edx
c002692f:	4b                   	dec    ebx
c0026930:	81 fb fe 00 00 00    	cmp    ebx,0xfe
c0026936:	7f 22                	jg     c002695a <__mulsf3+0x181>
c0026938:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c002693e:	85 db                	test   ebx,ebx
c0026940:	7f 23                	jg     c0026965 <__mulsf3+0x18c>
c0026942:	83 fb e9             	cmp    ebx,0xffffffe9
c0026945:	7c 1a                	jl     c0026961 <__mulsf3+0x188>
c0026947:	81 ca 00 00 00 80    	or     edx,0x80000000
c002694d:	b9 01 00 00 00       	mov    ecx,0x1
c0026952:	29 d9                	sub    ecx,ebx
c0026954:	d3 ea                	shr    edx,cl
c0026956:	31 db                	xor    ebx,ebx
c0026958:	eb 0b                	jmp    c0026965 <__mulsf3+0x18c>
c002695a:	bb ff 00 00 00       	mov    ebx,0xff
c002695f:	eb 02                	jmp    c0026963 <__mulsf3+0x18a>
c0026961:	31 db                	xor    ebx,ebx
c0026963:	31 d2                	xor    edx,edx
c0026965:	89 d0                	mov    eax,edx
c0026967:	c1 e8 08             	shr    eax,0x8
c002696a:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c002696d:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0026973:	09 fb                	or     ebx,edi
c0026975:	c1 e3 17             	shl    ebx,0x17
c0026978:	09 c3                	or     ebx,eax
c002697a:	f6 c2 7f             	test   dl,0x7f
c002697d:	0f 95 c1             	setne  cl
c0026980:	09 c8                	or     eax,ecx
c0026982:	83 e0 01             	and    eax,0x1
c0026985:	c1 ea 07             	shr    edx,0x7
c0026988:	21 c2                	and    edx,eax
c002698a:	8d 34 13             	lea    esi,[ebx+edx*1]
c002698d:	eb 03                	jmp    c0026992 <__mulsf3+0x1b9>
c002698f:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0026992:	89 f0                	mov    eax,esi
c0026994:	8d 65 f4             	lea    esp,[ebp-0xc]
c0026997:	5b                   	pop    ebx
c0026998:	5e                   	pop    esi
c0026999:	5f                   	pop    edi
c002699a:	5d                   	pop    ebp
c002699b:	c3                   	ret    

c002699c <__divsf3>:
c002699c:	55                   	push   ebp
c002699d:	89 e5                	mov    ebp,esp
c002699f:	57                   	push   edi
c00269a0:	56                   	push   esi
c00269a1:	53                   	push   ebx
c00269a2:	83 ec 1c             	sub    esp,0x1c
c00269a5:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00269a8:	89 d8                	mov    eax,ebx
c00269aa:	89 d9                	mov    ecx,ebx
c00269ac:	c1 f9 17             	sar    ecx,0x17
c00269af:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c00269b2:	c1 e0 08             	shl    eax,0x8
c00269b5:	25 00 ff ff 7f       	and    eax,0x7fffff00
c00269ba:	89 c1                	mov    ecx,eax
c00269bc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00269bf:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00269c2:	89 c7                	mov    edi,eax
c00269c4:	c1 ff 17             	sar    edi,0x17
c00269c7:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00269cb:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00269ce:	89 f8                	mov    eax,edi
c00269d0:	0f b6 c0             	movzx  eax,al
c00269d3:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00269d6:	29 c6                	sub    esi,eax
c00269d8:	83 c6 7f             	add    esi,0x7f
c00269db:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c00269de:	42                   	inc    edx
c00269df:	80 e2 fe             	and    dl,0xfe
c00269e2:	0f 85 9c 00 00 00    	jne    c0026a84 <__divsf3+0xe8>
c00269e8:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c00269ec:	74 33                	je     c0026a21 <__divsf3+0x85>
c00269ee:	85 c9                	test   ecx,ecx
c00269f0:	0f 85 c7 01 00 00    	jne    c0026bbd <__divsf3+0x221>
c00269f6:	8d 57 01             	lea    edx,[edi+0x1]
c00269f9:	80 e2 fe             	and    dl,0xfe
c00269fc:	75 2f                	jne    c0026a2d <__divsf3+0x91>
c00269fe:	85 c0                	test   eax,eax
c0026a00:	74 2b                	je     c0026a2d <__divsf3+0x91>
c0026a02:	51                   	push   ecx
c0026a03:	51                   	push   ecx
c0026a04:	6a 00                	push   0x0
c0026a06:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026a09:	e8 d2 03 00 00       	call   c0026de0 <__nesf2>
c0026a0e:	83 c4 10             	add    esp,0x10
c0026a11:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0026a14:	85 c0                	test   eax,eax
c0026a16:	0f 85 a1 01 00 00    	jne    c0026bbd <__divsf3+0x221>
c0026a1c:	e9 92 01 00 00       	jmp    c0026bb3 <__divsf3+0x217>
c0026a21:	85 c9                	test   ecx,ecx
c0026a23:	75 1b                	jne    c0026a40 <__divsf3+0xa4>
c0026a25:	8d 57 01             	lea    edx,[edi+0x1]
c0026a28:	80 e2 fe             	and    dl,0xfe
c0026a2b:	74 1e                	je     c0026a4b <__divsf3+0xaf>
c0026a2d:	85 ff                	test   edi,edi
c0026a2f:	0f 89 88 01 00 00    	jns    c0026bbd <__divsf3+0x221>
c0026a35:	81 c3 00 00 00 80    	add    ebx,0x80000000
c0026a3b:	e9 7d 01 00 00       	jmp    c0026bbd <__divsf3+0x221>
c0026a40:	8d 56 ff             	lea    edx,[esi-0x1]
c0026a43:	01 c9                	add    ecx,ecx
c0026a45:	78 3d                	js     c0026a84 <__divsf3+0xe8>
c0026a47:	89 d6                	mov    esi,edx
c0026a49:	eb f5                	jmp    c0026a40 <__divsf3+0xa4>
c0026a4b:	85 c0                	test   eax,eax
c0026a4d:	b8 00 00 00 00       	mov    eax,0x0
c0026a52:	74 18                	je     c0026a6c <__divsf3+0xd0>
c0026a54:	52                   	push   edx
c0026a55:	52                   	push   edx
c0026a56:	50                   	push   eax
c0026a57:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026a5a:	e8 81 03 00 00       	call   c0026de0 <__nesf2>
c0026a5f:	83 c4 10             	add    esp,0x10
c0026a62:	85 c0                	test   eax,eax
c0026a64:	0f 85 50 01 00 00    	jne    c0026bba <__divsf3+0x21e>
c0026a6a:	eb c1                	jmp    c0026a2d <__divsf3+0x91>
c0026a6c:	56                   	push   esi
c0026a6d:	56                   	push   esi
c0026a6e:	50                   	push   eax
c0026a6f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026a72:	e8 69 03 00 00       	call   c0026de0 <__nesf2>
c0026a77:	83 c4 10             	add    esp,0x10
c0026a7a:	85 c0                	test   eax,eax
c0026a7c:	0f 84 31 01 00 00    	je     c0026bb3 <__divsf3+0x217>
c0026a82:	eb a9                	jmp    c0026a2d <__divsf3+0x91>
c0026a84:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
c0026a87:	c1 e3 08             	shl    ebx,0x8
c0026a8a:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0026a90:	8d 57 01             	lea    edx,[edi+0x1]
c0026a93:	80 e2 fe             	and    dl,0xfe
c0026a96:	75 71                	jne    c0026b09 <__divsf3+0x16d>
c0026a98:	85 c0                	test   eax,eax
c0026a9a:	ba 00 00 00 00       	mov    edx,0x0
c0026a9f:	74 2f                	je     c0026ad0 <__divsf3+0x134>
c0026aa1:	51                   	push   ecx
c0026aa2:	51                   	push   ecx
c0026aa3:	52                   	push   edx
c0026aa4:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026aa7:	e8 f9 02 00 00       	call   c0026da5 <__eqsf2>
c0026aac:	83 c4 10             	add    esp,0x10
c0026aaf:	85 c0                	test   eax,eax
c0026ab1:	0f 85 03 01 00 00    	jne    c0026bba <__divsf3+0x21e>
c0026ab7:	31 d2                	xor    edx,edx
c0026ab9:	89 d3                	mov    ebx,edx
c0026abb:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0026abe:	31 f8                	xor    eax,edi
c0026ac0:	0f 89 f7 00 00 00    	jns    c0026bbd <__divsf3+0x221>
c0026ac6:	bb 00 00 00 80       	mov    ebx,0x80000000
c0026acb:	e9 ed 00 00 00       	jmp    c0026bbd <__divsf3+0x221>
c0026ad0:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0026ad3:	50                   	push   eax
c0026ad4:	50                   	push   eax
c0026ad5:	52                   	push   edx
c0026ad6:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026ad9:	e8 c7 02 00 00       	call   c0026da5 <__eqsf2>
c0026ade:	83 c4 10             	add    esp,0x10
c0026ae1:	85 c0                	test   eax,eax
c0026ae3:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0026ae6:	75 16                	jne    c0026afe <__divsf3+0x162>
c0026ae8:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0026aeb:	31 fb                	xor    ebx,edi
c0026aed:	81 e3 00 00 00 80    	and    ebx,0x80000000
c0026af3:	81 cb 00 00 80 7f    	or     ebx,0x7f800000
c0026af9:	e9 bf 00 00 00       	jmp    c0026bbd <__divsf3+0x221>
c0026afe:	8d 46 01             	lea    eax,[esi+0x1]
c0026b01:	01 db                	add    ebx,ebx
c0026b03:	78 04                	js     c0026b09 <__divsf3+0x16d>
c0026b05:	89 c6                	mov    esi,eax
c0026b07:	eb f5                	jmp    c0026afe <__divsf3+0x162>
c0026b09:	89 c8                	mov    eax,ecx
c0026b0b:	0d 00 00 00 80       	or     eax,0x80000000
c0026b10:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026b16:	31 d2                	xor    edx,edx
c0026b18:	39 d8                	cmp    eax,ebx
c0026b1a:	72 07                	jb     c0026b23 <__divsf3+0x187>
c0026b1c:	29 d8                	sub    eax,ebx
c0026b1e:	ba 01 00 00 00       	mov    edx,0x1
c0026b23:	c7 45 e0 19 00 00 00 	mov    DWORD PTR [ebp-0x20],0x19
c0026b2a:	01 d2                	add    edx,edx
c0026b2c:	89 c1                	mov    ecx,eax
c0026b2e:	01 c0                	add    eax,eax
c0026b30:	85 c9                	test   ecx,ecx
c0026b32:	78 04                	js     c0026b38 <__divsf3+0x19c>
c0026b34:	39 c3                	cmp    ebx,eax
c0026b36:	77 05                	ja     c0026b3d <__divsf3+0x1a1>
c0026b38:	29 d8                	sub    eax,ebx
c0026b3a:	83 ca 01             	or     edx,0x1
c0026b3d:	ff 4d e0             	dec    DWORD PTR [ebp-0x20]
c0026b40:	75 e8                	jne    c0026b2a <__divsf3+0x18e>
c0026b42:	85 c0                	test   eax,eax
c0026b44:	0f 95 c0             	setne  al
c0026b47:	0f b6 c0             	movzx  eax,al
c0026b4a:	c1 e2 06             	shl    edx,0x6
c0026b4d:	09 c2                	or     edx,eax
c0026b4f:	78 03                	js     c0026b54 <__divsf3+0x1b8>
c0026b51:	01 d2                	add    edx,edx
c0026b53:	4e                   	dec    esi
c0026b54:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0026b5a:	7f 22                	jg     c0026b7e <__divsf3+0x1e2>
c0026b5c:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0026b62:	85 f6                	test   esi,esi
c0026b64:	7f 23                	jg     c0026b89 <__divsf3+0x1ed>
c0026b66:	83 fe e9             	cmp    esi,0xffffffe9
c0026b69:	7c 1a                	jl     c0026b85 <__divsf3+0x1e9>
c0026b6b:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026b71:	b9 01 00 00 00       	mov    ecx,0x1
c0026b76:	29 f1                	sub    ecx,esi
c0026b78:	d3 ea                	shr    edx,cl
c0026b7a:	31 f6                	xor    esi,esi
c0026b7c:	eb 0b                	jmp    c0026b89 <__divsf3+0x1ed>
c0026b7e:	be ff 00 00 00       	mov    esi,0xff
c0026b83:	eb 02                	jmp    c0026b87 <__divsf3+0x1eb>
c0026b85:	31 f6                	xor    esi,esi
c0026b87:	31 d2                	xor    edx,edx
c0026b89:	89 d0                	mov    eax,edx
c0026b8b:	c1 e8 08             	shr    eax,0x8
c0026b8e:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0026b91:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0026b97:	09 fe                	or     esi,edi
c0026b99:	c1 e6 17             	shl    esi,0x17
c0026b9c:	09 c6                	or     esi,eax
c0026b9e:	f6 c2 7f             	test   dl,0x7f
c0026ba1:	0f 95 c1             	setne  cl
c0026ba4:	09 c8                	or     eax,ecx
c0026ba6:	83 e0 01             	and    eax,0x1
c0026ba9:	c1 ea 07             	shr    edx,0x7
c0026bac:	21 c2                	and    edx,eax
c0026bae:	8d 1c 16             	lea    ebx,[esi+edx*1]
c0026bb1:	eb 0a                	jmp    c0026bbd <__divsf3+0x221>
c0026bb3:	bb 00 00 c0 7f       	mov    ebx,0x7fc00000
c0026bb8:	eb 03                	jmp    c0026bbd <__divsf3+0x221>
c0026bba:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0026bbd:	89 d8                	mov    eax,ebx
c0026bbf:	8d 65 f4             	lea    esp,[ebp-0xc]
c0026bc2:	5b                   	pop    ebx
c0026bc3:	5e                   	pop    esi
c0026bc4:	5f                   	pop    edi
c0026bc5:	5d                   	pop    ebp
c0026bc6:	c3                   	ret    

c0026bc7 <__floatsisf>:
c0026bc7:	55                   	push   ebp
c0026bc8:	89 e5                	mov    ebp,esp
c0026bca:	53                   	push   ebx
c0026bcb:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0026bce:	85 d2                	test   edx,edx
c0026bd0:	7e 2b                	jle    c0026bfd <__floatsisf+0x36>
c0026bd2:	0f bd ca             	bsr    ecx,edx
c0026bd5:	83 f1 1f             	xor    ecx,0x1f
c0026bd8:	d3 e2                	shl    edx,cl
c0026bda:	89 d0                	mov    eax,edx
c0026bdc:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026be1:	89 c3                	mov    ebx,eax
c0026be3:	c1 eb 08             	shr    ebx,0x8
c0026be6:	80 e2 7f             	and    dl,0x7f
c0026be9:	0f 95 c2             	setne  dl
c0026bec:	09 da                	or     edx,ebx
c0026bee:	83 e2 01             	and    edx,0x1
c0026bf1:	c1 e8 07             	shr    eax,0x7
c0026bf4:	21 c2                	and    edx,eax
c0026bf6:	b8 9e 00 00 00       	mov    eax,0x9e
c0026bfb:	eb 32                	jmp    c0026c2f <__floatsisf+0x68>
c0026bfd:	b8 00 00 00 00       	mov    eax,0x0
c0026c02:	74 34                	je     c0026c38 <__floatsisf+0x71>
c0026c04:	f7 da                	neg    edx
c0026c06:	0f bd ca             	bsr    ecx,edx
c0026c09:	83 f1 1f             	xor    ecx,0x1f
c0026c0c:	d3 e2                	shl    edx,cl
c0026c0e:	89 d0                	mov    eax,edx
c0026c10:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026c15:	89 c3                	mov    ebx,eax
c0026c17:	c1 eb 08             	shr    ebx,0x8
c0026c1a:	80 e2 7f             	and    dl,0x7f
c0026c1d:	0f 95 c2             	setne  dl
c0026c20:	09 da                	or     edx,ebx
c0026c22:	83 e2 01             	and    edx,0x1
c0026c25:	c1 e8 07             	shr    eax,0x7
c0026c28:	21 c2                	and    edx,eax
c0026c2a:	b8 9e 01 00 00       	mov    eax,0x19e
c0026c2f:	29 c8                	sub    eax,ecx
c0026c31:	c1 e0 17             	shl    eax,0x17
c0026c34:	09 d8                	or     eax,ebx
c0026c36:	01 d0                	add    eax,edx
c0026c38:	5b                   	pop    ebx
c0026c39:	5d                   	pop    ebp
c0026c3a:	c3                   	ret    

c0026c3b <__floatunsisf>:
c0026c3b:	55                   	push   ebp
c0026c3c:	89 e5                	mov    ebp,esp
c0026c3e:	53                   	push   ebx
c0026c3f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0026c42:	31 c0                	xor    eax,eax
c0026c44:	85 d2                	test   edx,edx
c0026c46:	74 32                	je     c0026c7a <__floatunsisf+0x3f>
c0026c48:	0f bd ca             	bsr    ecx,edx
c0026c4b:	83 f1 1f             	xor    ecx,0x1f
c0026c4e:	d3 e2                	shl    edx,cl
c0026c50:	89 d0                	mov    eax,edx
c0026c52:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026c57:	89 c3                	mov    ebx,eax
c0026c59:	c1 eb 08             	shr    ebx,0x8
c0026c5c:	80 e2 7f             	and    dl,0x7f
c0026c5f:	0f 95 c2             	setne  dl
c0026c62:	09 da                	or     edx,ebx
c0026c64:	83 e2 01             	and    edx,0x1
c0026c67:	c1 e8 07             	shr    eax,0x7
c0026c6a:	21 c2                	and    edx,eax
c0026c6c:	b8 9e 00 00 00       	mov    eax,0x9e
c0026c71:	29 c8                	sub    eax,ecx
c0026c73:	c1 e0 17             	shl    eax,0x17
c0026c76:	09 d8                	or     eax,ebx
c0026c78:	01 d0                	add    eax,edx
c0026c7a:	5b                   	pop    ebx
c0026c7b:	5d                   	pop    ebp
c0026c7c:	c3                   	ret    

c0026c7d <__fixsfsi>:
c0026c7d:	55                   	push   ebp
c0026c7e:	89 e5                	mov    ebp,esp
c0026c80:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0026c83:	89 d1                	mov    ecx,edx
c0026c85:	c1 e1 08             	shl    ecx,0x8
c0026c88:	81 e1 00 ff ff 7f    	and    ecx,0x7fffff00
c0026c8e:	c1 fa 17             	sar    edx,0x17
c0026c91:	78 1c                	js     c0026caf <__fixsfsi+0x32>
c0026c93:	83 ea 7f             	sub    edx,0x7f
c0026c96:	31 c0                	xor    eax,eax
c0026c98:	83 fa 1e             	cmp    edx,0x1e
c0026c9b:	77 40                	ja     c0026cdd <__fixsfsi+0x60>
c0026c9d:	89 c8                	mov    eax,ecx
c0026c9f:	0d 00 00 00 80       	or     eax,0x80000000
c0026ca4:	b9 1f 00 00 00       	mov    ecx,0x1f
c0026ca9:	29 d1                	sub    ecx,edx
c0026cab:	d3 e8                	shr    eax,cl
c0026cad:	eb 2e                	jmp    c0026cdd <__fixsfsi+0x60>
c0026caf:	31 c0                	xor    eax,eax
c0026cb1:	81 c2 81 00 00 00    	add    edx,0x81
c0026cb7:	78 24                	js     c0026cdd <__fixsfsi+0x60>
c0026cb9:	83 fa 1e             	cmp    edx,0x1e
c0026cbc:	7e 09                	jle    c0026cc7 <__fixsfsi+0x4a>
c0026cbe:	83 fa 1f             	cmp    edx,0x1f
c0026cc1:	75 18                	jne    c0026cdb <__fixsfsi+0x5e>
c0026cc3:	85 c9                	test   ecx,ecx
c0026cc5:	75 14                	jne    c0026cdb <__fixsfsi+0x5e>
c0026cc7:	89 c8                	mov    eax,ecx
c0026cc9:	0d 00 00 00 80       	or     eax,0x80000000
c0026cce:	b9 1f 00 00 00       	mov    ecx,0x1f
c0026cd3:	29 d1                	sub    ecx,edx
c0026cd5:	d3 e8                	shr    eax,cl
c0026cd7:	f7 d8                	neg    eax
c0026cd9:	eb 02                	jmp    c0026cdd <__fixsfsi+0x60>
c0026cdb:	31 c0                	xor    eax,eax
c0026cdd:	5d                   	pop    ebp
c0026cde:	c3                   	ret    

c0026cdf <__fixunssfsi>:
c0026cdf:	55                   	push   ebp
c0026ce0:	89 e5                	mov    ebp,esp
c0026ce2:	53                   	push   ebx
c0026ce3:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0026ce6:	89 d3                	mov    ebx,edx
c0026ce8:	c1 fb 17             	sar    ebx,0x17
c0026ceb:	83 eb 7f             	sub    ebx,0x7f
c0026cee:	31 c0                	xor    eax,eax
c0026cf0:	83 fb 1f             	cmp    ebx,0x1f
c0026cf3:	77 18                	ja     c0026d0d <__fixunssfsi+0x2e>
c0026cf5:	89 d0                	mov    eax,edx
c0026cf7:	c1 e0 08             	shl    eax,0x8
c0026cfa:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0026cff:	0d 00 00 00 80       	or     eax,0x80000000
c0026d04:	b9 1f 00 00 00       	mov    ecx,0x1f
c0026d09:	29 d9                	sub    ecx,ebx
c0026d0b:	d3 e8                	shr    eax,cl
c0026d0d:	5b                   	pop    ebx
c0026d0e:	5d                   	pop    ebp
c0026d0f:	c3                   	ret    

c0026d10 <__cmpsf2>:
c0026d10:	55                   	push   ebp
c0026d11:	89 e5                	mov    ebp,esp
c0026d13:	57                   	push   edi
c0026d14:	56                   	push   esi
c0026d15:	53                   	push   ebx
c0026d16:	83 ec 24             	sub    esp,0x24
c0026d19:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026d1c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026d1f:	e8 4f 10 00 00       	call   c0027d73 <__truncdfsf2>
c0026d24:	5a                   	pop    edx
c0026d25:	59                   	pop    ecx
c0026d26:	89 c3                	mov    ebx,eax
c0026d28:	c1 e8 17             	shr    eax,0x17
c0026d2b:	0f b6 f0             	movzx  esi,al
c0026d2e:	89 d8                	mov    eax,ebx
c0026d30:	c1 e8 1f             	shr    eax,0x1f
c0026d33:	31 c6                	xor    esi,eax
c0026d35:	c1 e3 08             	shl    ebx,0x8
c0026d38:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0026d3b:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0026d3e:	e8 30 10 00 00       	call   c0027d73 <__truncdfsf2>
c0026d43:	83 c4 10             	add    esp,0x10
c0026d46:	89 c1                	mov    ecx,eax
c0026d48:	c1 e9 17             	shr    ecx,0x17
c0026d4b:	0f b6 c9             	movzx  ecx,cl
c0026d4e:	89 c7                	mov    edi,eax
c0026d50:	c1 ef 1f             	shr    edi,0x1f
c0026d53:	89 ca                	mov    edx,ecx
c0026d55:	31 fa                	xor    edx,edi
c0026d57:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0026d5a:	c1 e0 08             	shl    eax,0x8
c0026d5d:	89 c2                	mov    edx,eax
c0026d5f:	89 d8                	mov    eax,ebx
c0026d61:	09 d0                	or     eax,edx
c0026d63:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0026d68:	09 f0                	or     eax,esi
c0026d6a:	75 08                	jne    c0026d74 <__cmpsf2+0x64>
c0026d6c:	31 c0                	xor    eax,eax
c0026d6e:	39 f9                	cmp    ecx,edi
c0026d70:	75 0c                	jne    c0026d7e <__cmpsf2+0x6e>
c0026d72:	eb 29                	jmp    c0026d9d <__cmpsf2+0x8d>
c0026d74:	b8 01 00 00 00       	mov    eax,0x1
c0026d79:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0026d7c:	7f 1f                	jg     c0026d9d <__cmpsf2+0x8d>
c0026d7e:	83 c8 ff             	or     eax,0xffffffff
c0026d81:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0026d84:	7c 17                	jl     c0026d9d <__cmpsf2+0x8d>
c0026d86:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0026d8c:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0026d92:	b8 01 00 00 00       	mov    eax,0x1
c0026d97:	39 d3                	cmp    ebx,edx
c0026d99:	77 02                	ja     c0026d9d <__cmpsf2+0x8d>
c0026d9b:	19 c0                	sbb    eax,eax
c0026d9d:	8d 65 f4             	lea    esp,[ebp-0xc]
c0026da0:	5b                   	pop    ebx
c0026da1:	5e                   	pop    esi
c0026da2:	5f                   	pop    edi
c0026da3:	5d                   	pop    ebp
c0026da4:	c3                   	ret    

c0026da5 <__eqsf2>:
c0026da5:	55                   	push   ebp
c0026da6:	89 e5                	mov    ebp,esp
c0026da8:	83 ec 24             	sub    esp,0x24
c0026dab:	6a 01                	push   0x1
c0026dad:	83 ec 0c             	sub    esp,0xc
c0026db0:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026db3:	e8 df 10 00 00       	call   c0027e97 <__extendsfdf2>
c0026db8:	83 c4 10             	add    esp,0x10
c0026dbb:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0026dbe:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0026dc1:	52                   	push   edx
c0026dc2:	50                   	push   eax
c0026dc3:	50                   	push   eax
c0026dc4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026dc7:	e8 cb 10 00 00       	call   c0027e97 <__extendsfdf2>
c0026dcc:	59                   	pop    ecx
c0026dcd:	59                   	pop    ecx
c0026dce:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0026dd1:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0026dd4:	52                   	push   edx
c0026dd5:	50                   	push   eax
c0026dd6:	e8 35 ff ff ff       	call   c0026d10 <__cmpsf2>
c0026ddb:	83 c4 20             	add    esp,0x20
c0026dde:	c9                   	leave  
c0026ddf:	c3                   	ret    

c0026de0 <__nesf2>:
c0026de0:	eb c3                	jmp    c0026da5 <__eqsf2>

c0026de2 <__gtsf2>:
c0026de2:	55                   	push   ebp
c0026de3:	89 e5                	mov    ebp,esp
c0026de5:	83 ec 24             	sub    esp,0x24
c0026de8:	6a ff                	push   0xffffffff
c0026dea:	83 ec 0c             	sub    esp,0xc
c0026ded:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026df0:	e8 a2 10 00 00       	call   c0027e97 <__extendsfdf2>
c0026df5:	83 c4 10             	add    esp,0x10
c0026df8:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0026dfb:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0026dfe:	52                   	push   edx
c0026dff:	50                   	push   eax
c0026e00:	50                   	push   eax
c0026e01:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026e04:	e8 8e 10 00 00       	call   c0027e97 <__extendsfdf2>
c0026e09:	59                   	pop    ecx
c0026e0a:	59                   	pop    ecx
c0026e0b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0026e0e:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0026e11:	52                   	push   edx
c0026e12:	50                   	push   eax
c0026e13:	e8 f8 fe ff ff       	call   c0026d10 <__cmpsf2>
c0026e18:	83 c4 20             	add    esp,0x20
c0026e1b:	c9                   	leave  
c0026e1c:	c3                   	ret    

c0026e1d <__gesf2>:
c0026e1d:	eb c3                	jmp    c0026de2 <__gtsf2>

c0026e1f <__ltsf2>:
c0026e1f:	eb 84                	jmp    c0026da5 <__eqsf2>

c0026e21 <__lesf2>:
c0026e21:	eb 82                	jmp    c0026da5 <__eqsf2>

c0026e23 <__adddf3>:
c0026e23:	55                   	push   ebp
c0026e24:	89 e5                	mov    ebp,esp
c0026e26:	57                   	push   edi
c0026e27:	56                   	push   esi
c0026e28:	53                   	push   ebx
c0026e29:	83 ec 24             	sub    esp,0x24
c0026e2c:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0026e2f:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0026e32:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0026e35:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0026e38:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0026e3b:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0026e3e:	89 c8                	mov    eax,ecx
c0026e40:	89 ce                	mov    esi,ecx
c0026e42:	c1 fe 14             	sar    esi,0x14
c0026e45:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
c0026e48:	89 fb                	mov    ebx,edi
c0026e4a:	89 fa                	mov    edx,edi
c0026e4c:	c1 e2 0b             	shl    edx,0xb
c0026e4f:	c1 e0 0b             	shl    eax,0xb
c0026e52:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0026e57:	c1 eb 15             	shr    ebx,0x15
c0026e5a:	09 d8                	or     eax,ebx
c0026e5c:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0026e5f:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0026e62:	c1 fe 14             	sar    esi,0x14
c0026e65:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c0026e68:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0026e6b:	89 f3                	mov    ebx,esi
c0026e6d:	c1 e3 0b             	shl    ebx,0xb
c0026e70:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0026e73:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0026e76:	c1 e3 0b             	shl    ebx,0xb
c0026e79:	81 e3 00 f8 ff 7f    	and    ebx,0x7ffff800
c0026e7f:	c1 ee 15             	shr    esi,0x15
c0026e82:	09 f3                	or     ebx,esi
c0026e84:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
c0026e87:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0026e8a:	33 75 ec             	xor    esi,DWORD PTR [ebp-0x14]
c0026e8d:	0f 88 5f 02 00 00    	js     c00270f2 <__adddf3+0x2cf>
c0026e93:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0026e96:	2b 5d ec             	sub    ebx,DWORD PTR [ebp-0x14]
c0026e99:	85 db                	test   ebx,ebx
c0026e9b:	0f 8e c7 00 00 00    	jle    c0026f68 <__adddf3+0x145>
c0026ea1:	f7 45 ec ff 07 00 00 	test   DWORD PTR [ebp-0x14],0x7ff
c0026ea8:	75 1a                	jne    c0026ec4 <__adddf3+0xa1>
c0026eaa:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0026ead:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0026eb0:	0f 84 b2 05 00 00    	je     c0027468 <__adddf3+0x645>
c0026eb6:	4b                   	dec    ebx
c0026eb7:	75 23                	jne    c0026edc <__adddf3+0xb9>
c0026eb9:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0026ebc:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0026ebf:	e9 99 00 00 00       	jmp    c0026f5d <__adddf3+0x13a>
c0026ec4:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0026ec7:	f7 d6                	not    esi
c0026ec9:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0026ecf:	0f 84 93 05 00 00    	je     c0027468 <__adddf3+0x645>
c0026ed5:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c0026edc:	83 fb 1f             	cmp    ebx,0x1f
c0026edf:	7e 42                	jle    c0026f23 <__adddf3+0x100>
c0026ee1:	83 fb 3f             	cmp    ebx,0x3f
c0026ee4:	0f 8f 7e 05 00 00    	jg     c0027468 <__adddf3+0x645>
c0026eea:	83 e3 1f             	and    ebx,0x1f
c0026eed:	89 d9                	mov    ecx,ebx
c0026eef:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0026ef2:	d3 ef                	shr    edi,cl
c0026ef4:	31 db                	xor    ebx,ebx
c0026ef6:	85 c9                	test   ecx,ecx
c0026ef8:	74 15                	je     c0026f0f <__adddf3+0xec>
c0026efa:	be 20 00 00 00       	mov    esi,0x20
c0026eff:	29 ce                	sub    esi,ecx
c0026f01:	89 f1                	mov    ecx,esi
c0026f03:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0026f06:	d3 e6                	shl    esi,cl
c0026f08:	31 db                	xor    ebx,ebx
c0026f0a:	85 f6                	test   esi,esi
c0026f0c:	0f 95 c3             	setne  bl
c0026f0f:	31 c9                	xor    ecx,ecx
c0026f11:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0026f15:	0f 95 c1             	setne  cl
c0026f18:	09 cf                	or     edi,ecx
c0026f1a:	09 fb                	or     ebx,edi
c0026f1c:	01 da                	add    edx,ebx
c0026f1e:	83 d0 00             	adc    eax,0x0
c0026f21:	eb 3a                	jmp    c0026f5d <__adddf3+0x13a>
c0026f23:	bf 20 00 00 00       	mov    edi,0x20
c0026f28:	29 df                	sub    edi,ebx
c0026f2a:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0026f2d:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0026f30:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0026f33:	d3 e6                	shl    esi,cl
c0026f35:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0026f38:	88 d9                	mov    cl,bl
c0026f3a:	d3 ef                	shr    edi,cl
c0026f3c:	09 fe                	or     esi,edi
c0026f3e:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0026f41:	88 d9                	mov    cl,bl
c0026f43:	d3 ef                	shr    edi,cl
c0026f45:	89 fb                	mov    ebx,edi
c0026f47:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0026f4a:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0026f4d:	d3 e7                	shl    edi,cl
c0026f4f:	85 ff                	test   edi,edi
c0026f51:	0f 95 c1             	setne  cl
c0026f54:	0f b6 c9             	movzx  ecx,cl
c0026f57:	09 ce                	or     esi,ecx
c0026f59:	01 f2                	add    edx,esi
c0026f5b:	11 d8                	adc    eax,ebx
c0026f5d:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0026f60:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0026f63:	e9 52 01 00 00       	jmp    c00270ba <__adddf3+0x297>
c0026f68:	0f 84 d5 00 00 00    	je     c0027043 <__adddf3+0x220>
c0026f6e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0026f71:	2b 5d e4             	sub    ebx,DWORD PTR [ebp-0x1c]
c0026f74:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0026f77:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0026f7a:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c0026f81:	75 20                	jne    c0026fa3 <__adddf3+0x180>
c0026f83:	89 d6                	mov    esi,edx
c0026f85:	09 c6                	or     esi,eax
c0026f87:	0f 84 db 04 00 00    	je     c0027468 <__adddf3+0x645>
c0026f8d:	4b                   	dec    ebx
c0026f8e:	75 29                	jne    c0026fb9 <__adddf3+0x196>
c0026f90:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0026f93:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0026f96:	01 d1                	add    ecx,edx
c0026f98:	11 c6                	adc    esi,eax
c0026f9a:	89 f0                	mov    eax,esi
c0026f9c:	89 ca                	mov    edx,ecx
c0026f9e:	e9 17 01 00 00       	jmp    c00270ba <__adddf3+0x297>
c0026fa3:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0026fa6:	f7 d6                	not    esi
c0026fa8:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0026fae:	0f 84 b4 04 00 00    	je     c0027468 <__adddf3+0x645>
c0026fb4:	0d 00 00 00 80       	or     eax,0x80000000
c0026fb9:	83 fb 1f             	cmp    ebx,0x1f
c0026fbc:	7e 48                	jle    c0027006 <__adddf3+0x1e3>
c0026fbe:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0026fc1:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0026fc4:	83 fb 3f             	cmp    ebx,0x3f
c0026fc7:	0f 8f 9b 04 00 00    	jg     c0027468 <__adddf3+0x645>
c0026fcd:	83 e3 1f             	and    ebx,0x1f
c0026fd0:	89 d9                	mov    ecx,ebx
c0026fd2:	89 c7                	mov    edi,eax
c0026fd4:	d3 ef                	shr    edi,cl
c0026fd6:	31 db                	xor    ebx,ebx
c0026fd8:	85 c9                	test   ecx,ecx
c0026fda:	74 12                	je     c0026fee <__adddf3+0x1cb>
c0026fdc:	be 20 00 00 00       	mov    esi,0x20
c0026fe1:	29 ce                	sub    esi,ecx
c0026fe3:	89 f1                	mov    ecx,esi
c0026fe5:	d3 e0                	shl    eax,cl
c0026fe7:	31 db                	xor    ebx,ebx
c0026fe9:	85 c0                	test   eax,eax
c0026feb:	0f 95 c3             	setne  bl
c0026fee:	31 c0                	xor    eax,eax
c0026ff0:	85 d2                	test   edx,edx
c0026ff2:	0f 95 c0             	setne  al
c0026ff5:	09 c7                	or     edi,eax
c0026ff7:	09 fb                	or     ebx,edi
c0026ff9:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0026ffc:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0026fff:	01 da                	add    edx,ebx
c0027001:	83 d6 00             	adc    esi,0x0
c0027004:	eb 39                	jmp    c002703f <__adddf3+0x21c>
c0027006:	be 20 00 00 00       	mov    esi,0x20
c002700b:	29 de                	sub    esi,ebx
c002700d:	89 c7                	mov    edi,eax
c002700f:	89 f1                	mov    ecx,esi
c0027011:	d3 e7                	shl    edi,cl
c0027013:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0027016:	89 d7                	mov    edi,edx
c0027018:	88 d9                	mov    cl,bl
c002701a:	d3 ef                	shr    edi,cl
c002701c:	89 f9                	mov    ecx,edi
c002701e:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027021:	09 cf                	or     edi,ecx
c0027023:	88 d9                	mov    cl,bl
c0027025:	d3 e8                	shr    eax,cl
c0027027:	89 f1                	mov    ecx,esi
c0027029:	d3 e2                	shl    edx,cl
c002702b:	85 d2                	test   edx,edx
c002702d:	0f 95 c2             	setne  dl
c0027030:	0f b6 d2             	movzx  edx,dl
c0027033:	09 d7                	or     edi,edx
c0027035:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027038:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002703b:	01 fa                	add    edx,edi
c002703d:	11 c6                	adc    esi,eax
c002703f:	89 f0                	mov    eax,esi
c0027041:	eb 77                	jmp    c00270ba <__adddf3+0x297>
c0027043:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027046:	46                   	inc    esi
c0027047:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c002704a:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0027050:	75 41                	jne    c0027093 <__adddf3+0x270>
c0027052:	89 d3                	mov    ebx,edx
c0027054:	09 c3                	or     ebx,eax
c0027056:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c002705d:	75 27                	jne    c0027086 <__adddf3+0x263>
c002705f:	85 db                	test   ebx,ebx
c0027061:	0f 84 fb 03 00 00    	je     c0027462 <__adddf3+0x63f>
c0027067:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c002706a:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c002706d:	0f 84 f5 03 00 00    	je     c0027468 <__adddf3+0x645>
c0027073:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0027076:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027079:	85 c0                	test   eax,eax
c002707b:	0f 89 91 03 00 00    	jns    c0027412 <__adddf3+0x5ef>
c0027081:	e9 85 03 00 00       	jmp    c002740b <__adddf3+0x5e8>
c0027086:	85 db                	test   ebx,ebx
c0027088:	0f 85 da 03 00 00    	jne    c0027468 <__adddf3+0x645>
c002708e:	e9 cf 03 00 00       	jmp    c0027462 <__adddf3+0x63f>
c0027093:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0027096:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027099:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002709c:	f7 d1                	not    ecx
c002709e:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00270a4:	0f 84 70 03 00 00    	je     c002741a <__adddf3+0x5f7>
c00270aa:	d1 ea                	shr    edx,1
c00270ac:	89 c1                	mov    ecx,eax
c00270ae:	c1 e1 1f             	shl    ecx,0x1f
c00270b1:	09 ca                	or     edx,ecx
c00270b3:	d1 e8                	shr    eax,1
c00270b5:	e9 6f 03 00 00       	jmp    c0027429 <__adddf3+0x606>
c00270ba:	85 c0                	test   eax,eax
c00270bc:	0f 89 67 03 00 00    	jns    c0027429 <__adddf3+0x606>
c00270c2:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c00270c5:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00270c8:	f7 d1                	not    ecx
c00270ca:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00270d0:	0f 84 44 03 00 00    	je     c002741a <__adddf3+0x5f7>
c00270d6:	89 d1                	mov    ecx,edx
c00270d8:	d1 e9                	shr    ecx,1
c00270da:	83 e2 01             	and    edx,0x1
c00270dd:	09 ca                	or     edx,ecx
c00270df:	89 c1                	mov    ecx,eax
c00270e1:	c1 e1 1f             	shl    ecx,0x1f
c00270e4:	09 ca                	or     edx,ecx
c00270e6:	d1 e8                	shr    eax,1
c00270e8:	25 ff ff ff 3f       	and    eax,0x3fffffff
c00270ed:	e9 37 03 00 00       	jmp    c0027429 <__adddf3+0x606>
c00270f2:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00270f5:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00270fb:	89 75 d4             	mov    DWORD PTR [ebp-0x2c],esi
c00270fe:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027101:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027107:	29 de                	sub    esi,ebx
c0027109:	85 f6                	test   esi,esi
c002710b:	0f 8e bd 00 00 00    	jle    c00271ce <__adddf3+0x3ab>
c0027111:	85 db                	test   ebx,ebx
c0027113:	75 17                	jne    c002712c <__adddf3+0x309>
c0027115:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0027118:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c002711b:	0f 84 47 03 00 00    	je     c0027468 <__adddf3+0x645>
c0027121:	4e                   	dec    esi
c0027122:	75 20                	jne    c0027144 <__adddf3+0x321>
c0027124:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c0027127:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c002712a:	eb 5b                	jmp    c0027187 <__adddf3+0x364>
c002712c:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c002712f:	f7 d3                	not    ebx
c0027131:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027137:	0f 84 2b 03 00 00    	je     c0027468 <__adddf3+0x645>
c002713d:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c0027144:	83 fe 1f             	cmp    esi,0x1f
c0027147:	7e 49                	jle    c0027192 <__adddf3+0x36f>
c0027149:	83 fe 3f             	cmp    esi,0x3f
c002714c:	0f 8f 16 03 00 00    	jg     c0027468 <__adddf3+0x645>
c0027152:	83 e6 1f             	and    esi,0x1f
c0027155:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027158:	89 f1                	mov    ecx,esi
c002715a:	d3 ef                	shr    edi,cl
c002715c:	31 db                	xor    ebx,ebx
c002715e:	85 f6                	test   esi,esi
c0027160:	74 13                	je     c0027175 <__adddf3+0x352>
c0027162:	b9 20 00 00 00       	mov    ecx,0x20
c0027167:	29 f1                	sub    ecx,esi
c0027169:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002716c:	d3 e6                	shl    esi,cl
c002716e:	31 db                	xor    ebx,ebx
c0027170:	85 f6                	test   esi,esi
c0027172:	0f 95 c3             	setne  bl
c0027175:	31 c9                	xor    ecx,ecx
c0027177:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c002717b:	0f 95 c1             	setne  cl
c002717e:	09 cf                	or     edi,ecx
c0027180:	09 fb                	or     ebx,edi
c0027182:	29 da                	sub    edx,ebx
c0027184:	83 d8 00             	sbb    eax,0x0
c0027187:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002718a:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002718d:	e9 aa 01 00 00       	jmp    c002733c <__adddf3+0x519>
c0027192:	bf 20 00 00 00       	mov    edi,0x20
c0027197:	29 f7                	sub    edi,esi
c0027199:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002719c:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c002719f:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00271a2:	d3 e3                	shl    ebx,cl
c00271a4:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00271a7:	89 f1                	mov    ecx,esi
c00271a9:	d3 ef                	shr    edi,cl
c00271ab:	09 fb                	or     ebx,edi
c00271ad:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00271b0:	89 f1                	mov    ecx,esi
c00271b2:	d3 ef                	shr    edi,cl
c00271b4:	89 fe                	mov    esi,edi
c00271b6:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00271b9:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00271bc:	d3 e7                	shl    edi,cl
c00271be:	85 ff                	test   edi,edi
c00271c0:	0f 95 c1             	setne  cl
c00271c3:	0f b6 c9             	movzx  ecx,cl
c00271c6:	09 cb                	or     ebx,ecx
c00271c8:	29 da                	sub    edx,ebx
c00271ca:	19 f0                	sbb    eax,esi
c00271cc:	eb b9                	jmp    c0027187 <__adddf3+0x364>
c00271ce:	0f 84 cd 00 00 00    	je     c00272a1 <__adddf3+0x47e>
c00271d4:	2b 5d d4             	sub    ebx,DWORD PTR [ebp-0x2c]
c00271d7:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00271da:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00271dd:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00271e1:	75 1b                	jne    c00271fe <__adddf3+0x3db>
c00271e3:	89 d6                	mov    esi,edx
c00271e5:	09 c6                	or     esi,eax
c00271e7:	0f 84 7b 02 00 00    	je     c0027468 <__adddf3+0x645>
c00271ed:	4b                   	dec    ebx
c00271ee:	75 24                	jne    c0027214 <__adddf3+0x3f1>
c00271f0:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00271f3:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00271f6:	29 d1                	sub    ecx,edx
c00271f8:	19 c6                	sbb    esi,eax
c00271fa:	89 ca                	mov    edx,ecx
c00271fc:	eb 61                	jmp    c002725f <__adddf3+0x43c>
c00271fe:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027201:	f7 d6                	not    esi
c0027203:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027209:	0f 84 59 02 00 00    	je     c0027468 <__adddf3+0x645>
c002720f:	0d 00 00 00 80       	or     eax,0x80000000
c0027214:	83 fb 1f             	cmp    ebx,0x1f
c0027217:	7e 4d                	jle    c0027266 <__adddf3+0x443>
c0027219:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002721c:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002721f:	83 fb 3f             	cmp    ebx,0x3f
c0027222:	0f 8f 40 02 00 00    	jg     c0027468 <__adddf3+0x645>
c0027228:	83 e3 1f             	and    ebx,0x1f
c002722b:	89 d9                	mov    ecx,ebx
c002722d:	89 c7                	mov    edi,eax
c002722f:	d3 ef                	shr    edi,cl
c0027231:	31 db                	xor    ebx,ebx
c0027233:	85 c9                	test   ecx,ecx
c0027235:	74 12                	je     c0027249 <__adddf3+0x426>
c0027237:	be 20 00 00 00       	mov    esi,0x20
c002723c:	29 ce                	sub    esi,ecx
c002723e:	89 f1                	mov    ecx,esi
c0027240:	d3 e0                	shl    eax,cl
c0027242:	31 db                	xor    ebx,ebx
c0027244:	85 c0                	test   eax,eax
c0027246:	0f 95 c3             	setne  bl
c0027249:	31 c0                	xor    eax,eax
c002724b:	85 d2                	test   edx,edx
c002724d:	0f 95 c0             	setne  al
c0027250:	09 c7                	or     edi,eax
c0027252:	09 fb                	or     ebx,edi
c0027254:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027257:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002725a:	29 da                	sub    edx,ebx
c002725c:	83 de 00             	sbb    esi,0x0
c002725f:	89 f0                	mov    eax,esi
c0027261:	e9 d6 00 00 00       	jmp    c002733c <__adddf3+0x519>
c0027266:	be 20 00 00 00       	mov    esi,0x20
c002726b:	29 de                	sub    esi,ebx
c002726d:	89 c7                	mov    edi,eax
c002726f:	89 f1                	mov    ecx,esi
c0027271:	d3 e7                	shl    edi,cl
c0027273:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0027276:	89 d7                	mov    edi,edx
c0027278:	88 d9                	mov    cl,bl
c002727a:	d3 ef                	shr    edi,cl
c002727c:	89 f9                	mov    ecx,edi
c002727e:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027281:	09 cf                	or     edi,ecx
c0027283:	88 d9                	mov    cl,bl
c0027285:	d3 e8                	shr    eax,cl
c0027287:	89 f1                	mov    ecx,esi
c0027289:	d3 e2                	shl    edx,cl
c002728b:	85 d2                	test   edx,edx
c002728d:	0f 95 c2             	setne  dl
c0027290:	0f b6 d2             	movzx  edx,dl
c0027293:	09 d7                	or     edi,edx
c0027295:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027298:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002729b:	29 fa                	sub    edx,edi
c002729d:	19 c6                	sbb    esi,eax
c002729f:	eb be                	jmp    c002725f <__adddf3+0x43c>
c00272a1:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00272a4:	8d 5e 01             	lea    ebx,[esi+0x1]
c00272a7:	81 e3 fe 07 00 00    	and    ebx,0x7fe
c00272ad:	75 6a                	jne    c0027319 <__adddf3+0x4f6>
c00272af:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00272b3:	75 58                	jne    c002730d <__adddf3+0x4ea>
c00272b5:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c00272b8:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c00272bb:	89 d6                	mov    esi,edx
c00272bd:	09 c6                	or     esi,eax
c00272bf:	75 17                	jne    c00272d8 <__adddf3+0x4b5>
c00272c1:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00272c4:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00272c7:	85 db                	test   ebx,ebx
c00272c9:	0f 85 99 01 00 00    	jne    c0027468 <__adddf3+0x645>
c00272cf:	31 ff                	xor    edi,edi
c00272d1:	31 c9                	xor    ecx,ecx
c00272d3:	e9 90 01 00 00       	jmp    c0027468 <__adddf3+0x645>
c00272d8:	85 db                	test   ebx,ebx
c00272da:	0f 84 88 01 00 00    	je     c0027468 <__adddf3+0x645>
c00272e0:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c00272e3:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c00272e6:	85 c0                	test   eax,eax
c00272e8:	79 10                	jns    c00272fa <__adddf3+0x4d7>
c00272ea:	31 c9                	xor    ecx,ecx
c00272ec:	f7 da                	neg    edx
c00272ee:	0f 95 c1             	setne  cl
c00272f1:	01 c8                	add    eax,ecx
c00272f3:	f7 d8                	neg    eax
c00272f5:	e9 2f 01 00 00       	jmp    c0027429 <__adddf3+0x606>
c00272fa:	31 ff                	xor    edi,edi
c00272fc:	31 c9                	xor    ecx,ecx
c00272fe:	89 c3                	mov    ebx,eax
c0027300:	09 d3                	or     ebx,edx
c0027302:	0f 84 60 01 00 00    	je     c0027468 <__adddf3+0x645>
c0027308:	e9 05 01 00 00       	jmp    c0027412 <__adddf3+0x5ef>
c002730d:	31 ff                	xor    edi,edi
c002730f:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0027314:	e9 4f 01 00 00       	jmp    c0027468 <__adddf3+0x645>
c0027319:	89 c1                	mov    ecx,eax
c002731b:	89 d0                	mov    eax,edx
c002731d:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
c0027320:	1b 4d e8             	sbb    ecx,DWORD PTR [ebp-0x18]
c0027323:	89 ca                	mov    edx,ecx
c0027325:	85 c9                	test   ecx,ecx
c0027327:	79 2c                	jns    c0027355 <__adddf3+0x532>
c0027329:	31 c9                	xor    ecx,ecx
c002732b:	f7 d8                	neg    eax
c002732d:	0f 95 c1             	setne  cl
c0027330:	01 ca                	add    edx,ecx
c0027332:	f7 da                	neg    edx
c0027334:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0027337:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c002733a:	eb 19                	jmp    c0027355 <__adddf3+0x532>
c002733c:	85 c0                	test   eax,eax
c002733e:	0f 89 e5 00 00 00    	jns    c0027429 <__adddf3+0x606>
c0027344:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027349:	89 c1                	mov    ecx,eax
c002734b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002734e:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0027351:	89 d0                	mov    eax,edx
c0027353:	89 ca                	mov    edx,ecx
c0027355:	85 d2                	test   edx,edx
c0027357:	74 59                	je     c00273b2 <__adddf3+0x58f>
c0027359:	0f bd da             	bsr    ebx,edx
c002735c:	83 f3 1f             	xor    ebx,0x1f
c002735f:	88 d9                	mov    cl,bl
c0027361:	d3 e2                	shl    edx,cl
c0027363:	bf 20 00 00 00       	mov    edi,0x20
c0027368:	89 f9                	mov    ecx,edi
c002736a:	29 d9                	sub    ecx,ebx
c002736c:	89 c6                	mov    esi,eax
c002736e:	d3 ee                	shr    esi,cl
c0027370:	09 d6                	or     esi,edx
c0027372:	88 d9                	mov    cl,bl
c0027374:	d3 e0                	shl    eax,cl
c0027376:	89 c2                	mov    edx,eax
c0027378:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002737b:	25 ff 07 00 00       	and    eax,0x7ff
c0027380:	39 d8                	cmp    eax,ebx
c0027382:	7f 22                	jg     c00273a6 <__adddf3+0x583>
c0027384:	29 c3                	sub    ebx,eax
c0027386:	43                   	inc    ebx
c0027387:	88 d9                	mov    cl,bl
c0027389:	d3 ea                	shr    edx,cl
c002738b:	29 df                	sub    edi,ebx
c002738d:	89 f9                	mov    ecx,edi
c002738f:	89 f0                	mov    eax,esi
c0027391:	d3 e0                	shl    eax,cl
c0027393:	09 c2                	or     edx,eax
c0027395:	89 f0                	mov    eax,esi
c0027397:	88 d9                	mov    cl,bl
c0027399:	d3 e8                	shr    eax,cl
c002739b:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002739e:	81 e7 00 f8 ff ff    	and    edi,0xfffff800
c00273a4:	eb 6f                	jmp    c0027415 <__adddf3+0x5f2>
c00273a6:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00273a9:	29 d8                	sub    eax,ebx
c00273ab:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00273ae:	89 f0                	mov    eax,esi
c00273b0:	eb 59                	jmp    c002740b <__adddf3+0x5e8>
c00273b2:	85 c0                	test   eax,eax
c00273b4:	74 6a                	je     c0027420 <__adddf3+0x5fd>
c00273b6:	0f bd c8             	bsr    ecx,eax
c00273b9:	83 f1 1f             	xor    ecx,0x1f
c00273bc:	d3 e0                	shl    eax,cl
c00273be:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00273c1:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00273c7:	83 c1 20             	add    ecx,0x20
c00273ca:	39 cb                	cmp    ebx,ecx
c00273cc:	7f 35                	jg     c0027403 <__adddf3+0x5e0>
c00273ce:	29 d9                	sub    ecx,ebx
c00273d0:	8d 71 01             	lea    esi,[ecx+0x1]
c00273d3:	83 fe 1f             	cmp    esi,0x1f
c00273d6:	7e 09                	jle    c00273e1 <__adddf3+0x5be>
c00273d8:	83 e9 1f             	sub    ecx,0x1f
c00273db:	d3 e8                	shr    eax,cl
c00273dd:	89 c3                	mov    ebx,eax
c00273df:	eb 11                	jmp    c00273f2 <__adddf3+0x5cf>
c00273e1:	b9 20 00 00 00       	mov    ecx,0x20
c00273e6:	29 f1                	sub    ecx,esi
c00273e8:	89 c3                	mov    ebx,eax
c00273ea:	d3 e3                	shl    ebx,cl
c00273ec:	89 f1                	mov    ecx,esi
c00273ee:	d3 e8                	shr    eax,cl
c00273f0:	89 c2                	mov    edx,eax
c00273f2:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00273f5:	25 00 f8 ff ff       	and    eax,0xfffff800
c00273fa:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00273fd:	89 d0                	mov    eax,edx
c00273ff:	89 da                	mov    edx,ebx
c0027401:	eb 26                	jmp    c0027429 <__adddf3+0x606>
c0027403:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027406:	29 cf                	sub    edi,ecx
c0027408:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002740b:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027410:	eb 17                	jmp    c0027429 <__adddf3+0x606>
c0027412:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027415:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027418:	eb 0f                	jmp    c0027429 <__adddf3+0x606>
c002741a:	31 d2                	xor    edx,edx
c002741c:	31 c0                	xor    eax,eax
c002741e:	eb 09                	jmp    c0027429 <__adddf3+0x606>
c0027420:	89 c2                	mov    edx,eax
c0027422:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0027429:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002742c:	c1 e1 14             	shl    ecx,0x14
c002742f:	89 c3                	mov    ebx,eax
c0027431:	c1 eb 0b             	shr    ebx,0xb
c0027434:	09 d9                	or     ecx,ebx
c0027436:	89 d3                	mov    ebx,edx
c0027438:	c1 eb 0b             	shr    ebx,0xb
c002743b:	c1 e0 15             	shl    eax,0x15
c002743e:	09 d8                	or     eax,ebx
c0027440:	89 c7                	mov    edi,eax
c0027442:	f7 c2 ff 03 00 00    	test   edx,0x3ff
c0027448:	0f 95 c0             	setne  al
c002744b:	89 c6                	mov    esi,eax
c002744d:	09 f3                	or     ebx,esi
c002744f:	83 e3 01             	and    ebx,0x1
c0027452:	c1 ea 0a             	shr    edx,0xa
c0027455:	21 da                	and    edx,ebx
c0027457:	89 f8                	mov    eax,edi
c0027459:	01 d0                	add    eax,edx
c002745b:	83 d1 00             	adc    ecx,0x0
c002745e:	89 c7                	mov    edi,eax
c0027460:	eb 06                	jmp    c0027468 <__adddf3+0x645>
c0027462:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027465:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027468:	89 f8                	mov    eax,edi
c002746a:	89 ca                	mov    edx,ecx
c002746c:	83 c4 24             	add    esp,0x24
c002746f:	5b                   	pop    ebx
c0027470:	5e                   	pop    esi
c0027471:	5f                   	pop    edi
c0027472:	5d                   	pop    ebp
c0027473:	c3                   	ret    

c0027474 <__subdf3>:
c0027474:	55                   	push   ebp
c0027475:	89 e5                	mov    ebp,esp
c0027477:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002747a:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c002747d:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027483:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0027486:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0027489:	5d                   	pop    ebp
c002748a:	e9 94 f9 ff ff       	jmp    c0026e23 <__adddf3>

c002748f <__negdf2>:
c002748f:	55                   	push   ebp
c0027490:	89 e5                	mov    ebp,esp
c0027492:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0027495:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027498:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c002749e:	5d                   	pop    ebp
c002749f:	c3                   	ret    

c00274a0 <__muldf3>:
c00274a0:	55                   	push   ebp
c00274a1:	89 e5                	mov    ebp,esp
c00274a3:	57                   	push   edi
c00274a4:	56                   	push   esi
c00274a5:	53                   	push   ebx
c00274a6:	83 ec 24             	sub    esp,0x24
c00274a9:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c00274ac:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00274af:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00274b2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00274b5:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00274b8:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00274bb:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00274be:	89 c8                	mov    eax,ecx
c00274c0:	c1 f8 14             	sar    eax,0x14
c00274c3:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00274c6:	89 f8                	mov    eax,edi
c00274c8:	89 fb                	mov    ebx,edi
c00274ca:	c1 e3 0b             	shl    ebx,0xb
c00274cd:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c00274d0:	c1 e1 0b             	shl    ecx,0xb
c00274d3:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c00274d9:	c1 e8 15             	shr    eax,0x15
c00274dc:	09 c1                	or     ecx,eax
c00274de:	89 d6                	mov    esi,edx
c00274e0:	89 d0                	mov    eax,edx
c00274e2:	c1 f8 14             	sar    eax,0x14
c00274e5:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00274e8:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00274eb:	89 c3                	mov    ebx,eax
c00274ed:	c1 e3 0b             	shl    ebx,0xb
c00274f0:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c00274f3:	c1 e6 0b             	shl    esi,0xb
c00274f6:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c00274fc:	c1 e8 15             	shr    eax,0x15
c00274ff:	09 c6                	or     esi,eax
c0027501:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027504:	25 ff 07 00 00       	and    eax,0x7ff
c0027509:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c002750c:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c002750f:	25 ff 07 00 00       	and    eax,0x7ff
c0027514:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0027517:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c002751a:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c002751d:	8d 9c 18 02 fc ff ff 	lea    ebx,[eax+ebx*1-0x3fe]
c0027524:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027527:	40                   	inc    eax
c0027528:	a9 fe 07 00 00       	test   eax,0x7fe
c002752d:	0f 85 8d 00 00 00    	jne    c00275c0 <__muldf3+0x120>
c0027533:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027536:	09 c8                	or     eax,ecx
c0027538:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c002753c:	74 44                	je     c0027582 <__muldf3+0xe2>
c002753e:	85 c0                	test   eax,eax
c0027540:	0f 85 31 02 00 00    	jne    c0027777 <__muldf3+0x2d7>
c0027546:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027549:	40                   	inc    eax
c002754a:	a9 fe 07 00 00       	test   eax,0x7fe
c002754f:	75 13                	jne    c0027564 <__muldf3+0xc4>
c0027551:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027554:	09 f1                	or     ecx,esi
c0027556:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c002755a:	74 22                	je     c002757e <__muldf3+0xde>
c002755c:	85 c9                	test   ecx,ecx
c002755e:	0f 85 0d 02 00 00    	jne    c0027771 <__muldf3+0x2d1>
c0027564:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
c0027568:	0f 89 09 02 00 00    	jns    c0027777 <__muldf3+0x2d7>
c002756e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027571:	05 00 00 00 80       	add    eax,0x80000000
c0027576:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027579:	e9 f9 01 00 00       	jmp    c0027777 <__muldf3+0x2d7>
c002757e:	85 c9                	test   ecx,ecx
c0027580:	eb 2e                	jmp    c00275b0 <__muldf3+0x110>
c0027582:	85 c0                	test   eax,eax
c0027584:	74 20                	je     c00275a6 <__muldf3+0x106>
c0027586:	8d 04 09             	lea    eax,[ecx+ecx*1]
c0027589:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002758c:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002758f:	c1 ef 1f             	shr    edi,0x1f
c0027592:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c0027595:	01 4d e4             	add    DWORD PTR [ebp-0x1c],ecx
c0027598:	8d 43 ff             	lea    eax,[ebx-0x1]
c002759b:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002759e:	09 f9                	or     ecx,edi
c00275a0:	78 1e                	js     c00275c0 <__muldf3+0x120>
c00275a2:	89 c3                	mov    ebx,eax
c00275a4:	eb e0                	jmp    c0027586 <__muldf3+0xe6>
c00275a6:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00275a9:	f7 d0                	not    eax
c00275ab:	a9 ff 07 00 00       	test   eax,0x7ff
c00275b0:	75 b2                	jne    c0027564 <__muldf3+0xc4>
c00275b2:	31 ff                	xor    edi,edi
c00275b4:	c7 45 ec 00 00 f8 7f 	mov    DWORD PTR [ebp-0x14],0x7ff80000
c00275bb:	e9 b7 01 00 00       	jmp    c0027777 <__muldf3+0x2d7>
c00275c0:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00275c3:	40                   	inc    eax
c00275c4:	a9 fe 07 00 00       	test   eax,0x7fe
c00275c9:	75 57                	jne    c0027622 <__muldf3+0x182>
c00275cb:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00275ce:	09 f0                	or     eax,esi
c00275d0:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00275d4:	74 23                	je     c00275f9 <__muldf3+0x159>
c00275d6:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c00275da:	0f 89 91 01 00 00    	jns    c0027771 <__muldf3+0x2d1>
c00275e0:	85 c0                	test   eax,eax
c00275e2:	0f 85 89 01 00 00    	jne    c0027771 <__muldf3+0x2d1>
c00275e8:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c00275eb:	8d 82 00 00 00 80    	lea    eax,[edx-0x80000000]
c00275f1:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00275f4:	e9 7e 01 00 00       	jmp    c0027777 <__muldf3+0x2d7>
c00275f9:	85 c0                	test   eax,eax
c00275fb:	75 0c                	jne    c0027609 <__muldf3+0x169>
c00275fd:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0027601:	0f 89 6a 01 00 00    	jns    c0027771 <__muldf3+0x2d1>
c0027607:	eb df                	jmp    c00275e8 <__muldf3+0x148>
c0027609:	01 f6                	add    esi,esi
c002760b:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002760e:	c1 ea 1f             	shr    edx,0x1f
c0027611:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027614:	01 7d e0             	add    DWORD PTR [ebp-0x20],edi
c0027617:	8d 43 ff             	lea    eax,[ebx-0x1]
c002761a:	09 d6                	or     esi,edx
c002761c:	78 04                	js     c0027622 <__muldf3+0x182>
c002761e:	89 c3                	mov    ebx,eax
c0027620:	eb e7                	jmp    c0027609 <__muldf3+0x169>
c0027622:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0027628:	81 ce 00 00 00 80    	or     esi,0x80000000
c002762e:	89 c8                	mov    eax,ecx
c0027630:	f7 e6                	mul    esi
c0027632:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c0027635:	89 c7                	mov    edi,eax
c0027637:	89 c8                	mov    eax,ecx
c0027639:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c002763c:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c002763f:	89 c1                	mov    ecx,eax
c0027641:	89 f0                	mov    eax,esi
c0027643:	f7 65 e4             	mul    DWORD PTR [ebp-0x1c]
c0027646:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c0027649:	89 c6                	mov    esi,eax
c002764b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002764e:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0027651:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0027654:	31 c0                	xor    eax,eax
c0027656:	01 f1                	add    ecx,esi
c0027658:	0f 92 c0             	setb   al
c002765b:	03 7d d4             	add    edi,DWORD PTR [ebp-0x2c]
c002765e:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0027661:	83 d6 00             	adc    esi,0x0
c0027664:	01 c7                	add    edi,eax
c0027666:	83 d6 00             	adc    esi,0x0
c0027669:	01 ca                	add    edx,ecx
c002766b:	0f 92 c1             	setb   cl
c002766e:	0f b6 c9             	movzx  ecx,cl
c0027671:	03 7d d0             	add    edi,DWORD PTR [ebp-0x30]
c0027674:	83 d6 00             	adc    esi,0x0
c0027677:	01 cf                	add    edi,ecx
c0027679:	83 d6 00             	adc    esi,0x0
c002767c:	31 c9                	xor    ecx,ecx
c002767e:	0b 55 e4             	or     edx,DWORD PTR [ebp-0x1c]
c0027681:	0f 95 c1             	setne  cl
c0027684:	09 cf                	or     edi,ecx
c0027686:	85 f6                	test   esi,esi
c0027688:	78 0c                	js     c0027696 <__muldf3+0x1f6>
c002768a:	01 f6                	add    esi,esi
c002768c:	89 f8                	mov    eax,edi
c002768e:	c1 e8 1f             	shr    eax,0x1f
c0027691:	09 c6                	or     esi,eax
c0027693:	01 ff                	add    edi,edi
c0027695:	4b                   	dec    ebx
c0027696:	81 fb fe 07 00 00    	cmp    ebx,0x7fe
c002769c:	0f 8f 85 00 00 00    	jg     c0027727 <__muldf3+0x287>
c00276a2:	81 e6 ff ff ff 7f    	and    esi,0x7fffffff
c00276a8:	85 db                	test   ebx,ebx
c00276aa:	0f 8f 84 00 00 00    	jg     c0027734 <__muldf3+0x294>
c00276b0:	83 fb cc             	cmp    ebx,0xffffffcc
c00276b3:	7c 79                	jl     c002772e <__muldf3+0x28e>
c00276b5:	ba 01 00 00 00       	mov    edx,0x1
c00276ba:	29 da                	sub    edx,ebx
c00276bc:	81 ce 00 00 00 80    	or     esi,0x80000000
c00276c2:	83 fa 1f             	cmp    edx,0x1f
c00276c5:	7e 30                	jle    c00276f7 <__muldf3+0x257>
c00276c7:	83 fa 20             	cmp    edx,0x20
c00276ca:	75 0b                	jne    c00276d7 <__muldf3+0x237>
c00276cc:	31 c0                	xor    eax,eax
c00276ce:	85 ff                	test   edi,edi
c00276d0:	0f 95 c0             	setne  al
c00276d3:	89 c7                	mov    edi,eax
c00276d5:	eb 1a                	jmp    c00276f1 <__muldf3+0x251>
c00276d7:	8d 4b 3f             	lea    ecx,[ebx+0x3f]
c00276da:	89 f0                	mov    eax,esi
c00276dc:	d3 e0                	shl    eax,cl
c00276de:	09 f8                	or     eax,edi
c00276e0:	0f 95 c0             	setne  al
c00276e3:	0f b6 c0             	movzx  eax,al
c00276e6:	89 c7                	mov    edi,eax
c00276e8:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c00276ed:	29 d9                	sub    ecx,ebx
c00276ef:	d3 ee                	shr    esi,cl
c00276f1:	09 f7                	or     edi,esi
c00276f3:	31 db                	xor    ebx,ebx
c00276f5:	eb 3b                	jmp    c0027732 <__muldf3+0x292>
c00276f7:	83 c3 1f             	add    ebx,0x1f
c00276fa:	89 f0                	mov    eax,esi
c00276fc:	88 d9                	mov    cl,bl
c00276fe:	d3 e0                	shl    eax,cl
c0027700:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027703:	89 f8                	mov    eax,edi
c0027705:	88 d1                	mov    cl,dl
c0027707:	d3 e8                	shr    eax,cl
c0027709:	89 c1                	mov    ecx,eax
c002770b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002770e:	09 c8                	or     eax,ecx
c0027710:	88 d9                	mov    cl,bl
c0027712:	d3 e7                	shl    edi,cl
c0027714:	31 db                	xor    ebx,ebx
c0027716:	85 ff                	test   edi,edi
c0027718:	0f 95 c3             	setne  bl
c002771b:	89 df                	mov    edi,ebx
c002771d:	09 c7                	or     edi,eax
c002771f:	88 d1                	mov    cl,dl
c0027721:	d3 ee                	shr    esi,cl
c0027723:	31 db                	xor    ebx,ebx
c0027725:	eb 0d                	jmp    c0027734 <__muldf3+0x294>
c0027727:	bb ff 07 00 00       	mov    ebx,0x7ff
c002772c:	eb 02                	jmp    c0027730 <__muldf3+0x290>
c002772e:	31 db                	xor    ebx,ebx
c0027730:	31 ff                	xor    edi,edi
c0027732:	31 f6                	xor    esi,esi
c0027734:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027737:	33 45 e8             	xor    eax,DWORD PTR [ebp-0x18]
c002773a:	25 00 f8 ff ff       	and    eax,0xfffff800
c002773f:	09 c3                	or     ebx,eax
c0027741:	c1 e3 14             	shl    ebx,0x14
c0027744:	89 f0                	mov    eax,esi
c0027746:	c1 e8 0b             	shr    eax,0xb
c0027749:	09 c3                	or     ebx,eax
c002774b:	89 f8                	mov    eax,edi
c002774d:	c1 e8 0b             	shr    eax,0xb
c0027750:	c1 e6 15             	shl    esi,0x15
c0027753:	09 c6                	or     esi,eax
c0027755:	f7 c7 ff 03 00 00    	test   edi,0x3ff
c002775b:	0f 95 c1             	setne  cl
c002775e:	09 c8                	or     eax,ecx
c0027760:	83 e0 01             	and    eax,0x1
c0027763:	c1 ef 0a             	shr    edi,0xa
c0027766:	21 c7                	and    edi,eax
c0027768:	01 f7                	add    edi,esi
c002776a:	83 d3 00             	adc    ebx,0x0
c002776d:	89 da                	mov    edx,ebx
c002776f:	eb 03                	jmp    c0027774 <__muldf3+0x2d4>
c0027771:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0027774:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0027777:	89 f8                	mov    eax,edi
c0027779:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c002777c:	83 c4 24             	add    esp,0x24
c002777f:	5b                   	pop    ebx
c0027780:	5e                   	pop    esi
c0027781:	5f                   	pop    edi
c0027782:	5d                   	pop    ebp
c0027783:	c3                   	ret    

c0027784 <__divdf3>:
c0027784:	55                   	push   ebp
c0027785:	89 e5                	mov    ebp,esp
c0027787:	57                   	push   edi
c0027788:	56                   	push   esi
c0027789:	53                   	push   ebx
c002778a:	83 ec 2c             	sub    esp,0x2c
c002778d:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027790:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027793:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027796:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0027799:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c002779c:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c002779f:	89 ce                	mov    esi,ecx
c00277a1:	89 c8                	mov    eax,ecx
c00277a3:	c1 f8 14             	sar    eax,0x14
c00277a6:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00277a9:	89 f8                	mov    eax,edi
c00277ab:	89 fb                	mov    ebx,edi
c00277ad:	c1 e3 0b             	shl    ebx,0xb
c00277b0:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c00277b3:	c1 e6 0b             	shl    esi,0xb
c00277b6:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c00277bc:	c1 e8 15             	shr    eax,0x15
c00277bf:	09 c6                	or     esi,eax
c00277c1:	89 75 e0             	mov    DWORD PTR [ebp-0x20],esi
c00277c4:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00277c7:	89 c2                	mov    edx,eax
c00277c9:	c1 fa 14             	sar    edx,0x14
c00277cc:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c00277cf:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c00277d2:	89 de                	mov    esi,ebx
c00277d4:	c1 e6 0b             	shl    esi,0xb
c00277d7:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c00277da:	c1 e0 0b             	shl    eax,0xb
c00277dd:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c00277e2:	c1 eb 15             	shr    ebx,0x15
c00277e5:	09 d8                	or     eax,ebx
c00277e7:	89 c2                	mov    edx,eax
c00277e9:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00277ec:	25 ff 07 00 00       	and    eax,0x7ff
c00277f1:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c00277f4:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00277f7:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00277fd:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c0027800:	29 d8                	sub    eax,ebx
c0027802:	05 ff 03 00 00       	add    eax,0x3ff
c0027807:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c002780a:	46                   	inc    esi
c002780b:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0027811:	0f 85 a5 00 00 00    	jne    c00278bc <__divdf3+0x138>
c0027817:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c002781a:	0b 75 e0             	or     esi,DWORD PTR [ebp-0x20]
c002781d:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
c0027821:	74 2a                	je     c002784d <__divdf3+0xc9>
c0027823:	85 f6                	test   esi,esi
c0027825:	0f 85 cc 02 00 00    	jne    c0027af7 <__divdf3+0x373>
c002782b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002782e:	40                   	inc    eax
c002782f:	a9 fe 07 00 00       	test   eax,0x7fe
c0027834:	75 26                	jne    c002785c <__divdf3+0xd8>
c0027836:	85 db                	test   ebx,ebx
c0027838:	74 22                	je     c002785c <__divdf3+0xd8>
c002783a:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c002783d:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027840:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027843:	09 d0                	or     eax,edx
c0027845:	0f 85 ac 02 00 00    	jne    c0027af7 <__divdf3+0x373>
c002784b:	eb 63                	jmp    c00278b0 <__divdf3+0x12c>
c002784d:	85 f6                	test   esi,esi
c002784f:	75 22                	jne    c0027873 <__divdf3+0xef>
c0027851:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027854:	40                   	inc    eax
c0027855:	a9 fe 07 00 00       	test   eax,0x7fe
c002785a:	74 36                	je     c0027892 <__divdf3+0x10e>
c002785c:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0027860:	0f 89 91 02 00 00    	jns    c0027af7 <__divdf3+0x373>
c0027866:	89 f8                	mov    eax,edi
c0027868:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c002786e:	e9 80 02 00 00       	jmp    c0027af3 <__divdf3+0x36f>
c0027873:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027876:	01 f6                	add    esi,esi
c0027878:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c002787b:	c1 ef 1f             	shr    edi,0x1f
c002787e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027881:	01 5d ec             	add    DWORD PTR [ebp-0x14],ebx
c0027884:	8d 48 ff             	lea    ecx,[eax-0x1]
c0027887:	09 f7                	or     edi,esi
c0027889:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
c002788c:	78 2e                	js     c00278bc <__divdf3+0x138>
c002788e:	89 c8                	mov    eax,ecx
c0027890:	eb e1                	jmp    c0027873 <__divdf3+0xef>
c0027892:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027895:	09 d0                	or     eax,edx
c0027897:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c002789b:	74 0f                	je     c00278ac <__divdf3+0x128>
c002789d:	85 c0                	test   eax,eax
c002789f:	74 bb                	je     c002785c <__divdf3+0xd8>
c00278a1:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c00278a4:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c00278a7:	e9 4b 02 00 00       	jmp    c0027af7 <__divdf3+0x373>
c00278ac:	85 c0                	test   eax,eax
c00278ae:	75 ac                	jne    c002785c <__divdf3+0xd8>
c00278b0:	31 ff                	xor    edi,edi
c00278b2:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c00278b7:	e9 3b 02 00 00       	jmp    c0027af7 <__divdf3+0x373>
c00278bc:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00278bf:	8d 4f 01             	lea    ecx,[edi+0x1]
c00278c2:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c00278c8:	75 6b                	jne    c0027935 <__divdf3+0x1b1>
c00278ca:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00278cd:	09 d6                	or     esi,edx
c00278cf:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c00278d3:	74 28                	je     c00278fd <__divdf3+0x179>
c00278d5:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c00278d8:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c00278db:	85 f6                	test   esi,esi
c00278dd:	0f 85 14 02 00 00    	jne    c0027af7 <__divdf3+0x373>
c00278e3:	31 ff                	xor    edi,edi
c00278e5:	31 c9                	xor    ecx,ecx
c00278e7:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00278ea:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c00278ed:	0f 89 04 02 00 00    	jns    c0027af7 <__divdf3+0x373>
c00278f3:	b9 00 00 00 80       	mov    ecx,0x80000000
c00278f8:	e9 fa 01 00 00       	jmp    c0027af7 <__divdf3+0x373>
c00278fd:	85 f6                	test   esi,esi
c00278ff:	75 1b                	jne    c002791c <__divdf3+0x198>
c0027901:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027904:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0027907:	25 00 00 00 80       	and    eax,0x80000000
c002790c:	31 c9                	xor    ecx,ecx
c002790e:	0d 00 00 f0 7f       	or     eax,0x7ff00000
c0027913:	89 cf                	mov    edi,ecx
c0027915:	89 c1                	mov    ecx,eax
c0027917:	e9 db 01 00 00       	jmp    c0027af7 <__divdf3+0x373>
c002791c:	01 d2                	add    edx,edx
c002791e:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0027921:	c1 eb 1f             	shr    ebx,0x1f
c0027924:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027927:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
c002792a:	8d 48 01             	lea    ecx,[eax+0x1]
c002792d:	09 da                	or     edx,ebx
c002792f:	78 04                	js     c0027935 <__divdf3+0x1b1>
c0027931:	89 c8                	mov    eax,ecx
c0027933:	eb e7                	jmp    c002791c <__divdf3+0x198>
c0027935:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027938:	81 ce 00 00 00 80    	or     esi,0x80000000
c002793e:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027944:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
c0027947:	39 d6                	cmp    esi,edx
c0027949:	77 0d                	ja     c0027958 <__divdf3+0x1d4>
c002794b:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c002794e:	39 55 ec             	cmp    DWORD PTR [ebp-0x14],edx
c0027951:	72 1b                	jb     c002796e <__divdf3+0x1ea>
c0027953:	3b 75 e0             	cmp    esi,DWORD PTR [ebp-0x20]
c0027956:	75 16                	jne    c002796e <__divdf3+0x1ea>
c0027958:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c002795b:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c002795e:	39 5d ec             	cmp    DWORD PTR [ebp-0x14],ebx
c0027961:	83 de 00             	sbb    esi,0x0
c0027964:	29 5d ec             	sub    DWORD PTR [ebp-0x14],ebx
c0027967:	ba 01 00 00 00       	mov    edx,0x1
c002796c:	eb 02                	jmp    c0027970 <__divdf3+0x1ec>
c002796e:	31 d2                	xor    edx,edx
c0027970:	c7 45 d0 36 00 00 00 	mov    DWORD PTR [ebp-0x30],0x36
c0027977:	31 ff                	xor    edi,edi
c0027979:	01 ff                	add    edi,edi
c002797b:	89 d1                	mov    ecx,edx
c002797d:	c1 e9 1f             	shr    ecx,0x1f
c0027980:	09 cf                	or     edi,ecx
c0027982:	8d 1c 12             	lea    ebx,[edx+edx*1]
c0027985:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c0027988:	89 da                	mov    edx,ebx
c002798a:	89 f3                	mov    ebx,esi
c002798c:	8d 34 36             	lea    esi,[esi+esi*1]
c002798f:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027992:	c1 e9 1f             	shr    ecx,0x1f
c0027995:	09 ce                	or     esi,ecx
c0027997:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002799a:	01 c9                	add    ecx,ecx
c002799c:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
c002799f:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c00279a2:	85 db                	test   ebx,ebx
c00279a4:	78 29                	js     c00279cf <__divdf3+0x24b>
c00279a6:	39 75 e0             	cmp    DWORD PTR [ebp-0x20],esi
c00279a9:	72 07                	jb     c00279b2 <__divdf3+0x22e>
c00279ab:	75 3c                	jne    c00279e9 <__divdf3+0x265>
c00279ad:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c00279b0:	77 37                	ja     c00279e9 <__divdf3+0x265>
c00279b2:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c00279b5:	8b 5d d8             	mov    ebx,DWORD PTR [ebp-0x28]
c00279b8:	31 d2                	xor    edx,edx
c00279ba:	39 5d e8             	cmp    DWORD PTR [ebp-0x18],ebx
c00279bd:	0f 97 c2             	seta   dl
c00279c0:	29 d6                	sub    esi,edx
c00279c2:	89 d9                	mov    ecx,ebx
c00279c4:	2b 4d e8             	sub    ecx,DWORD PTR [ebp-0x18]
c00279c7:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c00279ca:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00279cd:	eb 17                	jmp    c00279e6 <__divdf3+0x262>
c00279cf:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c00279d2:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00279d5:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c00279d8:	0f 97 c1             	seta   cl
c00279db:	0f b6 c9             	movzx  ecx,cl
c00279de:	29 ce                	sub    esi,ecx
c00279e0:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c00279e3:	29 4d ec             	sub    DWORD PTR [ebp-0x14],ecx
c00279e6:	83 ca 01             	or     edx,0x1
c00279e9:	ff 4d d0             	dec    DWORD PTR [ebp-0x30]
c00279ec:	75 8b                	jne    c0027979 <__divdf3+0x1f5>
c00279ee:	c1 e7 09             	shl    edi,0x9
c00279f1:	89 d1                	mov    ecx,edx
c00279f3:	c1 e9 17             	shr    ecx,0x17
c00279f6:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00279f9:	09 f3                	or     ebx,esi
c00279fb:	0f 95 c3             	setne  bl
c00279fe:	0f b6 db             	movzx  ebx,bl
c0027a01:	c1 e2 09             	shl    edx,0x9
c0027a04:	09 d3                	or     ebx,edx
c0027a06:	89 ca                	mov    edx,ecx
c0027a08:	09 fa                	or     edx,edi
c0027a0a:	78 0c                	js     c0027a18 <__divdf3+0x294>
c0027a0c:	01 d2                	add    edx,edx
c0027a0e:	89 d9                	mov    ecx,ebx
c0027a10:	c1 e9 1f             	shr    ecx,0x1f
c0027a13:	09 ca                	or     edx,ecx
c0027a15:	01 db                	add    ebx,ebx
c0027a17:	48                   	dec    eax
c0027a18:	3d fe 07 00 00       	cmp    eax,0x7fe
c0027a1d:	0f 8f 83 00 00 00    	jg     c0027aa6 <__divdf3+0x322>
c0027a23:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0027a29:	85 c0                	test   eax,eax
c0027a2b:	0f 8f 82 00 00 00    	jg     c0027ab3 <__divdf3+0x32f>
c0027a31:	83 f8 cc             	cmp    eax,0xffffffcc
c0027a34:	7c 77                	jl     c0027aad <__divdf3+0x329>
c0027a36:	be 01 00 00 00       	mov    esi,0x1
c0027a3b:	29 c6                	sub    esi,eax
c0027a3d:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027a43:	83 fe 1f             	cmp    esi,0x1f
c0027a46:	7e 2f                	jle    c0027a77 <__divdf3+0x2f3>
c0027a48:	83 fe 20             	cmp    esi,0x20
c0027a4b:	75 0a                	jne    c0027a57 <__divdf3+0x2d3>
c0027a4d:	85 db                	test   ebx,ebx
c0027a4f:	0f 95 c3             	setne  bl
c0027a52:	0f b6 db             	movzx  ebx,bl
c0027a55:	eb 1a                	jmp    c0027a71 <__divdf3+0x2ed>
c0027a57:	8d 48 3f             	lea    ecx,[eax+0x3f]
c0027a5a:	89 d7                	mov    edi,edx
c0027a5c:	d3 e7                	shl    edi,cl
c0027a5e:	89 f9                	mov    ecx,edi
c0027a60:	09 d9                	or     ecx,ebx
c0027a62:	0f 95 c3             	setne  bl
c0027a65:	0f b6 db             	movzx  ebx,bl
c0027a68:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0027a6d:	29 c1                	sub    ecx,eax
c0027a6f:	d3 ea                	shr    edx,cl
c0027a71:	09 d3                	or     ebx,edx
c0027a73:	31 c0                	xor    eax,eax
c0027a75:	eb 3a                	jmp    c0027ab1 <__divdf3+0x32d>
c0027a77:	83 c0 1f             	add    eax,0x1f
c0027a7a:	89 d7                	mov    edi,edx
c0027a7c:	88 c1                	mov    cl,al
c0027a7e:	d3 e7                	shl    edi,cl
c0027a80:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027a83:	89 df                	mov    edi,ebx
c0027a85:	89 f1                	mov    ecx,esi
c0027a87:	d3 ef                	shr    edi,cl
c0027a89:	89 f9                	mov    ecx,edi
c0027a8b:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0027a8e:	09 cf                	or     edi,ecx
c0027a90:	88 c1                	mov    cl,al
c0027a92:	d3 e3                	shl    ebx,cl
c0027a94:	85 db                	test   ebx,ebx
c0027a96:	0f 95 c3             	setne  bl
c0027a99:	0f b6 db             	movzx  ebx,bl
c0027a9c:	09 fb                	or     ebx,edi
c0027a9e:	89 f1                	mov    ecx,esi
c0027aa0:	d3 ea                	shr    edx,cl
c0027aa2:	31 c0                	xor    eax,eax
c0027aa4:	eb 0d                	jmp    c0027ab3 <__divdf3+0x32f>
c0027aa6:	b8 ff 07 00 00       	mov    eax,0x7ff
c0027aab:	eb 02                	jmp    c0027aaf <__divdf3+0x32b>
c0027aad:	31 c0                	xor    eax,eax
c0027aaf:	31 db                	xor    ebx,ebx
c0027ab1:	31 d2                	xor    edx,edx
c0027ab3:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
c0027ab6:	33 4d e4             	xor    ecx,DWORD PTR [ebp-0x1c]
c0027ab9:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0027abf:	09 c8                	or     eax,ecx
c0027ac1:	c1 e0 14             	shl    eax,0x14
c0027ac4:	89 d1                	mov    ecx,edx
c0027ac6:	c1 e9 0b             	shr    ecx,0xb
c0027ac9:	09 c8                	or     eax,ecx
c0027acb:	89 c6                	mov    esi,eax
c0027acd:	89 d9                	mov    ecx,ebx
c0027acf:	c1 e9 0b             	shr    ecx,0xb
c0027ad2:	c1 e2 15             	shl    edx,0x15
c0027ad5:	09 ca                	or     edx,ecx
c0027ad7:	f7 c3 ff 03 00 00    	test   ebx,0x3ff
c0027add:	0f 95 c0             	setne  al
c0027ae0:	09 c1                	or     ecx,eax
c0027ae2:	83 e1 01             	and    ecx,0x1
c0027ae5:	c1 eb 0a             	shr    ebx,0xa
c0027ae8:	21 cb                	and    ebx,ecx
c0027aea:	01 d3                	add    ebx,edx
c0027aec:	89 d8                	mov    eax,ebx
c0027aee:	83 d6 00             	adc    esi,0x0
c0027af1:	89 f2                	mov    edx,esi
c0027af3:	89 c7                	mov    edi,eax
c0027af5:	89 d1                	mov    ecx,edx
c0027af7:	89 f8                	mov    eax,edi
c0027af9:	89 ca                	mov    edx,ecx
c0027afb:	83 c4 2c             	add    esp,0x2c
c0027afe:	5b                   	pop    ebx
c0027aff:	5e                   	pop    esi
c0027b00:	5f                   	pop    edi
c0027b01:	5d                   	pop    ebp
c0027b02:	c3                   	ret    

c0027b03 <__floatsidf>:
c0027b03:	55                   	push   ebp
c0027b04:	89 e5                	mov    ebp,esp
c0027b06:	56                   	push   esi
c0027b07:	53                   	push   ebx
c0027b08:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0027b0b:	85 db                	test   ebx,ebx
c0027b0d:	7e 15                	jle    c0027b24 <__floatsidf+0x21>
c0027b0f:	0f bd cb             	bsr    ecx,ebx
c0027b12:	83 f1 1f             	xor    ecx,0x1f
c0027b15:	d3 e3                	shl    ebx,cl
c0027b17:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0027b1d:	b8 1e 04 00 00       	mov    eax,0x41e
c0027b22:	eb 21                	jmp    c0027b45 <__floatsidf+0x42>
c0027b24:	b8 00 00 00 00       	mov    eax,0x0
c0027b29:	ba 00 00 00 00       	mov    edx,0x0
c0027b2e:	74 2a                	je     c0027b5a <__floatsidf+0x57>
c0027b30:	f7 db                	neg    ebx
c0027b32:	0f bd cb             	bsr    ecx,ebx
c0027b35:	83 f1 1f             	xor    ecx,0x1f
c0027b38:	d3 e3                	shl    ebx,cl
c0027b3a:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0027b40:	b8 1e 0c 00 00       	mov    eax,0xc1e
c0027b45:	29 c8                	sub    eax,ecx
c0027b47:	c1 e0 14             	shl    eax,0x14
c0027b4a:	89 c1                	mov    ecx,eax
c0027b4c:	89 de                	mov    esi,ebx
c0027b4e:	c1 ee 0b             	shr    esi,0xb
c0027b51:	09 f1                	or     ecx,esi
c0027b53:	89 ca                	mov    edx,ecx
c0027b55:	c1 e3 15             	shl    ebx,0x15
c0027b58:	89 d8                	mov    eax,ebx
c0027b5a:	5b                   	pop    ebx
c0027b5b:	5e                   	pop    esi
c0027b5c:	5d                   	pop    ebp
c0027b5d:	c3                   	ret    

c0027b5e <__floatunsidf>:
c0027b5e:	55                   	push   ebp
c0027b5f:	89 e5                	mov    ebp,esp
c0027b61:	56                   	push   esi
c0027b62:	53                   	push   ebx
c0027b63:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0027b66:	85 db                	test   ebx,ebx
c0027b68:	74 2a                	je     c0027b94 <__floatunsidf+0x36>
c0027b6a:	0f bd cb             	bsr    ecx,ebx
c0027b6d:	83 f1 1f             	xor    ecx,0x1f
c0027b70:	d3 e3                	shl    ebx,cl
c0027b72:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0027b78:	b8 1e 04 00 00       	mov    eax,0x41e
c0027b7d:	29 c8                	sub    eax,ecx
c0027b7f:	c1 e0 14             	shl    eax,0x14
c0027b82:	89 c1                	mov    ecx,eax
c0027b84:	89 de                	mov    esi,ebx
c0027b86:	c1 ee 0b             	shr    esi,0xb
c0027b89:	09 f1                	or     ecx,esi
c0027b8b:	89 ca                	mov    edx,ecx
c0027b8d:	c1 e3 15             	shl    ebx,0x15
c0027b90:	89 d8                	mov    eax,ebx
c0027b92:	eb 04                	jmp    c0027b98 <__floatunsidf+0x3a>
c0027b94:	31 c0                	xor    eax,eax
c0027b96:	31 d2                	xor    edx,edx
c0027b98:	5b                   	pop    ebx
c0027b99:	5e                   	pop    esi
c0027b9a:	5d                   	pop    ebp
c0027b9b:	c3                   	ret    

c0027b9c <__fixdfsi>:
c0027b9c:	55                   	push   ebp
c0027b9d:	89 e5                	mov    ebp,esp
c0027b9f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0027ba2:	89 d1                	mov    ecx,edx
c0027ba4:	c1 e1 0b             	shl    ecx,0xb
c0027ba7:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0027bad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0027bb0:	c1 e8 15             	shr    eax,0x15
c0027bb3:	09 c1                	or     ecx,eax
c0027bb5:	c1 fa 14             	sar    edx,0x14
c0027bb8:	78 1f                	js     c0027bd9 <__fixdfsi+0x3d>
c0027bba:	81 ea ff 03 00 00    	sub    edx,0x3ff
c0027bc0:	31 c0                	xor    eax,eax
c0027bc2:	83 fa 1e             	cmp    edx,0x1e
c0027bc5:	77 40                	ja     c0027c07 <__fixdfsi+0x6b>
c0027bc7:	89 c8                	mov    eax,ecx
c0027bc9:	0d 00 00 00 80       	or     eax,0x80000000
c0027bce:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027bd3:	29 d1                	sub    ecx,edx
c0027bd5:	d3 e8                	shr    eax,cl
c0027bd7:	eb 2e                	jmp    c0027c07 <__fixdfsi+0x6b>
c0027bd9:	31 c0                	xor    eax,eax
c0027bdb:	81 c2 01 04 00 00    	add    edx,0x401
c0027be1:	78 24                	js     c0027c07 <__fixdfsi+0x6b>
c0027be3:	83 fa 1e             	cmp    edx,0x1e
c0027be6:	7e 09                	jle    c0027bf1 <__fixdfsi+0x55>
c0027be8:	83 fa 1f             	cmp    edx,0x1f
c0027beb:	75 18                	jne    c0027c05 <__fixdfsi+0x69>
c0027bed:	85 c9                	test   ecx,ecx
c0027bef:	75 14                	jne    c0027c05 <__fixdfsi+0x69>
c0027bf1:	89 c8                	mov    eax,ecx
c0027bf3:	0d 00 00 00 80       	or     eax,0x80000000
c0027bf8:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027bfd:	29 d1                	sub    ecx,edx
c0027bff:	d3 e8                	shr    eax,cl
c0027c01:	f7 d8                	neg    eax
c0027c03:	eb 02                	jmp    c0027c07 <__fixdfsi+0x6b>
c0027c05:	31 c0                	xor    eax,eax
c0027c07:	5d                   	pop    ebp
c0027c08:	c3                   	ret    

c0027c09 <__fixunsdfsi>:
c0027c09:	55                   	push   ebp
c0027c0a:	89 e5                	mov    ebp,esp
c0027c0c:	53                   	push   ebx
c0027c0d:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0027c10:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0027c13:	89 d3                	mov    ebx,edx
c0027c15:	c1 fb 14             	sar    ebx,0x14
c0027c18:	81 eb ff 03 00 00    	sub    ebx,0x3ff
c0027c1e:	31 c0                	xor    eax,eax
c0027c20:	83 fb 1f             	cmp    ebx,0x1f
c0027c23:	77 1d                	ja     c0027c42 <__fixunsdfsi+0x39>
c0027c25:	89 d0                	mov    eax,edx
c0027c27:	c1 e0 0b             	shl    eax,0xb
c0027c2a:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0027c2f:	c1 e9 15             	shr    ecx,0x15
c0027c32:	09 c8                	or     eax,ecx
c0027c34:	0d 00 00 00 80       	or     eax,0x80000000
c0027c39:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027c3e:	29 d9                	sub    ecx,ebx
c0027c40:	d3 e8                	shr    eax,cl
c0027c42:	5b                   	pop    ebx
c0027c43:	5d                   	pop    ebp
c0027c44:	c3                   	ret    

c0027c45 <__cmpdf2>:
c0027c45:	55                   	push   ebp
c0027c46:	89 e5                	mov    ebp,esp
c0027c48:	57                   	push   edi
c0027c49:	56                   	push   esi
c0027c4a:	53                   	push   ebx
c0027c4b:	83 ec 0c             	sub    esp,0xc
c0027c4e:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0027c51:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027c54:	89 ca                	mov    edx,ecx
c0027c56:	c1 ea 14             	shr    edx,0x14
c0027c59:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0027c5f:	89 cb                	mov    ebx,ecx
c0027c61:	c1 fb 1f             	sar    ebx,0x1f
c0027c64:	31 da                	xor    edx,ebx
c0027c66:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0027c69:	89 df                	mov    edi,ebx
c0027c6b:	c1 e7 0b             	shl    edi,0xb
c0027c6e:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027c71:	c1 e1 0b             	shl    ecx,0xb
c0027c74:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0027c7a:	c1 eb 15             	shr    ebx,0x15
c0027c7d:	09 d9                	or     ecx,ebx
c0027c7f:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
c0027c82:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0027c85:	89 ce                	mov    esi,ecx
c0027c87:	c1 ee 14             	shr    esi,0x14
c0027c8a:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027c90:	89 cb                	mov    ebx,ecx
c0027c92:	c1 fb 1f             	sar    ebx,0x1f
c0027c95:	31 de                	xor    esi,ebx
c0027c97:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c0027c9a:	89 df                	mov    edi,ebx
c0027c9c:	c1 e7 0b             	shl    edi,0xb
c0027c9f:	c1 e1 0b             	shl    ecx,0xb
c0027ca2:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0027ca8:	c1 eb 15             	shr    ebx,0x15
c0027cab:	09 d9                	or     ecx,ebx
c0027cad:	89 d3                	mov    ebx,edx
c0027caf:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0027cb5:	43                   	inc    ebx
c0027cb6:	83 fb 01             	cmp    ebx,0x1
c0027cb9:	77 08                	ja     c0027cc3 <__cmpdf2+0x7e>
c0027cbb:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027cbe:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0027cc1:	75 68                	jne    c0027d2b <__cmpdf2+0xe6>
c0027cc3:	89 f3                	mov    ebx,esi
c0027cc5:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0027ccb:	43                   	inc    ebx
c0027ccc:	83 fb 01             	cmp    ebx,0x1
c0027ccf:	77 06                	ja     c0027cd7 <__cmpdf2+0x92>
c0027cd1:	89 fb                	mov    ebx,edi
c0027cd3:	09 cb                	or     ebx,ecx
c0027cd5:	75 54                	jne    c0027d2b <__cmpdf2+0xe6>
c0027cd7:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027cda:	09 f8                	or     eax,edi
c0027cdc:	09 c8                	or     eax,ecx
c0027cde:	0b 45 e8             	or     eax,DWORD PTR [ebp-0x18]
c0027ce1:	75 12                	jne    c0027cf5 <__cmpdf2+0xb0>
c0027ce3:	8d 42 01             	lea    eax,[edx+0x1]
c0027ce6:	83 f8 01             	cmp    eax,0x1
c0027ce9:	77 0a                	ja     c0027cf5 <__cmpdf2+0xb0>
c0027ceb:	8d 5e 01             	lea    ebx,[esi+0x1]
c0027cee:	31 c0                	xor    eax,eax
c0027cf0:	83 fb 01             	cmp    ebx,0x1
c0027cf3:	76 36                	jbe    c0027d2b <__cmpdf2+0xe6>
c0027cf5:	b8 01 00 00 00       	mov    eax,0x1
c0027cfa:	39 f2                	cmp    edx,esi
c0027cfc:	7f 2d                	jg     c0027d2b <__cmpdf2+0xe6>
c0027cfe:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0027d03:	7c 26                	jl     c0027d2b <__cmpdf2+0xe6>
c0027d05:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0027d08:	77 07                	ja     c0027d11 <__cmpdf2+0xcc>
c0027d0a:	72 16                	jb     c0027d22 <__cmpdf2+0xdd>
c0027d0c:	39 7d ec             	cmp    DWORD PTR [ebp-0x14],edi
c0027d0f:	76 0a                	jbe    c0027d1b <__cmpdf2+0xd6>
c0027d11:	89 d0                	mov    eax,edx
c0027d13:	c1 f8 1f             	sar    eax,0x1f
c0027d16:	83 c8 01             	or     eax,0x1
c0027d19:	eb 10                	jmp    c0027d2b <__cmpdf2+0xe6>
c0027d1b:	b8 00 00 00 00       	mov    eax,0x0
c0027d20:	73 09                	jae    c0027d2b <__cmpdf2+0xe6>
c0027d22:	89 d0                	mov    eax,edx
c0027d24:	c1 f8 1f             	sar    eax,0x1f
c0027d27:	83 e0 02             	and    eax,0x2
c0027d2a:	48                   	dec    eax
c0027d2b:	83 c4 0c             	add    esp,0xc
c0027d2e:	5b                   	pop    ebx
c0027d2f:	5e                   	pop    esi
c0027d30:	5f                   	pop    edi
c0027d31:	5d                   	pop    ebp
c0027d32:	c3                   	ret    

c0027d33 <__eqdf2>:
c0027d33:	55                   	push   ebp
c0027d34:	89 e5                	mov    ebp,esp
c0027d36:	50                   	push   eax
c0027d37:	6a 01                	push   0x1
c0027d39:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0027d3c:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0027d3f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027d42:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027d45:	e8 fb fe ff ff       	call   c0027c45 <__cmpdf2>
c0027d4a:	83 c4 18             	add    esp,0x18
c0027d4d:	c9                   	leave  
c0027d4e:	c3                   	ret    

c0027d4f <__nedf2>:
c0027d4f:	eb e2                	jmp    c0027d33 <__eqdf2>

c0027d51 <__gtdf2>:
c0027d51:	55                   	push   ebp
c0027d52:	89 e5                	mov    ebp,esp
c0027d54:	50                   	push   eax
c0027d55:	6a ff                	push   0xffffffff
c0027d57:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0027d5a:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0027d5d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027d60:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027d63:	e8 dd fe ff ff       	call   c0027c45 <__cmpdf2>
c0027d68:	83 c4 18             	add    esp,0x18
c0027d6b:	c9                   	leave  
c0027d6c:	c3                   	ret    

c0027d6d <__gedf2>:
c0027d6d:	eb e2                	jmp    c0027d51 <__gtdf2>

c0027d6f <__ltdf2>:
c0027d6f:	eb c2                	jmp    c0027d33 <__eqdf2>

c0027d71 <__ledf2>:
c0027d71:	eb c0                	jmp    c0027d33 <__eqdf2>

c0027d73 <__truncdfsf2>:
c0027d73:	55                   	push   ebp
c0027d74:	89 e5                	mov    ebp,esp
c0027d76:	57                   	push   edi
c0027d77:	56                   	push   esi
c0027d78:	53                   	push   ebx
c0027d79:	83 ec 0c             	sub    esp,0xc
c0027d7c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0027d7f:	89 d1                	mov    ecx,edx
c0027d81:	c1 f9 14             	sar    ecx,0x14
c0027d84:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0027d87:	89 df                	mov    edi,ebx
c0027d89:	c1 e7 0b             	shl    edi,0xb
c0027d8c:	89 d0                	mov    eax,edx
c0027d8e:	c1 e0 0b             	shl    eax,0xb
c0027d91:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0027d96:	c1 eb 15             	shr    ebx,0x15
c0027d99:	09 d8                	or     eax,ebx
c0027d9b:	89 cb                	mov    ebx,ecx
c0027d9d:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027da3:	8d b3 7f fc ff ff    	lea    esi,[ebx-0x381]
c0027da9:	81 fe fd 00 00 00    	cmp    esi,0xfd
c0027daf:	0f 86 9e 00 00 00    	jbe    c0027e53 <__truncdfsf2+0xe0>
c0027db5:	85 db                	test   ebx,ebx
c0027db7:	75 0a                	jne    c0027dc3 <__truncdfsf2+0x50>
c0027db9:	c1 fa 17             	sar    edx,0x17
c0027dbc:	30 d2                	xor    dl,dl
c0027dbe:	e9 84 00 00 00       	jmp    c0027e47 <__truncdfsf2+0xd4>
c0027dc3:	8d b3 02 fc ff ff    	lea    esi,[ebx-0x3fe]
c0027dc9:	83 fe 83             	cmp    esi,0xffffff83
c0027dcc:	7d 4b                	jge    c0027e19 <__truncdfsf2+0xa6>
c0027dce:	b9 83 ff ff ff       	mov    ecx,0xffffff83
c0027dd3:	29 f1                	sub    ecx,esi
c0027dd5:	83 f9 1f             	cmp    ecx,0x1f
c0027dd8:	7f 6b                	jg     c0027e45 <__truncdfsf2+0xd2>
c0027dda:	0d 00 00 00 80       	or     eax,0x80000000
c0027ddf:	89 c3                	mov    ebx,eax
c0027de1:	d3 eb                	shr    ebx,cl
c0027de3:	be 01 00 00 00       	mov    esi,0x1
c0027de8:	d3 e6                	shl    esi,cl
c0027dea:	4e                   	dec    esi
c0027deb:	21 f0                	and    eax,esi
c0027ded:	09 f8                	or     eax,edi
c0027def:	0f 95 c0             	setne  al
c0027df2:	0f b6 c0             	movzx  eax,al
c0027df5:	09 c3                	or     ebx,eax
c0027df7:	89 d9                	mov    ecx,ebx
c0027df9:	c1 e9 08             	shr    ecx,0x8
c0027dfc:	f6 c3 7f             	test   bl,0x7f
c0027dff:	0f 95 c0             	setne  al
c0027e02:	09 c8                	or     eax,ecx
c0027e04:	83 e0 01             	and    eax,0x1
c0027e07:	c1 eb 07             	shr    ebx,0x7
c0027e0a:	21 c3                	and    ebx,eax
c0027e0c:	81 e2 00 00 00 80    	and    edx,0x80000000
c0027e12:	09 d1                	or     ecx,edx
c0027e14:	8d 04 0b             	lea    eax,[ebx+ecx*1]
c0027e17:	eb 76                	jmp    c0027e8f <__truncdfsf2+0x11c>
c0027e19:	83 c6 80             	add    esi,0xffffff80
c0027e1c:	7e 1d                	jle    c0027e3b <__truncdfsf2+0xc8>
c0027e1e:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0027e24:	75 0b                	jne    c0027e31 <__truncdfsf2+0xbe>
c0027e26:	09 f8                	or     eax,edi
c0027e28:	74 09                	je     c0027e33 <__truncdfsf2+0xc0>
c0027e2a:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
c0027e2f:	eb 02                	jmp    c0027e33 <__truncdfsf2+0xc0>
c0027e31:	31 c0                	xor    eax,eax
c0027e33:	c1 fa 17             	sar    edx,0x17
c0027e36:	80 ca ff             	or     dl,0xff
c0027e39:	eb 0e                	jmp    c0027e49 <__truncdfsf2+0xd6>
c0027e3b:	c1 fa 1f             	sar    edx,0x1f
c0027e3e:	c1 e2 08             	shl    edx,0x8
c0027e41:	09 ca                	or     edx,ecx
c0027e43:	eb 04                	jmp    c0027e49 <__truncdfsf2+0xd6>
c0027e45:	31 d2                	xor    edx,edx
c0027e47:	31 c0                	xor    eax,eax
c0027e49:	c1 e2 17             	shl    edx,0x17
c0027e4c:	c1 e8 08             	shr    eax,0x8
c0027e4f:	09 d0                	or     eax,edx
c0027e51:	eb 3c                	jmp    c0027e8f <__truncdfsf2+0x11c>
c0027e53:	81 e9 80 03 00 00    	sub    ecx,0x380
c0027e59:	89 ca                	mov    edx,ecx
c0027e5b:	c1 fa 0b             	sar    edx,0xb
c0027e5e:	c1 e2 08             	shl    edx,0x8
c0027e61:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0027e64:	31 db                	xor    ebx,ebx
c0027e66:	85 ff                	test   edi,edi
c0027e68:	0f 95 c3             	setne  bl
c0027e6b:	09 d8                	or     eax,ebx
c0027e6d:	89 c3                	mov    ebx,eax
c0027e6f:	c1 eb 08             	shr    ebx,0x8
c0027e72:	a8 7f                	test   al,0x7f
c0027e74:	0f 95 c2             	setne  dl
c0027e77:	89 d6                	mov    esi,edx
c0027e79:	09 de                	or     esi,ebx
c0027e7b:	83 e6 01             	and    esi,0x1
c0027e7e:	c1 e8 07             	shr    eax,0x7
c0027e81:	21 f0                	and    eax,esi
c0027e83:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0027e86:	09 ca                	or     edx,ecx
c0027e88:	c1 e2 17             	shl    edx,0x17
c0027e8b:	09 da                	or     edx,ebx
c0027e8d:	01 d0                	add    eax,edx
c0027e8f:	83 c4 0c             	add    esp,0xc
c0027e92:	5b                   	pop    ebx
c0027e93:	5e                   	pop    esi
c0027e94:	5f                   	pop    edi
c0027e95:	5d                   	pop    ebp
c0027e96:	c3                   	ret    

c0027e97 <__extendsfdf2>:
c0027e97:	55                   	push   ebp
c0027e98:	89 e5                	mov    ebp,esp
c0027e9a:	57                   	push   edi
c0027e9b:	56                   	push   esi
c0027e9c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027e9f:	89 d1                	mov    ecx,edx
c0027ea1:	c1 f9 17             	sar    ecx,0x17
c0027ea4:	c1 e2 08             	shl    edx,0x8
c0027ea7:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0027ead:	89 c8                	mov    eax,ecx
c0027eaf:	80 e4 f8             	and    ah,0xf8
c0027eb2:	8d 71 01             	lea    esi,[ecx+0x1]
c0027eb5:	81 e6 fe 00 00 00    	and    esi,0xfe
c0027ebb:	75 27                	jne    c0027ee4 <__extendsfdf2+0x4d>
c0027ebd:	81 e1 ff 00 00 00    	and    ecx,0xff
c0027ec3:	75 18                	jne    c0027edd <__extendsfdf2+0x46>
c0027ec5:	85 d2                	test   edx,edx
c0027ec7:	74 20                	je     c0027ee9 <__extendsfdf2+0x52>
c0027ec9:	41                   	inc    ecx
c0027eca:	01 d2                	add    edx,edx
c0027ecc:	79 fb                	jns    c0027ec9 <__extendsfdf2+0x32>
c0027ece:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0027ed4:	29 c8                	sub    eax,ecx
c0027ed6:	05 81 03 00 00       	add    eax,0x381
c0027edb:	eb 0c                	jmp    c0027ee9 <__extendsfdf2+0x52>
c0027edd:	05 00 07 00 00       	add    eax,0x700
c0027ee2:	eb 05                	jmp    c0027ee9 <__extendsfdf2+0x52>
c0027ee4:	05 80 03 00 00       	add    eax,0x380
c0027ee9:	c1 e0 14             	shl    eax,0x14
c0027eec:	89 c1                	mov    ecx,eax
c0027eee:	89 d0                	mov    eax,edx
c0027ef0:	c1 e8 0b             	shr    eax,0xb
c0027ef3:	09 c1                	or     ecx,eax
c0027ef5:	c1 e2 15             	shl    edx,0x15
c0027ef8:	89 d0                	mov    eax,edx
c0027efa:	89 ca                	mov    edx,ecx
c0027efc:	5e                   	pop    esi
c0027efd:	5f                   	pop    edi
c0027efe:	5d                   	pop    ebp
c0027eff:	c3                   	ret    

c0027f00 <fabs>:
c0027f00:	83 ec 0c             	sub    esp,0xc
c0027f03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027f07:	89 04 24             	mov    DWORD PTR [esp],eax
c0027f0a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0027f0e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027f13:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0027f17:	dd 04 24             	fld    QWORD PTR [esp]
c0027f1a:	83 c4 0c             	add    esp,0xc
c0027f1d:	c3                   	ret    
c0027f1e:	66 90                	xchg   ax,ax

c0027f20 <lrint>:
c0027f20:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c0027f24:	83 ec 04             	sub    esp,0x4
c0027f27:	db 1c 24             	fistp  DWORD PTR [esp]
c0027f2a:	58                   	pop    eax
c0027f2b:	c3                   	ret    

c0027f2c <lrintf>:
c0027f2c:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c0027f30:	83 ec 04             	sub    esp,0x4
c0027f33:	db 1c 24             	fistp  DWORD PTR [esp]
c0027f36:	58                   	pop    eax
c0027f37:	c3                   	ret    

Disassembly of section .init:

c0027f38 <_init>:
c0027f38:	55                   	push   ebp
c0027f39:	89 e5                	mov    ebp,esp
c0027f3b:	e8 d8 81 fd ff       	call   c0000118 <frame_dummy>
c0027f40:	e8 63 e0 ff ff       	call   c0025fa8 <__do_global_ctors_aux>
c0027f45:	5d                   	pop    ebp
c0027f46:	c3                   	ret    

Disassembly of section .fini:

c0027f47 <_fini>:
c0027f47:	55                   	push   ebp
c0027f48:	89 e5                	mov    ebp,esp
c0027f4a:	e8 59 81 fd ff       	call   c00000a8 <__do_global_dtors_aux>
c0027f4f:	5d                   	pop    ebp
c0027f50:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0027f52 <Computer::~Computer()>:
c0027f52:	83 ec 0c             	sub    esp,0xc
c0027f55:	ba 88 9a 02 c0       	mov    edx,0xc0029a88
c0027f5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027f5e:	89 10                	mov    DWORD PTR [eax],edx
c0027f60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027f64:	83 ec 0c             	sub    esp,0xc
c0027f67:	50                   	push   eax
c0027f68:	e8 a1 be fe ff       	call   c0013e0e <Device::~Device()>
c0027f6d:	83 c4 10             	add    esp,0x10
c0027f70:	90                   	nop
c0027f71:	83 c4 0c             	add    esp,0xc
c0027f74:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c0027f76 <Computer::~Computer()>:
c0027f76:	83 ec 0c             	sub    esp,0xc
c0027f79:	83 ec 0c             	sub    esp,0xc
c0027f7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027f80:	e8 cd ff ff ff       	call   c0027f52 <Computer::~Computer()>
c0027f85:	83 c4 10             	add    esp,0x10
c0027f88:	83 ec 08             	sub    esp,0x8
c0027f8b:	68 ec 01 00 00       	push   0x1ec
c0027f90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027f94:	e8 9c aa fe ff       	call   c0012a35 <operator delete(void*, unsigned long)>
c0027f99:	83 c4 10             	add    esp,0x10
c0027f9c:	83 c4 0c             	add    esp,0xc
c0027f9f:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0027fa0 <idleCommon()>:
c0027fa0:	83 ec 0c             	sub    esp,0xc
c0027fa3:	e8 16 57 ff ff       	call   c001d6be <lockScheduler()>
c0027fa8:	e8 4d 5a ff ff       	call   c001d9fa <schedule()>
c0027fad:	83 c4 0c             	add    esp,0xc
c0027fb0:	e9 0b 57 ff ff       	jmp    c001d6c0 <unlockScheduler()>

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c0027fb6 <LinkedList<UnixFile>::~LinkedList()>:
c0027fb6:	90                   	nop
c0027fb7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c0027fb8 <LinkedList<UnixFile>::LinkedList()>:
c0027fb8:	83 ec 0c             	sub    esp,0xc
c0027fbb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027fbf:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0027fc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027fc9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0027fd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027fd4:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0027fdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027fdf:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0027fe5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027fe9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0027ff0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027ff4:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0027ffb:	83 ec 0c             	sub    esp,0xc
c0027ffe:	68 46 9d 02 c0       	push   0xc0029d46
c0028003:	e8 0d ab fe ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c0028008:	83 c4 10             	add    esp,0x10
c002800b:	90                   	nop
c002800c:	83 c4 0c             	add    esp,0xc
c002800f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c0028010 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c0028010:	83 ec 0c             	sub    esp,0xc
c0028013:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028018:	75 10                	jne    c002802a <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c002801a:	83 ec 0c             	sub    esp,0xc
c002801d:	68 60 9d 02 c0       	push   0xc0029d60
c0028022:	e8 08 20 ff ff       	call   c001a02f <Krnl::panic(char const*)>
c0028027:	83 c4 10             	add    esp,0x10
c002802a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002802e:	8b 00                	mov    eax,DWORD PTR [eax]
c0028030:	85 c0                	test   eax,eax
c0028032:	74 34                	je     c0028068 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0028034:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028038:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002803b:	85 c0                	test   eax,eax
c002803d:	74 29                	je     c0028068 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c002803f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028043:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028046:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002804a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002804d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028051:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028055:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028058:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002805c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002805f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028066:	eb 65                	jmp    c00280cd <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0028068:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002806c:	8b 00                	mov    eax,DWORD PTR [eax]
c002806e:	85 c0                	test   eax,eax
c0028070:	75 4b                	jne    c00280bd <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0028072:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028076:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028079:	85 c0                	test   eax,eax
c002807b:	75 40                	jne    c00280bd <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c002807d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028081:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028085:	89 10                	mov    DWORD PTR [eax],edx
c0028087:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002808b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002808f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028092:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028096:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028099:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00280a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00280a4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00280a7:	85 c0                	test   eax,eax
c00280a9:	74 22                	je     c00280cd <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00280ab:	83 ec 0c             	sub    esp,0xc
c00280ae:	68 82 9d 02 c0       	push   0xc0029d82
c00280b3:	e8 77 1f ff ff       	call   c001a02f <Krnl::panic(char const*)>
c00280b8:	83 c4 10             	add    esp,0x10
c00280bb:	eb 10                	jmp    c00280cd <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00280bd:	83 ec 0c             	sub    esp,0xc
c00280c0:	68 8c 9d 02 c0       	push   0xc0029d8c
c00280c5:	e8 65 1f ff ff       	call   c001a02f <Krnl::panic(char const*)>
c00280ca:	83 c4 10             	add    esp,0x10
c00280cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00280d1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00280d4:	8d 50 01             	lea    edx,[eax+0x1]
c00280d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00280db:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00280de:	90                   	nop
c00280df:	83 c4 0c             	add    esp,0xc
c00280e2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c00280e4 <LinkedList<UnixFile>::getFirstElement()>:
c00280e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00280e8:	8b 00                	mov    eax,DWORD PTR [eax]
c00280ea:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c00280ec <LinkedList<UnixFile>::removeFirst()>:
c00280ec:	83 ec 0c             	sub    esp,0xc
c00280ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00280f3:	8b 00                	mov    eax,DWORD PTR [eax]
c00280f5:	85 c0                	test   eax,eax
c00280f7:	75 12                	jne    c002810b <LinkedList<UnixFile>::removeFirst()+0x1f>
c00280f9:	83 ec 0c             	sub    esp,0xc
c00280fc:	68 98 9d 02 c0       	push   0xc0029d98
c0028101:	e8 29 1f ff ff       	call   c001a02f <Krnl::panic(char const*)>
c0028106:	83 c4 10             	add    esp,0x10
c0028109:	eb 7e                	jmp    c0028189 <LinkedList<UnixFile>::removeFirst()+0x9d>
c002810b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002810f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028112:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028115:	85 c0                	test   eax,eax
c0028117:	74 10                	je     c0028129 <LinkedList<UnixFile>::removeFirst()+0x3d>
c0028119:	83 ec 0c             	sub    esp,0xc
c002811c:	68 e3 9d 02 c0       	push   0xc0029de3
c0028121:	e8 09 1f ff ff       	call   c001a02f <Krnl::panic(char const*)>
c0028126:	83 c4 10             	add    esp,0x10
c0028129:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002812d:	8b 00                	mov    eax,DWORD PTR [eax]
c002812f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028132:	85 c0                	test   eax,eax
c0028134:	75 33                	jne    c0028169 <LinkedList<UnixFile>::removeFirst()+0x7d>
c0028136:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002813a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028140:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028144:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002814b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002814f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028152:	83 f8 01             	cmp    eax,0x1
c0028155:	74 21                	je     c0028178 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0028157:	83 ec 0c             	sub    esp,0xc
c002815a:	68 bc 9d 02 c0       	push   0xc0029dbc
c002815f:	e8 cb 1e ff ff       	call   c001a02f <Krnl::panic(char const*)>
c0028164:	83 c4 10             	add    esp,0x10
c0028167:	eb 0f                	jmp    c0028178 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0028169:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002816d:	8b 00                	mov    eax,DWORD PTR [eax]
c002816f:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0028172:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028176:	89 10                	mov    DWORD PTR [eax],edx
c0028178:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002817c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002817f:	8d 50 ff             	lea    edx,[eax-0x1]
c0028182:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028186:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028189:	83 c4 0c             	add    esp,0xc
c002818c:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c002818e <LinkedList<UnixFile>::getNext(UnixFile*)>:
c002818e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028192:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028195:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c0028196 <DriverlessDevice::~DriverlessDevice()>:
c0028196:	ba c4 a4 02 c0       	mov    edx,0xc002a4c4
c002819b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002819f:	89 10                	mov    DWORD PTR [eax],edx
c00281a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00281a5:	50                   	push   eax
c00281a6:	e8 63 bc fe ff       	call   c0013e0e <Device::~Device()>
c00281ab:	83 c4 04             	add    esp,0x4
c00281ae:	90                   	nop
c00281af:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c00281b0 <DriverlessDevice::~DriverlessDevice()>:
c00281b0:	83 ec 0c             	sub    esp,0xc
c00281b3:	83 ec 0c             	sub    esp,0xc
c00281b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00281ba:	e8 d7 ff ff ff       	call   c0028196 <DriverlessDevice::~DriverlessDevice()>
c00281bf:	83 c4 10             	add    esp,0x10
c00281c2:	83 ec 08             	sub    esp,0x8
c00281c5:	68 58 01 00 00       	push   0x158
c00281ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00281ce:	e8 62 a8 fe ff       	call   c0012a35 <operator delete(void*, unsigned long)>
c00281d3:	83 c4 10             	add    esp,0x10
c00281d6:	83 c4 0c             	add    esp,0xc
c00281d9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c00281da <LinkedList<Device>::addElement(Device*)>:
c00281da:	83 ec 0c             	sub    esp,0xc
c00281dd:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00281e2:	75 10                	jne    c00281f4 <LinkedList<Device>::addElement(Device*)+0x1a>
c00281e4:	83 ec 0c             	sub    esp,0xc
c00281e7:	68 60 9d 02 c0       	push   0xc0029d60
c00281ec:	e8 3e 1e ff ff       	call   c001a02f <Krnl::panic(char const*)>
c00281f1:	83 c4 10             	add    esp,0x10
c00281f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00281f8:	8b 00                	mov    eax,DWORD PTR [eax]
c00281fa:	85 c0                	test   eax,eax
c00281fc:	74 3a                	je     c0028238 <LinkedList<Device>::addElement(Device*)+0x5e>
c00281fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028202:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028205:	85 c0                	test   eax,eax
c0028207:	74 2f                	je     c0028238 <LinkedList<Device>::addElement(Device*)+0x5e>
c0028209:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002820d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028210:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028214:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c002821a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002821e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028222:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028225:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028229:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002822c:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0028236:	eb 68                	jmp    c00282a0 <LinkedList<Device>::addElement(Device*)+0xc6>
c0028238:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002823c:	8b 00                	mov    eax,DWORD PTR [eax]
c002823e:	85 c0                	test   eax,eax
c0028240:	75 4e                	jne    c0028290 <LinkedList<Device>::addElement(Device*)+0xb6>
c0028242:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028246:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028249:	85 c0                	test   eax,eax
c002824b:	75 43                	jne    c0028290 <LinkedList<Device>::addElement(Device*)+0xb6>
c002824d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028251:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028255:	89 10                	mov    DWORD PTR [eax],edx
c0028257:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002825b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002825f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028262:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028266:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028269:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0028273:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028277:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002827a:	85 c0                	test   eax,eax
c002827c:	74 22                	je     c00282a0 <LinkedList<Device>::addElement(Device*)+0xc6>
c002827e:	83 ec 0c             	sub    esp,0xc
c0028281:	68 82 9d 02 c0       	push   0xc0029d82
c0028286:	e8 a4 1d ff ff       	call   c001a02f <Krnl::panic(char const*)>
c002828b:	83 c4 10             	add    esp,0x10
c002828e:	eb 10                	jmp    c00282a0 <LinkedList<Device>::addElement(Device*)+0xc6>
c0028290:	83 ec 0c             	sub    esp,0xc
c0028293:	68 8c 9d 02 c0       	push   0xc0029d8c
c0028298:	e8 92 1d ff ff       	call   c001a02f <Krnl::panic(char const*)>
c002829d:	83 c4 10             	add    esp,0x10
c00282a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00282a4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00282a7:	8d 50 01             	lea    edx,[eax+0x1]
c00282aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00282ae:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00282b1:	90                   	nop
c00282b2:	83 c4 0c             	add    esp,0xc
c00282b5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c00282b6 <LinkedList<Device>::LinkedList()>:
c00282b6:	83 ec 0c             	sub    esp,0xc
c00282b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00282bd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00282c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00282c7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00282ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00282d2:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00282d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00282dd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00282e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00282e7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00282ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00282f2:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00282f9:	83 ec 0c             	sub    esp,0xc
c00282fc:	68 46 9d 02 c0       	push   0xc0029d46
c0028301:	e8 0f a8 fe ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c0028306:	83 c4 10             	add    esp,0x10
c0028309:	90                   	nop
c002830a:	83 c4 0c             	add    esp,0xc
c002830d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c002830e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c002830e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028312:	8b 00                	mov    eax,DWORD PTR [eax]
c0028314:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c0028316 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c0028316:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002831a:	8b 00                	mov    eax,DWORD PTR [eax]
c002831c:	85 c0                	test   eax,eax
c002831e:	75 0e                	jne    c002832e <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0028320:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028324:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028327:	85 c0                	test   eax,eax
c0028329:	75 03                	jne    c002832e <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c002832b:	b0 01                	mov    al,0x1
c002832d:	c3                   	ret    
c002832e:	b0 00                	mov    al,0x0
c0028330:	90                   	nop
c0028331:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c0028332 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c0028332:	83 ec 0c             	sub    esp,0xc
c0028335:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028339:	8b 00                	mov    eax,DWORD PTR [eax]
c002833b:	85 c0                	test   eax,eax
c002833d:	75 15                	jne    c0028354 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c002833f:	83 ec 0c             	sub    esp,0xc
c0028342:	68 98 9d 02 c0       	push   0xc0029d98
c0028347:	e8 e3 1c ff ff       	call   c001a02f <Krnl::panic(char const*)>
c002834c:	83 c4 10             	add    esp,0x10
c002834f:	e9 88 00 00 00       	jmp    c00283dc <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c0028354:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028358:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002835b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002835e:	85 c0                	test   eax,eax
c0028360:	0f 95 c0             	setne  al
c0028363:	84 c0                	test   al,al
c0028365:	74 10                	je     c0028377 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c0028367:	83 ec 0c             	sub    esp,0xc
c002836a:	68 e3 9d 02 c0       	push   0xc0029de3
c002836f:	e8 bb 1c ff ff       	call   c001a02f <Krnl::panic(char const*)>
c0028374:	83 c4 10             	add    esp,0x10
c0028377:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002837b:	8b 00                	mov    eax,DWORD PTR [eax]
c002837d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028380:	85 c0                	test   eax,eax
c0028382:	0f 94 c0             	sete   al
c0028385:	84 c0                	test   al,al
c0028387:	74 33                	je     c00283bc <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c0028389:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002838d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028393:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028397:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002839e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00283a2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00283a5:	83 f8 01             	cmp    eax,0x1
c00283a8:	74 21                	je     c00283cb <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c00283aa:	83 ec 0c             	sub    esp,0xc
c00283ad:	68 bc 9d 02 c0       	push   0xc0029dbc
c00283b2:	e8 78 1c ff ff       	call   c001a02f <Krnl::panic(char const*)>
c00283b7:	83 c4 10             	add    esp,0x10
c00283ba:	eb 0f                	jmp    c00283cb <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c00283bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00283c0:	8b 00                	mov    eax,DWORD PTR [eax]
c00283c2:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00283c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00283c9:	89 10                	mov    DWORD PTR [eax],edx
c00283cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00283cf:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00283d2:	8d 50 ff             	lea    edx,[eax-0x1]
c00283d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00283d9:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00283dc:	83 c4 0c             	add    esp,0xc
c00283df:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c00283e0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c00283e0:	83 ec 0c             	sub    esp,0xc
c00283e3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00283e8:	75 10                	jne    c00283fa <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c00283ea:	83 ec 0c             	sub    esp,0xc
c00283ed:	68 60 9d 02 c0       	push   0xc0029d60
c00283f2:	e8 38 1c ff ff       	call   c001a02f <Krnl::panic(char const*)>
c00283f7:	83 c4 10             	add    esp,0x10
c00283fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00283fe:	8b 00                	mov    eax,DWORD PTR [eax]
c0028400:	85 c0                	test   eax,eax
c0028402:	74 34                	je     c0028438 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0028404:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028408:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002840b:	85 c0                	test   eax,eax
c002840d:	74 29                	je     c0028438 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c002840f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028413:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028416:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002841a:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c002841d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028421:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028425:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028428:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002842c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002842f:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028436:	eb 65                	jmp    c002849d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028438:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002843c:	8b 00                	mov    eax,DWORD PTR [eax]
c002843e:	85 c0                	test   eax,eax
c0028440:	75 4b                	jne    c002848d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0028442:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028446:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028449:	85 c0                	test   eax,eax
c002844b:	75 40                	jne    c002848d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c002844d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028451:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028455:	89 10                	mov    DWORD PTR [eax],edx
c0028457:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002845b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002845f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028462:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028466:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028469:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028470:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028474:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028477:	85 c0                	test   eax,eax
c0028479:	74 22                	je     c002849d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c002847b:	83 ec 0c             	sub    esp,0xc
c002847e:	68 82 9d 02 c0       	push   0xc0029d82
c0028483:	e8 a7 1b ff ff       	call   c001a02f <Krnl::panic(char const*)>
c0028488:	83 c4 10             	add    esp,0x10
c002848b:	eb 10                	jmp    c002849d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c002848d:	83 ec 0c             	sub    esp,0xc
c0028490:	68 8c 9d 02 c0       	push   0xc0029d8c
c0028495:	e8 95 1b ff ff       	call   c001a02f <Krnl::panic(char const*)>
c002849a:	83 c4 10             	add    esp,0x10
c002849d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284a1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00284a4:	8d 50 01             	lea    edx,[eax+0x1]
c00284a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284ab:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00284ae:	90                   	nop
c00284af:	83 c4 0c             	add    esp,0xc
c00284b2:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c00284b4 <ACPI::~ACPI()>:
c00284b4:	83 ec 0c             	sub    esp,0xc
c00284b7:	ba 0c ae 02 c0       	mov    edx,0xc002ae0c
c00284bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284c0:	89 10                	mov    DWORD PTR [eax],edx
c00284c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284c6:	83 ec 0c             	sub    esp,0xc
c00284c9:	50                   	push   eax
c00284ca:	e8 3f b9 fe ff       	call   c0013e0e <Device::~Device()>
c00284cf:	83 c4 10             	add    esp,0x10
c00284d2:	90                   	nop
c00284d3:	83 c4 0c             	add    esp,0xc
c00284d6:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c00284d8 <ACPI::~ACPI()>:
c00284d8:	83 ec 0c             	sub    esp,0xc
c00284db:	83 ec 0c             	sub    esp,0xc
c00284de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00284e2:	e8 cd ff ff ff       	call   c00284b4 <ACPI::~ACPI()>
c00284e7:	83 c4 10             	add    esp,0x10
c00284ea:	83 ec 08             	sub    esp,0x8
c00284ed:	68 68 12 00 00       	push   0x1268
c00284f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00284f6:	e8 3a a5 fe ff       	call   c0012a35 <operator delete(void*, unsigned long)>
c00284fb:	83 c4 10             	add    esp,0x10
c00284fe:	83 c4 0c             	add    esp,0xc
c0028501:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c0028502 <CPU::~CPU()>:
c0028502:	83 ec 0c             	sub    esp,0xc
c0028505:	ba fc b1 02 c0       	mov    edx,0xc002b1fc
c002850a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002850e:	89 10                	mov    DWORD PTR [eax],edx
c0028510:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028514:	83 ec 0c             	sub    esp,0xc
c0028517:	50                   	push   eax
c0028518:	e8 f1 b8 fe ff       	call   c0013e0e <Device::~Device()>
c002851d:	83 c4 10             	add    esp,0x10
c0028520:	90                   	nop
c0028521:	83 c4 0c             	add    esp,0xc
c0028524:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0028526 <CPU::~CPU()>:
c0028526:	83 ec 0c             	sub    esp,0xc
c0028529:	83 ec 0c             	sub    esp,0xc
c002852c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028530:	e8 cd ff ff ff       	call   c0028502 <CPU::~CPU()>
c0028535:	83 c4 10             	add    esp,0x10
c0028538:	83 ec 08             	sub    esp,0x8
c002853b:	68 98 11 00 00       	push   0x1198
c0028540:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028544:	e8 ec a4 fe ff       	call   c0012a35 <operator delete(void*, unsigned long)>
c0028549:	83 c4 10             	add    esp,0x10
c002854c:	83 c4 0c             	add    esp,0xc
c002854f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0028550 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0028550:	90                   	nop
c0028551:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0028552 <ThreadControlBlock::ThreadControlBlock()>:
c0028552:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028556:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c002855d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028561:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0028568:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002856c:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0028573:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028577:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c002857e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028582:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0028586:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002858a:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c002858e:	90                   	nop
c002858f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c0028590 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c0028590:	83 ec 0c             	sub    esp,0xc
c0028593:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028597:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002859d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285a1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00285a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285ac:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00285b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285b7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00285bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285c1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00285c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285cc:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00285d3:	83 ec 0c             	sub    esp,0xc
c00285d6:	68 46 9d 02 c0       	push   0xc0029d46
c00285db:	e8 35 a5 fe ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c00285e0:	83 c4 10             	add    esp,0x10
c00285e3:	90                   	nop
c00285e4:	83 c4 0c             	add    esp,0xc
c00285e7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c00285e8 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c00285e8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00285ec:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00285ef:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c00285f0 <Vm::_FPUState::_FPUState()>:
c00285f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00285f4:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c00285fb:	90                   	nop
c00285fc:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c00285fe <PCI::~PCI()>:
c00285fe:	83 ec 0c             	sub    esp,0xc
c0028601:	ba b8 c1 02 c0       	mov    edx,0xc002c1b8
c0028606:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002860a:	89 10                	mov    DWORD PTR [eax],edx
c002860c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028610:	83 ec 0c             	sub    esp,0xc
c0028613:	50                   	push   eax
c0028614:	e8 cd b1 fe ff       	call   c00137e6 <Bus::~Bus()>
c0028619:	83 c4 10             	add    esp,0x10
c002861c:	90                   	nop
c002861d:	83 c4 0c             	add    esp,0xc
c0028620:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c0028622 <PCI::~PCI()>:
c0028622:	83 ec 0c             	sub    esp,0xc
c0028625:	83 ec 0c             	sub    esp,0xc
c0028628:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002862c:	e8 cd ff ff ff       	call   c00285fe <PCI::~PCI()>
c0028631:	83 c4 10             	add    esp,0x10
c0028634:	83 ec 08             	sub    esp,0x8
c0028637:	68 58 01 00 00       	push   0x158
c002863c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028640:	e8 f0 a3 fe ff       	call   c0012a35 <operator delete(void*, unsigned long)>
c0028645:	83 c4 10             	add    esp,0x10
c0028648:	83 c4 0c             	add    esp,0xc
c002864b:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c002864c <IDE::~IDE()>:
c002864c:	83 ec 0c             	sub    esp,0xc
c002864f:	ba 1c c4 02 c0       	mov    edx,0xc002c41c
c0028654:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028658:	89 10                	mov    DWORD PTR [eax],edx
c002865a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002865e:	83 ec 0c             	sub    esp,0xc
c0028661:	50                   	push   eax
c0028662:	e8 97 bc fe ff       	call   c00142fe <HardDiskController::~HardDiskController()>
c0028667:	83 c4 10             	add    esp,0x10
c002866a:	90                   	nop
c002866b:	83 c4 0c             	add    esp,0xc
c002866e:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0028670 <IDE::~IDE()>:
c0028670:	83 ec 0c             	sub    esp,0xc
c0028673:	83 ec 0c             	sub    esp,0xc
c0028676:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002867a:	e8 cd ff ff ff       	call   c002864c <IDE::~IDE()>
c002867f:	83 c4 10             	add    esp,0x10
c0028682:	83 ec 08             	sub    esp,0x8
c0028685:	68 70 02 00 00       	push   0x270
c002868a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002868e:	e8 a2 a3 fe ff       	call   c0012a35 <operator delete(void*, unsigned long)>
c0028693:	83 c4 10             	add    esp,0x10
c0028696:	83 c4 0c             	add    esp,0xc
c0028699:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c002869a <SATABus::~SATABus()>:
c002869a:	83 ec 0c             	sub    esp,0xc
c002869d:	ba fc c4 02 c0       	mov    edx,0xc002c4fc
c00286a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286a6:	89 10                	mov    DWORD PTR [eax],edx
c00286a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286ac:	83 ec 0c             	sub    esp,0xc
c00286af:	50                   	push   eax
c00286b0:	e8 49 bc fe ff       	call   c00142fe <HardDiskController::~HardDiskController()>
c00286b5:	83 c4 10             	add    esp,0x10
c00286b8:	90                   	nop
c00286b9:	83 c4 0c             	add    esp,0xc
c00286bc:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c00286be <SATABus::~SATABus()>:
c00286be:	83 ec 0c             	sub    esp,0xc
c00286c1:	83 ec 0c             	sub    esp,0xc
c00286c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00286c8:	e8 cd ff ff ff       	call   c002869a <SATABus::~SATABus()>
c00286cd:	83 c4 10             	add    esp,0x10
c00286d0:	83 ec 08             	sub    esp,0x8
c00286d3:	68 64 01 00 00       	push   0x164
c00286d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00286dc:	e8 54 a3 fe ff       	call   c0012a35 <operator delete(void*, unsigned long)>
c00286e1:	83 c4 10             	add    esp,0x10
c00286e4:	83 c4 0c             	add    esp,0xc
c00286e7:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c00286e8 <ATA::~ATA()>:
c00286e8:	83 ec 0c             	sub    esp,0xc
c00286eb:	ba 48 c5 02 c0       	mov    edx,0xc002c548
c00286f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286f4:	89 10                	mov    DWORD PTR [eax],edx
c00286f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286fa:	83 ec 0c             	sub    esp,0xc
c00286fd:	50                   	push   eax
c00286fe:	e8 ed bc fe ff       	call   c00143f0 <PhysicalDisk::~PhysicalDisk()>
c0028703:	83 c4 10             	add    esp,0x10
c0028706:	90                   	nop
c0028707:	83 c4 0c             	add    esp,0xc
c002870a:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c002870c <ATA::~ATA()>:
c002870c:	83 ec 0c             	sub    esp,0xc
c002870f:	83 ec 0c             	sub    esp,0xc
c0028712:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028716:	e8 cd ff ff ff       	call   c00286e8 <ATA::~ATA()>
c002871b:	83 c4 10             	add    esp,0x10
c002871e:	83 ec 08             	sub    esp,0x8
c0028721:	68 7c 01 00 00       	push   0x17c
c0028726:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002872a:	e8 06 a3 fe ff       	call   c0012a35 <operator delete(void*, unsigned long)>
c002872f:	83 c4 10             	add    esp,0x10
c0028732:	83 c4 0c             	add    esp,0xc
c0028735:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0028736 <ATAPI::~ATAPI()>:
c0028736:	83 ec 0c             	sub    esp,0xc
c0028739:	ba 80 c5 02 c0       	mov    edx,0xc002c580
c002873e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028742:	89 10                	mov    DWORD PTR [eax],edx
c0028744:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028748:	83 ec 0c             	sub    esp,0xc
c002874b:	50                   	push   eax
c002874c:	e8 9f bc fe ff       	call   c00143f0 <PhysicalDisk::~PhysicalDisk()>
c0028751:	83 c4 10             	add    esp,0x10
c0028754:	90                   	nop
c0028755:	83 c4 0c             	add    esp,0xc
c0028758:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c002875a <ATAPI::~ATAPI()>:
c002875a:	83 ec 0c             	sub    esp,0xc
c002875d:	83 ec 0c             	sub    esp,0xc
c0028760:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028764:	e8 cd ff ff ff       	call   c0028736 <ATAPI::~ATAPI()>
c0028769:	83 c4 10             	add    esp,0x10
c002876c:	83 ec 08             	sub    esp,0x8
c002876f:	68 80 01 00 00       	push   0x180
c0028774:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028778:	e8 b8 a2 fe ff       	call   c0012a35 <operator delete(void*, unsigned long)>
c002877d:	83 c4 10             	add    esp,0x10
c0028780:	83 c4 0c             	add    esp,0xc
c0028783:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0028784 <SATA::~SATA()>:
c0028784:	83 ec 0c             	sub    esp,0xc
c0028787:	ba 34 c6 02 c0       	mov    edx,0xc002c634
c002878c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028790:	89 10                	mov    DWORD PTR [eax],edx
c0028792:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028796:	83 ec 0c             	sub    esp,0xc
c0028799:	50                   	push   eax
c002879a:	e8 51 bc fe ff       	call   c00143f0 <PhysicalDisk::~PhysicalDisk()>
c002879f:	83 c4 10             	add    esp,0x10
c00287a2:	90                   	nop
c00287a3:	83 c4 0c             	add    esp,0xc
c00287a6:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c00287a8 <SATA::~SATA()>:
c00287a8:	83 ec 0c             	sub    esp,0xc
c00287ab:	83 ec 0c             	sub    esp,0xc
c00287ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00287b2:	e8 cd ff ff ff       	call   c0028784 <SATA::~SATA()>
c00287b7:	83 c4 10             	add    esp,0x10
c00287ba:	83 ec 08             	sub    esp,0x8
c00287bd:	68 7c 01 00 00       	push   0x17c
c00287c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00287c6:	e8 6a a2 fe ff       	call   c0012a35 <operator delete(void*, unsigned long)>
c00287cb:	83 c4 10             	add    esp,0x10
c00287ce:	83 c4 0c             	add    esp,0xc
c00287d1:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c00287d2 <SATAPI::~SATAPI()>:
c00287d2:	83 ec 0c             	sub    esp,0xc
c00287d5:	ba 10 c7 02 c0       	mov    edx,0xc002c710
c00287da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287de:	89 10                	mov    DWORD PTR [eax],edx
c00287e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287e4:	83 ec 0c             	sub    esp,0xc
c00287e7:	50                   	push   eax
c00287e8:	e8 03 bc fe ff       	call   c00143f0 <PhysicalDisk::~PhysicalDisk()>
c00287ed:	83 c4 10             	add    esp,0x10
c00287f0:	90                   	nop
c00287f1:	83 c4 0c             	add    esp,0xc
c00287f4:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c00287f6 <SATAPI::~SATAPI()>:
c00287f6:	83 ec 0c             	sub    esp,0xc
c00287f9:	83 ec 0c             	sub    esp,0xc
c00287fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028800:	e8 cd ff ff ff       	call   c00287d2 <SATAPI::~SATAPI()>
c0028805:	83 c4 10             	add    esp,0x10
c0028808:	83 ec 08             	sub    esp,0x8
c002880b:	68 80 01 00 00       	push   0x180
c0028810:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028814:	e8 1c a2 fe ff       	call   c0012a35 <operator delete(void*, unsigned long)>
c0028819:	83 c4 10             	add    esp,0x10
c002881c:	83 c4 0c             	add    esp,0xc
c002881f:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c0028820 <AVX::~AVX()>:
c0028820:	83 ec 0c             	sub    esp,0xc
c0028823:	ba 50 c7 02 c0       	mov    edx,0xc002c750
c0028828:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002882c:	89 10                	mov    DWORD PTR [eax],edx
c002882e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028832:	83 ec 0c             	sub    esp,0xc
c0028835:	50                   	push   eax
c0028836:	e8 39 bc fe ff       	call   c0014474 <FPU::~FPU()>
c002883b:	83 c4 10             	add    esp,0x10
c002883e:	90                   	nop
c002883f:	83 c4 0c             	add    esp,0xc
c0028842:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c0028844 <AVX::~AVX()>:
c0028844:	83 ec 0c             	sub    esp,0xc
c0028847:	83 ec 0c             	sub    esp,0xc
c002884a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002884e:	e8 cd ff ff ff       	call   c0028820 <AVX::~AVX()>
c0028853:	83 c4 10             	add    esp,0x10
c0028856:	83 ec 08             	sub    esp,0x8
c0028859:	68 58 01 00 00       	push   0x158
c002885e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028862:	e8 ce a1 fe ff       	call   c0012a35 <operator delete(void*, unsigned long)>
c0028867:	83 c4 10             	add    esp,0x10
c002886a:	83 c4 0c             	add    esp,0xc
c002886d:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c002886e <MMX::~MMX()>:
c002886e:	83 ec 0c             	sub    esp,0xc
c0028871:	ba 90 c7 02 c0       	mov    edx,0xc002c790
c0028876:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002887a:	89 10                	mov    DWORD PTR [eax],edx
c002887c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028880:	83 ec 0c             	sub    esp,0xc
c0028883:	50                   	push   eax
c0028884:	e8 eb bb fe ff       	call   c0014474 <FPU::~FPU()>
c0028889:	83 c4 10             	add    esp,0x10
c002888c:	90                   	nop
c002888d:	83 c4 0c             	add    esp,0xc
c0028890:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c0028892 <MMX::~MMX()>:
c0028892:	83 ec 0c             	sub    esp,0xc
c0028895:	83 ec 0c             	sub    esp,0xc
c0028898:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002889c:	e8 cd ff ff ff       	call   c002886e <MMX::~MMX()>
c00288a1:	83 c4 10             	add    esp,0x10
c00288a4:	83 ec 08             	sub    esp,0x8
c00288a7:	68 58 01 00 00       	push   0x158
c00288ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00288b0:	e8 80 a1 fe ff       	call   c0012a35 <operator delete(void*, unsigned long)>
c00288b5:	83 c4 10             	add    esp,0x10
c00288b8:	83 c4 0c             	add    esp,0xc
c00288bb:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c00288bc <SSE::~SSE()>:
c00288bc:	83 ec 0c             	sub    esp,0xc
c00288bf:	ba d0 c7 02 c0       	mov    edx,0xc002c7d0
c00288c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288c8:	89 10                	mov    DWORD PTR [eax],edx
c00288ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288ce:	83 ec 0c             	sub    esp,0xc
c00288d1:	50                   	push   eax
c00288d2:	e8 9d bb fe ff       	call   c0014474 <FPU::~FPU()>
c00288d7:	83 c4 10             	add    esp,0x10
c00288da:	90                   	nop
c00288db:	83 c4 0c             	add    esp,0xc
c00288de:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c00288e0 <SSE::~SSE()>:
c00288e0:	83 ec 0c             	sub    esp,0xc
c00288e3:	83 ec 0c             	sub    esp,0xc
c00288e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00288ea:	e8 cd ff ff ff       	call   c00288bc <SSE::~SSE()>
c00288ef:	83 c4 10             	add    esp,0x10
c00288f2:	83 ec 08             	sub    esp,0x8
c00288f5:	68 58 01 00 00       	push   0x158
c00288fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00288fe:	e8 32 a1 fe ff       	call   c0012a35 <operator delete(void*, unsigned long)>
c0028903:	83 c4 10             	add    esp,0x10
c0028906:	83 c4 0c             	add    esp,0xc
c0028909:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c002890a <x87::~x87()>:
c002890a:	83 ec 0c             	sub    esp,0xc
c002890d:	ba 10 c8 02 c0       	mov    edx,0xc002c810
c0028912:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028916:	89 10                	mov    DWORD PTR [eax],edx
c0028918:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002891c:	83 ec 0c             	sub    esp,0xc
c002891f:	50                   	push   eax
c0028920:	e8 4f bb fe ff       	call   c0014474 <FPU::~FPU()>
c0028925:	83 c4 10             	add    esp,0x10
c0028928:	90                   	nop
c0028929:	83 c4 0c             	add    esp,0xc
c002892c:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c002892e <x87::~x87()>:
c002892e:	83 ec 0c             	sub    esp,0xc
c0028931:	83 ec 0c             	sub    esp,0xc
c0028934:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028938:	e8 cd ff ff ff       	call   c002890a <x87::~x87()>
c002893d:	83 c4 10             	add    esp,0x10
c0028940:	83 ec 08             	sub    esp,0x8
c0028943:	68 58 01 00 00       	push   0x158
c0028948:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002894c:	e8 e4 a0 fe ff       	call   c0012a35 <operator delete(void*, unsigned long)>
c0028951:	83 c4 10             	add    esp,0x10
c0028954:	83 c4 0c             	add    esp,0xc
c0028957:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0028958 <IOAPIC::~IOAPIC()>:
c0028958:	83 ec 0c             	sub    esp,0xc
c002895b:	ba 68 c9 02 c0       	mov    edx,0xc002c968
c0028960:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028964:	89 10                	mov    DWORD PTR [eax],edx
c0028966:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002896a:	83 ec 0c             	sub    esp,0xc
c002896d:	50                   	push   eax
c002896e:	e8 9b b4 fe ff       	call   c0013e0e <Device::~Device()>
c0028973:	83 c4 10             	add    esp,0x10
c0028976:	90                   	nop
c0028977:	83 c4 0c             	add    esp,0xc
c002897a:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c002897c <IOAPIC::~IOAPIC()>:
c002897c:	83 ec 0c             	sub    esp,0xc
c002897f:	83 ec 0c             	sub    esp,0xc
c0028982:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028986:	e8 cd ff ff ff       	call   c0028958 <IOAPIC::~IOAPIC()>
c002898b:	83 c4 10             	add    esp,0x10
c002898e:	83 ec 08             	sub    esp,0x8
c0028991:	68 68 01 00 00       	push   0x168
c0028996:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002899a:	e8 96 a0 fe ff       	call   c0012a35 <operator delete(void*, unsigned long)>
c002899f:	83 c4 10             	add    esp,0x10
c00289a2:	83 c4 0c             	add    esp,0xc
c00289a5:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c00289a6 <APIC::~APIC()>:
c00289a6:	83 ec 0c             	sub    esp,0xc
c00289a9:	ba 20 c9 02 c0       	mov    edx,0xc002c920
c00289ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289b2:	89 10                	mov    DWORD PTR [eax],edx
c00289b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289b8:	83 ec 0c             	sub    esp,0xc
c00289bb:	50                   	push   eax
c00289bc:	e8 7d bf fe ff       	call   c001493e <InterruptController::~InterruptController()>
c00289c1:	83 c4 10             	add    esp,0x10
c00289c4:	90                   	nop
c00289c5:	83 c4 0c             	add    esp,0xc
c00289c8:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c00289ca <APIC::~APIC()>:
c00289ca:	83 ec 0c             	sub    esp,0xc
c00289cd:	83 ec 0c             	sub    esp,0xc
c00289d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00289d4:	e8 cd ff ff ff       	call   c00289a6 <APIC::~APIC()>
c00289d9:	83 c4 10             	add    esp,0x10
c00289dc:	83 ec 08             	sub    esp,0x8
c00289df:	68 58 21 00 00       	push   0x2158
c00289e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00289e8:	e8 48 a0 fe ff       	call   c0012a35 <operator delete(void*, unsigned long)>
c00289ed:	83 c4 10             	add    esp,0x10
c00289f0:	83 c4 0c             	add    esp,0xc
c00289f3:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c00289f4 <PIC::~PIC()>:
c00289f4:	83 ec 0c             	sub    esp,0xc
c00289f7:	ba b8 c9 02 c0       	mov    edx,0xc002c9b8
c00289fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a00:	89 10                	mov    DWORD PTR [eax],edx
c0028a02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a06:	83 ec 0c             	sub    esp,0xc
c0028a09:	50                   	push   eax
c0028a0a:	e8 2f bf fe ff       	call   c001493e <InterruptController::~InterruptController()>
c0028a0f:	83 c4 10             	add    esp,0x10
c0028a12:	90                   	nop
c0028a13:	83 c4 0c             	add    esp,0xc
c0028a16:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c0028a18 <PIC::~PIC()>:
c0028a18:	83 ec 0c             	sub    esp,0xc
c0028a1b:	83 ec 0c             	sub    esp,0xc
c0028a1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028a22:	e8 cd ff ff ff       	call   c00289f4 <PIC::~PIC()>
c0028a27:	83 c4 10             	add    esp,0x10
c0028a2a:	83 ec 08             	sub    esp,0x8
c0028a2d:	68 58 21 00 00       	push   0x2158
c0028a32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028a36:	e8 fa 9f fe ff       	call   c0012a35 <operator delete(void*, unsigned long)>
c0028a3b:	83 c4 10             	add    esp,0x10
c0028a3e:	83 c4 0c             	add    esp,0xc
c0028a41:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0028a42 <APICTimer::~APICTimer()>:
c0028a42:	83 ec 0c             	sub    esp,0xc
c0028a45:	ba 0c ca 02 c0       	mov    edx,0xc002ca0c
c0028a4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a4e:	89 10                	mov    DWORD PTR [eax],edx
c0028a50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a54:	83 ec 0c             	sub    esp,0xc
c0028a57:	50                   	push   eax
c0028a58:	e8 d9 dd fe ff       	call   c0016836 <Timer::~Timer()>
c0028a5d:	83 c4 10             	add    esp,0x10
c0028a60:	90                   	nop
c0028a61:	83 c4 0c             	add    esp,0xc
c0028a64:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0028a66 <APICTimer::~APICTimer()>:
c0028a66:	83 ec 0c             	sub    esp,0xc
c0028a69:	83 ec 0c             	sub    esp,0xc
c0028a6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028a70:	e8 cd ff ff ff       	call   c0028a42 <APICTimer::~APICTimer()>
c0028a75:	83 c4 10             	add    esp,0x10
c0028a78:	83 ec 08             	sub    esp,0x8
c0028a7b:	68 60 01 00 00       	push   0x160
c0028a80:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028a84:	e8 ac 9f fe ff       	call   c0012a35 <operator delete(void*, unsigned long)>
c0028a89:	83 c4 10             	add    esp,0x10
c0028a8c:	83 c4 0c             	add    esp,0xc
c0028a8f:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0028a90 <PIT::~PIT()>:
c0028a90:	83 ec 0c             	sub    esp,0xc
c0028a93:	ba 5c ca 02 c0       	mov    edx,0xc002ca5c
c0028a98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a9c:	89 10                	mov    DWORD PTR [eax],edx
c0028a9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028aa2:	83 ec 0c             	sub    esp,0xc
c0028aa5:	50                   	push   eax
c0028aa6:	e8 8b dd fe ff       	call   c0016836 <Timer::~Timer()>
c0028aab:	83 c4 10             	add    esp,0x10
c0028aae:	90                   	nop
c0028aaf:	83 c4 0c             	add    esp,0xc
c0028ab2:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0028ab4 <PIT::~PIT()>:
c0028ab4:	83 ec 0c             	sub    esp,0xc
c0028ab7:	83 ec 0c             	sub    esp,0xc
c0028aba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028abe:	e8 cd ff ff ff       	call   c0028a90 <PIT::~PIT()>
c0028ac3:	83 c4 10             	add    esp,0x10
c0028ac6:	83 ec 08             	sub    esp,0x8
c0028ac9:	68 5c 01 00 00       	push   0x15c
c0028ace:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ad2:	e8 5e 9f fe ff       	call   c0012a35 <operator delete(void*, unsigned long)>
c0028ad7:	83 c4 10             	add    esp,0x10
c0028ada:	83 c4 0c             	add    esp,0xc
c0028add:	c3                   	ret    
